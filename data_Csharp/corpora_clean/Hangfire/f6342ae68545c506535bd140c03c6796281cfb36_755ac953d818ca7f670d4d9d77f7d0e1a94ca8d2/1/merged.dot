digraph  {
n138 [label="HangFire.Redis.Tests.RedisConnectionFacts", span=""];
n139 [label="HangFire.Redis.RedisConnection", span=""];
n140 [label="HangFire.Redis.RedisConnection", span=""];
n141 [label="HangFire.Redis.RedisConnection", span=""];
n142 [label="HangFire.Redis.RedisConnection", span=""];
n143 [label="HangFire.Redis.RedisConnection", span=""];
n0 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="10-10", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()"];
n1 [label="UseConnection(\r\n                connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null)))", span="12-14", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()"];
n2 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="10-10", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()"];
n3 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection"];
n4 [label="Entry lambda expression", span="13-14", cluster="lambda expression"];
n5 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null))", span="13-14", cluster="lambda expression"];
n9 [label="connection.GetStateData(null)", span="14-14", cluster="lambda expression"];
n6 [label="Exit lambda expression", span="13-14", cluster="lambda expression"];
n7 [label="Entry Unk.>", span="", cluster="Unk.>"];
n8 [label="Entry lambda expression", span="14-14", cluster="lambda expression"];
n10 [label="Exit lambda expression", span="14-14", cluster="lambda expression"];
n11 [label="Entry HangFire.Redis.RedisConnection.GetStateData(string)", span="204-204", cluster="HangFire.Redis.RedisConnection.GetStateData(string)"];
n12 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", span="18-18", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()"];
n13 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetStateData(''random-id'');\r\n                Assert.Null(result);\r\n            })", span="20-24", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()"];
n14 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", span="18-18", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()"];
n15 [label="Entry lambda expression", span="20-24", cluster="lambda expression"];
n16 [label="var result = connection.GetStateData(''random-id'')", span="22-22", cluster="lambda expression"];
n17 [label="Assert.Null(result)", span="23-23", cluster="lambda expression"];
n18 [label="Exit lambda expression", span="20-24", cluster="lambda expression"];
n19 [label="Entry Unk.Null", span="", cluster="Unk.Null"];
n20 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", span="28-28", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()"];
n21 [label="UseConnections((redis, connection) =>\r\n            {\r\n                redis.SetRangeInHash(\r\n                    ''hangfire:job:my-job:state'',\r\n                    new Dictionary<string, string>\r\n                    {\r\n                        { ''State'', ''Name'' },\r\n                        { ''Reason'', ''Reason'' },\r\n                        { ''Key'', ''Value'' }\r\n                    });\r\n\r\n                var result = connection.GetStateData(''my-job'');\r\n\r\n                Assert.NotNull(result);\r\n                Assert.Equal(''Name'', result.Name);\r\n                Assert.Equal(''Reason'', result.Reason);\r\n                Assert.Equal(''Value'', result.Data[''Key'']);\r\n            })", span="30-47", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()"];
n22 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", span="28-28", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()"];
n23 [label="Entry Unk.UseConnections", span="", cluster="Unk.UseConnections"];
n24 [label="Entry lambda expression", span="30-47", cluster="lambda expression"];
n25 [label="redis.SetRangeInHash(\r\n                    ''hangfire:job:my-job:state'',\r\n                    new Dictionary<string, string>\r\n                    {\r\n                        { ''State'', ''Name'' },\r\n                        { ''Reason'', ''Reason'' },\r\n                        { ''Key'', ''Value'' }\r\n                    })", span="32-39", cluster="lambda expression"];
n26 [label="var result = connection.GetStateData(''my-job'')", span="41-41", cluster="lambda expression"];
n32 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()"];
n33 [label="Entry Unk.SetRangeInHash", span="", cluster="Unk.SetRangeInHash"];
n27 [label="Assert.NotNull(result)", span="43-43", cluster="lambda expression"];
n28 [label="Assert.Equal(''Name'', result.Name)", span="44-44", cluster="lambda expression"];
n29 [label="Assert.Equal(''Reason'', result.Reason)", span="45-45", cluster="lambda expression"];
n30 [label="Assert.Equal(''Value'', result.Data[''Key''])", span="46-46", cluster="lambda expression"];
n34 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull"];
n35 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
n31 [label="Exit lambda expression", span="30-47", cluster="lambda expression"];
n36 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", span="51-51", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()"];
n37 [label="UseConnection(connection =>\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetAllItemsFromSet(null)))", span="53-54", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()"];
n38 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", span="51-51", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()"];
n39 [label="Entry lambda expression", span="53-54", cluster="lambda expression"];
n40 [label="Assert.Throws<ArgumentNullException>(() => connection.GetAllItemsFromSet(null))", span="54-54", cluster="lambda expression"];
n43 [label="connection.GetAllItemsFromSet(null)", span="54-54", cluster="lambda expression"];
n41 [label="Exit lambda expression", span="53-54", cluster="lambda expression"];
n42 [label="Entry lambda expression", span="54-54", cluster="lambda expression"];
n44 [label="Exit lambda expression", span="54-54", cluster="lambda expression"];
n45 [label="Entry HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", span="240-240", cluster="HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)"];
n46 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", span="58-58", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()"];
n47 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllItemsFromSet(''some-set'');\r\n\r\n                Assert.NotNull(result);\r\n                Assert.Equal(0, result.Count);\r\n            })", span="60-66", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()"];
n48 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", span="58-58", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()"];
n49 [label="Entry lambda expression", span="60-66", cluster="lambda expression"];
n50 [label="var result = connection.GetAllItemsFromSet(''some-set'')", span="62-62", cluster="lambda expression"];
n51 [label="Assert.NotNull(result)", span="64-64", cluster="lambda expression"];
n52 [label="Assert.Equal(0, result.Count)", span="65-65", cluster="lambda expression"];
n53 [label="Exit lambda expression", span="60-66", cluster="lambda expression"];
n54 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", span="70-70", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()"];
n55 [label="UseConnections((redis, connection) =>\r\n            {\r\n                // Arrange\r\n                redis.AddItemToSortedSet(''hangfire:some-set'', ''1'');\r\n                redis.AddItemToSortedSet(''hangfire:some-set'', ''2'');\r\n\r\n                // Act\r\n                var result = connection.GetAllItemsFromSet(''some-set'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result.Count);\r\n                Assert.Contains(''1'', result);\r\n                Assert.Contains(''2'', result);\r\n            })", span="72-85", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()"];
n56 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", span="70-70", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()"];
n57 [label="Entry lambda expression", span="72-85", cluster="lambda expression"];
n58 [label="redis.AddItemToSortedSet(''hangfire:some-set'', ''1'')", span="75-75", cluster="lambda expression"];
n59 [label="redis.AddItemToSortedSet(''hangfire:some-set'', ''2'')", span="76-76", cluster="lambda expression"];
n60 [label="var result = connection.GetAllItemsFromSet(''some-set'')", span="79-79", cluster="lambda expression"];
n65 [label="Entry Unk.AddItemToSortedSet", span="", cluster="Unk.AddItemToSortedSet"];
n61 [label="Assert.Equal(2, result.Count)", span="82-82", cluster="lambda expression"];
n62 [label="Assert.Contains(''1'', result)", span="83-83", cluster="lambda expression"];
n63 [label="Assert.Contains(''2'', result)", span="84-84", cluster="lambda expression"];
n66 [label="Entry Unk.Contains", span="", cluster="Unk.Contains"];
n64 [label="Exit lambda expression", span="72-85", cluster="lambda expression"];
n67 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="89-89", cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()"];
n68 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(null, new Dictionary<string, string>()));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="91-97", cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()"];
n69 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="89-89", cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()"];
n70 [label="Entry lambda expression", span="91-97", cluster="lambda expression"];
n71 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(null, new Dictionary<string, string>()))", span="93-94", cluster="lambda expression"];
n75 [label="connection.SetRangeInHash(null, new Dictionary<string, string>())", span="94-94", cluster="lambda expression"];
n72 [label="Assert.Equal(''key'', exception.ParamName)", span="96-96", cluster="lambda expression"];
n74 [label="Entry lambda expression", span="94-94", cluster="lambda expression"];
n73 [label="Exit lambda expression", span="91-97", cluster="lambda expression"];
n76 [label="Exit lambda expression", span="94-94", cluster="lambda expression"];
n77 [label="Entry HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="255-255", cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)"];
n78 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="101-101", cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()"];
n79 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(''some-hash'', null));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="103-109", cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()"];
n80 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="101-101", cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()"];
n81 [label="Entry lambda expression", span="103-109", cluster="lambda expression"];
n82 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(''some-hash'', null))", span="105-106", cluster="lambda expression"];
n86 [label="connection.SetRangeInHash(''some-hash'', null)", span="106-106", cluster="lambda expression"];
n83 [label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="108-108", cluster="lambda expression"];
n85 [label="Entry lambda expression", span="106-106", cluster="lambda expression"];
n84 [label="Exit lambda expression", span="103-109", cluster="lambda expression"];
n87 [label="Exit lambda expression", span="106-106", cluster="lambda expression"];
n88 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", span="113-113", cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()"];
n89 [label="UseConnections((redis, connection) =>\r\n            {\r\n                connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                });\r\n\r\n                var hash = redis.GetAllEntriesFromHash(''hangfire:some-hash'');\r\n                Assert.Equal(''Value1'', hash[''Key1'']);\r\n                Assert.Equal(''Value2'', hash[''Key2'']);\r\n            })", span="115-126", cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()"];
n90 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", span="113-113", cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()"];
n91 [label="Entry lambda expression", span="115-126", cluster="lambda expression"];
n92 [label="connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="117-121", cluster="lambda expression"];
n93 [label="var hash = redis.GetAllEntriesFromHash(''hangfire:some-hash'')", span="123-123", cluster="lambda expression"];
n94 [label="Assert.Equal(''Value1'', hash[''Key1''])", span="124-124", cluster="lambda expression"];
n97 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash"];
n95 [label="Assert.Equal(''Value2'', hash[''Key2''])", span="125-125", cluster="lambda expression"];
n96 [label="Exit lambda expression", span="115-126", cluster="lambda expression"];
n98 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", span="130-130", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()"];
n99 [label="UseConnection(connection =>\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetAllEntriesFromHash(null)))", span="132-133", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()"];
n100 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", span="130-130", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()"];
n101 [label="Entry lambda expression", span="132-133", cluster="lambda expression"];
n102 [label="Assert.Throws<ArgumentNullException>(() => connection.GetAllEntriesFromHash(null))", span="133-133", cluster="lambda expression"];
n105 [label="connection.GetAllEntriesFromHash(null)", span="133-133", cluster="lambda expression"];
n103 [label="Exit lambda expression", span="132-133", cluster="lambda expression"];
n104 [label="Entry lambda expression", span="133-133", cluster="lambda expression"];
n106 [label="Exit lambda expression", span="133-133", cluster="lambda expression"];
n107 [label="Entry HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", span="263-263", cluster="HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)"];
n108 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", span="137-137", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()"];
n109 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllEntriesFromHash(''some-hash'');\r\n                Assert.Null(result);\r\n            })", span="139-143", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()"];
n110 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", span="137-137", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()"];
n111 [label="Entry lambda expression", span="139-143", cluster="lambda expression"];
n112 [label="var result = connection.GetAllEntriesFromHash(''some-hash'')", span="141-141", cluster="lambda expression"];
n113 [label="Assert.Null(result)", span="142-142", cluster="lambda expression"];
n114 [label="Exit lambda expression", span="139-143", cluster="lambda expression"];
n115 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", span="147-147", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()"];
n116 [label="UseConnections((redis, connection) =>\r\n            {\r\n                // Arrange\r\n                redis.SetRangeInHash(''hangfire:some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetAllEntriesFromHash(''some-hash'');\r\n\r\n                // Assert\r\n                Assert.NotNull(result);\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="149-165", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()"];
n117 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", span="147-147", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()"];
n118 [label="Entry lambda expression", span="149-165", cluster="lambda expression"];
n119 [label="redis.SetRangeInHash(''hangfire:some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="152-156", cluster="lambda expression"];
n120 [label="var result = connection.GetAllEntriesFromHash(''some-hash'')", span="159-159", cluster="lambda expression"];
n121 [label="Assert.NotNull(result)", span="162-162", cluster="lambda expression"];
n122 [label="Assert.Equal(''Value1'', result[''Key1''])", span="163-163", cluster="lambda expression"];
n123 [label="Assert.Equal(''Value2'', result[''Key2''])", span="164-164", cluster="lambda expression"];
n124 [label="Exit lambda expression", span="149-165", cluster="lambda expression"];
n125 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", span="168-168", cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)"];
n126 [label="var redis = RedisUtils.CreateClient()", span="170-170", cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)"];
n128 [label="action(redis, connection)", span="173-173", cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)"];
n127 [label="var connection = new RedisConnection(redis)", span="171-171", cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)"];
n130 [label="Entry HangFire.Redis.Tests.RedisUtils.CreateClient()", span="15-15", cluster="HangFire.Redis.Tests.RedisUtils.CreateClient()"];
n131 [label="Entry HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", span="32-32", cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)"];
n129 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", span="168-168", cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)"];
n132 [label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0", cluster="System.Action<T1, T2>.Invoke(T1, T2)"];
n133 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", span="177-177", cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)"];
n134 [label="var connection = new RedisConnection(RedisUtils.CreateClient())", span="179-179", cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)"];
n135 [label="action(connection)", span="181-181", cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)"];
n136 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", span="177-177", cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)"];
n137 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)"];
d38 [label="_component.Setup(x => x.Execute(It.IsAny<CancellationToken>())).Throws<InvalidOperationException>()", span="53-53", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_AutomaticallyRetries_ComponentInvocation_OnException()", color=green, community=0];
d114 [label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", span=""];
d37 [label="Entry Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_AutomaticallyRetries_ComponentInvocation_OnException()", span="51-51", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_AutomaticallyRetries_ComponentInvocation_OnException()"];
d39 [label="var wrapper = CreateWrapper()", span="54-54", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_AutomaticallyRetries_ComponentInvocation_OnException()", color=green, community=0];
d43 [label="Entry Unk.Setup", span="", cluster="Unk.Setup"];
d11 [label="Entry Unk.>", span="", cluster="Unk.>"];
d45 [label="Entry lambda expression", span="53-53", cluster="lambda expression"];
d40 [label="Assert.Throws<InvalidOperationException>(() => wrapper.Execute(_cts.Token))", span="56-56", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_AutomaticallyRetries_ComponentInvocation_OnException()", color=green, community=0];
d21 [label="Entry Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.CreateWrapper()", span="100-100", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.CreateWrapper()"];
d49 [label="wrapper.Execute(_cts.Token)", span="56-56", cluster="lambda expression", color=green, community=0];
d41 [label="_component.Verify(x => x.Execute(\r\n                It.IsAny<CancellationToken>()),\r\n                Times.Exactly(_maxRetryAttempts))", span="58-60", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_AutomaticallyRetries_ComponentInvocation_OnException()", color=green, community=0];
d48 [label="Entry lambda expression", span="56-56", cluster="lambda expression"];
d115 [label=wrapper, span=""];
d50 [label="Exit lambda expression", span="56-56", cluster="lambda expression"];
d28 [label="Entry Hangfire.Server.AutomaticRetryServerComponentWrapper.Execute(System.Threading.CancellationToken)", span="52-52", cluster="Hangfire.Server.AutomaticRetryServerComponentWrapper.Execute(System.Threading.CancellationToken)"];
d42 [label="Exit Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_AutomaticallyRetries_ComponentInvocation_OnException()", span="51-51", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_AutomaticallyRetries_ComponentInvocation_OnException()"];
d44 [label="Entry Unk.Exactly", span="", cluster="Unk.Exactly"];
d29 [label="Entry Unk.Verify", span="", cluster="Unk.Verify"];
d46 [label="x.Execute(It.IsAny<CancellationToken>())", span="53-53", cluster="lambda expression", color=green, community=0];
d47 [label="Exit lambda expression", span="53-53", cluster="lambda expression"];
d33 [label="Entry Unk.Execute", span="", cluster="Unk.Execute"];
d52 [label="x.Execute(\r\n                It.IsAny<CancellationToken>())", span="58-59", cluster="lambda expression", color=green, community=0];
d53 [label="Exit lambda expression", span="58-59", cluster="lambda expression"];
d55 [label="_component.Setup(x => x.Execute(It.IsAny<CancellationToken>())).Throws<InvalidOperationException>()", span="66-66", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldNotRetry_ComponentInvocation_WhenMaxRetryAttemptsIsZero()", color=green, community=0];
d54 [label="Entry Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldNotRetry_ComponentInvocation_WhenMaxRetryAttemptsIsZero()", span="64-64", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldNotRetry_ComponentInvocation_WhenMaxRetryAttemptsIsZero()"];
d56 [label="_maxRetryAttempts = 0", span="67-67", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldNotRetry_ComponentInvocation_WhenMaxRetryAttemptsIsZero()", color=green, community=0];
d61 [label="Entry lambda expression", span="66-66", cluster="lambda expression"];
d57 [label="var wrapper = CreateWrapper()", span="68-68", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldNotRetry_ComponentInvocation_WhenMaxRetryAttemptsIsZero()", color=green, community=0];
d58 [label="Assert.Throws<InvalidOperationException>(() => wrapper.Execute(_cts.Token))", span="70-70", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldNotRetry_ComponentInvocation_WhenMaxRetryAttemptsIsZero()"];
d65 [label="wrapper.Execute(_cts.Token)", span="70-70", cluster="lambda expression"];
d62 [label="x.Execute(It.IsAny<CancellationToken>())", span="66-66", cluster="lambda expression", color=green, community=0];
d63 [label="Exit lambda expression", span="66-66", cluster="lambda expression"];
d1 [label="_component = new Mock<IServerComponent>()", span="17-17", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.AutomaticRetryServerComponentWrapperFacts()"];
d2 [label="_maxRetryAttempts = 3", span="18-18", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.AutomaticRetryServerComponentWrapperFacts()"];
d3 [label="_cts = new CancellationTokenSource()", span="19-19", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.AutomaticRetryServerComponentWrapperFacts()"];
d18 [label="var wrapper = CreateWrapper()", span="35-35", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.InnerComponent_ReturnsGivenComponent()"];
d19 [label="Assert.Same(_component.Object, wrapper.InnerComponent)", span="37-37", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.InnerComponent_ReturnsGivenComponent()"];
d24 [label="var wrapper = CreateWrapper()", span="43-43", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_CallsComponents_ExecuteMethod()"];
d25 [label="wrapper.Execute(_cts.Token)", span="45-45", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_CallsComponents_ExecuteMethod()"];
d26 [label="_component.Verify(x => x.Execute(It.Is<CancellationToken>(y => y == _cts.Token)))", span="47-47", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_CallsComponents_ExecuteMethod()"];
d31 [label="x.Execute(It.Is<CancellationToken>(y => y == _cts.Token))", span="47-47", cluster="lambda expression"];
d35 [label="y == _cts.Token", span="47-47", cluster="lambda expression"];
d59 [label="_component.Verify(x => x.Execute(\r\n                It.IsAny<CancellationToken>()),\r\n                Times.Once)", span="72-74", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldNotRetry_ComponentInvocation_WhenMaxRetryAttemptsIsZero()"];
d71 [label="var wrapper = CreateWrapper()", span="80-80", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldBeInterrupted_ByCancellationToken()"];
d72 [label="_component.Setup(x => x.Execute(It.IsAny<CancellationToken>())).Throws<InvalidOperationException>()", span="81-81", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldBeInterrupted_ByCancellationToken()"];
d73 [label="_cts.Cancel()", span="82-82", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldBeInterrupted_ByCancellationToken()"];
d74 [label="Assert.Throws<OperationCanceledException>(() => wrapper.Execute(_cts.Token))", span="84-84", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldBeInterrupted_ByCancellationToken()"];
d82 [label="wrapper.Execute(_cts.Token)", span="84-84", cluster="lambda expression"];
d75 [label="_component.Verify(x => x.Execute(It.IsAny<CancellationToken>()), Times.Once)", span="86-86", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldBeInterrupted_ByCancellationToken()"];
d88 [label="_component.Setup(x => x.Execute(It.IsAny<CancellationToken>())).Throws<OperationCanceledException>()", span="92-92", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_DoesNotCauseAutomaticRetry_OnOperationCanceledException()"];
d89 [label="var wrapper = CreateWrapper()", span="93-93", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_DoesNotCauseAutomaticRetry_OnOperationCanceledException()"];
d90 [label="Assert.Throws<OperationCanceledException>(() => wrapper.Execute(_cts.Token))", span="95-95", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_DoesNotCauseAutomaticRetry_OnOperationCanceledException()"];
d97 [label="wrapper.Execute(_cts.Token)", span="95-95", cluster="lambda expression"];
d91 [label="_component.Verify(x => x.Execute(It.IsAny<CancellationToken>()), Times.Once)", span="97-97", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_DoesNotCauseAutomaticRetry_OnOperationCanceledException()"];
d102 [label="return new AutomaticRetryServerComponentWrapper(_component.Object)\r\n            {\r\n                MaxRetryAttempts = _maxRetryAttempts,\r\n                DelayCallback = x => TimeSpan.Zero\r\n            };", span="102-106", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.CreateWrapper()"];
d8 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n// ReSharper disable once AssignNullToNotNullAttribute\r\n                () => new AutomaticRetryServerComponentWrapper(null))", span="25-27", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Ctor_ThrowsAnException_WhenInnerComponentIsNull()"];
d68 [label="x.Execute(\r\n                It.IsAny<CancellationToken>())", span="72-73", cluster="lambda expression"];
d79 [label="x.Execute(It.IsAny<CancellationToken>())", span="81-81", cluster="lambda expression"];
d85 [label="x.Execute(It.IsAny<CancellationToken>())", span="86-86", cluster="lambda expression"];
d94 [label="x.Execute(It.IsAny<CancellationToken>())", span="92-92", cluster="lambda expression"];
d100 [label="x.Execute(It.IsAny<CancellationToken>())", span="97-97", cluster="lambda expression"];
d103 [label="Exit Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.CreateWrapper()", span="100-100", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.CreateWrapper()"];
d60 [label="Exit Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldNotRetry_ComponentInvocation_WhenMaxRetryAttemptsIsZero()", span="64-64", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldNotRetry_ComponentInvocation_WhenMaxRetryAttemptsIsZero()"];
d64 [label="Entry lambda expression", span="70-70", cluster="lambda expression"];
d116 [label=wrapper, span=""];
d66 [label="Exit lambda expression", span="70-70", cluster="lambda expression"];
d0 [label="Entry Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.AutomaticRetryServerComponentWrapperFacts()", span="15-15", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.AutomaticRetryServerComponentWrapperFacts()"];
d5 [label="Entry Mock<IServerComponent>.cstr", span="", cluster="Mock<IServerComponent>.cstr"];
d4 [label="Exit Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.AutomaticRetryServerComponentWrapperFacts()", span="15-15", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.AutomaticRetryServerComponentWrapperFacts()"];
d6 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()"];
d17 [label="Entry Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.InnerComponent_ReturnsGivenComponent()", span="33-33", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.InnerComponent_ReturnsGivenComponent()"];
d20 [label="Exit Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.InnerComponent_ReturnsGivenComponent()", span="33-33", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.InnerComponent_ReturnsGivenComponent()"];
d22 [label="Entry Unk.Same", span="", cluster="Unk.Same"];
d23 [label="Entry Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_CallsComponents_ExecuteMethod()", span="41-41", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_CallsComponents_ExecuteMethod()"];
d27 [label="Exit Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_CallsComponents_ExecuteMethod()", span="41-41", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_CallsComponents_ExecuteMethod()"];
d30 [label="Entry lambda expression", span="47-47", cluster="lambda expression"];
d32 [label="Exit lambda expression", span="47-47", cluster="lambda expression"];
d34 [label="Entry lambda expression", span="47-47", cluster="lambda expression"];
d36 [label="Exit lambda expression", span="47-47", cluster="lambda expression"];
d67 [label="Entry lambda expression", span="72-73", cluster="lambda expression"];
d70 [label="Entry Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldBeInterrupted_ByCancellationToken()", span="78-78", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldBeInterrupted_ByCancellationToken()"];
d78 [label="Entry lambda expression", span="81-81", cluster="lambda expression"];
d77 [label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0", cluster="System.Threading.CancellationTokenSource.Cancel()"];
d81 [label="Entry lambda expression", span="84-84", cluster="lambda expression"];
d117 [label=wrapper, span=""];
d83 [label="Exit lambda expression", span="84-84", cluster="lambda expression"];
d76 [label="Exit Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldBeInterrupted_ByCancellationToken()", span="78-78", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldBeInterrupted_ByCancellationToken()"];
d84 [label="Entry lambda expression", span="86-86", cluster="lambda expression"];
d87 [label="Entry Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_DoesNotCauseAutomaticRetry_OnOperationCanceledException()", span="90-90", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_DoesNotCauseAutomaticRetry_OnOperationCanceledException()"];
d93 [label="Entry lambda expression", span="92-92", cluster="lambda expression"];
d96 [label="Entry lambda expression", span="95-95", cluster="lambda expression"];
d118 [label=wrapper, span=""];
d98 [label="Exit lambda expression", span="95-95", cluster="lambda expression"];
d92 [label="Exit Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_DoesNotCauseAutomaticRetry_OnOperationCanceledException()", span="90-90", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_DoesNotCauseAutomaticRetry_OnOperationCanceledException()"];
d99 [label="Entry lambda expression", span="97-97", cluster="lambda expression"];
d104 [label="Entry AutomaticRetryServerComponentWrapper.cstr", span="", cluster="AutomaticRetryServerComponentWrapper.cstr"];
d7 [label="Entry Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Ctor_ThrowsAnException_WhenInnerComponentIsNull()", span="23-23", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Ctor_ThrowsAnException_WhenInnerComponentIsNull()"];
d9 [label="Assert.Equal(''innerComponent'', exception.ParamName)", span="29-29", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Ctor_ThrowsAnException_WhenInnerComponentIsNull()"];
d13 [label="Entry lambda expression", span="27-27", cluster="lambda expression"];
d69 [label="Exit lambda expression", span="72-73", cluster="lambda expression"];
d80 [label="Exit lambda expression", span="81-81", cluster="lambda expression"];
d86 [label="Exit lambda expression", span="86-86", cluster="lambda expression"];
d95 [label="Exit lambda expression", span="92-92", cluster="lambda expression"];
d101 [label="Exit lambda expression", span="97-97", cluster="lambda expression"];
d10 [label="Exit Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Ctor_ThrowsAnException_WhenInnerComponentIsNull()", span="23-23", cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Ctor_ThrowsAnException_WhenInnerComponentIsNull()"];
d12 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
d15 [label="Exit lambda expression", span="27-27", cluster="lambda expression"];
d14 [label="new AutomaticRetryServerComponentWrapper(null)", span="27-27", cluster="lambda expression"];
d16 [label="Entry Hangfire.Server.AutomaticRetryServerComponentWrapper.AutomaticRetryServerComponentWrapper(Hangfire.Server.IServerComponent)", span="31-31", cluster="Hangfire.Server.AutomaticRetryServerComponentWrapper.AutomaticRetryServerComponentWrapper(Hangfire.Server.IServerComponent)"];
m0_86 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="RedisMonitoringApi.cs"];
m0_190 [label="Entry long.Parse(string)", span="0-0", cluster="long.Parse(string)", file="RedisMonitoringApi.cs"];
m0_247 [label="Entry HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", span="343-343", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", file="RedisMonitoringApi.cs"];
m0_248 [label="return UseConnection(redis =>\r\n            {\r\n                var jobIds = redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}'', queue),\r\n                    from,\r\n                    from + perPage - 1);\r\n\r\n                return GetJobsWithProperties(\r\n                    redis,\r\n                    jobIds,\r\n                    new[] { ''State'' },\r\n                    new[] { ''EnqueuedAt'', ''State'' },\r\n                    (job, jobData, state) => new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });\r\n            });", span="346-365", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_249 [label="Exit HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", span="343-343", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", file="RedisMonitoringApi.cs"];
m0_311 [label="Entry Dictionary<string, string>.cstr", span="", cluster="Dictionary<string, string>.cstr", file="RedisMonitoringApi.cs"];
m0_15 [label="return UseConnection(redis => \r\n                redis.GetListCount(String.Format(''hangfire:queue:{0}'', queue)));", span="47-48", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", file="RedisMonitoringApi.cs", color=green, community=0];
m0_274 [label="Entry HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", span="457-457", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_329 [label="var i = 0", span="462-462", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_338 [label="i < dates.Count", span="472-472", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_334 [label="var keys = dates.Select(x => String.Format(''hangfire:stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))).ToList()", span="468-468", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_328 [label="var dates = new List<DateTime>()", span="461-461", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_336 [label="var result = new Dictionary<DateTime, long>()", span="471-471", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_330 [label="i < 24", span="462-462", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_333 [label="i++", span="462-462", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_337 [label="var i = 0", span="472-472", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_343 [label="i++", span="472-472", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_339 [label="long value", span="474-474", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_344 [label="return result;", span="483-483", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_331 [label="dates.Add(endDate)", span="464-464", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_327 [label="var endDate = DateTime.UtcNow", span="460-460", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_335 [label="var valuesMap = redis.GetValuesMap(keys)", span="469-469", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_342 [label="result.Add(dates[i], value)", span="480-480", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_332 [label="endDate = endDate.AddHours(-1)", span="465-465", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_340 [label="!long.TryParse(valuesMap[valuesMap.Keys.ElementAt(i)], out value)", span="475-475", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_341 [label="value = 0", span="477-477", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_345 [label="Exit HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", span="457-457", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_122 [label="Entry HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", span="486-486", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_367 [label="i < stringDates.Count", span="505-505", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_363 [label="var keys = stringDates.Select(x => String.Format(''hangfire:stats:{0}:{1}'', type, x)).ToList()", span="500-500", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_362 [label="var stringDates = dates.Select(x => x.ToString(''yyyy-MM-dd'')).ToList()", span="499-499", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_358 [label="var dates = new List<DateTime>()", span="491-491", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_365 [label="var result = new Dictionary<DateTime, long>()", span="504-504", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_356 [label="var endDate = DateTime.UtcNow.Date", span="489-489", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_364 [label="var valuesMap = redis.GetValuesMap(keys)", span="502-502", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_366 [label="var i = 0", span="505-505", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_372 [label="i++", span="505-505", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_368 [label="long value", span="507-507", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_373 [label="return result;", span="515-515", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_360 [label="dates.Add(endDate)", span="495-495", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_359 [label="startDate <= endDate", span="493-493", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_357 [label="var startDate = endDate.AddDays(-7)", span="490-490", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_371 [label="result.Add(dates[i], value)", span="512-512", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_361 [label="endDate = endDate.AddDays(-1)", span="496-496", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_369 [label="!long.TryParse(valuesMap[valuesMap.Keys.ElementAt(i)], out value)", span="508-508", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_370 [label="value = 0", span="510-510", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_374 [label="Exit HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", span="486-486", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs"];
m0_165 [label="Entry HangFire.Common.JobHelper.FromStringTimestamp(string)", span="55-55", cluster="HangFire.Common.JobHelper.FromStringTimestamp(string)", file="RedisMonitoringApi.cs"];
m0_257 [label="Entry HangFire.Redis.RedisMonitoringApi.FetchedJobs(string, int, int)", span="368-368", cluster="HangFire.Redis.RedisMonitoringApi.FetchedJobs(string, int, int)", file="RedisMonitoringApi.cs"];
m0_258 [label="return UseConnection(redis =>\r\n            {\r\n                var jobIds = redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}:dequeued'', queue),\r\n                    from, from + perPage - 1);\r\n\r\n                return GetJobsWithProperties(\r\n                    redis,\r\n                    jobIds,\r\n                    new[] { ''State'', ''Fetched'' },\r\n                    null,\r\n                    (job, jobData, state) => new FetchedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        FetchedAt = JobHelper.FromNullableStringTimestamp(jobData[1])\r\n                    });\r\n            });", span="371-388", cluster="HangFire.Redis.RedisMonitoringApi.FetchedJobs(string, int, int)", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_259 [label="Exit HangFire.Redis.RedisMonitoringApi.FetchedJobs(string, int, int)", span="368-368", cluster="HangFire.Redis.RedisMonitoringApi.FetchedJobs(string, int, int)", file="RedisMonitoringApi.cs"];
m0_349 [label="Entry Unk.TryParse", span="", cluster="Unk.TryParse", file="RedisMonitoringApi.cs"];
m0_61 [label="Entry HangFire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", file="RedisMonitoringApi.cs"];
m0_56 [label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", file="RedisMonitoringApi.cs"];
m0_62 [label="Entry HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", span="60-60", cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", file="RedisMonitoringApi.cs"];
m0_164 [label="Entry int.Parse(string)", span="0-0", cluster="int.Parse(string)", file="RedisMonitoringApi.cs"];
m0_275 [label="Entry HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", span="396-396", cluster="HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", file="RedisMonitoringApi.cs"];
m0_276 [label="return UseConnection(redis => GetHourlyTimelineStats(redis, ''failed''));", span="398-398", cluster="HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_277 [label="Exit HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", span="396-396", cluster="HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", file="RedisMonitoringApi.cs"];
m0_515 [label="Entry Unk.GetClient", span="", cluster="Unk.GetClient", file="RedisMonitoringApi.cs"];
m0_433 [label="Entry HangFire.Redis.RedisMonitoringApi.GetStatistics()", span="580-580", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="RedisMonitoringApi.cs"];
m0_434 [label="return UseConnection(redis =>\r\n            {\r\n                var stats = new StatisticsDto();\r\n\r\n                var queues = redis.GetAllItemsFromSet(''hangfire:queues'');\r\n\r\n                using (var pipeline = redis.CreatePipeline())\r\n                {\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:servers''),\r\n                        x => stats.Servers = x);\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:queues''),\r\n                        x => stats.Queues = x);\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:schedule''),\r\n                        x => stats.Scheduled = x);\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:processing''),\r\n                        x => stats.Processing = x);\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetValue(''hangfire:stats:succeeded''),\r\n                        x => stats.Succeeded = long.Parse(x ?? ''0''));\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:failed''),\r\n                        x => stats.Failed = x);\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetValue(''hangfire:stats:deleted''),\r\n                        x => stats.Deleted = long.Parse(x ?? ''0''));\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:recurring-jobs''),\r\n                        x => stats.Recurring = x);\r\n\r\n                    foreach (var queue in queues)\r\n                    {\r\n                        var queueName = queue;\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queueName)),\r\n                            x => stats.Enqueued += x);\r\n                    }\r\n\r\n                    pipeline.Flush();\r\n                }\r\n\r\n                return stats;\r\n            });", span="582-634", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_435 [label="Exit HangFire.Redis.RedisMonitoringApi.GetStatistics()", span="580-580", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="RedisMonitoringApi.cs"];
m0_22 [label="Entry System.Enum.HasFlag(System.Enum)", span="0-0", cluster="System.Enum.HasFlag(System.Enum)", file="RedisMonitoringApi.cs"];
m0_23 [label="Entry Unk.True", span="", cluster="Unk.True", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_24 [label="Entry Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.CreateTask_ReturnsATask_ThatCallsTheExecuteMethod_OfAGivenComponent()", span="39-39", cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.CreateTask_ReturnsATask_ThatCallsTheExecuteMethod_OfAGivenComponent()", file="RedisMonitoringApi.cs"];
m0_55 [label="Entry Unk.GetJobsWithProperties", span="", cluster="Unk.GetJobsWithProperties", file="RedisMonitoringApi.cs"];
m0_57 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="RedisMonitoringApi.cs"];
m0_421 [label="Entry KeyValuePair<string, T>.cstr", span="", cluster="KeyValuePair<string, T>.cstr", file="RedisMonitoringApi.cs"];
m0_91 [label="Entry JobList<ScheduledJobDto>.cstr", span="", cluster="JobList<ScheduledJobDto>.cstr", file="RedisMonitoringApi.cs"];
m0_88 [label="Entry Unk.CreatePipeline", span="", cluster="Unk.CreatePipeline", file="RedisMonitoringApi.cs"];
m0_522 [label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38", cluster="HangFire.Storage.InvocationData.Deserialize()", file="RedisMonitoringApi.cs"];
m0_516 [label="Entry Unk.action", span="", cluster="Unk.action", file="RedisMonitoringApi.cs"];
m0_402 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="RedisMonitoringApi.cs"];
m0_281 [label="Entry HangFire.Redis.RedisMonitoringApi.JobDetails(string)", span="401-401", cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="RedisMonitoringApi.cs"];
m0_282 [label="return UseConnection(redis =>\r\n            {\r\n                var job = redis.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', jobId));\r\n                if (job.Count == 0) return null;\r\n\r\n                var hiddenProperties = new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'', ''State'', ''CreatedAt'' };\r\n\r\n                var historyList = redis.GetAllItemsFromList(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId));\r\n\r\n                var history = historyList\r\n                    .Select(JobHelper.FromJson<Dictionary<string, string>>)\r\n                    .ToList();\r\n\r\n                var stateHistory = new List<StateHistoryDto>(history.Count);\r\n                foreach (var entry in history)\r\n                {\r\n                    var dto = new StateHistoryDto\r\n                    {\r\n                        StateName = entry[''State''],\r\n                        Reason = entry.ContainsKey(''Reason'') ? entry[''Reason''] : null,\r\n                        CreatedAt = JobHelper.FromStringTimestamp(entry[''CreatedAt'']),\r\n                    };\r\n\r\n                    // Each history item contains all of the information,\r\n                    // but other code should not know this. We'll remove\r\n                    // unwanted keys.\r\n                    var stateData = new Dictionary<string, string>(entry);\r\n                    stateData.Remove(''State'');\r\n                    stateData.Remove(''Reason'');\r\n                    stateData.Remove(''CreatedAt'');\r\n\r\n                    dto.Data = stateData;\r\n                    stateHistory.Add(dto);\r\n                }\r\n\r\n                // For compatibility\r\n                if (!job.ContainsKey(''Method'')) job.Add(''Method'', null);\r\n                if (!job.ContainsKey(''ParameterTypes'')) job.Add(''ParameterTypes'', null);\r\n\r\n                return new JobDetailsDto\r\n                {\r\n                    Job = TryToGetJob(job[''Type''], job[''Method''], job[''ParameterTypes''], job[''Arguments'']),\r\n                    CreatedAt =\r\n                        job.ContainsKey(''CreatedAt'')\r\n                            ? JobHelper.FromStringTimestamp(job[''CreatedAt''])\r\n                            : (DateTime?) null,\r\n                    Properties =\r\n                        job.Where(x => !hiddenProperties.Contains(x.Key)).ToDictionary(x => x.Key, x => x.Value),\r\n                    History = stateHistory\r\n                };\r\n            });", span="403-454", cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_283 [label="Exit HangFire.Redis.RedisMonitoringApi.JobDetails(string)", span="401-401", cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="RedisMonitoringApi.cs"];
m0_309 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="RedisMonitoringApi.cs"];
m0_5 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="RedisMonitoringApi.cs"];
m0_113 [label="Entry HangFire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", file="RedisMonitoringApi.cs"];
m0_423 [label="Entry Unk.selector", span="", cluster="Unk.selector", file="RedisMonitoringApi.cs"];
m0_427 [label="Entry HangFire.Redis.RedisMonitoringApi.SucceededListCount()", span="575-575", cluster="HangFire.Redis.RedisMonitoringApi.SucceededListCount()", file="RedisMonitoringApi.cs"];
m0_428 [label="return UseConnection(redis => redis.GetListCount(''hangfire:succeeded''));", span="577-577", cluster="HangFire.Redis.RedisMonitoringApi.SucceededListCount()", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_429 [label="Exit HangFire.Redis.RedisMonitoringApi.SucceededListCount()", span="575-575", cluster="HangFire.Redis.RedisMonitoringApi.SucceededListCount()", file="RedisMonitoringApi.cs"];
m0_407 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="RedisMonitoringApi.cs"];
m0_454 [label="Entry HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18", cluster="HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", file="RedisMonitoringApi.cs"];
m0_85 [label="Entry Unk.GetRangeWithScoresFromSortedSet", span="", cluster="Unk.GetRangeWithScoresFromSortedSet", file="RedisMonitoringApi.cs"];
m0_163 [label="Entry HangFire.Storage.Monitoring.ServerDto.ServerDto()", span="21-21", cluster="HangFire.Storage.Monitoring.ServerDto.ServerDto()", file="RedisMonitoringApi.cs"];
m0_35 [label="return UseConnection(redis => redis.GetSortedSetCount(''hangfire:processing''));", span="64-64", cluster="HangFire.Redis.RedisMonitoringApi.ProcessingCount()", file="RedisMonitoringApi.cs", color=green, community=0];
m0_36 [label="Exit HangFire.Redis.RedisMonitoringApi.ProcessingCount()", span="62-62", cluster="HangFire.Redis.RedisMonitoringApi.ProcessingCount()", file="RedisMonitoringApi.cs"];
m0_37 [label="Entry lambda expression", span="64-64", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_38 [label="redis.GetSortedSetCount(''hangfire:processing'')", span="64-64", cluster="lambda expression", file="RedisMonitoringApi.cs", color=green, community=0];
m0_39 [label="Exit lambda expression", span="64-64", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_307 [label="Entry List<StateHistoryDto>.cstr", span="", cluster="List<StateHistoryDto>.cstr", file="RedisMonitoringApi.cs"];
m0_315 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="RedisMonitoringApi.cs"];
m0_191 [label="Entry HangFire.Redis.RedisMonitoringApi.DeletedJobs(int, int)", span="263-263", cluster="HangFire.Redis.RedisMonitoringApi.DeletedJobs(int, int)", file="RedisMonitoringApi.cs"];
m0_192 [label="return UseConnection(redis =>\r\n            {\r\n                var deletedJobIds = redis.GetRangeFromList(\r\n                    ''hangfire:deleted'',\r\n                    from,\r\n                    from + count - 1);\r\n\r\n                return GetJobsWithProperties(\r\n                    redis,\r\n                    deletedJobIds,\r\n                    null,\r\n                    new[] { ''DeletedAt'', ''State'' },\r\n                    (job, jobData, state) => new DeletedJobDto\r\n                    {\r\n                        Job = job,\r\n                        DeletedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InDeletedState = DeletedState.StateName.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });\r\n            });", span="265-283", cluster="HangFire.Redis.RedisMonitoringApi.DeletedJobs(int, int)", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_193 [label="Exit HangFire.Redis.RedisMonitoringApi.DeletedJobs(int, int)", span="263-263", cluster="HangFire.Redis.RedisMonitoringApi.DeletedJobs(int, int)", file="RedisMonitoringApi.cs"];
m0_375 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="RedisMonitoringApi.cs"];
m0_29 [label="return UseConnection(redis => redis.GetSortedSetCount(''hangfire:failed''));", span="59-59", cluster="HangFire.Redis.RedisMonitoringApi.FailedCount()", file="RedisMonitoringApi.cs", color=green, community=0];
m0_222 [label="Entry HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", span="518-518", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs"];
m0_394 [label="return new JobList<T>(jobIds\r\n                .Select(x => new\r\n                {\r\n                    JobId = x,\r\n                    Job = jobs[x],\r\n                    Method = TryToGetJob(\r\n                        jobs[x][properties.Length],\r\n                        jobs[x][properties.Length + 1],\r\n                        jobs[x][properties.Length + 2],\r\n                        jobs[x][properties.Length + 3]),\r\n                    State = states.ContainsKey(x) ? states[x] : null\r\n                })\r\n                .Select(x => new KeyValuePair<string, T>(\r\n                    x.JobId,\r\n                    x.Job.TrueForAll(y => y == null)\r\n                        ? default(T)\r\n                        : selector(x.Method, x.Job, x.State)))\r\n                .ToList());", span="555-572", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_384 [label="var jobs = new Dictionary<string, List<string>>(jobIds.Count)", span="527-527", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs"];
m0_385 [label="var states = new Dictionary<string, List<string>>(jobIds.Count)", span="528-528", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs"];
m0_386 [label="properties = properties ?? new string[0]", span="530-530", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs"];
m0_393 [label="pipeline.Flush()", span="552-552", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs"];
m0_390 [label="pipeline.QueueCommand(\r\n                        x => x.GetValuesFromHash(\r\n                            String.Format(''hangfire:job:{0}'', id),\r\n                            properties.Union(new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'' }).ToArray()),\r\n                        x => { if (!jobs.ContainsKey(id)) jobs.Add(id, x); })", span="538-542", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_387 [label="var pipeline = redis.CreatePipeline()", span="532-532", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs"];
m0_389 [label="var id = jobId", span="536-536", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs"];
m0_391 [label="stateProperties != null", span="544-544", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs"];
m0_383 [label="return new JobList<T>(new List<KeyValuePair<string, T>>());", span="525-525", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs"];
m0_392 [label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(String.Format(''hangfire:job:{0}:state'', id), stateProperties),\r\n                            x => { if (!states.ContainsKey(id)) states.Add(id, x); })", span="546-548", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs"];
m0_382 [label="jobIds.Count == 0", span="525-525", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs"];
m0_388 [label=jobIds, span="534-534", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs"];
m0_395 [label="Exit HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", span="518-518", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs"];
m0_422 [label="Entry Unk.TrueForAll", span="", cluster="Unk.TrueForAll", file="RedisMonitoringApi.cs"];
m0_9 [label="Exit Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.CreateTask_ThrowsAnException_WhenComponentIsNull()", span="21-21", cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.CreateTask_ThrowsAnException_WhenComponentIsNull()", file="RedisMonitoringApi.cs"];
m0_512 [label="var redis = _connectionPool.GetClient()", span="639-639", cluster="HangFire.Redis.RedisMonitoringApi.UseConnection<T>(System.Func<IRedisClient, T>)", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_513 [label="return action(redis);", span="641-641", cluster="HangFire.Redis.RedisMonitoringApi.UseConnection<T>(System.Func<IRedisClient, T>)", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_514 [label="Exit HangFire.Redis.RedisMonitoringApi.UseConnection<T>(System.Func<IRedisClient, T>)", span="637-637", cluster="HangFire.Redis.RedisMonitoringApi.UseConnection<T>(System.Func<IRedisClient, T>)", file="RedisMonitoringApi.cs"];
m0_313 [label="Entry HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22", cluster="HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", file="RedisMonitoringApi.cs"];
m0_112 [label="Entry KeyValuePair<string, ScheduledJobDto>.cstr", span="", cluster="KeyValuePair<string, ScheduledJobDto>.cstr", file="RedisMonitoringApi.cs"];
m0_0 [label="Entry Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.ServerComponentExtensionsFacts()", span="14-14", cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.ServerComponentExtensionsFacts()", file="RedisMonitoringApi.cs"];
m0_1 [label="_component = new Mock<IServerComponent>()", span="16-16", cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.ServerComponentExtensionsFacts()", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_2 [label="_cts = new CancellationTokenSource()", span="17-17", cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.ServerComponentExtensionsFacts()", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_3 [label="Exit Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.ServerComponentExtensionsFacts()", span="14-14", cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.ServerComponentExtensionsFacts()", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_4 [label="Entry Mock<IServerComponent>.cstr", span="", cluster="Mock<IServerComponent>.cstr", file="RedisMonitoringApi.cs"];
m0_201 [label="Entry HangFire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7", cluster="HangFire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", file="RedisMonitoringApi.cs"];
m0_411 [label="Entry lambda expression", span="548-548", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_12 [label="Exit lambda expression", span="41-42", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_13 [label="Entry Unk.GetSortedSetCount", span="", cluster="Unk.GetSortedSetCount", file="RedisMonitoringApi.cs"];
m0_14 [label="Entry HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", span="45-45", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", file="RedisMonitoringApi.cs"];
m0_31 [label="Entry lambda expression", span="45-45", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_32 [label="redis.GetSortedSetCount(''hangfire:failed'')", span="59-59", cluster="lambda expression", file="RedisMonitoringApi.cs", color=green, community=0];
m0_33 [label="Exit lambda expression", span="45-45", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_42 [label="Exit HangFire.Redis.RedisMonitoringApi.DeletedListCount()", span="67-67", cluster="HangFire.Redis.RedisMonitoringApi.DeletedListCount()", file="RedisMonitoringApi.cs"];
m0_46 [label="Entry HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", span="72-72", cluster="HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", file="RedisMonitoringApi.cs"];
m0_45 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_43 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_44 [label="redis.GetListCount(''hangfire:deleted'')", span="69-69", cluster="lambda expression", file="RedisMonitoringApi.cs", color=green, community=0];
m0_47 [label="return UseConnection(redis =>\r\n            {\r\n                var jobIds = redis.GetRangeFromSortedSet(\r\n                    ''hangfire:processing'',\r\n                    from,\r\n                    from + count - 1);\r\n\r\n                return new JobList<ProcessingJobDto>(GetJobsWithProperties(redis,\r\n                    jobIds,\r\n                    null,\r\n                    new[] { ''StartedAt'', ''ServerName'', ''ServerId'', ''State'' },\r\n                    (job, jobData, state) => new ProcessingJobDto\r\n                    {\r\n                        ServerId = state[2] ?? state[1],\r\n                        Job = job,\r\n                        StartedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InProcessingState = ProcessingState.StateName.Equals(\r\n                            state[3], StringComparison.OrdinalIgnoreCase),\r\n                    }).OrderBy(x => x.Value.StartedAt).ToList());\r\n            });", span="75-94", cluster="HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", file="RedisMonitoringApi.cs", color=green, community=0];
m0_11 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_17 [label="var task = _component.Object.CreateTask(_cts.Token)", span="32-32", cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.CreateTask_ReturnsALongRunning_AttachedToParent_Task()", file="RedisMonitoringApi.cs"];
m0_18 [label="Assert.True(task.CreationOptions.HasFlag(TaskCreationOptions.LongRunning))", span="34-34", cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.CreateTask_ReturnsALongRunning_AttachedToParent_Task()", color=red, community=0, file="RedisMonitoringApi.cs"];
m0_19 [label="Assert.True(task.CreationOptions.HasFlag(TaskCreationOptions.AttachedToParent))", span="35-35", cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.CreateTask_ReturnsALongRunning_AttachedToParent_Task()", file="RedisMonitoringApi.cs"];
m0_25 [label="var task = _component.Object.CreateTask(_cts.Token)", span="41-41", cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.CreateTask_ReturnsATask_ThatCallsTheExecuteMethod_OfAGivenComponent()", file="RedisMonitoringApi.cs"];
m0_26 [label="task.Wait()", span="43-43", cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.CreateTask_ReturnsATask_ThatCallsTheExecuteMethod_OfAGivenComponent()", color=red, community=0, file="RedisMonitoringApi.cs"];
m0_27 [label="_component.Verify(x => x.Execute(_cts.Token), Times.Once)", span="45-45", cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.CreateTask_ReturnsATask_ThatCallsTheExecuteMethod_OfAGivenComponent()", file="RedisMonitoringApi.cs"];
m0_49 [label=task, span="", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_50 [label="var jobIds = redis.GetRangeFromSortedSet(\r\n                    ''hangfire:processing'',\r\n                    from,\r\n                    from + count - 1)", span="77-80", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_51 [label="return new JobList<ProcessingJobDto>(GetJobsWithProperties(redis,\r\n                    jobIds,\r\n                    null,\r\n                    new[] { ''StartedAt'', ''ServerName'', ''ServerId'', ''State'' },\r\n                    (job, jobData, state) => new ProcessingJobDto\r\n                    {\r\n                        ServerId = state[2] ?? state[1],\r\n                        Job = job,\r\n                        StartedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InProcessingState = ProcessingState.StateName.Equals(\r\n                            state[3], StringComparison.OrdinalIgnoreCase),\r\n                    }).OrderBy(x => x.Value.StartedAt).ToList());", span="82-93", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_52 [label="Exit lambda expression", span="75-94", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_58 [label="Entry lambda expression", span="86-93", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_64 [label="Entry lambda expression", span="93-93", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_59 [label="new ProcessingJobDto\r\n                    {\r\n                        ServerId = state[2] ?? state[1],\r\n                        Job = job,\r\n                        StartedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InProcessingState = ProcessingState.StateName.Equals(\r\n                            state[3], StringComparison.OrdinalIgnoreCase),\r\n                    }", span="86-93", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_60 [label="Exit lambda expression", span="86-93", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_65 [label="x.Value.StartedAt", span="93-93", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_66 [label="Exit lambda expression", span="93-93", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_71 [label="Entry lambda expression", span="99-151", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_72 [label="var scheduledJobs = redis.GetRangeWithScoresFromSortedSet(\r\n                    ''hangfire:schedule'',\r\n                    from,\r\n                    from + count - 1)", span="101-104", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_73 [label="scheduledJobs.Count == 0", span="106-106", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_78 [label=scheduledJobs, span="116-116", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_83 [label="return new JobList<ScheduledJobDto>(scheduledJobs\r\n                    .Select(job => new KeyValuePair<string, ScheduledJobDto>(\r\n                        job.Key,\r\n                        new ScheduledJobDto\r\n                        {\r\n                            EnqueueAt = JobHelper.FromTimestamp((long) job.Value),\r\n                            Job = TryToGetJob(jobs[job.Key][0], jobs[job.Key][1], jobs[job.Key][2], jobs[job.Key][3]),\r\n                            ScheduledAt =\r\n                                states[job.Key].Count > 1\r\n                                    ? JobHelper.FromNullableStringTimestamp(states[job.Key][1])\r\n                                    : null,\r\n                            InScheduledState =\r\n                                ScheduledState.StateName.Equals(states[job.Key][0], StringComparison.OrdinalIgnoreCase)\r\n                        }))\r\n                    .ToList());", span="136-150", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_77 [label="var pipeline = redis.CreatePipeline()", span="114-114", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_76 [label="var states = new Dictionary<string, List<String>>()", span="112-112", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_80 [label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}'', job.Key),\r\n                                new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'' }),\r\n                            x => jobs.Add(job.Key, x))", span="120-124", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_81 [label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}:state'', job.Key),\r\n                                new[] { ''State'', ''ScheduledAt'' }),\r\n                            x => states.Add(job.Key, x))", span="126-130", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_82 [label="pipeline.Flush()", span="133-133", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_74 [label="return new JobList<ScheduledJobDto>(new List<KeyValuePair<string, ScheduledJobDto>>());", span="108-108", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_75 [label="var jobs = new Dictionary<string, List<string>>()", span="111-111", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_79 [label="var job = scheduledJob", span="118-118", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_84 [label="Exit lambda expression", span="99-151", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_109 [label="Entry lambda expression", span="137-149", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_100 [label="jobs.Add(job.Key, x)", span="124-124", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_110 [label="new KeyValuePair<string, ScheduledJobDto>(\r\n                        job.Key,\r\n                        new ScheduledJobDto\r\n                        {\r\n                            EnqueueAt = JobHelper.FromTimestamp((long) job.Value),\r\n                            Job = TryToGetJob(jobs[job.Key][0], jobs[job.Key][1], jobs[job.Key][2], jobs[job.Key][3]),\r\n                            ScheduledAt =\r\n                                states[job.Key].Count > 1\r\n                                    ? JobHelper.FromNullableStringTimestamp(states[job.Key][1])\r\n                                    : null,\r\n                            InScheduledState =\r\n                                ScheduledState.StateName.Equals(states[job.Key][0], StringComparison.OrdinalIgnoreCase)\r\n                        })", span="137-149", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_107 [label="states.Add(job.Key, x)", span="130-130", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_94 [label="Entry lambda expression", span="121-123", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_99 [label="Entry lambda expression", span="124-124", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_101 [label="Exit lambda expression", span="124-124", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_111 [label="Exit lambda expression", span="137-149", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_103 [label="Entry lambda expression", span="127-129", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_106 [label="Entry lambda expression", span="130-130", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_108 [label="Exit lambda expression", span="130-130", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_95 [label="x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}'', job.Key),\r\n                                new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'' })", span="121-123", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_104 [label="x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}:state'', job.Key),\r\n                                new[] { ''State'', ''ScheduledAt'' })", span="127-129", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_96 [label="Exit lambda expression", span="121-123", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_105 [label="Exit lambda expression", span="127-129", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_119 [label="Entry lambda expression", span="156-156", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_120 [label="GetTimelineStats(redis, ''succeeded'')", span="156-156", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_121 [label="Exit lambda expression", span="156-156", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_126 [label="Entry lambda expression", span="161-161", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_127 [label="GetTimelineStats(redis, ''failed'')", span="161-161", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_128 [label="Exit lambda expression", span="161-161", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_132 [label="Entry lambda expression", span="166-207", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_133 [label="var serverNames = redis.GetAllItemsFromSet(''hangfire:servers'')", span="168-168", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_134 [label="serverNames.Count == 0", span="170-170", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_139 [label=serverNames, span="180-180", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_144 [label="return serverNames.Select(x => new ServerDto\r\n                {\r\n                    Name = x,\r\n                    WorkersCount = int.Parse(servers[x][0]),\r\n                    Queues = queues[x],\r\n                    StartedAt = JobHelper.FromStringTimestamp(servers[x][1]),\r\n                    Heartbeat = JobHelper.FromNullableStringTimestamp(servers[x][2])\r\n                }).ToList();", span="199-206", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_138 [label="var pipeline = redis.CreatePipeline()", span="178-178", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_137 [label="var queues = new Dictionary<string, List<string>>()", span="176-176", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_141 [label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:server:{0}'', name),\r\n                                ''WorkerCount'', ''StartedAt'', ''Heartbeat''),\r\n                            x => servers.Add(name, x))", span="184-188", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_142 [label="pipeline.QueueCommand(\r\n                            x => x.GetAllItemsFromList(\r\n                                String.Format(''hangfire:server:{0}:queues'', name)),\r\n                            x => queues.Add(name, x))", span="190-193", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_143 [label="pipeline.Flush()", span="196-196", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_135 [label="return new List<ServerDto>();", span="172-172", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_136 [label="var servers = new Dictionary<string, List<string>>()", span="175-175", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_140 [label="var name = serverName", span="182-182", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_145 [label="Exit lambda expression", span="166-207", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_160 [label="Entry lambda expression", span="199-206", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_151 [label="servers.Add(name, x)", span="188-188", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_161 [label="new ServerDto\r\n                {\r\n                    Name = x,\r\n                    WorkersCount = int.Parse(servers[x][0]),\r\n                    Queues = queues[x],\r\n                    StartedAt = JobHelper.FromStringTimestamp(servers[x][1]),\r\n                    Heartbeat = JobHelper.FromNullableStringTimestamp(servers[x][2])\r\n                }", span="199-206", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_158 [label="queues.Add(name, x)", span="193-193", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_147 [label="Entry lambda expression", span="185-187", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_150 [label="Entry lambda expression", span="188-188", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_152 [label="Exit lambda expression", span="188-188", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_162 [label="Exit lambda expression", span="199-206", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_153 [label="Entry lambda expression", span="191-192", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_157 [label="Entry lambda expression", span="193-193", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_159 [label="Exit lambda expression", span="193-193", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_148 [label="x.GetValuesFromHash(\r\n                                String.Format(''hangfire:server:{0}'', name),\r\n                                ''WorkerCount'', ''StartedAt'', ''Heartbeat'')", span="185-187", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_154 [label="x.GetAllItemsFromList(\r\n                                String.Format(''hangfire:server:{0}:queues'', name))", span="191-192", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_149 [label="Exit lambda expression", span="185-187", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_155 [label="Exit lambda expression", span="191-192", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_169 [label="Entry lambda expression", span="212-234", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_170 [label="var failedJobIds = redis.GetRangeFromSortedSetDesc(\r\n                    ''hangfire:failed'',\r\n                    from,\r\n                    from + count - 1)", span="214-217", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_171 [label="return GetJobsWithProperties(\r\n                    redis,\r\n                    failedJobIds,\r\n                    null,\r\n                    new[] { ''FailedAt'', ''ExceptionType'', ''ExceptionMessage'', ''ExceptionDetails'', ''State'', ''Reason'' },\r\n                    (job, jobData, state) => new FailedJobDto\r\n                    {\r\n                        Job = job,\r\n                        Reason = state[5],\r\n                        FailedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        ExceptionType = state[1],\r\n                        ExceptionMessage = state[2],\r\n                        ExceptionDetails = state[3],\r\n                        InFailedState = FailedState.StateName.Equals(state[4], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="219-233", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_172 [label="Exit lambda expression", span="212-234", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_174 [label="Entry lambda expression", span="224-233", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_175 [label="new FailedJobDto\r\n                    {\r\n                        Job = job,\r\n                        Reason = state[5],\r\n                        FailedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        ExceptionType = state[1],\r\n                        ExceptionMessage = state[2],\r\n                        ExceptionDetails = state[3],\r\n                        InFailedState = FailedState.StateName.Equals(state[4], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="224-233", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_176 [label="Exit lambda expression", span="224-233", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_181 [label="Entry lambda expression", span="239-260", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_182 [label="var succeededJobIds = redis.GetRangeFromList(\r\n                    ''hangfire:succeeded'',\r\n                    from,\r\n                    from + count - 1)", span="241-244", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_183 [label="return GetJobsWithProperties(\r\n                    redis,\r\n                    succeededJobIds,\r\n                    null,\r\n                    new[] { ''SucceededAt'', ''PerformanceDuration'', ''Latency'', ''State'' },\r\n                    (job, jobData, state) => new SucceededJobDto\r\n                    {\r\n                        Job = job,\r\n                        SucceededAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        TotalDuration = state[1] != null && state[2] != null\r\n                            ? (long?) long.Parse(state[1]) + (long?) long.Parse(state[2])\r\n                            : null,\r\n                        InSucceededState = SucceededState.StateName.Equals(state[3], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="246-259", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_184 [label="Exit lambda expression", span="239-260", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_186 [label="Entry lambda expression", span="251-259", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_187 [label="new SucceededJobDto\r\n                    {\r\n                        Job = job,\r\n                        SucceededAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        TotalDuration = state[1] != null && state[2] != null\r\n                            ? (long?) long.Parse(state[1]) + (long?) long.Parse(state[2])\r\n                            : null,\r\n                        InSucceededState = SucceededState.StateName.Equals(state[3], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="251-259", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_188 [label="Exit lambda expression", span="251-259", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_194 [label="Entry lambda expression", span="265-283", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_195 [label="var deletedJobIds = redis.GetRangeFromList(\r\n                    ''hangfire:deleted'',\r\n                    from,\r\n                    from + count - 1)", span="267-270", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_196 [label="return GetJobsWithProperties(\r\n                    redis,\r\n                    deletedJobIds,\r\n                    null,\r\n                    new[] { ''DeletedAt'', ''State'' },\r\n                    (job, jobData, state) => new DeletedJobDto\r\n                    {\r\n                        Job = job,\r\n                        DeletedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InDeletedState = DeletedState.StateName.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="272-282", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_197 [label="Exit lambda expression", span="265-283", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_198 [label="Entry lambda expression", span="277-282", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_199 [label="new DeletedJobDto\r\n                    {\r\n                        Job = job,\r\n                        DeletedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InDeletedState = DeletedState.StateName.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="277-282", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_200 [label="Exit lambda expression", span="277-282", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_205 [label="Entry lambda expression", span="288-340", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_206 [label="var queues = redis.GetAllItemsFromSet(''hangfire:queues'')", span="290-290", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_207 [label="var result = new List<QueueWithTopEnqueuedJobsDto>(queues.Count)", span="291-291", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_208 [label=queues, span="293-293", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_212 [label="var pipeline = redis.CreatePipeline()", span="299-299", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_211 [label="long fetched = 0", span="297-297", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_213 [label="pipeline.QueueCommand(\r\n                            x => x.GetRangeFromList(\r\n                                String.Format(''hangfire:queue:{0}'', queue), -5, -1),\r\n                            x => firstJobIds = x)", span="301-304", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_214 [label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queue)),\r\n                            x => length = x)", span="306-308", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_215 [label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue)),\r\n                            x => fetched = x)", span="310-312", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_216 [label="pipeline.Flush()", span="314-314", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_217 [label="var jobs = GetJobsWithProperties(\r\n                        redis,\r\n                        firstJobIds,\r\n                        new[] { ''State'' },\r\n                        new[] { ''EnqueuedAt'', ''State'' },\r\n                        (job, jobData, state) => new EnqueuedJobDto\r\n                        {\r\n                            Job = job,\r\n                            State = jobData[0],\r\n                            EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                            InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                        })", span="317-328", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_218 [label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = queue,\r\n                        FirstJobs = jobs,\r\n                        Length = length,\r\n                        Fetched = fetched\r\n                    })", span="330-336", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_243 [label="Entry lambda expression", span="322-328", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_219 [label="return result;", span="339-339", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_209 [label="IList<string> firstJobIds = null", span="295-295", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_226 [label="x.GetRangeFromList(\r\n                                String.Format(''hangfire:queue:{0}'', queue), -5, -1)", span="302-303", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_232 [label="x.GetListCount(String.Format(''hangfire:queue:{0}'', queue))", span="307-307", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_238 [label="x.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue))", span="311-311", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_220 [label="Exit lambda expression", span="288-340", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_210 [label="long length = 0", span="296-296", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_225 [label="Entry lambda expression", span="302-303", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_228 [label="Entry lambda expression", span="304-304", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_227 [label="Exit lambda expression", span="302-303", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_231 [label="Entry lambda expression", span="307-307", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_234 [label="Entry lambda expression", span="308-308", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_233 [label="Exit lambda expression", span="307-307", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_237 [label="Entry lambda expression", span="311-311", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_240 [label="Entry lambda expression", span="312-312", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_239 [label="Exit lambda expression", span="311-311", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_229 [label="firstJobIds = x", span="304-304", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_230 [label="Exit lambda expression", span="304-304", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_235 [label="length = x", span="308-308", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_236 [label="Exit lambda expression", span="308-308", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_241 [label="fetched = x", span="312-312", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_242 [label="Exit lambda expression", span="312-312", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_244 [label="new EnqueuedJobDto\r\n                        {\r\n                            Job = job,\r\n                            State = jobData[0],\r\n                            EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                            InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                        }", span="322-328", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_245 [label="Exit lambda expression", span="322-328", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_250 [label="Entry lambda expression", span="346-365", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_251 [label="var jobIds = redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}'', queue),\r\n                    from,\r\n                    from + perPage - 1)", span="348-351", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_252 [label="return GetJobsWithProperties(\r\n                    redis,\r\n                    jobIds,\r\n                    new[] { ''State'' },\r\n                    new[] { ''EnqueuedAt'', ''State'' },\r\n                    (job, jobData, state) => new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="353-364", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_253 [label="Exit lambda expression", span="346-365", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_254 [label="Entry lambda expression", span="358-364", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_260 [label="Entry lambda expression", span="371-388", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_261 [label="var jobIds = redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}:dequeued'', queue),\r\n                    from, from + perPage - 1)", span="373-375", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_262 [label="return GetJobsWithProperties(\r\n                    redis,\r\n                    jobIds,\r\n                    new[] { ''State'', ''Fetched'' },\r\n                    null,\r\n                    (job, jobData, state) => new FetchedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        FetchedAt = JobHelper.FromNullableStringTimestamp(jobData[1])\r\n                    });", span="377-387", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_263 [label="Exit lambda expression", span="371-388", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_264 [label="Entry lambda expression", span="382-387", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_265 [label="new FetchedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        FetchedAt = JobHelper.FromNullableStringTimestamp(jobData[1])\r\n                    }", span="382-387", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_266 [label="Exit lambda expression", span="382-387", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_271 [label="Entry lambda expression", span="393-393", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_272 [label="GetHourlyTimelineStats(redis, ''succeeded'')", span="393-393", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_273 [label="Exit lambda expression", span="393-393", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_278 [label="Entry lambda expression", span="398-398", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_279 [label="GetHourlyTimelineStats(redis, ''failed'')", span="398-398", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_280 [label="Exit lambda expression", span="398-398", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_284 [label="Entry lambda expression", span="403-454", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_285 [label="var job = redis.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', jobId))", span="405-405", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_286 [label="job.Count == 0", span="406-406", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_300 [label="!job.ContainsKey(''Method'')", span="440-440", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_301 [label="job.Add(''Method'', null)", span="440-440", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_302 [label="!job.ContainsKey(''ParameterTypes'')", span="441-441", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_303 [label="job.Add(''ParameterTypes'', null)", span="441-441", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_304 [label="return new JobDetailsDto\r\n                {\r\n                    Job = TryToGetJob(job[''Type''], job[''Method''], job[''ParameterTypes''], job[''Arguments'']),\r\n                    CreatedAt =\r\n                        job.ContainsKey(''CreatedAt'')\r\n                            ? JobHelper.FromStringTimestamp(job[''CreatedAt''])\r\n                            : (DateTime?) null,\r\n                    Properties =\r\n                        job.Where(x => !hiddenProperties.Contains(x.Key)).ToDictionary(x => x.Key, x => x.Value),\r\n                    History = stateHistory\r\n                };", span="443-453", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_289 [label="var historyList = redis.GetAllItemsFromList(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId))", span="410-411", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_288 [label="var hiddenProperties = new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'', ''State'', ''CreatedAt'' }", span="408-408", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_290 [label="var history = historyList\r\n                    .Select(JobHelper.FromJson<Dictionary<string, string>>)\r\n                    .ToList()", span="413-415", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_287 [label="return null;", span="406-406", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_292 [label=history, span="418-418", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_291 [label="var stateHistory = new List<StateHistoryDto>(history.Count)", span="417-417", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_305 [label="Exit lambda expression", span="403-454", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_317 [label="Entry lambda expression", span="451-451", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_321 [label="Entry lambda expression", span="451-451", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_324 [label="Entry lambda expression", span="451-451", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_318 [label="!hiddenProperties.Contains(x.Key)", span="451-451", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_319 [label="Exit lambda expression", span="451-451", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_299 [label="stateHistory.Add(dto)", span="436-436", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_293 [label="var dto = new StateHistoryDto\r\n                    {\r\n                        StateName = entry[''State''],\r\n                        Reason = entry.ContainsKey(''Reason'') ? entry[''Reason''] : null,\r\n                        CreatedAt = JobHelper.FromStringTimestamp(entry[''CreatedAt'']),\r\n                    }", span="420-425", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_294 [label="var stateData = new Dictionary<string, string>(entry)", span="430-430", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_298 [label="dto.Data = stateData", span="435-435", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_295 [label="stateData.Remove(''State'')", span="431-431", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_296 [label="stateData.Remove(''Reason'')", span="432-432", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_297 [label="stateData.Remove(''CreatedAt'')", span="433-433", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_322 [label="x.Key", span="451-451", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_323 [label="Exit lambda expression", span="451-451", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_325 [label="x.Value", span="451-451", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_326 [label="Exit lambda expression", span="451-451", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_415 [label="Entry lambda expression", span="556-566", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_418 [label="Entry lambda expression", span="567-571", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_419 [label="new KeyValuePair<string, T>(\r\n                    x.JobId,\r\n                    x.Job.TrueForAll(y => y == null)\r\n                        ? default(T)\r\n                        : selector(x.Method, x.Job, x.State))", span="567-571", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_420 [label="Exit lambda expression", span="567-571", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_424 [label="Entry lambda expression", span="569-569", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_398 [label="Entry lambda expression", span="539-541", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_403 [label="Entry lambda expression", span="542-542", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_399 [label="x.GetValuesFromHash(\r\n                            String.Format(''hangfire:job:{0}'', id),\r\n                            properties.Union(new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'' }).ToArray())", span="539-541", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_400 [label="Exit lambda expression", span="539-541", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_425 [label="y == null", span="569-569", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_426 [label="Exit lambda expression", span="569-569", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_430 [label="Entry lambda expression", span="577-577", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_431 [label="redis.GetListCount(''hangfire:succeeded'')", span="577-577", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_432 [label="Exit lambda expression", span="577-577", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_436 [label="Entry lambda expression", span="582-634", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_437 [label="var stats = new StatisticsDto()", span="584-584", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_438 [label="var queues = redis.GetAllItemsFromSet(''hangfire:queues'')", span="586-586", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_440 [label="pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:servers''),\r\n                        x => stats.Servers = x)", span="590-592", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_460 [label="stats.Servers = x", span="592-592", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_441 [label="pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:queues''),\r\n                        x => stats.Queues = x)", span="594-596", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_466 [label="stats.Queues = x", span="596-596", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_442 [label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:schedule''),\r\n                        x => stats.Scheduled = x)", span="598-600", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_472 [label="stats.Scheduled = x", span="600-600", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_443 [label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:processing''),\r\n                        x => stats.Processing = x)", span="602-604", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_478 [label="stats.Processing = x", span="604-604", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_444 [label="pipeline.QueueCommand(\r\n                        x => x.GetValue(''hangfire:stats:succeeded''),\r\n                        x => stats.Succeeded = long.Parse(x ?? ''0''))", span="606-608", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_485 [label="stats.Succeeded = long.Parse(x ?? ''0'')", span="608-608", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_445 [label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:failed''),\r\n                        x => stats.Failed = x)", span="610-612", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_492 [label="stats.Failed = x", span="612-612", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_446 [label="pipeline.QueueCommand(\r\n                        x => x.GetValue(''hangfire:stats:deleted''),\r\n                        x => stats.Deleted = long.Parse(x ?? ''0''))", span="614-616", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_498 [label="stats.Deleted = long.Parse(x ?? ''0'')", span="616-616", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_447 [label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:recurring-jobs''),\r\n                        x => stats.Recurring = x)", span="618-620", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_504 [label="stats.Recurring = x", span="620-620", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_450 [label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queueName)),\r\n                            x => stats.Enqueued += x)", span="625-627", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_510 [label="stats.Enqueued += x", span="627-627", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_452 [label="return stats;", span="633-633", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_439 [label="var pipeline = redis.CreatePipeline()", span="588-588", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_448 [label=queues, span="622-622", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_451 [label="pipeline.Flush()", span="630-630", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_455 [label="Entry lambda expression", span="591-591", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_459 [label="Entry lambda expression", span="592-592", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_461 [label="Exit lambda expression", span="592-592", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_462 [label="Entry lambda expression", span="595-595", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_465 [label="Entry lambda expression", span="596-596", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_467 [label="Exit lambda expression", span="596-596", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_468 [label="Entry lambda expression", span="599-599", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_471 [label="Entry lambda expression", span="600-600", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_473 [label="Exit lambda expression", span="600-600", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_474 [label="Entry lambda expression", span="603-603", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_477 [label="Entry lambda expression", span="604-604", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_479 [label="Exit lambda expression", span="604-604", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_480 [label="Entry lambda expression", span="607-607", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_484 [label="Entry lambda expression", span="608-608", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_486 [label="Exit lambda expression", span="608-608", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_488 [label="Entry lambda expression", span="611-611", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_491 [label="Entry lambda expression", span="612-612", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_493 [label="Exit lambda expression", span="612-612", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_494 [label="Entry lambda expression", span="615-615", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_497 [label="Entry lambda expression", span="616-616", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_499 [label="Exit lambda expression", span="616-616", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_500 [label="Entry lambda expression", span="619-619", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_503 [label="Entry lambda expression", span="620-620", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_505 [label="Exit lambda expression", span="620-620", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_449 [label="var queueName = queue", span="624-624", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_506 [label="Entry lambda expression", span="626-626", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_509 [label="Entry lambda expression", span="627-627", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_511 [label="Exit lambda expression", span="627-627", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_453 [label="Exit lambda expression", span="582-634", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_507 [label="x.GetListCount(String.Format(''hangfire:queue:{0}'', queueName))", span="626-626", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_508 [label="Exit lambda expression", span="626-626", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_456 [label="x.GetSetCount(''hangfire:servers'')", span="591-591", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_457 [label="Exit lambda expression", span="591-591", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_463 [label="x.GetSetCount(''hangfire:queues'')", span="595-595", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_464 [label="Exit lambda expression", span="595-595", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_469 [label="x.GetSortedSetCount(''hangfire:schedule'')", span="599-599", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_470 [label="Exit lambda expression", span="599-599", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_475 [label="x.GetSortedSetCount(''hangfire:processing'')", span="603-603", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_476 [label="Exit lambda expression", span="603-603", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_481 [label="x.GetValue(''hangfire:stats:succeeded'')", span="607-607", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_482 [label="Exit lambda expression", span="607-607", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_489 [label="x.GetSortedSetCount(''hangfire:failed'')", span="611-611", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_490 [label="Exit lambda expression", span="611-611", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_495 [label="x.GetValue(''hangfire:stats:deleted'')", span="615-615", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_496 [label="Exit lambda expression", span="615-615", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_501 [label="x.GetSortedSetCount(''hangfire:recurring-jobs'')", span="619-619", cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_502 [label="Exit lambda expression", span="619-619", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_409 [label="x.GetValuesFromHash(String.Format(''hangfire:job:{0}:state'', id), stateProperties)", span="547-547", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_255 [label="new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="358-364", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_405 [label="jobs.Add(id, x)", span="542-542", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_413 [label="states.Add(id, x)", span="548-548", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_416 [label="new\r\n                {\r\n                    JobId = x,\r\n                    Job = jobs[x],\r\n                    Method = TryToGetJob(\r\n                        jobs[x][properties.Length],\r\n                        jobs[x][properties.Length + 1],\r\n                        jobs[x][properties.Length + 2],\r\n                        jobs[x][properties.Length + 3]),\r\n                    State = states.ContainsKey(x) ? states[x] : null\r\n                }", span="556-566", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_380 [label="String.Format(''hangfire:stats:{0}:{1}'', type, x)", span="500-500", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_256 [label="Exit lambda expression", span="358-364", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_352 [label="String.Format(''hangfire:stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))", span="468-468", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_404 [label="!jobs.ContainsKey(id)", span="542-542", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_412 [label="!states.ContainsKey(id)", span="548-548", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_417 [label="Exit lambda expression", span="556-566", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_406 [label="Exit lambda expression", span="542-542", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_408 [label="Entry lambda expression", span="547-547", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_410 [label="Exit lambda expression", span="547-547", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_351 [label="Entry lambda expression", span="468-468", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_379 [label="Entry lambda expression", span="500-500", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_376 [label="Entry lambda expression", span="499-499", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_414 [label="Exit lambda expression", span="548-548", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_381 [label="Exit lambda expression", span="500-500", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_353 [label="Exit lambda expression", span="468-468", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_377 [label="x.ToString(''yyyy-MM-dd'')", span="499-499", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_378 [label="Exit lambda expression", span="499-499", cluster="lambda expression", file="RedisMonitoringApi.cs"];
m0_53 [label="Entry Unk.GetRangeFromSortedSet", span="", cluster="Unk.GetRangeFromSortedSet", file="RedisMonitoringApi.cs"];
m0_28 [label="Entry HangFire.Redis.RedisMonitoringApi.FailedCount()", span="57-57", cluster="HangFire.Redis.RedisMonitoringApi.FailedCount()", file="RedisMonitoringApi.cs"];
m0_223 [label="Entry HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="18-18", cluster="HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", file="RedisMonitoringApi.cs"];
m0_224 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="RedisMonitoringApi.cs"];
m0_93 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="RedisMonitoringApi.cs"];
m0_97 [label="Entry Unk.Format", span="", cluster="Unk.Format", file="RedisMonitoringApi.cs"];
m0_89 [label="Entry Unk.QueueCommand", span="", cluster="Unk.QueueCommand", file="RedisMonitoringApi.cs"];
m0_115 [label="Entry HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", span="645-645", cluster="HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", file="RedisMonitoringApi.cs"];
m0_517 [label="return new InvocationData(\r\n                    type,\r\n                    method,\r\n                    parameterTypes,\r\n                    arguments).Deserialize();", span="650-654", cluster="HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", file="RedisMonitoringApi.cs"];
m0_519 [label="return null;", span="658-658", cluster="HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", file="RedisMonitoringApi.cs"];
m0_518 [label=Exception, span="656-656", cluster="HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", file="RedisMonitoringApi.cs"];
m0_520 [label="Exit HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", span="645-645", cluster="HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", file="RedisMonitoringApi.cs"];
m0_166 [label="Entry HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", span="210-210", cluster="HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", file="RedisMonitoringApi.cs"];
m0_167 [label="return UseConnection(redis =>\r\n            {\r\n                var failedJobIds = redis.GetRangeFromSortedSetDesc(\r\n                    ''hangfire:failed'',\r\n                    from,\r\n                    from + count - 1);\r\n\r\n                return GetJobsWithProperties(\r\n                    redis,\r\n                    failedJobIds,\r\n                    null,\r\n                    new[] { ''FailedAt'', ''ExceptionType'', ''ExceptionMessage'', ''ExceptionDetails'', ''State'', ''Reason'' },\r\n                    (job, jobData, state) => new FailedJobDto\r\n                    {\r\n                        Job = job,\r\n                        Reason = state[5],\r\n                        FailedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        ExceptionType = state[1],\r\n                        ExceptionMessage = state[2],\r\n                        ExceptionDetails = state[3],\r\n                        InFailedState = FailedState.StateName.Equals(state[4], StringComparison.OrdinalIgnoreCase)\r\n                    });\r\n            });", span="212-234", cluster="HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_168 [label="Exit HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", span="210-210", cluster="HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", file="RedisMonitoringApi.cs"];
m0_267 [label="Entry HangFire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", span="21-21", cluster="HangFire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", file="RedisMonitoringApi.cs"];
m0_354 [label="Entry System.DateTime.ToString(string)", span="0-0", cluster="System.DateTime.ToString(string)", file="RedisMonitoringApi.cs"];
m0_70 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection", file="RedisMonitoringApi.cs"];
m0_221 [label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span="", cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="RedisMonitoringApi.cs"];
m0_348 [label="Entry Unk.ElementAt", span="", cluster="Unk.ElementAt", file="RedisMonitoringApi.cs"];
m0_129 [label="Entry HangFire.Redis.RedisMonitoringApi.Servers()", span="164-164", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="RedisMonitoringApi.cs"];
m0_130 [label="return UseConnection(redis =>\r\n            {\r\n                var serverNames = redis.GetAllItemsFromSet(''hangfire:servers'');\r\n\r\n                if (serverNames.Count == 0)\r\n                {\r\n                    return new List<ServerDto>();\r\n                }\r\n\r\n                var servers = new Dictionary<string, List<string>>();\r\n                var queues = new Dictionary<string, List<string>>();\r\n\r\n                using (var pipeline = redis.CreatePipeline())\r\n                {\r\n                    foreach (var serverName in serverNames)\r\n                    {\r\n                        var name = serverName;\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:server:{0}'', name),\r\n                                ''WorkerCount'', ''StartedAt'', ''Heartbeat''),\r\n                            x => servers.Add(name, x));\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetAllItemsFromList(\r\n                                String.Format(''hangfire:server:{0}:queues'', name)),\r\n                            x => queues.Add(name, x));\r\n                    }\r\n\r\n                    pipeline.Flush();\r\n                }\r\n\r\n                return serverNames.Select(x => new ServerDto\r\n                {\r\n                    Name = x,\r\n                    WorkersCount = int.Parse(servers[x][0]),\r\n                    Queues = queues[x],\r\n                    StartedAt = JobHelper.FromStringTimestamp(servers[x][1]),\r\n                    Heartbeat = JobHelper.FromNullableStringTimestamp(servers[x][2])\r\n                }).ToList();\r\n            });", span="166-207", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_131 [label="Exit HangFire.Redis.RedisMonitoringApi.Servers()", span="164-164", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="RedisMonitoringApi.cs"];
m0_40 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="RedisMonitoringApi.cs"];
m0_41 [label="Entry Unk.DoesNotThrow", span="", cluster="Unk.DoesNotThrow", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_185 [label="Entry Unk.GetRangeFromList", span="", cluster="Unk.GetRangeFromList", file="RedisMonitoringApi.cs"];
m0_178 [label="Entry HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", span="237-237", cluster="HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", file="RedisMonitoringApi.cs"];
m0_179 [label="return UseConnection(redis =>\r\n            {\r\n                var succeededJobIds = redis.GetRangeFromList(\r\n                    ''hangfire:succeeded'',\r\n                    from,\r\n                    from + count - 1);\r\n\r\n                return GetJobsWithProperties(\r\n                    redis,\r\n                    succeededJobIds,\r\n                    null,\r\n                    new[] { ''SucceededAt'', ''PerformanceDuration'', ''Latency'', ''State'' },\r\n                    (job, jobData, state) => new SucceededJobDto\r\n                    {\r\n                        Job = job,\r\n                        SucceededAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        TotalDuration = state[1] != null && state[2] != null\r\n                            ? (long?) long.Parse(state[1]) + (long?) long.Parse(state[2])\r\n                            : null,\r\n                        InSucceededState = SucceededState.StateName.Equals(state[3], StringComparison.OrdinalIgnoreCase)\r\n                    });\r\n            });", span="239-260", cluster="HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_180 [label="Exit HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", span="237-237", cluster="HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", file="RedisMonitoringApi.cs"];
m0_116 [label="Entry HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", span="154-154", cluster="HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", file="RedisMonitoringApi.cs"];
m0_117 [label="return UseConnection(redis => GetTimelineStats(redis, ''succeeded''));", span="156-156", cluster="HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_118 [label="Exit HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", span="154-154", cluster="HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", file="RedisMonitoringApi.cs"];
m0_21 [label="Entry Unk.GetListCount", span="", cluster="Unk.GetListCount", file="RedisMonitoringApi.cs"];
m0_90 [label="Entry Unk.Flush", span="", cluster="Unk.Flush", file="RedisMonitoringApi.cs"];
m0_487 [label="Entry Unk.Parse", span="", cluster="Unk.Parse", file="RedisMonitoringApi.cs"];
m0_102 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="RedisMonitoringApi.cs"];
m0_6 [label="Entry HangFire.Redis.RedisMonitoringApi.ScheduledCount()", span="39-39", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledCount()", file="RedisMonitoringApi.cs"];
m0_7 [label="return UseConnection(redis => \r\n                redis.GetSortedSetCount(''hangfire:schedule''));", span="41-42", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledCount()", file="RedisMonitoringApi.cs", color=green, community=0];
m0_8 [label="Exit HangFire.Redis.RedisMonitoringApi.ScheduledCount()", span="39-39", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledCount()", file="RedisMonitoringApi.cs"];
m0_63 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="RedisMonitoringApi.cs"];
m0_30 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="RedisMonitoringApi.cs"];
m0_346 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="RedisMonitoringApi.cs"];
m0_48 [label="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts", span="", cluster="HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", file="RedisMonitoringApi.cs"];
m0_189 [label="Entry HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="RedisMonitoringApi.cs"];
m0_34 [label="Entry HangFire.Redis.RedisMonitoringApi.ProcessingCount()", span="62-62", cluster="HangFire.Redis.RedisMonitoringApi.ProcessingCount()", file="RedisMonitoringApi.cs"];
m0_401 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="RedisMonitoringApi.cs"];
m0_312 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", file="RedisMonitoringApi.cs"];
m0_397 [label="Entry JobList<T>.cstr", span="", cluster="JobList<T>.cstr", file="RedisMonitoringApi.cs"];
m0_16 [label="Exit HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", span="45-45", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", file="RedisMonitoringApi.cs"];
m0_20 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="RedisMonitoringApi.cs"];
m0_350 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="RedisMonitoringApi.cs"];
m0_521 [label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", span="24-24", cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", file="RedisMonitoringApi.cs"];
m0_268 [label="Entry HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", span="391-391", cluster="HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", file="RedisMonitoringApi.cs"];
m0_269 [label="return UseConnection(redis => GetHourlyTimelineStats(redis, ''succeeded''));", span="393-393", cluster="HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_270 [label="Exit HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", span="391-391", cluster="HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", file="RedisMonitoringApi.cs"];
m0_355 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="RedisMonitoringApi.cs"];
m0_306 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash", file="RedisMonitoringApi.cs"];
m0_316 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="RedisMonitoringApi.cs"];
m0_310 [label="Entry Unk.FromStringTimestamp", span="", cluster="Unk.FromStringTimestamp", file="RedisMonitoringApi.cs"];
m0_396 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int)", file="RedisMonitoringApi.cs"];
m0_458 [label="Entry Unk.GetSetCount", span="", cluster="Unk.GetSetCount", file="RedisMonitoringApi.cs"];
m0_114 [label="Entry HangFire.Common.JobHelper.FromTimestamp(long)", span="45-45", cluster="HangFire.Common.JobHelper.FromTimestamp(long)", file="RedisMonitoringApi.cs"];
m0_123 [label="Entry HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", span="159-159", cluster="HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", file="RedisMonitoringApi.cs"];
m0_124 [label="return UseConnection(redis => GetTimelineStats(redis, ''failed''));", span="161-161", cluster="HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_125 [label="Exit HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", span="159-159", cluster="HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", file="RedisMonitoringApi.cs"];
m0_246 [label="Entry HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", file="RedisMonitoringApi.cs"];
m0_177 [label="Entry HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", file="RedisMonitoringApi.cs"];
m0_10 [label="Entry Unk.>", span="", cluster="Unk.>", file="RedisMonitoringApi.cs"];
m0_202 [label="Entry HangFire.Redis.RedisMonitoringApi.Queues()", span="286-286", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="RedisMonitoringApi.cs"];
m0_203 [label="return UseConnection(redis =>\r\n            {\r\n                var queues = redis.GetAllItemsFromSet(''hangfire:queues'');\r\n                var result = new List<QueueWithTopEnqueuedJobsDto>(queues.Count);\r\n\r\n                foreach (var queue in queues)\r\n                {\r\n                    IList<string> firstJobIds = null;\r\n                    long length = 0;\r\n                    long fetched = 0;\r\n\r\n                    using (var pipeline = redis.CreatePipeline())\r\n                    {\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetRangeFromList(\r\n                                String.Format(''hangfire:queue:{0}'', queue), -5, -1),\r\n                            x => firstJobIds = x);\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queue)),\r\n                            x => length = x);\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue)),\r\n                            x => fetched = x);\r\n\r\n                        pipeline.Flush();\r\n                    }\r\n\r\n                    var jobs = GetJobsWithProperties(\r\n                        redis,\r\n                        firstJobIds,\r\n                        new[] { ''State'' },\r\n                        new[] { ''EnqueuedAt'', ''State'' },\r\n                        (job, jobData, state) => new EnqueuedJobDto\r\n                        {\r\n                            Job = job,\r\n                            State = jobData[0],\r\n                            EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                            InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                        });\r\n\r\n                    result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = queue,\r\n                        FirstJobs = jobs,\r\n                        Length = length,\r\n                        Fetched = fetched\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="288-340", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_204 [label="Exit HangFire.Redis.RedisMonitoringApi.Queues()", span="286-286", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="RedisMonitoringApi.cs"];
m0_314 [label="Entry Unk.TryToGetJob", span="", cluster="Unk.TryToGetJob", file="RedisMonitoringApi.cs"];
m0_67 [label="Entry HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", span="97-97", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="RedisMonitoringApi.cs"];
m0_68 [label="return UseConnection(redis =>\r\n            {\r\n                var scheduledJobs = redis.GetRangeWithScoresFromSortedSet(\r\n                    ''hangfire:schedule'',\r\n                    from,\r\n                    from + count - 1);\r\n\r\n                if (scheduledJobs.Count == 0)\r\n                {\r\n                    return new JobList<ScheduledJobDto>(new List<KeyValuePair<string, ScheduledJobDto>>());\r\n                }\r\n\r\n                var jobs = new Dictionary<string, List<string>>();\r\n                var states = new Dictionary<string, List<String>>();\r\n\r\n                using (var pipeline = redis.CreatePipeline())\r\n                {\r\n                    foreach (var scheduledJob in scheduledJobs)\r\n                    {\r\n                        var job = scheduledJob;\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}'', job.Key),\r\n                                new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'' }),\r\n                            x => jobs.Add(job.Key, x));\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}:state'', job.Key),\r\n                                new[] { ''State'', ''ScheduledAt'' }),\r\n                            x => states.Add(job.Key, x));\r\n                    }\r\n\r\n                    pipeline.Flush();\r\n                }\r\n\r\n                return new JobList<ScheduledJobDto>(scheduledJobs\r\n                    .Select(job => new KeyValuePair<string, ScheduledJobDto>(\r\n                        job.Key,\r\n                        new ScheduledJobDto\r\n                        {\r\n                            EnqueueAt = JobHelper.FromTimestamp((long) job.Value),\r\n                            Job = TryToGetJob(jobs[job.Key][0], jobs[job.Key][1], jobs[job.Key][2], jobs[job.Key][3]),\r\n                            ScheduledAt =\r\n                                states[job.Key].Count > 1\r\n                                    ? JobHelper.FromNullableStringTimestamp(states[job.Key][1])\r\n                                    : null,\r\n                            InScheduledState =\r\n                                ScheduledState.StateName.Equals(states[job.Key][0], StringComparison.OrdinalIgnoreCase)\r\n                        }))\r\n                    .ToList());\r\n            });", span="99-151", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", color=green, community=0, file="RedisMonitoringApi.cs"];
m0_69 [label="Exit HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", span="97-97", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="RedisMonitoringApi.cs"];
m0_87 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RedisMonitoringApi.cs"];
m0_54 [label="Entry HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="22-22", cluster="HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", file="RedisMonitoringApi.cs"];
m0_347 [label="Entry Unk.GetValuesMap", span="", cluster="Unk.GetValuesMap", file="RedisMonitoringApi.cs"];
m0_156 [label="Entry Unk.GetAllItemsFromList", span="", cluster="Unk.GetAllItemsFromList", file="RedisMonitoringApi.cs"];
m0_320 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="RedisMonitoringApi.cs"];
m0_92 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="RedisMonitoringApi.cs"];
m0_308 [label="Entry HangFire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", span="21-21", cluster="HangFire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", file="RedisMonitoringApi.cs"];
m0_146 [label="Entry Unk.GetAllItemsFromSet", span="", cluster="Unk.GetAllItemsFromSet", file="RedisMonitoringApi.cs"];
m0_173 [label="Entry Unk.GetRangeFromSortedSetDesc", span="", cluster="Unk.GetRangeFromSortedSetDesc", file="RedisMonitoringApi.cs"];
m0_483 [label="Entry Unk.GetValue", span="", cluster="Unk.GetValue", file="RedisMonitoringApi.cs"];
m0_98 [label="Entry Unk.GetValuesFromHash", span="", cluster="Unk.GetValuesFromHash", file="RedisMonitoringApi.cs"];
m0_523 [label="HangFire.Redis.RedisMonitoringApi", span="", file="RedisMonitoringApi.cs"];
m0_524 [label=string, span="", file="RedisMonitoringApi.cs"];
m0_525 [label=string, span="", file="RedisMonitoringApi.cs"];
m0_526 [label=int, span="", file="RedisMonitoringApi.cs"];
m0_527 [label=int, span="", file="RedisMonitoringApi.cs"];
m0_528 [label=int, span="", file="RedisMonitoringApi.cs"];
m0_529 [label=int, span="", file="RedisMonitoringApi.cs"];
m0_530 [label=job, span="", file="RedisMonitoringApi.cs"];
m0_531 [label=jobs, span="", file="RedisMonitoringApi.cs"];
m0_532 [label=states, span="", file="RedisMonitoringApi.cs"];
m0_533 [label=name, span="", file="RedisMonitoringApi.cs"];
m0_534 [label=servers, span="", file="RedisMonitoringApi.cs"];
m0_535 [label=queues, span="", file="RedisMonitoringApi.cs"];
m0_536 [label=int, span="", file="RedisMonitoringApi.cs"];
m0_537 [label=int, span="", file="RedisMonitoringApi.cs"];
m0_538 [label=int, span="", file="RedisMonitoringApi.cs"];
m0_539 [label=int, span="", file="RedisMonitoringApi.cs"];
m0_540 [label=int, span="", file="RedisMonitoringApi.cs"];
m0_541 [label=int, span="", file="RedisMonitoringApi.cs"];
m0_542 [label=queue, span="", file="RedisMonitoringApi.cs"];
m0_543 [label=string, span="", file="RedisMonitoringApi.cs"];
m0_544 [label=int, span="", file="RedisMonitoringApi.cs"];
m0_545 [label=int, span="", file="RedisMonitoringApi.cs"];
m0_546 [label=string, span="", file="RedisMonitoringApi.cs"];
m0_547 [label=int, span="", file="RedisMonitoringApi.cs"];
m0_548 [label=int, span="", file="RedisMonitoringApi.cs"];
m0_549 [label=string, span="", file="RedisMonitoringApi.cs"];
m0_550 [label=hiddenProperties, span="", file="RedisMonitoringApi.cs"];
m0_558 [label="System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>", span="", file="RedisMonitoringApi.cs"];
m0_553 [label="string[]", span="", file="RedisMonitoringApi.cs"];
m0_554 [label=id, span="", file="RedisMonitoringApi.cs"];
m0_559 [label=stats, span="", file="RedisMonitoringApi.cs"];
m0_560 [label=queueName, span="", file="RedisMonitoringApi.cs"];
m0_556 [label="string[]", span="", file="RedisMonitoringApi.cs"];
m0_555 [label=jobs, span="", file="RedisMonitoringApi.cs"];
m0_557 [label=states, span="", file="RedisMonitoringApi.cs"];
m0_552 [label=string, span="", file="RedisMonitoringApi.cs"];
m0_551 [label=string, span="", file="RedisMonitoringApi.cs"];
n138 -> n1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
n138 -> n13  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
n138 -> n21  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
n138 -> n37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
n138 -> n47  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
n138 -> n55  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
n138 -> n68  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
n138 -> n79  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
n138 -> n89  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
n138 -> n99  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
n138 -> n109  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
n138 -> n116  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
n139 -> n9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
n140 -> n43  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
n141 -> n75  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
n142 -> n86  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
n143 -> n105  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n4 -> n9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=2, style=dotted];
n5 -> n8  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n9 -> n10  [key=0, style=solid];
n9 -> n11  [key=2, style=dotted];
n6 -> n4  [key=0, style=bold, color=blue];
n8 -> n9  [key=0, style=solid];
n10 -> n8  [key=0, style=bold, color=blue];
n12 -> n13  [key=0, style=solid];
n13 -> n14  [key=0, style=solid];
n13 -> n3  [key=2, style=dotted];
n13 -> n15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n14 -> n12  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid];
n16 -> n17  [key=0, style=solid];
n16 -> n11  [key=2, style=dotted];
n17 -> n18  [key=0, style=solid];
n17 -> n19  [key=2, style=dotted];
n18 -> n15  [key=0, style=bold, color=blue];
n20 -> n21  [key=0, style=solid];
n21 -> n22  [key=0, style=solid];
n21 -> n23  [key=2, style=dotted];
n21 -> n24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n22 -> n20  [key=0, style=bold, color=blue];
n24 -> n25  [key=0, style=solid];
n24 -> n26  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
n25 -> n26  [key=0, style=solid];
n25 -> n32  [key=2, style=dotted];
n25 -> n33  [key=2, style=dotted];
n26 -> n27  [key=0, style=solid];
n26 -> n11  [key=2, style=dotted];
n26 -> n28  [key=1, style=dashed, color=darkseagreen4, label=result];
n26 -> n29  [key=1, style=dashed, color=darkseagreen4, label=result];
n26 -> n30  [key=1, style=dashed, color=darkseagreen4, label=result];
n27 -> n28  [key=0, style=solid];
n27 -> n34  [key=2, style=dotted];
n28 -> n29  [key=0, style=solid];
n28 -> n35  [key=2, style=dotted];
n29 -> n30  [key=0, style=solid];
n29 -> n35  [key=2, style=dotted];
n30 -> n31  [key=0, style=solid];
n30 -> n35  [key=2, style=dotted];
n31 -> n24  [key=0, style=bold, color=blue];
n36 -> n37  [key=0, style=solid];
n37 -> n38  [key=0, style=solid];
n37 -> n3  [key=2, style=dotted];
n37 -> n39  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n38 -> n36  [key=0, style=bold, color=blue];
n39 -> n40  [key=0, style=solid];
n39 -> n43  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
n40 -> n41  [key=0, style=solid];
n40 -> n7  [key=2, style=dotted];
n40 -> n42  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n43 -> n44  [key=0, style=solid];
n43 -> n45  [key=2, style=dotted];
n41 -> n39  [key=0, style=bold, color=blue];
n42 -> n43  [key=0, style=solid];
n44 -> n42  [key=0, style=bold, color=blue];
n46 -> n47  [key=0, style=solid];
n47 -> n48  [key=0, style=solid];
n47 -> n3  [key=2, style=dotted];
n47 -> n49  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n48 -> n46  [key=0, style=bold, color=blue];
n49 -> n50  [key=0, style=solid];
n49 -> d52  [key=0, style=solid, color=green];
n50 -> n51  [key=0, style=solid];
n50 -> n45  [key=2, style=dotted];
n50 -> n52  [key=1, style=dashed, color=darkseagreen4, label=result];
n51 -> n52  [key=0, style=solid];
n51 -> n34  [key=2, style=dotted];
n52 -> n53  [key=0, style=solid];
n52 -> n35  [key=2, style=dotted];
n53 -> n49  [key=0, style=bold, color=blue];
n54 -> n55  [key=0, style=solid];
n55 -> n56  [key=0, style=solid];
n55 -> n23  [key=2, style=dotted];
n55 -> n57  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n56 -> n54  [key=0, style=bold, color=blue];
n57 -> n58  [key=0, style=solid];
n57 -> n59  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
n57 -> n60  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
n58 -> n59  [key=0, style=solid];
n58 -> n65  [key=2, style=dotted];
n59 -> n60  [key=0, style=solid];
n59 -> n65  [key=2, style=dotted];
n60 -> n61  [key=0, style=solid];
n60 -> n45  [key=2, style=dotted];
n60 -> n62  [key=1, style=dashed, color=darkseagreen4, label=result];
n60 -> n63  [key=1, style=dashed, color=darkseagreen4, label=result];
n61 -> n62  [key=0, style=solid];
n61 -> n35  [key=2, style=dotted];
n62 -> n63  [key=0, style=solid];
n62 -> n66  [key=2, style=dotted];
n63 -> n64  [key=0, style=solid];
n63 -> n66  [key=2, style=dotted];
n64 -> n57  [key=0, style=bold, color=blue];
n67 -> n68  [key=0, style=solid];
n68 -> n69  [key=0, style=solid];
n68 -> n3  [key=2, style=dotted];
n68 -> n70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n69 -> n67  [key=0, style=bold, color=blue];
n70 -> n71  [key=0, style=solid];
n70 -> n75  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
n71 -> n72  [key=0, style=solid];
n71 -> n7  [key=2, style=dotted];
n71 -> n74  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n75 -> n76  [key=0, style=solid];
n75 -> n32  [key=2, style=dotted];
n75 -> n77  [key=2, style=dotted];
n72 -> n73  [key=0, style=solid];
n72 -> n35  [key=2, style=dotted];
n74 -> n75  [key=0, style=solid];
n73 -> n70  [key=0, style=bold, color=blue];
n76 -> n74  [key=0, style=bold, color=blue];
n78 -> n79  [key=0, style=solid];
n79 -> n80  [key=0, style=solid];
n79 -> n3  [key=2, style=dotted];
n79 -> n81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n80 -> n78  [key=0, style=bold, color=blue];
n81 -> n82  [key=0, style=solid];
n81 -> n86  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
n82 -> n83  [key=0, style=solid];
n82 -> n7  [key=2, style=dotted];
n82 -> n85  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n86 -> n87  [key=0, style=solid];
n86 -> n77  [key=2, style=dotted];
n83 -> n84  [key=0, style=solid];
n83 -> n35  [key=2, style=dotted];
n85 -> n86  [key=0, style=solid];
n84 -> n81  [key=0, style=bold, color=blue];
n87 -> n85  [key=0, style=bold, color=blue];
n88 -> n89  [key=0, style=solid];
n89 -> n90  [key=0, style=solid];
n89 -> n23  [key=2, style=dotted];
n89 -> n91  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n90 -> n88  [key=0, style=bold, color=blue];
n91 -> n92  [key=0, style=solid];
n91 -> n93  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
n92 -> n93  [key=0, style=solid];
n92 -> n32  [key=2, style=dotted];
n92 -> n77  [key=2, style=dotted];
n93 -> n94  [key=0, style=solid];
n93 -> n97  [key=2, style=dotted];
n93 -> n95  [key=1, style=dashed, color=darkseagreen4, label=hash];
n94 -> n95  [key=0, style=solid];
n94 -> n35  [key=2, style=dotted];
n95 -> n96  [key=0, style=solid];
n95 -> n35  [key=2, style=dotted];
n96 -> n91  [key=0, style=bold, color=blue];
n98 -> n99  [key=0, style=solid];
n99 -> n100  [key=0, style=solid];
n99 -> n3  [key=2, style=dotted];
n99 -> n101  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n100 -> n98  [key=0, style=bold, color=blue];
n101 -> n102  [key=0, style=solid];
n101 -> n105  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
n102 -> n103  [key=0, style=solid];
n102 -> n7  [key=2, style=dotted];
n102 -> n104  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n105 -> n106  [key=0, style=solid];
n105 -> n107  [key=2, style=dotted];
n103 -> n101  [key=0, style=bold, color=blue];
n104 -> n105  [key=0, style=solid];
n106 -> n104  [key=0, style=bold, color=blue];
n108 -> n109  [key=0, style=solid];
n109 -> n110  [key=0, style=solid];
n109 -> n3  [key=2, style=dotted];
n109 -> n111  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n110 -> n108  [key=0, style=bold, color=blue];
n111 -> n112  [key=0, style=solid];
n112 -> n113  [key=0, style=solid];
n112 -> n107  [key=2, style=dotted];
n113 -> n114  [key=0, style=solid];
n113 -> n19  [key=2, style=dotted];
n114 -> n111  [key=0, style=bold, color=blue];
n115 -> n116  [key=0, style=solid];
n116 -> n117  [key=0, style=solid];
n116 -> n23  [key=2, style=dotted];
n116 -> n118  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n117 -> n115  [key=0, style=bold, color=blue];
n118 -> n119  [key=0, style=solid];
n118 -> n120  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
n119 -> n120  [key=0, style=solid];
n119 -> n32  [key=2, style=dotted];
n119 -> n33  [key=2, style=dotted];
n120 -> n121  [key=0, style=solid];
n120 -> n107  [key=2, style=dotted];
n120 -> n122  [key=1, style=dashed, color=darkseagreen4, label=result];
n120 -> n123  [key=1, style=dashed, color=darkseagreen4, label=result];
n121 -> n122  [key=0, style=solid];
n121 -> n34  [key=2, style=dotted];
n122 -> n123  [key=0, style=solid];
n122 -> n35  [key=2, style=dotted];
n123 -> n124  [key=0, style=solid];
n123 -> n35  [key=2, style=dotted];
n124 -> n118  [key=0, style=bold, color=blue];
n125 -> n126  [key=0, style=solid];
n125 -> n128  [key=1, style=dashed, color=darkseagreen4, label="System.Action<IRedisClient, HangFire.Redis.RedisConnection>"];
n126 -> n127  [key=0, style=solid];
n126 -> n130  [key=2, style=dotted];
n126 -> n128  [key=1, style=dashed, color=darkseagreen4, label=redis];
n128 -> n129  [key=0, style=solid];
n128 -> n132  [key=2, style=dotted];
n127 -> n128  [key=0, style=solid];
n127 -> n131  [key=2, style=dotted];
n129 -> n125  [key=0, style=bold, color=blue];
n133 -> n134  [key=0, style=solid];
n133 -> n135  [key=1, style=dashed, color=darkseagreen4, label="System.Action<HangFire.Redis.RedisConnection>"];
n134 -> n135  [key=0, style=solid];
n134 -> n131  [key=2, style=dotted];
n134 -> n130  [key=2, style=dotted];
n135 -> n136  [key=0, style=solid];
n135 -> n137  [key=2, style=dotted];
n136 -> n133  [key=0, style=bold, color=blue];
d38 -> d39  [key=0, style=solid, color=green];
d38 -> d43  [key=2, style=dotted, color=green];
d38 -> d11  [key=2, style=dotted, color=green];
d38 -> d45  [key=1, style=dashed, color=green, label="lambda expression"];
d114 -> d38  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d39  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d40  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d49  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d41  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d55  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d56  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d57  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d18  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d25  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d26  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d31  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d35  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d58  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d65  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d59  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d71  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d72  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d73  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d74  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d82  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d75  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d88  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d89  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d90  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d97  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d91  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d114 -> d102  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts"];
d37 -> d38  [key=0, style=solid, color=green];
d39 -> d40  [key=0, style=solid, color=green];
d39 -> d21  [key=2, style=dotted, color=green];
d39 -> d49  [key=1, style=dashed, color=green, label=wrapper];
d45 -> d46  [key=0, style=solid, color=green];
d40 -> d41  [key=0, style=solid, color=green];
d40 -> d11  [key=2, style=dotted, color=green];
d40 -> d48  [key=1, style=dashed, color=green, label="lambda expression"];
d21 -> d102  [key=0, style=solid];
d49 -> d50  [key=0, style=solid, color=green];
d49 -> d28  [key=2, style=dotted, color=green];
d41 -> d42  [key=0, style=solid, color=green];
d41 -> d44  [key=2, style=dotted, color=green];
d41 -> d29  [key=2, style=dotted, color=green];
d41 -> n49  [key=1, style=dashed, color=green, label="lambda expression"];
d48 -> d49  [key=0, style=solid, color=green];
d115 -> d49  [key=1, style=dashed, color=green, label=wrapper];
d50 -> d48  [key=0, style=bold, color=blue];
d42 -> d37  [key=0, style=bold, color=blue];
d46 -> d47  [key=0, style=solid, color=green];
d46 -> d11  [key=2, style=dotted, color=green];
d46 -> d33  [key=2, style=dotted, color=green];
d47 -> d45  [key=0, style=bold, color=blue];
d52 -> d53  [key=0, style=solid, color=green];
d52 -> d11  [key=2, style=dotted, color=green];
d52 -> d33  [key=2, style=dotted, color=green];
d53 -> n49  [key=0, style=bold, color=blue];
d55 -> d56  [key=0, style=solid, color=green];
d55 -> d43  [key=2, style=dotted, color=green];
d55 -> d11  [key=2, style=dotted, color=green];
d55 -> d61  [key=1, style=dashed, color=green, label="lambda expression"];
d54 -> d55  [key=0, style=solid, color=green];
d56 -> d57  [key=0, style=solid, color=green];
d61 -> d62  [key=0, style=solid, color=green];
d57 -> d58  [key=0, style=solid, color=green];
d57 -> d21  [key=2, style=dotted, color=green];
d57 -> d65  [key=1, style=dashed, color=green, label=wrapper];
d58 -> d11  [key=2, style=dotted];
d58 -> d59  [key=0, style=solid];
d58 -> d64  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d65 -> d28  [key=2, style=dotted];
d65 -> d66  [key=0, style=solid];
d62 -> d63  [key=0, style=solid, color=green];
d62 -> d11  [key=2, style=dotted, color=green];
d62 -> d33  [key=2, style=dotted, color=green];
d63 -> d61  [key=0, style=bold, color=blue];
d1 -> d2  [key=0, style=solid];
d1 -> d5  [key=2, style=dotted];
d2 -> d3  [key=0, style=solid];
d3 -> d4  [key=0, style=solid];
d3 -> d6  [key=2, style=dotted];
d18 -> d21  [key=2, style=dotted];
d18 -> d19  [key=0, style=solid];
d19 -> d20  [key=0, style=solid];
d19 -> d22  [key=2, style=dotted];
d24 -> d21  [key=2, style=dotted];
d24 -> d25  [key=0, style=solid];
d25 -> d28  [key=2, style=dotted];
d25 -> d26  [key=0, style=solid];
d26 -> d29  [key=2, style=dotted];
d26 -> d27  [key=0, style=solid];
d26 -> d30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d31 -> d11  [key=2, style=dotted];
d31 -> d33  [key=2, style=dotted];
d31 -> d32  [key=0, style=solid];
d31 -> d34  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d35 -> d36  [key=0, style=solid];
d59 -> d29  [key=2, style=dotted];
d59 -> d60  [key=0, style=solid];
d59 -> d67  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d71 -> d21  [key=2, style=dotted];
d71 -> d72  [key=0, style=solid];
d71 -> d74  [key=1, style=dashed, color=darkseagreen4, label=wrapper];
d71 -> d82  [key=1, style=dashed, color=darkseagreen4, label=wrapper];
d72 -> d43  [key=2, style=dotted];
d72 -> d11  [key=2, style=dotted];
d72 -> d73  [key=0, style=solid];
d72 -> d78  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d73 -> d74  [key=0, style=solid];
d73 -> d77  [key=2, style=dotted];
d74 -> d11  [key=2, style=dotted];
d74 -> d75  [key=0, style=solid];
d74 -> d81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d82 -> d28  [key=2, style=dotted];
d82 -> d83  [key=0, style=solid];
d75 -> d29  [key=2, style=dotted];
d75 -> d76  [key=0, style=solid];
d75 -> d84  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d88 -> d43  [key=2, style=dotted];
d88 -> d11  [key=2, style=dotted];
d88 -> d89  [key=0, style=solid];
d88 -> d93  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d89 -> d21  [key=2, style=dotted];
d89 -> d90  [key=0, style=solid];
d89 -> d97  [key=1, style=dashed, color=darkseagreen4, label=wrapper];
d90 -> d11  [key=2, style=dotted];
d90 -> d91  [key=0, style=solid];
d90 -> d96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d97 -> d28  [key=2, style=dotted];
d97 -> d98  [key=0, style=solid];
d91 -> d29  [key=2, style=dotted];
d91 -> d92  [key=0, style=solid];
d91 -> d99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d102 -> d103  [key=0, style=solid];
d102 -> d104  [key=2, style=dotted];
d8 -> d11  [key=2, style=dotted];
d8 -> d9  [key=0, style=solid];
d8 -> d13  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d68 -> d11  [key=2, style=dotted];
d68 -> d33  [key=2, style=dotted];
d68 -> d69  [key=0, style=solid];
d79 -> d11  [key=2, style=dotted];
d79 -> d33  [key=2, style=dotted];
d79 -> d80  [key=0, style=solid];
d85 -> d11  [key=2, style=dotted];
d85 -> d33  [key=2, style=dotted];
d85 -> d86  [key=0, style=solid];
d94 -> d11  [key=2, style=dotted];
d94 -> d33  [key=2, style=dotted];
d94 -> d95  [key=0, style=solid];
d100 -> d11  [key=2, style=dotted];
d100 -> d33  [key=2, style=dotted];
d100 -> d101  [key=0, style=solid];
d103 -> d21  [key=0, style=bold, color=blue];
d60 -> d54  [key=0, style=bold, color=blue];
d64 -> d65  [key=0, style=solid];
d116 -> d65  [key=1, style=dashed, color=darkseagreen4, label=wrapper];
d66 -> d64  [key=0, style=bold, color=blue];
d0 -> d1  [key=0, style=solid];
d4 -> d0  [key=0, style=bold, color=blue];
d17 -> d18  [key=0, style=solid];
d20 -> d17  [key=0, style=bold, color=blue];
d23 -> d24  [key=0, style=solid];
d27 -> d23  [key=0, style=bold, color=blue];
d30 -> d31  [key=0, style=solid];
d32 -> d30  [key=0, style=bold, color=blue];
d34 -> d35  [key=0, style=solid];
d36 -> d34  [key=0, style=bold, color=blue];
d67 -> d68  [key=0, style=solid];
d70 -> d71  [key=0, style=solid];
d78 -> d79  [key=0, style=solid];
d81 -> d82  [key=0, style=solid];
d117 -> d82  [key=1, style=dashed, color=darkseagreen4, label=wrapper];
d83 -> d81  [key=0, style=bold, color=blue];
d76 -> d70  [key=0, style=bold, color=blue];
d84 -> d85  [key=0, style=solid];
d87 -> d88  [key=0, style=solid];
d93 -> d94  [key=0, style=solid];
d96 -> d97  [key=0, style=solid];
d118 -> d97  [key=1, style=dashed, color=darkseagreen4, label=wrapper];
d98 -> d96  [key=0, style=bold, color=blue];
d92 -> d87  [key=0, style=bold, color=blue];
d99 -> d100  [key=0, style=solid];
d7 -> d8  [key=0, style=solid];
d9 -> d10  [key=0, style=solid];
d9 -> d12  [key=2, style=dotted];
d13 -> d14  [key=0, style=solid];
d69 -> d67  [key=0, style=bold, color=blue];
d80 -> d78  [key=0, style=bold, color=blue];
d86 -> d84  [key=0, style=bold, color=blue];
d95 -> d93  [key=0, style=bold, color=blue];
d101 -> d99  [key=0, style=bold, color=blue];
d10 -> d7  [key=0, style=bold, color=blue];
d15 -> d13  [key=0, style=bold, color=blue];
d14 -> d15  [key=0, style=solid];
d14 -> d16  [key=2, style=dotted];
m0_247 -> m0_248  [key=0, style=solid, color=green];
m0_247 -> m0_251  [key=1, style=dashed, color=green, label=string];
m0_247 -> m0_9  [key=3, color=darkorchid, style=bold, label="method methodReturn HangFire.Storage.Monitoring.JobList<HangFire.Storage.Monitoring.EnqueuedJobDto> EnqueuedJobs"];
m0_248 -> m0_249  [key=0, style=solid, color=green];
m0_248 -> m0_9  [key=2, style=dotted, color=green];
m0_248 -> m0_250  [key=1, style=dashed, color=green, label="lambda expression"];
m0_249 -> m0_247  [key=0, style=bold, color=blue];
m0_15 -> m0_16  [key=0, style=solid, color=green];
m0_15 -> m0_9  [key=2, style=dotted, color=green];
m0_15 -> m0_17  [key=1, style=dashed, color=green, label="lambda expression"];
m0_274 -> m0_327  [key=0, style=solid];
m0_274 -> m0_334  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_274 -> m0_352  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_274 -> m0_335  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_274 -> m0_336  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.Dictionary<System.DateTime, long> GetHourlyTimelineStats"];
m0_329 -> m0_203  [key=3, color=green, style=bold, label="Local variable int i"];
m0_329 -> m0_330  [key=0, style=solid];
m0_329 -> m0_333  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_338 -> m0_203  [key=3, color=green, style=bold, label="Local variable int i"];
m0_338 -> m0_339  [key=0, style=solid];
m0_338 -> m0_344  [key=0, style=solid];
m0_334 -> m0_92  [key=2, style=dotted];
m0_334 -> m0_93  [key=2, style=dotted];
m0_334 -> m0_335  [key=0, style=solid];
m0_334 -> m0_351  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_328 -> m0_86  [key=2, style=dotted];
m0_328 -> m0_329  [key=0, style=solid];
m0_328 -> m0_338  [key=1, style=dashed, color=darkseagreen4, label=dates];
m0_328 -> m0_334  [key=1, style=dashed, color=darkseagreen4, label=dates];
m0_328 -> m0_331  [key=1, style=dashed, color=darkseagreen4, label=dates];
m0_328 -> m0_342  [key=1, style=dashed, color=darkseagreen4, label=dates];
m0_336 -> m0_87  [key=2, style=dotted];
m0_336 -> m0_337  [key=0, style=solid];
m0_336 -> m0_342  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_336 -> m0_344  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_330 -> m0_334  [key=0, style=solid];
m0_330 -> m0_331  [key=0, style=solid];
m0_333 -> m0_330  [key=0, style=solid];
m0_333 -> m0_333  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_337 -> m0_338  [key=0, style=solid];
m0_337 -> m0_340  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_337 -> m0_342  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_337 -> m0_343  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_343 -> m0_338  [key=0, style=solid];
m0_343 -> m0_343  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_339 -> m0_340  [key=0, style=solid];
m0_344 -> m0_345  [key=0, style=solid];
m0_331 -> m0_224  [key=2, style=dotted];
m0_331 -> m0_332  [key=0, style=solid];
m0_327 -> m0_328  [key=0, style=solid];
m0_327 -> m0_331  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m0_327 -> m0_332  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m0_335 -> m0_336  [key=0, style=solid];
m0_335 -> m0_347  [key=2, style=dotted];
m0_335 -> m0_340  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m0_342 -> m0_343  [key=0, style=solid];
m0_342 -> m0_350  [key=2, style=dotted];
m0_332 -> m0_333  [key=0, style=solid];
m0_332 -> m0_332  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m0_332 -> m0_346  [key=2, style=dotted];
m0_340 -> m0_342  [key=0, style=solid];
m0_340 -> m0_341  [key=0, style=solid];
m0_340 -> m0_348  [key=2, style=dotted];
m0_340 -> m0_349  [key=2, style=dotted];
m0_341 -> m0_342  [key=0, style=solid];
m0_345 -> m0_274  [key=0, style=bold, color=blue];
m0_122 -> m0_356  [key=0, style=solid];
m0_122 -> m0_363  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_122 -> m0_380  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_122 -> m0_364  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_122 -> m0_365  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.Dictionary<System.DateTime, long> GetTimelineStats"];
m0_367 -> m0_203  [key=3, color=green, style=bold, label="Local variable int i"];
m0_367 -> m0_368  [key=0, style=solid];
m0_367 -> m0_373  [key=0, style=solid];
m0_363 -> m0_92  [key=2, style=dotted];
m0_363 -> m0_93  [key=2, style=dotted];
m0_363 -> m0_364  [key=0, style=solid];
m0_363 -> m0_379  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_362 -> m0_92  [key=2, style=dotted];
m0_362 -> m0_93  [key=2, style=dotted];
m0_362 -> m0_367  [key=1, style=dashed, color=darkseagreen4, label=stringDates];
m0_362 -> m0_363  [key=0, style=solid];
m0_362 -> m0_376  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_358 -> m0_86  [key=2, style=dotted];
m0_358 -> m0_362  [key=1, style=dashed, color=darkseagreen4, label=dates];
m0_358 -> m0_359  [key=0, style=solid];
m0_358 -> m0_360  [key=1, style=dashed, color=darkseagreen4, label=dates];
m0_358 -> m0_371  [key=1, style=dashed, color=darkseagreen4, label=dates];
m0_365 -> m0_87  [key=2, style=dotted];
m0_365 -> m0_366  [key=0, style=solid];
m0_365 -> m0_371  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_365 -> m0_373  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_356 -> m0_357  [key=0, style=solid];
m0_356 -> m0_359  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m0_356 -> m0_360  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m0_356 -> m0_361  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m0_364 -> m0_365  [key=0, style=solid];
m0_364 -> m0_347  [key=2, style=dotted];
m0_364 -> m0_369  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m0_366 -> m0_367  [key=0, style=solid];
m0_366 -> m0_369  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_366 -> m0_371  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_366 -> m0_372  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_372 -> m0_367  [key=0, style=solid];
m0_372 -> m0_372  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_368 -> m0_369  [key=0, style=solid];
m0_373 -> m0_374  [key=0, style=solid];
m0_360 -> m0_224  [key=2, style=dotted];
m0_360 -> m0_361  [key=0, style=solid];
m0_359 -> m0_362  [key=0, style=solid];
m0_359 -> m0_360  [key=0, style=solid];
m0_357 -> m0_358  [key=0, style=solid];
m0_357 -> m0_359  [key=1, style=dashed, color=darkseagreen4, label=startDate];
m0_357 -> m0_375  [key=2, style=dotted];
m0_371 -> m0_372  [key=0, style=solid];
m0_371 -> m0_350  [key=2, style=dotted];
m0_361 -> m0_359  [key=0, style=solid];
m0_361 -> m0_361  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m0_361 -> m0_375  [key=2, style=dotted];
m0_369 -> m0_371  [key=0, style=solid];
m0_369 -> m0_370  [key=0, style=solid];
m0_369 -> m0_348  [key=2, style=dotted];
m0_369 -> m0_349  [key=2, style=dotted];
m0_370 -> m0_371  [key=0, style=solid];
m0_374 -> m0_122  [key=0, style=bold, color=blue];
m0_257 -> m0_258  [key=0, style=solid, color=green];
m0_257 -> m0_261  [key=1, style=dashed, color=green, label=string];
m0_257 -> m0_9  [key=3, color=darkorchid, style=bold, label="method methodReturn HangFire.Storage.Monitoring.JobList<HangFire.Storage.Monitoring.FetchedJobDto> FetchedJobs"];
m0_258 -> m0_259  [key=0, style=solid, color=green];
m0_258 -> m0_9  [key=2, style=dotted, color=green];
m0_258 -> m0_260  [key=1, style=dashed, color=green, label="lambda expression"];
m0_259 -> m0_257  [key=0, style=bold, color=blue];
m0_275 -> m0_276  [key=0, style=solid, color=green];
m0_275 -> m0_9  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IDictionary<System.DateTime, long> HourlyFailedJobs"];
m0_276 -> m0_277  [key=0, style=solid, color=green];
m0_276 -> m0_9  [key=2, style=dotted, color=green];
m0_276 -> m0_278  [key=1, style=dashed, color=green, label="lambda expression"];
m0_277 -> m0_275  [key=0, style=bold, color=blue];
m0_433 -> m0_434  [key=0, style=solid, color=green];
m0_434 -> m0_434  [key=3, color=green, style=bold, label="method methodReturn HangFire.Storage.Monitoring.StatisticsDto "];
m0_434 -> m0_435  [key=0, style=solid, color=green];
m0_434 -> m0_70  [key=2, style=dotted, color=green];
m0_434 -> m0_436  [key=1, style=dashed, color=green, label="lambda expression"];
m0_435 -> m0_433  [key=0, style=bold, color=blue];
m0_22 -> m0_23  [key=0, style=solid, color=green];
m0_22 -> m0_26  [key=1, style=dashed, color=green, label=string];
m0_22 -> m0_9  [key=3, color=darkorchid, style=bold, label="method methodReturn long FetchedCount"];
m0_23 -> m0_24  [key=0, style=solid, color=green];
m0_23 -> m0_9  [key=2, style=dotted, color=green];
m0_23 -> m0_25  [key=1, style=dashed, color=green, label="lambda expression"];
m0_24 -> m0_22  [key=0, style=bold, color=blue];
m0_24 -> m0_25  [key=0, style=solid];
m0_281 -> m0_282  [key=0, style=solid, color=green];
m0_281 -> m0_285  [key=1, style=dashed, color=green, label=string];
m0_281 -> m0_289  [key=1, style=dashed, color=green, label=string];
m0_282 -> m0_203  [key=3, color=green, style=bold, label="method methodReturn HangFire.Storage.Monitoring.JobDetailsDto "];
m0_282 -> m0_283  [key=0, style=solid, color=green];
m0_282 -> m0_70  [key=2, style=dotted, color=green];
m0_282 -> m0_284  [key=1, style=dashed, color=green, label="lambda expression"];
m0_283 -> m0_281  [key=0, style=bold, color=blue];
m0_427 -> m0_428  [key=0, style=solid, color=green];
m0_427 -> m0_9  [key=3, color=darkorchid, style=bold, label="method methodReturn long SucceededListCount"];
m0_428 -> m0_429  [key=0, style=solid, color=green];
m0_428 -> m0_9  [key=2, style=dotted, color=green];
m0_428 -> m0_430  [key=1, style=dashed, color=green, label="lambda expression"];
m0_429 -> m0_427  [key=0, style=bold, color=blue];
m0_35 -> m0_36  [key=0, style=solid, color=green];
m0_35 -> m0_9  [key=2, style=dotted, color=green];
m0_35 -> m0_37  [key=1, style=dashed, color=green, label="lambda expression"];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_40  [key=2, style=dotted];
m0_36 -> m0_10  [key=2, style=dotted];
m0_36 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_36 -> m0_34  [key=0, style=bold, color=blue];
m0_37 -> m0_38  [key=0, style=solid, color=green];
m0_37 -> m0_21  [key=2, style=dotted];
m0_37 -> m0_46  [key=1, style=dashed, color=darkseagreen4, label=task];
m0_38 -> m0_39  [key=0, style=solid, color=green];
m0_38 -> m0_41  [key=2, style=dotted];
m0_38 -> m0_45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_38 -> m0_13  [key=2, style=dotted, color=green];
m0_39 -> m0_35  [key=0, style=bold, color=blue];
m0_39 -> m0_37  [key=0, style=bold, color=blue];
m0_191 -> m0_192  [key=0, style=solid, color=green];
m0_191 -> m0_195  [key=1, style=dashed, color=green, label=int];
m0_191 -> m0_9  [key=3, color=darkorchid, style=bold, label="method methodReturn HangFire.Storage.Monitoring.JobList<HangFire.Storage.Monitoring.DeletedJobDto> DeletedJobs"];
m0_192 -> m0_193  [key=0, style=solid, color=green];
m0_192 -> m0_9  [key=2, style=dotted, color=green];
m0_192 -> m0_194  [key=1, style=dashed, color=green, label="lambda expression"];
m0_193 -> m0_191  [key=0, style=bold, color=blue];
m0_29 -> m0_30  [key=0, style=solid, color=green];
m0_29 -> m0_9  [key=2, style=dotted, color=green];
m0_29 -> m0_31  [key=1, style=dashed, color=green, label="lambda expression"];
m0_222 -> m0_394  [key=1, style=dashed, color=green, label="System.Collections.Generic.IList<string>"];
m0_222 -> m0_419  [key=1, style=dashed, color=green, label="System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>"];
m0_222 -> m0_382  [key=0, style=solid];
m0_222 -> m0_384  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<string>"];
m0_222 -> m0_385  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<string>"];
m0_222 -> m0_386  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_222 -> m0_387  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_222 -> m0_388  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<string>"];
m0_222 -> m0_391  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_222 -> m0_392  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_222 -> m0_409  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_394 -> m0_395  [key=0, style=solid, color=green];
m0_394 -> m0_397  [key=2, style=dotted, color=green];
m0_394 -> m0_92  [key=2, style=dotted, color=green];
m0_394 -> m0_93  [key=2, style=dotted, color=green];
m0_394 -> m0_415  [key=1, style=dashed, color=green, label="lambda expression"];
m0_394 -> m0_418  [key=1, style=dashed, color=green, label="lambda expression"];
m0_384 -> m0_394  [key=1, style=dashed, color=green, label=jobs];
m0_384 -> m0_390  [key=1, style=dashed, color=green, label=jobs];
m0_384 -> m0_385  [key=0, style=solid];
m0_384 -> m0_396  [key=2, style=dotted];
m0_384 -> m0_404  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m0_384 -> m0_405  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m0_384 -> m0_416  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m0_385 -> m0_394  [key=1, style=dashed, color=green, label=states];
m0_385 -> m0_386  [key=0, style=solid];
m0_385 -> m0_396  [key=2, style=dotted];
m0_385 -> m0_392  [key=1, style=dashed, color=darkseagreen4, label=states];
m0_385 -> m0_412  [key=1, style=dashed, color=darkseagreen4, label=states];
m0_385 -> m0_413  [key=1, style=dashed, color=darkseagreen4, label=states];
m0_385 -> m0_416  [key=1, style=dashed, color=darkseagreen4, label=states];
m0_386 -> m0_394  [key=1, style=dashed, color=green, label="string[]"];
m0_386 -> m0_390  [key=1, style=dashed, color=green, label="string[]"];
m0_386 -> m0_399  [key=1, style=dashed, color=green, label="string[]"];
m0_386 -> m0_386  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_386 -> m0_387  [key=0, style=solid];
m0_386 -> m0_416  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_393 -> m0_394  [key=0, style=solid, color=green];
m0_393 -> m0_90  [key=2, style=dotted];
m0_390 -> m0_391  [key=0, style=solid, color=green];
m0_390 -> m0_89  [key=2, style=dotted, color=green];
m0_390 -> m0_398  [key=1, style=dashed, color=green, label="lambda expression"];
m0_390 -> m0_403  [key=1, style=dashed, color=green, label="lambda expression"];
m0_387 -> m0_390  [key=1, style=dashed, color=green, label=pipeline];
m0_387 -> m0_88  [key=2, style=dotted];
m0_387 -> m0_393  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m0_387 -> m0_388  [key=0, style=solid];
m0_387 -> m0_392  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m0_389 -> m0_390  [key=0, style=solid, color=green];
m0_389 -> m0_399  [key=1, style=dashed, color=green, label=id];
m0_389 -> m0_404  [key=1, style=dashed, color=darkseagreen4, label=id];
m0_389 -> m0_405  [key=1, style=dashed, color=darkseagreen4, label=id];
m0_389 -> m0_392  [key=1, style=dashed, color=darkseagreen4, label=id];
m0_389 -> m0_409  [key=1, style=dashed, color=darkseagreen4, label=id];
m0_389 -> m0_412  [key=1, style=dashed, color=darkseagreen4, label=id];
m0_389 -> m0_413  [key=1, style=dashed, color=darkseagreen4, label=id];
m0_389 -> m0_388  [key=3, color=darkorchid, style=bold, label="Local variable string id"];
m0_391 -> m0_392  [key=0, style=solid];
m0_391 -> m0_388  [key=0, style=solid];
m0_383 -> m0_54  [key=2, style=dotted];
m0_383 -> m0_86  [key=2, style=dotted];
m0_383 -> m0_395  [key=0, style=solid];
m0_392 -> m0_89  [key=2, style=dotted];
m0_392 -> m0_388  [key=0, style=solid];
m0_392 -> m0_408  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_392 -> m0_411  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_382 -> m0_384  [key=0, style=solid];
m0_382 -> m0_383  [key=0, style=solid];
m0_388 -> m0_393  [key=0, style=solid];
m0_388 -> m0_389  [key=0, style=solid];
m0_395 -> m0_222  [key=0, style=bold, color=blue];
m0_9 -> m0_7  [key=3, color=green, style=bold, label="Parameter variable System.Func<IRedisClient, T> action"];
m0_9 -> m0_15  [key=3, color=green, style=bold, label="Parameter variable System.Func<IRedisClient, T> action"];
m0_9 -> m0_23  [key=3, color=green, style=bold, label="Parameter variable System.Func<IRedisClient, T> action"];
m0_9 -> m0_29  [key=3, color=green, style=bold, label="Parameter variable System.Func<IRedisClient, T> action"];
m0_9 -> m0_35  [key=3, color=green, style=bold, label="Parameter variable System.Func<IRedisClient, T> action"];
m0_9 -> m0_41  [key=3, color=green, style=bold, label="Parameter variable System.Func<IRedisClient, T> action"];
m0_9 -> m0_47  [key=3, color=green, style=bold, label="Parameter variable System.Func<IRedisClient, T> action"];
m0_9 -> m0_117  [key=3, color=green, style=bold, label="Parameter variable System.Func<IRedisClient, T> action"];
m0_9 -> m0_124  [key=3, color=green, style=bold, label="Parameter variable System.Func<IRedisClient, T> action"];
m0_9 -> m0_167  [key=3, color=green, style=bold, label="Parameter variable System.Func<IRedisClient, T> action"];
m0_9 -> m0_179  [key=3, color=green, style=bold, label="Parameter variable System.Func<IRedisClient, T> action"];
m0_9 -> m0_192  [key=3, color=green, style=bold, label="Parameter variable System.Func<IRedisClient, T> action"];
m0_9 -> m0_248  [key=3, color=green, style=bold, label="Parameter variable System.Func<IRedisClient, T> action"];
m0_9 -> m0_258  [key=3, color=green, style=bold, label="Parameter variable System.Func<IRedisClient, T> action"];
m0_9 -> m0_269  [key=3, color=green, style=bold, label="Parameter variable System.Func<IRedisClient, T> action"];
m0_9 -> m0_276  [key=3, color=green, style=bold, label="Parameter variable System.Func<IRedisClient, T> action"];
m0_9 -> m0_428  [key=3, color=green, style=bold, label="Parameter variable System.Func<IRedisClient, T> action"];
m0_9 -> m0_512  [key=0, style=solid, color=green];
m0_9 -> m0_513  [key=1, style=dashed, color=green, label="System.Func<IRedisClient, T>"];
m0_9 -> m0_6  [key=0, style=bold, color=blue];
m0_512 -> m0_513  [key=0, style=solid, color=green];
m0_512 -> m0_515  [key=2, style=dotted, color=green];
m0_513 -> m0_514  [key=0, style=solid, color=green];
m0_513 -> m0_516  [key=2, style=dotted, color=green];
m0_514 -> m0_9  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid, color=green];
m0_0 -> m0_3  [key=1, style=dashed, color=green, label=PooledRedisClientManager];
m0_1 -> m0_2  [key=0, style=solid, color=green];
m0_1 -> m0_3  [key=0, style=solid, color=green];
m0_1 -> m0_4  [key=2, style=dotted];
m0_2 -> m0_4  [key=0, style=solid, color=green];
m0_2 -> m0_5  [key=2, style=dotted, color=green];
m0_2 -> m0_3  [key=0, style=solid];
m0_3 -> m0_4  [key=0, style=solid, color=green];
m0_3 -> m0_0  [key=0, style=bold, color=blue];
m0_4 -> m0_0  [key=0, style=bold, color=blue];
m0_411 -> m0_413  [key=1, style=dashed, color=darkseagreen4, label="?"];
m0_411 -> m0_412  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_42  [key=0, style=bold, color=blue];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_15  [key=2, style=dotted];
m0_14 -> m0_12  [key=0, style=bold, color=blue];
m0_14 -> m0_15  [key=0, style=solid, color=green];
m0_14 -> m0_18  [key=1, style=dashed, color=green, label=string];
m0_14 -> m0_9  [key=3, color=darkorchid, style=bold, label="method methodReturn long EnqueuedCount"];
m0_31 -> m0_32  [key=0, style=solid, color=green];
m0_32 -> m0_33  [key=0, style=solid, color=green];
m0_32 -> d33  [key=2, style=dotted];
m0_32 -> m0_13  [key=2, style=dotted, color=green];
m0_33 -> m0_31  [key=0, style=bold, color=blue];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_11  [key=0, style=solid, color=green];
m0_42 -> m0_40  [key=0, style=bold, color=blue];
m0_46 -> m0_47  [key=0, style=solid, color=green];
m0_46 -> m0_29  [key=2, style=dotted];
m0_46 -> m0_50  [key=1, style=dashed, color=green, label=int];
m0_46 -> m0_9  [key=3, color=darkorchid, style=bold, label="method methodReturn HangFire.Storage.Monitoring.JobList<HangFire.Storage.Monitoring.ProcessingJobDto> ProcessingJobs"];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_43  [key=0, style=bold, color=blue];
m0_43 -> m0_44  [key=0, style=solid, color=green];
m0_43 -> m0_10  [key=2, style=dotted];
m0_43 -> d33  [key=2, style=dotted];
m0_44 -> m0_42  [key=0, style=bold, color=blue];
m0_44 -> m0_45  [key=0, style=solid, color=green];
m0_44 -> m0_21  [key=2, style=dotted, color=green];
m0_47 -> m0_45  [key=0, style=bold, color=blue];
m0_47 -> m0_48  [key=0, style=solid, color=green];
m0_47 -> m0_9  [key=2, style=dotted, color=green];
m0_47 -> m0_49  [key=1, style=dashed, color=green, label="lambda expression"];
m0_11 -> m0_12  [key=0, style=solid, color=green];
m0_11 -> m0_13  [key=2, style=dotted, color=green];
m0_17 -> m0_18  [key=0, style=solid, color=red];
m0_17 -> m0_21  [key=2, style=dotted];
m0_17 -> m0_19  [key=1, style=dashed, color=darkseagreen4, label=task];
m0_18 -> m0_19  [key=0, style=solid, color=red];
m0_18 -> m0_20  [key=2, style=dotted, color=green];
m0_18 -> m0_21  [key=2, style=dotted, color=green];
m0_18 -> m0_22  [key=2, style=dotted, color=red];
m0_18 -> m0_23  [key=2, style=dotted, color=red];
m0_19 -> m0_17  [key=0, style=bold, color=blue];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_22  [key=2, style=dotted];
m0_19 -> m0_23  [key=2, style=dotted];
m0_25 -> m0_26  [key=0, style=solid, color=red];
m0_25 -> m0_21  [key=2, style=dotted];
m0_26 -> m0_27  [key=0, style=solid, color=red];
m0_26 -> m0_20  [key=2, style=dotted, color=green];
m0_26 -> m0_21  [key=2, style=dotted, color=green];
m0_26 -> m0_29  [key=2, style=dotted, color=red];
m0_27 -> m0_25  [key=0, style=bold, color=blue];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_30  [key=2, style=dotted];
m0_27 -> m0_31  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_49 -> m0_50  [key=0, style=solid, color=green];
m0_49 -> m0_51  [key=1, style=dashed, color=green, label=IRedisClient];
m0_49 -> m0_46  [key=1, style=dashed, color=darkseagreen4, label=task];
m0_50 -> m0_51  [key=0, style=solid, color=green];
m0_50 -> m0_53  [key=2, style=dotted, color=green];
m0_51 -> m0_52  [key=0, style=solid, color=green];
m0_51 -> m0_54  [key=2, style=dotted, color=green];
m0_51 -> m0_55  [key=2, style=dotted, color=green];
m0_51 -> m0_56  [key=2, style=dotted, color=green];
m0_51 -> m0_57  [key=2, style=dotted, color=green];
m0_51 -> m0_58  [key=1, style=dashed, color=green, label="lambda expression"];
m0_51 -> m0_64  [key=1, style=dashed, color=green, label="lambda expression"];
m0_52 -> m0_49  [key=0, style=bold, color=blue];
m0_58 -> m0_59  [key=0, style=solid, color=green];
m0_64 -> m0_65  [key=0, style=solid, color=green];
m0_59 -> m0_60  [key=0, style=solid, color=green];
m0_59 -> m0_61  [key=2, style=dotted, color=green];
m0_59 -> m0_62  [key=2, style=dotted, color=green];
m0_59 -> m0_63  [key=2, style=dotted, color=green];
m0_60 -> m0_58  [key=0, style=bold, color=blue];
m0_65 -> m0_65  [key=1, style=dashed, color=green, label="System.Collections.Generic.KeyValuePair<string, HangFire.Storage.Monitoring.ProcessingJobDto>"];
m0_65 -> m0_66  [key=0, style=solid, color=green];
m0_66 -> m0_64  [key=0, style=bold, color=blue];
m0_71 -> m0_72  [key=0, style=solid, color=green];
m0_71 -> m0_77  [key=1, style=dashed, color=green, label=IRedisClient];
m0_72 -> m0_73  [key=0, style=solid, color=green];
m0_72 -> m0_85  [key=2, style=dotted, color=green];
m0_72 -> m0_78  [key=1, style=dashed, color=green, label=scheduledJobs];
m0_72 -> m0_83  [key=1, style=dashed, color=green, label=scheduledJobs];
m0_73 -> m0_74  [key=0, style=solid, color=green];
m0_73 -> m0_75  [key=0, style=solid, color=green];
m0_78 -> m0_79  [key=0, style=solid, color=green];
m0_78 -> m0_82  [key=0, style=solid, color=green];
m0_83 -> m0_84  [key=0, style=solid, color=green];
m0_83 -> m0_91  [key=2, style=dotted, color=green];
m0_83 -> m0_92  [key=2, style=dotted, color=green];
m0_83 -> m0_93  [key=2, style=dotted, color=green];
m0_83 -> m0_109  [key=1, style=dashed, color=green, label="lambda expression"];
m0_77 -> m0_78  [key=0, style=solid, color=green];
m0_77 -> m0_88  [key=2, style=dotted, color=green];
m0_77 -> m0_80  [key=1, style=dashed, color=green, label=pipeline];
m0_77 -> m0_81  [key=1, style=dashed, color=green, label=pipeline];
m0_77 -> m0_82  [key=1, style=dashed, color=green, label=pipeline];
m0_76 -> m0_77  [key=0, style=solid, color=green];
m0_76 -> m0_83  [key=1, style=dashed, color=green, label=states];
m0_76 -> m0_87  [key=2, style=dotted, color=green];
m0_76 -> m0_81  [key=1, style=dashed, color=green, label=states];
m0_76 -> m0_107  [key=1, style=dashed, color=green, label=states];
m0_76 -> m0_110  [key=1, style=dashed, color=green, label=states];
m0_80 -> m0_81  [key=0, style=solid, color=green];
m0_80 -> m0_89  [key=2, style=dotted, color=green];
m0_80 -> m0_94  [key=1, style=dashed, color=green, label="lambda expression"];
m0_80 -> m0_99  [key=1, style=dashed, color=green, label="lambda expression"];
m0_81 -> m0_78  [key=0, style=solid, color=green];
m0_81 -> m0_89  [key=2, style=dotted, color=green];
m0_81 -> m0_103  [key=1, style=dashed, color=green, label="lambda expression"];
m0_81 -> m0_106  [key=1, style=dashed, color=green, label="lambda expression"];
m0_82 -> m0_83  [key=0, style=solid, color=green];
m0_82 -> m0_90  [key=2, style=dotted, color=green];
m0_74 -> m0_84  [key=0, style=solid, color=green];
m0_74 -> m0_54  [key=2, style=dotted, color=green];
m0_74 -> m0_86  [key=2, style=dotted, color=green];
m0_75 -> m0_83  [key=1, style=dashed, color=green, label=jobs];
m0_75 -> m0_76  [key=0, style=solid, color=green];
m0_75 -> m0_87  [key=2, style=dotted, color=green];
m0_75 -> m0_80  [key=1, style=dashed, color=green, label=jobs];
m0_75 -> m0_100  [key=1, style=dashed, color=green, label=jobs];
m0_75 -> m0_110  [key=1, style=dashed, color=green, label=jobs];
m0_79 -> m0_80  [key=0, style=solid, color=green];
m0_79 -> m0_100  [key=1, style=dashed, color=green, label=job];
m0_79 -> m0_81  [key=1, style=dashed, color=green, label=job];
m0_79 -> m0_107  [key=1, style=dashed, color=green, label=job];
m0_79 -> m0_95  [key=1, style=dashed, color=green, label=job];
m0_79 -> m0_104  [key=1, style=dashed, color=green, label=job];
m0_84 -> m0_71  [key=0, style=bold, color=blue];
m0_109 -> m0_110  [key=0, style=solid, color=green];
m0_100 -> m0_101  [key=0, style=solid, color=green];
m0_100 -> m0_102  [key=2, style=dotted, color=green];
m0_110 -> m0_111  [key=0, style=solid, color=green];
m0_110 -> m0_112  [key=2, style=dotted, color=green];
m0_110 -> m0_113  [key=2, style=dotted, color=green];
m0_110 -> m0_114  [key=2, style=dotted, color=green];
m0_110 -> m0_115  [key=2, style=dotted, color=green];
m0_110 -> m0_62  [key=2, style=dotted, color=green];
m0_110 -> m0_63  [key=2, style=dotted, color=green];
m0_107 -> m0_108  [key=0, style=solid, color=green];
m0_107 -> m0_102  [key=2, style=dotted, color=green];
m0_94 -> m0_95  [key=0, style=solid, color=green];
m0_99 -> m0_100  [key=0, style=solid, color=green];
m0_101 -> m0_99  [key=0, style=bold, color=blue];
m0_111 -> m0_109  [key=0, style=bold, color=blue];
m0_103 -> m0_104  [key=0, style=solid, color=green];
m0_106 -> m0_107  [key=0, style=solid, color=green];
m0_108 -> m0_106  [key=0, style=bold, color=blue];
m0_95 -> m0_96  [key=0, style=solid, color=green];
m0_95 -> m0_97  [key=2, style=dotted, color=green];
m0_95 -> m0_98  [key=2, style=dotted, color=green];
m0_104 -> m0_105  [key=0, style=solid, color=green];
m0_104 -> m0_97  [key=2, style=dotted, color=green];
m0_104 -> m0_98  [key=2, style=dotted, color=green];
m0_96 -> m0_94  [key=0, style=bold, color=blue];
m0_105 -> m0_103  [key=0, style=bold, color=blue];
m0_119 -> m0_120  [key=0, style=solid, color=green];
m0_120 -> m0_121  [key=0, style=solid, color=green];
m0_120 -> m0_122  [key=2, style=dotted, color=green];
m0_121 -> m0_119  [key=0, style=bold, color=blue];
m0_126 -> m0_127  [key=0, style=solid, color=green];
m0_127 -> m0_128  [key=0, style=solid, color=green];
m0_127 -> m0_122  [key=2, style=dotted, color=green];
m0_128 -> m0_126  [key=0, style=bold, color=blue];
m0_132 -> m0_133  [key=0, style=solid, color=green];
m0_132 -> m0_138  [key=1, style=dashed, color=green, label=IRedisClient];
m0_133 -> m0_134  [key=0, style=solid, color=green];
m0_133 -> m0_146  [key=2, style=dotted, color=green];
m0_133 -> m0_139  [key=1, style=dashed, color=green, label=serverNames];
m0_133 -> m0_144  [key=1, style=dashed, color=green, label=serverNames];
m0_134 -> m0_135  [key=0, style=solid, color=green];
m0_134 -> m0_136  [key=0, style=solid, color=green];
m0_139 -> m0_140  [key=0, style=solid, color=green];
m0_139 -> m0_143  [key=0, style=solid, color=green];
m0_144 -> m0_145  [key=0, style=solid, color=green];
m0_144 -> m0_92  [key=2, style=dotted, color=green];
m0_144 -> m0_93  [key=2, style=dotted, color=green];
m0_144 -> m0_160  [key=1, style=dashed, color=green, label="lambda expression"];
m0_138 -> m0_139  [key=0, style=solid, color=green];
m0_138 -> m0_88  [key=2, style=dotted, color=green];
m0_138 -> m0_141  [key=1, style=dashed, color=green, label=pipeline];
m0_138 -> m0_142  [key=1, style=dashed, color=green, label=pipeline];
m0_138 -> m0_143  [key=1, style=dashed, color=green, label=pipeline];
m0_137 -> m0_138  [key=0, style=solid, color=green];
m0_137 -> m0_144  [key=1, style=dashed, color=green, label=queues];
m0_137 -> m0_87  [key=2, style=dotted, color=green];
m0_137 -> m0_142  [key=1, style=dashed, color=green, label=queues];
m0_137 -> m0_158  [key=1, style=dashed, color=green, label=queues];
m0_137 -> m0_161  [key=1, style=dashed, color=green, label=queues];
m0_141 -> m0_142  [key=0, style=solid, color=green];
m0_141 -> m0_89  [key=2, style=dotted, color=green];
m0_141 -> m0_147  [key=1, style=dashed, color=green, label="lambda expression"];
m0_141 -> m0_150  [key=1, style=dashed, color=green, label="lambda expression"];
m0_142 -> m0_139  [key=0, style=solid, color=green];
m0_142 -> m0_89  [key=2, style=dotted, color=green];
m0_142 -> m0_153  [key=1, style=dashed, color=green, label="lambda expression"];
m0_142 -> m0_157  [key=1, style=dashed, color=green, label="lambda expression"];
m0_143 -> m0_144  [key=0, style=solid, color=green];
m0_143 -> m0_90  [key=2, style=dotted, color=green];
m0_135 -> m0_145  [key=0, style=solid, color=green];
m0_135 -> m0_86  [key=2, style=dotted, color=green];
m0_136 -> m0_144  [key=1, style=dashed, color=green, label=servers];
m0_136 -> m0_137  [key=0, style=solid, color=green];
m0_136 -> m0_87  [key=2, style=dotted, color=green];
m0_136 -> m0_141  [key=1, style=dashed, color=green, label=servers];
m0_136 -> m0_151  [key=1, style=dashed, color=green, label=servers];
m0_136 -> m0_161  [key=1, style=dashed, color=green, label=servers];
m0_140 -> m0_141  [key=0, style=solid, color=green];
m0_140 -> m0_151  [key=1, style=dashed, color=green, label=name];
m0_140 -> m0_142  [key=1, style=dashed, color=green, label=name];
m0_140 -> m0_158  [key=1, style=dashed, color=green, label=name];
m0_140 -> m0_148  [key=1, style=dashed, color=green, label=name];
m0_140 -> m0_154  [key=1, style=dashed, color=green, label=name];
m0_145 -> m0_132  [key=0, style=bold, color=blue];
m0_160 -> m0_161  [key=0, style=solid, color=green];
m0_151 -> m0_152  [key=0, style=solid, color=green];
m0_151 -> m0_102  [key=2, style=dotted, color=green];
m0_161 -> m0_162  [key=0, style=solid, color=green];
m0_161 -> m0_163  [key=2, style=dotted, color=green];
m0_161 -> m0_164  [key=2, style=dotted, color=green];
m0_161 -> m0_165  [key=2, style=dotted, color=green];
m0_161 -> m0_62  [key=2, style=dotted, color=green];
m0_158 -> m0_159  [key=0, style=solid, color=green];
m0_158 -> m0_102  [key=2, style=dotted, color=green];
m0_147 -> m0_148  [key=0, style=solid, color=green];
m0_150 -> m0_151  [key=0, style=solid, color=green];
m0_152 -> m0_150  [key=0, style=bold, color=blue];
m0_162 -> m0_160  [key=0, style=bold, color=blue];
m0_153 -> m0_154  [key=0, style=solid, color=green];
m0_157 -> m0_158  [key=0, style=solid, color=green];
m0_159 -> m0_157  [key=0, style=bold, color=blue];
m0_148 -> m0_149  [key=0, style=solid, color=green];
m0_148 -> m0_97  [key=2, style=dotted, color=green];
m0_148 -> m0_98  [key=2, style=dotted, color=green];
m0_154 -> m0_155  [key=0, style=solid, color=green];
m0_154 -> m0_97  [key=2, style=dotted, color=green];
m0_154 -> m0_156  [key=2, style=dotted, color=green];
m0_149 -> m0_147  [key=0, style=bold, color=blue];
m0_155 -> m0_153  [key=0, style=bold, color=blue];
m0_169 -> m0_170  [key=0, style=solid, color=green];
m0_169 -> m0_171  [key=1, style=dashed, color=green, label=IRedisClient];
m0_170 -> m0_171  [key=0, style=solid, color=green];
m0_170 -> m0_173  [key=2, style=dotted, color=green];
m0_171 -> m0_172  [key=0, style=solid, color=green];
m0_171 -> m0_55  [key=2, style=dotted, color=green];
m0_171 -> m0_174  [key=1, style=dashed, color=green, label="lambda expression"];
m0_172 -> m0_169  [key=0, style=bold, color=blue];
m0_174 -> m0_175  [key=0, style=solid, color=green];
m0_175 -> m0_176  [key=0, style=solid, color=green];
m0_175 -> m0_177  [key=2, style=dotted, color=green];
m0_175 -> m0_62  [key=2, style=dotted, color=green];
m0_175 -> m0_63  [key=2, style=dotted, color=green];
m0_176 -> m0_174  [key=0, style=bold, color=blue];
m0_181 -> m0_182  [key=0, style=solid, color=green];
m0_181 -> m0_183  [key=1, style=dashed, color=green, label=IRedisClient];
m0_182 -> m0_183  [key=0, style=solid, color=green];
m0_182 -> m0_185  [key=2, style=dotted, color=green];
m0_183 -> m0_184  [key=0, style=solid, color=green];
m0_183 -> m0_55  [key=2, style=dotted, color=green];
m0_183 -> m0_186  [key=1, style=dashed, color=green, label="lambda expression"];
m0_184 -> m0_181  [key=0, style=bold, color=blue];
m0_186 -> m0_187  [key=0, style=solid, color=green];
m0_187 -> m0_188  [key=0, style=solid, color=green];
m0_187 -> m0_189  [key=2, style=dotted, color=green];
m0_187 -> m0_62  [key=2, style=dotted, color=green];
m0_187 -> m0_190  [key=2, style=dotted, color=green];
m0_187 -> m0_63  [key=2, style=dotted, color=green];
m0_188 -> m0_186  [key=0, style=bold, color=blue];
m0_194 -> m0_195  [key=0, style=solid, color=green];
m0_194 -> m0_196  [key=1, style=dashed, color=green, label=IRedisClient];
m0_195 -> m0_196  [key=0, style=solid, color=green];
m0_195 -> m0_185  [key=2, style=dotted, color=green];
m0_196 -> m0_197  [key=0, style=solid, color=green];
m0_196 -> m0_55  [key=2, style=dotted, color=green];
m0_196 -> m0_198  [key=1, style=dashed, color=green, label="lambda expression"];
m0_197 -> m0_194  [key=0, style=bold, color=blue];
m0_198 -> m0_199  [key=0, style=solid, color=green];
m0_199 -> m0_200  [key=0, style=solid, color=green];
m0_199 -> m0_201  [key=2, style=dotted, color=green];
m0_199 -> m0_62  [key=2, style=dotted, color=green];
m0_199 -> m0_63  [key=2, style=dotted, color=green];
m0_200 -> m0_198  [key=0, style=bold, color=blue];
m0_205 -> m0_206  [key=0, style=solid, color=green];
m0_205 -> m0_212  [key=1, style=dashed, color=green, label=IRedisClient];
m0_205 -> m0_217  [key=1, style=dashed, color=green, label=IRedisClient];
m0_206 -> m0_207  [key=0, style=solid, color=green];
m0_206 -> m0_146  [key=2, style=dotted, color=green];
m0_206 -> m0_208  [key=1, style=dashed, color=green, label=queues];
m0_207 -> m0_208  [key=0, style=solid, color=green];
m0_207 -> m0_221  [key=2, style=dotted, color=green];
m0_207 -> m0_218  [key=1, style=dashed, color=green, label=result];
m0_207 -> m0_219  [key=1, style=dashed, color=green, label=result];
m0_208 -> m0_209  [key=0, style=solid, color=green];
m0_208 -> m0_219  [key=0, style=solid, color=green];
m0_208 -> m0_213  [key=1, style=dashed, color=green, label=queue];
m0_208 -> m0_226  [key=1, style=dashed, color=green, label=queue];
m0_208 -> m0_214  [key=1, style=dashed, color=green, label=queue];
m0_208 -> m0_232  [key=1, style=dashed, color=green, label=queue];
m0_208 -> m0_215  [key=1, style=dashed, color=green, label=queue];
m0_208 -> m0_238  [key=1, style=dashed, color=green, label=queue];
m0_208 -> m0_218  [key=1, style=dashed, color=green, label=queue];
m0_212 -> m0_213  [key=0, style=solid, color=green];
m0_212 -> m0_88  [key=2, style=dotted, color=green];
m0_212 -> m0_214  [key=1, style=dashed, color=green, label=pipeline];
m0_212 -> m0_215  [key=1, style=dashed, color=green, label=pipeline];
m0_212 -> m0_216  [key=1, style=dashed, color=green, label=pipeline];
m0_211 -> m0_212  [key=0, style=solid, color=green];
m0_213 -> m0_217  [key=1, style=dashed, color=green, label=firstJobIds];
m0_213 -> m0_214  [key=0, style=solid, color=green];
m0_213 -> m0_89  [key=2, style=dotted, color=green];
m0_213 -> m0_225  [key=1, style=dashed, color=green, label="lambda expression"];
m0_213 -> m0_228  [key=1, style=dashed, color=green, label="lambda expression"];
m0_214 -> m0_218  [key=1, style=dashed, color=green, label=length];
m0_214 -> m0_215  [key=0, style=solid, color=green];
m0_214 -> m0_89  [key=2, style=dotted, color=green];
m0_214 -> m0_231  [key=1, style=dashed, color=green, label="lambda expression"];
m0_214 -> m0_234  [key=1, style=dashed, color=green, label="lambda expression"];
m0_215 -> m0_218  [key=1, style=dashed, color=green, label=fetched];
m0_215 -> m0_216  [key=0, style=solid, color=green];
m0_215 -> m0_89  [key=2, style=dotted, color=green];
m0_215 -> m0_237  [key=1, style=dashed, color=green, label="lambda expression"];
m0_215 -> m0_240  [key=1, style=dashed, color=green, label="lambda expression"];
m0_216 -> m0_217  [key=0, style=solid, color=green];
m0_216 -> m0_90  [key=2, style=dotted, color=green];
m0_217 -> m0_218  [key=0, style=solid, color=green];
m0_217 -> m0_222  [key=2, style=dotted, color=green];
m0_217 -> m0_243  [key=1, style=dashed, color=green, label="lambda expression"];
m0_218 -> m0_208  [key=0, style=solid, color=green];
m0_218 -> m0_223  [key=2, style=dotted, color=green];
m0_218 -> m0_224  [key=2, style=dotted, color=green];
m0_243 -> m0_244  [key=0, style=solid, color=green];
m0_219 -> m0_220  [key=0, style=solid, color=green];
m0_209 -> m0_210  [key=0, style=solid, color=green];
m0_226 -> m0_227  [key=0, style=solid, color=green];
m0_226 -> m0_97  [key=2, style=dotted, color=green];
m0_226 -> m0_185  [key=2, style=dotted, color=green];
m0_232 -> m0_233  [key=0, style=solid, color=green];
m0_232 -> m0_97  [key=2, style=dotted, color=green];
m0_232 -> m0_21  [key=2, style=dotted, color=green];
m0_238 -> m0_239  [key=0, style=solid, color=green];
m0_238 -> m0_97  [key=2, style=dotted, color=green];
m0_238 -> m0_21  [key=2, style=dotted, color=green];
m0_220 -> m0_205  [key=0, style=bold, color=blue];
m0_210 -> m0_211  [key=0, style=solid, color=green];
m0_225 -> m0_226  [key=0, style=solid, color=green];
m0_228 -> m0_229  [key=0, style=solid, color=green];
m0_227 -> m0_225  [key=0, style=bold, color=blue];
m0_231 -> m0_232  [key=0, style=solid, color=green];
m0_234 -> m0_235  [key=0, style=solid, color=green];
m0_233 -> m0_231  [key=0, style=bold, color=blue];
m0_237 -> m0_238  [key=0, style=solid, color=green];
m0_240 -> m0_241  [key=0, style=solid, color=green];
m0_239 -> m0_237  [key=0, style=bold, color=blue];
m0_229 -> m0_230  [key=0, style=solid, color=green];
m0_230 -> m0_228  [key=0, style=bold, color=blue];
m0_235 -> m0_236  [key=0, style=solid, color=green];
m0_236 -> m0_234  [key=0, style=bold, color=blue];
m0_241 -> m0_242  [key=0, style=solid, color=green];
m0_242 -> m0_240  [key=0, style=bold, color=blue];
m0_244 -> m0_245  [key=0, style=solid, color=green];
m0_244 -> m0_246  [key=2, style=dotted, color=green];
m0_244 -> m0_62  [key=2, style=dotted, color=green];
m0_244 -> m0_63  [key=2, style=dotted, color=green];
m0_245 -> m0_243  [key=0, style=bold, color=blue];
m0_250 -> m0_251  [key=0, style=solid, color=green];
m0_250 -> m0_252  [key=1, style=dashed, color=green, label=IRedisClient];
m0_251 -> m0_252  [key=0, style=solid, color=green];
m0_251 -> m0_20  [key=2, style=dotted, color=green];
m0_251 -> m0_185  [key=2, style=dotted, color=green];
m0_252 -> m0_253  [key=0, style=solid, color=green];
m0_252 -> m0_55  [key=2, style=dotted, color=green];
m0_252 -> m0_254  [key=1, style=dashed, color=green, label="lambda expression"];
m0_253 -> m0_250  [key=0, style=bold, color=blue];
m0_254 -> m0_255  [key=0, style=solid];
m0_260 -> m0_261  [key=0, style=solid, color=green];
m0_260 -> m0_262  [key=1, style=dashed, color=green, label=IRedisClient];
m0_261 -> m0_262  [key=0, style=solid, color=green];
m0_261 -> m0_20  [key=2, style=dotted, color=green];
m0_261 -> m0_185  [key=2, style=dotted, color=green];
m0_262 -> m0_263  [key=0, style=solid, color=green];
m0_262 -> m0_55  [key=2, style=dotted, color=green];
m0_262 -> m0_264  [key=1, style=dashed, color=green, label="lambda expression"];
m0_263 -> m0_260  [key=0, style=bold, color=blue];
m0_264 -> m0_265  [key=0, style=solid, color=green];
m0_265 -> m0_266  [key=0, style=solid, color=green];
m0_265 -> m0_267  [key=2, style=dotted, color=green];
m0_265 -> m0_62  [key=2, style=dotted, color=green];
m0_266 -> m0_264  [key=0, style=bold, color=blue];
m0_271 -> m0_272  [key=0, style=solid, color=green];
m0_272 -> m0_273  [key=0, style=solid, color=green];
m0_272 -> m0_274  [key=2, style=dotted, color=green];
m0_273 -> m0_271  [key=0, style=bold, color=blue];
m0_278 -> m0_279  [key=0, style=solid, color=green];
m0_279 -> m0_280  [key=0, style=solid, color=green];
m0_279 -> m0_274  [key=2, style=dotted, color=green];
m0_280 -> m0_278  [key=0, style=bold, color=blue];
m0_284 -> m0_285  [key=0, style=solid, color=green];
m0_284 -> m0_289  [key=1, style=dashed, color=green, label=IRedisClient];
m0_285 -> m0_286  [key=0, style=solid, color=green];
m0_285 -> m0_20  [key=2, style=dotted, color=green];
m0_285 -> m0_306  [key=2, style=dotted, color=green];
m0_285 -> m0_300  [key=1, style=dashed, color=green, label=job];
m0_285 -> m0_301  [key=1, style=dashed, color=green, label=job];
m0_285 -> m0_302  [key=1, style=dashed, color=green, label=job];
m0_285 -> m0_303  [key=1, style=dashed, color=green, label=job];
m0_285 -> m0_304  [key=1, style=dashed, color=green, label=job];
m0_286 -> m0_287  [key=0, style=solid, color=green];
m0_286 -> m0_288  [key=0, style=solid, color=green];
m0_300 -> m0_301  [key=0, style=solid, color=green];
m0_300 -> m0_302  [key=0, style=solid, color=green];
m0_300 -> m0_309  [key=2, style=dotted, color=green];
m0_301 -> m0_302  [key=0, style=solid, color=green];
m0_301 -> m0_102  [key=2, style=dotted, color=green];
m0_302 -> m0_303  [key=0, style=solid, color=green];
m0_302 -> m0_304  [key=0, style=solid, color=green];
m0_302 -> m0_309  [key=2, style=dotted, color=green];
m0_303 -> m0_304  [key=0, style=solid, color=green];
m0_303 -> m0_102  [key=2, style=dotted, color=green];
m0_304 -> m0_305  [key=0, style=solid, color=green];
m0_304 -> m0_313  [key=2, style=dotted, color=green];
m0_304 -> m0_314  [key=2, style=dotted, color=green];
m0_304 -> m0_309  [key=2, style=dotted, color=green];
m0_304 -> m0_310  [key=2, style=dotted, color=green];
m0_304 -> m0_315  [key=2, style=dotted, color=green];
m0_304 -> m0_316  [key=2, style=dotted, color=green];
m0_304 -> m0_317  [key=1, style=dashed, color=green, label="lambda expression"];
m0_304 -> m0_321  [key=1, style=dashed, color=green, label="lambda expression"];
m0_304 -> m0_324  [key=1, style=dashed, color=green, label="lambda expression"];
m0_289 -> m0_290  [key=0, style=solid, color=green];
m0_289 -> m0_20  [key=2, style=dotted, color=green];
m0_289 -> m0_156  [key=2, style=dotted, color=green];
m0_288 -> m0_289  [key=0, style=solid, color=green];
m0_288 -> m0_304  [key=1, style=dashed, color=green, label=hiddenProperties];
m0_288 -> m0_318  [key=1, style=dashed, color=green, label=hiddenProperties];
m0_290 -> m0_291  [key=0, style=solid, color=green];
m0_290 -> m0_92  [key=2, style=dotted, color=green];
m0_290 -> m0_93  [key=2, style=dotted, color=green];
m0_290 -> m0_292  [key=1, style=dashed, color=green, label=history];
m0_287 -> m0_305  [key=0, style=solid, color=green];
m0_292 -> m0_300  [key=0, style=solid, color=green];
m0_292 -> m0_293  [key=0, style=solid, color=green];
m0_292 -> m0_294  [key=1, style=dashed, color=green, label=entry];
m0_291 -> m0_304  [key=1, style=dashed, color=green, label=stateHistory];
m0_291 -> m0_292  [key=0, style=solid, color=green];
m0_291 -> m0_307  [key=2, style=dotted, color=green];
m0_291 -> m0_299  [key=1, style=dashed, color=green, label=stateHistory];
m0_305 -> m0_284  [key=0, style=bold, color=blue];
m0_317 -> m0_318  [key=0, style=solid, color=green];
m0_321 -> m0_322  [key=0, style=solid, color=green];
m0_324 -> m0_325  [key=0, style=solid, color=green];
m0_318 -> m0_319  [key=0, style=solid, color=green];
m0_318 -> m0_320  [key=2, style=dotted, color=green];
m0_319 -> m0_317  [key=0, style=bold, color=blue];
m0_299 -> m0_292  [key=0, style=solid, color=green];
m0_299 -> m0_224  [key=2, style=dotted, color=green];
m0_293 -> m0_299  [key=1, style=dashed, color=green, label=dto];
m0_293 -> m0_294  [key=0, style=solid, color=green];
m0_293 -> m0_308  [key=2, style=dotted, color=green];
m0_293 -> m0_309  [key=2, style=dotted, color=green];
m0_293 -> m0_310  [key=2, style=dotted, color=green];
m0_293 -> m0_298  [key=1, style=dashed, color=green, label=dto];
m0_294 -> m0_295  [key=0, style=solid, color=green];
m0_294 -> m0_311  [key=2, style=dotted, color=green];
m0_294 -> m0_296  [key=1, style=dashed, color=green, label=stateData];
m0_294 -> m0_297  [key=1, style=dashed, color=green, label=stateData];
m0_294 -> m0_298  [key=1, style=dashed, color=green, label=stateData];
m0_298 -> m0_299  [key=0, style=solid, color=green];
m0_295 -> m0_296  [key=0, style=solid, color=green];
m0_295 -> m0_312  [key=2, style=dotted, color=green];
m0_296 -> m0_297  [key=0, style=solid, color=green];
m0_296 -> m0_312  [key=2, style=dotted, color=green];
m0_297 -> m0_298  [key=0, style=solid, color=green];
m0_297 -> m0_312  [key=2, style=dotted, color=green];
m0_322 -> m0_323  [key=0, style=solid, color=green];
m0_323 -> m0_321  [key=0, style=bold, color=blue];
m0_325 -> m0_326  [key=0, style=solid, color=green];
m0_326 -> m0_324  [key=0, style=bold, color=blue];
m0_415 -> m0_416  [key=0, style=solid];
m0_418 -> m0_419  [key=0, style=solid, color=green];
m0_419 -> m0_420  [key=0, style=solid, color=green];
m0_419 -> m0_421  [key=2, style=dotted, color=green];
m0_419 -> m0_422  [key=2, style=dotted, color=green];
m0_419 -> m0_423  [key=2, style=dotted, color=green];
m0_419 -> m0_424  [key=1, style=dashed, color=green, label="lambda expression"];
m0_420 -> m0_418  [key=0, style=bold, color=blue];
m0_424 -> m0_425  [key=0, style=solid, color=green];
m0_398 -> m0_399  [key=0, style=solid, color=green];
m0_403 -> m0_404  [key=0, style=solid];
m0_403 -> m0_405  [key=1, style=dashed, color=darkseagreen4, label="?"];
m0_399 -> m0_400  [key=0, style=solid, color=green];
m0_399 -> m0_20  [key=2, style=dotted, color=green];
m0_399 -> m0_401  [key=2, style=dotted, color=green];
m0_399 -> m0_402  [key=2, style=dotted, color=green];
m0_399 -> m0_98  [key=2, style=dotted, color=green];
m0_400 -> m0_398  [key=0, style=bold, color=blue];
m0_425 -> m0_426  [key=0, style=solid, color=green];
m0_426 -> m0_424  [key=0, style=bold, color=blue];
m0_430 -> m0_431  [key=0, style=solid, color=green];
m0_431 -> m0_432  [key=0, style=solid, color=green];
m0_431 -> m0_21  [key=2, style=dotted, color=green];
m0_432 -> m0_430  [key=0, style=bold, color=blue];
m0_436 -> m0_437  [key=0, style=solid, color=green];
m0_436 -> m0_438  [key=1, style=dashed, color=green, label=IRedisClient];
m0_436 -> m0_439  [key=1, style=dashed, color=green, label=IRedisClient];
m0_437 -> m0_438  [key=0, style=solid, color=green];
m0_437 -> m0_454  [key=2, style=dotted, color=green];
m0_437 -> m0_440  [key=1, style=dashed, color=green, label=stats];
m0_437 -> m0_460  [key=1, style=dashed, color=green, label=stats];
m0_437 -> m0_441  [key=1, style=dashed, color=green, label=stats];
m0_437 -> m0_466  [key=1, style=dashed, color=green, label=stats];
m0_437 -> m0_442  [key=1, style=dashed, color=green, label=stats];
m0_437 -> m0_472  [key=1, style=dashed, color=green, label=stats];
m0_437 -> m0_443  [key=1, style=dashed, color=green, label=stats];
m0_437 -> m0_478  [key=1, style=dashed, color=green, label=stats];
m0_437 -> m0_444  [key=1, style=dashed, color=green, label=stats];
m0_437 -> m0_485  [key=1, style=dashed, color=green, label=stats];
m0_437 -> m0_445  [key=1, style=dashed, color=green, label=stats];
m0_437 -> m0_492  [key=1, style=dashed, color=green, label=stats];
m0_437 -> m0_446  [key=1, style=dashed, color=green, label=stats];
m0_437 -> m0_498  [key=1, style=dashed, color=green, label=stats];
m0_437 -> m0_447  [key=1, style=dashed, color=green, label=stats];
m0_437 -> m0_504  [key=1, style=dashed, color=green, label=stats];
m0_437 -> m0_450  [key=1, style=dashed, color=green, label=stats];
m0_437 -> m0_510  [key=1, style=dashed, color=green, label=stats];
m0_437 -> m0_452  [key=1, style=dashed, color=green, label=stats];
m0_438 -> m0_439  [key=0, style=solid, color=green];
m0_438 -> m0_146  [key=2, style=dotted, color=green];
m0_438 -> m0_448  [key=1, style=dashed, color=green, label=queues];
m0_440 -> m0_441  [key=0, style=solid, color=green];
m0_440 -> m0_89  [key=2, style=dotted, color=green];
m0_440 -> m0_455  [key=1, style=dashed, color=green, label="lambda expression"];
m0_440 -> m0_459  [key=1, style=dashed, color=green, label="lambda expression"];
m0_460 -> m0_461  [key=0, style=solid, color=green];
m0_441 -> m0_442  [key=0, style=solid, color=green];
m0_441 -> m0_89  [key=2, style=dotted, color=green];
m0_441 -> m0_462  [key=1, style=dashed, color=green, label="lambda expression"];
m0_441 -> m0_465  [key=1, style=dashed, color=green, label="lambda expression"];
m0_466 -> m0_467  [key=0, style=solid, color=green];
m0_442 -> m0_443  [key=0, style=solid, color=green];
m0_442 -> m0_89  [key=2, style=dotted, color=green];
m0_442 -> m0_468  [key=1, style=dashed, color=green, label="lambda expression"];
m0_442 -> m0_471  [key=1, style=dashed, color=green, label="lambda expression"];
m0_472 -> m0_473  [key=0, style=solid, color=green];
m0_443 -> m0_444  [key=0, style=solid, color=green];
m0_443 -> m0_89  [key=2, style=dotted, color=green];
m0_443 -> m0_474  [key=1, style=dashed, color=green, label="lambda expression"];
m0_443 -> m0_477  [key=1, style=dashed, color=green, label="lambda expression"];
m0_478 -> m0_479  [key=0, style=solid, color=green];
m0_444 -> m0_445  [key=0, style=solid, color=green];
m0_444 -> m0_89  [key=2, style=dotted, color=green];
m0_444 -> m0_480  [key=1, style=dashed, color=green, label="lambda expression"];
m0_444 -> m0_484  [key=1, style=dashed, color=green, label="lambda expression"];
m0_485 -> m0_486  [key=0, style=solid, color=green];
m0_485 -> m0_487  [key=2, style=dotted, color=green];
m0_445 -> m0_446  [key=0, style=solid, color=green];
m0_445 -> m0_89  [key=2, style=dotted, color=green];
m0_445 -> m0_488  [key=1, style=dashed, color=green, label="lambda expression"];
m0_445 -> m0_491  [key=1, style=dashed, color=green, label="lambda expression"];
m0_492 -> m0_493  [key=0, style=solid, color=green];
m0_446 -> m0_447  [key=0, style=solid, color=green];
m0_446 -> m0_89  [key=2, style=dotted, color=green];
m0_446 -> m0_494  [key=1, style=dashed, color=green, label="lambda expression"];
m0_446 -> m0_497  [key=1, style=dashed, color=green, label="lambda expression"];
m0_498 -> m0_499  [key=0, style=solid, color=green];
m0_498 -> m0_487  [key=2, style=dotted, color=green];
m0_447 -> m0_448  [key=0, style=solid, color=green];
m0_447 -> m0_89  [key=2, style=dotted, color=green];
m0_447 -> m0_500  [key=1, style=dashed, color=green, label="lambda expression"];
m0_447 -> m0_503  [key=1, style=dashed, color=green, label="lambda expression"];
m0_504 -> m0_505  [key=0, style=solid, color=green];
m0_450 -> m0_448  [key=0, style=solid, color=green];
m0_450 -> m0_89  [key=2, style=dotted, color=green];
m0_450 -> m0_506  [key=1, style=dashed, color=green, label="lambda expression"];
m0_450 -> m0_509  [key=1, style=dashed, color=green, label="lambda expression"];
m0_510 -> m0_511  [key=0, style=solid, color=green];
m0_452 -> m0_453  [key=0, style=solid, color=green];
m0_439 -> m0_440  [key=0, style=solid, color=green];
m0_439 -> m0_88  [key=2, style=dotted, color=green];
m0_439 -> m0_441  [key=1, style=dashed, color=green, label=pipeline];
m0_439 -> m0_442  [key=1, style=dashed, color=green, label=pipeline];
m0_439 -> m0_443  [key=1, style=dashed, color=green, label=pipeline];
m0_439 -> m0_444  [key=1, style=dashed, color=green, label=pipeline];
m0_439 -> m0_445  [key=1, style=dashed, color=green, label=pipeline];
m0_439 -> m0_446  [key=1, style=dashed, color=green, label=pipeline];
m0_439 -> m0_447  [key=1, style=dashed, color=green, label=pipeline];
m0_439 -> m0_450  [key=1, style=dashed, color=green, label=pipeline];
m0_439 -> m0_451  [key=1, style=dashed, color=green, label=pipeline];
m0_448 -> m0_449  [key=0, style=solid, color=green];
m0_448 -> m0_451  [key=0, style=solid, color=green];
m0_451 -> m0_452  [key=0, style=solid, color=green];
m0_451 -> m0_90  [key=2, style=dotted, color=green];
m0_455 -> m0_456  [key=0, style=solid, color=green];
m0_459 -> m0_460  [key=0, style=solid, color=green];
m0_461 -> m0_459  [key=0, style=bold, color=blue];
m0_462 -> m0_463  [key=0, style=solid, color=green];
m0_465 -> m0_466  [key=0, style=solid, color=green];
m0_467 -> m0_465  [key=0, style=bold, color=blue];
m0_468 -> m0_469  [key=0, style=solid, color=green];
m0_471 -> m0_472  [key=0, style=solid, color=green];
m0_473 -> m0_471  [key=0, style=bold, color=blue];
m0_474 -> m0_475  [key=0, style=solid, color=green];
m0_477 -> m0_478  [key=0, style=solid, color=green];
m0_479 -> m0_477  [key=0, style=bold, color=blue];
m0_480 -> m0_481  [key=0, style=solid, color=green];
m0_484 -> m0_485  [key=0, style=solid, color=green];
m0_486 -> m0_484  [key=0, style=bold, color=blue];
m0_488 -> m0_489  [key=0, style=solid, color=green];
m0_491 -> m0_492  [key=0, style=solid, color=green];
m0_493 -> m0_491  [key=0, style=bold, color=blue];
m0_494 -> m0_495  [key=0, style=solid, color=green];
m0_497 -> m0_498  [key=0, style=solid, color=green];
m0_499 -> m0_497  [key=0, style=bold, color=blue];
m0_500 -> m0_501  [key=0, style=solid, color=green];
m0_503 -> m0_504  [key=0, style=solid, color=green];
m0_505 -> m0_503  [key=0, style=bold, color=blue];
m0_449 -> m0_450  [key=0, style=solid, color=green];
m0_449 -> m0_507  [key=1, style=dashed, color=green, label=queueName];
m0_506 -> m0_507  [key=0, style=solid, color=green];
m0_509 -> m0_510  [key=0, style=solid, color=green];
m0_511 -> m0_509  [key=0, style=bold, color=blue];
m0_453 -> m0_436  [key=0, style=bold, color=blue];
m0_507 -> m0_508  [key=0, style=solid, color=green];
m0_507 -> m0_97  [key=2, style=dotted, color=green];
m0_507 -> m0_21  [key=2, style=dotted, color=green];
m0_508 -> m0_506  [key=0, style=bold, color=blue];
m0_456 -> m0_457  [key=0, style=solid, color=green];
m0_456 -> m0_458  [key=2, style=dotted, color=green];
m0_457 -> m0_455  [key=0, style=bold, color=blue];
m0_463 -> m0_464  [key=0, style=solid, color=green];
m0_463 -> m0_458  [key=2, style=dotted, color=green];
m0_464 -> m0_462  [key=0, style=bold, color=blue];
m0_469 -> m0_470  [key=0, style=solid, color=green];
m0_469 -> m0_13  [key=2, style=dotted, color=green];
m0_470 -> m0_468  [key=0, style=bold, color=blue];
m0_475 -> m0_476  [key=0, style=solid, color=green];
m0_475 -> m0_13  [key=2, style=dotted, color=green];
m0_476 -> m0_474  [key=0, style=bold, color=blue];
m0_481 -> m0_482  [key=0, style=solid, color=green];
m0_481 -> m0_483  [key=2, style=dotted, color=green];
m0_482 -> m0_480  [key=0, style=bold, color=blue];
m0_489 -> m0_490  [key=0, style=solid, color=green];
m0_489 -> m0_13  [key=2, style=dotted, color=green];
m0_490 -> m0_488  [key=0, style=bold, color=blue];
m0_495 -> m0_496  [key=0, style=solid, color=green];
m0_495 -> m0_483  [key=2, style=dotted, color=green];
m0_496 -> m0_494  [key=0, style=bold, color=blue];
m0_501 -> m0_502  [key=0, style=solid, color=green];
m0_501 -> m0_13  [key=2, style=dotted, color=green];
m0_502 -> m0_500  [key=0, style=bold, color=blue];
m0_409 -> m0_20  [key=2, style=dotted];
m0_409 -> m0_98  [key=2, style=dotted];
m0_409 -> m0_410  [key=0, style=solid];
m0_255 -> m0_62  [key=2, style=dotted];
m0_255 -> m0_63  [key=2, style=dotted];
m0_255 -> m0_246  [key=2, style=dotted];
m0_255 -> m0_256  [key=0, style=solid];
m0_405 -> m0_102  [key=2, style=dotted];
m0_405 -> m0_406  [key=0, style=solid];
m0_413 -> m0_102  [key=2, style=dotted];
m0_413 -> m0_414  [key=0, style=solid];
m0_416 -> m0_115  [key=2, style=dotted];
m0_416 -> m0_417  [key=0, style=solid];
m0_416 -> m0_407  [key=2, style=dotted];
m0_380 -> m0_97  [key=2, style=dotted];
m0_380 -> m0_381  [key=0, style=solid];
m0_256 -> m0_254  [key=0, style=bold, color=blue];
m0_352 -> m0_353  [key=0, style=solid];
m0_352 -> m0_354  [key=2, style=dotted];
m0_352 -> m0_355  [key=2, style=dotted];
m0_404 -> m0_405  [key=0, style=solid];
m0_404 -> m0_406  [key=0, style=solid];
m0_404 -> m0_407  [key=2, style=dotted];
m0_412 -> m0_413  [key=0, style=solid];
m0_412 -> m0_414  [key=0, style=solid];
m0_412 -> m0_407  [key=2, style=dotted];
m0_417 -> m0_415  [key=0, style=bold, color=blue];
m0_406 -> m0_403  [key=0, style=bold, color=blue];
m0_408 -> m0_409  [key=0, style=solid];
m0_410 -> m0_408  [key=0, style=bold, color=blue];
m0_351 -> m0_352  [key=0, style=solid];
m0_379 -> m0_380  [key=0, style=solid];
m0_376 -> m0_377  [key=0, style=solid];
m0_414 -> m0_411  [key=0, style=bold, color=blue];
m0_381 -> m0_379  [key=0, style=bold, color=blue];
m0_353 -> m0_351  [key=0, style=bold, color=blue];
m0_377 -> m0_354  [key=2, style=dotted];
m0_377 -> m0_378  [key=0, style=solid];
m0_378 -> m0_376  [key=0, style=bold, color=blue];
m0_28 -> m0_24  [key=0, style=bold, color=blue];
m0_28 -> m0_29  [key=0, style=solid, color=green];
m0_28 -> m0_9  [key=3, color=darkorchid, style=bold, label="method methodReturn long FailedCount"];
m0_115 -> m0_203  [key=3, color=green, style=bold, label="method methodReturn HangFire.Common.Job TryToGetJob"];
m0_115 -> m0_517  [key=0, style=solid];
m0_517 -> m0_520  [key=0, style=solid];
m0_517 -> m0_521  [key=2, style=dotted];
m0_517 -> m0_522  [key=2, style=dotted];
m0_519 -> m0_520  [key=0, style=solid];
m0_518 -> m0_519  [key=0, style=solid];
m0_520 -> m0_115  [key=0, style=bold, color=blue];
m0_166 -> m0_167  [key=0, style=solid, color=green];
m0_166 -> m0_170  [key=1, style=dashed, color=green, label=int];
m0_166 -> m0_9  [key=3, color=darkorchid, style=bold, label="method methodReturn HangFire.Storage.Monitoring.JobList<HangFire.Storage.Monitoring.FailedJobDto> FailedJobs"];
m0_167 -> m0_168  [key=0, style=solid, color=green];
m0_167 -> m0_9  [key=2, style=dotted, color=green];
m0_167 -> m0_169  [key=1, style=dashed, color=green, label="lambda expression"];
m0_168 -> m0_166  [key=0, style=bold, color=blue];
m0_129 -> m0_130  [key=0, style=solid, color=green];
m0_130 -> m0_130  [key=3, color=green, style=bold, label="Local variable var name"];
m0_130 -> m0_131  [key=0, style=solid, color=green];
m0_130 -> m0_70  [key=2, style=dotted, color=green];
m0_130 -> m0_132  [key=1, style=dashed, color=green, label="lambda expression"];
m0_131 -> m0_129  [key=0, style=bold, color=blue];
m0_40 -> m0_41  [key=0, style=solid, color=green];
m0_40 -> m0_9  [key=3, color=darkorchid, style=bold, label="method methodReturn long DeletedListCount"];
m0_41 -> m0_42  [key=0, style=solid, color=green];
m0_41 -> m0_9  [key=2, style=dotted, color=green];
m0_41 -> m0_43  [key=1, style=dashed, color=green, label="lambda expression"];
m0_178 -> m0_179  [key=0, style=solid, color=green];
m0_178 -> m0_182  [key=1, style=dashed, color=green, label=int];
m0_178 -> m0_9  [key=3, color=darkorchid, style=bold, label="method methodReturn HangFire.Storage.Monitoring.JobList<HangFire.Storage.Monitoring.SucceededJobDto> SucceededJobs"];
m0_179 -> m0_180  [key=0, style=solid, color=green];
m0_179 -> m0_9  [key=2, style=dotted, color=green];
m0_179 -> m0_181  [key=1, style=dashed, color=green, label="lambda expression"];
m0_180 -> m0_178  [key=0, style=bold, color=blue];
m0_116 -> m0_117  [key=0, style=solid, color=green];
m0_116 -> m0_9  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IDictionary<System.DateTime, long> SucceededByDatesCount"];
m0_117 -> m0_118  [key=0, style=solid, color=green];
m0_117 -> m0_9  [key=2, style=dotted, color=green];
m0_117 -> m0_119  [key=1, style=dashed, color=green, label="lambda expression"];
m0_118 -> m0_116  [key=0, style=bold, color=blue];
m0_6 -> m0_7  [key=0, style=solid, color=green];
m0_6 -> m0_9  [key=3, color=darkorchid, style=bold, label="method methodReturn long ScheduledCount"];
m0_7 -> m0_8  [key=0, style=solid, color=green];
m0_7 -> m0_10  [key=2, style=dotted];
m0_7 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_7 -> m0_9  [key=2, style=dotted, color=green];
m0_7 -> m0_42  [key=1, style=dashed, color=green, label="lambda expression"];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_11  [key=2, style=dotted];
m0_8 -> m0_6  [key=0, style=bold, color=blue];
m0_30 -> m0_28  [key=0, style=bold, color=blue];
m0_48 -> m0_46  [key=0, style=bold, color=blue];
m0_48 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts"];
m0_48 -> m0_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts"];
m0_48 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts"];
m0_48 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts"];
m0_48 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts"];
m0_48 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts"];
m0_48 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts"];
m0_48 -> m0_32  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts"];
m0_48 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts"];
m0_48 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts"];
m0_34 -> m0_35  [key=0, style=solid, color=green];
m0_34 -> m0_9  [key=3, color=darkorchid, style=bold, label="method methodReturn long ProcessingCount"];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_14  [key=0, style=bold, color=blue];
m0_20 -> m0_16  [key=0, style=bold, color=blue];
m0_268 -> m0_269  [key=0, style=solid, color=green];
m0_268 -> m0_9  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IDictionary<System.DateTime, long> HourlySucceededJobs"];
m0_269 -> m0_270  [key=0, style=solid, color=green];
m0_269 -> m0_9  [key=2, style=dotted, color=green];
m0_269 -> m0_271  [key=1, style=dashed, color=green, label="lambda expression"];
m0_270 -> m0_268  [key=0, style=bold, color=blue];
m0_123 -> m0_124  [key=0, style=solid, color=green];
m0_123 -> m0_9  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IDictionary<System.DateTime, long> FailedByDatesCount"];
m0_124 -> m0_125  [key=0, style=solid, color=green];
m0_124 -> m0_9  [key=2, style=dotted, color=green];
m0_124 -> m0_126  [key=1, style=dashed, color=green, label="lambda expression"];
m0_125 -> m0_123  [key=0, style=bold, color=blue];
m0_202 -> m0_203  [key=0, style=solid, color=green];
m0_203 -> m0_203  [key=3, color=green, style=bold, label="method methodReturn System.Collections.Generic.List<HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto> "];
m0_203 -> m0_204  [key=0, style=solid, color=green];
m0_203 -> m0_70  [key=2, style=dotted, color=green];
m0_203 -> m0_205  [key=1, style=dashed, color=green, label="lambda expression"];
m0_203 -> m0_222  [key=3, color=green, style=bold, label="Local variable HangFire.Storage.Monitoring.JobList<HangFire.Storage.Monitoring.EnqueuedJobDto> jobs"];
m0_204 -> m0_202  [key=0, style=bold, color=blue];
m0_67 -> m0_68  [key=0, style=solid, color=green];
m0_67 -> m0_72  [key=1, style=dashed, color=green, label=int];
m0_68 -> m0_68  [key=3, color=green, style=bold, label="Local variable var job"];
m0_68 -> m0_69  [key=0, style=solid, color=green];
m0_68 -> m0_70  [key=2, style=dotted, color=green];
m0_68 -> m0_71  [key=1, style=dashed, color=green, label="lambda expression"];
m0_69 -> m0_67  [key=0, style=bold, color=blue];
m0_523 -> m0_3  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_7  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_15  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_23  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_29  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_35  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_41  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_47  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_51  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_68  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_117  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_120  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_124  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_127  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_130  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_167  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_171  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_179  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_183  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_192  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_196  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_203  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_217  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_248  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_252  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_258  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_262  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_269  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_272  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_276  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_279  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_282  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_304  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_428  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_434  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_523 -> m0_512  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisMonitoringApi"];
m0_524 -> m0_18  [key=1, style=dashed, color=green, label=string];
m0_525 -> m0_26  [key=1, style=dashed, color=green, label=string];
m0_526 -> m0_50  [key=1, style=dashed, color=green, label=int];
m0_527 -> m0_50  [key=1, style=dashed, color=green, label=int];
m0_528 -> m0_72  [key=1, style=dashed, color=green, label=int];
m0_529 -> m0_72  [key=1, style=dashed, color=green, label=int];
m0_530 -> m0_100  [key=1, style=dashed, color=green, label=job];
m0_530 -> m0_107  [key=1, style=dashed, color=green, label=job];
m0_530 -> m0_95  [key=1, style=dashed, color=green, label=job];
m0_530 -> m0_104  [key=1, style=dashed, color=green, label=job];
m0_531 -> m0_100  [key=1, style=dashed, color=green, label=jobs];
m0_531 -> m0_110  [key=1, style=dashed, color=green, label=jobs];
m0_532 -> m0_110  [key=1, style=dashed, color=green, label=states];
m0_532 -> m0_107  [key=1, style=dashed, color=green, label=states];
m0_533 -> m0_151  [key=1, style=dashed, color=green, label=name];
m0_533 -> m0_158  [key=1, style=dashed, color=green, label=name];
m0_533 -> m0_148  [key=1, style=dashed, color=green, label=name];
m0_533 -> m0_154  [key=1, style=dashed, color=green, label=name];
m0_534 -> m0_151  [key=1, style=dashed, color=green, label=servers];
m0_534 -> m0_161  [key=1, style=dashed, color=green, label=servers];
m0_535 -> m0_161  [key=1, style=dashed, color=green, label=queues];
m0_535 -> m0_158  [key=1, style=dashed, color=green, label=queues];
m0_536 -> m0_170  [key=1, style=dashed, color=green, label=int];
m0_537 -> m0_170  [key=1, style=dashed, color=green, label=int];
m0_538 -> m0_182  [key=1, style=dashed, color=green, label=int];
m0_539 -> m0_182  [key=1, style=dashed, color=green, label=int];
m0_540 -> m0_195  [key=1, style=dashed, color=green, label=int];
m0_541 -> m0_195  [key=1, style=dashed, color=green, label=int];
m0_542 -> m0_226  [key=1, style=dashed, color=green, label=queue];
m0_542 -> m0_232  [key=1, style=dashed, color=green, label=queue];
m0_542 -> m0_238  [key=1, style=dashed, color=green, label=queue];
m0_543 -> m0_251  [key=1, style=dashed, color=green, label=string];
m0_544 -> m0_251  [key=1, style=dashed, color=green, label=int];
m0_545 -> m0_251  [key=1, style=dashed, color=green, label=int];
m0_546 -> m0_261  [key=1, style=dashed, color=green, label=string];
m0_547 -> m0_261  [key=1, style=dashed, color=green, label=int];
m0_548 -> m0_261  [key=1, style=dashed, color=green, label=int];
m0_549 -> m0_285  [key=1, style=dashed, color=green, label=string];
m0_549 -> m0_289  [key=1, style=dashed, color=green, label=string];
m0_550 -> m0_318  [key=1, style=dashed, color=green, label=hiddenProperties];
m0_558 -> m0_419  [key=1, style=dashed, color=green, label="System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>"];
m0_553 -> m0_399  [key=1, style=dashed, color=green, label="string[]"];
m0_553 -> m0_416  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_554 -> m0_399  [key=1, style=dashed, color=green, label=id];
m0_554 -> m0_404  [key=1, style=dashed, color=darkseagreen4, label=id];
m0_554 -> m0_405  [key=1, style=dashed, color=darkseagreen4, label=id];
m0_554 -> m0_409  [key=1, style=dashed, color=darkseagreen4, label=id];
m0_554 -> m0_412  [key=1, style=dashed, color=darkseagreen4, label=id];
m0_554 -> m0_413  [key=1, style=dashed, color=darkseagreen4, label=id];
m0_559 -> m0_460  [key=1, style=dashed, color=green, label=stats];
m0_559 -> m0_466  [key=1, style=dashed, color=green, label=stats];
m0_559 -> m0_472  [key=1, style=dashed, color=green, label=stats];
m0_559 -> m0_478  [key=1, style=dashed, color=green, label=stats];
m0_559 -> m0_485  [key=1, style=dashed, color=green, label=stats];
m0_559 -> m0_492  [key=1, style=dashed, color=green, label=stats];
m0_559 -> m0_498  [key=1, style=dashed, color=green, label=stats];
m0_559 -> m0_504  [key=1, style=dashed, color=green, label=stats];
m0_559 -> m0_510  [key=1, style=dashed, color=green, label=stats];
m0_560 -> m0_507  [key=1, style=dashed, color=green, label=queueName];
m0_556 -> m0_409  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_555 -> m0_405  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m0_555 -> m0_416  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m0_555 -> m0_404  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m0_557 -> m0_413  [key=1, style=dashed, color=darkseagreen4, label=states];
m0_557 -> m0_416  [key=1, style=dashed, color=darkseagreen4, label=states];
m0_557 -> m0_412  [key=1, style=dashed, color=darkseagreen4, label=states];
m0_552 -> m0_380  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_551 -> m0_352  [key=1, style=dashed, color=darkseagreen4, label=string];
}
