digraph  {
n0 [cluster="Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, string)", label="Entry Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, string)", span="24-24"];
n1 [cluster="Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, string)", label="return UseMsmqQueues(storage, pathPattern, EnqueuedState.DefaultQueue);", span="28-28"];
n2 [cluster="Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, string)", label="Exit Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, string)", span="24-24"];
n3 [cluster="Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, string, params string[])", label="Entry Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, string, params string[])", span="31-31"];
n4 [cluster="Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, string, params string[])", label="return UseMsmqQueues(storage, MsmqTransactionType.Internal, pathPattern, queues);", span="36-36"];
n5 [cluster="Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, string, params string[])", label="Exit Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, string, params string[])", span="31-31"];
n6 [cluster="Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.Msmq.MsmqTransactionType, string, params string[])", label="Entry Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.Msmq.MsmqTransactionType, string, params string[])", span="39-39"];
n7 [cluster="Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.Msmq.MsmqTransactionType, string, params string[])", label="storage == null", span="45-45"];
n9 [cluster="Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.Msmq.MsmqTransactionType, string, params string[])", label="queues.Length == 0", span="47-47"];
n11 [cluster="Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.Msmq.MsmqTransactionType, string, params string[])", label="var provider = new MsmqJobQueueProvider(pathPattern, queues, transactionType)", span="52-52"];
n12 [cluster="Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.Msmq.MsmqTransactionType, string, params string[])", label="storage.QueueProviders.Add(provider, queues)", span="53-53"];
n13 [cluster="Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.Msmq.MsmqTransactionType, string, params string[])", label="return storage;", span="55-55"];
n8 [cluster="Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.Msmq.MsmqTransactionType, string, params string[])", label="throw new ArgumentNullException(''storage'');", span="45-45"];
n10 [cluster="Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.Msmq.MsmqTransactionType, string, params string[])", label="queues = new[] { EnqueuedState.DefaultQueue }", span="49-49"];
n16 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.MsmqJobQueueProvider(string, System.Collections.Generic.IEnumerable<string>, Hangfire.SqlServer.Msmq.MsmqTransactionType)", label="Entry Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.MsmqJobQueueProvider(string, System.Collections.Generic.IEnumerable<string>, Hangfire.SqlServer.Msmq.MsmqTransactionType)", span="26-26"];
n17 [cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.Add(Hangfire.SqlServer.IPersistentJobQueueProvider, System.Collections.Generic.IEnumerable<string>)", label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.Add(Hangfire.SqlServer.IPersistentJobQueueProvider, System.Collections.Generic.IEnumerable<string>)", span="40-40"];
n14 [cluster="Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.Msmq.MsmqTransactionType, string, params string[])", label="Exit Hangfire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.Msmq.MsmqTransactionType, string, params string[])", span="39-39"];
n15 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m0_92 [cluster="System.Console.WriteLine(string, object)", file="ClientFilters.feature.cs", label="Entry System.Console.WriteLine(string, object)", span="0-0"];
m0_0 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="Entry ConsoleSample.Program.Main()", span="12-12"];
m0_1 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="LogManager.Adapter = new ConsoleOutLoggerFactoryAdapter(\r\n                LogLevel.Info, false, false, true, '''')", span="14-15"];
m0_2 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="var sqlServerStorage = new SqlServerStorage(\r\n                @''Server=.\sqlexpress;Database=HangFire.Sample;Trusted_Connection=True;'')", span="17-18"];
m0_3 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="sqlServerStorage.UseMsmqQueues(@''.\Private$\hangfire{0}'', ''default'', ''critical'')", span="19-19"];
m0_4 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="JobStorage.Current =\r\n                sqlServerStorage", span="21-22"];
m0_5 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="var options = new BackgroundJobServerOptions\r\n            {\r\n                Queues = new[] { ''critical'', ''default'' }\r\n            }", span="25-28"];
m0_6 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="var server = new BackgroundJobServer(options)", span="30-30"];
m0_7 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="var count = 1", span="32-32"];
m0_12 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="server.Start()", span="45-45"];
m0_8 [cluster="ConsoleSample.Program.Main()", color=green, community=0, file="ClientFilters.feature.cs", label=true, prediction=0, span="34-34"];
m0_46 [cluster="ConsoleSample.Program.Main()", color=green, community=0, file="ClientFilters.feature.cs", label="var number = count++", prediction=1, span="104-104"];
m0_9 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="var command = Console.ReadLine()", span="36-36"];
m0_64 [cluster="ConsoleSample.Program.Main()", color=green, community=0, file="ClientFilters.feature.cs", label="Console.WriteLine(''Press Enter to exit...'')", prediction=2, span="150-150"];
m0_10 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="command == null || command.Equals(''stop'', StringComparison.OrdinalIgnoreCase)", span="38-38"];
m0_11 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="command.Equals(''start'', StringComparison.OrdinalIgnoreCase)", span="43-43"];
m0_13 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="command.StartsWith(''add'', StringComparison.OrdinalIgnoreCase)", span="48-48"];
m0_14 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="var workCount = int.Parse(command.Substring(4))", span="52-52"];
m0_23 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="command.StartsWith(''static'', StringComparison.OrdinalIgnoreCase)", span="66-66"];
m0_24 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="var workCount = int.Parse(command.Substring(7))", span="70-70"];
m0_39 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="var workCount = int.Parse(command.Substring(5))", span="94-94"];
m0_45 [cluster="ConsoleSample.Program.Main()", color=green, community=0, file="ClientFilters.feature.cs", label="var seconds = int.Parse(command.Substring(2))", prediction=3, span="103-103"];
m0_48 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="command.StartsWith(''cancelable'', StringComparison.OrdinalIgnoreCase)", span="108-108"];
m0_51 [cluster="ConsoleSample.Program.Main()", color=green, community=0, file="ClientFilters.feature.cs", label="command.StartsWith(''delete'', StringComparison.OrdinalIgnoreCase)", prediction=4, span="114-114"];
m0_52 [cluster="ConsoleSample.Program.Main()", color=green, community=0, file="ClientFilters.feature.cs", label="var workCount = int.Parse(command.Substring(7))", prediction=5, span="116-116"];
m0_59 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="var workCount = int.Parse(command.Substring(5))", span="128-128"];
m0_15 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="var i = 0", span="53-53"];
m0_16 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="i < workCount", span="53-53"];
m0_17 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="var number = i", span="55-55"];
m0_19 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="i++", span="53-53"];
m0_20 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="Console.WriteLine(''Jobs enqueued.'')", span="58-58"];
m0_18 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="BackgroundJob.Enqueue<Services>(x => x.Random(number))", span="56-56"];
m0_21 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label=Exception, span="60-60"];
m0_22 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="Console.WriteLine(ex.Message)", span="62-62"];
m0_25 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="var i = 0", span="71-71"];
m0_26 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="i < workCount", span="71-71"];
m0_28 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="i++", span="71-71"];
m0_29 [cluster="ConsoleSample.Program.Main()", color=green, community=0, file="ClientFilters.feature.cs", label="Console.WriteLine(''Jobs enqueued.'')", prediction=6, span="75-75"];
m0_30 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label=Exception, span="77-77"];
m0_31 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="Console.WriteLine(ex.Message)", span="79-79"];
m0_34 [cluster="ConsoleSample.Program.Main()", color=green, community=0, file="ClientFilters.feature.cs", label="var i = 0", prediction=7, span="86-86"];
m0_35 [cluster="ConsoleSample.Program.Main()", color=green, community=0, file="ClientFilters.feature.cs", label="i < workCount", prediction=8, span="86-86"];
m0_37 [cluster="ConsoleSample.Program.Main()", color=green, community=0, file="ClientFilters.feature.cs", label="i++", prediction=7, span="86-86"];
m0_40 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="var i = 0", span="95-95"];
m0_41 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="i < workCount", span="95-95"];
m0_43 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="i++", span="95-95"];
m0_42 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="BackgroundJob.Enqueue<Services>(x => x.Args(Guid.NewGuid().ToString(), 14442, DateTime.UtcNow))", span="97-97"];
m0_47 [cluster="ConsoleSample.Program.Main()", color=green, community=0, file="ClientFilters.feature.cs", label="BackgroundJob.Schedule<Services>(x => x.Random(number), TimeSpan.FromSeconds(seconds))", prediction=3, span="105-105"];
m0_50 [cluster="ConsoleSample.Program.Main()", color=green, community=0, file="ClientFilters.feature.cs", label="BackgroundJob.Enqueue<Services>(x => x.Cancelable(iterations, JobCancellationToken.Null))", prediction=11, span="111-111"];
m0_53 [cluster="ConsoleSample.Program.Main()", color=green, community=0, file="ClientFilters.feature.cs", label="var i = 0", prediction=12, span="117-117"];
m0_54 [cluster="ConsoleSample.Program.Main()", color=green, community=0, file="ClientFilters.feature.cs", label="i < workCount", prediction=5, span="117-117"];
m0_57 [cluster="ConsoleSample.Program.Main()", color=green, community=0, file="ClientFilters.feature.cs", label="i++", prediction=12, span="117-117"];
m0_55 [cluster="ConsoleSample.Program.Main()", color=green, community=0, file="ClientFilters.feature.cs", label="var jobId = BackgroundJob.Enqueue<Services>(x => x.EmptyDefault())", prediction=15, span="119-119"];
m0_60 [cluster="ConsoleSample.Program.Main()", color=green, community=0, file="ClientFilters.feature.cs", label="Parallel.For(0, workCount, i =>\r\n                            {\r\n                                if (i % 2 == 0)\r\n                                {\r\n                                    BackgroundJob.Enqueue<Services>(x => x.EmptyCritical());\r\n                                }\r\n                                else\r\n                                {\r\n                                    BackgroundJob.Enqueue<Services>(x => x.EmptyDefault());\r\n                                }\r\n                            })", prediction=16, span="129-139"];
m0_61 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="Console.WriteLine(''Jobs enqueued.'')", span="140-140"];
m0_62 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label=Exception, span="142-142"];
m0_65 [cluster="ConsoleSample.Program.Main()", color=green, community=0, file="ClientFilters.feature.cs", label="Console.ReadLine()", prediction=17, span="151-151"];
m0_66 [cluster="ConsoleSample.Program.Main()", file="ClientFilters.feature.cs", label="Exit ConsoleSample.Program.Main()", span="12-12"];
m0_67 [cluster="ConsoleOutLoggerFactoryAdapter.cstr", file="ClientFilters.feature.cs", label="Entry ConsoleOutLoggerFactoryAdapter.cstr", span=""];
m0_82 [cluster="HangFire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", file="ClientFilters.feature.cs", label="Entry HangFire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", span="148-148"];
m0_122 [cluster="ConsoleSample.Services.EmptyCritical()", file="ClientFilters.feature.cs", label="Entry ConsoleSample.Services.EmptyCritical()", span="16-16"];
m0_96 [cluster="ConsoleSample.Services.Error()", file="ClientFilters.feature.cs", label="Entry ConsoleSample.Services.Error()", span="21-21"];
m0_69 [cluster="HangFire.SqlServer.SqlServerStorage.UseMsmqQueues(string, params string[])", file="ClientFilters.feature.cs", label="Entry HangFire.SqlServer.SqlServerStorage.UseMsmqQueues(string, params string[])", span="28-28"];
m0_77 [cluster="int.Parse(string)", file="ClientFilters.feature.cs", label="Entry int.Parse(string)", span="0-0"];
m0_81 [cluster="System.TimeSpan.FromSeconds(double)", file="ClientFilters.feature.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m0_88 [cluster="ConsoleSample.Services.Random(int)", file="ClientFilters.feature.cs", label="Entry ConsoleSample.Services.Random(int)", span="28-28"];
m0_83 [cluster="HangFire.BackgroundJob.Delete(string)", file="ClientFilters.feature.cs", label="Entry HangFire.BackgroundJob.Delete(string)", span="164-164"];
m0_101 [cluster="System.Guid.ToString()", file="ClientFilters.feature.cs", label="Entry System.Guid.ToString()", span="0-0"];
m0_75 [cluster="string.StartsWith(string, System.StringComparison)", file="ClientFilters.feature.cs", label="Entry string.StartsWith(string, System.StringComparison)", span="0-0"];
m0_71 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions)", file="ClientFilters.feature.cs", label="Entry HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions)", span="41-41"];
m0_102 [cluster="ConsoleSample.Services.Args(string, int, System.DateTime)", file="ClientFilters.feature.cs", label="Entry ConsoleSample.Services.Args(string, int, System.DateTime)", span="64-64"];
m0_72 [cluster="System.Console.ReadLine()", file="ClientFilters.feature.cs", label="Entry System.Console.ReadLine()", span="0-0"];
m0_78 [cluster="HangFire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)", file="ClientFilters.feature.cs", label="Entry HangFire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)", span="78-78"];
m0_119 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Entry lambda expression", span="133-133"];
m0_86 [cluster="lambda expression", file="ClientFilters.feature.cs", label="x.Random(number)", span="56-56"];
m0_85 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Entry lambda expression", span="56-56"];
m0_89 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Entry lambda expression", span="73-73"];
m0_93 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Entry lambda expression", span="88-88"];
m0_97 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Entry lambda expression", span="97-97"];
m0_104 [cluster="lambda expression", color=green, community=0, file="ClientFilters.feature.cs", label="x.Random(number)", prediction=1, span="105-105"];
m0_103 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Entry lambda expression", span="105-105"];
m0_107 [cluster="lambda expression", color=green, community=0, file="ClientFilters.feature.cs", label="x.Cancelable(iterations, JobCancellationToken.Null)", prediction=19, span="111-111"];
m0_106 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Entry lambda expression", span="111-111"];
m0_110 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Entry lambda expression", span="119-119"];
m0_114 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Entry lambda expression", span="129-139"];
m0_87 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Exit lambda expression", span="56-56"];
m0_91 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Exit lambda expression", span="73-73"];
m0_95 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Exit lambda expression", span="88-88"];
m0_98 [cluster="lambda expression", file="ClientFilters.feature.cs", label="x.Args(Guid.NewGuid().ToString(), 14442, DateTime.UtcNow)", span="97-97"];
m0_99 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Exit lambda expression", span="97-97"];
m0_105 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Exit lambda expression", span="105-105"];
m0_108 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Exit lambda expression", span="111-111"];
m0_111 [cluster="lambda expression", color=green, community=0, file="ClientFilters.feature.cs", label="x.EmptyDefault()", prediction=20, span="119-119"];
m0_112 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Exit lambda expression", span="119-119"];
m0_115 [cluster="lambda expression", file="ClientFilters.feature.cs", label="i % 2 == 0", span="131-131"];
m0_116 [cluster="lambda expression", file="ClientFilters.feature.cs", label="BackgroundJob.Enqueue<Services>(x => x.EmptyCritical())", span="133-133"];
m0_118 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Exit lambda expression", span="129-139"];
m0_123 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Entry lambda expression", span="137-137"];
m0_120 [cluster="lambda expression", file="ClientFilters.feature.cs", label="x.EmptyCritical()", span="133-133"];
m0_121 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Exit lambda expression", span="133-133"];
m0_125 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Exit lambda expression", span="137-137"];
m0_73 [cluster="string.Equals(string, System.StringComparison)", file="ClientFilters.feature.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m0_84 [cluster="System.Threading.Tasks.Parallel.For(int, int, System.Action<int>)", file="ClientFilters.feature.cs", label="Entry System.Threading.Tasks.Parallel.For(int, int, System.Action<int>)", span="0-0"];
m0_100 [cluster="System.Guid.NewGuid()", file="ClientFilters.feature.cs", label="Entry System.Guid.NewGuid()", span="0-0"];
m0_74 [cluster="HangFire.BackgroundJobServer.Start()", file="ClientFilters.feature.cs", label="Entry HangFire.BackgroundJobServer.Start()", span="60-60"];
m0_68 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", file="ClientFilters.feature.cs", label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="32-32"];
m0_70 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="ClientFilters.feature.cs", label="Entry HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="13-13"];
m0_80 [cluster="HangFire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", file="ClientFilters.feature.cs", label="Entry HangFire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", span="60-60"];
m0_79 [cluster="System.Console.WriteLine(string)", file="ClientFilters.feature.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m0_109 [cluster="ConsoleSample.Services.Cancelable(int, HangFire.IJobCancellationToken)", file="ClientFilters.feature.cs", label="Entry ConsoleSample.Services.Cancelable(int, HangFire.IJobCancellationToken)", span="45-45"];
m0_113 [cluster="ConsoleSample.Services.EmptyDefault()", file="ClientFilters.feature.cs", label="Entry ConsoleSample.Services.EmptyDefault()", span="11-11"];
m0_76 [cluster="string.Substring(int)", file="ClientFilters.feature.cs", label="Entry string.Substring(int)", span="0-0"];
m0_126 [file="ClientFilters.feature.cs", label=number, span=""];
m0_127 [file="ClientFilters.feature.cs", label=number, span=""];
m0_128 [file="ClientFilters.feature.cs", label=iterations, span=""];
m1_111 [cluster="HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeAddedToTheQueue(string, string)", file="ClientSteps.cs", label="Entry HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeAddedToTheQueue(string, string)", span="175-175"];
m1_112 [cluster="HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeAddedToTheQueue(string, string)", file="ClientSteps.cs", label="ThenTheArgumentlessJobShouldBeCreated(type)", span="177-177"];
m1_113 [cluster="HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeAddedToTheQueue(string, string)", file="ClientSteps.cs", label="ThenItShouldBeEnqueuedToTheQueue(queue)", span="178-178"];
m1_114 [cluster="HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeAddedToTheQueue(string, string)", file="ClientSteps.cs", label="Exit HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeAddedToTheQueue(string, string)", span="175-175"];
m1_42 [cluster="HangFire.Perform.In<TJob>(System.TimeSpan, object)", file="ClientSteps.cs", label="Entry HangFire.Perform.In<TJob>(System.TimeSpan, object)", span="125-125"];
m1_78 [cluster="HangFire.JobHelper.FromTimestamp(long)", file="ClientSteps.cs", label="Entry HangFire.JobHelper.FromTimestamp(long)", span="57-57"];
m1_103 [cluster="HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeScheduledForTomorrow(string)", file="ClientSteps.cs", label="Entry HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeScheduledForTomorrow(string)", span="161-161"];
m1_104 [cluster="HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeScheduledForTomorrow(string)", file="ClientSteps.cs", label="ThenTheArgumentlessJobShouldBeCreated(type)", span="163-163"];
m1_105 [cluster="HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeScheduledForTomorrow(string)", file="ClientSteps.cs", label="ThenItShouldBeScheduledForTomorrow()", span="164-164"];
m1_106 [cluster="HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeScheduledForTomorrow(string)", file="ClientSteps.cs", label="Exit HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeScheduledForTomorrow(string)", span="161-161"];
m1_76 [cluster="Unk.SortedSetContainsItem", file="ClientSteps.cs", label="Entry Unk.SortedSetContainsItem", span=""];
m1_39 [cluster="HangFire.Perform.Async(System.Type, object)", file="ClientSteps.cs", label="Entry HangFire.Perform.Async(System.Type, object)", span="79-79"];
m1_54 [cluster="Unk.GetAllEntriesFromHash", file="ClientSteps.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m1_57 [cluster="Unk.IsTrue", file="ClientSteps.cs", label="Entry Unk.IsTrue", span=""];
m1_36 [cluster="HangFire.Perform.Async<TJob>()", file="ClientSteps.cs", label="Entry HangFire.Perform.Async<TJob>()", span="26-26"];
m1_17 [cluster="HangFire.Tests.ClientSteps.WhenICallThe(string)", file="ClientSteps.cs", label="code.Equals(''Perform.In<TestJob>(TimeSpan.FromDays(1), new { ArticleId = 3 })'')", span="51-51"];
m1_53 [cluster="string.Format(string, object)", file="ClientSteps.cs", label="Entry string.Format(string, object)", span="0-0"];
m1_35 [cluster="string.Equals(string)", file="ClientSteps.cs", label="Entry string.Equals(string)", span="0-0"];
m1_80 [cluster="HangFire.Tests.ClientSteps.AnExceptionShouldBeThrown(string)", file="ClientSteps.cs", label="Entry HangFire.Tests.ClientSteps.AnExceptionShouldBeThrown(string)", span="129-129"];
m1_81 [cluster="HangFire.Tests.ClientSteps.AnExceptionShouldBeThrown(string)", file="ClientSteps.cs", label="Assert.IsNotNull(_exception)", span="131-131"];
m1_82 [cluster="HangFire.Tests.ClientSteps.AnExceptionShouldBeThrown(string)", file="ClientSteps.cs", label="Assert.IsInstanceOfType(_exception, Type.GetType(exceptionType, true))", span="132-132"];
m1_83 [cluster="HangFire.Tests.ClientSteps.AnExceptionShouldBeThrown(string)", file="ClientSteps.cs", label="Exit HangFire.Tests.ClientSteps.AnExceptionShouldBeThrown(string)", span="129-129"];
m1_58 [cluster="Unk.>", file="ClientSteps.cs", label="Entry Unk.>", span=""];
m1_77 [cluster="Unk.GetItemScoreInSortedSet", file="ClientSteps.cs", label="Entry Unk.GetItemScoreInSortedSet", span=""];
m1_37 [cluster="HangFire.Perform.Async<TJob>(object)", file="ClientSteps.cs", label="Entry HangFire.Perform.Async<TJob>(object)", span="44-44"];
m1_55 [cluster="Unk.AreNotEqual", file="ClientSteps.cs", label="Entry Unk.AreNotEqual", span=""];
m1_15 [cluster="HangFire.Tests.ClientSteps.WhenICallThe(string)", file="ClientSteps.cs", label="code.Equals(''Perform.In<TestJob>(TimeSpan.FromDays(1))'')", span="47-47"];
m1_43 [cluster="HangFire.Perform.In(System.TimeSpan, System.Type)", file="ClientSteps.cs", label="Entry HangFire.Perform.In(System.TimeSpan, System.Type)", span="142-142"];
m1_7 [cluster="HangFire.Tests.ClientSteps.WhenICallThe(string)", file="ClientSteps.cs", label="code.Equals(''Perform.Async(typeof(TestJob))'')", span="31-31"];
m1_59 [cluster="Unk.AreEqual", file="ClientSteps.cs", label="Entry Unk.AreEqual", span=""];
m1_45 [cluster="Unk.Pending", file="ClientSteps.cs", label="Entry Unk.Pending", span=""];
m1_44 [cluster="HangFire.Perform.In(System.TimeSpan, System.Type, object)", file="ClientSteps.cs", label="Entry HangFire.Perform.In(System.TimeSpan, System.Type, object)", span="160-160"];
m1_87 [cluster="HangFire.Tests.ClientSteps.ThenTheJobShouldBeCreatedWithTheFollowingArguments(string, Table)", file="ClientSteps.cs", label="Entry HangFire.Tests.ClientSteps.ThenTheJobShouldBeCreatedWithTheFollowingArguments(string, Table)", span="136-136"];
m1_88 [cluster="HangFire.Tests.ClientSteps.ThenTheJobShouldBeCreatedWithTheFollowingArguments(string, Table)", file="ClientSteps.cs", label="var job = Redis.Client.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', _jobId))", span="138-138"];
m1_90 [cluster="HangFire.Tests.ClientSteps.ThenTheJobShouldBeCreatedWithTheFollowingArguments(string, Table)", file="ClientSteps.cs", label="Assert.IsTrue(job[''Type''].Contains(type))", span="140-140"];
m1_92 [cluster="HangFire.Tests.ClientSteps.ThenTheJobShouldBeCreatedWithTheFollowingArguments(string, Table)", file="ClientSteps.cs", label="DictionaryAssert.ContainsFollowingItems(table, args)", span="143-143"];
m1_89 [cluster="HangFire.Tests.ClientSteps.ThenTheJobShouldBeCreatedWithTheFollowingArguments(string, Table)", file="ClientSteps.cs", label="Assert.AreNotEqual(0, job.Count)", span="139-139"];
m1_91 [cluster="HangFire.Tests.ClientSteps.ThenTheJobShouldBeCreatedWithTheFollowingArguments(string, Table)", file="ClientSteps.cs", label="var args = JobHelper.FromJson<Dictionary<string, string>>(job[''Args''])", span="142-142"];
m1_93 [cluster="HangFire.Tests.ClientSteps.ThenTheJobShouldBeCreatedWithTheFollowingArguments(string, Table)", file="ClientSteps.cs", label="Exit HangFire.Tests.ClientSteps.ThenTheJobShouldBeCreatedWithTheFollowingArguments(string, Table)", span="136-136"];
m1_40 [cluster="System.TimeSpan.FromDays(double)", file="ClientSteps.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m1_94 [cluster="HangFire.Tests.DictionaryAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", file="ClientSteps.cs", label="Entry HangFire.Tests.DictionaryAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", span="9-9"];
m1_95 [cluster="HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeAddedToTheDefaultQueue(string)", file="ClientSteps.cs", label="Entry HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeAddedToTheDefaultQueue(string)", span="147-147"];
m1_96 [cluster="HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeAddedToTheDefaultQueue(string)", file="ClientSteps.cs", label="ThenTheArgumentlessJobShouldBeCreated(type)", span="149-149"];
m1_97 [cluster="HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeAddedToTheDefaultQueue(string)", file="ClientSteps.cs", label="ThenItShouldBeEnqueuedToTheDefaultQueue()", span="150-150"];
m1_98 [cluster="HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeAddedToTheDefaultQueue(string)", file="ClientSteps.cs", label="Exit HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeAddedToTheDefaultQueue(string)", span="147-147"];
m1_79 [cluster="System.DateTime.AddDays(double)", file="ClientSteps.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m1_41 [cluster="HangFire.Perform.In<TJob>(System.TimeSpan)", file="ClientSteps.cs", label="Entry HangFire.Perform.In<TJob>(System.TimeSpan)", span="106-106"];
m1_46 [cluster="HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeCreated(string)", file="ClientSteps.cs", label="Entry HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeCreated(string)", span="91-91"];
m1_47 [cluster="HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeCreated(string)", file="ClientSteps.cs", label="var job = Redis.Client.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', _jobId))", span="93-93"];
m1_49 [cluster="HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeCreated(string)", file="ClientSteps.cs", label="Assert.IsTrue(job[''Type''].Contains(type))", span="95-95"];
m1_48 [cluster="HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeCreated(string)", file="ClientSteps.cs", label="Assert.AreNotEqual(0, job.Count)", span="94-94"];
m1_50 [cluster="HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeCreated(string)", file="ClientSteps.cs", label="var args = JobHelper.FromJson<Dictionary<string, string>>(job[''Args''])", span="97-97"];
m1_51 [cluster="HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeCreated(string)", file="ClientSteps.cs", label="Assert.AreEqual(0, args.Count)", span="98-98"];
m1_52 [cluster="HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeCreated(string)", file="ClientSteps.cs", label="Exit HangFire.Tests.ClientSteps.ThenTheArgumentlessJobShouldBeCreated(string)", span="91-91"];
m1_0 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="ClientSteps.cs", label="Entry HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="13-13"];
m1_1 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="ClientSteps.cs", label="WorkerCount = Environment.ProcessorCount * 5", span="15-15"];
m1_60 [cluster="HangFire.Tests.ClientSteps.ThenItShouldBeEnqueuedToTheDefaultQueue()", file="ClientSteps.cs", label="Entry HangFire.Tests.ClientSteps.ThenItShouldBeEnqueuedToTheDefaultQueue()", span="102-102"];
m1_61 [cluster="HangFire.Tests.ClientSteps.ThenItShouldBeEnqueuedToTheDefaultQueue()", file="ClientSteps.cs", label="ThenItShouldBeEnqueuedToTheQueue(QueueSteps.DefaultQueue)", span="104-104"];
m1_62 [cluster="HangFire.Tests.ClientSteps.ThenItShouldBeEnqueuedToTheDefaultQueue()", file="ClientSteps.cs", label="Exit HangFire.Tests.ClientSteps.ThenItShouldBeEnqueuedToTheDefaultQueue()", span="102-102"];
m1_2 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="ClientSteps.cs", label="ServerName = Environment.MachineName", span="16-16"];
m1_3 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="ClientSteps.cs", label="Queues = new[] { EnqueuedState.DefaultQueue }", span="17-17"];
m1_5 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", color=green, community=0, file="ClientSteps.cs", label="SchedulePollingInterval = TimeSpan.FromSeconds(15)", prediction=21, span="19-19"];
m1_9 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="ClientSteps.cs", label="logger.InfoFormat(''Using the following options for HangFire Server:'')", span="61-61"];
m1_11 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="ClientSteps.cs", label="logger.InfoFormat(''    Listening queues: {0}.'', String.Join('', '', Queues.Select(x => ''''' + x + ''''')))", span="63-63"];
m1_13 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="ClientSteps.cs", label="logger.InfoFormat(''    Schedule polling interval: {0}.'', SchedulePollingInterval)", span="65-65"];
m1_19 [cluster="lambda expression", file="ClientSteps.cs", label="''''' + x + '''''", span="63-63"];
m1_21 [cluster="HangFire.Tests.ClientSteps.WhenICallThe(string)", file="ClientSteps.cs", label="HangFire.BackgroundJobServerOptions", span=""];
m1_23 [cluster="HangFire.Tests.ClientSteps.WhenICallThe(string)", file="ClientSteps.cs", label="code.Equals(''Perform.Async<CriticalQueueJob>()'')", span="63-63"];
m1_25 [cluster="HangFire.Tests.ClientSteps.WhenICallThe(string)", file="ClientSteps.cs", label="code.Equals(''Perform.Async<InvalidQueueJob>()'')", span="67-67"];
m1_27 [cluster="HangFire.Tests.ClientSteps.WhenICallThe(string)", file="ClientSteps.cs", label="code.Equals(''Perform.Async<EmptyQueueJob>()'')", span="71-71"];
m1_4 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", color=green, community=0, file="ClientSteps.cs", label="ShutdownTimeout = TimeSpan.FromSeconds(15)", prediction=22, span="18-18"];
m1_6 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="ClientSteps.cs", label="Exit HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="13-13"];
m1_8 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="ClientSteps.cs", label="Entry HangFire.BackgroundJobServerOptions.Log(ILog)", span="59-59"];
m1_10 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="ClientSteps.cs", label="logger.InfoFormat(''    Worker count: {0}.'', WorkerCount)", span="62-62"];
m1_12 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="ClientSteps.cs", label="logger.InfoFormat(''    Shutdown timeout: {0}.'', ShutdownTimeout)", span="64-64"];
m1_14 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="ClientSteps.cs", label="Exit HangFire.BackgroundJobServerOptions.Log(ILog)", span="59-59"];
m1_16 [cluster="Unk.Select", file="ClientSteps.cs", label="Entry Unk.Select", span=""];
m1_18 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="63-63"];
m1_20 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="63-63"];
m1_22 [cluster="HangFire.Tests.ClientSteps.WhenICallThe(string)", file="ClientSteps.cs", label="_jobId = Perform.In(TimeSpan.FromDays(1), typeof (TestJob), new { ArticleId = 3 })", span="61-61"];
m1_24 [cluster="HangFire.Tests.ClientSteps.WhenICallThe(string)", file="ClientSteps.cs", label="_jobId = Perform.Async<CriticalQueueJob>()", span="65-65"];
m1_26 [cluster="HangFire.Tests.ClientSteps.WhenICallThe(string)", file="ClientSteps.cs", label="_jobId = Perform.Async<InvalidQueueJob>()", span="69-69"];
m1_28 [cluster="HangFire.Tests.ClientSteps.WhenICallThe(string)", file="ClientSteps.cs", label="_jobId = Perform.Async<EmptyQueueJob>()", span="73-73"];
m1_29 [cluster="HangFire.Tests.ClientSteps.WhenICallThe(string)", file="ClientSteps.cs", label="ScenarioContext.Current.Pending()", span="77-77"];
m1_30 [cluster="HangFire.Tests.ClientSteps.WhenICallThe(string)", file="ClientSteps.cs", label=PendingStepException, span="80-80"];
m1_32 [cluster="HangFire.Tests.ClientSteps.WhenICallThe(string)", file="ClientSteps.cs", label=Exception, span="84-84"];
m1_31 [cluster="HangFire.Tests.ClientSteps.WhenICallThe(string)", file="ClientSteps.cs", label="throw;", span="82-82"];
m1_33 [cluster="HangFire.Tests.ClientSteps.WhenICallThe(string)", file="ClientSteps.cs", label="_exception = ex", span="86-86"];
m1_34 [cluster="HangFire.Tests.ClientSteps.WhenICallThe(string)", file="ClientSteps.cs", label="Exit HangFire.Tests.ClientSteps.WhenICallThe(string)", span="19-19"];
m1_86 [cluster="Unk.IsInstanceOfType", file="ClientSteps.cs", label="Entry Unk.IsInstanceOfType", span=""];
m1_38 [cluster="HangFire.Perform.Async(System.Type)", file="ClientSteps.cs", label="Entry HangFire.Perform.Async(System.Type)", span="61-61"];
m1_68 [cluster="Unk.GetAllItemsFromList", file="ClientSteps.cs", label="Entry Unk.GetAllItemsFromList", span=""];
m1_84 [cluster="Unk.IsNotNull", file="ClientSteps.cs", label="Entry Unk.IsNotNull", span=""];
m1_56 [cluster="Unk.Contains", file="ClientSteps.cs", label="Entry Unk.Contains", span=""];
m1_69 [cluster="HangFire.Tests.ClientSteps.ThenItShouldBeScheduledForTomorrow()", file="ClientSteps.cs", label="Entry HangFire.Tests.ClientSteps.ThenItShouldBeScheduledForTomorrow()", span="118-118"];
m1_70 [cluster="HangFire.Tests.ClientSteps.ThenItShouldBeScheduledForTomorrow()", file="ClientSteps.cs", label="Assert.IsTrue(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', _jobId))", span="120-120"];
m1_71 [cluster="HangFire.Tests.ClientSteps.ThenItShouldBeScheduledForTomorrow()", file="ClientSteps.cs", label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:schedule'', _jobId)", span="121-121"];
m1_72 [cluster="HangFire.Tests.ClientSteps.ThenItShouldBeScheduledForTomorrow()", file="ClientSteps.cs", label="var timestamp = JobHelper.FromTimestamp((long) score)", span="122-122"];
m1_73 [cluster="HangFire.Tests.ClientSteps.ThenItShouldBeScheduledForTomorrow()", file="ClientSteps.cs", label="Assert.IsTrue(DateTime.UtcNow.Date.AddDays(1) <= timestamp)", span="124-124"];
m1_74 [cluster="HangFire.Tests.ClientSteps.ThenItShouldBeScheduledForTomorrow()", file="ClientSteps.cs", label="Assert.IsTrue(timestamp < DateTime.UtcNow.Date.AddDays(2))", span="125-125"];
m1_75 [cluster="HangFire.Tests.ClientSteps.ThenItShouldBeScheduledForTomorrow()", file="ClientSteps.cs", label="Exit HangFire.Tests.ClientSteps.ThenItShouldBeScheduledForTomorrow()", span="118-118"];
m1_99 [cluster="HangFire.Tests.ClientSteps.ThenTheJobShouldBeAddedToTheDefaultQueueWithArguments(string, Table)", file="ClientSteps.cs", label="Entry HangFire.Tests.ClientSteps.ThenTheJobShouldBeAddedToTheDefaultQueueWithArguments(string, Table)", span="154-154"];
m1_100 [cluster="HangFire.Tests.ClientSteps.ThenTheJobShouldBeAddedToTheDefaultQueueWithArguments(string, Table)", file="ClientSteps.cs", label="ThenTheJobShouldBeCreatedWithTheFollowingArguments(type, table)", span="156-156"];
m1_101 [cluster="HangFire.Tests.ClientSteps.ThenTheJobShouldBeAddedToTheDefaultQueueWithArguments(string, Table)", file="ClientSteps.cs", label="ThenItShouldBeEnqueuedToTheDefaultQueue()", span="157-157"];
m1_102 [cluster="HangFire.Tests.ClientSteps.ThenTheJobShouldBeAddedToTheDefaultQueueWithArguments(string, Table)", file="ClientSteps.cs", label="Exit HangFire.Tests.ClientSteps.ThenTheJobShouldBeAddedToTheDefaultQueueWithArguments(string, Table)", span="154-154"];
m1_107 [cluster="HangFire.Tests.ClientSteps.ThenTheJobShouldBeScheduledForTomorrowWithArguments(string, Table)", file="ClientSteps.cs", label="Entry HangFire.Tests.ClientSteps.ThenTheJobShouldBeScheduledForTomorrowWithArguments(string, Table)", span="168-168"];
m1_108 [cluster="HangFire.Tests.ClientSteps.ThenTheJobShouldBeScheduledForTomorrowWithArguments(string, Table)", file="ClientSteps.cs", label="ThenTheJobShouldBeCreatedWithTheFollowingArguments(type, table)", span="170-170"];
m1_109 [cluster="HangFire.Tests.ClientSteps.ThenTheJobShouldBeScheduledForTomorrowWithArguments(string, Table)", file="ClientSteps.cs", label="ThenItShouldBeScheduledForTomorrow()", span="171-171"];
m1_110 [cluster="HangFire.Tests.ClientSteps.ThenTheJobShouldBeScheduledForTomorrowWithArguments(string, Table)", file="ClientSteps.cs", label="Exit HangFire.Tests.ClientSteps.ThenTheJobShouldBeScheduledForTomorrowWithArguments(string, Table)", span="168-168"];
m1_63 [cluster="HangFire.Tests.ClientSteps.ThenItShouldBeEnqueuedToTheQueue(string)", file="ClientSteps.cs", label="Entry HangFire.Tests.ClientSteps.ThenItShouldBeEnqueuedToTheQueue(string)", span="108-108"];
m1_64 [cluster="HangFire.Tests.ClientSteps.ThenItShouldBeEnqueuedToTheQueue(string)", file="ClientSteps.cs", label="var jobIds = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:queue:{0}'', name))", span="110-111"];
m1_65 [cluster="HangFire.Tests.ClientSteps.ThenItShouldBeEnqueuedToTheQueue(string)", file="ClientSteps.cs", label="Assert.AreEqual(1, jobIds.Count)", span="113-113"];
m1_66 [cluster="HangFire.Tests.ClientSteps.ThenItShouldBeEnqueuedToTheQueue(string)", file="ClientSteps.cs", label="Assert.AreEqual(_jobId, jobIds[0])", span="114-114"];
m1_67 [cluster="HangFire.Tests.ClientSteps.ThenItShouldBeEnqueuedToTheQueue(string)", file="ClientSteps.cs", label="Exit HangFire.Tests.ClientSteps.ThenItShouldBeEnqueuedToTheQueue(string)", span="108-108"];
m1_85 [cluster="System.Type.GetType(string, bool)", file="ClientSteps.cs", label="Entry System.Type.GetType(string, bool)", span="0-0"];
m1_115 [file="ClientSteps.cs", label="HangFire.Tests.ClientSteps", span=""];
m3_3 [cluster="System.NotSupportedException.NotSupportedException()", file="CustomTypeConverter.cs", label="Entry System.NotSupportedException.NotSupportedException()", span="0-0"];
m3_0 [cluster="HangFire.Tests.CustomTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", file="CustomTypeConverter.cs", label="Entry HangFire.Tests.CustomTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", span="8-8"];
m3_1 [cluster="HangFire.Tests.CustomTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", color=green, community=0, file="CustomTypeConverter.cs", label="throw new NotSupportedException();", prediction=23, span="10-10"];
m3_2 [cluster="HangFire.Tests.CustomTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", file="CustomTypeConverter.cs", label="Exit HangFire.Tests.CustomTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", span="8-8"];
m4_28 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Redis.RedisStorage.GetStateHandlers()", span="83-83"];
m4_29 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="yield return new FailedStateHandler();", prediction=24, span="85-85"];
m4_30 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="DequeuedJobsWatcher.feature.cs", label="yield return new ProcessingStateHandler();", span="86-86"];
m4_31 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="yield return new SucceededStateHandler();", prediction=25, span="87-87"];
m4_32 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Redis.RedisStorage.GetStateHandlers()", span="83-83"];
m4_34 [cluster="HangFire.Redis.ProcessingStateHandler.ProcessingStateHandler()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Redis.ProcessingStateHandler.ProcessingStateHandler()", span="23-23"];
m4_6 [cluster="System.TimeSpan.FromMinutes(double)", file="DequeuedJobsWatcher.feature.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m4_0 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
m4_1 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="DequeuedJobsWatcher.feature.cs", label="QueuePollInterval = TimeSpan.FromSeconds(15)", span="26-26"];
m4_2 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="DequeuedJobsWatcher.feature.cs", label="InvisibilityTimeout = TimeSpan.FromMinutes(30)", span="27-27"];
m4_3 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="DequeuedJobsWatcher.feature.cs", label="PrepareSchemaIfNecessary = true", span="29-29"];
m4_4 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
m4_5 [cluster="System.TimeSpan.FromSeconds(double)", file="DequeuedJobsWatcher.feature.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m4_33 [cluster="HangFire.Redis.FailedStateHandler.FailedStateHandler()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Redis.FailedStateHandler.FailedStateHandler()", span="23-23"];
m4_35 [cluster="HangFire.Redis.SucceededStateHandler.SucceededStateHandler()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Redis.SucceededStateHandler.SucceededStateHandler()", span="21-21"];
m4_7 [file="DequeuedJobsWatcher.feature.cs", label="HangFire.SqlServer.SqlServerStorageOptions", span=""];
m5_0 [cluster="Hangfire.SqlServer.Msmq.MsmqFetchedJob.MsmqFetchedJob(Hangfire.SqlServer.Msmq.IMsmqTransaction, string)", file="JobClient.feature.cs", label="Entry Hangfire.SqlServer.Msmq.MsmqFetchedJob.MsmqFetchedJob(Hangfire.SqlServer.Msmq.IMsmqTransaction, string)", span="27-27"];
m5_1 [cluster="Hangfire.SqlServer.Msmq.MsmqFetchedJob.MsmqFetchedJob(Hangfire.SqlServer.Msmq.IMsmqTransaction, string)", file="JobClient.feature.cs", label="transaction == null", span="29-29"];
m5_3 [cluster="Hangfire.SqlServer.Msmq.MsmqFetchedJob.MsmqFetchedJob(Hangfire.SqlServer.Msmq.IMsmqTransaction, string)", file="JobClient.feature.cs", label="jobId == null", span="30-30"];
m5_5 [cluster="Hangfire.SqlServer.Msmq.MsmqFetchedJob.MsmqFetchedJob(Hangfire.SqlServer.Msmq.IMsmqTransaction, string)", file="JobClient.feature.cs", label="_transaction = transaction", span="32-32"];
m5_6 [cluster="Hangfire.SqlServer.Msmq.MsmqFetchedJob.MsmqFetchedJob(Hangfire.SqlServer.Msmq.IMsmqTransaction, string)", file="JobClient.feature.cs", label="JobId = jobId", span="34-34"];
m5_2 [cluster="Hangfire.SqlServer.Msmq.MsmqFetchedJob.MsmqFetchedJob(Hangfire.SqlServer.Msmq.IMsmqTransaction, string)", file="JobClient.feature.cs", label="throw new ArgumentNullException(''transaction'');", span="29-29"];
m5_4 [cluster="Hangfire.SqlServer.Msmq.MsmqFetchedJob.MsmqFetchedJob(Hangfire.SqlServer.Msmq.IMsmqTransaction, string)", file="JobClient.feature.cs", label="throw new ArgumentNullException(''jobId'');", span="30-30"];
m5_7 [cluster="Hangfire.SqlServer.Msmq.MsmqFetchedJob.MsmqFetchedJob(Hangfire.SqlServer.Msmq.IMsmqTransaction, string)", file="JobClient.feature.cs", label="Exit Hangfire.SqlServer.Msmq.MsmqFetchedJob.MsmqFetchedJob(Hangfire.SqlServer.Msmq.IMsmqTransaction, string)", span="27-27"];
m5_17 [cluster="Hangfire.SqlServer.Msmq.MsmqFetchedJob.Dispose()", file="JobClient.feature.cs", label="Entry Hangfire.SqlServer.Msmq.MsmqFetchedJob.Dispose()", span="49-49"];
m5_18 [cluster="Hangfire.SqlServer.Msmq.MsmqFetchedJob.Dispose()", file="JobClient.feature.cs", label="_transaction.Dispose()", span="51-51"];
m5_19 [cluster="Hangfire.SqlServer.Msmq.MsmqFetchedJob.Dispose()", file="JobClient.feature.cs", label="Exit Hangfire.SqlServer.Msmq.MsmqFetchedJob.Dispose()", span="49-49"];
m5_9 [cluster="Hangfire.SqlServer.Msmq.MsmqFetchedJob.RemoveFromQueue()", file="JobClient.feature.cs", label="Entry Hangfire.SqlServer.Msmq.MsmqFetchedJob.RemoveFromQueue()", span="39-39"];
m5_10 [cluster="Hangfire.SqlServer.Msmq.MsmqFetchedJob.RemoveFromQueue()", file="JobClient.feature.cs", label="_transaction.Commit()", span="41-41"];
m5_11 [cluster="Hangfire.SqlServer.Msmq.MsmqFetchedJob.RemoveFromQueue()", file="JobClient.feature.cs", label="Exit Hangfire.SqlServer.Msmq.MsmqFetchedJob.RemoveFromQueue()", span="39-39"];
m5_12 [cluster="Hangfire.SqlServer.Msmq.IMsmqTransaction.Commit()", file="JobClient.feature.cs", label="Entry Hangfire.SqlServer.Msmq.IMsmqTransaction.Commit()", span="25-25"];
m5_13 [cluster="Hangfire.SqlServer.Msmq.MsmqFetchedJob.Requeue()", file="JobClient.feature.cs", label="Entry Hangfire.SqlServer.Msmq.MsmqFetchedJob.Requeue()", span="44-44"];
m5_14 [cluster="Hangfire.SqlServer.Msmq.MsmqFetchedJob.Requeue()", file="JobClient.feature.cs", label="_transaction.Abort()", span="46-46"];
m5_15 [cluster="Hangfire.SqlServer.Msmq.MsmqFetchedJob.Requeue()", file="JobClient.feature.cs", label="Exit Hangfire.SqlServer.Msmq.MsmqFetchedJob.Requeue()", span="44-44"];
m5_16 [cluster="Hangfire.SqlServer.Msmq.IMsmqTransaction.Abort()", file="JobClient.feature.cs", label="Entry Hangfire.SqlServer.Msmq.IMsmqTransaction.Abort()", span="26-26"];
m5_20 [cluster="System.IDisposable.Dispose()", file="JobClient.feature.cs", label="Entry System.IDisposable.Dispose()", span="0-0"];
m5_21 [file="JobClient.feature.cs", label="Hangfire.SqlServer.Msmq.MsmqFetchedJob", span=""];
m6_119 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="JobClientSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="236-236"];
m6_125 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="JobClientSteps.cs", label="_connection.Execute(\r\n                @''merge HangFire.Server as Target ''\r\n                + @''using (VALUES (@id, @data)) as Source (Id, Data) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = null ''\r\n                + @''when not matched then insert (Id, Data) values (Source.Id, Source.Data);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data) })", span="250-256"];
m6_121 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="JobClientSteps.cs", label="throw new ArgumentNullException(''serverId'');", span="238-238"];
m6_123 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="JobClientSteps.cs", label="throw new ArgumentNullException(''context'');", span="239-239"];
m6_124 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="JobClientSteps.cs", label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="241-246"];
m6_120 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="JobClientSteps.cs", label="serverId == null", span="238-238"];
m6_122 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="JobClientSteps.cs", label="context == null", span="239-239"];
m6_126 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="JobClientSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="236-236"];
m6_97 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="JobClientSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="205-205"];
m6_100 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", color=green, community=0, file="JobClientSteps.cs", label="name == null", prediction=26, span="208-208"];
m6_98 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="JobClientSteps.cs", label="id == null", span="207-207"];
m6_101 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", color=green, community=0, file="JobClientSteps.cs", label="throw new ArgumentNullException(''name'');", prediction=27, span="208-208"];
m6_102 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="JobClientSteps.cs", label="return _connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault();", span="210-213"];
m6_99 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="JobClientSteps.cs", label="throw new ArgumentNullException(''id'');", span="207-207"];
m6_103 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="JobClientSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="205-205"];
m6_9 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="JobClientSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Dispose()", span="44-44"];
m6_15 [cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="JobClientSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="49-49"];
m6_16 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", file="JobClientSteps.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", span="34-34"];
m6_17 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="JobClientSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="54-54"];
m6_127 [cluster="HangFire.SqlServer.Entities.ServerData.ServerData()", file="JobClientSteps.cs", label="Entry HangFire.SqlServer.Entities.ServerData.ServerData()", span="20-20"];
m6_49 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="JobClientSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="106-106"];
m6_56 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="JobClientSteps.cs", label="var jobId = _connection.Query<int>(\r\n                createJobSql,\r\n                new\r\n                {\r\n                    invocationData = JobHelper.ToJson(invocationData),\r\n                    arguments = invocationData.Arguments,\r\n                    createdAt = DateTime.UtcNow,\r\n                    expireAt = DateTime.UtcNow.Add(expireIn)\r\n                }).Single().ToString()", span="121-129"];
m6_63 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="JobClientSteps.cs", label="_connection.Execute(insertParameterSql, parameterArray)", span="149-149"];
m6_51 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="JobClientSteps.cs", label="throw new ArgumentNullException(''job'');", span="111-111"];
m6_53 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="JobClientSteps.cs", label="throw new ArgumentNullException(''parameters'');", span="112-112"];
m6_55 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="JobClientSteps.cs", label="var invocationData = InvocationData.Serialize(job)", span="119-119"];
m6_54 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="JobClientSteps.cs", label="string createJobSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues (@invocationData, @arguments, @createdAt, @expireAt);\r\nSELECT CAST(SCOPE_IDENTITY() as int)''", span="114-117"];
m6_57 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="JobClientSteps.cs", label="parameters.Count > 0", span="131-131"];
m6_61 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="JobClientSteps.cs", label="parameterArray[parameterIndex++] = new\r\n                    {\r\n                        jobId = jobId,\r\n                        name = parameter.Key,\r\n                        value = parameter.Value\r\n                    }", span="137-142"];
m6_64 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="JobClientSteps.cs", label="return jobId;", span="152-152"];
m6_58 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="JobClientSteps.cs", label="var parameterArray = new object[parameters.Count]", span="133-133"];
m6_62 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="JobClientSteps.cs", label="string insertParameterSql = @''\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@jobId, @name, @value)''", span="145-147"];
m6_50 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="JobClientSteps.cs", label="job == null", span="111-111"];
m6_52 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="JobClientSteps.cs", label="parameters == null", span="112-112"];
m6_60 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="JobClientSteps.cs", label=parameters, span="135-135"];
m6_59 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="JobClientSteps.cs", label="int parameterIndex = 0", span="134-134"];
m6_65 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="JobClientSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="106-106"];
m6_21 [cluster="string.Format(string, object)", file="JobClientSteps.cs", label="Entry string.Format(string, object)", span="0-0"];
m6_8 [cluster="HangFire.Dashboard.CombinedResourceDispatcher.CombinedResourceDispatcher(string, System.Reflection.Assembly, string, params string[])", file="JobClientSteps.cs", label="Entry HangFire.Dashboard.CombinedResourceDispatcher.CombinedResourceDispatcher(string, System.Reflection.Assembly, string, params string[])", span="12-12"];
m6_0 [cluster="HangFire.Dashboard.GlobalDashboardRoutes.GlobalDashboardRoutes()", file="JobClientSteps.cs", label="Entry HangFire.Dashboard.GlobalDashboardRoutes.GlobalDashboardRoutes()", span="25-25"];
m6_5 [cluster="HangFire.Dashboard.GlobalDashboardRoutes.GlobalDashboardRoutes()", file="JobClientSteps.cs", label="Exit HangFire.Dashboard.GlobalDashboardRoutes.GlobalDashboardRoutes()", span="25-25"];
m6_6 [cluster="HangFire.Dashboard.DashboardRouteCollection.DashboardRouteCollection()", file="JobClientSteps.cs", label="Entry HangFire.Dashboard.DashboardRouteCollection.DashboardRouteCollection()", span="7-7"];
m6_2 [cluster="HangFire.Dashboard.GlobalDashboardRoutes.GlobalDashboardRoutes()", file="JobClientSteps.cs", label="Routes.AddRazorPage(''/'', x => new DashboardPage())", span="28-28"];
m6_4 [cluster="HangFire.Dashboard.GlobalDashboardRoutes.GlobalDashboardRoutes()", file="JobClientSteps.cs", label="Routes.Add(''/css'', new CombinedResourceDispatcher(\r\n                ''text/css'',\r\n                typeof(GlobalDashboardRoutes).Assembly,\r\n                GetContentFolderNamespace(''css''),\r\n                Stylesheets))", span="36-40"];
m6_3 [cluster="HangFire.Dashboard.GlobalDashboardRoutes.GlobalDashboardRoutes()", file="JobClientSteps.cs", label="Routes.Add(''/js'', new CombinedResourceDispatcher(\r\n                ''application/javascript'', \r\n                typeof(GlobalDashboardRoutes).Assembly,\r\n                GetContentFolderNamespace(''js''),\r\n                Javascripts))", span="30-34"];
m6_1 [cluster="HangFire.Dashboard.GlobalDashboardRoutes.GlobalDashboardRoutes()", file="JobClientSteps.cs", label="Routes = new DashboardRouteCollection()", span="27-27"];
m6_7 [cluster="Unk.AddRazorPage", file="JobClientSteps.cs", label="Entry Unk.AddRazorPage", span=""];
m6_43 [cluster="System.TimeSpan.Negate()", file="JobClientSteps.cs", label="Entry System.TimeSpan.Negate()", span="0-0"];
m6_69 [cluster="Unk.>", file="JobClientSteps.cs", label="Entry Unk.>", span=""];
m6_47 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="JobClientSteps.cs", label="Entry HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", span="22-22"];
m6_72 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="JobClientSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="155-155"];
m6_76 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="JobClientSteps.cs", label="var jobData = _connection.Query<SqlJob>(sql, new { id = id })\r\n                .SingleOrDefault()", span="162-163"];
m6_74 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="JobClientSteps.cs", label="throw new ArgumentNullException(''id'');", span="157-157"];
m6_75 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="JobClientSteps.cs", label="string sql = \r\n                @''select InvocationData, StateName, Arguments from HangFire.Job where id = @id''", span="159-160"];
m6_77 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="JobClientSteps.cs", label="jobData == null", span="165-165"];
m6_79 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="JobClientSteps.cs", label="var invocationData = JobHelper.FromJson<InvocationData>(jobData.InvocationData)", span="168-168"];
m6_80 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="JobClientSteps.cs", label="invocationData.Arguments = jobData.Arguments", span="169-169"];
m6_86 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="JobClientSteps.cs", label="return new JobData\r\n            {\r\n                Job = job,\r\n                State = jobData.StateName,\r\n                LoadException = loadException\r\n            };", span="183-188"];
m6_73 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="JobClientSteps.cs", label="id == null", span="157-157"];
m6_78 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="JobClientSteps.cs", label="return null;", span="165-165"];
m6_83 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="JobClientSteps.cs", label="job = invocationData.Deserialize()", span="176-176"];
m6_81 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="JobClientSteps.cs", label="Job job = null", span="171-171"];
m6_85 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="JobClientSteps.cs", label="loadException = ex", span="180-180"];
m6_82 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="JobClientSteps.cs", label="JobLoadException loadException = null", span="172-172"];
m6_84 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="JobClientSteps.cs", label=JobLoadException, span="178-178"];
m6_87 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="JobClientSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="155-155"];
m6_118 [cluster="System.ArgumentException.ArgumentException(string)", file="JobClientSteps.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m6_13 [cluster="lambda expression", file="JobClientSteps.cs", label="Exit lambda expression", span="28-28"];
m6_14 [cluster="DashboardPage.cstr", file="JobClientSteps.cs", label="Entry DashboardPage.cstr", span=""];
m6_44 [cluster="Unk.Query", file="JobClientSteps.cs", label="Entry Unk.Query", span=""];
m6_48 [cluster="Unk.ToString", file="JobClientSteps.cs", label="Entry Unk.ToString", span=""];
m6_20 [cluster="SqlServerDistributedLock.cstr", file="JobClientSteps.cs", label="Entry SqlServerDistributedLock.cstr", span=""];
m6_42 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="JobClientSteps.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m6_10 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="JobClientSteps.cs", label="_connection.Dispose()", span="46-46"];
m6_68 [cluster="System.DateTime.Add(System.TimeSpan)", file="JobClientSteps.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m6_22 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="JobClientSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="61-61"];
m6_32 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="JobClientSteps.cs", label="idAndQueue = _connection.Query(\r\n                    String.Format(fetchJobSqlTemplate, fetchConditions[currentQueryIndex]),\r\n                    new { queues = queues, timeout = _options.JobInvisibilityTimeOut.Negate().TotalSeconds })\r\n                    .SingleOrDefault()", span="84-87"];
m6_35 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="JobClientSteps.cs", label="cancellationToken.WaitHandle.WaitOne(_options.QueuePollInterval)", span="93-93"];
m6_24 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="JobClientSteps.cs", label="throw new ArgumentNullException(''queues'');", span="63-63"];
m6_31 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="JobClientSteps.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="82-82"];
m6_28 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="JobClientSteps.cs", label="string fetchJobSqlTemplate = @''\r\nset transaction isolation level read committed\r\nupdate top (1) HangFire.JobQueue set FetchedAt = GETUTCDATE()\r\noutput INSERTED.JobId, INSERTED.Queue\r\nwhere FetchedAt {0}\r\nand Queue in @queues''", span="68-73"];
m6_29 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="JobClientSteps.cs", label="var fetchConditions = new[] { ''is null'', ''< DATEADD(second, @timeout, GETUTCDATE())'' }", span="77-77"];
m6_30 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="JobClientSteps.cs", label="var currentQueryIndex = 0", span="78-78"];
m6_33 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="JobClientSteps.cs", label="idAndQueue == null", span="89-89"];
m6_38 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="JobClientSteps.cs", label="idAndQueue == null", span="99-99"];
m6_39 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="JobClientSteps.cs", label="return new ProcessingJob(\r\n                idAndQueue.JobId.ToString(CultureInfo.InvariantCulture),\r\n                idAndQueue.Queue);", span="101-103"];
m6_34 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="JobClientSteps.cs", label="currentQueryIndex == fetchConditions.Length - 1", span="91-91"];
m6_36 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="JobClientSteps.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="94-94"];
m6_23 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="JobClientSteps.cs", label="queues == null", span="63-63"];
m6_25 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="JobClientSteps.cs", label="queues.Length == 0", span="64-64"];
m6_27 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="JobClientSteps.cs", label="dynamic idAndQueue", span="66-66"];
m6_37 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="JobClientSteps.cs", label="currentQueryIndex = (currentQueryIndex + 1) % fetchConditions.Length", span="98-98"];
m6_26 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="JobClientSteps.cs", label="throw new ArgumentException(''Queue array must be non-empty.'', ''queues'');", span="64-64"];
m6_40 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="JobClientSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="61-61"];
m6_138 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="JobClientSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="277-277"];
m6_141 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="JobClientSteps.cs", label="return _connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) });", span="284-286"];
m6_139 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="JobClientSteps.cs", label="timeOut.Duration() != timeOut", span="279-279"];
m6_140 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="JobClientSteps.cs", label="throw new ArgumentException(''The `timeOut` value must be positive.'', ''timeOut'');", span="281-281"];
m6_142 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="JobClientSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="277-277"];
m6_12 [cluster="lambda expression", file="JobClientSteps.cs", label="new DashboardPage()", span="28-28"];
m6_143 [cluster="System.TimeSpan.Duration()", file="JobClientSteps.cs", label="Entry System.TimeSpan.Duration()", span="0-0"];
m6_11 [cluster="lambda expression", file="JobClientSteps.cs", label="Entry lambda expression", span="28-28"];
m6_104 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="JobClientSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="216-216"];
m6_109 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="JobClientSteps.cs", label="_connection.Execute(''delete from HangFire.JobQueue where JobId = @id and Queue = @queueName'',\r\n                new { id = id, queueName = queue })", span="221-222"];
m6_106 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="JobClientSteps.cs", label="throw new ArgumentNullException(''id'');", span="218-218"];
m6_108 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="JobClientSteps.cs", label="throw new ArgumentNullException(''queue'');", span="219-219"];
m6_107 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="JobClientSteps.cs", label="queue == null", span="219-219"];
m6_105 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="JobClientSteps.cs", label="id == null", span="218-218"];
m6_110 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="JobClientSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="216-216"];
m6_90 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="JobClientSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="191-191"];
m6_91 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", color=green, community=0, file="JobClientSteps.cs", label="id == null", prediction=28, span="193-193"];
m6_92 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", color=green, community=0, file="JobClientSteps.cs", label="throw new ArgumentNullException(''id'');", prediction=29, span="193-193"];
m6_93 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="JobClientSteps.cs", label="name == null", span="194-194"];
m6_95 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", color=green, community=0, file="JobClientSteps.cs", label="_connection.Execute(\r\n                @''merge HangFire.JobParameter as Target ''\r\n                + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                + @''when matched then update set Value = Source.Value ''\r\n                + @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                new { jobId = id, name, value })", prediction=30, span="196-202"];
m6_94 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="JobClientSteps.cs", label="throw new ArgumentNullException(''name'');", span="194-194"];
m6_96 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="JobClientSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="191-191"];
m6_111 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="JobClientSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="225-225"];
m6_114 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", color=green, community=0, file="JobClientSteps.cs", label="toScore < fromScore", prediction=31, span="228-228"];
m6_112 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="JobClientSteps.cs", label="key == null", span="227-227"];
m6_115 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", color=green, community=0, file="JobClientSteps.cs", label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", prediction=32, span="228-228"];
m6_116 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="JobClientSteps.cs", label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="230-233"];
m6_113 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="JobClientSteps.cs", label="throw new ArgumentNullException(''key'');", span="227-227"];
m6_117 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="JobClientSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="225-225"];
m6_67 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="JobClientSteps.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m6_18 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="JobClientSteps.cs", label="return new SqlServerDistributedLock(\r\n                String.Format(''HangFire:Job:{0}'', jobId), \r\n                _connection);", span="56-58"];
m6_19 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="JobClientSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="54-54"];
m6_70 [cluster="Unk.Single", file="JobClientSteps.cs", label="Entry Unk.Single", span=""];
m6_41 [cluster="System.ArgumentException.ArgumentException(string, string)", file="JobClientSteps.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m6_46 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="JobClientSteps.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m6_128 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="JobClientSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="259-259"];
m6_131 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="JobClientSteps.cs", label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="263-265"];
m6_130 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="JobClientSteps.cs", label="throw new ArgumentNullException(''serverId'');", span="261-261"];
m6_129 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="JobClientSteps.cs", label="serverId == null", span="261-261"];
m6_132 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="JobClientSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="259-259"];
m6_71 [cluster="Unk.Execute", file="JobClientSteps.cs", label="Entry Unk.Execute", span=""];
m6_89 [cluster="HangFire.Storage.JobData.JobData()", file="JobClientSteps.cs", label="Entry HangFire.Storage.JobData.JobData()", span="20-20"];
m6_88 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="JobClientSteps.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m6_133 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="JobClientSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="268-268"];
m6_136 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="JobClientSteps.cs", label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="272-274"];
m6_135 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="JobClientSteps.cs", label="throw new ArgumentNullException(''serverId'');", span="270-270"];
m6_134 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="JobClientSteps.cs", label="serverId == null", span="270-270"];
m6_137 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="JobClientSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="268-268"];
m6_45 [cluster="Unk.SingleOrDefault", file="JobClientSteps.cs", label="Entry Unk.SingleOrDefault", span=""];
m6_66 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="JobClientSteps.cs", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
m6_144 [file="JobClientSteps.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m7_25 [cluster="Unk.OnScenarioStart", file="JobFetcher.feature.cs", label="Entry Unk.OnScenarioStart", span=""];
m7_29 [cluster="Unk.CollectScenarioErrors", file="JobFetcher.feature.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m7_21 [cluster="Unk.OnScenarioEnd", file="JobFetcher.feature.cs", label="Entry Unk.OnScenarioEnd", span=""];
m7_55 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="119-119"];
m7_56 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher returns null when it tries to dequeue a job from an empty queue'', ((string[])(null)))", span="121-121"];
m7_57 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="123-123"];
m7_58 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="testRunner.Given(''an empty queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="125-125"];
m7_59 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="127-127"];
m7_60 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="129-129"];
m7_61 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="testRunner.Then(''the fetcher does not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="131-131"];
m7_62 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="133-133"];
m7_63 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="119-119"];
m7_0 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m7_1 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
m7_3 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
m7_4 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m7_76 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", span="167-167"];
m7_77 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher listens only specified queue'', ((string[])(null)))", span="169-169"];
m7_78 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="171-171"];
m7_79 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="testRunner.Given(''a job in the \'another\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="173-173"];
m7_80 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="testRunner.And(''the fetcher listening the \'default\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="175-175"];
m7_81 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="177-177"];
m7_82 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="testRunner.Then(''the fetcher does not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="179-179"];
m7_83 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="181-181"];
m7_84 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", span="167-167"];
m7_41 [cluster="Unk.And", file="JobFetcher.feature.cs", label="Entry Unk.And", span=""];
m7_54 [cluster="Unk.But", file="JobFetcher.feature.cs", label="Entry Unk.But", span=""];
m7_5 [cluster="Unk.GetTestRunner", file="JobFetcher.feature.cs", label="Entry Unk.GetTestRunner", span=""];
m7_9 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", span="39-39"];
m7_10 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="JobFetcher.feature.cs", label="testRunner.OnFeatureEnd()", span="41-41"];
m7_11 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="JobFetcher.feature.cs", label="testRunner = null", span="42-42"];
m7_12 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", span="39-39"];
m7_22 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m7_23 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobFetcher.feature.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m7_24 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m7_85 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", span="188-188"];
m7_86 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher sets the \'fetched\' flag when it dequeues a job'', ((string[])(null)))", span="190-190"];
m7_87 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="192-192"];
m7_88 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="194-194"];
m7_89 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="196-196"];
m7_90 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="198-198"];
m7_91 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.Then(''the job has the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="200-200"];
m7_92 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="202-202"];
m7_93 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", span="188-188"];
m7_13 [cluster="Unk.OnFeatureEnd", file="JobFetcher.feature.cs", label="Entry Unk.OnFeatureEnd", span=""];
m7_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="JobFetcher.feature.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m7_64 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", span="140-140"];
m7_65 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher dequeues jobs in the FIFO order'', ((string[])(null)))", span="142-142"];
m7_66 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="144-144"];
m7_67 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.Given(''the \'first\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="146-146"];
m7_68 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.And(''the \'second\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="148-148"];
m7_69 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="150-150"];
m7_70 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job for the first time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="152-152"];
m7_71 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.Then(''the fetcher returns the \'first\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="154-154"];
m7_72 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job for the second time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="156-156"];
m7_73 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.Then(''the fetcher returns the \'second\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="158-158"];
m7_74 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="160-160"];
m7_75 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", span="140-140"];
m7_42 [cluster="Unk.When", file="JobFetcher.feature.cs", label="Entry Unk.When", span=""];
m7_14 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", span="46-46"];
m7_15 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''JobFetcher''))", span="48-49"];
m7_16 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs", label="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(null)", span="51-51"];
m7_17 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", span="46-46"];
m7_39 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="JobFetcher.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m7_43 [cluster="Unk.Then", file="JobFetcher.feature.cs", label="Entry Unk.Then", span=""];
m7_40 [cluster="Unk.Given", file="JobFetcher.feature.cs", label="Entry Unk.Given", span=""];
m7_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="JobFetcher.feature.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m7_26 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66"];
m7_27 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="JobFetcher.feature.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m7_28 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66"];
m7_44 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="96-96"];
m7_45 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher removes the dequeued job from the queue and adds it to the dequeued list'', ((string[])(null)))", span="98-98"];
m7_46 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="100-100"];
m7_47 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="102-102"];
m7_48 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="104-104"];
m7_49 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="106-106"];
m7_50 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="testRunner.Then(''the queue does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="108-108"];
m7_51 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="testRunner.But(''the dequeued jobs list contains it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="110-110"];
m7_52 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="112-112"];
m7_53 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="96-96"];
m7_8 [cluster="Unk.OnFeatureStart", file="JobFetcher.feature.cs", label="Entry Unk.OnFeatureStart", span=""];
m7_30 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", span="75-75"];
m7_31 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher returns the job payload when it dequeues a job'', ((string[])(null)))", span="77-77"];
m7_32 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="79-79"];
m7_33 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81"];
m7_34 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83"];
m7_35 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85"];
m7_36 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.Then(''the fetcher returns the payload'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="87-87"];
m7_37 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="89-89"];
m7_38 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", span="75-75"];
m7_18 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", span="56-56"];
m7_19 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="JobFetcher.feature.cs", label="testRunner.OnScenarioEnd()", span="58-58"];
m7_20 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", span="56-56"];
m7_94 [file="JobFetcher.feature.cs", label="HangFire.Tests.Server.JobFetcherFeature", span=""];
m8_11 [cluster="HangFire.Tests.Server.JobManagerFeature.FeatureTearDown()", file="JobManager.feature.cs", label="testRunner = null", span="42-42"];
m8_12 [cluster="HangFire.Tests.Server.JobManagerFeature.FeatureTearDown()", file="JobManager.feature.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.FeatureTearDown()", span="39-39"];
m8_13 [cluster="Unk.OnFeatureEnd", file="JobManager.feature.cs", label="Entry Unk.OnFeatureEnd", span=""];
m8_4 [cluster="HangFire.Tests.Server.JobManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobManager.feature.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m8_25 [cluster="Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RequestDispatcherContext)", file="JobManager.feature.cs", label="var owinContext = new OwinContext(context.OwinEnvironment)", span="89-89"];
m8_29 [cluster="Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RequestDispatcherContext)", file="JobManager.feature.cs", label="AppPath = context.AppPath", span="94-94"];
m8_61 [cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="JobManager.feature.cs", label="Entry HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", span="137-137"];
m8_62 [cluster="Hangfire.Dashboard.RazorPage.TransformText(string)", color=green, community=0, file="JobManager.feature.cs", label="_body = body", prediction=33, span="126-126"];
m8_63 [cluster="Hangfire.Dashboard.RazorPage.TransformText(string)", file="JobManager.feature.cs", label="Execute()", span="128-128"];
m8_64 [cluster="Hangfire.Dashboard.RazorPage.TransformText(string)", file="JobManager.feature.cs", label="Layout != null", span="130-130"];
m8_65 [cluster="Hangfire.Dashboard.RazorPage.TransformText(string)", file="JobManager.feature.cs", label="Layout.Assign(this)", span="132-132"];
m8_66 [cluster="Hangfire.Dashboard.RazorPage.TransformText(string)", file="JobManager.feature.cs", label="return Layout.TransformText(_content.ToString());", span="133-133"];
m8_67 [cluster="Hangfire.Dashboard.RazorPage.TransformText(string)", file="JobManager.feature.cs", label="return _content.ToString();", span="136-136"];
m8_68 [cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="JobManager.feature.cs", label="this.ScenarioCleanup()", span="152-152"];
m8_69 [cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="JobManager.feature.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", span="137-137"];
m8_21 [cluster="Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RazorPage)", file="JobManager.feature.cs", label="GenerationTime = parentPage.GenerationTime", span="83-83"];
m8_48 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="JobManager.feature.cs", label="testRunner.And(''the job should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="106-106"];
m8_56 [cluster="HangFire.Tests.Server.JobManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="JobManager.feature.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="123-123"];
m8_41 [cluster="Unk.Then", file="JobManager.feature.cs", label="Entry Unk.Then", span=""];
m8_40 [cluster="Unk.When", file="JobManager.feature.cs", label="Entry Unk.When", span=""];
m8_51 [cluster="Hangfire.Dashboard.RazorPage.Write(object)", file="JobManager.feature.cs", label="return;", span="114-114"];
m8_70 [cluster="Hangfire.Dashboard.RazorPage.Encode(string)", color=green, community=0, file="JobManager.feature.cs", label="return string.IsNullOrEmpty(text)\r\n                       ? string.Empty\r\n                       : WebUtility.HtmlEncode(text);", prediction=34, span="141-143"];
m8_9 [cluster="Hangfire.Dashboard.RazorPage.Query(string)", file="JobManager.feature.cs", label="return Request.Query[key];", span="67-67"];
m8_10 [cluster="Hangfire.Dashboard.RazorPage.Query(string)", file="JobManager.feature.cs", label="Exit Hangfire.Dashboard.RazorPage.Query(string)", span="65-65"];
m8_5 [cluster="Hangfire.Dashboard.HtmlHelper.HtmlHelper(Hangfire.Dashboard.RazorPage)", file="JobManager.feature.cs", label="Entry Hangfire.Dashboard.HtmlHelper.HtmlHelper(Hangfire.Dashboard.RazorPage)", span="35-35"];
m8_81 [cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="JobManager.feature.cs", label="Entry HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", span="184-184"];
m8_82 [cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="JobManager.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Disposable job should be disposed after processing'', ((string[])(null)))", span="186-186"];
m8_83 [cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="JobManager.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="188-188"];
m8_84 [cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="JobManager.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="190-190"];
m8_85 [cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="JobManager.feature.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="192-192"];
m8_86 [cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="JobManager.feature.cs", label="testRunner.Then(''the job should be disposed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="194-194"];
m8_87 [cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="JobManager.feature.cs", label="this.ScenarioCleanup()", span="196-196"];
m8_88 [cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="JobManager.feature.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", span="184-184"];
m8_34 [cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="JobManager.feature.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="83-83"];
m8_35 [cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="JobManager.feature.cs", label="testRunner.Then(''the job should be performed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="85-85"];
m8_42 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="JobManager.feature.cs", label="Entry HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", span="94-94"];
m8_45 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="JobManager.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="100-100"];
m8_43 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="JobManager.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Successfully performed job should have the Succeeded state'', ((string[])(null)))", span="96-96"];
m8_44 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="JobManager.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="98-98"];
m8_46 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="JobManager.feature.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="102-102"];
m8_52 [cluster="Hangfire.Dashboard.RazorPage.Write(object)", file="JobManager.feature.cs", label="var html = value as NonEscapedString", span="115-115"];
m8_53 [cluster="Hangfire.Dashboard.RazorPage.Write(object)", file="JobManager.feature.cs", label="WriteLiteral(html != null ? html.ToString() : Encode(value.ToString()))", span="116-116"];
m8_54 [cluster="Hangfire.Dashboard.RazorPage.Write(object)", file="JobManager.feature.cs", label="Exit Hangfire.Dashboard.RazorPage.Write(object)", span="111-111"];
m8_55 [cluster="Hangfire.Dashboard.NonEscapedString.ToString()", file="JobManager.feature.cs", label="Entry Hangfire.Dashboard.NonEscapedString.ToString()", span="27-27"];
m8_57 [cluster="Hangfire.Dashboard.RazorPage.Encode(string)", file="JobManager.feature.cs", label="Entry Hangfire.Dashboard.RazorPage.Encode(string)", span="139-139"];
m8_58 [cluster="Hangfire.Dashboard.RazorPage.RenderBody()", file="JobManager.feature.cs", label="Entry Hangfire.Dashboard.RazorPage.RenderBody()", span="119-119"];
m8_59 [cluster="Hangfire.Dashboard.RazorPage.RenderBody()", file="JobManager.feature.cs", label="return new NonEscapedString(_body);", span="121-121"];
m8_60 [cluster="Hangfire.Dashboard.RazorPage.RenderBody()", file="JobManager.feature.cs", label="Exit Hangfire.Dashboard.RazorPage.RenderBody()", span="119-119"];
m8_8 [cluster="Unk.OnFeatureStart", file="JobManager.feature.cs", label="Entry Unk.OnFeatureStart", span=""];
m8_0 [cluster="Hangfire.Dashboard.RazorPage.RazorPage()", file="JobManager.feature.cs", label="Entry Hangfire.Dashboard.RazorPage.RazorPage()", span="32-32"];
m8_1 [cluster="Hangfire.Dashboard.RazorPage.RazorPage()", file="JobManager.feature.cs", label="GenerationTime = Stopwatch.StartNew()", span="34-34"];
m8_3 [cluster="Hangfire.Dashboard.RazorPage.RazorPage()", file="JobManager.feature.cs", label="Exit Hangfire.Dashboard.RazorPage.RazorPage()", span="32-32"];
m8_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="JobManager.feature.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m8_47 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="JobManager.feature.cs", label="testRunner.Then(''its state should be Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="104-104"];
m8_36 [cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="JobManager.feature.cs", label="this.ScenarioCleanup()", span="87-87"];
m8_37 [cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", color=green, community=0, file="JobManager.feature.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", prediction=35, span="75-75"];
m8_38 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="JobManager.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m8_39 [cluster="Unk.Given", file="JobManager.feature.cs", label="Entry Unk.Given", span=""];
m8_18 [cluster="Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RazorPage)", file="JobManager.feature.cs", label="Storage = parentPage.Storage", span="79-79"];
m8_19 [cluster="Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RazorPage)", color=green, community=0, file="JobManager.feature.cs", label="AppPath = parentPage.AppPath", prediction=36, span="80-80"];
m8_20 [cluster="Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RazorPage)", file="JobManager.feature.cs", label="Url = parentPage.Url", span="81-81"];
m8_22 [cluster="Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RazorPage)", color=green, community=0, file="JobManager.feature.cs", label="_statisticsLazy = parentPage._statisticsLazy", prediction=37, span="84-84"];
m8_23 [cluster="Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RazorPage)", file="JobManager.feature.cs", label="Exit Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RazorPage)", span="75-75"];
m8_24 [cluster="Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RequestDispatcherContext)", file="JobManager.feature.cs", label="Entry Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RequestDispatcherContext)", span="87-87"];
m8_30 [cluster="Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RequestDispatcherContext)", file="JobManager.feature.cs", label="Url = new UrlHelper(context.OwinEnvironment)", span="95-95"];
m8_31 [cluster="Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RequestDispatcherContext)", color=green, community=0, file="JobManager.feature.cs", label="_statisticsLazy = new Lazy<StatisticsDto>(() =>\r\n            {\r\n                var monitoring = Storage.GetMonitoringApi();\r\n                return monitoring.GetStatistics();\r\n            })", prediction=38, span="97-101"];
m8_32 [cluster="Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RequestDispatcherContext)", file="JobManager.feature.cs", label="Exit Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RequestDispatcherContext)", span="87-87"];
m8_33 [cluster="OwinContext.cstr", file="JobManager.feature.cs", label="Entry OwinContext.cstr", span=""];
m8_14 [cluster="Hangfire.Dashboard.RazorPage.TransformText(string)", file="JobManager.feature.cs", label="Entry Hangfire.Dashboard.RazorPage.TransformText(string)", span="124-124"];
m8_15 [cluster="Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RazorPage)", file="JobManager.feature.cs", label="Entry Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RazorPage)", span="75-75"];
m8_16 [cluster="Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RazorPage)", file="JobManager.feature.cs", label="Request = parentPage.Request", span="77-77"];
m8_17 [cluster="Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RazorPage)", color=green, community=0, file="JobManager.feature.cs", label="Response = parentPage.Response", prediction=39, span="78-78"];
m8_49 [cluster="Hangfire.Dashboard.RazorPage.Write(object)", file="JobManager.feature.cs", label="Entry Hangfire.Dashboard.RazorPage.Write(object)", span="111-111"];
m8_50 [cluster="Hangfire.Dashboard.RazorPage.Write(object)", file="JobManager.feature.cs", label="value == null", span="113-113"];
m8_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="JobManager.feature.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m8_26 [cluster="Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RequestDispatcherContext)", file="JobManager.feature.cs", label="Request = owinContext.Request", span="91-91"];
m8_27 [cluster="Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RequestDispatcherContext)", file="JobManager.feature.cs", label="Response = owinContext.Response", span="92-92"];
m8_28 [cluster="Hangfire.Dashboard.RazorPage.Assign(Hangfire.Dashboard.RequestDispatcherContext)", file="JobManager.feature.cs", label="Storage = context.JobStorage", span="93-93"];
m8_71 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="JobManager.feature.cs", label="Entry HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", span="160-160"];
m8_72 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="JobManager.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Worker should processes only jobs in the Enqueued state, but it should remove the'' +\r\n                    '' job from the dequeued list anyway'', ((string[])(null)))", span="162-163"];
m8_73 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="JobManager.feature.cs", label="Hangfire.Dashboard.RazorPage", span=""];
m8_74 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="JobManager.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="167-167"];
m8_75 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="JobManager.feature.cs", label="testRunner.And(''its state is Processing'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="169-169"];
m8_76 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="JobManager.feature.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="171-171"];
m8_77 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="JobManager.feature.cs", label="testRunner.Then(''the job should not be performed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="173-173"];
m8_78 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="JobManager.feature.cs", label="testRunner.But(''it should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="175-175"];
m8_79 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="JobManager.feature.cs", label="this.ScenarioCleanup()", span="177-177"];
m8_80 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="JobManager.feature.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", span="160-160"];
m8_89 [file="JobManager.feature.cs", label="HangFire.Tests.Server.JobManagerFeature", span=""];
m9_6 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", file="SchedulePoller.feature.cs", label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="33-33"];
m9_7 [cluster="HangFire.SqlServer.SqlServerStorage.UseMsmqQueues(string, params string[])", file="SchedulePoller.feature.cs", label="Entry HangFire.SqlServer.SqlServerStorage.UseMsmqQueues(string, params string[])", span="28-28"];
m9_8 [cluster="HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer()", file="SchedulePoller.feature.cs", label="Entry HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer()", span="31-31"];
m9_0 [cluster="MvcSample.HangFireConfig.Start()", file="SchedulePoller.feature.cs", label="Entry MvcSample.HangFireConfig.Start()", span="17-17"];
m9_1 [cluster="MvcSample.HangFireConfig.Start()", file="SchedulePoller.feature.cs", label="var storage = new SqlServerStorage(\r\n                @''Server=.\sqlexpress;Database=HangFire.Sample;Trusted_Connection=True;'')", span="27-28"];
m9_2 [cluster="MvcSample.HangFireConfig.Start()", file="SchedulePoller.feature.cs", label="storage.UseMsmqQueues(@''.\Private$\hangfire{0}'', ''default'', ''critical'')", span="29-29"];
m9_3 [cluster="MvcSample.HangFireConfig.Start()", file="SchedulePoller.feature.cs", label="JobStorage.Current = storage", span="31-31"];
m9_4 [cluster="MvcSample.HangFireConfig.Start()", file="SchedulePoller.feature.cs", label="_server = new AspNetBackgroundJobServer()", span="46-46"];
m9_5 [cluster="MvcSample.HangFireConfig.Start()", file="SchedulePoller.feature.cs", label="Exit MvcSample.HangFireConfig.Start()", span="17-17"];
m9_9 [cluster="MvcSample.HangFireConfig.Stop()", file="SchedulePoller.feature.cs", label="Entry MvcSample.HangFireConfig.Stop()", span="50-50"];
m9_10 [cluster="MvcSample.HangFireConfig.Stop()", file="SchedulePoller.feature.cs", label="_server.Stop()", span="52-52"];
m9_11 [cluster="MvcSample.HangFireConfig.Stop()", file="SchedulePoller.feature.cs", label="Exit MvcSample.HangFireConfig.Stop()", span="50-50"];
m9_12 [cluster="HangFire.BackgroundJobServer.Stop()", file="SchedulePoller.feature.cs", label="Entry HangFire.BackgroundJobServer.Stop()", span="71-71"];
n6 -> n9  [color=darkseagreen4, key=1, label="params string[]", style=dashed];
n6 -> n12  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
n6 -> n13  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
n10 -> n12  [color=darkseagreen4, key=1, label="params string[]", style=dashed];
m0_2 -> m0_4  [color=darkseagreen4, key=1, label=sqlServerStorage, style=dashed];
m0_6 -> m0_12  [color=darkseagreen4, key=1, label=server, style=dashed];
m0_46 -> m0_104  [color=green, key=1, label=number, style=dashed];
m0_9 -> m0_11  [color=darkseagreen4, key=1, label=command, style=dashed];
m0_9 -> m0_13  [color=darkseagreen4, key=1, label=command, style=dashed];
m0_9 -> m0_23  [color=darkseagreen4, key=1, label=command, style=dashed];
m0_9 -> m0_48  [color=darkseagreen4, key=1, label=command, style=dashed];
m0_9 -> m0_51  [color=green, key=1, label=command, style=dashed];
m0_14 -> m0_16  [color=darkseagreen4, key=1, label=workCount, style=dashed];
m0_24 -> m0_26  [color=darkseagreen4, key=1, label=workCount, style=dashed];
m0_39 -> m0_41  [color=darkseagreen4, key=1, label=workCount, style=dashed];
m0_45 -> m0_47  [color=green, key=1, label=seconds, style=dashed];
m0_52 -> m0_54  [color=green, key=1, label=workCount, style=dashed];
m0_15 -> m0_19  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_17 -> m0_86  [color=darkseagreen4, key=1, label=number, style=dashed];
m0_19 -> m0_19  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_18 -> m0_85  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_25 -> m0_28  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_28 -> m0_28  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_34 -> m0_37  [color=green, key=1, label=i, style=dashed];
m0_37 -> m0_37  [color=green, key=1, label=i, style=dashed];
m0_40 -> m0_43  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_43 -> m0_43  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_42 -> m0_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_47 -> m0_103  [color=green, key=1, label="lambda expression", style=dashed];
m0_50 -> m0_106  [color=green, key=1, label="lambda expression", style=dashed];
m0_53 -> m0_57  [color=green, key=1, label=i, style=dashed];
m0_57 -> m0_57  [color=green, key=1, label=i, style=dashed];
m0_55 -> m0_110  [color=green, key=1, label="lambda expression", style=dashed];
m0_60 -> m0_114  [color=green, key=1, label="lambda expression", style=dashed];
m0_116 -> m0_119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_126 -> m0_86  [color=darkseagreen4, key=1, label=number, style=dashed];
m0_127 -> m0_104  [color=green, key=1, label=number, style=dashed];
m0_128 -> m0_107  [color=green, key=1, label=iterations, style=dashed];
m1_111 -> m1_113  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_80 -> m1_82  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_87 -> m1_90  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_87 -> m1_92  [color=darkseagreen4, key=1, label=Table, style=dashed];
m1_88 -> m1_90  [color=darkseagreen4, key=1, label=job, style=dashed];
m1_46 -> m1_49  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_47 -> m1_49  [color=darkseagreen4, key=1, label=job, style=dashed];
m1_2 -> m1_7  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_2 -> m1_9  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_2 -> m1_11  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_2 -> m1_13  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_2 -> m1_15  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_2 -> m1_19  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_2 -> m1_21  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_2 -> m1_23  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_2 -> m1_25  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_2 -> m1_27  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_11 -> m1_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_21 -> m1_10  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServerOptions", style=dashed];
m1_21 -> m1_11  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServerOptions", style=dashed];
m1_21 -> m1_12  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServerOptions", style=dashed];
m1_21 -> m1_13  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServerOptions", style=dashed];
m1_8 -> m1_10  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m1_8 -> m1_11  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m1_8 -> m1_12  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m1_8 -> m1_13  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m1_72 -> m1_74  [color=darkseagreen4, key=1, label=timestamp, style=dashed];
m1_64 -> m1_66  [color=darkseagreen4, key=1, label=jobIds, style=dashed];
m1_115 -> m1_6  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_8  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_10  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_12  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_14  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_16  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_18  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_20  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_61  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_66  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_70  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_81  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_82  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_96  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_97  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_100  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_101  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_104  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_105  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_108  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_109  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_112  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m1_115 -> m1_113  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientSteps", style=dashed];
m5_0 -> m5_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_21 -> m5_10  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Msmq.MsmqFetchedJob", style=dashed];
m5_21 -> m5_14  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Msmq.MsmqFetchedJob", style=dashed];
m5_21 -> m5_18  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Msmq.MsmqFetchedJob", style=dashed];
m6_119 -> m6_122  [color=darkseagreen4, key=1, label="HangFire.Server.ServerContext", style=dashed];
m6_97 -> m6_100  [color=green, key=1, label=string, style=dashed];
m6_49 -> m6_52  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m6_49 -> m6_57  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m6_49 -> m6_60  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m6_56 -> m6_64  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m6_58 -> m6_63  [color=darkseagreen4, key=1, label=parameterArray, style=dashed];
m6_0 -> m6_5  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_0 -> m6_6  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorageOptions", style=dashed];
m6_0 -> m6_3  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorageOptions", style=dashed];
m6_2 -> m6_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_22 -> m6_25  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m6_22 -> m6_31  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m6_32 -> m6_38  [color=darkseagreen4, key=1, label=idAndQueue, style=dashed];
m6_32 -> m6_39  [color=darkseagreen4, key=1, label=idAndQueue, style=dashed];
m6_35 -> m6_35  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m6_31 -> m6_35  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m6_31 -> m6_31  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m6_29 -> m6_34  [color=darkseagreen4, key=1, label=fetchConditions, style=dashed];
m6_30 -> m6_34  [color=darkseagreen4, key=1, label=currentQueryIndex, style=dashed];
m6_36 -> m6_36  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m6_139 -> m6_139  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m6_104 -> m6_107  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_90 -> m6_93  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_111 -> m6_114  [color=green, key=1, label=double, style=dashed];
m6_144 -> m6_5  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_144 -> m6_6  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_144 -> m6_10  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_144 -> m6_14  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_144 -> m6_18  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_144 -> m6_35  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_144 -> m6_63  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m7_94 -> m7_32  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m7_94 -> m7_37  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m7_94 -> m7_46  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m7_94 -> m7_52  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m7_94 -> m7_57  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m7_94 -> m7_62  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m7_94 -> m7_66  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m7_94 -> m7_74  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m7_94 -> m7_78  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m7_94 -> m7_83  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m7_94 -> m7_87  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m7_94 -> m7_92  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m8_42 -> m8_45  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_49 -> m8_53  [color=darkseagreen4, key=1, label=object, style=dashed];
m8_73 -> m8_37  [color=green, key=1, label="Hangfire.Dashboard.RazorPage", style=dashed];
m8_73 -> m8_9  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.RazorPage", style=dashed];
m8_73 -> m8_12  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.RazorPage", style=dashed];
m8_73 -> m8_45  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.RazorPage", style=dashed];
m8_73 -> m8_53  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.RazorPage", style=dashed];
m8_73 -> m8_59  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.RazorPage", style=dashed];
m8_73 -> m8_63  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.RazorPage", style=dashed];
m8_73 -> m8_64  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.RazorPage", style=dashed];
m8_73 -> m8_65  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.RazorPage", style=dashed];
m8_73 -> m8_66  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.RazorPage", style=dashed];
m8_73 -> m8_67  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.RazorPage", style=dashed];
m8_89 -> m8_32  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m8_89 -> m8_36  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m8_89 -> m8_44  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m8_89 -> m8_49  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m8_89 -> m8_54  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m8_89 -> m8_59  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m8_89 -> m8_63  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m8_89 -> m8_68  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m8_89 -> m8_73  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m8_89 -> m8_79  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m8_89 -> m8_83  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m8_89 -> m8_87  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
}
