digraph  {
n175 [label="Hangfire.Core.Tests.BackgroundJobClientFacts", span=""];
n176 [label=client, span=""];
n177 [label=client, span=""];
n178 [label=client, span=""];
n179 [label=client, span=""];
n180 [label=client, span=""];
n0 [label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", span="20-20", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()"];
n1 [label="_connection = new Mock<IStorageConnection>()", span="22-22", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()"];
n2 [label="_storage = new Mock<JobStorage>()", span="23-23", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()"];
n11 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr"];
n3 [label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="24-24", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", color=red, community=0];
n12 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr"];
n4 [label="_stateMachine = new Mock<IStateMachine>()", span="26-26", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", color=red, community=0];
n13 [label="Entry Unk.Setup", span="", cluster="Unk.Setup"];
n14 [label="Entry Unk.Returns", span="", cluster="Unk.Returns"];
n20 [label="Entry lambda expression", span="24-24", cluster="lambda expression"];
n5 [label="_stateMachineFactory = new Mock<IStateMachineFactory>()", span="28-28", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()"];
n15 [label="Entry Mock<IStateMachine>.cstr", span="", cluster="Mock<IStateMachine>.cstr"];
n6 [label="_stateMachineFactory.Setup(x => x.Create(_connection.Object)).Returns(_stateMachine.Object)", span="29-29", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", color=red, community=0];
n16 [label="Entry Mock<IStateMachineFactory>.cstr", span="", cluster="Mock<IStateMachineFactory>.cstr"];
n7 [label="_process = new Mock<IJobCreationProcess>()", span="31-31", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()"];
n24 [label="Entry lambda expression", span="29-29", cluster="lambda expression"];
n8 [label="_state = new Mock<IState>()", span="32-32", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()"];
n17 [label="Entry Mock<IJobCreationProcess>.cstr", span="", cluster="Mock<IJobCreationProcess>.cstr"];
n9 [label="_job = Job.FromExpression(() => Method())", span="33-33", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()"];
n18 [label="Entry Mock<IState>.cstr", span="", cluster="Mock<IState>.cstr"];
n10 [label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", span="20-20", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()"];
n19 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="148-148", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)"];
n28 [label="Entry lambda expression", span="33-33", cluster="lambda expression"];
n21 [label="x.GetConnection()", span="24-24", cluster="lambda expression", color=red, community=0];
n22 [label="Exit lambda expression", span="24-24", cluster="lambda expression"];
n23 [label="Entry Unk.GetConnection", span="", cluster="Unk.GetConnection"];
n25 [label="x.Create(_connection.Object)", span="29-29", cluster="lambda expression", color=red, community=0];
n26 [label="Exit lambda expression", span="29-29", cluster="lambda expression"];
n27 [label="Entry Unk.Create", span="", cluster="Unk.Create"];
n29 [label="Method()", span="33-33", cluster="lambda expression"];
n30 [label="Exit lambda expression", span="33-33", cluster="lambda expression"];
n31 [label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Method()", span="200-200", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Method()"];
n32 [label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()"];
n33 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobClient(null, _stateMachineFactory.Object, _process.Object))", span="39-40", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()"];
n34 [label="Assert.Equal(''storage'', exception.ParamName)", span="42-42", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()"];
n36 [label="Entry Unk.>", span="", cluster="Unk.>"];
n38 [label="Entry lambda expression", span="40-40", cluster="lambda expression"];
n35 [label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()"];
n37 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
n39 [label="new BackgroundJobClient(null, _stateMachineFactory.Object, _process.Object)", span="40-40", cluster="lambda expression"];
n40 [label="Exit lambda expression", span="40-40", cluster="lambda expression"];
n41 [label="Entry BackgroundJobClient.cstr", span="", cluster="BackgroundJobClient.cstr"];
n42 [label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="46-46", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()"];
n43 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobClient(_storage.Object, null, _process.Object))", span="48-49", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()"];
n44 [label="Assert.Equal(''stateMachineFactory'', exception.ParamName)", span="51-51", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()"];
n46 [label="Entry lambda expression", span="49-49", cluster="lambda expression"];
n45 [label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="46-46", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()"];
n47 [label="new BackgroundJobClient(_storage.Object, null, _process.Object)", span="49-49", cluster="lambda expression"];
n48 [label="Exit lambda expression", span="49-49", cluster="lambda expression"];
n49 [label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", span="55-55", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()"];
n50 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object, null))", span="57-58", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()"];
n51 [label="Assert.Equal(''process'', exception.ParamName)", span="60-60", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()"];
n53 [label="Entry lambda expression", span="58-58", cluster="lambda expression"];
n52 [label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", span="55-55", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()"];
n54 [label="new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object, null)", span="58-58", cluster="lambda expression"];
n55 [label="Exit lambda expression", span="58-58", cluster="lambda expression"];
n56 [label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()", span="64-64", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()"];
n57 [label="JobStorage.Current = new Mock<JobStorage>().Object", span="66-66", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()"];
n58 [label="Assert.DoesNotThrow(() => new BackgroundJobClient())", span="67-67", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()"];
n59 [label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()", span="64-64", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()"];
n60 [label="Entry Unk.DoesNotThrow", span="", cluster="Unk.DoesNotThrow"];
n61 [label="Entry lambda expression", span="67-67", cluster="lambda expression"];
n62 [label="new BackgroundJobClient()", span="67-67", cluster="lambda expression"];
n63 [label="Exit lambda expression", span="67-67", cluster="lambda expression"];
n64 [label="Entry Hangfire.BackgroundJobClient.BackgroundJobClient()", span="38-38", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient()"];
n65 [label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()", span="71-71", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()"];
n66 [label="Assert.DoesNotThrow(() => new BackgroundJobClient(_storage.Object))", span="73-73", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()"];
n67 [label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()", span="71-71", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()"];
n68 [label="Entry lambda expression", span="73-73", cluster="lambda expression"];
n69 [label="new BackgroundJobClient(_storage.Object)", span="73-73", cluster="lambda expression"];
n70 [label="Exit lambda expression", span="73-73", cluster="lambda expression"];
n71 [label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", span="77-77", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()"];
n72 [label="Assert.DoesNotThrow(\r\n                () => new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object))", span="79-80", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()"];
n73 [label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", span="77-77", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()"];
n74 [label="Entry lambda expression", span="80-80", cluster="lambda expression"];
n75 [label="new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object)", span="80-80", cluster="lambda expression"];
n76 [label="Exit lambda expression", span="80-80", cluster="lambda expression"];
n77 [label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", span="84-84", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()"];
n78 [label="var client = CreateClient()", span="86-86", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()"];
n79 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => client.Create(null, _state.Object))", span="88-89", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()"];
n82 [label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateClient()", span="204-204", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateClient()"];
n84 [label="client.Create(null, _state.Object)", span="89-89", cluster="lambda expression"];
n80 [label="Assert.Equal(''job'', exception.ParamName)", span="91-91", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()"];
n83 [label="Entry lambda expression", span="89-89", cluster="lambda expression"];
n81 [label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", span="84-84", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()"];
n85 [label="Exit lambda expression", span="89-89", cluster="lambda expression"];
n86 [label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", span="95-95", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()"];
n87 [label="var client = CreateClient()", span="97-97", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()"];
n88 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => client.Create(_job, null))", span="99-100", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()"];
n92 [label="client.Create(_job, null)", span="100-100", cluster="lambda expression"];
n89 [label="Assert.Equal(''state'', exception.ParamName)", span="102-102", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()"];
n91 [label="Entry lambda expression", span="100-100", cluster="lambda expression"];
n90 [label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", span="95-95", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()"];
n93 [label="Exit lambda expression", span="100-100", cluster="lambda expression"];
n94 [label="Entry Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="80-80", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)"];
n95 [label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", span="106-106", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()"];
n96 [label="var client = CreateClient()", span="108-108", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()"];
n97 [label="client.Create(_job, _state.Object)", span="110-110", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()"];
n98 [label="_process.Verify(x => x.Run(It.IsNotNull<CreateContext>()))", span="112-112", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()"];
n99 [label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", span="106-106", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()"];
n100 [label="Entry Unk.Verify", span="", cluster="Unk.Verify"];
n101 [label="Entry lambda expression", span="112-112", cluster="lambda expression"];
n102 [label="x.Run(It.IsNotNull<CreateContext>())", span="112-112", cluster="lambda expression"];
n103 [label="Exit lambda expression", span="112-112", cluster="lambda expression"];
n104 [label="Entry Unk.Run", span="", cluster="Unk.Run"];
n105 [label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", span="116-116", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()"];
n106 [label="_process.Setup(x => x.Run(It.IsAny<CreateContext>())).Returns(''some-job'')", span="118-118", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()"];
n107 [label="var client = CreateClient()", span="119-119", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()"];
n111 [label="Entry lambda expression", span="118-118", cluster="lambda expression"];
n108 [label="var id = client.Create(_job, _state.Object)", span="121-121", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()"];
n109 [label="Assert.Equal(''some-job'', id)", span="123-123", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()"];
n110 [label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", span="116-116", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()"];
n112 [label="x.Run(It.IsAny<CreateContext>())", span="118-118", cluster="lambda expression"];
n113 [label="Exit lambda expression", span="118-118", cluster="lambda expression"];
n114 [label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", span="127-127", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()"];
n115 [label="var client = CreateClient()", span="129-129", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()"];
n116 [label="_process.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws<InvalidOperationException>()", span="130-131", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()"];
n117 [label="var exception = Assert.Throws<CreateJobFailedException>(\r\n                () => client.Create(_job, _state.Object))", span="133-134", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()"];
n126 [label="client.Create(_job, _state.Object)", span="134-134", cluster="lambda expression"];
n122 [label="Entry lambda expression", span="130-130", cluster="lambda expression"];
n118 [label="Assert.NotNull(exception.InnerException)", span="136-136", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()"];
n125 [label="Entry lambda expression", span="134-134", cluster="lambda expression"];
n119 [label="Assert.IsType<InvalidOperationException>(exception.InnerException)", span="137-137", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()"];
n121 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull"];
n120 [label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", span="127-127", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()"];
n123 [label="x.Run(It.IsAny<CreateContext>())", span="130-130", cluster="lambda expression"];
n124 [label="Exit lambda expression", span="130-130", cluster="lambda expression"];
n127 [label="Exit lambda expression", span="134-134", cluster="lambda expression"];
n128 [label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", span="141-141", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()"];
n129 [label="var client = CreateClient()", span="143-143", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()"];
n130 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => client.ChangeState(null, _state.Object, null))", span="145-146", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()"];
n134 [label="client.ChangeState(null, _state.Object, null)", span="146-146", cluster="lambda expression"];
n131 [label="Assert.Equal(''jobId'', exception.ParamName)", span="148-148", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()"];
n133 [label="Entry lambda expression", span="146-146", cluster="lambda expression"];
n132 [label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", span="141-141", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()"];
n135 [label="Exit lambda expression", span="146-146", cluster="lambda expression"];
n136 [label="Entry Unk.ChangeState", span="", cluster="Unk.ChangeState"];
n137 [label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", span="152-152", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()"];
n138 [label="var client = CreateClient()", span="154-154", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()"];
n139 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => client.ChangeState(''jobId'', null, null))", span="156-157", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()"];
n143 [label="client.ChangeState(''jobId'', null, null)", span="157-157", cluster="lambda expression"];
n140 [label="Assert.Equal(''state'', exception.ParamName)", span="159-159", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()"];
n142 [label="Entry lambda expression", span="157-157", cluster="lambda expression"];
n141 [label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", span="152-152", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()"];
n144 [label="Exit lambda expression", span="157-157", cluster="lambda expression"];
n145 [label="Entry Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="100-100", cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)"];
n146 [label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", span="163-163", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()"];
n147 [label="var client = CreateClient()", span="165-165", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()"];
n148 [label="client.ChangeState(''job-id'', _state.Object, null)", span="167-167", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()"];
n149 [label="_stateMachine.Verify(x => x.ChangeState(\r\n                ''job-id'',\r\n                _state.Object,\r\n                null))", span="169-172", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()"];
n150 [label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", span="163-163", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()"];
n151 [label="Entry lambda expression", span="169-172", cluster="lambda expression"];
n152 [label="x.ChangeState(\r\n                ''job-id'',\r\n                _state.Object,\r\n                null)", span="169-172", cluster="lambda expression"];
n153 [label="Exit lambda expression", span="169-172", cluster="lambda expression"];
n154 [label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", span="176-176", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()"];
n155 [label="var client = CreateClient()", span="178-178", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()"];
n156 [label="client.ChangeState(''job-id'', _state.Object, ''State'')", span="180-180", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()"];
n157 [label="_stateMachine.Verify(x => x.ChangeState(\r\n                ''job-id'',\r\n                _state.Object,\r\n                new[] { ''State'' }))", span="182-185", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()"];
n158 [label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", span="176-176", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()"];
n159 [label="Entry lambda expression", span="182-185", cluster="lambda expression"];
n160 [label="x.ChangeState(\r\n                ''job-id'',\r\n                _state.Object,\r\n                new[] { ''State'' })", span="182-185", cluster="lambda expression"];
n161 [label="Exit lambda expression", span="182-185", cluster="lambda expression"];
n162 [label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()", span="189-189", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()"];
n163 [label="_stateMachine.Setup(x => x.ChangeState(''job-id'', _state.Object, null))\r\n                .Returns(true)", span="191-192", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()"];
n164 [label="var client = CreateClient()", span="193-193", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()"];
n169 [label="Entry lambda expression", span="191-191", cluster="lambda expression"];
n165 [label="var result = client.ChangeState(''job-id'', _state.Object, null)", span="195-195", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()"];
n166 [label="Assert.True(result)", span="197-197", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()"];
n167 [label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()", span="189-189", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()"];
n168 [label="Entry Unk.True", span="", cluster="Unk.True"];
n170 [label="x.ChangeState(''job-id'', _state.Object, null)", span="191-191", cluster="lambda expression"];
n171 [label="Exit lambda expression", span="191-191", cluster="lambda expression"];
n172 [label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Method()", span="200-200", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Method()"];
n173 [label="return new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object, _process.Object);", span="206-206", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateClient()"];
n174 [label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateClient()", span="204-204", cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateClient()"];
m0_0 [label="Entry Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="24-24", cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="FetcherFacts.cs"];
m0_1 [label="Exit Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="24-24", cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="FetcherFacts.cs"];
m4_0 [label="Entry HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", span="27-27", cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", file="MessageQueueProcessingJob.cs"];
m4_1 [label="transaction == null", span="29-29", cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", color=green, community=0, file="MessageQueueProcessingJob.cs"];
m4_2 [label="throw new ArgumentNullException(''transaction'');", span="29-29", cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", color=green, community=0, file="MessageQueueProcessingJob.cs"];
m4_3 [label="jobId == null", span="30-30", cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", color=green, community=0, file="MessageQueueProcessingJob.cs"];
m4_4 [label="throw new ArgumentNullException(''jobId'');", span="30-30", cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", color=green, community=0, file="MessageQueueProcessingJob.cs"];
m4_5 [label="_transaction = transaction", span="32-32", cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", color=green, community=0, file="MessageQueueProcessingJob.cs"];
m4_6 [label="JobId = jobId", span="34-34", cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", color=green, community=0, file="MessageQueueProcessingJob.cs"];
m4_7 [label="Exit HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", span="27-27", cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", file="MessageQueueProcessingJob.cs"];
m4_8 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="MessageQueueProcessingJob.cs"];
m4_16 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="MessageQueueProcessingJob.cs"];
m4_17 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="MessageQueueProcessingJob.cs"];
m4_9 [label="Entry HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", span="39-39", cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", file="MessageQueueProcessingJob.cs"];
m4_10 [label=_disposed, span="41-41", cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", color=green, community=0, file="MessageQueueProcessingJob.cs"];
m4_11 [label="return;", span="41-41", cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", color=green, community=0, file="MessageQueueProcessingJob.cs"];
m4_12 [label="_disposed = true", span="43-43", cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", color=green, community=0, file="MessageQueueProcessingJob.cs"];
m4_13 [label="_transaction.Commit()", span="45-45", cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", color=green, community=0, file="MessageQueueProcessingJob.cs"];
m4_14 [label="_transaction.Dispose()", span="46-46", cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", color=green, community=0, file="MessageQueueProcessingJob.cs"];
m4_15 [label="Exit HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", span="39-39", cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", file="MessageQueueProcessingJob.cs"];
m4_18 [label="HangFire.SqlServer.MessageQueueProcessingJob", span="", file="MessageQueueProcessingJob.cs"];
m5_78 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", span="103-103", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", file="Program.cs"];
m5_13 [label="var i = 0", span="48-48", cluster="ConsoleSample.Program.Main()", file="Program.cs"];
m5_35 [label="i++", span="81-81", cluster="ConsoleSample.Program.Main()", file="Program.cs"];
m5_39 [label="i < workCount", span="90-90", cluster="ConsoleSample.Program.Main()", file="Program.cs"];
m5_38 [label="var i = 0", span="90-90", cluster="ConsoleSample.Program.Main()", file="Program.cs"];
m5_37 [label="var workCount = int.Parse(command.Substring(5))", span="89-89", cluster="ConsoleSample.Program.Main()", file="Program.cs"];
m5_36 [label="command.StartsWith(''args'', StringComparison.OrdinalIgnoreCase)", span="87-87", cluster="ConsoleSample.Program.Main()", file="Program.cs"];
m5_40 [label="BackgroundJob.Enqueue<Services>(x => x.Args(Guid.NewGuid().ToString(), 14442, DateTime.UtcNow))", span="92-92", cluster="ConsoleSample.Program.Main()", file="Program.cs"];
m5_42 [label="command.StartsWith(''in'', StringComparison.OrdinalIgnoreCase)", span="96-96", cluster="ConsoleSample.Program.Main()", file="Program.cs"];
m5_32 [label="var i = 0", span="81-81", cluster="ConsoleSample.Program.Main()", file="Program.cs"];
m5_0 [label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.MsmqJobQueueFacts()", span="12-12", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.MsmqJobQueueFacts()", file="Program.cs"];
m5_1 [label="_token = new CancellationToken()", span="14-14", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.MsmqJobQueueFacts()", file="Program.cs"];
m5_2 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.MsmqJobQueueFacts()", span="12-12", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.MsmqJobQueueFacts()", color=red, community=0, file="Program.cs"];
m5_3 [label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0", cluster="System.Threading.CancellationToken.CancellationToken()", file="Program.cs"];
m5_4 [label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", span="18-18", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", file="Program.cs"];
m5_5 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new MsmqJobQueue(null, MsmqTransactionType.Internal))", span="20-21", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", file="Program.cs", color=green, community=0];
m5_10 [label="server.Start()", span="40-40", cluster="ConsoleSample.Program.Main()", file="Program.cs"];
m5_6 [label="Assert.Equal(''pathPattern'', exception.ParamName)", span="23-23", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", file="Program.cs"];
m5_44 [label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="65-65", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", file="Program.cs"];
m5_7 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", span="18-18", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", file="Program.cs"];
m5_52 [label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", span="73-73", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", file="Program.cs"];
m5_8 [label="Entry Unk.>", span="", cluster="Unk.>", file="Program.cs"];
m5_9 [label="command.Equals(''start'', StringComparison.OrdinalIgnoreCase)", span="38-38", cluster="ConsoleSample.Program.Main()", file="Program.cs"];
m5_11 [label="new MsmqJobQueue(null, MsmqTransactionType.Internal)", span="21-21", cluster="lambda expression", file="Program.cs"];
m5_12 [label="var workCount = int.Parse(command.Substring(4))", span="47-47", cluster="ConsoleSample.Program.Main()", file="Program.cs"];
m5_21 [label="message.Formatter = new BinaryMessageFormatter()", span="42-42", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs"];
m5_22 [label="Assert.Equal(''job-id'', message.Body)", span="44-44", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs"];
m5_30 [label="Entry Unk.Begin", span="", cluster="Unk.Begin", file="Program.cs"];
m5_31 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="Program.cs"];
m5_43 [label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", span="63-63", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", file="Program.cs"];
m5_46 [label="Assert.Throws<OperationCanceledException>(\r\n                () => queue.Dequeue(new[] { ''my-queue'' }, token))", span="68-69", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", file="Program.cs"];
m5_47 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", span="63-63", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", file="Program.cs"];
m5_14 [label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", span="27-27", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs"];
m5_15 [label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="30-30", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs"];
m5_17 [label="var messageQueue = CleanMsmqQueueAttribute.GetMessageQueue(''my-queue'')", span="36-36", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs"];
m5_18 [label="var transaction = new MessageQueueTransaction()", span="37-37", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs"];
m5_16 [label="queue.Enqueue(''my-queue'', ''job-id'')", span="33-33", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs"];
m5_19 [label="transaction.Begin()", span="39-39", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs"];
m5_20 [label="var message = messageQueue.Receive(TimeSpan.FromSeconds(5), transaction)", span="41-41", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs"];
m5_23 [label="Assert.Equal(''job-id'', message.Label)", span="45-45", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs"];
m5_24 [label="transaction.Commit()", span="47-47", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs"];
m5_26 [label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.CreateQueue(Hangfire.SqlServer.Msmq.MsmqTransactionType)", span="138-138", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.CreateQueue(Hangfire.SqlServer.Msmq.MsmqTransactionType)", file="Program.cs"];
m5_25 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", span="27-27", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs"];
m5_27 [label="Entry Unk.Enqueue", span="", cluster="Unk.Enqueue", file="Program.cs"];
m5_28 [label="Entry Hangfire.Msmq.Tests.CleanMsmqQueueAttribute.GetMessageQueue(string)", span="45-45", cluster="Hangfire.Msmq.Tests.CleanMsmqQueueAttribute.GetMessageQueue(string)", file="Program.cs"];
m5_29 [label="Entry MessageQueueTransaction.cstr", span="", cluster="MessageQueueTransaction.cstr", file="Program.cs"];
m5_33 [label="Entry BinaryMessageFormatter.cstr", span="", cluster="BinaryMessageFormatter.cstr", file="Program.cs"];
m5_34 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="Program.cs"];
m5_41 [label="Entry Hangfire.Msmq.Tests.MsmqUtils.EnqueueJobId(string, string)", span="7-7", cluster="Hangfire.Msmq.Tests.MsmqUtils.EnqueueJobId(string, string)", file="Program.cs"];
m5_45 [label="var token = new CancellationToken(true)", span="66-66", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", file="Program.cs"];
m5_48 [label="Entry System.Threading.CancellationToken.CancellationToken(bool)", span="0-0", cluster="System.Threading.CancellationToken.CancellationToken(bool)", color=red, community=0, file="Program.cs"];
m5_49 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="Program.cs"];
m5_50 [label="queue.Dequeue(new[] { ''my-queue'' }, token)", span="69-69", cluster="lambda expression", file="Program.cs"];
m5_51 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="Program.cs"];
m5_53 [label="MsmqUtils.EnqueueJobId(''queue-2'', ''job-id'')", span="75-75", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", file="Program.cs"];
m5_54 [label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="76-76", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", file="Program.cs"];
m5_58 [label="Entry HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions)", span="41-41", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions)", file="Program.cs"];
m5_63 [label="Entry string.Substring(int)", span="0-0", cluster="string.Substring(int)", file="Program.cs"];
m5_64 [label="Entry int.Parse(string)", span="0-0", cluster="int.Parse(string)", file="Program.cs"];
m5_62 [label="Entry string.StartsWith(string, System.StringComparison)", span="0-0", cluster="string.StartsWith(string, System.StringComparison)", file="Program.cs"];
m5_61 [label="Entry HangFire.BackgroundJobServer.Start()", span="60-60", cluster="HangFire.BackgroundJobServer.Start()", file="Program.cs"];
m5_60 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="Program.cs"];
m5_59 [label="Entry System.Console.ReadLine()", span="0-0", cluster="System.Console.ReadLine()", file="Program.cs"];
m5_65 [label="Entry HangFire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)", span="77-77", cluster="HangFire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)", file="Program.cs"];
m5_55 [label="var fetchedJob = queue.Dequeue(new[] { ''queue-1'', ''queue-2'' }, _token)", span="78-78", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", file="Program.cs"];
m5_71 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="Program.cs"];
m5_76 [label="Console.WriteLine(''Hello, {0}!'', ''world'')", span="68-68", cluster="lambda expression", file="Program.cs"];
m5_77 [label="Exit lambda expression", span="68-68", cluster="lambda expression", file="Program.cs"];
m5_75 [label="Entry lambda expression", span="68-68", cluster="lambda expression", file="Program.cs"];
m5_74 [label="Entry ConsoleSample.Services.Random(int)", span="28-28", cluster="ConsoleSample.Services.Random(int)", file="Program.cs"];
m5_73 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="Program.cs"];
m5_72 [label="x.Random(number)", span="51-51", cluster="lambda expression", file="Program.cs"];
m5_69 [label="Exit lambda expression", span="97-97", cluster="lambda expression", file="Program.cs"];
m5_100 [label="Entry ConsoleSample.Services.EmptyCritical()", span="16-16", cluster="ConsoleSample.Services.EmptyCritical()", file="Program.cs"];
m5_82 [label="Exit lambda expression", span="117-117", cluster="lambda expression", file="Program.cs"];
m5_68 [label="MsmqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(1))", span="97-97", cluster="lambda expression", file="Program.cs"];
m5_87 [label="fetchedJob.Dispose()", span="131-131", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", file="Program.cs"];
m5_66 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="Program.cs"];
m5_79 [label="Entry lambda expression", span="83-83", cluster="lambda expression", file="Program.cs"];
m5_88 [label="var jobId = MsmqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(5))", span="134-134", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", file="Program.cs"];
m5_80 [label="x.Error()", span="83-83", cluster="lambda expression", file="Program.cs"];
m5_83 [label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", span="123-123", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", file="Program.cs"];
m5_90 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", span="123-123", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", file="Program.cs"];
m5_89 [label="Assert.Equal(''job-id'', jobId)", span="135-135", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", file="Program.cs"];
m5_92 [label="return new MsmqJobQueue(CleanMsmqQueueAttribute.PathPattern, transactionType);", span="140-140", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.CreateQueue(Hangfire.SqlServer.Msmq.MsmqTransactionType)", file="Program.cs"];
m5_81 [label="MsmqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(5))", span="117-117", cluster="lambda expression", file="Program.cs"];
m5_84 [label="MsmqUtils.EnqueueJobId(''my-queue'', ''job-id'')", span="126-126", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", file="Program.cs"];
m5_85 [label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="127-127", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", file="Program.cs"];
m5_91 [label="Entry System.IDisposable.Dispose()", span="0-0", cluster="System.IDisposable.Dispose()", file="Program.cs"];
m5_93 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.CreateQueue(Hangfire.SqlServer.Msmq.MsmqTransactionType)", span="138-138", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.CreateQueue(Hangfire.SqlServer.Msmq.MsmqTransactionType)", file="Program.cs"];
m5_94 [label="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts", span="", cluster="lambda expression", file="Program.cs"];
m5_95 [label=queue, span="", cluster="lambda expression", color=red, community=0, file="Program.cs"];
m5_96 [label=token, span="", cluster="lambda expression", file="Program.cs"];
m5_97 [label="Entry lambda expression", span="112-112", cluster="lambda expression", file="Program.cs"];
m5_101 [label="Entry lambda expression", span="116-116", cluster="lambda expression", file="Program.cs"];
m5_98 [label="x.EmptyCritical()", span="112-112", cluster="lambda expression", file="Program.cs"];
m5_99 [label="Exit lambda expression", span="112-112", cluster="lambda expression", file="Program.cs"];
m5_102 [label="x.EmptyDefault()", span="116-116", cluster="lambda expression", color=red, community=0, file="Program.cs"];
m5_103 [label="Exit lambda expression", span="116-116", cluster="lambda expression", file="Program.cs"];
m5_67 [label="Entry HangFire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", span="59-59", cluster="HangFire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", file="Program.cs"];
m5_70 [label="Entry System.Threading.Tasks.Parallel.For(int, int, System.Action<int>)", span="0-0", cluster="System.Threading.Tasks.Parallel.For(int, int, System.Action<int>)", file="Program.cs"];
m5_86 [label="var fetchedJob = queue.Dequeue(new[] { ''my-queue'' }, _token)", span="130-130", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", file="Program.cs"];
m5_56 [label="Assert.Equal(''job-id'', fetchedJob.JobId)", span="80-80", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", file="Program.cs"];
m5_57 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", span="73-73", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", file="Program.cs"];
m5_104 [label="Entry ConsoleSample.Services.EmptyDefault()", span="11-11", cluster="ConsoleSample.Services.EmptyDefault()", file="Program.cs"];
m5_105 [label=number, span="", file="Program.cs"];
m5_106 [label=number, span="", file="Program.cs"];
m6_28 [label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", span="96-96", cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", file="SqlServerConnection.cs"];
m6_38 [label="Entry Unk.Same", span="", cluster="Unk.Same", file="SqlServerConnection.cs"];
m6_48 [label="Entry Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="68-68", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="SqlServerConnection.cs"];
m6_49 [label="var storage = CreateStorage()", span="70-70", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", color=red, community=0, file="SqlServerConnection.cs"];
m6_50 [label="var api = storage.GetMonitoringApi()", span="71-71", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", color=red, community=0, file="SqlServerConnection.cs"];
m6_51 [label="Assert.NotNull(api)", span="72-72", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", color=red, community=0, file="SqlServerConnection.cs"];
m6_52 [label="Exit Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="68-68", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="SqlServerConnection.cs"];
m6_37 [label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53", cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="SqlServerConnection.cs"];
m6_67 [label="Entry Hangfire.SqlServer.SqlServerStorage.GetComponents()", span="118-118", cluster="Hangfire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerConnection.cs"];
m6_3 [label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="25-25", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerConnection.cs"];
m6_36 [label="Entry Hangfire.SqlServer.Tests.SqlServerStorageFacts.CreateStorage()", span="97-97", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.CreateStorage()", file="SqlServerConnection.cs"];
m6_75 [label="return new SqlServerStorage(\r\n                ConnectionUtils.GetConnectionString(),\r\n                _options);", span="99-101", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.CreateStorage()", color=red, community=0, file="SqlServerConnection.cs"];
m6_76 [label="Exit Hangfire.SqlServer.Tests.SqlServerStorageFacts.CreateStorage()", span="97-97", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.CreateStorage()", file="SqlServerConnection.cs"];
m6_74 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="SqlServerConnection.cs"];
m6_27 [label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37", cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerConnection.cs"];
m6_8 [label="Entry Unk.>", span="", cluster="Unk.>", file="SqlServerConnection.cs"];
m6_46 [label="Entry Hangfire.SqlServer.SqlServerStorage.GetConnection()", span="113-113", cluster="Hangfire.SqlServer.SqlServerStorage.GetConnection()", file="SqlServerConnection.cs"];
m6_47 [label="Entry Unk.False", span="", cluster="Unk.False", file="SqlServerConnection.cs"];
m6_22 [label="Entry Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_CanCreateSqlServerStorage_WithExistingConnection()", span="35-35", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_CanCreateSqlServerStorage_WithExistingConnection()", file="SqlServerConnection.cs"];
m6_23 [label="var connection = ConnectionUtils.CreateConnection()", span="37-37", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_CanCreateSqlServerStorage_WithExistingConnection()", file="SqlServerConnection.cs"];
m6_24 [label="var storage = new SqlServerStorage(connection)", span="38-38", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_CanCreateSqlServerStorage_WithExistingConnection()", color=red, community=0, file="SqlServerConnection.cs"];
m6_25 [label="Assert.NotNull(storage)", span="40-40", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_CanCreateSqlServerStorage_WithExistingConnection()", file="SqlServerConnection.cs"];
m6_26 [label="Exit Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_CanCreateSqlServerStorage_WithExistingConnection()", span="35-35", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_CanCreateSqlServerStorage_WithExistingConnection()", file="SqlServerConnection.cs"];
m6_54 [label="Entry Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsNonNullInstance()", span="76-76", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsNonNullInstance()", file="SqlServerConnection.cs"];
m6_55 [label="var storage = CreateStorage()", span="78-78", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsNonNullInstance()", color=red, community=0, file="SqlServerConnection.cs"];
m6_56 [label="var connection = (SqlServerConnection)storage.GetConnection()", span="79-79", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsNonNullInstance()", color=red, community=0, file="SqlServerConnection.cs"];
m6_57 [label="Assert.NotNull(connection)", span="81-81", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsNonNullInstance()", color=red, community=0, file="SqlServerConnection.cs"];
m6_58 [label="Assert.True(connection.OwnsConnection)", span="82-82", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsNonNullInstance()", color=red, community=0, file="SqlServerConnection.cs"];
m6_59 [label="Exit Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsNonNullInstance()", span="76-76", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsNonNullInstance()", file="SqlServerConnection.cs"];
m6_13 [label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="40-40", cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string)", file="SqlServerConnection.cs"];
m6_69 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="SqlServerConnection.cs"];
m6_29 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="SqlServerConnection.cs"];
m6_30 [label="Entry Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_InitializesDefaultJobQueueProvider_AndPassesCorrectOptions()", span="44-44", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_InitializesDefaultJobQueueProvider_AndPassesCorrectOptions()", file="SqlServerConnection.cs"];
m6_31 [label="var storage = CreateStorage()", span="46-46", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_InitializesDefaultJobQueueProvider_AndPassesCorrectOptions()", file="SqlServerConnection.cs"];
m6_32 [label="var providers = storage.QueueProviders", span="47-47", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_InitializesDefaultJobQueueProvider_AndPassesCorrectOptions()", file="SqlServerConnection.cs"];
m6_33 [label="var provider = (SqlServerJobQueueProvider)providers.GetProvider(''default'')", span="49-49", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_InitializesDefaultJobQueueProvider_AndPassesCorrectOptions()", file="SqlServerConnection.cs"];
m6_34 [label="Assert.Same(_options, provider.Options)", span="51-51", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_InitializesDefaultJobQueueProvider_AndPassesCorrectOptions()", color=red, community=0, file="SqlServerConnection.cs"];
m6_35 [label="Exit Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_InitializesDefaultJobQueueProvider_AndPassesCorrectOptions()", span="44-44", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_InitializesDefaultJobQueueProvider_AndPassesCorrectOptions()", file="SqlServerConnection.cs"];
m6_0 [label="Entry Hangfire.SqlServer.Tests.SqlServerStorageFacts.SqlServerStorageFacts()", span="11-11", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.SqlServerStorageFacts()", file="SqlServerConnection.cs"];
m6_1 [label="_options = new SqlServerStorageOptions { PrepareSchemaIfNecessary = false }", span="13-13", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.SqlServerStorageFacts()", file="SqlServerConnection.cs"];
m6_2 [label="Exit Hangfire.SqlServer.Tests.SqlServerStorageFacts.SqlServerStorageFacts()", span="11-11", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.SqlServerStorageFacts()", file="SqlServerConnection.cs"];
m6_71 [label="Entry lambda expression", span="93-93", cluster="lambda expression", file="SqlServerConnection.cs"];
m6_10 [label="Entry lambda expression", span="20-20", cluster="lambda expression", file="SqlServerConnection.cs"];
m6_11 [label="new SqlServerStorage((string)null)", span="20-20", cluster="lambda expression", file="SqlServerConnection.cs"];
m6_12 [label="Exit lambda expression", span="20-20", cluster="lambda expression", file="SqlServerConnection.cs"];
m6_18 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="SqlServerConnection.cs"];
m6_19 [label="new SqlServerStorage(''hello'', null)", span="29-29", cluster="lambda expression", file="SqlServerConnection.cs"];
m6_20 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="SqlServerConnection.cs"];
m6_72 [label="x.GetType()", span="93-93", cluster="lambda expression", color=red, community=0, file="SqlServerConnection.cs"];
m6_73 [label="Exit lambda expression", span="93-93", cluster="lambda expression", file="SqlServerConnection.cs"];
m6_70 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="SqlServerConnection.cs"];
m6_53 [label="Entry Hangfire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="108-108", cluster="Hangfire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="SqlServerConnection.cs"];
m6_68 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="SqlServerConnection.cs"];
m6_61 [label="Entry Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetComponents_ReturnsAllNeededComponents()", span="87-87", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetComponents_ReturnsAllNeededComponents()", file="SqlServerConnection.cs"];
m6_62 [label="var storage = CreateStorage()", span="89-89", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetComponents_ReturnsAllNeededComponents()", color=red, community=0, file="SqlServerConnection.cs"];
m6_63 [label="var components = storage.GetComponents()", span="91-91", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetComponents_ReturnsAllNeededComponents()", color=red, community=0, file="SqlServerConnection.cs"];
m6_64 [label="var componentTypes = components.Select(x => x.GetType()).ToArray()", span="93-93", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetComponents_ReturnsAllNeededComponents()", color=red, community=0, file="SqlServerConnection.cs"];
m6_65 [label="Assert.Contains(typeof(ExpirationManager), componentTypes)", span="94-94", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetComponents_ReturnsAllNeededComponents()", color=red, community=0, file="SqlServerConnection.cs"];
m6_66 [label="Exit Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetComponents_ReturnsAllNeededComponents()", span="87-87", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetComponents_ReturnsAllNeededComponents()", file="SqlServerConnection.cs"];
m6_39 [label="Entry Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsExistingConnection_WhenStorageUsesIt()", span="55-55", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsExistingConnection_WhenStorageUsesIt()", file="SqlServerConnection.cs"];
m6_40 [label="var connection = ConnectionUtils.CreateConnection()", span="57-57", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsExistingConnection_WhenStorageUsesIt()", file="SqlServerConnection.cs"];
m6_41 [label="var storage = new SqlServerStorage(connection)", span="58-58", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsExistingConnection_WhenStorageUsesIt()", file="SqlServerConnection.cs"];
m6_43 [label="Assert.Same(connection, storageConnection.Connection)", span="62-62", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsExistingConnection_WhenStorageUsesIt()", file="SqlServerConnection.cs"];
m6_42 [label="var storageConnection = (SqlServerConnection) storage.GetConnection()", span="60-60", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsExistingConnection_WhenStorageUsesIt()", file="SqlServerConnection.cs"];
m6_44 [label="Assert.False(storageConnection.OwnsConnection)", span="63-63", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsExistingConnection_WhenStorageUsesIt()", color=red, community=0, file="SqlServerConnection.cs"];
m6_45 [label="Exit Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsExistingConnection_WhenStorageUsesIt()", span="55-55", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsExistingConnection_WhenStorageUsesIt()", file="SqlServerConnection.cs"];
m6_4 [label="Entry Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", span="17-17", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", file="SqlServerConnection.cs"];
m6_5 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerStorage((string)null))", span="19-20", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", color=red, community=0, file="SqlServerConnection.cs"];
m6_6 [label="Assert.Equal(''nameOrConnectionString'', exception.ParamName)", span="22-22", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", file="SqlServerConnection.cs"];
m6_7 [label="Exit Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", span="17-17", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", file="SqlServerConnection.cs"];
m6_21 [label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", span="57-57", cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerConnection.cs"];
m6_77 [label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", span="26-26", cluster="Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", file="SqlServerConnection.cs"];
m6_60 [label="Entry Unk.True", span="", cluster="Unk.True", file="SqlServerConnection.cs"];
m6_14 [label="Entry Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="26-26", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="SqlServerConnection.cs"];
m6_15 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerStorage(''hello'', null))", span="28-29", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="SqlServerConnection.cs"];
m6_16 [label="Assert.Equal(''options'', exception.ParamName)", span="31-31", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="SqlServerConnection.cs"];
m6_17 [label="Exit Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="26-26", cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="SqlServerConnection.cs"];
m6_78 [label="Hangfire.SqlServer.Tests.SqlServerStorageFacts", span="", file="SqlServerConnection.cs"];
m8_13 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerStorage.cs"];
m8_20 [label="Entry HangFire.SqlServer.SqlServerStorage.GetConnection()", span="59-59", cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", file="SqlServerStorage.cs"];
m8_21 [label="var connection = CreateAndOpenConnection()", span="61-61", cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", color=green, community=0, file="SqlServerStorage.cs"];
m8_22 [label="Exit HangFire.SqlServer.SqlServerStorage.GetConnection()", span="59-59", cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", color=green, community=0, file="SqlServerStorage.cs"];
m8_23 [label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", span="35-35", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", color=green, community=0, file="SqlServerStorage.cs"];
m8_35 [label="Entry HangFire.SqlServer.SqlServerStorage.ToString()", span="76-76", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m8_36 [label="string canNotParseMessage = ''<Connection string can not be parsed>''", span="78-78", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m8_37 [label="var parts = _connectionString.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)\r\n                    .Select(x => x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries))\r\n                    .Select(x => new { Key = x[0].Trim(), Value = x[1].Trim() })\r\n                    .ToDictionary(x => x.Key, x => x.Value)", span="82-85", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m8_47 [label="return builder.Length != 0 \r\n                    ? String.Format(''SQL Server: {0}'', builder) \r\n                    : canNotParseMessage;", span="109-111", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m8_49 [label="return canNotParseMessage;", span="115-115", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m8_38 [label="var builder = new StringBuilder()", span="87-87", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m8_40 [label="parts.ContainsKey(alias)", span="91-91", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m8_41 [label="builder.AppendFormat(''{1}'', alias, parts[alias])", span="93-93", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m8_45 [label="parts.ContainsKey(alias)", span="102-102", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m8_46 [label="builder.AppendFormat(''{1}'', alias, parts[alias])", span="104-104", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m8_39 [label="new[] { ''Data Source'', ''Server'', ''Address'', ''Addr'', ''Network Address'' }", span="89-89", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m8_42 [label="builder.Length != 0", span="98-98", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m8_43 [label="builder.Append(''@'')", span="98-98", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m8_44 [label="new[] { ''Database'', ''Initial Catalog'' }", span="100-100", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m8_48 [label=Exception, span="113-113", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m8_50 [label="Exit HangFire.SqlServer.SqlServerStorage.ToString()", span="76-76", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m8_19 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection)", span="35-35", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection)", file="SqlServerStorage.cs"];
m8_57 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)", file="SqlServerStorage.cs"];
m8_53 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="SqlServerStorage.cs"];
m8_58 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="SqlServerStorage.cs"];
m8_33 [label="Entry Unk.Info", span="", cluster="Unk.Info", file="SqlServerStorage.cs"];
m8_28 [label="Entry HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", span="69-69", cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs"];
m8_29 [label="logger.Info(''Using the following options for SQL Server job storage:'')", span="71-71", cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs"];
m8_30 [label="logger.InfoFormat(''    Queue poll interval: {0}.'', _options.QueuePollInterval)", span="72-72", cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs"];
m8_31 [label="logger.InfoFormat(''    Invisibility timeout: {0}.'', _options.InvisibilityTimeout)", span="73-73", cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs"];
m8_32 [label="Exit HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", span="69-69", cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs"];
m8_54 [label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0", cluster="System.Text.StringBuilder.StringBuilder()", file="SqlServerStorage.cs"];
m8_77 [label="Entry Unk.Open", span="", cluster="Unk.Open", file="SqlServerStorage.cs"];
m8_34 [label="Entry Unk.InfoFormat", span="", cluster="Unk.InfoFormat", file="SqlServerStorage.cs"];
m8_65 [label="Entry Unk.Trim", span="", cluster="Unk.Trim", file="SqlServerStorage.cs"];
m8_76 [label="Entry SqlConnection.cstr", span="", cluster="SqlConnection.cstr", file="SqlServerStorage.cs"];
m8_56 [label="Entry Unk.AppendFormat", span="", cluster="Unk.AppendFormat", file="SqlServerStorage.cs"];
m8_16 [label="Entry HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="54-54", cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="SqlServerStorage.cs"];
m8_17 [label="return new SqlServerMonitoringApi(CreateAndOpenConnection());", span="56-56", cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="SqlServerStorage.cs"];
m8_18 [label="Exit HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="54-54", cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="SqlServerStorage.cs"];
m8_27 [label="Entry HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", span="38-38", cluster="HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", file="SqlServerStorage.cs"];
m8_25 [label="yield return new ExpirationManager(this);", span="66-66", cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerStorage.cs"];
m8_2 [label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="37-37", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m8_3 [label="connectionString == null", span="39-39", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m8_5 [label="options == null", span="40-40", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m8_7 [label="_options = options", span="42-42", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m8_8 [label="_connectionString = connectionString", span="43-43", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m8_9 [label="options.PrepareSchemaIfNecessary", span="45-45", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m8_4 [label="throw new ArgumentNullException(''connectionString'');", span="39-39", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m8_6 [label="throw new ArgumentNullException(''options'');", span="40-40", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m8_10 [label="var connection = CreateAndOpenConnection()", span="47-47", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m8_11 [label="SqlServerObjectsInstaller.Install(connection)", span="49-49", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m8_12 [label="Exit HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="37-37", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m8_51 [label="Entry string.Split(char[], System.StringSplitOptions)", span="0-0", cluster="string.Split(char[], System.StringSplitOptions)", file="SqlServerStorage.cs"];
m8_69 [label="Entry lambda expression", span="85-85", cluster="lambda expression", file="SqlServerStorage.cs"];
m8_59 [label="Entry lambda expression", span="83-83", cluster="lambda expression", file="SqlServerStorage.cs"];
m8_62 [label="Entry lambda expression", span="84-84", cluster="lambda expression", file="SqlServerStorage.cs"];
m8_66 [label="Entry lambda expression", span="85-85", cluster="lambda expression", file="SqlServerStorage.cs"];
m8_60 [label="x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries)", span="83-83", cluster="lambda expression", file="SqlServerStorage.cs"];
m8_61 [label="Exit lambda expression", span="83-83", cluster="lambda expression", file="SqlServerStorage.cs"];
m8_63 [label="new { Key = x[0].Trim(), Value = x[1].Trim() }", span="84-84", cluster="lambda expression", file="SqlServerStorage.cs"];
m8_64 [label="Exit lambda expression", span="84-84", cluster="lambda expression", file="SqlServerStorage.cs"];
m8_67 [label="x.Key", span="85-85", cluster="lambda expression", file="SqlServerStorage.cs"];
m8_68 [label="Exit lambda expression", span="85-85", cluster="lambda expression", file="SqlServerStorage.cs"];
m8_70 [label="x.Value", span="85-85", cluster="lambda expression", file="SqlServerStorage.cs"];
m8_71 [label="Exit lambda expression", span="85-85", cluster="lambda expression", file="SqlServerStorage.cs"];
m8_52 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="SqlServerStorage.cs"];
m8_24 [label="Entry HangFire.SqlServer.SqlServerStorage.GetComponents()", span="64-64", cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerStorage.cs"];
m8_26 [label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", span="34-34", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", file="SqlServerStorage.cs"];
m8_15 [label="Entry HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", span="34-34", cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="SqlServerStorage.cs"];
m8_0 [label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="32-32", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", file="SqlServerStorage.cs"];
m8_1 [label="Exit HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="32-32", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", file="SqlServerStorage.cs"];
m8_14 [label="Entry HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="119-119", cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs"];
m8_72 [label="var connection = new SqlConnection(_connectionString)", span="121-121", cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs"];
m8_73 [label="connection.Open()", span="122-122", cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs"];
m8_74 [label="return connection;", span="124-124", cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs"];
m8_75 [label="Exit HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="119-119", cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs"];
m8_55 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="SqlServerStorage.cs"];
m8_78 [label="HangFire.SqlServer.SqlServerStorage", span="", file="SqlServerStorage.cs"];
m9_19 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerStorageOptions.cs"];
m9_7 [label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="27-27", cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="SqlServerStorageOptions.cs"];
m9_20 [label="Entry HangFire.States.FailedState.Serialize()", span="40-40", cluster="HangFire.States.FailedState.Serialize()", file="SqlServerStorageOptions.cs"];
m9_21 [label="Entry HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", span="9-9", cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", file="SqlServerStorageOptions.cs"];
m9_13 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="SqlServerStorageOptions.cs"];
m9_12 [label="Entry System.Exception.Exception()", span="0-0", cluster="System.Exception.Exception()", file="SqlServerStorageOptions.cs"];
m9_8 [label="Entry HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", span="17-17", cluster="HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", file="SqlServerStorageOptions.cs"];
m9_9 [label="var state = new FailedState(new Exception())", span="19-19", cluster="HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", file="SqlServerStorageOptions.cs"];
m9_10 [label="Assert.Equal(FailedState.StateName, state.Name)", span="20-20", cluster="HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", file="SqlServerStorageOptions.cs"];
m9_11 [label="Exit HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", span="17-17", cluster="HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", file="SqlServerStorageOptions.cs"];
m9_0 [label="Entry HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", span="10-10", cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", file="SqlServerStorageOptions.cs"];
m9_1 [label="Assert.Throws<ArgumentNullException>(\r\n                () => new FailedState(null))", span="12-13", cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", file="SqlServerStorageOptions.cs"];
m9_2 [label="Exit HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", span="10-10", cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", file="SqlServerStorageOptions.cs"];
m9_4 [label="Entry lambda expression", span="13-13", cluster="lambda expression", file="SqlServerStorageOptions.cs"];
m9_5 [label="new FailedState(null)", span="13-13", cluster="lambda expression", file="SqlServerStorageOptions.cs"];
m9_6 [label="Exit lambda expression", span="13-13", cluster="lambda expression", file="SqlServerStorageOptions.cs"];
m9_18 [label="Entry System.Exception.Exception(string)", span="0-0", cluster="System.Exception.Exception(string)", file="SqlServerStorageOptions.cs"];
m9_14 [label="Entry HangFire.Core.Tests.States.FailedStateFacts.GetStateData_ReturnsCorrectData()", span="24-24", cluster="HangFire.Core.Tests.States.FailedStateFacts.GetStateData_ReturnsCorrectData()", file="SqlServerStorageOptions.cs"];
m9_15 [label="var state = new FailedState(new Exception(''Message''))", span="26-26", cluster="HangFire.Core.Tests.States.FailedStateFacts.GetStateData_ReturnsCorrectData()", file="SqlServerStorageOptions.cs"];
m9_16 [label="DictionaryAssert.ContainsFollowingItems(\r\n                new Dictionary<string, string>\r\n                {\r\n                    { ''FailedAt'', ''<UtcNow timestamp>'' },\r\n                    { ''ExceptionType'', ''System.Exception'' },\r\n                    { ''ExceptionMessage'', ''Message'' },\r\n                    { ''ExceptionDetails'', ''<Non-empty>'' }\r\n                }, \r\n                state.Serialize())", span="28-36", cluster="HangFire.Core.Tests.States.FailedStateFacts.GetStateData_ReturnsCorrectData()", file="SqlServerStorageOptions.cs"];
m9_17 [label="Exit HangFire.Core.Tests.States.FailedStateFacts.GetStateData_ReturnsCorrectData()", span="24-24", cluster="HangFire.Core.Tests.States.FailedStateFacts.GetStateData_ReturnsCorrectData()", file="SqlServerStorageOptions.cs"];
m10_4 [label="context.Environment.Remove(FormCollectionKey)", span="31-31", cluster="Hangfire.Dashboard.OwinRequestExtensions.ReadFormSafeAsync(IOwinContext)", file="SqlServerWriteOnlyTransaction.cs"];
m10_5 [label="context.Request.Body.CanSeek", span="36-36", cluster="Hangfire.Dashboard.OwinRequestExtensions.ReadFormSafeAsync(IOwinContext)", file="SqlServerWriteOnlyTransaction.cs"];
m10_6 [label="context.Request.Body.Seek(0L, SeekOrigin.Begin)", span="38-38", cluster="Hangfire.Dashboard.OwinRequestExtensions.ReadFormSafeAsync(IOwinContext)", file="SqlServerWriteOnlyTransaction.cs"];
m10_108 [label="Entry int.ToString(System.IFormatProvider)", span="0-0", cluster="int.ToString(System.IFormatProvider)", file="SqlServerWriteOnlyTransaction.cs"];
m10_41 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="SqlServerWriteOnlyTransaction.cs"];
m10_166 [label="Entry Unk.FromNullableStringTimestamp", span="", cluster="Unk.FromNullableStringTimestamp", file="SqlServerWriteOnlyTransaction.cs"];
m10_16 [label="Entry HangFire.Redis.RedisJobFetcher.RedisJobFetcher(IRedisClient, System.Collections.Generic.IEnumerable<string>, System.TimeSpan)", span="17-17", cluster="HangFire.Redis.RedisJobFetcher.RedisJobFetcher(IRedisClient, System.Collections.Generic.IEnumerable<string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_72 [label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string)", span="4-4", cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_11 [label="Entry RedisWriteOnlyTransaction.cstr", span="", cluster="RedisWriteOnlyTransaction.cstr", file="SqlServerWriteOnlyTransaction.cs"];
m10_49 [label="Entry Unk.SetRangeInHash", span="", cluster="Unk.SetRangeInHash", file="SqlServerWriteOnlyTransaction.cs"];
m10_13 [label="Entry HangFire.Redis.RedisConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", span="33-33", cluster="HangFire.Redis.RedisConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs"];
m10_14 [label="return new RedisJobFetcher(_redis, queueNames, TimeSpan.FromSeconds(1));", span="35-35", cluster="HangFire.Redis.RedisConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs"];
m10_15 [label="Exit HangFire.Redis.RedisConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", span="33-33", cluster="HangFire.Redis.RedisConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs"];
m10_22 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerWriteOnlyTransaction.cs"];
m10_0 [label="Entry HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", span="15-15", cluster="HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", file="SqlServerWriteOnlyTransaction.cs"];
m10_1 [label="_redis = redis", span="17-17", cluster="HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", file="SqlServerWriteOnlyTransaction.cs"];
m10_2 [label="Storage = storage", span="18-18", cluster="HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", file="SqlServerWriteOnlyTransaction.cs"];
m10_3 [label="Exit HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", span="15-15", cluster="HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", file="SqlServerWriteOnlyTransaction.cs"];
m10_7 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="SqlServerWriteOnlyTransaction.cs"];
m10_8 [label="Entry HangFire.Redis.RedisConnection.CreateWriteTransaction()", span="28-28", cluster="HangFire.Redis.RedisConnection.CreateWriteTransaction()", file="SqlServerWriteOnlyTransaction.cs"];
m10_70 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash", file="SqlServerWriteOnlyTransaction.cs"];
m10_165 [label="Entry Unk.FromStringTimestamp", span="", cluster="Unk.FromStringTimestamp", file="SqlServerWriteOnlyTransaction.cs"];
m10_133 [label="Entry HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", span="197-197", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_136 [label="var utcNow = DateTime.UtcNow", span="202-202", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs"];
m10_135 [label="var heartbeats = new Dictionary<string, Tuple<DateTime, DateTime?>>()", span="200-200", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_137 [label="var pipeline = _redis.CreatePipeline()", span="204-204", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_145 [label="utcNow > maxTime.Add(timeOut)", span="230-230", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_134 [label="var serverNames = _redis.GetAllItemsFromSet(RedisStorage.Prefix + ''servers'')", span="199-199", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_146 [label="RemoveServer(_redis, heartbeat.Key)", span="232-232", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_140 [label="pipeline.QueueCommand(\r\n                        x => x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat''),\r\n                        x => heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1]))))", span="210-218", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_143 [label=heartbeats, span="225-225", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_138 [label=serverNames, span="206-206", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_141 [label="pipeline.Flush()", span="221-221", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_144 [label="var maxTime = new DateTime(\r\n                    Math.Max(heartbeat.Value.Item1.Ticks, (heartbeat.Value.Item2 ?? DateTime.MinValue).Ticks))", span="227-228", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_147 [label="removedServerCount++", span="233-233", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_139 [label="var name = serverName", span="208-208", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_142 [label="var removedServerCount = 0", span="224-224", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_148 [label="return removedServerCount;", span="237-237", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_149 [label="Exit HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", span="197-197", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_77 [label="Entry Unk.SetEntryInHash", span="", cluster="Unk.SetEntryInHash", file="SqlServerWriteOnlyTransaction.cs"];
m10_103 [label="Entry Unk.AddItemToSet", span="", cluster="Unk.AddItemToSet", file="SqlServerWriteOnlyTransaction.cs"];
m10_21 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="SqlServerWriteOnlyTransaction.cs"];
m10_181 [label="Entry Unk.RemoveEntryFromHash", span="", cluster="Unk.RemoveEntryFromHash", file="SqlServerWriteOnlyTransaction.cs"];
m10_130 [label="Entry HangFire.Redis.RedisConnection.Heartbeat(string)", span="189-189", cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_131 [label="_redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                ''Heartbeat'',\r\n                JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="191-194", cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_132 [label="Exit HangFire.Redis.RedisConnection.Heartbeat(string)", span="189-189", cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_129 [label="Entry Unk.RemoveEntry", span="", cluster="Unk.RemoveEntry", file="SqlServerWriteOnlyTransaction.cs"];
m10_119 [label="transaction.QueueCommand(x => x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId)))", span="181-183", cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_116 [label="Entry HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", span="173-173", cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_117 [label="var transaction = redis.CreateTransaction()", span="175-175", cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_118 [label="transaction.QueueCommand(x => x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId))", span="177-179", cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_120 [label="transaction.Commit()", span="185-185", cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_121 [label="Exit HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", span="173-173", cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_86 [label="Entry HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, long, long)", span="134-134", cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, long, long)", file="SqlServerWriteOnlyTransaction.cs"];
m10_87 [label="return _redis.GetRangeFromSortedSetByLowestScore(\r\n                RedisStorage.Prefix + key, fromScore, toScore, 0, 1)\r\n                .FirstOrDefault();", span="136-138", cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, long, long)", file="SqlServerWriteOnlyTransaction.cs"];
m10_88 [label="Exit HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, long, long)", span="134-134", cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, long, long)", file="SqlServerWriteOnlyTransaction.cs"];
m10_9 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="SqlServerWriteOnlyTransaction.cs"];
m10_10 [label="Entry Unk.Remove", span="", cluster="Unk.Remove", file="SqlServerWriteOnlyTransaction.cs"];
m10_12 [label="Entry Unk.CreateTransaction", span="", cluster="Unk.CreateTransaction", file="SqlServerWriteOnlyTransaction.cs"];
m10_17 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerWriteOnlyTransaction.cs"];
m10_78 [label="Entry HangFire.Redis.RedisConnection.GetJobParameter(string, string)", span="122-122", cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_79 [label="return _redis.GetValueFromHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                name);", span="124-126", cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_80 [label="Exit HangFire.Redis.RedisConnection.GetJobParameter(string, string)", span="122-122", cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_53 [label="Entry Unk.ExpireEntryIn", span="", cluster="Unk.ExpireEntryIn", file="SqlServerWriteOnlyTransaction.cs"];
m10_152 [label="Entry Unk.Flush", span="", cluster="Unk.Flush", file="SqlServerWriteOnlyTransaction.cs"];
m10_39 [label="Entry System.Guid.ToString()", span="0-0", cluster="System.Guid.ToString()", file="SqlServerWriteOnlyTransaction.cs"];
m10_167 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="SqlServerWriteOnlyTransaction.cs"];
m10_54 [label="Entry HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", span="78-78", cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_55 [label="var jobData = _redis.GetAllEntriesFromHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id))", span="80-81", cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_56 [label="jobData.Count == 0", span="83-83", cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_61 [label="jobData.ContainsKey(''Type'')", span="89-89", cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_62 [label="type = jobData[''Type'']", span="91-91", cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_63 [label="jobData.ContainsKey(''Method'')", span="93-93", cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_64 [label="method = jobData[''Method'']", span="95-95", cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_65 [label="jobData.ContainsKey(''ParameterTypes'')", span="97-97", cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_66 [label="parameterTypes = jobData[''ParameterTypes'']", span="99-99", cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_68 [label="return new StateAndInvocationData\r\n            {\r\n                InvocationData = invocationData,\r\n                State = jobData.ContainsKey(''State'') ? jobData[''State''] : null,\r\n            };", span="107-111", cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_58 [label="string type = null", span="85-85", cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_59 [label="string method = null", span="86-86", cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_60 [label="string parameterTypes = null", span="87-87", cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_57 [label="return null;", span="83-83", cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_67 [label="var invocationData = new InvocationData(\r\n                type,\r\n                method,\r\n                parameterTypes)", span="102-105", cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_69 [label="Exit HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", span="78-78", cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_155 [label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0", cluster="System.DateTime.Add(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_107 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerWriteOnlyTransaction.cs"];
m10_171 [label="transaction.QueueCommand(x => x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    ''Checked''))", span="255-257", cluster="HangFire.Redis.RedisConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_85 [label="Entry HangFire.Redis.RedisConnection.RemoveFromDequeuedList(IRedisClient, string, string)", span="240-240", cluster="HangFire.Redis.RedisConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_168 [label="var transaction = redis.CreateTransaction()", span="245-245", cluster="HangFire.Redis.RedisConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_169 [label="transaction.QueueCommand(x => x.RemoveItemFromList(\r\n                    String.Format(RedisStorage.Prefix + ''queue:{0}:dequeued'', queue),\r\n                    jobId,\r\n                    -1))", span="247-250", cluster="HangFire.Redis.RedisConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_170 [label="transaction.QueueCommand(x => x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    ''Fetched''))", span="252-254", cluster="HangFire.Redis.RedisConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_172 [label="transaction.Commit()", span="259-259", cluster="HangFire.Redis.RedisConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_173 [label="Exit HangFire.Redis.RedisConnection.RemoveFromDequeuedList(IRedisClient, string, string)", span="240-240", cluster="HangFire.Redis.RedisConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_164 [label="Entry System.Tuple<T1, T2>.Tuple(T1, T2)", span="0-0", cluster="System.Tuple<T1, T2>.Tuple(T1, T2)", file="SqlServerWriteOnlyTransaction.cs"];
m10_40 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="SqlServerWriteOnlyTransaction.cs"];
m10_112 [label="Entry Unk.AddItemToList", span="", cluster="Unk.AddItemToList", file="SqlServerWriteOnlyTransaction.cs"];
m10_91 [label="Entry HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", span="141-141", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs"];
m10_92 [label="var transaction = _redis.CreateTransaction()", span="143-143", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs"];
m10_93 [label="transaction.QueueCommand(x => x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId))", span="145-146", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs"];
m10_94 [label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', workerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        }))", span="148-154", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs"];
m10_97 [label="transaction.QueueCommand(x => x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1))", span="159-161", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs"];
m10_98 [label="transaction.Commit()", span="164-164", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs"];
m10_96 [label="var queue1 = queue", span="158-158", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs"];
m10_95 [label=queues, span="156-156", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs"];
m10_99 [label="Exit HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", span="141-141", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs"];
m10_153 [label="Entry System.DateTime.DateTime(long)", span="0-0", cluster="System.DateTime.DateTime(long)", file="SqlServerWriteOnlyTransaction.cs"];
m10_113 [label="Entry HangFire.Redis.RedisConnection.RemoveServer(string)", span="168-168", cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_114 [label="RemoveServer(_redis, serverId)", span="170-170", cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_115 [label="Exit HangFire.Redis.RedisConnection.RemoveServer(string)", span="168-168", cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_24 [label="Entry HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="45-45", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_32 [label="var transaction = _redis.CreateTransaction()", span="61-61", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_31 [label="storedParameters.Add(''CreatedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="59-59", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_33 [label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    storedParameters))", span="63-65", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_34 [label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn))", span="67-69", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_35 [label="transaction.Commit()", span="72-72", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_25 [label="var jobId = Guid.NewGuid().ToString()", span="51-51", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_26 [label="var storedParameters = new Dictionary<string, string>(parameters)", span="54-54", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_30 [label="storedParameters.Add(''Arguments'', JobHelper.ToJson(arguments))", span="58-58", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_36 [label="return jobId;", span="75-75", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_27 [label="storedParameters.Add(''Type'', invocationData.Type)", span="55-55", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_28 [label="storedParameters.Add(''Method'', invocationData.Method)", span="56-56", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_29 [label="storedParameters.Add(''ParameterTypes'', invocationData.ParameterTypes)", span="57-57", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_37 [label="Exit HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="45-45", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m10_154 [label="Entry System.Math.Max(long, long)", span="0-0", cluster="System.Math.Max(long, long)", file="SqlServerWriteOnlyTransaction.cs"];
m10_125 [label="Entry Unk.RemoveItemFromSet", span="", cluster="Unk.RemoveItemFromSet", file="SqlServerWriteOnlyTransaction.cs"];
m10_122 [label="Entry lambda expression", span="177-179", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_51 [label="x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn)", span="67-69", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_47 [label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    storedParameters)", span="63-65", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_105 [label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', workerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        })", span="148-154", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_110 [label="x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1)", span="159-161", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_127 [label="x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId))", span="181-183", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_175 [label="x.RemoveItemFromList(\r\n                    String.Format(RedisStorage.Prefix + ''queue:{0}:dequeued'', queue),\r\n                    jobId,\r\n                    -1)", span="247-250", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_179 [label="x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    ''Fetched'')", span="252-254", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_183 [label="x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    ''Checked'')", span="255-257", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_162 [label="heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1])))", span="214-218", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_50 [label="Entry lambda expression", span="67-69", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_52 [label="Exit lambda expression", span="67-69", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_46 [label="Entry lambda expression", span="63-65", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_48 [label="Exit lambda expression", span="63-65", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_104 [label="Entry lambda expression", span="148-154", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_106 [label="Exit lambda expression", span="148-154", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_109 [label="Entry lambda expression", span="159-161", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_111 [label="Exit lambda expression", span="159-161", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_126 [label="Entry lambda expression", span="181-183", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_128 [label="Exit lambda expression", span="181-183", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_174 [label="Entry lambda expression", span="247-250", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_176 [label="Exit lambda expression", span="247-250", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_178 [label="Entry lambda expression", span="252-254", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_180 [label="Exit lambda expression", span="252-254", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_182 [label="Entry lambda expression", span="255-257", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_184 [label="Exit lambda expression", span="255-257", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_156 [label="Entry lambda expression", span="211-213", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_161 [label="Entry lambda expression", span="214-218", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_163 [label="Exit lambda expression", span="214-218", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_101 [label="x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId)", span="145-146", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_100 [label="Entry lambda expression", span="145-146", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_123 [label="x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId)", span="177-179", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_157 [label="x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat'')", span="211-213", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_158 [label="Exit lambda expression", span="211-213", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_102 [label="Exit lambda expression", span="145-146", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_124 [label="Exit lambda expression", span="177-179", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m10_43 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="SqlServerWriteOnlyTransaction.cs"];
m10_90 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault", file="SqlServerWriteOnlyTransaction.cs"];
m10_18 [label="Entry HangFire.Redis.RedisConnection.AcquireJobLock(string)", span="38-38", cluster="HangFire.Redis.RedisConnection.AcquireJobLock(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_19 [label="return _redis.AcquireLock(\r\n                RedisStorage.Prefix + String.Format(''job:{0}:state-lock'', jobId),\r\n                TimeSpan.FromMinutes(1));", span="40-42", cluster="HangFire.Redis.RedisConnection.AcquireJobLock(string)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs"];
m10_20 [label="Exit HangFire.Redis.RedisConnection.AcquireJobLock(string)", span="38-38", cluster="HangFire.Redis.RedisConnection.AcquireJobLock(string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_151 [label="Entry Unk.CreatePipeline", span="", cluster="Unk.CreatePipeline", file="SqlServerWriteOnlyTransaction.cs"];
m10_74 [label="Entry HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", span="114-114", cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_75 [label="_redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                name,\r\n                value)", span="116-119", cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs"];
m10_76 [label="Exit HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", span="114-114", cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m10_177 [label="Entry Unk.RemoveItemFromList", span="", cluster="Unk.RemoveItemFromList", file="SqlServerWriteOnlyTransaction.cs"];
m10_38 [label="Entry System.Guid.NewGuid()", span="0-0", cluster="System.Guid.NewGuid()", file="SqlServerWriteOnlyTransaction.cs"];
m10_81 [label="Entry Unk.GetValueFromHash", span="", cluster="Unk.GetValueFromHash", file="SqlServerWriteOnlyTransaction.cs"];
m10_45 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="SqlServerWriteOnlyTransaction.cs"];
m10_150 [label="Entry Unk.GetAllItemsFromSet", span="", cluster="Unk.GetAllItemsFromSet", file="SqlServerWriteOnlyTransaction.cs"];
m10_82 [label="Entry HangFire.Redis.RedisConnection.CompleteJob(HangFire.Server.JobPayload)", span="129-129", cluster="HangFire.Redis.RedisConnection.CompleteJob(HangFire.Server.JobPayload)", file="SqlServerWriteOnlyTransaction.cs"];
m10_83 [label="RedisConnection.RemoveFromDequeuedList(_redis, payload.Queue, payload.Id)", span="131-131", cluster="HangFire.Redis.RedisConnection.CompleteJob(HangFire.Server.JobPayload)", file="SqlServerWriteOnlyTransaction.cs"];
m10_84 [label="Exit HangFire.Redis.RedisConnection.CompleteJob(HangFire.Server.JobPayload)", span="129-129", cluster="HangFire.Redis.RedisConnection.CompleteJob(HangFire.Server.JobPayload)", file="SqlServerWriteOnlyTransaction.cs"];
m10_42 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)", file="SqlServerWriteOnlyTransaction.cs"];
m10_160 [label="Entry Unk.GetValuesFromHash", span="", cluster="Unk.GetValuesFromHash", file="SqlServerWriteOnlyTransaction.cs"];
m10_159 [label="Entry Unk.Format", span="", cluster="Unk.Format", file="SqlServerWriteOnlyTransaction.cs"];
m10_89 [label="Entry Unk.GetRangeFromSortedSetByLowestScore", span="", cluster="Unk.GetRangeFromSortedSetByLowestScore", file="SqlServerWriteOnlyTransaction.cs"];
m10_44 [label="Entry Unk.QueueCommand", span="", cluster="Unk.QueueCommand", file="SqlServerWriteOnlyTransaction.cs"];
m10_73 [label="Entry HangFire.Storage.StateAndInvocationData.StateAndInvocationData()", span="2-2", cluster="HangFire.Storage.StateAndInvocationData.StateAndInvocationData()", file="SqlServerWriteOnlyTransaction.cs"];
m10_23 [label="Entry Unk.AcquireLock", span="", cluster="Unk.AcquireLock", file="SqlServerWriteOnlyTransaction.cs"];
m10_71 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="SqlServerWriteOnlyTransaction.cs"];
m10_185 [label="HangFire.Redis.RedisConnection", span="", file="SqlServerWriteOnlyTransaction.cs"];
m10_186 [label=jobId, span="", file="SqlServerWriteOnlyTransaction.cs"];
m10_188 [label="System.TimeSpan", span="", file="SqlServerWriteOnlyTransaction.cs"];
m10_187 [label=storedParameters, span="", file="SqlServerWriteOnlyTransaction.cs"];
m10_189 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m10_190 [label=int, span="", file="SqlServerWriteOnlyTransaction.cs"];
m10_191 [label=queue1, span="", file="SqlServerWriteOnlyTransaction.cs"];
m10_192 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m10_195 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m10_196 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m10_193 [label=name, span="", file="SqlServerWriteOnlyTransaction.cs"];
m10_194 [label=heartbeats, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_25 [label="Entry Unk.OnScenarioStart", span="", cluster="Unk.OnScenarioStart", file="WorkerFacts.cs"];
m11_29 [label="Entry Unk.CollectScenarioErrors", span="", cluster="Unk.CollectScenarioErrors", file="WorkerFacts.cs"];
m11_21 [label="Entry Unk.OnScenarioEnd", span="", cluster="Unk.OnScenarioEnd", file="WorkerFacts.cs"];
m11_9 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureTearDown()", span="40-40", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureTearDown()", file="WorkerFacts.cs"];
m11_10 [label="testRunner.OnFeatureEnd()", span="42-42", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureTearDown()", file="WorkerFacts.cs"];
m11_11 [label="testRunner = null", span="43-43", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureTearDown()", file="WorkerFacts.cs"];
m11_12 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureTearDown()", span="40-40", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureTearDown()", file="WorkerFacts.cs"];
m11_65 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", span="153-153", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs"];
m11_66 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out job by the \'checked\' flag in the \'Fetched\' state should not be re-queue'' +\r\n                    ''d'', new string[] {\r\n                        ''checkpoint-2''})", span="155-157", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs"];
m11_67 [label="this.ScenarioSetup(scenarioInfo)", span="159-159", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs"];
m11_68 [label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="161-161", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs"];
m11_69 [label="testRunner.And(''it was checked a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="163-163", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs"];
m11_70 [label="testRunner.And(''it was fetched a millisecond ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="165-165", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs"];
m11_71 [label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="167-167", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs"];
m11_72 [label="testRunner.Then(''the dequeued jobs list still contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="169-169", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs"];
m11_73 [label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="171-171", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs"];
m11_74 [label="testRunner.And(''the job has the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="173-173", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs"];
m11_75 [label="testRunner.And(''the job has the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="175-175", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs"];
m11_76 [label="this.ScenarioCleanup()", span="177-177", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs"];
m11_77 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", span="153-153", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs"];
m11_53 [label="Entry Unk.And", span="", cluster="Unk.And", file="WorkerFacts.cs"];
m11_112 [label="Entry Unk.But", span="", cluster="Unk.But", file="WorkerFacts.cs"];
m11_5 [label="Entry Unk.GetTestRunner", span="", cluster="Unk.GetTestRunner", file="WorkerFacts.cs"];
m11_78 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", span="185-185", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs"];
m11_79 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out jobs in the \'Fetched\' state should be re-queued'', new string[] {\r\n                        ''checkpoint-2''})", span="187-188", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs"];
m11_80 [label="this.ScenarioSetup(scenarioInfo)", span="190-190", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs"];
m11_81 [label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="192-192", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs"];
m11_82 [label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="194-194", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs"];
m11_83 [label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="196-196", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs"];
m11_84 [label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="198-198", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs"];
m11_85 [label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="200-200", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs"];
m11_86 [label="testRunner.And(''the job does not have the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="202-202", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs"];
m11_87 [label="testRunner.And(''the job does not have the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="204-204", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs"];
m11_88 [label="this.ScenarioCleanup()", span="206-206", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs"];
m11_89 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", span="185-185", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs"];
m11_26 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", span="67-67", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", file="WorkerFacts.cs"];
m11_27 [label="testRunner.CollectScenarioErrors()", span="69-69", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", file="WorkerFacts.cs"];
m11_28 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", span="67-67", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", file="WorkerFacts.cs"];
m11_22 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="62-62", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="WorkerFacts.cs"];
m11_23 [label="testRunner.OnScenarioStart(scenarioInfo)", span="64-64", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="WorkerFacts.cs"];
m11_24 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="62-62", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="WorkerFacts.cs"];
m11_0 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="WorkerFacts.cs"];
m11_1 [label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="WorkerFacts.cs"];
m11_2 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Re-queueing of timed out jobs'', ''\r\n  As an Administrator, I want the jobs to recovered automatically \r\n  after a s'' +\r\n                    ''erver failure, which took them into the processing.'', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-35", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="WorkerFacts.cs"];
m11_3 [label="testRunner.OnFeatureStart(featureInfo)", span="36-36", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="WorkerFacts.cs"];
m11_4 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="WorkerFacts.cs"];
m11_14 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", span="47-47", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="WorkerFacts.cs"];
m11_15 [label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Re-queueing of timed out jobs''))", span="49-50", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="WorkerFacts.cs"];
m11_16 [label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(null)", span="52-52", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="WorkerFacts.cs"];
m11_17 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", span="47-47", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="WorkerFacts.cs"];
m11_90 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", span="215-215", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs"];
m11_91 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Job\'s state is changed to the Enqueued when the job is being timed out after proc'' +\r\n                    ''eeding to the Processing state'', new string[] {\r\n                        ''checkpoint-3''})", span="217-219", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs"];
m11_92 [label="this.ScenarioSetup(scenarioInfo)", span="221-221", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs"];
m11_93 [label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="223-223", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs"];
m11_94 [label="testRunner.And(''its state is Processing'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="225-225", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs"];
m11_95 [label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="227-227", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs"];
m11_96 [label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="229-229", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs"];
m11_97 [label="testRunner.Then(''the job moved to the Enqueued state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="231-231", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs"];
m11_98 [label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="233-233", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs"];
m11_99 [label="this.ScenarioCleanup()", span="235-235", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs"];
m11_100 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", span="215-215", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs"];
m11_13 [label="Entry Unk.OnFeatureEnd", span="", cluster="Unk.OnFeatureEnd", file="WorkerFacts.cs"];
m11_7 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="WorkerFacts.cs"];
m11_40 [label="Entry Unk.When", span="", cluster="Unk.When", file="WorkerFacts.cs"];
m11_122 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", span="291-291", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_123 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''When the server could not find the job\'s type, the job is moved to the Failed sta'' +\r\n                    ''te'', ((string[])(null)))", span="293-294", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_124 [label="this.ScenarioSetup(scenarioInfo)", span="296-296", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_125 [label="testRunner.Given(''a dequeued job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="298-298", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_126 [label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="300-300", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_127 [label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="302-302", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_128 [label="testRunner.Then(''the job moved to the Failed state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="304-304", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_129 [label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="306-306", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_130 [label="this.ScenarioCleanup()", span="308-308", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_131 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", span="291-291", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_101 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", span="243-243", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs"];
m11_102 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out job in the Succeeded state does not move to the Enqueued state'', new string[] {\r\n                        ''checkpoint-4''})", span="245-246", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs"];
m11_103 [label="this.ScenarioSetup(scenarioInfo)", span="248-248", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs"];
m11_104 [label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="250-250", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs"];
m11_105 [label="testRunner.And(''its state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="252-252", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs"];
m11_106 [label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="254-254", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs"];
m11_107 [label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="256-256", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs"];
m11_108 [label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="258-258", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs"];
m11_109 [label="testRunner.But(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="260-260", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs"];
m11_110 [label="this.ScenarioCleanup()", span="262-262", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs"];
m11_111 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", span="243-243", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs"];
m11_42 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", span="98-98", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs"];
m11_43 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Non-timed out job in the \'Checked\' state should not be requeued'', new string[] {\r\n                        ''checkpoint-1-2''})", span="100-101", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs"];
m11_44 [label="this.ScenarioSetup(scenarioInfo)", span="103-103", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs"];
m11_45 [label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="105-105", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs"];
m11_46 [label="testRunner.And(''it was checked a millisecond ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="107-107", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs"];
m11_47 [label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="109-109", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs"];
m11_48 [label="testRunner.Then(''the dequeued jobs list still contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="111-111", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs"];
m11_49 [label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="113-113", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs"];
m11_50 [label="testRunner.And(''the job has the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="115-115", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs"];
m11_51 [label="this.ScenarioCleanup()", span="117-117", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs"];
m11_52 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", span="98-98", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs"];
m11_54 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", span="125-125", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs"];
m11_55 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed job in the \'Checked\' state should be requeued'', new string[] {\r\n                        ''checkpoint-1-2''})", span="127-128", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs"];
m11_56 [label="this.ScenarioSetup(scenarioInfo)", span="130-130", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs"];
m11_57 [label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="132-132", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs"];
m11_58 [label="testRunner.And(''it was checked a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="134-134", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs"];
m11_59 [label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="136-136", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs"];
m11_60 [label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="138-138", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs"];
m11_61 [label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="140-140", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs"];
m11_62 [label="testRunner.And(''the job does not have the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="142-142", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs"];
m11_63 [label="this.ScenarioCleanup()", span="144-144", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs"];
m11_64 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", span="125-125", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs"];
m11_38 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="WorkerFacts.cs"];
m11_30 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", span="77-77", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerFacts.cs"];
m11_31 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''A job in the implicit \'Dequeued\' state moved to the \'Checked\' state'', new string[] {\r\n                        ''checkpoint-1-1''})", span="79-80", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerFacts.cs"];
m11_32 [label="this.ScenarioSetup(scenarioInfo)", span="82-82", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerFacts.cs"];
m11_33 [label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="84-84", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerFacts.cs"];
m11_34 [label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="86-86", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerFacts.cs"];
m11_35 [label="testRunner.Then(''it marks the job as \'checked\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="88-88", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerFacts.cs"];
m11_36 [label="this.ScenarioCleanup()", span="90-90", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerFacts.cs"];
m11_37 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", span="77-77", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerFacts.cs"];
m11_41 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="WorkerFacts.cs"];
m11_39 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="WorkerFacts.cs"];
m11_6 [label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span="", cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="WorkerFacts.cs"];
m11_18 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioTearDown()", span="57-57", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioTearDown()", file="WorkerFacts.cs"];
m11_19 [label="testRunner.OnScenarioEnd()", span="59-59", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioTearDown()", file="WorkerFacts.cs"];
m11_20 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioTearDown()", span="57-57", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioTearDown()", file="WorkerFacts.cs"];
m11_132 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", span="315-315", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_133 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Succeeded job of non-existing type will not be moved to the failed state'', ((string[])(null)))", span="317-317", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_134 [label="this.ScenarioSetup(scenarioInfo)", span="319-319", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_135 [label="testRunner.Given(''a dequeued job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="321-321", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_136 [label="testRunner.And(''its state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="323-323", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_137 [label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="325-325", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_138 [label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="327-327", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_139 [label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="329-329", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_140 [label="testRunner.But(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="331-331", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_141 [label="this.ScenarioCleanup()", span="333-333", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_142 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", span="315-315", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs"];
m11_8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", file="WorkerFacts.cs"];
m11_113 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", span="269-269", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerFacts.cs"];
m11_114 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Job is being enqueued on its actual queue after timing out'', ((string[])(null)))", span="271-271", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerFacts.cs"];
m11_115 [label="this.ScenarioSetup(scenarioInfo)", span="273-273", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerFacts.cs"];
m11_116 [label="testRunner.And(''a dequeued job from the \'test\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="275-275", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerFacts.cs"];
m11_117 [label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="277-277", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerFacts.cs"];
m11_118 [label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="279-279", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerFacts.cs"];
m11_119 [label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="281-281", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerFacts.cs"];
m11_120 [label="this.ScenarioCleanup()", span="283-283", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerFacts.cs"];
m11_121 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", span="269-269", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerFacts.cs"];
m11_143 [label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", span="", file="WorkerFacts.cs"];
m12_26 [label="Entry Unk.GetTestJob", span="", cluster="Unk.GetTestJob", file="WriteTransactionFacts.cs"];
m12_375 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="445-445", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="WriteTransactionFacts.cs"];
m12_376 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="447-458", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="WriteTransactionFacts.cs"];
m12_377 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="445-445", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="WriteTransactionFacts.cs"];
m12_248 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="153-153", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="WriteTransactionFacts.cs"];
m12_432 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="520-520", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="WriteTransactionFacts.cs"];
m12_433 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="522-533", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="WriteTransactionFacts.cs"];
m12_434 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="520-520", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="WriteTransactionFacts.cs"];
m12_0 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", span="15-15", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", file="WriteTransactionFacts.cs"];
m12_1 [label="Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerWriteOnlyTransaction(null))", span="17-18", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", color=red, community=1, file="WriteTransactionFacts.cs"];
m12_2 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", span="15-15", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", file="WriteTransactionFacts.cs"];
m12_348 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="179-179", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="WriteTransactionFacts.cs"];
m12_12 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection", file="WriteTransactionFacts.cs"];
m12_299 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="345-345", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="WriteTransactionFacts.cs"];
m12_300 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="347-358", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="WriteTransactionFacts.cs"];
m12_301 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="345-345", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="WriteTransactionFacts.cs"];
m12_82 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="WriteTransactionFacts.cs"];
m12_286 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="158-158", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="WriteTransactionFacts.cs"];
m12_179 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="132-132", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="WriteTransactionFacts.cs"];
m12_96 [label="Entry Unk.SetJobState", span="", cluster="Unk.SetJobState", file="WriteTransactionFacts.cs"];
m12_409 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="WriteTransactionFacts.cs"];
m12_235 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="264-264", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="WriteTransactionFacts.cs"];
m12_236 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(0.0, record.Score, 2);\r\n            })", span="266-275", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="WriteTransactionFacts.cs"];
m12_237 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="264-264", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="WriteTransactionFacts.cs"];
m12_34 [label="Entry Unk.ExpireJob", span="", cluster="Unk.ExpireJob", file="WriteTransactionFacts.cs"];
m12_3 [label="Entry Unk.>", span="", cluster="Unk.>", file="WriteTransactionFacts.cs"];
m12_131 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", span="139-139", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", file="WriteTransactionFacts.cs"];
m12_132 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToQueue(''default'', ''1''));\r\n\r\n                var record = sql.Query(''select * from HangFire.JobQueue'').Single();\r\n                Assert.Equal(''1'', record.JobId.ToString());\r\n                Assert.Equal(''default'', record.Queue);\r\n                Assert.Null(record.FetchedAt);\r\n            })", span="141-149", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", color=red, community=0, file="WriteTransactionFacts.cs"];
m12_133 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", span="139-139", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", file="WriteTransactionFacts.cs"];
m12_444 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="537-537", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="WriteTransactionFacts.cs"];
m12_445 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="539-550", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="WriteTransactionFacts.cs"];
m12_446 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="537-537", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="WriteTransactionFacts.cs"];
m12_473 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="WriteTransactionFacts.cs"];
m12_145 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", span="152-152", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", file="WriteTransactionFacts.cs"];
m12_146 [label="return connection\r\n                .Query(''select * from HangFire.Job where id = @id'', new { id = jobId })\r\n                .Single();", span="154-156", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", file="WriteTransactionFacts.cs"];
m12_147 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", span="152-152", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", file="WriteTransactionFacts.cs"];
m12_399 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="479-479", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="WriteTransactionFacts.cs"];
m12_400 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                });\r\n\r\n                var records = sql.Query(''select * from HangFire.List'').ToArray();\r\n\r\n                Assert.Equal(2, records.Length);\r\n                Assert.Equal(''1'', records[0].Value);\r\n                Assert.Equal(''2'', records[1].Value);\r\n            })", span="481-497", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="WriteTransactionFacts.cs"];
m12_401 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="479-479", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="WriteTransactionFacts.cs"];
m12_417 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="193-193", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="WriteTransactionFacts.cs"];
m12_22 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="WriteTransactionFacts.cs"];
m12_148 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="160-160", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="WriteTransactionFacts.cs"];
m12_149 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="162-171", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="WriteTransactionFacts.cs"];
m12_150 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="160-160", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="WriteTransactionFacts.cs"];
m12_33 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)", file="WriteTransactionFacts.cs"];
m12_97 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="106-106", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="WriteTransactionFacts.cs"];
m12_98 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="108-111", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="WriteTransactionFacts.cs"];
m12_99 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="113-135", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="WriteTransactionFacts.cs"];
m12_100 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="106-106", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="WriteTransactionFacts.cs"];
m12_206 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="227-227", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="WriteTransactionFacts.cs"];
m12_207 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime)record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="229-243", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="WriteTransactionFacts.cs"];
m12_208 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="227-227", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="WriteTransactionFacts.cs"];
m12_205 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="139-139", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="WriteTransactionFacts.cs"];
m12_222 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="146-146", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="WriteTransactionFacts.cs"];
m12_27 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="WriteTransactionFacts.cs"];
m12_24 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="WriteTransactionFacts.cs"];
m12_130 [label="Entry Unk.AddJobState", span="", cluster="Unk.AddJobState", file="WriteTransactionFacts.cs"];
m12_223 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="247-247", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="WriteTransactionFacts.cs"];
m12_224 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="249-260", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="WriteTransactionFacts.cs"];
m12_225 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="247-247", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="WriteTransactionFacts.cs"];
m12_48 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="WriteTransactionFacts.cs"];
m12_387 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="462-462", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="WriteTransactionFacts.cs"];
m12_388 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="464-475", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="WriteTransactionFacts.cs"];
m12_389 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="462-462", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="WriteTransactionFacts.cs"];
m12_81 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="WriteTransactionFacts.cs"];
m12_162 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="175-175", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="WriteTransactionFacts.cs"];
m12_163 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime) record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="177-191", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="WriteTransactionFacts.cs"];
m12_164 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="175-175", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="WriteTransactionFacts.cs"];
m12_311 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="172-172", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="WriteTransactionFacts.cs"];
m12_25 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", span="578-578", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="WriteTransactionFacts.cs"];
m12_474 [label="var transaction = new SqlServerWriteOnlyTransaction(connection)", span="582-582", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", color=red, community=0, file="WriteTransactionFacts.cs"];
m12_475 [label="action(transaction)", span="584-584", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="WriteTransactionFacts.cs"];
m12_476 [label="transaction.Commit()", span="585-585", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="WriteTransactionFacts.cs"];
m12_477 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", span="578-578", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="WriteTransactionFacts.cs"];
m12_79 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="WriteTransactionFacts.cs"];
m12_324 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="379-379", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="WriteTransactionFacts.cs"];
m12_325 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="381-392", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="WriteTransactionFacts.cs"];
m12_326 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="379-379", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="WriteTransactionFacts.cs"];
m12_29 [label="Entry Unk.Null", span="", cluster="Unk.Null", file="WriteTransactionFacts.cs"];
m12_374 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="186-186", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="WriteTransactionFacts.cs"];
m12_180 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="195-195", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="WriteTransactionFacts.cs"];
m12_181 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(2, recordCount);\r\n            })", span="197-208", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="WriteTransactionFacts.cs"];
m12_182 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="195-195", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="WriteTransactionFacts.cs"];
m12_92 [label="Entry Unk.SerializeData", span="", cluster="Unk.SerializeData", file="WriteTransactionFacts.cs"];
m12_478 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="45-45", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="WriteTransactionFacts.cs"];
m12_361 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="427-427", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="WriteTransactionFacts.cs"];
m12_362 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="429-441", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="WriteTransactionFacts.cs"];
m12_363 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="427-427", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="WriteTransactionFacts.cs"];
m12_35 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="45-45", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="WriteTransactionFacts.cs"];
m12_36 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues ('', '', getutcdate(), getutcdate())\r\nselect scope_identity() as Id''", span="47-50", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="WriteTransactionFacts.cs"];
m12_37 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.PersistJob(jobId));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.ExpireAt);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.NotNull(anotherJob.ExpireAt);\r\n            })", span="52-64", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="WriteTransactionFacts.cs"];
m12_38 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="45-45", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="WriteTransactionFacts.cs"];
m12_273 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="313-313", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="WriteTransactionFacts.cs"];
m12_274 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="315-324", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="WriteTransactionFacts.cs"];
m12_275 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="313-313", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="WriteTransactionFacts.cs"];
m12_464 [label="Entry lambda expression", span="558-562", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_4 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="WriteTransactionFacts.cs"];
m12_5 [label="new SqlServerWriteOnlyTransaction(null)", span="18-18", cluster="lambda expression", color=red, community=0, file="WriteTransactionFacts.cs"];
m12_6 [label="Exit lambda expression", span="18-18", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_14 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="31-31", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_15 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="32-32", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_13 [label="Entry lambda expression", span="29-41", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_16 [label="Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)))", span="34-34", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_17 [label="var job = GetTestJob(sql, jobId)", span="36-36", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_19 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="39-39", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_31 [label="x.ExpireJob(jobId, TimeSpan.FromDays(1))", span="34-34", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_30 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_18 [label="Assert.True(DateTime.UtcNow < job.ExpireAt && job.ExpireAt < DateTime.UtcNow.AddDays(1))", span="37-37", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_20 [label="Assert.Null(anotherJob.ExpireAt)", span="40-40", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_21 [label="Exit lambda expression", span="29-41", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_32 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_40 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="54-54", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_41 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="55-55", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_39 [label="Entry lambda expression", span="52-64", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_42 [label="Commit(sql, x => x.PersistJob(jobId))", span="57-57", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_43 [label="var job = GetTestJob(sql, jobId)", span="59-59", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_45 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="62-62", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_50 [label="x.PersistJob(jobId)", span="57-57", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_49 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_44 [label="Assert.Null(job.ExpireAt)", span="60-60", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_46 [label="Assert.NotNull(anotherJob.ExpireAt)", span="63-63", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_47 [label="Exit lambda expression", span="52-64", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_51 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_58 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="77-77", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_59 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="78-78", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_57 [label="Entry lambda expression", span="75-102", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_64 [label="Commit(sql, x => x.SetJobState(jobId, state.Object))", span="86-86", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_65 [label="var job = GetTestJob(sql, jobId)", span="88-88", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_68 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="92-92", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_71 [label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="96-96", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_94 [label="x.SetJobState(jobId, state.Object)", span="86-86", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_72 [label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="97-97", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_60 [label="var state = new Mock<IState>()", span="80-80", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_61 [label="state.Setup(x => x.Name).Returns(''State'')", span="81-81", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_62 [label="state.Setup(x => x.Reason).Returns(''Reason'')", span="82-82", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_63 [label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="83-84", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_83 [label="Entry lambda expression", span="81-81", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_86 [label="Entry lambda expression", span="82-82", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_89 [label="Entry lambda expression", span="83-83", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_93 [label="Entry lambda expression", span="86-86", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_66 [label="Assert.Equal(''State'', job.StateName)", span="89-89", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_67 [label="Assert.NotNull(job.StateId)", span="90-90", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_69 [label="Assert.Null(anotherJob.StateName)", span="93-93", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_70 [label="Assert.Null(anotherJob.StateId)", span="94-94", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_73 [label="Assert.Equal(''State'', jobState.Name)", span="98-98", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_74 [label="Assert.Equal(''Reason'', jobState.Reason)", span="99-99", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_75 [label="Assert.NotNull(jobState.CreatedAt)", span="100-100", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_76 [label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="101-101", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_77 [label="Exit lambda expression", span="75-102", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_84 [label="x.Name", span="81-81", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_85 [label="Exit lambda expression", span="81-81", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_87 [label="x.Reason", span="82-82", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_88 [label="Exit lambda expression", span="82-82", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_90 [label="x.SerializeData()", span="83-83", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_91 [label="Exit lambda expression", span="83-83", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_95 [label="Exit lambda expression", span="86-86", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_102 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="115-115", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_101 [label="Entry lambda expression", span="113-135", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_107 [label="Commit(sql, x => x.AddJobState(jobId, state.Object))", span="123-123", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_108 [label="var job = GetTestJob(sql, jobId)", span="125-125", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_111 [label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="129-129", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_103 [label="var state = new Mock<IState>()", span="117-117", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_128 [label="x.AddJobState(jobId, state.Object)", span="123-123", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_112 [label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="130-130", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_104 [label="state.Setup(x => x.Name).Returns(''State'')", span="118-118", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_105 [label="state.Setup(x => x.Reason).Returns(''Reason'')", span="119-119", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_106 [label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="120-121", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_118 [label="Entry lambda expression", span="118-118", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_121 [label="Entry lambda expression", span="119-119", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_124 [label="Entry lambda expression", span="120-120", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_127 [label="Entry lambda expression", span="123-123", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_109 [label="Assert.Null(job.StateName)", span="126-126", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_110 [label="Assert.Null(job.StateId)", span="127-127", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_113 [label="Assert.Equal(''State'', jobState.Name)", span="131-131", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_114 [label="Assert.Equal(''Reason'', jobState.Reason)", span="132-132", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_115 [label="Assert.NotNull(jobState.CreatedAt)", span="133-133", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_116 [label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="134-134", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_117 [label="Exit lambda expression", span="113-135", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_119 [label="x.Name", span="118-118", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_120 [label="Exit lambda expression", span="118-118", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_122 [label="x.Reason", span="119-119", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_123 [label="Exit lambda expression", span="119-119", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_125 [label="x.SerializeData()", span="120-120", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_126 [label="Exit lambda expression", span="120-120", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_129 [label="Exit lambda expression", span="123-123", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_134 [label="Entry lambda expression", span="141-149", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_135 [label="Commit(sql, x => x.AddToQueue(''default'', ''1''))", span="143-143", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_136 [label="var record = sql.Query(''select * from HangFire.JobQueue'').Single()", span="145-145", cluster="lambda expression", color=red, community=0, file="WriteTransactionFacts.cs"];
m12_141 [label="Entry lambda expression", span="143-143", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_137 [label="Assert.Equal(''1'', record.JobId.ToString())", span="146-146", cluster="lambda expression", color=red, community=0, file="WriteTransactionFacts.cs"];
m12_138 [label="Assert.Equal(''default'', record.Queue)", span="147-147", cluster="lambda expression", color=red, community=0, file="WriteTransactionFacts.cs"];
m12_139 [label="Assert.Null(record.FetchedAt)", span="148-148", cluster="lambda expression", color=red, community=0, file="WriteTransactionFacts.cs"];
m12_140 [label="Exit lambda expression", span="141-149", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_142 [label="x.AddToQueue(''default'', ''1'')", span="143-143", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_143 [label="Exit lambda expression", span="143-143", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_151 [label="Entry lambda expression", span="162-171", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_152 [label="Commit(sql, x => x.IncrementCounter(''my-key''))", span="164-164", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_153 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="166-166", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_158 [label="Entry lambda expression", span="164-164", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_154 [label="Assert.Equal(''my-key'', record.Key)", span="168-168", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_155 [label="Assert.Equal(1, record.Value)", span="169-169", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_156 [label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="170-170", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_157 [label="Exit lambda expression", span="162-171", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_159 [label="x.IncrementCounter(''my-key'')", span="164-164", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_160 [label="Exit lambda expression", span="164-164", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_165 [label="Entry lambda expression", span="177-191", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_166 [label="Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="179-179", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_167 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="181-181", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_176 [label="Entry lambda expression", span="179-179", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_168 [label="Assert.Equal(''my-key'', record.Key)", span="183-183", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_169 [label="Assert.Equal(1, record.Value)", span="184-184", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_170 [label="Assert.NotNull(record.ExpireAt)", span="185-185", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_171 [label="var expireAt = (DateTime) record.ExpireAt", span="187-187", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_172 [label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="189-189", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_173 [label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="190-190", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_174 [label="Exit lambda expression", span="177-191", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_177 [label="x.IncrementCounter(''my-key'', TimeSpan.FromDays(1))", span="179-179", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_178 [label="Exit lambda expression", span="179-179", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_183 [label="Entry lambda expression", span="197-208", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_184 [label="Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                })", span="199-203", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_185 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="205-205", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_188 [label="Entry lambda expression", span="199-203", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_186 [label="Assert.Equal(2, recordCount)", span="207-207", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_187 [label="Exit lambda expression", span="197-208", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_189 [label="x.IncrementCounter(''my-key'')", span="201-201", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_190 [label="x.IncrementCounter(''my-key'')", span="202-202", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_191 [label="Exit lambda expression", span="199-203", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_195 [label="Entry lambda expression", span="214-223", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_196 [label="Commit(sql, x => x.DecrementCounter(''my-key''))", span="216-216", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_197 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="218-218", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_202 [label="Entry lambda expression", span="216-216", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_198 [label="Assert.Equal(''my-key'', record.Key)", span="220-220", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_199 [label="Assert.Equal(-1, record.Value)", span="221-221", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_200 [label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="222-222", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_201 [label="Exit lambda expression", span="214-223", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_203 [label="x.DecrementCounter(''my-key'')", span="216-216", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_204 [label="Exit lambda expression", span="216-216", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_209 [label="Entry lambda expression", span="229-243", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_210 [label="Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="231-231", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_211 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="233-233", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_219 [label="Entry lambda expression", span="231-231", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_212 [label="Assert.Equal(''my-key'', record.Key)", span="235-235", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_213 [label="Assert.Equal(-1, record.Value)", span="236-236", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_214 [label="Assert.NotNull(record.ExpireAt)", span="237-237", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_215 [label="var expireAt = (DateTime)record.ExpireAt", span="239-239", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_216 [label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="241-241", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_217 [label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="242-242", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_218 [label="Exit lambda expression", span="229-243", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_220 [label="x.DecrementCounter(''my-key'', TimeSpan.FromDays(1))", span="231-231", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_221 [label="Exit lambda expression", span="231-231", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_226 [label="Entry lambda expression", span="249-260", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_227 [label="Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                })", span="251-255", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_228 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="257-257", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_231 [label="Entry lambda expression", span="251-255", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_229 [label="Assert.Equal(2, recordCount)", span="259-259", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_230 [label="Exit lambda expression", span="249-260", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_232 [label="x.DecrementCounter(''my-key'')", span="253-253", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_233 [label="x.DecrementCounter(''my-key'')", span="254-254", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_234 [label="Exit lambda expression", span="251-255", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_238 [label="Entry lambda expression", span="266-275", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_239 [label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value''))", span="268-268", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_240 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="270-270", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_245 [label="Entry lambda expression", span="268-268", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_241 [label="Assert.Equal(''my-key'', record.Key)", span="272-272", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_242 [label="Assert.Equal(''my-value'', record.Value)", span="273-273", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_243 [label="Assert.Equal(0.0, record.Score, 2)", span="274-274", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_244 [label="Exit lambda expression", span="266-275", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_246 [label="x.AddToSet(''my-key'', ''my-value'')", span="268-268", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_247 [label="Exit lambda expression", span="268-268", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_252 [label="Entry lambda expression", span="281-292", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_253 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                })", span="283-287", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_254 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="289-289", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_257 [label="Entry lambda expression", span="283-287", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_255 [label="Assert.Equal(2, recordCount)", span="291-291", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_256 [label="Exit lambda expression", span="281-292", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_258 [label="x.AddToSet(''my-key'', ''my-value'')", span="285-285", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_259 [label="x.AddToSet(''my-key'', ''another-value'')", span="286-286", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_260 [label="Exit lambda expression", span="283-287", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_264 [label="Entry lambda expression", span="298-309", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_265 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                })", span="300-304", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_266 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="306-306", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_269 [label="Entry lambda expression", span="300-304", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_267 [label="Assert.Equal(1, recordCount)", span="308-308", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_268 [label="Exit lambda expression", span="298-309", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_270 [label="x.AddToSet(''my-key'', ''my-value'')", span="302-302", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_271 [label="x.AddToSet(''my-key'', ''my-value'')", span="303-303", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_272 [label="Exit lambda expression", span="300-304", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_276 [label="Entry lambda expression", span="315-324", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_277 [label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2))", span="317-317", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_278 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="319-319", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_283 [label="Entry lambda expression", span="317-317", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_279 [label="Assert.Equal(''my-key'', record.Key)", span="321-321", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_280 [label="Assert.Equal(''my-value'', record.Value)", span="322-322", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_281 [label="Assert.Equal(3.2, record.Score, 3)", span="323-323", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_282 [label="Exit lambda expression", span="315-324", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_284 [label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="317-317", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_285 [label="Exit lambda expression", span="317-317", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_290 [label="Entry lambda expression", span="330-341", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_291 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                })", span="332-336", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_292 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="338-338", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_295 [label="Entry lambda expression", span="332-336", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_293 [label="Assert.Equal(3.2, record.Score, 3)", span="340-340", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_294 [label="Exit lambda expression", span="330-341", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_296 [label="x.AddToSet(''my-key'', ''my-value'')", span="334-334", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_297 [label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="335-335", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_298 [label="Exit lambda expression", span="332-336", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_302 [label="Entry lambda expression", span="347-358", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_303 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                })", span="349-353", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_304 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="355-355", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_307 [label="Entry lambda expression", span="349-353", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_305 [label="Assert.Equal(0, recordCount)", span="357-357", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_306 [label="Exit lambda expression", span="347-358", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_308 [label="x.AddToSet(''my-key'', ''my-value'')", span="351-351", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_309 [label="x.RemoveFromSet(''my-key'', ''my-value'')", span="352-352", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_310 [label="Exit lambda expression", span="349-353", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_315 [label="Entry lambda expression", span="364-375", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_316 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                })", span="366-370", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_317 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="372-372", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_320 [label="Entry lambda expression", span="366-370", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_318 [label="Assert.Equal(1, recordCount)", span="374-374", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_319 [label="Exit lambda expression", span="364-375", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_321 [label="x.AddToSet(''my-key'', ''my-value'')", span="368-368", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_322 [label="x.RemoveFromSet(''my-key'', ''different-value'')", span="369-369", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_323 [label="Exit lambda expression", span="366-370", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_327 [label="Entry lambda expression", span="381-392", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_328 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                })", span="383-387", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_329 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="389-389", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_332 [label="Entry lambda expression", span="383-387", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_330 [label="Assert.Equal(1, recordCount)", span="391-391", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_331 [label="Exit lambda expression", span="381-392", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_333 [label="x.AddToSet(''my-key'', ''my-value'')", span="385-385", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_334 [label="x.RemoveFromSet(''different-key'', ''my-value'')", span="386-386", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_335 [label="Exit lambda expression", span="383-387", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_339 [label="Entry lambda expression", span="398-406", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_340 [label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''))", span="400-400", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_341 [label="var record = sql.Query(''select * from HangFire.List'').Single()", span="402-402", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_345 [label="Entry lambda expression", span="400-400", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_342 [label="Assert.Equal(''my-key'', record.Key)", span="404-404", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_343 [label="Assert.Equal(''my-value'', record.Value)", span="405-405", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_344 [label="Exit lambda expression", span="398-406", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_346 [label="x.InsertToList(''my-key'', ''my-value'')", span="400-400", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_347 [label="Exit lambda expression", span="400-400", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_352 [label="Entry lambda expression", span="412-423", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_353 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                })", span="414-418", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_354 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="420-420", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_357 [label="Entry lambda expression", span="414-418", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_355 [label="Assert.Equal(2, recordCount)", span="422-422", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_356 [label="Exit lambda expression", span="412-423", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_358 [label="x.InsertToList(''my-key'', ''my-value'')", span="416-416", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_359 [label="x.InsertToList(''my-key'', ''my-value'')", span="417-417", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_360 [label="Exit lambda expression", span="414-418", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_364 [label="Entry lambda expression", span="429-441", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_365 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                })", span="431-436", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_366 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="438-438", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_369 [label="Entry lambda expression", span="431-436", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_367 [label="Assert.Equal(0, recordCount)", span="440-440", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_368 [label="Exit lambda expression", span="429-441", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_370 [label="x.InsertToList(''my-key'', ''my-value'')", span="433-433", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_371 [label="x.InsertToList(''my-key'', ''my-value'')", span="434-434", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_372 [label="x.RemoveFromList(''my-key'', ''my-value'')", span="435-435", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_373 [label="Exit lambda expression", span="431-436", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_378 [label="Entry lambda expression", span="447-458", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_379 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                })", span="449-453", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_380 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="455-455", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_383 [label="Entry lambda expression", span="449-453", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_381 [label="Assert.Equal(1, recordCount)", span="457-457", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_382 [label="Exit lambda expression", span="447-458", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_384 [label="x.InsertToList(''my-key'', ''my-value'')", span="451-451", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_385 [label="x.RemoveFromList(''my-key'', ''different-value'')", span="452-452", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_386 [label="Exit lambda expression", span="449-453", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_390 [label="Entry lambda expression", span="464-475", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_391 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                })", span="466-470", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_392 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="472-472", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_395 [label="Entry lambda expression", span="466-470", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_393 [label="Assert.Equal(1, recordCount)", span="474-474", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_394 [label="Exit lambda expression", span="464-475", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_396 [label="x.InsertToList(''my-key'', ''my-value'')", span="468-468", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_397 [label="x.RemoveFromList(''different-key'', ''my-value'')", span="469-469", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_398 [label="Exit lambda expression", span="466-470", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_402 [label="Entry lambda expression", span="481-497", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_403 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                })", span="483-490", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_404 [label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="492-492", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_410 [label="Entry lambda expression", span="483-490", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_405 [label="Assert.Equal(2, records.Length)", span="494-494", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_406 [label="Assert.Equal(''1'', records[0].Value)", span="495-495", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_407 [label="Assert.Equal(''2'', records[1].Value)", span="496-496", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_408 [label="Exit lambda expression", span="481-497", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_411 [label="x.InsertToList(''my-key'', ''0'')", span="485-485", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_412 [label="x.InsertToList(''my-key'', ''1'')", span="486-486", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_413 [label="x.InsertToList(''my-key'', ''2'')", span="487-487", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_414 [label="x.InsertToList(''my-key'', ''3'')", span="488-488", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_415 [label="x.TrimList(''my-key'', 1, 2)", span="489-489", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_416 [label="Exit lambda expression", span="483-490", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_421 [label="Entry lambda expression", span="503-516", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_422 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="505-511", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_423 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="513-513", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_426 [label="Entry lambda expression", span="505-511", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_424 [label="Assert.Equal(2, recordCount)", span="515-515", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_425 [label="Exit lambda expression", span="503-516", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_427 [label="x.InsertToList(''my-key'', ''0'')", span="507-507", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_428 [label="x.InsertToList(''my-key'', ''1'')", span="508-508", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_429 [label="x.InsertToList(''my-key'', ''2'')", span="509-509", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_430 [label="x.TrimList(''my-key'', 1, 100)", span="510-510", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_431 [label="Exit lambda expression", span="505-511", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_435 [label="Entry lambda expression", span="522-533", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_436 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="524-528", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_437 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="530-530", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_440 [label="Entry lambda expression", span="524-528", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_438 [label="Assert.Equal(0, recordCount)", span="532-532", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_439 [label="Exit lambda expression", span="522-533", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_441 [label="x.InsertToList(''my-key'', ''0'')", span="526-526", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_442 [label="x.TrimList(''my-key'', 1, 100)", span="527-527", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_443 [label="Exit lambda expression", span="524-528", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_447 [label="Entry lambda expression", span="539-550", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_448 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                })", span="541-545", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_449 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="547-547", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_452 [label="Entry lambda expression", span="541-545", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_450 [label="Assert.Equal(0, recordCount)", span="549-549", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_451 [label="Exit lambda expression", span="539-550", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_453 [label="x.InsertToList(''my-key'', ''0'')", span="543-543", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_454 [label="x.TrimList(''my-key'', 1, 0)", span="544-544", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_455 [label="Exit lambda expression", span="541-545", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_459 [label="Entry lambda expression", span="556-567", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_460 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                })", span="558-562", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_461 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="564-564", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_462 [label="Assert.Equal(1, recordCount)", span="566-566", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_463 [label="Exit lambda expression", span="556-567", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_465 [label="x.InsertToList(''my-key'', ''0'')", span="560-560", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_466 [label="x.TrimList(''another-key'', 1, 0)", span="561-561", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_467 [label="Exit lambda expression", span="558-562", cluster="lambda expression", file="WriteTransactionFacts.cs"];
m12_312 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="362-362", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="WriteTransactionFacts.cs"];
m12_313 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="364-375", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="WriteTransactionFacts.cs"];
m12_314 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="362-362", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="WriteTransactionFacts.cs"];
m12_261 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="296-296", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="WriteTransactionFacts.cs"];
m12_262 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n                \r\n                Assert.Equal(1, recordCount);\r\n            })", span="298-309", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="WriteTransactionFacts.cs"];
m12_263 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="296-296", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="WriteTransactionFacts.cs"];
m12_468 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="570-570", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="WriteTransactionFacts.cs"];
m12_469 [label="var connection = ConnectionUtils.CreateConnection()", span="572-572", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="WriteTransactionFacts.cs"];
m12_470 [label="action(connection)", span="574-574", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="WriteTransactionFacts.cs"];
m12_471 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="570-570", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="WriteTransactionFacts.cs"];
m12_175 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="WriteTransactionFacts.cs"];
m12_7 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", span="34-34", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", file="WriteTransactionFacts.cs"];
m12_456 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="554-554", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="WriteTransactionFacts.cs"];
m12_457 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="556-567", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="WriteTransactionFacts.cs"];
m12_458 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="554-554", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="WriteTransactionFacts.cs"];
m12_23 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="WriteTransactionFacts.cs"];
m12_8 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", span="22-22", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", file="WriteTransactionFacts.cs"];
m12_9 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="24-27", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", file="WriteTransactionFacts.cs"];
m12_10 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.True(DateTime.UtcNow < job.ExpireAt && job.ExpireAt < DateTime.UtcNow.AddDays(1));\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.ExpireAt);\r\n            })", span="29-41", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", file="WriteTransactionFacts.cs"];
m12_11 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", span="22-22", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", file="WriteTransactionFacts.cs"];
m12_53 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="68-68", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="WriteTransactionFacts.cs"];
m12_54 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="70-73", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="WriteTransactionFacts.cs"];
m12_55 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.StateName);\r\n                Assert.Null(anotherJob.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="75-102", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="WriteTransactionFacts.cs"];
m12_56 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="68-68", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="WriteTransactionFacts.cs"];
m12_28 [label="Entry Unk.True", span="", cluster="Unk.True", file="WriteTransactionFacts.cs"];
m12_349 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="410-410", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="WriteTransactionFacts.cs"];
m12_350 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="412-423", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="WriteTransactionFacts.cs"];
m12_351 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="410-410", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="WriteTransactionFacts.cs"];
m12_144 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="114-114", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="WriteTransactionFacts.cs"];
m12_472 [label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37", cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="WriteTransactionFacts.cs"];
m12_161 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="125-125", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="WriteTransactionFacts.cs"];
m12_418 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="501-501", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="WriteTransactionFacts.cs"];
m12_419 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="503-516", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="WriteTransactionFacts.cs"];
m12_420 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="501-501", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="WriteTransactionFacts.cs"];
m12_80 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="WriteTransactionFacts.cs"];
m12_249 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="279-279", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="WriteTransactionFacts.cs"];
m12_250 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="281-292", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="WriteTransactionFacts.cs"];
m12_251 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="279-279", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="WriteTransactionFacts.cs"];
m12_52 [label="Entry Unk.PersistJob", span="", cluster="Unk.PersistJob", file="WriteTransactionFacts.cs"];
m12_287 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="328-328", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="WriteTransactionFacts.cs"];
m12_288 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                });\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="330-341", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="WriteTransactionFacts.cs"];
m12_289 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="328-328", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="WriteTransactionFacts.cs"];
m12_336 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="396-396", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="WriteTransactionFacts.cs"];
m12_337 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.InsertToList(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.List'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n            })", span="398-406", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="WriteTransactionFacts.cs"];
m12_338 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="396-396", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="WriteTransactionFacts.cs"];
m12_192 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="212-212", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="WriteTransactionFacts.cs"];
m12_193 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="214-223", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="WriteTransactionFacts.cs"];
m12_194 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="212-212", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="WriteTransactionFacts.cs"];
m12_479 [label="HangFire.SqlServer.Tests.WriteTransactionFacts", span="", file="WriteTransactionFacts.cs"];
m12_480 [label=arrangeSql, span="", file="WriteTransactionFacts.cs"];
m12_481 [label=jobId, span="", file="WriteTransactionFacts.cs"];
m12_482 [label=arrangeSql, span="", file="WriteTransactionFacts.cs"];
m12_483 [label=jobId, span="", file="WriteTransactionFacts.cs"];
m12_484 [label=arrangeSql, span="", file="WriteTransactionFacts.cs"];
m12_485 [label=jobId, span="", file="WriteTransactionFacts.cs"];
m12_486 [label=state, span="", file="WriteTransactionFacts.cs"];
m12_487 [label=arrangeSql, span="", file="WriteTransactionFacts.cs"];
m12_488 [label=jobId, span="", file="WriteTransactionFacts.cs"];
m12_489 [label=state, span="", file="WriteTransactionFacts.cs"];
n175 -> n1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n3  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n4  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n6  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n25  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n33  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n39  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n43  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n47  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n50  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n54  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n66  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n69  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n72  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n75  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n78  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n79  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n84  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n87  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n88  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n92  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n96  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n97  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n98  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n106  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n107  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n108  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n115  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n116  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n117  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n126  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n129  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n130  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n134  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n138  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n147  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n148  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n149  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n152  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n155  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n156  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n157  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n160  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n163  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n170  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n164  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n165  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n175 -> n173  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientFacts"];
n176 -> n84  [key=1, style=dashed, color=darkseagreen4, label=client];
n177 -> n92  [key=1, style=dashed, color=darkseagreen4, label=client];
n178 -> n126  [key=1, style=dashed, color=darkseagreen4, label=client];
n179 -> n134  [key=1, style=dashed, color=darkseagreen4, label=client];
n180 -> n143  [key=1, style=dashed, color=darkseagreen4, label=client];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n11  [key=2, style=dotted];
n2 -> n3  [key=0, style=solid, color=red];
n2 -> n12  [key=2, style=dotted];
n3 -> n4  [key=0, style=solid, color=red];
n3 -> n13  [key=2, style=dotted, color=red];
n3 -> n14  [key=2, style=dotted, color=red];
n3 -> n20  [key=1, style=dashed, color=red, label="lambda expression"];
n4 -> n5  [key=0, style=solid, color=red];
n4 -> n15  [key=2, style=dotted, color=red];
n20 -> n21  [key=0, style=solid, color=red];
n5 -> n6  [key=0, style=solid, color=red];
n5 -> n16  [key=2, style=dotted];
n6 -> n7  [key=0, style=solid, color=red];
n6 -> n13  [key=2, style=dotted, color=red];
n6 -> n14  [key=2, style=dotted, color=red];
n6 -> n24  [key=1, style=dashed, color=red, label="lambda expression"];
n7 -> n8  [key=0, style=solid];
n7 -> n17  [key=2, style=dotted];
n24 -> n25  [key=0, style=solid, color=red];
n8 -> n9  [key=0, style=solid];
n8 -> n18  [key=2, style=dotted];
n9 -> n10  [key=0, style=solid];
n9 -> n19  [key=2, style=dotted];
n9 -> n28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n10 -> n0  [key=0, style=bold, color=blue];
n28 -> n29  [key=0, style=solid];
n21 -> n22  [key=0, style=solid, color=red];
n21 -> n23  [key=2, style=dotted, color=red];
n22 -> n20  [key=0, style=bold, color=blue];
n25 -> n26  [key=0, style=solid, color=red];
n25 -> n27  [key=2, style=dotted, color=red];
n26 -> n24  [key=0, style=bold, color=blue];
n29 -> n30  [key=0, style=solid];
n29 -> n31  [key=2, style=dotted];
n30 -> n28  [key=0, style=bold, color=blue];
n31 -> n172  [key=0, style=solid];
n32 -> n33  [key=0, style=solid];
n33 -> n34  [key=0, style=solid];
n33 -> n36  [key=2, style=dotted];
n33 -> n38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n34 -> n35  [key=0, style=solid];
n34 -> n37  [key=2, style=dotted];
n38 -> n39  [key=0, style=solid];
n35 -> n32  [key=0, style=bold, color=blue];
n39 -> n40  [key=0, style=solid];
n39 -> n41  [key=2, style=dotted];
n40 -> n38  [key=0, style=bold, color=blue];
n42 -> n43  [key=0, style=solid];
n43 -> n44  [key=0, style=solid];
n43 -> n36  [key=2, style=dotted];
n43 -> n46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n44 -> n45  [key=0, style=solid];
n44 -> n37  [key=2, style=dotted];
n46 -> n47  [key=0, style=solid];
n45 -> n42  [key=0, style=bold, color=blue];
n47 -> n48  [key=0, style=solid];
n47 -> n41  [key=2, style=dotted];
n48 -> n46  [key=0, style=bold, color=blue];
n49 -> n50  [key=0, style=solid];
n50 -> n51  [key=0, style=solid];
n50 -> n36  [key=2, style=dotted];
n50 -> n53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n51 -> n52  [key=0, style=solid];
n51 -> n37  [key=2, style=dotted];
n53 -> n54  [key=0, style=solid];
n52 -> n49  [key=0, style=bold, color=blue];
n54 -> n55  [key=0, style=solid];
n54 -> n41  [key=2, style=dotted];
n55 -> n53  [key=0, style=bold, color=blue];
n56 -> n57  [key=0, style=solid];
n57 -> n58  [key=0, style=solid];
n57 -> n12  [key=2, style=dotted];
n58 -> n59  [key=0, style=solid];
n58 -> n60  [key=2, style=dotted];
n58 -> n61  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n59 -> n56  [key=0, style=bold, color=blue];
n61 -> n62  [key=0, style=solid];
n62 -> n63  [key=0, style=solid];
n62 -> n64  [key=2, style=dotted];
n63 -> n61  [key=0, style=bold, color=blue];
n65 -> n66  [key=0, style=solid];
n66 -> n67  [key=0, style=solid];
n66 -> n60  [key=2, style=dotted];
n66 -> n68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n67 -> n65  [key=0, style=bold, color=blue];
n68 -> n69  [key=0, style=solid];
n69 -> n70  [key=0, style=solid];
n69 -> n41  [key=2, style=dotted];
n70 -> n68  [key=0, style=bold, color=blue];
n71 -> n72  [key=0, style=solid];
n72 -> n73  [key=0, style=solid];
n72 -> n60  [key=2, style=dotted];
n72 -> n74  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n73 -> n71  [key=0, style=bold, color=blue];
n74 -> n75  [key=0, style=solid];
n75 -> n76  [key=0, style=solid];
n75 -> n41  [key=2, style=dotted];
n76 -> n74  [key=0, style=bold, color=blue];
n77 -> n78  [key=0, style=solid];
n78 -> n79  [key=0, style=solid];
n78 -> n82  [key=2, style=dotted];
n78 -> n84  [key=1, style=dashed, color=darkseagreen4, label=client];
n79 -> n80  [key=0, style=solid];
n79 -> n36  [key=2, style=dotted];
n79 -> n83  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n82 -> n173  [key=0, style=solid];
n84 -> n85  [key=0, style=solid];
n84 -> n27  [key=2, style=dotted];
n80 -> n81  [key=0, style=solid];
n80 -> n37  [key=2, style=dotted];
n83 -> n84  [key=0, style=solid];
n81 -> n77  [key=0, style=bold, color=blue];
n85 -> n83  [key=0, style=bold, color=blue];
n86 -> n87  [key=0, style=solid];
n87 -> n88  [key=0, style=solid];
n87 -> n82  [key=2, style=dotted];
n87 -> n92  [key=1, style=dashed, color=darkseagreen4, label=client];
n88 -> n89  [key=0, style=solid];
n88 -> n36  [key=2, style=dotted];
n88 -> n91  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n92 -> n93  [key=0, style=solid];
n92 -> n94  [key=2, style=dotted];
n89 -> n90  [key=0, style=solid];
n89 -> n37  [key=2, style=dotted];
n91 -> n92  [key=0, style=solid];
n90 -> n86  [key=0, style=bold, color=blue];
n93 -> n91  [key=0, style=bold, color=blue];
n95 -> n96  [key=0, style=solid];
n96 -> n97  [key=0, style=solid];
n96 -> n82  [key=2, style=dotted];
n97 -> n98  [key=0, style=solid];
n97 -> n27  [key=2, style=dotted];
n98 -> n99  [key=0, style=solid];
n98 -> n100  [key=2, style=dotted];
n98 -> n101  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n99 -> n95  [key=0, style=bold, color=blue];
n101 -> n102  [key=0, style=solid];
n102 -> n103  [key=0, style=solid];
n102 -> n36  [key=2, style=dotted];
n102 -> n104  [key=2, style=dotted];
n103 -> n101  [key=0, style=bold, color=blue];
n105 -> n106  [key=0, style=solid];
n106 -> n107  [key=0, style=solid];
n106 -> n13  [key=2, style=dotted];
n106 -> n14  [key=2, style=dotted];
n106 -> n111  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n107 -> n108  [key=0, style=solid];
n107 -> n82  [key=2, style=dotted];
n111 -> n112  [key=0, style=solid];
n108 -> n109  [key=0, style=solid];
n108 -> n27  [key=2, style=dotted];
n109 -> n110  [key=0, style=solid];
n109 -> n37  [key=2, style=dotted];
n110 -> n105  [key=0, style=bold, color=blue];
n112 -> n113  [key=0, style=solid];
n112 -> n36  [key=2, style=dotted];
n112 -> n104  [key=2, style=dotted];
n113 -> n111  [key=0, style=bold, color=blue];
n114 -> n115  [key=0, style=solid];
n115 -> n116  [key=0, style=solid];
n115 -> n82  [key=2, style=dotted];
n115 -> n117  [key=1, style=dashed, color=darkseagreen4, label=client];
n115 -> n126  [key=1, style=dashed, color=darkseagreen4, label=client];
n116 -> n117  [key=0, style=solid];
n116 -> n13  [key=2, style=dotted];
n116 -> n36  [key=2, style=dotted];
n116 -> n122  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n117 -> n118  [key=0, style=solid];
n117 -> n36  [key=2, style=dotted];
n117 -> n125  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n117 -> n119  [key=1, style=dashed, color=darkseagreen4, label=exception];
n126 -> n127  [key=0, style=solid];
n126 -> n27  [key=2, style=dotted];
n122 -> n123  [key=0, style=solid];
n118 -> n119  [key=0, style=solid];
n118 -> n121  [key=2, style=dotted];
n125 -> n126  [key=0, style=solid];
n119 -> n120  [key=0, style=solid];
n119 -> n36  [key=2, style=dotted];
n120 -> n114  [key=0, style=bold, color=blue];
n123 -> n124  [key=0, style=solid];
n123 -> n36  [key=2, style=dotted];
n123 -> n104  [key=2, style=dotted];
n124 -> n122  [key=0, style=bold, color=blue];
n127 -> n125  [key=0, style=bold, color=blue];
n128 -> n129  [key=0, style=solid];
n129 -> n130  [key=0, style=solid];
n129 -> n82  [key=2, style=dotted];
n129 -> n134  [key=1, style=dashed, color=darkseagreen4, label=client];
n130 -> n131  [key=0, style=solid];
n130 -> n36  [key=2, style=dotted];
n130 -> n133  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n134 -> n135  [key=0, style=solid];
n134 -> n136  [key=2, style=dotted];
n131 -> n132  [key=0, style=solid];
n131 -> n37  [key=2, style=dotted];
n133 -> n134  [key=0, style=solid];
n132 -> n128  [key=0, style=bold, color=blue];
n135 -> n133  [key=0, style=bold, color=blue];
n137 -> n138  [key=0, style=solid];
n138 -> n139  [key=0, style=solid];
n138 -> n82  [key=2, style=dotted];
n138 -> n143  [key=1, style=dashed, color=darkseagreen4, label=client];
n139 -> n140  [key=0, style=solid];
n139 -> n36  [key=2, style=dotted];
n139 -> n142  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n143 -> n144  [key=0, style=solid];
n143 -> n145  [key=2, style=dotted];
n140 -> n141  [key=0, style=solid];
n140 -> n37  [key=2, style=dotted];
n142 -> n143  [key=0, style=solid];
n141 -> n137  [key=0, style=bold, color=blue];
n144 -> n142  [key=0, style=bold, color=blue];
n146 -> n147  [key=0, style=solid];
n147 -> n148  [key=0, style=solid];
n147 -> n82  [key=2, style=dotted];
n148 -> n149  [key=0, style=solid];
n148 -> n136  [key=2, style=dotted];
n149 -> n150  [key=0, style=solid];
n149 -> n100  [key=2, style=dotted];
n149 -> n151  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n150 -> n146  [key=0, style=bold, color=blue];
n151 -> n152  [key=0, style=solid];
n152 -> n153  [key=0, style=solid];
n152 -> n136  [key=2, style=dotted];
n153 -> n151  [key=0, style=bold, color=blue];
n154 -> n155  [key=0, style=solid];
n155 -> n156  [key=0, style=solid];
n155 -> n82  [key=2, style=dotted];
n156 -> n157  [key=0, style=solid];
n156 -> n136  [key=2, style=dotted];
n157 -> n158  [key=0, style=solid];
n157 -> n100  [key=2, style=dotted];
n157 -> n159  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n158 -> n154  [key=0, style=bold, color=blue];
n159 -> n160  [key=0, style=solid];
n160 -> n161  [key=0, style=solid];
n160 -> n136  [key=2, style=dotted];
n161 -> n159  [key=0, style=bold, color=blue];
n162 -> n163  [key=0, style=solid];
n163 -> n164  [key=0, style=solid];
n163 -> n13  [key=2, style=dotted];
n163 -> n14  [key=2, style=dotted];
n163 -> n169  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n164 -> n165  [key=0, style=solid];
n164 -> n82  [key=2, style=dotted];
n169 -> n170  [key=0, style=solid];
n165 -> n166  [key=0, style=solid];
n165 -> n136  [key=2, style=dotted];
n166 -> n167  [key=0, style=solid];
n166 -> n168  [key=2, style=dotted];
n167 -> n162  [key=0, style=bold, color=blue];
n170 -> n171  [key=0, style=solid];
n170 -> n136  [key=2, style=dotted];
n171 -> n169  [key=0, style=bold, color=blue];
n172 -> n31  [key=0, style=bold, color=blue];
n173 -> n174  [key=0, style=solid];
n173 -> n41  [key=2, style=dotted];
n174 -> n82  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_0  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid, color=green];
m4_0 -> m4_3  [key=1, style=dashed, color=green, label=string];
m4_0 -> m4_5  [key=1, style=dashed, color=green, label=MessageQueueTransaction];
m4_0 -> m4_6  [key=1, style=dashed, color=green, label=string];
m4_1 -> m4_2  [key=0, style=solid, color=green];
m4_1 -> m4_3  [key=0, style=solid, color=green];
m4_2 -> m4_7  [key=0, style=solid, color=green];
m4_2 -> m4_8  [key=2, style=dotted, color=green];
m4_3 -> m4_4  [key=0, style=solid, color=green];
m4_3 -> m4_5  [key=0, style=solid, color=green];
m4_4 -> m4_7  [key=0, style=solid, color=green];
m4_4 -> m4_8  [key=2, style=dotted, color=green];
m4_5 -> m4_6  [key=0, style=solid, color=green];
m4_6 -> m4_7  [key=0, style=solid, color=green];
m4_7 -> m4_0  [key=0, style=bold, color=blue];
m4_9 -> m4_10  [key=0, style=solid, color=green];
m4_10 -> m4_11  [key=0, style=solid, color=green];
m4_10 -> m4_12  [key=0, style=solid, color=green];
m4_11 -> m4_15  [key=0, style=solid, color=green];
m4_12 -> m4_13  [key=0, style=solid, color=green];
m4_13 -> m4_14  [key=0, style=solid, color=green];
m4_13 -> m4_16  [key=2, style=dotted, color=green];
m4_14 -> m4_15  [key=0, style=solid, color=green];
m4_14 -> m4_17  [key=2, style=dotted, color=green];
m4_15 -> m4_9  [key=0, style=bold, color=blue];
m4_18 -> m4_5  [key=1, style=dashed, color=green, label="HangFire.SqlServer.MessageQueueProcessingJob"];
m4_18 -> m4_6  [key=1, style=dashed, color=green, label="HangFire.SqlServer.MessageQueueProcessingJob"];
m4_18 -> m4_10  [key=1, style=dashed, color=green, label="HangFire.SqlServer.MessageQueueProcessingJob"];
m4_18 -> m4_12  [key=1, style=dashed, color=green, label="HangFire.SqlServer.MessageQueueProcessingJob"];
m4_18 -> m4_13  [key=1, style=dashed, color=green, label="HangFire.SqlServer.MessageQueueProcessingJob"];
m4_18 -> m4_14  [key=1, style=dashed, color=green, label="HangFire.SqlServer.MessageQueueProcessingJob"];
m5_78 -> m5_71  [key=0, style=bold, color=blue];
m5_13 -> m5_14  [key=0, style=solid];
m5_13 -> m5_15  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_13 -> m5_17  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_13 -> m5_13  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m5_35 -> m5_36  [key=0, style=solid];
m5_35 -> m5_33  [key=0, style=solid];
m5_35 -> m5_35  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_39 -> n37  [key=2, style=dotted];
m5_39 -> m5_40  [key=0, style=solid];
m5_39 -> m5_42  [key=0, style=solid];
m5_38 -> m5_39  [key=0, style=solid];
m5_38 -> m5_42  [key=2, style=dotted];
m5_38 -> m5_41  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_38 -> m5_13  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m5_37 -> m5_38  [key=0, style=solid];
m5_37 -> m5_26  [key=2, style=dotted];
m5_37 -> m5_63  [key=2, style=dotted];
m5_37 -> m5_64  [key=2, style=dotted];
m5_37 -> m5_39  [key=1, style=dashed, color=darkseagreen4, label=workCount];
m5_36 -> m5_37  [key=0, style=solid];
m5_36 -> m5_41  [key=2, style=dotted];
m5_36 -> m5_42  [key=0, style=solid];
m5_36 -> m5_62  [key=2, style=dotted];
m5_40 -> m5_35  [key=0, style=bold, color=blue];
m5_40 -> m5_41  [key=0, style=solid];
m5_40 -> m5_65  [key=2, style=dotted];
m5_40 -> m5_83  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_42 -> m5_43  [key=0, style=solid];
m5_42 -> m5_46  [key=0, style=solid];
m5_42 -> m5_62  [key=2, style=dotted];
m5_32 -> m5_33  [key=0, style=solid];
m5_32 -> m5_35  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_32 -> m5_13  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_2  [key=0, style=solid, color=red];
m5_1 -> m5_55  [key=2, style=dotted];
m5_1 -> m5_3  [key=2, style=dotted];
m5_2 -> m5_3  [key=0, style=solid, color=red];
m5_2 -> m5_56  [key=2, style=dotted, color=red];
m5_2 -> m5_0  [key=0, style=bold, color=blue];
m5_3 -> m5_4  [key=0, style=solid];
m5_3 -> m5_57  [key=2, style=dotted];
m5_4 -> m5_5  [key=0, style=solid, color=green];
m5_4 -> m5_58  [key=2, style=dotted];
m5_4 -> m5_10  [key=1, style=dashed, color=darkseagreen4, label=server];
m5_5 -> m5_6  [key=0, style=solid, color=green];
m5_5 -> m5_44  [key=1, style=dashed, color=darkseagreen4, label=count];
m5_5 -> m5_5  [key=3, color=darkorchid, style=bold, label="Local variable int count"];
m5_5 -> m5_8  [key=2, style=dotted, color=green];
m5_5 -> m5_101  [key=1, style=dashed, color=green, label="lambda expression"];
m5_10 -> m5_11  [key=0, style=solid];
m5_10 -> m5_61  [key=2, style=dotted];
m5_6 -> m5_7  [key=0, style=solid];
m5_6 -> m5_52  [key=0, style=solid];
m5_6 -> n37  [key=2, style=dotted];
m5_44 -> m5_45  [key=0, style=solid];
m5_44 -> m5_44  [key=1, style=dashed, color=darkseagreen4, label=count];
m5_44 -> m5_90  [key=1, style=dashed, color=darkseagreen4, label=number];
m5_44 -> m5_46  [key=1, style=dashed, color=darkseagreen4, label=queue];
m5_44 -> m5_26  [key=2, style=dotted];
m5_44 -> m5_50  [key=1, style=dashed, color=darkseagreen4, label=queue];
m5_7 -> m5_8  [key=0, style=solid];
m5_7 -> m5_59  [key=2, style=dotted];
m5_7 -> m5_9  [key=1, style=dashed, color=darkseagreen4, label=command];
m5_7 -> m5_11  [key=1, style=dashed, color=darkseagreen4, label=command];
m5_7 -> m5_12  [key=1, style=dashed, color=darkseagreen4, label=command];
m5_7 -> m5_21  [key=1, style=dashed, color=darkseagreen4, label=command];
m5_7 -> m5_22  [key=1, style=dashed, color=darkseagreen4, label=command];
m5_7 -> m5_30  [key=1, style=dashed, color=darkseagreen4, label=command];
m5_7 -> m5_31  [key=1, style=dashed, color=darkseagreen4, label=command];
m5_7 -> m5_36  [key=1, style=dashed, color=darkseagreen4, label=command];
m5_7 -> m5_37  [key=1, style=dashed, color=darkseagreen4, label=command];
m5_7 -> m5_42  [key=1, style=dashed, color=darkseagreen4, label=command];
m5_7 -> m5_43  [key=1, style=dashed, color=darkseagreen4, label=command];
m5_7 -> m5_46  [key=1, style=dashed, color=darkseagreen4, label=command];
m5_7 -> m5_47  [key=1, style=dashed, color=darkseagreen4, label=command];
m5_7 -> m5_4  [key=0, style=bold, color=blue];
m5_52 -> m5_53  [key=0, style=solid];
m5_52 -> m5_66  [key=2, style=dotted];
m5_8 -> m5_9  [key=0, style=solid];
m5_8 -> m5_52  [key=0, style=solid];
m5_8 -> m5_60  [key=2, style=dotted];
m5_9 -> m5_10  [key=0, style=solid];
m5_9 -> m5_11  [key=0, style=solid];
m5_9 -> m5_60  [key=2, style=dotted];
m5_11 -> m5_12  [key=0, style=solid];
m5_11 -> m5_21  [key=0, style=solid];
m5_11 -> m5_62  [key=2, style=dotted];
m5_11 -> m5_13  [key=2, style=dotted];
m5_11 -> m5_103  [key=0, style=solid];
m5_12 -> m5_13  [key=0, style=solid];
m5_12 -> m5_63  [key=2, style=dotted];
m5_12 -> m5_64  [key=2, style=dotted];
m5_12 -> m5_14  [key=1, style=dashed, color=darkseagreen4, label=workCount];
m5_21 -> m5_22  [key=0, style=solid];
m5_21 -> m5_30  [key=0, style=solid];
m5_21 -> m5_62  [key=2, style=dotted];
m5_21 -> m5_23  [key=1, style=dashed, color=darkseagreen4, label=message];
m5_21 -> m5_21  [key=1, style=dashed, color=darkseagreen4, label=message];
m5_21 -> m5_33  [key=2, style=dotted];
m5_22 -> m5_23  [key=0, style=solid];
m5_22 -> m5_63  [key=2, style=dotted];
m5_22 -> m5_64  [key=2, style=dotted];
m5_22 -> m5_24  [key=1, style=dashed, color=darkseagreen4, label=workCount];
m5_22 -> n37  [key=2, style=dotted];
m5_30 -> m5_31  [key=0, style=solid];
m5_30 -> m5_36  [key=0, style=solid];
m5_30 -> m5_62  [key=2, style=dotted];
m5_31 -> m5_32  [key=0, style=solid];
m5_31 -> m5_63  [key=2, style=dotted];
m5_31 -> m5_64  [key=2, style=dotted];
m5_31 -> m5_33  [key=1, style=dashed, color=darkseagreen4, label=workCount];
m5_43 -> m5_44  [key=0, style=solid];
m5_43 -> m5_63  [key=2, style=dotted];
m5_43 -> m5_64  [key=2, style=dotted];
m5_43 -> m5_45  [key=1, style=dashed, color=darkseagreen4, label=seconds];
m5_46 -> m5_47  [key=0, style=solid];
m5_46 -> m5_6  [key=0, style=solid];
m5_46 -> m5_62  [key=2, style=dotted];
m5_46 -> m5_8  [key=2, style=dotted];
m5_46 -> m5_49  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_47 -> m5_48  [key=0, style=solid, color=red];
m5_47 -> m5_63  [key=2, style=dotted];
m5_47 -> m5_64  [key=2, style=dotted];
m5_47 -> m5_43  [key=0, style=bold, color=blue];
m5_14 -> m5_15  [key=0, style=solid];
m5_14 -> m5_18  [key=0, style=solid];
m5_15 -> m5_16  [key=0, style=solid];
m5_15 -> m5_72  [key=1, style=dashed, color=darkseagreen4, label=number];
m5_15 -> m5_13  [key=3, color=darkorchid, style=bold, label="Local variable int number"];
m5_15 -> m5_26  [key=2, style=dotted];
m5_17 -> m5_14  [key=0, style=solid];
m5_17 -> m5_17  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_17 -> m5_20  [key=1, style=dashed, color=darkseagreen4, label=messageQueue];
m5_17 -> m5_18  [key=0, style=solid];
m5_17 -> m5_28  [key=2, style=dotted];
m5_18 -> m5_19  [key=0, style=solid];
m5_18 -> m5_21  [key=0, style=solid];
m5_18 -> m5_66  [key=2, style=dotted];
m5_18 -> m5_24  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m5_18 -> m5_20  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m5_18 -> m5_29  [key=2, style=dotted];
m5_16 -> m5_17  [key=0, style=solid];
m5_16 -> m5_65  [key=2, style=dotted];
m5_16 -> m5_71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_16 -> m5_27  [key=2, style=dotted];
m5_19 -> m5_20  [key=0, style=solid];
m5_19 -> m5_30  [key=2, style=dotted];
m5_20 -> m5_21  [key=0, style=solid];
m5_20 -> m5_66  [key=2, style=dotted];
m5_20 -> m5_31  [key=2, style=dotted];
m5_20 -> m5_32  [key=2, style=dotted];
m5_23 -> m5_24  [key=0, style=solid];
m5_23 -> m5_26  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_23 -> m5_13  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m5_23 -> n37  [key=2, style=dotted];
m5_24 -> m5_25  [key=0, style=solid];
m5_24 -> m5_27  [key=0, style=solid];
m5_24 -> m5_34  [key=2, style=dotted];
m5_26 -> m5_24  [key=0, style=solid];
m5_26 -> m5_26  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_26 -> m5_92  [key=0, style=solid];
m5_26 -> m5_15  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.SqlServer.Msmq.MsmqTransactionType transactionType"];
m5_25 -> m5_26  [key=0, style=solid];
m5_25 -> m5_67  [key=2, style=dotted];
m5_25 -> m5_75  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_25 -> m5_14  [key=0, style=bold, color=blue];
m5_27 -> m5_28  [key=0, style=solid];
m5_27 -> m5_30  [key=0, style=solid];
m5_27 -> m5_66  [key=2, style=dotted];
m5_28 -> m5_29  [key=0, style=solid];
m5_29 -> m5_30  [key=0, style=solid];
m5_29 -> m5_66  [key=2, style=dotted];
m5_33 -> m5_34  [key=0, style=solid];
m5_33 -> m5_36  [key=0, style=solid];
m5_34 -> m5_35  [key=0, style=solid];
m5_34 -> m5_65  [key=2, style=dotted];
m5_34 -> m5_79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_41 -> m5_39  [key=0, style=solid];
m5_41 -> m5_41  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_45 -> m5_46  [key=0, style=solid];
m5_45 -> m5_68  [key=2, style=dotted];
m5_45 -> m5_69  [key=2, style=dotted];
m5_45 -> m5_89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_45 -> m5_48  [key=2, style=dotted];
m5_45 -> m5_50  [key=1, style=dashed, color=darkseagreen4, label=token];
m5_48 -> m5_49  [key=0, style=solid, color=red];
m5_48 -> m5_70  [key=2, style=dotted, color=red];
m5_48 -> m5_92  [key=1, style=dashed, color=red, label="lambda expression"];
m5_49 -> m5_50  [key=0, style=solid];
m5_49 -> m5_6  [key=0, style=solid];
m5_49 -> m5_66  [key=2, style=dotted];
m5_50 -> m5_51  [key=0, style=solid];
m5_50 -> m5_42  [key=2, style=dotted];
m5_51 -> m5_6  [key=0, style=solid];
m5_51 -> m5_66  [key=2, style=dotted];
m5_51 -> m5_49  [key=0, style=bold, color=blue];
m5_53 -> m5_54  [key=0, style=solid];
m5_53 -> m5_59  [key=2, style=dotted];
m5_53 -> m5_41  [key=2, style=dotted];
m5_54 -> m5_0  [key=0, style=bold, color=blue];
m5_54 -> m5_55  [key=0, style=solid];
m5_54 -> m5_26  [key=2, style=dotted];
m5_58 -> m5_59  [key=0, style=solid];
m5_63 -> m5_8  [key=2, style=dotted];
m5_63 -> m5_64  [key=0, style=solid];
m5_63 -> m5_67  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_64 -> n37  [key=2, style=dotted];
m5_64 -> m5_65  [key=0, style=solid];
m5_62 -> m5_63  [key=0, style=solid];
m5_62 -> m5_66  [key=2, style=dotted];
m5_61 -> m5_62  [key=0, style=solid];
m5_61 -> m5_42  [key=2, style=dotted];
m5_60 -> m5_26  [key=2, style=dotted];
m5_60 -> m5_61  [key=0, style=solid];
m5_59 -> m5_60  [key=0, style=solid];
m5_59 -> m5_41  [key=2, style=dotted];
m5_65 -> m5_58  [key=0, style=bold, color=blue];
m5_55 -> m5_56  [key=0, style=solid];
m5_55 -> m5_42  [key=2, style=dotted];
m5_71 -> m5_72  [key=0, style=solid];
m5_76 -> m5_8  [key=2, style=dotted];
m5_76 -> m5_77  [key=0, style=solid];
m5_76 -> m5_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_76 -> m5_78  [key=2, style=dotted];
m5_77 -> n37  [key=2, style=dotted];
m5_77 -> m5_78  [key=0, style=solid];
m5_77 -> m5_75  [key=0, style=bold, color=blue];
m5_75 -> m5_76  [key=0, style=solid];
m5_75 -> m5_79  [key=2, style=dotted];
m5_74 -> m5_75  [key=0, style=solid];
m5_74 -> m5_42  [key=2, style=dotted];
m5_73 -> m5_26  [key=2, style=dotted];
m5_73 -> m5_74  [key=0, style=solid];
m5_73 -> m5_71  [key=0, style=bold, color=blue];
m5_72 -> m5_73  [key=0, style=solid];
m5_72 -> m5_41  [key=2, style=dotted];
m5_72 -> m5_74  [key=2, style=dotted];
m5_69 -> m5_67  [key=0, style=bold, color=blue];
m5_82 -> m5_80  [key=0, style=bold, color=blue];
m5_68 -> m5_69  [key=0, style=solid];
m5_68 -> m5_31  [key=2, style=dotted];
m5_68 -> m5_70  [key=2, style=dotted];
m5_87 -> m5_88  [key=0, style=solid];
m5_87 -> m5_91  [key=2, style=dotted];
m5_79 -> m5_80  [key=0, style=solid];
m5_88 -> m5_89  [key=0, style=solid];
m5_88 -> m5_31  [key=2, style=dotted];
m5_88 -> m5_70  [key=2, style=dotted];
m5_80 -> m5_81  [key=0, style=solid];
m5_80 -> m5_82  [key=2, style=dotted];
m5_83 -> m5_84  [key=0, style=solid];
m5_90 -> m5_91  [key=0, style=solid];
m5_90 -> m5_74  [key=2, style=dotted];
m5_90 -> m5_83  [key=0, style=bold, color=blue];
m5_89 -> m5_90  [key=0, style=solid];
m5_89 -> n37  [key=2, style=dotted];
m5_92 -> m5_93  [key=0, style=solid];
m5_92 -> m5_13  [key=2, style=dotted];
m5_81 -> m5_79  [key=0, style=bold, color=blue];
m5_81 -> m5_82  [key=0, style=solid];
m5_81 -> m5_31  [key=2, style=dotted];
m5_81 -> m5_70  [key=2, style=dotted];
m5_84 -> m5_85  [key=0, style=solid];
m5_84 -> m5_86  [key=2, style=dotted];
m5_84 -> m5_87  [key=2, style=dotted];
m5_84 -> m5_88  [key=2, style=dotted];
m5_84 -> m5_41  [key=2, style=dotted];
m5_85 -> m5_83  [key=0, style=bold, color=blue];
m5_85 -> m5_26  [key=2, style=dotted];
m5_85 -> m5_86  [key=0, style=solid];
m5_91 -> m5_89  [key=0, style=bold, color=blue];
m5_93 -> m5_94  [key=0, style=solid];
m5_93 -> m5_95  [key=0, style=solid, color=red];
m5_93 -> m5_26  [key=0, style=bold, color=blue];
m5_94 -> m5_96  [key=0, style=solid];
m5_94 -> m5_65  [key=2, style=dotted];
m5_94 -> m5_97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_94 -> m5_38  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts"];
m5_94 -> m5_55  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts"];
m5_94 -> m5_61  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts"];
m5_94 -> m5_74  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts"];
m5_94 -> m5_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts"];
m5_94 -> m5_86  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts"];
m5_95 -> m5_96  [key=0, style=solid, color=red];
m5_95 -> m5_65  [key=2, style=dotted, color=red];
m5_95 -> m5_101  [key=1, style=dashed, color=red, label="lambda expression"];
m5_95 -> m5_50  [key=1, style=dashed, color=darkseagreen4, label=queue];
m5_96 -> m5_92  [key=0, style=bold, color=blue];
m5_96 -> m5_50  [key=1, style=dashed, color=darkseagreen4, label=token];
m5_97 -> m5_98  [key=0, style=solid];
m5_101 -> m5_102  [key=0, style=solid, color=red];
m5_101 -> m5_11  [key=0, style=solid];
m5_98 -> m5_99  [key=0, style=solid];
m5_98 -> m5_100  [key=2, style=dotted];
m5_99 -> m5_97  [key=0, style=bold, color=blue];
m5_102 -> m5_103  [key=0, style=solid, color=red];
m5_102 -> m5_104  [key=2, style=dotted, color=red];
m5_103 -> m5_101  [key=0, style=bold, color=blue];
m5_67 -> m5_68  [key=0, style=solid];
m5_86 -> m5_42  [key=2, style=dotted];
m5_86 -> m5_87  [key=0, style=solid];
m5_56 -> n37  [key=2, style=dotted];
m5_56 -> m5_57  [key=0, style=solid];
m5_57 -> m5_52  [key=0, style=bold, color=blue];
m5_105 -> m5_72  [key=1, style=dashed, color=darkseagreen4, label=number];
m5_106 -> m5_90  [key=1, style=dashed, color=darkseagreen4, label=number];
m6_48 -> m6_49  [key=0, style=solid, color=red];
m6_48 -> m6_48  [key=3, color=darkorchid, style=bold, label="Local variable string fetchJobSqlTemplate"];
m6_49 -> m6_50  [key=0, style=solid, color=red];
m6_49 -> m6_36  [key=2, style=dotted, color=red];
m6_50 -> m6_51  [key=0, style=solid, color=red];
m6_50 -> m6_53  [key=2, style=dotted, color=red];
m6_51 -> m6_52  [key=0, style=solid, color=red];
m6_51 -> m6_29  [key=2, style=dotted, color=red];
m6_52 -> m6_48  [key=0, style=bold, color=blue];
m6_36 -> m6_75  [key=0, style=solid, color=red];
m6_75 -> m6_76  [key=0, style=solid, color=red];
m6_75 -> m6_21  [key=2, style=dotted, color=red];
m6_75 -> m6_77  [key=2, style=dotted, color=red];
m6_76 -> m6_36  [key=0, style=bold, color=blue];
m6_22 -> m6_23  [key=0, style=solid];
m6_23 -> m6_24  [key=0, style=solid, color=red];
m6_23 -> m6_27  [key=2, style=dotted];
m6_24 -> m6_25  [key=0, style=solid, color=red];
m6_24 -> m6_28  [key=2, style=dotted, color=red];
m6_25 -> m6_26  [key=0, style=solid];
m6_25 -> m6_29  [key=2, style=dotted];
m6_26 -> m6_22  [key=0, style=bold, color=blue];
m6_54 -> m6_55  [key=0, style=solid, color=red];
m6_55 -> m6_56  [key=0, style=solid, color=red];
m6_55 -> m6_36  [key=2, style=dotted, color=red];
m6_55 -> m6_55  [key=3, color=red, style=bold, label="Local variable int currentQueryIndex"];
m6_56 -> m6_57  [key=0, style=solid, color=red];
m6_56 -> m6_46  [key=2, style=dotted, color=red];
m6_56 -> m6_58  [key=1, style=dashed, color=red, label=connection];
m6_57 -> m6_58  [key=0, style=solid, color=red];
m6_57 -> m6_29  [key=2, style=dotted, color=red];
m6_58 -> m6_59  [key=0, style=solid, color=red];
m6_58 -> m6_60  [key=2, style=dotted, color=red];
m6_59 -> m6_54  [key=0, style=bold, color=blue];
m6_30 -> m6_31  [key=0, style=solid];
m6_31 -> m6_32  [key=0, style=solid];
m6_31 -> m6_36  [key=2, style=dotted];
m6_32 -> m6_33  [key=0, style=solid];
m6_33 -> m6_34  [key=0, style=solid, color=red];
m6_33 -> m6_37  [key=2, style=dotted];
m6_34 -> m6_35  [key=0, style=solid, color=red];
m6_34 -> m6_38  [key=2, style=dotted, color=red];
m6_35 -> m6_30  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_3  [key=2, style=dotted];
m6_2 -> m6_0  [key=0, style=bold, color=blue];
m6_71 -> m6_72  [key=0, style=solid, color=red];
m6_10 -> m6_11  [key=0, style=solid];
m6_11 -> m6_12  [key=0, style=solid];
m6_11 -> m6_13  [key=2, style=dotted];
m6_12 -> m6_10  [key=0, style=bold, color=blue];
m6_18 -> m6_19  [key=0, style=solid];
m6_19 -> m6_20  [key=0, style=solid];
m6_19 -> m6_21  [key=2, style=dotted];
m6_20 -> m6_18  [key=0, style=bold, color=blue];
m6_72 -> m6_73  [key=0, style=solid, color=red];
m6_72 -> m6_74  [key=2, style=dotted, color=red];
m6_73 -> m6_71  [key=0, style=bold, color=blue];
m6_61 -> m6_62  [key=0, style=solid, color=red];
m6_62 -> m6_63  [key=0, style=solid, color=red];
m6_62 -> m6_36  [key=2, style=dotted, color=red];
m6_63 -> m6_64  [key=0, style=solid, color=red];
m6_63 -> m6_67  [key=2, style=dotted, color=red];
m6_64 -> m6_65  [key=0, style=solid, color=red];
m6_64 -> m6_68  [key=2, style=dotted, color=red];
m6_64 -> m6_69  [key=2, style=dotted, color=red];
m6_64 -> m6_71  [key=1, style=dashed, color=red, label="lambda expression"];
m6_65 -> m6_66  [key=0, style=solid, color=red];
m6_65 -> m6_70  [key=2, style=dotted, color=red];
m6_66 -> m6_61  [key=0, style=bold, color=blue];
m6_39 -> m6_40  [key=0, style=solid];
m6_40 -> m6_41  [key=0, style=solid];
m6_40 -> m6_27  [key=2, style=dotted];
m6_40 -> m6_43  [key=1, style=dashed, color=darkseagreen4, label=connection];
m6_41 -> m6_42  [key=0, style=solid];
m6_41 -> m6_28  [key=2, style=dotted];
m6_43 -> m6_44  [key=0, style=solid, color=red];
m6_43 -> m6_38  [key=2, style=dotted];
m6_42 -> m6_43  [key=0, style=solid];
m6_42 -> m6_46  [key=2, style=dotted];
m6_42 -> m6_44  [key=1, style=dashed, color=red, label=storageConnection];
m6_44 -> m6_45  [key=0, style=solid, color=red];
m6_44 -> m6_47  [key=2, style=dotted, color=red];
m6_45 -> m6_39  [key=0, style=bold, color=blue];
m6_4 -> m6_5  [key=0, style=solid, color=red];
m6_5 -> m6_6  [key=0, style=solid, color=red];
m6_5 -> m6_8  [key=2, style=dotted, color=red];
m6_5 -> m6_10  [key=1, style=dashed, color=red, label="lambda expression"];
m6_6 -> m6_7  [key=0, style=solid];
m6_6 -> n37  [key=2, style=dotted];
m6_7 -> m6_4  [key=0, style=bold, color=blue];
m6_14 -> m6_15  [key=0, style=solid];
m6_15 -> m6_16  [key=0, style=solid];
m6_15 -> m6_8  [key=2, style=dotted];
m6_15 -> m6_18  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_16 -> m6_17  [key=0, style=solid];
m6_16 -> n37  [key=2, style=dotted];
m6_17 -> m6_14  [key=0, style=bold, color=blue];
m6_78 -> m6_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerStorageFacts"];
m6_78 -> m6_31  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerStorageFacts"];
m6_78 -> m6_34  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerStorageFacts"];
m6_78 -> m6_49  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerStorageFacts"];
m6_78 -> m6_55  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerStorageFacts"];
m6_78 -> m6_62  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerStorageFacts"];
m6_78 -> m6_75  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerStorageFacts"];
m8_20 -> m8_21  [key=0, style=solid, color=green];
m8_21 -> m8_22  [key=0, style=solid, color=green];
m8_21 -> m8_23  [key=2, style=dotted, color=red];
m8_21 -> m8_14  [key=2, style=dotted, color=green];
m8_22 -> m8_23  [key=0, style=solid, color=green];
m8_22 -> m8_25  [key=2, style=dotted, color=green];
m8_22 -> m8_20  [key=0, style=bold, color=blue];
m8_23 -> m8_22  [key=0, style=solid, color=green];
m8_23 -> m8_26  [key=2, style=dotted, color=green];
m8_35 -> m8_36  [key=0, style=solid];
m8_36 -> m8_37  [key=0, style=solid];
m8_36 -> m8_47  [key=1, style=dashed, color=darkseagreen4, label=canNotParseMessage];
m8_36 -> m8_49  [key=1, style=dashed, color=darkseagreen4, label=canNotParseMessage];
m8_36 -> m8_36  [key=3, color=darkorchid, style=bold, label="Local variable string canNotParseMessage"];
m8_37 -> m8_38  [key=0, style=solid];
m8_37 -> m8_51  [key=2, style=dotted];
m8_37 -> m8_52  [key=2, style=dotted];
m8_37 -> m8_53  [key=2, style=dotted];
m8_37 -> m8_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_37 -> m8_62  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_37 -> m8_66  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_37 -> m8_69  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_37 -> m8_40  [key=1, style=dashed, color=darkseagreen4, label=parts];
m8_37 -> m8_41  [key=1, style=dashed, color=darkseagreen4, label=parts];
m8_37 -> m8_45  [key=1, style=dashed, color=darkseagreen4, label=parts];
m8_37 -> m8_46  [key=1, style=dashed, color=darkseagreen4, label=parts];
m8_47 -> m8_50  [key=0, style=solid];
m8_47 -> m8_58  [key=2, style=dotted];
m8_49 -> m8_50  [key=0, style=solid];
m8_38 -> m8_39  [key=0, style=solid];
m8_38 -> m8_54  [key=2, style=dotted];
m8_38 -> m8_41  [key=1, style=dashed, color=darkseagreen4, label=builder];
m8_38 -> m8_42  [key=1, style=dashed, color=darkseagreen4, label=builder];
m8_38 -> m8_43  [key=1, style=dashed, color=darkseagreen4, label=builder];
m8_38 -> m8_46  [key=1, style=dashed, color=darkseagreen4, label=builder];
m8_38 -> m8_47  [key=1, style=dashed, color=darkseagreen4, label=builder];
m8_40 -> m8_41  [key=0, style=solid];
m8_40 -> m8_39  [key=0, style=solid];
m8_40 -> m8_55  [key=2, style=dotted];
m8_41 -> m8_42  [key=0, style=solid];
m8_41 -> m8_56  [key=2, style=dotted];
m8_45 -> m8_46  [key=0, style=solid];
m8_45 -> m8_44  [key=0, style=solid];
m8_45 -> m8_55  [key=2, style=dotted];
m8_46 -> m8_47  [key=0, style=solid];
m8_46 -> m8_56  [key=2, style=dotted];
m8_39 -> m8_40  [key=0, style=solid];
m8_39 -> m8_42  [key=0, style=solid];
m8_39 -> m8_41  [key=1, style=dashed, color=darkseagreen4, label=alias];
m8_42 -> m8_43  [key=0, style=solid];
m8_42 -> m8_44  [key=0, style=solid];
m8_43 -> m8_44  [key=0, style=solid];
m8_43 -> m8_57  [key=2, style=dotted];
m8_44 -> m8_45  [key=0, style=solid];
m8_44 -> m8_47  [key=0, style=solid];
m8_44 -> m8_46  [key=1, style=dashed, color=darkseagreen4, label=alias];
m8_48 -> m8_49  [key=0, style=solid];
m8_50 -> m8_35  [key=0, style=bold, color=blue];
m8_28 -> m8_29  [key=0, style=solid];
m8_28 -> m8_30  [key=1, style=dashed, color=darkseagreen4, label=ILog];
m8_28 -> m8_31  [key=1, style=dashed, color=darkseagreen4, label=ILog];
m8_29 -> m8_30  [key=0, style=solid];
m8_29 -> m8_33  [key=2, style=dotted];
m8_30 -> m8_31  [key=0, style=solid];
m8_30 -> m8_34  [key=2, style=dotted];
m8_31 -> m8_32  [key=0, style=solid];
m8_31 -> m8_34  [key=2, style=dotted];
m8_32 -> m8_28  [key=0, style=bold, color=blue];
m8_16 -> m8_17  [key=0, style=solid];
m8_17 -> m8_18  [key=0, style=solid];
m8_17 -> m8_19  [key=2, style=dotted];
m8_17 -> m8_14  [key=2, style=dotted];
m8_18 -> m8_16  [key=0, style=bold, color=blue];
m8_25 -> m8_26  [key=0, style=solid];
m8_25 -> m8_27  [key=2, style=dotted];
m8_2 -> m8_3  [key=0, style=solid];
m8_2 -> m8_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorageOptions"];
m8_2 -> m8_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorageOptions"];
m8_2 -> m8_8  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_2 -> m8_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorageOptions"];
m8_3 -> m8_4  [key=0, style=solid];
m8_3 -> m8_5  [key=0, style=solid];
m8_5 -> m8_6  [key=0, style=solid];
m8_5 -> m8_7  [key=0, style=solid];
m8_7 -> m8_8  [key=0, style=solid];
m8_8 -> m8_9  [key=0, style=solid];
m8_9 -> m8_10  [key=0, style=solid];
m8_9 -> m8_12  [key=0, style=solid];
m8_4 -> m8_12  [key=0, style=solid];
m8_4 -> m8_13  [key=2, style=dotted];
m8_6 -> m8_12  [key=0, style=solid];
m8_6 -> m8_13  [key=2, style=dotted];
m8_10 -> m8_11  [key=0, style=solid];
m8_10 -> m8_14  [key=2, style=dotted];
m8_11 -> m8_12  [key=0, style=solid];
m8_11 -> m8_15  [key=2, style=dotted];
m8_12 -> m8_2  [key=0, style=bold, color=blue];
m8_69 -> m8_70  [key=0, style=solid];
m8_59 -> m8_60  [key=0, style=solid];
m8_62 -> m8_63  [key=0, style=solid];
m8_66 -> m8_67  [key=0, style=solid];
m8_60 -> m8_61  [key=0, style=solid];
m8_60 -> m8_51  [key=2, style=dotted];
m8_61 -> m8_59  [key=0, style=bold, color=blue];
m8_63 -> m8_64  [key=0, style=solid];
m8_63 -> m8_65  [key=2, style=dotted];
m8_64 -> m8_62  [key=0, style=bold, color=blue];
m8_67 -> m8_68  [key=0, style=solid];
m8_68 -> m8_66  [key=0, style=bold, color=blue];
m8_70 -> m8_71  [key=0, style=solid];
m8_71 -> m8_69  [key=0, style=bold, color=blue];
m8_24 -> m8_25  [key=0, style=solid];
m8_26 -> m8_24  [key=0, style=bold, color=blue];
m8_0 -> m8_1  [key=0, style=solid];
m8_1 -> m8_0  [key=0, style=bold, color=blue];
m8_14 -> m8_72  [key=0, style=solid];
m8_72 -> m8_73  [key=0, style=solid];
m8_72 -> m8_76  [key=2, style=dotted];
m8_72 -> m8_74  [key=1, style=dashed, color=darkseagreen4, label=connection];
m8_73 -> m8_74  [key=0, style=solid];
m8_73 -> m8_77  [key=2, style=dotted];
m8_74 -> m8_75  [key=0, style=solid];
m8_75 -> m8_14  [key=0, style=bold, color=blue];
m8_78 -> m8_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m8_78 -> m8_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m8_78 -> m8_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m8_78 -> m8_17  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m8_78 -> m8_21  [key=1, style=dashed, color=green, label="HangFire.SqlServer.SqlServerStorage"];
m8_78 -> m8_25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m8_78 -> m8_30  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m8_78 -> m8_31  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m8_78 -> m8_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m8_78 -> m8_72  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m8_78 -> m8_22  [key=1, style=dashed, color=green, label="HangFire.SqlServer.SqlServerStorage"];
m9_8 -> m9_9  [key=0, style=solid];
m9_9 -> m9_10  [key=0, style=solid];
m9_9 -> m9_7  [key=2, style=dotted];
m9_9 -> m9_12  [key=2, style=dotted];
m9_10 -> m9_11  [key=0, style=solid];
m9_10 -> m9_13  [key=2, style=dotted];
m9_11 -> m9_8  [key=0, style=bold, color=blue];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_2  [key=0, style=solid];
m9_1 -> n36  [key=2, style=dotted];
m9_1 -> m9_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_2 -> m9_0  [key=0, style=bold, color=blue];
m9_4 -> m9_5  [key=0, style=solid];
m9_5 -> m9_6  [key=0, style=solid];
m9_5 -> m9_7  [key=2, style=dotted];
m9_6 -> m9_4  [key=0, style=bold, color=blue];
m9_14 -> m9_15  [key=0, style=solid];
m9_15 -> m9_16  [key=0, style=solid];
m9_15 -> m9_7  [key=2, style=dotted];
m9_15 -> m9_18  [key=2, style=dotted];
m9_16 -> m9_17  [key=0, style=solid];
m9_16 -> m9_19  [key=2, style=dotted];
m9_16 -> m9_20  [key=2, style=dotted];
m9_16 -> m9_21  [key=2, style=dotted];
m9_17 -> m9_14  [key=0, style=bold, color=blue];
m10_4 -> m10_5  [key=0, style=solid];
m10_4 -> m10_10  [key=2, style=dotted];
m10_5 -> m10_6  [key=0, style=solid];
m10_5 -> m10_7  [key=2, style=dotted];
m10_6 -> m10_4  [key=0, style=bold, color=blue];
m10_6 -> m10_7  [key=0, style=solid];
m10_6 -> m10_11  [key=2, style=dotted];
m10_13 -> m10_14  [key=0, style=solid, color=green];
m10_14 -> m10_15  [key=0, style=solid, color=green];
m10_14 -> m10_16  [key=2, style=dotted, color=green];
m10_14 -> m10_17  [key=2, style=dotted, color=green];
m10_15 -> m10_13  [key=0, style=bold, color=blue];
m10_0 -> m10_1  [key=0, style=solid];
m10_0 -> m10_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.JobStorage"];
m10_0 -> m10_3  [key=1, style=dashed, color=darkseagreen4, label=IOwinContext];
m10_0 -> m10_4  [key=1, style=dashed, color=darkseagreen4, label=IOwinContext];
m10_0 -> m10_5  [key=1, style=dashed, color=darkseagreen4, label=IOwinContext];
m10_0 -> m10_6  [key=1, style=dashed, color=darkseagreen4, label=IOwinContext];
m10_0 -> m10_7  [key=1, style=dashed, color=darkseagreen4, label=IOwinContext];
m10_1 -> m10_2  [key=0, style=solid];
m10_1 -> m10_1  [key=3, color=darkorchid, style=bold, label="Local variable object previousForm"];
m10_2 -> m10_3  [key=0, style=solid];
m10_2 -> m10_5  [key=0, style=solid];
m10_2 -> m10_9  [key=2, style=dotted];
m10_3 -> m10_4  [key=0, style=solid];
m10_3 -> m10_0  [key=0, style=bold, color=blue];
m10_7 -> m10_8  [key=0, style=solid];
m10_7 -> m10_12  [key=2, style=dotted];
m10_8 -> m10_0  [key=0, style=bold, color=blue];
m10_8 -> m10_9  [key=0, style=solid];
m10_133 -> m10_145  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m10_133 -> m10_134  [key=0, style=solid];
m10_133 -> m10_142  [key=3, color=darkorchid, style=bold, label="method methodReturn int RemoveTimedOutServers"];
m10_136 -> m10_137  [key=0, style=solid, color=green];
m10_136 -> m10_145  [key=1, style=dashed, color=green, label=utcNow];
m10_135 -> m10_136  [key=0, style=solid, color=green];
m10_135 -> m10_107  [key=2, style=dotted];
m10_135 -> m10_140  [key=1, style=dashed, color=darkseagreen4, label=heartbeats];
m10_135 -> m10_162  [key=1, style=dashed, color=darkseagreen4, label=heartbeats];
m10_135 -> m10_143  [key=1, style=dashed, color=darkseagreen4, label=heartbeats];
m10_137 -> m10_138  [key=0, style=solid];
m10_137 -> m10_151  [key=2, style=dotted];
m10_137 -> m10_140  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m10_137 -> m10_141  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m10_145 -> m10_146  [key=0, style=solid];
m10_145 -> m10_143  [key=0, style=solid];
m10_145 -> m10_155  [key=2, style=dotted];
m10_134 -> m10_135  [key=0, style=solid];
m10_134 -> m10_150  [key=2, style=dotted];
m10_134 -> m10_138  [key=1, style=dashed, color=darkseagreen4, label=serverNames];
m10_146 -> m10_146  [key=1, style=dashed, color=darkseagreen4, label=heartbeat];
m10_146 -> m10_147  [key=0, style=solid];
m10_146 -> m10_116  [key=2, style=dotted];
m10_140 -> m10_138  [key=0, style=solid];
m10_140 -> m10_44  [key=2, style=dotted];
m10_140 -> m10_156  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_140 -> m10_161  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_143 -> m10_144  [key=0, style=solid];
m10_143 -> m10_148  [key=0, style=solid];
m10_138 -> m10_139  [key=0, style=solid];
m10_138 -> m10_141  [key=0, style=solid];
m10_141 -> m10_142  [key=0, style=solid];
m10_141 -> m10_152  [key=2, style=dotted];
m10_144 -> m10_145  [key=0, style=solid];
m10_144 -> m10_146  [key=1, style=dashed, color=darkseagreen4, label=heartbeat];
m10_144 -> m10_144  [key=1, style=dashed, color=darkseagreen4, label=heartbeat];
m10_144 -> m10_153  [key=2, style=dotted];
m10_144 -> m10_154  [key=2, style=dotted];
m10_147 -> m10_143  [key=0, style=solid];
m10_147 -> m10_147  [key=1, style=dashed, color=darkseagreen4, label=removedServerCount];
m10_147 -> m10_148  [key=1, style=dashed, color=darkseagreen4, label=removedServerCount];
m10_139 -> m10_140  [key=0, style=solid];
m10_139 -> m10_162  [key=1, style=dashed, color=darkseagreen4, label=name];
m10_139 -> m10_138  [key=3, color=darkorchid, style=bold, label="Local variable var name"];
m10_139 -> m10_157  [key=1, style=dashed, color=darkseagreen4, label=name];
m10_142 -> m10_143  [key=0, style=solid];
m10_142 -> m10_147  [key=1, style=dashed, color=darkseagreen4, label=removedServerCount];
m10_142 -> m10_142  [key=3, color=darkorchid, style=bold, label="Local variable int removedServerCount"];
m10_142 -> m10_148  [key=1, style=dashed, color=darkseagreen4, label=removedServerCount];
m10_148 -> m10_149  [key=0, style=solid];
m10_149 -> m10_133  [key=0, style=bold, color=blue];
m10_130 -> m10_131  [key=0, style=solid];
m10_131 -> m10_21  [key=2, style=dotted];
m10_131 -> m10_77  [key=2, style=dotted];
m10_131 -> m10_132  [key=0, style=solid];
m10_131 -> m10_43  [key=2, style=dotted];
m10_132 -> m10_130  [key=0, style=bold, color=blue];
m10_119 -> m10_126  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_119 -> m10_44  [key=2, style=dotted];
m10_119 -> m10_120  [key=0, style=solid];
m10_116 -> m10_127  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_116 -> m10_113  [key=3, color=darkorchid, style=bold, label="Parameter variable string serverId"];
m10_116 -> m10_117  [key=0, style=solid];
m10_116 -> m10_118  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_116 -> m10_123  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_116 -> m10_119  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_117 -> m10_12  [key=2, style=dotted];
m10_117 -> m10_118  [key=0, style=solid];
m10_117 -> m10_119  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m10_117 -> m10_120  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m10_118 -> m10_44  [key=2, style=dotted];
m10_118 -> m10_119  [key=0, style=solid];
m10_118 -> m10_122  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_120 -> m10_45  [key=2, style=dotted];
m10_120 -> m10_121  [key=0, style=solid];
m10_121 -> m10_116  [key=0, style=bold, color=blue];
m10_86 -> m10_87  [key=0, style=solid];
m10_87 -> m10_88  [key=0, style=solid];
m10_87 -> m10_89  [key=2, style=dotted];
m10_87 -> m10_90  [key=2, style=dotted];
m10_88 -> m10_86  [key=0, style=bold, color=blue];
m10_9 -> m10_10  [key=0, style=solid];
m10_9 -> m10_11  [key=2, style=dotted];
m10_9 -> m10_12  [key=2, style=dotted];
m10_10 -> m10_8  [key=0, style=bold, color=blue];
m10_78 -> m10_79  [key=0, style=solid];
m10_79 -> m10_21  [key=2, style=dotted];
m10_79 -> m10_80  [key=0, style=solid];
m10_79 -> m10_81  [key=2, style=dotted];
m10_80 -> m10_78  [key=0, style=bold, color=blue];
m10_54 -> m10_55  [key=0, style=solid];
m10_54 -> m10_56  [key=3, color=darkorchid, style=bold, label="method methodReturn HangFire.Storage.StateAndInvocationData GetJobStateAndInvocationData"];
m10_55 -> m10_21  [key=2, style=dotted];
m10_55 -> m10_56  [key=0, style=solid];
m10_55 -> m10_70  [key=2, style=dotted];
m10_55 -> m10_61  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m10_55 -> m10_62  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m10_55 -> m10_63  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m10_55 -> m10_64  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m10_55 -> m10_65  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m10_55 -> m10_66  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m10_55 -> m10_68  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m10_56 -> m10_57  [key=0, style=solid];
m10_56 -> m10_58  [key=0, style=solid];
m10_61 -> m10_62  [key=0, style=solid];
m10_61 -> m10_63  [key=0, style=solid];
m10_61 -> m10_71  [key=2, style=dotted];
m10_62 -> m10_63  [key=0, style=solid];
m10_62 -> m10_67  [key=1, style=dashed, color=darkseagreen4, label=type];
m10_63 -> m10_64  [key=0, style=solid];
m10_63 -> m10_65  [key=0, style=solid];
m10_63 -> m10_71  [key=2, style=dotted];
m10_64 -> m10_65  [key=0, style=solid];
m10_64 -> m10_67  [key=1, style=dashed, color=darkseagreen4, label=method];
m10_65 -> m10_66  [key=0, style=solid];
m10_65 -> m10_67  [key=0, style=solid];
m10_65 -> m10_71  [key=2, style=dotted];
m10_66 -> m10_67  [key=0, style=solid];
m10_68 -> m10_69  [key=0, style=solid];
m10_68 -> m10_73  [key=2, style=dotted];
m10_68 -> m10_71  [key=2, style=dotted];
m10_58 -> m10_56  [key=3, color=darkorchid, style=bold, label="Local variable string type"];
m10_58 -> m10_59  [key=0, style=solid];
m10_58 -> m10_67  [key=1, style=dashed, color=darkseagreen4, label=type];
m10_59 -> m10_56  [key=3, color=darkorchid, style=bold, label="Local variable string method"];
m10_59 -> m10_60  [key=0, style=solid];
m10_59 -> m10_67  [key=1, style=dashed, color=darkseagreen4, label=method];
m10_60 -> m10_56  [key=3, color=darkorchid, style=bold, label="Local variable string parameterTypes"];
m10_60 -> m10_61  [key=0, style=solid];
m10_60 -> m10_67  [key=1, style=dashed, color=darkseagreen4, label=parameterTypes];
m10_57 -> m10_69  [key=0, style=solid];
m10_67 -> m10_68  [key=0, style=solid];
m10_67 -> m10_72  [key=2, style=dotted];
m10_69 -> m10_54  [key=0, style=bold, color=blue];
m10_171 -> m10_182  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_171 -> m10_44  [key=2, style=dotted];
m10_171 -> m10_172  [key=0, style=solid];
m10_85 -> m10_175  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_85 -> m10_179  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_85 -> m10_183  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_85 -> m10_168  [key=0, style=solid];
m10_85 -> m10_169  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_85 -> m10_170  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_85 -> m10_171  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_168 -> m10_12  [key=2, style=dotted];
m10_168 -> m10_169  [key=0, style=solid];
m10_168 -> m10_170  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m10_168 -> m10_171  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m10_168 -> m10_172  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m10_169 -> m10_174  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_169 -> m10_44  [key=2, style=dotted];
m10_169 -> m10_170  [key=0, style=solid];
m10_170 -> m10_178  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_170 -> m10_44  [key=2, style=dotted];
m10_170 -> m10_171  [key=0, style=solid];
m10_172 -> m10_45  [key=2, style=dotted];
m10_172 -> m10_173  [key=0, style=solid];
m10_173 -> m10_85  [key=0, style=bold, color=blue];
m10_91 -> m10_92  [key=0, style=solid];
m10_91 -> m10_105  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_91 -> m10_110  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_91 -> m10_93  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_91 -> m10_101  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_91 -> m10_94  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_91 -> m10_95  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m10_91 -> m10_97  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_92 -> m10_93  [key=0, style=solid];
m10_92 -> m10_12  [key=2, style=dotted];
m10_92 -> m10_94  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m10_92 -> m10_97  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m10_92 -> m10_98  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m10_93 -> m10_94  [key=0, style=solid];
m10_93 -> m10_44  [key=2, style=dotted];
m10_93 -> m10_100  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_94 -> m10_95  [key=0, style=solid];
m10_94 -> m10_44  [key=2, style=dotted];
m10_94 -> m10_104  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_97 -> m10_95  [key=0, style=solid];
m10_97 -> m10_44  [key=2, style=dotted];
m10_97 -> m10_109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_98 -> m10_99  [key=0, style=solid];
m10_98 -> m10_45  [key=2, style=dotted];
m10_96 -> m10_110  [key=1, style=dashed, color=darkseagreen4, label=queue1];
m10_96 -> m10_97  [key=0, style=solid];
m10_96 -> m10_95  [key=3, color=darkorchid, style=bold, label="Local variable string queue1"];
m10_95 -> m10_98  [key=0, style=solid];
m10_95 -> m10_96  [key=0, style=solid];
m10_99 -> m10_91  [key=0, style=bold, color=blue];
m10_113 -> m10_114  [key=0, style=solid];
m10_114 -> m10_115  [key=0, style=solid];
m10_114 -> m10_116  [key=2, style=dotted];
m10_115 -> m10_113  [key=0, style=bold, color=blue];
m10_24 -> m10_51  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m10_24 -> m10_34  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m10_24 -> m10_25  [key=0, style=solid];
m10_24 -> m10_26  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m10_24 -> m10_27  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Storage.InvocationData"];
m10_24 -> m10_30  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m10_32 -> m10_33  [key=0, style=solid];
m10_32 -> m10_12  [key=2, style=dotted];
m10_32 -> m10_34  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m10_32 -> m10_35  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m10_31 -> m10_32  [key=0, style=solid];
m10_31 -> m10_43  [key=2, style=dotted];
m10_31 -> m10_41  [key=2, style=dotted];
m10_33 -> m10_34  [key=0, style=solid];
m10_33 -> m10_44  [key=2, style=dotted];
m10_33 -> m10_46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_34 -> m10_35  [key=0, style=solid];
m10_34 -> m10_44  [key=2, style=dotted];
m10_34 -> m10_50  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_35 -> m10_36  [key=0, style=solid];
m10_35 -> m10_45  [key=2, style=dotted];
m10_25 -> m10_51  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m10_25 -> m10_47  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m10_25 -> m10_33  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m10_25 -> m10_34  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m10_25 -> m10_26  [key=0, style=solid];
m10_25 -> m10_38  [key=2, style=dotted];
m10_25 -> m10_39  [key=2, style=dotted];
m10_25 -> m10_36  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m10_26 -> m10_47  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m10_26 -> m10_31  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m10_26 -> m10_33  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m10_26 -> m10_27  [key=0, style=solid];
m10_26 -> m10_40  [key=2, style=dotted];
m10_26 -> m10_28  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m10_26 -> m10_29  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m10_26 -> m10_30  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m10_30 -> m10_31  [key=0, style=solid];
m10_30 -> m10_42  [key=2, style=dotted];
m10_30 -> m10_41  [key=2, style=dotted];
m10_36 -> m10_37  [key=0, style=solid];
m10_27 -> m10_41  [key=2, style=dotted];
m10_27 -> m10_27  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Storage.InvocationData"];
m10_27 -> m10_28  [key=0, style=solid];
m10_28 -> m10_41  [key=2, style=dotted];
m10_28 -> m10_28  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Storage.InvocationData"];
m10_28 -> m10_29  [key=0, style=solid];
m10_29 -> m10_30  [key=0, style=solid];
m10_29 -> m10_41  [key=2, style=dotted];
m10_29 -> m10_29  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Storage.InvocationData"];
m10_37 -> m10_24  [key=0, style=bold, color=blue];
m10_122 -> m10_123  [key=0, style=solid];
m10_51 -> m10_21  [key=2, style=dotted];
m10_51 -> m10_52  [key=0, style=solid];
m10_51 -> m10_53  [key=2, style=dotted];
m10_47 -> m10_21  [key=2, style=dotted];
m10_47 -> m10_48  [key=0, style=solid];
m10_47 -> m10_49  [key=2, style=dotted];
m10_105 -> m10_21  [key=2, style=dotted];
m10_105 -> m10_106  [key=0, style=solid];
m10_105 -> m10_107  [key=2, style=dotted];
m10_105 -> m10_108  [key=2, style=dotted];
m10_105 -> m10_43  [key=2, style=dotted];
m10_105 -> m10_49  [key=2, style=dotted];
m10_110 -> m10_21  [key=2, style=dotted];
m10_110 -> m10_111  [key=0, style=solid];
m10_110 -> m10_112  [key=2, style=dotted];
m10_127 -> m10_21  [key=2, style=dotted];
m10_127 -> m10_128  [key=0, style=solid];
m10_127 -> m10_129  [key=2, style=dotted];
m10_175 -> m10_21  [key=2, style=dotted];
m10_175 -> m10_176  [key=0, style=solid];
m10_175 -> m10_177  [key=2, style=dotted];
m10_179 -> m10_21  [key=2, style=dotted];
m10_179 -> m10_180  [key=0, style=solid];
m10_179 -> m10_181  [key=2, style=dotted];
m10_183 -> m10_21  [key=2, style=dotted];
m10_183 -> m10_184  [key=0, style=solid];
m10_183 -> m10_181  [key=2, style=dotted];
m10_162 -> m10_163  [key=0, style=solid];
m10_162 -> m10_164  [key=2, style=dotted];
m10_162 -> m10_165  [key=2, style=dotted];
m10_162 -> m10_166  [key=2, style=dotted];
m10_162 -> m10_167  [key=2, style=dotted];
m10_50 -> m10_51  [key=0, style=solid];
m10_52 -> m10_50  [key=0, style=bold, color=blue];
m10_46 -> m10_47  [key=0, style=solid];
m10_48 -> m10_46  [key=0, style=bold, color=blue];
m10_104 -> m10_105  [key=0, style=solid];
m10_106 -> m10_104  [key=0, style=bold, color=blue];
m10_109 -> m10_110  [key=0, style=solid];
m10_111 -> m10_109  [key=0, style=bold, color=blue];
m10_126 -> m10_127  [key=0, style=solid];
m10_128 -> m10_126  [key=0, style=bold, color=blue];
m10_174 -> m10_175  [key=0, style=solid];
m10_176 -> m10_174  [key=0, style=bold, color=blue];
m10_178 -> m10_179  [key=0, style=solid];
m10_180 -> m10_178  [key=0, style=bold, color=blue];
m10_182 -> m10_183  [key=0, style=solid];
m10_184 -> m10_182  [key=0, style=bold, color=blue];
m10_156 -> m10_157  [key=0, style=solid];
m10_161 -> m10_162  [key=0, style=solid];
m10_163 -> m10_161  [key=0, style=bold, color=blue];
m10_101 -> m10_102  [key=0, style=solid];
m10_101 -> m10_103  [key=2, style=dotted];
m10_100 -> m10_101  [key=0, style=solid];
m10_123 -> m10_124  [key=0, style=solid];
m10_123 -> m10_125  [key=2, style=dotted];
m10_157 -> m10_158  [key=0, style=solid];
m10_157 -> m10_159  [key=2, style=dotted];
m10_157 -> m10_160  [key=2, style=dotted];
m10_158 -> m10_156  [key=0, style=bold, color=blue];
m10_102 -> m10_100  [key=0, style=bold, color=blue];
m10_124 -> m10_122  [key=0, style=bold, color=blue];
m10_18 -> m10_19  [key=0, style=solid, color=green];
m10_19 -> m10_20  [key=0, style=solid, color=green];
m10_19 -> m10_21  [key=2, style=dotted, color=green];
m10_19 -> m10_22  [key=2, style=dotted, color=green];
m10_19 -> m10_23  [key=2, style=dotted, color=green];
m10_20 -> m10_18  [key=0, style=bold, color=blue];
m10_74 -> m10_75  [key=0, style=solid, color=green];
m10_75 -> m10_76  [key=0, style=solid, color=green];
m10_75 -> m10_21  [key=2, style=dotted, color=green];
m10_75 -> m10_77  [key=2, style=dotted, color=green];
m10_76 -> m10_74  [key=0, style=bold, color=blue];
m10_82 -> m10_83  [key=0, style=solid];
m10_83 -> m10_84  [key=0, style=solid];
m10_83 -> m10_85  [key=2, style=dotted];
m10_84 -> m10_82  [key=0, style=bold, color=blue];
m10_185 -> m10_14  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisConnection"];
m10_185 -> m10_19  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisConnection"];
m10_185 -> m10_75  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisConnection"];
m10_185 -> m10_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m10_185 -> m10_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m10_185 -> m10_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m10_185 -> m10_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m10_185 -> m10_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m10_185 -> m10_55  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m10_185 -> m10_79  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m10_185 -> m10_83  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m10_185 -> m10_87  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m10_185 -> m10_92  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m10_185 -> m10_114  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m10_185 -> m10_131  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m10_185 -> m10_134  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m10_185 -> m10_137  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m10_185 -> m10_146  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m10_186 -> m10_51  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m10_186 -> m10_47  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m10_188 -> m10_51  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m10_187 -> m10_47  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m10_189 -> m10_105  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_189 -> m10_110  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_189 -> m10_101  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_190 -> m10_105  [key=1, style=dashed, color=darkseagreen4, label=int];
m10_191 -> m10_110  [key=1, style=dashed, color=darkseagreen4, label=queue1];
m10_192 -> m10_127  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_192 -> m10_123  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_195 -> m10_175  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_196 -> m10_175  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_196 -> m10_179  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_196 -> m10_183  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_193 -> m10_162  [key=1, style=dashed, color=darkseagreen4, label=name];
m10_193 -> m10_157  [key=1, style=dashed, color=darkseagreen4, label=name];
m10_194 -> m10_162  [key=1, style=dashed, color=darkseagreen4, label=heartbeats];
m11_9 -> m11_10  [key=0, style=solid];
m11_10 -> m11_11  [key=0, style=solid];
m11_10 -> m11_13  [key=2, style=dotted];
m11_11 -> m11_12  [key=0, style=solid];
m11_12 -> m11_9  [key=0, style=bold, color=blue];
m11_65 -> m11_66  [key=0, style=solid];
m11_66 -> m11_67  [key=0, style=solid];
m11_66 -> m11_38  [key=2, style=dotted];
m11_67 -> m11_68  [key=0, style=solid];
m11_67 -> m11_22  [key=2, style=dotted];
m11_68 -> m11_69  [key=0, style=solid];
m11_68 -> m11_39  [key=2, style=dotted];
m11_69 -> m11_70  [key=0, style=solid];
m11_69 -> m11_53  [key=2, style=dotted];
m11_70 -> m11_71  [key=0, style=solid];
m11_70 -> m11_53  [key=2, style=dotted];
m11_71 -> m11_72  [key=0, style=solid];
m11_71 -> m11_40  [key=2, style=dotted];
m11_72 -> m11_73  [key=0, style=solid];
m11_72 -> m11_41  [key=2, style=dotted];
m11_73 -> m11_74  [key=0, style=solid];
m11_73 -> m11_53  [key=2, style=dotted];
m11_74 -> m11_75  [key=0, style=solid];
m11_74 -> m11_53  [key=2, style=dotted];
m11_75 -> m11_76  [key=0, style=solid];
m11_75 -> m11_53  [key=2, style=dotted];
m11_76 -> m11_77  [key=0, style=solid];
m11_76 -> m11_26  [key=2, style=dotted];
m11_77 -> m11_65  [key=0, style=bold, color=blue];
m11_78 -> m11_79  [key=0, style=solid];
m11_79 -> m11_80  [key=0, style=solid];
m11_79 -> m11_38  [key=2, style=dotted];
m11_80 -> m11_81  [key=0, style=solid];
m11_80 -> m11_22  [key=2, style=dotted];
m11_81 -> m11_82  [key=0, style=solid];
m11_81 -> m11_39  [key=2, style=dotted];
m11_82 -> m11_83  [key=0, style=solid];
m11_82 -> m11_53  [key=2, style=dotted];
m11_83 -> m11_84  [key=0, style=solid];
m11_83 -> m11_40  [key=2, style=dotted];
m11_84 -> m11_85  [key=0, style=solid];
m11_84 -> m11_41  [key=2, style=dotted];
m11_85 -> m11_86  [key=0, style=solid];
m11_85 -> m11_53  [key=2, style=dotted];
m11_86 -> m11_87  [key=0, style=solid];
m11_86 -> m11_53  [key=2, style=dotted];
m11_87 -> m11_88  [key=0, style=solid];
m11_87 -> m11_53  [key=2, style=dotted];
m11_88 -> m11_89  [key=0, style=solid];
m11_88 -> m11_26  [key=2, style=dotted];
m11_89 -> m11_78  [key=0, style=bold, color=blue];
m11_26 -> m11_27  [key=0, style=solid];
m11_27 -> m11_28  [key=0, style=solid];
m11_27 -> m11_29  [key=2, style=dotted];
m11_28 -> m11_26  [key=0, style=bold, color=blue];
m11_22 -> m11_23  [key=0, style=solid];
m11_23 -> m11_24  [key=0, style=solid];
m11_23 -> m11_25  [key=2, style=dotted];
m11_24 -> m11_22  [key=0, style=bold, color=blue];
m11_0 -> m11_1  [key=0, style=solid];
m11_1 -> m11_2  [key=0, style=solid];
m11_1 -> m11_5  [key=2, style=dotted];
m11_2 -> m11_3  [key=0, style=solid];
m11_2 -> m11_6  [key=2, style=dotted];
m11_2 -> m11_7  [key=2, style=dotted];
m11_3 -> m11_4  [key=0, style=solid];
m11_3 -> m11_8  [key=2, style=dotted];
m11_4 -> m11_0  [key=0, style=bold, color=blue];
m11_14 -> m11_15  [key=0, style=solid];
m11_15 -> m11_16  [key=0, style=solid];
m11_15 -> m11_17  [key=0, style=solid];
m11_16 -> m11_17  [key=0, style=solid];
m11_16 -> m11_0  [key=2, style=dotted];
m11_17 -> m11_14  [key=0, style=bold, color=blue];
m11_90 -> m11_91  [key=0, style=solid];
m11_91 -> m11_92  [key=0, style=solid];
m11_91 -> m11_38  [key=2, style=dotted];
m11_92 -> m11_93  [key=0, style=solid];
m11_92 -> m11_22  [key=2, style=dotted];
m11_93 -> m11_94  [key=0, style=solid];
m11_93 -> m11_39  [key=2, style=dotted];
m11_94 -> m11_95  [key=0, style=solid];
m11_94 -> m11_53  [key=2, style=dotted];
m11_95 -> m11_96  [key=0, style=solid];
m11_95 -> m11_53  [key=2, style=dotted];
m11_96 -> m11_97  [key=0, style=solid];
m11_96 -> m11_40  [key=2, style=dotted];
m11_97 -> m11_98  [key=0, style=solid];
m11_97 -> m11_41  [key=2, style=dotted];
m11_98 -> m11_99  [key=0, style=solid];
m11_98 -> m11_53  [key=2, style=dotted];
m11_99 -> m11_100  [key=0, style=solid];
m11_99 -> m11_26  [key=2, style=dotted];
m11_100 -> m11_90  [key=0, style=bold, color=blue];
m11_122 -> m11_123  [key=0, style=solid];
m11_123 -> m11_124  [key=0, style=solid];
m11_123 -> m11_38  [key=2, style=dotted];
m11_124 -> m11_125  [key=0, style=solid];
m11_124 -> m11_22  [key=2, style=dotted];
m11_125 -> m11_126  [key=0, style=solid];
m11_125 -> m11_39  [key=2, style=dotted];
m11_126 -> m11_127  [key=0, style=solid];
m11_126 -> m11_53  [key=2, style=dotted];
m11_127 -> m11_128  [key=0, style=solid];
m11_127 -> m11_40  [key=2, style=dotted];
m11_128 -> m11_129  [key=0, style=solid];
m11_128 -> m11_41  [key=2, style=dotted];
m11_129 -> m11_130  [key=0, style=solid];
m11_129 -> m11_53  [key=2, style=dotted];
m11_130 -> m11_131  [key=0, style=solid];
m11_130 -> m11_26  [key=2, style=dotted];
m11_131 -> m11_122  [key=0, style=bold, color=blue];
m11_101 -> m11_102  [key=0, style=solid];
m11_102 -> m11_103  [key=0, style=solid];
m11_102 -> m11_38  [key=2, style=dotted];
m11_103 -> m11_104  [key=0, style=solid];
m11_103 -> m11_22  [key=2, style=dotted];
m11_104 -> m11_105  [key=0, style=solid];
m11_104 -> m11_39  [key=2, style=dotted];
m11_105 -> m11_106  [key=0, style=solid];
m11_105 -> m11_53  [key=2, style=dotted];
m11_106 -> m11_107  [key=0, style=solid];
m11_106 -> m11_53  [key=2, style=dotted];
m11_107 -> m11_108  [key=0, style=solid];
m11_107 -> m11_40  [key=2, style=dotted];
m11_108 -> m11_109  [key=0, style=solid];
m11_108 -> m11_41  [key=2, style=dotted];
m11_109 -> m11_110  [key=0, style=solid];
m11_109 -> m11_112  [key=2, style=dotted];
m11_110 -> m11_111  [key=0, style=solid];
m11_110 -> m11_26  [key=2, style=dotted];
m11_111 -> m11_101  [key=0, style=bold, color=blue];
m11_42 -> m11_43  [key=0, style=solid];
m11_43 -> m11_44  [key=0, style=solid];
m11_43 -> m11_38  [key=2, style=dotted];
m11_44 -> m11_45  [key=0, style=solid];
m11_44 -> m11_22  [key=2, style=dotted];
m11_45 -> m11_46  [key=0, style=solid];
m11_45 -> m11_39  [key=2, style=dotted];
m11_46 -> m11_47  [key=0, style=solid];
m11_46 -> m11_53  [key=2, style=dotted];
m11_47 -> m11_48  [key=0, style=solid];
m11_47 -> m11_40  [key=2, style=dotted];
m11_48 -> m11_49  [key=0, style=solid];
m11_48 -> m11_41  [key=2, style=dotted];
m11_49 -> m11_50  [key=0, style=solid];
m11_49 -> m11_53  [key=2, style=dotted];
m11_50 -> m11_51  [key=0, style=solid];
m11_50 -> m11_53  [key=2, style=dotted];
m11_51 -> m11_52  [key=0, style=solid];
m11_51 -> m11_26  [key=2, style=dotted];
m11_52 -> m11_42  [key=0, style=bold, color=blue];
m11_54 -> m11_55  [key=0, style=solid];
m11_55 -> m11_56  [key=0, style=solid];
m11_55 -> m11_38  [key=2, style=dotted];
m11_56 -> m11_57  [key=0, style=solid];
m11_56 -> m11_22  [key=2, style=dotted];
m11_57 -> m11_58  [key=0, style=solid];
m11_57 -> m11_39  [key=2, style=dotted];
m11_58 -> m11_59  [key=0, style=solid];
m11_58 -> m11_53  [key=2, style=dotted];
m11_59 -> m11_60  [key=0, style=solid];
m11_59 -> m11_40  [key=2, style=dotted];
m11_60 -> m11_61  [key=0, style=solid];
m11_60 -> m11_41  [key=2, style=dotted];
m11_61 -> m11_62  [key=0, style=solid];
m11_61 -> m11_53  [key=2, style=dotted];
m11_62 -> m11_63  [key=0, style=solid];
m11_62 -> m11_53  [key=2, style=dotted];
m11_63 -> m11_64  [key=0, style=solid];
m11_63 -> m11_26  [key=2, style=dotted];
m11_64 -> m11_54  [key=0, style=bold, color=blue];
m11_30 -> m11_31  [key=0, style=solid];
m11_31 -> m11_32  [key=0, style=solid];
m11_31 -> m11_38  [key=2, style=dotted];
m11_32 -> m11_33  [key=0, style=solid];
m11_32 -> m11_22  [key=2, style=dotted];
m11_33 -> m11_34  [key=0, style=solid];
m11_33 -> m11_39  [key=2, style=dotted];
m11_34 -> m11_35  [key=0, style=solid];
m11_34 -> m11_40  [key=2, style=dotted];
m11_35 -> m11_36  [key=0, style=solid];
m11_35 -> m11_41  [key=2, style=dotted];
m11_36 -> m11_37  [key=0, style=solid];
m11_36 -> m11_26  [key=2, style=dotted];
m11_37 -> m11_30  [key=0, style=bold, color=blue];
m11_18 -> m11_19  [key=0, style=solid];
m11_19 -> m11_20  [key=0, style=solid];
m11_19 -> m11_21  [key=2, style=dotted];
m11_20 -> m11_18  [key=0, style=bold, color=blue];
m11_132 -> m11_133  [key=0, style=solid];
m11_133 -> m11_134  [key=0, style=solid];
m11_133 -> m11_38  [key=2, style=dotted];
m11_134 -> m11_135  [key=0, style=solid];
m11_134 -> m11_22  [key=2, style=dotted];
m11_135 -> m11_136  [key=0, style=solid];
m11_135 -> m11_39  [key=2, style=dotted];
m11_136 -> m11_137  [key=0, style=solid];
m11_136 -> m11_53  [key=2, style=dotted];
m11_137 -> m11_138  [key=0, style=solid];
m11_137 -> m11_53  [key=2, style=dotted];
m11_138 -> m11_139  [key=0, style=solid];
m11_138 -> m11_40  [key=2, style=dotted];
m11_139 -> m11_140  [key=0, style=solid];
m11_139 -> m11_41  [key=2, style=dotted];
m11_140 -> m11_141  [key=0, style=solid];
m11_140 -> m11_112  [key=2, style=dotted];
m11_141 -> m11_142  [key=0, style=solid];
m11_141 -> m11_26  [key=2, style=dotted];
m11_142 -> m11_132  [key=0, style=bold, color=blue];
m11_113 -> m11_114  [key=0, style=solid];
m11_114 -> m11_115  [key=0, style=solid];
m11_114 -> m11_38  [key=2, style=dotted];
m11_115 -> m11_116  [key=0, style=solid];
m11_115 -> m11_22  [key=2, style=dotted];
m11_116 -> m11_117  [key=0, style=solid];
m11_116 -> m11_53  [key=2, style=dotted];
m11_117 -> m11_118  [key=0, style=solid];
m11_117 -> m11_53  [key=2, style=dotted];
m11_118 -> m11_119  [key=0, style=solid];
m11_118 -> m11_40  [key=2, style=dotted];
m11_119 -> m11_120  [key=0, style=solid];
m11_119 -> m11_41  [key=2, style=dotted];
m11_120 -> m11_121  [key=0, style=solid];
m11_120 -> m11_26  [key=2, style=dotted];
m11_121 -> m11_113  [key=0, style=bold, color=blue];
m11_143 -> m11_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m11_143 -> m11_36  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m11_143 -> m11_44  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m11_143 -> m11_51  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m11_143 -> m11_56  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m11_143 -> m11_63  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m11_143 -> m11_67  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m11_143 -> m11_76  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m11_143 -> m11_80  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m11_143 -> m11_88  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m11_143 -> m11_92  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m11_143 -> m11_99  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m11_143 -> m11_103  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m11_143 -> m11_110  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m11_143 -> m11_115  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m11_143 -> m11_120  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m11_143 -> m11_124  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m11_143 -> m11_130  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m11_143 -> m11_134  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m11_143 -> m11_141  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m12_375 -> m12_376  [key=0, style=solid];
m12_376 -> m12_377  [key=0, style=solid];
m12_376 -> m12_12  [key=2, style=dotted];
m12_376 -> m12_378  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_377 -> m12_375  [key=0, style=bold, color=blue];
m12_432 -> m12_433  [key=0, style=solid];
m12_433 -> m12_434  [key=0, style=solid];
m12_433 -> m12_12  [key=2, style=dotted];
m12_433 -> m12_435  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_434 -> m12_432  [key=0, style=bold, color=blue];
m12_0 -> m12_1  [key=0, style=solid, color=red];
m12_1 -> m12_2  [key=0, style=solid, color=red];
m12_1 -> m12_81  [key=2, style=dotted, color=green];
m12_1 -> m12_4  [key=2, style=dotted, color=green];
m12_1 -> m12_3  [key=2, style=dotted, color=red];
m12_2 -> m12_0  [key=0, style=bold, color=blue];
m12_299 -> m12_300  [key=0, style=solid];
m12_300 -> m12_301  [key=0, style=solid];
m12_300 -> m12_12  [key=2, style=dotted];
m12_300 -> m12_302  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_301 -> m12_299  [key=0, style=bold, color=blue];
m12_235 -> m12_236  [key=0, style=solid];
m12_236 -> m12_237  [key=0, style=solid];
m12_236 -> m12_12  [key=2, style=dotted];
m12_236 -> m12_238  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_237 -> m12_235  [key=0, style=bold, color=blue];
m12_131 -> m12_132  [key=0, style=solid, color=red];
m12_132 -> m12_133  [key=0, style=solid, color=red];
m12_132 -> m12_12  [key=2, style=dotted, color=red];
m12_132 -> m12_134  [key=1, style=dashed, color=red, label="lambda expression"];
m12_133 -> m12_131  [key=0, style=bold, color=blue];
m12_444 -> m12_445  [key=0, style=solid];
m12_445 -> m12_446  [key=0, style=solid];
m12_445 -> m12_12  [key=2, style=dotted];
m12_445 -> m12_447  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_446 -> m12_444  [key=0, style=bold, color=blue];
m12_145 -> m12_146  [key=0, style=solid];
m12_146 -> m12_147  [key=0, style=solid];
m12_146 -> m12_22  [key=2, style=dotted];
m12_146 -> m12_23  [key=2, style=dotted];
m12_147 -> m12_145  [key=0, style=bold, color=blue];
m12_399 -> m12_400  [key=0, style=solid];
m12_400 -> m12_401  [key=0, style=solid];
m12_400 -> m12_12  [key=2, style=dotted];
m12_400 -> m12_402  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_401 -> m12_399  [key=0, style=bold, color=blue];
m12_148 -> m12_149  [key=0, style=solid];
m12_149 -> m12_150  [key=0, style=solid];
m12_149 -> m12_12  [key=2, style=dotted];
m12_149 -> m12_151  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_150 -> m12_148  [key=0, style=bold, color=blue];
m12_97 -> m12_98  [key=0, style=solid];
m12_98 -> m12_99  [key=0, style=solid];
m12_98 -> m12_102  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_98 -> m12_9  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_99 -> m12_100  [key=0, style=solid];
m12_99 -> m12_12  [key=2, style=dotted];
m12_99 -> m12_101  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_100 -> m12_97  [key=0, style=bold, color=blue];
m12_206 -> m12_207  [key=0, style=solid];
m12_207 -> m12_208  [key=0, style=solid];
m12_207 -> m12_12  [key=2, style=dotted];
m12_207 -> m12_209  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_208 -> m12_206  [key=0, style=bold, color=blue];
m12_223 -> m12_224  [key=0, style=solid];
m12_224 -> m12_225  [key=0, style=solid];
m12_224 -> m12_12  [key=2, style=dotted];
m12_224 -> m12_226  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_225 -> m12_223  [key=0, style=bold, color=blue];
m12_387 -> m12_388  [key=0, style=solid];
m12_388 -> m12_389  [key=0, style=solid];
m12_388 -> m12_12  [key=2, style=dotted];
m12_388 -> m12_390  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_389 -> m12_387  [key=0, style=bold, color=blue];
m12_162 -> m12_163  [key=0, style=solid];
m12_163 -> m12_164  [key=0, style=solid];
m12_163 -> m12_12  [key=2, style=dotted];
m12_163 -> m12_165  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_164 -> m12_162  [key=0, style=bold, color=blue];
m12_25 -> m12_474  [key=0, style=solid, color=red];
m12_25 -> m12_475  [key=1, style=dashed, color=darkseagreen4, label="System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>"];
m12_474 -> m12_475  [key=0, style=solid, color=red];
m12_474 -> m12_7  [key=2, style=dotted, color=red];
m12_474 -> m12_476  [key=1, style=dashed, color=red, label=transaction];
m12_475 -> m12_476  [key=0, style=solid];
m12_475 -> m12_473  [key=2, style=dotted];
m12_476 -> m12_477  [key=0, style=solid];
m12_476 -> m12_478  [key=2, style=dotted];
m12_477 -> m12_25  [key=0, style=bold, color=blue];
m12_324 -> m12_325  [key=0, style=solid];
m12_325 -> m12_326  [key=0, style=solid];
m12_325 -> m12_12  [key=2, style=dotted];
m12_325 -> m12_327  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_326 -> m12_324  [key=0, style=bold, color=blue];
m12_180 -> m12_181  [key=0, style=solid];
m12_181 -> m12_182  [key=0, style=solid];
m12_181 -> m12_12  [key=2, style=dotted];
m12_181 -> m12_183  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_182 -> m12_180  [key=0, style=bold, color=blue];
m12_361 -> m12_362  [key=0, style=solid];
m12_362 -> m12_363  [key=0, style=solid];
m12_362 -> m12_12  [key=2, style=dotted];
m12_362 -> m12_364  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_363 -> m12_361  [key=0, style=bold, color=blue];
m12_35 -> m12_36  [key=0, style=solid];
m12_36 -> m12_37  [key=0, style=solid];
m12_36 -> m12_40  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_36 -> m12_41  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_36 -> m12_36  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_37 -> m12_38  [key=0, style=solid];
m12_37 -> m12_12  [key=2, style=dotted];
m12_37 -> m12_39  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_38 -> m12_35  [key=0, style=bold, color=blue];
m12_273 -> m12_274  [key=0, style=solid];
m12_274 -> m12_275  [key=0, style=solid];
m12_274 -> m12_12  [key=2, style=dotted];
m12_274 -> m12_276  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_275 -> m12_273  [key=0, style=bold, color=blue];
m12_464 -> m12_465  [key=0, style=solid];
m12_464 -> m12_466  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_4 -> m12_5  [key=0, style=solid, color=red];
m12_5 -> m12_6  [key=0, style=solid, color=red];
m12_5 -> m12_7  [key=2, style=dotted, color=red];
m12_6 -> m12_4  [key=0, style=bold, color=blue];
m12_14 -> m12_15  [key=0, style=solid];
m12_14 -> m12_22  [key=2, style=dotted];
m12_14 -> m12_23  [key=2, style=dotted];
m12_14 -> m12_24  [key=2, style=dotted];
m12_14 -> m12_16  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_14 -> m12_31  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_14 -> m12_17  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_15 -> m12_16  [key=0, style=solid];
m12_15 -> m12_22  [key=2, style=dotted];
m12_15 -> m12_23  [key=2, style=dotted];
m12_15 -> m12_24  [key=2, style=dotted];
m12_15 -> m12_19  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
m12_13 -> m12_14  [key=0, style=solid];
m12_13 -> m12_15  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_13 -> m12_16  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_13 -> m12_17  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_13 -> m12_19  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_16 -> m12_17  [key=0, style=solid];
m12_16 -> m12_25  [key=2, style=dotted];
m12_16 -> m12_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_17 -> m12_18  [key=0, style=solid];
m12_17 -> m12_26  [key=2, style=dotted];
m12_19 -> m12_20  [key=0, style=solid];
m12_19 -> m12_26  [key=2, style=dotted];
m12_31 -> m12_32  [key=0, style=solid];
m12_31 -> m12_33  [key=2, style=dotted];
m12_31 -> m12_34  [key=2, style=dotted];
m12_30 -> m12_31  [key=0, style=solid];
m12_18 -> m12_19  [key=0, style=solid];
m12_18 -> m12_27  [key=2, style=dotted];
m12_18 -> m12_28  [key=2, style=dotted];
m12_20 -> m12_21  [key=0, style=solid];
m12_20 -> m12_29  [key=2, style=dotted];
m12_21 -> m12_13  [key=0, style=bold, color=blue];
m12_32 -> m12_30  [key=0, style=bold, color=blue];
m12_40 -> m12_41  [key=0, style=solid];
m12_40 -> m12_22  [key=2, style=dotted];
m12_40 -> m12_23  [key=2, style=dotted];
m12_40 -> m12_24  [key=2, style=dotted];
m12_40 -> m12_42  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_40 -> m12_50  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_40 -> m12_43  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_41 -> m12_42  [key=0, style=solid];
m12_41 -> m12_22  [key=2, style=dotted];
m12_41 -> m12_23  [key=2, style=dotted];
m12_41 -> m12_24  [key=2, style=dotted];
m12_41 -> m12_45  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
m12_39 -> m12_40  [key=0, style=solid];
m12_39 -> m12_41  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_39 -> m12_42  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_39 -> m12_43  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_39 -> m12_45  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_42 -> m12_43  [key=0, style=solid];
m12_42 -> m12_25  [key=2, style=dotted];
m12_42 -> m12_49  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_43 -> m12_44  [key=0, style=solid];
m12_43 -> m12_26  [key=2, style=dotted];
m12_45 -> m12_46  [key=0, style=solid];
m12_45 -> m12_26  [key=2, style=dotted];
m12_50 -> m12_51  [key=0, style=solid];
m12_50 -> m12_52  [key=2, style=dotted];
m12_49 -> m12_50  [key=0, style=solid];
m12_44 -> m12_45  [key=0, style=solid];
m12_44 -> m12_29  [key=2, style=dotted];
m12_46 -> m12_47  [key=0, style=solid];
m12_46 -> m12_48  [key=2, style=dotted];
m12_47 -> m12_39  [key=0, style=bold, color=blue];
m12_51 -> m12_49  [key=0, style=bold, color=blue];
m12_58 -> m12_59  [key=0, style=solid];
m12_58 -> m12_22  [key=2, style=dotted];
m12_58 -> m12_23  [key=2, style=dotted];
m12_58 -> m12_24  [key=2, style=dotted];
m12_58 -> m12_64  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_58 -> m12_94  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_58 -> m12_65  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_58 -> m12_72  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_59 -> m12_60  [key=0, style=solid];
m12_59 -> m12_22  [key=2, style=dotted];
m12_59 -> m12_23  [key=2, style=dotted];
m12_59 -> m12_24  [key=2, style=dotted];
m12_59 -> m12_68  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
m12_57 -> m12_58  [key=0, style=solid];
m12_57 -> m12_59  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_57 -> m12_64  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_57 -> m12_65  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_57 -> m12_68  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_57 -> m12_71  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_64 -> m12_65  [key=0, style=solid];
m12_64 -> m12_25  [key=2, style=dotted];
m12_64 -> m12_93  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_65 -> m12_66  [key=0, style=solid];
m12_65 -> m12_26  [key=2, style=dotted];
m12_65 -> m12_67  [key=1, style=dashed, color=darkseagreen4, label=job];
m12_68 -> m12_69  [key=0, style=solid];
m12_68 -> m12_26  [key=2, style=dotted];
m12_68 -> m12_70  [key=1, style=dashed, color=darkseagreen4, label=anotherJob];
m12_71 -> m12_72  [key=0, style=solid];
m12_71 -> m12_22  [key=2, style=dotted];
m12_71 -> m12_23  [key=2, style=dotted];
m12_71 -> m12_73  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_71 -> m12_74  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_71 -> m12_75  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_71 -> m12_76  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_94 -> m12_95  [key=0, style=solid];
m12_94 -> m12_96  [key=2, style=dotted];
m12_72 -> m12_73  [key=0, style=solid];
m12_72 -> m12_24  [key=2, style=dotted];
m12_72 -> m12_82  [key=2, style=dotted];
m12_60 -> m12_61  [key=0, style=solid];
m12_60 -> n18  [key=2, style=dotted];
m12_60 -> m12_62  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_60 -> m12_63  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_60 -> m12_64  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_60 -> m12_94  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_61 -> m12_62  [key=0, style=solid];
m12_61 -> m12_79  [key=2, style=dotted];
m12_61 -> m12_80  [key=2, style=dotted];
m12_61 -> m12_83  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_62 -> m12_63  [key=0, style=solid];
m12_62 -> m12_79  [key=2, style=dotted];
m12_62 -> m12_80  [key=2, style=dotted];
m12_62 -> m12_86  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_63 -> m12_64  [key=0, style=solid];
m12_63 -> m12_79  [key=2, style=dotted];
m12_63 -> m12_81  [key=2, style=dotted];
m12_63 -> m12_80  [key=2, style=dotted];
m12_63 -> m12_89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_83 -> m12_84  [key=0, style=solid];
m12_86 -> m12_87  [key=0, style=solid];
m12_89 -> m12_90  [key=0, style=solid];
m12_93 -> m12_94  [key=0, style=solid];
m12_66 -> m12_67  [key=0, style=solid];
m12_66 -> m12_82  [key=2, style=dotted];
m12_67 -> m12_68  [key=0, style=solid];
m12_67 -> m12_48  [key=2, style=dotted];
m12_69 -> m12_70  [key=0, style=solid];
m12_69 -> m12_29  [key=2, style=dotted];
m12_70 -> m12_71  [key=0, style=solid];
m12_70 -> m12_29  [key=2, style=dotted];
m12_73 -> m12_74  [key=0, style=solid];
m12_73 -> m12_82  [key=2, style=dotted];
m12_74 -> m12_75  [key=0, style=solid];
m12_74 -> m12_82  [key=2, style=dotted];
m12_75 -> m12_76  [key=0, style=solid];
m12_75 -> m12_48  [key=2, style=dotted];
m12_76 -> m12_77  [key=0, style=solid];
m12_76 -> m12_82  [key=2, style=dotted];
m12_77 -> m12_57  [key=0, style=bold, color=blue];
m12_84 -> m12_85  [key=0, style=solid];
m12_85 -> m12_83  [key=0, style=bold, color=blue];
m12_87 -> m12_88  [key=0, style=solid];
m12_88 -> m12_86  [key=0, style=bold, color=blue];
m12_90 -> m12_91  [key=0, style=solid];
m12_90 -> m12_92  [key=2, style=dotted];
m12_91 -> m12_89  [key=0, style=bold, color=blue];
m12_95 -> m12_93  [key=0, style=bold, color=blue];
m12_102 -> m12_103  [key=0, style=solid];
m12_102 -> m12_22  [key=2, style=dotted];
m12_102 -> m12_23  [key=2, style=dotted];
m12_102 -> m12_24  [key=2, style=dotted];
m12_102 -> m12_107  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_102 -> m12_128  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_102 -> m12_108  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_102 -> m12_112  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_101 -> m12_102  [key=0, style=solid];
m12_101 -> m12_107  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_101 -> m12_108  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_101 -> m12_111  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_107 -> m12_108  [key=0, style=solid];
m12_107 -> m12_25  [key=2, style=dotted];
m12_107 -> m12_127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_108 -> m12_109  [key=0, style=solid];
m12_108 -> m12_26  [key=2, style=dotted];
m12_108 -> m12_110  [key=1, style=dashed, color=darkseagreen4, label=job];
m12_111 -> m12_112  [key=0, style=solid];
m12_111 -> m12_22  [key=2, style=dotted];
m12_111 -> m12_23  [key=2, style=dotted];
m12_111 -> m12_113  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_111 -> m12_114  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_111 -> m12_115  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_111 -> m12_116  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_103 -> m12_104  [key=0, style=solid];
m12_103 -> n18  [key=2, style=dotted];
m12_103 -> m12_105  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_103 -> m12_106  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_103 -> m12_107  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_103 -> m12_128  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_128 -> m12_129  [key=0, style=solid];
m12_128 -> m12_130  [key=2, style=dotted];
m12_112 -> m12_113  [key=0, style=solid];
m12_112 -> m12_24  [key=2, style=dotted];
m12_112 -> m12_82  [key=2, style=dotted];
m12_104 -> m12_105  [key=0, style=solid];
m12_104 -> m12_79  [key=2, style=dotted];
m12_104 -> m12_80  [key=2, style=dotted];
m12_104 -> m12_118  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_105 -> m12_106  [key=0, style=solid];
m12_105 -> m12_79  [key=2, style=dotted];
m12_105 -> m12_80  [key=2, style=dotted];
m12_105 -> m12_121  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_106 -> m12_107  [key=0, style=solid];
m12_106 -> m12_79  [key=2, style=dotted];
m12_106 -> m12_81  [key=2, style=dotted];
m12_106 -> m12_80  [key=2, style=dotted];
m12_106 -> m12_124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_118 -> m12_119  [key=0, style=solid];
m12_121 -> m12_122  [key=0, style=solid];
m12_124 -> m12_125  [key=0, style=solid];
m12_127 -> m12_128  [key=0, style=solid];
m12_109 -> m12_110  [key=0, style=solid];
m12_109 -> m12_29  [key=2, style=dotted];
m12_110 -> m12_111  [key=0, style=solid];
m12_110 -> m12_29  [key=2, style=dotted];
m12_113 -> m12_114  [key=0, style=solid];
m12_113 -> m12_82  [key=2, style=dotted];
m12_114 -> m12_115  [key=0, style=solid];
m12_114 -> m12_82  [key=2, style=dotted];
m12_115 -> m12_116  [key=0, style=solid];
m12_115 -> m12_48  [key=2, style=dotted];
m12_116 -> m12_117  [key=0, style=solid];
m12_116 -> m12_82  [key=2, style=dotted];
m12_117 -> m12_101  [key=0, style=bold, color=blue];
m12_119 -> m12_120  [key=0, style=solid];
m12_120 -> m12_118  [key=0, style=bold, color=blue];
m12_122 -> m12_123  [key=0, style=solid];
m12_123 -> m12_121  [key=0, style=bold, color=blue];
m12_125 -> m12_126  [key=0, style=solid];
m12_125 -> m12_92  [key=2, style=dotted];
m12_126 -> m12_124  [key=0, style=bold, color=blue];
m12_129 -> m12_127  [key=0, style=bold, color=blue];
m12_134 -> m12_135  [key=0, style=solid];
m12_134 -> m12_136  [key=1, style=dashed, color=red, label=SqlConnection];
m12_135 -> m12_136  [key=0, style=solid, color=red];
m12_135 -> m12_25  [key=2, style=dotted];
m12_135 -> m12_141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_136 -> m12_137  [key=0, style=solid, color=red];
m12_136 -> m12_22  [key=2, style=dotted, color=red];
m12_136 -> m12_23  [key=2, style=dotted, color=red];
m12_136 -> m12_138  [key=1, style=dashed, color=red, label=record];
m12_136 -> m12_139  [key=1, style=dashed, color=red, label=record];
m12_141 -> m12_142  [key=0, style=solid];
m12_137 -> m12_138  [key=0, style=solid, color=red];
m12_137 -> m12_24  [key=2, style=dotted, color=red];
m12_137 -> m12_82  [key=2, style=dotted, color=red];
m12_138 -> m12_139  [key=0, style=solid, color=red];
m12_138 -> m12_82  [key=2, style=dotted, color=red];
m12_139 -> m12_140  [key=0, style=solid, color=red];
m12_139 -> m12_29  [key=2, style=dotted, color=red];
m12_140 -> m12_134  [key=0, style=bold, color=blue];
m12_142 -> m12_143  [key=0, style=solid];
m12_142 -> m12_144  [key=2, style=dotted];
m12_143 -> m12_141  [key=0, style=bold, color=blue];
m12_151 -> m12_152  [key=0, style=solid];
m12_151 -> m12_153  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_152 -> m12_153  [key=0, style=solid];
m12_152 -> m12_25  [key=2, style=dotted];
m12_152 -> m12_158  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_153 -> m12_154  [key=0, style=solid];
m12_153 -> m12_22  [key=2, style=dotted];
m12_153 -> m12_23  [key=2, style=dotted];
m12_153 -> m12_155  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_153 -> m12_156  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_158 -> m12_159  [key=0, style=solid];
m12_154 -> m12_155  [key=0, style=solid];
m12_154 -> m12_82  [key=2, style=dotted];
m12_155 -> m12_156  [key=0, style=solid];
m12_155 -> m12_82  [key=2, style=dotted];
m12_156 -> m12_157  [key=0, style=solid];
m12_156 -> m12_82  [key=2, style=dotted];
m12_157 -> m12_151  [key=0, style=bold, color=blue];
m12_159 -> m12_160  [key=0, style=solid];
m12_159 -> m12_161  [key=2, style=dotted];
m12_160 -> m12_158  [key=0, style=bold, color=blue];
m12_165 -> m12_166  [key=0, style=solid];
m12_165 -> m12_167  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_166 -> m12_167  [key=0, style=solid];
m12_166 -> m12_25  [key=2, style=dotted];
m12_166 -> m12_176  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_167 -> m12_168  [key=0, style=solid];
m12_167 -> m12_22  [key=2, style=dotted];
m12_167 -> m12_23  [key=2, style=dotted];
m12_167 -> m12_169  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_167 -> m12_170  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_167 -> m12_171  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_176 -> m12_177  [key=0, style=solid];
m12_168 -> m12_169  [key=0, style=solid];
m12_168 -> m12_82  [key=2, style=dotted];
m12_169 -> m12_170  [key=0, style=solid];
m12_169 -> m12_82  [key=2, style=dotted];
m12_170 -> m12_171  [key=0, style=solid];
m12_170 -> m12_48  [key=2, style=dotted];
m12_171 -> m12_172  [key=0, style=solid];
m12_171 -> m12_173  [key=1, style=dashed, color=darkseagreen4, label=expireAt];
m12_172 -> m12_173  [key=0, style=solid];
m12_172 -> m12_175  [key=2, style=dotted];
m12_172 -> m12_28  [key=2, style=dotted];
m12_173 -> m12_174  [key=0, style=solid];
m12_173 -> m12_175  [key=2, style=dotted];
m12_173 -> m12_28  [key=2, style=dotted];
m12_174 -> m12_165  [key=0, style=bold, color=blue];
m12_177 -> m12_178  [key=0, style=solid];
m12_177 -> m12_33  [key=2, style=dotted];
m12_177 -> m12_179  [key=2, style=dotted];
m12_178 -> m12_176  [key=0, style=bold, color=blue];
m12_183 -> m12_184  [key=0, style=solid];
m12_183 -> m12_185  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_184 -> m12_185  [key=0, style=solid];
m12_184 -> m12_25  [key=2, style=dotted];
m12_184 -> m12_188  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_185 -> m12_186  [key=0, style=solid];
m12_185 -> m12_3  [key=2, style=dotted];
m12_185 -> m12_23  [key=2, style=dotted];
m12_188 -> m12_189  [key=0, style=solid];
m12_188 -> m12_190  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_186 -> m12_187  [key=0, style=solid];
m12_186 -> m12_82  [key=2, style=dotted];
m12_187 -> m12_183  [key=0, style=bold, color=blue];
m12_189 -> m12_190  [key=0, style=solid];
m12_189 -> m12_161  [key=2, style=dotted];
m12_190 -> m12_191  [key=0, style=solid];
m12_190 -> m12_161  [key=2, style=dotted];
m12_191 -> m12_188  [key=0, style=bold, color=blue];
m12_195 -> m12_196  [key=0, style=solid];
m12_195 -> m12_197  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_196 -> m12_197  [key=0, style=solid];
m12_196 -> m12_25  [key=2, style=dotted];
m12_196 -> m12_202  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_197 -> m12_198  [key=0, style=solid];
m12_197 -> m12_22  [key=2, style=dotted];
m12_197 -> m12_23  [key=2, style=dotted];
m12_197 -> m12_199  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_197 -> m12_200  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_202 -> m12_203  [key=0, style=solid];
m12_198 -> m12_199  [key=0, style=solid];
m12_198 -> m12_82  [key=2, style=dotted];
m12_199 -> m12_200  [key=0, style=solid];
m12_199 -> m12_82  [key=2, style=dotted];
m12_200 -> m12_201  [key=0, style=solid];
m12_200 -> m12_82  [key=2, style=dotted];
m12_201 -> m12_195  [key=0, style=bold, color=blue];
m12_203 -> m12_204  [key=0, style=solid];
m12_203 -> m12_205  [key=2, style=dotted];
m12_204 -> m12_202  [key=0, style=bold, color=blue];
m12_209 -> m12_210  [key=0, style=solid];
m12_209 -> m12_211  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_210 -> m12_211  [key=0, style=solid];
m12_210 -> m12_25  [key=2, style=dotted];
m12_210 -> m12_219  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_211 -> m12_212  [key=0, style=solid];
m12_211 -> m12_22  [key=2, style=dotted];
m12_211 -> m12_23  [key=2, style=dotted];
m12_211 -> m12_213  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_211 -> m12_214  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_211 -> m12_215  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_219 -> m12_220  [key=0, style=solid];
m12_212 -> m12_213  [key=0, style=solid];
m12_212 -> m12_82  [key=2, style=dotted];
m12_213 -> m12_214  [key=0, style=solid];
m12_213 -> m12_82  [key=2, style=dotted];
m12_214 -> m12_215  [key=0, style=solid];
m12_214 -> m12_48  [key=2, style=dotted];
m12_215 -> m12_216  [key=0, style=solid];
m12_215 -> m12_217  [key=1, style=dashed, color=darkseagreen4, label=expireAt];
m12_216 -> m12_217  [key=0, style=solid];
m12_216 -> m12_175  [key=2, style=dotted];
m12_216 -> m12_28  [key=2, style=dotted];
m12_217 -> m12_218  [key=0, style=solid];
m12_217 -> m12_175  [key=2, style=dotted];
m12_217 -> m12_28  [key=2, style=dotted];
m12_218 -> m12_209  [key=0, style=bold, color=blue];
m12_220 -> m12_221  [key=0, style=solid];
m12_220 -> m12_33  [key=2, style=dotted];
m12_220 -> m12_222  [key=2, style=dotted];
m12_221 -> m12_219  [key=0, style=bold, color=blue];
m12_226 -> m12_227  [key=0, style=solid];
m12_226 -> m12_228  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_227 -> m12_228  [key=0, style=solid];
m12_227 -> m12_25  [key=2, style=dotted];
m12_227 -> m12_231  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_228 -> m12_229  [key=0, style=solid];
m12_228 -> m12_3  [key=2, style=dotted];
m12_228 -> m12_23  [key=2, style=dotted];
m12_231 -> m12_232  [key=0, style=solid];
m12_231 -> m12_233  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_229 -> m12_230  [key=0, style=solid];
m12_229 -> m12_82  [key=2, style=dotted];
m12_230 -> m12_226  [key=0, style=bold, color=blue];
m12_232 -> m12_233  [key=0, style=solid];
m12_232 -> m12_205  [key=2, style=dotted];
m12_233 -> m12_234  [key=0, style=solid];
m12_233 -> m12_205  [key=2, style=dotted];
m12_234 -> m12_231  [key=0, style=bold, color=blue];
m12_238 -> m12_239  [key=0, style=solid];
m12_238 -> m12_240  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_239 -> m12_240  [key=0, style=solid];
m12_239 -> m12_25  [key=2, style=dotted];
m12_239 -> m12_245  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_240 -> m12_241  [key=0, style=solid];
m12_240 -> m12_22  [key=2, style=dotted];
m12_240 -> m12_23  [key=2, style=dotted];
m12_240 -> m12_242  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_240 -> m12_243  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_245 -> m12_246  [key=0, style=solid];
m12_241 -> m12_242  [key=0, style=solid];
m12_241 -> m12_82  [key=2, style=dotted];
m12_242 -> m12_243  [key=0, style=solid];
m12_242 -> m12_82  [key=2, style=dotted];
m12_243 -> m12_244  [key=0, style=solid];
m12_243 -> m12_82  [key=2, style=dotted];
m12_244 -> m12_238  [key=0, style=bold, color=blue];
m12_246 -> m12_247  [key=0, style=solid];
m12_246 -> m12_248  [key=2, style=dotted];
m12_247 -> m12_245  [key=0, style=bold, color=blue];
m12_252 -> m12_253  [key=0, style=solid];
m12_252 -> m12_254  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_253 -> m12_254  [key=0, style=solid];
m12_253 -> m12_25  [key=2, style=dotted];
m12_253 -> m12_257  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_254 -> m12_255  [key=0, style=solid];
m12_254 -> m12_3  [key=2, style=dotted];
m12_254 -> m12_23  [key=2, style=dotted];
m12_257 -> m12_258  [key=0, style=solid];
m12_257 -> m12_259  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_255 -> m12_256  [key=0, style=solid];
m12_255 -> m12_82  [key=2, style=dotted];
m12_256 -> m12_252  [key=0, style=bold, color=blue];
m12_258 -> m12_259  [key=0, style=solid];
m12_258 -> m12_248  [key=2, style=dotted];
m12_259 -> m12_260  [key=0, style=solid];
m12_259 -> m12_248  [key=2, style=dotted];
m12_260 -> m12_257  [key=0, style=bold, color=blue];
m12_264 -> m12_265  [key=0, style=solid];
m12_264 -> m12_266  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_265 -> m12_266  [key=0, style=solid];
m12_265 -> m12_25  [key=2, style=dotted];
m12_265 -> m12_269  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_266 -> m12_267  [key=0, style=solid];
m12_266 -> m12_3  [key=2, style=dotted];
m12_266 -> m12_23  [key=2, style=dotted];
m12_269 -> m12_270  [key=0, style=solid];
m12_269 -> m12_271  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_267 -> m12_268  [key=0, style=solid];
m12_267 -> m12_82  [key=2, style=dotted];
m12_268 -> m12_264  [key=0, style=bold, color=blue];
m12_270 -> m12_271  [key=0, style=solid];
m12_270 -> m12_248  [key=2, style=dotted];
m12_271 -> m12_272  [key=0, style=solid];
m12_271 -> m12_248  [key=2, style=dotted];
m12_272 -> m12_269  [key=0, style=bold, color=blue];
m12_276 -> m12_277  [key=0, style=solid];
m12_276 -> m12_278  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_277 -> m12_278  [key=0, style=solid];
m12_277 -> m12_25  [key=2, style=dotted];
m12_277 -> m12_283  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_278 -> m12_279  [key=0, style=solid];
m12_278 -> m12_22  [key=2, style=dotted];
m12_278 -> m12_23  [key=2, style=dotted];
m12_278 -> m12_280  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_278 -> m12_281  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_283 -> m12_284  [key=0, style=solid];
m12_279 -> m12_280  [key=0, style=solid];
m12_279 -> m12_82  [key=2, style=dotted];
m12_280 -> m12_281  [key=0, style=solid];
m12_280 -> m12_82  [key=2, style=dotted];
m12_281 -> m12_282  [key=0, style=solid];
m12_281 -> m12_82  [key=2, style=dotted];
m12_282 -> m12_276  [key=0, style=bold, color=blue];
m12_284 -> m12_285  [key=0, style=solid];
m12_284 -> m12_286  [key=2, style=dotted];
m12_285 -> m12_283  [key=0, style=bold, color=blue];
m12_290 -> m12_291  [key=0, style=solid];
m12_290 -> m12_292  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_291 -> m12_292  [key=0, style=solid];
m12_291 -> m12_25  [key=2, style=dotted];
m12_291 -> m12_295  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_292 -> m12_293  [key=0, style=solid];
m12_292 -> m12_22  [key=2, style=dotted];
m12_292 -> m12_23  [key=2, style=dotted];
m12_295 -> m12_296  [key=0, style=solid];
m12_295 -> m12_297  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_293 -> m12_294  [key=0, style=solid];
m12_293 -> m12_82  [key=2, style=dotted];
m12_294 -> m12_290  [key=0, style=bold, color=blue];
m12_296 -> m12_297  [key=0, style=solid];
m12_296 -> m12_248  [key=2, style=dotted];
m12_297 -> m12_298  [key=0, style=solid];
m12_297 -> m12_286  [key=2, style=dotted];
m12_298 -> m12_295  [key=0, style=bold, color=blue];
m12_302 -> m12_303  [key=0, style=solid];
m12_302 -> m12_304  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_303 -> m12_304  [key=0, style=solid];
m12_303 -> m12_25  [key=2, style=dotted];
m12_303 -> m12_307  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_304 -> m12_305  [key=0, style=solid];
m12_304 -> m12_3  [key=2, style=dotted];
m12_304 -> m12_23  [key=2, style=dotted];
m12_307 -> m12_308  [key=0, style=solid];
m12_307 -> m12_309  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_305 -> m12_306  [key=0, style=solid];
m12_305 -> m12_82  [key=2, style=dotted];
m12_306 -> m12_302  [key=0, style=bold, color=blue];
m12_308 -> m12_309  [key=0, style=solid];
m12_308 -> m12_248  [key=2, style=dotted];
m12_309 -> m12_310  [key=0, style=solid];
m12_309 -> m12_311  [key=2, style=dotted];
m12_310 -> m12_307  [key=0, style=bold, color=blue];
m12_315 -> m12_316  [key=0, style=solid];
m12_315 -> m12_317  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_316 -> m12_317  [key=0, style=solid];
m12_316 -> m12_25  [key=2, style=dotted];
m12_316 -> m12_320  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_317 -> m12_318  [key=0, style=solid];
m12_317 -> m12_3  [key=2, style=dotted];
m12_317 -> m12_23  [key=2, style=dotted];
m12_320 -> m12_321  [key=0, style=solid];
m12_320 -> m12_322  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_318 -> m12_319  [key=0, style=solid];
m12_318 -> m12_82  [key=2, style=dotted];
m12_319 -> m12_315  [key=0, style=bold, color=blue];
m12_321 -> m12_322  [key=0, style=solid];
m12_321 -> m12_248  [key=2, style=dotted];
m12_322 -> m12_323  [key=0, style=solid];
m12_322 -> m12_311  [key=2, style=dotted];
m12_323 -> m12_320  [key=0, style=bold, color=blue];
m12_327 -> m12_328  [key=0, style=solid];
m12_327 -> m12_329  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_328 -> m12_329  [key=0, style=solid];
m12_328 -> m12_25  [key=2, style=dotted];
m12_328 -> m12_332  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_329 -> m12_330  [key=0, style=solid];
m12_329 -> m12_3  [key=2, style=dotted];
m12_329 -> m12_23  [key=2, style=dotted];
m12_332 -> m12_333  [key=0, style=solid];
m12_332 -> m12_334  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_330 -> m12_331  [key=0, style=solid];
m12_330 -> m12_82  [key=2, style=dotted];
m12_331 -> m12_327  [key=0, style=bold, color=blue];
m12_333 -> m12_334  [key=0, style=solid];
m12_333 -> m12_248  [key=2, style=dotted];
m12_334 -> m12_335  [key=0, style=solid];
m12_334 -> m12_311  [key=2, style=dotted];
m12_335 -> m12_332  [key=0, style=bold, color=blue];
m12_339 -> m12_340  [key=0, style=solid];
m12_339 -> m12_341  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_340 -> m12_341  [key=0, style=solid];
m12_340 -> m12_25  [key=2, style=dotted];
m12_340 -> m12_345  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_341 -> m12_342  [key=0, style=solid];
m12_341 -> m12_22  [key=2, style=dotted];
m12_341 -> m12_23  [key=2, style=dotted];
m12_341 -> m12_343  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_345 -> m12_346  [key=0, style=solid];
m12_342 -> m12_343  [key=0, style=solid];
m12_342 -> m12_82  [key=2, style=dotted];
m12_343 -> m12_344  [key=0, style=solid];
m12_343 -> m12_82  [key=2, style=dotted];
m12_344 -> m12_339  [key=0, style=bold, color=blue];
m12_346 -> m12_347  [key=0, style=solid];
m12_346 -> m12_348  [key=2, style=dotted];
m12_347 -> m12_345  [key=0, style=bold, color=blue];
m12_352 -> m12_353  [key=0, style=solid];
m12_352 -> m12_354  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_353 -> m12_354  [key=0, style=solid];
m12_353 -> m12_25  [key=2, style=dotted];
m12_353 -> m12_357  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_354 -> m12_355  [key=0, style=solid];
m12_354 -> m12_3  [key=2, style=dotted];
m12_354 -> m12_23  [key=2, style=dotted];
m12_357 -> m12_358  [key=0, style=solid];
m12_357 -> m12_359  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_355 -> m12_356  [key=0, style=solid];
m12_355 -> m12_82  [key=2, style=dotted];
m12_356 -> m12_352  [key=0, style=bold, color=blue];
m12_358 -> m12_359  [key=0, style=solid];
m12_358 -> m12_348  [key=2, style=dotted];
m12_359 -> m12_360  [key=0, style=solid];
m12_359 -> m12_348  [key=2, style=dotted];
m12_360 -> m12_357  [key=0, style=bold, color=blue];
m12_364 -> m12_365  [key=0, style=solid];
m12_364 -> m12_366  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_365 -> m12_366  [key=0, style=solid];
m12_365 -> m12_25  [key=2, style=dotted];
m12_365 -> m12_369  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_366 -> m12_367  [key=0, style=solid];
m12_366 -> m12_3  [key=2, style=dotted];
m12_366 -> m12_23  [key=2, style=dotted];
m12_369 -> m12_370  [key=0, style=solid];
m12_369 -> m12_371  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_369 -> m12_372  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_367 -> m12_368  [key=0, style=solid];
m12_367 -> m12_82  [key=2, style=dotted];
m12_368 -> m12_364  [key=0, style=bold, color=blue];
m12_370 -> m12_371  [key=0, style=solid];
m12_370 -> m12_348  [key=2, style=dotted];
m12_371 -> m12_372  [key=0, style=solid];
m12_371 -> m12_348  [key=2, style=dotted];
m12_372 -> m12_373  [key=0, style=solid];
m12_372 -> m12_374  [key=2, style=dotted];
m12_373 -> m12_369  [key=0, style=bold, color=blue];
m12_378 -> m12_379  [key=0, style=solid];
m12_378 -> m12_380  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_379 -> m12_380  [key=0, style=solid];
m12_379 -> m12_25  [key=2, style=dotted];
m12_379 -> m12_383  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_380 -> m12_381  [key=0, style=solid];
m12_380 -> m12_3  [key=2, style=dotted];
m12_380 -> m12_23  [key=2, style=dotted];
m12_383 -> m12_384  [key=0, style=solid];
m12_383 -> m12_385  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_381 -> m12_382  [key=0, style=solid];
m12_381 -> m12_82  [key=2, style=dotted];
m12_382 -> m12_378  [key=0, style=bold, color=blue];
m12_384 -> m12_385  [key=0, style=solid];
m12_384 -> m12_348  [key=2, style=dotted];
m12_385 -> m12_386  [key=0, style=solid];
m12_385 -> m12_374  [key=2, style=dotted];
m12_386 -> m12_383  [key=0, style=bold, color=blue];
m12_390 -> m12_391  [key=0, style=solid];
m12_390 -> m12_392  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_391 -> m12_392  [key=0, style=solid];
m12_391 -> m12_25  [key=2, style=dotted];
m12_391 -> m12_395  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_392 -> m12_393  [key=0, style=solid];
m12_392 -> m12_3  [key=2, style=dotted];
m12_392 -> m12_23  [key=2, style=dotted];
m12_395 -> m12_396  [key=0, style=solid];
m12_395 -> m12_397  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_393 -> m12_394  [key=0, style=solid];
m12_393 -> m12_82  [key=2, style=dotted];
m12_394 -> m12_390  [key=0, style=bold, color=blue];
m12_396 -> m12_397  [key=0, style=solid];
m12_396 -> m12_348  [key=2, style=dotted];
m12_397 -> m12_398  [key=0, style=solid];
m12_397 -> m12_374  [key=2, style=dotted];
m12_398 -> m12_395  [key=0, style=bold, color=blue];
m12_402 -> m12_403  [key=0, style=solid];
m12_402 -> m12_404  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_403 -> m12_404  [key=0, style=solid];
m12_403 -> m12_25  [key=2, style=dotted];
m12_403 -> m12_410  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_404 -> m12_405  [key=0, style=solid];
m12_404 -> m12_22  [key=2, style=dotted];
m12_404 -> m12_409  [key=2, style=dotted];
m12_404 -> m12_406  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_404 -> m12_407  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_410 -> m12_411  [key=0, style=solid];
m12_410 -> m12_412  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_410 -> m12_413  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_410 -> m12_414  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_410 -> m12_415  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_405 -> m12_406  [key=0, style=solid];
m12_405 -> m12_82  [key=2, style=dotted];
m12_406 -> m12_407  [key=0, style=solid];
m12_406 -> m12_82  [key=2, style=dotted];
m12_407 -> m12_408  [key=0, style=solid];
m12_407 -> m12_82  [key=2, style=dotted];
m12_408 -> m12_402  [key=0, style=bold, color=blue];
m12_411 -> m12_412  [key=0, style=solid];
m12_411 -> m12_348  [key=2, style=dotted];
m12_412 -> m12_413  [key=0, style=solid];
m12_412 -> m12_348  [key=2, style=dotted];
m12_413 -> m12_414  [key=0, style=solid];
m12_413 -> m12_348  [key=2, style=dotted];
m12_414 -> m12_415  [key=0, style=solid];
m12_414 -> m12_348  [key=2, style=dotted];
m12_415 -> m12_416  [key=0, style=solid];
m12_415 -> m12_417  [key=2, style=dotted];
m12_416 -> m12_410  [key=0, style=bold, color=blue];
m12_421 -> m12_422  [key=0, style=solid];
m12_421 -> m12_423  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_422 -> m12_423  [key=0, style=solid];
m12_422 -> m12_25  [key=2, style=dotted];
m12_422 -> m12_426  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_423 -> m12_424  [key=0, style=solid];
m12_423 -> m12_3  [key=2, style=dotted];
m12_423 -> m12_23  [key=2, style=dotted];
m12_426 -> m12_427  [key=0, style=solid];
m12_426 -> m12_428  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_426 -> m12_429  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_426 -> m12_430  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_424 -> m12_425  [key=0, style=solid];
m12_424 -> m12_82  [key=2, style=dotted];
m12_425 -> m12_421  [key=0, style=bold, color=blue];
m12_427 -> m12_428  [key=0, style=solid];
m12_427 -> m12_348  [key=2, style=dotted];
m12_428 -> m12_429  [key=0, style=solid];
m12_428 -> m12_348  [key=2, style=dotted];
m12_429 -> m12_430  [key=0, style=solid];
m12_429 -> m12_348  [key=2, style=dotted];
m12_430 -> m12_431  [key=0, style=solid];
m12_430 -> m12_417  [key=2, style=dotted];
m12_431 -> m12_426  [key=0, style=bold, color=blue];
m12_435 -> m12_436  [key=0, style=solid];
m12_435 -> m12_437  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_436 -> m12_437  [key=0, style=solid];
m12_436 -> m12_25  [key=2, style=dotted];
m12_436 -> m12_440  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_437 -> m12_438  [key=0, style=solid];
m12_437 -> m12_3  [key=2, style=dotted];
m12_437 -> m12_23  [key=2, style=dotted];
m12_440 -> m12_441  [key=0, style=solid];
m12_440 -> m12_442  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_438 -> m12_439  [key=0, style=solid];
m12_438 -> m12_82  [key=2, style=dotted];
m12_439 -> m12_435  [key=0, style=bold, color=blue];
m12_441 -> m12_442  [key=0, style=solid];
m12_441 -> m12_348  [key=2, style=dotted];
m12_442 -> m12_443  [key=0, style=solid];
m12_442 -> m12_417  [key=2, style=dotted];
m12_443 -> m12_440  [key=0, style=bold, color=blue];
m12_447 -> m12_448  [key=0, style=solid];
m12_447 -> m12_449  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_448 -> m12_449  [key=0, style=solid];
m12_448 -> m12_25  [key=2, style=dotted];
m12_448 -> m12_452  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_449 -> m12_450  [key=0, style=solid];
m12_449 -> m12_3  [key=2, style=dotted];
m12_449 -> m12_23  [key=2, style=dotted];
m12_452 -> m12_453  [key=0, style=solid];
m12_452 -> m12_454  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_450 -> m12_451  [key=0, style=solid];
m12_450 -> m12_82  [key=2, style=dotted];
m12_451 -> m12_447  [key=0, style=bold, color=blue];
m12_453 -> m12_454  [key=0, style=solid];
m12_453 -> m12_348  [key=2, style=dotted];
m12_454 -> m12_455  [key=0, style=solid];
m12_454 -> m12_417  [key=2, style=dotted];
m12_455 -> m12_452  [key=0, style=bold, color=blue];
m12_459 -> m12_460  [key=0, style=solid];
m12_459 -> m12_461  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_460 -> m12_461  [key=0, style=solid];
m12_460 -> m12_25  [key=2, style=dotted];
m12_460 -> m12_464  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_461 -> m12_462  [key=0, style=solid];
m12_461 -> m12_3  [key=2, style=dotted];
m12_461 -> m12_23  [key=2, style=dotted];
m12_462 -> m12_463  [key=0, style=solid];
m12_462 -> m12_82  [key=2, style=dotted];
m12_463 -> m12_459  [key=0, style=bold, color=blue];
m12_465 -> m12_466  [key=0, style=solid];
m12_465 -> m12_348  [key=2, style=dotted];
m12_466 -> m12_467  [key=0, style=solid];
m12_466 -> m12_417  [key=2, style=dotted];
m12_467 -> m12_464  [key=0, style=bold, color=blue];
m12_312 -> m12_313  [key=0, style=solid];
m12_313 -> m12_314  [key=0, style=solid];
m12_313 -> m12_12  [key=2, style=dotted];
m12_313 -> m12_315  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_314 -> m12_312  [key=0, style=bold, color=blue];
m12_261 -> m12_262  [key=0, style=solid];
m12_262 -> m12_263  [key=0, style=solid];
m12_262 -> m12_12  [key=2, style=dotted];
m12_262 -> m12_264  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_263 -> m12_261  [key=0, style=bold, color=blue];
m12_468 -> m12_469  [key=0, style=solid];
m12_468 -> m12_470  [key=1, style=dashed, color=darkseagreen4, label="System.Action<SqlConnection>"];
m12_469 -> m12_470  [key=0, style=solid];
m12_469 -> m12_472  [key=2, style=dotted];
m12_470 -> m12_471  [key=0, style=solid];
m12_470 -> m12_473  [key=2, style=dotted];
m12_471 -> m12_468  [key=0, style=bold, color=blue];
m12_456 -> m12_457  [key=0, style=solid];
m12_457 -> m12_458  [key=0, style=solid];
m12_457 -> m12_12  [key=2, style=dotted];
m12_457 -> m12_459  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_458 -> m12_456  [key=0, style=bold, color=blue];
m12_8 -> m12_9  [key=0, style=solid];
m12_9 -> m12_10  [key=0, style=solid];
m12_9 -> m12_14  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_9 -> m12_15  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_9 -> m12_9  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_10 -> m12_11  [key=0, style=solid];
m12_10 -> m12_12  [key=2, style=dotted];
m12_10 -> m12_13  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_11 -> m12_8  [key=0, style=bold, color=blue];
m12_53 -> m12_54  [key=0, style=solid];
m12_54 -> m12_55  [key=0, style=solid];
m12_54 -> m12_58  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_54 -> m12_59  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_54 -> m12_9  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_55 -> m12_56  [key=0, style=solid];
m12_55 -> m12_12  [key=2, style=dotted];
m12_55 -> m12_57  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_56 -> m12_53  [key=0, style=bold, color=blue];
m12_349 -> m12_350  [key=0, style=solid];
m12_350 -> m12_351  [key=0, style=solid];
m12_350 -> m12_12  [key=2, style=dotted];
m12_350 -> m12_352  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_351 -> m12_349  [key=0, style=bold, color=blue];
m12_418 -> m12_419  [key=0, style=solid];
m12_419 -> m12_420  [key=0, style=solid];
m12_419 -> m12_12  [key=2, style=dotted];
m12_419 -> m12_421  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_420 -> m12_418  [key=0, style=bold, color=blue];
m12_249 -> m12_250  [key=0, style=solid];
m12_250 -> m12_251  [key=0, style=solid];
m12_250 -> m12_12  [key=2, style=dotted];
m12_250 -> m12_252  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_251 -> m12_249  [key=0, style=bold, color=blue];
m12_287 -> m12_288  [key=0, style=solid];
m12_288 -> m12_289  [key=0, style=solid];
m12_288 -> m12_12  [key=2, style=dotted];
m12_288 -> m12_290  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_289 -> m12_287  [key=0, style=bold, color=blue];
m12_336 -> m12_337  [key=0, style=solid];
m12_337 -> m12_338  [key=0, style=solid];
m12_337 -> m12_12  [key=2, style=dotted];
m12_337 -> m12_339  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_338 -> m12_336  [key=0, style=bold, color=blue];
m12_192 -> m12_193  [key=0, style=solid];
m12_193 -> m12_194  [key=0, style=solid];
m12_193 -> m12_12  [key=2, style=dotted];
m12_193 -> m12_195  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_194 -> m12_192  [key=0, style=bold, color=blue];
m12_479 -> m12_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_16  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_17  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_19  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_42  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_43  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_45  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_55  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_64  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_65  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_68  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_99  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_107  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_108  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_132  [key=1, style=dashed, color=red, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_135  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_149  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_152  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_163  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_166  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_181  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_184  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_193  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_196  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_207  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_210  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_224  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_227  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_236  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_239  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_250  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_253  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_262  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_265  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_274  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_277  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_288  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_291  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_300  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_303  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_313  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_316  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_325  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_328  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_337  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_340  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_350  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_353  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_362  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_365  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_376  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_379  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_388  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_391  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_400  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_403  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_419  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_422  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_433  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_436  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_445  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_448  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_457  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_479 -> m12_460  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
m12_480 -> m12_14  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_480 -> m12_15  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_481 -> m12_31  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_482 -> m12_40  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_482 -> m12_41  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_483 -> m12_50  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_484 -> m12_58  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_484 -> m12_59  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_485 -> m12_94  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_486 -> m12_94  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_487 -> m12_102  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_488 -> m12_128  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_489 -> m12_128  [key=1, style=dashed, color=darkseagreen4, label=state];
}
