digraph  {
n448 [label="HangFire.SqlServer.Tests.ConnectionFacts", span=""];
n449 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n450 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n451 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n452 [label=arrangeSql, span=""];
n453 [label=arrangeSql, span=""];
n454 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n455 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n456 [label=arrangeSql, span=""];
n457 [label=arrangeSql, span=""];
n458 [label=arrangeSql, span=""];
n459 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n460 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n461 [label=arrangeSql, span=""];
n462 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n463 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n464 [label=arrangeSql, span=""];
n465 [label=arrangeSql, span=""];
n466 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n467 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n468 [label=arrangeSql, span=""];
n469 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n470 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n471 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n472 [label=arrangeSql, span=""];
n473 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n474 [label=arrangeSql, span=""];
n475 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n476 [label=arrangeSql, span=""];
n0 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", span="15-15"];
n1 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerConnection(null, new SqlServerStorageOptions()))", span="17-18"];
n2 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", label="Assert.Equal(''connection'', exception.ParamName)", span="20-20"];
n4 [cluster="Unk.>", label="Entry Unk.>", span=""];
n6 [cluster="lambda expression", label="Entry lambda expression", span="18-18"];
n3 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", span="15-15"];
n5 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n7 [cluster="lambda expression", label="new SqlServerConnection(null, new SqlServerStorageOptions())", span="18-18"];
n8 [cluster="lambda expression", label="Exit lambda expression", span="18-18"];
n9 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", span="35-35"];
n10 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
n11 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="24-24"];
n12 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerConnection(ConnectionUtils.CreateConnection(), null))", span="26-27"];
n13 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", label="Assert.Equal(''options'', exception.ParamName)", span="29-29"];
n15 [cluster="lambda expression", label="Entry lambda expression", span="27-27"];
n14 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="24-24"];
n16 [cluster="lambda expression", label="new SqlServerConnection(ConnectionUtils.CreateConnection(), null)", span="27-27"];
n17 [cluster="lambda expression", label="Exit lambda expression", span="27-27"];
n18 [cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
n19 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="33-33"];
n20 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", label="UseConnection(connection =>\r\n            {\r\n                var transaction = connection.CreateWriteTransaction();\r\n                Assert.NotNull(transaction);\r\n            })", span="35-39"];
n21 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="33-33"];
n22 [cluster="Unk.UseConnection", label="Entry Unk.UseConnection", span=""];
n23 [cluster="lambda expression", label="Entry lambda expression", span="35-39"];
n24 [cluster="lambda expression", label="var transaction = connection.CreateWriteTransaction()", span="37-37"];
n25 [cluster="lambda expression", label="Assert.NotNull(transaction)", span="38-38"];
n27 [cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", label="Entry HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="49-49"];
n26 [cluster="lambda expression", label="Exit lambda expression", span="35-39"];
n28 [cluster="Unk.NotNull", label="Entry Unk.NotNull", span=""];
n29 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", span="43-43"];
n30 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", label="UseConnection(connection =>\r\n            {\r\n                var @lock = connection.AcquireJobLock(''1'');\r\n                Assert.NotNull(@lock);\r\n            })", span="45-49"];
n31 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", span="43-43"];
n32 [cluster="lambda expression", label="Entry lambda expression", span="45-49"];
n33 [cluster="lambda expression", label="var @lock = connection.AcquireJobLock(''1'')", span="47-47"];
n34 [cluster="lambda expression", label="Assert.NotNull(@lock)", span="48-48"];
n36 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", label="Entry HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="54-54"];
n35 [cluster="lambda expression", label="Exit lambda expression", span="45-49"];
n37 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="53-53"];
n38 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''job'', exception.ParamName);\r\n            })", span="55-64"];
n39 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="53-53"];
n40 [cluster="lambda expression", label="Entry lambda expression", span="55-64"];
n41 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero))", span="57-61"];
n45 [cluster="lambda expression", label="connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero)", span="58-61"];
n42 [cluster="lambda expression", label="Assert.Equal(''job'', exception.ParamName)", span="63-63"];
n44 [cluster="lambda expression", label="Entry lambda expression", span="58-61"];
n43 [cluster="lambda expression", label="Exit lambda expression", span="55-64"];
n46 [cluster="lambda expression", label="Exit lambda expression", span="58-61"];
n47 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
n48 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", label="Entry HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="106-106"];
n49 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", span="68-68"];
n50 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''parameters'', exception.ParamName);\r\n            })", span="70-79"];
n51 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", span="68-68"];
n52 [cluster="lambda expression", label="Entry lambda expression", span="70-79"];
n53 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero))", span="72-76"];
n57 [cluster="lambda expression", label="connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero)", span="73-76"];
n54 [cluster="lambda expression", label="Assert.Equal(''parameters'', exception.ParamName)", span="78-78"];
n56 [cluster="lambda expression", label="Entry lambda expression", span="73-76"];
n55 [cluster="lambda expression", label="Exit lambda expression", span="70-79"];
n58 [cluster="lambda expression", label="Exit lambda expression", span="73-76"];
n59 [cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="116-116"];
n60 [cluster="lambda expression", label="Entry lambda expression", span="74-74"];
n61 [cluster="lambda expression", label="SampleMethod(''hello'')", span="74-74"];
n62 [cluster="lambda expression", label="Exit lambda expression", span="74-74"];
n63 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", span="624-624"];
n64 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="83-83"];
n65 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    TimeSpan.FromDays(1));\r\n\r\n                Assert.NotNull(jobId);\r\n                Assert.NotEmpty(jobId);\r\n\r\n                var sqlJob = sql.Query(''select * from HangFire.Job'').Single();\r\n                Assert.Equal(jobId, sqlJob.Id.ToString());\r\n                Assert.Equal(null, (int?) sqlJob.StateId);\r\n                Assert.Equal(null, (string) sqlJob.StateName);\r\n\r\n                var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData);\r\n                invocationData.Arguments = sqlJob.Arguments;\r\n\r\n                var job = invocationData.Deserialize();\r\n                Assert.Equal(typeof(ConnectionFacts), job.Type);\r\n                Assert.Equal(''SampleMethod'', job.Method.Name);\r\n                Assert.Equal(''Hello'', job.Arguments[0]);\r\n\r\n                Assert.True(DateTime.UtcNow < sqlJob.ExpireAt && sqlJob.ExpireAt < DateTime.UtcNow.AddDays(1));\r\n\r\n                var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value);\r\n\r\n                Assert.Equal(''Value1'', parameters[''Key1'']);\r\n                Assert.Equal(''Value2'', parameters[''Key2'']);\r\n            })", span="85-117"];
n66 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="83-83"];
n67 [cluster="Unk.UseConnections", label="Entry Unk.UseConnections", span=""];
n68 [cluster="lambda expression", label="Entry lambda expression", span="85-117"];
n69 [cluster="lambda expression", label="var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    TimeSpan.FromDays(1))", span="87-90"];
n72 [cluster="lambda expression", label="var sqlJob = sql.Query(''select * from HangFire.Job'').Single()", span="95-95"];
n83 [cluster="lambda expression", label="var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value)", span="110-113"];
n70 [cluster="lambda expression", label="Assert.NotNull(jobId)", span="92-92"];
n87 [cluster="System.TimeSpan.FromDays(double)", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
n97 [cluster="lambda expression", label="Entry lambda expression", span="88-88"];
n71 [cluster="lambda expression", label="Assert.NotEmpty(jobId)", span="93-93"];
n73 [cluster="lambda expression", label="Assert.Equal(jobId, sqlJob.Id.ToString())", span="96-96"];
n88 [cluster="Unk.NotEmpty", label="Entry Unk.NotEmpty", span=""];
n89 [cluster="Unk.Query", label="Entry Unk.Query", span=""];
n90 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n74 [cluster="lambda expression", label="Assert.Equal(null, (int?) sqlJob.StateId)", span="97-97"];
n75 [cluster="lambda expression", label="Assert.Equal(null, (string) sqlJob.StateName)", span="98-98"];
n76 [cluster="lambda expression", label="var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData)", span="100-100"];
n77 [cluster="lambda expression", label="invocationData.Arguments = sqlJob.Arguments", span="101-101"];
n82 [cluster="lambda expression", label="Assert.True(DateTime.UtcNow < sqlJob.ExpireAt && sqlJob.ExpireAt < DateTime.UtcNow.AddDays(1))", span="108-108"];
n91 [cluster="Unk.ToString", label="Entry Unk.ToString", span=""];
n92 [cluster="HangFire.Common.JobHelper.FromJson<T>(string)", label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="30-30"];
n78 [cluster="lambda expression", label="var job = invocationData.Deserialize()", span="103-103"];
n79 [cluster="lambda expression", label="Assert.Equal(typeof(ConnectionFacts), job.Type)", span="104-104"];
n93 [cluster="HangFire.Storage.InvocationData.Deserialize()", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
n80 [cluster="lambda expression", label="Assert.Equal(''SampleMethod'', job.Method.Name)", span="105-105"];
n81 [cluster="lambda expression", label="Assert.Equal(''Hello'', job.Arguments[0])", span="106-106"];
n94 [cluster="System.DateTime.AddDays(double)", label="Entry System.DateTime.AddDays(double)", span="0-0"];
n95 [cluster="Unk.True", label="Entry Unk.True", span=""];
n84 [cluster="lambda expression", label="Assert.Equal(''Value1'', parameters[''Key1''])", span="115-115"];
n96 [cluster="Unk.ToDictionary", label="Entry Unk.ToDictionary", span=""];
n100 [cluster="lambda expression", label="Entry lambda expression", span="113-113"];
n103 [cluster="lambda expression", label="Entry lambda expression", span="113-113"];
n85 [cluster="lambda expression", label="Assert.Equal(''Value2'', parameters[''Key2''])", span="116-116"];
n86 [cluster="lambda expression", label="Exit lambda expression", span="85-117"];
n98 [cluster="lambda expression", label="SampleMethod(''Hello'')", span="88-88"];
n99 [cluster="lambda expression", label="Exit lambda expression", span="88-88"];
n101 [cluster="lambda expression", label="(string) x.Name", span="113-113"];
n102 [cluster="lambda expression", label="Exit lambda expression", span="113-113"];
n104 [cluster="lambda expression", label="(string) x.Value", span="113-113"];
n105 [cluster="lambda expression", label="Exit lambda expression", span="113-113"];
n106 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="121-121"];
n107 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null)))", span="123-124"];
n108 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="121-121"];
n109 [cluster="lambda expression", label="Entry lambda expression", span="123-124"];
n110 [cluster="lambda expression", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null))", span="123-124"];
n113 [cluster="lambda expression", label="connection.GetJobData(null)", span="124-124"];
n111 [cluster="lambda expression", label="Exit lambda expression", span="123-124"];
n112 [cluster="lambda expression", label="Entry lambda expression", span="124-124"];
n114 [cluster="lambda expression", label="Exit lambda expression", span="124-124"];
n115 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="155-155"];
n116 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="128-128"];
n117 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetJobData(''1'');\r\n                Assert.Null(result);\r\n            })", span="130-134"];
n118 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="128-128"];
n119 [cluster="lambda expression", label="Entry lambda expression", span="130-134"];
n120 [cluster="lambda expression", label="var result = connection.GetJobData(''1'')", span="132-132"];
n121 [cluster="lambda expression", label="Assert.Null(result)", span="133-133"];
n122 [cluster="lambda expression", label="Exit lambda expression", span="130-134"];
n123 [cluster="Unk.Null", label="Entry Unk.Null", span=""];
n124 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="138-138"];
n125 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="140-143"];
n126 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = Job.FromExpression(() => SampleMethod(''wrong''));\r\n\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result);\r\n                Assert.NotNull(result.Job);\r\n                Assert.Equal(''Succeeded'', result.State);\r\n                Assert.Equal(''Arguments'', result.Job.Arguments[0]);\r\n                Assert.Null(result.LoadException);\r\n            })", span="145-165"];
n130 [cluster="lambda expression", label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="149-156"];
n127 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="138-138"];
n128 [cluster="lambda expression", label="Entry lambda expression", span="145-165"];
n129 [cluster="lambda expression", label="var job = Job.FromExpression(() => SampleMethod(''wrong''))", span="147-147"];
n131 [cluster="lambda expression", label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="158-158"];
n141 [cluster="lambda expression", label="Entry lambda expression", span="147-147"];
n138 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
n139 [cluster="HangFire.Common.JobHelper.ToJson(object)", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
n132 [cluster="lambda expression", label="Assert.NotNull(result)", span="160-160"];
n140 [cluster="int.ToString()", label="Entry int.ToString()", span="0-0"];
n133 [cluster="lambda expression", label="Assert.NotNull(result.Job)", span="161-161"];
n134 [cluster="lambda expression", label="Assert.Equal(''Succeeded'', result.State)", span="162-162"];
n135 [cluster="lambda expression", label="Assert.Equal(''Arguments'', result.Job.Arguments[0])", span="163-163"];
n136 [cluster="lambda expression", label="Assert.Null(result.LoadException)", span="164-164"];
n137 [cluster="lambda expression", label="Exit lambda expression", span="145-165"];
n142 [cluster="lambda expression", label="SampleMethod(''wrong'')", span="147-147"];
n143 [cluster="lambda expression", label="Exit lambda expression", span="147-147"];
n144 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="169-169"];
n145 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="171-174"];
n146 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result.LoadException);\r\n            })", span="176-190"];
n149 [cluster="lambda expression", label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="178-185"];
n147 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="169-169"];
n148 [cluster="lambda expression", label="Entry lambda expression", span="176-190"];
n150 [cluster="lambda expression", label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="187-187"];
n153 [cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", span="24-24"];
n151 [cluster="lambda expression", label="Assert.NotNull(result.LoadException)", span="189-189"];
n152 [cluster="lambda expression", label="Exit lambda expression", span="176-190"];
n154 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="194-194"];
n155 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="196-202"];
n156 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="194-194"];
n157 [cluster="lambda expression", label="Entry lambda expression", span="196-202"];
n158 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''))", span="198-199"];
n162 [cluster="lambda expression", label="connection.SetJobParameter(null, ''name'', ''value'')", span="199-199"];
n159 [cluster="lambda expression", label="Assert.Equal(''id'', exception.ParamName)", span="201-201"];
n161 [cluster="lambda expression", label="Entry lambda expression", span="199-199"];
n160 [cluster="lambda expression", label="Exit lambda expression", span="196-202"];
n163 [cluster="lambda expression", label="Exit lambda expression", span="199-199"];
n164 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="191-191"];
n165 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="206-206"];
n166 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="208-214"];
n167 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="206-206"];
n168 [cluster="lambda expression", label="Entry lambda expression", span="208-214"];
n169 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''))", span="210-211"];
n173 [cluster="lambda expression", label="connection.SetJobParameter(''1'', null, ''value'')", span="211-211"];
n170 [cluster="lambda expression", label="Assert.Equal(''name'', exception.ParamName)", span="213-213"];
n172 [cluster="lambda expression", label="Entry lambda expression", span="211-211"];
n171 [cluster="lambda expression", label="Exit lambda expression", span="208-214"];
n174 [cluster="lambda expression", label="Exit lambda expression", span="211-211"];
n175 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="218-218"];
n176 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="220-223"];
n177 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''Value'', parameter.Value);\r\n            })", span="225-237"];
n180 [cluster="lambda expression", label="var job = sql.Query(arrangeSql).Single()", span="227-227"];
n178 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="218-218"];
n179 [cluster="lambda expression", label="Entry lambda expression", span="225-237"];
n182 [cluster="lambda expression", label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="230-230"];
n183 [cluster="lambda expression", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="232-234"];
n181 [cluster="lambda expression", label="string jobId = job.Id.ToString()", span="228-228"];
n184 [cluster="lambda expression", label="Assert.Equal(''Value'', parameter.Value)", span="236-236"];
n185 [cluster="lambda expression", label="Exit lambda expression", span="225-237"];
n186 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="241-241"];
n187 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="243-246"];
n188 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n                connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''AnotherValue'', parameter.Value);\r\n            })", span="248-261"];
n191 [cluster="lambda expression", label="var job = sql.Query(arrangeSql).Single()", span="250-250"];
n189 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="241-241"];
n190 [cluster="lambda expression", label="Entry lambda expression", span="248-261"];
n193 [cluster="lambda expression", label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="253-253"];
n194 [cluster="lambda expression", label="connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'')", span="254-254"];
n195 [cluster="lambda expression", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="256-258"];
n192 [cluster="lambda expression", label="string jobId = job.Id.ToString()", span="251-251"];
n196 [cluster="lambda expression", label="Assert.Equal(''AnotherValue'', parameter.Value)", span="260-260"];
n197 [cluster="lambda expression", label="Exit lambda expression", span="248-261"];
n198 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="265-265"];
n199 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="267-270"];
n200 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', null);\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal((string) null, parameter.Value);\r\n            })", span="272-284"];
n203 [cluster="lambda expression", label="var job = sql.Query(arrangeSql).Single()", span="274-274"];
n201 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="265-265"];
n202 [cluster="lambda expression", label="Entry lambda expression", span="272-284"];
n205 [cluster="lambda expression", label="connection.SetJobParameter(jobId, ''Name'', null)", span="277-277"];
n206 [cluster="lambda expression", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="279-281"];
n204 [cluster="lambda expression", label="string jobId = job.Id.ToString()", span="275-275"];
n207 [cluster="lambda expression", label="Assert.Equal((string) null, parameter.Value)", span="283-283"];
n208 [cluster="lambda expression", label="Exit lambda expression", span="272-284"];
n209 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="288-288"];
n210 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="290-296"];
n211 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="288-288"];
n212 [cluster="lambda expression", label="Entry lambda expression", span="290-296"];
n213 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''))", span="292-293"];
n217 [cluster="lambda expression", label="connection.GetJobParameter(null, ''hello'')", span="293-293"];
n214 [cluster="lambda expression", label="Assert.Equal(''id'', exception.ParamName)", span="295-295"];
n216 [cluster="lambda expression", label="Entry lambda expression", span="293-293"];
n215 [cluster="lambda expression", label="Exit lambda expression", span="290-296"];
n218 [cluster="lambda expression", label="Exit lambda expression", span="293-293"];
n219 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="205-205"];
n220 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="300-300"];
n221 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="302-308"];
n222 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="300-300"];
n223 [cluster="lambda expression", label="Entry lambda expression", span="302-308"];
n224 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null))", span="304-305"];
n228 [cluster="lambda expression", label="connection.GetJobParameter(''1'', null)", span="305-305"];
n225 [cluster="lambda expression", label="Assert.Equal(''name'', exception.ParamName)", span="307-307"];
n227 [cluster="lambda expression", label="Entry lambda expression", span="305-305"];
n226 [cluster="lambda expression", label="Exit lambda expression", span="302-308"];
n229 [cluster="lambda expression", label="Exit lambda expression", span="305-305"];
n230 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="312-312"];
n231 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", label="UseConnection(connection =>\r\n            {\r\n                var value = connection.GetJobParameter(''1'', ''hello'');\r\n                Assert.Null(value);\r\n            })", span="314-318"];
n232 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="312-312"];
n233 [cluster="lambda expression", label="Entry lambda expression", span="314-318"];
n234 [cluster="lambda expression", label="var value = connection.GetJobParameter(''1'', ''hello'')", span="316-316"];
n235 [cluster="lambda expression", label="Assert.Null(value)", span="317-317"];
n236 [cluster="lambda expression", label="Exit lambda expression", span="314-318"];
n237 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="322-322"];
n238 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", label="string arrangeSql = @''\r\ndeclare @id int\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nset @id = scope_identity()\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@id, @name, @value)\r\nselect @id''", span="324-331"];
n239 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single();\r\n\r\n                var value = connection.GetJobParameter(id.ToString(), ''name'');\r\n\r\n                Assert.Equal(''value'', value);\r\n            })", span="333-342"];
n242 [cluster="lambda expression", label="var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single()", span="335-337"];
n240 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="322-322"];
n241 [cluster="lambda expression", label="Entry lambda expression", span="333-342"];
n243 [cluster="lambda expression", label="var value = connection.GetJobParameter(id.ToString(), ''name'')", span="339-339"];
n244 [cluster="lambda expression", label="Assert.Equal(''value'', value)", span="341-341"];
n246 [cluster="Unk.GetJobParameter", label="Entry Unk.GetJobParameter", span=""];
n245 [cluster="lambda expression", label="Exit lambda expression", span="333-342"];
n247 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", span="346-346"];
n248 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", color=red, community=1, label="1: UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(null, ''default''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="348-354"];
n249 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", span="346-346"];
n250 [cluster="lambda expression", label="Entry lambda expression", span="348-354"];
n251 [cluster="lambda expression", color=red, community=1, label="1: var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(null, ''default''))", span="350-351"];
n255 [cluster="lambda expression", color=red, community=0, label="1: connection.DeleteJobFromQueue(null, ''default'')", span="351-351"];
n252 [cluster="lambda expression", color=red, community=0, label="0: Assert.Equal(''id'', exception.ParamName)", span="353-353"];
n254 [cluster="lambda expression", label="Entry lambda expression", span="351-351"];
n253 [cluster="lambda expression", label="Exit lambda expression", span="348-354"];
n256 [cluster="lambda expression", label="Exit lambda expression", span="351-351"];
n257 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", label="Entry HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="216-216"];
n258 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", span="358-358"];
n259 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", color=red, community=1, label="1: UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(''1'', null));\r\n\r\n                Assert.Equal(''queue'', exception.ParamName);\r\n            })", span="360-366"];
n260 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", span="358-358"];
n261 [cluster="lambda expression", label="Entry lambda expression", span="360-366"];
n262 [cluster="lambda expression", color=red, community=1, label="1: var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(''1'', null))", span="362-363"];
n266 [cluster="lambda expression", color=red, community=0, label="1: connection.DeleteJobFromQueue(''1'', null)", span="363-363"];
n263 [cluster="lambda expression", color=red, community=0, label="1: Assert.Equal(''queue'', exception.ParamName)", span="365-365"];
n265 [cluster="lambda expression", label="Entry lambda expression", span="363-363"];
n264 [cluster="lambda expression", label="Exit lambda expression", span="360-366"];
n267 [cluster="lambda expression", label="Exit lambda expression", span="363-363"];
n268 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", span="370-370"];
n269 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", color=red, community=1, label="1: string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@id, @queue)''", span="372-374"];
n270 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", color=red, community=1, label="1: UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql, new { id = ''1'', queue = ''default'' });\r\n\r\n                connection.DeleteJobFromQueue(''1'', ''default'');\r\n\r\n                var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single();\r\n                Assert.Equal(0, count);\r\n            })", span="376-384"];
n273 [cluster="lambda expression", color=red, community=0, label="0: sql.Execute(arrangeSql, new { id = ''1'', queue = ''default'' })", span="378-378"];
n271 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", span="370-370"];
n272 [cluster="lambda expression", label="Entry lambda expression", span="376-384"];
n274 [cluster="lambda expression", color=red, community=0, label="0: connection.DeleteJobFromQueue(''1'', ''default'')", span="380-380"];
n275 [cluster="lambda expression", color=red, community=0, label="0: var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single()", span="382-382"];
n278 [cluster="Unk.Execute", label="Entry Unk.Execute", span=""];
n276 [cluster="lambda expression", color=red, community=0, label="1: Assert.Equal(0, count)", span="383-383"];
n277 [cluster="lambda expression", label="Exit lambda expression", span="376-384"];
n279 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", span="388-388"];
n280 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", color=red, community=1, label="1: string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@id, @queue)''", span="390-392"];
n281 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", color=red, community=1, label="1: UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    { \r\n                        new { id = ''1'', queue = ''critical'' },\r\n                        new { id = ''2'', queue = ''default'' } \r\n                    }); \r\n\r\n                connection.DeleteJobFromQueue(''1'', ''default'');\r\n\r\n                var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single();\r\n                Assert.Equal(2, count);\r\n            })", span="394-408"];
n284 [cluster="lambda expression", color=red, community=1, label="0: sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    { \r\n                        new { id = ''1'', queue = ''critical'' },\r\n                        new { id = ''2'', queue = ''default'' } \r\n                    })", span="396-402"];
n282 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", span="388-388"];
n283 [cluster="lambda expression", label="Entry lambda expression", span="394-408"];
n285 [cluster="lambda expression", color=red, community=0, label="0: connection.DeleteJobFromQueue(''1'', ''default'')", span="404-404"];
n286 [cluster="lambda expression", color=red, community=0, label="1: var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single()", span="406-406"];
n287 [cluster="lambda expression", color=red, community=0, label="1: Assert.Equal(2, count)", span="407-407"];
n288 [cluster="lambda expression", label="Exit lambda expression", span="394-408"];
n289 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="412-412"];
n290 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="414-420"];
n291 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="412-412"];
n292 [cluster="lambda expression", label="Entry lambda expression", span="414-420"];
n293 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1))", span="416-417"];
n297 [cluster="lambda expression", label="connection.GetFirstByLowestScoreFromSet(null, 0, 1)", span="417-417"];
n294 [cluster="lambda expression", label="Assert.Equal(''key'', exception.ParamName)", span="419-419"];
n296 [cluster="lambda expression", label="Entry lambda expression", span="417-417"];
n295 [cluster="lambda expression", label="Exit lambda expression", span="414-420"];
n298 [cluster="lambda expression", label="Exit lambda expression", span="417-417"];
n299 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="225-225"];
n300 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="424-424"];
n301 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)))", span="426-427"];
n302 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="424-424"];
n303 [cluster="lambda expression", label="Entry lambda expression", span="426-427"];
n304 [cluster="lambda expression", label="Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1))", span="426-427"];
n307 [cluster="lambda expression", label="connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)", span="427-427"];
n305 [cluster="lambda expression", label="Exit lambda expression", span="426-427"];
n306 [cluster="lambda expression", label="Entry lambda expression", span="427-427"];
n308 [cluster="lambda expression", label="Exit lambda expression", span="427-427"];
n309 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="431-431"];
n310 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1);\r\n\r\n                Assert.Null(result);\r\n            })", span="433-439"];
n311 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="431-431"];
n312 [cluster="lambda expression", label="Entry lambda expression", span="433-439"];
n313 [cluster="lambda expression", label="var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1)", span="435-436"];
n314 [cluster="lambda expression", label="Assert.Null(result)", span="438-438"];
n315 [cluster="lambda expression", label="Exit lambda expression", span="433-439"];
n316 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="443-443"];
n317 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], Score, Value)\r\nvalues \r\n('key', 1.0, '1.0'),\r\n('key', -1.0, '-1.0'),\r\n('key', -5.0, '-5.0'),\r\n('another-key', -2.0, '-2.0')''", span="445-451"];
n318 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0);\r\n                \r\n                Assert.Equal(''-1.0'', result);\r\n            })", span="453-460"];
n321 [cluster="lambda expression", label="sql.Execute(arrangeSql)", span="455-455"];
n319 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="443-443"];
n320 [cluster="lambda expression", label="Entry lambda expression", span="453-460"];
n322 [cluster="lambda expression", label="var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0)", span="457-457"];
n323 [cluster="lambda expression", label="Assert.Equal(''-1.0'', result)", span="459-459"];
n324 [cluster="lambda expression", label="Exit lambda expression", span="453-460"];
n325 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="464-464"];
n326 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()));\r\n\r\n                Assert.Equal(''serverId'', exception.ParamName);\r\n            })", span="466-472"];
n327 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="464-464"];
n328 [cluster="lambda expression", label="Entry lambda expression", span="466-472"];
n329 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()))", span="468-469"];
n333 [cluster="lambda expression", label="connection.AnnounceServer(null, new ServerContext())", span="469-469"];
n330 [cluster="lambda expression", label="Assert.Equal(''serverId'', exception.ParamName)", span="471-471"];
n332 [cluster="lambda expression", label="Entry lambda expression", span="469-469"];
n331 [cluster="lambda expression", label="Exit lambda expression", span="466-472"];
n334 [cluster="lambda expression", label="Exit lambda expression", span="469-469"];
n335 [cluster="HangFire.Server.ServerContext.ServerContext()", label="Entry HangFire.Server.ServerContext.ServerContext()", span="18-18"];
n336 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="236-236"];
n337 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="476-476"];
n338 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null));\r\n\r\n                Assert.Equal(''context'', exception.ParamName);\r\n            })", span="478-484"];
n339 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="476-476"];
n340 [cluster="lambda expression", label="Entry lambda expression", span="478-484"];
n341 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null))", span="480-481"];
n345 [cluster="lambda expression", label="connection.AnnounceServer(''server'', null)", span="481-481"];
n342 [cluster="lambda expression", label="Assert.Equal(''context'', exception.ParamName)", span="483-483"];
n344 [cluster="lambda expression", label="Entry lambda expression", span="481-481"];
n343 [cluster="lambda expression", label="Exit lambda expression", span="478-484"];
n346 [cluster="lambda expression", label="Exit lambda expression", span="481-481"];
n347 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="488-488"];
n348 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                };\r\n                connection.AnnounceServer(''server'', context1);\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', server.Id);\r\n                Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data);\r\n                Assert.NotNull(server.LastHeartbeat);\r\n\r\n                var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                };\r\n                connection.AnnounceServer(''server'', context2);\r\n                var sameServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', sameServer.Id);\r\n                Assert.Contains(''1000'', sameServer.Data);\r\n            })", span="490-515"];
n349 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="488-488"];
n350 [cluster="lambda expression", label="Entry lambda expression", span="490-515"];
n351 [cluster="lambda expression", label="var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                }", span="492-496"];
n352 [cluster="lambda expression", label="connection.AnnounceServer(''server'', context1)", span="497-497"];
n353 [cluster="lambda expression", label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="499-499"];
n358 [cluster="lambda expression", label="connection.AnnounceServer(''server'', context2)", span="511-511"];
n359 [cluster="lambda expression", label="var sameServer = sql.Query(''select * from HangFire.Server'').Single()", span="512-512"];
n354 [cluster="lambda expression", label="Assert.Equal(''server'', server.Id)", span="500-500"];
n355 [cluster="lambda expression", label="Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data)", span="501-503"];
n356 [cluster="lambda expression", label="Assert.NotNull(server.LastHeartbeat)", span="504-504"];
n363 [cluster="string.StartsWith(string)", label="Entry string.StartsWith(string)", span="0-0"];
n357 [cluster="lambda expression", label="var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                }", span="506-510"];
n360 [cluster="lambda expression", label="Assert.Equal(''server'', sameServer.Id)", span="513-513"];
n361 [cluster="lambda expression", label="Assert.Contains(''1000'', sameServer.Data)", span="514-514"];
n362 [cluster="lambda expression", label="Exit lambda expression", span="490-515"];
n364 [cluster="Unk.Contains", label="Entry Unk.Contains", span=""];
n365 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="519-519"];
n366 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null)))", span="521-522"];
n367 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="519-519"];
n368 [cluster="lambda expression", label="Entry lambda expression", span="521-522"];
n369 [cluster="lambda expression", label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null))", span="521-522"];
n372 [cluster="lambda expression", label="connection.RemoveServer(null)", span="522-522"];
n370 [cluster="lambda expression", label="Exit lambda expression", span="521-522"];
n371 [cluster="lambda expression", label="Entry lambda expression", span="522-522"];
n373 [cluster="lambda expression", label="Exit lambda expression", span="522-522"];
n374 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="257-257"];
n375 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", span="526-526"];
n376 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues \r\n('Server1', '', getutcdate()),\r\n('Server2', '', getutcdate())''", span="528-532"];
n377 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.RemoveServer(''Server1'');\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase);\r\n            })", span="534-542"];
n380 [cluster="lambda expression", label="sql.Execute(arrangeSql)", span="536-536"];
n378 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", span="526-526"];
n379 [cluster="lambda expression", label="Entry lambda expression", span="534-542"];
n381 [cluster="lambda expression", label="connection.RemoveServer(''Server1'')", span="538-538"];
n382 [cluster="lambda expression", label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="540-540"];
n383 [cluster="lambda expression", label="Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase)", span="541-541"];
n384 [cluster="lambda expression", label="Exit lambda expression", span="534-542"];
n385 [cluster="Unk.NotEqual", label="Entry Unk.NotEqual", span=""];
n386 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="546-546"];
n387 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null)))", span="548-549"];
n388 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="546-546"];
n389 [cluster="lambda expression", label="Entry lambda expression", span="548-549"];
n390 [cluster="lambda expression", label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null))", span="548-549"];
n393 [cluster="lambda expression", label="connection.Heartbeat(null)", span="549-549"];
n391 [cluster="lambda expression", label="Exit lambda expression", span="548-549"];
n392 [cluster="lambda expression", label="Entry lambda expression", span="549-549"];
n394 [cluster="lambda expression", label="Exit lambda expression", span="549-549"];
n395 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="266-266"];
n396 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="553-553"];
n397 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues\r\n('server1', '', '2012-12-12 12:12:12'),\r\n('server2', '', '2012-12-12 12:12:12')''", span="555-559"];
n398 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.Heartbeat(''server1'');\r\n\r\n                var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime)x.LastHeartbeat);\r\n\r\n                Assert.NotEqual(2012, servers[''server1''].Year);\r\n                Assert.Equal(2012, servers[''server2''].Year);\r\n            })", span="561-572"];
n401 [cluster="lambda expression", label="sql.Execute(arrangeSql)", span="563-563"];
n399 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="553-553"];
n400 [cluster="lambda expression", label="Entry lambda expression", span="561-572"];
n402 [cluster="lambda expression", label="connection.Heartbeat(''server1'')", span="565-565"];
n403 [cluster="lambda expression", label="var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime)x.LastHeartbeat)", span="567-568"];
n404 [cluster="lambda expression", label="Assert.NotEqual(2012, servers[''server1''].Year)", span="570-570"];
n407 [cluster="lambda expression", label="Entry lambda expression", span="568-568"];
n410 [cluster="lambda expression", label="Entry lambda expression", span="568-568"];
n405 [cluster="lambda expression", label="Assert.Equal(2012, servers[''server2''].Year)", span="571-571"];
n406 [cluster="lambda expression", label="Exit lambda expression", span="561-572"];
n408 [cluster="lambda expression", label="(string)x.Id", span="568-568"];
n409 [cluster="lambda expression", label="Exit lambda expression", span="568-568"];
n411 [cluster="lambda expression", label="(DateTime)x.LastHeartbeat", span="568-568"];
n412 [cluster="lambda expression", label="Exit lambda expression", span="568-568"];
n413 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="576-576"];
n414 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))))", span="578-579"];
n415 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="576-576"];
n416 [cluster="lambda expression", label="Entry lambda expression", span="578-579"];
n417 [cluster="lambda expression", label="Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5)))", span="578-579"];
n420 [cluster="lambda expression", label="connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))", span="579-579"];
n418 [cluster="lambda expression", label="Exit lambda expression", span="578-579"];
n419 [cluster="lambda expression", label="Entry lambda expression", span="579-579"];
n421 [cluster="lambda expression", label="Exit lambda expression", span="579-579"];
n422 [cluster="System.TimeSpan.FromMinutes(double)", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
n423 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="275-275"];
n424 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="583-583"];
n425 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues (@id, '', @heartbeat)''", span="585-587"];
n426 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    });\r\n\r\n                connection.RemoveTimedOutServers(TimeSpan.FromHours(15));\r\n\r\n                var liveServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server2'', liveServer.Id);\r\n            })", span="589-603"];
n429 [cluster="lambda expression", label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    })", span="591-597"];
n427 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="583-583"];
n428 [cluster="lambda expression", label="Entry lambda expression", span="589-603"];
n430 [cluster="lambda expression", label="connection.RemoveTimedOutServers(TimeSpan.FromHours(15))", span="599-599"];
n431 [cluster="lambda expression", label="var liveServer = sql.Query(''select * from HangFire.Server'').Single()", span="601-601"];
n434 [cluster="System.DateTime.AddHours(double)", label="Entry System.DateTime.AddHours(double)", span="0-0"];
n435 [cluster="System.TimeSpan.FromHours(double)", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
n432 [cluster="lambda expression", label="Assert.Equal(''server2'', liveServer.Id)", span="602-602"];
n433 [cluster="lambda expression", label="Exit lambda expression", span="589-603"];
n436 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", span="606-606"];
n437 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", label="var sqlConnection = ConnectionUtils.CreateConnection()", span="608-608"];
n439 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", label="action(sqlConnection, connection)", span="611-611"];
n438 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", label="var connection = new SqlServerConnection(sqlConnection, new SqlServerStorageOptions())", span="609-609"];
n440 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", span="606-606"];
n441 [cluster="System.Action<T1, T2>.Invoke(T1, T2)", label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0"];
n442 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", span="615-615"];
n443 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", label="var connection = new SqlServerConnection(\r\n                ConnectionUtils.CreateConnection(), new SqlServerStorageOptions())", span="617-618"];
n444 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", label="action(connection)", span="620-620"];
n445 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", span="615-615"];
n446 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
n447 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", span="624-624"];
m1_3 [cluster="HangFire.Redis.RedisConnection.Dispose()", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.Dispose()", span="40-40"];
m1_4 [cluster="HangFire.Redis.RedisConnection.Dispose()", file="RedisConnection.cs", label="Redis.Dispose()", span="42-42"];
m1_5 [cluster="HangFire.Redis.RedisConnection.Dispose()", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.Dispose()", span="40-40"];
m1_146 [cluster="int.ToString(System.IFormatProvider)", file="RedisConnection.cs", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
m1_25 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                ''Fetched'',\r\n                JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="96-99"];
m1_12 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="50-50"];
m1_13 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="string jobId", span="52-52"];
m1_16 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="58-58"];
m1_17 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="queueIndex = (queueIndex + 1) % queues.Length", span="60-60"];
m1_18 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="queueName = queues[queueIndex]", span="61-61"];
m1_14 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="string queueName", span="53-53"];
m1_15 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="var queueIndex = 0", span="54-54"];
m1_21 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="queueIndex == 0", span="66-66"];
m1_19 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="var queueKey = RedisStorage.Prefix + String.Format(''queue:{0}'', queueName)", span="63-63"];
m1_20 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="var fetchedKey = RedisStorage.Prefix + String.Format(''queue:{0}:dequeued'', queueName)", span="64-64"];
m1_26 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", color=red, community=0, file="RedisConnection.cs", label="1: return new RedisProcessingJob(jobId, queueName);", span="105-105"];
m1_22 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="jobId = Redis.BlockingPopAndPushItemBetweenLists(\r\n                        queueKey,\r\n                        fetchedKey,\r\n                        FetchTimeout)", span="68-71"];
m1_23 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="jobId = Redis.PopAndPushItemBetweenLists(\r\n                        queueKey, fetchedKey)", span="75-76"];
m1_24 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="jobId == null", span="79-79"];
m1_27 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="50-50"];
m1_59 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="RedisConnection.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m1_204 [cluster="Unk.FromNullableStringTimestamp", file="RedisConnection.cs", label="Entry Unk.FromNullableStringTimestamp", span=""];
m1_124 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="235-235"];
m1_125 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RedisConnection.cs", label="return Redis.GetRangeFromSortedSetByLowestScore(\r\n                RedisStorage.Prefix + key, fromScore, toScore, 0, 1)\r\n                .FirstOrDefault();", span="237-239"];
m1_126 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="235-235"];
m1_65 [cluster="Unk.SetRangeInHash", file="RedisConnection.cs", label="Entry Unk.SetRangeInHash", span=""];
m1_38 [cluster="System.TimeSpan.FromMinutes(double)", file="RedisConnection.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m1_94 [cluster="Unk.GetAllEntriesFromHash", file="RedisConnection.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m1_203 [cluster="Unk.FromStringTimestamp", file="RedisConnection.cs", label="Entry Unk.FromStringTimestamp", span=""];
m1_171 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", span="298-298"];
m1_172 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var serverNames = Redis.GetAllItemsFromSet(RedisStorage.Prefix + ''servers'')", span="300-300"];
m1_183 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="utcNow > maxTime.Add(timeOut)", span="331-331"];
m1_173 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var heartbeats = new Dictionary<string, Tuple<DateTime, DateTime?>>()", span="301-301"];
m1_176 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label=serverNames, span="307-307"];
m1_174 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var utcNow = DateTime.UtcNow", span="303-303"];
m1_178 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat''),\r\n                        x => heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1]))))", span="311-319"];
m1_181 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label=heartbeats, span="326-326"];
m1_175 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var pipeline = Redis.CreatePipeline()", span="305-305"];
m1_179 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="pipeline.Flush()", span="322-322"];
m1_177 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var name = serverName", span="309-309"];
m1_180 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var removedServerCount = 0", span="325-325"];
m1_185 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="removedServerCount++", span="334-334"];
m1_186 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="return removedServerCount;", span="338-338"];
m1_182 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var maxTime = new DateTime(\r\n                    Math.Max(heartbeat.Value.Item1.Ticks, (heartbeat.Value.Item2 ?? DateTime.MinValue).Ticks))", span="328-329"];
m1_184 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="RemoveServer(Redis, heartbeat.Key)", span="333-333"];
m1_187 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", span="298-298"];
m1_33 [cluster="Unk.SetEntryInHash", file="RedisConnection.cs", label="Entry Unk.SetEntryInHash", span=""];
m1_141 [cluster="Unk.AddItemToSet", file="RedisConnection.cs", label="Entry Unk.AddItemToSet", span=""];
m1_34 [cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", span="23-23"];
m1_29 [cluster="string.Format(string, object)", file="RedisConnection.cs", label="Entry string.Format(string, object)", span="0-0"];
m1_30 [cluster="Unk.BlockingPopAndPushItemBetweenLists", file="RedisConnection.cs", label="Entry Unk.BlockingPopAndPushItemBetweenLists", span=""];
m1_120 [cluster="Unk.RemoveEntryFromHash", file="RedisConnection.cs", label="Entry Unk.RemoveEntryFromHash", span=""];
m1_169 [cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="RedisConnection.cs", label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                ''Heartbeat'',\r\n                JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="292-295"];
m1_168 [cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.Heartbeat(string)", span="290-290"];
m1_170 [cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.Heartbeat(string)", span="290-290"];
m1_167 [cluster="Unk.RemoveEntry", file="RedisConnection.cs", label="Entry Unk.RemoveEntry", span=""];
m1_157 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId)))", span="282-284"];
m1_154 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", span="274-274"];
m1_155 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs", label="var transaction = redis.CreateTransaction()", span="276-276"];
m1_156 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId))", span="278-280"];
m1_158 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs", label="transaction.Commit()", span="286-286"];
m1_159 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", span="274-274"];
m1_7 [cluster="HangFire.Redis.RedisConnection.CreateWriteTransaction()", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.CreateWriteTransaction()", span="45-45"];
m1_8 [cluster="HangFire.Redis.RedisConnection.CreateWriteTransaction()", file="RedisConnection.cs", label="return new RedisWriteOnlyTransaction(Redis.CreateTransaction());", span="47-47"];
m1_9 [cluster="HangFire.Redis.RedisConnection.CreateWriteTransaction()", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.CreateWriteTransaction()", span="45-45"];
m1_102 [cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.GetJobParameter(string, string)", span="208-208"];
m1_103 [cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="RedisConnection.cs", label="return Redis.GetValueFromHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                name);", span="210-212"];
m1_104 [cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.GetJobParameter(string, string)", span="208-208"];
m1_69 [cluster="Unk.ExpireEntryIn", file="RedisConnection.cs", label="Entry Unk.ExpireEntryIn", span=""];
m1_56 [cluster="System.Guid.ToString()", file="RedisConnection.cs", label="Entry System.Guid.ToString()", span="0-0"];
m1_190 [cluster="Unk.Flush", file="RedisConnection.cs", label="Entry Unk.Flush", span=""];
m1_28 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="RedisConnection.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m1_10 [cluster="RedisWriteOnlyTransaction.cstr", file="RedisConnection.cs", label="Entry RedisWriteOnlyTransaction.cstr", span=""];
m1_205 [cluster="Unk.Add", file="RedisConnection.cs", label="Entry Unk.Add", span=""];
m1_193 [cluster="System.DateTime.Add(System.TimeSpan)", file="RedisConnection.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m1_129 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="242-242"];
m1_130 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="var transaction = Redis.CreateTransaction()", span="244-244"];
m1_131 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId))", span="246-247"];
m1_132 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', context.WorkerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        }))", span="249-255"];
m1_133 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="context.Queues", span="257-257"];
m1_135 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1))", span="260-262"];
m1_136 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="transaction.Commit()", span="265-265"];
m1_134 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="var queue1 = queue", span="259-259"];
m1_137 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="242-242"];
m1_145 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RedisConnection.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m1_202 [cluster="System.Tuple<T1, T2>.Tuple(T1, T2)", file="RedisConnection.cs", label="Entry System.Tuple<T1, T2>.Tuple(T1, T2)", span="0-0"];
m1_58 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="RedisConnection.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="0-0"];
m1_150 [cluster="Unk.AddItemToList", file="RedisConnection.cs", label="Entry Unk.AddItemToList", span=""];
m1_110 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", color=red, community=1, file="RedisConnection.cs", label="1: transaction.QueueCommand(x => x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                    ''Checked''))", span="227-229"];
m1_106 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", span="215-215"];
m1_107 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", color=red, community=0, file="RedisConnection.cs", label="1: var transaction = Redis.CreateTransaction()", span="217-217"];
m1_108 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", color=red, community=1, file="RedisConnection.cs", label="1: transaction.QueueCommand(x => x.RemoveItemFromList(\r\n                    String.Format(RedisStorage.Prefix + ''queue:{0}:dequeued'', queue),\r\n                    id,\r\n                    -1))", span="219-222"];
m1_109 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", color=red, community=1, file="RedisConnection.cs", label="1: transaction.QueueCommand(x => x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                    ''Fetched''))", span="224-226"];
m1_111 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", color=red, community=0, file="RedisConnection.cs", label="1: transaction.Commit()", span="231-231"];
m1_112 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", span="215-215"];
m1_6 [cluster="Unk.Dispose", file="RedisConnection.cs", label="Entry Unk.Dispose", span=""];
m1_163 [cluster="Unk.RemoveItemFromSet", file="RedisConnection.cs", label="Entry Unk.RemoveItemFromSet", span=""];
m1_191 [cluster="System.DateTime.DateTime(long)", file="RedisConnection.cs", label="Entry System.DateTime.DateTime(long)", span="0-0"];
m1_151 [cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.RemoveServer(string)", span="269-269"];
m1_152 [cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="RedisConnection.cs", label="RemoveServer(Redis, serverId)", span="271-271"];
m1_153 [cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.RemoveServer(string)", span="269-269"];
m1_192 [cluster="System.Math.Max(long, long)", file="RedisConnection.cs", label="Entry System.Math.Max(long, long)", span="0-0"];
m1_70 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.GetJobData(string)", span="149-149"];
m1_71 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="var storedData = Redis.GetAllEntriesFromHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id))", span="151-152"];
m1_72 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="storedData.Count == 0", span="154-154"];
m1_78 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="storedData.ContainsKey(''Type'')", span="161-161"];
m1_79 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="type = storedData[''Type'']", span="163-163"];
m1_80 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="storedData.ContainsKey(''Method'')", span="165-165"];
m1_81 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="method = storedData[''Method'']", span="167-167"];
m1_82 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="storedData.ContainsKey(''ParameterTypes'')", span="169-169"];
m1_83 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="parameterTypes = storedData[''ParameterTypes'']", span="171-171"];
m1_84 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="storedData.ContainsKey(''Arguments'')", span="173-173"];
m1_85 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="arguments = storedData[''Arguments'']", span="175-175"];
m1_92 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="return new JobData\r\n            {\r\n                Job = job,\r\n                State = storedData.ContainsKey(''State'') ? storedData[''State''] : null,\r\n                LoadException = loadException\r\n            };", span="192-197"];
m1_73 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="return null;", span="154-154"];
m1_74 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="string type = null", span="156-156"];
m1_75 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="string method = null", span="157-157"];
m1_88 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="var invocationData = new InvocationData(type, method, parameterTypes, arguments)", span="181-181"];
m1_76 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="string parameterTypes = null", span="158-158"];
m1_77 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="string arguments = null", span="159-159"];
m1_86 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="Job job = null", span="178-178"];
m1_87 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="JobLoadException loadException = null", span="179-179"];
m1_89 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="job = invocationData.Deserialize()", span="185-185"];
m1_90 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label=JobLoadException, span="187-187"];
m1_91 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="loadException = ex", span="189-189"];
m1_93 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.GetJobData(string)", span="149-149"];
m1_57 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="RedisConnection.cs", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
m1_199 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="315-319"];
m1_67 [cluster="lambda expression", file="RedisConnection.cs", label="x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn)", span="138-140"];
m1_63 [cluster="lambda expression", file="RedisConnection.cs", label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    storedParameters)", span="134-136"];
m1_62 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="134-136"];
m1_66 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="138-140"];
m1_64 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="134-136"];
m1_68 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="138-140"];
m1_114 [cluster="lambda expression", color=red, community=1, file="RedisConnection.cs", label="0: x.RemoveItemFromList(\r\n                    String.Format(RedisStorage.Prefix + ''queue:{0}:dequeued'', queue),\r\n                    id,\r\n                    -1)", span="219-222"];
m1_118 [cluster="lambda expression", color=red, community=1, file="RedisConnection.cs", label="0: x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                    ''Fetched'')", span="224-226"];
m1_122 [cluster="lambda expression", color=red, community=1, file="RedisConnection.cs", label="0: x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                    ''Checked'')", span="227-229"];
m1_113 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="219-222"];
m1_117 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="224-226"];
m1_121 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="227-229"];
m1_115 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="219-222"];
m1_119 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="224-226"];
m1_123 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="227-229"];
m1_139 [cluster="lambda expression", file="RedisConnection.cs", label="x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId)", span="246-247"];
m1_143 [cluster="lambda expression", file="RedisConnection.cs", label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', context.WorkerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        })", span="249-255"];
m1_148 [cluster="lambda expression", file="RedisConnection.cs", label="x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1)", span="260-262"];
m1_138 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="246-247"];
m1_142 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="249-255"];
m1_147 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="260-262"];
m1_140 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="246-247"];
m1_144 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="249-255"];
m1_149 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="260-262"];
m1_161 [cluster="lambda expression", file="RedisConnection.cs", label="x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId)", span="278-280"];
m1_165 [cluster="lambda expression", file="RedisConnection.cs", label="x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId))", span="282-284"];
m1_160 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="278-280"];
m1_164 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="282-284"];
m1_162 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="278-280"];
m1_166 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="282-284"];
m1_200 [cluster="lambda expression", file="RedisConnection.cs", label="heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1])))", span="315-319"];
m1_195 [cluster="lambda expression", file="RedisConnection.cs", label="x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat'')", span="312-314"];
m1_194 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="312-314"];
m1_196 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="312-314"];
m1_201 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="315-319"];
m1_0 [cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", span="33-33"];
m1_1 [cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="RedisConnection.cs", label="Redis = redis", span="35-35"];
m1_2 [cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", span="33-33"];
m1_32 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="RedisConnection.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
m1_128 [cluster="Unk.FirstOrDefault", file="RedisConnection.cs", label="Entry Unk.FirstOrDefault", span=""];
m1_51 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn))", span="138-140"];
m1_40 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="115-115"];
m1_41 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="var jobId = Guid.NewGuid().ToString()", span="120-120"];
m1_42 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="var invocationData = InvocationData.Serialize(job)", span="122-122"];
m1_43 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="var storedParameters = new Dictionary<string, string>(parameters)", span="125-125"];
m1_50 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    storedParameters))", span="134-136"];
m1_53 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="return jobId;", span="146-146"];
m1_44 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="storedParameters.Add(''Type'', invocationData.Type)", span="126-126"];
m1_45 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="storedParameters.Add(''Method'', invocationData.Method)", span="127-127"];
m1_46 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="storedParameters.Add(''ParameterTypes'', invocationData.ParameterTypes)", span="128-128"];
m1_47 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="storedParameters.Add(''Arguments'', invocationData.Arguments)", span="129-129"];
m1_48 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="storedParameters.Add(''CreatedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="130-130"];
m1_49 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="var transaction = Redis.CreateTransaction()", span="132-132"];
m1_52 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="transaction.Commit()", span="143-143"];
m1_54 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="115-115"];
m1_35 [cluster="HangFire.Redis.RedisConnection.AcquireJobLock(string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.AcquireJobLock(string)", span="108-108"];
m1_36 [cluster="HangFire.Redis.RedisConnection.AcquireJobLock(string)", file="RedisConnection.cs", label="return Redis.AcquireLock(\r\n                RedisStorage.Prefix + String.Format(''job:{0}:state-lock'', jobId),\r\n                TimeSpan.FromMinutes(1));", span="110-112"];
m1_37 [cluster="HangFire.Redis.RedisConnection.AcquireJobLock(string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.AcquireJobLock(string)", span="108-108"];
m1_116 [cluster="Unk.RemoveItemFromList", file="RedisConnection.cs", label="Entry Unk.RemoveItemFromList", span=""];
m1_100 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="RedisConnection.cs", label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                name,\r\n                value)", span="202-205"];
m1_99 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", span="200-200"];
m1_101 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", span="200-200"];
m1_189 [cluster="Unk.CreatePipeline", file="RedisConnection.cs", label="Entry Unk.CreatePipeline", span=""];
m1_55 [cluster="System.Guid.NewGuid()", file="RedisConnection.cs", label="Entry System.Guid.NewGuid()", span="0-0"];
m1_105 [cluster="Unk.GetValueFromHash", file="RedisConnection.cs", label="Entry Unk.GetValueFromHash", span=""];
m1_61 [cluster="Unk.Commit", file="RedisConnection.cs", label="Entry Unk.Commit", span=""];
m1_188 [cluster="Unk.GetAllItemsFromSet", file="RedisConnection.cs", label="Entry Unk.GetAllItemsFromSet", span=""];
m1_98 [cluster="HangFire.Storage.JobData.JobData()", file="RedisConnection.cs", label="Entry HangFire.Storage.JobData.JobData()", span="20-20"];
m1_97 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="RedisConnection.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m1_197 [cluster="Unk.Format", file="RedisConnection.cs", label="Entry Unk.Format", span=""];
m1_198 [cluster="Unk.GetValuesFromHash", file="RedisConnection.cs", label="Entry Unk.GetValuesFromHash", span=""];
m1_60 [cluster="Unk.QueueCommand", file="RedisConnection.cs", label="Entry Unk.QueueCommand", span=""];
m1_127 [cluster="Unk.GetRangeFromSortedSetByLowestScore", file="RedisConnection.cs", label="Entry Unk.GetRangeFromSortedSetByLowestScore", span=""];
m1_31 [cluster="Unk.PopAndPushItemBetweenLists", file="RedisConnection.cs", label="Entry Unk.PopAndPushItemBetweenLists", span=""];
m1_39 [cluster="Unk.AcquireLock", file="RedisConnection.cs", label="Entry Unk.AcquireLock", span=""];
m1_11 [cluster="Unk.CreateTransaction", file="RedisConnection.cs", label="Entry Unk.CreateTransaction", span=""];
m1_95 [cluster="Unk.ContainsKey", file="RedisConnection.cs", label="Entry Unk.ContainsKey", span=""];
m1_206 [file="RedisConnection.cs", label="HangFire.Redis.RedisConnection", span=""];
m1_207 [file="RedisConnection.cs", label=jobId, span=""];
m1_208 [file="RedisConnection.cs", label=storedParameters, span=""];
m1_209 [file="RedisConnection.cs", label="System.TimeSpan", span=""];
m1_210 [file="RedisConnection.cs", label=string, span=""];
m1_211 [file="RedisConnection.cs", label=string, span=""];
m1_212 [file="RedisConnection.cs", label=string, span=""];
m1_213 [file="RedisConnection.cs", label="HangFire.Server.ServerContext", span=""];
m1_214 [file="RedisConnection.cs", label=queue1, span=""];
m1_215 [file="RedisConnection.cs", label=string, span=""];
m1_216 [file="RedisConnection.cs", label=name, span=""];
m1_217 [file="RedisConnection.cs", label=heartbeats, span=""];
m2_8 [cluster="HangFire.Web.GenericHandler.ProcessRequest(HttpContext)", file="RedisProcessingJob.cs", label="Exit HangFire.Web.GenericHandler.ProcessRequest(HttpContext)", span="37-37"];
m2_3 [cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", file="RedisProcessingJob.cs", label="queue == null", span="26-26"];
m2_6 [cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", file="RedisProcessingJob.cs", label="Queue = queue", span="29-29"];
m2_7 [cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", file="RedisProcessingJob.cs", label="Exit HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", span="23-23"];
m2_0 [cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", file="RedisProcessingJob.cs", label="Entry HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", span="23-23"];
m2_1 [cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", color=green, community=0, file="RedisProcessingJob.cs", label="1: jobId == null", span="25-25"];
m2_2 [cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", file="RedisProcessingJob.cs", label="throw new ArgumentNullException(''jobId'');", span="25-25"];
m2_4 [cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", file="RedisProcessingJob.cs", label="throw new ArgumentNullException(''queue'');", span="26-26"];
m2_5 [cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", file="RedisProcessingJob.cs", label="JobId = jobId", span="28-28"];
m2_9 [file="RedisProcessingJob.cs", label="HangFire.Web.GenericHandler", span=""];
m3_256 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", span="293-293"];
m3_259 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="RedisProcessingJobFacts.cs", label="_filters.Add(outerFilter.Object)", span="299-299"];
m3_260 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="RedisProcessingJobFacts.cs", label="_filters.Add(innerFilter.Object)", span="300-300"];
m3_262 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="RedisProcessingJobFacts.cs", label="SetupStateMachineThrowsException(exception)", span="303-303"];
m3_263 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="RedisProcessingJobFacts.cs", label="var process = CreateProcess()", span="305-305"];
m3_264 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="RedisProcessingJobFacts.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object, _stateMachine.Object))", span="308-309"];
m3_265 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="RedisProcessingJobFacts.cs", label="outerFilter.Verify(x => x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception)))", span="311-311"];
m3_257 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="RedisProcessingJobFacts.cs", label="var outerFilter = new Mock<IClientFilter>()", span="296-296"];
m3_258 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="RedisProcessingJobFacts.cs", label="var innerFilter = new Mock<IClientFilter>()", span="297-297"];
m3_261 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="RedisProcessingJobFacts.cs", label="var exception = new InvalidOperationException()", span="302-302"];
m3_266 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", span="293-293"];
m3_84 [cluster="Unk.OnClientException", file="RedisProcessingJobFacts.cs", label="Entry Unk.OnClientException", span=""];
m3_12 [cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", file="RedisProcessingJobFacts.cs", label="var stateMachineFactory = new Mock<IStateMachineFactory>()", span="25-25"];
m3_64 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.SetupStateMachineThrowsException<TException>()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.SetupStateMachineThrowsException<TException>()", span="376-376"];
m3_332 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.SetupStateMachineThrowsException<TException>()", file="RedisProcessingJobFacts.cs", label="_stateMachine\r\n                .Setup(x => x.CreateInState(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>()))\r\n                .Throws<TException>()", span="379-381"];
m3_333 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.SetupStateMachineThrowsException<TException>()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.SetupStateMachineThrowsException<TException>()", span="376-376"];
m3_0 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", span="19-19"];
m3_1 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", color=green, community=0, file="RedisProcessingJobFacts.cs", label="1: var connection = new Mock<IStorageConnection>()", span="21-21"];
m3_2 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", color=green, community=0, file="RedisProcessingJobFacts.cs", label="1: var job = Job.FromExpression(() => TestMethod())", span="22-22"];
m3_19 [cluster="Mock<IState>.cstr", file="RedisProcessingJobFacts.cs", label="Entry Mock<IState>.cstr", span=""];
m3_20 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.TestMethod()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.TestMethod()", span="360-360"];
m3_26 [cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.TestMethod()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.CreatingContextFacts.TestMethod()", span="34-34"];
m3_27 [cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.TestMethod()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.CreatingContextFacts.TestMethod()", span="34-34"];
m3_28 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="RedisProcessingJobFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => process.Run(null, _stateMachine.Object))", span="40-41"];
m3_29 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="RedisProcessingJobFacts.cs", label="Assert.Equal(''context'', exception.ParamName)", span="43-43"];
m3_30 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", span="36-36"];
m3_236 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", span="272-272"];
m3_238 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="RedisProcessingJobFacts.cs", label="_filters.Add(filter.Object)", span="276-276"];
m3_240 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="RedisProcessingJobFacts.cs", label="SetupStateMachineThrowsException(exception)", span="279-279"];
m3_241 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="RedisProcessingJobFacts.cs", label="var process = CreateProcess()", span="281-281"];
m3_242 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="RedisProcessingJobFacts.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object, _stateMachine.Object))", span="284-285"];
m3_243 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="RedisProcessingJobFacts.cs", label="filter.Verify(x => x.OnCreated(It.Is<CreatedContext>(\r\n                context => context.Exception == exception)))", span="288-289"];
m3_237 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="RedisProcessingJobFacts.cs", label="var filter = new Mock<IClientFilter>()", span="275-275"];
m3_239 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="RedisProcessingJobFacts.cs", label="var exception = new InvalidOperationException()", span="278-278"];
m3_244 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", span="272-272"];
m3_13 [cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", file="RedisProcessingJobFacts.cs", label="var createContext = new CreateContext(\r\n                connection.Object, stateMachineFactory.Object, job, state.Object)", span="27-28"];
m3_306 [cluster="Unk.DoesNotThrow", file="RedisProcessingJobFacts.cs", label="Entry Unk.DoesNotThrow", span=""];
m3_36 [cluster="Unk.Run", file="RedisProcessingJobFacts.cs", label="Entry Unk.Run", span=""];
m3_245 [cluster="System.InvalidOperationException.InvalidOperationException()", file="RedisProcessingJobFacts.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m3_24 [cluster="lambda expression", color=red, community=0, file="RedisProcessingJobFacts.cs", label="0: TestMethod()", span="23-23"];
m3_3 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", color=green, community=0, file="RedisProcessingJobFacts.cs", label="1: var state = new Mock<IState>()", span="23-23"];
m3_37 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenStateMachineIsNull()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenStateMachineIsNull()", span="47-47"];
m3_38 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenStateMachineIsNull()", file="RedisProcessingJobFacts.cs", label="var process = CreateProcess()", span="49-49"];
m3_39 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenStateMachineIsNull()", file="RedisProcessingJobFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => process.Run(_context.Object, null))", span="51-52"];
m3_40 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenStateMachineIsNull()", file="RedisProcessingJobFacts.cs", label="Assert.Equal(''stateMachine'', exception.ParamName)", span="54-54"];
m3_41 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenStateMachineIsNull()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenStateMachineIsNull()", span="47-47"];
m3_76 [cluster="Mock<IClientExceptionFilter>.cstr", file="RedisProcessingJobFacts.cs", label="Entry Mock<IClientExceptionFilter>.cstr", span=""];
m3_59 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCatchExceptions()", span="80-80"];
m3_60 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="RedisProcessingJobFacts.cs", label="SetupStateMachineThrowsException<InvalidOperationException>()", span="82-82"];
m3_61 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="RedisProcessingJobFacts.cs", label="var process = CreateProcess()", span="84-84"];
m3_62 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="RedisProcessingJobFacts.cs", label="Assert.Throws<InvalidOperationException>(() => process.Run(_context.Object, _stateMachine.Object))", span="86-86"];
m3_63 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCatchExceptions()", span="80-80"];
m3_22 [cluster="lambda expression", color=green, community=0, file="RedisProcessingJobFacts.cs", label="1: x.CreateInState(\r\n                job,\r\n                It.IsNotNull<IDictionary<string, string>>(),\r\n                state.Object)", span="29-32"];
m3_85 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", span="110-110"];
m3_90 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="RedisProcessingJobFacts.cs", label="_filters.Add(filter1.Object)", span="119-119"];
m3_91 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="RedisProcessingJobFacts.cs", label="_filters.Add(filter2.Object)", span="120-120"];
m3_92 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="RedisProcessingJobFacts.cs", label="_stateMachine\r\n                .Setup(x => x.CreateInState(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>()))\r\n                .Throws<InvalidOperationException>()", span="122-124"];
m3_93 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="RedisProcessingJobFacts.cs", label="var process = CreateProcess()", span="126-126"];
m3_94 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="RedisProcessingJobFacts.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object, _stateMachine.Object))", span="129-130"];
m3_89 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="RedisProcessingJobFacts.cs", label="filter1.Setup(x => x.OnClientException(It.IsAny<ClientExceptionContext>())).InSequence()", span="117-117"];
m3_88 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="RedisProcessingJobFacts.cs", label="filter2.Setup(x => x.OnClientException(It.IsAny<ClientExceptionContext>())).InSequence()", span="116-116"];
m3_86 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="RedisProcessingJobFacts.cs", label="var filter1 = new Mock<IClientExceptionFilter>()", span="113-113"];
m3_87 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="RedisProcessingJobFacts.cs", label="var filter2 = new Mock<IClientExceptionFilter>()", span="114-114"];
m3_95 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", span="110-110"];
m3_7 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", color=green, community=0, file="RedisProcessingJobFacts.cs", label="1: _stateMachine.Setup(x => x.CreateInState(\r\n                job,\r\n                It.IsNotNull<IDictionary<string, string>>(),\r\n                state.Object)).Returns(JobId)", span="29-32"];
m3_45 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsJobCreator_ToCreateAJob()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsJobCreator_ToCreateAJob()", span="58-58"];
m3_46 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsJobCreator_ToCreateAJob()", color=green, community=0, file="RedisProcessingJobFacts.cs", label="1: var process = CreateProcess()", span="60-60"];
m3_47 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsJobCreator_ToCreateAJob()", color=green, community=0, file="RedisProcessingJobFacts.cs", label="1: process.Run(_context.Object, _stateMachine.Object)", span="62-62"];
m3_48 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsJobCreator_ToCreateAJob()", color=green, community=0, file="RedisProcessingJobFacts.cs", label="0: _stateMachine.Verify(\r\n                x => x.CreateInState(It.IsNotNull<Job>(), It.IsNotNull<IDictionary<string, string>>(), It.IsNotNull<IState>()), \r\n                Times.Once)", span="64-66"];
m3_49 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsJobCreator_ToCreateAJob()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsJobCreator_ToCreateAJob()", span="58-58"];
m3_193 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", span="226-226"];
m3_196 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="RedisProcessingJobFacts.cs", label="_filters.Add(outerFilter.Object)", span="232-232"];
m3_197 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="RedisProcessingJobFacts.cs", label="_filters.Add(innerFilter.Object)", span="233-233"];
m3_199 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="RedisProcessingJobFacts.cs", label="var process = CreateProcess()", span="238-238"];
m3_200 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="RedisProcessingJobFacts.cs", label="process.Run(_context.Object, _stateMachine.Object)", span="241-241"];
m3_198 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="RedisProcessingJobFacts.cs", label="innerFilter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>()))\r\n                .Callback((CreatingContext context) => context.Canceled = true)", span="235-236"];
m3_201 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="RedisProcessingJobFacts.cs", label="outerFilter.Verify(x => x.OnCreated(It.Is<CreatedContext>(context => context.Canceled)))", span="244-244"];
m3_194 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="RedisProcessingJobFacts.cs", label="var outerFilter = new Mock<IClientFilter>()", span="229-229"];
m3_195 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="RedisProcessingJobFacts.cs", label="var innerFilter = new Mock<IClientFilter>()", span="230-230"];
m3_202 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", span="226-226"];
m3_146 [cluster="Unk.OnCreated", file="RedisProcessingJobFacts.cs", label="Entry Unk.OnCreated", span=""];
m3_77 [cluster="Unk.Add", file="RedisProcessingJobFacts.cs", label="Entry Unk.Add", span=""];
m3_96 [cluster="Unk.InSequence", file="RedisProcessingJobFacts.cs", label="Entry Unk.InSequence", span=""];
m3_109 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", span="136-136"];
m3_110 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="SetupStateMachineThrowsException<InvalidOperationException>()", span="139-139"];
m3_113 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="_filters.Add(filter.Object)", span="145-145"];
m3_114 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="var process = CreateProcess()", span="147-147"];
m3_115 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="var jobId = process.Run(_context.Object, _stateMachine.Object)", span="150-150"];
m3_112 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="filter.Setup(x => x.OnClientException(It.IsAny<ClientExceptionContext>()))\r\n                .Callback((ClientExceptionContext x) => x.ExceptionHandled = true)", span="142-143"];
m3_111 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="var filter = new Mock<IClientExceptionFilter>()", span="141-141"];
m3_116 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="Assert.Null(jobId)", span="152-152"];
m3_117 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", span="136-136"];
m3_15 [cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", color=red, community=0, file="RedisProcessingJobFacts.cs", label="1: Assert.False(context.Canceled)", span="31-31"];
m3_328 [cluster="Unk.Throws", file="RedisProcessingJobFacts.cs", label="Entry Unk.Throws", span=""];
m3_119 [cluster="Unk.Null", file="RedisProcessingJobFacts.cs", label="Entry Unk.Null", span=""];
m3_54 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ReturnsJobIdentifier()", span="70-70"];
m3_55 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ReturnsJobIdentifier()", color=green, community=0, file="RedisProcessingJobFacts.cs", label="1: var process = CreateProcess()", span="72-72"];
m3_56 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="RedisProcessingJobFacts.cs", label="var result = process.Run(_context.Object, _stateMachine.Object)", span="74-74"];
m3_57 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="RedisProcessingJobFacts.cs", label="Assert.Equal(JobId, result)", span="76-76"];
m3_58 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ReturnsJobIdentifier()", span="70-70"];
m3_68 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", span="90-90"];
m3_70 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="RedisProcessingJobFacts.cs", label="_filters.Add(filter.Object)", span="94-94"];
m3_71 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="RedisProcessingJobFacts.cs", label="SetupStateMachineThrowsException<InvalidOperationException>()", span="96-96"];
m3_72 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="RedisProcessingJobFacts.cs", label="var process = CreateProcess()", span="98-98"];
m3_73 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="RedisProcessingJobFacts.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object, _stateMachine.Object))", span="101-102"];
m3_74 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="RedisProcessingJobFacts.cs", label="filter.Verify(x => x.OnClientException(\r\n                It.IsNotNull<ClientExceptionContext>()))", span="105-106"];
m3_69 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="RedisProcessingJobFacts.cs", label="var filter = new Mock<IClientExceptionFilter>()", span="93-93"];
m3_75 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", span="90-90"];
m3_25 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="23-23"];
m3_319 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="357-357"];
m3_4 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", color=green, community=0, file="RedisProcessingJobFacts.cs", label="1: _filters = new List<object>()", span="25-25"];
m3_5 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", color=green, community=0, file="RedisProcessingJobFacts.cs", label="1: _context = new Mock<CreateContext>(connection.Object, job, state.Object)", span="26-26"];
m3_6 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", color=green, community=0, file="RedisProcessingJobFacts.cs", label="1: _stateMachine = new Mock<IStateMachine>()", span="28-28"];
m3_23 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="29-32"];
m3_21 [cluster="CreateContext.cstr", file="RedisProcessingJobFacts.cs", label="Entry CreateContext.cstr", span=""];
m3_18 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", color=green, community=0, file="RedisProcessingJobFacts.cs", label="1: Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="148-148"];
m3_51 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="65-65"];
m3_52 [cluster="lambda expression", color=green, community=0, file="RedisProcessingJobFacts.cs", label="1: x.CreateInState(It.IsNotNull<Job>(), It.IsNotNull<IDictionary<string, string>>(), It.IsNotNull<IState>())", span="65-65"];
m3_53 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="65-65"];
m3_34 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="process.Run(null, _stateMachine.Object)", span="41-41"];
m3_43 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="process.Run(_context.Object, null)", span="52-52"];
m3_66 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="process.Run(_context.Object, _stateMachine.Object)", span="86-86"];
m3_79 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="process.Run(_context.Object, _stateMachine.Object)", span="102-102"];
m3_107 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="process.Run(_context.Object, _stateMachine.Object)", span="130-130"];
m3_228 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="process.Run(_context.Object, _stateMachine.Object)", span="261-261"];
m3_248 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="process.Run(_context.Object, _stateMachine.Object)", span="285-285"];
m3_268 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="process.Run(_context.Object, _stateMachine.Object)", span="309-309"];
m3_314 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="process.Run(_context.Object, _stateMachine.Object)", span="354-354"];
m3_82 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnClientException(\r\n                It.IsNotNull<ClientExceptionContext>())", span="105-106"];
m3_98 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnClientException(It.IsAny<ClientExceptionContext>())", span="116-116"];
m3_101 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnClientException(It.IsAny<ClientExceptionContext>())", span="117-117"];
m3_104 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.CreateInState(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>())", span="123-123"];
m3_121 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnClientException(It.IsAny<ClientExceptionContext>())", span="142-142"];
m3_137 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnCreating(It.IsNotNull<CreatingContext>())", span="162-162"];
m3_141 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.CreateInState(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>())", span="164-164"];
m3_144 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnCreated(It.IsNotNull<CreatedContext>())", span="167-167"];
m3_160 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="187-187"];
m3_163 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="188-188"];
m3_166 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="189-189"];
m3_169 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="190-190"];
m3_182 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="207-207"];
m3_188 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.CreateInState(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>())", span="219-219"];
m3_191 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="222-222"];
m3_204 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="235-235"];
m3_210 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnCreated(It.Is<CreatedContext>(context => context.Canceled))", span="244-244"];
m3_225 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="254-254"];
m3_231 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.CreateInState(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>())", span="265-265"];
m3_234 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="268-268"];
m3_251 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnCreated(It.Is<CreatedContext>(\r\n                context => context.Exception == exception))", span="288-289"];
m3_271 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception))", span="311-311"];
m3_287 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception))", span="324-324"];
m3_308 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="348-348"];
m3_317 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.OnCreated(It.Is<CreatedContext>(context => context.Exception != null))", span="357-357"];
m3_330 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.CreateInState(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>())", span="372-372"];
m3_335 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.CreateInState(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>())", span="380-380"];
m3_33 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="41-41"];
m3_35 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="41-41"];
m3_42 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="52-52"];
m3_44 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="52-52"];
m3_65 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="86-86"];
m3_67 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="86-86"];
m3_78 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="102-102"];
m3_80 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="102-102"];
m3_103 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="123-123"];
m3_106 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="130-130"];
m3_108 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="130-130"];
m3_140 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="164-164"];
m3_187 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="219-219"];
m3_227 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="261-261"];
m3_229 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="261-261"];
m3_230 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="265-265"];
m3_247 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="285-285"];
m3_249 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="285-285"];
m3_267 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="309-309"];
m3_269 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="309-309"];
m3_313 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="354-354"];
m3_315 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="354-354"];
m3_329 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="372-372"];
m3_334 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="380-380"];
m3_100 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="117-117"];
m3_97 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="116-116"];
m3_120 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="142-142"];
m3_123 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="143-143"];
m3_136 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="162-162"];
m3_143 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="167-167"];
m3_159 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="187-187"];
m3_168 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="190-190"];
m3_162 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="188-188"];
m3_165 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="189-189"];
m3_181 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="207-207"];
m3_184 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="208-208"];
m3_203 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="235-235"];
m3_206 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="236-236"];
m3_224 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="254-254"];
m3_286 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="324-324"];
m3_292 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="325-325"];
m3_307 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="348-348"];
m3_310 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="349-349"];
m3_81 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="105-106"];
m3_83 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="105-106"];
m3_99 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="116-116"];
m3_102 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="117-117"];
m3_105 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="123-123"];
m3_122 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="142-142"];
m3_138 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="162-162"];
m3_142 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="164-164"];
m3_145 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="167-167"];
m3_161 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="187-187"];
m3_164 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="188-188"];
m3_167 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="189-189"];
m3_170 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="190-190"];
m3_183 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="207-207"];
m3_189 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="219-219"];
m3_190 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="222-222"];
m3_192 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="222-222"];
m3_205 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="235-235"];
m3_209 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="244-244"];
m3_211 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="244-244"];
m3_212 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="244-244"];
m3_226 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="254-254"];
m3_232 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="265-265"];
m3_233 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="268-268"];
m3_235 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="268-268"];
m3_250 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="288-289"];
m3_252 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="288-289"];
m3_253 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="289-289"];
m3_270 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="311-311"];
m3_272 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="311-311"];
m3_273 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="311-311"];
m3_288 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="324-324"];
m3_289 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="324-324"];
m3_309 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="348-348"];
m3_316 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="357-357"];
m3_318 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="357-357"];
m3_331 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="372-372"];
m3_336 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="380-380"];
m3_254 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="context.Exception == exception", span="289-289"];
m3_274 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="context.Exception == exception", span="311-311"];
m3_290 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="context.Exception == exception", span="324-324"];
m3_125 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="143-143"];
m3_124 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.ExceptionHandled = true", span="143-143"];
m3_186 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="208-208"];
m3_185 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.Canceled = true", span="208-208"];
m3_208 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="236-236"];
m3_207 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="context.Canceled = true", span="236-236"];
m3_294 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="325-325"];
m3_293 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.ExceptionHandled = true", span="325-325"];
m3_312 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="349-349"];
m3_311 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="x.ExceptionHandled = true", span="349-349"];
m3_214 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="244-244"];
m3_213 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="context.Canceled", span="244-244"];
m3_255 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="289-289"];
m3_275 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="311-311"];
m3_291 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="324-324"];
m3_320 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="context.Exception != null", span="357-357"];
m3_321 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="357-357"];
m3_8 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", span="19-19"];
m3_9 [cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", file="RedisProcessingJobFacts.cs", label="var connection = new Mock<IStorageConnection>()", span="22-22"];
m3_10 [cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", color=red, community=0, file="RedisProcessingJobFacts.cs", label="1: var job = Job.FromExpression(() => TestMethod())", span="23-23"];
m3_11 [cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", file="RedisProcessingJobFacts.cs", label="var state = new Mock<IState>()", span="24-24"];
m3_14 [cluster="Mock<IStateMachine>.cstr", file="RedisProcessingJobFacts.cs", label="Entry Mock<IStateMachine>.cstr", span=""];
m3_16 [cluster="Unk.Returns", file="RedisProcessingJobFacts.cs", label="Entry Unk.Returns", span=""];
m3_31 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.CreateProcess()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.CreateProcess()", span="364-364"];
m3_323 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.CreateProcess()", file="RedisProcessingJobFacts.cs", label="return new DefaultJobCreationProcess(_filters);", span="366-366"];
m3_324 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.CreateProcess()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.CreateProcess()", span="364-364"];
m3_50 [cluster="Unk.Verify", file="RedisProcessingJobFacts.cs", label="Entry Unk.Verify", span=""];
m3_276 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", span="315-315"];
m3_278 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="_filters.Add(filter.Object)", span="319-319"];
m3_280 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="SetupStateMachineThrowsException(exception)", span="322-322"];
m3_282 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="var process = CreateProcess()", span="327-327"];
m3_283 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="var jobId = process.Run(_context.Object, _stateMachine.Object)", span="330-330"];
m3_281 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="filter.Setup(x => x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception)))\r\n                .Callback((CreatedContext x) => x.ExceptionHandled = true)", span="324-325"];
m3_277 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="var filter = new Mock<IClientFilter>()", span="318-318"];
m3_279 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="var exception = new InvalidOperationException()", span="321-321"];
m3_284 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="Assert.Null(jobId)", span="333-333"];
m3_285 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", span="315-315"];
m3_295 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", span="337-337"];
m3_298 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="RedisProcessingJobFacts.cs", label="_filters.Add(outerFilter.Object)", span="343-343"];
m3_299 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="RedisProcessingJobFacts.cs", label="_filters.Add(innerFilter.Object)", span="344-344"];
m3_300 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="RedisProcessingJobFacts.cs", label="SetupStateMachineThrowsException<InvalidOperationException>()", span="346-346"];
m3_302 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="RedisProcessingJobFacts.cs", label="var process = CreateProcess()", span="351-351"];
m3_303 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="RedisProcessingJobFacts.cs", label="Assert.DoesNotThrow(() => process.Run(_context.Object, _stateMachine.Object))", span="354-354"];
m3_301 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="RedisProcessingJobFacts.cs", label="innerFilter.Setup(x => x.OnCreated(It.IsAny<CreatedContext>()))\r\n                .Callback((CreatedContext x) => x.ExceptionHandled = true)", span="348-349"];
m3_304 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="RedisProcessingJobFacts.cs", label="outerFilter.Verify(x => x.OnCreated(It.Is<CreatedContext>(context => context.Exception != null)))", span="357-357"];
m3_296 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="RedisProcessingJobFacts.cs", label="var outerFilter = new Mock<IClientFilter>()", span="340-340"];
m3_297 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="RedisProcessingJobFacts.cs", label="var innerFilter = new Mock<IClientFilter>()", span="341-341"];
m3_305 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", span="337-337"];
m3_139 [cluster="Unk.OnCreating", file="RedisProcessingJobFacts.cs", label="Entry Unk.OnCreating", span=""];
m3_118 [cluster="Unk.Callback", file="RedisProcessingJobFacts.cs", label="Entry Unk.Callback", span=""];
m3_322 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.TestMethod()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.TestMethod()", span="360-360"];
m3_215 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", span="248-248"];
m3_217 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="RedisProcessingJobFacts.cs", label="_filters.Add(filter.Object)", span="252-252"];
m3_219 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="RedisProcessingJobFacts.cs", label="var process = CreateProcess()", span="257-257"];
m3_220 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="RedisProcessingJobFacts.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object, _stateMachine.Object))", span="260-261"];
m3_221 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="RedisProcessingJobFacts.cs", label="_stateMachine.Verify(\r\n                x => x.CreateInState(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>()), \r\n                Times.Never)", span="264-266"];
m3_218 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="RedisProcessingJobFacts.cs", label="filter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>()))\r\n                .Throws<InvalidOperationException>()", span="254-255"];
m3_222 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="RedisProcessingJobFacts.cs", label="filter.Verify(x => x.OnCreated(It.IsAny<CreatedContext>()), Times.Never)", span="268-268"];
m3_216 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="RedisProcessingJobFacts.cs", label="var filter = new Mock<IClientFilter>()", span="251-251"];
m3_223 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", span="248-248"];
m3_171 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", span="201-201"];
m3_173 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="_filters.Add(filter.Object)", span="205-205"];
m3_175 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="var process = CreateProcess()", span="210-210"];
m3_176 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="var jobId = process.Run(_context.Object, _stateMachine.Object)", span="213-213"];
m3_178 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="_stateMachine.Verify(\r\n                x => x.CreateInState(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>()), \r\n                Times.Never)", span="218-220"];
m3_174 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="filter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>()))\r\n                .Callback((CreatingContext x) => x.Canceled = true)", span="207-208"];
m3_179 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="filter.Verify(x => x.OnCreated(It.IsAny<CreatedContext>()), Times.Never)", span="222-222"];
m3_172 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="var filter = new Mock<IClientFilter>()", span="204-204"];
m3_177 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="Assert.Null(jobId)", span="216-216"];
m3_180 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", span="201-201"];
m3_135 [cluster="Mock<IClientFilter>.cstr", file="RedisProcessingJobFacts.cs", label="Entry Mock<IClientFilter>.cstr", span=""];
m3_246 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.SetupStateMachineThrowsException(System.Exception)", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.SetupStateMachineThrowsException(System.Exception)", span="369-369"];
m3_326 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.SetupStateMachineThrowsException(System.Exception)", file="RedisProcessingJobFacts.cs", label="_stateMachine\r\n                .Setup(x => x.CreateInState(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>()))\r\n                .Throws(exception)", span="371-373"];
m3_327 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.SetupStateMachineThrowsException(System.Exception)", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.SetupStateMachineThrowsException(System.Exception)", span="369-369"];
m3_17 [cluster="Mock<IStorageConnection>.cstr", file="RedisProcessingJobFacts.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m3_325 [cluster="Hangfire.Client.DefaultJobCreationProcess.DefaultJobCreationProcess(System.Collections.Generic.IEnumerable<object>)", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Client.DefaultJobCreationProcess.DefaultJobCreationProcess(System.Collections.Generic.IEnumerable<object>)", span="40-40"];
m3_147 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", span="178-178"];
m3_150 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="RedisProcessingJobFacts.cs", label="_filters.Add(outerFilter.Object)", span="184-184"];
m3_151 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="RedisProcessingJobFacts.cs", label="_filters.Add(innerFilter.Object)", span="185-185"];
m3_156 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="RedisProcessingJobFacts.cs", label="var process = CreateProcess()", span="192-192"];
m3_157 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="RedisProcessingJobFacts.cs", label="process.Run(_context.Object, _stateMachine.Object)", span="195-195"];
m3_152 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="RedisProcessingJobFacts.cs", label="outerFilter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>())).InSequence()", span="187-187"];
m3_155 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="RedisProcessingJobFacts.cs", label="outerFilter.Setup(x => x.OnCreated(It.IsAny<CreatedContext>())).InSequence()", span="190-190"];
m3_153 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="RedisProcessingJobFacts.cs", label="innerFilter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>())).InSequence()", span="188-188"];
m3_154 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="RedisProcessingJobFacts.cs", label="innerFilter.Setup(x => x.OnCreated(It.IsAny<CreatedContext>())).InSequence()", span="189-189"];
m3_148 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="RedisProcessingJobFacts.cs", label="var outerFilter = new Mock<IClientFilter>()", span="181-181"];
m3_149 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="RedisProcessingJobFacts.cs", label="var innerFilter = new Mock<IClientFilter>()", span="182-182"];
m3_158 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", span="178-178"];
m3_126 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="RedisProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", span="156-156"];
m3_128 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="RedisProcessingJobFacts.cs", label="_filters.Add(filter.Object)", span="160-160"];
m3_130 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="RedisProcessingJobFacts.cs", label="_stateMachine.Setup(x => x.CreateInState(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>()))\r\n                .InSequence()", span="164-165"];
m3_132 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="RedisProcessingJobFacts.cs", label="var process = CreateProcess()", span="169-169"];
m3_133 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="RedisProcessingJobFacts.cs", label="process.Run(_context.Object, _stateMachine.Object)", span="172-172"];
m3_129 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="RedisProcessingJobFacts.cs", label="filter.Setup(x => x.OnCreating(It.IsNotNull<CreatingContext>())).InSequence()", span="162-162"];
m3_131 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="RedisProcessingJobFacts.cs", label="filter.Setup(x => x.OnCreated(It.IsNotNull<CreatedContext>())).InSequence()", span="167-167"];
m3_127 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="RedisProcessingJobFacts.cs", label="var filter = new Mock<IClientFilter>()", span="159-159"];
m3_134 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="RedisProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", span="156-156"];
m3_337 [file="RedisProcessingJobFacts.cs", label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", span=""];
m3_338 [file="RedisProcessingJobFacts.cs", label=job, span=""];
m3_339 [file="RedisProcessingJobFacts.cs", label=state, span=""];
m3_340 [file="RedisProcessingJobFacts.cs", label=process, span=""];
m3_341 [file="RedisProcessingJobFacts.cs", label=process, span=""];
m3_342 [file="RedisProcessingJobFacts.cs", label=process, span=""];
m3_343 [file="RedisProcessingJobFacts.cs", label=process, span=""];
m3_344 [file="RedisProcessingJobFacts.cs", label=process, span=""];
m3_345 [file="RedisProcessingJobFacts.cs", label=process, span=""];
m3_346 [file="RedisProcessingJobFacts.cs", label=process, span=""];
m3_348 [file="RedisProcessingJobFacts.cs", label=process, span=""];
m3_351 [file="RedisProcessingJobFacts.cs", label=process, span=""];
m3_347 [file="RedisProcessingJobFacts.cs", label=exception, span=""];
m3_349 [file="RedisProcessingJobFacts.cs", label=exception, span=""];
m3_350 [file="RedisProcessingJobFacts.cs", label=exception, span=""];
m4_16 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerConnection.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m4_47 [cluster="System.InvalidOperationException.InvalidOperationException(string, System.Exception)", file="SqlServerConnection.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string, System.Exception)", span="0-0"];
m4_46 [cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="SqlServerConnection.cs", label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39"];
m4_39 [cluster="Hangfire.Client.CreateContext.GetJobParameter<T>(string)", file="SqlServerConnection.cs", label="Entry Hangfire.Client.CreateContext.GetJobParameter<T>(string)", span="129-129"];
m4_42 [cluster="Hangfire.Client.CreateContext.GetJobParameter<T>(string)", file="SqlServerConnection.cs", label="return _parameters.ContainsKey(name)\r\n                    ? JobHelper.FromJson<T>(_parameters[name])\r\n                    : default(T);", span="135-137"];
m4_40 [cluster="Hangfire.Client.CreateContext.GetJobParameter<T>(string)", file="SqlServerConnection.cs", label="String.IsNullOrWhiteSpace(name)", span="131-131"];
m4_41 [cluster="Hangfire.Client.CreateContext.GetJobParameter<T>(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''name'');", span="131-131"];
m4_44 [cluster="Hangfire.Client.CreateContext.GetJobParameter<T>(string)", file="SqlServerConnection.cs", label="throw new InvalidOperationException(String.Format(\r\n                    ''Could not get a value of the job parameter `{0}`. See inner exception for details.'',\r\n                    name), ex);", span="141-143"];
m4_43 [cluster="Hangfire.Client.CreateContext.GetJobParameter<T>(string)", file="SqlServerConnection.cs", label=Exception, span="139-139"];
m4_45 [cluster="Hangfire.Client.CreateContext.GetJobParameter<T>(string)", file="SqlServerConnection.cs", label="Exit Hangfire.Client.CreateContext.GetJobParameter<T>(string)", span="129-129"];
m4_48 [cluster="string.Format(string, object)", file="SqlServerConnection.cs", label="Entry string.Format(string, object)", span="0-0"];
m4_0 [cluster="Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, string, bool, System.Exception)", file="SqlServerConnection.cs", label="Entry Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, string, bool, System.Exception)", span="27-27"];
m4_1 [cluster="Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, string, bool, System.Exception)", file="SqlServerConnection.cs", label="JobId = jobId", span="34-34"];
m4_2 [cluster="Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, string, bool, System.Exception)", file="SqlServerConnection.cs", label="Canceled = canceled", span="35-35"];
m4_3 [cluster="Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, string, bool, System.Exception)", file="SqlServerConnection.cs", label="Exception = exception", span="36-36"];
m4_34 [cluster="string.IsNullOrWhiteSpace(string)", file="SqlServerConnection.cs", label="Entry string.IsNullOrWhiteSpace(string)", span="0-0"];
m4_4 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerConnection.cs", label="Entry Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", span="43-43"];
m4_37 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="SqlServerConnection.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m4_36 [cluster="Hangfire.Common.JobHelper.ToJson(object)", file="SqlServerConnection.cs", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
m4_38 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="SqlServerConnection.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m4_11 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerConnection.cs", label="Connection = connection", span="52-52"];
m4_12 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerConnection.cs", label="Job = job", span="53-53"];
m4_13 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerConnection.cs", label="InitialState = initialState", span="54-54"];
m4_14 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerConnection.cs", label="Items = new Dictionary<string, object>()", span="56-56"];
m4_9 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerConnection.cs", label="initialState == null", span="50-50"];
m4_6 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''connection'');", span="48-48"];
m4_8 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''job'');", span="49-49"];
m4_10 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''initialState'');", span="50-50"];
m4_5 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerConnection.cs", label="Hangfire.Client.CreatedContext", span=""];
m4_7 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerConnection.cs", label="job == null", span="49-49"];
m4_15 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerConnection.cs", label="Exit Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", span="43-43"];
m4_35 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="SqlServerConnection.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m4_24 [cluster="Hangfire.Client.CreateContext.SetJobParameter(string, object)", file="SqlServerConnection.cs", label="Entry Hangfire.Client.CreateContext.SetJobParameter(string, object)", span="96-96"];
m4_28 [cluster="Hangfire.Client.CreateContext.SetJobParameter(string, object)", color=green, community=0, file="SqlServerConnection.cs", label="0: throw new InvalidOperationException(''Could not set parameter for a created job.'');", span="102-102"];
m4_27 [cluster="Hangfire.Client.CreateContext.SetJobParameter(string, object)", file="SqlServerConnection.cs", label=_jobWasCreated, span="100-100"];
m4_25 [cluster="Hangfire.Client.CreateContext.SetJobParameter(string, object)", file="SqlServerConnection.cs", label="String.IsNullOrWhiteSpace(name)", span="98-98"];
m4_29 [cluster="Hangfire.Client.CreateContext.SetJobParameter(string, object)", file="SqlServerConnection.cs", label="var serializedValue = JobHelper.ToJson(value)", span="105-105"];
m4_31 [cluster="Hangfire.Client.CreateContext.SetJobParameter(string, object)", file="SqlServerConnection.cs", label="_parameters.Add(name, serializedValue)", span="109-109"];
m4_32 [cluster="Hangfire.Client.CreateContext.SetJobParameter(string, object)", file="SqlServerConnection.cs", label="_parameters[name] = serializedValue", span="113-113"];
m4_26 [cluster="Hangfire.Client.CreateContext.SetJobParameter(string, object)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''name'');", span="98-98"];
m4_30 [cluster="Hangfire.Client.CreateContext.SetJobParameter(string, object)", file="SqlServerConnection.cs", label="!_parameters.ContainsKey(name)", span="107-107"];
m4_33 [cluster="Hangfire.Client.CreateContext.SetJobParameter(string, object)", file="SqlServerConnection.cs", label="Exit Hangfire.Client.CreateContext.SetJobParameter(string, object)", span="96-96"];
m4_49 [file="SqlServerConnection.cs", label="Hangfire.Client.CreateContext", span=""];
m5_8 [cluster="HangFire.JobHelper.ToTimestamp(System.DateTime)", file="SqlServerProcessingJob.cs", label="Entry HangFire.JobHelper.ToTimestamp(System.DateTime)", span="40-40"];
m5_5 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", file="SqlServerProcessingJob.cs", label="JobId = jobId", span="28-28"];
m5_7 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", file="SqlServerProcessingJob.cs", label="Exit HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", span="23-23"];
m5_10 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", file="SqlServerProcessingJob.cs", label="Entry HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", span="25-25"];
m5_11 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", color=green, community=0, file="SqlServerProcessingJob.cs", label="0: Given(String.Format(''a job of the '{0}' type'', type))", span="27-27"];
m5_12 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", file="SqlServerProcessingJob.cs", label="And(''its state is Scheduled'')", span="28-28"];
m5_13 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", color=green, community=0, file="SqlServerProcessingJob.cs", label="0: Redis.Client.AddItemToSortedSet(\r\n                ''hangfire:schedule'',\r\n                JobSteps.DefaultJobId,\r\n                JobHelper.ToTimestamp(DateTime.UtcNow.AddMinutes(-1)))", span="30-33"];
m5_14 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", file="SqlServerProcessingJob.cs", label="Exit HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", span="25-25"];
m5_0 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", file="SqlServerProcessingJob.cs", label="Entry HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", span="23-23"];
m5_3 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", color=green, community=0, file="SqlServerProcessingJob.cs", label="0: queue == null", span="26-26"];
m5_2 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", file="SqlServerProcessingJob.cs", label="throw new ArgumentNullException(''jobId'');", span="25-25"];
m5_1 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", file="SqlServerProcessingJob.cs", label="jobId == null", span="25-25"];
m5_4 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", file="SqlServerProcessingJob.cs", label="throw new ArgumentNullException(''queue'');", span="26-26"];
m5_9 [cluster="Unk.AddItemToSortedSet", file="SqlServerProcessingJob.cs", label="HangFire.SqlServer.SqlServerProcessingJob", span=""];
m5_6 [cluster="Unk.And", file="SqlServerProcessingJob.cs", label="Entry Unk.And", span=""];
m5_15 [cluster="string.Format(string, object)", file="SqlServerProcessingJob.cs", label="Entry string.Format(string, object)", span="0-0"];
m5_16 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SqlServerProcessingJob.cs", label="Entry HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", span="37-37"];
m5_19 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", color=green, community=0, file="SqlServerProcessingJob.cs", label="0: Redis.Client.AddItemToSortedSet(\r\n                ''hangfire:schedule'',\r\n                JobSteps.DefaultJobId,\r\n                JobHelper.ToTimestamp(DateTime.UtcNow.AddHours(1)))", span="42-45"];
m5_18 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SqlServerProcessingJob.cs", label="And(''its state is Scheduled'')", span="40-40"];
m5_17 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SqlServerProcessingJob.cs", label="Given(''a job'')", span="39-39"];
m5_20 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SqlServerProcessingJob.cs", label="Exit HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", span="37-37"];
m6_53 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: testRunner.And(''the schedule contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="113-113"];
m6_54 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="115-115"];
m6_25 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerProcessingJobFacts.cs", label="var parameterArray = new object[parameters.Count]", span="69-69"];
m6_29 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerProcessingJobFacts.cs", label="string insertParameterSql = @''\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@jobId, @name, @value)''", span="81-83"];
m6_58 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SqlServerProcessingJobFacts.cs", label="Entry HangFire.Tests.Server.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", span="126-126"];
m6_59 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SqlServerProcessingJobFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Poller will enqueue only jobs in the Scheduled state'', ((string[])(null)))", span="128-128"];
m6_60 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SqlServerProcessingJobFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="130-130"];
m6_66 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SqlServerProcessingJobFacts.cs", label="this.ScenarioCleanup()", span="142-142"];
m6_21 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerProcessingJobFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="46-46"];
m6_15 [cluster="HangFire.Tests.Server.SchedulePollerFeature.TestInitialize()", file="SqlServerProcessingJobFacts.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''SchedulePoller''))", span="49-50"];
m6_65 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SqlServerProcessingJobFacts.cs", label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="140-140"];
m6_30 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerProcessingJobFacts.cs", label="_connection.Execute(insertParameterSql, parameterArray)", span="85-85"];
m6_31 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: return jobId;", span="88-88"];
m6_32 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: Exit HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="46-46"];
m6_33 [cluster="HangFire.Common.JobHelper.ToJson(object)", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m6_34 [cluster="System.DateTime.Add(System.TimeSpan)", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m6_35 [cluster="Unk.>", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: Entry Unk.>", span=""];
m6_36 [cluster="Unk.Single", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: Entry Unk.Single", span=""];
m6_37 [cluster="Unk.ToString", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: Entry Unk.ToString", span=""];
m6_38 [cluster="Unk.Execute", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: Entry Unk.Execute", span=""];
m6_39 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobStateAndInvocationData(string)", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: Entry HangFire.SqlServer.SqlServerConnection.GetJobStateAndInvocationData(string)", span="91-91"];
m6_40 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobStateAndInvocationData(string)", file="SqlServerProcessingJobFacts.cs", label="string sql = @''\r\nselect InvocationData, StateName \r\nfrom HangFire.Job\r\nwhere id = @id''", span="93-96"];
m6_0 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.JobStorage, SqlConnection)", file="SqlServerProcessingJobFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.JobStorage, SqlConnection)", span="16-16"];
m6_2 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.JobStorage, SqlConnection)", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="0: Storage = storage", span="19-19"];
m6_1 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.JobStorage, SqlConnection)", file="SqlServerProcessingJobFacts.cs", label="_connection = connection", span="18-18"];
m6_3 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.JobStorage, SqlConnection)", file="SqlServerProcessingJobFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.JobStorage, SqlConnection)", span="16-16"];
m6_4 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerProcessingJobFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Dispose()", span="24-24"];
m6_20 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScenarioTearDown()", file="SqlServerProcessingJobFacts.cs", label="Exit HangFire.Tests.Server.SchedulePollerFeature.ScenarioTearDown()", span="57-57"];
m6_75 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerProcessingJobFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="177-177"];
m6_77 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItsType()", file="SqlServerProcessingJobFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m6_81 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItsType()", file="SqlServerProcessingJobFacts.cs", label="this.ScenarioCleanup()", span="178-178"];
m6_76 [cluster="System.TimeSpan.Negate()", file="SqlServerProcessingJobFacts.cs", label="Entry System.TimeSpan.Negate()", span="0-0"];
m6_78 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItsType()", file="SqlServerProcessingJobFacts.cs", label="testRunner.Given(''a scheduled job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="172-172"];
m6_79 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItsType()", file="SqlServerProcessingJobFacts.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="174-174"];
m6_80 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItsType()", file="SqlServerProcessingJobFacts.cs", label="testRunner.Then(''the job moved to the Failed state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="176-176"];
m6_82 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItsType()", file="SqlServerProcessingJobFacts.cs", label="Exit HangFire.Tests.Server.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItsType()", span="166-166"];
m6_45 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobStateAndInvocationData(string)", file="SqlServerProcessingJobFacts.cs", label="return new StateAndInvocationData\r\n            {\r\n                InvocationData = data,\r\n                State = job.StateName,\r\n            };", span="105-109"];
m6_46 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobStateAndInvocationData(string)", file="SqlServerProcessingJobFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetJobStateAndInvocationData(string)", span="91-91"];
m6_83 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SqlServerProcessingJobFacts.cs", label="Entry HangFire.Tests.Server.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", span="185-185"];
m6_85 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SqlServerProcessingJobFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="189-189"];
m6_90 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SqlServerProcessingJobFacts.cs", label="this.ScenarioCleanup()", span="199-199"];
m6_84 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SqlServerProcessingJobFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Poller will fail only jobs in the Scheduled state'', ((string[])(null)))", span="187-187"];
m6_86 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SqlServerProcessingJobFacts.cs", label="testRunner.Given(''a scheduled job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="191-191"];
m6_88 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SqlServerProcessingJobFacts.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="195-195"];
m6_89 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SqlServerProcessingJobFacts.cs", label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="197-197"];
m6_87 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SqlServerProcessingJobFacts.cs", label="testRunner.And(''its state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="193-193"];
m6_91 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SqlServerProcessingJobFacts.cs", label="Exit HangFire.Tests.Server.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", span="185-185"];
m6_47 [cluster="Unk.SingleOrDefault", file="SqlServerProcessingJobFacts.cs", label="Entry Unk.SingleOrDefault", span=""];
m6_48 [cluster="HangFire.Storage.StateAndInvocationData.StateAndInvocationData()", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: Entry HangFire.Storage.StateAndInvocationData.StateAndInvocationData()", span="2-2"];
m6_49 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="112-112"];
m6_50 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: _connection.Execute(\r\n                @''merge HangFire.JobParameter as Target ''\r\n                + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                + @''when matched then update set Value = Source.Value ''\r\n                + @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                new { jobId = id, name, value })", span="114-120"];
m6_51 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: Exit HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="112-112"];
m6_52 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: testRunner.Then(''the job remains to be in the Scheduled state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="111-111"];
m6_55 [cluster="HangFire.SqlServer.SqlServerConnection.CompleteJob(HangFire.Server.JobPayload)", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: Entry HangFire.SqlServer.SqlServerConnection.CompleteJob(HangFire.Server.JobPayload)", span="131-131"];
m6_56 [cluster="HangFire.SqlServer.SqlServerConnection.CompleteJob(HangFire.Server.JobPayload)", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: _connection.Execute(''delete from HangFire.JobQueue where JobId = @id and Queue = @queueName'',\r\n                new { id = payload.Id, queueName = payload.Queue })", span="133-134"];
m6_57 [cluster="HangFire.SqlServer.SqlServerConnection.CompleteJob(HangFire.Server.JobPayload)", file="SqlServerProcessingJobFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.CompleteJob(HangFire.Server.JobPayload)", span="131-131"];
m6_5 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerProcessingJobFacts.cs", label="_connection.Dispose()", span="26-26"];
m6_61 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerProcessingJobFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", span="145-145"];
m6_63 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerProcessingJobFacts.cs", label="_connection.Execute(\r\n                @''merge HangFire.Server as Target ''\r\n                + @''using (VALUES (@id, @data)) as Source (Id, Data) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = null ''\r\n                + @''when not matched then insert (Id, Data) values (Source.Id, Source.Data);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data) })", span="154-160"];
m6_64 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerProcessingJobFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", span="145-145"];
m6_62 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerProcessingJobFacts.cs", label="var data = new ServerData\r\n            {\r\n                WorkerCount = workerCount,\r\n                Queues = queues.ToArray(),\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="147-152"];
m6_67 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerProcessingJobFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="163-163"];
m6_14 [cluster="HangFire.SqlServer.SqlServerConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", file="SqlServerProcessingJobFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", span="34-34"];
m6_16 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerProcessingJobFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="39-39"];
m6_17 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerProcessingJobFacts.cs", label="return new SqlServerDistributedLock(\r\n                String.Format(''HangFire:Job:{0}'', jobId), \r\n                _connection);", span="41-43"];
m6_8 [cluster="Unk.OnFeatureStart", file="SqlServerProcessingJobFacts.cs", label="Entry Unk.OnFeatureStart", span=""];
m6_9 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", color=red, community=0, file="SqlServerProcessingJobFacts.cs", label="1: Entry HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", span="40-40"];
m6_10 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", file="SqlServerProcessingJobFacts.cs", label="testRunner.OnFeatureEnd()", span="42-42"];
m6_41 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SqlServerProcessingJobFacts.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m6_42 [cluster="Unk.Given", file="SqlServerProcessingJobFacts.cs", label="Entry Unk.Given", span=""];
m6_44 [cluster="Unk.Then", file="SqlServerProcessingJobFacts.cs", label="Entry Unk.Then", span=""];
m6_43 [cluster="Unk.When", file="SqlServerProcessingJobFacts.cs", label="Entry Unk.When", span=""];
m6_12 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", file="SqlServerProcessingJobFacts.cs", label="Exit HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", span="40-40"];
m6_13 [cluster="Unk.OnFeatureEnd", file="SqlServerProcessingJobFacts.cs", label="Entry Unk.OnFeatureEnd", span=""];
m6_26 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerProcessingJobFacts.cs", label="int parameterIndex = 0", span="70-70"];
m6_27 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: parameters", span="71-71"];
m6_28 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerProcessingJobFacts.cs", label="parameterArray[parameterIndex++] = new\r\n                    {\r\n                        jobId = jobId,\r\n                        name = parameter.Key,\r\n                        value = parameter.Value\r\n                    }", span="73-78"];
m6_18 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerProcessingJobFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="39-39"];
m6_19 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: Entry HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", span="28-28"];
m6_7 [cluster="Unk.Dispose", file="SqlServerProcessingJobFacts.cs", label="Entry Unk.Dispose", span=""];
m6_73 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SqlServerProcessingJobFacts.cs", label="this.ScenarioCleanup()", span="159-159"];
m6_74 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SqlServerProcessingJobFacts.cs", label="Exit HangFire.Tests.Server.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", span="149-149"];
m6_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SqlServerProcessingJobFacts.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m6_68 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerProcessingJobFacts.cs", label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="165-167"];
m6_70 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerProcessingJobFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="170-170"];
m6_69 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerProcessingJobFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="163-163"];
m6_71 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerProcessingJobFacts.cs", label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="172-174"];
m6_72 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerProcessingJobFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="170-170"];
m6_11 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: testRunner = null", span="43-43"];
m6_22 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerProcessingJobFacts.cs", label="string createJobSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues (@invocationData, @arguments, @createdAt, @expireAt);\r\nSELECT CAST(SCOPE_IDENTITY() as int)''", span="52-55"];
m6_23 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", color=green, community=0, file="SqlServerProcessingJobFacts.cs", label="1: var jobId = _connection.Query<int>(\r\n                createJobSql,\r\n                new\r\n                {\r\n                    invocationData = JobHelper.ToJson(invocationData),\r\n                    arguments = JobHelper.ToJson(arguments),\r\n                    createdAt = DateTime.UtcNow,\r\n                    expireAt = DateTime.UtcNow.Add(expireIn)\r\n                }).Single().ToString()", span="57-65"];
m6_24 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerProcessingJobFacts.cs", label="parameters.Count > 0", span="67-67"];
m6_92 [file="SqlServerProcessingJobFacts.cs", label="HangFire.Tests.Server.SchedulePollerFeature", span=""];
m7_14 [cluster="HangFire.Server.Worker.ToString()", file="Worker.cs", label="Entry HangFire.Server.Worker.ToString()", span="59-59"];
m7_15 [cluster="HangFire.Server.Worker.ToString()", file="Worker.cs", label="return ''Worker #'' + _context.WorkerNumber;", span="61-61"];
m7_16 [cluster="HangFire.Server.Worker.ToString()", file="Worker.cs", label="Exit HangFire.Server.Worker.ToString()", span="59-59"];
m7_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="Worker.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m7_13 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="Entry HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", span="64-64"];
m7_17 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="var stateMachine = _context.StateMachineFactory.Create(connection)", span="69-69"];
m7_19 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="!stateMachine.TryToChangeState(\r\n                jobId,\r\n                processingState,\r\n                new[] { EnqueuedState.StateName, ProcessingState.StateName })", span="72-75"];
m7_22 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="var jobData = connection.GetJobData(jobId)", span="89-89"];
m7_24 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="var performContext = new PerformContext(_context, connection, jobId, jobData.Job)", span="92-92"];
m7_25 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="process.Run(performContext, jobData.Job)", span="94-94"];
m7_31 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="stateMachine.TryToChangeState(jobId, state, new[] { ProcessingState.StateName })", span="115-115"];
m7_18 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="var processingState = new ProcessingState(_context.ServerId)", span="70-70"];
m7_20 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="return;", span="77-77"];
m7_21 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="IState state", span="85-85"];
m7_23 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="jobData.EnsureLoaded()", span="90-90"];
m7_26 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="state = new SucceededState()", span="96-96"];
m7_27 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label=JobPerformanceException, span="98-98"];
m7_29 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label=Exception, span="105-105"];
m7_28 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="state = new FailedState(ex.InnerException)\r\n                {\r\n                    Reason = ex.Message\r\n                }", span="100-103"];
m7_30 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="state = new FailedState(ex)\r\n                {\r\n                    Reason = ''Internal HangFire Server exception occurred. Please, report it to HangFire developers.''\r\n                }", span="107-110"];
m7_32 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="Exit HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", span="64-64"];
m7_33 [cluster="HangFire.States.IStateMachineFactory.Create(HangFire.Storage.IStorageConnection)", file="Worker.cs", label="Entry HangFire.States.IStateMachineFactory.Create(HangFire.Storage.IStorageConnection)", span="8-8"];
m7_41 [cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="Worker.cs", label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="26-26"];
m7_12 [cluster="HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="Worker.cs", label="Entry HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="30-30"];
m7_38 [cluster="HangFire.Server.PerformContext.PerformContext(HangFire.Server.WorkerContext, HangFire.Storage.IStorageConnection, string, HangFire.Common.Job)", file="Worker.cs", label="Entry HangFire.Server.PerformContext.PerformContext(HangFire.Server.WorkerContext, HangFire.Storage.IStorageConnection, string, HangFire.Common.Job)", span="35-35"];
m7_35 [cluster="HangFire.States.IStateMachine.TryToChangeState(string, HangFire.States.IState, string[])", file="Worker.cs", label="Entry HangFire.States.IStateMachine.TryToChangeState(string, HangFire.States.IState, string[])", span="24-24"];
m7_37 [cluster="HangFire.Storage.JobData.EnsureLoaded()", file="Worker.cs", label="Entry HangFire.Storage.JobData.EnsureLoaded()", span="27-27"];
m7_6 [cluster="HangFire.Server.Worker.Execute(System.Threading.CancellationToken)", file="Worker.cs", label="Entry HangFire.Server.Worker.Execute(System.Threading.CancellationToken)", span="34-34"];
m7_7 [cluster="HangFire.Server.Worker.Execute(System.Threading.CancellationToken)", file="Worker.cs", label="var connection = _context.Storage.GetConnection()", span="36-36"];
m7_8 [cluster="HangFire.Server.Worker.Execute(System.Threading.CancellationToken)", color=red, community=0, file="Worker.cs", label="1: var nextJob = connection.FetchNextJob(_context.Queues, cancellationToken)", span="38-38"];
m7_9 [cluster="HangFire.Server.Worker.Execute(System.Threading.CancellationToken)", color=red, community=0, file="Worker.cs", label="0: ProcessJob(nextJob.JobId, connection, _context.PerformanceProcess)", span="42-42"];
m7_10 [cluster="HangFire.Server.Worker.Execute(System.Threading.CancellationToken)", file="Worker.cs", label="Exit HangFire.Server.Worker.Execute(System.Threading.CancellationToken)", span="34-34"];
m7_39 [cluster="HangFire.Server.IJobPerformanceProcess.Run(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer)", file="Worker.cs", label="Entry HangFire.Server.IJobPerformanceProcess.Run(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer)", span="20-20"];
m7_36 [cluster="HangFire.Storage.IStorageConnection.GetJobData(string)", file="Worker.cs", label="Entry HangFire.Storage.IStorageConnection.GetJobData(string)", span="37-37"];
m7_34 [cluster="HangFire.States.ProcessingState.ProcessingState(string)", file="Worker.cs", label="Entry HangFire.States.ProcessingState.ProcessingState(string)", span="26-26"];
m7_0 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="Worker.cs", label="Entry HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", span="27-27"];
m7_1 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="Worker.cs", label="context == null", span="29-29"];
m7_3 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="Worker.cs", label="_context = context", span="31-31"];
m7_2 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="Worker.cs", label="throw new ArgumentNullException(''context'');", span="29-29"];
m7_4 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="Worker.cs", label="Exit HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", span="27-27"];
m7_40 [cluster="HangFire.States.SucceededState.SucceededState()", file="Worker.cs", label="Entry HangFire.States.SucceededState.SucceededState()", span="27-27"];
m7_11 [cluster="HangFire.JobStorage.GetConnection()", file="Worker.cs", label="Entry HangFire.JobStorage.GetConnection()", span="56-56"];
m7_42 [file="Worker.cs", label="HangFire.Server.Worker", span=""];
m8_201 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="WorkerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", span="242-242"];
m8_202 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="WorkerFacts.cs", label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData { LoadException = new JobLoadException() })", span="245-246"];
m8_203 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="248-248"];
m8_204 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="WorkerFacts.cs", label="worker.Execute(_token)", span="251-251"];
m8_205 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="WorkerFacts.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                JobId,\r\n                It.IsAny<FailedState>(),\r\n                It.IsAny<string[]>()))", span="254-257"];
m8_206 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="WorkerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", span="242-242"];
m8_146 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="WorkerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", span="175-175"];
m8_147 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="177-177"];
m8_148 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="WorkerFacts.cs", label="worker.Execute(_token)", span="179-179"];
m8_149 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="WorkerFacts.cs", label="_process.Verify(x => x.Run(\r\n                It.IsNotNull<PerformContext>(),\r\n                It.IsNotNull<IJobPerformer>()))", span="181-183"];
m8_150 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="WorkerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", span="175-175"];
m8_93 [cluster="Unk.DeleteJobFromQueue", file="WorkerFacts.cs", label="Entry Unk.DeleteJobFromQueue", span=""];
m8_72 [cluster="HangFire.Server.Worker.Execute(System.Threading.CancellationToken)", file="WorkerFacts.cs", label="Entry HangFire.Server.Worker.Execute(System.Threading.CancellationToken)", span="34-34"];
m8_24 [cluster="System.Threading.CancellationToken.CancellationToken()", file="WorkerFacts.cs", label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0"];
m8_94 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="WorkerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", span="98-98"];
m8_95 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="WorkerFacts.cs", label="_stateMachine\r\n                .Setup(x => x.TryToChangeState(\r\n                    JobId, It.IsAny<ProcessingState>(), It.IsAny<string[]>()))\r\n                .InSequence()\r\n                .Returns(true)", span="101-105"];
m8_96 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="WorkerFacts.cs", label="_process.Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .InSequence()", span="107-108"];
m8_97 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="WorkerFacts.cs", label="_stateMachine\r\n                .Setup(x => x.TryToChangeState(\r\n                    JobId, It.IsAny<SucceededState>(), It.IsAny<string[]>()))\r\n                .InSequence()\r\n                .Returns(true)", span="110-114"];
m8_98 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="116-116"];
m8_99 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="WorkerFacts.cs", label="worker.Execute(_token)", span="119-119"];
m8_100 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="WorkerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", span="98-98"];
m8_16 [cluster="HangFire.Core.Tests.WorkerContextMock.WorkerContextMock()", file="WorkerFacts.cs", label="Entry HangFire.Core.Tests.WorkerContextMock.WorkerContextMock()", span="9-9"];
m8_207 [cluster="HangFire.Common.JobLoadException.JobLoadException()", file="WorkerFacts.cs", label="Entry HangFire.Common.JobLoadException.JobLoadException()", span="33-33"];
m8_20 [cluster="Mock<IProcessingJob>.cstr", file="WorkerFacts.cs", label="Entry Mock<IProcessingJob>.cstr", span=""];
m8_108 [cluster="Unk.Run", file="WorkerFacts.cs", label="Entry Unk.Run", span=""];
m8_165 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="WorkerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", span="200-200"];
m8_167 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="WorkerFacts.cs", label="_process\r\n                .Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .Throws(exception)", span="204-206"];
m8_168 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="208-208"];
m8_169 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="WorkerFacts.cs", label="worker.Execute(_token)", span="211-211"];
m8_170 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="WorkerFacts.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason.Contains(''Internal'')),\r\n                It.IsAny<string[]>()))", span="214-217"];
m8_166 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="WorkerFacts.cs", label="var exception = new InvalidOperationException()", span="203-203"];
m8_171 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="WorkerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", span="200-200"];
m8_172 [cluster="System.InvalidOperationException.InvalidOperationException()", file="WorkerFacts.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m8_191 [cluster="HangFire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", file="WorkerFacts.cs", label="Entry HangFire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", span="22-22"];
m8_38 [cluster="Unk.>", file="WorkerFacts.cs", label="Entry Unk.>", span=""];
m8_47 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Method()", file="WorkerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Method()", span="265-265"];
m8_216 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Method()", file="WorkerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Method()", span="265-265"];
m8_0 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", span="25-25"];
m8_1 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs", label="_context = new WorkerContextMock()", span="27-27"];
m8_28 [cluster="Unk.GetConnection", file="WorkerFacts.cs", label="Entry Unk.GetConnection", span=""];
m8_184 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="WorkerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", span="221-221"];
m8_186 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="WorkerFacts.cs", label="_process\r\n                .Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .Throws(new JobPerformanceException(''hello'', exception))", span="225-227"];
m8_187 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="229-229"];
m8_188 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="WorkerFacts.cs", label="worker.Execute(_token)", span="232-232"];
m8_189 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="WorkerFacts.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason == ''hello''),\r\n                It.IsAny<string[]>()))", span="235-238"];
m8_185 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="WorkerFacts.cs", label="var exception = new InvalidOperationException()", span="224-224"];
m8_190 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="WorkerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", span="221-221"];
m8_101 [cluster="Unk.InSequence", file="WorkerFacts.cs", label="Entry Unk.InSequence", span=""];
m8_123 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="WorkerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", span="138-138"];
m8_124 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="140-140"];
m8_125 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="WorkerFacts.cs", label="worker.Execute(_token)", span="142-142"];
m8_126 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="WorkerFacts.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<ProcessingState>(),\r\n                It.Is<string[]>(\r\n                    states => states.Length == 2 &&\r\n                        states[0] == EnqueuedState.StateName && states[1] == ProcessingState.StateName)))", span="144-149"];
m8_127 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="WorkerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", span="138-138"];
m8_2 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs", label="_storage = _context.SharedContext.Storage", span="28-28"];
m8_3 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs", label="_process = _context.SharedContext.PerformanceProcess", span="29-29"];
m8_4 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs", label="_connection = new Mock<IStorageConnection>()", span="31-31"];
m8_5 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs", label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="33-33"];
m8_6 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs", label="_processingJob = new Mock<IProcessingJob>()", span="35-35"];
m8_7 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs", label="_processingJob.Setup(x => x.JobId).Returns(JobId)", span="36-36"];
m8_8 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs", label="_processingJob.Setup(x => x.Queue).Returns(Queue)", span="37-37"];
m8_9 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs", label="_connection\r\n                .Setup(x => x.FetchNextJob(_context.SharedContext.Queues, It.IsNotNull<CancellationToken>()))\r\n                .Returns(_processingJob.Object)", span="39-41"];
m8_10 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs", label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData\r\n                {\r\n                    Job = Job.FromExpression(() => Method()),\r\n                })", span="43-47"];
m8_11 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs", label="_stateMachine = new Mock<IStateMachine>()", span="49-49"];
m8_12 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs", label="_context.SharedContext.StateMachineFactory\r\n                .Setup(x => x.Create(_connection.Object))\r\n                .Returns(_stateMachine.Object)", span="51-53"];
m8_13 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs", label="_stateMachine.Setup(x => x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<IState>(),\r\n                It.IsAny<string[]>())).Returns(true)", span="55-58"];
m8_14 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs", label="_token = new CancellationToken()", span="60-60"];
m8_15 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", span="25-25"];
m8_18 [cluster="Unk.Setup", file="WorkerFacts.cs", label="Entry Unk.Setup", span=""];
m8_173 [cluster="Unk.Throws", file="WorkerFacts.cs", label="Entry Unk.Throws", span=""];
m8_134 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="WorkerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", span="153-153"];
m8_135 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="WorkerFacts.cs", label="_stateMachine\r\n                .Setup(x => x.TryToChangeState(\r\n                    It.IsAny<string>(),\r\n                    It.IsAny<ProcessingState>(),\r\n                    It.IsAny<string[]>()))\r\n                .Returns(false)", span="156-161"];
m8_136 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="163-163"];
m8_137 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="WorkerFacts.cs", label="worker.Execute(_token)", span="166-166"];
m8_138 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="WorkerFacts.cs", label="_process.Verify(\r\n                x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()),\r\n                Times.Never)", span="169-171"];
m8_139 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="WorkerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", span="153-153"];
m8_65 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="WorkerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", span="73-73"];
m8_66 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="75-75"];
m8_67 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="WorkerFacts.cs", label="worker.Execute(_token)", span="77-77"];
m8_68 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="WorkerFacts.cs", label="_storage.Verify(x => x.GetConnection(), Times.Once)", span="79-79"];
m8_69 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="WorkerFacts.cs", label="_connection.Verify(x => x.Dispose(), Times.Once)", span="80-80"];
m8_70 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="WorkerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", span="73-73"];
m8_39 [cluster="Unk.FetchNextJob", file="WorkerFacts.cs", label="Entry Unk.FetchNextJob", span=""];
m8_80 [cluster="Unk.Dispose", file="WorkerFacts.cs", label="Entry Unk.Dispose", span=""];
m8_55 [cluster="Unk.TryToChangeState", file="WorkerFacts.cs", label="Entry Unk.TryToChangeState", span=""];
m8_112 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="WorkerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", span="125-125"];
m8_113 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="127-127"];
m8_114 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="WorkerFacts.cs", label="worker.Execute(_token)", span="129-129"];
m8_115 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="WorkerFacts.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.Is<ProcessingState>(state => state.ServerName == _context.Object.ServerId),\r\n                It.IsAny<string[]>()))", span="131-134"];
m8_116 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="WorkerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", span="125-125"];
m8_198 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="237-237"];
m8_90 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="94-94"];
m8_91 [cluster="lambda expression", color=green, community=0, file="WorkerFacts.cs", label="1: x.DeleteJobFromQueue(JobId, Queue)", span="94-94"];
m8_92 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="94-94"];
m8_36 [cluster="lambda expression", file="WorkerFacts.cs", label="x.FetchNextJob(_context.SharedContext.Queues, It.IsNotNull<CancellationToken>())", span="40-40"];
m8_49 [cluster="lambda expression", file="WorkerFacts.cs", label="x.Create(_connection.Object)", span="52-52"];
m8_88 [cluster="lambda expression", file="WorkerFacts.cs", label="x.FetchNextJob(_context.SharedContext.Queues, _token)", span="91-91"];
m8_118 [cluster="lambda expression", file="WorkerFacts.cs", label="x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.Is<ProcessingState>(state => state.ServerName == _context.Object.ServerId),\r\n                It.IsAny<string[]>())", span="131-134"];
m8_121 [cluster="lambda expression", file="WorkerFacts.cs", label="state.ServerName == _context.Object.ServerId", span="133-133"];
m8_87 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="91-91"];
m8_25 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="33-33"];
m8_29 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="36-36"];
m8_32 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="37-37"];
m8_35 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="40-40"];
m8_37 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="40-40"];
m8_40 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="43-43"];
m8_44 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="46-46"];
m8_48 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="52-52"];
m8_50 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="52-52"];
m8_52 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="55-58"];
m8_74 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="79-79"];
m8_77 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="80-80"];
m8_89 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="91-91"];
m8_102 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="102-103"];
m8_105 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="107-107"];
m8_109 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="111-112"];
m8_117 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="131-134"];
m8_119 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="131-134"];
m8_120 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="133-133"];
m8_122 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="133-133"];
m8_128 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="144-149"];
m8_140 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="157-160"];
m8_143 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="170-170"];
m8_151 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="181-183"];
m8_159 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="193-196"];
m8_174 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="205-205"];
m8_177 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="214-217"];
m8_192 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="226-226"];
m8_195 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="235-238"];
m8_208 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="245-245"];
m8_211 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="254-257"];
m8_27 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="33-33"];
m8_26 [cluster="lambda expression", file="WorkerFacts.cs", label="x.GetConnection()", span="33-33"];
m8_31 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="36-36"];
m8_30 [cluster="lambda expression", file="WorkerFacts.cs", label="x.JobId", span="36-36"];
m8_34 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="37-37"];
m8_33 [cluster="lambda expression", file="WorkerFacts.cs", label="x.Queue", span="37-37"];
m8_53 [cluster="lambda expression", file="WorkerFacts.cs", label="x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<IState>(),\r\n                It.IsAny<string[]>())", span="55-58"];
m8_103 [cluster="lambda expression", file="WorkerFacts.cs", label="x.TryToChangeState(\r\n                    JobId, It.IsAny<ProcessingState>(), It.IsAny<string[]>())", span="102-103"];
m8_106 [cluster="lambda expression", file="WorkerFacts.cs", label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="107-107"];
m8_110 [cluster="lambda expression", file="WorkerFacts.cs", label="x.TryToChangeState(\r\n                    JobId, It.IsAny<SucceededState>(), It.IsAny<string[]>())", span="111-112"];
m8_129 [cluster="lambda expression", file="WorkerFacts.cs", label="x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<ProcessingState>(),\r\n                It.Is<string[]>(\r\n                    states => states.Length == 2 &&\r\n                        states[0] == EnqueuedState.StateName && states[1] == ProcessingState.StateName))", span="144-149"];
m8_141 [cluster="lambda expression", file="WorkerFacts.cs", label="x.TryToChangeState(\r\n                    It.IsAny<string>(),\r\n                    It.IsAny<ProcessingState>(),\r\n                    It.IsAny<string[]>())", span="157-160"];
m8_144 [cluster="lambda expression", file="WorkerFacts.cs", label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="170-170"];
m8_152 [cluster="lambda expression", file="WorkerFacts.cs", label="x.Run(\r\n                It.IsNotNull<PerformContext>(),\r\n                It.IsNotNull<IJobPerformer>())", span="181-183"];
m8_160 [cluster="lambda expression", file="WorkerFacts.cs", label="x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<SucceededState>(),\r\n                It.Is<string[]>(states => states.Length == 1 && states[0] == ProcessingState.StateName))", span="193-196"];
m8_178 [cluster="lambda expression", file="WorkerFacts.cs", label="x.TryToChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason.Contains(''Internal'')),\r\n                It.IsAny<string[]>())", span="214-217"];
m8_175 [cluster="lambda expression", file="WorkerFacts.cs", label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="205-205"];
m8_196 [cluster="lambda expression", file="WorkerFacts.cs", label="x.TryToChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason == ''hello''),\r\n                It.IsAny<string[]>())", span="235-238"];
m8_193 [cluster="lambda expression", file="WorkerFacts.cs", label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="226-226"];
m8_212 [cluster="lambda expression", file="WorkerFacts.cs", label="x.TryToChangeState(\r\n                JobId,\r\n                It.IsAny<FailedState>(),\r\n                It.IsAny<string[]>())", span="254-257"];
m8_42 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="43-43"];
m8_41 [cluster="lambda expression", file="WorkerFacts.cs", label="x.GetJobData(JobId)", span="43-43"];
m8_46 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="46-46"];
m8_45 [cluster="lambda expression", file="WorkerFacts.cs", label="Method()", span="46-46"];
m8_54 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="55-58"];
m8_76 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="79-79"];
m8_75 [cluster="lambda expression", file="WorkerFacts.cs", label="x.GetConnection()", span="79-79"];
m8_79 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="80-80"];
m8_78 [cluster="lambda expression", file="WorkerFacts.cs", label="x.Dispose()", span="80-80"];
m8_104 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="102-103"];
m8_107 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="107-107"];
m8_111 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="111-112"];
m8_130 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="144-149"];
m8_142 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="157-160"];
m8_145 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="170-170"];
m8_153 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="181-183"];
m8_161 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="193-196"];
m8_181 [cluster="lambda expression", file="WorkerFacts.cs", label="state.Exception == exception && state.Reason.Contains(''Internal'')", span="216-216"];
m8_176 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="205-205"];
m8_179 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="214-217"];
m8_199 [cluster="lambda expression", file="WorkerFacts.cs", label="state.Exception == exception && state.Reason == ''hello''", span="237-237"];
m8_194 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="226-226"];
m8_197 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="235-238"];
m8_210 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="245-245"];
m8_209 [cluster="lambda expression", file="WorkerFacts.cs", label="x.GetJobData(JobId)", span="245-245"];
m8_213 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="254-257"];
m8_62 [cluster="lambda expression", file="WorkerFacts.cs", label="new Worker(null)", span="67-67"];
m8_61 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="67-67"];
m8_131 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="148-149"];
m8_162 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="196-196"];
m8_180 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="216-216"];
m8_182 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="216-216"];
m8_200 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="237-237"];
m8_63 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="67-67"];
m8_133 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="148-149"];
m8_132 [cluster="lambda expression", file="WorkerFacts.cs", label="states.Length == 2 &&\r\n                        states[0] == EnqueuedState.StateName && states[1] == ProcessingState.StateName", span="148-149"];
m8_163 [cluster="lambda expression", file="WorkerFacts.cs", label="states.Length == 1 && states[0] == ProcessingState.StateName", span="196-196"];
m8_164 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="196-196"];
m8_64 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="WorkerFacts.cs", label="Entry HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", span="27-27"];
m8_81 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", file="WorkerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", span="84-84"];
m8_85 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", color=green, community=0, file="WorkerFacts.cs", label="1: _connection.Verify(x => x.DeleteJobFromQueue(JobId, Queue))", span="94-94"];
m8_84 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", file="WorkerFacts.cs", label="_connection.Verify(\r\n                x => x.FetchNextJob(_context.SharedContext.Queues, _token),\r\n                Times.Once)", span="90-92"];
m8_82 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="86-86"];
m8_83 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", file="WorkerFacts.cs", label="worker.Execute(_token)", span="88-88"];
m8_86 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", file="WorkerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", span="84-84"];
m8_183 [cluster="Unk.Contains", file="WorkerFacts.cs", label="Entry Unk.Contains", span=""];
m8_71 [cluster="HangFire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="WorkerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.CreateWorker()", span="260-260"];
m8_214 [cluster="HangFire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="WorkerFacts.cs", label="return new Worker(_context.Object);", span="262-262"];
m8_215 [cluster="HangFire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="WorkerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.CreateWorker()", span="260-260"];
m8_73 [cluster="Unk.Verify", file="WorkerFacts.cs", label="Entry Unk.Verify", span=""];
m8_56 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="WorkerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", span="64-64"];
m8_57 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="WorkerFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(null))", span="66-67"];
m8_58 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="WorkerFacts.cs", label="Assert.Equal(''context'', exception.ParamName)", span="69-69"];
m8_59 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="WorkerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", span="64-64"];
m8_21 [cluster="HangFire.Storage.JobData.JobData()", file="WorkerFacts.cs", label="Entry HangFire.Storage.JobData.JobData()", span="20-20"];
m8_23 [cluster="Mock<IStateMachine>.cstr", file="WorkerFacts.cs", label="Entry Mock<IStateMachine>.cstr", span=""];
m8_22 [cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="WorkerFacts.cs", label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="116-116"];
m8_51 [cluster="Unk.Create", file="WorkerFacts.cs", label="Entry Unk.Create", span=""];
m8_19 [cluster="Unk.Returns", file="WorkerFacts.cs", label="Entry Unk.Returns", span=""];
m8_17 [cluster="Mock<IStorageConnection>.cstr", file="WorkerFacts.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m8_43 [cluster="Unk.GetJobData", file="WorkerFacts.cs", label="Entry Unk.GetJobData", span=""];
m8_154 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="WorkerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", span="187-187"];
m8_155 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="189-189"];
m8_156 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="WorkerFacts.cs", label="worker.Execute(_token)", span="191-191"];
m8_157 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="WorkerFacts.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<SucceededState>(),\r\n                It.Is<string[]>(states => states.Length == 1 && states[0] == ProcessingState.StateName)))", span="193-196"];
m8_158 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="WorkerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", span="187-187"];
m8_217 [file="WorkerFacts.cs", label="HangFire.Core.Tests.Server.WorkerFacts", span=""];
m8_218 [file="WorkerFacts.cs", label=exception, span=""];
m8_219 [file="WorkerFacts.cs", label=exception, span=""];
n448 -> n20  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n30  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n38  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n50  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n65  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n107  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n117  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n126  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n146  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n155  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n166  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n177  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n188  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n200  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n210  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n221  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n231  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n239  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n248  [color=red, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n259  [color=red, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n270  [color=red, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n281  [color=red, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n290  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n301  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n310  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n318  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n326  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n338  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n348  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n366  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n377  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n387  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n398  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n414  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n426  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n449 -> n45  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n450 -> n57  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n451 -> n113  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n452 -> n130  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n453 -> n149  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n454 -> n162  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n455 -> n173  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n456 -> n180  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n457 -> n191  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n458 -> n203  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n459 -> n217  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n460 -> n228  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n461 -> n242  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n462 -> n255  [color=red, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n463 -> n266  [color=red, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n464 -> n273  [color=red, key=1, label=arrangeSql, style=dashed];
n465 -> n284  [color=red, key=1, label=arrangeSql, style=dashed];
n466 -> n297  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n467 -> n307  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n468 -> n321  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n469 -> n333  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n470 -> n345  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n471 -> n372  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n472 -> n380  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n473 -> n393  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n474 -> n401  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n475 -> n420  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n476 -> n429  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n4  [key=2, style=dotted];
n1 -> n6  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n2 -> n3  [key=0, style=solid];
n2 -> n5  [key=2, style=dotted];
n6 -> n7  [key=0, style=solid];
n3 -> n0  [color=blue, key=0, style=bold];
n7 -> n8  [key=0, style=solid];
n7 -> n9  [key=2, style=dotted];
n7 -> n10  [key=2, style=dotted];
n8 -> n6  [color=blue, key=0, style=bold];
n11 -> n12  [key=0, style=solid];
n12 -> n13  [key=0, style=solid];
n12 -> n4  [key=2, style=dotted];
n12 -> n15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n13 -> n14  [key=0, style=solid];
n13 -> n5  [key=2, style=dotted];
n15 -> n16  [key=0, style=solid];
n14 -> n11  [color=blue, key=0, style=bold];
n16 -> n17  [key=0, style=solid];
n16 -> n9  [key=2, style=dotted];
n16 -> n18  [key=2, style=dotted];
n17 -> n15  [color=blue, key=0, style=bold];
n19 -> n20  [key=0, style=solid];
n20 -> n21  [key=0, style=solid];
n20 -> n22  [key=2, style=dotted];
n20 -> n23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n21 -> n19  [color=blue, key=0, style=bold];
n23 -> n24  [key=0, style=solid];
n24 -> n25  [key=0, style=solid];
n24 -> n27  [key=2, style=dotted];
n25 -> n26  [key=0, style=solid];
n25 -> n28  [key=2, style=dotted];
n26 -> n23  [color=blue, key=0, style=bold];
n29 -> n30  [key=0, style=solid];
n30 -> n31  [key=0, style=solid];
n30 -> n22  [key=2, style=dotted];
n30 -> n32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n31 -> n29  [color=blue, key=0, style=bold];
n32 -> n33  [key=0, style=solid];
n33 -> n34  [key=0, style=solid];
n33 -> n36  [key=2, style=dotted];
n34 -> n35  [key=0, style=solid];
n34 -> n28  [key=2, style=dotted];
n35 -> n32  [color=blue, key=0, style=bold];
n37 -> n38  [key=0, style=solid];
n38 -> n39  [key=0, style=solid];
n38 -> n22  [key=2, style=dotted];
n38 -> n40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n39 -> n37  [color=blue, key=0, style=bold];
n40 -> n41  [key=0, style=solid];
n40 -> n45  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n41 -> n42  [key=0, style=solid];
n41 -> n4  [key=2, style=dotted];
n41 -> n44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n45 -> n46  [key=0, style=solid];
n45 -> n47  [key=2, style=dotted];
n45 -> n48  [key=2, style=dotted];
n42 -> n43  [key=0, style=solid];
n42 -> n5  [key=2, style=dotted];
n44 -> n45  [key=0, style=solid];
n43 -> n40  [color=blue, key=0, style=bold];
n46 -> n44  [color=blue, key=0, style=bold];
n49 -> n50  [key=0, style=solid];
n50 -> n51  [key=0, style=solid];
n50 -> n22  [key=2, style=dotted];
n50 -> n52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n51 -> n49  [color=blue, key=0, style=bold];
n52 -> n53  [key=0, style=solid];
n52 -> n57  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n53 -> n54  [key=0, style=solid];
n53 -> n4  [key=2, style=dotted];
n53 -> n56  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n57 -> n58  [key=0, style=solid];
n57 -> n59  [key=2, style=dotted];
n57 -> n48  [key=2, style=dotted];
n57 -> n60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n54 -> n55  [key=0, style=solid];
n54 -> n5  [key=2, style=dotted];
n56 -> n57  [key=0, style=solid];
n55 -> n52  [color=blue, key=0, style=bold];
n58 -> n56  [color=blue, key=0, style=bold];
n60 -> n61  [key=0, style=solid];
n61 -> n62  [key=0, style=solid];
n61 -> n63  [key=2, style=dotted];
n62 -> n60  [color=blue, key=0, style=bold];
n63 -> n447  [key=0, style=solid];
n63 -> n50  [color=darkorchid, key=3, label="Parameter variable string arg", style=bold];
n63 -> n65  [color=darkorchid, key=3, label="Parameter variable string arg", style=bold];
n63 -> n126  [color=darkorchid, key=3, label="Parameter variable string arg", style=bold];
n64 -> n65  [key=0, style=solid];
n65 -> n66  [key=0, style=solid];
n65 -> n67  [key=2, style=dotted];
n65 -> n68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n66 -> n64  [color=blue, key=0, style=bold];
n68 -> n69  [key=0, style=solid];
n68 -> n72  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n68 -> n83  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n69 -> n70  [key=0, style=solid];
n69 -> n59  [key=2, style=dotted];
n69 -> n47  [key=2, style=dotted];
n69 -> n87  [key=2, style=dotted];
n69 -> n48  [key=2, style=dotted];
n69 -> n97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n69 -> n71  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n69 -> n73  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n69 -> n83  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n72 -> n73  [key=0, style=solid];
n72 -> n89  [key=2, style=dotted];
n72 -> n90  [key=2, style=dotted];
n72 -> n74  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
n72 -> n75  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
n72 -> n76  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
n72 -> n77  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
n72 -> n82  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
n83 -> n84  [key=0, style=solid];
n83 -> n89  [key=2, style=dotted];
n83 -> n96  [key=2, style=dotted];
n83 -> n100  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n83 -> n103  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n83 -> n85  [color=darkseagreen4, key=1, label=parameters, style=dashed];
n70 -> n71  [key=0, style=solid];
n70 -> n28  [key=2, style=dotted];
n97 -> n98  [key=0, style=solid];
n71 -> n72  [key=0, style=solid];
n71 -> n88  [key=2, style=dotted];
n73 -> n74  [key=0, style=solid];
n73 -> n91  [key=2, style=dotted];
n73 -> n5  [key=2, style=dotted];
n74 -> n75  [key=0, style=solid];
n74 -> n5  [key=2, style=dotted];
n75 -> n76  [key=0, style=solid];
n75 -> n5  [key=2, style=dotted];
n76 -> n77  [key=0, style=solid];
n76 -> n92  [key=2, style=dotted];
n76 -> n78  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
n77 -> n78  [key=0, style=solid];
n82 -> n83  [key=0, style=solid];
n82 -> n94  [key=2, style=dotted];
n82 -> n95  [key=2, style=dotted];
n78 -> n79  [key=0, style=solid];
n78 -> n93  [key=2, style=dotted];
n78 -> n80  [color=darkseagreen4, key=1, label=job, style=dashed];
n78 -> n81  [color=darkseagreen4, key=1, label=job, style=dashed];
n79 -> n80  [key=0, style=solid];
n79 -> n5  [key=2, style=dotted];
n80 -> n81  [key=0, style=solid];
n80 -> n5  [key=2, style=dotted];
n81 -> n82  [key=0, style=solid];
n81 -> n5  [key=2, style=dotted];
n84 -> n85  [key=0, style=solid];
n84 -> n5  [key=2, style=dotted];
n100 -> n101  [key=0, style=solid];
n103 -> n104  [key=0, style=solid];
n85 -> n86  [key=0, style=solid];
n85 -> n5  [key=2, style=dotted];
n86 -> n68  [color=blue, key=0, style=bold];
n98 -> n99  [key=0, style=solid];
n98 -> n63  [key=2, style=dotted];
n99 -> n97  [color=blue, key=0, style=bold];
n101 -> n102  [key=0, style=solid];
n102 -> n100  [color=blue, key=0, style=bold];
n104 -> n105  [key=0, style=solid];
n105 -> n103  [color=blue, key=0, style=bold];
n106 -> n107  [key=0, style=solid];
n107 -> n108  [key=0, style=solid];
n107 -> n22  [key=2, style=dotted];
n107 -> n109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n108 -> n106  [color=blue, key=0, style=bold];
n109 -> n110  [key=0, style=solid];
n109 -> n113  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n110 -> n111  [key=0, style=solid];
n110 -> n4  [key=2, style=dotted];
n110 -> n112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n113 -> n114  [key=0, style=solid];
n113 -> n115  [key=2, style=dotted];
n111 -> n109  [color=blue, key=0, style=bold];
n112 -> n113  [key=0, style=solid];
n114 -> n112  [color=blue, key=0, style=bold];
n116 -> n117  [key=0, style=solid];
n117 -> n118  [key=0, style=solid];
n117 -> n22  [key=2, style=dotted];
n117 -> n119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n118 -> n116  [color=blue, key=0, style=bold];
n119 -> n120  [key=0, style=solid];
n120 -> n121  [key=0, style=solid];
n120 -> n115  [key=2, style=dotted];
n121 -> n122  [key=0, style=solid];
n121 -> n123  [key=2, style=dotted];
n122 -> n119  [color=blue, key=0, style=bold];
n124 -> n125  [key=0, style=solid];
n125 -> n126  [key=0, style=solid];
n125 -> n130  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n125 -> n125  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
n126 -> n127  [key=0, style=solid];
n126 -> n67  [key=2, style=dotted];
n126 -> n128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n130 -> n131  [key=0, style=solid];
n130 -> n138  [key=2, style=dotted];
n130 -> n139  [key=2, style=dotted];
n130 -> n89  [key=2, style=dotted];
n130 -> n90  [key=2, style=dotted];
n127 -> n124  [color=blue, key=0, style=bold];
n128 -> n129  [key=0, style=solid];
n128 -> n130  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n128 -> n131  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n129 -> n130  [key=0, style=solid];
n129 -> n59  [key=2, style=dotted];
n129 -> n141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n131 -> n132  [key=0, style=solid];
n131 -> n140  [key=2, style=dotted];
n131 -> n115  [key=2, style=dotted];
n131 -> n133  [color=darkseagreen4, key=1, label=result, style=dashed];
n131 -> n134  [color=darkseagreen4, key=1, label=result, style=dashed];
n131 -> n135  [color=darkseagreen4, key=1, label=result, style=dashed];
n131 -> n136  [color=darkseagreen4, key=1, label=result, style=dashed];
n141 -> n142  [key=0, style=solid];
n132 -> n133  [key=0, style=solid];
n132 -> n28  [key=2, style=dotted];
n133 -> n134  [key=0, style=solid];
n133 -> n28  [key=2, style=dotted];
n134 -> n135  [key=0, style=solid];
n134 -> n5  [key=2, style=dotted];
n135 -> n136  [key=0, style=solid];
n135 -> n5  [key=2, style=dotted];
n136 -> n137  [key=0, style=solid];
n136 -> n123  [key=2, style=dotted];
n137 -> n128  [color=blue, key=0, style=bold];
n142 -> n143  [key=0, style=solid];
n142 -> n63  [key=2, style=dotted];
n143 -> n141  [color=blue, key=0, style=bold];
n144 -> n145  [key=0, style=solid];
n145 -> n146  [key=0, style=solid];
n145 -> n149  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n145 -> n125  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
n146 -> n147  [key=0, style=solid];
n146 -> n67  [key=2, style=dotted];
n146 -> n148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n149 -> n150  [key=0, style=solid];
n149 -> n153  [key=2, style=dotted];
n149 -> n139  [key=2, style=dotted];
n149 -> n89  [key=2, style=dotted];
n149 -> n90  [key=2, style=dotted];
n147 -> n144  [color=blue, key=0, style=bold];
n148 -> n149  [key=0, style=solid];
n148 -> n150  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n150 -> n151  [key=0, style=solid];
n150 -> n140  [key=2, style=dotted];
n150 -> n115  [key=2, style=dotted];
n151 -> n152  [key=0, style=solid];
n151 -> n28  [key=2, style=dotted];
n152 -> n148  [color=blue, key=0, style=bold];
n154 -> n155  [key=0, style=solid];
n155 -> n156  [key=0, style=solid];
n155 -> n22  [key=2, style=dotted];
n155 -> n157  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n156 -> n154  [color=blue, key=0, style=bold];
n157 -> n158  [key=0, style=solid];
n157 -> n162  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n158 -> n159  [key=0, style=solid];
n158 -> n4  [key=2, style=dotted];
n158 -> n161  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n162 -> n163  [key=0, style=solid];
n162 -> n164  [key=2, style=dotted];
n159 -> n160  [key=0, style=solid];
n159 -> n5  [key=2, style=dotted];
n161 -> n162  [key=0, style=solid];
n160 -> n157  [color=blue, key=0, style=bold];
n163 -> n161  [color=blue, key=0, style=bold];
n165 -> n166  [key=0, style=solid];
n166 -> n167  [key=0, style=solid];
n166 -> n22  [key=2, style=dotted];
n166 -> n168  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n167 -> n165  [color=blue, key=0, style=bold];
n168 -> n169  [key=0, style=solid];
n168 -> n173  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n169 -> n170  [key=0, style=solid];
n169 -> n4  [key=2, style=dotted];
n169 -> n172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n173 -> n174  [key=0, style=solid];
n173 -> n164  [key=2, style=dotted];
n170 -> n171  [key=0, style=solid];
n170 -> n5  [key=2, style=dotted];
n172 -> n173  [key=0, style=solid];
n171 -> n168  [color=blue, key=0, style=bold];
n174 -> n172  [color=blue, key=0, style=bold];
n175 -> n176  [key=0, style=solid];
n176 -> n177  [key=0, style=solid];
n176 -> n180  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n176 -> n176  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
n177 -> n178  [key=0, style=solid];
n177 -> n67  [key=2, style=dotted];
n177 -> n179  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n180 -> n181  [key=0, style=solid];
n180 -> n89  [key=2, style=dotted];
n180 -> n90  [key=2, style=dotted];
n178 -> n175  [color=blue, key=0, style=bold];
n179 -> n180  [key=0, style=solid];
n179 -> n182  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n179 -> n183  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n182 -> n183  [key=0, style=solid];
n182 -> n164  [key=2, style=dotted];
n183 -> n184  [key=0, style=solid];
n183 -> n89  [key=2, style=dotted];
n183 -> n90  [key=2, style=dotted];
n181 -> n182  [key=0, style=solid];
n181 -> n91  [key=2, style=dotted];
n181 -> n183  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n184 -> n185  [key=0, style=solid];
n184 -> n5  [key=2, style=dotted];
n185 -> n179  [color=blue, key=0, style=bold];
n186 -> n187  [key=0, style=solid];
n187 -> n188  [key=0, style=solid];
n187 -> n191  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n187 -> n176  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
n188 -> n189  [key=0, style=solid];
n188 -> n67  [key=2, style=dotted];
n188 -> n190  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n191 -> n192  [key=0, style=solid];
n191 -> n89  [key=2, style=dotted];
n191 -> n90  [key=2, style=dotted];
n189 -> n186  [color=blue, key=0, style=bold];
n190 -> n191  [key=0, style=solid];
n190 -> n193  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n190 -> n194  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n190 -> n195  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n193 -> n194  [key=0, style=solid];
n193 -> n164  [key=2, style=dotted];
n194 -> n195  [key=0, style=solid];
n194 -> n164  [key=2, style=dotted];
n195 -> n196  [key=0, style=solid];
n195 -> n89  [key=2, style=dotted];
n195 -> n90  [key=2, style=dotted];
n192 -> n193  [key=0, style=solid];
n192 -> n91  [key=2, style=dotted];
n192 -> n194  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n192 -> n195  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n196 -> n197  [key=0, style=solid];
n196 -> n5  [key=2, style=dotted];
n197 -> n190  [color=blue, key=0, style=bold];
n198 -> n199  [key=0, style=solid];
n199 -> n200  [key=0, style=solid];
n199 -> n203  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n199 -> n176  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
n200 -> n201  [key=0, style=solid];
n200 -> n67  [key=2, style=dotted];
n200 -> n202  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n203 -> n204  [key=0, style=solid];
n203 -> n89  [key=2, style=dotted];
n203 -> n90  [key=2, style=dotted];
n201 -> n198  [color=blue, key=0, style=bold];
n202 -> n203  [key=0, style=solid];
n202 -> n205  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n202 -> n206  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n205 -> n206  [key=0, style=solid];
n205 -> n164  [key=2, style=dotted];
n206 -> n207  [key=0, style=solid];
n206 -> n89  [key=2, style=dotted];
n206 -> n90  [key=2, style=dotted];
n204 -> n205  [key=0, style=solid];
n204 -> n91  [key=2, style=dotted];
n204 -> n206  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n207 -> n208  [key=0, style=solid];
n207 -> n5  [key=2, style=dotted];
n208 -> n202  [color=blue, key=0, style=bold];
n209 -> n210  [key=0, style=solid];
n210 -> n211  [key=0, style=solid];
n210 -> n22  [key=2, style=dotted];
n210 -> n212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n211 -> n209  [color=blue, key=0, style=bold];
n212 -> n213  [key=0, style=solid];
n212 -> n217  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n213 -> n214  [key=0, style=solid];
n213 -> n4  [key=2, style=dotted];
n213 -> n216  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n217 -> n218  [key=0, style=solid];
n217 -> n219  [key=2, style=dotted];
n214 -> n215  [key=0, style=solid];
n214 -> n5  [key=2, style=dotted];
n216 -> n217  [key=0, style=solid];
n215 -> n212  [color=blue, key=0, style=bold];
n218 -> n216  [color=blue, key=0, style=bold];
n220 -> n221  [key=0, style=solid];
n221 -> n222  [key=0, style=solid];
n221 -> n22  [key=2, style=dotted];
n221 -> n223  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n222 -> n220  [color=blue, key=0, style=bold];
n223 -> n224  [key=0, style=solid];
n223 -> n228  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n224 -> n225  [key=0, style=solid];
n224 -> n4  [key=2, style=dotted];
n224 -> n227  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n228 -> n229  [key=0, style=solid];
n228 -> n219  [key=2, style=dotted];
n225 -> n226  [key=0, style=solid];
n225 -> n5  [key=2, style=dotted];
n227 -> n228  [key=0, style=solid];
n226 -> n223  [color=blue, key=0, style=bold];
n229 -> n227  [color=blue, key=0, style=bold];
n230 -> n231  [key=0, style=solid];
n231 -> n232  [key=0, style=solid];
n231 -> n22  [key=2, style=dotted];
n231 -> n233  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n232 -> n230  [color=blue, key=0, style=bold];
n233 -> n234  [key=0, style=solid];
n234 -> n235  [key=0, style=solid];
n234 -> n219  [key=2, style=dotted];
n235 -> n236  [key=0, style=solid];
n235 -> n123  [key=2, style=dotted];
n236 -> n233  [color=blue, key=0, style=bold];
n237 -> n238  [key=0, style=solid];
n238 -> n239  [key=0, style=solid];
n238 -> n242  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n238 -> n238  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
n239 -> n240  [key=0, style=solid];
n239 -> n67  [key=2, style=dotted];
n239 -> n241  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n242 -> n243  [key=0, style=solid];
n242 -> n4  [key=2, style=dotted];
n242 -> n90  [key=2, style=dotted];
n240 -> n237  [color=blue, key=0, style=bold];
n241 -> n242  [key=0, style=solid];
n241 -> n243  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n243 -> n244  [key=0, style=solid];
n243 -> n91  [key=2, style=dotted];
n243 -> n246  [key=2, style=dotted];
n244 -> n245  [key=0, style=solid];
n244 -> n5  [key=2, style=dotted];
n245 -> n241  [color=blue, key=0, style=bold];
n247 -> n248  [color=red, key=0, style=solid];
n248 -> n249  [color=red, key=0, style=solid];
n248 -> n22  [color=red, key=2, style=dotted];
n248 -> n250  [color=red, key=1, label="lambda expression", style=dashed];
n249 -> n247  [color=blue, key=0, style=bold];
n250 -> n251  [color=red, key=0, style=solid];
n250 -> n255  [color=red, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n251 -> n252  [color=red, key=0, style=solid];
n251 -> n4  [color=red, key=2, style=dotted];
n251 -> n254  [color=red, key=1, label="lambda expression", style=dashed];
n255 -> n256  [color=red, key=0, style=solid];
n255 -> n257  [color=red, key=2, style=dotted];
n252 -> n253  [color=red, key=0, style=solid];
n252 -> n5  [color=red, key=2, style=dotted];
n254 -> n255  [color=red, key=0, style=solid];
n253 -> n250  [color=blue, key=0, style=bold];
n256 -> n254  [color=blue, key=0, style=bold];
n258 -> n259  [color=red, key=0, style=solid];
n259 -> n260  [color=red, key=0, style=solid];
n259 -> n22  [color=red, key=2, style=dotted];
n259 -> n261  [color=red, key=1, label="lambda expression", style=dashed];
n260 -> n258  [color=blue, key=0, style=bold];
n261 -> n262  [color=red, key=0, style=solid];
n261 -> n266  [color=red, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n262 -> n263  [color=red, key=0, style=solid];
n262 -> n4  [color=red, key=2, style=dotted];
n262 -> n265  [color=red, key=1, label="lambda expression", style=dashed];
n266 -> n267  [color=red, key=0, style=solid];
n266 -> n257  [color=red, key=2, style=dotted];
n263 -> n264  [color=red, key=0, style=solid];
n263 -> n5  [color=red, key=2, style=dotted];
n265 -> n266  [color=red, key=0, style=solid];
n264 -> n261  [color=blue, key=0, style=bold];
n267 -> n265  [color=blue, key=0, style=bold];
n268 -> n269  [color=red, key=0, style=solid];
n269 -> n270  [color=red, key=0, style=solid];
n269 -> n273  [color=red, key=1, label=arrangeSql, style=dashed];
n269 -> n269  [color=red, key=3, label="Local variable string arrangeSql", style=bold];
n270 -> n271  [color=red, key=0, style=solid];
n270 -> n67  [color=red, key=2, style=dotted];
n270 -> n272  [color=red, key=1, label="lambda expression", style=dashed];
n273 -> n274  [color=red, key=0, style=solid];
n273 -> n278  [color=red, key=2, style=dotted];
n271 -> n268  [color=blue, key=0, style=bold];
n272 -> n273  [color=red, key=0, style=solid];
n272 -> n274  [color=red, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n272 -> n275  [color=red, key=1, label=SqlConnection, style=dashed];
n274 -> n275  [color=red, key=0, style=solid];
n274 -> n257  [color=red, key=2, style=dotted];
n275 -> n276  [color=red, key=0, style=solid];
n275 -> n4  [color=red, key=2, style=dotted];
n275 -> n90  [color=red, key=2, style=dotted];
n276 -> n277  [color=red, key=0, style=solid];
n276 -> n5  [color=red, key=2, style=dotted];
n277 -> n272  [color=blue, key=0, style=bold];
n279 -> n280  [color=red, key=0, style=solid];
n280 -> n281  [color=red, key=0, style=solid];
n280 -> n284  [color=red, key=1, label=arrangeSql, style=dashed];
n280 -> n269  [color=red, key=3, label="Local variable string arrangeSql", style=bold];
n281 -> n282  [color=red, key=0, style=solid];
n281 -> n67  [color=red, key=2, style=dotted];
n281 -> n283  [color=red, key=1, label="lambda expression", style=dashed];
n284 -> n285  [color=red, key=0, style=solid];
n284 -> n278  [color=red, key=2, style=dotted];
n282 -> n279  [color=blue, key=0, style=bold];
n283 -> n284  [color=red, key=0, style=solid];
n283 -> n285  [color=red, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n283 -> n286  [color=red, key=1, label=SqlConnection, style=dashed];
n285 -> n286  [color=red, key=0, style=solid];
n285 -> n257  [color=red, key=2, style=dotted];
n286 -> n287  [color=red, key=0, style=solid];
n286 -> n4  [color=red, key=2, style=dotted];
n286 -> n90  [color=red, key=2, style=dotted];
n287 -> n288  [color=red, key=0, style=solid];
n287 -> n5  [color=red, key=2, style=dotted];
n288 -> n283  [color=blue, key=0, style=bold];
n289 -> n290  [key=0, style=solid];
n290 -> n291  [key=0, style=solid];
n290 -> n22  [key=2, style=dotted];
n290 -> n292  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n291 -> n289  [color=blue, key=0, style=bold];
n292 -> n293  [key=0, style=solid];
n292 -> n297  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n293 -> n294  [key=0, style=solid];
n293 -> n4  [key=2, style=dotted];
n293 -> n296  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n297 -> n298  [key=0, style=solid];
n297 -> n299  [key=2, style=dotted];
n294 -> n295  [key=0, style=solid];
n294 -> n5  [key=2, style=dotted];
n296 -> n297  [key=0, style=solid];
n295 -> n292  [color=blue, key=0, style=bold];
n298 -> n296  [color=blue, key=0, style=bold];
n300 -> n301  [key=0, style=solid];
n301 -> n302  [key=0, style=solid];
n301 -> n22  [key=2, style=dotted];
n301 -> n303  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n302 -> n300  [color=blue, key=0, style=bold];
n303 -> n304  [key=0, style=solid];
n303 -> n307  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n304 -> n305  [key=0, style=solid];
n304 -> n4  [key=2, style=dotted];
n304 -> n306  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n307 -> n308  [key=0, style=solid];
n307 -> n299  [key=2, style=dotted];
n305 -> n303  [color=blue, key=0, style=bold];
n306 -> n307  [key=0, style=solid];
n308 -> n306  [color=blue, key=0, style=bold];
n309 -> n310  [key=0, style=solid];
n310 -> n311  [key=0, style=solid];
n310 -> n22  [key=2, style=dotted];
n310 -> n312  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n311 -> n309  [color=blue, key=0, style=bold];
n312 -> n313  [key=0, style=solid];
n313 -> n314  [key=0, style=solid];
n313 -> n299  [key=2, style=dotted];
n314 -> n315  [key=0, style=solid];
n314 -> n123  [key=2, style=dotted];
n315 -> n312  [color=blue, key=0, style=bold];
n316 -> n317  [key=0, style=solid];
n317 -> n318  [key=0, style=solid];
n317 -> n321  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n317 -> n317  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
n318 -> n319  [key=0, style=solid];
n318 -> n67  [key=2, style=dotted];
n318 -> n320  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n321 -> n322  [key=0, style=solid];
n321 -> n278  [key=2, style=dotted];
n319 -> n316  [color=blue, key=0, style=bold];
n320 -> n321  [key=0, style=solid];
n320 -> n322  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n322 -> n323  [key=0, style=solid];
n322 -> n299  [key=2, style=dotted];
n323 -> n324  [key=0, style=solid];
n323 -> n5  [key=2, style=dotted];
n324 -> n320  [color=blue, key=0, style=bold];
n325 -> n326  [key=0, style=solid];
n326 -> n327  [key=0, style=solid];
n326 -> n22  [key=2, style=dotted];
n326 -> n328  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n327 -> n325  [color=blue, key=0, style=bold];
n328 -> n329  [key=0, style=solid];
n328 -> n333  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n329 -> n330  [key=0, style=solid];
n329 -> n4  [key=2, style=dotted];
n329 -> n332  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n333 -> n334  [key=0, style=solid];
n333 -> n335  [key=2, style=dotted];
n333 -> n336  [key=2, style=dotted];
n330 -> n331  [key=0, style=solid];
n330 -> n5  [key=2, style=dotted];
n332 -> n333  [key=0, style=solid];
n331 -> n328  [color=blue, key=0, style=bold];
n334 -> n332  [color=blue, key=0, style=bold];
n337 -> n338  [key=0, style=solid];
n338 -> n339  [key=0, style=solid];
n338 -> n22  [key=2, style=dotted];
n338 -> n340  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n339 -> n337  [color=blue, key=0, style=bold];
n340 -> n341  [key=0, style=solid];
n340 -> n345  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n341 -> n342  [key=0, style=solid];
n341 -> n4  [key=2, style=dotted];
n341 -> n344  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n345 -> n346  [key=0, style=solid];
n345 -> n336  [key=2, style=dotted];
n342 -> n343  [key=0, style=solid];
n342 -> n5  [key=2, style=dotted];
n344 -> n345  [key=0, style=solid];
n343 -> n340  [color=blue, key=0, style=bold];
n346 -> n344  [color=blue, key=0, style=bold];
n347 -> n348  [key=0, style=solid];
n348 -> n349  [key=0, style=solid];
n348 -> n67  [key=2, style=dotted];
n348 -> n350  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n349 -> n347  [color=blue, key=0, style=bold];
n350 -> n351  [key=0, style=solid];
n350 -> n352  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n350 -> n353  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n350 -> n358  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n350 -> n359  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n351 -> n352  [key=0, style=solid];
n351 -> n335  [key=2, style=dotted];
n352 -> n353  [key=0, style=solid];
n352 -> n336  [key=2, style=dotted];
n353 -> n354  [key=0, style=solid];
n353 -> n89  [key=2, style=dotted];
n353 -> n90  [key=2, style=dotted];
n353 -> n355  [color=darkseagreen4, key=1, label=server, style=dashed];
n353 -> n356  [color=darkseagreen4, key=1, label=server, style=dashed];
n358 -> n359  [key=0, style=solid];
n358 -> n336  [key=2, style=dotted];
n359 -> n360  [key=0, style=solid];
n359 -> n89  [key=2, style=dotted];
n359 -> n90  [key=2, style=dotted];
n359 -> n361  [color=darkseagreen4, key=1, label=sameServer, style=dashed];
n354 -> n355  [key=0, style=solid];
n354 -> n5  [key=2, style=dotted];
n355 -> n356  [key=0, style=solid];
n355 -> n363  [key=2, style=dotted];
n355 -> n95  [key=2, style=dotted];
n356 -> n357  [key=0, style=solid];
n356 -> n28  [key=2, style=dotted];
n357 -> n358  [key=0, style=solid];
n357 -> n335  [key=2, style=dotted];
n360 -> n361  [key=0, style=solid];
n360 -> n5  [key=2, style=dotted];
n361 -> n362  [key=0, style=solid];
n361 -> n364  [key=2, style=dotted];
n362 -> n350  [color=blue, key=0, style=bold];
n365 -> n366  [key=0, style=solid];
n366 -> n367  [key=0, style=solid];
n366 -> n22  [key=2, style=dotted];
n366 -> n368  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n367 -> n365  [color=blue, key=0, style=bold];
n368 -> n369  [key=0, style=solid];
n368 -> n372  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n369 -> n370  [key=0, style=solid];
n369 -> n4  [key=2, style=dotted];
n369 -> n371  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n372 -> n373  [key=0, style=solid];
n372 -> n374  [key=2, style=dotted];
n370 -> n368  [color=blue, key=0, style=bold];
n371 -> n372  [key=0, style=solid];
n373 -> n371  [color=blue, key=0, style=bold];
n375 -> n376  [key=0, style=solid];
n376 -> n377  [key=0, style=solid];
n376 -> n380  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n376 -> n376  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
n377 -> n378  [key=0, style=solid];
n377 -> n67  [key=2, style=dotted];
n377 -> n379  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n380 -> n381  [key=0, style=solid];
n380 -> n278  [key=2, style=dotted];
n378 -> n375  [color=blue, key=0, style=bold];
n379 -> n380  [key=0, style=solid];
n379 -> n381  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n379 -> n382  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n381 -> n382  [key=0, style=solid];
n381 -> n374  [key=2, style=dotted];
n382 -> n383  [key=0, style=solid];
n382 -> n89  [key=2, style=dotted];
n382 -> n90  [key=2, style=dotted];
n383 -> n384  [key=0, style=solid];
n383 -> n385  [key=2, style=dotted];
n384 -> n379  [color=blue, key=0, style=bold];
n386 -> n387  [key=0, style=solid];
n387 -> n388  [key=0, style=solid];
n387 -> n22  [key=2, style=dotted];
n387 -> n389  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n388 -> n386  [color=blue, key=0, style=bold];
n389 -> n390  [key=0, style=solid];
n389 -> n393  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n390 -> n391  [key=0, style=solid];
n390 -> n4  [key=2, style=dotted];
n390 -> n392  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n393 -> n394  [key=0, style=solid];
n393 -> n395  [key=2, style=dotted];
n391 -> n389  [color=blue, key=0, style=bold];
n392 -> n393  [key=0, style=solid];
n394 -> n392  [color=blue, key=0, style=bold];
n396 -> n397  [key=0, style=solid];
n397 -> n398  [key=0, style=solid];
n397 -> n401  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n397 -> n397  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
n398 -> n399  [key=0, style=solid];
n398 -> n67  [key=2, style=dotted];
n398 -> n400  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n401 -> n402  [key=0, style=solid];
n401 -> n278  [key=2, style=dotted];
n399 -> n396  [color=blue, key=0, style=bold];
n400 -> n401  [key=0, style=solid];
n400 -> n402  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n400 -> n403  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n402 -> n403  [key=0, style=solid];
n402 -> n395  [key=2, style=dotted];
n403 -> n404  [key=0, style=solid];
n403 -> n89  [key=2, style=dotted];
n403 -> n96  [key=2, style=dotted];
n403 -> n407  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n403 -> n410  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n403 -> n405  [color=darkseagreen4, key=1, label=servers, style=dashed];
n404 -> n405  [key=0, style=solid];
n404 -> n385  [key=2, style=dotted];
n407 -> n408  [key=0, style=solid];
n410 -> n411  [key=0, style=solid];
n405 -> n406  [key=0, style=solid];
n405 -> n5  [key=2, style=dotted];
n406 -> n400  [color=blue, key=0, style=bold];
n408 -> n409  [key=0, style=solid];
n409 -> n407  [color=blue, key=0, style=bold];
n411 -> n412  [key=0, style=solid];
n412 -> n410  [color=blue, key=0, style=bold];
n413 -> n414  [key=0, style=solid];
n414 -> n415  [key=0, style=solid];
n414 -> n22  [key=2, style=dotted];
n414 -> n416  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n415 -> n413  [color=blue, key=0, style=bold];
n416 -> n417  [key=0, style=solid];
n416 -> n420  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n417 -> n418  [key=0, style=solid];
n417 -> n4  [key=2, style=dotted];
n417 -> n419  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n420 -> n421  [key=0, style=solid];
n420 -> n422  [key=2, style=dotted];
n420 -> n423  [key=2, style=dotted];
n418 -> n416  [color=blue, key=0, style=bold];
n419 -> n420  [key=0, style=solid];
n421 -> n419  [color=blue, key=0, style=bold];
n424 -> n425  [key=0, style=solid];
n425 -> n426  [key=0, style=solid];
n425 -> n429  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n425 -> n425  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
n426 -> n427  [key=0, style=solid];
n426 -> n67  [key=2, style=dotted];
n426 -> n428  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n429 -> n430  [key=0, style=solid];
n429 -> n94  [key=2, style=dotted];
n429 -> n434  [key=2, style=dotted];
n429 -> n278  [key=2, style=dotted];
n427 -> n424  [color=blue, key=0, style=bold];
n428 -> n429  [key=0, style=solid];
n428 -> n430  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n428 -> n431  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n430 -> n431  [key=0, style=solid];
n430 -> n435  [key=2, style=dotted];
n430 -> n423  [key=2, style=dotted];
n431 -> n432  [key=0, style=solid];
n431 -> n89  [key=2, style=dotted];
n431 -> n90  [key=2, style=dotted];
n432 -> n433  [key=0, style=solid];
n432 -> n5  [key=2, style=dotted];
n433 -> n428  [color=blue, key=0, style=bold];
n436 -> n437  [key=0, style=solid];
n436 -> n439  [color=darkseagreen4, key=1, label="System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>", style=dashed];
n437 -> n438  [key=0, style=solid];
n437 -> n18  [key=2, style=dotted];
n437 -> n439  [color=darkseagreen4, key=1, label=sqlConnection, style=dashed];
n439 -> n440  [key=0, style=solid];
n439 -> n441  [key=2, style=dotted];
n438 -> n439  [key=0, style=solid];
n438 -> n9  [key=2, style=dotted];
n438 -> n10  [key=2, style=dotted];
n440 -> n436  [color=blue, key=0, style=bold];
n442 -> n443  [key=0, style=solid];
n442 -> n444  [color=darkseagreen4, key=1, label="System.Action<HangFire.SqlServer.SqlServerConnection>", style=dashed];
n443 -> n444  [key=0, style=solid];
n443 -> n9  [key=2, style=dotted];
n443 -> n18  [key=2, style=dotted];
n443 -> n10  [key=2, style=dotted];
n444 -> n445  [key=0, style=solid];
n444 -> n446  [key=2, style=dotted];
n445 -> n442  [color=blue, key=0, style=bold];
n447 -> n63  [color=blue, key=0, style=bold];
m1_3 -> m1_4  [key=0, style=solid];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_6  [key=2, style=dotted];
m1_5 -> m1_3  [color=blue, key=0, style=bold];
m1_25 -> m1_26  [color=red, key=0, style=solid];
m1_25 -> m1_29  [key=2, style=dotted];
m1_25 -> m1_32  [key=2, style=dotted];
m1_25 -> m1_33  [key=2, style=dotted];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_16  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m1_12 -> m1_17  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_12 -> m1_18  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_13 -> m1_14  [key=0, style=solid];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_28  [key=2, style=dotted];
m1_16 -> m1_16  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_17  [color=darkseagreen4, key=1, label=queueIndex, style=dashed];
m1_17 -> m1_21  [color=darkseagreen4, key=1, label=queueIndex, style=dashed];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_20  [color=darkseagreen4, key=1, label=queueName, style=dashed];
m1_18 -> m1_26  [color=red, key=1, label=queueName, style=dashed];
m1_14 -> m1_15  [key=0, style=solid];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> m1_17  [color=darkseagreen4, key=1, label=queueIndex, style=dashed];
m1_15 -> m1_15  [color=darkorchid, key=3, label="Local variable int queueIndex", style=bold];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_23  [key=0, style=solid];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_29  [key=2, style=dotted];
m1_19 -> m1_22  [color=darkseagreen4, key=1, label=queueKey, style=dashed];
m1_19 -> m1_23  [color=darkseagreen4, key=1, label=queueKey, style=dashed];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_29  [key=2, style=dotted];
m1_20 -> m1_22  [color=darkseagreen4, key=1, label=fetchedKey, style=dashed];
m1_20 -> m1_23  [color=darkseagreen4, key=1, label=fetchedKey, style=dashed];
m1_26 -> m1_27  [color=red, key=0, style=solid];
m1_26 -> m1_34  [color=red, key=2, style=dotted];
m1_22 -> m1_24  [key=0, style=solid];
m1_22 -> m1_30  [key=2, style=dotted];
m1_22 -> m1_25  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m1_22 -> m1_26  [color=red, key=1, label=jobId, style=dashed];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_31  [key=2, style=dotted];
m1_23 -> m1_25  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m1_23 -> m1_26  [color=red, key=1, label=jobId, style=dashed];
m1_24 -> m1_15  [key=0, style=solid];
m1_24 -> m1_25  [key=0, style=solid];
m1_27 -> m1_12  [color=blue, key=0, style=bold];
m1_124 -> m1_125  [key=0, style=solid];
m1_125 -> m1_126  [key=0, style=solid];
m1_125 -> m1_127  [key=2, style=dotted];
m1_125 -> m1_128  [key=2, style=dotted];
m1_126 -> m1_124  [color=blue, key=0, style=bold];
m1_171 -> m1_172  [key=0, style=solid];
m1_171 -> m1_183  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m1_171 -> m1_180  [color=darkorchid, key=3, label="method methodReturn int RemoveTimedOutServers", style=bold];
m1_172 -> m1_173  [key=0, style=solid];
m1_172 -> m1_188  [key=2, style=dotted];
m1_172 -> m1_176  [color=darkseagreen4, key=1, label=serverNames, style=dashed];
m1_183 -> m1_184  [key=0, style=solid];
m1_183 -> m1_181  [key=0, style=solid];
m1_183 -> m1_193  [key=2, style=dotted];
m1_173 -> m1_174  [key=0, style=solid];
m1_173 -> m1_145  [key=2, style=dotted];
m1_173 -> m1_178  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m1_173 -> m1_200  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m1_173 -> m1_181  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m1_176 -> m1_177  [key=0, style=solid];
m1_176 -> m1_179  [key=0, style=solid];
m1_174 -> m1_175  [key=0, style=solid];
m1_174 -> m1_183  [color=darkseagreen4, key=1, label=utcNow, style=dashed];
m1_178 -> m1_176  [key=0, style=solid];
m1_178 -> m1_60  [key=2, style=dotted];
m1_178 -> m1_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_178 -> m1_199  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_181 -> m1_182  [key=0, style=solid];
m1_181 -> m1_186  [key=0, style=solid];
m1_175 -> m1_176  [key=0, style=solid];
m1_175 -> m1_189  [key=2, style=dotted];
m1_175 -> m1_178  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m1_175 -> m1_179  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m1_179 -> m1_180  [key=0, style=solid];
m1_179 -> m1_190  [key=2, style=dotted];
m1_177 -> m1_178  [key=0, style=solid];
m1_177 -> m1_195  [color=darkseagreen4, key=1, label=name, style=dashed];
m1_177 -> m1_200  [color=darkseagreen4, key=1, label=name, style=dashed];
m1_177 -> m1_176  [color=darkorchid, key=3, label="Local variable var name", style=bold];
m1_180 -> m1_181  [key=0, style=solid];
m1_180 -> m1_185  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m1_180 -> m1_186  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m1_180 -> m1_15  [color=darkorchid, key=3, label="Local variable int removedServerCount", style=bold];
m1_185 -> m1_181  [key=0, style=solid];
m1_185 -> m1_185  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m1_185 -> m1_186  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m1_186 -> m1_187  [key=0, style=solid];
m1_182 -> m1_183  [key=0, style=solid];
m1_182 -> m1_191  [key=2, style=dotted];
m1_182 -> m1_192  [key=2, style=dotted];
m1_182 -> m1_182  [color=darkseagreen4, key=1, label=heartbeat, style=dashed];
m1_182 -> m1_184  [color=darkseagreen4, key=1, label=heartbeat, style=dashed];
m1_184 -> m1_185  [key=0, style=solid];
m1_184 -> m1_154  [key=2, style=dotted];
m1_184 -> m1_184  [color=darkseagreen4, key=1, label=heartbeat, style=dashed];
m1_187 -> m1_171  [color=blue, key=0, style=bold];
m1_169 -> m1_170  [key=0, style=solid];
m1_169 -> m1_29  [key=2, style=dotted];
m1_169 -> m1_32  [key=2, style=dotted];
m1_169 -> m1_33  [key=2, style=dotted];
m1_168 -> m1_169  [key=0, style=solid];
m1_170 -> m1_168  [color=blue, key=0, style=bold];
m1_157 -> m1_158  [key=0, style=solid];
m1_157 -> m1_60  [key=2, style=dotted];
m1_157 -> m1_164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_154 -> m1_155  [key=0, style=solid];
m1_154 -> m1_156  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_154 -> m1_161  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_154 -> m1_157  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_154 -> m1_165  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_154 -> m1_97  [color=darkorchid, key=3, label="Parameter variable IRedisClient redis", style=bold];
m1_154 -> m1_151  [color=darkorchid, key=3, label="Parameter variable string serverId", style=bold];
m1_155 -> m1_156  [key=0, style=solid];
m1_155 -> m1_11  [key=2, style=dotted];
m1_155 -> m1_157  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m1_155 -> m1_158  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m1_156 -> m1_157  [key=0, style=solid];
m1_156 -> m1_60  [key=2, style=dotted];
m1_156 -> m1_160  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_158 -> m1_159  [key=0, style=solid];
m1_158 -> m1_61  [key=2, style=dotted];
m1_159 -> m1_154  [color=blue, key=0, style=bold];
m1_7 -> m1_8  [key=0, style=solid];
m1_8 -> m1_9  [key=0, style=solid];
m1_8 -> m1_10  [key=2, style=dotted];
m1_8 -> m1_11  [key=2, style=dotted];
m1_9 -> m1_7  [color=blue, key=0, style=bold];
m1_102 -> m1_103  [key=0, style=solid];
m1_103 -> m1_104  [key=0, style=solid];
m1_103 -> m1_29  [key=2, style=dotted];
m1_103 -> m1_105  [key=2, style=dotted];
m1_104 -> m1_102  [color=blue, key=0, style=bold];
m1_129 -> m1_130  [key=0, style=solid];
m1_129 -> m1_131  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_129 -> m1_139  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_129 -> m1_132  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_129 -> m1_143  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_129 -> m1_133  [color=darkseagreen4, key=1, label="HangFire.Server.ServerContext", style=dashed];
m1_129 -> m1_135  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_129 -> m1_148  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_130 -> m1_131  [key=0, style=solid];
m1_130 -> m1_11  [key=2, style=dotted];
m1_130 -> m1_132  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m1_130 -> m1_135  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m1_130 -> m1_136  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m1_131 -> m1_132  [key=0, style=solid];
m1_131 -> m1_60  [key=2, style=dotted];
m1_131 -> m1_138  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_132 -> m1_133  [key=0, style=solid];
m1_132 -> m1_60  [key=2, style=dotted];
m1_132 -> m1_142  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_133 -> m1_134  [key=0, style=solid];
m1_133 -> m1_136  [key=0, style=solid];
m1_135 -> m1_133  [key=0, style=solid];
m1_135 -> m1_60  [key=2, style=dotted];
m1_135 -> m1_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_136 -> m1_137  [key=0, style=solid];
m1_136 -> m1_61  [key=2, style=dotted];
m1_134 -> m1_135  [key=0, style=solid];
m1_134 -> m1_148  [color=darkseagreen4, key=1, label=queue1, style=dashed];
m1_134 -> m1_133  [color=darkorchid, key=3, label="Local variable string queue1", style=bold];
m1_137 -> m1_129  [color=blue, key=0, style=bold];
m1_110 -> m1_111  [color=red, key=0, style=solid];
m1_110 -> m1_60  [color=red, key=2, style=dotted];
m1_110 -> m1_121  [color=red, key=1, label="lambda expression", style=dashed];
m1_106 -> m1_107  [color=red, key=0, style=solid];
m1_106 -> m1_108  [color=red, key=1, label=string, style=dashed];
m1_106 -> m1_114  [color=red, key=1, label=string, style=dashed];
m1_106 -> m1_109  [color=red, key=1, label=string, style=dashed];
m1_106 -> m1_118  [color=red, key=1, label=string, style=dashed];
m1_106 -> m1_110  [color=red, key=1, label=string, style=dashed];
m1_106 -> m1_122  [color=red, key=1, label=string, style=dashed];
m1_107 -> m1_108  [color=red, key=0, style=solid];
m1_107 -> m1_11  [color=red, key=2, style=dotted];
m1_107 -> m1_109  [color=red, key=1, label=transaction, style=dashed];
m1_107 -> m1_110  [color=red, key=1, label=transaction, style=dashed];
m1_107 -> m1_111  [color=red, key=1, label=transaction, style=dashed];
m1_108 -> m1_109  [color=red, key=0, style=solid];
m1_108 -> m1_60  [color=red, key=2, style=dotted];
m1_108 -> m1_113  [color=red, key=1, label="lambda expression", style=dashed];
m1_109 -> m1_110  [color=red, key=0, style=solid];
m1_109 -> m1_60  [color=red, key=2, style=dotted];
m1_109 -> m1_117  [color=red, key=1, label="lambda expression", style=dashed];
m1_111 -> m1_112  [color=red, key=0, style=solid];
m1_111 -> m1_61  [color=red, key=2, style=dotted];
m1_112 -> m1_106  [color=blue, key=0, style=bold];
m1_151 -> m1_152  [key=0, style=solid];
m1_152 -> m1_153  [key=0, style=solid];
m1_152 -> m1_154  [key=2, style=dotted];
m1_153 -> m1_151  [color=blue, key=0, style=bold];
m1_70 -> m1_71  [key=0, style=solid];
m1_70 -> m1_72  [color=darkorchid, key=3, label="method methodReturn HangFire.Storage.JobData GetJobData", style=bold];
m1_71 -> m1_72  [key=0, style=solid];
m1_71 -> m1_29  [key=2, style=dotted];
m1_71 -> m1_94  [key=2, style=dotted];
m1_71 -> m1_78  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m1_71 -> m1_79  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m1_71 -> m1_80  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m1_71 -> m1_81  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m1_71 -> m1_82  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m1_71 -> m1_83  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m1_71 -> m1_84  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m1_71 -> m1_85  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m1_71 -> m1_92  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m1_72 -> m1_73  [key=0, style=solid];
m1_72 -> m1_74  [key=0, style=solid];
m1_78 -> m1_79  [key=0, style=solid];
m1_78 -> m1_80  [key=0, style=solid];
m1_78 -> m1_95  [key=2, style=dotted];
m1_79 -> m1_80  [key=0, style=solid];
m1_79 -> m1_88  [color=darkseagreen4, key=1, label=type, style=dashed];
m1_80 -> m1_81  [key=0, style=solid];
m1_80 -> m1_82  [key=0, style=solid];
m1_80 -> m1_95  [key=2, style=dotted];
m1_81 -> m1_82  [key=0, style=solid];
m1_81 -> m1_88  [color=darkseagreen4, key=1, label=method, style=dashed];
m1_82 -> m1_83  [key=0, style=solid];
m1_82 -> m1_84  [key=0, style=solid];
m1_82 -> m1_95  [key=2, style=dotted];
m1_83 -> m1_84  [key=0, style=solid];
m1_83 -> m1_88  [color=darkseagreen4, key=1, label=parameterTypes, style=dashed];
m1_84 -> m1_85  [key=0, style=solid];
m1_84 -> m1_86  [key=0, style=solid];
m1_84 -> m1_95  [key=2, style=dotted];
m1_85 -> m1_86  [key=0, style=solid];
m1_85 -> m1_88  [color=darkseagreen4, key=1, label=arguments, style=dashed];
m1_92 -> m1_93  [key=0, style=solid];
m1_92 -> m1_98  [key=2, style=dotted];
m1_92 -> m1_95  [key=2, style=dotted];
m1_73 -> m1_93  [key=0, style=solid];
m1_74 -> m1_75  [key=0, style=solid];
m1_74 -> m1_88  [color=darkseagreen4, key=1, label=type, style=dashed];
m1_74 -> m1_72  [color=darkorchid, key=3, label="Local variable string type", style=bold];
m1_75 -> m1_76  [key=0, style=solid];
m1_75 -> m1_88  [color=darkseagreen4, key=1, label=method, style=dashed];
m1_75 -> m1_72  [color=darkorchid, key=3, label="Local variable string method", style=bold];
m1_88 -> m1_89  [key=0, style=solid];
m1_88 -> n153  [key=2, style=dotted];
m1_76 -> m1_77  [key=0, style=solid];
m1_76 -> m1_88  [color=darkseagreen4, key=1, label=parameterTypes, style=dashed];
m1_76 -> m1_72  [color=darkorchid, key=3, label="Local variable string parameterTypes", style=bold];
m1_77 -> m1_78  [key=0, style=solid];
m1_77 -> m1_88  [color=darkseagreen4, key=1, label=arguments, style=dashed];
m1_77 -> m1_72  [color=darkorchid, key=3, label="Local variable string arguments", style=bold];
m1_86 -> m1_87  [key=0, style=solid];
m1_86 -> m1_72  [color=darkorchid, key=3, label="Local variable HangFire.Common.Job job", style=bold];
m1_87 -> m1_88  [key=0, style=solid];
m1_87 -> m1_72  [color=darkorchid, key=3, label="Local variable HangFire.Common.JobLoadException loadException", style=bold];
m1_87 -> m1_90  [color=darkorchid, key=3, label="Local variable HangFire.Common.JobLoadException loadException", style=bold];
m1_89 -> m1_90  [key=0, style=solid];
m1_89 -> m1_92  [key=0, style=solid];
m1_89 -> m1_97  [key=2, style=dotted];
m1_90 -> m1_91  [key=0, style=solid];
m1_91 -> m1_92  [key=0, style=solid];
m1_93 -> m1_70  [color=blue, key=0, style=bold];
m1_199 -> m1_200  [key=0, style=solid];
m1_67 -> m1_68  [key=0, style=solid];
m1_67 -> m1_29  [key=2, style=dotted];
m1_67 -> m1_69  [key=2, style=dotted];
m1_63 -> m1_64  [key=0, style=solid];
m1_63 -> m1_29  [key=2, style=dotted];
m1_63 -> m1_65  [key=2, style=dotted];
m1_62 -> m1_63  [key=0, style=solid];
m1_66 -> m1_67  [key=0, style=solid];
m1_64 -> m1_62  [color=blue, key=0, style=bold];
m1_68 -> m1_66  [color=blue, key=0, style=bold];
m1_114 -> m1_115  [color=red, key=0, style=solid];
m1_114 -> m1_29  [color=red, key=2, style=dotted];
m1_114 -> m1_116  [color=red, key=2, style=dotted];
m1_118 -> m1_119  [color=red, key=0, style=solid];
m1_118 -> m1_29  [color=red, key=2, style=dotted];
m1_118 -> m1_120  [color=red, key=2, style=dotted];
m1_122 -> m1_123  [color=red, key=0, style=solid];
m1_122 -> m1_29  [color=red, key=2, style=dotted];
m1_122 -> m1_120  [color=red, key=2, style=dotted];
m1_113 -> m1_114  [color=red, key=0, style=solid];
m1_117 -> m1_118  [color=red, key=0, style=solid];
m1_121 -> m1_122  [color=red, key=0, style=solid];
m1_115 -> m1_113  [color=blue, key=0, style=bold];
m1_119 -> m1_117  [color=blue, key=0, style=bold];
m1_123 -> m1_121  [color=blue, key=0, style=bold];
m1_139 -> m1_140  [key=0, style=solid];
m1_139 -> m1_141  [key=2, style=dotted];
m1_143 -> m1_144  [key=0, style=solid];
m1_143 -> m1_29  [key=2, style=dotted];
m1_143 -> m1_145  [key=2, style=dotted];
m1_143 -> m1_146  [key=2, style=dotted];
m1_143 -> m1_32  [key=2, style=dotted];
m1_143 -> m1_65  [key=2, style=dotted];
m1_148 -> m1_149  [key=0, style=solid];
m1_148 -> m1_29  [key=2, style=dotted];
m1_148 -> m1_150  [key=2, style=dotted];
m1_138 -> m1_139  [key=0, style=solid];
m1_142 -> m1_143  [key=0, style=solid];
m1_147 -> m1_148  [key=0, style=solid];
m1_140 -> m1_138  [color=blue, key=0, style=bold];
m1_144 -> m1_142  [color=blue, key=0, style=bold];
m1_149 -> m1_147  [color=blue, key=0, style=bold];
m1_161 -> m1_162  [key=0, style=solid];
m1_161 -> m1_163  [key=2, style=dotted];
m1_165 -> m1_166  [key=0, style=solid];
m1_165 -> m1_29  [key=2, style=dotted];
m1_165 -> m1_167  [key=2, style=dotted];
m1_160 -> m1_161  [key=0, style=solid];
m1_164 -> m1_165  [key=0, style=solid];
m1_162 -> m1_160  [color=blue, key=0, style=bold];
m1_166 -> m1_164  [color=blue, key=0, style=bold];
m1_200 -> m1_201  [key=0, style=solid];
m1_200 -> m1_202  [key=2, style=dotted];
m1_200 -> m1_203  [key=2, style=dotted];
m1_200 -> m1_204  [key=2, style=dotted];
m1_200 -> m1_205  [key=2, style=dotted];
m1_195 -> m1_196  [key=0, style=solid];
m1_195 -> m1_197  [key=2, style=dotted];
m1_195 -> m1_198  [key=2, style=dotted];
m1_194 -> m1_195  [key=0, style=solid];
m1_196 -> m1_194  [color=blue, key=0, style=bold];
m1_201 -> m1_199  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_2 -> m1_0  [color=blue, key=0, style=bold];
m1_51 -> m1_52  [key=0, style=solid];
m1_51 -> m1_60  [key=2, style=dotted];
m1_51 -> m1_66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_40 -> m1_41  [key=0, style=solid];
m1_40 -> m1_42  [color=darkseagreen4, key=1, label="HangFire.Common.Job", style=dashed];
m1_40 -> m1_43  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m1_40 -> m1_51  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m1_40 -> m1_67  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_55  [key=2, style=dotted];
m1_41 -> m1_56  [key=2, style=dotted];
m1_41 -> m1_50  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m1_41 -> m1_63  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m1_41 -> m1_51  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m1_41 -> m1_67  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m1_41 -> m1_53  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_57  [key=2, style=dotted];
m1_42 -> m1_44  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m1_42 -> m1_45  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m1_42 -> m1_46  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m1_42 -> m1_47  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m1_43 -> m1_44  [key=0, style=solid];
m1_43 -> m1_58  [key=2, style=dotted];
m1_43 -> m1_45  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m1_43 -> m1_46  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m1_43 -> m1_47  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m1_43 -> m1_48  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m1_43 -> m1_50  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m1_43 -> m1_63  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m1_50 -> m1_51  [key=0, style=solid];
m1_50 -> m1_60  [key=2, style=dotted];
m1_50 -> m1_62  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_53 -> m1_54  [key=0, style=solid];
m1_44 -> m1_45  [key=0, style=solid];
m1_44 -> m1_59  [key=2, style=dotted];
m1_45 -> m1_46  [key=0, style=solid];
m1_45 -> m1_59  [key=2, style=dotted];
m1_46 -> m1_47  [key=0, style=solid];
m1_46 -> m1_59  [key=2, style=dotted];
m1_47 -> m1_48  [key=0, style=solid];
m1_47 -> m1_59  [key=2, style=dotted];
m1_48 -> m1_49  [key=0, style=solid];
m1_48 -> m1_32  [key=2, style=dotted];
m1_48 -> m1_59  [key=2, style=dotted];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_11  [key=2, style=dotted];
m1_49 -> m1_51  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m1_49 -> m1_52  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m1_52 -> m1_53  [key=0, style=solid];
m1_52 -> m1_61  [key=2, style=dotted];
m1_54 -> m1_40  [color=blue, key=0, style=bold];
m1_35 -> m1_36  [key=0, style=solid];
m1_36 -> m1_37  [key=0, style=solid];
m1_36 -> m1_29  [key=2, style=dotted];
m1_36 -> m1_38  [key=2, style=dotted];
m1_36 -> m1_39  [key=2, style=dotted];
m1_37 -> m1_35  [color=blue, key=0, style=bold];
m1_100 -> m1_101  [key=0, style=solid];
m1_100 -> m1_29  [key=2, style=dotted];
m1_100 -> m1_33  [key=2, style=dotted];
m1_99 -> m1_100  [key=0, style=solid];
m1_101 -> m1_99  [color=blue, key=0, style=bold];
m1_97 -> m1_0  [color=darkorchid, key=3, label="Property variable IRedisClient Redis", style=bold];
m1_206 -> m1_1  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m1_206 -> m1_4  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m1_206 -> m1_8  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m1_206 -> m1_22  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m1_206 -> m1_23  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m1_206 -> m1_25  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m1_206 -> m1_36  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m1_206 -> m1_49  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m1_206 -> m1_71  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m1_206 -> m1_100  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m1_206 -> m1_103  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m1_206 -> m1_107  [color=red, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m1_206 -> m1_125  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m1_206 -> m1_130  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m1_206 -> m1_152  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m1_206 -> m1_169  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m1_206 -> m1_172  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m1_206 -> m1_175  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m1_206 -> m1_184  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m1_207 -> m1_63  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m1_207 -> m1_67  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m1_208 -> m1_63  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m1_209 -> m1_67  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m1_210 -> m1_114  [color=red, key=1, label=string, style=dashed];
m1_210 -> m1_118  [color=red, key=1, label=string, style=dashed];
m1_210 -> m1_122  [color=red, key=1, label=string, style=dashed];
m1_211 -> m1_114  [color=red, key=1, label=string, style=dashed];
m1_212 -> m1_139  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_212 -> m1_143  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_212 -> m1_148  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_213 -> m1_143  [color=darkseagreen4, key=1, label="HangFire.Server.ServerContext", style=dashed];
m1_214 -> m1_148  [color=darkseagreen4, key=1, label=queue1, style=dashed];
m1_215 -> m1_161  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_215 -> m1_165  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_216 -> m1_195  [color=darkseagreen4, key=1, label=name, style=dashed];
m1_216 -> m1_200  [color=darkseagreen4, key=1, label=name, style=dashed];
m1_217 -> m1_200  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m2_8 -> m2_6  [color=blue, key=0, style=bold];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_5  [key=0, style=solid];
m2_6 -> m2_7  [key=0, style=solid];
m2_7 -> m2_8  [key=0, style=solid];
m2_7 -> m2_4  [key=2, style=dotted];
m2_7 -> m2_0  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [color=green, key=0, style=solid];
m2_0 -> m2_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_0 -> m2_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_0 -> m2_6  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_1 -> m2_2  [color=green, key=0, style=solid];
m2_1 -> m2_3  [color=green, key=2, style=dotted];
m2_2 -> m2_0  [color=blue, key=0, style=bold];
m2_2 -> m2_7  [key=0, style=solid];
m2_2 -> m2_8  [key=2, style=dotted];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_7  [key=0, style=solid];
m2_4 -> m2_8  [key=2, style=dotted];
m2_5 -> m2_4  [color=blue, key=0, style=bold];
m2_5 -> m2_6  [key=0, style=solid];
m2_9 -> m2_5  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisProcessingJob", style=dashed];
m2_9 -> m2_6  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisProcessingJob", style=dashed];
m2_9 -> m2_1  [color=green, key=1, label="HangFire.Web.GenericHandler", style=dashed];
m2_9 -> m2_7  [color=darkseagreen4, key=1, label="HangFire.Web.GenericHandler", style=dashed];
m3_256 -> m3_257  [key=0, style=solid];
m3_259 -> m3_260  [key=0, style=solid];
m3_259 -> m3_77  [key=2, style=dotted];
m3_260 -> m3_261  [key=0, style=solid];
m3_260 -> m3_77  [key=2, style=dotted];
m3_262 -> m3_263  [key=0, style=solid];
m3_262 -> m3_246  [key=2, style=dotted];
m3_263 -> m3_31  [key=2, style=dotted];
m3_263 -> m3_264  [key=0, style=solid];
m3_263 -> m3_268  [color=darkseagreen4, key=1, label=process, style=dashed];
m3_264 -> m3_24  [key=2, style=dotted];
m3_264 -> m3_265  [key=0, style=solid];
m3_264 -> m3_267  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_265 -> m3_50  [key=2, style=dotted];
m3_265 -> m3_266  [key=0, style=solid];
m3_265 -> m3_270  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_257 -> m3_259  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m3_257 -> m3_265  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m3_257 -> m3_258  [key=0, style=solid];
m3_257 -> m3_135  [key=2, style=dotted];
m3_258 -> m3_259  [key=0, style=solid];
m3_258 -> m3_260  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m3_258 -> m3_258  [color=darkorchid, key=3, label="Local variable string sqlQuery", style=bold];
m3_258 -> m3_135  [key=2, style=dotted];
m3_261 -> m3_262  [key=0, style=solid];
m3_261 -> m3_271  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_261 -> m3_265  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_261 -> m3_245  [key=2, style=dotted];
m3_261 -> m3_274  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_266 -> m3_256  [color=blue, key=0, style=bold];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_20  [key=2, style=dotted];
m3_64 -> m3_332  [key=0, style=solid];
m3_332 -> m3_15  [key=2, style=dotted];
m3_332 -> m3_24  [key=2, style=dotted];
m3_332 -> m3_333  [key=0, style=solid];
m3_332 -> m3_334  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_333 -> m3_64  [color=blue, key=0, style=bold];
m3_0 -> m3_1  [color=green, key=0, style=solid];
m3_1 -> m3_2  [color=green, key=0, style=solid];
m3_1 -> m3_3  [key=2, style=dotted];
m3_1 -> m3_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_1 -> m3_17  [color=green, key=2, style=dotted];
m3_1 -> m3_5  [color=green, key=1, label=connection, style=dashed];
m3_2 -> m3_0  [color=blue, key=0, style=bold];
m3_2 -> m3_3  [color=green, key=0, style=solid];
m3_2 -> m3_18  [color=green, key=2, style=dotted];
m3_2 -> m3_23  [color=green, key=1, label="lambda expression", style=dashed];
m3_2 -> m3_5  [color=green, key=1, label=job, style=dashed];
m3_2 -> m3_7  [color=green, key=1, label=job, style=dashed];
m3_2 -> m3_22  [color=green, key=1, label=job, style=dashed];
m3_20 -> m3_322  [key=0, style=solid];
m3_26 -> m3_27  [key=0, style=solid];
m3_26 -> m3_71  [color=darkorchid, key=3, label="Field variable SqlConnection _existingConnection", style=bold];
m3_27 -> m3_31  [key=2, style=dotted];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_34  [color=darkseagreen4, key=1, label=process, style=dashed];
m3_27 -> m3_26  [color=blue, key=0, style=bold];
m3_28 -> m3_24  [key=2, style=dotted];
m3_28 -> m3_29  [key=0, style=solid];
m3_28 -> m3_33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_29 -> m3_30  [key=0, style=solid];
m3_29 -> n5  [key=2, style=dotted];
m3_30 -> m3_26  [color=blue, key=0, style=bold];
m3_236 -> m3_237  [key=0, style=solid];
m3_238 -> m3_239  [key=0, style=solid];
m3_238 -> m3_77  [key=2, style=dotted];
m3_240 -> m3_241  [key=0, style=solid];
m3_240 -> m3_246  [key=2, style=dotted];
m3_241 -> m3_31  [key=2, style=dotted];
m3_241 -> m3_242  [key=0, style=solid];
m3_241 -> m3_248  [color=darkseagreen4, key=1, label=process, style=dashed];
m3_242 -> m3_24  [key=2, style=dotted];
m3_242 -> m3_243  [key=0, style=solid];
m3_242 -> m3_247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_243 -> m3_50  [key=2, style=dotted];
m3_243 -> m3_244  [key=0, style=solid];
m3_243 -> m3_250  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_237 -> m3_238  [key=0, style=solid];
m3_237 -> m3_243  [color=darkseagreen4, key=1, label=filter, style=dashed];
m3_237 -> m3_237  [color=darkorchid, key=3, label="Local variable string sqlQuery", style=bold];
m3_237 -> m3_135  [key=2, style=dotted];
m3_239 -> m3_240  [key=0, style=solid];
m3_239 -> m3_251  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_239 -> m3_243  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_239 -> m3_245  [key=2, style=dotted];
m3_239 -> m3_254  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_244 -> m3_236  [color=blue, key=0, style=bold];
m3_13 -> m3_14  [key=0, style=solid];
m3_13 -> m3_21  [key=2, style=dotted];
m3_24 -> m3_25  [color=red, key=0, style=solid];
m3_24 -> m3_26  [color=red, key=2, style=dotted];
m3_3 -> m3_5  [color=green, key=1, label=state, style=dashed];
m3_3 -> m3_4  [color=green, key=0, style=solid];
m3_3 -> m3_19  [color=green, key=2, style=dotted];
m3_3 -> m3_7  [color=green, key=1, label=state, style=dashed];
m3_3 -> m3_22  [color=green, key=1, label=state, style=dashed];
m3_37 -> m3_38  [key=0, style=solid];
m3_38 -> m3_31  [key=2, style=dotted];
m3_38 -> m3_39  [key=0, style=solid];
m3_38 -> m3_43  [color=darkseagreen4, key=1, label=process, style=dashed];
m3_39 -> m3_24  [key=2, style=dotted];
m3_39 -> m3_40  [key=0, style=solid];
m3_39 -> m3_42  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_40 -> m3_41  [key=0, style=solid];
m3_40 -> n5  [key=2, style=dotted];
m3_41 -> m3_37  [color=blue, key=0, style=bold];
m3_59 -> m3_60  [key=0, style=solid];
m3_60 -> m3_61  [key=0, style=solid];
m3_60 -> m3_64  [key=2, style=dotted];
m3_61 -> m3_31  [key=2, style=dotted];
m3_61 -> m3_62  [key=0, style=solid];
m3_61 -> m3_66  [color=darkseagreen4, key=1, label=process, style=dashed];
m3_62 -> m3_24  [key=2, style=dotted];
m3_62 -> m3_63  [key=0, style=solid];
m3_62 -> m3_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_63 -> m3_59  [color=blue, key=0, style=bold];
m3_22 -> m3_23  [color=green, key=0, style=solid];
m3_22 -> m3_24  [color=green, key=2, style=dotted];
m3_22 -> m3_25  [color=green, key=2, style=dotted];
m3_85 -> m3_86  [key=0, style=solid];
m3_90 -> m3_91  [key=0, style=solid];
m3_90 -> m3_77  [key=2, style=dotted];
m3_91 -> m3_92  [key=0, style=solid];
m3_91 -> m3_77  [key=2, style=dotted];
m3_92 -> m3_15  [key=2, style=dotted];
m3_92 -> m3_24  [key=2, style=dotted];
m3_92 -> m3_93  [key=0, style=solid];
m3_92 -> m3_103  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_93 -> m3_31  [key=2, style=dotted];
m3_93 -> m3_94  [key=0, style=solid];
m3_93 -> m3_107  [color=darkseagreen4, key=1, label=process, style=dashed];
m3_94 -> m3_24  [key=2, style=dotted];
m3_94 -> m3_95  [key=0, style=solid];
m3_94 -> m3_106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_89 -> m3_15  [key=2, style=dotted];
m3_89 -> m3_90  [key=0, style=solid];
m3_89 -> m3_96  [key=2, style=dotted];
m3_89 -> m3_100  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_88 -> m3_15  [key=2, style=dotted];
m3_88 -> m3_89  [key=0, style=solid];
m3_88 -> m3_96  [key=2, style=dotted];
m3_88 -> m3_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_86 -> m3_90  [color=darkseagreen4, key=1, label=filter1, style=dashed];
m3_86 -> m3_89  [color=darkseagreen4, key=1, label=filter1, style=dashed];
m3_86 -> m3_87  [key=0, style=solid];
m3_86 -> m3_76  [key=2, style=dotted];
m3_87 -> m3_91  [color=darkseagreen4, key=1, label=filter2, style=dashed];
m3_87 -> m3_88  [key=0, style=solid];
m3_87 -> m3_76  [key=2, style=dotted];
m3_95 -> m3_85  [color=blue, key=0, style=bold];
m3_7 -> m3_8  [color=green, key=0, style=solid];
m3_7 -> m3_15  [color=green, key=2, style=dotted];
m3_7 -> m3_16  [color=green, key=2, style=dotted];
m3_7 -> m3_21  [color=green, key=1, label="lambda expression", style=dashed];
m3_45 -> m3_46  [color=green, key=0, style=solid];
m3_46 -> m3_47  [color=green, key=0, style=solid];
m3_46 -> m3_31  [color=green, key=2, style=dotted];
m3_47 -> m3_48  [color=green, key=0, style=solid];
m3_47 -> m3_36  [color=green, key=2, style=dotted];
m3_48 -> m3_49  [color=green, key=0, style=solid];
m3_48 -> m3_50  [color=green, key=2, style=dotted];
m3_48 -> m3_51  [color=green, key=1, label="lambda expression", style=dashed];
m3_49 -> m3_45  [color=blue, key=0, style=bold];
m3_193 -> m3_194  [key=0, style=solid];
m3_196 -> m3_197  [key=0, style=solid];
m3_196 -> m3_77  [key=2, style=dotted];
m3_197 -> m3_198  [key=0, style=solid];
m3_197 -> m3_77  [key=2, style=dotted];
m3_199 -> m3_31  [key=2, style=dotted];
m3_199 -> m3_200  [key=0, style=solid];
m3_200 -> m3_36  [key=2, style=dotted];
m3_200 -> m3_201  [key=0, style=solid];
m3_198 -> m3_15  [key=2, style=dotted];
m3_198 -> m3_199  [key=0, style=solid];
m3_198 -> m3_118  [key=2, style=dotted];
m3_198 -> m3_203  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_198 -> m3_206  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_201 -> m3_50  [key=2, style=dotted];
m3_201 -> m3_202  [key=0, style=solid];
m3_201 -> m3_209  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_194 -> m3_196  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m3_194 -> m3_201  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m3_194 -> m3_195  [key=0, style=solid];
m3_194 -> m3_135  [key=2, style=dotted];
m3_195 -> m3_196  [key=0, style=solid];
m3_195 -> m3_197  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m3_195 -> m3_198  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m3_195 -> m3_135  [key=2, style=dotted];
m3_202 -> m3_193  [color=blue, key=0, style=bold];
m3_109 -> m3_110  [key=0, style=solid];
m3_110 -> m3_111  [key=0, style=solid];
m3_110 -> m3_64  [key=2, style=dotted];
m3_113 -> m3_114  [key=0, style=solid];
m3_113 -> m3_77  [key=2, style=dotted];
m3_114 -> m3_31  [key=2, style=dotted];
m3_114 -> m3_115  [key=0, style=solid];
m3_115 -> m3_36  [key=2, style=dotted];
m3_115 -> m3_116  [key=0, style=solid];
m3_112 -> m3_15  [key=2, style=dotted];
m3_112 -> m3_113  [key=0, style=solid];
m3_112 -> m3_118  [key=2, style=dotted];
m3_112 -> m3_120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_112 -> m3_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_111 -> m3_113  [color=darkseagreen4, key=1, label=filter, style=dashed];
m3_111 -> m3_112  [key=0, style=solid];
m3_111 -> m3_76  [key=2, style=dotted];
m3_116 -> m3_117  [key=0, style=solid];
m3_116 -> m3_119  [key=2, style=dotted];
m3_117 -> m3_109  [color=blue, key=0, style=bold];
m3_15 -> m3_16  [color=red, key=0, style=solid];
m3_15 -> m3_22  [color=red, key=2, style=dotted];
m3_54 -> m3_55  [color=green, key=0, style=solid];
m3_55 -> m3_56  [color=green, key=0, style=solid];
m3_55 -> m3_31  [color=green, key=2, style=dotted];
m3_56 -> m3_36  [key=2, style=dotted];
m3_56 -> m3_57  [key=0, style=solid];
m3_57 -> m3_58  [key=0, style=solid];
m3_57 -> n5  [key=2, style=dotted];
m3_58 -> m3_54  [color=blue, key=0, style=bold];
m3_68 -> m3_69  [key=0, style=solid];
m3_70 -> m3_71  [key=0, style=solid];
m3_70 -> m3_77  [key=2, style=dotted];
m3_71 -> m3_72  [key=0, style=solid];
m3_71 -> m3_64  [key=2, style=dotted];
m3_72 -> m3_31  [key=2, style=dotted];
m3_72 -> m3_73  [key=0, style=solid];
m3_72 -> m3_79  [color=darkseagreen4, key=1, label=process, style=dashed];
m3_73 -> m3_24  [key=2, style=dotted];
m3_73 -> m3_74  [key=0, style=solid];
m3_73 -> m3_78  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_74 -> m3_50  [key=2, style=dotted];
m3_74 -> m3_75  [key=0, style=solid];
m3_74 -> m3_81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_69 -> m3_70  [key=0, style=solid];
m3_69 -> m3_74  [color=darkseagreen4, key=1, label=filter, style=dashed];
m3_69 -> m3_76  [key=2, style=dotted];
m3_75 -> m3_68  [color=blue, key=0, style=bold];
m3_25 -> m3_23  [color=blue, key=0, style=bold];
m3_319 -> m3_320  [key=0, style=solid];
m3_4 -> m3_5  [color=green, key=0, style=solid];
m3_4 -> m3_12  [color=green, key=2, style=dotted];
m3_5 -> m3_6  [color=green, key=0, style=solid];
m3_5 -> m3_7  [key=2, style=dotted];
m3_5 -> m3_13  [color=green, key=2, style=dotted];
m3_6 -> m3_4  [color=blue, key=0, style=bold];
m3_6 -> m3_7  [color=green, key=0, style=solid];
m3_6 -> m3_14  [color=green, key=2, style=dotted];
m3_23 -> m3_24  [color=red, key=0, style=solid];
m3_23 -> m3_18  [color=green, key=0, style=solid];
m3_23 -> m3_21  [color=blue, key=0, style=bold];
m3_21 -> m3_22  [color=green, key=0, style=solid];
m3_18 -> m3_25  [color=green, key=0, style=solid];
m3_18 -> m3_20  [color=green, key=2, style=dotted];
m3_51 -> m3_52  [color=green, key=0, style=solid];
m3_52 -> m3_53  [color=green, key=0, style=solid];
m3_52 -> m3_24  [color=green, key=2, style=dotted];
m3_52 -> m3_25  [color=green, key=2, style=dotted];
m3_53 -> m3_51  [color=blue, key=0, style=bold];
m3_34 -> m3_36  [key=2, style=dotted];
m3_34 -> m3_35  [key=0, style=solid];
m3_43 -> m3_36  [key=2, style=dotted];
m3_43 -> m3_44  [key=0, style=solid];
m3_66 -> m3_36  [key=2, style=dotted];
m3_66 -> m3_67  [key=0, style=solid];
m3_79 -> m3_36  [key=2, style=dotted];
m3_79 -> m3_80  [key=0, style=solid];
m3_107 -> m3_36  [key=2, style=dotted];
m3_107 -> m3_108  [key=0, style=solid];
m3_228 -> m3_36  [key=2, style=dotted];
m3_228 -> m3_229  [key=0, style=solid];
m3_248 -> m3_36  [key=2, style=dotted];
m3_248 -> m3_249  [key=0, style=solid];
m3_268 -> m3_36  [key=2, style=dotted];
m3_268 -> m3_269  [key=0, style=solid];
m3_314 -> m3_36  [key=2, style=dotted];
m3_314 -> m3_315  [key=0, style=solid];
m3_82 -> m3_24  [key=2, style=dotted];
m3_82 -> m3_83  [key=0, style=solid];
m3_82 -> m3_84  [key=2, style=dotted];
m3_98 -> m3_24  [key=2, style=dotted];
m3_98 -> m3_99  [key=0, style=solid];
m3_98 -> m3_84  [key=2, style=dotted];
m3_101 -> m3_24  [key=2, style=dotted];
m3_101 -> m3_102  [key=0, style=solid];
m3_101 -> m3_84  [key=2, style=dotted];
m3_104 -> m3_24  [key=2, style=dotted];
m3_104 -> m3_25  [key=2, style=dotted];
m3_104 -> m3_105  [key=0, style=solid];
m3_121 -> m3_24  [key=2, style=dotted];
m3_121 -> m3_122  [key=0, style=solid];
m3_121 -> m3_84  [key=2, style=dotted];
m3_137 -> m3_24  [key=2, style=dotted];
m3_137 -> m3_138  [key=0, style=solid];
m3_137 -> m3_139  [key=2, style=dotted];
m3_141 -> m3_24  [key=2, style=dotted];
m3_141 -> m3_25  [key=2, style=dotted];
m3_141 -> m3_142  [key=0, style=solid];
m3_144 -> m3_24  [key=2, style=dotted];
m3_144 -> m3_145  [key=0, style=solid];
m3_144 -> m3_146  [key=2, style=dotted];
m3_160 -> m3_24  [key=2, style=dotted];
m3_160 -> m3_161  [key=0, style=solid];
m3_160 -> m3_139  [key=2, style=dotted];
m3_163 -> m3_24  [key=2, style=dotted];
m3_163 -> m3_164  [key=0, style=solid];
m3_163 -> m3_139  [key=2, style=dotted];
m3_166 -> m3_24  [key=2, style=dotted];
m3_166 -> m3_167  [key=0, style=solid];
m3_166 -> m3_146  [key=2, style=dotted];
m3_169 -> m3_24  [key=2, style=dotted];
m3_169 -> m3_170  [key=0, style=solid];
m3_169 -> m3_146  [key=2, style=dotted];
m3_182 -> m3_24  [key=2, style=dotted];
m3_182 -> m3_183  [key=0, style=solid];
m3_182 -> m3_139  [key=2, style=dotted];
m3_188 -> m3_24  [key=2, style=dotted];
m3_188 -> m3_25  [key=2, style=dotted];
m3_188 -> m3_189  [key=0, style=solid];
m3_191 -> m3_24  [key=2, style=dotted];
m3_191 -> m3_192  [key=0, style=solid];
m3_191 -> m3_146  [key=2, style=dotted];
m3_204 -> m3_24  [key=2, style=dotted];
m3_204 -> m3_205  [key=0, style=solid];
m3_204 -> m3_139  [key=2, style=dotted];
m3_210 -> m3_24  [key=2, style=dotted];
m3_210 -> m3_211  [key=0, style=solid];
m3_210 -> m3_146  [key=2, style=dotted];
m3_210 -> m3_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_225 -> m3_24  [key=2, style=dotted];
m3_225 -> m3_226  [key=0, style=solid];
m3_225 -> m3_139  [key=2, style=dotted];
m3_231 -> m3_24  [key=2, style=dotted];
m3_231 -> m3_25  [key=2, style=dotted];
m3_231 -> m3_232  [key=0, style=solid];
m3_234 -> m3_24  [key=2, style=dotted];
m3_234 -> m3_235  [key=0, style=solid];
m3_234 -> m3_146  [key=2, style=dotted];
m3_251 -> m3_24  [key=2, style=dotted];
m3_251 -> m3_252  [key=0, style=solid];
m3_251 -> m3_146  [key=2, style=dotted];
m3_251 -> m3_253  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_271 -> m3_24  [key=2, style=dotted];
m3_271 -> m3_272  [key=0, style=solid];
m3_271 -> m3_146  [key=2, style=dotted];
m3_271 -> m3_273  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_287 -> m3_24  [key=2, style=dotted];
m3_287 -> m3_288  [key=0, style=solid];
m3_287 -> m3_146  [key=2, style=dotted];
m3_287 -> m3_289  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_308 -> m3_24  [key=2, style=dotted];
m3_308 -> m3_309  [key=0, style=solid];
m3_308 -> m3_146  [key=2, style=dotted];
m3_317 -> m3_24  [key=2, style=dotted];
m3_317 -> m3_318  [key=0, style=solid];
m3_317 -> m3_146  [key=2, style=dotted];
m3_317 -> m3_319  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_330 -> m3_24  [key=2, style=dotted];
m3_330 -> m3_25  [key=2, style=dotted];
m3_330 -> m3_331  [key=0, style=solid];
m3_335 -> m3_24  [key=2, style=dotted];
m3_335 -> m3_25  [key=2, style=dotted];
m3_335 -> m3_336  [key=0, style=solid];
m3_33 -> m3_34  [key=0, style=solid];
m3_35 -> m3_33  [color=blue, key=0, style=bold];
m3_42 -> m3_43  [key=0, style=solid];
m3_44 -> m3_42  [color=blue, key=0, style=bold];
m3_65 -> m3_66  [key=0, style=solid];
m3_67 -> m3_65  [color=blue, key=0, style=bold];
m3_78 -> m3_79  [key=0, style=solid];
m3_80 -> m3_78  [color=blue, key=0, style=bold];
m3_103 -> m3_104  [key=0, style=solid];
m3_106 -> m3_107  [key=0, style=solid];
m3_108 -> m3_106  [color=blue, key=0, style=bold];
m3_140 -> m3_141  [key=0, style=solid];
m3_187 -> m3_188  [key=0, style=solid];
m3_227 -> m3_228  [key=0, style=solid];
m3_229 -> m3_227  [color=blue, key=0, style=bold];
m3_230 -> m3_231  [key=0, style=solid];
m3_247 -> m3_248  [key=0, style=solid];
m3_249 -> m3_247  [color=blue, key=0, style=bold];
m3_267 -> m3_268  [key=0, style=solid];
m3_269 -> m3_267  [color=blue, key=0, style=bold];
m3_313 -> m3_314  [key=0, style=solid];
m3_315 -> m3_313  [color=blue, key=0, style=bold];
m3_329 -> m3_330  [key=0, style=solid];
m3_334 -> m3_335  [key=0, style=solid];
m3_100 -> m3_101  [key=0, style=solid];
m3_97 -> m3_98  [key=0, style=solid];
m3_120 -> m3_121  [key=0, style=solid];
m3_123 -> m3_124  [key=0, style=solid];
m3_136 -> m3_137  [key=0, style=solid];
m3_143 -> m3_144  [key=0, style=solid];
m3_159 -> m3_160  [key=0, style=solid];
m3_168 -> m3_169  [key=0, style=solid];
m3_162 -> m3_163  [key=0, style=solid];
m3_165 -> m3_166  [key=0, style=solid];
m3_181 -> m3_182  [key=0, style=solid];
m3_184 -> m3_185  [key=0, style=solid];
m3_203 -> m3_204  [key=0, style=solid];
m3_206 -> m3_207  [key=0, style=solid];
m3_224 -> m3_225  [key=0, style=solid];
m3_286 -> m3_287  [key=0, style=solid];
m3_292 -> m3_293  [key=0, style=solid];
m3_307 -> m3_308  [key=0, style=solid];
m3_310 -> m3_311  [key=0, style=solid];
m3_81 -> m3_82  [key=0, style=solid];
m3_83 -> m3_81  [color=blue, key=0, style=bold];
m3_99 -> m3_97  [color=blue, key=0, style=bold];
m3_102 -> m3_100  [color=blue, key=0, style=bold];
m3_105 -> m3_103  [color=blue, key=0, style=bold];
m3_122 -> m3_120  [color=blue, key=0, style=bold];
m3_138 -> m3_136  [color=blue, key=0, style=bold];
m3_142 -> m3_140  [color=blue, key=0, style=bold];
m3_145 -> m3_143  [color=blue, key=0, style=bold];
m3_161 -> m3_159  [color=blue, key=0, style=bold];
m3_164 -> m3_162  [color=blue, key=0, style=bold];
m3_167 -> m3_165  [color=blue, key=0, style=bold];
m3_170 -> m3_168  [color=blue, key=0, style=bold];
m3_183 -> m3_181  [color=blue, key=0, style=bold];
m3_189 -> m3_187  [color=blue, key=0, style=bold];
m3_190 -> m3_191  [key=0, style=solid];
m3_192 -> m3_190  [color=blue, key=0, style=bold];
m3_205 -> m3_203  [color=blue, key=0, style=bold];
m3_209 -> m3_210  [key=0, style=solid];
m3_211 -> m3_209  [color=blue, key=0, style=bold];
m3_212 -> m3_213  [key=0, style=solid];
m3_226 -> m3_224  [color=blue, key=0, style=bold];
m3_232 -> m3_230  [color=blue, key=0, style=bold];
m3_233 -> m3_234  [key=0, style=solid];
m3_235 -> m3_233  [color=blue, key=0, style=bold];
m3_250 -> m3_251  [key=0, style=solid];
m3_252 -> m3_250  [color=blue, key=0, style=bold];
m3_253 -> m3_254  [key=0, style=solid];
m3_270 -> m3_271  [key=0, style=solid];
m3_272 -> m3_270  [color=blue, key=0, style=bold];
m3_273 -> m3_274  [key=0, style=solid];
m3_288 -> m3_286  [color=blue, key=0, style=bold];
m3_289 -> m3_290  [key=0, style=solid];
m3_309 -> m3_307  [color=blue, key=0, style=bold];
m3_316 -> m3_317  [key=0, style=solid];
m3_318 -> m3_316  [color=blue, key=0, style=bold];
m3_331 -> m3_329  [color=blue, key=0, style=bold];
m3_336 -> m3_334  [color=blue, key=0, style=bold];
m3_254 -> m3_255  [key=0, style=solid];
m3_274 -> m3_275  [key=0, style=solid];
m3_290 -> m3_291  [key=0, style=solid];
m3_125 -> m3_123  [color=blue, key=0, style=bold];
m3_124 -> m3_125  [key=0, style=solid];
m3_186 -> m3_184  [color=blue, key=0, style=bold];
m3_185 -> m3_186  [key=0, style=solid];
m3_208 -> m3_206  [color=blue, key=0, style=bold];
m3_207 -> m3_208  [key=0, style=solid];
m3_294 -> m3_292  [color=blue, key=0, style=bold];
m3_293 -> m3_294  [key=0, style=solid];
m3_312 -> m3_310  [color=blue, key=0, style=bold];
m3_311 -> m3_312  [key=0, style=solid];
m3_214 -> m3_212  [color=blue, key=0, style=bold];
m3_213 -> m3_214  [key=0, style=solid];
m3_255 -> m3_253  [color=blue, key=0, style=bold];
m3_275 -> m3_273  [color=blue, key=0, style=bold];
m3_291 -> m3_289  [color=blue, key=0, style=bold];
m3_320 -> m3_321  [key=0, style=solid];
m3_321 -> m3_319  [color=blue, key=0, style=bold];
m3_8 -> m3_9  [key=0, style=solid];
m3_8 -> m3_0  [color=blue, key=0, style=bold];
m3_9 -> m3_10  [color=red, key=0, style=solid];
m3_9 -> m3_17  [key=2, style=dotted];
m3_9 -> m3_13  [color=darkseagreen4, key=1, label=connection, style=dashed];
m3_10 -> m3_11  [color=red, key=0, style=solid];
m3_10 -> m3_18  [color=red, key=2, style=dotted];
m3_10 -> m3_23  [color=red, key=1, label="lambda expression", style=dashed];
m3_10 -> m3_13  [color=red, key=1, label=job, style=dashed];
m3_11 -> m3_12  [key=0, style=solid];
m3_11 -> m3_19  [key=2, style=dotted];
m3_11 -> m3_13  [color=darkseagreen4, key=1, label=state, style=dashed];
m3_14 -> m3_15  [color=red, key=0, style=solid];
m3_14 -> m3_7  [key=2, style=dotted];
m3_16 -> m3_8  [color=blue, key=0, style=bold];
m3_31 -> m3_323  [key=0, style=solid];
m3_323 -> m3_324  [key=0, style=solid];
m3_323 -> m3_325  [key=2, style=dotted];
m3_324 -> m3_31  [color=blue, key=0, style=bold];
m3_276 -> m3_277  [key=0, style=solid];
m3_278 -> m3_279  [key=0, style=solid];
m3_278 -> m3_77  [key=2, style=dotted];
m3_280 -> m3_281  [key=0, style=solid];
m3_280 -> m3_246  [key=2, style=dotted];
m3_282 -> m3_31  [key=2, style=dotted];
m3_282 -> m3_283  [key=0, style=solid];
m3_283 -> m3_36  [key=2, style=dotted];
m3_283 -> m3_284  [key=0, style=solid];
m3_281 -> m3_15  [key=2, style=dotted];
m3_281 -> m3_282  [key=0, style=solid];
m3_281 -> m3_118  [key=2, style=dotted];
m3_281 -> m3_286  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_281 -> m3_292  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_277 -> m3_278  [key=0, style=solid];
m3_277 -> m3_281  [color=darkseagreen4, key=1, label=filter, style=dashed];
m3_277 -> m3_135  [key=2, style=dotted];
m3_279 -> m3_280  [key=0, style=solid];
m3_279 -> m3_281  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_279 -> m3_287  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_279 -> m3_245  [key=2, style=dotted];
m3_279 -> m3_290  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_284 -> m3_285  [key=0, style=solid];
m3_284 -> m3_119  [key=2, style=dotted];
m3_285 -> m3_276  [color=blue, key=0, style=bold];
m3_295 -> m3_296  [key=0, style=solid];
m3_298 -> m3_299  [key=0, style=solid];
m3_298 -> m3_77  [key=2, style=dotted];
m3_299 -> m3_300  [key=0, style=solid];
m3_299 -> m3_77  [key=2, style=dotted];
m3_300 -> m3_301  [key=0, style=solid];
m3_300 -> m3_64  [key=2, style=dotted];
m3_302 -> m3_31  [key=2, style=dotted];
m3_302 -> m3_303  [key=0, style=solid];
m3_302 -> m3_314  [color=darkseagreen4, key=1, label=process, style=dashed];
m3_303 -> m3_304  [key=0, style=solid];
m3_303 -> m3_306  [key=2, style=dotted];
m3_303 -> m3_313  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_301 -> m3_15  [key=2, style=dotted];
m3_301 -> m3_302  [key=0, style=solid];
m3_301 -> m3_118  [key=2, style=dotted];
m3_301 -> m3_307  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_301 -> m3_310  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_304 -> m3_50  [key=2, style=dotted];
m3_304 -> m3_305  [key=0, style=solid];
m3_304 -> m3_316  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_296 -> m3_298  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m3_296 -> m3_304  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m3_296 -> m3_297  [key=0, style=solid];
m3_296 -> m3_135  [key=2, style=dotted];
m3_297 -> m3_298  [key=0, style=solid];
m3_297 -> m3_299  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m3_297 -> m3_301  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m3_297 -> m3_135  [key=2, style=dotted];
m3_305 -> m3_295  [color=blue, key=0, style=bold];
m3_322 -> m3_20  [color=blue, key=0, style=bold];
m3_215 -> m3_216  [key=0, style=solid];
m3_217 -> m3_218  [key=0, style=solid];
m3_217 -> m3_77  [key=2, style=dotted];
m3_219 -> m3_31  [key=2, style=dotted];
m3_219 -> m3_220  [key=0, style=solid];
m3_219 -> m3_228  [color=darkseagreen4, key=1, label=process, style=dashed];
m3_220 -> m3_24  [key=2, style=dotted];
m3_220 -> m3_221  [key=0, style=solid];
m3_220 -> m3_227  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_221 -> m3_50  [key=2, style=dotted];
m3_221 -> m3_222  [key=0, style=solid];
m3_221 -> m3_230  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_218 -> m3_15  [key=2, style=dotted];
m3_218 -> m3_24  [key=2, style=dotted];
m3_218 -> m3_219  [key=0, style=solid];
m3_218 -> m3_224  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_222 -> m3_50  [key=2, style=dotted];
m3_222 -> m3_223  [key=0, style=solid];
m3_222 -> m3_233  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_216 -> m3_217  [key=0, style=solid];
m3_216 -> m3_218  [color=darkseagreen4, key=1, label=filter, style=dashed];
m3_216 -> m3_222  [color=darkseagreen4, key=1, label=filter, style=dashed];
m3_216 -> m3_135  [key=2, style=dotted];
m3_223 -> m3_215  [color=blue, key=0, style=bold];
m3_171 -> m3_172  [key=0, style=solid];
m3_173 -> m3_174  [key=0, style=solid];
m3_173 -> m3_77  [key=2, style=dotted];
m3_175 -> m3_31  [key=2, style=dotted];
m3_175 -> m3_176  [key=0, style=solid];
m3_176 -> m3_36  [key=2, style=dotted];
m3_176 -> m3_177  [key=0, style=solid];
m3_178 -> m3_50  [key=2, style=dotted];
m3_178 -> m3_179  [key=0, style=solid];
m3_178 -> m3_187  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_178 -> m3_26  [color=darkorchid, key=3, label="method methodReturn SqlConnection CreateAndOpenConnection", style=bold];
m3_174 -> m3_15  [key=2, style=dotted];
m3_174 -> m3_151  [color=darkorchid, key=3, label="Parameter variable System.Transactions.IsolationLevel? isolationLevel", style=bold];
m3_174 -> m3_175  [key=0, style=solid];
m3_174 -> m3_118  [key=2, style=dotted];
m3_174 -> m3_181  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_174 -> m3_184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_179 -> m3_50  [key=2, style=dotted];
m3_179 -> m3_180  [key=0, style=solid];
m3_179 -> m3_190  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_172 -> m3_173  [key=0, style=solid];
m3_172 -> m3_174  [color=darkseagreen4, key=1, label=filter, style=dashed];
m3_172 -> m3_179  [color=darkseagreen4, key=1, label=filter, style=dashed];
m3_172 -> m3_135  [key=2, style=dotted];
m3_177 -> m3_178  [key=0, style=solid];
m3_177 -> m3_119  [key=2, style=dotted];
m3_180 -> m3_171  [color=blue, key=0, style=bold];
m3_246 -> m3_326  [key=0, style=solid];
m3_246 -> m3_239  [color=darkorchid, key=3, label="Parameter variable System.Exception exception", style=bold];
m3_246 -> m3_261  [color=darkorchid, key=3, label="Parameter variable System.Exception exception", style=bold];
m3_246 -> m3_279  [color=darkorchid, key=3, label="Parameter variable System.Exception exception", style=bold];
m3_326 -> m3_15  [key=2, style=dotted];
m3_326 -> m3_327  [key=0, style=solid];
m3_326 -> m3_328  [key=2, style=dotted];
m3_326 -> m3_329  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_327 -> m3_246  [color=blue, key=0, style=bold];
m3_147 -> m3_148  [key=0, style=solid];
m3_150 -> m3_151  [key=0, style=solid];
m3_150 -> m3_77  [key=2, style=dotted];
m3_151 -> m3_151  [color=darkorchid, key=3, label="Local variable SqlConnection connection", style=bold];
m3_151 -> m3_152  [key=0, style=solid];
m3_151 -> m3_77  [key=2, style=dotted];
m3_151 -> m3_178  [color=darkorchid, key=3, label="Local variable SqlConnection connection", style=bold];
m3_156 -> m3_31  [key=2, style=dotted];
m3_156 -> m3_157  [key=0, style=solid];
m3_157 -> m3_36  [key=2, style=dotted];
m3_157 -> m3_158  [key=0, style=solid];
m3_152 -> m3_15  [key=2, style=dotted];
m3_152 -> m3_153  [key=0, style=solid];
m3_152 -> m3_96  [key=2, style=dotted];
m3_152 -> m3_159  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_155 -> m3_15  [key=2, style=dotted];
m3_155 -> m3_156  [key=0, style=solid];
m3_155 -> m3_96  [key=2, style=dotted];
m3_155 -> m3_168  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_153 -> m3_15  [key=2, style=dotted];
m3_153 -> m3_154  [key=0, style=solid];
m3_153 -> m3_96  [key=2, style=dotted];
m3_153 -> m3_162  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_154 -> m3_15  [key=2, style=dotted];
m3_154 -> m3_155  [key=0, style=solid];
m3_154 -> m3_96  [key=2, style=dotted];
m3_154 -> m3_165  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_148 -> m3_150  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m3_148 -> m3_152  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m3_148 -> m3_155  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m3_148 -> m3_149  [key=0, style=solid];
m3_148 -> m3_135  [key=2, style=dotted];
m3_149 -> m3_150  [key=0, style=solid];
m3_149 -> m3_151  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m3_149 -> m3_153  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m3_149 -> m3_154  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m3_149 -> m3_135  [key=2, style=dotted];
m3_158 -> m3_147  [color=blue, key=0, style=bold];
m3_126 -> m3_127  [key=0, style=solid];
m3_128 -> m3_129  [key=0, style=solid];
m3_128 -> m3_77  [key=2, style=dotted];
m3_130 -> m3_15  [key=2, style=dotted];
m3_130 -> m3_131  [key=0, style=solid];
m3_130 -> m3_96  [key=2, style=dotted];
m3_130 -> m3_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_132 -> m3_31  [key=2, style=dotted];
m3_132 -> m3_133  [key=0, style=solid];
m3_133 -> m3_36  [key=2, style=dotted];
m3_133 -> m3_134  [key=0, style=solid];
m3_129 -> m3_15  [key=2, style=dotted];
m3_129 -> m3_130  [key=0, style=solid];
m3_129 -> m3_96  [key=2, style=dotted];
m3_129 -> m3_136  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_131 -> m3_15  [key=2, style=dotted];
m3_131 -> m3_132  [key=0, style=solid];
m3_131 -> m3_96  [key=2, style=dotted];
m3_131 -> m3_143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_127 -> m3_128  [key=0, style=solid];
m3_127 -> m3_129  [color=darkseagreen4, key=1, label=filter, style=dashed];
m3_127 -> m3_131  [color=darkseagreen4, key=1, label=filter, style=dashed];
m3_127 -> m3_135  [key=2, style=dotted];
m3_134 -> m3_126  [color=blue, key=0, style=bold];
m3_337 -> m3_2  [color=green, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_5  [color=green, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_7  [color=green, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_4  [color=green, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_6  [color=green, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_18  [color=green, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_46  [color=green, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_47  [color=green, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_48  [color=green, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_55  [color=green, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_27  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_28  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_34  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_38  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_39  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_43  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_56  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_60  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_61  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_62  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_66  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_70  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_71  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_72  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_73  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_79  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_90  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_91  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_92  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_93  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_94  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_107  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_110  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_113  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_114  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_115  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_128  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_130  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_132  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_133  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_150  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_151  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_156  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_157  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_173  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_175  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_176  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_178  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_196  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_197  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_199  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_200  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_217  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_219  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_220  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_228  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_221  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_238  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_240  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_241  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_242  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_248  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_259  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_260  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_262  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_263  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_264  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_268  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_278  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_280  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_282  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_283  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_298  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_299  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_300  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_302  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_303  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_314  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_323  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_326  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_337 -> m3_332  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m3_338 -> m3_22  [color=green, key=1, label=job, style=dashed];
m3_339 -> m3_22  [color=green, key=1, label=state, style=dashed];
m3_340 -> m3_34  [color=darkseagreen4, key=1, label=process, style=dashed];
m3_341 -> m3_43  [color=darkseagreen4, key=1, label=process, style=dashed];
m3_342 -> m3_66  [color=darkseagreen4, key=1, label=process, style=dashed];
m3_343 -> m3_79  [color=darkseagreen4, key=1, label=process, style=dashed];
m3_344 -> m3_107  [color=darkseagreen4, key=1, label=process, style=dashed];
m3_345 -> m3_228  [color=darkseagreen4, key=1, label=process, style=dashed];
m3_346 -> m3_248  [color=darkseagreen4, key=1, label=process, style=dashed];
m3_348 -> m3_268  [color=darkseagreen4, key=1, label=process, style=dashed];
m3_351 -> m3_314  [color=darkseagreen4, key=1, label=process, style=dashed];
m3_347 -> m3_251  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_347 -> m3_254  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_349 -> m3_271  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_349 -> m3_274  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_350 -> m3_287  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_350 -> m3_290  [color=darkseagreen4, key=1, label=exception, style=dashed];
m4_39 -> m4_42  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_39 -> m4_40  [key=0, style=solid];
m4_39 -> m4_44  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_42 -> m4_45  [key=0, style=solid];
m4_42 -> m4_37  [key=2, style=dotted];
m4_42 -> m4_46  [key=2, style=dotted];
m4_40 -> m4_42  [key=0, style=solid];
m4_40 -> m4_34  [key=2, style=dotted];
m4_40 -> m4_41  [key=0, style=solid];
m4_41 -> m4_16  [key=2, style=dotted];
m4_41 -> m4_45  [key=0, style=solid];
m4_44 -> m4_45  [key=0, style=solid];
m4_44 -> m4_47  [key=2, style=dotted];
m4_44 -> m4_48  [key=2, style=dotted];
m4_43 -> m4_44  [key=0, style=solid];
m4_45 -> m4_39  [color=blue, key=0, style=bold];
m4_0 -> m4_1  [key=0, style=solid];
m4_0 -> m4_2  [color=darkseagreen4, key=1, label=bool, style=dashed];
m4_0 -> m4_3  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m4_1 -> m4_2  [key=0, style=solid];
m4_2 -> m4_3  [key=0, style=solid];
m4_3 -> m4_0  [color=blue, key=0, style=bold];
m4_3 -> m4_4  [key=0, style=solid];
m4_4 -> m4_0  [color=blue, key=0, style=bold];
m4_4 -> m4_11  [color=darkseagreen4, key=1, label="Hangfire.Storage.IStorageConnection", style=dashed];
m4_4 -> m4_12  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m4_4 -> m4_13  [color=darkseagreen4, key=1, label="Hangfire.States.IState", style=dashed];
m4_4 -> m4_5  [key=0, style=solid];
m4_4 -> m4_7  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m4_4 -> m4_9  [color=darkseagreen4, key=1, label="Hangfire.States.IState", style=dashed];
m4_11 -> m4_12  [key=0, style=solid];
m4_12 -> m4_13  [key=0, style=solid];
m4_13 -> m4_14  [key=0, style=solid];
m4_14 -> m4_15  [key=0, style=solid];
m4_14 -> n47  [key=2, style=dotted];
m4_9 -> m4_11  [key=0, style=solid];
m4_9 -> m4_10  [key=0, style=solid];
m4_6 -> m4_16  [key=2, style=dotted];
m4_6 -> m4_15  [key=0, style=solid];
m4_8 -> m4_16  [key=2, style=dotted];
m4_8 -> m4_15  [key=0, style=solid];
m4_10 -> m4_16  [key=2, style=dotted];
m4_10 -> m4_15  [key=0, style=solid];
m4_5 -> m4_6  [key=0, style=solid];
m4_5 -> m4_7  [key=0, style=solid];
m4_5 -> m4_1  [color=darkseagreen4, key=1, label="Hangfire.Client.CreatedContext", style=dashed];
m4_5 -> m4_2  [color=darkseagreen4, key=1, label="Hangfire.Client.CreatedContext", style=dashed];
m4_5 -> m4_3  [color=darkseagreen4, key=1, label="Hangfire.Client.CreatedContext", style=dashed];
m4_7 -> m4_9  [key=0, style=solid];
m4_7 -> m4_8  [key=0, style=solid];
m4_15 -> m4_4  [color=blue, key=0, style=bold];
m4_24 -> m4_25  [key=0, style=solid];
m4_24 -> m4_29  [color=darkseagreen4, key=1, label=object, style=dashed];
m4_24 -> m4_31  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_24 -> m4_32  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_24 -> m4_30  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_28 -> m4_33  [color=green, key=0, style=solid];
m4_28 -> m4_35  [color=green, key=2, style=dotted];
m4_27 -> m4_28  [color=green, key=0, style=solid];
m4_27 -> m4_29  [key=0, style=solid];
m4_25 -> m4_27  [key=0, style=solid];
m4_25 -> m4_26  [key=0, style=solid];
m4_25 -> m4_34  [key=2, style=dotted];
m4_29 -> m4_30  [key=0, style=solid];
m4_29 -> m4_36  [key=2, style=dotted];
m4_29 -> m4_31  [color=darkseagreen4, key=1, label=serializedValue, style=dashed];
m4_29 -> m4_32  [color=darkseagreen4, key=1, label=serializedValue, style=dashed];
m4_31 -> m4_33  [key=0, style=solid];
m4_31 -> m4_38  [key=2, style=dotted];
m4_32 -> m4_33  [key=0, style=solid];
m4_26 -> m4_33  [key=0, style=solid];
m4_26 -> m4_16  [key=2, style=dotted];
m4_30 -> m4_31  [key=0, style=solid];
m4_30 -> m4_32  [key=0, style=solid];
m4_30 -> m4_37  [key=2, style=dotted];
m4_33 -> m4_24  [color=blue, key=0, style=bold];
m4_49 -> m4_27  [color=darkseagreen4, key=1, label="Hangfire.Client.CreateContext", style=dashed];
m4_49 -> m4_1  [color=darkseagreen4, key=1, label="Hangfire.Client.CreateContext", style=dashed];
m4_49 -> m4_2  [color=darkseagreen4, key=1, label="Hangfire.Client.CreateContext", style=dashed];
m4_49 -> m4_11  [color=darkseagreen4, key=1, label="Hangfire.Client.CreateContext", style=dashed];
m4_49 -> m4_12  [color=darkseagreen4, key=1, label="Hangfire.Client.CreateContext", style=dashed];
m4_49 -> m4_13  [color=darkseagreen4, key=1, label="Hangfire.Client.CreateContext", style=dashed];
m4_49 -> m4_14  [color=darkseagreen4, key=1, label="Hangfire.Client.CreateContext", style=dashed];
m4_49 -> m4_30  [color=darkseagreen4, key=1, label="Hangfire.Client.CreateContext", style=dashed];
m4_49 -> m4_31  [color=darkseagreen4, key=1, label="Hangfire.Client.CreateContext", style=dashed];
m4_49 -> m4_32  [color=darkseagreen4, key=1, label="Hangfire.Client.CreateContext", style=dashed];
m4_49 -> m4_42  [color=darkseagreen4, key=1, label="Hangfire.Client.CreateContext", style=dashed];
m5_5 -> m5_6  [key=0, style=solid];
m5_7 -> m5_0  [color=blue, key=0, style=bold];
m5_10 -> m5_11  [color=green, key=0, style=solid];
m5_11 -> m5_12  [color=green, key=0, style=solid];
m5_11 -> m5_15  [color=green, key=2, style=dotted];
m5_11 -> m5_5  [color=green, key=2, style=dotted];
m5_12 -> m5_13  [color=green, key=0, style=solid];
m5_12 -> m5_6  [key=2, style=dotted];
m5_13 -> m5_14  [color=green, key=0, style=solid];
m5_13 -> m5_7  [color=green, key=2, style=dotted];
m5_13 -> m5_8  [color=green, key=2, style=dotted];
m5_13 -> m5_9  [color=green, key=2, style=dotted];
m5_14 -> m5_10  [color=blue, key=0, style=bold];
m5_0 -> m5_1  [key=0, style=solid];
m5_0 -> m5_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_0 -> m5_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_0 -> m5_6  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_3 -> m5_4  [color=green, key=0, style=solid];
m5_3 -> m5_7  [color=green, key=2, style=dotted];
m5_3 -> m5_8  [color=green, key=2, style=dotted];
m5_3 -> m5_9  [color=green, key=2, style=dotted];
m5_3 -> m5_5  [key=0, style=solid];
m5_2 -> m5_3  [color=green, key=0, style=solid];
m5_2 -> m5_6  [key=2, style=dotted];
m5_2 -> m5_7  [key=0, style=solid];
m5_2 -> m5_8  [key=2, style=dotted];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_5  [key=2, style=dotted];
m5_1 -> m5_3  [key=0, style=solid];
m5_4 -> m5_0  [color=blue, key=0, style=bold];
m5_4 -> m5_7  [key=0, style=solid];
m5_4 -> m5_8  [key=2, style=dotted];
m5_9 -> m5_5  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerProcessingJob", style=dashed];
m5_9 -> m5_6  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerProcessingJob", style=dashed];
m5_6 -> m5_7  [key=0, style=solid];
m5_16 -> m5_17  [key=0, style=solid];
m5_19 -> m5_20  [color=green, key=0, style=solid];
m5_19 -> n434  [color=green, key=2, style=dotted];
m5_19 -> m5_8  [color=green, key=2, style=dotted];
m5_19 -> m5_9  [color=green, key=2, style=dotted];
m5_18 -> m5_19  [color=green, key=0, style=solid];
m5_18 -> m5_6  [key=2, style=dotted];
m5_17 -> m5_5  [key=2, style=dotted];
m5_17 -> m5_18  [key=0, style=solid];
m5_20 -> m5_16  [color=blue, key=0, style=bold];
m6_53 -> m6_54  [color=green, key=0, style=solid];
m6_53 -> m6_35  [key=2, style=dotted];
m6_53 -> m6_47  [key=2, style=dotted];
m6_53 -> m6_45  [color=green, key=2, style=dotted];
m6_54 -> n219  [color=blue, key=0, style=bold];
m6_54 -> m6_55  [color=green, key=0, style=solid];
m6_54 -> m6_45  [color=green, key=2, style=dotted];
m6_25 -> m6_26  [key=0, style=solid];
m6_25 -> m6_28  [color=darkseagreen4, key=1, label=parameterArray, style=dashed];
m6_25 -> m6_30  [color=darkseagreen4, key=1, label=parameterArray, style=dashed];
m6_29 -> m6_30  [key=0, style=solid];
m6_29 -> m6_29  [color=darkorchid, key=3, label="Local variable string insertParameterSql", style=bold];
m6_58 -> m6_59  [key=0, style=solid];
m6_59 -> m6_60  [key=0, style=solid];
m6_59 -> m6_35  [key=2, style=dotted];
m6_59 -> m6_47  [key=2, style=dotted];
m6_59 -> m6_41  [key=2, style=dotted];
m6_60 -> m6_58  [color=blue, key=0, style=bold];
m6_60 -> m6_22  [key=2, style=dotted];
m6_60 -> m6_61  [key=0, style=solid];
m6_66 -> m6_26  [key=2, style=dotted];
m6_66 -> m6_67  [key=0, style=solid];
m6_21 -> m6_22  [key=0, style=solid];
m6_21 -> m6_23  [color=darkseagreen4, key=1, label="HangFire.Storage.InvocationData", style=dashed];
m6_21 -> m6_24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m6_21 -> m6_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m6_21 -> m6_27  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m6_15 -> m6_16  [key=0, style=solid];
m6_15 -> m6_17  [key=0, style=solid];
m6_65 -> m6_45  [key=2, style=dotted];
m6_65 -> m6_66  [key=0, style=solid];
m6_30 -> m6_31  [color=green, key=0, style=solid];
m6_30 -> m6_38  [key=2, style=dotted];
m6_31 -> m6_32  [color=green, key=0, style=solid];
m6_31 -> m6_41  [color=green, key=2, style=dotted];
m6_32 -> m6_33  [color=green, key=0, style=solid];
m6_32 -> m6_22  [color=green, key=2, style=dotted];
m6_32 -> m6_21  [color=blue, key=0, style=bold];
m6_33 -> m6_34  [color=green, key=0, style=solid];
m6_33 -> m6_42  [color=green, key=2, style=dotted];
m6_34 -> m6_35  [color=green, key=0, style=solid];
m6_34 -> m6_43  [color=green, key=2, style=dotted];
m6_35 -> m6_36  [color=green, key=0, style=solid];
m6_35 -> m6_44  [color=green, key=2, style=dotted];
m6_36 -> m6_37  [color=green, key=0, style=solid];
m6_36 -> m6_45  [color=green, key=2, style=dotted];
m6_37 -> m6_38  [color=green, key=0, style=solid];
m6_37 -> m6_46  [color=green, key=2, style=dotted];
m6_38 -> m6_39  [color=green, key=0, style=solid];
m6_38 -> m6_45  [color=green, key=2, style=dotted];
m6_39 -> m6_40  [color=green, key=0, style=solid];
m6_39 -> m6_26  [color=green, key=2, style=dotted];
m6_39 -> m6_41  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_39 -> m6_42  [color=darkorchid, key=3, label="method methodReturn HangFire.Storage.StateAndInvocationData GetJobStateAndInvocationData", style=bold];
m6_40 -> m6_30  [color=blue, key=0, style=bold];
m6_40 -> m6_41  [key=0, style=solid];
m6_40 -> m6_40  [color=darkorchid, key=3, label="Local variable string sql", style=bold];
m6_0 -> m6_1  [key=0, style=solid];
m6_0 -> m6_2  [color=darkseagreen4, key=1, label="HangFire.JobStorage", style=dashed];
m6_2 -> m6_3  [color=green, key=0, style=solid];
m6_2 -> m6_6  [color=green, key=2, style=dotted];
m6_2 -> m6_7  [color=green, key=2, style=dotted];
m6_1 -> m6_2  [color=green, key=0, style=solid];
m6_1 -> m6_5  [key=2, style=dotted];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_8  [key=2, style=dotted];
m6_3 -> m6_0  [color=blue, key=0, style=bold];
m6_4 -> m6_0  [color=blue, key=0, style=bold];
m6_4 -> m6_5  [key=0, style=solid];
m6_20 -> m6_18  [color=blue, key=0, style=bold];
m6_75 -> m6_76  [key=0, style=solid];
m6_75 -> m6_73  [color=blue, key=0, style=bold];
m6_77 -> m6_22  [key=2, style=dotted];
m6_77 -> m6_78  [key=0, style=solid];
m6_77 -> m6_1  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_77 -> m6_2  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_77 -> m6_5  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_77 -> m6_9  [color=red, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_77 -> m6_13  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_77 -> m6_17  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_77 -> m6_23  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_77 -> m6_30  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_77 -> m6_41  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_77 -> m6_50  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_77 -> m6_53  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_77 -> m6_56  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_77 -> m6_59  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_77 -> m6_63  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_77 -> m6_68  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_77 -> m6_71  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_77 -> m6_74  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_81 -> m6_26  [key=2, style=dotted];
m6_81 -> m6_82  [key=0, style=solid];
m6_76 -> m6_41  [key=2, style=dotted];
m6_76 -> m6_77  [key=0, style=solid];
m6_78 -> m6_42  [key=2, style=dotted];
m6_78 -> m6_79  [key=0, style=solid];
m6_79 -> m6_43  [key=2, style=dotted];
m6_79 -> m6_80  [key=0, style=solid];
m6_80 -> m6_44  [key=2, style=dotted];
m6_80 -> m6_81  [key=0, style=solid];
m6_82 -> m6_75  [color=blue, key=0, style=bold];
m6_45 -> m6_46  [key=0, style=solid];
m6_45 -> m6_48  [key=2, style=dotted];
m6_46 -> m6_39  [color=blue, key=0, style=bold];
m6_83 -> m6_84  [key=0, style=solid];
m6_85 -> m6_22  [key=2, style=dotted];
m6_85 -> m6_86  [key=0, style=solid];
m6_90 -> m6_26  [key=2, style=dotted];
m6_90 -> m6_91  [key=0, style=solid];
m6_84 -> m6_41  [key=2, style=dotted];
m6_84 -> m6_85  [key=0, style=solid];
m6_86 -> m6_42  [key=2, style=dotted];
m6_86 -> m6_87  [key=0, style=solid];
m6_88 -> m6_43  [key=2, style=dotted];
m6_88 -> m6_89  [key=0, style=solid];
m6_89 -> m6_44  [key=2, style=dotted];
m6_89 -> m6_90  [key=0, style=solid];
m6_87 -> m6_45  [key=2, style=dotted];
m6_87 -> m6_88  [key=0, style=solid];
m6_91 -> m6_83  [color=blue, key=0, style=bold];
m6_47 -> m6_48  [color=green, key=0, style=solid];
m6_48 -> m6_49  [color=green, key=0, style=solid];
m6_48 -> m6_41  [color=green, key=2, style=dotted];
m6_49 -> m6_50  [color=green, key=0, style=solid];
m6_49 -> m6_22  [color=green, key=2, style=dotted];
m6_50 -> m6_51  [color=green, key=0, style=solid];
m6_50 -> m6_42  [color=green, key=2, style=dotted];
m6_50 -> m6_38  [key=2, style=dotted];
m6_51 -> m6_52  [color=green, key=0, style=solid];
m6_51 -> m6_43  [color=green, key=2, style=dotted];
m6_51 -> m6_49  [color=blue, key=0, style=bold];
m6_52 -> m6_53  [color=green, key=0, style=solid];
m6_52 -> m6_44  [color=green, key=2, style=dotted];
m6_55 -> m6_56  [color=green, key=0, style=solid];
m6_55 -> m6_45  [color=green, key=2, style=dotted];
m6_56 -> m6_57  [color=green, key=0, style=solid];
m6_56 -> m6_26  [color=green, key=2, style=dotted];
m6_56 -> m6_38  [key=2, style=dotted];
m6_57 -> m6_47  [color=blue, key=0, style=bold];
m6_57 -> m6_55  [color=blue, key=0, style=bold];
m6_5 -> m6_6  [key=0, style=solid];
m6_5 -> m6_7  [key=2, style=dotted];
m6_61 -> m6_42  [key=2, style=dotted];
m6_61 -> m6_62  [key=0, style=solid];
m6_61 -> m6_63  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_63 -> m6_43  [key=2, style=dotted];
m6_63 -> m6_64  [key=0, style=solid];
m6_63 -> m6_33  [key=2, style=dotted];
m6_63 -> m6_38  [key=2, style=dotted];
m6_64 -> m6_44  [key=2, style=dotted];
m6_64 -> m6_65  [key=0, style=solid];
m6_64 -> m6_61  [color=blue, key=0, style=bold];
m6_62 -> m6_45  [key=2, style=dotted];
m6_62 -> m6_63  [key=0, style=solid];
m6_62 -> m6_65  [key=2, style=dotted];
m6_62 -> m6_66  [key=2, style=dotted];
m6_67 -> m6_58  [color=blue, key=0, style=bold];
m6_67 -> m6_68  [key=0, style=solid];
m6_14 -> m6_15  [key=0, style=solid];
m6_14 -> m6_12  [color=blue, key=0, style=bold];
m6_16 -> m6_0  [key=2, style=dotted];
m6_16 -> m6_17  [key=0, style=solid];
m6_17 -> m6_14  [color=blue, key=0, style=bold];
m6_17 -> m6_18  [key=0, style=solid];
m6_17 -> m6_19  [key=2, style=dotted];
m6_17 -> m6_20  [key=2, style=dotted];
m6_8 -> m6_9  [color=red, key=0, style=solid];
m6_9 -> m6_10  [color=red, key=0, style=solid];
m6_9 -> m6_11  [color=red, key=2, style=dotted];
m6_10 -> m6_8  [color=blue, key=0, style=bold];
m6_10 -> m6_11  [color=green, key=0, style=solid];
m6_10 -> m6_13  [key=2, style=dotted];
m6_41 -> m6_42  [key=0, style=solid];
m6_41 -> m6_35  [key=2, style=dotted];
m6_41 -> m6_47  [key=2, style=dotted];
m6_41 -> m6_44  [color=darkseagreen4, key=1, label=job, style=dashed];
m6_41 -> m6_45  [color=darkseagreen4, key=1, label=job, style=dashed];
m6_42 -> m6_43  [key=0, style=solid];
m6_42 -> m6_44  [key=0, style=solid];
m6_44 -> m6_45  [key=0, style=solid];
m6_44 -> m6_35  [key=2, style=dotted];
m6_43 -> m6_46  [key=0, style=solid];
m6_12 -> m6_13  [key=0, style=solid];
m6_12 -> m6_9  [color=blue, key=0, style=bold];
m6_13 -> m6_14  [key=0, style=solid];
m6_13 -> m6_15  [key=2, style=dotted];
m6_26 -> m6_27  [color=green, key=0, style=solid];
m6_26 -> m6_28  [color=darkseagreen4, key=1, label=parameterIndex, style=dashed];
m6_26 -> m6_26  [color=darkorchid, key=3, label="Local variable int parameterIndex", style=bold];
m6_27 -> m6_28  [color=green, key=0, style=solid];
m6_27 -> m6_29  [color=green, key=2, style=dotted];
m6_28 -> m6_26  [color=blue, key=0, style=bold];
m6_28 -> m6_27  [key=0, style=solid];
m6_28 -> m6_28  [color=darkseagreen4, key=1, label=parameterIndex, style=dashed];
m6_18 -> m6_19  [color=green, key=0, style=solid];
m6_18 -> m6_16  [color=blue, key=0, style=bold];
m6_19 -> m6_20  [color=green, key=0, style=solid];
m6_19 -> m6_21  [color=green, key=2, style=dotted];
m6_73 -> m6_74  [key=0, style=solid];
m6_73 -> m6_26  [key=2, style=dotted];
m6_74 -> m6_75  [key=0, style=solid];
m6_74 -> m6_76  [key=2, style=dotted];
m6_74 -> m6_34  [key=2, style=dotted];
m6_74 -> m6_38  [key=2, style=dotted];
m6_74 -> m6_74  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m6_74 -> m6_68  [color=blue, key=0, style=bold];
m6_6 -> m6_4  [color=blue, key=0, style=bold];
m6_68 -> m6_69  [key=0, style=solid];
m6_68 -> m6_38  [key=2, style=dotted];
m6_70 -> m6_22  [key=2, style=dotted];
m6_70 -> m6_71  [key=0, style=solid];
m6_69 -> m6_41  [key=2, style=dotted];
m6_69 -> m6_70  [key=0, style=solid];
m6_69 -> m6_67  [color=blue, key=0, style=bold];
m6_71 -> m6_43  [key=2, style=dotted];
m6_71 -> m6_72  [key=0, style=solid];
m6_71 -> m6_38  [key=2, style=dotted];
m6_72 -> m6_44  [key=2, style=dotted];
m6_72 -> m6_73  [key=0, style=solid];
m6_72 -> m6_70  [color=blue, key=0, style=bold];
m6_11 -> m6_12  [color=green, key=0, style=solid];
m6_22 -> m6_23  [color=green, key=0, style=solid];
m6_22 -> m6_22  [color=darkorchid, key=3, label="Local variable string createJobSql", style=bold];
m6_23 -> m6_24  [color=green, key=0, style=solid];
m6_23 -> m6_25  [color=green, key=2, style=dotted];
m6_23 -> m6_33  [key=2, style=dotted];
m6_23 -> m6_34  [key=2, style=dotted];
m6_23 -> m6_35  [key=2, style=dotted];
m6_23 -> m6_36  [key=2, style=dotted];
m6_23 -> m6_37  [key=2, style=dotted];
m6_23 -> m6_28  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m6_23 -> m6_31  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m6_24 -> m6_22  [color=blue, key=0, style=bold];
m6_24 -> m6_25  [key=0, style=solid];
m6_24 -> m6_31  [key=0, style=solid];
m6_92 -> m6_32  [color=green, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m6_92 -> m6_39  [color=green, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m6_92 -> m6_49  [color=green, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m6_92 -> m6_56  [color=green, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m6_92 -> m6_60  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m6_92 -> m6_66  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m6_92 -> m6_70  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m6_92 -> m6_73  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m6_92 -> m6_77  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m6_92 -> m6_81  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m6_92 -> m6_85  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m6_92 -> m6_90  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m7_14 -> m7_15  [key=0, style=solid];
m7_15 -> m7_16  [key=0, style=solid];
m7_16 -> m7_14  [color=blue, key=0, style=bold];
m7_13 -> m7_17  [key=0, style=solid];
m7_13 -> m7_19  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_13 -> m7_22  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_13 -> m7_24  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_13 -> m7_25  [color=darkseagreen4, key=1, label="HangFire.Server.IJobPerformanceProcess", style=dashed];
m7_13 -> m7_31  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_17 -> m7_18  [key=0, style=solid];
m7_17 -> m7_33  [key=2, style=dotted];
m7_17 -> m7_19  [color=darkseagreen4, key=1, label=stateMachine, style=dashed];
m7_17 -> m7_31  [color=darkseagreen4, key=1, label=stateMachine, style=dashed];
m7_19 -> m7_20  [key=0, style=solid];
m7_19 -> m7_21  [key=0, style=solid];
m7_19 -> m7_35  [key=2, style=dotted];
m7_22 -> m7_23  [key=0, style=solid];
m7_22 -> m7_36  [key=2, style=dotted];
m7_22 -> m7_24  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m7_22 -> m7_25  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m7_24 -> m7_25  [key=0, style=solid];
m7_24 -> m7_38  [key=2, style=dotted];
m7_25 -> m7_26  [key=0, style=solid];
m7_25 -> m7_39  [key=2, style=dotted];
m7_31 -> m7_32  [key=0, style=solid];
m7_31 -> m7_35  [key=2, style=dotted];
m7_18 -> m7_19  [key=0, style=solid];
m7_18 -> m7_34  [key=2, style=dotted];
m7_20 -> m7_32  [key=0, style=solid];
m7_21 -> m7_22  [key=0, style=solid];
m7_23 -> m7_24  [key=0, style=solid];
m7_23 -> m7_37  [key=2, style=dotted];
m7_26 -> m7_27  [key=0, style=solid];
m7_26 -> m7_29  [key=0, style=solid];
m7_26 -> m7_31  [key=0, style=solid];
m7_26 -> m7_40  [key=2, style=dotted];
m7_27 -> m7_28  [key=0, style=solid];
m7_29 -> m7_30  [key=0, style=solid];
m7_28 -> m7_31  [key=0, style=solid];
m7_28 -> m7_41  [key=2, style=dotted];
m7_30 -> m7_31  [key=0, style=solid];
m7_30 -> m7_41  [key=2, style=dotted];
m7_32 -> m7_13  [color=blue, key=0, style=bold];
m7_6 -> m7_7  [key=0, style=solid];
m7_6 -> m7_8  [color=red, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_7 -> m7_8  [color=red, key=0, style=solid];
m7_7 -> m7_11  [key=2, style=dotted];
m7_7 -> m7_9  [color=red, key=1, label=connection, style=dashed];
m7_8 -> m7_9  [color=red, key=0, style=solid];
m7_8 -> m7_12  [color=red, key=2, style=dotted];
m7_9 -> m7_10  [color=red, key=0, style=solid];
m7_9 -> m7_13  [color=red, key=2, style=dotted];
m7_10 -> m7_6  [color=blue, key=0, style=bold];
m7_0 -> m7_1  [key=0, style=solid];
m7_0 -> m7_3  [color=darkseagreen4, key=1, label="HangFire.Server.WorkerContext", style=dashed];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_3  [key=0, style=solid];
m7_3 -> m7_4  [key=0, style=solid];
m7_2 -> m7_4  [key=0, style=solid];
m7_2 -> m7_5  [key=2, style=dotted];
m7_4 -> m7_0  [color=blue, key=0, style=bold];
m7_42 -> m7_3  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m7_42 -> m7_7  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m7_42 -> m7_8  [color=red, key=1, label="HangFire.Server.Worker", style=dashed];
m7_42 -> m7_9  [color=red, key=1, label="HangFire.Server.Worker", style=dashed];
m7_42 -> m7_15  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m7_42 -> m7_17  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m7_42 -> m7_18  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m7_42 -> m7_24  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m8_201 -> m8_202  [key=0, style=solid];
m8_202 -> m8_203  [key=0, style=solid];
m8_202 -> m8_18  [key=2, style=dotted];
m8_202 -> m8_21  [key=2, style=dotted];
m8_202 -> m8_207  [key=2, style=dotted];
m8_202 -> m8_19  [key=2, style=dotted];
m8_202 -> m8_208  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_203 -> m8_204  [key=0, style=solid];
m8_203 -> m8_71  [key=2, style=dotted];
m8_204 -> m8_205  [key=0, style=solid];
m8_204 -> m8_72  [key=2, style=dotted];
m8_205 -> m8_73  [key=2, style=dotted];
m8_205 -> m8_206  [key=0, style=solid];
m8_205 -> m8_211  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_206 -> m8_201  [color=blue, key=0, style=bold];
m8_146 -> m8_147  [key=0, style=solid];
m8_147 -> m8_148  [key=0, style=solid];
m8_147 -> m8_71  [key=2, style=dotted];
m8_148 -> m8_149  [key=0, style=solid];
m8_148 -> m8_72  [key=2, style=dotted];
m8_149 -> m8_73  [key=2, style=dotted];
m8_149 -> m8_150  [key=0, style=solid];
m8_149 -> m8_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_150 -> m8_146  [color=blue, key=0, style=bold];
m8_94 -> m8_95  [key=0, style=solid];
m8_95 -> m8_96  [key=0, style=solid];
m8_95 -> m8_18  [key=2, style=dotted];
m8_95 -> m8_101  [key=2, style=dotted];
m8_95 -> m8_19  [key=2, style=dotted];
m8_95 -> m8_102  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_96 -> m8_97  [key=0, style=solid];
m8_96 -> m8_18  [key=2, style=dotted];
m8_96 -> m8_101  [key=2, style=dotted];
m8_96 -> m8_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_97 -> m8_98  [key=0, style=solid];
m8_97 -> m8_18  [key=2, style=dotted];
m8_97 -> m8_101  [key=2, style=dotted];
m8_97 -> m8_19  [key=2, style=dotted];
m8_97 -> m8_109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_98 -> m8_99  [key=0, style=solid];
m8_98 -> m8_71  [key=2, style=dotted];
m8_99 -> m8_100  [key=0, style=solid];
m8_99 -> m8_72  [key=2, style=dotted];
m8_100 -> m8_94  [color=blue, key=0, style=bold];
m8_165 -> m8_166  [key=0, style=solid];
m8_167 -> m8_168  [key=0, style=solid];
m8_167 -> m8_18  [key=2, style=dotted];
m8_167 -> m8_173  [key=2, style=dotted];
m8_167 -> m8_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_168 -> m8_169  [key=0, style=solid];
m8_168 -> m8_71  [key=2, style=dotted];
m8_169 -> m8_170  [key=0, style=solid];
m8_169 -> m8_72  [key=2, style=dotted];
m8_170 -> m8_73  [key=2, style=dotted];
m8_170 -> m8_171  [key=0, style=solid];
m8_170 -> m8_177  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_166 -> m8_167  [key=0, style=solid];
m8_166 -> m8_170  [color=darkseagreen4, key=1, label=exception, style=dashed];
m8_166 -> m8_172  [key=2, style=dotted];
m8_166 -> m8_178  [color=darkseagreen4, key=1, label=exception, style=dashed];
m8_166 -> m8_181  [color=darkseagreen4, key=1, label=exception, style=dashed];
m8_171 -> m8_165  [color=blue, key=0, style=bold];
m8_47 -> m8_216  [key=0, style=solid];
m8_216 -> m8_47  [color=blue, key=0, style=bold];
m8_0 -> m8_1  [key=0, style=solid];
m8_1 -> m8_0  [color=blue, key=0, style=bold];
m8_1 -> m8_2  [key=0, style=solid];
m8_1 -> m8_16  [key=2, style=dotted];
m8_184 -> m8_185  [key=0, style=solid];
m8_186 -> m8_187  [key=0, style=solid];
m8_186 -> m8_18  [key=2, style=dotted];
m8_186 -> m8_191  [key=2, style=dotted];
m8_186 -> m8_173  [key=2, style=dotted];
m8_186 -> m8_192  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_187 -> m8_188  [key=0, style=solid];
m8_187 -> m8_71  [key=2, style=dotted];
m8_188 -> m8_189  [key=0, style=solid];
m8_188 -> m8_72  [key=2, style=dotted];
m8_189 -> m8_73  [key=2, style=dotted];
m8_189 -> m8_190  [key=0, style=solid];
m8_189 -> m8_195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_185 -> m8_186  [key=0, style=solid];
m8_185 -> m8_189  [color=darkseagreen4, key=1, label=exception, style=dashed];
m8_185 -> m8_172  [key=2, style=dotted];
m8_185 -> m8_196  [color=darkseagreen4, key=1, label=exception, style=dashed];
m8_185 -> m8_199  [color=darkseagreen4, key=1, label=exception, style=dashed];
m8_190 -> m8_184  [color=blue, key=0, style=bold];
m8_123 -> m8_124  [key=0, style=solid];
m8_124 -> m8_125  [key=0, style=solid];
m8_124 -> m8_71  [key=2, style=dotted];
m8_125 -> m8_126  [key=0, style=solid];
m8_125 -> m8_72  [key=2, style=dotted];
m8_126 -> m8_73  [key=2, style=dotted];
m8_126 -> m8_127  [key=0, style=solid];
m8_126 -> m8_128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_127 -> m8_123  [color=blue, key=0, style=bold];
m8_2 -> m8_3  [key=0, style=solid];
m8_3 -> m8_4  [key=0, style=solid];
m8_4 -> m8_5  [key=0, style=solid];
m8_4 -> m8_17  [key=2, style=dotted];
m8_5 -> m8_6  [key=0, style=solid];
m8_5 -> m8_18  [key=2, style=dotted];
m8_5 -> m8_19  [key=2, style=dotted];
m8_5 -> m8_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_6 -> m8_7  [key=0, style=solid];
m8_6 -> m8_20  [key=2, style=dotted];
m8_7 -> m8_8  [key=0, style=solid];
m8_7 -> m8_18  [key=2, style=dotted];
m8_7 -> m8_19  [key=2, style=dotted];
m8_7 -> m8_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_8 -> m8_9  [key=0, style=solid];
m8_8 -> m8_18  [key=2, style=dotted];
m8_8 -> m8_19  [key=2, style=dotted];
m8_8 -> m8_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_9 -> m8_10  [key=0, style=solid];
m8_9 -> m8_18  [key=2, style=dotted];
m8_9 -> m8_19  [key=2, style=dotted];
m8_9 -> m8_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_10 -> m8_10  [color=darkorchid, key=3, label="Local variable Hangfire.SqlServer.SqlServerJobQueue.FetchedJob fetchedJob", style=bold];
m8_10 -> m8_11  [key=0, style=solid];
m8_10 -> m8_18  [key=2, style=dotted];
m8_10 -> m8_21  [key=2, style=dotted];
m8_10 -> m8_22  [key=2, style=dotted];
m8_10 -> m8_19  [key=2, style=dotted];
m8_10 -> m8_40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_10 -> m8_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_11 -> m8_11  [color=darkorchid, key=3, label="Local variable string fetchJobSqlTemplate", style=bold];
m8_11 -> m8_12  [key=0, style=solid];
m8_11 -> m8_23  [key=2, style=dotted];
m8_12 -> m8_13  [key=0, style=solid];
m8_12 -> m8_18  [key=2, style=dotted];
m8_12 -> m8_19  [key=2, style=dotted];
m8_12 -> m8_48  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_13 -> m8_14  [key=0, style=solid];
m8_13 -> m8_18  [key=2, style=dotted];
m8_13 -> m8_19  [key=2, style=dotted];
m8_13 -> m8_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_14 -> m8_15  [key=0, style=solid];
m8_14 -> m8_24  [key=2, style=dotted];
m8_15 -> m8_0  [color=blue, key=0, style=bold];
m8_134 -> m8_135  [key=0, style=solid];
m8_135 -> m8_136  [key=0, style=solid];
m8_135 -> m8_18  [key=2, style=dotted];
m8_135 -> m8_19  [key=2, style=dotted];
m8_135 -> m8_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_136 -> m8_137  [key=0, style=solid];
m8_136 -> m8_71  [key=2, style=dotted];
m8_137 -> m8_138  [key=0, style=solid];
m8_137 -> m8_72  [key=2, style=dotted];
m8_138 -> m8_73  [key=2, style=dotted];
m8_138 -> m8_139  [key=0, style=solid];
m8_138 -> m8_143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_139 -> m8_134  [color=blue, key=0, style=bold];
m8_65 -> m8_66  [key=0, style=solid];
m8_66 -> m8_67  [key=0, style=solid];
m8_66 -> m8_71  [key=2, style=dotted];
m8_67 -> m8_68  [key=0, style=solid];
m8_67 -> m8_72  [key=2, style=dotted];
m8_68 -> m8_73  [key=2, style=dotted];
m8_68 -> m8_69  [key=0, style=solid];
m8_68 -> m8_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_69 -> m8_73  [key=2, style=dotted];
m8_69 -> m8_70  [key=0, style=solid];
m8_69 -> m8_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_70 -> m8_65  [color=blue, key=0, style=bold];
m8_112 -> m8_113  [key=0, style=solid];
m8_113 -> m8_114  [key=0, style=solid];
m8_113 -> m8_71  [key=2, style=dotted];
m8_114 -> m8_115  [key=0, style=solid];
m8_114 -> m8_72  [key=2, style=dotted];
m8_115 -> m8_73  [key=2, style=dotted];
m8_115 -> m8_116  [key=0, style=solid];
m8_115 -> m8_117  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_116 -> m8_112  [color=blue, key=0, style=bold];
m8_198 -> m8_199  [key=0, style=solid];
m8_90 -> m8_91  [color=green, key=0, style=solid];
m8_91 -> m8_92  [color=green, key=0, style=solid];
m8_91 -> m8_93  [color=green, key=2, style=dotted];
m8_92 -> m8_90  [color=blue, key=0, style=bold];
m8_36 -> m8_37  [key=0, style=solid];
m8_36 -> m8_38  [key=2, style=dotted];
m8_36 -> m8_39  [key=2, style=dotted];
m8_49 -> m8_50  [key=0, style=solid];
m8_49 -> m8_51  [key=2, style=dotted];
m8_88 -> m8_89  [key=0, style=solid];
m8_88 -> m8_39  [key=2, style=dotted];
m8_118 -> m8_119  [key=0, style=solid];
m8_118 -> m8_38  [key=2, style=dotted];
m8_118 -> m8_55  [key=2, style=dotted];
m8_118 -> m8_120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_121 -> m8_122  [key=0, style=solid];
m8_87 -> m8_88  [key=0, style=solid];
m8_25 -> m8_26  [key=0, style=solid];
m8_29 -> m8_30  [key=0, style=solid];
m8_32 -> m8_33  [key=0, style=solid];
m8_35 -> m8_36  [key=0, style=solid];
m8_37 -> m8_35  [color=blue, key=0, style=bold];
m8_40 -> m8_41  [key=0, style=solid];
m8_44 -> m8_45  [key=0, style=solid];
m8_48 -> m8_49  [key=0, style=solid];
m8_50 -> m8_48  [color=blue, key=0, style=bold];
m8_52 -> m8_53  [key=0, style=solid];
m8_74 -> m8_75  [key=0, style=solid];
m8_77 -> m8_78  [key=0, style=solid];
m8_89 -> m8_87  [color=blue, key=0, style=bold];
m8_102 -> m8_103  [key=0, style=solid];
m8_105 -> m8_106  [key=0, style=solid];
m8_109 -> m8_110  [key=0, style=solid];
m8_117 -> m8_118  [key=0, style=solid];
m8_119 -> m8_117  [color=blue, key=0, style=bold];
m8_120 -> m8_121  [key=0, style=solid];
m8_122 -> m8_120  [color=blue, key=0, style=bold];
m8_128 -> m8_129  [key=0, style=solid];
m8_140 -> m8_141  [key=0, style=solid];
m8_143 -> m8_144  [key=0, style=solid];
m8_151 -> m8_152  [key=0, style=solid];
m8_159 -> m8_160  [key=0, style=solid];
m8_174 -> m8_175  [key=0, style=solid];
m8_177 -> m8_178  [key=0, style=solid];
m8_192 -> m8_193  [key=0, style=solid];
m8_195 -> m8_196  [key=0, style=solid];
m8_208 -> m8_209  [key=0, style=solid];
m8_211 -> m8_212  [key=0, style=solid];
m8_27 -> m8_25  [color=blue, key=0, style=bold];
m8_26 -> m8_27  [key=0, style=solid];
m8_26 -> m8_28  [key=2, style=dotted];
m8_31 -> m8_29  [color=blue, key=0, style=bold];
m8_30 -> m8_31  [key=0, style=solid];
m8_34 -> m8_32  [color=blue, key=0, style=bold];
m8_33 -> m8_34  [key=0, style=solid];
m8_53 -> m8_38  [key=2, style=dotted];
m8_53 -> m8_55  [key=2, style=dotted];
m8_53 -> m8_54  [key=0, style=solid];
m8_103 -> m8_38  [key=2, style=dotted];
m8_103 -> m8_55  [key=2, style=dotted];
m8_103 -> m8_104  [key=0, style=solid];
m8_106 -> m8_38  [key=2, style=dotted];
m8_106 -> m8_107  [key=0, style=solid];
m8_106 -> m8_108  [key=2, style=dotted];
m8_110 -> m8_38  [key=2, style=dotted];
m8_110 -> m8_55  [key=2, style=dotted];
m8_110 -> m8_111  [key=0, style=solid];
m8_129 -> m8_38  [key=2, style=dotted];
m8_129 -> m8_55  [key=2, style=dotted];
m8_129 -> m8_130  [key=0, style=solid];
m8_129 -> m8_131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_141 -> m8_38  [key=2, style=dotted];
m8_141 -> m8_55  [key=2, style=dotted];
m8_141 -> m8_142  [key=0, style=solid];
m8_144 -> m8_38  [key=2, style=dotted];
m8_144 -> m8_145  [key=0, style=solid];
m8_144 -> m8_108  [key=2, style=dotted];
m8_152 -> m8_38  [key=2, style=dotted];
m8_152 -> m8_153  [key=0, style=solid];
m8_152 -> m8_108  [key=2, style=dotted];
m8_160 -> m8_38  [key=2, style=dotted];
m8_160 -> m8_55  [key=2, style=dotted];
m8_160 -> m8_161  [key=0, style=solid];
m8_160 -> m8_162  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_178 -> m8_38  [key=2, style=dotted];
m8_178 -> m8_55  [key=2, style=dotted];
m8_178 -> m8_179  [key=0, style=solid];
m8_178 -> m8_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_175 -> m8_38  [key=2, style=dotted];
m8_175 -> m8_176  [key=0, style=solid];
m8_175 -> m8_108  [key=2, style=dotted];
m8_196 -> m8_38  [key=2, style=dotted];
m8_196 -> m8_55  [key=2, style=dotted];
m8_196 -> m8_197  [key=0, style=solid];
m8_196 -> m8_198  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_193 -> m8_38  [key=2, style=dotted];
m8_193 -> m8_194  [key=0, style=solid];
m8_193 -> m8_108  [key=2, style=dotted];
m8_212 -> m8_38  [key=2, style=dotted];
m8_212 -> m8_55  [key=2, style=dotted];
m8_212 -> m8_213  [key=0, style=solid];
m8_42 -> m8_40  [color=blue, key=0, style=bold];
m8_41 -> m8_42  [key=0, style=solid];
m8_41 -> m8_43  [key=2, style=dotted];
m8_46 -> m8_44  [color=blue, key=0, style=bold];
m8_45 -> m8_46  [key=0, style=solid];
m8_45 -> m8_47  [key=2, style=dotted];
m8_54 -> m8_52  [color=blue, key=0, style=bold];
m8_76 -> m8_74  [color=blue, key=0, style=bold];
m8_75 -> m8_76  [key=0, style=solid];
m8_75 -> m8_28  [key=2, style=dotted];
m8_79 -> m8_77  [color=blue, key=0, style=bold];
m8_78 -> m8_79  [key=0, style=solid];
m8_78 -> m8_80  [key=2, style=dotted];
m8_104 -> m8_102  [color=blue, key=0, style=bold];
m8_107 -> m8_105  [color=blue, key=0, style=bold];
m8_111 -> m8_109  [color=blue, key=0, style=bold];
m8_130 -> m8_128  [color=blue, key=0, style=bold];
m8_142 -> m8_140  [color=blue, key=0, style=bold];
m8_145 -> m8_143  [color=blue, key=0, style=bold];
m8_153 -> m8_151  [color=blue, key=0, style=bold];
m8_161 -> m8_159  [color=blue, key=0, style=bold];
m8_181 -> m8_182  [key=0, style=solid];
m8_181 -> m8_183  [key=2, style=dotted];
m8_176 -> m8_174  [color=blue, key=0, style=bold];
m8_179 -> m8_177  [color=blue, key=0, style=bold];
m8_199 -> m8_200  [key=0, style=solid];
m8_194 -> m8_192  [color=blue, key=0, style=bold];
m8_197 -> m8_195  [color=blue, key=0, style=bold];
m8_210 -> m8_208  [color=blue, key=0, style=bold];
m8_209 -> m8_210  [key=0, style=solid];
m8_209 -> m8_43  [key=2, style=dotted];
m8_213 -> m8_211  [color=blue, key=0, style=bold];
m8_62 -> m8_64  [key=2, style=dotted];
m8_62 -> m8_63  [key=0, style=solid];
m8_61 -> m8_62  [key=0, style=solid];
m8_131 -> m8_132  [key=0, style=solid];
m8_162 -> m8_163  [key=0, style=solid];
m8_180 -> m8_181  [key=0, style=solid];
m8_182 -> m8_180  [color=blue, key=0, style=bold];
m8_200 -> m8_198  [color=blue, key=0, style=bold];
m8_63 -> m8_61  [color=blue, key=0, style=bold];
m8_133 -> m8_131  [color=blue, key=0, style=bold];
m8_132 -> m8_133  [key=0, style=solid];
m8_163 -> m8_164  [key=0, style=solid];
m8_164 -> m8_162  [color=blue, key=0, style=bold];
m8_81 -> m8_82  [key=0, style=solid];
m8_85 -> m8_85  [color=green, key=3, label="Local variable string enqueueJobSql", style=bold];
m8_85 -> m8_86  [color=green, key=0, style=solid];
m8_85 -> m8_73  [color=green, key=2, style=dotted];
m8_85 -> m8_90  [color=green, key=1, label="lambda expression", style=dashed];
m8_84 -> m8_85  [color=green, key=0, style=solid];
m8_84 -> m8_73  [key=2, style=dotted];
m8_84 -> m8_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_82 -> m8_83  [key=0, style=solid];
m8_82 -> m8_71  [key=2, style=dotted];
m8_83 -> m8_84  [key=0, style=solid];
m8_83 -> m8_72  [key=2, style=dotted];
m8_86 -> m8_81  [color=blue, key=0, style=bold];
m8_71 -> m8_214  [key=0, style=solid];
m8_214 -> m8_215  [key=0, style=solid];
m8_214 -> m8_64  [key=2, style=dotted];
m8_215 -> m8_71  [color=blue, key=0, style=bold];
m8_56 -> m8_57  [key=0, style=solid];
m8_57 -> m8_38  [key=2, style=dotted];
m8_57 -> m8_58  [key=0, style=solid];
m8_57 -> m8_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_58 -> m8_59  [key=0, style=solid];
m8_58 -> n5  [key=2, style=dotted];
m8_59 -> m8_56  [color=blue, key=0, style=bold];
m8_154 -> m8_155  [key=0, style=solid];
m8_155 -> m8_156  [key=0, style=solid];
m8_155 -> m8_71  [key=2, style=dotted];
m8_156 -> m8_157  [key=0, style=solid];
m8_156 -> m8_72  [key=2, style=dotted];
m8_157 -> m8_73  [key=2, style=dotted];
m8_157 -> m8_158  [key=0, style=solid];
m8_157 -> m8_159  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_158 -> m8_154  [color=blue, key=0, style=bold];
m8_217 -> m8_85  [color=green, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_1  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_2  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_3  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_4  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_5  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_6  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_7  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_8  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_9  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_36  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_10  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_11  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_12  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_49  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_13  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_14  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_66  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_67  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_68  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_69  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_82  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_83  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_84  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_88  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_95  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_96  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_97  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_98  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_99  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_113  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_114  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_115  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_118  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_121  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_124  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_125  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_126  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_135  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_136  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_137  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_138  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_147  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_148  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_149  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_155  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_156  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_157  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_167  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_168  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_169  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_170  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_186  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_187  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_188  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_189  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_202  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_203  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_204  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_205  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_217 -> m8_214  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m8_218 -> m8_178  [color=darkseagreen4, key=1, label=exception, style=dashed];
m8_218 -> m8_181  [color=darkseagreen4, key=1, label=exception, style=dashed];
m8_219 -> m8_196  [color=darkseagreen4, key=1, label=exception, style=dashed];
m8_219 -> m8_199  [color=darkseagreen4, key=1, label=exception, style=dashed];
}
