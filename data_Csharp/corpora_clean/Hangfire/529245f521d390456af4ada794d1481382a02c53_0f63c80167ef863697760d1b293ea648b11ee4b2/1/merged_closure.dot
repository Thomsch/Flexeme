digraph  {
n67 [label="Hangfire.BackgroundJobServer", span=""];
n0 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer()", label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer()", span="38-38"];
n1 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer()", label="Exit Hangfire.BackgroundJobServer.BackgroundJobServer()", span="38-38"];
n2 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.JobStorage)", label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.JobStorage)", span="48-48"];
n3 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.JobStorage)", label="Exit Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.JobStorage)", span="48-48"];
n4 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions)", label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions)", span="58-58"];
n5 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions)", label="Exit Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions)", span="58-58"];
n6 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage)", label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage)", span="69-69"];
n7 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage)", label="Exit Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage)", span="69-69"];
n8 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", span="74-74"];
n9 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", label="storage == null", span="79-79"];
n11 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", label="options == null", span="80-80"];
n13 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", label="additionalProcesses == null", span="81-81"];
n15 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", label="_options = options", span="83-83"];
n18 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", label="processes.AddRange(storage.GetComponents())", span="87-87"];
n19 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", label="processes.AddRange(additionalProcesses)", span="88-88"];
n20 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", label="var properties = new Dictionary<string, object>\r\n            {\r\n                { ''Queues'', options.Queues },\r\n                { ''WorkerCount'', options.WorkerCount }\r\n            }", span="90-94"];
n22 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", label="Logger.InfoFormat(''Using job storage: '{0}'.'', storage)", span="97-97"];
n23 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", label="storage.WriteOptionsToLog(Logger)", span="99-99"];
n24 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", label="options.WriteToLog(Logger)", span="100-100"];
n25 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", label="_processingServer = new BackgroundProcessingServer(storage, processes, properties)\r\n            {\r\n                ShutdownTimeout = options.ShutdownTimeout\r\n            }", span="102-105"];
n10 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", label="throw new ArgumentNullException(''storage'');", span="79-79"];
n12 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", label="throw new ArgumentNullException(''options'');", span="80-80"];
n14 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", label="throw new ArgumentNullException(''additionalProcesses'');", span="81-81"];
n16 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", label="var processes = new List<IServerProcess>()", span="85-85"];
n17 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", label="processes.AddRange(GetProcesses())", span="86-86"];
n28 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n29 [cluster="Hangfire.BackgroundJobServer.GetProcesses()", label="Entry Hangfire.BackgroundJobServer.GetProcesses()", span="114-114"];
n30 [cluster="System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", label="Entry System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", span="0-0"];
n31 [cluster="Hangfire.JobStorage.GetComponents()", label="Entry Hangfire.JobStorage.GetComponents()", span="58-58"];
n21 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", label="Logger.Info(''Starting Hangfire Server'')", span="96-96"];
n32 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
n33 [cluster="Hangfire.Logging.ILog.Info(string)", label="Entry Hangfire.Logging.ILog.Info(string)", span="202-202"];
n34 [cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="210-210"];
n35 [cluster="Hangfire.JobStorage.WriteOptionsToLog(Hangfire.Logging.ILog)", label="Entry Hangfire.JobStorage.WriteOptionsToLog(Hangfire.Logging.ILog)", span="68-68"];
n36 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", label="Entry Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="83-83"];
n26 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", label="Exit Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", span="74-74"];
n27 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n37 [cluster="Hangfire.Server.BackgroundProcessingServer.BackgroundProcessingServer(Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IServerProcess>, System.Collections.Generic.IDictionary<string, object>)", label="Entry Hangfire.Server.BackgroundProcessingServer.BackgroundProcessingServer(Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IServerProcess>, System.Collections.Generic.IDictionary<string, object>)", span="40-40"];
n38 [cluster="Hangfire.BackgroundJobServer.Dispose()", label="Entry Hangfire.BackgroundJobServer.Dispose()", span="108-108"];
n39 [cluster="Hangfire.BackgroundJobServer.Dispose()", label="_processingServer.Dispose()", span="110-110"];
n40 [cluster="Hangfire.BackgroundJobServer.Dispose()", label="Logger.Info(''Hangfire Server stopped.'')", span="111-111"];
n42 [cluster="System.IDisposable.Dispose()", label="Entry System.IDisposable.Dispose()", span="0-0"];
n41 [cluster="Hangfire.BackgroundJobServer.Dispose()", label="Exit Hangfire.BackgroundJobServer.Dispose()", span="108-108"];
n43 [cluster="Hangfire.BackgroundJobServer.GetProcesses()", label="var processes = new List<IServerProcess>()", span="116-116"];
n44 [cluster="Hangfire.BackgroundJobServer.GetProcesses()", label="var i = 0", span="118-118"];
n48 [cluster="Hangfire.BackgroundJobServer.GetProcesses()", label="processes.Add(new ServerHeartbeat(_options.HeartbeatInterval))", span="126-126"];
n49 [cluster="Hangfire.BackgroundJobServer.GetProcesses()", label="processes.Add(new ServerWatchdog(_options.ServerWatchdogOptions))", span="127-127"];
n50 [cluster="Hangfire.BackgroundJobServer.GetProcesses()", label="processes.Add(new SchedulePoller(_options.SchedulePollingInterval, new StateChangeProcess(_options.FilterProvider)))", span="128-128"];
n51 [cluster="Hangfire.BackgroundJobServer.GetProcesses()", label="processes.Add(new RecurringJobScheduler(new JobCreationProcess(_options.FilterProvider)))", span="129-129"];
n52 [cluster="Hangfire.BackgroundJobServer.GetProcesses()", label="return processes;", span="131-131"];
n45 [cluster="Hangfire.BackgroundJobServer.GetProcesses()", label="i < _options.WorkerCount", span="118-118"];
n47 [cluster="Hangfire.BackgroundJobServer.GetProcesses()", label="i++", span="118-118"];
n54 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateChangeProcess)", label="Entry Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateChangeProcess)", span="47-47"];
n55 [cluster="Hangfire.Server.JobPerformanceProcess.JobPerformanceProcess(Hangfire.Common.IJobFilterProvider)", label="Entry Hangfire.Server.JobPerformanceProcess.JobPerformanceProcess(Hangfire.Common.IJobFilterProvider)", span="34-34"];
n56 [cluster="Hangfire.States.StateChangeProcess.StateChangeProcess(Hangfire.Common.IJobFilterProvider)", label="Entry Hangfire.States.StateChangeProcess.StateChangeProcess(Hangfire.Common.IJobFilterProvider)", span="35-35"];
n57 [cluster="System.Collections.Generic.List<T>.Add(T)", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
n58 [cluster="Hangfire.Server.ServerHeartbeat.ServerHeartbeat(System.TimeSpan)", label="Entry Hangfire.Server.ServerHeartbeat.ServerHeartbeat(System.TimeSpan)", span="31-31"];
n59 [cluster="Hangfire.Server.ServerWatchdog.ServerWatchdog(Hangfire.Server.ServerWatchdogOptions)", label="Entry Hangfire.Server.ServerWatchdog.ServerWatchdog(Hangfire.Server.ServerWatchdogOptions)", span="32-32"];
n60 [cluster="Hangfire.Server.SchedulePoller.SchedulePoller(System.TimeSpan, Hangfire.States.IStateChangeProcess)", label="Entry Hangfire.Server.SchedulePoller.SchedulePoller(System.TimeSpan, Hangfire.States.IStateChangeProcess)", span="45-45"];
n61 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IJobCreationProcess)", label="Entry Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IJobCreationProcess)", span="43-43"];
n62 [cluster="Hangfire.Client.JobCreationProcess.JobCreationProcess(Hangfire.Common.IJobFilterProvider)", label="Entry Hangfire.Client.JobCreationProcess.JobCreationProcess(Hangfire.Common.IJobFilterProvider)", span="35-35"];
n53 [cluster="Hangfire.BackgroundJobServer.GetProcesses()", label="Exit Hangfire.BackgroundJobServer.GetProcesses()", span="114-114"];
n63 [cluster="Hangfire.BackgroundJobServer.Start()", label="Entry Hangfire.BackgroundJobServer.Start()", span="135-135"];
n64 [cluster="Hangfire.BackgroundJobServer.Start()", label="Exit Hangfire.BackgroundJobServer.Start()", span="135-135"];
n65 [cluster="Hangfire.BackgroundJobServer.Stop()", label="Entry Hangfire.BackgroundJobServer.Stop()", span="140-140"];
n66 [cluster="Hangfire.BackgroundJobServer.Stop()", label="Exit Hangfire.BackgroundJobServer.Stop()", span="140-140"];
d49 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, label="Release(_connection, _resource)", prediction=0, span="123-123"];
d95 [label="Hangfire.SqlServer.SqlServerDistributedLock", span=""];
d48 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", label="_timer?.Dispose()", span="121-121"];
d50 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", span="100-100"];
d53 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", span="210-210"];
d62 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, label="started.Elapsed < timeout", prediction=1, span="176-176"];
d33 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", span="153-153"];
d61 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, label="var started = Stopwatch.StartNew()", prediction=2, span="165-165"];
d74 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", label="lockResult == -999", span="200-200"];
d63 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, label="var parameters = new DynamicParameters()", prediction=1, span="178-178"];
d76 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", label="throw new DistributedLockTimeoutException(resource);", span="207-207"];
d64 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, label="parameters.Add(''@Resource'', resource)", prediction=1, span="179-179"];
d65 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, label="parameters.Add(''@DbPrincipal'', ''public'')", prediction=1, span="180-180"];
d81 [cluster="Unk.Add", label="Entry Unk.Add", span=""];
d70 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, label="connection.Execute(\r\n                    @''sp_getapplock'',\r\n                    parameters,\r\n                    commandTimeout: (int)LockTimeout.TotalSeconds + 1,\r\n                    commandType: CommandType.StoredProcedure)", prediction=1, span="186-190"];
d69 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", label="parameters.Add(''@Result'', dbType: DbType.Int32, direction: ParameterDirection.ReturnValue)", span="184-184"];
d71 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", label="var lockResult = parameters.Get<int>(''@Result'')", span="192-192"];
d58 [cluster="Unk.Execute", label="Entry Unk.Execute", span=""];
d60 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, label="throw new InvalidOperationException(''Connection must be open before acquiring a distributed lock.'');", prediction=7, span="162-162"];
d59 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", label="connection.State != ConnectionState.Open", span="155-155"];
d77 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", span="153-153"];
d78 [cluster="System.InvalidOperationException.InvalidOperationException(string)", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
d79 [cluster="System.Diagnostics.Stopwatch.StartNew()", label="Entry System.Diagnostics.Stopwatch.StartNew()", span="0-0"];
d80 [cluster="DynamicParameters.cstr", label="Entry DynamicParameters.cstr", span=""];
d66 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, label="parameters.Add(''@LockMode'', LockMode)", prediction=1, span="181-181"];
d67 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, label="parameters.Add(''@LockOwner'', LockOwner)", prediction=1, span="182-182"];
d68 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", label="parameters.Add(''@LockTimeout'', LockTimeout.TotalMilliseconds)", span="183-183"];
d13 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="_storage = storage", span="70-70"];
d14 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="_resource = resource", span="71-71"];
d15 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="!AcquiredLocks.Value.ContainsKey(_resource) || AcquiredLocks.Value[_resource] == 0", span="73-73"];
d16 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="_connection = storage.CreateAndOpenConnection()", span="75-75"];
d17 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="Acquire(_connection, _resource, timeout)", span="79-79"];
d19 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="storage.ReleaseConnection(_connection)", span="83-83"];
d21 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="!_storage.IsExistingConnection(_connection)", span="87-87"];
d22 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="_timer = new Timer(ExecuteKeepAliveQuery, null, KeepAliveInterval, KeepAliveInterval)", span="89-89"];
d23 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="AcquiredLocks.Value[_resource] = 1", span="92-92"];
d24 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="AcquiredLocks.Value[_resource]++", span="96-96"];
d38 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", label=_completed, span="102-102"];
d40 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", label="_completed = true", span="104-104"];
d41 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", label="!AcquiredLocks.Value.ContainsKey(_resource)", span="106-106"];
d43 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", label="AcquiredLocks.Value[_resource]--", span="108-108"];
d44 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", label="AcquiredLocks.Value[_resource] != 0", span="110-110"];
d46 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", label=_lockObject, span="112-112"];
d47 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", label="AcquiredLocks.Value.Remove(_resource)", span="119-119"];
d55 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.ExecuteKeepAliveQuery(object)", label=_lockObject, span="135-135"];
d56 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.ExecuteKeepAliveQuery(object)", label="_connection?.Execute(''SELECT 1;'')", span="139-139"];
d52 [cluster="System.Threading.Timer.Dispose()", label="Entry System.Threading.Timer.Dispose()", span="0-0"];
d39 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", label="return;", span="102-102"];
d42 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", label="return;", span="106-106"];
d45 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", label="return;", span="110-110"];
d37 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", span="100-100"];
d94 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", span="210-210"];
d86 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", label="var parameters = new DynamicParameters()", span="212-212"];
d87 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", label="parameters.Add(''@Resource'', resource)", span="213-213"];
d90 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", label="connection.Execute(\r\n                @''sp_releaseapplock'',\r\n                parameters,\r\n                commandType: CommandType.StoredProcedure)", span="217-220"];
d93 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", label="throw new SqlServerDistributedLockException(\r\n                    $''Could not release a lock on the resource '{resource}': Server returned the '{releaseResult}' error.'');", span="226-227"];
d75 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", label="throw new SqlServerDistributedLockException(\r\n                        $''Could not place a lock on the resource '{resource}': {(LockErrorMessages.ContainsKey(lockResult) ? LockErrorMessages[lockResult] : $''Server returned the '{lockResult}' error.'')}.'');", span="202-203"];
d4 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", span="61-61"];
d72 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", label="lockResult >= 0", span="194-194"];
d85 [cluster="Hangfire.Storage.DistributedLockTimeoutException.DistributedLockTimeoutException(string)", label="Entry Hangfire.Storage.DistributedLockTimeoutException.DistributedLockTimeoutException(string)", span="6-6"];
d88 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", label="parameters.Add(''@LockOwner'', LockOwner)", span="214-214"];
d89 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", label="parameters.Add(''@Result'', dbType: DbType.Int32, direction: ParameterDirection.ReturnValue)", span="215-215"];
d82 [cluster="Unk.>", label="Entry Unk.>", span=""];
d73 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", label="return;", span="197-197"];
d11 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="timeout.TotalMilliseconds > Int32.MaxValue", span="67-67"];
d31 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
d32 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", label="Entry Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="232-232"];
d18 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label=Exception, span="81-81"];
d20 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="throw;", span="84-84"];
d34 [cluster="Hangfire.SqlServer.SqlServerStorage.ReleaseConnection(IDbConnection)", label="Entry Hangfire.SqlServer.SqlServerStorage.ReleaseConnection(IDbConnection)", span="249-249"];
d35 [cluster="Hangfire.SqlServer.SqlServerStorage.IsExistingConnection(IDbConnection)", label="Entry Hangfire.SqlServer.SqlServerStorage.IsExistingConnection(IDbConnection)", span="244-244"];
d36 [cluster="System.Threading.Timer.Timer(System.Threading.TimerCallback, object, System.TimeSpan, System.TimeSpan)", label="Entry System.Threading.Timer.Timer(System.Threading.TimerCallback, object, System.TimeSpan, System.TimeSpan)", span="0-0"];
d25 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", span="61-61"];
d51 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", span="0-0"];
d54 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.ExecuteKeepAliveQuery(object)", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.ExecuteKeepAliveQuery(object)", span="133-133"];
d57 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.ExecuteKeepAliveQuery(object)", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.ExecuteKeepAliveQuery(object)", span="133-133"];
d92 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", label="releaseResult < 0", span="224-224"];
d91 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", label="var releaseResult = parameters.Get<int>(''@Result'')", span="222-222"];
d83 [cluster="Hangfire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", label="Entry Hangfire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", span="22-22"];
d84 [cluster="Unk.ContainsKey", label="Entry Unk.ContainsKey", span=""];
d5 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="storage == null", span="63-63"];
d6 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="throw new ArgumentNullException(nameof(storage));", span="63-63"];
d7 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="String.IsNullOrEmpty(resource)", span="64-64"];
d8 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="throw new ArgumentNullException(nameof(resource));", span="64-64"];
d9 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="timeout.TotalSeconds + CommandTimeoutAdditionSeconds > Int32.MaxValue", span="65-65"];
d12 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="throw new ArgumentException(\r\n                $''The timeout specified is too large. Please supply a timeout equal to or less than {(int)TimeSpan.FromMilliseconds(Int32.MaxValue).TotalSeconds} seconds'', nameof(timeout));", span="67-68"];
d10 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", label="throw new ArgumentException(\r\n                $''The timeout specified is too large. Please supply a timeout equal to or less than {Int32.MaxValue - CommandTimeoutAdditionSeconds} seconds'', nameof(timeout));", span="65-66"];
d26 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
d27 [cluster="Unk.nameof", label="Entry Unk.nameof", span=""];
d28 [cluster="string.IsNullOrEmpty(string)", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
d29 [cluster="System.ArgumentException.ArgumentException(string, string)", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
d30 [cluster="System.TimeSpan.FromMilliseconds(double)", label="Entry System.TimeSpan.FromMilliseconds(double)", span="0-0"];
n67 -> n17  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServer", style=dashed];
n67 -> n39  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServer", style=dashed];
n67 -> n45  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServer", style=dashed];
n67 -> n48  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServer", style=dashed];
n67 -> n49  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServer", style=dashed];
n67 -> n50  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServer", style=dashed];
n67 -> n51  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServer", style=dashed];
n8 -> n11  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
n8 -> n13  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>", style=dashed];
n8 -> n18  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
n8 -> n19  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>", style=dashed];
n8 -> n22  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
n8 -> n23  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
n8 -> n24  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
n16 -> n18  [color=darkseagreen4, key=1, label=processes, style=dashed];
n16 -> n19  [color=darkseagreen4, key=1, label=processes, style=dashed];
n43 -> n48  [color=darkseagreen4, key=1, label=processes, style=dashed];
n43 -> n49  [color=darkseagreen4, key=1, label=processes, style=dashed];
n43 -> n50  [color=darkseagreen4, key=1, label=processes, style=dashed];
n43 -> n51  [color=darkseagreen4, key=1, label=processes, style=dashed];
n43 -> n52  [color=darkseagreen4, key=1, label=processes, style=dashed];
n44 -> n47  [color=darkseagreen4, key=1, label=i, style=dashed];
n47 -> n47  [color=darkseagreen4, key=1, label=i, style=dashed];
d95 -> d49  [color=green, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
d95 -> d15  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
d95 -> d17  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
d95 -> d19  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
d95 -> d21  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
d95 -> d24  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
d95 -> d38  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
d95 -> d41  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
d95 -> d43  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
d95 -> d44  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
d95 -> d46  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
d95 -> d47  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
d95 -> d48  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
d95 -> d55  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
d95 -> d56  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
d53 -> d87  [color=darkseagreen4, key=1, label=string, style=dashed];
d53 -> d90  [color=darkseagreen4, key=1, label=IDbConnection, style=dashed];
d53 -> d93  [color=darkseagreen4, key=1, label=string, style=dashed];
d33 -> d62  [color=green, key=1, label="System.TimeSpan", style=dashed];
d33 -> d64  [color=green, key=1, label=string, style=dashed];
d33 -> d70  [color=green, key=1, label=IDbConnection, style=dashed];
d33 -> d75  [color=darkseagreen4, key=1, label=string, style=dashed];
d33 -> d76  [color=darkseagreen4, key=1, label=string, style=dashed];
d63 -> d70  [color=green, key=1, label=parameters, style=dashed];
d63 -> d65  [color=green, key=1, label=parameters, style=dashed];
d63 -> d66  [color=green, key=1, label=parameters, style=dashed];
d63 -> d67  [color=green, key=1, label=parameters, style=dashed];
d63 -> d68  [color=green, key=1, label=parameters, style=dashed];
d63 -> d69  [color=green, key=1, label=parameters, style=dashed];
d71 -> d74  [color=darkseagreen4, key=1, label=lockResult, style=dashed];
d71 -> d75  [color=darkseagreen4, key=1, label=lockResult, style=dashed];
d86 -> d88  [color=darkseagreen4, key=1, label=parameters, style=dashed];
d86 -> d89  [color=darkseagreen4, key=1, label=parameters, style=dashed];
d86 -> d90  [color=darkseagreen4, key=1, label=parameters, style=dashed];
d4 -> d19  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
d4 -> d6  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
d4 -> d7  [color=darkseagreen4, key=1, label=string, style=dashed];
d4 -> d8  [color=darkseagreen4, key=1, label=string, style=dashed];
d4 -> d9  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
d11 -> d17  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
d11 -> d11  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
d91 -> d93  [color=darkseagreen4, key=1, label=releaseResult, style=dashed];
d9 -> d9  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
}
