digraph  {
m0_7 [cluster="Unk.NotNull", file="MsmqJobQueueProviderFacts.cs", label="Entry Unk.NotNull", span=""];
m0_5 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", file="MsmqJobQueueProviderFacts.cs", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", span="29-29"];
m0_14 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", file="MsmqJobQueueProviderFacts.cs", label="return new MsmqJobQueueProvider(\r\n                CleanMsmqQueueAttribute.PathPattern,\r\n                Queues,\r\n                MsmqTransactionType.Internal);", span="31-34"];
m0_15 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", file="MsmqJobQueueProviderFacts.cs", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", span="29-29"];
m0_0 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", span="10-10"];
m0_1 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs", label="var provider = CreateProvider()", span="12-12"];
m0_3 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs", label="Assert.NotNull(jobQueue)", span="16-16"];
m0_4 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", span="10-10"];
m0_6 [cluster="Unk.GetJobQueue", file="MsmqJobQueueProviderFacts.cs", label="Entry Unk.GetJobQueue", span=""];
m0_8 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="20-20"];
m0_9 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs", label="var provider = CreateProvider()", span="22-22"];
m0_11 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs", label="Assert.NotNull(monitoring)", span="26-26"];
m0_12 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="20-20"];
m0_16 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.MsmqJobQueueProvider(string, System.Collections.Generic.IEnumerable<string>, Hangfire.SqlServer.Msmq.MsmqTransactionType)", file="MsmqJobQueueProviderFacts.cs", label="Entry Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.MsmqJobQueueProvider(string, System.Collections.Generic.IEnumerable<string>, Hangfire.SqlServer.Msmq.MsmqTransactionType)", span="26-26"];
m0_13 [cluster="Unk.GetJobQueueMonitoringApi", file="MsmqJobQueueProviderFacts.cs", label="Entry Unk.GetJobQueueMonitoringApi", span=""];
m1_30 [cluster="HangFire.Server.DequeuedJobsWatcher.FindAndRequeueTimedOutJobs()", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Server.DequeuedJobsWatcher.FindAndRequeueTimedOutJobs()", span="32-32"];
m1_25 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.WhenTimedOutJobsHandlerRuns()", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Tests.DequeuedJobsWatcherSteps.WhenTimedOutJobsHandlerRuns()", span="39-39"];
m1_27 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.WhenTimedOutJobsHandlerRuns()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="watcher.FindAndRequeueTimedOutJobs()", prediction=0, span="43-43"];
m1_26 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.WhenTimedOutJobsHandlerRuns()", file="RabbitMqJobQueueFacts.cs", label="var watcher = new DequeuedJobsWatcher(RedisFactory.BasicManager)", span="41-41"];
m1_28 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.WhenTimedOutJobsHandlerRuns()", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.Tests.DequeuedJobsWatcherSteps.WhenTimedOutJobsHandlerRuns()", span="39-39"];
m1_0 [cluster="Hangfire.Client.CreatingContext.CreatingContext(Hangfire.Client.CreateContext)", file="RabbitMqJobQueueFacts.cs", label="Entry Hangfire.Client.CreatingContext.CreatingContext(Hangfire.Client.CreateContext)", span="24-24"];
m1_1 [cluster="Hangfire.Client.CreatingContext.CreatingContext(Hangfire.Client.CreateContext)", file="RabbitMqJobQueueFacts.cs", label="Exit Hangfire.Client.CreatingContext.CreatingContext(Hangfire.Client.CreateContext)", span="24-24"];
m1_29 [cluster="HangFire.Server.DequeuedJobsWatcher.DequeuedJobsWatcher(IRedisClientsManager)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Server.DequeuedJobsWatcher.DequeuedJobsWatcher(IRedisClientsManager)", span="21-21"];
m2_7 [cluster="Unk.NotNull", file="RabbitMqJobQueueProviderFacts.cs", label="Entry Unk.NotNull", span=""];
m2_5 [cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", file="RabbitMqJobQueueProviderFacts.cs", label="Entry Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", span="32-32"];
m2_14 [cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", file="RabbitMqJobQueueProviderFacts.cs", label="ConnectionFactory configuration = new ConnectionFactory { HostName = HostName }", span="34-34"];
m2_15 [cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", file="RabbitMqJobQueueProviderFacts.cs", label="return new RabbitMqJobQueueProvider(Queue, configuration);", span="36-36"];
m2_16 [cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", file="RabbitMqJobQueueProviderFacts.cs", label="Exit Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", span="32-32"];
m2_18 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueueProvider.RabbitMqJobQueueProvider(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", file="RabbitMqJobQueueProviderFacts.cs", label="Entry Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueueProvider.RabbitMqJobQueueProvider(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", span="13-13"];
m2_8 [cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="RabbitMqJobQueueProviderFacts.cs", label="Entry Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="23-23"];
m2_9 [cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="RabbitMqJobQueueProviderFacts.cs", label="var provider = CreateProvider()", span="25-25"];
m2_10 [cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", color=green, community=0, file="RabbitMqJobQueueProviderFacts.cs", label="var monitoring = provider.GetJobQueueMonitoringApi(null)", prediction=1, span="27-27"];
m2_11 [cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="RabbitMqJobQueueProviderFacts.cs", label="Assert.NotNull(monitoring)", span="29-29"];
m2_12 [cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="RabbitMqJobQueueProviderFacts.cs", label="Exit Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="23-23"];
m2_6 [cluster="Unk.GetJobQueue", file="RabbitMqJobQueueProviderFacts.cs", label="Entry Unk.GetJobQueue", span=""];
m2_17 [cluster="ConnectionFactory.cstr", file="RabbitMqJobQueueProviderFacts.cs", label="Entry ConnectionFactory.cstr", span=""];
m2_0 [cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="RabbitMqJobQueueProviderFacts.cs", label="Entry Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", span="13-13"];
m2_1 [cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="RabbitMqJobQueueProviderFacts.cs", label="var provider = CreateProvider()", span="15-15"];
m2_2 [cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", color=green, community=0, file="RabbitMqJobQueueProviderFacts.cs", label="var jobQueue = provider.GetJobQueue(null)", prediction=2, span="17-17"];
m2_3 [cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="RabbitMqJobQueueProviderFacts.cs", label="Assert.NotNull(jobQueue)", span="19-19"];
m2_4 [cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="RabbitMqJobQueueProviderFacts.cs", label="Exit Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", span="13-13"];
m2_13 [cluster="Unk.GetJobQueueMonitoringApi", file="RabbitMqJobQueueProviderFacts.cs", label="Entry Unk.GetJobQueueMonitoringApi", span=""];
m3_342 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="239-239"];
m3_601 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", span="853-853"];
m3_602 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetRangeFromSet(null, 0, 1));\r\n            })", span="855-858"];
m3_603 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", span="853-853"];
m3_134 [cluster="Hangfire.Storage.InvocationData.Deserialize()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="40-40"];
m3_600 [cluster="System.Collections.Generic.List<T>.List()", file="SqlServerConnectionFacts.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m3_380 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="286-286"];
m3_36 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="52-52"];
m3_789 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", span="1168-1168"];
m3_791 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field-1'', value = ''1'' },\r\n                    new { key = ''hash-1'', field = ''field-2'', value = ''2'' },\r\n                    new { key = ''hash-2'', field = ''field-1'', value = ''3'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetValueFromHash(''hash-1'', ''field-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(''1'', result);\r\n            })", span="1174-1189"];
m3_790 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [Value])\r\nvalues (@key, @field, @value)''", span="1170-1172"];
m3_792 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", span="1168-1168"];
m3_457 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="644-644"];
m3_458 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))))", span="646-647"];
m3_459 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="644-644"];
m3_439 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="323-323"];
m3_343 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="492-492"];
m3_344 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)))", span="494-495"];
m3_345 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="492-492"];
m3_718 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", span="1054-1054"];
m3_719 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetListCount(''my-list'');\r\n                Assert.Equal(0, result);\r\n            })", span="1056-1060"];
m3_720 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", span="1054-1054"];
m3_646 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", span="932-932"];
m3_648 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''counter-1'', value = 12 },\r\n                    new { key = ''counter-2'', value = 15 }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetCounter(''counter-1'');\r\n\r\n                Assert.Equal(12, result);\r\n            })", span="938-951"];
m3_647 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.AggregatedCounter ([Key], [Value])\r\nvalues (@key, @value)''", span="934-936"];
m3_649 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", span="932-932"];
m3_843 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", span="1262-1262"];
m3_845 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''2'' },\r\n                    new { key = ''list-1'', value = ''3'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetAllItemsFromList(''list-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(new [] { ''3'', ''1'' }, result);\r\n            })", span="1268-1283"];
m3_844 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.List ([Key], Value)\r\nvalues (@key, @value)''", span="1264-1266"];
m3_846 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", span="1262-1262"];
m3_554 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="271-271"];
m3_250 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="340-340"];
m3_251 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="342-348"];
m3_252 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="340-340"];
m3_887 [cluster="System.Action<T1, T2>.Invoke(T1, T2)", file="SqlServerConnectionFacts.cs", label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0"];
m3_322 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="456-456"];
m3_324 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single();\r\n\r\n                var value = connection.GetJobParameter(id.ToString(), ''name'');\r\n\r\n                Assert.Equal(''value'', value);\r\n            })", span="467-476"];
m3_323 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ndeclare @id int\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nset @id = scope_identity()\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@id, @name, @value)\r\nselect @id''", span="458-465"];
m3_325 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="456-456"];
m3_283 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="399-399"];
m3_285 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', null);\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal((string) null, parameter.Value);\r\n            })", span="406-418"];
m3_284 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="401-404"];
m3_286 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="399-399"];
m3_132 [cluster="Unk.ToString", file="SqlServerConnectionFacts.cs", label="Entry Unk.ToString", span=""];
m3_836 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", span="1252-1252"];
m3_837 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllItemsFromList(''my-list'');\r\n                Assert.Empty(result);\r\n            })", span="1254-1258"];
m3_838 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", span="1252-1252"];
m3_895 [cluster="SqlServerConnection.cstr", file="SqlServerConnectionFacts.cs", label="Entry SqlServerConnection.cstr", span=""];
m3_188 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="213-213"];
m3_189 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(\r\n                connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null)))", span="215-217"];
m3_190 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="213-213"];
m3_862 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", span="1296-1296"];
m3_863 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetSetTtl(''my-set'');\r\n                Assert.True(result < TimeSpan.Zero);\r\n            })", span="1298-1302"];
m3_864 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", span="1296-1296"];
m3_429 [cluster="Unk.NotEqual", file="SqlServerConnectionFacts.cs", label="Entry Unk.NotEqual", span=""];
m3_808 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="473-473"];
m3_698 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", span="1019-1019"];
m3_700 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = (DateTime?)DateTime.UtcNow.AddHours(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = (DateTime?) null }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetHashTtl(''hash-1'');\r\n\r\n                // Assert\r\n                Assert.True(TimeSpan.FromMinutes(59) < result);\r\n                Assert.True(result < TimeSpan.FromMinutes(61));\r\n            })", span="1025-1040"];
m3_699 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [ExpireAt])\r\nvalues (@key, @field, @expireAt)''", span="1021-1023"];
m3_701 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", span="1019-1019"];
m3_260 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="352-352"];
m3_262 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''Value'', parameter.Value);\r\n            })", span="359-371"];
m3_261 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="354-357"];
m3_263 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="352-352"];
m3_332 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="480-480"];
m3_333 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="482-488"];
m3_334 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="480-480"];
m3_771 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="432-432"];
m3_409 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="587-587"];
m3_410 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null)))", span="589-590"];
m3_411 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="587-587"];
m3_751 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", span="1109-1109"];
m3_753 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = (DateTime?) DateTime.UtcNow.AddHours(1) },\r\n                    new { key = ''list-2'', expireAt = (DateTime?) null }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetListTtl(''list-1'');\r\n\r\n                // Assert\r\n                Assert.True(TimeSpan.FromMinutes(59) < result);\r\n                Assert.True(result < TimeSpan.FromMinutes(61));\r\n            })", span="1115-1130"];
m3_752 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.List ([Key], [ExpireAt])\r\nvalues (@key, @expireAt)''", span="1111-1113"];
m3_754 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", span="1109-1109"];
m3_368 [cluster="Unk.Execute", file="SqlServerConnectionFacts.cs", label="Entry Unk.Execute", span=""];
m3_218 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", span="268-268"];
m3_220 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var data = new Dictionary<string, string>\r\n                {\r\n                    { ''key'', ''Value'' }\r\n                };\r\n\r\n                var jobId = (int)sql.Query(\r\n                    arrangeSql,\r\n                    new { name = ''Name'', reason = ''Reason'', @data = JobHelper.ToJson(data) }).Single().Id;\r\n\r\n                var result = connection.GetStateData(jobId.ToString());\r\n                Assert.NotNull(result);\r\n\r\n                Assert.Equal(''Value'', result.Data[''Key'']);\r\n            })", span="284-299"];
m3_219 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues ('', '', '', getutcdate());\r\ndeclare @JobId int;\r\nset @JobId = scope_identity();\r\ninsert into HangFire.State (JobId, Name, CreatedAt)\r\nvalues (@JobId, 'old-state', getutcdate());\r\ninsert into HangFire.State (JobId, Name, Reason, Data, CreatedAt)\r\nvalues (@JobId, @name, @reason, @data, getutcdate());\r\ndeclare @StateId int;\r\nset @StateId = scope_identity();\r\nupdate HangFire.Job set StateId = @StateId;\r\nselect @JobId as Id;''", span="270-282"];
m3_221 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", span="268-268"];
m3_637 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", span="907-907"];
m3_639 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''counter-1'', value = 1 },\r\n                    new { key = ''counter-2'', value = 1 },\r\n                    new { key = ''counter-1'', value = 1 }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetCounter(''counter-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result);\r\n            })", span="913-928"];
m3_638 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Counter ([Key], [Value])\r\nvalues (@key, @value)''", span="909-911"];
m3_640 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", span="907-907"];
m3_238 [cluster="Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", span="26-26"];
m3_826 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", span="1242-1242"];
m3_827 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetAllItemsFromList(null));\r\n            })", span="1244-1248"];
m3_828 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", span="1242-1242"];
m3_467 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="335-335"];
m3_6 [cluster="Mock<IPersistentJobQueue>.cstr", file="SqlServerConnectionFacts.cs", label="Entry Mock<IPersistentJobQueue>.cstr", span=""];
m3_381 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="544-544"];
m3_382 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null));\r\n\r\n                Assert.Equal(''context'', exception.ParamName);\r\n            })", span="546-552"];
m3_383 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="544-544"];
m3_743 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="456-456"];
m3_664 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="404-404"];
m3_184 [cluster="int.ToString()", file="SqlServerConnectionFacts.cs", label="Entry int.ToString()", span="0-0"];
m3_305 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="434-434"];
m3_306 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="436-442"];
m3_307 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="434-434"];
m3_182 [cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="67-67"];
m3_229 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="303-303"];
m3_231 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result.LoadException);\r\n            })", span="310-324"];
m3_230 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="305-308"];
m3_232 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="303-303"];
m3_869 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", span="1306-1306"];
m3_871 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = (DateTime?) DateTime.UtcNow.AddMinutes(60) },\r\n                    new { key = ''set-2'', value = ''2'', expireAt = (DateTime?) null }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetSetTtl(''set-1'');\r\n\r\n                // Assert\r\n                Assert.True(TimeSpan.FromMinutes(59) < result);\r\n                Assert.True(result < TimeSpan.FromMinutes(61));\r\n            })", span="1312-1327"];
m3_870 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [ExpireAt], [Score])\r\nvalues (@key, @value, @expireAt, 0.0)''", span="1308-1310"];
m3_872 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", span="1306-1306"];
m3_629 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="389-389"];
m3_135 [cluster="System.DateTime.AddDays(double)", file="SqlServerConnectionFacts.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m3_418 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="311-311"];
m3_7 [cluster="Mock<IPersistentJobQueueProvider>.cstr", file="SqlServerConnectionFacts.cs", label="Entry Mock<IPersistentJobQueueProvider>.cstr", span=""];
m3_133 [cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39"];
m3_545 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", span="766-766"];
m3_546 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetAllEntriesFromHash(null)))", span="768-769"];
m3_547 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", span="766-766"];
m3_490 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", span="682-682"];
m3_491 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllItemsFromSet(''some-set'');\r\n\r\n                Assert.NotNull(result);\r\n                Assert.Equal(0, result.Count);\r\n            })", span="684-690"];
m3_492 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", span="682-682"];
m3_198 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", span="221-221"];
m3_199 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetStateData(''1'');\r\n                Assert.Null(result);\r\n            })", span="223-227"];
m3_200 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", span="221-221"];
m3_555 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", span="773-773"];
m3_556 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllEntriesFromHash(''some-hash'');\r\n                Assert.Null(result);\r\n            })", span="775-779"];
m3_557 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", span="773-773"];
m3_419 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", span="594-594"];
m3_421 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.RemoveServer(''Server1'');\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase);\r\n            })", span="602-610"];
m3_420 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues \r\n('Server1', '', getutcdate()),\r\n('Server2', '', getutcdate())''", span="596-600"];
m3_422 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", span="594-594"];
m3_15 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="32-32"];
m3_16 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=green, community=0, file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerConnection(null))", prediction=3, span="34-35"];
m3_17 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=green, community=0, file="SqlServerConnectionFacts.cs", label="Assert.Equal(''storage'', exception.ParamName)", prediction=4, span="37-37"];
m3_18 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="32-32"];
m3_562 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", span="783-783"];
m3_564 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''some-hash'', field = ''Key1'', value = ''Value1'' },\r\n                    new { key = ''some-hash'', field = ''Key2'', value = ''Value2'' },\r\n                    new { key = ''another-hash'', field = ''Key3'', value = ''Value3'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetAllEntriesFromHash(''some-hash'');\r\n\r\n                // Assert\r\n                Assert.NotNull(result);\r\n                Assert.Equal(2, result.Count);\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="789-807"];
m3_563 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [Value])\r\nvalues (@key, @field, @value)''", span="785-787"];
m3_565 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", span="783-783"];
m3_761 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", span="1134-1134"];
m3_762 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetValueFromHash(null, ''name''));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="1136-1142"];
m3_763 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", span="1134-1134"];
m3_691 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", span="1009-1009"];
m3_692 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetHashTtl(''my-hash'');\r\n                Assert.True(result < TimeSpan.Zero);\r\n            })", span="1011-1015"];
m3_693 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", span="1009-1009"];
m3_772 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", span="1146-1146"];
m3_773 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetValueFromHash(''key'', null));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="1148-1154"];
m3_774 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", span="1146-1146"];
m3_391 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="556-556"];
m3_392 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                };\r\n                connection.AnnounceServer(''server'', context1);\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', server.Id);\r\n                Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data);\r\n                Assert.NotNull(server.LastHeartbeat);\r\n\r\n                var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                };\r\n                connection.AnnounceServer(''server'', context2);\r\n                var sameServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', sameServer.Id);\r\n                Assert.Contains(''1000'', sameServer.Data);\r\n            })", span="558-583"];
m3_393 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="556-556"];
m3_185 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="189-189"];
m3_11 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="25-25"];
m3_12 [cluster="lambda expression", color=green, community=0, file="SqlServerConnectionFacts.cs", label="x.GetJobQueue()", prediction=5, span="25-25"];
m3_13 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="25-25"];
m3_21 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="35-35"];
m3_22 [cluster="lambda expression", color=green, community=0, file="SqlServerConnectionFacts.cs", label="new SqlServerConnection(null)", prediction=6, span="35-35"];
m3_23 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="35-35"];
m3_897 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1347-1347"];
m3_898 [cluster="lambda expression", color=green, community=0, file="SqlServerConnectionFacts.cs", label="x.QueueProviders", prediction=7, span="1347-1347"];
m3_899 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1347-1347"];
m3_33 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="_queue.Verify(x => x.Dequeue(queues, token))", span="50-50"];
m3_49 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="_providers.Add(anotherProvider.Object, new [] { ''critical'' })", span="61-61"];
m3_50 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<InvalidOperationException>(\r\n                    () => connection.FetchNextJob(new[] { ''critical'', ''default'' }, token))", span="63-64"];
m3_78 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero))", span="93-98"];
m3_90 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero))", span="109-114"];
m3_152 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null))", span="165-166"];
m3_192 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null))", span="216-217"];
m3_243 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''))", span="332-333"];
m3_254 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''))", span="344-345"];
m3_298 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''))", span="426-427"];
m3_309 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null))", span="438-439"];
m3_327 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single()", span="469-471"];
m3_336 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1))", span="484-485"];
m3_347 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1))", span="494-495"];
m3_373 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()))", span="536-537"];
m3_385 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null))", span="548-549"];
m3_413 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null))", span="589-590"];
m3_434 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null))", span="616-617"];
m3_461 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5)))", span="646-647"];
m3_484 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(() => connection.GetAllItemsFromSet(null))", span="678-678"];
m3_513 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(null, new Dictionary<string, string>()))", span="725-726"];
m3_524 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(''some-hash'', null))", span="737-738"];
m3_549 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(() => connection.GetAllEntriesFromHash(null))", span="769-769"];
m3_578 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetSetCount(null))", span="815-816"];
m3_605 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(() => connection.GetRangeFromSet(null, 0, 1))", span="857-857"];
m3_624 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetCounter(null))", span="891-892"];
m3_659 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(() => connection.GetHashCount(null))", span="959-959"];
m3_685 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetHashTtl(null))", span="1003-1004"];
m3_712 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetListCount(null))", span="1048-1049"];
m3_738 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetListTtl(null))", span="1093-1094"];
m3_765 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetValueFromHash(null, ''name''))", span="1138-1139"];
m3_776 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetValueFromHash(''key'', null))", span="1150-1151"];
m3_802 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetRangeFromList(null, 0, 1))", span="1197-1198"];
m3_830 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetAllItemsFromList(null))", span="1246-1247"];
m3_856 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(() => connection.GetSetTtl(null))", span="1291-1291"];
m3_79 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''job'', exception.ParamName)", span="100-100"];
m3_91 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''parameters'', exception.ParamName)", span="116-116"];
m3_112 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(createdAt, sqlJob.CreatedAt)", span="137-137"];
m3_111 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(jobId, sqlJob.Id.ToString())", span="136-136"];
m3_113 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(null, (int?) sqlJob.StateId)", span="138-138"];
m3_114 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(null, (string) sqlJob.StateName)", span="139-139"];
m3_118 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(typeof(SqlServerConnectionFacts), job.Type)", span="145-145"];
m3_119 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''SampleMethod'', job.Method.Name)", span="146-146"];
m3_120 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''\''Hello\'''', job.Arguments[0])", span="147-147"];
m3_124 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value1'', parameters[''Key1''])", span="157-157"];
m3_125 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value2'', parameters[''Key2''])", span="158-158"];
m3_176 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Succeeded'', result.State)", span="204-204"];
m3_177 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Arguments'', result.Job.Arguments[0])", span="205-205"];
m3_214 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Name'', result.Name)", span="261-261"];
m3_215 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Reason'', result.Reason)", span="262-262"];
m3_216 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value'', result.Data[''Key''])", span="263-263"];
m3_227 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value'', result.Data[''Key''])", span="298-298"];
m3_244 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''id'', exception.ParamName)", span="335-335"];
m3_255 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''name'', exception.ParamName)", span="347-347"];
m3_269 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value'', parameter.Value)", span="370-370"];
m3_281 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''AnotherValue'', parameter.Value)", span="394-394"];
m3_292 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal((string) null, parameter.Value)", span="417-417"];
m3_299 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''id'', exception.ParamName)", span="429-429"];
m3_310 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''name'', exception.ParamName)", span="441-441"];
m3_329 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''value'', value)", span="475-475"];
m3_337 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="487-487"];
m3_366 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''-1.0'', result)", span="527-527"];
m3_374 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''serverId'', exception.ParamName)", span="539-539"];
m3_386 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''context'', exception.ParamName)", span="551-551"];
m3_398 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''server'', server.Id)", span="568-568"];
m3_404 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''server'', sameServer.Id)", span="581-581"];
m3_449 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(2012, servers[''server2''].Year)", span="639-639"];
m3_476 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''server2'', liveServer.Id)", span="670-670"];
m3_496 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(0, result.Count)", span="689-689"];
m3_505 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(2, result.Count)", span="714-714"];
m3_514 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="728-728"];
m3_525 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="740-740"];
m3_536 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value1'', result[''Key1''])", span="760-760"];
m3_537 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value2'', result[''Key2''])", span="761-761"];
m3_570 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(2, result.Count)", span="804-804"];
m3_571 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value1'', result[''Key1''])", span="805-805"];
m3_572 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value2'', result[''Key2''])", span="806-806"];
m3_589 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(0, result)", span="826-826"];
m3_598 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(2, result)", span="848-848"];
m3_618 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(new [] { ''3'', ''4'' }, result)", span="882-882"];
m3_635 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(0, result)", span="902-902"];
m3_644 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(2, result)", span="927-927"];
m3_653 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(12, result)", span="950-950"];
m3_670 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(0, result)", span="969-969"];
m3_679 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(2, result)", span="994-994"];
m3_723 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(0, result)", span="1059-1059"];
m3_732 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(2, result)", span="1084-1084"];
m3_766 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="1141-1141"];
m3_777 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''name'', exception.ParamName)", span="1153-1153"];
m3_796 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''1'', result)", span="1188-1188"];
m3_803 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="1200-1200"];
m3_824 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(new [] { ''4'', ''3'' }, result)", span="1237-1237"];
m3_850 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(new [] { ''3'', ''1'' }, result)", span="1282-1282"];
m3_29 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="43-51"];
m3_30 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var token = new CancellationToken()", span="45-45"];
m3_32 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.FetchNextJob(queues, token)", span="48-48"];
m3_31 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var queues = new[] { ''default'' }", span="46-46"];
m3_34 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="43-51"];
m3_38 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="50-50"];
m3_46 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="57-65"];
m3_48 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var anotherProvider = new Mock<IPersistentJobQueueProvider>()", span="60-60"];
m3_59 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="71-75"];
m3_68 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="81-85"];
m3_77 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="91-101"];
m3_89 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="107-117"];
m3_105 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="123-159"];
m3_151 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="165-166"];
m3_161 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="172-176"];
m3_170 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="187-209"];
m3_191 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="216-217"];
m3_201 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="223-227"];
m3_209 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="247-264"];
m3_222 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="284-299"];
m3_233 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="310-324"];
m3_242 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="330-336"];
m3_253 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="342-348"];
m3_264 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="359-371"];
m3_275 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="382-395"];
m3_287 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="406-418"];
m3_297 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="424-430"];
m3_308 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="436-442"];
m3_318 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="448-452"];
m3_326 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="467-476"];
m3_335 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="482-488"];
m3_346 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="494-495"];
m3_355 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="501-507"];
m3_363 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="521-528"];
m3_372 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="534-540"];
m3_384 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="546-552"];
m3_394 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="558-583"];
m3_412 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="589-590"];
m3_423 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="602-610"];
m3_433 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="616-617"];
m3_444 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="629-640"];
m3_460 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="646-647"];
m3_472 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="657-671"];
m3_483 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="677-678"];
m3_493 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="684-690"];
m3_502 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="700-717"];
m3_512 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="723-729"];
m3_523 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="735-741"];
m3_533 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="747-762"];
m3_548 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="768-769"];
m3_558 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="775-779"];
m3_566 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="789-807"];
m3_577 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="813-817"];
m3_587 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="823-827"];
m3_595 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="837-849"];
m3_604 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="855-858"];
m3_615 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="868-883"];
m3_623 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="889-893"];
m3_633 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="899-903"];
m3_641 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="913-928"];
m3_650 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="938-951"];
m3_658 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="957-960"];
m3_668 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="966-970"];
m3_676 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="980-995"];
m3_684 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1001-1005"];
m3_694 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1011-1015"];
m3_702 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1025-1040"];
m3_711 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1046-1050"];
m3_721 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1056-1060"];
m3_729 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1070-1085"];
m3_737 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1091-1095"];
m3_747 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1101-1105"];
m3_755 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1115-1130"];
m3_764 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1136-1142"];
m3_775 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1148-1154"];
m3_785 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1160-1164"];
m3_793 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1174-1189"];
m3_801 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1195-1201"];
m3_812 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1207-1211"];
m3_821 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1221-1238"];
m3_829 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1244-1248"];
m3_839 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1254-1258"];
m3_847 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1268-1283"];
m3_855 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1289-1292"];
m3_865 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1298-1302"];
m3_873 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1312-1327"];
m3_47 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var token = new CancellationToken()", span="59-59"];
m3_51 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="57-65"];
m3_53 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="64-64"];
m3_81 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="94-98"];
m3_93 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="110-114"];
m3_153 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="165-166"];
m3_154 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="166-166"];
m3_193 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="216-217"];
m3_194 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="217-217"];
m3_246 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="333-333"];
m3_257 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="345-345"];
m3_301 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="427-427"];
m3_312 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="439-439"];
m3_328 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var value = connection.GetJobParameter(id.ToString(), ''name'')", span="473-473"];
m3_339 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="485-485"];
m3_348 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="494-495"];
m3_349 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="495-495"];
m3_376 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="537-537"];
m3_388 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="549-549"];
m3_414 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="589-590"];
m3_415 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="590-590"];
m3_435 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="616-617"];
m3_436 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="617-617"];
m3_462 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="646-647"];
m3_463 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="647-647"];
m3_485 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="677-678"];
m3_486 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="678-678"];
m3_516 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="726-726"];
m3_527 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="738-738"];
m3_550 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="768-769"];
m3_551 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="769-769"];
m3_579 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="813-817"];
m3_580 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="816-816"];
m3_606 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="855-858"];
m3_607 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="857-857"];
m3_625 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="889-893"];
m3_626 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="892-892"];
m3_660 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="957-960"];
m3_661 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="959-959"];
m3_686 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1001-1005"];
m3_687 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1004-1004"];
m3_713 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1046-1050"];
m3_714 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1049-1049"];
m3_739 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1091-1095"];
m3_740 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1094-1094"];
m3_768 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1139-1139"];
m3_779 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1151-1151"];
m3_805 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1198-1198"];
m3_831 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1244-1248"];
m3_832 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1247-1247"];
m3_857 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1289-1292"];
m3_858 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1291-1291"];
m3_80 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="91-101"];
m3_92 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="107-117"];
m3_106 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var createdAt = new DateTime(2012, 12, 12)", span="125-125"];
m3_110 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var sqlJob = sql.Query(''select * from HangFire.Job'').Single()", span="135-135"];
m3_107 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    createdAt,\r\n                    TimeSpan.FromDays(1))", span="126-130"];
m3_115 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData)", span="141-141"];
m3_117 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var job = invocationData.Deserialize()", span="144-144"];
m3_121 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(createdAt.AddDays(1).AddMinutes(-1) < sqlJob.ExpireAt)", span="149-149"];
m3_123 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value)", span="152-155"];
m3_126 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="123-159"];
m3_173 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="200-200"];
m3_175 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(result.Job)", span="203-203"];
m3_178 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Null(result.LoadException)", span="206-206"];
m3_212 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetStateData(jobId.ToString())", span="258-258"];
m3_213 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(result)", span="259-259"];
m3_217 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="247-264"];
m3_225 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetStateData(jobId.ToString())", span="295-295"];
m3_226 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(result)", span="296-296"];
m3_228 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="284-299"];
m3_245 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="330-336"];
m3_256 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="342-348"];
m3_268 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="366-368"];
m3_270 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="359-371"];
m3_280 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="390-392"];
m3_282 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="382-395"];
m3_291 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="413-415"];
m3_293 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="406-418"];
m3_300 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="424-430"];
m3_311 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="436-442"];
m3_330 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="467-476"];
m3_338 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="482-488"];
m3_365 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0)", span="525-525"];
m3_367 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="521-528"];
m3_375 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="534-540"];
m3_387 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="546-552"];
m3_397 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="567-567"];
m3_399 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data)", span="569-571"];
m3_403 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var sameServer = sql.Query(''select * from HangFire.Server'').Single()", span="580-580"];
m3_405 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Contains(''1000'', sameServer.Data)", span="582-582"];
m3_447 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime)x.LastHeartbeat)", span="635-636"];
m3_448 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotEqual(2012, servers[''server1''].Year)", span="638-638"];
m3_450 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="629-640"];
m3_475 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var liveServer = sql.Query(''select * from HangFire.Server'').Single()", span="669-669"];
m3_477 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="657-671"];
m3_494 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetAllItemsFromSet(''some-set'')", span="686-686"];
m3_495 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(result)", span="688-688"];
m3_497 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="684-690"];
m3_504 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetAllItemsFromSet(''some-set'')", span="711-711"];
m3_506 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Contains(''1'', result)", span="715-715"];
m3_515 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="723-729"];
m3_526 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="735-741"];
m3_535 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="755-758"];
m3_538 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="747-762"];
m3_568 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetAllEntriesFromHash(''some-hash'')", span="800-800"];
m3_569 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(result)", span="803-803"];
m3_573 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="789-807"];
m3_588 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetSetCount(''my-set'')", span="825-825"];
m3_590 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="823-827"];
m3_597 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetSetCount(''set-1'')", span="846-846"];
m3_599 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="837-849"];
m3_617 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetRangeFromSet(''set-1'', 2, 3)", span="880-880"];
m3_619 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="868-883"];
m3_634 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetCounter(''my-counter'')", span="901-901"];
m3_636 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="899-903"];
m3_643 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetCounter(''counter-1'')", span="924-924"];
m3_645 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="913-928"];
m3_652 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetCounter(''counter-1'')", span="948-948"];
m3_654 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="938-951"];
m3_669 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetHashCount(''my-hash'')", span="968-968"];
m3_671 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="966-970"];
m3_678 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetHashCount(''hash-1'')", span="991-991"];
m3_680 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="980-995"];
m3_722 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetListCount(''my-list'')", span="1058-1058"];
m3_724 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1056-1060"];
m3_731 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetListCount(''list-1'')", span="1081-1081"];
m3_733 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1070-1085"];
m3_767 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1136-1142"];
m3_778 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1148-1154"];
m3_795 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetValueFromHash(''hash-1'', ''field-1'')", span="1185-1185"];
m3_797 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1174-1189"];
m3_804 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1195-1201"];
m3_823 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetRangeFromList(''list-1'', 1, 2)", span="1234-1234"];
m3_825 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1221-1238"];
m3_849 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetAllItemsFromList(''list-1'')", span="1279-1279"];
m3_851 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1268-1283"];
m3_39 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="x.Dequeue(queues, token)", span="50-50"];
m3_40 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="50-50"];
m3_54 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.FetchNextJob(new[] { ''critical'', ''default'' }, token)", span="64-64"];
m3_62 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="71-75"];
m3_60 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var transaction = connection.CreateWriteTransaction()", span="73-73"];
m3_71 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="81-85"];
m3_69 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var @lock = connection.AcquireDistributedLock(''1'', TimeSpan.FromSeconds(1))", span="83-83"];
m3_82 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero)", span="94-98"];
m3_98 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="SampleMethod(''hello'')", span="111-111"];
m3_140 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="SampleMethod(''Hello'')", span="127-127"];
m3_186 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="SampleMethod(''wrong'')", span="189-189"];
m3_94 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero)", span="110-114"];
m3_155 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetJobData(null)", span="166-166"];
m3_164 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="172-176"];
m3_162 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetJobData(''1'')", span="174-174"];
m3_172 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="191-198"];
m3_181 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="187-209"];
m3_171 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var job = Job.FromExpression(() => SampleMethod(''wrong''))", span="189-189"];
m3_195 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetStateData(null)", span="217-217"];
m3_204 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="223-227"];
m3_202 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetStateData(''1'')", span="225-225"];
m3_211 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var jobId = (int)sql.Query(\r\n                    arrangeSql,\r\n                    new { name = ''Name'', reason = ''Reason'', @data = JobHelper.ToJson(data) }).Single().Id", span="254-256"];
m3_210 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var data = new Dictionary<string, string>\r\n                {\r\n                    { ''Key'', ''Value'' }\r\n                }", span="249-252"];
m3_224 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var jobId = (int)sql.Query(\r\n                    arrangeSql,\r\n                    new { name = ''Name'', reason = ''Reason'', @data = JobHelper.ToJson(data) }).Single().Id", span="291-293"];
m3_223 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var data = new Dictionary<string, string>\r\n                {\r\n                    { ''key'', ''Value'' }\r\n                }", span="286-289"];
m3_234 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="312-319"];
m3_237 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="310-324"];
m3_235 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="321-321"];
m3_247 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetJobParameter(null, ''name'', ''value'')", span="333-333"];
m3_258 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetJobParameter(''1'', null, ''value'')", span="345-345"];
m3_265 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var job = sql.Query(arrangeSql).Single()", span="361-361"];
m3_267 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="364-364"];
m3_276 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var job = sql.Query(arrangeSql).Single()", span="384-384"];
m3_278 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="387-387"];
m3_279 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'')", span="388-388"];
m3_288 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var job = sql.Query(arrangeSql).Single()", span="408-408"];
m3_290 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetJobParameter(jobId, ''Name'', null)", span="411-411"];
m3_302 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetJobParameter(null, ''hello'')", span="427-427"];
m3_313 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetJobParameter(''1'', null)", span="439-439"];
m3_321 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="448-452"];
m3_319 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var value = connection.GetJobParameter(''1'', ''hello'')", span="450-450"];
m3_340 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetFirstByLowestScoreFromSet(null, 0, 1)", span="485-485"];
m3_350 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)", span="495-495"];
m3_358 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="501-507"];
m3_356 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1)", span="503-504"];
m3_364 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql)", span="523-523"];
m3_377 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.AnnounceServer(null, new ServerContext())", span="537-537"];
m3_389 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.AnnounceServer(''server'', null)", span="549-549"];
m3_406 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="558-583"];
m3_395 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                }", span="560-564"];
m3_396 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.AnnounceServer(''server'', context1)", span="565-565"];
m3_402 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.AnnounceServer(''server'', context2)", span="579-579"];
m3_416 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.RemoveServer(null)", span="590-590"];
m3_424 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql)", span="604-604"];
m3_428 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="602-610"];
m3_425 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.RemoveServer(''Server1'')", span="606-606"];
m3_426 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="608-608"];
m3_437 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.Heartbeat(null)", span="617-617"];
m3_445 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql)", span="631-631"];
m3_446 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.Heartbeat(''server1'')", span="633-633"];
m3_464 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))", span="647-647"];
m3_473 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    })", span="659-665"];
m3_474 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.RemoveTimedOutServers(TimeSpan.FromHours(15))", span="667-667"];
m3_487 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetAllItemsFromSet(null)", span="678-678"];
m3_503 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''some-set'', value = ''1'' },\r\n                    new { key = ''some-set'', value = ''2'' },\r\n                    new { key = ''another-set'', value = ''3'' }\r\n                })", span="703-708"];
m3_508 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="700-717"];
m3_517 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetRangeInHash(null, new Dictionary<string, string>())", span="726-726"];
m3_528 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetRangeInHash(''some-hash'', null)", span="738-738"];
m3_534 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="749-753"];
m3_552 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetAllEntriesFromHash(null)", span="769-769"];
m3_561 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="775-779"];
m3_559 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetAllEntriesFromHash(''some-hash'')", span="777-777"];
m3_567 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''some-hash'', field = ''Key1'', value = ''Value1'' },\r\n                    new { key = ''some-hash'', field = ''Key2'', value = ''Value2'' },\r\n                    new { key = ''another-hash'', field = ''Key3'', value = ''Value3'' }\r\n                })", span="792-797"];
m3_581 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetSetCount(null)", span="816-816"];
m3_596 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new List<dynamic>\r\n                {\r\n                    new { key = ''set-1'', value = ''value-1'' },\r\n                    new { key = ''set-2'', value = ''value-1'' },\r\n                    new { key = ''set-1'', value = ''value-2'' }\r\n                })", span="839-844"];
m3_608 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetRangeFromSet(null, 0, 1)", span="857-857"];
m3_616 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new List<dynamic>\r\n                {\r\n                    new { Key = ''set-1'', Value = ''1'' },\r\n                    new { Key = ''set-1'', Value = ''2'' },\r\n                    new { Key = ''set-1'', Value = ''3'' },\r\n                    new { Key = ''set-1'', Value = ''4'' },\r\n                    new { Key = ''set-2'', Value = ''4'' },\r\n                    new { Key = ''set-1'', Value = ''5'' }\r\n                })", span="870-878"];
m3_627 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetCounter(null)", span="892-892"];
m3_642 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''counter-1'', value = 1 },\r\n                    new { key = ''counter-2'', value = 1 },\r\n                    new { key = ''counter-1'', value = 1 }\r\n                })", span="916-921"];
m3_651 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''counter-1'', value = 12 },\r\n                    new { key = ''counter-2'', value = 15 }\r\n                })", span="941-945"];
m3_662 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetHashCount(null)", span="959-959"];
m3_677 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field-1'' },\r\n                    new { key = ''hash-1'', field = ''field-2'' },\r\n                    new { key = ''hash-2'', field = ''field-1'' }\r\n                })", span="983-988"];
m3_688 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetHashTtl(null)", span="1004-1004"];
m3_697 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1011-1015"];
m3_695 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetHashTtl(''my-hash'')", span="1013-1013"];
m3_703 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = (DateTime?)DateTime.UtcNow.AddHours(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = (DateTime?) null }\r\n                })", span="1028-1032"];
m3_707 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1025-1040"];
m3_704 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetHashTtl(''hash-1'')", span="1035-1035"];
m3_715 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetListCount(null)", span="1049-1049"];
m3_730 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'' },\r\n                    new { key = ''list-1'' },\r\n                    new { key = ''list-2'' }\r\n                })", span="1073-1078"];
m3_741 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetListTtl(null)", span="1094-1094"];
m3_750 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1101-1105"];
m3_748 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetListTtl(''my-list'')", span="1103-1103"];
m3_756 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = (DateTime?) DateTime.UtcNow.AddHours(1) },\r\n                    new { key = ''list-2'', expireAt = (DateTime?) null }\r\n                })", span="1118-1122"];
m3_760 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1115-1130"];
m3_757 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetListTtl(''list-1'')", span="1125-1125"];
m3_769 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetValueFromHash(null, ''name'')", span="1139-1139"];
m3_780 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetValueFromHash(''key'', null)", span="1151-1151"];
m3_788 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1160-1164"];
m3_786 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetValueFromHash(''my-hash'', ''name'')", span="1162-1162"];
m3_794 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field-1'', value = ''1'' },\r\n                    new { key = ''hash-1'', field = ''field-2'', value = ''2'' },\r\n                    new { key = ''hash-2'', field = ''field-1'', value = ''3'' }\r\n                })", span="1177-1182"];
m3_806 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetRangeFromList(null, 0, 1)", span="1198-1198"];
m3_815 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1207-1211"];
m3_813 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetRangeFromList(''my-list'', 0, 1)", span="1209-1209"];
m3_822 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''2'' },\r\n                    new { key = ''list-1'', value = ''3'' },\r\n                    new { key = ''list-1'', value = ''4'' },\r\n                    new { key = ''list-1'', value = ''5'' }\r\n                })", span="1224-1231"];
m3_833 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetAllItemsFromList(null)", span="1247-1247"];
m3_842 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1254-1258"];
m3_840 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetAllItemsFromList(''my-list'')", span="1256-1256"];
m3_848 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''2'' },\r\n                    new { key = ''list-1'', value = ''3'' }\r\n                })", span="1271-1276"];
m3_859 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetSetTtl(null)", span="1291-1291"];
m3_868 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1298-1302"];
m3_866 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetSetTtl(''my-set'')", span="1300-1300"];
m3_874 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = (DateTime?) DateTime.UtcNow.AddMinutes(60) },\r\n                    new { key = ''set-2'', value = ''2'', expireAt = (DateTime?) null }\r\n                })", span="1315-1319"];
m3_878 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1312-1327"];
m3_875 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetSetTtl(''set-1'')", span="1322-1322"];
m3_55 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="64-64"];
m3_83 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="94-98"];
m3_95 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="110-114"];
m3_156 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="166-166"];
m3_196 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="217-217"];
m3_248 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="333-333"];
m3_259 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="345-345"];
m3_303 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="427-427"];
m3_314 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="439-439"];
m3_341 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="485-485"];
m3_351 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="495-495"];
m3_378 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="537-537"];
m3_390 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="549-549"];
m3_417 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="590-590"];
m3_438 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="617-617"];
m3_465 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="647-647"];
m3_488 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="678-678"];
m3_518 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="726-726"];
m3_529 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="738-738"];
m3_553 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="769-769"];
m3_582 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="816-816"];
m3_609 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="857-857"];
m3_628 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="892-892"];
m3_663 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="959-959"];
m3_689 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1004-1004"];
m3_716 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1049-1049"];
m3_742 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1094-1094"];
m3_770 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1139-1139"];
m3_781 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1151-1151"];
m3_807 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1198-1198"];
m3_834 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1247-1247"];
m3_860 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1291-1291"];
m3_122 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(sqlJob.ExpireAt < createdAt.AddDays(1).AddMinutes(1))", span="150-150"];
m3_109 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotEmpty(jobId)", span="133-133"];
m3_116 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="invocationData.Arguments = sqlJob.Arguments", span="142-142"];
m3_108 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(jobId)", span="132-132"];
m3_139 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="127-127"];
m3_266 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="string jobId = job.Id.ToString()", span="362-362"];
m3_277 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="string jobId = job.Id.ToString()", span="385-385"];
m3_289 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="string jobId = job.Id.ToString()", span="409-409"];
m3_142 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="155-155"];
m3_145 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="155-155"];
m3_174 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(result)", span="202-202"];
m3_179 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(-1) < result.CreatedAt)", span="207-207"];
m3_180 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(result.CreatedAt < DateTime.UtcNow.AddMinutes(1))", span="208-208"];
m3_400 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(server.LastHeartbeat)", span="572-572"];
m3_451 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="636-636"];
m3_454 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="636-636"];
m3_507 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Contains(''2'', result)", span="716-716"];
m3_539 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="758-758"];
m3_542 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="758-758"];
m3_61 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(transaction)", span="74-74"];
m3_70 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(@lock)", span="84-84"];
m3_97 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="111-111"];
m3_99 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="111-111"];
m3_141 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="127-127"];
m3_187 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="189-189"];
m3_163 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Null(result)", span="175-175"];
m3_203 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Null(result)", span="226-226"];
m3_236 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(result.LoadException)", span="323-323"];
m3_320 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Null(value)", span="451-451"];
m3_357 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Null(result)", span="506-506"];
m3_401 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                }", span="574-578"];
m3_427 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase)", span="609-609"];
m3_560 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Null(result)", span="778-778"];
m3_696 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(result < TimeSpan.Zero)", span="1014-1014"];
m3_706 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(result < TimeSpan.FromMinutes(61))", span="1039-1039"];
m3_705 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(TimeSpan.FromMinutes(59) < result)", span="1038-1038"];
m3_749 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(result < TimeSpan.Zero)", span="1104-1104"];
m3_759 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(result < TimeSpan.FromMinutes(61))", span="1129-1129"];
m3_758 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(TimeSpan.FromMinutes(59) < result)", span="1128-1128"];
m3_787 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Null(result)", span="1163-1163"];
m3_814 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Empty(result)", span="1210-1210"];
m3_841 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Empty(result)", span="1257-1257"];
m3_867 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(result < TimeSpan.Zero)", span="1301-1301"];
m3_877 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(result < TimeSpan.FromMinutes(61))", span="1326-1326"];
m3_876 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(TimeSpan.FromMinutes(59) < result)", span="1325-1325"];
m3_144 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="155-155"];
m3_143 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="(string) x.Name", span="155-155"];
m3_147 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="155-155"];
m3_146 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="(string) x.Value", span="155-155"];
m3_453 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="636-636"];
m3_452 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="(string)x.Id", span="636-636"];
m3_456 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="636-636"];
m3_455 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="(DateTime)x.LastHeartbeat", span="636-636"];
m3_541 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="758-758"];
m3_540 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="(string)x.Field", span="758-758"];
m3_543 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="(string)x.Value", span="758-758"];
m3_544 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="758-758"];
m3_672 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", span="974-974"];
m3_674 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field-1'' },\r\n                    new { key = ''hash-1'', field = ''field-2'' },\r\n                    new { key = ''hash-2'', field = ''field-1'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetHashCount(''hash-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result);\r\n            })", span="980-995"];
m3_673 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field])\r\nvalues (@key, @field)''", span="976-978"];
m3_675 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", span="974-974"];
m3_104 [cluster="Unk.UseConnections", file="SqlServerConnectionFacts.cs", label="Entry Unk.UseConnections", span=""];
m3_41 [cluster="Unk.Dequeue", file="SqlServerConnectionFacts.cs", label="Entry Unk.Dequeue", span=""];
m3_63 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="39-39"];
m3_519 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="250-250"];
m3_24 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(Hangfire.SqlServer.SqlServerStorage)", span="33-33"];
m3_9 [cluster="Unk.Returns", file="SqlServerConnectionFacts.cs", label="Entry Unk.Returns", span=""];
m3_369 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="532-532"];
m3_370 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()));\r\n\r\n                Assert.Equal(''serverId'', exception.ParamName);\r\n            })", span="534-540"];
m3_371 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="532-532"];
m3_480 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", span="675-675"];
m3_481 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetAllItemsFromSet(null)))", span="677-678"];
m3_482 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", span="675-675"];
m3_96 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="149-149"];
m3_879 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", span="1330-1330"];
m3_883 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", color=green, community=0, file="SqlServerConnectionFacts.cs", label="action(sqlConnection, connection)", prediction=8, span="1337-1337"];
m3_880 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs", label="var sqlConnection = ConnectionUtils.CreateConnection()", span="1332-1332"];
m3_882 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", color=green, community=0, file="SqlServerConnectionFacts.cs", label="var connection = new SqlServerConnection(storage)", prediction=9, span="1335-1335"];
m3_881 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", color=green, community=0, file="SqlServerConnectionFacts.cs", label="var storage = new SqlServerStorage(sqlConnection)", prediction=10, span="1334-1334"];
m3_884 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", span="1330-1330"];
m3_690 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="415-415"];
m3_239 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="328-328"];
m3_240 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="330-336"];
m3_241 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="328-328"];
m3_886 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", span="96-96"];
m3_158 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="170-170"];
m3_159 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetJobData(''1'');\r\n                Assert.Null(result);\r\n            })", span="172-176"];
m3_160 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="170-170"];
m3_56 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="69-69"];
m3_57 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var transaction = connection.CreateWriteTransaction();\r\n                Assert.NotNull(transaction);\r\n            })", span="71-75"];
m3_58 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="69-69"];
m3_136 [cluster="System.DateTime.AddMinutes(double)", file="SqlServerConnectionFacts.cs", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
m3_315 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="446-446"];
m3_316 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var value = connection.GetJobParameter(''1'', ''hello'');\r\n                Assert.Null(value);\r\n            })", span="448-452"];
m3_317 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="446-446"];
m3_45 [cluster="Unk.UseConnection", file="SqlServerConnectionFacts.cs", label="Entry Unk.UseConnection", span=""];
m3_20 [cluster="Unk.Equal", file="SqlServerConnectionFacts.cs", label="Entry Unk.Equal", span=""];
m3_708 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", span="1044-1044"];
m3_709 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetListCount(null));\r\n            })", span="1046-1050"];
m3_710 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", span="1044-1044"];
m3_100 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", span="1356-1356"];
m3_900 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", span="1356-1356"];
m3_610 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="356-356"];
m3_35 [cluster="System.Threading.CancellationToken.CancellationToken()", file="SqlServerConnectionFacts.cs", label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0"];
m3_509 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="721-721"];
m3_510 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(null, new Dictionary<string, string>()));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="723-729"];
m3_511 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="721-721"];
m3_0 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", span="20-20"];
m3_3 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", color=green, community=1, file="SqlServerConnectionFacts.cs", label="provider.Setup(x => x.GetJobQueue())\r\n                .Returns(_queue.Object)", prediction=11, span="25-26"];
m3_2 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs", label="var provider = new Mock<IPersistentJobQueueProvider>()", span="24-24"];
m3_4 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs", label="_providers = new PersistentJobQueueProviderCollection(provider.Object)", span="28-28"];
m3_1 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs", label="_queue = new Mock<IPersistentJobQueue>()", span="22-22"];
m3_5 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", span="20-20"];
m3_885 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m3_157 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", span="125-125"];
m3_894 [cluster="Mock<SqlServerStorage>.cstr", file="SqlServerConnectionFacts.cs", label="Entry Mock<SqlServerStorage>.cstr", span=""];
m3_73 [cluster="Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", span="44-44"];
m3_86 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", span="105-105"];
m3_87 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''parameters'', exception.ParamName);\r\n            })", span="107-117"];
m3_88 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", span="105-105"];
m3_591 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", span="831-831"];
m3_593 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql, new List<dynamic>\r\n                {\r\n                    new { key = ''set-1'', value = ''value-1'' },\r\n                    new { key = ''set-2'', value = ''value-1'' },\r\n                    new { key = ''set-1'', value = ''value-2'' }\r\n                });\r\n\r\n                var result = connection.GetSetCount(''set-1'');\r\n\r\n                Assert.Equal(2, result);\r\n            })", span="837-849"];
m3_592 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@key, @value, 0.0)''", span="833-835"];
m3_594 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", span="831-831"];
m3_744 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", span="1099-1099"];
m3_745 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetListTtl(''my-list'');\r\n                Assert.True(result < TimeSpan.Zero);\r\n            })", span="1101-1105"];
m3_746 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", span="1099-1099"];
m3_468 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="651-651"];
m3_470 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    });\r\n\r\n                connection.RemoveTimedOutServers(TimeSpan.FromHours(15));\r\n\r\n                var liveServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server2'', liveServer.Id);\r\n            })", span="657-671"];
m3_469 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues (@id, '', @heartbeat)''", span="653-655"];
m3_471 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="651-651"];
m3_734 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", span="1089-1089"];
m3_735 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetListTtl(null));\r\n            })", span="1091-1095"];
m3_736 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", span="1089-1089"];
m3_130 [cluster="Unk.Query", file="SqlServerConnectionFacts.cs", label="Entry Unk.Query", span=""];
m3_896 [cluster="System.Action<T>.Invoke(T)", file="SqlServerConnectionFacts.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m3_205 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", span="231-231"];
m3_207 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var data = new Dictionary<string, string>\r\n                {\r\n                    { ''Key'', ''Value'' }\r\n                };\r\n\r\n                var jobId = (int)sql.Query(\r\n                    arrangeSql,\r\n                    new { name = ''Name'', reason = ''Reason'', @data = JobHelper.ToJson(data) }).Single().Id;\r\n\r\n                var result = connection.GetStateData(jobId.ToString());\r\n                Assert.NotNull(result);\r\n\r\n                Assert.Equal(''Name'', result.Name);\r\n                Assert.Equal(''Reason'', result.Reason);\r\n                Assert.Equal(''Value'', result.Data[''Key'']);\r\n            })", span="247-264"];
m3_206 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues ('', '', '', getutcdate());\r\ndeclare @JobId int;\r\nset @JobId = scope_identity();\r\ninsert into HangFire.State (JobId, Name, CreatedAt)\r\nvalues (@JobId, 'old-state', getutcdate());\r\ninsert into HangFire.State (JobId, Name, Reason, Data, CreatedAt)\r\nvalues (@JobId, @name, @reason, @data, getutcdate());\r\ndeclare @StateId int;\r\nset @StateId = scope_identity();\r\nupdate HangFire.Job set StateId = @StateId;\r\nselect @JobId as Id;''", span="233-245"];
m3_208 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", span="231-231"];
m3_782 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", span="1158-1158"];
m3_783 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetValueFromHash(''my-hash'', ''name'');\r\n                Assert.Null(result);\r\n            })", span="1160-1164"];
m3_784 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", span="1158-1158"];
m3_52 [cluster="Unk.Add", file="SqlServerConnectionFacts.cs", label="Entry Unk.Add", span=""];
m3_64 [cluster="Unk.NotNull", file="SqlServerConnectionFacts.cs", label="Entry Unk.NotNull", span=""];
m3_42 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", span="55-55"];
m3_43 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var token = new CancellationToken();\r\n                var anotherProvider = new Mock<IPersistentJobQueueProvider>();\r\n                _providers.Add(anotherProvider.Object, new [] { ''critical'' });\r\n\r\n                Assert.Throws<InvalidOperationException>(\r\n                    () => connection.FetchNextJob(new[] { ''critical'', ''default'' }, token));\r\n            })", span="57-65"];
m3_44 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", span="55-55"];
m3_8 [cluster="Unk.Setup", file="SqlServerConnectionFacts.cs", label="Entry Unk.Setup", span=""];
m3_655 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", span="955-955"];
m3_656 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetHashCount(null));\r\n            })", span="957-960"];
m3_657 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", span="955-955"];
m3_165 [cluster="Unk.Null", file="SqlServerConnectionFacts.cs", label="Entry Unk.Null", span=""];
m3_25 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", span="41-41"];
m3_26 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var token = new CancellationToken();\r\n                var queues = new[] { ''default'' };\r\n\r\n                connection.FetchNextJob(queues, token);\r\n\r\n                _queue.Verify(x => x.Dequeue(queues, token));\r\n            })", span="43-51"];
m3_27 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", span="41-41"];
m3_498 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", span="694-694"];
m3_500 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''some-set'', value = ''1'' },\r\n                    new { key = ''some-set'', value = ''2'' },\r\n                    new { key = ''another-set'', value = ''3'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetAllItemsFromSet(''some-set'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result.Count);\r\n                Assert.Contains(''1'', result);\r\n                Assert.Contains(''2'', result);\r\n            })", span="700-717"];
m3_499 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], Score, Value)\r\nvalues (@key, 0.0, @value)''", span="696-698"];
m3_501 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", span="694-694"];
m3_10 [cluster="PersistentJobQueueProviderCollection.cstr", file="SqlServerConnectionFacts.cs", label="Entry PersistentJobQueueProviderCollection.cstr", span=""];
m3_85 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="72-72"];
m3_183 [cluster="Hangfire.Common.JobHelper.ToJson(object)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
m3_478 [cluster="System.DateTime.AddHours(double)", file="SqlServerConnectionFacts.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m3_129 [cluster="Unk.NotEmpty", file="SqlServerConnectionFacts.cs", label="Entry Unk.NotEmpty", span=""];
m3_14 [cluster="Unk.GetJobQueue", file="SqlServerConnectionFacts.cs", label="Entry Unk.GetJobQueue", span=""];
m3_816 [cluster="Unk.Empty", file="SqlServerConnectionFacts.cs", label="Entry Unk.Empty", span=""];
m3_520 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="733-733"];
m3_521 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(''some-hash'', null));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="735-741"];
m3_522 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="733-733"];
m3_665 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", span="964-964"];
m3_666 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetHashCount(''my-hash'');\r\n                Assert.Equal(0, result);\r\n            })", span="966-970"];
m3_667 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", span="964-964"];
m3_681 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", span="999-999"];
m3_682 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetHashTtl(null));\r\n            })", span="1001-1005"];
m3_683 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", span="999-999"];
m3_28 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", span="1342-1342"];
m3_888 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", color=green, community=0, file="SqlServerConnectionFacts.cs", label="var sql = ConnectionUtils.CreateConnection()", prediction=12, span="1344-1344"];
m3_889 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", color=green, community=0, file="SqlServerConnectionFacts.cs", label="var storage = new Mock<SqlServerStorage>(sql)", prediction=13, span="1346-1346"];
m3_892 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", color=green, community=0, file="SqlServerConnectionFacts.cs", label="action(connection)", prediction=14, span="1351-1351"];
m3_891 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", color=green, community=0, file="SqlServerConnectionFacts.cs", label="var connection = new SqlServerConnection(storage.Object)", prediction=15, span="1349-1349"];
m3_890 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", color=green, community=0, file="SqlServerConnectionFacts.cs", label="storage.Setup(x => x.QueueProviders).Returns(_providers)", prediction=11, span="1347-1347"];
m3_893 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", span="1342-1342"];
m3_620 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", span="887-887"];
m3_621 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetCounter(null));\r\n            })", span="889-893"];
m3_622 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", span="887-887"];
m3_37 [cluster="Unk.Verify", file="SqlServerConnectionFacts.cs", label="Entry Unk.Verify", span=""];
m3_489 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="225-225"];
m3_798 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", span="1193-1193"];
m3_799 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetRangeFromList(null, 0, 1));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="1195-1201"];
m3_800 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", span="1193-1193"];
m3_294 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="422-422"];
m3_295 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="424-430"];
m3_296 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="422-422"];
m3_407 [cluster="string.StartsWith(string)", file="SqlServerConnectionFacts.cs", label="Entry string.StartsWith(string)", span="0-0"];
m3_817 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", span="1215-1215"];
m3_819 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''2'' },\r\n                    new { key = ''list-1'', value = ''3'' },\r\n                    new { key = ''list-1'', value = ''4'' },\r\n                    new { key = ''list-1'', value = ''5'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetRangeFromList(''list-1'', 1, 2);\r\n                \r\n                // Assert\r\n                Assert.Equal(new [] { ''4'', ''3'' }, result);\r\n            })", span="1221-1238"];
m3_818 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.List ([Key], [Value])\r\nvalues (@key, @value)''", span="1217-1219"];
m3_820 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", span="1215-1215"];
m3_466 [cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerConnectionFacts.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m3_138 [cluster="Unk.ToDictionary", file="SqlServerConnectionFacts.cs", label="Entry Unk.ToDictionary", span=""];
m3_479 [cluster="System.TimeSpan.FromHours(double)", file="SqlServerConnectionFacts.cs", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
m3_74 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="89-89"];
m3_75 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''job'', exception.ParamName);\r\n            })", span="91-101"];
m3_76 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="89-89"];
m3_630 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", span="897-897"];
m3_631 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetCounter(''my-counter'');\r\n                Assert.Equal(0, result);\r\n            })", span="899-903"];
m3_632 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", span="897-897"];
m3_835 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="489-489"];
m3_852 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", span="1287-1287"];
m3_853 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetSetTtl(null));\r\n            })", span="1289-1292"];
m3_854 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", span="1287-1287"];
m3_65 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", span="79-79"];
m3_66 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var @lock = connection.AcquireDistributedLock(''1'', TimeSpan.FromSeconds(1));\r\n                Assert.NotNull(@lock);\r\n            })", span="81-85"];
m3_67 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", span="79-79"];
m3_127 [cluster="System.DateTime.DateTime(int, int, int)", file="SqlServerConnectionFacts.cs", label="Entry System.DateTime.DateTime(int, int, int)", span="0-0"];
m3_19 [cluster="Unk.>", file="SqlServerConnectionFacts.cs", label="Entry Unk.>", span=""];
m3_249 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="196-196"];
m3_574 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", span="811-811"];
m3_575 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetSetCount(null));\r\n            })", span="813-817"];
m3_576 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", span="811-811"];
m3_359 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="511-511"];
m3_361 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0);\r\n                \r\n                Assert.Equal(''-1.0'', result);\r\n            })", span="521-528"];
m3_360 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], Score, Value)\r\nvalues \r\n('key', 1.0, '1.0'),\r\n('key', -1.0, '-1.0'),\r\n('key', -5.0, '-5.0'),\r\n('another-key', -2.0, '-2.0')''", span="513-519"];
m3_362 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="511-511"];
m3_72 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerConnectionFacts.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m3_611 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", span="862-862"];
m3_613 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql, new List<dynamic>\r\n                {\r\n                    new { Key = ''set-1'', Value = ''1'' },\r\n                    new { Key = ''set-1'', Value = ''2'' },\r\n                    new { Key = ''set-1'', Value = ''3'' },\r\n                    new { Key = ''set-1'', Value = ''4'' },\r\n                    new { Key = ''set-2'', Value = ''4'' },\r\n                    new { Key = ''set-1'', Value = ''5'' }\r\n                });\r\n\r\n                var result = connection.GetRangeFromSet(''set-1'', 2, 3);\r\n\r\n                Assert.Equal(new [] { ''3'', ''4'' }, result);\r\n            })", span="868-883"];
m3_612 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@Key, @Value, 0.0)''", span="864-866"];
m3_614 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", span="862-862"];
m3_271 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="375-375"];
m3_273 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n                connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''AnotherValue'', parameter.Value);\r\n            })", span="382-395"];
m3_272 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="377-380"];
m3_274 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="375-375"];
m3_128 [cluster="System.TimeSpan.FromDays(double)", file="SqlServerConnectionFacts.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m3_861 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="372-372"];
m3_304 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="214-214"];
m3_379 [cluster="Hangfire.Server.ServerContext.ServerContext()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.Server.ServerContext.ServerContext()", span="20-20"];
m3_84 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerConnectionFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m3_331 [cluster="Unk.GetJobParameter", file="SqlServerConnectionFacts.cs", label="Entry Unk.GetJobParameter", span=""];
m3_197 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="165-165"];
m3_440 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="621-621"];
m3_442 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.Heartbeat(''server1'');\r\n\r\n                var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime)x.LastHeartbeat);\r\n\r\n                Assert.NotEqual(2012, servers[''server1''].Year);\r\n                Assert.Equal(2012, servers[''server2''].Year);\r\n            })", span="629-640"];
m3_441 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues\r\n('server1', '', '2012-12-12 12:12:12'),\r\n('server2', '', '2012-12-12 12:12:12')''", span="623-627"];
m3_443 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="621-621"];
m3_809 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", span="1205-1205"];
m3_810 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetRangeFromList(''my-list'', 0, 1);\r\n                Assert.Empty(result);\r\n            })", span="1207-1211"];
m3_811 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", span="1205-1205"];
m3_530 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords()", span="745-745"];
m3_531 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                });\r\n\r\n                var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="747-762"];
m3_532 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords()", span="745-745"];
m3_166 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="180-180"];
m3_168 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = Job.FromExpression(() => SampleMethod(''wrong''));\r\n\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result);\r\n                Assert.NotNull(result.Job);\r\n                Assert.Equal(''Succeeded'', result.State);\r\n                Assert.Equal(''Arguments'', result.Job.Arguments[0]);\r\n                Assert.Null(result.LoadException);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(-1) < result.CreatedAt);\r\n                Assert.True(result.CreatedAt < DateTime.UtcNow.AddMinutes(1));\r\n            })", span="187-209"];
m3_167 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="182-185"];
m3_169 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="180-180"];
m3_408 [cluster="Unk.Contains", file="SqlServerConnectionFacts.cs", label="Entry Unk.Contains", span=""];
m3_430 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="614-614"];
m3_431 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null)))", span="616-617"];
m3_432 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="614-614"];
m3_725 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", span="1064-1064"];
m3_727 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'' },\r\n                    new { key = ''list-1'' },\r\n                    new { key = ''list-2'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetListCount(''list-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result);\r\n            })", span="1070-1085"];
m3_726 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.List ([Key])\r\nvalues (@key)''", span="1066-1068"];
m3_728 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", span="1064-1064"];
m3_583 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="347-347"];
m3_148 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="163-163"];
m3_149 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null)))", span="165-166"];
m3_150 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="163-163"];
m3_131 [cluster="Unk.Single", file="SqlServerConnectionFacts.cs", label="Entry Unk.Single", span=""];
m3_101 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="121-121"];
m3_102 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var createdAt = new DateTime(2012, 12, 12);\r\n                var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    createdAt,\r\n                    TimeSpan.FromDays(1));\r\n\r\n                Assert.NotNull(jobId);\r\n                Assert.NotEmpty(jobId);\r\n\r\n                var sqlJob = sql.Query(''select * from HangFire.Job'').Single();\r\n                Assert.Equal(jobId, sqlJob.Id.ToString());\r\n                Assert.Equal(createdAt, sqlJob.CreatedAt);\r\n                Assert.Equal(null, (int?) sqlJob.StateId);\r\n                Assert.Equal(null, (string) sqlJob.StateName);\r\n\r\n                var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData);\r\n                invocationData.Arguments = sqlJob.Arguments;\r\n\r\n                var job = invocationData.Deserialize();\r\n                Assert.Equal(typeof(SqlServerConnectionFacts), job.Type);\r\n                Assert.Equal(''SampleMethod'', job.Method.Name);\r\n                Assert.Equal(''\''Hello\'''', job.Arguments[0]);\r\n\r\n                Assert.True(createdAt.AddDays(1).AddMinutes(-1) < sqlJob.ExpireAt);\r\n                Assert.True(sqlJob.ExpireAt < createdAt.AddDays(1).AddMinutes(1));\r\n\r\n                var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value);\r\n\r\n                Assert.Equal(''Value1'', parameters[''Key1'']);\r\n                Assert.Equal(''Value2'', parameters[''Key2'']);\r\n            })", span="123-159"];
m3_103 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="121-121"];
m3_137 [cluster="Unk.True", file="SqlServerConnectionFacts.cs", label="Entry Unk.True", span=""];
m3_352 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="499-499"];
m3_353 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1);\r\n\r\n                Assert.Null(result);\r\n            })", span="501-507"];
m3_354 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="499-499"];
m3_717 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="445-445"];
m3_584 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", span="821-821"];
m3_585 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetSetCount(''my-set'');\r\n                Assert.Equal(0, result);\r\n            })", span="823-827"];
m3_586 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", span="821-821"];
m3_901 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", span=""];
m3_921 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_902 [file="SqlServerConnectionFacts.cs", label=token, span=""];
m3_903 [file="SqlServerConnectionFacts.cs", label=queues, span=""];
m3_904 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_905 [file="SqlServerConnectionFacts.cs", label=token, span=""];
m3_906 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_907 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_908 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_909 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_910 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_911 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_912 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_913 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_914 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_915 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_916 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_917 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_918 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_919 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_920 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_922 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_923 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_924 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_925 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_926 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_927 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_928 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_929 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_930 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_931 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_932 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_933 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_934 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_935 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_936 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_937 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_938 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_939 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_940 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_941 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_942 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_943 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_944 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_945 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_946 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_947 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_948 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_949 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_950 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_951 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_952 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_953 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_954 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_955 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_956 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_957 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_958 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_959 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_960 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m3_961 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m3_962 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m4_0 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m4_1 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", prediction=17, span="32-32"];
m4_2 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Succeeded state'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", prediction=18, span="33-34"];
m4_3 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerDistributedLockFacts.cs", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
m4_4 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m4_25 [cluster="Unk.OnScenarioStart", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.OnScenarioStart", span=""];
m4_29 [cluster="Unk.CollectScenarioErrors", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m4_14 [cluster="HangFire.Tests.States.SucceededStateFeature.TestInitialize()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.TestInitialize()", span="46-46"];
m4_15 [cluster="HangFire.Tests.States.SucceededStateFeature.TestInitialize()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Succeeded state''))", prediction=19, span="48-49"];
m4_16 [cluster="HangFire.Tests.States.SucceededStateFeature.TestInitialize()", file="SqlServerDistributedLockFacts.cs", label="HangFire.Tests.States.SucceededStateFeature.FeatureSetup(null)", span="51-51"];
m4_17 [cluster="HangFire.Tests.States.SucceededStateFeature.TestInitialize()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.TestInitialize()", span="46-46"];
m4_26 [cluster="HangFire.Tests.States.SucceededStateFeature.ScenarioCleanup()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.ScenarioCleanup()", span="66-66"];
m4_27 [cluster="HangFire.Tests.States.SucceededStateFeature.ScenarioCleanup()", file="SqlServerDistributedLockFacts.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m4_28 [cluster="HangFire.Tests.States.SucceededStateFeature.ScenarioCleanup()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.ScenarioCleanup()", span="66-66"];
m4_99 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", span="225-225"];
m4_101 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="229-229"];
m4_100 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="SqlServerDistributedLockFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying it should remove the job from the succeeded list'', ((string[])(null)))", span="227-227"];
m4_102 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="SqlServerDistributedLockFacts.cs", label="this.FeatureBackground()", span="231-231"];
m4_106 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioCleanup()", span="239-239"];
m4_103 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="SqlServerDistributedLockFacts.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="233-233"];
m4_105 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="SqlServerDistributedLockFacts.cs", label="testRunner.Then(''the job should be removed from the succeeded list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="237-237"];
m4_104 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="SqlServerDistributedLockFacts.cs", label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="235-235"];
m4_107 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", span="225-225"];
m4_89 [cluster="Unk.And", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.And", span=""];
m4_5 [cluster="Unk.GetTestRunner", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.GetTestRunner", span=""];
m4_9 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureTearDown()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.FeatureTearDown()", span="39-39"];
m4_11 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureTearDown()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="testRunner = null", prediction=20, span="42-42"];
m4_10 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureTearDown()", file="SqlServerDistributedLockFacts.cs", label="testRunner.OnFeatureEnd()", span="41-41"];
m4_12 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureTearDown()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.FeatureTearDown()", span="39-39"];
m4_30 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureBackground()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.FeatureBackground()", span="71-71"];
m4_31 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureBackground()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", prediction=21, span="75-75"];
m4_32 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureBackground()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="testRunner.Given(''the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", prediction=22, span="77-77"];
m4_33 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureBackground()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.FeatureBackground()", span="71-71"];
m4_13 [cluster="Unk.OnFeatureEnd", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.OnFeatureEnd", span=""];
m4_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="SqlServerDistributedLockFacts.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m4_72 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", span="164-164"];
m4_74 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="168-168"];
m4_73 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="SqlServerDistributedLockFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After applying it should add the job to the succeeded list'', ((string[])(null)))", span="166-166"];
m4_75 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="SqlServerDistributedLockFacts.cs", label="this.FeatureBackground()", span="170-170"];
m4_78 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioCleanup()", span="176-176"];
m4_76 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="SqlServerDistributedLockFacts.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="172-172"];
m4_77 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="SqlServerDistributedLockFacts.cs", label="testRunner.Then(''the job should be added to the succeeded list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="174-174"];
m4_79 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", span="164-164"];
m4_80 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", span="183-183"];
m4_82 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="187-187"];
m4_81 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="SqlServerDistributedLockFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying it should persist the job data'', ((string[])(null)))", span="185-185"];
m4_83 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="SqlServerDistributedLockFacts.cs", label="this.FeatureBackground()", span="189-189"];
m4_87 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioCleanup()", span="197-197"];
m4_84 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="SqlServerDistributedLockFacts.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="191-191"];
m4_86 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="SqlServerDistributedLockFacts.cs", label="testRunner.Then(''it should persist the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="195-195"];
m4_85 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="SqlServerDistributedLockFacts.cs", label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="193-193"];
m4_88 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", span="183-183"];
m4_90 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", span="204-204"];
m4_92 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="208-208"];
m4_91 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="SqlServerDistributedLockFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying it should change the stats'', ((string[])(null)))", span="206-206"];
m4_93 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="SqlServerDistributedLockFacts.cs", label="this.FeatureBackground()", span="210-210"];
m4_97 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioCleanup()", span="218-218"];
m4_94 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="SqlServerDistributedLockFacts.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="212-212"];
m4_96 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="SqlServerDistributedLockFacts.cs", label="testRunner.Then(''it should decrease the succeeded counter'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="216-216"];
m4_95 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="SqlServerDistributedLockFacts.cs", label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="214-214"];
m4_98 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", span="204-204"];
m4_63 [cluster="Unk.When", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.When", span=""];
m4_54 [cluster="Unk.AddRow", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.AddRow", span=""];
m4_55 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldExpireTheJobData()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldExpireTheJobData()", span="126-126"];
m4_57 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldExpireTheJobData()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="130-130"];
m4_56 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldExpireTheJobData()", file="SqlServerDistributedLockFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After applying it should expire the job data'', ((string[])(null)))", span="128-128"];
m4_58 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldExpireTheJobData()", file="SqlServerDistributedLockFacts.cs", label="this.FeatureBackground()", span="132-132"];
m4_61 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldExpireTheJobData()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioCleanup()", span="138-138"];
m4_59 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldExpireTheJobData()", file="SqlServerDistributedLockFacts.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="134-134"];
m4_60 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldExpireTheJobData()", file="SqlServerDistributedLockFacts.cs", label="testRunner.Then(''it should expire the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="136-136"];
m4_62 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldExpireTheJobData()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldExpireTheJobData()", span="126-126"];
m4_64 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", span="145-145"];
m4_66 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="149-149"];
m4_65 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", file="SqlServerDistributedLockFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After applying it should change the stats'', ((string[])(null)))", span="147-147"];
m4_67 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", file="SqlServerDistributedLockFacts.cs", label="this.FeatureBackground()", span="151-151"];
m4_70 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioCleanup()", span="157-157"];
m4_68 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", file="SqlServerDistributedLockFacts.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="153-153"];
m4_69 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", file="SqlServerDistributedLockFacts.cs", label="testRunner.Then(''it should increase the succeeded counter'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="155-155"];
m4_71 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", span="145-145"];
m4_42 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SqlServerDistributedLockFacts.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m4_22 [cluster="HangFire.Tests.States.SucceededStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m4_23 [cluster="HangFire.Tests.States.SucceededStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="testRunner.OnScenarioStart(scenarioInfo)", prediction=23, span="63-63"];
m4_24 [cluster="HangFire.Tests.States.SucceededStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m4_34 [cluster="Unk.Given", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.Given", span=""];
m4_43 [cluster="Unk.Then", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.Then", span=""];
m4_44 [cluster="HangFire.Tests.States.SucceededStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.ItHasTheCorrectPropertiesSet()", span="102-102"];
m4_46 [cluster="HangFire.Tests.States.SucceededStateFeature.ItHasTheCorrectPropertiesSet()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="this.ScenarioSetup(scenarioInfo)", prediction=24, span="106-106"];
m4_45 [cluster="HangFire.Tests.States.SucceededStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerDistributedLockFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It has the correct properties set'', ((string[])(null)))", span="104-104"];
m4_47 [cluster="HangFire.Tests.States.SucceededStateFeature.ItHasTheCorrectPropertiesSet()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="this.FeatureBackground()", prediction=24, span="108-108"];
m4_48 [cluster="HangFire.Tests.States.SucceededStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerDistributedLockFacts.cs", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="110-112"];
m4_51 [cluster="HangFire.Tests.States.SucceededStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioCleanup()", span="119-119"];
m4_49 [cluster="HangFire.Tests.States.SucceededStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerDistributedLockFacts.cs", label="table1.AddRow(new string[] {\r\n                        ''SucceededAt'',\r\n                        ''<UtcNow timestamp>''})", span="113-115"];
m4_50 [cluster="HangFire.Tests.States.SucceededStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerDistributedLockFacts.cs", label="testRunner.Then(''properties table contains the following items:'', ((string)(null)), table1, ''Then '')", span="117-117"];
m4_52 [cluster="HangFire.Tests.States.SucceededStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.ItHasTheCorrectPropertiesSet()", span="102-102"];
m4_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SqlServerDistributedLockFacts.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m4_53 [cluster="TechTalk.SpecFlow.Table.cstr", file="SqlServerDistributedLockFacts.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m4_35 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameIsSucceeded()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.StateNameIsSucceeded()", span="85-85"];
m4_40 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameIsSucceeded()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="this.ScenarioCleanup()", prediction=24, span="95-95"];
m4_39 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameIsSucceeded()", file="SqlServerDistributedLockFacts.cs", label="testRunner.Then(''the state name is equal to \'Succeeded\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="93-93"];
m4_37 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameIsSucceeded()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="89-89"];
m4_36 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameIsSucceeded()", file="SqlServerDistributedLockFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State name is \'Succeeded\''', ((string[])(null)))", span="87-87"];
m4_38 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameIsSucceeded()", file="SqlServerDistributedLockFacts.cs", label="this.FeatureBackground()", span="91-91"];
m4_41 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameIsSucceeded()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.StateNameIsSucceeded()", span="85-85"];
m4_8 [cluster="Unk.OnFeatureStart", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.OnFeatureStart", span=""];
m4_108 [file="SqlServerDistributedLockFacts.cs", label="HangFire.Tests.States.SucceededStateFeature", span=""];
m5_17 [cluster="HangFire.Tests.ServerFiltersFeature.TestInitialize()", file="SqlServerFetchedJob.cs", label="Exit HangFire.Tests.ServerFiltersFeature.TestInitialize()", span="46-46"];
m5_25 [cluster="Unk.Rollback", file="SqlServerFetchedJob.cs", label="Entry Unk.Rollback", span=""];
m5_29 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerFetchedJob.cs", label="Exit Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", span="63-63"];
m5_21 [cluster="Unk.Commit", file="SqlServerFetchedJob.cs", label="Entry Unk.Commit", span=""];
m5_31 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJob.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server filters should be executed when the worker performs the job'', ((string[])(null)))", span="77-77"];
m5_26 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerFetchedJob.cs", label="Entry Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", span="63-63"];
m5_27 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerFetchedJob.cs", label="_transaction.Dispose()", span="65-65"];
m5_28 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", color=green, community=0, file="SqlServerFetchedJob.cs", label="_storage.ReleaseConnection(_connection)", prediction=27, span="66-66"];
m5_50 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="Entry HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", span="105-105"];
m5_51 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Multiple server filters should be executed depending on their order'', ((string[])(null)))", span="107-107"];
m5_52 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="this.ScenarioSetup(scenarioInfo)", span="109-109"];
m5_53 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="111-111"];
m5_54 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="testRunner.And(''a server filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="113-113"];
m5_55 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="testRunner.And(''a server filter \'second\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="115-115"];
m5_56 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="117-117"];
m5_57 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="119-120"];
m5_58 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="table2.AddRow(new string[] {\r\n                        ''first::OnPerforming''})", span="121-122"];
m5_59 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="table2.AddRow(new string[] {\r\n                        ''second::OnPerforming''})", span="123-124"];
m5_60 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="table2.AddRow(new string[] {\r\n                        ''second::OnPerformed''})", span="125-126"];
m5_61 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="table2.AddRow(new string[] {\r\n                        ''first::OnPerformed''})", span="127-128"];
m5_62 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="testRunner.Then(''the server filter methods should be executed in the following order:'', ((string)(null)), table2, ''Then '')", span="130-130"];
m5_63 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="this.ScenarioCleanup()", span="132-132"];
m5_64 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="Exit HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", span="105-105"];
m5_81 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJob.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", span="175-175"];
m5_82 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJob.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server filter\'s OnPerformed could be skipped if there was an exception'', ((string[])(null)))", span="177-177"];
m5_83 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJob.cs", label="this.ScenarioSetup(scenarioInfo)", span="179-179"];
m5_84 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJob.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="181-181"];
m5_85 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJob.cs", label="testRunner.And(''a server filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="183-183"];
m5_86 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJob.cs", label="testRunner.And(''a server filter \'second\' that throws an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="185-185"];
m5_87 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJob.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="187-187"];
m5_88 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJob.cs", label="TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="189-190"];
m5_89 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJob.cs", label="table4.AddRow(new string[] {\r\n                        ''first::OnPerforming''})", span="191-192"];
m5_90 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJob.cs", label="table4.AddRow(new string[] {\r\n                        ''second::OnPerforming''})", span="193-194"];
m5_91 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJob.cs", label="table4.AddRow(new string[] {\r\n                        ''first::OnPerformed''})", span="195-196"];
m5_92 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJob.cs", label="testRunner.Then(''only the following server filter methods should be executed:'', ((string)(null)), table4, ''Then '')", span="198-198"];
m5_93 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJob.cs", label="testRunner.And(''the state of the job should be Failed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="200-200"];
m5_94 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJob.cs", label="this.ScenarioCleanup()", span="202-202"];
m5_95 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJob.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", span="175-175"];
m5_45 [cluster="Unk.And", file="SqlServerFetchedJob.cs", label="Entry Unk.And", span=""];
m5_5 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, IDbConnection, IDbTransaction, string, string)", file="SqlServerFetchedJob.cs", label="transaction == null", span="38-38"];
m5_124 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="Entry HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", span="274-274"];
m5_125 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Multiple server exception filters are executed depending on their order'', ((string[])(null)))", span="276-276"];
m5_126 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="this.ScenarioSetup(scenarioInfo)", span="278-278"];
m5_127 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="testRunner.Given(''an enqueued broken job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="280-280"];
m5_128 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="testRunner.And(''a server exception filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="282-282"];
m5_129 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="testRunner.And(''a server exception filter \'second\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="284-284"];
m5_130 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="286-286"];
m5_131 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Filter''})", span="288-289"];
m5_132 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="table6.AddRow(new string[] {\r\n                        ''first''})", span="290-291"];
m5_133 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="table6.AddRow(new string[] {\r\n                        ''second''})", span="292-293"];
m5_134 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="testRunner.Then(''the server exception filters should be executed in the following order:'', ((string)(null)), table6, ''Then '')", span="295-295"];
m5_135 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="testRunner.And(''the state of the job should be Failed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="297-297"];
m5_136 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="this.ScenarioCleanup()", span="299-299"];
m5_137 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJob.cs", label="Exit HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", span="274-274"];
m5_0 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, IDbConnection, IDbTransaction, string, string)", file="SqlServerFetchedJob.cs", label="Entry Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, IDbConnection, IDbTransaction, string, string)", span="29-29"];
m5_1 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, IDbConnection, IDbTransaction, string, string)", color=green, community=0, file="SqlServerFetchedJob.cs", label="storage == null", prediction=28, span="36-36"];
m5_2 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, IDbConnection, IDbTransaction, string, string)", color=green, community=0, file="SqlServerFetchedJob.cs", label="throw new ArgumentNullException(''storage'');", prediction=29, span="36-36"];
m5_3 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, IDbConnection, IDbTransaction, string, string)", file="SqlServerFetchedJob.cs", label="connection == null", span="37-37"];
m5_4 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, IDbConnection, IDbTransaction, string, string)", file="SqlServerFetchedJob.cs", label="throw new ArgumentNullException(''connection'');", span="37-37"];
m5_9 [cluster="HangFire.Tests.ServerFiltersFeature.FeatureTearDown()", file="SqlServerFetchedJob.cs", label="Entry HangFire.Tests.ServerFiltersFeature.FeatureTearDown()", span="39-39"];
m5_12 [cluster="HangFire.Tests.ServerFiltersFeature.FeatureTearDown()", file="SqlServerFetchedJob.cs", label="Exit HangFire.Tests.ServerFiltersFeature.FeatureTearDown()", span="39-39"];
m5_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="SqlServerFetchedJob.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m5_13 [cluster="Unk.OnFeatureEnd", file="SqlServerFetchedJob.cs", label="Entry Unk.OnFeatureEnd", span=""];
m5_14 [cluster="HangFire.Tests.ServerFiltersFeature.TestInitialize()", file="SqlServerFetchedJob.cs", label="Entry HangFire.Tests.ServerFiltersFeature.TestInitialize()", span="46-46"];
m5_15 [cluster="HangFire.Tests.ServerFiltersFeature.TestInitialize()", file="SqlServerFetchedJob.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Server filters''))", span="48-49"];
m5_10 [cluster="HangFire.Tests.ServerFiltersFeature.FeatureTearDown()", file="SqlServerFetchedJob.cs", label="testRunner.OnFeatureEnd()", span="41-41"];
m5_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SqlServerFetchedJob.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m5_8 [cluster="Unk.OnFeatureStart", file="SqlServerFetchedJob.cs", label="Entry Unk.OnFeatureStart", span=""];
m5_16 [cluster="HangFire.Tests.ServerFiltersFeature.TestInitialize()", file="SqlServerFetchedJob.cs", label="HangFire.Tests.ServerFiltersFeature.FeatureSetup(null)", span="51-51"];
m5_18 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", file="SqlServerFetchedJob.cs", label="Entry Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", span="53-53"];
m5_19 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", file="SqlServerFetchedJob.cs", label="_transaction.Commit()", span="55-55"];
m5_20 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", file="SqlServerFetchedJob.cs", label="Exit Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", span="53-53"];
m5_22 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", file="SqlServerFetchedJob.cs", label="Entry Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", span="58-58"];
m5_23 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", file="SqlServerFetchedJob.cs", label="_transaction.Rollback()", span="60-60"];
m5_24 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", file="SqlServerFetchedJob.cs", label="Exit Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", span="58-58"];
m5_46 [cluster="Unk.When", file="SqlServerFetchedJob.cs", label="Entry Unk.When", span=""];
m5_48 [cluster="Unk.AddRow", file="SqlServerFetchedJob.cs", label="Entry Unk.AddRow", span=""];
m5_30 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJob.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", span="75-75"];
m5_65 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJob.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", span="139-139"];
m5_66 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJob.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server filter should be able to cancel the performing of a job'', ((string[])(null)))", span="141-141"];
m5_67 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJob.cs", label="this.ScenarioSetup(scenarioInfo)", span="143-143"];
m5_68 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJob.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="145-145"];
m5_69 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJob.cs", label="testRunner.And(''a server filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="147-147"];
m5_70 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJob.cs", label="testRunner.And(''a server filter \'second\' that cancels the performing'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="149-149"];
m5_71 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJob.cs", label="testRunner.And(''a server filter \'third\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="151-151"];
m5_72 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJob.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="153-153"];
m5_73 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJob.cs", label="testRunner.Then(''the job should not be performed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="155-155"];
m5_74 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJob.cs", label="TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="157-158"];
m5_75 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJob.cs", label="table3.AddRow(new string[] {\r\n                        ''first::OnPerforming''})", span="159-160"];
m5_76 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJob.cs", label="table3.AddRow(new string[] {\r\n                        ''second::OnPerforming''})", span="161-162"];
m5_77 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJob.cs", label="table3.AddRow(new string[] {\r\n                        ''first::OnPerformed (with the canceled flag set)''})", span="163-164"];
m5_78 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJob.cs", label="testRunner.And(''only the following server filter methods should be executed:'', ((string)(null)), table3, ''And '')", span="166-166"];
m5_79 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJob.cs", label="this.ScenarioCleanup()", span="168-168"];
m5_80 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJob.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", span="139-139"];
m5_96 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", span="209-209"];
m5_97 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server filter can handle the exception'', ((string[])(null)))", span="211-211"];
m5_98 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="this.ScenarioSetup(scenarioInfo)", span="213-213"];
m5_99 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="215-215"];
m5_100 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="testRunner.And(''a server filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="217-217"];
m5_101 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="testRunner.And(''a server filter \'second\' that handles an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="219-219"];
m5_102 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="testRunner.And(''a server filter \'third\' that throws an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="221-221"];
m5_103 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="223-223"];
m5_104 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="225-226"];
m5_105 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="table5.AddRow(new string[] {\r\n                        ''first::OnPerforming''})", span="227-228"];
m5_106 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="table5.AddRow(new string[] {\r\n                        ''second::OnPerforming''})", span="229-230"];
m5_107 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="table5.AddRow(new string[] {\r\n                        ''third::OnPerforming''})", span="231-232"];
m5_108 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="table5.AddRow(new string[] {\r\n                        ''second::OnPerformed''})", span="233-234"];
m5_109 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="table5.AddRow(new string[] {\r\n                        ''first::OnPerformed''})", span="235-236"];
m5_110 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="testRunner.Then(''the server filter methods should be executed in the following order:'', ((string)(null)), table5, ''Then '')", span="238-238"];
m5_111 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="testRunner.And(''the state of the job should be Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="240-240"];
m5_112 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="this.ScenarioCleanup()", span="242-242"];
m5_113 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", span="209-209"];
m5_43 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SqlServerFetchedJob.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m5_49 [cluster="Unk.Then", file="SqlServerFetchedJob.cs", label="Entry Unk.Then", span=""];
m5_44 [cluster="Unk.Given", file="SqlServerFetchedJob.cs", label="Entry Unk.Given", span=""];
m5_47 [cluster="TechTalk.SpecFlow.Table.cstr", file="SqlServerFetchedJob.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m5_114 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJob.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", span="250-250"];
m5_115 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJob.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server exception filters are executed when there was an exception while performin'' +\r\n                    ''g a job'', ((string[])(null)))", span="252-253"];
m5_116 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJob.cs", label="this.ScenarioSetup(scenarioInfo)", span="255-255"];
m5_117 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJob.cs", label="testRunner.Given(''an enqueued broken job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="257-257"];
m5_118 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJob.cs", label="testRunner.And(''a server exception filter \'test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="259-259"];
m5_119 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJob.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="261-261"];
m5_120 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJob.cs", label="testRunner.Then(''the server exception filter should be executed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="263-263"];
m5_121 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJob.cs", label="testRunner.And(''the state of the job should be Failed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="265-265"];
m5_122 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJob.cs", label="this.ScenarioCleanup()", span="267-267"];
m5_123 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJob.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", span="250-250"];
m5_32 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJob.cs", label="Hangfire.SqlServer.SqlServerFetchedJob", span=""];
m5_33 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJob.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81"];
m5_34 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJob.cs", label="testRunner.And(''a server filter \'test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83"];
m5_35 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJob.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85"];
m5_36 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJob.cs", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="87-88"];
m5_37 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJob.cs", label="table1.AddRow(new string[] {\r\n                        ''test::OnPerforming''})", span="89-90"];
m5_38 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJob.cs", label="table1.AddRow(new string[] {\r\n                        ''test::OnPerformed''})", span="91-92"];
m5_39 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJob.cs", label="testRunner.Then(''the server filter methods should be executed in the following order:'', ((string)(null)), table1, ''Then '')", span="94-94"];
m5_40 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJob.cs", label="testRunner.And(''the job should be performed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="96-96"];
m5_41 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJob.cs", label="this.ScenarioCleanup()", span="98-98"];
m5_42 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJob.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", span="75-75"];
m5_138 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", span="306-306"];
m5_139 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server exception filter can handle the exception'', ((string[])(null)))", span="308-308"];
m5_140 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="this.ScenarioSetup(scenarioInfo)", span="310-310"];
m5_141 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="testRunner.Given(''an enqueued broken job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="312-312"];
m5_142 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="testRunner.And(''a server exception filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="314-314"];
m5_143 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="testRunner.And(''a server exception filter \'second\' that handles an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="316-316"];
m5_144 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="testRunner.And(''a server exception filter \'third\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="318-318"];
m5_145 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="320-320"];
m5_146 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Filter''})", span="322-323"];
m5_147 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="table7.AddRow(new string[] {\r\n                        ''first''})", span="324-325"];
m5_148 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="table7.AddRow(new string[] {\r\n                        ''second''})", span="326-327"];
m5_149 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="table7.AddRow(new string[] {\r\n                        ''third''})", span="328-329"];
m5_150 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="testRunner.Then(''the following server exception filters should be executed:'', ((string)(null)), table7, ''Then '')", span="331-331"];
m5_151 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="testRunner.And(''the state of the job should be Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="333-333"];
m5_152 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="this.ScenarioCleanup()", span="335-335"];
m5_153 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJob.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", span="306-306"];
m5_154 [file="SqlServerFetchedJob.cs", label="HangFire.Tests.ServerFiltersFeature", span=""];
m6_83 [cluster="Unk.OnClientException", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.OnClientException", span=""];
m6_262 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", span="256-256"];
m6_263 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerFetchedJobFacts.cs", label="var outerFilter = new Mock<IClientFilter>()", span="259-259"];
m6_264 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerFetchedJobFacts.cs", label="var innerFilter = new Mock<IClientFilter>()", span="260-260"];
m6_265 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerFetchedJobFacts.cs", label="_filters.Add(outerFilter.Object)", span="262-262"];
m6_271 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerFetchedJobFacts.cs", label="outerFilter.Verify(x => x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception)))", span="274-274"];
m6_266 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerFetchedJobFacts.cs", label="_filters.Add(innerFilter.Object)", span="263-263"];
m6_267 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerFetchedJobFacts.cs", label="var exception = new InvalidOperationException()", span="265-265"];
m6_268 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerFetchedJobFacts.cs", label="_context.Setup(x => x.CreateJob()).Throws(exception)", span="266-266"];
m6_269 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerFetchedJobFacts.cs", label="var process = CreateProcess()", span="268-268"];
m6_270 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerFetchedJobFacts.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object))", span="271-272"];
m6_272 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerFetchedJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", span="256-256"];
m6_13 [cluster="System.Collections.Generic.List<T>.List()", file="SqlServerFetchedJobFacts.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m6_12 [cluster="Mock<IStateMachineFactory>.cstr", file="SqlServerFetchedJobFacts.cs", label="Entry Mock<IStateMachineFactory>.cstr", span=""];
m6_11 [cluster="Mock<IState>.cstr", file="SqlServerFetchedJobFacts.cs", label="Entry Mock<IState>.cstr", span=""];
m6_24 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", span="32-32"];
m6_26 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerFetchedJobFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => process.Run(null))", span="36-37"];
m6_27 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerFetchedJobFacts.cs", label="Assert.Equal(''context'', exception.ParamName)", span="39-39"];
m6_28 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerFetchedJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", span="32-32"];
m6_31 [cluster="Unk.Equal", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.Equal", span=""];
m6_239 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", span="235-235"];
m6_240 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerFetchedJobFacts.cs", label="var filter = new Mock<IClientFilter>()", span="238-238"];
m6_241 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerFetchedJobFacts.cs", label="_filters.Add(filter.Object)", span="239-239"];
m6_246 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerFetchedJobFacts.cs", label="filter.Verify(x => x.OnCreated(It.Is<CreatedContext>(\r\n                context => context.Exception == exception)))", span="251-252"];
m6_242 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerFetchedJobFacts.cs", label="var exception = new InvalidOperationException()", span="241-241"];
m6_243 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerFetchedJobFacts.cs", label="_context.Setup(x => x.CreateJob()).Throws(exception)", span="242-242"];
m6_244 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerFetchedJobFacts.cs", label="var process = CreateProcess()", span="244-244"];
m6_245 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerFetchedJobFacts.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object))", span="247-248"];
m6_247 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerFetchedJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", span="235-235"];
m6_285 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", span="278-278"];
m6_286 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerFetchedJobFacts.cs", label="var filter = new Mock<IClientFilter>()", span="281-281"];
m6_287 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerFetchedJobFacts.cs", label="_filters.Add(filter.Object)", span="282-282"];
m6_290 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerFetchedJobFacts.cs", label="filter.Setup(x => x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception)))\r\n                .Callback((CreatedContext x) => x.ExceptionHandled = true)", span="287-288"];
m6_288 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerFetchedJobFacts.cs", label="var exception = new InvalidOperationException()", span="284-284"];
m6_289 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerFetchedJobFacts.cs", label="_context.Setup(x => x.CreateJob()).Throws(exception)", span="285-285"];
m6_291 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerFetchedJobFacts.cs", label="var process = CreateProcess()", span="290-290"];
m6_292 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerFetchedJobFacts.cs", label="Assert.DoesNotThrow(() => process.Run(_context.Object))", span="293-293"];
m6_293 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerFetchedJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", span="278-278"];
m6_14 [cluster="Mock<CreateContext>.cstr", file="SqlServerFetchedJobFacts.cs", label="Entry Mock<CreateContext>.cstr", span=""];
m6_117 [cluster="Unk.DoesNotThrow", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.DoesNotThrow", span=""];
m6_41 [cluster="Unk.Run", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.Run", span=""];
m6_248 [cluster="System.InvalidOperationException.InvalidOperationException()", file="SqlServerFetchedJobFacts.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m6_30 [cluster="Unk.>", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.>", span=""];
m6_72 [cluster="Mock<IClientExceptionFilter>.cstr", file="SqlServerFetchedJobFacts.cs", label="Entry Mock<IClientExceptionFilter>.cstr", span=""];
m6_35 [cluster="Hangfire.Client.DefaultJobCreationProcess.Run(Hangfire.Client.CreateContext)", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Client.DefaultJobCreationProcess.Run(Hangfire.Client.CreateContext)", span="45-45"];
m6_52 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCatchExceptions()", span="63-63"];
m6_56 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="SqlServerFetchedJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCatchExceptions()", span="63-63"];
m6_84 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", span="89-89"];
m6_88 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerFetchedJobFacts.cs", label="filter1.Setup(x => x.OnClientException(It.IsAny<ClientExceptionContext>())).InSequence()", span="96-96"];
m6_87 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerFetchedJobFacts.cs", label="filter2.Setup(x => x.OnClientException(It.IsAny<ClientExceptionContext>())).InSequence()", span="95-95"];
m6_90 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerFetchedJobFacts.cs", label="_filters.Add(filter2.Object)", span="99-99"];
m6_94 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerFetchedJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", span="89-89"];
m6_108 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", span="113-113"];
m6_110 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="SqlServerFetchedJobFacts.cs", label="var filter = new Mock<IClientExceptionFilter>()", span="117-117"];
m6_115 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="SqlServerFetchedJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", span="113-113"];
m6_150 [cluster="Unk.OnCreated", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.OnCreated", span=""];
m6_196 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", span="192-192"];
m6_197 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerFetchedJobFacts.cs", label="var outerFilter = new Mock<IClientFilter>()", span="195-195"];
m6_198 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerFetchedJobFacts.cs", label="var innerFilter = new Mock<IClientFilter>()", span="196-196"];
m6_199 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerFetchedJobFacts.cs", label="_filters.Add(outerFilter.Object)", span="198-198"];
m6_204 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerFetchedJobFacts.cs", label="outerFilter.Verify(x => x.OnCreated(It.Is<CreatedContext>(context => context.Canceled)))", span="210-210"];
m6_200 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerFetchedJobFacts.cs", label="_filters.Add(innerFilter.Object)", span="199-199"];
m6_201 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerFetchedJobFacts.cs", label="innerFilter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>()))\r\n                .Callback((CreatingContext context) => context.Canceled = true)", span="201-202"];
m6_202 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerFetchedJobFacts.cs", label="var process = CreateProcess()", span="204-204"];
m6_203 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerFetchedJobFacts.cs", label="process.Run(_context.Object)", span="207-207"];
m6_205 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerFetchedJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", span="192-192"];
m6_73 [cluster="Unk.Add", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.Add", span=""];
m6_95 [cluster="Unk.InSequence", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.InSequence", span=""];
m6_57 [cluster="Unk.Setup", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.Setup", span=""];
m6_249 [cluster="Unk.Throws", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.Throws", span=""];
m6_15 [cluster="Unk.SetupGet", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.SetupGet", span=""];
m6_47 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ReturnsJobIdentifier()", span="53-53"];
m6_48 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="SqlServerFetchedJobFacts.cs", label="var process = CreateProcess()", span="55-55"];
m6_49 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="SqlServerFetchedJobFacts.cs", label="var result = process.Run(_context.Object)", span="57-57"];
m6_51 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="SqlServerFetchedJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ReturnsJobIdentifier()", span="53-53"];
m6_64 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", span="73-73"];
m6_65 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerFetchedJobFacts.cs", label="var filter = new Mock<IClientExceptionFilter>()", span="75-75"];
m6_71 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerFetchedJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", span="73-73"];
m6_175 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", span="172-172"];
m6_176 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", file="SqlServerFetchedJobFacts.cs", label="var filter = new Mock<IClientFilter>()", span="175-175"];
m6_177 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", file="SqlServerFetchedJobFacts.cs", label="_filters.Add(filter.Object)", span="176-176"];
m6_178 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", file="SqlServerFetchedJobFacts.cs", label="filter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>()))\r\n                .Callback((CreatingContext x) => x.Canceled = true)", span="178-179"];
m6_182 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", file="SqlServerFetchedJobFacts.cs", label="filter.Verify(x => x.OnCreated(It.IsAny<CreatedContext>()), Times.Never)", span="188-188"];
m6_179 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", file="SqlServerFetchedJobFacts.cs", label="var process = CreateProcess()", span="181-181"];
m6_180 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", file="SqlServerFetchedJobFacts.cs", label="process.Run(_context.Object)", span="184-184"];
m6_181 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", file="SqlServerFetchedJobFacts.cs", label="_context.Verify(x => x.CreateJob(), Times.Never)", span="187-187"];
m6_183 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", file="SqlServerFetchedJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", span="172-172"];
m6_335 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="317-317"];
m6_17 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="21-21"];
m6_21 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="28-28"];
m6_18 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="TestMethod()", span="21-21"];
m6_19 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="21-21"];
m6_22 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.JobId", span="28-28"];
m6_23 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="28-28"];
m6_33 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="process.Run(null)", span="37-37"];
m6_32 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="37-37"];
m6_34 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="37-37"];
m6_43 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="49-49"];
m6_44 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.CreateJob()", span="49-49"];
m6_45 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="49-49"];
m6_58 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="65-65"];
m6_61 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="69-69"];
m6_60 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="65-65"];
m6_63 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="69-69"];
m6_74 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="78-78"];
m6_77 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="82-82"];
m6_80 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="84-85"];
m6_76 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="78-78"];
m6_79 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="82-82"];
m6_82 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="84-85"];
m6_96 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="95-95"];
m6_99 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="96-96"];
m6_102 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="101-101"];
m6_105 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="107-107"];
m6_97 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.OnClientException(It.IsAny<ClientExceptionContext>())", span="95-95"];
m6_98 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="95-95"];
m6_100 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.OnClientException(It.IsAny<ClientExceptionContext>())", span="96-96"];
m6_101 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="96-96"];
m6_104 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="101-101"];
m6_107 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="107-107"];
m6_118 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="116-116"];
m6_121 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="118-118"];
m6_124 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="119-119"];
m6_127 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="126-126"];
m6_120 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="116-116"];
m6_123 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="118-118"];
m6_126 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="119-119"];
m6_129 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="126-126"];
m6_140 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="136-136"];
m6_144 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="137-137"];
m6_147 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="138-138"];
m6_142 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="136-136"];
m6_146 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="137-137"];
m6_149 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="138-138"];
m6_163 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="158-158"];
m6_166 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="159-159"];
m6_169 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="160-160"];
m6_172 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="161-161"];
m6_164 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="158-158"];
m6_165 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="158-158"];
m6_167 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="159-159"];
m6_168 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="159-159"];
m6_170 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="160-160"];
m6_171 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="160-160"];
m6_173 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="161-161"];
m6_174 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="161-161"];
m6_184 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="178-178"];
m6_187 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="179-179"];
m6_190 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="187-187"];
m6_193 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="188-188"];
m6_185 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="178-178"];
m6_186 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="178-178"];
m6_188 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.Canceled = true", span="179-179"];
m6_189 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="179-179"];
m6_191 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.CreateJob()", span="187-187"];
m6_192 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="187-187"];
m6_194 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="188-188"];
m6_195 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="188-188"];
m6_206 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="201-201"];
m6_209 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="202-202"];
m6_212 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="210-210"];
m6_207 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="201-201"];
m6_208 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="201-201"];
m6_210 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="context.Canceled = true", span="202-202"];
m6_211 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="202-202"];
m6_213 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.OnCreated(It.Is<CreatedContext>(context => context.Canceled))", span="210-210"];
m6_214 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="210-210"];
m6_215 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="210-210"];
m6_216 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="context.Canceled", span="210-210"];
m6_217 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="210-210"];
m6_227 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="220-220"];
m6_231 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="process.Run(_context.Object)", span="227-227"];
m6_230 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="227-227"];
m6_233 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="230-230"];
m6_236 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="231-231"];
m6_228 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="220-220"];
m6_229 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="220-220"];
m6_232 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="227-227"];
m6_234 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.CreateJob()", span="230-230"];
m6_235 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="230-230"];
m6_237 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="231-231"];
m6_238 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="231-231"];
m6_257 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.OnCreated(It.Is<CreatedContext>(\r\n                context => context.Exception == exception))", span="251-252"];
m6_260 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="context.Exception == exception", span="252-252"];
m6_250 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="242-242"];
m6_254 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="process.Run(_context.Object)", span="248-248"];
m6_253 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="248-248"];
m6_256 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="251-252"];
m6_251 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.CreateJob()", span="242-242"];
m6_252 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="242-242"];
m6_255 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="248-248"];
m6_258 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="251-252"];
m6_259 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="252-252"];
m6_261 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="252-252"];
m6_280 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception))", span="274-274"];
m6_283 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="context.Exception == exception", span="274-274"];
m6_273 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="266-266"];
m6_277 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="process.Run(_context.Object)", span="272-272"];
m6_276 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="272-272"];
m6_279 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="274-274"];
m6_274 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.CreateJob()", span="266-266"];
m6_275 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="266-266"];
m6_278 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="272-272"];
m6_281 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="274-274"];
m6_282 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="274-274"];
m6_284 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="274-274"];
m6_298 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception))", span="287-287"];
m6_301 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="context.Exception == exception", span="287-287"];
m6_294 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="285-285"];
m6_297 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="287-287"];
m6_303 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="288-288"];
m6_307 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="process.Run(_context.Object)", span="293-293"];
m6_306 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="293-293"];
m6_295 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.CreateJob()", span="285-285"];
m6_296 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="285-285"];
m6_299 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="287-287"];
m6_300 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="287-287"];
m6_302 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="287-287"];
m6_304 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.ExceptionHandled = true", span="288-288"];
m6_305 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="288-288"];
m6_308 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="293-293"];
m6_320 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="306-306"];
m6_323 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="308-308"];
m6_326 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="309-309"];
m6_330 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="process.Run(_context.Object)", span="314-314"];
m6_329 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="314-314"];
m6_332 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Entry lambda expression", span="317-317"];
m6_321 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.CreateJob()", span="306-306"];
m6_322 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="306-306"];
m6_324 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="308-308"];
m6_325 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="308-308"];
m6_327 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.ExceptionHandled = true", span="309-309"];
m6_328 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="309-309"];
m6_331 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="314-314"];
m6_333 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="x.OnCreated(It.Is<CreatedContext>(context => context.Exception != null))", span="317-317"];
m6_334 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="317-317"];
m6_336 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="context.Exception != null", span="317-317"];
m6_337 [cluster="lambda expression", file="SqlServerFetchedJobFacts.cs", label="Exit lambda expression", span="317-317"];
m6_29 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.CreateProcess()", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.CreateProcess()", span="324-324"];
m6_339 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.CreateProcess()", file="SqlServerFetchedJobFacts.cs", label="return new DefaultJobCreationProcess(_filters);", span="326-326"];
m6_340 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.CreateProcess()", file="SqlServerFetchedJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.CreateProcess()", span="324-324"];
m6_42 [cluster="Unk.Verify", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.Verify", span=""];
m6_309 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", span="297-297"];
m6_310 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerFetchedJobFacts.cs", label="var outerFilter = new Mock<IClientFilter>()", span="300-300"];
m6_311 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerFetchedJobFacts.cs", label="var innerFilter = new Mock<IClientFilter>()", span="301-301"];
m6_312 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerFetchedJobFacts.cs", label="_filters.Add(outerFilter.Object)", span="303-303"];
m6_318 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerFetchedJobFacts.cs", label="outerFilter.Verify(x => x.OnCreated(It.Is<CreatedContext>(context => context.Exception != null)))", span="317-317"];
m6_313 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerFetchedJobFacts.cs", label="_filters.Add(innerFilter.Object)", span="304-304"];
m6_315 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerFetchedJobFacts.cs", label="innerFilter.Setup(x => x.OnCreated(It.IsAny<CreatedContext>()))\r\n                .Callback((CreatedContext x) => x.ExceptionHandled = true)", span="308-309"];
m6_314 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerFetchedJobFacts.cs", label="_context.Setup(x => x.CreateJob()).Throws<InvalidOperationException>()", span="306-306"];
m6_316 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerFetchedJobFacts.cs", label="var process = CreateProcess()", span="311-311"];
m6_317 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerFetchedJobFacts.cs", label="Assert.DoesNotThrow(() => process.Run(_context.Object))", span="314-314"];
m6_319 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerFetchedJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", span="297-297"];
m6_143 [cluster="Unk.OnCreating", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.OnCreating", span=""];
m6_36 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsCreateJobMethod()", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsCreateJobMethod()", span="43-43"];
m6_37 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsCreateJobMethod()", file="SqlServerFetchedJobFacts.cs", label="var process = CreateProcess()", span="45-45"];
m6_38 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsCreateJobMethod()", file="SqlServerFetchedJobFacts.cs", label="process.Run(_context.Object)", span="47-47"];
m6_39 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsCreateJobMethod()", file="SqlServerFetchedJobFacts.cs", label="_context.Verify(x => x.CreateJob(), Times.Once)", span="49-49"];
m6_40 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsCreateJobMethod()", file="SqlServerFetchedJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsCreateJobMethod()", span="43-43"];
m6_116 [cluster="Unk.Callback", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.Callback", span=""];
m6_20 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.TestMethod()", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.TestMethod()", span="320-320"];
m6_338 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.TestMethod()", file="SqlServerFetchedJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.TestMethod()", span="320-320"];
m6_218 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", span="214-214"];
m6_219 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerFetchedJobFacts.cs", label="var filter = new Mock<IClientFilter>()", span="217-217"];
m6_220 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerFetchedJobFacts.cs", label="_filters.Add(filter.Object)", span="218-218"];
m6_221 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerFetchedJobFacts.cs", label="filter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>()))\r\n                .Throws<InvalidOperationException>()", span="220-221"];
m6_225 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerFetchedJobFacts.cs", label="filter.Verify(x => x.OnCreated(It.IsAny<CreatedContext>()), Times.Never)", span="231-231"];
m6_222 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerFetchedJobFacts.cs", label="var process = CreateProcess()", span="223-223"];
m6_223 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerFetchedJobFacts.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object))", span="226-227"];
m6_224 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerFetchedJobFacts.cs", label="_context.Verify(x => x.CreateJob(), Times.Never)", span="230-230"];
m6_226 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerFetchedJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", span="214-214"];
m6_16 [cluster="Unk.Returns", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.Returns", span=""];
m6_46 [cluster="Unk.CreateJob", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.CreateJob", span=""];
m6_139 [cluster="Mock<IClientFilter>.cstr", file="SqlServerFetchedJobFacts.cs", label="Entry Mock<IClientFilter>.cstr", span=""];
m6_9 [cluster="Mock<IStorageConnection>.cstr", file="SqlServerFetchedJobFacts.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m6_341 [cluster="Hangfire.Client.DefaultJobCreationProcess.DefaultJobCreationProcess(System.Collections.Generic.IEnumerable<object>)", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Client.DefaultJobCreationProcess.DefaultJobCreationProcess(System.Collections.Generic.IEnumerable<object>)", span="39-39"];
m6_0 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", span="18-18"];
m6_1 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", file="SqlServerFetchedJobFacts.cs", label="var connection = new Mock<IStorageConnection>()", span="20-20"];
m6_2 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", file="SqlServerFetchedJobFacts.cs", label="var job = Job.FromExpression(() => TestMethod())", span="21-21"];
m6_6 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", file="SqlServerFetchedJobFacts.cs", label="_context = new Mock<CreateContext>(\r\n                connection.Object, stateMachineFactory.Object, job, state.Object)", span="26-27"];
m6_3 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", file="SqlServerFetchedJobFacts.cs", label="var state = new Mock<IState>()", span="22-22"];
m6_4 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", file="SqlServerFetchedJobFacts.cs", label="var stateMachineFactory = new Mock<IStateMachineFactory>()", span="23-23"];
m6_7 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", file="SqlServerFetchedJobFacts.cs", label="_context.SetupGet(x => x.JobId).Returns(JobId)", span="28-28"];
m6_8 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", file="SqlServerFetchedJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", span="18-18"];
m6_10 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="148-148"];
m6_151 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", span="149-149"];
m6_152 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerFetchedJobFacts.cs", label="var outerFilter = new Mock<IClientFilter>()", span="152-152"];
m6_153 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerFetchedJobFacts.cs", label="var innerFilter = new Mock<IClientFilter>()", span="153-153"];
m6_154 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerFetchedJobFacts.cs", label="_filters.Add(outerFilter.Object)", span="155-155"];
m6_156 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerFetchedJobFacts.cs", label="outerFilter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>())).InSequence()", span="158-158"];
m6_159 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerFetchedJobFacts.cs", label="outerFilter.Setup(x => x.OnCreated(It.IsAny<CreatedContext>())).InSequence()", span="161-161"];
m6_155 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerFetchedJobFacts.cs", label="_filters.Add(innerFilter.Object)", span="156-156"];
m6_157 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerFetchedJobFacts.cs", label="innerFilter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>())).InSequence()", span="159-159"];
m6_158 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerFetchedJobFacts.cs", label="innerFilter.Setup(x => x.OnCreated(It.IsAny<CreatedContext>())).InSequence()", span="160-160"];
m6_160 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerFetchedJobFacts.cs", label="var process = CreateProcess()", span="163-163"];
m6_161 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerFetchedJobFacts.cs", label="process.Run(_context.Object)", span="166-166"];
m6_162 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerFetchedJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", span="149-149"];
m6_130 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerFetchedJobFacts.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", span="130-130"];
m6_138 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerFetchedJobFacts.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", span="130-130"];
m6_342 [file="SqlServerFetchedJobFacts.cs", label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", span=""];
m6_343 [file="SqlServerFetchedJobFacts.cs", label=process, span=""];
m6_344 [file="SqlServerFetchedJobFacts.cs", label=process, span=""];
m6_345 [file="SqlServerFetchedJobFacts.cs", label=process, span=""];
m6_346 [file="SqlServerFetchedJobFacts.cs", label=process, span=""];
m6_347 [file="SqlServerFetchedJobFacts.cs", label=process, span=""];
m6_348 [file="SqlServerFetchedJobFacts.cs", label=process, span=""];
m6_349 [file="SqlServerFetchedJobFacts.cs", label=process, span=""];
m6_350 [file="SqlServerFetchedJobFacts.cs", label=exception, span=""];
m6_351 [file="SqlServerFetchedJobFacts.cs", label=process, span=""];
m6_352 [file="SqlServerFetchedJobFacts.cs", label=exception, span=""];
m6_353 [file="SqlServerFetchedJobFacts.cs", label=exception, span=""];
m6_354 [file="SqlServerFetchedJobFacts.cs", label=process, span=""];
m6_355 [file="SqlServerFetchedJobFacts.cs", label=process, span=""];
m7_46 [cluster="int.ToString(System.IFormatProvider)", file="SqlServerJobQueue.cs", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
m7_8 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerJobQueue.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m7_39 [cluster="System.TimeSpan.Negate()", file="SqlServerJobQueue.cs", label="Entry System.TimeSpan.Negate()", span="0-0"];
m7_40 [cluster="Unk.>", file="SqlServerJobQueue.cs", label="Entry Unk.>", span=""];
m7_0 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", span="33-33"];
m7_1 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="storage == null", span="35-35"];
m7_3 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="options == null", span="36-36"];
m7_5 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="_storage = storage", span="38-38"];
m7_6 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="_options = options", span="39-39"];
m7_2 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="throw new ArgumentNullException(''storage'');", span="35-35"];
m7_4 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="throw new ArgumentNullException(''options'');", span="36-36"];
m7_7 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", span="33-33"];
m7_35 [cluster="System.ArgumentException.ArgumentException(string, string)", file="SqlServerJobQueue.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m7_37 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerJobQueue.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="217-217"];
m7_44 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="SqlServerJobQueue.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m7_45 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)", file="SqlServerJobQueue.cs", label="Entry Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)", span="29-29"];
m7_42 [cluster="Unk.Dispose", file="SqlServerJobQueue.cs", label="Entry Unk.Dispose", span=""];
m7_51 [cluster="Unk.Execute", file="SqlServerJobQueue.cs", label="Entry Unk.Execute", span=""];
m7_43 [cluster="Unk.Rollback", file="SqlServerJobQueue.cs", label="Entry Unk.Rollback", span=""];
m7_41 [cluster="Unk.SingleOrDefault", file="SqlServerJobQueue.cs", label="Entry Unk.SingleOrDefault", span=""];
m7_47 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Enqueue(IDbConnection, string, string)", file="SqlServerJobQueue.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueue.Enqueue(IDbConnection, string, string)", span="99-99"];
m7_48 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Enqueue(IDbConnection, string, string)", file="SqlServerJobQueue.cs", label="string enqueueJobSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue) values (@jobId, @queue)''", span="101-102"];
m7_49 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Enqueue(IDbConnection, string, string)", file="SqlServerJobQueue.cs", label="connection.Execute(enqueueJobSql, new { jobId = jobId, queue = queue })", span="104-104"];
m7_50 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Enqueue(IDbConnection, string, string)", file="SqlServerJobQueue.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueue.Enqueue(IDbConnection, string, string)", span="99-99"];
m7_9 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="43-43"];
m7_10 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="queues == null", span="45-45"];
m7_12 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="queues.Length == 0", span="46-46"];
m7_18 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="60-60"];
m7_21 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="fetchedJob = connection.Query<FetchedJob>(\r\n                               fetchJobSqlTemplate,\r\n                               new { queues = queues, timeout = _options.InvisibilityTimeout.Negate().TotalSeconds },\r\n                               transaction)\r\n                               .SingleOrDefault()", span="67-71"];
m7_11 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="throw new ArgumentNullException(''queues'');", span="45-45"];
m7_13 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="throw new ArgumentException(''Queue array must be non-empty.'', ''queues'');", span="46-46"];
m7_14 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="FetchedJob fetchedJob = null", span="48-48"];
m7_15 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="SqlConnection connection = null", span="49-49"];
m7_16 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="SqlTransaction transaction = null", span="50-50"];
m7_17 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="string fetchJobSqlTemplate = @''\r\ndelete top (1) from HangFire.JobQueue with (readpast, updlock)\r\noutput DELETED.Id, DELETED.JobId, DELETED.Queue\r\nwhere (FetchedAt is null or FetchedAt < DATEADD(second, @timeout, GETUTCDATE()))\r\nand Queue in @queues''", span="52-56"];
m7_19 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="connection = _storage.CreateAndOpenConnection()", span="62-62"];
m7_30 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="cancellationToken.WaitHandle.WaitOne(_options.QueuePollInterval)", span="86-86"];
m7_20 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="transaction = connection.BeginTransaction(IsolationLevel.ReadCommitted)", span="63-63"];
m7_23 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="transaction.Dispose()", span="75-75"];
m7_27 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="transaction.Rollback()", span="82-82"];
m7_28 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="transaction.Dispose()", span="83-83"];
m7_22 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label=SqlException, span="73-73"];
m7_26 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="fetchedJob == null", span="80-80"];
m7_32 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="fetchedJob == null", span="89-89"];
m7_25 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="throw;", span="77-77"];
m7_31 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="87-87"];
m7_34 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="43-43"];
m7_38 [cluster="Unk.BeginTransaction", file="SqlServerJobQueue.cs", label="Entry Unk.BeginTransaction", span=""];
m7_36 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="SqlServerJobQueue.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m7_52 [file="SqlServerJobQueue.cs", label="Hangfire.SqlServer.SqlServerJobQueue", span=""];
m9_0 [cluster="HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", span="6-6"];
m9_1 [cluster="HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", file="SqlServerJobQueueMonitoringApi.cs", label="_pager = pager", span="8-8"];
m9_2 [cluster="HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", span="6-6"];
m9_3 [file="SqlServerJobQueueMonitoringApi.cs", label="HangFire.Web.Pages.PerPageSelector", span=""];
m10_25 [cluster="Unk.OnScenarioStart", file="SqlServerMonitoringApi.cs", label="Entry Unk.OnScenarioStart", span=""];
m10_29 [cluster="Unk.CollectScenarioErrors", file="SqlServerMonitoringApi.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m10_21 [cluster="Unk.OnScenarioEnd", file="SqlServerMonitoringApi.cs", label="Entry Unk.OnScenarioEnd", span=""];
m10_9 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureTearDown()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureTearDown()", span="40-40"];
m10_10 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureTearDown()", file="SqlServerMonitoringApi.cs", label="testRunner.OnFeatureEnd()", span="42-42"];
m10_11 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureTearDown()", file="SqlServerMonitoringApi.cs", label="testRunner = null", span="43-43"];
m10_12 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureTearDown()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureTearDown()", span="40-40"];
m10_65 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", span="153-153"];
m10_66 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out job by the \'checked\' flag in the \'Fetched\' state should not be re-queue'' +\r\n                    ''d'', new string[] {\r\n                        ''checkpoint-2''})", span="155-157"];
m10_67 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="this.ScenarioSetup(scenarioInfo)", span="159-159"];
m10_68 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="161-161"];
m10_69 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''it was checked a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="163-163"];
m10_70 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''it was fetched a millisecond ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="165-165"];
m10_71 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="167-167"];
m10_72 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="testRunner.Then(''the dequeued jobs list still contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="169-169"];
m10_73 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="171-171"];
m10_74 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''the job has the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="173-173"];
m10_75 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''the job has the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="175-175"];
m10_76 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="this.ScenarioCleanup()", span="177-177"];
m10_77 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", span="153-153"];
m10_53 [cluster="Unk.And", file="SqlServerMonitoringApi.cs", label="Entry Unk.And", span=""];
m10_112 [cluster="Unk.But", file="SqlServerMonitoringApi.cs", label="Entry Unk.But", span=""];
m10_5 [cluster="Unk.GetTestRunner", file="SqlServerMonitoringApi.cs", label="Entry Unk.GetTestRunner", span=""];
m10_78 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", span="185-185"];
m10_79 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out jobs in the \'Fetched\' state should be re-queued'', new string[] {\r\n                        ''checkpoint-2''})", span="187-188"];
m10_80 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="this.ScenarioSetup(scenarioInfo)", span="190-190"];
m10_81 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="192-192"];
m10_82 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="194-194"];
m10_83 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="196-196"];
m10_84 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="198-198"];
m10_85 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="200-200"];
m10_86 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''the job does not have the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="202-202"];
m10_87 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''the job does not have the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="204-204"];
m10_88 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="this.ScenarioCleanup()", span="206-206"];
m10_89 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", span="185-185"];
m10_26 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", span="67-67"];
m10_27 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", file="SqlServerMonitoringApi.cs", label="testRunner.CollectScenarioErrors()", span="69-69"];
m10_28 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", span="67-67"];
m10_22 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="62-62"];
m10_23 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerMonitoringApi.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="64-64"];
m10_24 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="62-62"];
m10_0 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m10_1 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerMonitoringApi.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
m10_3 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerMonitoringApi.cs", label="testRunner.OnFeatureStart(featureInfo)", span="36-36"];
m10_4 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m10_14 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", span="47-47"];
m10_15 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="SqlServerMonitoringApi.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Re-queueing of timed out jobs''))", span="49-50"];
m10_16 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="SqlServerMonitoringApi.cs", label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(null)", span="52-52"];
m10_17 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", span="47-47"];
m10_90 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", span="215-215"];
m10_91 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SqlServerMonitoringApi.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Job\'s state is changed to the Enqueued when the job is being timed out after proc'' +\r\n                    ''eeding to the Processing state'', new string[] {\r\n                        ''checkpoint-3''})", span="217-219"];
m10_92 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SqlServerMonitoringApi.cs", label="this.ScenarioSetup(scenarioInfo)", span="221-221"];
m10_93 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SqlServerMonitoringApi.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="223-223"];
m10_94 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''its state is Processing'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="225-225"];
m10_95 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="227-227"];
m10_96 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SqlServerMonitoringApi.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="229-229"];
m10_97 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SqlServerMonitoringApi.cs", label="testRunner.Then(''the job moved to the Enqueued state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="231-231"];
m10_98 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="233-233"];
m10_99 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SqlServerMonitoringApi.cs", label="this.ScenarioCleanup()", span="235-235"];
m10_100 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", span="215-215"];
m10_13 [cluster="Unk.OnFeatureEnd", file="SqlServerMonitoringApi.cs", label="Entry Unk.OnFeatureEnd", span=""];
m10_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="SqlServerMonitoringApi.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m10_40 [cluster="Unk.When", file="SqlServerMonitoringApi.cs", label="Entry Unk.When", span=""];
m10_122 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", span="291-291"];
m10_123 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''When the server could not find the job\'s type, the job is moved to the Failed sta'' +\r\n                    ''te'', ((string[])(null)))", span="293-294"];
m10_124 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="this.ScenarioSetup(scenarioInfo)", span="296-296"];
m10_125 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="testRunner.Given(''a dequeued job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="298-298"];
m10_126 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="300-300"];
m10_127 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="302-302"];
m10_128 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="testRunner.Then(''the job moved to the Failed state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="304-304"];
m10_129 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="306-306"];
m10_130 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="this.ScenarioCleanup()", span="308-308"];
m10_131 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", span="291-291"];
m10_101 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", span="243-243"];
m10_102 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SqlServerMonitoringApi.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out job in the Succeeded state does not move to the Enqueued state'', new string[] {\r\n                        ''checkpoint-4''})", span="245-246"];
m10_103 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SqlServerMonitoringApi.cs", label="this.ScenarioSetup(scenarioInfo)", span="248-248"];
m10_104 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SqlServerMonitoringApi.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="250-250"];
m10_105 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''its state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="252-252"];
m10_106 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="254-254"];
m10_107 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SqlServerMonitoringApi.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="256-256"];
m10_108 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SqlServerMonitoringApi.cs", label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="258-258"];
m10_109 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SqlServerMonitoringApi.cs", label="testRunner.But(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="260-260"];
m10_110 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SqlServerMonitoringApi.cs", label="this.ScenarioCleanup()", span="262-262"];
m10_111 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", span="243-243"];
m10_42 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", span="98-98"];
m10_43 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SqlServerMonitoringApi.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Non-timed out job in the \'Checked\' state should not be requeued'', new string[] {\r\n                        ''checkpoint-1-2''})", span="100-101"];
m10_44 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SqlServerMonitoringApi.cs", label="this.ScenarioSetup(scenarioInfo)", span="103-103"];
m10_45 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SqlServerMonitoringApi.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="105-105"];
m10_46 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''it was checked a millisecond ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="107-107"];
m10_47 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SqlServerMonitoringApi.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="109-109"];
m10_48 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SqlServerMonitoringApi.cs", label="testRunner.Then(''the dequeued jobs list still contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="111-111"];
m10_49 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="113-113"];
m10_50 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''the job has the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="115-115"];
m10_51 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SqlServerMonitoringApi.cs", label="this.ScenarioCleanup()", span="117-117"];
m10_52 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", span="98-98"];
m10_54 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", span="125-125"];
m10_55 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SqlServerMonitoringApi.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed job in the \'Checked\' state should be requeued'', new string[] {\r\n                        ''checkpoint-1-2''})", span="127-128"];
m10_56 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SqlServerMonitoringApi.cs", label="this.ScenarioSetup(scenarioInfo)", span="130-130"];
m10_57 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SqlServerMonitoringApi.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="132-132"];
m10_58 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''it was checked a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="134-134"];
m10_59 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SqlServerMonitoringApi.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="136-136"];
m10_60 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SqlServerMonitoringApi.cs", label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="138-138"];
m10_61 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="140-140"];
m10_62 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''the job does not have the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="142-142"];
m10_63 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SqlServerMonitoringApi.cs", label="this.ScenarioCleanup()", span="144-144"];
m10_64 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", span="125-125"];
m10_38 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SqlServerMonitoringApi.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m10_30 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", span="77-77"];
m10_31 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SqlServerMonitoringApi.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''A job in the implicit \'Dequeued\' state moved to the \'Checked\' state'', new string[] {\r\n                        ''checkpoint-1-1''})", span="79-80"];
m10_32 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SqlServerMonitoringApi.cs", label="this.ScenarioSetup(scenarioInfo)", span="82-82"];
m10_33 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SqlServerMonitoringApi.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="84-84"];
m10_34 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SqlServerMonitoringApi.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="86-86"];
m10_35 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SqlServerMonitoringApi.cs", label="testRunner.Then(''it marks the job as \'checked\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="88-88"];
m10_36 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SqlServerMonitoringApi.cs", label="this.ScenarioCleanup()", span="90-90"];
m10_37 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", span="77-77"];
m10_41 [cluster="Unk.Then", file="SqlServerMonitoringApi.cs", label="Entry Unk.Then", span=""];
m10_39 [cluster="Unk.Given", file="SqlServerMonitoringApi.cs", label="Entry Unk.Given", span=""];
m10_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SqlServerMonitoringApi.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m10_18 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioTearDown()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioTearDown()", span="57-57"];
m10_19 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioTearDown()", file="SqlServerMonitoringApi.cs", label="testRunner.OnScenarioEnd()", span="59-59"];
m10_20 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioTearDown()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioTearDown()", span="57-57"];
m10_132 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", span="315-315"];
m10_133 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Succeeded job of non-existing type will not be moved to the failed state'', ((string[])(null)))", span="317-317"];
m10_134 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="this.ScenarioSetup(scenarioInfo)", span="319-319"];
m10_135 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="testRunner.Given(''a dequeued job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="321-321"];
m10_136 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''its state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="323-323"];
m10_137 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="325-325"];
m10_138 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="327-327"];
m10_139 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="329-329"];
m10_140 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="testRunner.But(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="331-331"];
m10_141 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="this.ScenarioCleanup()", span="333-333"];
m10_142 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", span="315-315"];
m10_8 [cluster="Unk.OnFeatureStart", file="SqlServerMonitoringApi.cs", label="Entry Unk.OnFeatureStart", span=""];
m10_113 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", span="269-269"];
m10_114 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="SqlServerMonitoringApi.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Job is being enqueued on its actual queue after timing out'', ((string[])(null)))", span="271-271"];
m10_115 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="SqlServerMonitoringApi.cs", label="this.ScenarioSetup(scenarioInfo)", span="273-273"];
m10_116 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''a dequeued job from the \'test\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="275-275"];
m10_117 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="SqlServerMonitoringApi.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="277-277"];
m10_118 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="SqlServerMonitoringApi.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="279-279"];
m10_119 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="SqlServerMonitoringApi.cs", label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="281-281"];
m10_120 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="SqlServerMonitoringApi.cs", label="this.ScenarioCleanup()", span="283-283"];
m10_121 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", span="269-269"];
m10_143 [file="SqlServerMonitoringApi.cs", label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", span=""];
m11_2 [cluster="HangFire.Common.Filters.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", file="SqlServerStorage.cs", label="Entry HangFire.Common.Filters.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", span="119-119"];
m11_3 [cluster="HangFire.Common.Filters.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", file="SqlServerStorage.cs", label="var list = filters.Select(f => f.Instance).ToList()", span="121-121"];
m11_4 [cluster="HangFire.Common.Filters.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", file="SqlServerStorage.cs", label="_clientFilters.AddRange(list.OfType<IClientFilter>())", span="123-123"];
m11_5 [cluster="HangFire.Common.Filters.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", file="SqlServerStorage.cs", label="_serverFilters.AddRange(list.OfType<IServerFilter>())", span="124-124"];
m11_6 [cluster="HangFire.Common.Filters.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", file="SqlServerStorage.cs", label="_stateChangingFilters.AddRange(list.OfType<IStateChangingFilter>())", span="126-126"];
m11_7 [cluster="HangFire.Common.Filters.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", file="SqlServerStorage.cs", label="_stateChangedFilters.AddRange(list.OfType<IStateChangedFilter>())", span="127-127"];
m11_8 [cluster="HangFire.Common.Filters.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", file="SqlServerStorage.cs", label="_clientExceptionFilters.AddRange(list.OfType<IClientExceptionFilter>())", span="129-129"];
m11_9 [cluster="HangFire.Common.Filters.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", file="SqlServerStorage.cs", label="_serverExceptionFilters.AddRange(list.OfType<IServerExceptionFilter>())", span="130-130"];
m11_10 [cluster="HangFire.Common.Filters.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", file="SqlServerStorage.cs", label="Exit HangFire.Common.Filters.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", span="119-119"];
m11_13 [cluster="Unk.>", file="SqlServerStorage.cs", label="Entry Unk.>", span=""];
m11_12 [cluster="Unk.ToList", file="SqlServerStorage.cs", label="Entry Unk.ToList", span=""];
m11_14 [cluster="Unk.AddRange", file="SqlServerStorage.cs", label="Entry Unk.AddRange", span=""];
m11_15 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="121-121"];
m11_16 [cluster="lambda expression", file="SqlServerStorage.cs", label="f.Instance", span="121-121"];
m11_17 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="121-121"];
m11_0 [cluster="HangFire.Common.Filters.JobFilterInfo.JobFilterInfo()", file="SqlServerStorage.cs", label="Entry HangFire.Common.Filters.JobFilterInfo.JobFilterInfo()", span="111-111"];
m11_1 [cluster="HangFire.Common.Filters.JobFilterInfo.JobFilterInfo()", file="SqlServerStorage.cs", label="Exit HangFire.Common.Filters.JobFilterInfo.JobFilterInfo()", span="111-111"];
m11_11 [cluster="Unk.Select", file="SqlServerStorage.cs", label="Entry Unk.Select", span=""];
m11_18 [file="SqlServerStorage.cs", label="HangFire.Common.Filters.JobFilterInfo", span=""];
m13_31 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Method()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Method()", span="200-200"];
m13_172 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Method()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Method()", span="200-200"];
m13_16 [cluster="Mock<IStateMachineFactory>.cstr", file="SqlServerStorageOptions.cs", label="Entry Mock<IStateMachineFactory>.cstr", span=""];
m13_18 [cluster="Mock<IState>.cstr", file="SqlServerStorageOptions.cs", label="Entry Mock<IState>.cstr", span=""];
m13_9 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", color=green, community=0, file="SqlServerStorageOptions.cs", label="_job = Job.FromExpression(() => Method())", prediction=30, span="33-33"];
m13_37 [cluster="Unk.Equal", file="SqlServerStorageOptions.cs", label="Entry Unk.Equal", span=""];
m13_10 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", span="20-20"];
m13_0 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", span="20-20"];
m13_1 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="SqlServerStorageOptions.cs", label="_connection = new Mock<IStorageConnection>()", span="22-22"];
m13_2 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="SqlServerStorageOptions.cs", label="_storage = new Mock<JobStorage>()", span="23-23"];
m13_3 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="SqlServerStorageOptions.cs", label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="24-24"];
m13_4 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="SqlServerStorageOptions.cs", label="_stateMachine = new Mock<IStateMachine>()", span="26-26"];
m13_5 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="SqlServerStorageOptions.cs", label="_stateMachineFactory = new Mock<IStateMachineFactory>()", span="28-28"];
m13_6 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="SqlServerStorageOptions.cs", label="_stateMachineFactory.Setup(x => x.Create(_connection.Object)).Returns(_stateMachine.Object)", span="29-29"];
m13_7 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="SqlServerStorageOptions.cs", label="_process = new Mock<IJobCreationProcess>()", span="31-31"];
m13_17 [cluster="Mock<IJobCreationProcess>.cstr", file="SqlServerStorageOptions.cs", label="Entry Mock<IJobCreationProcess>.cstr", span=""];
m13_60 [cluster="Unk.DoesNotThrow", file="SqlServerStorageOptions.cs", label="Entry Unk.DoesNotThrow", span=""];
m13_94 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerStorageOptions.cs", label="Entry Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="80-80"];
m13_104 [cluster="Unk.Run", file="SqlServerStorageOptions.cs", label="Entry Unk.Run", span=""];
m13_32 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37"];
m13_33 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerStorageOptions.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobClient(null, _stateMachineFactory.Object, _process.Object))", span="39-40"];
m13_34 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerStorageOptions.cs", label="Assert.Equal(''storage'', exception.ParamName)", span="42-42"];
m13_35 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37"];
m13_77 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", span="84-84"];
m13_78 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="SqlServerStorageOptions.cs", label="var client = CreateClient()", span="86-86"];
m13_79 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="SqlServerStorageOptions.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => client.Create(null, _state.Object))", span="88-89"];
m13_80 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="SqlServerStorageOptions.cs", label="Assert.Equal(''job'', exception.ParamName)", span="91-91"];
m13_81 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", span="84-84"];
m13_36 [cluster="Unk.>", file="SqlServerStorageOptions.cs", label="Entry Unk.>", span=""];
m13_56 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()", span="64-64"];
m13_57 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()", file="SqlServerStorageOptions.cs", label="JobStorage.Current = new Mock<JobStorage>().Object", span="66-66"];
m13_58 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()", file="SqlServerStorageOptions.cs", label="Assert.DoesNotThrow(() => new BackgroundJobClient())", span="67-67"];
m13_59 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()", span="64-64"];
m13_8 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="SqlServerStorageOptions.cs", label="_state = new Mock<IState>()", span="32-32"];
m13_95 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", span="106-106"];
m13_96 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", file="SqlServerStorageOptions.cs", label="var client = CreateClient()", span="108-108"];
m13_97 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", file="SqlServerStorageOptions.cs", label="client.Create(_job, _state.Object)", span="110-110"];
m13_98 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", file="SqlServerStorageOptions.cs", label="_process.Verify(x => x.Run(It.IsNotNull<CreateContext>()))", span="112-112"];
m13_99 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", span="106-106"];
m13_23 [cluster="Unk.GetConnection", file="SqlServerStorageOptions.cs", label="Entry Unk.GetConnection", span=""];
m13_136 [cluster="Unk.ChangeState", file="SqlServerStorageOptions.cs", label="Entry Unk.ChangeState", span=""];
m13_121 [cluster="Unk.NotNull", file="SqlServerStorageOptions.cs", label="Entry Unk.NotNull", span=""];
m13_114 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", span="127-127"];
m13_115 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", file="SqlServerStorageOptions.cs", label="var client = CreateClient()", span="129-129"];
m13_116 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", file="SqlServerStorageOptions.cs", label="_process.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws<InvalidOperationException>()", span="130-131"];
m13_117 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", file="SqlServerStorageOptions.cs", label="var exception = Assert.Throws<CreateJobFailedException>(\r\n                () => client.Create(_job, _state.Object))", span="133-134"];
m13_118 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", file="SqlServerStorageOptions.cs", label="Assert.NotNull(exception.InnerException)", span="136-136"];
m13_119 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", file="SqlServerStorageOptions.cs", label="Assert.IsType<InvalidOperationException>(exception.InnerException)", span="137-137"];
m13_120 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", span="127-127"];
m13_145 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="SqlServerStorageOptions.cs", label="Entry Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="100-100"];
m13_146 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", span="163-163"];
m13_147 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", file="SqlServerStorageOptions.cs", label="var client = CreateClient()", span="165-165"];
m13_148 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", file="SqlServerStorageOptions.cs", label="client.ChangeState(''job-id'', _state.Object, null)", span="167-167"];
m13_149 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", file="SqlServerStorageOptions.cs", label="_stateMachine.Verify(x => x.ChangeState(\r\n                ''job-id'',\r\n                _state.Object,\r\n                null))", span="169-172"];
m13_150 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", span="163-163"];
m13_13 [cluster="Unk.Setup", file="SqlServerStorageOptions.cs", label="Entry Unk.Setup", span=""];
m13_64 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.BackgroundJobClient.BackgroundJobClient()", span="38-38"];
m13_42 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="46-46"];
m13_43 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="SqlServerStorageOptions.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobClient(_storage.Object, null, _process.Object))", span="48-49"];
m13_44 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="SqlServerStorageOptions.cs", label="Assert.Equal(''stateMachineFactory'', exception.ParamName)", span="51-51"];
m13_45 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="46-46"];
m13_86 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", span="95-95"];
m13_87 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", file="SqlServerStorageOptions.cs", label="var client = CreateClient()", span="97-97"];
m13_88 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", file="SqlServerStorageOptions.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => client.Create(_job, null))", span="99-100"];
m13_89 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", file="SqlServerStorageOptions.cs", label="Assert.Equal(''state'', exception.ParamName)", span="102-102"];
m13_90 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", span="95-95"];
m13_61 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="67-67"];
m13_28 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="33-33"];
m13_29 [cluster="lambda expression", color=green, community=0, file="SqlServerStorageOptions.cs", label="Method()", prediction=31, span="33-33"];
m13_30 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="33-33"];
m13_25 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="x.Create(_connection.Object)", span="29-29"];
m13_39 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="new BackgroundJobClient(null, _stateMachineFactory.Object, _process.Object)", span="40-40"];
m13_47 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="new BackgroundJobClient(_storage.Object, null, _process.Object)", span="49-49"];
m13_54 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object, null)", span="58-58"];
m13_69 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="new BackgroundJobClient(_storage.Object)", span="73-73"];
m13_75 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object)", span="80-80"];
m13_84 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="client.Create(null, _state.Object)", span="89-89"];
m13_92 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="client.Create(_job, null)", span="100-100"];
m13_126 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="client.Create(_job, _state.Object)", span="134-134"];
m13_134 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="client.ChangeState(null, _state.Object, null)", span="146-146"];
m13_152 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="x.ChangeState(\r\n                ''job-id'',\r\n                _state.Object,\r\n                null)", span="169-172"];
m13_160 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="x.ChangeState(\r\n                ''job-id'',\r\n                _state.Object,\r\n                new[] { ''State'' })", span="182-185"];
m13_170 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="x.ChangeState(''job-id'', _state.Object, null)", span="191-191"];
m13_20 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="24-24"];
m13_24 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="29-29"];
m13_26 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="29-29"];
m13_38 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="40-40"];
m13_40 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="40-40"];
m13_46 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="49-49"];
m13_48 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="49-49"];
m13_53 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="58-58"];
m13_55 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="58-58"];
m13_68 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="73-73"];
m13_70 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="73-73"];
m13_74 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="80-80"];
m13_76 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="80-80"];
m13_83 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="89-89"];
m13_85 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="89-89"];
m13_91 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="100-100"];
m13_93 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="100-100"];
m13_101 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="112-112"];
m13_111 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="118-118"];
m13_122 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="130-130"];
m13_125 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="134-134"];
m13_127 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="134-134"];
m13_133 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="146-146"];
m13_135 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="146-146"];
m13_143 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="client.ChangeState(''jobId'', null, null)", span="157-157"];
m13_151 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="169-172"];
m13_153 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="169-172"];
m13_159 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="182-185"];
m13_161 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="182-185"];
m13_169 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="191-191"];
m13_171 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="191-191"];
m13_22 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="24-24"];
m13_21 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="x.GetConnection()", span="24-24"];
m13_102 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="x.Run(It.IsNotNull<CreateContext>())", span="112-112"];
m13_112 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="x.Run(It.IsAny<CreateContext>())", span="118-118"];
m13_123 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="x.Run(It.IsAny<CreateContext>())", span="130-130"];
m13_103 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="112-112"];
m13_113 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="118-118"];
m13_124 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="130-130"];
m13_142 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="157-157"];
m13_144 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="157-157"];
m13_62 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="new BackgroundJobClient()", span="67-67"];
m13_63 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="67-67"];
m13_105 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", span="116-116"];
m13_106 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", file="SqlServerStorageOptions.cs", label="_process.Setup(x => x.Run(It.IsAny<CreateContext>())).Returns(''some-job'')", span="118-118"];
m13_107 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", file="SqlServerStorageOptions.cs", label="var client = CreateClient()", span="119-119"];
m13_108 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", file="SqlServerStorageOptions.cs", label="var id = client.Create(_job, _state.Object)", span="121-121"];
m13_109 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", file="SqlServerStorageOptions.cs", label="Assert.Equal(''some-job'', id)", span="123-123"];
m13_110 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", span="116-116"];
m13_82 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateClient()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateClient()", span="204-204"];
m13_173 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateClient()", file="SqlServerStorageOptions.cs", label="return new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object, _process.Object);", span="206-206"];
m13_174 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateClient()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateClient()", span="204-204"];
m13_100 [cluster="Unk.Verify", file="SqlServerStorageOptions.cs", label="Entry Unk.Verify", span=""];
m13_65 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()", span="71-71"];
m13_66 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()", file="SqlServerStorageOptions.cs", label="Assert.DoesNotThrow(() => new BackgroundJobClient(_storage.Object))", span="73-73"];
m13_67 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()", span="71-71"];
m13_128 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", span="141-141"];
m13_129 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerStorageOptions.cs", label="var client = CreateClient()", span="143-143"];
m13_130 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerStorageOptions.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => client.ChangeState(null, _state.Object, null))", span="145-146"];
m13_131 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerStorageOptions.cs", label="Assert.Equal(''jobId'', exception.ParamName)", span="148-148"];
m13_132 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", span="141-141"];
m13_49 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", span="55-55"];
m13_50 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", file="SqlServerStorageOptions.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object, null))", span="57-58"];
m13_51 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", file="SqlServerStorageOptions.cs", label="Assert.Equal(''process'', exception.ParamName)", span="60-60"];
m13_52 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", span="55-55"];
m13_154 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", span="176-176"];
m13_155 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", file="SqlServerStorageOptions.cs", label="var client = CreateClient()", span="178-178"];
m13_156 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", file="SqlServerStorageOptions.cs", label="client.ChangeState(''job-id'', _state.Object, ''State'')", span="180-180"];
m13_157 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", file="SqlServerStorageOptions.cs", label="_stateMachine.Verify(x => x.ChangeState(\r\n                ''job-id'',\r\n                _state.Object,\r\n                new[] { ''State'' }))", span="182-185"];
m13_158 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", span="176-176"];
m13_15 [cluster="Mock<IStateMachine>.cstr", file="SqlServerStorageOptions.cs", label="Entry Mock<IStateMachine>.cstr", span=""];
m13_27 [cluster="Unk.Create", file="SqlServerStorageOptions.cs", label="Entry Unk.Create", span=""];
m13_162 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()", span="189-189"];
m13_163 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()", file="SqlServerStorageOptions.cs", label="_stateMachine.Setup(x => x.ChangeState(''job-id'', _state.Object, null))\r\n                .Returns(true)", span="191-192"];
m13_164 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()", file="SqlServerStorageOptions.cs", label="var client = CreateClient()", span="193-193"];
m13_165 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()", file="SqlServerStorageOptions.cs", label="var result = client.ChangeState(''job-id'', _state.Object, null)", span="195-195"];
m13_166 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()", file="SqlServerStorageOptions.cs", label="Assert.True(result)", span="197-197"];
m13_167 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()", span="189-189"];
m13_168 [cluster="Unk.True", file="SqlServerStorageOptions.cs", label="Entry Unk.True", span=""];
m13_14 [cluster="Unk.Returns", file="SqlServerStorageOptions.cs", label="Entry Unk.Returns", span=""];
m13_137 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", span="152-152"];
m13_138 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", file="SqlServerStorageOptions.cs", label="var client = CreateClient()", span="154-154"];
m13_139 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", file="SqlServerStorageOptions.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => client.ChangeState(''jobId'', null, null))", span="156-157"];
m13_140 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", file="SqlServerStorageOptions.cs", label="Assert.Equal(''state'', exception.ParamName)", span="159-159"];
m13_141 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", span="152-152"];
m13_41 [cluster="BackgroundJobClient.cstr", file="SqlServerStorageOptions.cs", label="Entry BackgroundJobClient.cstr", span=""];
m13_71 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", span="77-77"];
m13_72 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", file="SqlServerStorageOptions.cs", label="Assert.DoesNotThrow(\r\n                () => new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object))", span="79-80"];
m13_73 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", span="77-77"];
m13_11 [cluster="Mock<IStorageConnection>.cstr", file="SqlServerStorageOptions.cs", label="Hangfire.SqlServer.SqlServerStorageOptions", span=""];
m13_12 [cluster="Mock<JobStorage>.cstr", file="SqlServerStorageOptions.cs", label="Entry Mock<JobStorage>.cstr", span=""];
m13_19 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerStorageOptions.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="148-148"];
m13_175 [file="SqlServerStorageOptions.cs", label="Hangfire.Core.Tests.BackgroundJobClientFacts", span=""];
m13_176 [file="SqlServerStorageOptions.cs", label=client, span=""];
m13_177 [file="SqlServerStorageOptions.cs", label=client, span=""];
m13_178 [file="SqlServerStorageOptions.cs", label=client, span=""];
m13_179 [file="SqlServerStorageOptions.cs", label=client, span=""];
m13_180 [file="SqlServerStorageOptions.cs", label=client, span=""];
m3_602 -> m3_604  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_791 -> m3_793  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_458 -> m3_460  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_344 -> m3_346  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_719 -> m3_721  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_648 -> m3_650  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_845 -> m3_847  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_251 -> m3_253  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_324 -> m3_326  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_285 -> m3_287  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_837 -> m3_839  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_189 -> m3_191  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_863 -> m3_865  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_700 -> m3_702  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_262 -> m3_264  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_333 -> m3_335  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_410 -> m3_412  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_753 -> m3_755  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_220 -> m3_222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_639 -> m3_641  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_827 -> m3_829  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_382 -> m3_384  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_306 -> m3_308  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_231 -> m3_233  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_871 -> m3_873  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_546 -> m3_548  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_491 -> m3_493  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_199 -> m3_201  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_556 -> m3_558  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_421 -> m3_423  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_420 -> m3_424  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m3_16 -> m3_21  [color=green, key=1, label="lambda expression", style=dashed];
m3_564 -> m3_566  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_762 -> m3_764  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_692 -> m3_694  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_773 -> m3_775  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_392 -> m3_394  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_33 -> m3_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_50 -> m3_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_78 -> m3_81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_90 -> m3_93  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_152 -> m3_154  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_192 -> m3_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_243 -> m3_246  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_254 -> m3_257  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_298 -> m3_301  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_309 -> m3_312  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_336 -> m3_339  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_347 -> m3_349  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_373 -> m3_376  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_385 -> m3_388  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_413 -> m3_415  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_434 -> m3_436  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_461 -> m3_463  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_484 -> m3_486  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_513 -> m3_516  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_524 -> m3_527  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_549 -> m3_551  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_578 -> m3_580  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_605 -> m3_607  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_624 -> m3_626  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_659 -> m3_661  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_685 -> m3_687  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_712 -> m3_714  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_738 -> m3_740  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_765 -> m3_768  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_776 -> m3_779  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_802 -> m3_805  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_830 -> m3_832  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_856 -> m3_858  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_29 -> m3_32  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_30 -> m3_33  [color=darkseagreen4, key=1, label=token, style=dashed];
m3_30 -> m3_32  [color=darkseagreen4, key=1, label=token, style=dashed];
m3_30 -> m3_39  [color=darkseagreen4, key=1, label=token, style=dashed];
m3_31 -> m3_33  [color=darkseagreen4, key=1, label=queues, style=dashed];
m3_31 -> m3_39  [color=darkseagreen4, key=1, label=queues, style=dashed];
m3_46 -> m3_50  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_46 -> m3_54  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_77 -> m3_82  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_89 -> m3_94  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_151 -> m3_155  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_191 -> m3_195  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_242 -> m3_247  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_253 -> m3_258  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_264 -> m3_267  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_275 -> m3_278  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_275 -> m3_279  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_287 -> m3_290  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_297 -> m3_302  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_308 -> m3_313  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_335 -> m3_340  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_346 -> m3_350  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_372 -> m3_377  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_384 -> m3_389  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_394 -> m3_396  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_394 -> m3_402  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_412 -> m3_416  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_423 -> m3_425  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_433 -> m3_437  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_444 -> m3_446  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_460 -> m3_464  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_472 -> m3_474  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_483 -> m3_487  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_512 -> m3_517  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_523 -> m3_528  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_548 -> m3_552  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_577 -> m3_581  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_604 -> m3_608  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_623 -> m3_627  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_658 -> m3_662  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_684 -> m3_688  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_711 -> m3_715  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_737 -> m3_741  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_764 -> m3_769  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_775 -> m3_780  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_801 -> m3_806  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_829 -> m3_833  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_855 -> m3_859  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_47 -> m3_50  [color=darkseagreen4, key=1, label=token, style=dashed];
m3_47 -> m3_54  [color=darkseagreen4, key=1, label=token, style=dashed];
m3_106 -> m3_112  [color=darkseagreen4, key=1, label=createdAt, style=dashed];
m3_106 -> m3_121  [color=darkseagreen4, key=1, label=createdAt, style=dashed];
m3_106 -> m3_122  [color=darkseagreen4, key=1, label=createdAt, style=dashed];
m3_110 -> m3_112  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m3_110 -> m3_113  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m3_110 -> m3_114  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m3_110 -> m3_121  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m3_110 -> m3_122  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m3_107 -> m3_111  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m3_107 -> m3_139  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_107 -> m3_109  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m3_117 -> m3_119  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_117 -> m3_120  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_123 -> m3_125  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m3_123 -> m3_142  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_123 -> m3_145  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_173 -> m3_176  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_173 -> m3_177  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_173 -> m3_175  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_173 -> m3_178  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_173 -> m3_179  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_173 -> m3_180  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_212 -> m3_214  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_212 -> m3_215  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_212 -> m3_216  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_225 -> m3_227  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_397 -> m3_399  [color=darkseagreen4, key=1, label=server, style=dashed];
m3_397 -> m3_400  [color=darkseagreen4, key=1, label=server, style=dashed];
m3_403 -> m3_405  [color=darkseagreen4, key=1, label=sameServer, style=dashed];
m3_447 -> m3_449  [color=darkseagreen4, key=1, label=servers, style=dashed];
m3_447 -> m3_451  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_447 -> m3_454  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_494 -> m3_496  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_504 -> m3_506  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_504 -> m3_507  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_535 -> m3_537  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_535 -> m3_539  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_535 -> m3_542  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_568 -> m3_570  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_568 -> m3_571  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_568 -> m3_572  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_94 -> m3_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_171 -> m3_185  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_704 -> m3_706  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_757 -> m3_759  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_875 -> m3_877  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_277 -> m3_279  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m3_674 -> m3_676  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_370 -> m3_372  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_481 -> m3_483  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_879 -> m3_883  [color=green, key=1, label="System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>", style=dashed];
m3_880 -> m3_883  [color=green, key=1, label=sqlConnection, style=dashed];
m3_240 -> m3_242  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_159 -> m3_161  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_57 -> m3_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_316 -> m3_318  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_709 -> m3_711  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_510 -> m3_512  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_3 -> m3_11  [color=green, key=1, label="lambda expression", style=dashed];
m3_87 -> m3_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_593 -> m3_595  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_745 -> m3_747  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_470 -> m3_472  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_735 -> m3_737  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_207 -> m3_209  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_783 -> m3_785  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_43 -> m3_46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_656 -> m3_658  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_26 -> m3_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_500 -> m3_502  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_521 -> m3_523  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_666 -> m3_668  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_682 -> m3_684  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_28 -> m3_892  [color=green, key=1, label="System.Action<Hangfire.SqlServer.SqlServerConnection>", style=dashed];
m3_890 -> m3_897  [color=green, key=1, label="lambda expression", style=dashed];
m3_621 -> m3_623  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_799 -> m3_801  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_295 -> m3_297  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_819 -> m3_821  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_75 -> m3_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_631 -> m3_633  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_853 -> m3_855  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_66 -> m3_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_575 -> m3_577  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_361 -> m3_363  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_360 -> m3_364  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m3_613 -> m3_615  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_273 -> m3_275  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_442 -> m3_444  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_441 -> m3_445  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m3_810 -> m3_812  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_531 -> m3_533  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_168 -> m3_170  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_431 -> m3_433  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_727 -> m3_729  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_149 -> m3_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_102 -> m3_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_353 -> m3_355  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_585 -> m3_587  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_901 -> m3_3  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_901 -> m3_890  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_901 -> m3_33  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_901 -> m3_49  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_901 -> m3_149  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_901 -> m3_189  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_901 -> m3_344  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_901 -> m3_410  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_901 -> m3_431  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_901 -> m3_458  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_901 -> m3_481  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_901 -> m3_546  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_901 -> m3_575  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_901 -> m3_602  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_901 -> m3_621  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_901 -> m3_656  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_901 -> m3_682  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_901 -> m3_709  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_901 -> m3_735  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_901 -> m3_827  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_901 -> m3_853  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m3_902 -> m3_39  [color=darkseagreen4, key=1, label=token, style=dashed];
m3_903 -> m3_39  [color=darkseagreen4, key=1, label=queues, style=dashed];
m3_904 -> m3_54  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_905 -> m3_54  [color=darkseagreen4, key=1, label=token, style=dashed];
m3_906 -> m3_82  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_907 -> m3_94  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_908 -> m3_155  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_910 -> m3_195  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_914 -> m3_247  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_915 -> m3_258  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_919 -> m3_302  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_920 -> m3_313  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_922 -> m3_340  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_923 -> m3_350  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_924 -> m3_364  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m3_925 -> m3_377  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_926 -> m3_389  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_927 -> m3_416  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_928 -> m3_424  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m3_929 -> m3_437  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_930 -> m3_445  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m3_931 -> m3_464  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_933 -> m3_487  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_935 -> m3_517  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_936 -> m3_528  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_937 -> m3_552  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_939 -> m3_581  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_941 -> m3_608  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_943 -> m3_627  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_946 -> m3_662  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_948 -> m3_688  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_950 -> m3_715  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_952 -> m3_741  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_954 -> m3_769  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_955 -> m3_780  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_957 -> m3_806  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_959 -> m3_833  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_961 -> m3_859  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m4_48 -> m4_50  [color=darkseagreen4, key=1, label=table1, style=dashed];
m4_108 -> m4_40  [color=green, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_46  [color=green, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_47  [color=green, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_37  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_38  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_51  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_57  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_58  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_61  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_66  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_67  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_70  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_74  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_75  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_78  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_82  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_83  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_87  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_92  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_93  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_97  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_101  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_102  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m4_108 -> m4_106  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m5_57 -> m5_59  [color=darkseagreen4, key=1, label=table2, style=dashed];
m5_57 -> m5_60  [color=darkseagreen4, key=1, label=table2, style=dashed];
m5_57 -> m5_61  [color=darkseagreen4, key=1, label=table2, style=dashed];
m5_57 -> m5_62  [color=darkseagreen4, key=1, label=table2, style=dashed];
m5_88 -> m5_90  [color=darkseagreen4, key=1, label=table4, style=dashed];
m5_88 -> m5_91  [color=darkseagreen4, key=1, label=table4, style=dashed];
m5_88 -> m5_92  [color=darkseagreen4, key=1, label=table4, style=dashed];
m5_131 -> m5_133  [color=darkseagreen4, key=1, label=table6, style=dashed];
m5_131 -> m5_134  [color=darkseagreen4, key=1, label=table6, style=dashed];
m5_0 -> m5_3  [color=darkseagreen4, key=1, label=IDbConnection, style=dashed];
m5_0 -> m5_5  [color=darkseagreen4, key=1, label=IDbTransaction, style=dashed];
m5_0 -> m5_7  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_0 -> m5_9  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_0 -> m5_12  [color=darkseagreen4, key=1, label=IDbConnection, style=dashed];
m5_0 -> m5_13  [color=darkseagreen4, key=1, label=IDbTransaction, style=dashed];
m5_0 -> m5_14  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_0 -> m5_15  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_74 -> m5_76  [color=darkseagreen4, key=1, label=table3, style=dashed];
m5_74 -> m5_77  [color=darkseagreen4, key=1, label=table3, style=dashed];
m5_74 -> m5_78  [color=darkseagreen4, key=1, label=table3, style=dashed];
m5_104 -> m5_106  [color=darkseagreen4, key=1, label=table5, style=dashed];
m5_104 -> m5_107  [color=darkseagreen4, key=1, label=table5, style=dashed];
m5_104 -> m5_108  [color=darkseagreen4, key=1, label=table5, style=dashed];
m5_104 -> m5_109  [color=darkseagreen4, key=1, label=table5, style=dashed];
m5_104 -> m5_110  [color=darkseagreen4, key=1, label=table5, style=dashed];
m5_32 -> m5_28  [color=green, key=1, label="Hangfire.SqlServer.SqlServerFetchedJob", style=dashed];
m5_32 -> m5_12  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerFetchedJob", style=dashed];
m5_32 -> m5_13  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerFetchedJob", style=dashed];
m5_32 -> m5_14  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerFetchedJob", style=dashed];
m5_32 -> m5_15  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerFetchedJob", style=dashed];
m5_32 -> m5_19  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerFetchedJob", style=dashed];
m5_32 -> m5_23  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerFetchedJob", style=dashed];
m5_32 -> m5_27  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerFetchedJob", style=dashed];
m5_36 -> m5_38  [color=darkseagreen4, key=1, label=table1, style=dashed];
m5_36 -> m5_39  [color=darkseagreen4, key=1, label=table1, style=dashed];
m5_146 -> m5_148  [color=darkseagreen4, key=1, label=table7, style=dashed];
m5_146 -> m5_149  [color=darkseagreen4, key=1, label=table7, style=dashed];
m5_146 -> m5_150  [color=darkseagreen4, key=1, label=table7, style=dashed];
m5_154 -> m5_32  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m5_154 -> m5_41  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m5_154 -> m5_52  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m5_154 -> m5_63  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m5_154 -> m5_67  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m5_154 -> m5_79  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m5_154 -> m5_83  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m5_154 -> m5_94  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m5_154 -> m5_98  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m5_154 -> m5_112  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m5_154 -> m5_116  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m5_154 -> m5_122  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m5_154 -> m5_126  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m5_154 -> m5_136  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m5_154 -> m5_140  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m5_154 -> m5_152  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m6_263 -> m6_265  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_263 -> m6_271  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_264 -> m6_266  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m6_271 -> m6_279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_267 -> m6_271  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_267 -> m6_280  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_267 -> m6_283  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_268 -> m6_273  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_269 -> m6_277  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_270 -> m6_276  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_26 -> m6_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_240 -> m6_246  [color=darkseagreen4, key=1, label=filter, style=dashed];
m6_246 -> m6_256  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_242 -> m6_246  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_242 -> m6_257  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_242 -> m6_260  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_243 -> m6_250  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_244 -> m6_254  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_245 -> m6_253  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_290 -> m6_297  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_290 -> m6_303  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_288 -> m6_298  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_288 -> m6_301  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_289 -> m6_294  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_291 -> m6_307  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_292 -> m6_306  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_88 -> m6_99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_87 -> m6_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_197 -> m6_199  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_197 -> m6_204  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_198 -> m6_200  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m6_204 -> m6_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_201 -> m6_206  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_201 -> m6_209  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_176 -> m6_182  [color=darkseagreen4, key=1, label=filter, style=dashed];
m6_178 -> m6_184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_178 -> m6_187  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_182 -> m6_193  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_181 -> m6_190  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_213 -> m6_215  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_257 -> m6_259  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_280 -> m6_282  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_298 -> m6_300  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_333 -> m6_335  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_310 -> m6_312  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_310 -> m6_318  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_311 -> m6_313  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m6_318 -> m6_332  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_315 -> m6_323  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_315 -> m6_326  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_314 -> m6_320  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_316 -> m6_330  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_317 -> m6_329  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_39 -> m6_43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_219 -> m6_221  [color=darkseagreen4, key=1, label=filter, style=dashed];
m6_219 -> m6_225  [color=darkseagreen4, key=1, label=filter, style=dashed];
m6_221 -> m6_227  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_225 -> m6_236  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_222 -> m6_231  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_223 -> m6_230  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_224 -> m6_233  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_2 -> m6_17  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_7 -> m6_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_152 -> m6_154  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_152 -> m6_156  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_152 -> m6_159  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_153 -> m6_155  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m6_153 -> m6_157  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m6_153 -> m6_158  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m6_156 -> m6_163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_159 -> m6_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_157 -> m6_166  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_158 -> m6_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_342 -> m6_18  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_7  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_38  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_39  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_90  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_154  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_155  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_161  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_177  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_180  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_181  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_199  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_200  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_203  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_220  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_223  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_231  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_224  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_241  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_243  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_245  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_254  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_265  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_266  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_268  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_270  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_277  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_287  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_289  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_292  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_307  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_312  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_313  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_314  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_317  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_330  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_342 -> m6_339  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m6_343 -> m6_33  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_348 -> m6_231  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_349 -> m6_254  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_350 -> m6_257  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_350 -> m6_260  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_351 -> m6_277  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_352 -> m6_280  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_352 -> m6_283  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_353 -> m6_298  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_353 -> m6_301  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_354 -> m6_307  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_355 -> m6_330  [color=darkseagreen4, key=1, label=process, style=dashed];
m7_0 -> m7_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m7_9 -> m7_12  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m7_9 -> m7_18  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_18 -> m7_18  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_18 -> m7_30  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_21 -> m7_32  [color=darkseagreen4, key=1, label=fetchedJob, style=dashed];
m7_30 -> m7_30  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_20 -> m7_23  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m7_20 -> m7_27  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m7_20 -> m7_28  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m7_31 -> m7_31  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_52 -> m7_30  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueue", style=dashed];
m10_143 -> m10_32  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m10_143 -> m10_36  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m10_143 -> m10_44  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m10_143 -> m10_51  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m10_143 -> m10_56  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m10_143 -> m10_63  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m10_143 -> m10_67  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m10_143 -> m10_76  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m10_143 -> m10_80  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m10_143 -> m10_88  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m10_143 -> m10_92  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m10_143 -> m10_99  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m10_143 -> m10_103  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m10_143 -> m10_110  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m10_143 -> m10_115  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m10_143 -> m10_120  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m10_143 -> m10_124  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m10_143 -> m10_130  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m10_143 -> m10_134  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m10_143 -> m10_141  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_3 -> m11_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_3 -> m11_5  [color=darkseagreen4, key=1, label=list, style=dashed];
m11_3 -> m11_6  [color=darkseagreen4, key=1, label=list, style=dashed];
m11_3 -> m11_7  [color=darkseagreen4, key=1, label=list, style=dashed];
m11_3 -> m11_8  [color=darkseagreen4, key=1, label=list, style=dashed];
m11_3 -> m11_9  [color=darkseagreen4, key=1, label=list, style=dashed];
m11_18 -> m11_4  [color=darkseagreen4, key=1, label="HangFire.Common.Filters.JobFilterInfo", style=dashed];
m11_18 -> m11_5  [color=darkseagreen4, key=1, label="HangFire.Common.Filters.JobFilterInfo", style=dashed];
m11_18 -> m11_6  [color=darkseagreen4, key=1, label="HangFire.Common.Filters.JobFilterInfo", style=dashed];
m11_18 -> m11_7  [color=darkseagreen4, key=1, label="HangFire.Common.Filters.JobFilterInfo", style=dashed];
m11_18 -> m11_8  [color=darkseagreen4, key=1, label="HangFire.Common.Filters.JobFilterInfo", style=dashed];
m11_18 -> m11_9  [color=darkseagreen4, key=1, label="HangFire.Common.Filters.JobFilterInfo", style=dashed];
m13_9 -> m13_28  [color=green, key=1, label="lambda expression", style=dashed];
m13_3 -> m13_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_6 -> m13_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_33 -> m13_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_78 -> m13_84  [color=darkseagreen4, key=1, label=client, style=dashed];
m13_79 -> m13_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_58 -> m13_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_98 -> m13_101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_115 -> m13_126  [color=darkseagreen4, key=1, label=client, style=dashed];
m13_116 -> m13_122  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_117 -> m13_125  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_117 -> m13_119  [color=darkseagreen4, key=1, label=exception, style=dashed];
m13_149 -> m13_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_43 -> m13_46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_87 -> m13_92  [color=darkseagreen4, key=1, label=client, style=dashed];
m13_88 -> m13_91  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_106 -> m13_111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_66 -> m13_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_129 -> m13_134  [color=darkseagreen4, key=1, label=client, style=dashed];
m13_130 -> m13_133  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_50 -> m13_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_157 -> m13_159  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_163 -> m13_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_138 -> m13_143  [color=darkseagreen4, key=1, label=client, style=dashed];
m13_139 -> m13_142  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_72 -> m13_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_11 -> m13_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m13_11 -> m13_6  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m13_175 -> m13_3  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_6  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_25  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_39  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_47  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_54  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_66  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_69  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_72  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_75  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_84  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_92  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_97  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_98  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_106  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_116  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_126  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_134  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_148  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_149  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_152  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_156  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_157  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_160  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_163  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_170  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_175 -> m13_173  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m13_176 -> m13_84  [color=darkseagreen4, key=1, label=client, style=dashed];
m13_177 -> m13_92  [color=darkseagreen4, key=1, label=client, style=dashed];
m13_178 -> m13_126  [color=darkseagreen4, key=1, label=client, style=dashed];
m13_179 -> m13_134  [color=darkseagreen4, key=1, label=client, style=dashed];
m13_180 -> m13_143  [color=darkseagreen4, key=1, label=client, style=dashed];
}
