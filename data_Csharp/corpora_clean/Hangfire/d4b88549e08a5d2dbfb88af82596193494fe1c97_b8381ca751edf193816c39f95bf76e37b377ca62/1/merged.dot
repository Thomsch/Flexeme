digraph  {
d95 [label="return JobHelper.FromJson<List<Continuation>>(connection.GetJobParameter(\r\n                jobId, ''Continuations'')) ?? new List<Continuation>();", span="221-222", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuations(Hangfire.Storage.IStorageConnection, string)", color=green, community=0];
d36 [label="Entry Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuations(Hangfire.Storage.IStorageConnection, string)", span="219-219", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuations(Hangfire.Storage.IStorageConnection, string)"];
d96 [label="Exit Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuations(Hangfire.Storage.IStorageConnection, string)", span="219-219", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuations(Hangfire.Storage.IStorageConnection, string)"];
d97 [label="Entry Hangfire.Storage.IStorageConnection.GetJobParameter(string, string)", span="39-39", cluster="Hangfire.Storage.IStorageConnection.GetJobParameter(string, string)"];
d98 [label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39", cluster="Hangfire.Common.JobHelper.FromJson<T>(string)"];
d99 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
d24 [label="var continuations = GetContinuations(connection, parentId)", span="85-85", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)"];
d46 [label="var continuations = GetContinuations(context.Connection, context.JobId)", span="121-121", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
d21 [label="var connection = context.Connection", span="76-76", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)"];
d22 [label="var parentId = awaitingState.ParentId", span="77-77", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)"];
d23 [label="connection.AcquireDistributedJobLock(parentId, AddJobLockTimeout)", span="83-83", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)"];
d25 [label="continuations.Add(new Continuation { JobId = context.JobId, Options = awaitingState.Options })", span="86-86", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)"];
d30 [label="SetContinuations(connection, parentId, continuations)", span="103-103", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)"];
d15 [label="Entry Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", span="117-117", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
d47 [label="var nextStates = new Dictionary<string, IState>()", span="122-122", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
d48 [label=continuations, span="126-126", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
d13 [label="Entry Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)", span="74-74", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)"];
d26 [label="var jobData = connection.GetJobData(parentId)", span="88-88", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)"];
d29 [label="var currentState = connection.GetStateData(parentId)", span="98-98", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)"];
d28 [label="throw new InvalidOperationException(\r\n                        String.Format(''Can not add a continuation: parent background job '{0}' does not exist.'', parentId));", span="94-95", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)"];
d35 [label="Entry Hangfire.Storage.IStorageConnection.AcquireDistributedJobLock(string, System.TimeSpan)", span="26-26", cluster="Hangfire.Storage.IStorageConnection.AcquireDistributedJobLock(string, System.TimeSpan)"];
d37 [label="Entry Hangfire.Continuations.ContinuationsSupportAttribute.Continuation.Continuation()", span="229-229", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.Continuation.Continuation()"];
d38 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)"];
d31 [label="currentState != null && _knownFinalStates.Contains(currentState.Name)", span="105-105", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)"];
d43 [label="Entry Hangfire.Continuations.ContinuationsSupportAttribute.SetContinuations(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.List<Hangfire.Continuations.ContinuationsSupportAttribute.Continuation>)", span="213-213", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.SetContinuations(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.List<Hangfire.Continuations.ContinuationsSupportAttribute.Continuation>)"];
d11 [label="ExecuteContinuationsIfExist(context)", span="61-61", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)"];
d62 [label="Exit Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", span="117-117", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
d50 [label="var currentState = GetContinuaionState(context, continuation.JobId, ContinuationStateFetchTimeout)", span="130-130", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
d53 [label="continuation.Options.HasFlag(JobContinuationOptions.OnlyOnSucceededState) &&\r\n                    context.CandidateState.Name != SucceededState.StateName", span="140-141", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
d61 [label="context.StateMachine.ChangeState(tuple.Key, tuple.Value, new[] { AwaitingState.StateName })", span="168-168", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
d63 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()"];
d54 [label="nextStates.Add(continuation.JobId, new DeletedState { Reason = ''Missed continuation'' })", span="143-143", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
d59 [label="nextStates.Add(continuation.JobId, nextState)", span="163-163", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
d60 [label=nextStates, span="166-166", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
d49 [label="String.IsNullOrWhiteSpace(continuation.JobId)", span="128-128", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
d51 [label="currentState == null", span="131-131", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
d52 [label="currentState.Name != AwaitingState.StateName", span="138-138", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
d9 [label="AddContinuation(context, awaitingState)", span="56-56", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)"];
d34 [label="Exit Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)", span="74-74", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)"];
d32 [label="var startImmediately = !awaitingState.Options.HasFlag(JobContinuationOptions.OnlyOnSucceededState) ||\r\n                        currentState.Name == SucceededState.StateName", span="107-108", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)"];
d33 [label="context.CandidateState = startImmediately\r\n                        ? awaitingState.NextState\r\n                        : new DeletedState { Reason = ''Missed continuation'' }", span="110-112", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)"];
d27 [label="jobData == null", span="89-89", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)"];
d39 [label="Entry Hangfire.Storage.IStorageConnection.GetJobData(string)", span="42-42", cluster="Hangfire.Storage.IStorageConnection.GetJobData(string)"];
d42 [label="Entry Hangfire.Storage.IStorageConnection.GetStateData(string)", span="45-45", cluster="Hangfire.Storage.IStorageConnection.GetStateData(string)"];
d40 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)"];
d41 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)"];
d102 [label="Hangfire.Continuations.ContinuationsSupportAttribute", span=""];
d14 [label="Entry System.Collections.Generic.HashSet<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.HashSet<T>.Contains(T)"];
d92 [label="Exit Hangfire.Continuations.ContinuationsSupportAttribute.SetContinuations(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.List<Hangfire.Continuations.ContinuationsSupportAttribute.Continuation>)", span="213-213", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.SetContinuations(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.List<Hangfire.Continuations.ContinuationsSupportAttribute.Continuation>)"];
d91 [label="connection.SetJobParameter(jobId, ''Continuations'', JobHelper.ToJson(continuations))", span="216-216", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.SetContinuations(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.List<Hangfire.Continuations.ContinuationsSupportAttribute.Continuation>)"];
d6 [label="Entry Hangfire.Continuations.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)", span="50-50", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)"];
d10 [label="_knownFinalStates.Contains(context.CandidateState.Name)", span="58-58", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)"];
d12 [label="Exit Hangfire.Continuations.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)", span="50-50", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)"];
d65 [label="Entry Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", span="172-172", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
d56 [label="nextState = JsonConvert.DeserializeObject<IState>(\r\n                        currentState.Data[''NextState''],\r\n                        new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.Objects })", span="151-153", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
d55 [label="IState nextState", span="147-147", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
d44 [label="Entry System.Enum.HasFlag(System.Enum)", span="0-0", cluster="System.Enum.HasFlag(System.Enum)"];
d70 [label="Entry Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="31-31", cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])"];
d45 [label="Entry Hangfire.States.DeletedState.DeletedState()", span="27-27", cluster="Hangfire.States.DeletedState.DeletedState()"];
d66 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)"];
d58 [label="nextState = new FailedState(ex)\r\n                    {\r\n                        Reason = ''Can not start the continuation due to de-serialization error.''\r\n                    }", span="157-160", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
d64 [label="Entry string.IsNullOrWhiteSpace(string)", span="0-0", cluster="string.IsNullOrWhiteSpace(string)"];
d7 [label="var awaitingState = context.CandidateState as AwaitingState", span="52-52", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)"];
d8 [label="awaitingState != null", span="53-53", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)"];
d75 [label="var continuationData = context.Connection.GetJobData(continuationJobId)", span="181-181", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
d78 [label="currentState = context.Connection.GetStateData(continuationJobId)", span="192-192", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
d3 [label="_knownFinalStates = knownFinalStates", span="43-43", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>)"];
d4 [label="Order = 1000", span="47-47", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>)"];
d93 [label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32", cluster="Hangfire.Common.JobHelper.ToJson(object)"];
d94 [label="Entry Hangfire.Storage.IStorageConnection.SetJobParameter(string, string, string)", span="38-38", cluster="Hangfire.Storage.IStorageConnection.SetJobParameter(string, string, string)"];
d85 [label="Exit Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", span="172-172", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
d71 [label="StateData currentState = null", span="174-174", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
d77 [label="Logger.Warn(String.Format(\r\n                        ''Can not start continuation '{0}' for background job '{1}': continuation does not exist.'',\r\n                        continuationJobId,\r\n                        context.JobId))", span="184-187", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
d80 [label="DateTime.UtcNow >= started.Add(timeout)", span="198-198", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
d81 [label="throw new TimeoutException(String.Format(\r\n                        ''Can not start continuation '{0}' for background job '{1}': timeout expired while trying to fetch continuation state.'',\r\n                        continuationJobId,\r\n                        context.JobId));", span="200-203", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
d57 [label=Exception, span="155-155", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
d67 [label="Entry JsonSerializerSettings.cstr", span="", cluster="JsonSerializerSettings.cstr"];
d68 [label="Entry Unk.>", span="", cluster="Unk.>"];
d69 [label="Entry Hangfire.States.FailedState.FailedState(System.Exception)", span="26-26", cluster="Hangfire.States.FailedState.FailedState(System.Exception)"];
d74 [label=true, span="179-179", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
d76 [label="continuationData == null", span="182-182", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
d79 [label="currentState != null", span="193-193", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
d84 [label="return currentState;", span="210-210", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
d2 [label="Entry Hangfire.Continuations.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>)", span="41-41", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>)"];
d5 [label="Exit Hangfire.Continuations.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>)", span="41-41", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>)"];
d72 [label="var started = DateTime.UtcNow", span="176-176", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
d86 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)"];
d87 [label="Entry Hangfire.Logging.ILog.Warn(string)", span="261-261", cluster="Hangfire.Logging.ILog.Warn(string)"];
d82 [label="Thread.Sleep(firstAttempt ? 0 : 1)", span="206-206", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
d88 [label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0", cluster="System.DateTime.Add(System.TimeSpan)"];
d89 [label="Entry System.TimeoutException.TimeoutException(string)", span="0-0", cluster="System.TimeoutException.TimeoutException(string)"];
d73 [label="var firstAttempt = true", span="177-177", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
d83 [label="firstAttempt = false", span="207-207", cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
d90 [label="Entry System.Threading.Thread.Sleep(int)", span="0-0", cluster="System.Threading.Thread.Sleep(int)"];
m0_452 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue(bool)", span="556-556", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_453 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="558-570", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_454 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue(bool)", span="556-556", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_769 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", span="959-959", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_771 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1'']);\r\n                Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''set-2'']);\r\n            })", span="965-982", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_770 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@key, @value, 0.0)''", span="961-963", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_772 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", span="959-959", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_535 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt(bool)", span="678-678", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_536 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="680-691", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_537 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt(bool)", span="678-678", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_440 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist(bool)", span="537-537", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_441 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="539-550", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_442 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist(bool)", span="537-537", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_803 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", span="345-345", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_635 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords(bool)", span="800-800", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_636 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }), useBatching);\r\n\r\n                // Act\r\n                Commit(sql, x => x.RemoveHash(''some-hash''), useBatching);\r\n\r\n                // Assert\r\n                var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single();\r\n                Assert.Equal(0, count);\r\n            })", span="802-817", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_637 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords(bool)", span="800-800", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_839 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", span="1044-1044", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_841 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistHash(''hash-1''), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''hash-1'']);\r\n                Assert.NotNull(records[''hash-2'']);\r\n            })", span="1050-1066", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_840 [label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [ExpireAt])\r\nvalues (@key, @field, @expireAt)''", span="1046-1048", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_842 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", span="1044-1044", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_270 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="167-167", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_377 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="198-198", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_43 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_177 [label="Entry Unk.AddJobState", span="", cluster="Unk.AddJobState", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_908 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", span="1128-1128", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_910 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistList(''list-1''), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''list-1'']);\r\n                Assert.NotNull(records[''list-2'']);\r\n            })", span="1134-1150", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_909 [label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key], [ExpireAt])\r\nvalues (@key, @expireAt)''", span="1130-1132", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_911 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", span="1128-1128", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_478 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey(bool)", span="595-595", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_479 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="597-608", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_480 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey(bool)", span="595-595", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_731 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", span="319-319", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_547 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey(bool)", span="697-697", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_548 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="699-710", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_549 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey(bool)", span="697-697", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_678 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet(bool)", span="851-851", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_679 [label="UseConnection(sql =>\r\n            {\r\n                var items = new List<string> { ''1'', ''2'', ''3'' };\r\n\r\n                Commit(sql, x => x.AddRangeToSet(''my-set'', items), useBatching);\r\n\r\n                var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''');\r\n                Assert.Equal(items, records);\r\n            })", span="853-861", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_680 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet(bool)", span="851-851", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_27 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", span="39-39", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_29 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromHours(24)), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < job.ExpireAt && job.ExpireAt < DateTime.UtcNow.AddHours(25));\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.ExpireAt);\r\n            })", span="46-58", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_28 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="41-44", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_30 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", span="39-39", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_713 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_825 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull(bool)", span="1030-1030", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_826 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="1032-1038", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_827 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull(bool)", span="1030-1030", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_236 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="247-247", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_237 [label="return connection\r\n                .Query(''select * from HangFire.Job where Id = @id'', new { id = jobId })\r\n                .Single();", span="249-251", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_238 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="247-247", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_838 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", span="358-358", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_402 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="214-214", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_45 [label="Entry Unk.GetTestJob", span="", cluster="Unk.GetTestJob", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_7 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_907 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", span="380-380", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_252 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="159-159", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_873 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", span="369-369", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_768 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="332-332", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_941 [label="Entry SqlServerWriteOnlyTransaction.cstr", span="", cluster="SqlServerWriteOnlyTransaction.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_509 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex(bool)", span="638-638", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_510 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="640-653", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_511 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex(bool)", span="638-638", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_339 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="193-193", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_326 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue(bool)", span="373-373", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_327 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value''), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(0.0, record.Score, 2);\r\n            })", span="375-384", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_328 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue(bool)", span="373-373", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_378 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist(bool)", span="445-445", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_379 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                }, useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="447-458", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_380 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist(bool)", span="445-445", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_690 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull(bool)", span="867-867", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_691 [label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null), useBatching));\r\n            })", span="869-873", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_692 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull(bool)", span="867-867", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_211 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", span="230-230", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_215 [label="_queueProviders.Add(correctProvider.Object, new[] { ''default'' })", span="237-237", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_216 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToQueue(''default'', ''1''), useBatching);\r\n\r\n                correctJobQueue.Verify(x => x.Enqueue(It.IsNotNull<IDbConnection>(), ''default'', ''1''));\r\n            })", span="239-244", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_213 [label="var correctProvider = new Mock<IPersistentJobQueueProvider>()", span="233-233", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_214 [label="correctProvider.Setup(x => x.GetJobQueue())\r\n                .Returns(correctJobQueue.Object)", span="234-235", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_212 [label="var correctJobQueue = new Mock<IPersistentJobQueue>()", span="232-232", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_217 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", span="230-230", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_572 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="258-258", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_500 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_850 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_44 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", span="1161-1161", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_934 [label="storage.Setup(x => x.QueueProviders).Returns(_queueProviders)", span="1167-1167", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_933 [label="var storage = new Mock<SqlServerStorage>(connection, new SqlServerStorageOptions { CommandBatchMaxTimeout = useBatching ? TimeSpan.FromMinutes(1) : (TimeSpan?)null })", span="1166-1166", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_936 [label="action(transaction)", span="1171-1171", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_935 [label="var transaction = new SqlServerWriteOnlyTransaction(storage.Object, () => null)", span="1169-1169", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_937 [label="transaction.Commit()", span="1172-1172", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_938 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", span="1161-1161", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_0 [label="Entry HangFire.SqlServer.SqlStoredSets.SqlStoredSets(SqlConnection)", span="11-11", cluster="HangFire.SqlServer.SqlStoredSets.SqlStoredSets(SqlConnection)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_3 [label="Entry HangFire.SqlServer.SqlStoredSets.GetFirstByLowestScore(string, long, long)", span="16-16", cluster="HangFire.SqlServer.SqlStoredSets.GetFirstByLowestScore(string, long, long)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1 [label="_connection = connection", span="13-13", cluster="HangFire.SqlServer.SqlStoredSets.SqlStoredSets(SqlConnection)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_2 [label="Exit HangFire.SqlServer.SqlStoredSets.SqlStoredSets(SqlConnection)", span="11-11", cluster="HangFire.SqlServer.SqlStoredSets.SqlStoredSets(SqlConnection)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_4 [label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="18-21", cluster="HangFire.SqlServer.SqlStoredSets.GetFirstByLowestScore(string, long, long)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_5 [label="Exit HangFire.SqlServer.SqlStoredSets.GetFirstByLowestScore(string, long, long)", span="16-16", cluster="HangFire.SqlServer.SqlStoredSets.GetFirstByLowestScore(string, long, long)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_605 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_CanSetANullValue(bool)", span="767-767", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_CanSetANullValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_606 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', null }\r\n                }), useBatching);\r\n\r\n                var result = sql.Query(\r\n                        ''select * from HangFire.Hash where [Key] = @key'',\r\n                        new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(null, result[''Key1'']);\r\n            })", span="769-782", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_CanSetANullValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_607 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_CanSetANullValue(bool)", span="767-767", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_CanSetANullValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_178 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", span="196-196", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_180 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns((string)null);\r\n                state.Setup(x => x.SerializeData()).Returns((Dictionary<string, string>)null);\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(null, jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(null, jobState.Data);\r\n            })", span="203-224", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_179 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="198-201", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_181 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", span="196-196", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_523 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex(bool)", span="659-659", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_524 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="661-672", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_525 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex(bool)", span="659-659", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_703 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", span="879-879", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_705 [label="UseConnection(sql =>\r\n            {\r\n                sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                Commit(sql, x => x.RemoveSet(''set-1''), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n                Assert.Equal(''set-2'', record.Key);\r\n            })", span="884-896", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_704 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score]) values (@key, @value, 0.0)''", span="881-882", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_706 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", span="879-879", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_20 [label="Entry lambda expression", span="31-31", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_32 [label="Entry lambda expression", span="46-58", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_35 [label="Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromHours(24)), useBatching)", span="51-51", cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_33 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="48-48", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_34 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="49-49", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_36 [label="var job = GetTestJob(sql, jobId)", span="53-53", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_49 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_50 [label="x.ExpireJob(jobId, TimeSpan.FromHours(24))", span="51-51", cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_51 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_37 [label="Assert.True(DateTime.UtcNow.AddHours(23) < job.ExpireAt && job.ExpireAt < DateTime.UtcNow.AddHours(25))", span="54-54", cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_38 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="56-56", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_61 [label="Commit(sql, x => x.PersistJob(jobId), useBatching)", span="76-76", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_62 [label="var job = GetTestJob(sql, jobId)", span="78-78", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_64 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="81-81", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_83 [label="Commit(sql, x => x.SetJobState(jobId, state.Object), useBatching)", span="107-107", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_84 [label="var job = GetTestJob(sql, jobId)", span="109-109", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_87 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="113-113", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_123 [label="Commit(sql, x => x.SetJobState(jobId, state.Object), useBatching)", span="145-145", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_124 [label="var job = GetTestJob(sql, jobId)", span="147-147", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_154 [label="Commit(sql, x => x.AddJobState(jobId, state.Object), useBatching)", span="178-178", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_155 [label="var job = GetTestJob(sql, jobId)", span="180-180", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_188 [label="Commit(sql, x => x.AddJobState(jobId, state.Object), useBatching)", span="212-212", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_189 [label="var job = GetTestJob(sql, jobId)", span="214-214", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_224 [label="Commit(sql, x => x.AddToQueue(''default'', ''1''), useBatching)", span="241-241", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_243 [label="Commit(sql, x => x.IncrementCounter(''my-key''), useBatching)", span="261-261", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_257 [label="Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)), useBatching)", span="278-278", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_275 [label="Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                }, useBatching)", span="300-304", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_287 [label="Commit(sql, x => x.DecrementCounter(''my-key''), useBatching)", span="319-319", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_301 [label="Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)), useBatching)", span="336-336", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_318 [label="Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                }, useBatching)", span="358-362", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_330 [label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value''), useBatching)", span="377-377", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_344 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                }, useBatching)", span="394-398", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_356 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                }, useBatching)", span="413-417", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_368 [label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2), useBatching)", span="432-432", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_382 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                }, useBatching)", span="449-453", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_394 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                }, useBatching)", span="468-472", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_407 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                }, useBatching)", span="487-491", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_419 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                }, useBatching)", span="506-510", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_431 [label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''), useBatching)", span="525-525", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_444 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                }, useBatching)", span="541-545", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_456 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                }, useBatching)", span="560-565", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_470 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                }, useBatching)", span="580-584", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_482 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                }, useBatching)", span="599-603", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_494 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                }, useBatching)", span="618-625", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_513 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                }, useBatching)", span="642-648", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_527 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                }, useBatching)", span="663-667", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_539 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                }, useBatching)", span="682-686", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_551 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                }, useBatching)", span="701-705", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_563 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()), useBatching))", span="720-721", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_567 [label="Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()), useBatching)", span="721-721", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_577 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null), useBatching))", span="734-735", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_581 [label="Commit(sql, x => x.SetRangeInHash(''some-hash'', null), useBatching)", span="735-735", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_590 [label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }), useBatching)", span="748-752", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_609 [label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', null }\r\n                }), useBatching)", span="771-774", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_626 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null), useBatching))", span="792-793", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_629 [label="Commit(sql, x => x.RemoveHash(null), useBatching)", span="793-793", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_639 [label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }), useBatching)", span="805-809", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_640 [label="Commit(sql, x => x.RemoveHash(''some-hash''), useBatching)", span="812-812", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_654 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>()), useBatching))", span="827-828", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_658 [label="Commit(sql, x => x.AddRangeToSet(null, new List<string>()), useBatching)", span="828-828", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_669 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null), useBatching))", span="841-842", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_673 [label="Commit(sql, x => x.AddRangeToSet(''my-set'', null), useBatching)", span="842-842", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_683 [label="Commit(sql, x => x.AddRangeToSet(''my-set'', items), useBatching)", span="857-857", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_694 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null), useBatching))", span="871-872", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_697 [label="Commit(sql, x => x.RemoveSet(null), useBatching)", span="872-872", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_709 [label="Commit(sql, x => x.RemoveSet(''set-1''), useBatching)", span="892-892", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_721 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5)), useBatching))", span="906-907", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_725 [label="Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5)), useBatching)", span="907-907", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_738 [label="Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)), useBatching)", span="932-932", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_758 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45)), useBatching))", span="949-950", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_762 [label="Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45)), useBatching)", span="950-950", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_775 [label="Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)), useBatching)", span="975-975", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_794 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45)), useBatching))", span="992-993", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_798 [label="Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45)), useBatching)", span="993-993", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_810 [label="Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)), useBatching)", span="1017-1017", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_829 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null), useBatching))", span="1034-1035", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_833 [label="Commit(sql, x => x.PersistHash(null), useBatching)", span="1035-1035", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_845 [label="Commit(sql, x => x.PersistHash(''hash-1''), useBatching)", span="1060-1060", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_864 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null), useBatching))", span="1076-1077", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_868 [label="Commit(sql, x => x.PersistSet(null), useBatching)", span="1077-1077", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_880 [label="Commit(sql, x => x.PersistSet(''set-1''), useBatching)", span="1102-1102", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_898 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null), useBatching))", span="1118-1119", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_902 [label="Commit(sql, x => x.PersistList(null), useBatching)", span="1119-1119", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_914 [label="Commit(sql, x => x.PersistList(''list-1''), useBatching)", span="1144-1144", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_40 [label="Exit lambda expression", span="46-58", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_39 [label="Assert.Null(anotherJob.ExpireAt)", span="57-57", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_263 [label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="288-288", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_264 [label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="289-289", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_307 [label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="346-346", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_308 [label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="347-347", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_740 [label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1''])", span="936-936", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_741 [label="Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61))", span="937-937", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_777 [label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1''])", span="979-979", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_778 [label="Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61))", span="980-980", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_812 [label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1''])", span="1021-1021", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_813 [label="Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61))", span="1022-1022", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_58 [label="Entry lambda expression", span="71-83", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_59 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="73-73", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_60 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="74-74", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_68 [label="Entry lambda expression", span="76-76", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_63 [label="Assert.Null(job.ExpireAt)", span="79-79", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_65 [label="Assert.NotNull(anotherJob.ExpireAt)", span="82-82", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_76 [label="Entry lambda expression", span="96-123", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_77 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="98-98", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_79 [label="var state = new Mock<IState>()", span="101-101", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_82 [label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="104-105", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_109 [label="Entry lambda expression", span="107-107", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_85 [label="Assert.Equal(''State'', job.StateName)", span="110-110", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_86 [label="Assert.NotNull(job.StateId)", span="111-111", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_78 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="99-99", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_88 [label="Assert.Null(anotherJob.StateName)", span="114-114", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_89 [label="Assert.Null(anotherJob.StateId)", span="115-115", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_117 [label="Entry lambda expression", span="136-155", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_118 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="138-138", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_119 [label="var state = new Mock<IState>()", span="140-140", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_122 [label="state.Setup(x => x.SerializeData()).Returns((Dictionary<string, string>)null)", span="143-143", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_141 [label="Entry lambda expression", span="145-145", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_125 [label="Assert.Equal(''State'', job.StateName)", span="148-148", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_126 [label="Assert.NotNull(job.StateId)", span="149-149", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_148 [label="Entry lambda expression", span="168-190", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_149 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="170-170", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_150 [label="var state = new Mock<IState>()", span="172-172", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_153 [label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="175-176", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_174 [label="Entry lambda expression", span="178-178", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_156 [label="Assert.Null(job.StateName)", span="181-181", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_157 [label="Assert.Null(job.StateId)", span="182-182", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_182 [label="Entry lambda expression", span="203-224", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_183 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="205-205", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_184 [label="var state = new Mock<IState>()", span="207-207", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_187 [label="state.Setup(x => x.SerializeData()).Returns((Dictionary<string, string>)null)", span="210-210", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_208 [label="Entry lambda expression", span="212-212", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_190 [label="Assert.Null(job.StateName)", span="215-215", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_191 [label="Assert.Null(job.StateId)", span="216-216", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_223 [label="Entry lambda expression", span="239-244", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_225 [label="correctJobQueue.Verify(x => x.Enqueue(It.IsNotNull<IDbConnection>(), ''default'', ''1''))", span="243-243", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_228 [label="Entry lambda expression", span="241-241", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_242 [label="Entry lambda expression", span="259-268", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_244 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="263-263", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_249 [label="Entry lambda expression", span="261-261", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_256 [label="Entry lambda expression", span="276-290", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_258 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="280-280", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_266 [label="Entry lambda expression", span="278-278", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_274 [label="Entry lambda expression", span="298-309", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_276 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="306-306", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_279 [label="Entry lambda expression", span="300-304", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_286 [label="Entry lambda expression", span="317-326", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_288 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="321-321", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_293 [label="Entry lambda expression", span="319-319", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_300 [label="Entry lambda expression", span="334-348", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_302 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="338-338", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_310 [label="Entry lambda expression", span="336-336", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_317 [label="Entry lambda expression", span="356-367", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_319 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="364-364", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_322 [label="Entry lambda expression", span="358-362", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_329 [label="Entry lambda expression", span="375-384", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_331 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="379-379", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_336 [label="Entry lambda expression", span="377-377", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_343 [label="Entry lambda expression", span="392-403", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_345 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="400-400", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_348 [label="Entry lambda expression", span="394-398", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_355 [label="Entry lambda expression", span="411-422", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_357 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="419-419", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_360 [label="Entry lambda expression", span="413-417", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_367 [label="Entry lambda expression", span="430-439", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_369 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="434-434", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_374 [label="Entry lambda expression", span="432-432", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_381 [label="Entry lambda expression", span="447-458", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_383 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="455-455", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_386 [label="Entry lambda expression", span="449-453", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_393 [label="Entry lambda expression", span="466-477", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_395 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="474-474", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_398 [label="Entry lambda expression", span="468-472", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_406 [label="Entry lambda expression", span="485-496", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_408 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="493-493", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_411 [label="Entry lambda expression", span="487-491", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_418 [label="Entry lambda expression", span="504-515", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_420 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="512-512", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_423 [label="Entry lambda expression", span="506-510", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_430 [label="Entry lambda expression", span="523-531", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_432 [label="var record = sql.Query(''select * from HangFire.List'').Single()", span="527-527", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_436 [label="Entry lambda expression", span="525-525", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_443 [label="Entry lambda expression", span="539-550", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_445 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="547-547", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_448 [label="Entry lambda expression", span="541-545", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_455 [label="Entry lambda expression", span="558-570", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_457 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="567-567", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_460 [label="Entry lambda expression", span="560-565", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_469 [label="Entry lambda expression", span="578-589", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_471 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="586-586", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_474 [label="Entry lambda expression", span="580-584", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_481 [label="Entry lambda expression", span="597-608", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_483 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="605-605", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_486 [label="Entry lambda expression", span="599-603", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_493 [label="Entry lambda expression", span="616-632", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_495 [label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="627-627", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_501 [label="Entry lambda expression", span="618-625", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_512 [label="Entry lambda expression", span="640-653", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_514 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="650-650", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_517 [label="Entry lambda expression", span="642-648", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_526 [label="Entry lambda expression", span="661-672", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_528 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="669-669", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_531 [label="Entry lambda expression", span="663-667", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_538 [label="Entry lambda expression", span="680-691", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_540 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="688-688", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_543 [label="Entry lambda expression", span="682-686", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_550 [label="Entry lambda expression", span="699-710", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_552 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="707-707", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_555 [label="Entry lambda expression", span="701-705", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_562 [label="Entry lambda expression", span="718-724", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_564 [label="Assert.Equal(''key'', exception.ParamName)", span="723-723", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_566 [label="Entry lambda expression", span="721-721", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_568 [label="Exit lambda expression", span="721-721", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_569 [label="Entry lambda expression", span="721-721", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_576 [label="Entry lambda expression", span="732-738", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_578 [label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="737-737", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_580 [label="Entry lambda expression", span="735-735", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_582 [label="Exit lambda expression", span="735-735", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_583 [label="Entry lambda expression", span="735-735", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_589 [label="Entry lambda expression", span="746-761", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_591 [label="var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="754-757", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_596 [label="Entry lambda expression", span="748-752", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_608 [label="Entry lambda expression", span="769-782", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_610 [label="var result = sql.Query(\r\n                        ''select * from HangFire.Hash where [Key] = @key'',\r\n                        new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="776-779", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_613 [label="Entry lambda expression", span="771-774", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_625 [label="Entry lambda expression", span="790-794", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_627 [label="Exit lambda expression", span="790-794", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_628 [label="Entry lambda expression", span="793-793", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_630 [label="Exit lambda expression", span="793-793", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_631 [label="Entry lambda expression", span="793-793", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_638 [label="Entry lambda expression", span="802-817", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_644 [label="Entry lambda expression", span="805-809", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_641 [label="var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single()", span="815-815", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_647 [label="Entry lambda expression", span="812-812", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_653 [label="Entry lambda expression", span="825-831", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_655 [label="Assert.Equal(''key'', exception.ParamName)", span="830-830", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_657 [label="Entry lambda expression", span="828-828", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_659 [label="Exit lambda expression", span="828-828", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_660 [label="Entry lambda expression", span="828-828", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_668 [label="Entry lambda expression", span="839-845", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_670 [label="Assert.Equal(''items'', exception.ParamName)", span="844-844", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_672 [label="Entry lambda expression", span="842-842", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_674 [label="Exit lambda expression", span="842-842", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_675 [label="Entry lambda expression", span="842-842", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_681 [label="Entry lambda expression", span="853-861", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_682 [label="var items = new List<string> { ''1'', ''2'', ''3'' }", span="855-855", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_684 [label="var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''')", span="859-859", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_687 [label="Entry lambda expression", span="857-857", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_693 [label="Entry lambda expression", span="869-873", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_695 [label="Exit lambda expression", span="869-873", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_696 [label="Entry lambda expression", span="872-872", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_698 [label="Exit lambda expression", span="872-872", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_699 [label="Entry lambda expression", span="872-872", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_707 [label="Entry lambda expression", span="884-896", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_708 [label="sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="886-890", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_710 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="894-894", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_714 [label="Entry lambda expression", span="892-892", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_720 [label="Entry lambda expression", span="904-910", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_722 [label="Assert.Equal(''key'', exception.ParamName)", span="909-909", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_724 [label="Entry lambda expression", span="907-907", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_726 [label="Exit lambda expression", span="907-907", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_727 [label="Entry lambda expression", span="907-907", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_736 [label="Entry lambda expression", span="922-939", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_737 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                })", span="925-929", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_739 [label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="935-935", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_745 [label="Entry lambda expression", span="932-932", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_757 [label="Entry lambda expression", span="947-953", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_759 [label="Assert.Equal(''key'', exception.ParamName)", span="952-952", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_761 [label="Entry lambda expression", span="950-950", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_763 [label="Exit lambda expression", span="950-950", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_764 [label="Entry lambda expression", span="950-950", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_773 [label="Entry lambda expression", span="965-982", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_774 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="968-972", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_776 [label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="978-978", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_781 [label="Entry lambda expression", span="975-975", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_793 [label="Entry lambda expression", span="990-996", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_795 [label="Assert.Equal(''key'', exception.ParamName)", span="995-995", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_797 [label="Entry lambda expression", span="993-993", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_799 [label="Exit lambda expression", span="993-993", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_800 [label="Entry lambda expression", span="993-993", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_808 [label="Entry lambda expression", span="1007-1024", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_809 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                })", span="1010-1014", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_811 [label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="1020-1020", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_816 [label="Entry lambda expression", span="1017-1017", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_828 [label="Entry lambda expression", span="1032-1038", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_830 [label="Assert.Equal(''key'', exception.ParamName)", span="1037-1037", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_832 [label="Entry lambda expression", span="1035-1035", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_834 [label="Exit lambda expression", span="1035-1035", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_835 [label="Entry lambda expression", span="1035-1035", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_843 [label="Entry lambda expression", span="1050-1066", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_844 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="1053-1057", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_846 [label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="1063-1063", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_851 [label="Entry lambda expression", span="1060-1060", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_863 [label="Entry lambda expression", span="1074-1080", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_865 [label="Assert.Equal(''key'', exception.ParamName)", span="1079-1079", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_867 [label="Entry lambda expression", span="1077-1077", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_869 [label="Exit lambda expression", span="1077-1077", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_870 [label="Entry lambda expression", span="1077-1077", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_878 [label="Entry lambda expression", span="1092-1108", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_879 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="1095-1099", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_881 [label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="1105-1105", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_885 [label="Entry lambda expression", span="1102-1102", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_897 [label="Entry lambda expression", span="1116-1122", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_899 [label="Assert.Equal(''key'', exception.ParamName)", span="1121-1121", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_901 [label="Entry lambda expression", span="1119-1119", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_903 [label="Exit lambda expression", span="1119-1119", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_904 [label="Entry lambda expression", span="1119-1119", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_912 [label="Entry lambda expression", span="1134-1150", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_913 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="1137-1141", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_915 [label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="1147-1147", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_919 [label="Entry lambda expression", span="1144-1144", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_943 [label="Entry lambda expression", span="1167-1167", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_90 [label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="117-117", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_127 [label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="151-151", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_158 [label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="184-184", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_192 [label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="218-218", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_91 [label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="118-118", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_159 [label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="185-185", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_193 [label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="219-219", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_262 [label="var expireAt = (DateTime) record.ExpireAt", span="286-286", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_265 [label="Exit lambda expression", span="276-290", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_306 [label="var expireAt = (DateTime)record.ExpireAt", span="344-344", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_309 [label="Exit lambda expression", span="334-348", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_742 [label="Assert.Null(records[''hash-2''])", span="938-938", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_779 [label="Assert.Null(records[''set-2''])", span="981-981", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_814 [label="Assert.Null(records[''list-2''])", span="1023-1023", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_10 [label="Entry lambda expression", span="21-21", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_66 [label="Exit lambda expression", span="71-83", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_69 [label="x.PersistJob(jobId)", span="76-76", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_70 [label="Exit lambda expression", span="76-76", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_96 [label="Exit lambda expression", span="96-123", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_110 [label="x.SetJobState(jobId, state.Object)", span="107-107", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_80 [label="state.Setup(x => x.Name).Returns(''State'')", span="102-102", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_81 [label="state.Setup(x => x.Reason).Returns(''Reason'')", span="103-103", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_105 [label="Entry lambda expression", span="104-104", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_111 [label="Exit lambda expression", span="107-107", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_131 [label="Exit lambda expression", span="136-155", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_142 [label="x.SetJobState(jobId, state.Object)", span="145-145", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_120 [label="state.Setup(x => x.Name).Returns(''State'')", span="141-141", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_121 [label="state.Setup(x => x.Reason).Returns((string)null)", span="142-142", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_138 [label="Entry lambda expression", span="143-143", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_143 [label="Exit lambda expression", span="145-145", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_164 [label="Exit lambda expression", span="168-190", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_175 [label="x.AddJobState(jobId, state.Object)", span="178-178", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_151 [label="state.Setup(x => x.Name).Returns(''State'')", span="173-173", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_152 [label="state.Setup(x => x.Reason).Returns(''Reason'')", span="174-174", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_171 [label="Entry lambda expression", span="175-175", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_176 [label="Exit lambda expression", span="178-178", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_198 [label="Exit lambda expression", span="203-224", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_209 [label="x.AddJobState(jobId, state.Object)", span="212-212", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_185 [label="state.Setup(x => x.Name).Returns(''State'')", span="208-208", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_186 [label="state.Setup(x => x.Reason).Returns((string)null)", span="209-209", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_205 [label="Entry lambda expression", span="210-210", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_210 [label="Exit lambda expression", span="212-212", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_220 [label="Entry lambda expression", span="234-234", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_226 [label="Exit lambda expression", span="239-244", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_232 [label="Entry lambda expression", span="243-243", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_230 [label="Exit lambda expression", span="241-241", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_229 [label="x.AddToQueue(''default'', ''1'')", span="241-241", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_248 [label="Exit lambda expression", span="259-268", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_245 [label="Assert.Equal(''my-key'', record.Key)", span="265-265", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_246 [label="Assert.Equal(1, record.Value)", span="266-266", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_247 [label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="267-267", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_251 [label="Exit lambda expression", span="261-261", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_250 [label="x.IncrementCounter(''my-key'')", span="261-261", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_259 [label="Assert.Equal(''my-key'', record.Key)", span="282-282", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_260 [label="Assert.Equal(1, record.Value)", span="283-283", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_261 [label="Assert.NotNull(record.ExpireAt)", span="284-284", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_268 [label="Exit lambda expression", span="278-278", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_267 [label="x.IncrementCounter(''my-key'', TimeSpan.FromDays(1))", span="278-278", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_278 [label="Exit lambda expression", span="298-309", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_277 [label="Assert.Equal(2, recordCount)", span="308-308", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_282 [label="Exit lambda expression", span="300-304", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_280 [label="x.IncrementCounter(''my-key'')", span="302-302", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_281 [label="x.IncrementCounter(''my-key'')", span="303-303", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_292 [label="Exit lambda expression", span="317-326", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_289 [label="Assert.Equal(''my-key'', record.Key)", span="323-323", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_290 [label="Assert.Equal(-1, record.Value)", span="324-324", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_291 [label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="325-325", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_295 [label="Exit lambda expression", span="319-319", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_294 [label="x.DecrementCounter(''my-key'')", span="319-319", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_303 [label="Assert.Equal(''my-key'', record.Key)", span="340-340", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_304 [label="Assert.Equal(-1, record.Value)", span="341-341", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_305 [label="Assert.NotNull(record.ExpireAt)", span="342-342", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_312 [label="Exit lambda expression", span="336-336", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_311 [label="x.DecrementCounter(''my-key'', TimeSpan.FromDays(1))", span="336-336", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_321 [label="Exit lambda expression", span="356-367", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_320 [label="Assert.Equal(2, recordCount)", span="366-366", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_325 [label="Exit lambda expression", span="358-362", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_323 [label="x.DecrementCounter(''my-key'')", span="360-360", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_324 [label="x.DecrementCounter(''my-key'')", span="361-361", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_335 [label="Exit lambda expression", span="375-384", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_332 [label="Assert.Equal(''my-key'', record.Key)", span="381-381", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_333 [label="Assert.Equal(''my-value'', record.Value)", span="382-382", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_334 [label="Assert.Equal(0.0, record.Score, 2)", span="383-383", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_338 [label="Exit lambda expression", span="377-377", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_337 [label="x.AddToSet(''my-key'', ''my-value'')", span="377-377", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_347 [label="Exit lambda expression", span="392-403", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_346 [label="Assert.Equal(2, recordCount)", span="402-402", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_351 [label="Exit lambda expression", span="394-398", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_349 [label="x.AddToSet(''my-key'', ''my-value'')", span="396-396", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_350 [label="x.AddToSet(''my-key'', ''another-value'')", span="397-397", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_359 [label="Exit lambda expression", span="411-422", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_358 [label="Assert.Equal(1, recordCount)", span="421-421", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_363 [label="Exit lambda expression", span="413-417", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_361 [label="x.AddToSet(''my-key'', ''my-value'')", span="415-415", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_362 [label="x.AddToSet(''my-key'', ''my-value'')", span="416-416", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_373 [label="Exit lambda expression", span="430-439", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_370 [label="Assert.Equal(''my-key'', record.Key)", span="436-436", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_371 [label="Assert.Equal(''my-value'', record.Value)", span="437-437", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_372 [label="Assert.Equal(3.2, record.Score, 3)", span="438-438", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_376 [label="Exit lambda expression", span="432-432", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_375 [label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="432-432", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_385 [label="Exit lambda expression", span="447-458", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_384 [label="Assert.Equal(3.2, record.Score, 3)", span="457-457", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_389 [label="Exit lambda expression", span="449-453", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_387 [label="x.AddToSet(''my-key'', ''my-value'')", span="451-451", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_388 [label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="452-452", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_397 [label="Exit lambda expression", span="466-477", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_396 [label="Assert.Equal(0, recordCount)", span="476-476", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_401 [label="Exit lambda expression", span="468-472", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_399 [label="x.AddToSet(''my-key'', ''my-value'')", span="470-470", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_400 [label="x.RemoveFromSet(''my-key'', ''my-value'')", span="471-471", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_410 [label="Exit lambda expression", span="485-496", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_409 [label="Assert.Equal(1, recordCount)", span="495-495", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_414 [label="Exit lambda expression", span="487-491", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_412 [label="x.AddToSet(''my-key'', ''my-value'')", span="489-489", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_413 [label="x.RemoveFromSet(''my-key'', ''different-value'')", span="490-490", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_422 [label="Exit lambda expression", span="504-515", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_421 [label="Assert.Equal(1, recordCount)", span="514-514", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_426 [label="Exit lambda expression", span="506-510", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_424 [label="x.AddToSet(''my-key'', ''my-value'')", span="508-508", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_425 [label="x.RemoveFromSet(''different-key'', ''my-value'')", span="509-509", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_435 [label="Exit lambda expression", span="523-531", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_433 [label="Assert.Equal(''my-key'', record.Key)", span="529-529", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_434 [label="Assert.Equal(''my-value'', record.Value)", span="530-530", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_438 [label="Exit lambda expression", span="525-525", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_437 [label="x.InsertToList(''my-key'', ''my-value'')", span="525-525", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_447 [label="Exit lambda expression", span="539-550", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_446 [label="Assert.Equal(2, recordCount)", span="549-549", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_451 [label="Exit lambda expression", span="541-545", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_449 [label="x.InsertToList(''my-key'', ''my-value'')", span="543-543", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_450 [label="x.InsertToList(''my-key'', ''my-value'')", span="544-544", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_459 [label="Exit lambda expression", span="558-570", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_458 [label="Assert.Equal(0, recordCount)", span="569-569", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_464 [label="Exit lambda expression", span="560-565", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_461 [label="x.InsertToList(''my-key'', ''my-value'')", span="562-562", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_462 [label="x.InsertToList(''my-key'', ''my-value'')", span="563-563", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_463 [label="x.RemoveFromList(''my-key'', ''my-value'')", span="564-564", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_473 [label="Exit lambda expression", span="578-589", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_472 [label="Assert.Equal(1, recordCount)", span="588-588", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_477 [label="Exit lambda expression", span="580-584", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_475 [label="x.InsertToList(''my-key'', ''my-value'')", span="582-582", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_476 [label="x.RemoveFromList(''my-key'', ''different-value'')", span="583-583", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_485 [label="Exit lambda expression", span="597-608", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_484 [label="Assert.Equal(1, recordCount)", span="607-607", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_489 [label="Exit lambda expression", span="599-603", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_487 [label="x.InsertToList(''my-key'', ''my-value'')", span="601-601", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_488 [label="x.RemoveFromList(''different-key'', ''my-value'')", span="602-602", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_499 [label="Exit lambda expression", span="616-632", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_496 [label="Assert.Equal(2, records.Length)", span="629-629", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_497 [label="Assert.Equal(''1'', records[0].Value)", span="630-630", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_498 [label="Assert.Equal(''2'', records[1].Value)", span="631-631", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_507 [label="Exit lambda expression", span="618-625", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_502 [label="x.InsertToList(''my-key'', ''0'')", span="620-620", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_503 [label="x.InsertToList(''my-key'', ''1'')", span="621-621", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_504 [label="x.InsertToList(''my-key'', ''2'')", span="622-622", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_505 [label="x.InsertToList(''my-key'', ''3'')", span="623-623", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_506 [label="x.TrimList(''my-key'', 1, 2)", span="624-624", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_516 [label="Exit lambda expression", span="640-653", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_515 [label="Assert.Equal(2, recordCount)", span="652-652", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_522 [label="Exit lambda expression", span="642-648", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_518 [label="x.InsertToList(''my-key'', ''0'')", span="644-644", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_519 [label="x.InsertToList(''my-key'', ''1'')", span="645-645", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_520 [label="x.InsertToList(''my-key'', ''2'')", span="646-646", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_521 [label="x.TrimList(''my-key'', 1, 100)", span="647-647", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_530 [label="Exit lambda expression", span="661-672", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_529 [label="Assert.Equal(0, recordCount)", span="671-671", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_534 [label="Exit lambda expression", span="663-667", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_532 [label="x.InsertToList(''my-key'', ''0'')", span="665-665", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_533 [label="x.TrimList(''my-key'', 1, 100)", span="666-666", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_542 [label="Exit lambda expression", span="680-691", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_541 [label="Assert.Equal(0, recordCount)", span="690-690", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_546 [label="Exit lambda expression", span="682-686", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_544 [label="x.InsertToList(''my-key'', ''0'')", span="684-684", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_545 [label="x.TrimList(''my-key'', 1, 0)", span="685-685", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_554 [label="Exit lambda expression", span="699-710", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_553 [label="Assert.Equal(1, recordCount)", span="709-709", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_558 [label="Exit lambda expression", span="701-705", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_556 [label="x.InsertToList(''my-key'', ''0'')", span="703-703", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_557 [label="x.TrimList(''another-key'', 1, 0)", span="704-704", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_565 [label="Exit lambda expression", span="718-724", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_233 [label="x.Enqueue(It.IsNotNull<IDbConnection>(), ''default'', ''1'')", span="243-243", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_571 [label="Exit lambda expression", span="721-721", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_570 [label="x.SetRangeInHash(null, new Dictionary<string, string>())", span="721-721", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_579 [label="Exit lambda expression", span="732-738", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_585 [label="Exit lambda expression", span="735-735", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_584 [label="x.SetRangeInHash(''some-hash'', null)", span="735-735", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_594 [label="Exit lambda expression", span="746-761", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_592 [label="Assert.Equal(''Value1'', result[''Key1''])", span="759-759", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_599 [label="Entry lambda expression", span="757-757", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_602 [label="Entry lambda expression", span="757-757", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_593 [label="Assert.Equal(''Value2'', result[''Key2''])", span="760-760", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_598 [label="Exit lambda expression", span="748-752", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_597 [label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="748-752", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_612 [label="Exit lambda expression", span="769-782", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_611 [label="Assert.Equal(null, result[''Key1''])", span="781-781", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_616 [label="Entry lambda expression", span="779-779", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_619 [label="Entry lambda expression", span="779-779", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_615 [label="Exit lambda expression", span="771-774", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_614 [label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', null }\r\n                })", span="771-774", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_633 [label="Exit lambda expression", span="793-793", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_632 [label="x.RemoveHash(null)", span="793-793", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_643 [label="Exit lambda expression", span="802-817", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_646 [label="Exit lambda expression", span="805-809", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_645 [label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="805-809", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_642 [label="Assert.Equal(0, count)", span="816-816", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_649 [label="Exit lambda expression", span="812-812", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_648 [label="x.RemoveHash(''some-hash'')", span="812-812", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_656 [label="Exit lambda expression", span="825-831", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_662 [label="Exit lambda expression", span="828-828", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_661 [label="x.AddRangeToSet(null, new List<string>())", span="828-828", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_671 [label="Exit lambda expression", span="839-845", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_677 [label="Exit lambda expression", span="842-842", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_676 [label="x.AddRangeToSet(''my-set'', null)", span="842-842", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_686 [label="Exit lambda expression", span="853-861", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_688 [label="x.AddRangeToSet(''my-set'', items)", span="857-857", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_685 [label="Assert.Equal(items, records)", span="860-860", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_689 [label="Exit lambda expression", span="857-857", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_701 [label="Exit lambda expression", span="872-872", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_700 [label="x.RemoveSet(null)", span="872-872", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_712 [label="Exit lambda expression", span="884-896", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_711 [label="Assert.Equal(''set-2'', record.Key)", span="895-895", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_716 [label="Exit lambda expression", span="892-892", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_715 [label="x.RemoveSet(''set-1'')", span="892-892", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_723 [label="Exit lambda expression", span="904-910", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_729 [label="Exit lambda expression", span="907-907", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_728 [label="x.ExpireHash(null, TimeSpan.FromMinutes(5))", span="907-907", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_743 [label="Exit lambda expression", span="922-939", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_748 [label="Entry lambda expression", span="935-935", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_751 [label="Entry lambda expression", span="935-935", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_747 [label="Exit lambda expression", span="932-932", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_746 [label="x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60))", span="932-932", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_760 [label="Exit lambda expression", span="947-953", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_766 [label="Exit lambda expression", span="950-950", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_765 [label="x.ExpireSet(null, TimeSpan.FromSeconds(45))", span="950-950", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_780 [label="Exit lambda expression", span="965-982", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_784 [label="Entry lambda expression", span="978-978", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_787 [label="Entry lambda expression", span="978-978", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_783 [label="Exit lambda expression", span="975-975", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_782 [label="x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60))", span="975-975", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_796 [label="Exit lambda expression", span="990-996", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_802 [label="Exit lambda expression", span="993-993", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_801 [label="x.ExpireList(null, TimeSpan.FromSeconds(45))", span="993-993", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_815 [label="Exit lambda expression", span="1007-1024", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_819 [label="Entry lambda expression", span="1020-1020", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_822 [label="Entry lambda expression", span="1020-1020", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_818 [label="Exit lambda expression", span="1017-1017", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_817 [label="x.ExpireList(''list-1'', TimeSpan.FromMinutes(60))", span="1017-1017", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_831 [label="Exit lambda expression", span="1032-1038", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_837 [label="Exit lambda expression", span="1035-1035", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_836 [label="x.PersistHash(null)", span="1035-1035", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_849 [label="Exit lambda expression", span="1050-1066", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_847 [label="Assert.Null(records[''hash-1''])", span="1064-1064", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_854 [label="Entry lambda expression", span="1063-1063", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_857 [label="Entry lambda expression", span="1063-1063", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_848 [label="Assert.NotNull(records[''hash-2''])", span="1065-1065", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_853 [label="Exit lambda expression", span="1060-1060", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_852 [label="x.PersistHash(''hash-1'')", span="1060-1060", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_866 [label="Exit lambda expression", span="1074-1080", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_872 [label="Exit lambda expression", span="1077-1077", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_871 [label="x.PersistSet(null)", span="1077-1077", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_884 [label="Exit lambda expression", span="1092-1108", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_882 [label="Assert.Null(records[''set-1''])", span="1106-1106", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_888 [label="Entry lambda expression", span="1105-1105", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_891 [label="Entry lambda expression", span="1105-1105", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_883 [label="Assert.NotNull(records[''set-2''])", span="1107-1107", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_887 [label="Exit lambda expression", span="1102-1102", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_886 [label="x.PersistSet(''set-1'')", span="1102-1102", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_900 [label="Exit lambda expression", span="1116-1122", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_906 [label="Exit lambda expression", span="1119-1119", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_905 [label="x.PersistList(null)", span="1119-1119", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_918 [label="Exit lambda expression", span="1134-1150", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_916 [label="Assert.Null(records[''list-1''])", span="1148-1148", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_922 [label="Entry lambda expression", span="1147-1147", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_925 [label="Entry lambda expression", span="1147-1147", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_917 [label="Assert.NotNull(records[''list-2''])", span="1149-1149", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_921 [label="Exit lambda expression", span="1144-1144", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_920 [label="x.PersistList(''list-1'')", span="1144-1144", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_945 [label="Exit lambda expression", span="1167-1167", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_944 [label="x.QueueProviders", span="1167-1167", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_92 [label="Assert.Equal(''State'', jobState.Name)", span="119-119", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_93 [label="Assert.Equal(''Reason'', jobState.Reason)", span="120-120", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_94 [label="Assert.NotNull(jobState.CreatedAt)", span="121-121", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_95 [label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="122-122", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_128 [label="Assert.Equal(''State'', jobState.Name)", span="152-152", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_129 [label="Assert.Equal(null, jobState.Reason)", span="153-153", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_130 [label="Assert.Equal(null, jobState.Data)", span="154-154", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_160 [label="Assert.Equal(''State'', jobState.Name)", span="186-186", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_161 [label="Assert.Equal(''Reason'', jobState.Reason)", span="187-187", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_162 [label="Assert.NotNull(jobState.CreatedAt)", span="188-188", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_163 [label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="189-189", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_194 [label="Assert.Equal(''State'', jobState.Name)", span="220-220", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_195 [label="Assert.Equal(null, jobState.Reason)", span="221-221", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_196 [label="Assert.NotNull(jobState.CreatedAt)", span="222-222", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_197 [label="Assert.Equal(null, jobState.Data)", span="223-223", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_12 [label="Exit lambda expression", span="21-21", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_11 [label="x.GetJobQueue()", span="21-21", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_99 [label="Entry lambda expression", span="102-102", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_102 [label="Entry lambda expression", span="103-103", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_107 [label="Exit lambda expression", span="104-104", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_106 [label="x.SerializeData()", span="104-104", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_132 [label="Entry lambda expression", span="141-141", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_135 [label="Entry lambda expression", span="142-142", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_140 [label="Exit lambda expression", span="143-143", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_139 [label="x.SerializeData()", span="143-143", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_165 [label="Entry lambda expression", span="173-173", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_168 [label="Entry lambda expression", span="174-174", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_173 [label="Exit lambda expression", span="175-175", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_172 [label="x.SerializeData()", span="175-175", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_199 [label="Entry lambda expression", span="208-208", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_202 [label="Entry lambda expression", span="209-209", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_207 [label="Exit lambda expression", span="210-210", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_206 [label="x.SerializeData()", span="210-210", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_222 [label="Exit lambda expression", span="234-234", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_221 [label="x.GetJobQueue()", span="234-234", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_234 [label="Exit lambda expression", span="243-243", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_601 [label="Exit lambda expression", span="757-757", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_600 [label="(string)x.Field", span="757-757", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_604 [label="Exit lambda expression", span="757-757", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_603 [label="(string)x.Value", span="757-757", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_618 [label="Exit lambda expression", span="779-779", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_617 [label="(string)x.Field", span="779-779", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_621 [label="Exit lambda expression", span="779-779", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_620 [label="(string)x.Value", span="779-779", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_750 [label="Exit lambda expression", span="935-935", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_749 [label="(string)x.Key", span="935-935", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_753 [label="Exit lambda expression", span="935-935", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_752 [label="(DateTime?)x.ExpireAt", span="935-935", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_786 [label="Exit lambda expression", span="978-978", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_785 [label="(string)x.Key", span="978-978", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_789 [label="Exit lambda expression", span="978-978", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_788 [label="(DateTime?)x.ExpireAt", span="978-978", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_821 [label="Exit lambda expression", span="1020-1020", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_820 [label="(string)x.Key", span="1020-1020", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_824 [label="Exit lambda expression", span="1020-1020", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_823 [label="(DateTime?)x.ExpireAt", span="1020-1020", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_856 [label="Exit lambda expression", span="1063-1063", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_855 [label="(string)x.Key", span="1063-1063", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_859 [label="Exit lambda expression", span="1063-1063", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_858 [label="(DateTime?)x.ExpireAt", span="1063-1063", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_890 [label="Exit lambda expression", span="1105-1105", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_889 [label="(string)x.Key", span="1105-1105", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_893 [label="Exit lambda expression", span="1105-1105", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_892 [label="(DateTime?)x.ExpireAt", span="1105-1105", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_924 [label="Exit lambda expression", span="1147-1147", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_923 [label="(string)x.Key", span="1147-1147", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_927 [label="Exit lambda expression", span="1147-1147", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_926 [label="(DateTime?)x.ExpireAt", span="1147-1147", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_101 [label="Exit lambda expression", span="102-102", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_100 [label="x.Name", span="102-102", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_104 [label="Exit lambda expression", span="103-103", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_103 [label="x.Reason", span="103-103", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_134 [label="Exit lambda expression", span="141-141", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_133 [label="x.Name", span="141-141", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_137 [label="Exit lambda expression", span="142-142", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_136 [label="x.Reason", span="142-142", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_167 [label="Exit lambda expression", span="173-173", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_166 [label="x.Name", span="173-173", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_170 [label="Exit lambda expression", span="174-174", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_169 [label="x.Reason", span="174-174", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_201 [label="Exit lambda expression", span="208-208", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_200 [label="x.Name", span="208-208", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_204 [label="Exit lambda expression", span="209-209", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_203 [label="x.Reason", span="209-209", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_21 [label="new SqlServerWriteOnlyTransaction(null, () => null)", span="31-31", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_22 [label="Exit lambda expression", span="31-31", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_894 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull(bool)", span="1114-1114", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_895 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="1116-1122", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_896 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull(bool)", span="1114-1114", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_664 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", span="291-291", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_390 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue(bool)", span="464-464", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_391 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="466-477", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_392 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue(bool)", span="464-464", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_754 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull(bool)", span="945-945", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_755 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45)), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="947-953", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_756 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull(bool)", span="945-945", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_415 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey(bool)", span="502-502", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_416 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="504-515", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_417 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey(bool)", span="502-502", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_860 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull(bool)", span="1072-1072", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_861 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="1074-1080", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_862 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull(bool)", span="1072-1072", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_465 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="233-233", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_8 [label="HangFire.SqlServer.SqlStoredSets", span="", cluster="Unk.Returns", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_717 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull(bool)", span="902-902", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_718 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5)), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="904-910", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_719 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull(bool)", span="902-902", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_271 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord(bool)", span="296-296", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_272 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(2, recordCount);\r\n            })", span="298-309", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_273 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord(bool)", span="296-296", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_97 [label="Entry Mock<IState>.cstr", span="", cluster="Mock<IState>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_744 [label="Entry System.DateTime.AddMinutes(double)", span="0-0", cluster="System.DateTime.AddMinutes(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_942 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="53-53", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_31 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_586 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords(bool)", span="744-744", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_587 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }), useBatching);\r\n\r\n                var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="746-761", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_588 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords(bool)", span="744-744", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_19 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_296 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="176-176", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_253 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", span="274-274", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_254 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime) record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="276-290", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_255 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", span="274-274", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_940 [label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="31-31", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_112 [label="Entry Unk.SetJobState", span="", cluster="Unk.SetJobState", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_931 [label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37", cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_559 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull(bool)", span="716-716", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_560 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="718-724", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_561 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull(bool)", span="716-716", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_53 [label="Entry Unk.ExpireJob", span="", cluster="Unk.ExpireJob", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_939 [label="Entry Mock<SqlServerStorage>.cstr", span="", cluster="Mock<SqlServerStorage>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_403 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue(bool)", span="483-483", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_404 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="485-496", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_405 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue(bool)", span="483-483", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_573 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull(bool)", span="730-730", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_574 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null), useBatching));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="732-738", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_575 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull(bool)", span="730-730", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_41 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_932 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_352 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist(bool)", span="409-409", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_353 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n                \r\n                Assert.Equal(1, recordCount);\r\n            })", span="411-422", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_354 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist(bool)", span="409-409", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_634 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", span="281-281", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_218 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_67 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_6 [label="Entry Unk.>", span="", cluster="Unk.>", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_48 [label="Entry Unk.Null", span="", cluster="Unk.Null", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_340 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent(bool)", span="390-390", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_341 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="392-403", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_342 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent(bool)", span="390-390", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_9 [label="Entry PersistentJobQueueProviderCollection.cstr", span="", cluster="PersistentJobQueueProviderCollection.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_219 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="1153-1153", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_928 [label="var connection = ConnectionUtils.CreateConnection()", span="1155-1155", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_929 [label="action(connection)", span="1157-1157", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_930 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="1153-1153", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_46 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_314 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord(bool)", span="354-354", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_315 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="356-367", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_316 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord(bool)", span="354-354", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_804 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", span="1002-1002", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_806 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1'']);\r\n                Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''list-2'']);\r\n            })", span="1007-1024", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_805 [label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key]) values (@key)''", span="1004-1005", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_807 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", span="1002-1002", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_23 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage, System.Func<DbConnection>)", span="45-45", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage, System.Func<DbConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_54 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", span="64-64", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_56 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.PersistJob(jobId), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.ExpireAt);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.NotNull(anotherJob.ExpireAt);\r\n            })", span="71-83", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_55 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues ('', '', getutcdate(), getutcdate())\r\nselect scope_identity() as Id''", span="66-69", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_57 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", span="64-64", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_13 [label="Entry Unk.GetJobQueue", span="", cluster="Unk.GetJobQueue", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_490 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange(bool)", span="614-614", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_491 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                }, useBatching);\r\n\r\n                var records = sql.Query(''select * from HangFire.List'').ToArray();\r\n\r\n                Assert.Equal(2, records.Length);\r\n                Assert.Equal(''1'', records[0].Value);\r\n                Assert.Equal(''2'', records[1].Value);\r\n            })", span="616-632", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_492 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange(bool)", span="614-614", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_227 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_874 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", span="1086-1086", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_876 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistSet(''set-1''), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''set-1'']);\r\n                Assert.NotNull(records[''set-2'']);\r\n            })", span="1092-1108", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_875 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [ExpireAt], [Score])\r\nvalues (@key, @value, @expireAt, 0.0)''", span="1088-1090", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_877 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", span="1086-1086", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_508 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="242-242", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_144 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", span="161-161", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_146 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="168-190", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_145 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="163-166", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_147 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", span="161-161", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_466 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue(bool)", span="576-576", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_467 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="578-589", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_468 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue(bool)", span="576-576", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_730 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_595 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_52 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_313 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="184-184", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_702 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", span="309-309", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_18 [label="Entry Unk.>", span="", cluster="Unk.>", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_665 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull(bool)", span="837-837", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_666 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null), useBatching));\r\n\r\n                Assert.Equal(''items'', exception.ParamName);\r\n            })", span="839-845", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_667 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull(bool)", span="837-837", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_297 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", span="332-332", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_298 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime)record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="334-348", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_299 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", span="332-332", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_650 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull(bool)", span="823-823", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_651 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>()), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="825-831", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_652 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull(bool)", span="823-823", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_14 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", span="28-28", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_15 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerWriteOnlyTransaction(null, () => null))", span="30-31", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_16 [label="Assert.Equal(''storage'', exception.ParamName)", span="33-33", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_17 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", span="28-28", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_283 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue(bool)", span="315-315", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_284 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key''), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="317-326", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_285 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue(bool)", span="315-315", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_767 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_231 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="140-140", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_427 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues(bool)", span="521-521", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_428 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.InsertToList(''my-key'', ''my-value''), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.List'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n            })", span="523-531", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_429 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues(bool)", span="521-521", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_622 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull(bool)", span="788-788", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_623 [label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null), useBatching));\r\n            })", span="790-794", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_624 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull(bool)", span="788-788", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_269 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_790 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull(bool)", span="988-988", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_791 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45)), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="990-996", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_792 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull(bool)", span="988-988", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_235 [label="Entry Unk.Enqueue", span="", cluster="Unk.Enqueue", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_72 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", span="89-89", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_74 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.StateName);\r\n                Assert.Null(anotherJob.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="96-123", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_73 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="91-94", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_75 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", span="89-89", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_98 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_108 [label="Entry Unk.SerializeData", span="", cluster="Unk.SerializeData", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_239 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue(bool)", span="257-257", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_240 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key''), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="259-268", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_241 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue(bool)", span="257-257", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_364 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist(bool)", span="428-428", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_365 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="430-439", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_366 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist(bool)", span="428-428", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_42 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_47 [label="Entry Unk.True", span="", cluster="Unk.True", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_113 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", span="129-129", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_115 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns((string)null);\r\n                state.Setup(x => x.SerializeData()).Returns((Dictionary<string, string>)null);\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(null, jobState.Reason);\r\n                Assert.Equal(null, jobState.Data);\r\n            })", span="136-155", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_114 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="131-134", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_116 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", span="129-129", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_71 [label="Entry Unk.PersistJob", span="", cluster="Unk.PersistJob", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_439 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="224-224", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_732 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", span="916-916", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_734 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1'']);\r\n                Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''hash-2'']);\r\n            })", span="922-939", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_733 [label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field])\r\nvalues (@key, @field)''", span="918-920", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_735 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", span="916-916", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_949 [label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_951 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_952 [label=jobId, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_950 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_954 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_957 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_961 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_965 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_969 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_972 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_974 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_975 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_976 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_977 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_978 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_979 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_980 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_981 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_982 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_983 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_984 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_985 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_986 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_987 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_988 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_989 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_990 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_991 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_992 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_993 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_994 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_995 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_996 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_997 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_998 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_999 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1000 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1001 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1002 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1003 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1004 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1005 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1006 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1007 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1008 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1009 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1010 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1011 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1013 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1014 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1016 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1017 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1018 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1020 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1021 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1022 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1024 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1025 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1026 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1028 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1029 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1030 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1032 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1033 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1034 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1036 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1037 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1038 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1040 [label=bool, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_953 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_956 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_960 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_964 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_968 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_973 [label=correctJobQueue, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1015 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1019 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1023 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1027 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1031 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1035 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1039 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_955 [label=jobId, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_958 [label=jobId, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_959 [label=state, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_962 [label=jobId, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_963 [label=state, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_966 [label=jobId, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_967 [label=state, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_970 [label=jobId, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_971 [label=state, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m0_1012 [label=items, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
d95 -> d96  [key=0, style=solid, color=green];
d95 -> d97  [key=2, style=dotted, color=green];
d95 -> d98  [key=2, style=dotted, color=green];
d95 -> d99  [key=2, style=dotted, color=green];
d36 -> d95  [key=0, style=solid, color=green];
d96 -> d36  [key=0, style=bold, color=blue];
d24 -> d36  [key=2, style=dotted];
d24 -> d25  [key=0, style=solid];
d24 -> d30  [key=1, style=dashed, color=darkseagreen4, label=continuations];
d46 -> d36  [key=2, style=dotted];
d46 -> d47  [key=0, style=solid];
d46 -> d48  [key=1, style=dashed, color=darkseagreen4, label=continuations];
d21 -> d24  [key=1, style=dashed, color=darkseagreen4, label=connection];
d21 -> d22  [key=0, style=solid];
d21 -> d23  [key=1, style=dashed, color=darkseagreen4, label=connection];
d21 -> d26  [key=1, style=dashed, color=darkseagreen4, label=connection];
d21 -> d29  [key=1, style=dashed, color=darkseagreen4, label=connection];
d21 -> d30  [key=1, style=dashed, color=darkseagreen4, label=connection];
d22 -> d24  [key=1, style=dashed, color=darkseagreen4, label=parentId];
d22 -> d23  [key=0, style=solid];
d22 -> d26  [key=1, style=dashed, color=darkseagreen4, label=parentId];
d22 -> d28  [key=1, style=dashed, color=darkseagreen4, label=parentId];
d22 -> d29  [key=1, style=dashed, color=darkseagreen4, label=parentId];
d22 -> d30  [key=1, style=dashed, color=darkseagreen4, label=parentId];
d23 -> d24  [key=0, style=solid];
d23 -> d35  [key=2, style=dotted];
d25 -> d26  [key=0, style=solid];
d25 -> d37  [key=2, style=dotted];
d25 -> d38  [key=2, style=dotted];
d30 -> d31  [key=0, style=solid];
d30 -> d43  [key=2, style=dotted];
d15 -> d46  [key=0, style=solid];
d15 -> d50  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
d15 -> d53  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
d15 -> d61  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
d47 -> d48  [key=0, style=solid];
d47 -> d63  [key=2, style=dotted];
d47 -> d54  [key=1, style=dashed, color=darkseagreen4, label=nextStates];
d47 -> d59  [key=1, style=dashed, color=darkseagreen4, label=nextStates];
d47 -> d60  [key=1, style=dashed, color=darkseagreen4, label=nextStates];
d48 -> d49  [key=0, style=solid];
d48 -> d60  [key=0, style=solid];
d13 -> d21  [key=0, style=solid];
d13 -> d22  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Continuations.AwaitingState"];
d13 -> d25  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
d13 -> d32  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Continuations.AwaitingState"];
d13 -> d33  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
d26 -> d27  [key=0, style=solid];
d26 -> d39  [key=2, style=dotted];
d29 -> d30  [key=0, style=solid];
d29 -> d42  [key=2, style=dotted];
d29 -> d31  [key=1, style=dashed, color=darkseagreen4, label=currentState];
d29 -> d32  [key=1, style=dashed, color=darkseagreen4, label=currentState];
d28 -> d34  [key=0, style=solid];
d28 -> d40  [key=2, style=dotted];
d28 -> d41  [key=2, style=dotted];
d31 -> d32  [key=0, style=solid];
d31 -> d34  [key=0, style=solid];
d31 -> d14  [key=2, style=dotted];
d43 -> d91  [key=0, style=solid];
d11 -> d15  [key=2, style=dotted];
d11 -> d12  [key=0, style=solid];
d62 -> d15  [key=0, style=bold, color=blue];
d50 -> d50  [key=1, style=dashed, color=darkseagreen4, label=continuation];
d50 -> d51  [key=0, style=solid];
d50 -> d65  [key=2, style=dotted];
d50 -> d52  [key=1, style=dashed, color=darkseagreen4, label=currentState];
d50 -> d53  [key=1, style=dashed, color=darkseagreen4, label=continuation];
d50 -> d56  [key=1, style=dashed, color=darkseagreen4, label=currentState];
d53 -> d53  [key=1, style=dashed, color=darkseagreen4, label=continuation];
d53 -> d54  [key=0, style=solid];
d53 -> d55  [key=0, style=solid];
d53 -> d44  [key=2, style=dotted];
d53 -> d59  [key=1, style=dashed, color=darkseagreen4, label=continuation];
d61 -> d61  [key=1, style=dashed, color=darkseagreen4, label=tuple];
d61 -> d60  [key=0, style=solid];
d61 -> d70  [key=2, style=dotted];
d54 -> d48  [key=0, style=solid];
d54 -> d54  [key=1, style=dashed, color=darkseagreen4, label=continuation];
d54 -> d45  [key=2, style=dotted];
d54 -> d66  [key=2, style=dotted];
d54 -> d59  [key=1, style=dashed, color=darkseagreen4, label=continuation];
d59 -> d48  [key=0, style=solid];
d59 -> d59  [key=1, style=dashed, color=darkseagreen4, label=continuation];
d59 -> d66  [key=2, style=dotted];
d60 -> d62  [key=0, style=solid];
d60 -> d61  [key=0, style=solid];
d49 -> d48  [key=0, style=solid];
d49 -> d50  [key=0, style=solid];
d49 -> d49  [key=1, style=dashed, color=darkseagreen4, label=continuation];
d49 -> d64  [key=2, style=dotted];
d51 -> d48  [key=0, style=solid];
d51 -> d52  [key=0, style=solid];
d52 -> d48  [key=0, style=solid];
d52 -> d53  [key=0, style=solid];
d9 -> d13  [key=2, style=dotted];
d9 -> d12  [key=0, style=solid];
d34 -> d13  [key=0, style=bold, color=blue];
d32 -> d33  [key=0, style=solid];
d32 -> d44  [key=2, style=dotted];
d33 -> d34  [key=0, style=solid];
d33 -> d45  [key=2, style=dotted];
d27 -> d29  [key=0, style=solid];
d27 -> d28  [key=0, style=solid];
d102 -> d31  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Continuations.ContinuationsSupportAttribute"];
d102 -> d9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Continuations.ContinuationsSupportAttribute"];
d102 -> d3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Continuations.ContinuationsSupportAttribute"];
d102 -> d4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Continuations.ContinuationsSupportAttribute"];
d102 -> d10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Continuations.ContinuationsSupportAttribute"];
d92 -> d43  [key=0, style=bold, color=blue];
d91 -> d92  [key=0, style=solid];
d91 -> d93  [key=2, style=dotted];
d91 -> d94  [key=2, style=dotted];
d6 -> d11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
d6 -> d9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
d6 -> d7  [key=0, style=solid];
d6 -> d10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
d10 -> d11  [key=0, style=solid];
d10 -> d14  [key=2, style=dotted];
d10 -> d12  [key=0, style=solid];
d12 -> d6  [key=0, style=bold, color=blue];
d65 -> d71  [key=0, style=solid];
d65 -> d75  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
d65 -> d77  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
d65 -> d78  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
d65 -> d80  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
d65 -> d81  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
d56 -> d59  [key=0, style=solid];
d56 -> d57  [key=0, style=solid];
d56 -> d67  [key=2, style=dotted];
d56 -> d68  [key=2, style=dotted];
d55 -> d56  [key=0, style=solid];
d58 -> d59  [key=0, style=solid];
d58 -> d69  [key=2, style=dotted];
d7 -> d9  [key=1, style=dashed, color=darkseagreen4, label=awaitingState];
d7 -> d8  [key=0, style=solid];
d8 -> d9  [key=0, style=solid];
d8 -> d10  [key=0, style=solid];
d75 -> d39  [key=2, style=dotted];
d75 -> d76  [key=0, style=solid];
d78 -> d42  [key=2, style=dotted];
d78 -> d79  [key=0, style=solid];
d78 -> d84  [key=1, style=dashed, color=darkseagreen4, label=currentState];
d3 -> d4  [key=0, style=solid];
d4 -> d5  [key=0, style=solid];
d85 -> d65  [key=0, style=bold, color=blue];
d71 -> d72  [key=0, style=solid];
d71 -> d84  [key=1, style=dashed, color=darkseagreen4, label=currentState];
d77 -> d84  [key=0, style=solid];
d77 -> d86  [key=2, style=dotted];
d77 -> d87  [key=2, style=dotted];
d80 -> d81  [key=0, style=solid];
d80 -> d82  [key=0, style=solid];
d80 -> d88  [key=2, style=dotted];
d81 -> d85  [key=0, style=solid];
d81 -> d89  [key=2, style=dotted];
d81 -> d86  [key=2, style=dotted];
d57 -> d58  [key=0, style=solid];
d74 -> d75  [key=0, style=solid];
d74 -> d84  [key=0, style=solid];
d76 -> d78  [key=0, style=solid];
d76 -> d77  [key=0, style=solid];
d79 -> d80  [key=0, style=solid];
d79 -> d84  [key=0, style=solid];
d84 -> d85  [key=0, style=solid];
d2 -> d3  [key=0, style=solid];
d5 -> d2  [key=0, style=bold, color=blue];
d72 -> d80  [key=1, style=dashed, color=darkseagreen4, label=started];
d72 -> d73  [key=0, style=solid];
d82 -> d83  [key=0, style=solid];
d82 -> d90  [key=2, style=dotted];
d73 -> d74  [key=0, style=solid];
d73 -> d82  [key=1, style=dashed, color=darkseagreen4, label=firstAttempt];
d83 -> d74  [key=0, style=solid];
m0_452 -> m0_453  [key=0, style=solid];
m0_452 -> m0_456  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_453 -> m0_31  [key=2, style=dotted];
m0_453 -> m0_454  [key=0, style=solid];
m0_453 -> m0_455  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_454 -> m0_452  [key=0, style=bold, color=blue];
m0_769 -> m0_771  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_769 -> m0_775  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_769 -> m0_770  [key=0, style=solid];
m0_771 -> m0_31  [key=2, style=dotted];
m0_771 -> m0_772  [key=0, style=solid];
m0_771 -> m0_773  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_770 -> m0_771  [key=0, style=solid];
m0_770 -> m0_770  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m0_770 -> m0_774  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_772 -> m0_769  [key=0, style=bold, color=blue];
m0_535 -> m0_536  [key=0, style=solid];
m0_535 -> m0_539  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_536 -> m0_31  [key=2, style=dotted];
m0_536 -> m0_537  [key=0, style=solid];
m0_536 -> m0_538  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_537 -> m0_535  [key=0, style=bold, color=blue];
m0_440 -> m0_441  [key=0, style=solid];
m0_440 -> m0_444  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_441 -> m0_31  [key=2, style=dotted];
m0_441 -> m0_442  [key=0, style=solid];
m0_441 -> m0_443  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_442 -> m0_440  [key=0, style=bold, color=blue];
m0_635 -> m0_636  [key=0, style=solid];
m0_635 -> m0_639  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_635 -> m0_640  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_636 -> m0_31  [key=2, style=dotted];
m0_636 -> m0_637  [key=0, style=solid];
m0_636 -> m0_638  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_637 -> m0_635  [key=0, style=bold, color=blue];
m0_839 -> m0_841  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_839 -> m0_845  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_839 -> m0_840  [key=0, style=solid];
m0_841 -> m0_31  [key=2, style=dotted];
m0_841 -> m0_842  [key=0, style=solid];
m0_841 -> m0_843  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_840 -> m0_841  [key=0, style=solid];
m0_840 -> m0_840  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m0_840 -> m0_844  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_842 -> m0_839  [key=0, style=bold, color=blue];
m0_908 -> m0_910  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_908 -> m0_914  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_908 -> m0_909  [key=0, style=solid];
m0_910 -> m0_31  [key=2, style=dotted];
m0_910 -> m0_911  [key=0, style=solid];
m0_910 -> m0_912  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_909 -> m0_910  [key=0, style=solid];
m0_909 -> m0_909  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m0_909 -> m0_913  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_911 -> m0_908  [key=0, style=bold, color=blue];
m0_478 -> m0_479  [key=0, style=solid];
m0_478 -> m0_482  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_479 -> m0_31  [key=2, style=dotted];
m0_479 -> m0_480  [key=0, style=solid];
m0_479 -> m0_481  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_480 -> m0_478  [key=0, style=bold, color=blue];
m0_547 -> m0_548  [key=0, style=solid];
m0_547 -> m0_551  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_548 -> m0_31  [key=2, style=dotted];
m0_548 -> m0_549  [key=0, style=solid];
m0_548 -> m0_550  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_549 -> m0_547  [key=0, style=bold, color=blue];
m0_678 -> m0_679  [key=0, style=solid];
m0_678 -> m0_683  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_679 -> m0_31  [key=2, style=dotted];
m0_679 -> m0_680  [key=0, style=solid];
m0_679 -> m0_681  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_680 -> m0_678  [key=0, style=bold, color=blue];
m0_27 -> m0_29  [key=1, style=dashed, color=green, label=bool];
m0_27 -> m0_35  [key=1, style=dashed, color=green, label=bool];
m0_27 -> m0_28  [key=0, style=solid];
m0_29 -> m0_30  [key=0, style=solid, color=green];
m0_29 -> m0_31  [key=2, style=dotted, color=green];
m0_29 -> m0_32  [key=1, style=dashed, color=green, label="lambda expression"];
m0_28 -> m0_29  [key=0, style=solid, color=green];
m0_28 -> m0_28  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m0_28 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_28 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_30 -> m0_27  [key=0, style=bold, color=blue];
m0_825 -> m0_826  [key=0, style=solid];
m0_825 -> m0_829  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_825 -> m0_833  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_826 -> m0_31  [key=2, style=dotted];
m0_826 -> m0_827  [key=0, style=solid];
m0_826 -> m0_828  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_827 -> m0_825  [key=0, style=bold, color=blue];
m0_236 -> m0_237  [key=0, style=solid];
m0_237 -> m0_41  [key=2, style=dotted];
m0_237 -> m0_42  [key=2, style=dotted];
m0_237 -> m0_238  [key=0, style=solid];
m0_238 -> m0_236  [key=0, style=bold, color=blue];
m0_509 -> m0_510  [key=0, style=solid];
m0_509 -> m0_513  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_510 -> m0_31  [key=2, style=dotted];
m0_510 -> m0_511  [key=0, style=solid];
m0_510 -> m0_512  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_511 -> m0_509  [key=0, style=bold, color=blue];
m0_326 -> m0_327  [key=0, style=solid];
m0_326 -> m0_330  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_327 -> m0_31  [key=2, style=dotted];
m0_327 -> m0_328  [key=0, style=solid];
m0_327 -> m0_329  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_328 -> m0_326  [key=0, style=bold, color=blue];
m0_378 -> m0_379  [key=0, style=solid];
m0_378 -> m0_382  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_379 -> m0_31  [key=2, style=dotted];
m0_379 -> m0_380  [key=0, style=solid];
m0_379 -> m0_381  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_380 -> m0_378  [key=0, style=bold, color=blue];
m0_690 -> m0_691  [key=0, style=solid];
m0_690 -> m0_694  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_690 -> m0_697  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_691 -> m0_31  [key=2, style=dotted];
m0_691 -> m0_692  [key=0, style=solid];
m0_691 -> m0_693  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_692 -> m0_690  [key=0, style=bold, color=blue];
m0_211 -> m0_216  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_211 -> m0_224  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_211 -> m0_212  [key=0, style=solid];
m0_215 -> m0_216  [key=0, style=solid];
m0_215 -> m0_218  [key=2, style=dotted];
m0_216 -> m0_217  [key=0, style=solid];
m0_216 -> m0_219  [key=2, style=dotted];
m0_216 -> m0_223  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_213 -> m0_215  [key=1, style=dashed, color=darkseagreen4, label=correctProvider];
m0_213 -> m0_214  [key=0, style=solid];
m0_213 -> m0_5  [key=2, style=dotted];
m0_214 -> m0_215  [key=0, style=solid];
m0_214 -> m0_6  [key=2, style=dotted];
m0_214 -> m0_8  [key=2, style=dotted];
m0_214 -> m0_220  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_212 -> m0_216  [key=1, style=dashed, color=darkseagreen4, label=correctJobQueue];
m0_212 -> m0_213  [key=0, style=solid];
m0_212 -> m0_214  [key=1, style=dashed, color=darkseagreen4, label=correctJobQueue];
m0_212 -> m0_7  [key=2, style=dotted];
m0_212 -> m0_225  [key=1, style=dashed, color=darkseagreen4, label=correctJobQueue];
m0_217 -> m0_211  [key=0, style=bold, color=blue];
m0_44 -> m0_933  [key=0, style=solid];
m0_44 -> m0_936  [key=1, style=dashed, color=darkseagreen4, label="System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>"];
m0_934 -> m0_935  [key=0, style=solid];
m0_934 -> m0_6  [key=2, style=dotted];
m0_934 -> m0_8  [key=2, style=dotted];
m0_934 -> m0_943  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_933 -> m0_934  [key=0, style=solid];
m0_933 -> m0_939  [key=2, style=dotted];
m0_933 -> m0_940  [key=2, style=dotted];
m0_933 -> m0_730  [key=2, style=dotted];
m0_933 -> m0_935  [key=1, style=dashed, color=darkseagreen4, label=storage];
m0_936 -> m0_937  [key=0, style=solid];
m0_936 -> m0_932  [key=2, style=dotted];
m0_935 -> m0_936  [key=0, style=solid];
m0_935 -> m0_941  [key=2, style=dotted];
m0_935 -> m0_937  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m0_937 -> m0_938  [key=0, style=solid];
m0_937 -> m0_942  [key=2, style=dotted];
m0_938 -> m0_44  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_9  [key=2, style=dotted];
m0_1 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label=defaultProvider];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_5  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_6  [key=2, style=dotted];
m0_2 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_4 -> m0_0  [key=0, style=bold, color=blue];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_6  [key=2, style=dotted];
m0_4 -> m0_7  [key=2, style=dotted];
m0_5 -> m0_3  [key=0, style=bold, color=blue];
m0_605 -> m0_606  [key=0, style=solid];
m0_605 -> m0_609  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_606 -> m0_31  [key=2, style=dotted];
m0_606 -> m0_607  [key=0, style=solid];
m0_606 -> m0_608  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_607 -> m0_605  [key=0, style=bold, color=blue];
m0_178 -> m0_180  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_178 -> m0_188  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_178 -> m0_179  [key=0, style=solid];
m0_180 -> m0_31  [key=2, style=dotted];
m0_180 -> m0_181  [key=0, style=solid];
m0_180 -> m0_182  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_179 -> m0_28  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m0_179 -> m0_180  [key=0, style=solid];
m0_179 -> m0_183  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_181 -> m0_178  [key=0, style=bold, color=blue];
m0_523 -> m0_524  [key=0, style=solid];
m0_523 -> m0_527  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_524 -> m0_31  [key=2, style=dotted];
m0_524 -> m0_525  [key=0, style=solid];
m0_524 -> m0_526  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_525 -> m0_523  [key=0, style=bold, color=blue];
m0_703 -> m0_705  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_703 -> m0_709  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_703 -> m0_704  [key=0, style=solid];
m0_705 -> m0_31  [key=2, style=dotted];
m0_705 -> m0_706  [key=0, style=solid];
m0_705 -> m0_707  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_704 -> m0_705  [key=0, style=solid];
m0_704 -> m0_704  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m0_704 -> m0_708  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_706 -> m0_703  [key=0, style=bold, color=blue];
m0_20 -> m0_21  [key=0, style=solid];
m0_32 -> m0_35  [key=1, style=dashed, color=green, label=SqlConnection];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_32 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_32 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_35 -> m0_36  [key=0, style=solid, color=green];
m0_35 -> m0_44  [key=2, style=dotted, color=green];
m0_35 -> m0_49  [key=1, style=dashed, color=green, label="lambda expression"];
m0_33 -> m0_35  [key=1, style=dashed, color=green, label=jobId];
m0_33 -> m0_50  [key=1, style=dashed, color=green, label=jobId];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_41  [key=2, style=dotted];
m0_33 -> m0_42  [key=2, style=dotted];
m0_33 -> m0_43  [key=2, style=dotted];
m0_33 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_34 -> m0_35  [key=0, style=solid, color=green];
m0_34 -> m0_41  [key=2, style=dotted];
m0_34 -> m0_42  [key=2, style=dotted];
m0_34 -> m0_43  [key=2, style=dotted];
m0_34 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
m0_36 -> m0_37  [key=0, style=solid, color=green];
m0_36 -> m0_45  [key=2, style=dotted];
m0_49 -> m0_50  [key=0, style=solid, color=green];
m0_50 -> m0_51  [key=0, style=solid, color=green];
m0_50 -> m0_52  [key=2, style=dotted, color=green];
m0_50 -> m0_53  [key=2, style=dotted, color=green];
m0_51 -> m0_49  [key=0, style=bold, color=blue];
m0_37 -> m0_38  [key=0, style=solid, color=green];
m0_37 -> m0_46  [key=2, style=dotted, color=green];
m0_37 -> m0_47  [key=2, style=dotted, color=green];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_45  [key=2, style=dotted];
m0_61 -> m0_44  [key=2, style=dotted];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_45  [key=2, style=dotted];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_45  [key=2, style=dotted];
m0_83 -> m0_44  [key=2, style=dotted];
m0_83 -> m0_84  [key=0, style=solid];
m0_83 -> m0_109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_45  [key=2, style=dotted];
m0_84 -> m0_86  [key=1, style=dashed, color=darkseagreen4, label=job];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_45  [key=2, style=dotted];
m0_87 -> m0_89  [key=1, style=dashed, color=darkseagreen4, label=anotherJob];
m0_123 -> m0_44  [key=2, style=dotted];
m0_123 -> m0_124  [key=0, style=solid];
m0_123 -> m0_141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_124 -> m0_125  [key=0, style=solid];
m0_124 -> m0_45  [key=2, style=dotted];
m0_124 -> m0_126  [key=1, style=dashed, color=darkseagreen4, label=job];
m0_154 -> m0_44  [key=2, style=dotted];
m0_154 -> m0_155  [key=0, style=solid];
m0_154 -> m0_174  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_155 -> m0_156  [key=0, style=solid];
m0_155 -> m0_45  [key=2, style=dotted];
m0_155 -> m0_157  [key=1, style=dashed, color=darkseagreen4, label=job];
m0_188 -> m0_44  [key=2, style=dotted];
m0_188 -> m0_189  [key=0, style=solid];
m0_188 -> m0_208  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_189 -> m0_190  [key=0, style=solid];
m0_189 -> m0_45  [key=2, style=dotted];
m0_189 -> m0_191  [key=1, style=dashed, color=darkseagreen4, label=job];
m0_224 -> m0_44  [key=2, style=dotted];
m0_224 -> m0_225  [key=0, style=solid];
m0_224 -> m0_228  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_243 -> m0_44  [key=2, style=dotted];
m0_243 -> m0_244  [key=0, style=solid];
m0_243 -> m0_249  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_257 -> m0_44  [key=2, style=dotted];
m0_257 -> m0_258  [key=0, style=solid];
m0_257 -> m0_266  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_275 -> m0_44  [key=2, style=dotted];
m0_275 -> m0_276  [key=0, style=solid];
m0_275 -> m0_279  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_287 -> m0_44  [key=2, style=dotted];
m0_287 -> m0_288  [key=0, style=solid];
m0_287 -> m0_293  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_301 -> m0_44  [key=2, style=dotted];
m0_301 -> m0_302  [key=0, style=solid];
m0_301 -> m0_310  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_318 -> m0_44  [key=2, style=dotted];
m0_318 -> m0_319  [key=0, style=solid];
m0_318 -> m0_322  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_330 -> m0_44  [key=2, style=dotted];
m0_330 -> m0_331  [key=0, style=solid];
m0_330 -> m0_336  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_344 -> m0_44  [key=2, style=dotted];
m0_344 -> m0_345  [key=0, style=solid];
m0_344 -> m0_348  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_356 -> m0_44  [key=2, style=dotted];
m0_356 -> m0_357  [key=0, style=solid];
m0_356 -> m0_360  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_368 -> m0_44  [key=2, style=dotted];
m0_368 -> m0_369  [key=0, style=solid];
m0_368 -> m0_374  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_382 -> m0_44  [key=2, style=dotted];
m0_382 -> m0_383  [key=0, style=solid];
m0_382 -> m0_386  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_394 -> m0_44  [key=2, style=dotted];
m0_394 -> m0_395  [key=0, style=solid];
m0_394 -> m0_398  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_407 -> m0_44  [key=2, style=dotted];
m0_407 -> m0_408  [key=0, style=solid];
m0_407 -> m0_411  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_419 -> m0_44  [key=2, style=dotted];
m0_419 -> m0_420  [key=0, style=solid];
m0_419 -> m0_423  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_431 -> m0_44  [key=2, style=dotted];
m0_431 -> m0_432  [key=0, style=solid];
m0_431 -> m0_436  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_444 -> m0_44  [key=2, style=dotted];
m0_444 -> m0_445  [key=0, style=solid];
m0_444 -> m0_448  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_456 -> m0_44  [key=2, style=dotted];
m0_456 -> m0_457  [key=0, style=solid];
m0_456 -> m0_460  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_470 -> m0_44  [key=2, style=dotted];
m0_470 -> m0_471  [key=0, style=solid];
m0_470 -> m0_474  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_482 -> m0_44  [key=2, style=dotted];
m0_482 -> m0_483  [key=0, style=solid];
m0_482 -> m0_486  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_494 -> m0_44  [key=2, style=dotted];
m0_494 -> m0_495  [key=0, style=solid];
m0_494 -> m0_501  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_513 -> m0_44  [key=2, style=dotted];
m0_513 -> m0_514  [key=0, style=solid];
m0_513 -> m0_517  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_527 -> m0_44  [key=2, style=dotted];
m0_527 -> m0_528  [key=0, style=solid];
m0_527 -> m0_531  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_539 -> m0_44  [key=2, style=dotted];
m0_539 -> m0_540  [key=0, style=solid];
m0_539 -> m0_543  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_551 -> m0_44  [key=2, style=dotted];
m0_551 -> m0_552  [key=0, style=solid];
m0_551 -> m0_555  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_563 -> m0_564  [key=0, style=solid];
m0_563 -> m0_18  [key=2, style=dotted];
m0_563 -> m0_566  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_567 -> m0_44  [key=2, style=dotted];
m0_567 -> m0_568  [key=0, style=solid];
m0_567 -> m0_569  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_577 -> m0_578  [key=0, style=solid];
m0_577 -> m0_18  [key=2, style=dotted];
m0_577 -> m0_580  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_581 -> m0_44  [key=2, style=dotted];
m0_581 -> m0_582  [key=0, style=solid];
m0_581 -> m0_583  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_590 -> m0_44  [key=2, style=dotted];
m0_590 -> m0_591  [key=0, style=solid];
m0_590 -> m0_596  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_609 -> m0_44  [key=2, style=dotted];
m0_609 -> m0_610  [key=0, style=solid];
m0_609 -> m0_613  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_626 -> m0_627  [key=0, style=solid];
m0_626 -> m0_18  [key=2, style=dotted];
m0_626 -> m0_628  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_629 -> m0_44  [key=2, style=dotted];
m0_629 -> m0_630  [key=0, style=solid];
m0_629 -> m0_631  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_639 -> m0_44  [key=2, style=dotted];
m0_639 -> m0_640  [key=0, style=solid];
m0_639 -> m0_644  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_640 -> m0_44  [key=2, style=dotted];
m0_640 -> m0_641  [key=0, style=solid];
m0_640 -> m0_647  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_654 -> m0_655  [key=0, style=solid];
m0_654 -> m0_18  [key=2, style=dotted];
m0_654 -> m0_657  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_658 -> m0_44  [key=2, style=dotted];
m0_658 -> m0_659  [key=0, style=solid];
m0_658 -> m0_660  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_669 -> m0_670  [key=0, style=solid];
m0_669 -> m0_18  [key=2, style=dotted];
m0_669 -> m0_672  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_673 -> m0_44  [key=2, style=dotted];
m0_673 -> m0_674  [key=0, style=solid];
m0_673 -> m0_675  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_683 -> m0_44  [key=2, style=dotted];
m0_683 -> m0_684  [key=0, style=solid];
m0_683 -> m0_687  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_694 -> m0_695  [key=0, style=solid];
m0_694 -> m0_18  [key=2, style=dotted];
m0_694 -> m0_696  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_697 -> m0_44  [key=2, style=dotted];
m0_697 -> m0_698  [key=0, style=solid];
m0_697 -> m0_699  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_709 -> m0_44  [key=2, style=dotted];
m0_709 -> m0_710  [key=0, style=solid];
m0_709 -> m0_714  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_721 -> m0_722  [key=0, style=solid];
m0_721 -> m0_18  [key=2, style=dotted];
m0_721 -> m0_724  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_725 -> m0_44  [key=2, style=dotted];
m0_725 -> m0_726  [key=0, style=solid];
m0_725 -> m0_727  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_738 -> m0_44  [key=2, style=dotted];
m0_738 -> m0_739  [key=0, style=solid];
m0_738 -> m0_745  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_758 -> m0_759  [key=0, style=solid];
m0_758 -> m0_18  [key=2, style=dotted];
m0_758 -> m0_761  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_762 -> m0_44  [key=2, style=dotted];
m0_762 -> m0_763  [key=0, style=solid];
m0_762 -> m0_764  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_775 -> m0_44  [key=2, style=dotted];
m0_775 -> m0_776  [key=0, style=solid];
m0_775 -> m0_781  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_794 -> m0_795  [key=0, style=solid];
m0_794 -> m0_18  [key=2, style=dotted];
m0_794 -> m0_797  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_798 -> m0_44  [key=2, style=dotted];
m0_798 -> m0_799  [key=0, style=solid];
m0_798 -> m0_800  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_810 -> m0_44  [key=2, style=dotted];
m0_810 -> m0_811  [key=0, style=solid];
m0_810 -> m0_816  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_829 -> m0_830  [key=0, style=solid];
m0_829 -> m0_18  [key=2, style=dotted];
m0_829 -> m0_832  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_833 -> m0_44  [key=2, style=dotted];
m0_833 -> m0_834  [key=0, style=solid];
m0_833 -> m0_835  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_845 -> m0_44  [key=2, style=dotted];
m0_845 -> m0_846  [key=0, style=solid];
m0_845 -> m0_851  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_864 -> m0_865  [key=0, style=solid];
m0_864 -> m0_18  [key=2, style=dotted];
m0_864 -> m0_867  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_868 -> m0_44  [key=2, style=dotted];
m0_868 -> m0_869  [key=0, style=solid];
m0_868 -> m0_870  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_880 -> m0_44  [key=2, style=dotted];
m0_880 -> m0_881  [key=0, style=solid];
m0_880 -> m0_885  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_898 -> m0_899  [key=0, style=solid];
m0_898 -> m0_18  [key=2, style=dotted];
m0_898 -> m0_901  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_902 -> m0_44  [key=2, style=dotted];
m0_902 -> m0_903  [key=0, style=solid];
m0_902 -> m0_904  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_914 -> m0_44  [key=2, style=dotted];
m0_914 -> m0_915  [key=0, style=solid];
m0_914 -> m0_919  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_40 -> m0_32  [key=0, style=bold, color=blue];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_48  [key=2, style=dotted];
m0_263 -> m0_46  [key=2, style=dotted];
m0_263 -> m0_47  [key=2, style=dotted];
m0_263 -> m0_264  [key=0, style=solid];
m0_264 -> m0_46  [key=2, style=dotted];
m0_264 -> m0_47  [key=2, style=dotted];
m0_264 -> m0_265  [key=0, style=solid];
m0_307 -> m0_46  [key=2, style=dotted];
m0_307 -> m0_47  [key=2, style=dotted];
m0_307 -> m0_308  [key=0, style=solid];
m0_308 -> m0_46  [key=2, style=dotted];
m0_308 -> m0_47  [key=2, style=dotted];
m0_308 -> m0_309  [key=0, style=solid];
m0_740 -> m0_47  [key=2, style=dotted];
m0_740 -> m0_741  [key=0, style=solid];
m0_740 -> m0_744  [key=2, style=dotted];
m0_741 -> m0_47  [key=2, style=dotted];
m0_741 -> m0_742  [key=0, style=solid];
m0_741 -> m0_744  [key=2, style=dotted];
m0_777 -> m0_47  [key=2, style=dotted];
m0_777 -> m0_778  [key=0, style=solid];
m0_777 -> m0_744  [key=2, style=dotted];
m0_778 -> m0_47  [key=2, style=dotted];
m0_778 -> m0_779  [key=0, style=solid];
m0_778 -> m0_744  [key=2, style=dotted];
m0_812 -> m0_47  [key=2, style=dotted];
m0_812 -> m0_813  [key=0, style=solid];
m0_812 -> m0_744  [key=2, style=dotted];
m0_813 -> m0_47  [key=2, style=dotted];
m0_813 -> m0_814  [key=0, style=solid];
m0_813 -> m0_744  [key=2, style=dotted];
m0_58 -> m0_61  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_58 -> m0_62  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_58 -> m0_64  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_59 -> m0_61  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_59 -> m0_62  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_59 -> m0_41  [key=2, style=dotted];
m0_59 -> m0_42  [key=2, style=dotted];
m0_59 -> m0_43  [key=2, style=dotted];
m0_59 -> m0_60  [key=0, style=solid];
m0_59 -> m0_69  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_64  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
m0_60 -> m0_41  [key=2, style=dotted];
m0_60 -> m0_42  [key=2, style=dotted];
m0_60 -> m0_43  [key=2, style=dotted];
m0_68 -> m0_69  [key=0, style=solid];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_48  [key=2, style=dotted];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_67  [key=2, style=dotted];
m0_76 -> m0_83  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_76 -> m0_84  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_76 -> m0_87  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_76 -> m0_77  [key=0, style=solid];
m0_76 -> m0_78  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_76 -> m0_90  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_77 -> m0_83  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_77 -> m0_84  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_77 -> m0_41  [key=2, style=dotted];
m0_77 -> m0_42  [key=2, style=dotted];
m0_77 -> m0_43  [key=2, style=dotted];
m0_77 -> m0_78  [key=0, style=solid];
m0_77 -> m0_110  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_77 -> m0_91  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_79 -> m0_83  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_79 -> m0_80  [key=0, style=solid];
m0_79 -> m0_97  [key=2, style=dotted];
m0_79 -> m0_81  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_79 -> m0_82  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_79 -> m0_110  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_82 -> m0_83  [key=0, style=solid];
m0_82 -> m0_6  [key=2, style=dotted];
m0_82 -> m0_98  [key=2, style=dotted];
m0_82 -> m0_8  [key=2, style=dotted];
m0_82 -> m0_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_109 -> m0_110  [key=0, style=solid];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_19  [key=2, style=dotted];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_67  [key=2, style=dotted];
m0_78 -> m0_87  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
m0_78 -> m0_41  [key=2, style=dotted];
m0_78 -> m0_42  [key=2, style=dotted];
m0_78 -> m0_43  [key=2, style=dotted];
m0_78 -> m0_79  [key=0, style=solid];
m0_88 -> m0_89  [key=0, style=solid];
m0_88 -> m0_48  [key=2, style=dotted];
m0_89 -> m0_90  [key=0, style=solid];
m0_89 -> m0_48  [key=2, style=dotted];
m0_117 -> m0_123  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_117 -> m0_124  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_117 -> m0_118  [key=0, style=solid];
m0_117 -> m0_127  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_118 -> m0_123  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_118 -> m0_124  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_118 -> m0_41  [key=2, style=dotted];
m0_118 -> m0_42  [key=2, style=dotted];
m0_118 -> m0_43  [key=2, style=dotted];
m0_118 -> m0_119  [key=0, style=solid];
m0_118 -> m0_142  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_119 -> m0_123  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_119 -> m0_120  [key=0, style=solid];
m0_119 -> m0_97  [key=2, style=dotted];
m0_119 -> m0_121  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_119 -> m0_122  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_119 -> m0_142  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_122 -> m0_123  [key=0, style=solid];
m0_122 -> m0_6  [key=2, style=dotted];
m0_122 -> m0_8  [key=2, style=dotted];
m0_122 -> m0_138  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_141 -> m0_142  [key=0, style=solid];
m0_125 -> m0_126  [key=0, style=solid];
m0_125 -> m0_19  [key=2, style=dotted];
m0_126 -> m0_127  [key=0, style=solid];
m0_126 -> m0_67  [key=2, style=dotted];
m0_148 -> m0_154  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_148 -> m0_155  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_148 -> m0_149  [key=0, style=solid];
m0_148 -> m0_158  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_149 -> m0_154  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_149 -> m0_155  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_149 -> m0_41  [key=2, style=dotted];
m0_149 -> m0_42  [key=2, style=dotted];
m0_149 -> m0_43  [key=2, style=dotted];
m0_149 -> m0_150  [key=0, style=solid];
m0_149 -> m0_175  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_149 -> m0_159  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_150 -> m0_154  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_150 -> m0_151  [key=0, style=solid];
m0_150 -> m0_97  [key=2, style=dotted];
m0_150 -> m0_152  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_150 -> m0_153  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_150 -> m0_175  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_153 -> m0_154  [key=0, style=solid];
m0_153 -> m0_6  [key=2, style=dotted];
m0_153 -> m0_98  [key=2, style=dotted];
m0_153 -> m0_8  [key=2, style=dotted];
m0_153 -> m0_171  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_174 -> m0_175  [key=0, style=solid];
m0_156 -> m0_157  [key=0, style=solid];
m0_156 -> m0_48  [key=2, style=dotted];
m0_157 -> m0_158  [key=0, style=solid];
m0_157 -> m0_48  [key=2, style=dotted];
m0_182 -> m0_188  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_182 -> m0_189  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_182 -> m0_183  [key=0, style=solid];
m0_182 -> m0_192  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_183 -> m0_188  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_183 -> m0_189  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_183 -> m0_41  [key=2, style=dotted];
m0_183 -> m0_42  [key=2, style=dotted];
m0_183 -> m0_43  [key=2, style=dotted];
m0_183 -> m0_184  [key=0, style=solid];
m0_183 -> m0_209  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_183 -> m0_193  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_184 -> m0_188  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_184 -> m0_185  [key=0, style=solid];
m0_184 -> m0_97  [key=2, style=dotted];
m0_184 -> m0_186  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_184 -> m0_187  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_184 -> m0_209  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_187 -> m0_188  [key=0, style=solid];
m0_187 -> m0_6  [key=2, style=dotted];
m0_187 -> m0_8  [key=2, style=dotted];
m0_187 -> m0_205  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_208 -> m0_209  [key=0, style=solid];
m0_190 -> m0_191  [key=0, style=solid];
m0_190 -> m0_48  [key=2, style=dotted];
m0_191 -> m0_192  [key=0, style=solid];
m0_191 -> m0_48  [key=2, style=dotted];
m0_223 -> m0_224  [key=0, style=solid];
m0_225 -> m0_226  [key=0, style=solid];
m0_225 -> m0_227  [key=2, style=dotted];
m0_225 -> m0_232  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_228 -> m0_229  [key=0, style=solid];
m0_242 -> m0_243  [key=0, style=solid];
m0_242 -> m0_244  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_244 -> m0_41  [key=2, style=dotted];
m0_244 -> m0_42  [key=2, style=dotted];
m0_244 -> m0_245  [key=0, style=solid];
m0_244 -> m0_246  [key=1, style=dashed, color=darkseagreen4, label=record];
m0_244 -> m0_247  [key=1, style=dashed, color=darkseagreen4, label=record];
m0_249 -> m0_250  [key=0, style=solid];
m0_256 -> m0_257  [key=0, style=solid];
m0_256 -> m0_258  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_258 -> m0_41  [key=2, style=dotted];
m0_258 -> m0_42  [key=2, style=dotted];
m0_258 -> m0_259  [key=0, style=solid];
m0_258 -> m0_260  [key=1, style=dashed, color=darkseagreen4, label=record];
m0_258 -> m0_261  [key=1, style=dashed, color=darkseagreen4, label=record];
m0_258 -> m0_262  [key=1, style=dashed, color=darkseagreen4, label=record];
m0_266 -> m0_267  [key=0, style=solid];
m0_274 -> m0_275  [key=0, style=solid];
m0_274 -> m0_276  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_276 -> m0_42  [key=2, style=dotted];
m0_276 -> m0_277  [key=0, style=solid];
m0_276 -> m0_18  [key=2, style=dotted];
m0_279 -> m0_280  [key=0, style=solid];
m0_279 -> m0_281  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_286 -> m0_287  [key=0, style=solid];
m0_286 -> m0_288  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_288 -> m0_41  [key=2, style=dotted];
m0_288 -> m0_42  [key=2, style=dotted];
m0_288 -> m0_289  [key=0, style=solid];
m0_288 -> m0_290  [key=1, style=dashed, color=darkseagreen4, label=record];
m0_288 -> m0_291  [key=1, style=dashed, color=darkseagreen4, label=record];
m0_293 -> m0_294  [key=0, style=solid];
m0_300 -> m0_301  [key=0, style=solid];
m0_300 -> m0_302  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_302 -> m0_41  [key=2, style=dotted];
m0_302 -> m0_42  [key=2, style=dotted];
m0_302 -> m0_303  [key=0, style=solid];
m0_302 -> m0_304  [key=1, style=dashed, color=darkseagreen4, label=record];
m0_302 -> m0_305  [key=1, style=dashed, color=darkseagreen4, label=record];
m0_302 -> m0_306  [key=1, style=dashed, color=darkseagreen4, label=record];
m0_310 -> m0_311  [key=0, style=solid];
m0_317 -> m0_318  [key=0, style=solid];
m0_317 -> m0_319  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_319 -> m0_42  [key=2, style=dotted];
m0_319 -> m0_320  [key=0, style=solid];
m0_319 -> m0_18  [key=2, style=dotted];
m0_322 -> m0_323  [key=0, style=solid];
m0_322 -> m0_324  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_329 -> m0_330  [key=0, style=solid];
m0_329 -> m0_331  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_331 -> m0_41  [key=2, style=dotted];
m0_331 -> m0_42  [key=2, style=dotted];
m0_331 -> m0_332  [key=0, style=solid];
m0_331 -> m0_333  [key=1, style=dashed, color=darkseagreen4, label=record];
m0_331 -> m0_334  [key=1, style=dashed, color=darkseagreen4, label=record];
m0_336 -> m0_337  [key=0, style=solid];
m0_343 -> m0_344  [key=0, style=solid];
m0_343 -> m0_345  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_345 -> m0_42  [key=2, style=dotted];
m0_345 -> m0_346  [key=0, style=solid];
m0_345 -> m0_18  [key=2, style=dotted];
m0_348 -> m0_349  [key=0, style=solid];
m0_348 -> m0_350  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_355 -> m0_356  [key=0, style=solid];
m0_355 -> m0_357  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_357 -> m0_42  [key=2, style=dotted];
m0_357 -> m0_358  [key=0, style=solid];
m0_357 -> m0_18  [key=2, style=dotted];
m0_360 -> m0_361  [key=0, style=solid];
m0_360 -> m0_362  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_367 -> m0_368  [key=0, style=solid];
m0_367 -> m0_369  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_369 -> m0_41  [key=2, style=dotted];
m0_369 -> m0_42  [key=2, style=dotted];
m0_369 -> m0_370  [key=0, style=solid];
m0_369 -> m0_371  [key=1, style=dashed, color=darkseagreen4, label=record];
m0_369 -> m0_372  [key=1, style=dashed, color=darkseagreen4, label=record];
m0_374 -> m0_375  [key=0, style=solid];
m0_381 -> m0_382  [key=0, style=solid];
m0_381 -> m0_383  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_383 -> m0_41  [key=2, style=dotted];
m0_383 -> m0_42  [key=2, style=dotted];
m0_383 -> m0_384  [key=0, style=solid];
m0_386 -> m0_387  [key=0, style=solid];
m0_386 -> m0_388  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_393 -> m0_394  [key=0, style=solid];
m0_393 -> m0_395  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_395 -> m0_42  [key=2, style=dotted];
m0_395 -> m0_396  [key=0, style=solid];
m0_395 -> m0_18  [key=2, style=dotted];
m0_398 -> m0_399  [key=0, style=solid];
m0_398 -> m0_400  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_406 -> m0_407  [key=0, style=solid];
m0_406 -> m0_408  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_408 -> m0_42  [key=2, style=dotted];
m0_408 -> m0_409  [key=0, style=solid];
m0_408 -> m0_18  [key=2, style=dotted];
m0_411 -> m0_412  [key=0, style=solid];
m0_411 -> m0_413  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_418 -> m0_419  [key=0, style=solid];
m0_418 -> m0_420  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_420 -> m0_42  [key=2, style=dotted];
m0_420 -> m0_421  [key=0, style=solid];
m0_420 -> m0_18  [key=2, style=dotted];
m0_423 -> m0_424  [key=0, style=solid];
m0_423 -> m0_425  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_430 -> m0_431  [key=0, style=solid];
m0_430 -> m0_432  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_432 -> m0_41  [key=2, style=dotted];
m0_432 -> m0_42  [key=2, style=dotted];
m0_432 -> m0_433  [key=0, style=solid];
m0_432 -> m0_434  [key=1, style=dashed, color=darkseagreen4, label=record];
m0_436 -> m0_437  [key=0, style=solid];
m0_443 -> m0_444  [key=0, style=solid];
m0_443 -> m0_445  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_445 -> m0_42  [key=2, style=dotted];
m0_445 -> m0_446  [key=0, style=solid];
m0_445 -> m0_18  [key=2, style=dotted];
m0_448 -> m0_449  [key=0, style=solid];
m0_448 -> m0_450  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_455 -> m0_456  [key=0, style=solid];
m0_455 -> m0_457  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_457 -> m0_42  [key=2, style=dotted];
m0_457 -> m0_458  [key=0, style=solid];
m0_457 -> m0_18  [key=2, style=dotted];
m0_460 -> m0_461  [key=0, style=solid];
m0_460 -> m0_462  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_460 -> m0_463  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_469 -> m0_470  [key=0, style=solid];
m0_469 -> m0_471  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_471 -> m0_42  [key=2, style=dotted];
m0_471 -> m0_472  [key=0, style=solid];
m0_471 -> m0_18  [key=2, style=dotted];
m0_474 -> m0_475  [key=0, style=solid];
m0_474 -> m0_476  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_481 -> m0_482  [key=0, style=solid];
m0_481 -> m0_483  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_483 -> m0_42  [key=2, style=dotted];
m0_483 -> m0_484  [key=0, style=solid];
m0_483 -> m0_18  [key=2, style=dotted];
m0_486 -> m0_487  [key=0, style=solid];
m0_486 -> m0_488  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_493 -> m0_494  [key=0, style=solid];
m0_493 -> m0_495  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_495 -> m0_41  [key=2, style=dotted];
m0_495 -> m0_496  [key=0, style=solid];
m0_495 -> m0_500  [key=2, style=dotted];
m0_495 -> m0_497  [key=1, style=dashed, color=darkseagreen4, label=records];
m0_495 -> m0_498  [key=1, style=dashed, color=darkseagreen4, label=records];
m0_501 -> m0_502  [key=0, style=solid];
m0_501 -> m0_503  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_501 -> m0_504  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_501 -> m0_505  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_501 -> m0_506  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_512 -> m0_513  [key=0, style=solid];
m0_512 -> m0_514  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_514 -> m0_42  [key=2, style=dotted];
m0_514 -> m0_515  [key=0, style=solid];
m0_514 -> m0_18  [key=2, style=dotted];
m0_517 -> m0_518  [key=0, style=solid];
m0_517 -> m0_519  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_517 -> m0_520  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_517 -> m0_521  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_526 -> m0_527  [key=0, style=solid];
m0_526 -> m0_528  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_528 -> m0_42  [key=2, style=dotted];
m0_528 -> m0_529  [key=0, style=solid];
m0_528 -> m0_18  [key=2, style=dotted];
m0_531 -> m0_532  [key=0, style=solid];
m0_531 -> m0_533  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_538 -> m0_539  [key=0, style=solid];
m0_538 -> m0_540  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_540 -> m0_42  [key=2, style=dotted];
m0_540 -> m0_541  [key=0, style=solid];
m0_540 -> m0_18  [key=2, style=dotted];
m0_543 -> m0_544  [key=0, style=solid];
m0_543 -> m0_545  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_550 -> m0_551  [key=0, style=solid];
m0_550 -> m0_552  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_552 -> m0_42  [key=2, style=dotted];
m0_552 -> m0_553  [key=0, style=solid];
m0_552 -> m0_18  [key=2, style=dotted];
m0_555 -> m0_556  [key=0, style=solid];
m0_555 -> m0_557  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m0_562 -> m0_563  [key=0, style=solid];
m0_562 -> m0_567  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_564 -> m0_565  [key=0, style=solid];
m0_564 -> m0_19  [key=2, style=dotted];
m0_566 -> m0_567  [key=0, style=solid];
m0_568 -> m0_566  [key=0, style=bold, color=blue];
m0_569 -> m0_570  [key=0, style=solid];
m0_576 -> m0_577  [key=0, style=solid];
m0_576 -> m0_581  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_578 -> m0_579  [key=0, style=solid];
m0_578 -> m0_19  [key=2, style=dotted];
m0_580 -> m0_581  [key=0, style=solid];
m0_582 -> m0_580  [key=0, style=bold, color=blue];
m0_583 -> m0_584  [key=0, style=solid];
m0_589 -> m0_590  [key=0, style=solid];
m0_589 -> m0_591  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_591 -> m0_41  [key=2, style=dotted];
m0_591 -> m0_592  [key=0, style=solid];
m0_591 -> m0_595  [key=2, style=dotted];
m0_591 -> m0_599  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_591 -> m0_602  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_591 -> m0_593  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_596 -> m0_597  [key=0, style=solid];
m0_608 -> m0_609  [key=0, style=solid];
m0_608 -> m0_610  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_610 -> m0_41  [key=2, style=dotted];
m0_610 -> m0_611  [key=0, style=solid];
m0_610 -> m0_595  [key=2, style=dotted];
m0_610 -> m0_616  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_610 -> m0_619  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_613 -> m0_614  [key=0, style=solid];
m0_625 -> m0_626  [key=0, style=solid];
m0_625 -> m0_629  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_627 -> m0_625  [key=0, style=bold, color=blue];
m0_628 -> m0_629  [key=0, style=solid];
m0_630 -> m0_628  [key=0, style=bold, color=blue];
m0_631 -> m0_632  [key=0, style=solid];
m0_638 -> m0_639  [key=0, style=solid];
m0_638 -> m0_640  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_638 -> m0_641  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_644 -> m0_645  [key=0, style=solid];
m0_641 -> m0_42  [key=2, style=dotted];
m0_641 -> m0_18  [key=2, style=dotted];
m0_641 -> m0_642  [key=0, style=solid];
m0_647 -> m0_648  [key=0, style=solid];
m0_653 -> m0_654  [key=0, style=solid];
m0_653 -> m0_658  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_655 -> m0_656  [key=0, style=solid];
m0_655 -> m0_19  [key=2, style=dotted];
m0_657 -> m0_658  [key=0, style=solid];
m0_659 -> m0_657  [key=0, style=bold, color=blue];
m0_660 -> m0_661  [key=0, style=solid];
m0_668 -> m0_669  [key=0, style=solid];
m0_668 -> m0_673  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_670 -> m0_671  [key=0, style=solid];
m0_670 -> m0_19  [key=2, style=dotted];
m0_672 -> m0_673  [key=0, style=solid];
m0_674 -> m0_672  [key=0, style=bold, color=blue];
m0_675 -> m0_676  [key=0, style=solid];
m0_681 -> m0_683  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_681 -> m0_682  [key=0, style=solid];
m0_681 -> m0_684  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_682 -> m0_683  [key=0, style=solid];
m0_682 -> d99  [key=2, style=dotted];
m0_682 -> m0_688  [key=1, style=dashed, color=darkseagreen4, label=items];
m0_682 -> m0_685  [key=1, style=dashed, color=darkseagreen4, label=items];
m0_684 -> m0_18  [key=2, style=dotted];
m0_684 -> m0_685  [key=0, style=solid];
m0_687 -> m0_688  [key=0, style=solid];
m0_693 -> m0_694  [key=0, style=solid];
m0_693 -> m0_697  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_695 -> m0_693  [key=0, style=bold, color=blue];
m0_696 -> m0_697  [key=0, style=solid];
m0_698 -> m0_696  [key=0, style=bold, color=blue];
m0_699 -> m0_700  [key=0, style=solid];
m0_707 -> m0_709  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_707 -> m0_708  [key=0, style=solid];
m0_707 -> m0_710  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_708 -> m0_709  [key=0, style=solid];
m0_708 -> m0_713  [key=2, style=dotted];
m0_710 -> m0_41  [key=2, style=dotted];
m0_710 -> m0_42  [key=2, style=dotted];
m0_710 -> m0_711  [key=0, style=solid];
m0_714 -> m0_715  [key=0, style=solid];
m0_720 -> m0_721  [key=0, style=solid];
m0_720 -> m0_725  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_722 -> m0_723  [key=0, style=solid];
m0_722 -> m0_19  [key=2, style=dotted];
m0_724 -> m0_725  [key=0, style=solid];
m0_726 -> m0_724  [key=0, style=bold, color=blue];
m0_727 -> m0_728  [key=0, style=solid];
m0_736 -> m0_738  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_736 -> m0_737  [key=0, style=solid];
m0_736 -> m0_739  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_737 -> m0_738  [key=0, style=solid];
m0_737 -> m0_713  [key=2, style=dotted];
m0_739 -> m0_41  [key=2, style=dotted];
m0_739 -> m0_740  [key=0, style=solid];
m0_739 -> m0_741  [key=1, style=dashed, color=darkseagreen4, label=records];
m0_739 -> m0_595  [key=2, style=dotted];
m0_739 -> m0_748  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_739 -> m0_751  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_739 -> m0_742  [key=1, style=dashed, color=darkseagreen4, label=records];
m0_745 -> m0_746  [key=0, style=solid];
m0_757 -> m0_758  [key=0, style=solid];
m0_757 -> m0_762  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_759 -> m0_760  [key=0, style=solid];
m0_759 -> m0_19  [key=2, style=dotted];
m0_761 -> m0_762  [key=0, style=solid];
m0_763 -> m0_761  [key=0, style=bold, color=blue];
m0_764 -> m0_765  [key=0, style=solid];
m0_773 -> m0_775  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_773 -> m0_774  [key=0, style=solid];
m0_773 -> m0_776  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_774 -> m0_775  [key=0, style=solid];
m0_774 -> m0_713  [key=2, style=dotted];
m0_776 -> m0_41  [key=2, style=dotted];
m0_776 -> m0_777  [key=0, style=solid];
m0_776 -> m0_778  [key=1, style=dashed, color=darkseagreen4, label=records];
m0_776 -> m0_595  [key=2, style=dotted];
m0_776 -> m0_784  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_776 -> m0_787  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_776 -> m0_779  [key=1, style=dashed, color=darkseagreen4, label=records];
m0_781 -> m0_782  [key=0, style=solid];
m0_793 -> m0_794  [key=0, style=solid];
m0_793 -> m0_798  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_795 -> m0_796  [key=0, style=solid];
m0_795 -> m0_19  [key=2, style=dotted];
m0_797 -> m0_798  [key=0, style=solid];
m0_799 -> m0_797  [key=0, style=bold, color=blue];
m0_800 -> m0_801  [key=0, style=solid];
m0_808 -> m0_810  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_808 -> m0_809  [key=0, style=solid];
m0_808 -> m0_811  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_809 -> m0_810  [key=0, style=solid];
m0_809 -> m0_713  [key=2, style=dotted];
m0_811 -> m0_41  [key=2, style=dotted];
m0_811 -> m0_812  [key=0, style=solid];
m0_811 -> m0_813  [key=1, style=dashed, color=darkseagreen4, label=records];
m0_811 -> m0_595  [key=2, style=dotted];
m0_811 -> m0_819  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_811 -> m0_822  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_811 -> m0_814  [key=1, style=dashed, color=darkseagreen4, label=records];
m0_816 -> m0_817  [key=0, style=solid];
m0_828 -> m0_829  [key=0, style=solid];
m0_828 -> m0_833  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_830 -> m0_831  [key=0, style=solid];
m0_830 -> m0_19  [key=2, style=dotted];
m0_832 -> m0_833  [key=0, style=solid];
m0_834 -> m0_832  [key=0, style=bold, color=blue];
m0_835 -> m0_836  [key=0, style=solid];
m0_843 -> m0_845  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_843 -> m0_844  [key=0, style=solid];
m0_843 -> m0_846  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_844 -> m0_845  [key=0, style=solid];
m0_844 -> m0_850  [key=2, style=dotted];
m0_844 -> m0_713  [key=2, style=dotted];
m0_846 -> m0_41  [key=2, style=dotted];
m0_846 -> m0_847  [key=0, style=solid];
m0_846 -> m0_595  [key=2, style=dotted];
m0_846 -> m0_854  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_846 -> m0_857  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_846 -> m0_848  [key=1, style=dashed, color=darkseagreen4, label=records];
m0_851 -> m0_852  [key=0, style=solid];
m0_863 -> m0_864  [key=0, style=solid];
m0_863 -> m0_868  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_865 -> m0_866  [key=0, style=solid];
m0_865 -> m0_19  [key=2, style=dotted];
m0_867 -> m0_868  [key=0, style=solid];
m0_869 -> m0_867  [key=0, style=bold, color=blue];
m0_870 -> m0_871  [key=0, style=solid];
m0_878 -> m0_880  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_878 -> m0_879  [key=0, style=solid];
m0_878 -> m0_881  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_879 -> m0_880  [key=0, style=solid];
m0_879 -> m0_850  [key=2, style=dotted];
m0_879 -> m0_713  [key=2, style=dotted];
m0_881 -> m0_41  [key=2, style=dotted];
m0_881 -> m0_882  [key=0, style=solid];
m0_881 -> m0_595  [key=2, style=dotted];
m0_881 -> m0_888  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_881 -> m0_891  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_881 -> m0_883  [key=1, style=dashed, color=darkseagreen4, label=records];
m0_885 -> m0_886  [key=0, style=solid];
m0_897 -> m0_898  [key=0, style=solid];
m0_897 -> m0_902  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_899 -> m0_900  [key=0, style=solid];
m0_899 -> m0_19  [key=2, style=dotted];
m0_901 -> m0_902  [key=0, style=solid];
m0_903 -> m0_901  [key=0, style=bold, color=blue];
m0_904 -> m0_905  [key=0, style=solid];
m0_912 -> m0_914  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_912 -> m0_913  [key=0, style=solid];
m0_912 -> m0_915  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_913 -> m0_914  [key=0, style=solid];
m0_913 -> m0_850  [key=2, style=dotted];
m0_913 -> m0_713  [key=2, style=dotted];
m0_915 -> m0_41  [key=2, style=dotted];
m0_915 -> m0_916  [key=0, style=solid];
m0_915 -> m0_595  [key=2, style=dotted];
m0_915 -> m0_922  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_915 -> m0_925  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_915 -> m0_917  [key=1, style=dashed, color=darkseagreen4, label=records];
m0_919 -> m0_920  [key=0, style=solid];
m0_943 -> m0_944  [key=0, style=solid];
m0_90 -> m0_41  [key=2, style=dotted];
m0_90 -> m0_42  [key=2, style=dotted];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_92  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m0_90 -> m0_93  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m0_90 -> m0_94  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m0_90 -> m0_95  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m0_127 -> m0_41  [key=2, style=dotted];
m0_127 -> m0_42  [key=2, style=dotted];
m0_127 -> m0_128  [key=0, style=solid];
m0_127 -> m0_129  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m0_127 -> m0_130  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m0_158 -> m0_41  [key=2, style=dotted];
m0_158 -> m0_42  [key=2, style=dotted];
m0_158 -> m0_159  [key=0, style=solid];
m0_158 -> m0_160  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m0_158 -> m0_161  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m0_158 -> m0_162  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m0_158 -> m0_163  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m0_192 -> m0_41  [key=2, style=dotted];
m0_192 -> m0_42  [key=2, style=dotted];
m0_192 -> m0_193  [key=0, style=solid];
m0_192 -> m0_194  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m0_192 -> m0_195  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m0_192 -> m0_196  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m0_192 -> m0_197  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m0_91 -> m0_43  [key=2, style=dotted];
m0_91 -> m0_92  [key=0, style=solid];
m0_91 -> m0_19  [key=2, style=dotted];
m0_159 -> m0_43  [key=2, style=dotted];
m0_159 -> m0_160  [key=0, style=solid];
m0_159 -> m0_19  [key=2, style=dotted];
m0_193 -> m0_43  [key=2, style=dotted];
m0_193 -> m0_194  [key=0, style=solid];
m0_193 -> m0_19  [key=2, style=dotted];
m0_262 -> m0_263  [key=0, style=solid];
m0_262 -> m0_264  [key=1, style=dashed, color=darkseagreen4, label=expireAt];
m0_265 -> m0_256  [key=0, style=bold, color=blue];
m0_306 -> m0_307  [key=0, style=solid];
m0_306 -> m0_308  [key=1, style=dashed, color=darkseagreen4, label=expireAt];
m0_309 -> m0_300  [key=0, style=bold, color=blue];
m0_742 -> m0_48  [key=2, style=dotted];
m0_742 -> m0_743  [key=0, style=solid];
m0_779 -> m0_48  [key=2, style=dotted];
m0_779 -> m0_780  [key=0, style=solid];
m0_814 -> m0_48  [key=2, style=dotted];
m0_814 -> m0_815  [key=0, style=solid];
m0_10 -> m0_11  [key=0, style=solid];
m0_66 -> m0_58  [key=0, style=bold, color=blue];
m0_69 -> m0_70  [key=0, style=solid];
m0_69 -> m0_71  [key=2, style=dotted];
m0_70 -> m0_68  [key=0, style=bold, color=blue];
m0_96 -> m0_76  [key=0, style=bold, color=blue];
m0_110 -> m0_111  [key=0, style=solid];
m0_110 -> m0_112  [key=2, style=dotted];
m0_80 -> m0_6  [key=2, style=dotted];
m0_80 -> m0_8  [key=2, style=dotted];
m0_80 -> m0_81  [key=0, style=solid];
m0_80 -> m0_99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_81 -> m0_82  [key=0, style=solid];
m0_81 -> m0_6  [key=2, style=dotted];
m0_81 -> m0_8  [key=2, style=dotted];
m0_81 -> m0_102  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_105 -> m0_106  [key=0, style=solid];
m0_111 -> m0_109  [key=0, style=bold, color=blue];
m0_131 -> m0_117  [key=0, style=bold, color=blue];
m0_142 -> m0_143  [key=0, style=solid];
m0_142 -> m0_112  [key=2, style=dotted];
m0_120 -> m0_6  [key=2, style=dotted];
m0_120 -> m0_8  [key=2, style=dotted];
m0_120 -> m0_121  [key=0, style=solid];
m0_120 -> m0_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_6  [key=2, style=dotted];
m0_121 -> m0_8  [key=2, style=dotted];
m0_121 -> m0_135  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_138 -> m0_139  [key=0, style=solid];
m0_143 -> m0_141  [key=0, style=bold, color=blue];
m0_164 -> m0_148  [key=0, style=bold, color=blue];
m0_175 -> m0_176  [key=0, style=solid];
m0_175 -> m0_177  [key=2, style=dotted];
m0_151 -> m0_6  [key=2, style=dotted];
m0_151 -> m0_8  [key=2, style=dotted];
m0_151 -> m0_152  [key=0, style=solid];
m0_151 -> m0_165  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_152 -> m0_153  [key=0, style=solid];
m0_152 -> m0_6  [key=2, style=dotted];
m0_152 -> m0_8  [key=2, style=dotted];
m0_152 -> m0_168  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_171 -> m0_172  [key=0, style=solid];
m0_176 -> m0_174  [key=0, style=bold, color=blue];
m0_198 -> m0_182  [key=0, style=bold, color=blue];
m0_209 -> m0_210  [key=0, style=solid];
m0_209 -> m0_177  [key=2, style=dotted];
m0_185 -> m0_6  [key=2, style=dotted];
m0_185 -> m0_8  [key=2, style=dotted];
m0_185 -> m0_186  [key=0, style=solid];
m0_185 -> m0_199  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_186 -> m0_187  [key=0, style=solid];
m0_186 -> m0_6  [key=2, style=dotted];
m0_186 -> m0_8  [key=2, style=dotted];
m0_186 -> m0_202  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_205 -> m0_206  [key=0, style=solid];
m0_210 -> m0_208  [key=0, style=bold, color=blue];
m0_220 -> m0_221  [key=0, style=solid];
m0_226 -> m0_223  [key=0, style=bold, color=blue];
m0_232 -> m0_233  [key=0, style=solid];
m0_230 -> m0_228  [key=0, style=bold, color=blue];
m0_229 -> m0_230  [key=0, style=solid];
m0_229 -> m0_231  [key=2, style=dotted];
m0_248 -> m0_242  [key=0, style=bold, color=blue];
m0_245 -> m0_19  [key=2, style=dotted];
m0_245 -> m0_246  [key=0, style=solid];
m0_246 -> m0_19  [key=2, style=dotted];
m0_246 -> m0_247  [key=0, style=solid];
m0_247 -> m0_19  [key=2, style=dotted];
m0_247 -> m0_248  [key=0, style=solid];
m0_251 -> m0_249  [key=0, style=bold, color=blue];
m0_250 -> m0_251  [key=0, style=solid];
m0_250 -> m0_252  [key=2, style=dotted];
m0_259 -> m0_19  [key=2, style=dotted];
m0_259 -> m0_260  [key=0, style=solid];
m0_260 -> m0_19  [key=2, style=dotted];
m0_260 -> m0_261  [key=0, style=solid];
m0_261 -> m0_262  [key=0, style=solid];
m0_261 -> m0_67  [key=2, style=dotted];
m0_268 -> m0_266  [key=0, style=bold, color=blue];
m0_267 -> m0_268  [key=0, style=solid];
m0_267 -> m0_269  [key=2, style=dotted];
m0_267 -> m0_270  [key=2, style=dotted];
m0_278 -> m0_274  [key=0, style=bold, color=blue];
m0_277 -> m0_19  [key=2, style=dotted];
m0_277 -> m0_278  [key=0, style=solid];
m0_282 -> m0_279  [key=0, style=bold, color=blue];
m0_280 -> m0_281  [key=0, style=solid];
m0_280 -> m0_252  [key=2, style=dotted];
m0_281 -> m0_282  [key=0, style=solid];
m0_281 -> m0_252  [key=2, style=dotted];
m0_292 -> m0_286  [key=0, style=bold, color=blue];
m0_289 -> m0_19  [key=2, style=dotted];
m0_289 -> m0_290  [key=0, style=solid];
m0_290 -> m0_19  [key=2, style=dotted];
m0_290 -> m0_291  [key=0, style=solid];
m0_291 -> m0_19  [key=2, style=dotted];
m0_291 -> m0_292  [key=0, style=solid];
m0_295 -> m0_293  [key=0, style=bold, color=blue];
m0_294 -> m0_295  [key=0, style=solid];
m0_294 -> m0_296  [key=2, style=dotted];
m0_303 -> m0_19  [key=2, style=dotted];
m0_303 -> m0_304  [key=0, style=solid];
m0_304 -> m0_19  [key=2, style=dotted];
m0_304 -> m0_305  [key=0, style=solid];
m0_305 -> m0_306  [key=0, style=solid];
m0_305 -> m0_67  [key=2, style=dotted];
m0_312 -> m0_310  [key=0, style=bold, color=blue];
m0_311 -> m0_312  [key=0, style=solid];
m0_311 -> m0_269  [key=2, style=dotted];
m0_311 -> m0_313  [key=2, style=dotted];
m0_321 -> m0_317  [key=0, style=bold, color=blue];
m0_320 -> m0_19  [key=2, style=dotted];
m0_320 -> m0_321  [key=0, style=solid];
m0_325 -> m0_322  [key=0, style=bold, color=blue];
m0_323 -> m0_324  [key=0, style=solid];
m0_323 -> m0_296  [key=2, style=dotted];
m0_324 -> m0_325  [key=0, style=solid];
m0_324 -> m0_296  [key=2, style=dotted];
m0_335 -> m0_329  [key=0, style=bold, color=blue];
m0_332 -> m0_19  [key=2, style=dotted];
m0_332 -> m0_333  [key=0, style=solid];
m0_333 -> m0_19  [key=2, style=dotted];
m0_333 -> m0_334  [key=0, style=solid];
m0_334 -> m0_19  [key=2, style=dotted];
m0_334 -> m0_335  [key=0, style=solid];
m0_338 -> m0_336  [key=0, style=bold, color=blue];
m0_337 -> m0_338  [key=0, style=solid];
m0_337 -> m0_339  [key=2, style=dotted];
m0_347 -> m0_343  [key=0, style=bold, color=blue];
m0_346 -> m0_19  [key=2, style=dotted];
m0_346 -> m0_347  [key=0, style=solid];
m0_351 -> m0_348  [key=0, style=bold, color=blue];
m0_349 -> m0_350  [key=0, style=solid];
m0_349 -> m0_339  [key=2, style=dotted];
m0_350 -> m0_351  [key=0, style=solid];
m0_350 -> m0_339  [key=2, style=dotted];
m0_359 -> m0_355  [key=0, style=bold, color=blue];
m0_358 -> m0_19  [key=2, style=dotted];
m0_358 -> m0_359  [key=0, style=solid];
m0_363 -> m0_360  [key=0, style=bold, color=blue];
m0_361 -> m0_362  [key=0, style=solid];
m0_361 -> m0_339  [key=2, style=dotted];
m0_362 -> m0_363  [key=0, style=solid];
m0_362 -> m0_339  [key=2, style=dotted];
m0_373 -> m0_367  [key=0, style=bold, color=blue];
m0_370 -> m0_19  [key=2, style=dotted];
m0_370 -> m0_371  [key=0, style=solid];
m0_371 -> m0_19  [key=2, style=dotted];
m0_371 -> m0_372  [key=0, style=solid];
m0_372 -> m0_19  [key=2, style=dotted];
m0_372 -> m0_373  [key=0, style=solid];
m0_376 -> m0_374  [key=0, style=bold, color=blue];
m0_375 -> m0_376  [key=0, style=solid];
m0_375 -> m0_377  [key=2, style=dotted];
m0_385 -> m0_381  [key=0, style=bold, color=blue];
m0_384 -> m0_19  [key=2, style=dotted];
m0_384 -> m0_385  [key=0, style=solid];
m0_389 -> m0_386  [key=0, style=bold, color=blue];
m0_387 -> m0_388  [key=0, style=solid];
m0_387 -> m0_339  [key=2, style=dotted];
m0_388 -> m0_389  [key=0, style=solid];
m0_388 -> m0_377  [key=2, style=dotted];
m0_397 -> m0_393  [key=0, style=bold, color=blue];
m0_396 -> m0_19  [key=2, style=dotted];
m0_396 -> m0_397  [key=0, style=solid];
m0_401 -> m0_398  [key=0, style=bold, color=blue];
m0_399 -> m0_400  [key=0, style=solid];
m0_399 -> m0_339  [key=2, style=dotted];
m0_400 -> m0_401  [key=0, style=solid];
m0_400 -> m0_402  [key=2, style=dotted];
m0_410 -> m0_406  [key=0, style=bold, color=blue];
m0_409 -> m0_19  [key=2, style=dotted];
m0_409 -> m0_410  [key=0, style=solid];
m0_414 -> m0_411  [key=0, style=bold, color=blue];
m0_412 -> m0_413  [key=0, style=solid];
m0_412 -> m0_339  [key=2, style=dotted];
m0_413 -> m0_414  [key=0, style=solid];
m0_413 -> m0_402  [key=2, style=dotted];
m0_422 -> m0_418  [key=0, style=bold, color=blue];
m0_421 -> m0_19  [key=2, style=dotted];
m0_421 -> m0_422  [key=0, style=solid];
m0_426 -> m0_423  [key=0, style=bold, color=blue];
m0_424 -> m0_425  [key=0, style=solid];
m0_424 -> m0_339  [key=2, style=dotted];
m0_425 -> m0_426  [key=0, style=solid];
m0_425 -> m0_402  [key=2, style=dotted];
m0_435 -> m0_430  [key=0, style=bold, color=blue];
m0_433 -> m0_19  [key=2, style=dotted];
m0_433 -> m0_434  [key=0, style=solid];
m0_434 -> m0_19  [key=2, style=dotted];
m0_434 -> m0_435  [key=0, style=solid];
m0_438 -> m0_436  [key=0, style=bold, color=blue];
m0_437 -> m0_438  [key=0, style=solid];
m0_437 -> m0_439  [key=2, style=dotted];
m0_447 -> m0_443  [key=0, style=bold, color=blue];
m0_446 -> m0_19  [key=2, style=dotted];
m0_446 -> m0_447  [key=0, style=solid];
m0_451 -> m0_448  [key=0, style=bold, color=blue];
m0_449 -> m0_450  [key=0, style=solid];
m0_449 -> m0_439  [key=2, style=dotted];
m0_450 -> m0_451  [key=0, style=solid];
m0_450 -> m0_439  [key=2, style=dotted];
m0_459 -> m0_455  [key=0, style=bold, color=blue];
m0_458 -> m0_19  [key=2, style=dotted];
m0_458 -> m0_459  [key=0, style=solid];
m0_464 -> m0_460  [key=0, style=bold, color=blue];
m0_461 -> m0_462  [key=0, style=solid];
m0_461 -> m0_439  [key=2, style=dotted];
m0_462 -> m0_463  [key=0, style=solid];
m0_462 -> m0_439  [key=2, style=dotted];
m0_463 -> m0_464  [key=0, style=solid];
m0_463 -> m0_465  [key=2, style=dotted];
m0_473 -> m0_469  [key=0, style=bold, color=blue];
m0_472 -> m0_19  [key=2, style=dotted];
m0_472 -> m0_473  [key=0, style=solid];
m0_477 -> m0_474  [key=0, style=bold, color=blue];
m0_475 -> m0_476  [key=0, style=solid];
m0_475 -> m0_439  [key=2, style=dotted];
m0_476 -> m0_477  [key=0, style=solid];
m0_476 -> m0_465  [key=2, style=dotted];
m0_485 -> m0_481  [key=0, style=bold, color=blue];
m0_484 -> m0_19  [key=2, style=dotted];
m0_484 -> m0_485  [key=0, style=solid];
m0_489 -> m0_486  [key=0, style=bold, color=blue];
m0_487 -> m0_488  [key=0, style=solid];
m0_487 -> m0_439  [key=2, style=dotted];
m0_488 -> m0_489  [key=0, style=solid];
m0_488 -> m0_465  [key=2, style=dotted];
m0_499 -> m0_493  [key=0, style=bold, color=blue];
m0_496 -> m0_19  [key=2, style=dotted];
m0_496 -> m0_497  [key=0, style=solid];
m0_497 -> m0_19  [key=2, style=dotted];
m0_497 -> m0_498  [key=0, style=solid];
m0_498 -> m0_19  [key=2, style=dotted];
m0_498 -> m0_499  [key=0, style=solid];
m0_507 -> m0_501  [key=0, style=bold, color=blue];
m0_502 -> m0_503  [key=0, style=solid];
m0_502 -> m0_439  [key=2, style=dotted];
m0_503 -> m0_504  [key=0, style=solid];
m0_503 -> m0_439  [key=2, style=dotted];
m0_504 -> m0_505  [key=0, style=solid];
m0_504 -> m0_439  [key=2, style=dotted];
m0_505 -> m0_506  [key=0, style=solid];
m0_505 -> m0_439  [key=2, style=dotted];
m0_506 -> m0_507  [key=0, style=solid];
m0_506 -> m0_508  [key=2, style=dotted];
m0_516 -> m0_512  [key=0, style=bold, color=blue];
m0_515 -> m0_19  [key=2, style=dotted];
m0_515 -> m0_516  [key=0, style=solid];
m0_522 -> m0_517  [key=0, style=bold, color=blue];
m0_518 -> m0_519  [key=0, style=solid];
m0_518 -> m0_439  [key=2, style=dotted];
m0_519 -> m0_520  [key=0, style=solid];
m0_519 -> m0_439  [key=2, style=dotted];
m0_520 -> m0_521  [key=0, style=solid];
m0_520 -> m0_439  [key=2, style=dotted];
m0_521 -> m0_522  [key=0, style=solid];
m0_521 -> m0_508  [key=2, style=dotted];
m0_530 -> m0_526  [key=0, style=bold, color=blue];
m0_529 -> m0_19  [key=2, style=dotted];
m0_529 -> m0_530  [key=0, style=solid];
m0_534 -> m0_531  [key=0, style=bold, color=blue];
m0_532 -> m0_533  [key=0, style=solid];
m0_532 -> m0_439  [key=2, style=dotted];
m0_533 -> m0_534  [key=0, style=solid];
m0_533 -> m0_508  [key=2, style=dotted];
m0_542 -> m0_538  [key=0, style=bold, color=blue];
m0_541 -> m0_19  [key=2, style=dotted];
m0_541 -> m0_542  [key=0, style=solid];
m0_546 -> m0_543  [key=0, style=bold, color=blue];
m0_544 -> m0_545  [key=0, style=solid];
m0_544 -> m0_439  [key=2, style=dotted];
m0_545 -> m0_546  [key=0, style=solid];
m0_545 -> m0_508  [key=2, style=dotted];
m0_554 -> m0_550  [key=0, style=bold, color=blue];
m0_553 -> m0_19  [key=2, style=dotted];
m0_553 -> m0_554  [key=0, style=solid];
m0_558 -> m0_555  [key=0, style=bold, color=blue];
m0_556 -> m0_557  [key=0, style=solid];
m0_556 -> m0_439  [key=2, style=dotted];
m0_557 -> m0_558  [key=0, style=solid];
m0_557 -> m0_508  [key=2, style=dotted];
m0_565 -> m0_562  [key=0, style=bold, color=blue];
m0_233 -> m0_18  [key=2, style=dotted];
m0_233 -> m0_234  [key=0, style=solid];
m0_233 -> m0_235  [key=2, style=dotted];
m0_571 -> m0_569  [key=0, style=bold, color=blue];
m0_570 -> m0_98  [key=2, style=dotted];
m0_570 -> m0_571  [key=0, style=solid];
m0_570 -> m0_572  [key=2, style=dotted];
m0_579 -> m0_576  [key=0, style=bold, color=blue];
m0_585 -> m0_583  [key=0, style=bold, color=blue];
m0_584 -> m0_585  [key=0, style=solid];
m0_584 -> m0_572  [key=2, style=dotted];
m0_594 -> m0_589  [key=0, style=bold, color=blue];
m0_592 -> m0_19  [key=2, style=dotted];
m0_592 -> m0_593  [key=0, style=solid];
m0_599 -> m0_600  [key=0, style=solid];
m0_602 -> m0_603  [key=0, style=solid];
m0_593 -> m0_19  [key=2, style=dotted];
m0_593 -> m0_594  [key=0, style=solid];
m0_598 -> m0_596  [key=0, style=bold, color=blue];
m0_597 -> m0_98  [key=2, style=dotted];
m0_597 -> m0_598  [key=0, style=solid];
m0_597 -> m0_572  [key=2, style=dotted];
m0_612 -> m0_608  [key=0, style=bold, color=blue];
m0_611 -> m0_19  [key=2, style=dotted];
m0_611 -> m0_612  [key=0, style=solid];
m0_616 -> m0_617  [key=0, style=solid];
m0_619 -> m0_620  [key=0, style=solid];
m0_615 -> m0_613  [key=0, style=bold, color=blue];
m0_614 -> m0_98  [key=2, style=dotted];
m0_614 -> m0_615  [key=0, style=solid];
m0_614 -> m0_572  [key=2, style=dotted];
m0_633 -> m0_631  [key=0, style=bold, color=blue];
m0_632 -> m0_633  [key=0, style=solid];
m0_632 -> m0_634  [key=2, style=dotted];
m0_643 -> m0_638  [key=0, style=bold, color=blue];
m0_646 -> m0_644  [key=0, style=bold, color=blue];
m0_645 -> m0_98  [key=2, style=dotted];
m0_645 -> m0_646  [key=0, style=solid];
m0_645 -> m0_572  [key=2, style=dotted];
m0_642 -> m0_19  [key=2, style=dotted];
m0_642 -> m0_643  [key=0, style=solid];
m0_649 -> m0_647  [key=0, style=bold, color=blue];
m0_648 -> m0_649  [key=0, style=solid];
m0_648 -> m0_634  [key=2, style=dotted];
m0_656 -> m0_653  [key=0, style=bold, color=blue];
m0_662 -> m0_660  [key=0, style=bold, color=blue];
m0_661 -> m0_662  [key=0, style=solid];
m0_661 -> d99  [key=2, style=dotted];
m0_661 -> m0_664  [key=2, style=dotted];
m0_671 -> m0_668  [key=0, style=bold, color=blue];
m0_677 -> m0_675  [key=0, style=bold, color=blue];
m0_676 -> m0_677  [key=0, style=solid];
m0_676 -> m0_664  [key=2, style=dotted];
m0_686 -> m0_681  [key=0, style=bold, color=blue];
m0_688 -> m0_689  [key=0, style=solid];
m0_688 -> m0_664  [key=2, style=dotted];
m0_685 -> m0_19  [key=2, style=dotted];
m0_685 -> m0_686  [key=0, style=solid];
m0_689 -> m0_687  [key=0, style=bold, color=blue];
m0_701 -> m0_699  [key=0, style=bold, color=blue];
m0_700 -> m0_701  [key=0, style=solid];
m0_700 -> m0_702  [key=2, style=dotted];
m0_712 -> m0_707  [key=0, style=bold, color=blue];
m0_711 -> m0_19  [key=2, style=dotted];
m0_711 -> m0_712  [key=0, style=solid];
m0_716 -> m0_714  [key=0, style=bold, color=blue];
m0_715 -> m0_716  [key=0, style=solid];
m0_715 -> m0_702  [key=2, style=dotted];
m0_723 -> m0_720  [key=0, style=bold, color=blue];
m0_729 -> m0_727  [key=0, style=bold, color=blue];
m0_728 -> m0_730  [key=2, style=dotted];
m0_728 -> m0_729  [key=0, style=solid];
m0_728 -> m0_731  [key=2, style=dotted];
m0_743 -> m0_736  [key=0, style=bold, color=blue];
m0_748 -> m0_749  [key=0, style=solid];
m0_751 -> m0_752  [key=0, style=solid];
m0_747 -> m0_745  [key=0, style=bold, color=blue];
m0_746 -> m0_730  [key=2, style=dotted];
m0_746 -> m0_747  [key=0, style=solid];
m0_746 -> m0_731  [key=2, style=dotted];
m0_760 -> m0_757  [key=0, style=bold, color=blue];
m0_766 -> m0_764  [key=0, style=bold, color=blue];
m0_765 -> m0_766  [key=0, style=solid];
m0_765 -> m0_767  [key=2, style=dotted];
m0_765 -> m0_768  [key=2, style=dotted];
m0_780 -> m0_773  [key=0, style=bold, color=blue];
m0_784 -> m0_785  [key=0, style=solid];
m0_787 -> m0_788  [key=0, style=solid];
m0_783 -> m0_781  [key=0, style=bold, color=blue];
m0_782 -> m0_730  [key=2, style=dotted];
m0_782 -> m0_783  [key=0, style=solid];
m0_782 -> m0_768  [key=2, style=dotted];
m0_796 -> m0_793  [key=0, style=bold, color=blue];
m0_802 -> m0_800  [key=0, style=bold, color=blue];
m0_801 -> m0_802  [key=0, style=solid];
m0_801 -> m0_767  [key=2, style=dotted];
m0_801 -> m0_803  [key=2, style=dotted];
m0_815 -> m0_808  [key=0, style=bold, color=blue];
m0_819 -> m0_820  [key=0, style=solid];
m0_822 -> m0_823  [key=0, style=solid];
m0_818 -> m0_816  [key=0, style=bold, color=blue];
m0_817 -> m0_730  [key=2, style=dotted];
m0_817 -> m0_818  [key=0, style=solid];
m0_817 -> m0_803  [key=2, style=dotted];
m0_831 -> m0_828  [key=0, style=bold, color=blue];
m0_837 -> m0_835  [key=0, style=bold, color=blue];
m0_836 -> m0_837  [key=0, style=solid];
m0_836 -> m0_838  [key=2, style=dotted];
m0_849 -> m0_843  [key=0, style=bold, color=blue];
m0_847 -> m0_48  [key=2, style=dotted];
m0_847 -> m0_848  [key=0, style=solid];
m0_854 -> m0_855  [key=0, style=solid];
m0_857 -> m0_858  [key=0, style=solid];
m0_848 -> m0_67  [key=2, style=dotted];
m0_848 -> m0_849  [key=0, style=solid];
m0_853 -> m0_851  [key=0, style=bold, color=blue];
m0_852 -> m0_853  [key=0, style=solid];
m0_852 -> m0_838  [key=2, style=dotted];
m0_866 -> m0_863  [key=0, style=bold, color=blue];
m0_872 -> m0_870  [key=0, style=bold, color=blue];
m0_871 -> m0_872  [key=0, style=solid];
m0_871 -> m0_873  [key=2, style=dotted];
m0_884 -> m0_878  [key=0, style=bold, color=blue];
m0_882 -> m0_48  [key=2, style=dotted];
m0_882 -> m0_883  [key=0, style=solid];
m0_888 -> m0_889  [key=0, style=solid];
m0_891 -> m0_892  [key=0, style=solid];
m0_883 -> m0_67  [key=2, style=dotted];
m0_883 -> m0_884  [key=0, style=solid];
m0_887 -> m0_885  [key=0, style=bold, color=blue];
m0_886 -> m0_887  [key=0, style=solid];
m0_886 -> m0_873  [key=2, style=dotted];
m0_900 -> m0_897  [key=0, style=bold, color=blue];
m0_906 -> m0_904  [key=0, style=bold, color=blue];
m0_905 -> m0_906  [key=0, style=solid];
m0_905 -> m0_907  [key=2, style=dotted];
m0_918 -> m0_912  [key=0, style=bold, color=blue];
m0_916 -> m0_48  [key=2, style=dotted];
m0_916 -> m0_917  [key=0, style=solid];
m0_922 -> m0_923  [key=0, style=solid];
m0_925 -> m0_926  [key=0, style=solid];
m0_917 -> m0_67  [key=2, style=dotted];
m0_917 -> m0_918  [key=0, style=solid];
m0_921 -> m0_919  [key=0, style=bold, color=blue];
m0_920 -> m0_921  [key=0, style=solid];
m0_920 -> m0_907  [key=2, style=dotted];
m0_945 -> m0_943  [key=0, style=bold, color=blue];
m0_944 -> m0_945  [key=0, style=solid];
m0_92 -> m0_19  [key=2, style=dotted];
m0_92 -> m0_93  [key=0, style=solid];
m0_93 -> m0_19  [key=2, style=dotted];
m0_93 -> m0_94  [key=0, style=solid];
m0_94 -> m0_67  [key=2, style=dotted];
m0_94 -> m0_95  [key=0, style=solid];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_19  [key=2, style=dotted];
m0_128 -> m0_19  [key=2, style=dotted];
m0_128 -> m0_129  [key=0, style=solid];
m0_129 -> m0_19  [key=2, style=dotted];
m0_129 -> m0_130  [key=0, style=solid];
m0_130 -> m0_19  [key=2, style=dotted];
m0_130 -> m0_131  [key=0, style=solid];
m0_160 -> m0_19  [key=2, style=dotted];
m0_160 -> m0_161  [key=0, style=solid];
m0_161 -> m0_19  [key=2, style=dotted];
m0_161 -> m0_162  [key=0, style=solid];
m0_162 -> m0_67  [key=2, style=dotted];
m0_162 -> m0_163  [key=0, style=solid];
m0_163 -> m0_19  [key=2, style=dotted];
m0_163 -> m0_164  [key=0, style=solid];
m0_194 -> m0_19  [key=2, style=dotted];
m0_194 -> m0_195  [key=0, style=solid];
m0_195 -> m0_19  [key=2, style=dotted];
m0_195 -> m0_196  [key=0, style=solid];
m0_196 -> m0_67  [key=2, style=dotted];
m0_196 -> m0_197  [key=0, style=solid];
m0_197 -> m0_19  [key=2, style=dotted];
m0_197 -> m0_198  [key=0, style=solid];
m0_12 -> m0_10  [key=0, style=bold, color=blue];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_13  [key=2, style=dotted];
m0_99 -> m0_100  [key=0, style=solid];
m0_102 -> m0_103  [key=0, style=solid];
m0_107 -> m0_105  [key=0, style=bold, color=blue];
m0_106 -> m0_107  [key=0, style=solid];
m0_106 -> m0_108  [key=2, style=dotted];
m0_132 -> m0_133  [key=0, style=solid];
m0_135 -> m0_136  [key=0, style=solid];
m0_140 -> m0_138  [key=0, style=bold, color=blue];
m0_139 -> m0_140  [key=0, style=solid];
m0_139 -> m0_108  [key=2, style=dotted];
m0_165 -> m0_166  [key=0, style=solid];
m0_168 -> m0_169  [key=0, style=solid];
m0_173 -> m0_171  [key=0, style=bold, color=blue];
m0_172 -> m0_173  [key=0, style=solid];
m0_172 -> m0_108  [key=2, style=dotted];
m0_199 -> m0_200  [key=0, style=solid];
m0_202 -> m0_203  [key=0, style=solid];
m0_207 -> m0_205  [key=0, style=bold, color=blue];
m0_206 -> m0_207  [key=0, style=solid];
m0_206 -> m0_108  [key=2, style=dotted];
m0_222 -> m0_220  [key=0, style=bold, color=blue];
m0_221 -> m0_222  [key=0, style=solid];
m0_221 -> m0_13  [key=2, style=dotted];
m0_234 -> m0_232  [key=0, style=bold, color=blue];
m0_601 -> m0_599  [key=0, style=bold, color=blue];
m0_600 -> m0_601  [key=0, style=solid];
m0_604 -> m0_602  [key=0, style=bold, color=blue];
m0_603 -> m0_604  [key=0, style=solid];
m0_618 -> m0_616  [key=0, style=bold, color=blue];
m0_617 -> m0_618  [key=0, style=solid];
m0_621 -> m0_619  [key=0, style=bold, color=blue];
m0_620 -> m0_621  [key=0, style=solid];
m0_750 -> m0_748  [key=0, style=bold, color=blue];
m0_749 -> m0_750  [key=0, style=solid];
m0_753 -> m0_751  [key=0, style=bold, color=blue];
m0_752 -> m0_753  [key=0, style=solid];
m0_786 -> m0_784  [key=0, style=bold, color=blue];
m0_785 -> m0_786  [key=0, style=solid];
m0_789 -> m0_787  [key=0, style=bold, color=blue];
m0_788 -> m0_789  [key=0, style=solid];
m0_821 -> m0_819  [key=0, style=bold, color=blue];
m0_820 -> m0_821  [key=0, style=solid];
m0_824 -> m0_822  [key=0, style=bold, color=blue];
m0_823 -> m0_824  [key=0, style=solid];
m0_856 -> m0_854  [key=0, style=bold, color=blue];
m0_855 -> m0_856  [key=0, style=solid];
m0_859 -> m0_857  [key=0, style=bold, color=blue];
m0_858 -> m0_859  [key=0, style=solid];
m0_890 -> m0_888  [key=0, style=bold, color=blue];
m0_889 -> m0_890  [key=0, style=solid];
m0_893 -> m0_891  [key=0, style=bold, color=blue];
m0_892 -> m0_893  [key=0, style=solid];
m0_924 -> m0_922  [key=0, style=bold, color=blue];
m0_923 -> m0_924  [key=0, style=solid];
m0_927 -> m0_925  [key=0, style=bold, color=blue];
m0_926 -> m0_927  [key=0, style=solid];
m0_101 -> m0_99  [key=0, style=bold, color=blue];
m0_100 -> m0_101  [key=0, style=solid];
m0_104 -> m0_102  [key=0, style=bold, color=blue];
m0_103 -> m0_104  [key=0, style=solid];
m0_134 -> m0_132  [key=0, style=bold, color=blue];
m0_133 -> m0_134  [key=0, style=solid];
m0_137 -> m0_135  [key=0, style=bold, color=blue];
m0_136 -> m0_137  [key=0, style=solid];
m0_167 -> m0_165  [key=0, style=bold, color=blue];
m0_166 -> m0_167  [key=0, style=solid];
m0_170 -> m0_168  [key=0, style=bold, color=blue];
m0_169 -> m0_170  [key=0, style=solid];
m0_201 -> m0_199  [key=0, style=bold, color=blue];
m0_200 -> m0_201  [key=0, style=solid];
m0_204 -> m0_202  [key=0, style=bold, color=blue];
m0_203 -> m0_204  [key=0, style=solid];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_23  [key=2, style=dotted];
m0_22 -> m0_20  [key=0, style=bold, color=blue];
m0_894 -> m0_895  [key=0, style=solid];
m0_894 -> m0_898  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_894 -> m0_902  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_895 -> m0_31  [key=2, style=dotted];
m0_895 -> m0_896  [key=0, style=solid];
m0_895 -> m0_897  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_896 -> m0_894  [key=0, style=bold, color=blue];
m0_390 -> m0_391  [key=0, style=solid];
m0_390 -> m0_394  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_391 -> m0_31  [key=2, style=dotted];
m0_391 -> m0_392  [key=0, style=solid];
m0_391 -> m0_393  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_392 -> m0_390  [key=0, style=bold, color=blue];
m0_754 -> m0_755  [key=0, style=solid];
m0_754 -> m0_758  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_754 -> m0_762  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_755 -> m0_31  [key=2, style=dotted];
m0_755 -> m0_756  [key=0, style=solid];
m0_755 -> m0_757  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_756 -> m0_754  [key=0, style=bold, color=blue];
m0_415 -> m0_416  [key=0, style=solid];
m0_415 -> m0_419  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_416 -> m0_31  [key=2, style=dotted];
m0_416 -> m0_417  [key=0, style=solid];
m0_416 -> m0_418  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_417 -> m0_415  [key=0, style=bold, color=blue];
m0_860 -> m0_861  [key=0, style=solid];
m0_860 -> m0_864  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_860 -> m0_868  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_861 -> m0_31  [key=2, style=dotted];
m0_861 -> m0_862  [key=0, style=solid];
m0_861 -> m0_863  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_862 -> m0_860  [key=0, style=bold, color=blue];
m0_8 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlStoredSets"];
m0_8 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlStoredSets"];
m0_717 -> m0_718  [key=0, style=solid];
m0_717 -> m0_721  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_717 -> m0_725  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_718 -> m0_31  [key=2, style=dotted];
m0_718 -> m0_719  [key=0, style=solid];
m0_718 -> m0_720  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_719 -> m0_717  [key=0, style=bold, color=blue];
m0_271 -> m0_272  [key=0, style=solid];
m0_271 -> m0_275  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_272 -> m0_31  [key=2, style=dotted];
m0_272 -> m0_273  [key=0, style=solid];
m0_272 -> m0_274  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_273 -> m0_271  [key=0, style=bold, color=blue];
m0_586 -> m0_587  [key=0, style=solid];
m0_586 -> m0_590  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_587 -> m0_31  [key=2, style=dotted];
m0_587 -> m0_588  [key=0, style=solid];
m0_587 -> m0_589  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_588 -> m0_586  [key=0, style=bold, color=blue];
m0_253 -> m0_254  [key=0, style=solid];
m0_253 -> m0_257  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_254 -> m0_31  [key=2, style=dotted];
m0_254 -> m0_255  [key=0, style=solid];
m0_254 -> m0_256  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_255 -> m0_253  [key=0, style=bold, color=blue];
m0_559 -> m0_560  [key=0, style=solid];
m0_559 -> m0_563  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_559 -> m0_567  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_560 -> m0_31  [key=2, style=dotted];
m0_560 -> m0_561  [key=0, style=solid];
m0_560 -> m0_562  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_561 -> m0_559  [key=0, style=bold, color=blue];
m0_403 -> m0_404  [key=0, style=solid];
m0_403 -> m0_407  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_404 -> m0_31  [key=2, style=dotted];
m0_404 -> m0_405  [key=0, style=solid];
m0_404 -> m0_406  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_405 -> m0_403  [key=0, style=bold, color=blue];
m0_573 -> m0_574  [key=0, style=solid];
m0_573 -> m0_577  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_573 -> m0_581  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_574 -> m0_31  [key=2, style=dotted];
m0_574 -> m0_575  [key=0, style=solid];
m0_574 -> m0_576  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_575 -> m0_573  [key=0, style=bold, color=blue];
m0_352 -> m0_353  [key=0, style=solid];
m0_352 -> m0_356  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_353 -> m0_31  [key=2, style=dotted];
m0_353 -> m0_354  [key=0, style=solid];
m0_353 -> m0_355  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_354 -> m0_352  [key=0, style=bold, color=blue];
m0_340 -> m0_341  [key=0, style=solid];
m0_340 -> m0_344  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_341 -> m0_31  [key=2, style=dotted];
m0_341 -> m0_342  [key=0, style=solid];
m0_341 -> m0_343  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_342 -> m0_340  [key=0, style=bold, color=blue];
m0_219 -> m0_216  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m0_219 -> m0_928  [key=0, style=solid];
m0_219 -> m0_929  [key=1, style=dashed, color=darkseagreen4, label="System.Action<SqlConnection>"];
m0_928 -> m0_929  [key=0, style=solid];
m0_928 -> m0_931  [key=2, style=dotted];
m0_929 -> m0_932  [key=2, style=dotted];
m0_929 -> m0_930  [key=0, style=solid];
m0_930 -> m0_219  [key=0, style=bold, color=blue];
m0_314 -> m0_315  [key=0, style=solid];
m0_314 -> m0_318  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_315 -> m0_31  [key=2, style=dotted];
m0_315 -> m0_316  [key=0, style=solid];
m0_315 -> m0_317  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_316 -> m0_314  [key=0, style=bold, color=blue];
m0_804 -> m0_806  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_804 -> m0_810  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_804 -> m0_805  [key=0, style=solid];
m0_806 -> m0_31  [key=2, style=dotted];
m0_806 -> m0_807  [key=0, style=solid];
m0_806 -> m0_808  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_805 -> m0_806  [key=0, style=solid];
m0_805 -> m0_805  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m0_805 -> m0_809  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_807 -> m0_804  [key=0, style=bold, color=blue];
m0_54 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_54 -> m0_61  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_54 -> m0_55  [key=0, style=solid];
m0_56 -> m0_31  [key=2, style=dotted];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_55  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m0_55 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_55 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_57 -> m0_54  [key=0, style=bold, color=blue];
m0_490 -> m0_491  [key=0, style=solid];
m0_490 -> m0_494  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_491 -> m0_31  [key=2, style=dotted];
m0_491 -> m0_492  [key=0, style=solid];
m0_491 -> m0_493  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_492 -> m0_490  [key=0, style=bold, color=blue];
m0_874 -> m0_876  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_874 -> m0_880  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_874 -> m0_875  [key=0, style=solid];
m0_876 -> m0_31  [key=2, style=dotted];
m0_876 -> m0_877  [key=0, style=solid];
m0_876 -> m0_878  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_875 -> m0_876  [key=0, style=solid];
m0_875 -> m0_875  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m0_875 -> m0_879  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_877 -> m0_874  [key=0, style=bold, color=blue];
m0_144 -> m0_146  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_144 -> m0_154  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_144 -> m0_145  [key=0, style=solid];
m0_146 -> m0_31  [key=2, style=dotted];
m0_146 -> m0_147  [key=0, style=solid];
m0_146 -> m0_148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_145 -> m0_28  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m0_145 -> m0_146  [key=0, style=solid];
m0_145 -> m0_149  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_147 -> m0_144  [key=0, style=bold, color=blue];
m0_466 -> m0_467  [key=0, style=solid];
m0_466 -> m0_470  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_467 -> m0_31  [key=2, style=dotted];
m0_467 -> m0_468  [key=0, style=solid];
m0_467 -> m0_469  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_468 -> m0_466  [key=0, style=bold, color=blue];
m0_665 -> m0_666  [key=0, style=solid];
m0_665 -> m0_669  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_665 -> m0_673  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_666 -> m0_31  [key=2, style=dotted];
m0_666 -> m0_667  [key=0, style=solid];
m0_666 -> m0_668  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_667 -> m0_665  [key=0, style=bold, color=blue];
m0_297 -> m0_298  [key=0, style=solid];
m0_297 -> m0_301  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_298 -> m0_31  [key=2, style=dotted];
m0_298 -> m0_299  [key=0, style=solid];
m0_298 -> m0_300  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_299 -> m0_297  [key=0, style=bold, color=blue];
m0_650 -> m0_651  [key=0, style=solid];
m0_650 -> m0_654  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_650 -> m0_658  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_651 -> m0_31  [key=2, style=dotted];
m0_651 -> m0_652  [key=0, style=solid];
m0_651 -> m0_653  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_652 -> m0_650  [key=0, style=bold, color=blue];
m0_14 -> m0_15  [key=0, style=solid];
m0_15 -> m0_18  [key=2, style=dotted];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_16 -> m0_19  [key=2, style=dotted];
m0_16 -> m0_17  [key=0, style=solid];
m0_17 -> m0_14  [key=0, style=bold, color=blue];
m0_283 -> m0_284  [key=0, style=solid];
m0_283 -> m0_287  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_284 -> m0_31  [key=2, style=dotted];
m0_284 -> m0_285  [key=0, style=solid];
m0_284 -> m0_286  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_285 -> m0_283  [key=0, style=bold, color=blue];
m0_427 -> m0_428  [key=0, style=solid];
m0_427 -> m0_431  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_428 -> m0_31  [key=2, style=dotted];
m0_428 -> m0_429  [key=0, style=solid];
m0_428 -> m0_430  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_429 -> m0_427  [key=0, style=bold, color=blue];
m0_622 -> m0_623  [key=0, style=solid];
m0_622 -> m0_626  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_622 -> m0_629  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_623 -> m0_31  [key=2, style=dotted];
m0_623 -> m0_624  [key=0, style=solid];
m0_623 -> m0_625  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_624 -> m0_622  [key=0, style=bold, color=blue];
m0_790 -> m0_791  [key=0, style=solid];
m0_790 -> m0_794  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_790 -> m0_798  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_791 -> m0_31  [key=2, style=dotted];
m0_791 -> m0_792  [key=0, style=solid];
m0_791 -> m0_793  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_792 -> m0_790  [key=0, style=bold, color=blue];
m0_72 -> m0_74  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_72 -> m0_83  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_72 -> m0_73  [key=0, style=solid];
m0_74 -> m0_31  [key=2, style=dotted];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_76  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_73 -> m0_28  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m0_73 -> m0_74  [key=0, style=solid];
m0_73 -> m0_77  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_73 -> m0_78  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_75 -> m0_72  [key=0, style=bold, color=blue];
m0_239 -> m0_240  [key=0, style=solid];
m0_239 -> m0_243  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_240 -> m0_31  [key=2, style=dotted];
m0_240 -> m0_241  [key=0, style=solid];
m0_240 -> m0_242  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_241 -> m0_239  [key=0, style=bold, color=blue];
m0_364 -> m0_365  [key=0, style=solid];
m0_364 -> m0_368  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_365 -> m0_31  [key=2, style=dotted];
m0_365 -> m0_366  [key=0, style=solid];
m0_365 -> m0_367  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_366 -> m0_364  [key=0, style=bold, color=blue];
m0_113 -> m0_115  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_113 -> m0_123  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_113 -> m0_114  [key=0, style=solid];
m0_115 -> m0_31  [key=2, style=dotted];
m0_115 -> m0_116  [key=0, style=solid];
m0_115 -> m0_117  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_114 -> m0_28  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m0_114 -> m0_115  [key=0, style=solid];
m0_114 -> m0_118  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_116 -> m0_113  [key=0, style=bold, color=blue];
m0_732 -> m0_734  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_732 -> m0_738  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_732 -> m0_733  [key=0, style=solid];
m0_734 -> m0_31  [key=2, style=dotted];
m0_734 -> m0_735  [key=0, style=solid];
m0_734 -> m0_736  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_733 -> m0_734  [key=0, style=solid];
m0_733 -> m0_733  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m0_733 -> m0_737  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_735 -> m0_732  [key=0, style=bold, color=blue];
m0_949 -> m0_29  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_35  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_61  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_62  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_64  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_74  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_83  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_84  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_87  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_115  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_123  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_124  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_146  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_154  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_155  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_180  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_188  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_189  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_215  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_216  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_224  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_240  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_243  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_254  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_257  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_272  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_275  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_284  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_287  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_298  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_301  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_315  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_318  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_327  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_330  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_341  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_344  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_353  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_356  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_365  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_368  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_379  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_382  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_391  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_394  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_404  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_407  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_416  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_419  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_428  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_431  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_441  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_444  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_453  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_456  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_467  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_470  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_479  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_482  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_491  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_494  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_510  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_513  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_524  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_527  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_536  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_539  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_548  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_551  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_560  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_563  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_567  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_574  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_577  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_581  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_587  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_590  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_606  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_609  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_623  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_626  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_629  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_636  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_639  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_640  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_651  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_654  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_658  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_666  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_669  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_673  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_679  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_683  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_691  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_694  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_697  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_705  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_709  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_718  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_721  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_725  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_734  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_738  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_755  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_758  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_762  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_771  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_775  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_791  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_794  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_798  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_806  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_810  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_826  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_829  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_833  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_841  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_845  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_861  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_864  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_868  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_876  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_880  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_895  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_898  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_902  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_910  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_914  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_949 -> m0_934  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m0_951 -> m0_35  [key=1, style=dashed, color=green, label=bool];
m0_952 -> m0_50  [key=1, style=dashed, color=green, label=jobId];
m0_950 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_950 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_954 -> m0_61  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_957 -> m0_83  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_961 -> m0_123  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_965 -> m0_154  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_969 -> m0_188  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_972 -> m0_224  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_974 -> m0_243  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_975 -> m0_257  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_976 -> m0_275  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_977 -> m0_287  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_978 -> m0_301  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_979 -> m0_318  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_980 -> m0_330  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_981 -> m0_344  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_982 -> m0_356  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_983 -> m0_368  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_984 -> m0_382  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_985 -> m0_394  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_986 -> m0_407  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_987 -> m0_419  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_988 -> m0_431  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_989 -> m0_444  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_990 -> m0_456  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_991 -> m0_470  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_992 -> m0_482  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_993 -> m0_494  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_994 -> m0_513  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_995 -> m0_527  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_996 -> m0_539  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_997 -> m0_551  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_998 -> m0_563  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_998 -> m0_567  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_999 -> m0_567  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_1000 -> m0_577  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1000 -> m0_581  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1001 -> m0_581  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_1002 -> m0_590  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1003 -> m0_609  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1004 -> m0_626  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1004 -> m0_629  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1005 -> m0_629  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_1006 -> m0_639  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1006 -> m0_640  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1007 -> m0_654  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1007 -> m0_658  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1008 -> m0_658  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_1009 -> m0_669  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1009 -> m0_673  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1010 -> m0_673  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_1011 -> m0_683  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1013 -> m0_694  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1013 -> m0_697  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1014 -> m0_697  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_1016 -> m0_709  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1017 -> m0_721  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1017 -> m0_725  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1018 -> m0_725  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_1020 -> m0_738  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1021 -> m0_758  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1021 -> m0_762  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1022 -> m0_762  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_1024 -> m0_775  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1025 -> m0_794  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1025 -> m0_798  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1026 -> m0_798  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_1028 -> m0_810  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1029 -> m0_829  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1029 -> m0_833  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1030 -> m0_833  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_1032 -> m0_845  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1033 -> m0_864  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1033 -> m0_868  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1034 -> m0_868  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_1036 -> m0_880  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1037 -> m0_898  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1037 -> m0_902  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_1038 -> m0_902  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m0_1040 -> m0_914  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_953 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_953 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_956 -> m0_77  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_956 -> m0_78  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_960 -> m0_118  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_964 -> m0_149  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_968 -> m0_183  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_973 -> m0_225  [key=1, style=dashed, color=darkseagreen4, label=correctJobQueue];
m0_1015 -> m0_708  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_1019 -> m0_737  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_1023 -> m0_774  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_1027 -> m0_809  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_1031 -> m0_844  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_1035 -> m0_879  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_1039 -> m0_913  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m0_955 -> m0_69  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_958 -> m0_110  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_959 -> m0_110  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_962 -> m0_142  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_963 -> m0_142  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_966 -> m0_175  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_967 -> m0_175  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_970 -> m0_209  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_971 -> m0_209  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_1012 -> m0_688  [key=1, style=dashed, color=darkseagreen4, label=items];
}
