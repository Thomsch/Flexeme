digraph  {
n175 [label="Hangfire.Core.Tests.BackgroundJobClientFacts", span=""];
n176 [label=client, span=""];
n177 [label=client, span=""];
n178 [label=client, span=""];
n179 [label=client, span=""];
n180 [label=client, span=""];
n0 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", span="20-20"];
n1 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", label="_connection = new Mock<IStorageConnection>()", span="22-22"];
n2 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", label="_storage = new Mock<JobStorage>()", span="23-23"];
n11 [cluster="Mock<IStorageConnection>.cstr", label="Entry Mock<IStorageConnection>.cstr", span=""];
n12 [cluster="Mock<JobStorage>.cstr", label="Entry Mock<JobStorage>.cstr", span=""];
n13 [cluster="Unk.Setup", label="Entry Unk.Setup", span=""];
n14 [cluster="Unk.Returns", label="Entry Unk.Returns", span=""];
n20 [cluster="lambda expression", label="Entry lambda expression", span="24-24"];
n5 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", label="_stateMachineFactory = new Mock<IStateMachineFactory>()", span="28-28"];
n15 [cluster="Mock<IStateMachine>.cstr", label="Entry Mock<IStateMachine>.cstr", span=""];
n16 [cluster="Mock<IStateMachineFactory>.cstr", label="Entry Mock<IStateMachineFactory>.cstr", span=""];
n7 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", label="_process = new Mock<IJobCreationProcess>()", span="31-31"];
n24 [cluster="lambda expression", label="Entry lambda expression", span="29-29"];
n8 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", label="_state = new Mock<IState>()", span="32-32"];
n17 [cluster="Mock<IJobCreationProcess>.cstr", label="Entry Mock<IJobCreationProcess>.cstr", span=""];
n9 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", label="_job = Job.FromExpression(() => Method())", span="33-33"];
n18 [cluster="Mock<IState>.cstr", label="Entry Mock<IState>.cstr", span=""];
n10 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", span="20-20"];
n19 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="148-148"];
n28 [cluster="lambda expression", label="Entry lambda expression", span="33-33"];
n22 [cluster="lambda expression", label="Exit lambda expression", span="24-24"];
n23 [cluster="Unk.GetConnection", label="Entry Unk.GetConnection", span=""];
n26 [cluster="lambda expression", label="Exit lambda expression", span="29-29"];
n27 [cluster="Unk.Create", label="Entry Unk.Create", span=""];
n29 [cluster="lambda expression", label="Method()", span="33-33"];
n30 [cluster="lambda expression", label="Exit lambda expression", span="33-33"];
n31 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Method()", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Method()", span="200-200"];
n32 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37"];
n33 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobClient(null, _stateMachineFactory.Object, _process.Object))", span="39-40"];
n34 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", label="Assert.Equal(''storage'', exception.ParamName)", span="42-42"];
n36 [cluster="Unk.>", label="Entry Unk.>", span=""];
n38 [cluster="lambda expression", label="Entry lambda expression", span="40-40"];
n35 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37"];
n37 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n39 [cluster="lambda expression", label="new BackgroundJobClient(null, _stateMachineFactory.Object, _process.Object)", span="40-40"];
n40 [cluster="lambda expression", label="Exit lambda expression", span="40-40"];
n41 [cluster="BackgroundJobClient.cstr", label="Entry BackgroundJobClient.cstr", span=""];
n42 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="46-46"];
n43 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobClient(_storage.Object, null, _process.Object))", span="48-49"];
n44 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", label="Assert.Equal(''stateMachineFactory'', exception.ParamName)", span="51-51"];
n46 [cluster="lambda expression", label="Entry lambda expression", span="49-49"];
n45 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="46-46"];
n47 [cluster="lambda expression", label="new BackgroundJobClient(_storage.Object, null, _process.Object)", span="49-49"];
n48 [cluster="lambda expression", label="Exit lambda expression", span="49-49"];
n49 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", span="55-55"];
n50 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object, null))", span="57-58"];
n51 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", label="Assert.Equal(''process'', exception.ParamName)", span="60-60"];
n53 [cluster="lambda expression", label="Entry lambda expression", span="58-58"];
n52 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", span="55-55"];
n54 [cluster="lambda expression", label="new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object, null)", span="58-58"];
n55 [cluster="lambda expression", label="Exit lambda expression", span="58-58"];
n56 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()", span="64-64"];
n57 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()", label="JobStorage.Current = new Mock<JobStorage>().Object", span="66-66"];
n58 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()", label="Assert.DoesNotThrow(() => new BackgroundJobClient())", span="67-67"];
n59 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()", span="64-64"];
n60 [cluster="Unk.DoesNotThrow", label="Entry Unk.DoesNotThrow", span=""];
n61 [cluster="lambda expression", label="Entry lambda expression", span="67-67"];
n62 [cluster="lambda expression", label="new BackgroundJobClient()", span="67-67"];
n63 [cluster="lambda expression", label="Exit lambda expression", span="67-67"];
n64 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient()", label="Entry Hangfire.BackgroundJobClient.BackgroundJobClient()", span="38-38"];
n65 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()", span="71-71"];
n66 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()", label="Assert.DoesNotThrow(() => new BackgroundJobClient(_storage.Object))", span="73-73"];
n67 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()", span="71-71"];
n68 [cluster="lambda expression", label="Entry lambda expression", span="73-73"];
n69 [cluster="lambda expression", label="new BackgroundJobClient(_storage.Object)", span="73-73"];
n70 [cluster="lambda expression", label="Exit lambda expression", span="73-73"];
n71 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", span="77-77"];
n72 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", label="Assert.DoesNotThrow(\r\n                () => new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object))", span="79-80"];
n73 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", span="77-77"];
n74 [cluster="lambda expression", label="Entry lambda expression", span="80-80"];
n75 [cluster="lambda expression", label="new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object)", span="80-80"];
n76 [cluster="lambda expression", label="Exit lambda expression", span="80-80"];
n77 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", span="84-84"];
n78 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", label="var client = CreateClient()", span="86-86"];
n79 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => client.Create(null, _state.Object))", span="88-89"];
n82 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateClient()", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateClient()", span="204-204"];
n84 [cluster="lambda expression", label="client.Create(null, _state.Object)", span="89-89"];
n80 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", label="Assert.Equal(''job'', exception.ParamName)", span="91-91"];
n83 [cluster="lambda expression", label="Entry lambda expression", span="89-89"];
n81 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", span="84-84"];
n85 [cluster="lambda expression", label="Exit lambda expression", span="89-89"];
n86 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", span="95-95"];
n87 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", label="var client = CreateClient()", span="97-97"];
n88 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => client.Create(_job, null))", span="99-100"];
n92 [cluster="lambda expression", label="client.Create(_job, null)", span="100-100"];
n89 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", label="Assert.Equal(''state'', exception.ParamName)", span="102-102"];
n91 [cluster="lambda expression", label="Entry lambda expression", span="100-100"];
n90 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", span="95-95"];
n93 [cluster="lambda expression", label="Exit lambda expression", span="100-100"];
n94 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", label="Entry Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="80-80"];
n95 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", span="106-106"];
n96 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", label="var client = CreateClient()", span="108-108"];
n97 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", label="client.Create(_job, _state.Object)", span="110-110"];
n98 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", label="_process.Verify(x => x.Run(It.IsNotNull<CreateContext>()))", span="112-112"];
n99 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", span="106-106"];
n100 [cluster="Unk.Verify", label="Entry Unk.Verify", span=""];
n101 [cluster="lambda expression", label="Entry lambda expression", span="112-112"];
n102 [cluster="lambda expression", label="x.Run(It.IsNotNull<CreateContext>())", span="112-112"];
n103 [cluster="lambda expression", label="Exit lambda expression", span="112-112"];
n104 [cluster="Unk.Run", label="Entry Unk.Run", span=""];
n105 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", span="116-116"];
n106 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", label="_process.Setup(x => x.Run(It.IsAny<CreateContext>())).Returns(''some-job'')", span="118-118"];
n107 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", label="var client = CreateClient()", span="119-119"];
n111 [cluster="lambda expression", label="Entry lambda expression", span="118-118"];
n108 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", label="var id = client.Create(_job, _state.Object)", span="121-121"];
n109 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", label="Assert.Equal(''some-job'', id)", span="123-123"];
n110 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", span="116-116"];
n112 [cluster="lambda expression", label="x.Run(It.IsAny<CreateContext>())", span="118-118"];
n113 [cluster="lambda expression", label="Exit lambda expression", span="118-118"];
n114 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", span="127-127"];
n115 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", label="var client = CreateClient()", span="129-129"];
n116 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", label="_process.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws<InvalidOperationException>()", span="130-131"];
n117 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", label="var exception = Assert.Throws<CreateJobFailedException>(\r\n                () => client.Create(_job, _state.Object))", span="133-134"];
n126 [cluster="lambda expression", label="client.Create(_job, _state.Object)", span="134-134"];
n122 [cluster="lambda expression", label="Entry lambda expression", span="130-130"];
n118 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", label="Assert.NotNull(exception.InnerException)", span="136-136"];
n125 [cluster="lambda expression", label="Entry lambda expression", span="134-134"];
n119 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", label="Assert.IsType<InvalidOperationException>(exception.InnerException)", span="137-137"];
n121 [cluster="Unk.NotNull", label="Entry Unk.NotNull", span=""];
n120 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", span="127-127"];
n123 [cluster="lambda expression", label="x.Run(It.IsAny<CreateContext>())", span="130-130"];
n124 [cluster="lambda expression", label="Exit lambda expression", span="130-130"];
n127 [cluster="lambda expression", label="Exit lambda expression", span="134-134"];
n128 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", span="141-141"];
n129 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", label="var client = CreateClient()", span="143-143"];
n130 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => client.ChangeState(null, _state.Object, null))", span="145-146"];
n134 [cluster="lambda expression", label="client.ChangeState(null, _state.Object, null)", span="146-146"];
n131 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", label="Assert.Equal(''jobId'', exception.ParamName)", span="148-148"];
n133 [cluster="lambda expression", label="Entry lambda expression", span="146-146"];
n132 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", span="141-141"];
n135 [cluster="lambda expression", label="Exit lambda expression", span="146-146"];
n136 [cluster="Unk.ChangeState", label="Entry Unk.ChangeState", span=""];
n137 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", span="152-152"];
n138 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", label="var client = CreateClient()", span="154-154"];
n139 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => client.ChangeState(''jobId'', null, null))", span="156-157"];
n143 [cluster="lambda expression", label="client.ChangeState(''jobId'', null, null)", span="157-157"];
n140 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", label="Assert.Equal(''state'', exception.ParamName)", span="159-159"];
n142 [cluster="lambda expression", label="Entry lambda expression", span="157-157"];
n141 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", span="152-152"];
n144 [cluster="lambda expression", label="Exit lambda expression", span="157-157"];
n145 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", label="Entry Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="100-100"];
n146 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", span="163-163"];
n147 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", label="var client = CreateClient()", span="165-165"];
n148 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", label="client.ChangeState(''job-id'', _state.Object, null)", span="167-167"];
n149 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", label="_stateMachine.Verify(x => x.ChangeState(\r\n                ''job-id'',\r\n                _state.Object,\r\n                null))", span="169-172"];
n150 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", span="163-163"];
n151 [cluster="lambda expression", label="Entry lambda expression", span="169-172"];
n152 [cluster="lambda expression", label="x.ChangeState(\r\n                ''job-id'',\r\n                _state.Object,\r\n                null)", span="169-172"];
n153 [cluster="lambda expression", label="Exit lambda expression", span="169-172"];
n154 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", span="176-176"];
n155 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", label="var client = CreateClient()", span="178-178"];
n156 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", label="client.ChangeState(''job-id'', _state.Object, ''State'')", span="180-180"];
n157 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", label="_stateMachine.Verify(x => x.ChangeState(\r\n                ''job-id'',\r\n                _state.Object,\r\n                new[] { ''State'' }))", span="182-185"];
n158 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", span="176-176"];
n159 [cluster="lambda expression", label="Entry lambda expression", span="182-185"];
n160 [cluster="lambda expression", label="x.ChangeState(\r\n                ''job-id'',\r\n                _state.Object,\r\n                new[] { ''State'' })", span="182-185"];
n161 [cluster="lambda expression", label="Exit lambda expression", span="182-185"];
n162 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()", span="189-189"];
n163 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()", label="_stateMachine.Setup(x => x.ChangeState(''job-id'', _state.Object, null))\r\n                .Returns(true)", span="191-192"];
n164 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()", label="var client = CreateClient()", span="193-193"];
n169 [cluster="lambda expression", label="Entry lambda expression", span="191-191"];
n165 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()", label="var result = client.ChangeState(''job-id'', _state.Object, null)", span="195-195"];
n166 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()", label="Assert.True(result)", span="197-197"];
n167 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateMachineInvocation()", span="189-189"];
n168 [cluster="Unk.True", label="Entry Unk.True", span=""];
n170 [cluster="lambda expression", label="x.ChangeState(''job-id'', _state.Object, null)", span="191-191"];
n171 [cluster="lambda expression", label="Exit lambda expression", span="191-191"];
n172 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Method()", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Method()", span="200-200"];
n173 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateClient()", label="return new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object, _process.Object);", span="206-206"];
n174 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateClient()", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateClient()", span="204-204"];
m0_0 [cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="FetcherFacts.cs", label="Entry Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="24-24"];
m0_1 [cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="FetcherFacts.cs", label="Exit Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="24-24"];
m4_0 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", file="MessageQueueProcessingJob.cs", label="Entry HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", span="27-27"];
m4_1 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", color=green, community=0, file="MessageQueueProcessingJob.cs", label="transaction == null", prediction=0, span="29-29"];
m4_2 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", color=green, community=0, file="MessageQueueProcessingJob.cs", label="throw new ArgumentNullException(''transaction'');", prediction=1, span="29-29"];
m4_3 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", color=green, community=0, file="MessageQueueProcessingJob.cs", label="jobId == null", prediction=2, span="30-30"];
m4_4 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", color=green, community=0, file="MessageQueueProcessingJob.cs", label="throw new ArgumentNullException(''jobId'');", prediction=3, span="30-30"];
m4_5 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", color=green, community=0, file="MessageQueueProcessingJob.cs", label="_transaction = transaction", prediction=4, span="32-32"];
m4_6 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", color=green, community=0, file="MessageQueueProcessingJob.cs", label="JobId = jobId", prediction=5, span="34-34"];
m4_7 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", file="MessageQueueProcessingJob.cs", label="Exit HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", span="27-27"];
m4_8 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="MessageQueueProcessingJob.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m4_16 [cluster="Unk.Commit", file="MessageQueueProcessingJob.cs", label="Entry Unk.Commit", span=""];
m4_17 [cluster="Unk.Dispose", file="MessageQueueProcessingJob.cs", label="Entry Unk.Dispose", span=""];
m4_9 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", file="MessageQueueProcessingJob.cs", label="Entry HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", span="39-39"];
m4_10 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", color=green, community=0, file="MessageQueueProcessingJob.cs", label=_disposed, prediction=6, span="41-41"];
m4_11 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", color=green, community=0, file="MessageQueueProcessingJob.cs", label="return;", prediction=7, span="41-41"];
m4_12 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", color=green, community=0, file="MessageQueueProcessingJob.cs", label="_disposed = true", prediction=8, span="43-43"];
m4_13 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", color=green, community=0, file="MessageQueueProcessingJob.cs", label="_transaction.Commit()", prediction=6, span="45-45"];
m4_14 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", color=green, community=0, file="MessageQueueProcessingJob.cs", label="_transaction.Dispose()", prediction=6, span="46-46"];
m4_15 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", file="MessageQueueProcessingJob.cs", label="Exit HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", span="39-39"];
m4_18 [file="MessageQueueProcessingJob.cs", label="HangFire.SqlServer.MessageQueueProcessingJob", span=""];
m5_78 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", file="Program.cs", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", span="103-103"];
m5_13 [cluster="ConsoleSample.Program.Main()", file="Program.cs", label="var i = 0", span="48-48"];
m5_35 [cluster="ConsoleSample.Program.Main()", file="Program.cs", label="i++", span="81-81"];
m5_39 [cluster="ConsoleSample.Program.Main()", file="Program.cs", label="i < workCount", span="90-90"];
m5_38 [cluster="ConsoleSample.Program.Main()", file="Program.cs", label="var i = 0", span="90-90"];
m5_37 [cluster="ConsoleSample.Program.Main()", file="Program.cs", label="var workCount = int.Parse(command.Substring(5))", span="89-89"];
m5_36 [cluster="ConsoleSample.Program.Main()", file="Program.cs", label="command.StartsWith(''args'', StringComparison.OrdinalIgnoreCase)", span="87-87"];
m5_40 [cluster="ConsoleSample.Program.Main()", file="Program.cs", label="BackgroundJob.Enqueue<Services>(x => x.Args(Guid.NewGuid().ToString(), 14442, DateTime.UtcNow))", span="92-92"];
m5_42 [cluster="ConsoleSample.Program.Main()", file="Program.cs", label="command.StartsWith(''in'', StringComparison.OrdinalIgnoreCase)", span="96-96"];
m5_32 [cluster="ConsoleSample.Program.Main()", file="Program.cs", label="var i = 0", span="81-81"];
m5_0 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.MsmqJobQueueFacts()", file="Program.cs", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.MsmqJobQueueFacts()", span="12-12"];
m5_1 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.MsmqJobQueueFacts()", file="Program.cs", label="_token = new CancellationToken()", span="14-14"];
m5_3 [cluster="System.Threading.CancellationToken.CancellationToken()", file="Program.cs", label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0"];
m5_4 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", file="Program.cs", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", span="18-18"];
m5_5 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", color=green, community=0, file="Program.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new MsmqJobQueue(null, MsmqTransactionType.Internal))", prediction=11, span="20-21"];
m5_10 [cluster="ConsoleSample.Program.Main()", file="Program.cs", label="server.Start()", span="40-40"];
m5_6 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", file="Program.cs", label="Assert.Equal(''pathPattern'', exception.ParamName)", span="23-23"];
m5_44 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", file="Program.cs", label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="65-65"];
m5_7 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", file="Program.cs", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", span="18-18"];
m5_52 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", file="Program.cs", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", span="73-73"];
m5_8 [cluster="Unk.>", file="Program.cs", label="Entry Unk.>", span=""];
m5_9 [cluster="ConsoleSample.Program.Main()", file="Program.cs", label="command.Equals(''start'', StringComparison.OrdinalIgnoreCase)", span="38-38"];
m5_11 [cluster="lambda expression", file="Program.cs", label="new MsmqJobQueue(null, MsmqTransactionType.Internal)", span="21-21"];
m5_12 [cluster="ConsoleSample.Program.Main()", file="Program.cs", label="var workCount = int.Parse(command.Substring(4))", span="47-47"];
m5_21 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs", label="message.Formatter = new BinaryMessageFormatter()", span="42-42"];
m5_22 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs", label="Assert.Equal(''job-id'', message.Body)", span="44-44"];
m5_30 [cluster="Unk.Begin", file="Program.cs", label="Entry Unk.Begin", span=""];
m5_31 [cluster="System.TimeSpan.FromSeconds(double)", file="Program.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m5_43 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", file="Program.cs", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", span="63-63"];
m5_46 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", file="Program.cs", label="Assert.Throws<OperationCanceledException>(\r\n                () => queue.Dequeue(new[] { ''my-queue'' }, token))", span="68-69"];
m5_47 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", file="Program.cs", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", span="63-63"];
m5_14 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", span="27-27"];
m5_15 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs", label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="30-30"];
m5_17 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs", label="var messageQueue = CleanMsmqQueueAttribute.GetMessageQueue(''my-queue'')", span="36-36"];
m5_18 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs", label="var transaction = new MessageQueueTransaction()", span="37-37"];
m5_16 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs", label="queue.Enqueue(''my-queue'', ''job-id'')", span="33-33"];
m5_19 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs", label="transaction.Begin()", span="39-39"];
m5_20 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs", label="var message = messageQueue.Receive(TimeSpan.FromSeconds(5), transaction)", span="41-41"];
m5_23 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs", label="Assert.Equal(''job-id'', message.Label)", span="45-45"];
m5_24 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs", label="transaction.Commit()", span="47-47"];
m5_26 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.CreateQueue(Hangfire.SqlServer.Msmq.MsmqTransactionType)", file="Program.cs", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.CreateQueue(Hangfire.SqlServer.Msmq.MsmqTransactionType)", span="138-138"];
m5_25 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", file="Program.cs", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", span="27-27"];
m5_27 [cluster="Unk.Enqueue", file="Program.cs", label="Entry Unk.Enqueue", span=""];
m5_28 [cluster="Hangfire.Msmq.Tests.CleanMsmqQueueAttribute.GetMessageQueue(string)", file="Program.cs", label="Entry Hangfire.Msmq.Tests.CleanMsmqQueueAttribute.GetMessageQueue(string)", span="45-45"];
m5_29 [cluster="MessageQueueTransaction.cstr", file="Program.cs", label="Entry MessageQueueTransaction.cstr", span=""];
m5_33 [cluster="BinaryMessageFormatter.cstr", file="Program.cs", label="Entry BinaryMessageFormatter.cstr", span=""];
m5_34 [cluster="Unk.Commit", file="Program.cs", label="Entry Unk.Commit", span=""];
m5_41 [cluster="Hangfire.Msmq.Tests.MsmqUtils.EnqueueJobId(string, string)", file="Program.cs", label="Entry Hangfire.Msmq.Tests.MsmqUtils.EnqueueJobId(string, string)", span="7-7"];
m5_45 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", file="Program.cs", label="var token = new CancellationToken(true)", span="66-66"];
m5_49 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="69-69"];
m5_50 [cluster="lambda expression", file="Program.cs", label="queue.Dequeue(new[] { ''my-queue'' }, token)", span="69-69"];
m5_51 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="69-69"];
m5_53 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", file="Program.cs", label="MsmqUtils.EnqueueJobId(''queue-2'', ''job-id'')", span="75-75"];
m5_54 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", file="Program.cs", label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="76-76"];
m5_58 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions)", file="Program.cs", label="Entry HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions)", span="41-41"];
m5_63 [cluster="string.Substring(int)", file="Program.cs", label="Entry string.Substring(int)", span="0-0"];
m5_64 [cluster="int.Parse(string)", file="Program.cs", label="Entry int.Parse(string)", span="0-0"];
m5_62 [cluster="string.StartsWith(string, System.StringComparison)", file="Program.cs", label="Entry string.StartsWith(string, System.StringComparison)", span="0-0"];
m5_61 [cluster="HangFire.BackgroundJobServer.Start()", file="Program.cs", label="Entry HangFire.BackgroundJobServer.Start()", span="60-60"];
m5_60 [cluster="string.Equals(string, System.StringComparison)", file="Program.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m5_59 [cluster="System.Console.ReadLine()", file="Program.cs", label="Entry System.Console.ReadLine()", span="0-0"];
m5_65 [cluster="HangFire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)", file="Program.cs", label="Entry HangFire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)", span="77-77"];
m5_55 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", file="Program.cs", label="var fetchedJob = queue.Dequeue(new[] { ''queue-1'', ''queue-2'' }, _token)", span="78-78"];
m5_71 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="51-51"];
m5_76 [cluster="lambda expression", file="Program.cs", label="Console.WriteLine(''Hello, {0}!'', ''world'')", span="68-68"];
m5_77 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="68-68"];
m5_75 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="68-68"];
m5_74 [cluster="ConsoleSample.Services.Random(int)", file="Program.cs", label="Entry ConsoleSample.Services.Random(int)", span="28-28"];
m5_73 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="51-51"];
m5_72 [cluster="lambda expression", file="Program.cs", label="x.Random(number)", span="51-51"];
m5_69 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="97-97"];
m5_100 [cluster="ConsoleSample.Services.EmptyCritical()", file="Program.cs", label="Entry ConsoleSample.Services.EmptyCritical()", span="16-16"];
m5_82 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="117-117"];
m5_68 [cluster="lambda expression", file="Program.cs", label="MsmqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(1))", span="97-97"];
m5_87 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", file="Program.cs", label="fetchedJob.Dispose()", span="131-131"];
m5_66 [cluster="System.Console.WriteLine(string)", file="Program.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m5_79 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="83-83"];
m5_88 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", file="Program.cs", label="var jobId = MsmqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(5))", span="134-134"];
m5_80 [cluster="lambda expression", file="Program.cs", label="x.Error()", span="83-83"];
m5_83 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", file="Program.cs", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", span="123-123"];
m5_90 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", file="Program.cs", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", span="123-123"];
m5_89 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", file="Program.cs", label="Assert.Equal(''job-id'', jobId)", span="135-135"];
m5_92 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.CreateQueue(Hangfire.SqlServer.Msmq.MsmqTransactionType)", file="Program.cs", label="return new MsmqJobQueue(CleanMsmqQueueAttribute.PathPattern, transactionType);", span="140-140"];
m5_81 [cluster="lambda expression", file="Program.cs", label="MsmqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(5))", span="117-117"];
m5_84 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", file="Program.cs", label="MsmqUtils.EnqueueJobId(''my-queue'', ''job-id'')", span="126-126"];
m5_85 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", file="Program.cs", label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="127-127"];
m5_91 [cluster="System.IDisposable.Dispose()", file="Program.cs", label="Entry System.IDisposable.Dispose()", span="0-0"];
m5_93 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.CreateQueue(Hangfire.SqlServer.Msmq.MsmqTransactionType)", file="Program.cs", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.CreateQueue(Hangfire.SqlServer.Msmq.MsmqTransactionType)", span="138-138"];
m5_94 [cluster="lambda expression", file="Program.cs", label="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts", span=""];
m5_96 [cluster="lambda expression", file="Program.cs", label=token, span=""];
m5_97 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="112-112"];
m5_101 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="116-116"];
m5_98 [cluster="lambda expression", file="Program.cs", label="x.EmptyCritical()", span="112-112"];
m5_99 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="112-112"];
m5_103 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="116-116"];
m5_67 [cluster="HangFire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", file="Program.cs", label="Entry HangFire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", span="59-59"];
m5_70 [cluster="System.Threading.Tasks.Parallel.For(int, int, System.Action<int>)", file="Program.cs", label="Entry System.Threading.Tasks.Parallel.For(int, int, System.Action<int>)", span="0-0"];
m5_86 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", file="Program.cs", label="var fetchedJob = queue.Dequeue(new[] { ''my-queue'' }, _token)", span="130-130"];
m5_56 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", file="Program.cs", label="Assert.Equal(''job-id'', fetchedJob.JobId)", span="80-80"];
m5_57 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", file="Program.cs", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", span="73-73"];
m5_104 [cluster="ConsoleSample.Services.EmptyDefault()", file="Program.cs", label="Entry ConsoleSample.Services.EmptyDefault()", span="11-11"];
m5_105 [file="Program.cs", label=number, span=""];
m5_106 [file="Program.cs", label=number, span=""];
m6_28 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", span="96-96"];
m6_38 [cluster="Unk.Same", file="SqlServerConnection.cs", label="Entry Unk.Same", span=""];
m6_48 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="68-68"];
m6_52 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="68-68"];
m6_37 [cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53"];
m6_67 [cluster="Hangfire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.GetComponents()", span="118-118"];
m6_3 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="25-25"];
m6_36 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.CreateStorage()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerStorageFacts.CreateStorage()", span="97-97"];
m6_76 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.CreateStorage()", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerStorageFacts.CreateStorage()", span="97-97"];
m6_74 [cluster="object.GetType()", file="SqlServerConnection.cs", label="Entry object.GetType()", span="0-0"];
m6_27 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m6_8 [cluster="Unk.>", file="SqlServerConnection.cs", label="Entry Unk.>", span=""];
m6_46 [cluster="Hangfire.SqlServer.SqlServerStorage.GetConnection()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.GetConnection()", span="113-113"];
m6_47 [cluster="Unk.False", file="SqlServerConnection.cs", label="Entry Unk.False", span=""];
m6_22 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_CanCreateSqlServerStorage_WithExistingConnection()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_CanCreateSqlServerStorage_WithExistingConnection()", span="35-35"];
m6_23 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_CanCreateSqlServerStorage_WithExistingConnection()", file="SqlServerConnection.cs", label="var connection = ConnectionUtils.CreateConnection()", span="37-37"];
m6_25 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_CanCreateSqlServerStorage_WithExistingConnection()", file="SqlServerConnection.cs", label="Assert.NotNull(storage)", span="40-40"];
m6_26 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_CanCreateSqlServerStorage_WithExistingConnection()", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_CanCreateSqlServerStorage_WithExistingConnection()", span="35-35"];
m6_54 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsNonNullInstance()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsNonNullInstance()", span="76-76"];
m6_59 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsNonNullInstance()", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsNonNullInstance()", span="76-76"];
m6_13 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="40-40"];
m6_69 [cluster="Unk.ToArray", file="SqlServerConnection.cs", label="Entry Unk.ToArray", span=""];
m6_29 [cluster="Unk.NotNull", file="SqlServerConnection.cs", label="Entry Unk.NotNull", span=""];
m6_30 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_InitializesDefaultJobQueueProvider_AndPassesCorrectOptions()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_InitializesDefaultJobQueueProvider_AndPassesCorrectOptions()", span="44-44"];
m6_31 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_InitializesDefaultJobQueueProvider_AndPassesCorrectOptions()", file="SqlServerConnection.cs", label="var storage = CreateStorage()", span="46-46"];
m6_32 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_InitializesDefaultJobQueueProvider_AndPassesCorrectOptions()", file="SqlServerConnection.cs", label="var providers = storage.QueueProviders", span="47-47"];
m6_33 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_InitializesDefaultJobQueueProvider_AndPassesCorrectOptions()", file="SqlServerConnection.cs", label="var provider = (SqlServerJobQueueProvider)providers.GetProvider(''default'')", span="49-49"];
m6_35 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_InitializesDefaultJobQueueProvider_AndPassesCorrectOptions()", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_InitializesDefaultJobQueueProvider_AndPassesCorrectOptions()", span="44-44"];
m6_0 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.SqlServerStorageFacts()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerStorageFacts.SqlServerStorageFacts()", span="11-11"];
m6_1 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.SqlServerStorageFacts()", file="SqlServerConnection.cs", label="_options = new SqlServerStorageOptions { PrepareSchemaIfNecessary = false }", span="13-13"];
m6_2 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.SqlServerStorageFacts()", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerStorageFacts.SqlServerStorageFacts()", span="11-11"];
m6_71 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="93-93"];
m6_10 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="20-20"];
m6_11 [cluster="lambda expression", file="SqlServerConnection.cs", label="new SqlServerStorage((string)null)", span="20-20"];
m6_12 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="20-20"];
m6_18 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="29-29"];
m6_19 [cluster="lambda expression", file="SqlServerConnection.cs", label="new SqlServerStorage(''hello'', null)", span="29-29"];
m6_20 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="29-29"];
m6_73 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="93-93"];
m6_70 [cluster="Unk.Contains", file="SqlServerConnection.cs", label="Entry Unk.Contains", span=""];
m6_53 [cluster="Hangfire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="108-108"];
m6_68 [cluster="Unk.Select", file="SqlServerConnection.cs", label="Entry Unk.Select", span=""];
m6_61 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetComponents_ReturnsAllNeededComponents()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetComponents_ReturnsAllNeededComponents()", span="87-87"];
m6_66 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetComponents_ReturnsAllNeededComponents()", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetComponents_ReturnsAllNeededComponents()", span="87-87"];
m6_39 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsExistingConnection_WhenStorageUsesIt()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsExistingConnection_WhenStorageUsesIt()", span="55-55"];
m6_40 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsExistingConnection_WhenStorageUsesIt()", file="SqlServerConnection.cs", label="var connection = ConnectionUtils.CreateConnection()", span="57-57"];
m6_41 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsExistingConnection_WhenStorageUsesIt()", file="SqlServerConnection.cs", label="var storage = new SqlServerStorage(connection)", span="58-58"];
m6_43 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsExistingConnection_WhenStorageUsesIt()", file="SqlServerConnection.cs", label="Assert.Same(connection, storageConnection.Connection)", span="62-62"];
m6_42 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsExistingConnection_WhenStorageUsesIt()", file="SqlServerConnection.cs", label="var storageConnection = (SqlServerConnection) storage.GetConnection()", span="60-60"];
m6_45 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsExistingConnection_WhenStorageUsesIt()", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerStorageFacts.GetConnection_ReturnsExistingConnection_WhenStorageUsesIt()", span="55-55"];
m6_4 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", span="17-17"];
m6_6 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", file="SqlServerConnection.cs", label="Assert.Equal(''nameOrConnectionString'', exception.ParamName)", span="22-22"];
m6_7 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", span="17-17"];
m6_21 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", span="57-57"];
m6_77 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", span="26-26"];
m6_60 [cluster="Unk.True", file="SqlServerConnection.cs", label="Entry Unk.True", span=""];
m6_14 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="26-26"];
m6_15 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="SqlServerConnection.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerStorage(''hello'', null))", span="28-29"];
m6_16 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="SqlServerConnection.cs", label="Assert.Equal(''options'', exception.ParamName)", span="31-31"];
m6_17 [cluster="Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerStorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="26-26"];
m6_78 [file="SqlServerConnection.cs", label="Hangfire.SqlServer.Tests.SqlServerStorageFacts", span=""];
m8_13 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerStorage.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m8_20 [cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerStorage.GetConnection()", span="59-59"];
m8_21 [cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", color=green, community=0, file="SqlServerStorage.cs", label="var connection = CreateAndOpenConnection()", prediction=12, span="61-61"];
m8_22 [cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", color=green, community=0, file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.GetConnection()", prediction=13, span="59-59"];
m8_23 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", color=green, community=0, file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", prediction=14, span="35-35"];
m8_35 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerStorage.ToString()", span="76-76"];
m8_36 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="string canNotParseMessage = ''<Connection string can not be parsed>''", span="78-78"];
m8_37 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="var parts = _connectionString.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)\r\n                    .Select(x => x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries))\r\n                    .Select(x => new { Key = x[0].Trim(), Value = x[1].Trim() })\r\n                    .ToDictionary(x => x.Key, x => x.Value)", span="82-85"];
m8_47 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="return builder.Length != 0 \r\n                    ? String.Format(''SQL Server: {0}'', builder) \r\n                    : canNotParseMessage;", span="109-111"];
m8_49 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="return canNotParseMessage;", span="115-115"];
m8_38 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="var builder = new StringBuilder()", span="87-87"];
m8_40 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="parts.ContainsKey(alias)", span="91-91"];
m8_41 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="builder.AppendFormat(''{1}'', alias, parts[alias])", span="93-93"];
m8_45 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="parts.ContainsKey(alias)", span="102-102"];
m8_46 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="builder.AppendFormat(''{1}'', alias, parts[alias])", span="104-104"];
m8_39 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="new[] { ''Data Source'', ''Server'', ''Address'', ''Addr'', ''Network Address'' }", span="89-89"];
m8_42 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="builder.Length != 0", span="98-98"];
m8_43 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="builder.Append(''@'')", span="98-98"];
m8_44 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="new[] { ''Database'', ''Initial Catalog'' }", span="100-100"];
m8_48 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label=Exception, span="113-113"];
m8_50 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.ToString()", span="76-76"];
m8_19 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection)", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection)", span="35-35"];
m8_57 [cluster="System.Text.StringBuilder.Append(string)", file="SqlServerStorage.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m8_53 [cluster="Unk.ToDictionary", file="SqlServerStorage.cs", label="Entry Unk.ToDictionary", span=""];
m8_58 [cluster="string.Format(string, object)", file="SqlServerStorage.cs", label="Entry string.Format(string, object)", span="0-0"];
m8_33 [cluster="Unk.Info", file="SqlServerStorage.cs", label="Entry Unk.Info", span=""];
m8_28 [cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", span="69-69"];
m8_29 [cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs", label="logger.Info(''Using the following options for SQL Server job storage:'')", span="71-71"];
m8_30 [cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs", label="logger.InfoFormat(''    Queue poll interval: {0}.'', _options.QueuePollInterval)", span="72-72"];
m8_31 [cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs", label="logger.InfoFormat(''    Invisibility timeout: {0}.'', _options.InvisibilityTimeout)", span="73-73"];
m8_32 [cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", span="69-69"];
m8_54 [cluster="System.Text.StringBuilder.StringBuilder()", file="SqlServerStorage.cs", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
m8_77 [cluster="Unk.Open", file="SqlServerStorage.cs", label="Entry Unk.Open", span=""];
m8_34 [cluster="Unk.InfoFormat", file="SqlServerStorage.cs", label="Entry Unk.InfoFormat", span=""];
m8_65 [cluster="Unk.Trim", file="SqlServerStorage.cs", label="Entry Unk.Trim", span=""];
m8_76 [cluster="SqlConnection.cstr", file="SqlServerStorage.cs", label="Entry SqlConnection.cstr", span=""];
m8_56 [cluster="Unk.AppendFormat", file="SqlServerStorage.cs", label="Entry Unk.AppendFormat", span=""];
m8_16 [cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="54-54"];
m8_17 [cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="SqlServerStorage.cs", label="return new SqlServerMonitoringApi(CreateAndOpenConnection());", span="56-56"];
m8_18 [cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="54-54"];
m8_27 [cluster="HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", span="38-38"];
m8_25 [cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerStorage.cs", label="yield return new ExpirationManager(this);", span="66-66"];
m8_2 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="37-37"];
m8_3 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="connectionString == null", span="39-39"];
m8_5 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="options == null", span="40-40"];
m8_7 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="_options = options", span="42-42"];
m8_8 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="_connectionString = connectionString", span="43-43"];
m8_9 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="options.PrepareSchemaIfNecessary", span="45-45"];
m8_4 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''connectionString'');", span="39-39"];
m8_6 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''options'');", span="40-40"];
m8_10 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="var connection = CreateAndOpenConnection()", span="47-47"];
m8_11 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="SqlServerObjectsInstaller.Install(connection)", span="49-49"];
m8_12 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="37-37"];
m8_51 [cluster="string.Split(char[], System.StringSplitOptions)", file="SqlServerStorage.cs", label="Entry string.Split(char[], System.StringSplitOptions)", span="0-0"];
m8_69 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="85-85"];
m8_59 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="83-83"];
m8_62 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="84-84"];
m8_66 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="85-85"];
m8_60 [cluster="lambda expression", file="SqlServerStorage.cs", label="x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries)", span="83-83"];
m8_61 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="83-83"];
m8_63 [cluster="lambda expression", file="SqlServerStorage.cs", label="new { Key = x[0].Trim(), Value = x[1].Trim() }", span="84-84"];
m8_64 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="84-84"];
m8_67 [cluster="lambda expression", file="SqlServerStorage.cs", label="x.Key", span="85-85"];
m8_68 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="85-85"];
m8_70 [cluster="lambda expression", file="SqlServerStorage.cs", label="x.Value", span="85-85"];
m8_71 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="85-85"];
m8_52 [cluster="Unk.Select", file="SqlServerStorage.cs", label="Entry Unk.Select", span=""];
m8_24 [cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerStorage.GetComponents()", span="64-64"];
m8_26 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", span="34-34"];
m8_15 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", span="34-34"];
m8_0 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="32-32"];
m8_1 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="32-32"];
m8_14 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="119-119"];
m8_72 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="var connection = new SqlConnection(_connectionString)", span="121-121"];
m8_73 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="connection.Open()", span="122-122"];
m8_74 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="return connection;", span="124-124"];
m8_75 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="119-119"];
m8_55 [cluster="Unk.ContainsKey", file="SqlServerStorage.cs", label="Entry Unk.ContainsKey", span=""];
m8_78 [file="SqlServerStorage.cs", label="HangFire.SqlServer.SqlServerStorage", span=""];
m9_19 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerStorageOptions.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m9_7 [cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="SqlServerStorageOptions.cs", label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="27-27"];
m9_20 [cluster="HangFire.States.FailedState.Serialize()", file="SqlServerStorageOptions.cs", label="Entry HangFire.States.FailedState.Serialize()", span="40-40"];
m9_21 [cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", file="SqlServerStorageOptions.cs", label="Entry HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", span="9-9"];
m9_13 [cluster="Unk.Equal", file="SqlServerStorageOptions.cs", label="Entry Unk.Equal", span=""];
m9_12 [cluster="System.Exception.Exception()", file="SqlServerStorageOptions.cs", label="Entry System.Exception.Exception()", span="0-0"];
m9_8 [cluster="HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", file="SqlServerStorageOptions.cs", label="Entry HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", span="17-17"];
m9_9 [cluster="HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", file="SqlServerStorageOptions.cs", label="var state = new FailedState(new Exception())", span="19-19"];
m9_10 [cluster="HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", file="SqlServerStorageOptions.cs", label="Assert.Equal(FailedState.StateName, state.Name)", span="20-20"];
m9_11 [cluster="HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", file="SqlServerStorageOptions.cs", label="Exit HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", span="17-17"];
m9_0 [cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", file="SqlServerStorageOptions.cs", label="Entry HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", span="10-10"];
m9_1 [cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", file="SqlServerStorageOptions.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => new FailedState(null))", span="12-13"];
m9_2 [cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", file="SqlServerStorageOptions.cs", label="Exit HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", span="10-10"];
m9_4 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Entry lambda expression", span="13-13"];
m9_5 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="new FailedState(null)", span="13-13"];
m9_6 [cluster="lambda expression", file="SqlServerStorageOptions.cs", label="Exit lambda expression", span="13-13"];
m9_18 [cluster="System.Exception.Exception(string)", file="SqlServerStorageOptions.cs", label="Entry System.Exception.Exception(string)", span="0-0"];
m9_14 [cluster="HangFire.Core.Tests.States.FailedStateFacts.GetStateData_ReturnsCorrectData()", file="SqlServerStorageOptions.cs", label="Entry HangFire.Core.Tests.States.FailedStateFacts.GetStateData_ReturnsCorrectData()", span="24-24"];
m9_15 [cluster="HangFire.Core.Tests.States.FailedStateFacts.GetStateData_ReturnsCorrectData()", file="SqlServerStorageOptions.cs", label="var state = new FailedState(new Exception(''Message''))", span="26-26"];
m9_16 [cluster="HangFire.Core.Tests.States.FailedStateFacts.GetStateData_ReturnsCorrectData()", file="SqlServerStorageOptions.cs", label="DictionaryAssert.ContainsFollowingItems(\r\n                new Dictionary<string, string>\r\n                {\r\n                    { ''FailedAt'', ''<UtcNow timestamp>'' },\r\n                    { ''ExceptionType'', ''System.Exception'' },\r\n                    { ''ExceptionMessage'', ''Message'' },\r\n                    { ''ExceptionDetails'', ''<Non-empty>'' }\r\n                }, \r\n                state.Serialize())", span="28-36"];
m9_17 [cluster="HangFire.Core.Tests.States.FailedStateFacts.GetStateData_ReturnsCorrectData()", file="SqlServerStorageOptions.cs", label="Exit HangFire.Core.Tests.States.FailedStateFacts.GetStateData_ReturnsCorrectData()", span="24-24"];
m10_4 [cluster="Hangfire.Dashboard.OwinRequestExtensions.ReadFormSafeAsync(IOwinContext)", file="SqlServerWriteOnlyTransaction.cs", label="context.Environment.Remove(FormCollectionKey)", span="31-31"];
m10_5 [cluster="Hangfire.Dashboard.OwinRequestExtensions.ReadFormSafeAsync(IOwinContext)", file="SqlServerWriteOnlyTransaction.cs", label="context.Request.Body.CanSeek", span="36-36"];
m10_6 [cluster="Hangfire.Dashboard.OwinRequestExtensions.ReadFormSafeAsync(IOwinContext)", file="SqlServerWriteOnlyTransaction.cs", label="context.Request.Body.Seek(0L, SeekOrigin.Begin)", span="38-38"];
m10_108 [cluster="int.ToString(System.IFormatProvider)", file="SqlServerWriteOnlyTransaction.cs", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
m10_41 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m10_166 [cluster="Unk.FromNullableStringTimestamp", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.FromNullableStringTimestamp", span=""];
m10_16 [cluster="HangFire.Redis.RedisJobFetcher.RedisJobFetcher(IRedisClient, System.Collections.Generic.IEnumerable<string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisJobFetcher.RedisJobFetcher(IRedisClient, System.Collections.Generic.IEnumerable<string>, System.TimeSpan)", span="17-17"];
m10_72 [cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string)", span="4-4"];
m10_11 [cluster="RedisWriteOnlyTransaction.cstr", file="SqlServerWriteOnlyTransaction.cs", label="Entry RedisWriteOnlyTransaction.cstr", span=""];
m10_49 [cluster="Unk.SetRangeInHash", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.SetRangeInHash", span=""];
m10_13 [cluster="HangFire.Redis.RedisConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", span="33-33"];
m10_14 [cluster="HangFire.Redis.RedisConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="return new RedisJobFetcher(_redis, queueNames, TimeSpan.FromSeconds(1));", prediction=15, span="35-35"];
m10_15 [cluster="HangFire.Redis.RedisConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", span="33-33"];
m10_22 [cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m10_0 [cluster="HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", span="15-15"];
m10_1 [cluster="HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", file="SqlServerWriteOnlyTransaction.cs", label="_redis = redis", span="17-17"];
m10_2 [cluster="HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", file="SqlServerWriteOnlyTransaction.cs", label="Storage = storage", span="18-18"];
m10_3 [cluster="HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", span="15-15"];
m10_7 [cluster="Unk.Dispose", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Dispose", span=""];
m10_8 [cluster="HangFire.Redis.RedisConnection.CreateWriteTransaction()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.CreateWriteTransaction()", span="28-28"];
m10_70 [cluster="Unk.GetAllEntriesFromHash", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m10_165 [cluster="Unk.FromStringTimestamp", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.FromStringTimestamp", span=""];
m10_133 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", span="197-197"];
m10_136 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="var utcNow = DateTime.UtcNow", prediction=16, span="202-202"];
m10_135 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="var heartbeats = new Dictionary<string, Tuple<DateTime, DateTime?>>()", span="200-200"];
m10_137 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="var pipeline = _redis.CreatePipeline()", span="204-204"];
m10_145 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="utcNow > maxTime.Add(timeOut)", span="230-230"];
m10_134 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="var serverNames = _redis.GetAllItemsFromSet(RedisStorage.Prefix + ''servers'')", span="199-199"];
m10_146 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="RemoveServer(_redis, heartbeat.Key)", span="232-232"];
m10_140 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat''),\r\n                        x => heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1]))))", span="210-218"];
m10_143 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label=heartbeats, span="225-225"];
m10_138 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label=serverNames, span="206-206"];
m10_141 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="pipeline.Flush()", span="221-221"];
m10_144 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="var maxTime = new DateTime(\r\n                    Math.Max(heartbeat.Value.Item1.Ticks, (heartbeat.Value.Item2 ?? DateTime.MinValue).Ticks))", span="227-228"];
m10_147 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="removedServerCount++", span="233-233"];
m10_139 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="var name = serverName", span="208-208"];
m10_142 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="var removedServerCount = 0", span="224-224"];
m10_148 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="return removedServerCount;", span="237-237"];
m10_149 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", span="197-197"];
m10_77 [cluster="Unk.SetEntryInHash", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.SetEntryInHash", span=""];
m10_103 [cluster="Unk.AddItemToSet", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.AddItemToSet", span=""];
m10_21 [cluster="string.Format(string, object)", file="SqlServerWriteOnlyTransaction.cs", label="Entry string.Format(string, object)", span="0-0"];
m10_181 [cluster="Unk.RemoveEntryFromHash", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.RemoveEntryFromHash", span=""];
m10_130 [cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.Heartbeat(string)", span="189-189"];
m10_131 [cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="SqlServerWriteOnlyTransaction.cs", label="_redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                ''Heartbeat'',\r\n                JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="191-194"];
m10_132 [cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.Heartbeat(string)", span="189-189"];
m10_129 [cluster="Unk.RemoveEntry", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.RemoveEntry", span=""];
m10_119 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="SqlServerWriteOnlyTransaction.cs", label="transaction.QueueCommand(x => x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId)))", span="181-183"];
m10_116 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", span="173-173"];
m10_117 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="SqlServerWriteOnlyTransaction.cs", label="var transaction = redis.CreateTransaction()", span="175-175"];
m10_118 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="SqlServerWriteOnlyTransaction.cs", label="transaction.QueueCommand(x => x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId))", span="177-179"];
m10_120 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="SqlServerWriteOnlyTransaction.cs", label="transaction.Commit()", span="185-185"];
m10_121 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", span="173-173"];
m10_86 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, long, long)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, long, long)", span="134-134"];
m10_87 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, long, long)", file="SqlServerWriteOnlyTransaction.cs", label="return _redis.GetRangeFromSortedSetByLowestScore(\r\n                RedisStorage.Prefix + key, fromScore, toScore, 0, 1)\r\n                .FirstOrDefault();", span="136-138"];
m10_88 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, long, long)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, long, long)", span="134-134"];
m10_9 [cluster="Unk.ContainsKey", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.ContainsKey", span=""];
m10_10 [cluster="Unk.Remove", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Remove", span=""];
m10_12 [cluster="Unk.CreateTransaction", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.CreateTransaction", span=""];
m10_17 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m10_78 [cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.GetJobParameter(string, string)", span="122-122"];
m10_79 [cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="return _redis.GetValueFromHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                name);", span="124-126"];
m10_80 [cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.GetJobParameter(string, string)", span="122-122"];
m10_53 [cluster="Unk.ExpireEntryIn", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.ExpireEntryIn", span=""];
m10_152 [cluster="Unk.Flush", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Flush", span=""];
m10_39 [cluster="System.Guid.ToString()", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Guid.ToString()", span="0-0"];
m10_167 [cluster="Unk.Add", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Add", span=""];
m10_54 [cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", span="78-78"];
m10_55 [cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs", label="var jobData = _redis.GetAllEntriesFromHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id))", span="80-81"];
m10_56 [cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs", label="jobData.Count == 0", span="83-83"];
m10_61 [cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs", label="jobData.ContainsKey(''Type'')", span="89-89"];
m10_62 [cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs", label="type = jobData[''Type'']", span="91-91"];
m10_63 [cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs", label="jobData.ContainsKey(''Method'')", span="93-93"];
m10_64 [cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs", label="method = jobData[''Method'']", span="95-95"];
m10_65 [cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs", label="jobData.ContainsKey(''ParameterTypes'')", span="97-97"];
m10_66 [cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs", label="parameterTypes = jobData[''ParameterTypes'']", span="99-99"];
m10_68 [cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs", label="return new StateAndInvocationData\r\n            {\r\n                InvocationData = invocationData,\r\n                State = jobData.ContainsKey(''State'') ? jobData[''State''] : null,\r\n            };", span="107-111"];
m10_58 [cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs", label="string type = null", span="85-85"];
m10_59 [cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs", label="string method = null", span="86-86"];
m10_60 [cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs", label="string parameterTypes = null", span="87-87"];
m10_57 [cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs", label="return null;", span="83-83"];
m10_67 [cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs", label="var invocationData = new InvocationData(\r\n                type,\r\n                method,\r\n                parameterTypes)", span="102-105"];
m10_69 [cluster="HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.GetJobStateAndInvocationData(string)", span="78-78"];
m10_155 [cluster="System.DateTime.Add(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m10_107 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m10_171 [cluster="HangFire.Redis.RedisConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="SqlServerWriteOnlyTransaction.cs", label="transaction.QueueCommand(x => x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    ''Checked''))", span="255-257"];
m10_85 [cluster="HangFire.Redis.RedisConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.RemoveFromDequeuedList(IRedisClient, string, string)", span="240-240"];
m10_168 [cluster="HangFire.Redis.RedisConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="SqlServerWriteOnlyTransaction.cs", label="var transaction = redis.CreateTransaction()", span="245-245"];
m10_169 [cluster="HangFire.Redis.RedisConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="SqlServerWriteOnlyTransaction.cs", label="transaction.QueueCommand(x => x.RemoveItemFromList(\r\n                    String.Format(RedisStorage.Prefix + ''queue:{0}:dequeued'', queue),\r\n                    jobId,\r\n                    -1))", span="247-250"];
m10_170 [cluster="HangFire.Redis.RedisConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="SqlServerWriteOnlyTransaction.cs", label="transaction.QueueCommand(x => x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    ''Fetched''))", span="252-254"];
m10_172 [cluster="HangFire.Redis.RedisConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="SqlServerWriteOnlyTransaction.cs", label="transaction.Commit()", span="259-259"];
m10_173 [cluster="HangFire.Redis.RedisConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.RemoveFromDequeuedList(IRedisClient, string, string)", span="240-240"];
m10_164 [cluster="System.Tuple<T1, T2>.Tuple(T1, T2)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Tuple<T1, T2>.Tuple(T1, T2)", span="0-0"];
m10_40 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="0-0"];
m10_112 [cluster="Unk.AddItemToList", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.AddItemToList", span=""];
m10_91 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", span="141-141"];
m10_92 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs", label="var transaction = _redis.CreateTransaction()", span="143-143"];
m10_93 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs", label="transaction.QueueCommand(x => x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId))", span="145-146"];
m10_94 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs", label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', workerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        }))", span="148-154"];
m10_97 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs", label="transaction.QueueCommand(x => x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1))", span="159-161"];
m10_98 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs", label="transaction.Commit()", span="164-164"];
m10_96 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs", label="var queue1 = queue", span="158-158"];
m10_95 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs", label=queues, span="156-156"];
m10_99 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", span="141-141"];
m10_153 [cluster="System.DateTime.DateTime(long)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.DateTime.DateTime(long)", span="0-0"];
m10_113 [cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.RemoveServer(string)", span="168-168"];
m10_114 [cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="SqlServerWriteOnlyTransaction.cs", label="RemoveServer(_redis, serverId)", span="170-170"];
m10_115 [cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.RemoveServer(string)", span="168-168"];
m10_24 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="45-45"];
m10_32 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="var transaction = _redis.CreateTransaction()", span="61-61"];
m10_31 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="storedParameters.Add(''CreatedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="59-59"];
m10_33 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    storedParameters))", span="63-65"];
m10_34 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn))", span="67-69"];
m10_35 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="transaction.Commit()", span="72-72"];
m10_25 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="var jobId = Guid.NewGuid().ToString()", span="51-51"];
m10_26 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="var storedParameters = new Dictionary<string, string>(parameters)", span="54-54"];
m10_30 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="storedParameters.Add(''Arguments'', JobHelper.ToJson(arguments))", span="58-58"];
m10_36 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="return jobId;", span="75-75"];
m10_27 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="storedParameters.Add(''Type'', invocationData.Type)", span="55-55"];
m10_28 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="storedParameters.Add(''Method'', invocationData.Method)", span="56-56"];
m10_29 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="storedParameters.Add(''ParameterTypes'', invocationData.ParameterTypes)", span="57-57"];
m10_37 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="45-45"];
m10_154 [cluster="System.Math.Max(long, long)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Math.Max(long, long)", span="0-0"];
m10_125 [cluster="Unk.RemoveItemFromSet", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.RemoveItemFromSet", span=""];
m10_122 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="177-179"];
m10_51 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn)", span="67-69"];
m10_47 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    storedParameters)", span="63-65"];
m10_105 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', workerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        })", span="148-154"];
m10_110 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1)", span="159-161"];
m10_127 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId))", span="181-183"];
m10_175 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.RemoveItemFromList(\r\n                    String.Format(RedisStorage.Prefix + ''queue:{0}:dequeued'', queue),\r\n                    jobId,\r\n                    -1)", span="247-250"];
m10_179 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    ''Fetched'')", span="252-254"];
m10_183 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    ''Checked'')", span="255-257"];
m10_162 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1])))", span="214-218"];
m10_50 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="67-69"];
m10_52 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="67-69"];
m10_46 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="63-65"];
m10_48 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="63-65"];
m10_104 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="148-154"];
m10_106 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="148-154"];
m10_109 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="159-161"];
m10_111 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="159-161"];
m10_126 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="181-183"];
m10_128 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="181-183"];
m10_174 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="247-250"];
m10_176 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="247-250"];
m10_178 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="252-254"];
m10_180 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="252-254"];
m10_182 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="255-257"];
m10_184 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="255-257"];
m10_156 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="211-213"];
m10_161 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="214-218"];
m10_163 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="214-218"];
m10_101 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId)", span="145-146"];
m10_100 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="145-146"];
m10_123 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId)", span="177-179"];
m10_157 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat'')", span="211-213"];
m10_158 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="211-213"];
m10_102 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="145-146"];
m10_124 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="177-179"];
m10_43 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46"];
m10_90 [cluster="Unk.FirstOrDefault", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.FirstOrDefault", span=""];
m10_18 [cluster="HangFire.Redis.RedisConnection.AcquireJobLock(string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.AcquireJobLock(string)", span="38-38"];
m10_19 [cluster="HangFire.Redis.RedisConnection.AcquireJobLock(string)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="return _redis.AcquireLock(\r\n                RedisStorage.Prefix + String.Format(''job:{0}:state-lock'', jobId),\r\n                TimeSpan.FromMinutes(1));", prediction=15, span="40-42"];
m10_20 [cluster="HangFire.Redis.RedisConnection.AcquireJobLock(string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.AcquireJobLock(string)", span="38-38"];
m10_151 [cluster="Unk.CreatePipeline", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.CreatePipeline", span=""];
m10_74 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", span="114-114"];
m10_75 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="_redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                name,\r\n                value)", prediction=15, span="116-119"];
m10_76 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", span="114-114"];
m10_177 [cluster="Unk.RemoveItemFromList", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.RemoveItemFromList", span=""];
m10_38 [cluster="System.Guid.NewGuid()", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Guid.NewGuid()", span="0-0"];
m10_81 [cluster="Unk.GetValueFromHash", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.GetValueFromHash", span=""];
m10_45 [cluster="Unk.Commit", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Commit", span=""];
m10_150 [cluster="Unk.GetAllItemsFromSet", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.GetAllItemsFromSet", span=""];
m10_82 [cluster="HangFire.Redis.RedisConnection.CompleteJob(HangFire.Server.JobPayload)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.CompleteJob(HangFire.Server.JobPayload)", span="129-129"];
m10_83 [cluster="HangFire.Redis.RedisConnection.CompleteJob(HangFire.Server.JobPayload)", file="SqlServerWriteOnlyTransaction.cs", label="RedisConnection.RemoveFromDequeuedList(_redis, payload.Queue, payload.Id)", span="131-131"];
m10_84 [cluster="HangFire.Redis.RedisConnection.CompleteJob(HangFire.Server.JobPayload)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.CompleteJob(HangFire.Server.JobPayload)", span="129-129"];
m10_42 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m10_160 [cluster="Unk.GetValuesFromHash", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.GetValuesFromHash", span=""];
m10_159 [cluster="Unk.Format", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Format", span=""];
m10_89 [cluster="Unk.GetRangeFromSortedSetByLowestScore", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.GetRangeFromSortedSetByLowestScore", span=""];
m10_44 [cluster="Unk.QueueCommand", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.QueueCommand", span=""];
m10_73 [cluster="HangFire.Storage.StateAndInvocationData.StateAndInvocationData()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Storage.StateAndInvocationData.StateAndInvocationData()", span="2-2"];
m10_23 [cluster="Unk.AcquireLock", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.AcquireLock", span=""];
m10_71 [cluster="Unk.ContainsKey", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.ContainsKey", span=""];
m10_185 [file="SqlServerWriteOnlyTransaction.cs", label="HangFire.Redis.RedisConnection", span=""];
m10_186 [file="SqlServerWriteOnlyTransaction.cs", label=jobId, span=""];
m10_188 [file="SqlServerWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m10_187 [file="SqlServerWriteOnlyTransaction.cs", label=storedParameters, span=""];
m10_189 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m10_190 [file="SqlServerWriteOnlyTransaction.cs", label=int, span=""];
m10_191 [file="SqlServerWriteOnlyTransaction.cs", label=queue1, span=""];
m10_192 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m10_195 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m10_196 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m10_193 [file="SqlServerWriteOnlyTransaction.cs", label=name, span=""];
m10_194 [file="SqlServerWriteOnlyTransaction.cs", label=heartbeats, span=""];
m11_25 [cluster="Unk.OnScenarioStart", file="WorkerFacts.cs", label="Entry Unk.OnScenarioStart", span=""];
m11_29 [cluster="Unk.CollectScenarioErrors", file="WorkerFacts.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m11_21 [cluster="Unk.OnScenarioEnd", file="WorkerFacts.cs", label="Entry Unk.OnScenarioEnd", span=""];
m11_9 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureTearDown()", file="WorkerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureTearDown()", span="40-40"];
m11_10 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureTearDown()", file="WorkerFacts.cs", label="testRunner.OnFeatureEnd()", span="42-42"];
m11_11 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureTearDown()", file="WorkerFacts.cs", label="testRunner = null", span="43-43"];
m11_12 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureTearDown()", file="WorkerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureTearDown()", span="40-40"];
m11_65 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", span="153-153"];
m11_66 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out job by the \'checked\' flag in the \'Fetched\' state should not be re-queue'' +\r\n                    ''d'', new string[] {\r\n                        ''checkpoint-2''})", span="155-157"];
m11_67 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="159-159"];
m11_68 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="161-161"];
m11_69 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs", label="testRunner.And(''it was checked a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="163-163"];
m11_70 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs", label="testRunner.And(''it was fetched a millisecond ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="165-165"];
m11_71 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="167-167"];
m11_72 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs", label="testRunner.Then(''the dequeued jobs list still contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="169-169"];
m11_73 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs", label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="171-171"];
m11_74 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs", label="testRunner.And(''the job has the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="173-173"];
m11_75 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs", label="testRunner.And(''the job has the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="175-175"];
m11_76 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs", label="this.ScenarioCleanup()", span="177-177"];
m11_77 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", span="153-153"];
m11_53 [cluster="Unk.And", file="WorkerFacts.cs", label="Entry Unk.And", span=""];
m11_112 [cluster="Unk.But", file="WorkerFacts.cs", label="Entry Unk.But", span=""];
m11_5 [cluster="Unk.GetTestRunner", file="WorkerFacts.cs", label="Entry Unk.GetTestRunner", span=""];
m11_78 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", span="185-185"];
m11_79 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out jobs in the \'Fetched\' state should be re-queued'', new string[] {\r\n                        ''checkpoint-2''})", span="187-188"];
m11_80 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="190-190"];
m11_81 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="192-192"];
m11_82 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="194-194"];
m11_83 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="196-196"];
m11_84 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs", label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="198-198"];
m11_85 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs", label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="200-200"];
m11_86 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs", label="testRunner.And(''the job does not have the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="202-202"];
m11_87 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs", label="testRunner.And(''the job does not have the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="204-204"];
m11_88 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs", label="this.ScenarioCleanup()", span="206-206"];
m11_89 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", span="185-185"];
m11_26 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", file="WorkerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", span="67-67"];
m11_27 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", file="WorkerFacts.cs", label="testRunner.CollectScenarioErrors()", span="69-69"];
m11_28 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", file="WorkerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", span="67-67"];
m11_22 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="WorkerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="62-62"];
m11_23 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="WorkerFacts.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="64-64"];
m11_24 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="WorkerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="62-62"];
m11_0 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="WorkerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m11_1 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="WorkerFacts.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
m11_2 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="WorkerFacts.cs", label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Re-queueing of timed out jobs'', ''\r\n  As an Administrator, I want the jobs to recovered automatically \r\n  after a s'' +\r\n                    ''erver failure, which took them into the processing.'', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-35"];
m11_3 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="WorkerFacts.cs", label="testRunner.OnFeatureStart(featureInfo)", span="36-36"];
m11_4 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="WorkerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m11_14 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="WorkerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", span="47-47"];
m11_15 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="WorkerFacts.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Re-queueing of timed out jobs''))", span="49-50"];
m11_16 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="WorkerFacts.cs", label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(null)", span="52-52"];
m11_17 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="WorkerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", span="47-47"];
m11_90 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", span="215-215"];
m11_91 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Job\'s state is changed to the Enqueued when the job is being timed out after proc'' +\r\n                    ''eeding to the Processing state'', new string[] {\r\n                        ''checkpoint-3''})", span="217-219"];
m11_92 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="221-221"];
m11_93 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="223-223"];
m11_94 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs", label="testRunner.And(''its state is Processing'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="225-225"];
m11_95 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="227-227"];
m11_96 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="229-229"];
m11_97 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs", label="testRunner.Then(''the job moved to the Enqueued state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="231-231"];
m11_98 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs", label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="233-233"];
m11_99 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs", label="this.ScenarioCleanup()", span="235-235"];
m11_100 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", span="215-215"];
m11_13 [cluster="Unk.OnFeatureEnd", file="WorkerFacts.cs", label="Entry Unk.OnFeatureEnd", span=""];
m11_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="WorkerFacts.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m11_40 [cluster="Unk.When", file="WorkerFacts.cs", label="Entry Unk.When", span=""];
m11_122 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", span="291-291"];
m11_123 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''When the server could not find the job\'s type, the job is moved to the Failed sta'' +\r\n                    ''te'', ((string[])(null)))", span="293-294"];
m11_124 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="296-296"];
m11_125 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerFacts.cs", label="testRunner.Given(''a dequeued job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="298-298"];
m11_126 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerFacts.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="300-300"];
m11_127 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerFacts.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="302-302"];
m11_128 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerFacts.cs", label="testRunner.Then(''the job moved to the Failed state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="304-304"];
m11_129 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerFacts.cs", label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="306-306"];
m11_130 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerFacts.cs", label="this.ScenarioCleanup()", span="308-308"];
m11_131 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", span="291-291"];
m11_101 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", span="243-243"];
m11_102 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out job in the Succeeded state does not move to the Enqueued state'', new string[] {\r\n                        ''checkpoint-4''})", span="245-246"];
m11_103 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="248-248"];
m11_104 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="250-250"];
m11_105 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs", label="testRunner.And(''its state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="252-252"];
m11_106 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="254-254"];
m11_107 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="256-256"];
m11_108 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs", label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="258-258"];
m11_109 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs", label="testRunner.But(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="260-260"];
m11_110 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs", label="this.ScenarioCleanup()", span="262-262"];
m11_111 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", span="243-243"];
m11_42 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", span="98-98"];
m11_43 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Non-timed out job in the \'Checked\' state should not be requeued'', new string[] {\r\n                        ''checkpoint-1-2''})", span="100-101"];
m11_44 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="103-103"];
m11_45 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="105-105"];
m11_46 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs", label="testRunner.And(''it was checked a millisecond ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="107-107"];
m11_47 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="109-109"];
m11_48 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs", label="testRunner.Then(''the dequeued jobs list still contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="111-111"];
m11_49 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs", label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="113-113"];
m11_50 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs", label="testRunner.And(''the job has the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="115-115"];
m11_51 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs", label="this.ScenarioCleanup()", span="117-117"];
m11_52 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", span="98-98"];
m11_54 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", span="125-125"];
m11_55 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed job in the \'Checked\' state should be requeued'', new string[] {\r\n                        ''checkpoint-1-2''})", span="127-128"];
m11_56 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="130-130"];
m11_57 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="132-132"];
m11_58 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs", label="testRunner.And(''it was checked a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="134-134"];
m11_59 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="136-136"];
m11_60 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs", label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="138-138"];
m11_61 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs", label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="140-140"];
m11_62 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs", label="testRunner.And(''the job does not have the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="142-142"];
m11_63 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs", label="this.ScenarioCleanup()", span="144-144"];
m11_64 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", span="125-125"];
m11_38 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="WorkerFacts.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m11_30 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", span="77-77"];
m11_31 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''A job in the implicit \'Dequeued\' state moved to the \'Checked\' state'', new string[] {\r\n                        ''checkpoint-1-1''})", span="79-80"];
m11_32 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="82-82"];
m11_33 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerFacts.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="84-84"];
m11_34 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerFacts.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="86-86"];
m11_35 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerFacts.cs", label="testRunner.Then(''it marks the job as \'checked\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="88-88"];
m11_36 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerFacts.cs", label="this.ScenarioCleanup()", span="90-90"];
m11_37 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", span="77-77"];
m11_41 [cluster="Unk.Then", file="WorkerFacts.cs", label="Entry Unk.Then", span=""];
m11_39 [cluster="Unk.Given", file="WorkerFacts.cs", label="Entry Unk.Given", span=""];
m11_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="WorkerFacts.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m11_18 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioTearDown()", file="WorkerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioTearDown()", span="57-57"];
m11_19 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioTearDown()", file="WorkerFacts.cs", label="testRunner.OnScenarioEnd()", span="59-59"];
m11_20 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioTearDown()", file="WorkerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioTearDown()", span="57-57"];
m11_132 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", span="315-315"];
m11_133 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Succeeded job of non-existing type will not be moved to the failed state'', ((string[])(null)))", span="317-317"];
m11_134 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="319-319"];
m11_135 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs", label="testRunner.Given(''a dequeued job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="321-321"];
m11_136 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs", label="testRunner.And(''its state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="323-323"];
m11_137 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="325-325"];
m11_138 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="327-327"];
m11_139 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs", label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="329-329"];
m11_140 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs", label="testRunner.But(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="331-331"];
m11_141 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs", label="this.ScenarioCleanup()", span="333-333"];
m11_142 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", span="315-315"];
m11_8 [cluster="Unk.OnFeatureStart", file="WorkerFacts.cs", label="Entry Unk.OnFeatureStart", span=""];
m11_113 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", span="269-269"];
m11_114 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Job is being enqueued on its actual queue after timing out'', ((string[])(null)))", span="271-271"];
m11_115 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="273-273"];
m11_116 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerFacts.cs", label="testRunner.And(''a dequeued job from the \'test\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="275-275"];
m11_117 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerFacts.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="277-277"];
m11_118 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerFacts.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="279-279"];
m11_119 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerFacts.cs", label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="281-281"];
m11_120 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerFacts.cs", label="this.ScenarioCleanup()", span="283-283"];
m11_121 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", span="269-269"];
m11_143 [file="WorkerFacts.cs", label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", span=""];
m12_26 [cluster="Unk.GetTestJob", file="WriteTransactionFacts.cs", label="Entry Unk.GetTestJob", span=""];
m12_375 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="445-445"];
m12_376 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="447-458"];
m12_377 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="445-445"];
m12_248 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="153-153"];
m12_432 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="520-520"];
m12_433 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="522-533"];
m12_434 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="520-520"];
m12_0 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", span="15-15"];
m12_2 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", span="15-15"];
m12_348 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="179-179"];
m12_12 [cluster="Unk.UseConnection", file="WriteTransactionFacts.cs", label="Entry Unk.UseConnection", span=""];
m12_299 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="345-345"];
m12_300 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="347-358"];
m12_301 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="345-345"];
m12_82 [cluster="Unk.Equal", file="WriteTransactionFacts.cs", label="Entry Unk.Equal", span=""];
m12_286 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="158-158"];
m12_179 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="132-132"];
m12_96 [cluster="Unk.SetJobState", file="WriteTransactionFacts.cs", label="Entry Unk.SetJobState", span=""];
m12_409 [cluster="Unk.ToArray", file="WriteTransactionFacts.cs", label="Entry Unk.ToArray", span=""];
m12_235 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="264-264"];
m12_236 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(0.0, record.Score, 2);\r\n            })", span="266-275"];
m12_237 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="264-264"];
m12_34 [cluster="Unk.ExpireJob", file="WriteTransactionFacts.cs", label="Entry Unk.ExpireJob", span=""];
m12_3 [cluster="Unk.>", file="WriteTransactionFacts.cs", label="Entry Unk.>", span=""];
m12_131 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", span="139-139"];
m12_133 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", span="139-139"];
m12_444 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="537-537"];
m12_445 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="539-550"];
m12_446 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="537-537"];
m12_473 [cluster="System.Action<T>.Invoke(T)", file="WriteTransactionFacts.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m12_145 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", span="152-152"];
m12_146 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", file="WriteTransactionFacts.cs", label="return connection\r\n                .Query(''select * from HangFire.Job where id = @id'', new { id = jobId })\r\n                .Single();", span="154-156"];
m12_147 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", span="152-152"];
m12_399 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="479-479"];
m12_400 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                });\r\n\r\n                var records = sql.Query(''select * from HangFire.List'').ToArray();\r\n\r\n                Assert.Equal(2, records.Length);\r\n                Assert.Equal(''1'', records[0].Value);\r\n                Assert.Equal(''2'', records[1].Value);\r\n            })", span="481-497"];
m12_401 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="479-479"];
m12_417 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="193-193"];
m12_22 [cluster="Unk.Query", file="WriteTransactionFacts.cs", label="Entry Unk.Query", span=""];
m12_148 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="160-160"];
m12_149 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="162-171"];
m12_150 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="160-160"];
m12_33 [cluster="System.TimeSpan.FromDays(double)", file="WriteTransactionFacts.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m12_97 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="106-106"];
m12_98 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="WriteTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="108-111"];
m12_99 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="113-135"];
m12_100 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="106-106"];
m12_206 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="227-227"];
m12_207 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime)record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="229-243"];
m12_208 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="227-227"];
m12_205 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="139-139"];
m12_222 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="146-146"];
m12_27 [cluster="System.DateTime.AddDays(double)", file="WriteTransactionFacts.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m12_24 [cluster="Unk.ToString", file="WriteTransactionFacts.cs", label="Entry Unk.ToString", span=""];
m12_130 [cluster="Unk.AddJobState", file="WriteTransactionFacts.cs", label="Entry Unk.AddJobState", span=""];
m12_223 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="247-247"];
m12_224 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="249-260"];
m12_225 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="247-247"];
m12_48 [cluster="Unk.NotNull", file="WriteTransactionFacts.cs", label="Entry Unk.NotNull", span=""];
m12_387 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="462-462"];
m12_388 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="464-475"];
m12_389 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="462-462"];
m12_81 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="WriteTransactionFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m12_162 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="175-175"];
m12_163 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime) record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="177-191"];
m12_164 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="175-175"];
m12_311 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="172-172"];
m12_25 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", span="578-578"];
m12_475 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="WriteTransactionFacts.cs", label="action(transaction)", span="584-584"];
m12_476 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="WriteTransactionFacts.cs", label="transaction.Commit()", span="585-585"];
m12_477 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", span="578-578"];
m12_79 [cluster="Unk.Setup", file="WriteTransactionFacts.cs", label="Entry Unk.Setup", span=""];
m12_324 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="379-379"];
m12_325 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="381-392"];
m12_326 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="379-379"];
m12_29 [cluster="Unk.Null", file="WriteTransactionFacts.cs", label="Entry Unk.Null", span=""];
m12_374 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="186-186"];
m12_180 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="195-195"];
m12_181 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(2, recordCount);\r\n            })", span="197-208"];
m12_182 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="195-195"];
m12_92 [cluster="Unk.SerializeData", file="WriteTransactionFacts.cs", label="Entry Unk.SerializeData", span=""];
m12_478 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="45-45"];
m12_361 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="427-427"];
m12_362 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="429-441"];
m12_363 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="427-427"];
m12_35 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="45-45"];
m12_36 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="WriteTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues ('', '', getutcdate(), getutcdate())\r\nselect scope_identity() as Id''", span="47-50"];
m12_37 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.PersistJob(jobId));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.ExpireAt);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.NotNull(anotherJob.ExpireAt);\r\n            })", span="52-64"];
m12_38 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="45-45"];
m12_273 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="313-313"];
m12_274 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="315-324"];
m12_275 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="313-313"];
m12_464 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="558-562"];
m12_4 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="WriteTransactionFacts.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46"];
m12_6 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="18-18"];
m12_14 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="31-31"];
m12_15 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="32-32"];
m12_13 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="29-41"];
m12_16 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)))", span="34-34"];
m12_17 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="36-36"];
m12_19 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="39-39"];
m12_31 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.ExpireJob(jobId, TimeSpan.FromDays(1))", span="34-34"];
m12_30 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="34-34"];
m12_18 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.True(DateTime.UtcNow < job.ExpireAt && job.ExpireAt < DateTime.UtcNow.AddDays(1))", span="37-37"];
m12_20 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Null(anotherJob.ExpireAt)", span="40-40"];
m12_21 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="29-41"];
m12_32 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="34-34"];
m12_40 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="54-54"];
m12_41 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="55-55"];
m12_39 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="52-64"];
m12_42 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x => x.PersistJob(jobId))", span="57-57"];
m12_43 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="59-59"];
m12_45 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="62-62"];
m12_50 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.PersistJob(jobId)", span="57-57"];
m12_49 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="57-57"];
m12_44 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Null(job.ExpireAt)", span="60-60"];
m12_46 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.NotNull(anotherJob.ExpireAt)", span="63-63"];
m12_47 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="52-64"];
m12_51 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="57-57"];
m12_58 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="77-77"];
m12_59 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="78-78"];
m12_57 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="75-102"];
m12_64 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x => x.SetJobState(jobId, state.Object))", span="86-86"];
m12_65 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="88-88"];
m12_68 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="92-92"];
m12_71 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="96-96"];
m12_94 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.SetJobState(jobId, state.Object)", span="86-86"];
m12_72 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="97-97"];
m12_60 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var state = new Mock<IState>()", span="80-80"];
m12_61 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="state.Setup(x => x.Name).Returns(''State'')", span="81-81"];
m12_62 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="state.Setup(x => x.Reason).Returns(''Reason'')", span="82-82"];
m12_63 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="83-84"];
m12_83 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="81-81"];
m12_86 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="82-82"];
m12_89 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="83-83"];
m12_93 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="86-86"];
m12_66 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(''State'', job.StateName)", span="89-89"];
m12_67 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.NotNull(job.StateId)", span="90-90"];
m12_69 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Null(anotherJob.StateName)", span="93-93"];
m12_70 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Null(anotherJob.StateId)", span="94-94"];
m12_73 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(''State'', jobState.Name)", span="98-98"];
m12_74 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(''Reason'', jobState.Reason)", span="99-99"];
m12_75 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.NotNull(jobState.CreatedAt)", span="100-100"];
m12_76 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="101-101"];
m12_77 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="75-102"];
m12_84 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.Name", span="81-81"];
m12_85 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="81-81"];
m12_87 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.Reason", span="82-82"];
m12_88 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="82-82"];
m12_90 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.SerializeData()", span="83-83"];
m12_91 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="83-83"];
m12_95 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="86-86"];
m12_102 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="115-115"];
m12_101 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="113-135"];
m12_107 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x => x.AddJobState(jobId, state.Object))", span="123-123"];
m12_108 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="125-125"];
m12_111 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="129-129"];
m12_103 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var state = new Mock<IState>()", span="117-117"];
m12_128 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.AddJobState(jobId, state.Object)", span="123-123"];
m12_112 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="130-130"];
m12_104 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="state.Setup(x => x.Name).Returns(''State'')", span="118-118"];
m12_105 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="state.Setup(x => x.Reason).Returns(''Reason'')", span="119-119"];
m12_106 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="120-121"];
m12_118 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="118-118"];
m12_121 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="119-119"];
m12_124 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="120-120"];
m12_127 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="123-123"];
m12_109 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Null(job.StateName)", span="126-126"];
m12_110 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Null(job.StateId)", span="127-127"];
m12_113 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(''State'', jobState.Name)", span="131-131"];
m12_114 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(''Reason'', jobState.Reason)", span="132-132"];
m12_115 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.NotNull(jobState.CreatedAt)", span="133-133"];
m12_116 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="134-134"];
m12_117 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="113-135"];
m12_119 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.Name", span="118-118"];
m12_120 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="118-118"];
m12_122 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.Reason", span="119-119"];
m12_123 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="119-119"];
m12_125 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.SerializeData()", span="120-120"];
m12_126 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="120-120"];
m12_129 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="123-123"];
m12_134 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="141-149"];
m12_135 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x => x.AddToQueue(''default'', ''1''))", span="143-143"];
m12_141 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="143-143"];
m12_140 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="141-149"];
m12_142 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.AddToQueue(''default'', ''1'')", span="143-143"];
m12_143 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="143-143"];
m12_151 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="162-171"];
m12_152 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x => x.IncrementCounter(''my-key''))", span="164-164"];
m12_153 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="166-166"];
m12_158 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="164-164"];
m12_154 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="168-168"];
m12_155 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(1, record.Value)", span="169-169"];
m12_156 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="170-170"];
m12_157 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="162-171"];
m12_159 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.IncrementCounter(''my-key'')", span="164-164"];
m12_160 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="164-164"];
m12_165 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="177-191"];
m12_166 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="179-179"];
m12_167 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="181-181"];
m12_176 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="179-179"];
m12_168 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="183-183"];
m12_169 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(1, record.Value)", span="184-184"];
m12_170 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.NotNull(record.ExpireAt)", span="185-185"];
m12_171 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var expireAt = (DateTime) record.ExpireAt", span="187-187"];
m12_172 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="189-189"];
m12_173 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="190-190"];
m12_174 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="177-191"];
m12_177 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.IncrementCounter(''my-key'', TimeSpan.FromDays(1))", span="179-179"];
m12_178 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="179-179"];
m12_183 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="197-208"];
m12_184 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                })", span="199-203"];
m12_185 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="205-205"];
m12_188 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="199-203"];
m12_186 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="207-207"];
m12_187 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="197-208"];
m12_189 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.IncrementCounter(''my-key'')", span="201-201"];
m12_190 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.IncrementCounter(''my-key'')", span="202-202"];
m12_191 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="199-203"];
m12_195 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="214-223"];
m12_196 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x => x.DecrementCounter(''my-key''))", span="216-216"];
m12_197 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="218-218"];
m12_202 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="216-216"];
m12_198 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="220-220"];
m12_199 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(-1, record.Value)", span="221-221"];
m12_200 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="222-222"];
m12_201 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="214-223"];
m12_203 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.DecrementCounter(''my-key'')", span="216-216"];
m12_204 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="216-216"];
m12_209 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="229-243"];
m12_210 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="231-231"];
m12_211 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="233-233"];
m12_219 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="231-231"];
m12_212 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="235-235"];
m12_213 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(-1, record.Value)", span="236-236"];
m12_214 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.NotNull(record.ExpireAt)", span="237-237"];
m12_215 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var expireAt = (DateTime)record.ExpireAt", span="239-239"];
m12_216 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="241-241"];
m12_217 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="242-242"];
m12_218 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="229-243"];
m12_220 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.DecrementCounter(''my-key'', TimeSpan.FromDays(1))", span="231-231"];
m12_221 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="231-231"];
m12_226 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="249-260"];
m12_227 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                })", span="251-255"];
m12_228 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="257-257"];
m12_231 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="251-255"];
m12_229 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="259-259"];
m12_230 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="249-260"];
m12_232 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.DecrementCounter(''my-key'')", span="253-253"];
m12_233 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.DecrementCounter(''my-key'')", span="254-254"];
m12_234 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="251-255"];
m12_238 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="266-275"];
m12_239 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value''))", span="268-268"];
m12_240 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="270-270"];
m12_245 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="268-268"];
m12_241 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="272-272"];
m12_242 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="273-273"];
m12_243 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(0.0, record.Score, 2)", span="274-274"];
m12_244 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="266-275"];
m12_246 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="268-268"];
m12_247 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="268-268"];
m12_252 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="281-292"];
m12_253 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                })", span="283-287"];
m12_254 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="289-289"];
m12_257 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="283-287"];
m12_255 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="291-291"];
m12_256 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="281-292"];
m12_258 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="285-285"];
m12_259 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.AddToSet(''my-key'', ''another-value'')", span="286-286"];
m12_260 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="283-287"];
m12_264 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="298-309"];
m12_265 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                })", span="300-304"];
m12_266 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="306-306"];
m12_269 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="300-304"];
m12_267 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="308-308"];
m12_268 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="298-309"];
m12_270 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="302-302"];
m12_271 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="303-303"];
m12_272 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="300-304"];
m12_276 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="315-324"];
m12_277 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2))", span="317-317"];
m12_278 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="319-319"];
m12_283 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="317-317"];
m12_279 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="321-321"];
m12_280 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="322-322"];
m12_281 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(3.2, record.Score, 3)", span="323-323"];
m12_282 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="315-324"];
m12_284 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="317-317"];
m12_285 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="317-317"];
m12_290 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="330-341"];
m12_291 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                })", span="332-336"];
m12_292 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="338-338"];
m12_295 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="332-336"];
m12_293 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(3.2, record.Score, 3)", span="340-340"];
m12_294 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="330-341"];
m12_296 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="334-334"];
m12_297 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="335-335"];
m12_298 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="332-336"];
m12_302 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="347-358"];
m12_303 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                })", span="349-353"];
m12_304 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="355-355"];
m12_307 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="349-353"];
m12_305 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="357-357"];
m12_306 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="347-358"];
m12_308 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="351-351"];
m12_309 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.RemoveFromSet(''my-key'', ''my-value'')", span="352-352"];
m12_310 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="349-353"];
m12_315 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="364-375"];
m12_316 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                })", span="366-370"];
m12_317 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="372-372"];
m12_320 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="366-370"];
m12_318 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="374-374"];
m12_319 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="364-375"];
m12_321 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="368-368"];
m12_322 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.RemoveFromSet(''my-key'', ''different-value'')", span="369-369"];
m12_323 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="366-370"];
m12_327 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="381-392"];
m12_328 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                })", span="383-387"];
m12_329 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="389-389"];
m12_332 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="383-387"];
m12_330 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="391-391"];
m12_331 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="381-392"];
m12_333 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="385-385"];
m12_334 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.RemoveFromSet(''different-key'', ''my-value'')", span="386-386"];
m12_335 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="383-387"];
m12_339 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="398-406"];
m12_340 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''))", span="400-400"];
m12_341 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.List'').Single()", span="402-402"];
m12_345 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="400-400"];
m12_342 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="404-404"];
m12_343 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="405-405"];
m12_344 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="398-406"];
m12_346 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="400-400"];
m12_347 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="400-400"];
m12_352 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="412-423"];
m12_353 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                })", span="414-418"];
m12_354 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="420-420"];
m12_357 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="414-418"];
m12_355 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="422-422"];
m12_356 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="412-423"];
m12_358 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="416-416"];
m12_359 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="417-417"];
m12_360 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="414-418"];
m12_364 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="429-441"];
m12_365 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                })", span="431-436"];
m12_366 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="438-438"];
m12_369 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="431-436"];
m12_367 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="440-440"];
m12_368 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="429-441"];
m12_370 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="433-433"];
m12_371 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="434-434"];
m12_372 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.RemoveFromList(''my-key'', ''my-value'')", span="435-435"];
m12_373 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="431-436"];
m12_378 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="447-458"];
m12_379 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                })", span="449-453"];
m12_380 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="455-455"];
m12_383 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="449-453"];
m12_381 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="457-457"];
m12_382 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="447-458"];
m12_384 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="451-451"];
m12_385 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.RemoveFromList(''my-key'', ''different-value'')", span="452-452"];
m12_386 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="449-453"];
m12_390 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="464-475"];
m12_391 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                })", span="466-470"];
m12_392 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="472-472"];
m12_395 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="466-470"];
m12_393 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="474-474"];
m12_394 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="464-475"];
m12_396 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="468-468"];
m12_397 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.RemoveFromList(''different-key'', ''my-value'')", span="469-469"];
m12_398 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="466-470"];
m12_402 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="481-497"];
m12_403 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                })", span="483-490"];
m12_404 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="492-492"];
m12_410 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="483-490"];
m12_405 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(2, records.Length)", span="494-494"];
m12_406 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(''1'', records[0].Value)", span="495-495"];
m12_407 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(''2'', records[1].Value)", span="496-496"];
m12_408 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="481-497"];
m12_411 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="485-485"];
m12_412 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.InsertToList(''my-key'', ''1'')", span="486-486"];
m12_413 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.InsertToList(''my-key'', ''2'')", span="487-487"];
m12_414 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.InsertToList(''my-key'', ''3'')", span="488-488"];
m12_415 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 2)", span="489-489"];
m12_416 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="483-490"];
m12_421 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="503-516"];
m12_422 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="505-511"];
m12_423 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="513-513"];
m12_426 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="505-511"];
m12_424 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="515-515"];
m12_425 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="503-516"];
m12_427 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="507-507"];
m12_428 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.InsertToList(''my-key'', ''1'')", span="508-508"];
m12_429 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.InsertToList(''my-key'', ''2'')", span="509-509"];
m12_430 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 100)", span="510-510"];
m12_431 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="505-511"];
m12_435 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="522-533"];
m12_436 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="524-528"];
m12_437 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="530-530"];
m12_440 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="524-528"];
m12_438 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="532-532"];
m12_439 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="522-533"];
m12_441 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="526-526"];
m12_442 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 100)", span="527-527"];
m12_443 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="524-528"];
m12_447 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="539-550"];
m12_448 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                })", span="541-545"];
m12_449 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="547-547"];
m12_452 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="541-545"];
m12_450 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="549-549"];
m12_451 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="539-550"];
m12_453 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="543-543"];
m12_454 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 0)", span="544-544"];
m12_455 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="541-545"];
m12_459 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="556-567"];
m12_460 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                })", span="558-562"];
m12_461 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="564-564"];
m12_462 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="566-566"];
m12_463 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="556-567"];
m12_465 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="560-560"];
m12_466 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.TrimList(''another-key'', 1, 0)", span="561-561"];
m12_467 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="558-562"];
m12_312 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="362-362"];
m12_313 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="364-375"];
m12_314 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="362-362"];
m12_261 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="296-296"];
m12_262 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n                \r\n                Assert.Equal(1, recordCount);\r\n            })", span="298-309"];
m12_263 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="296-296"];
m12_468 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="570-570"];
m12_469 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="WriteTransactionFacts.cs", label="var connection = ConnectionUtils.CreateConnection()", span="572-572"];
m12_470 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="WriteTransactionFacts.cs", label="action(connection)", span="574-574"];
m12_471 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="570-570"];
m12_175 [cluster="System.DateTime.AddHours(double)", file="WriteTransactionFacts.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m12_7 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", span="34-34"];
m12_456 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="554-554"];
m12_457 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="556-567"];
m12_458 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="554-554"];
m12_23 [cluster="Unk.Single", file="WriteTransactionFacts.cs", label="Entry Unk.Single", span=""];
m12_8 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", span="22-22"];
m12_9 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", file="WriteTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="24-27"];
m12_10 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.True(DateTime.UtcNow < job.ExpireAt && job.ExpireAt < DateTime.UtcNow.AddDays(1));\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.ExpireAt);\r\n            })", span="29-41"];
m12_11 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", span="22-22"];
m12_53 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="68-68"];
m12_54 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="WriteTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="70-73"];
m12_55 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.StateName);\r\n                Assert.Null(anotherJob.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="75-102"];
m12_56 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="68-68"];
m12_28 [cluster="Unk.True", file="WriteTransactionFacts.cs", label="Entry Unk.True", span=""];
m12_349 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="410-410"];
m12_350 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="412-423"];
m12_351 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="410-410"];
m12_144 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="114-114"];
m12_472 [cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m12_161 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="125-125"];
m12_418 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="501-501"];
m12_419 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="503-516"];
m12_420 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="501-501"];
m12_80 [cluster="Unk.Returns", file="WriteTransactionFacts.cs", label="Entry Unk.Returns", span=""];
m12_249 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="279-279"];
m12_250 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="281-292"];
m12_251 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="279-279"];
m12_52 [cluster="Unk.PersistJob", file="WriteTransactionFacts.cs", label="Entry Unk.PersistJob", span=""];
m12_287 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="328-328"];
m12_288 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                });\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="330-341"];
m12_289 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="328-328"];
m12_336 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="396-396"];
m12_337 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.InsertToList(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.List'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n            })", span="398-406"];
m12_338 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="396-396"];
m12_192 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="WriteTransactionFacts.cs", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="212-212"];
m12_193 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="WriteTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="214-223"];
m12_194 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="WriteTransactionFacts.cs", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="212-212"];
m12_479 [file="WriteTransactionFacts.cs", label="HangFire.SqlServer.Tests.WriteTransactionFacts", span=""];
m12_480 [file="WriteTransactionFacts.cs", label=arrangeSql, span=""];
m12_481 [file="WriteTransactionFacts.cs", label=jobId, span=""];
m12_482 [file="WriteTransactionFacts.cs", label=arrangeSql, span=""];
m12_483 [file="WriteTransactionFacts.cs", label=jobId, span=""];
m12_484 [file="WriteTransactionFacts.cs", label=arrangeSql, span=""];
m12_485 [file="WriteTransactionFacts.cs", label=jobId, span=""];
m12_486 [file="WriteTransactionFacts.cs", label=state, span=""];
m12_487 [file="WriteTransactionFacts.cs", label=arrangeSql, span=""];
m12_488 [file="WriteTransactionFacts.cs", label=jobId, span=""];
m12_489 [file="WriteTransactionFacts.cs", label=state, span=""];
n175 -> n39  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n47  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n54  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n66  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n69  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n72  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n75  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n84  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n92  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n97  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n98  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n106  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n116  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n126  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n134  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n148  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n149  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n152  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n156  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n157  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n160  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n163  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n170  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n175 -> n173  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
n176 -> n84  [color=darkseagreen4, key=1, label=client, style=dashed];
n177 -> n92  [color=darkseagreen4, key=1, label=client, style=dashed];
n178 -> n126  [color=darkseagreen4, key=1, label=client, style=dashed];
n179 -> n134  [color=darkseagreen4, key=1, label=client, style=dashed];
n180 -> n143  [color=darkseagreen4, key=1, label=client, style=dashed];
n9 -> n28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n33 -> n38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n43 -> n46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n50 -> n53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n58 -> n61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n66 -> n68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n72 -> n74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n78 -> n84  [color=darkseagreen4, key=1, label=client, style=dashed];
n79 -> n83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n87 -> n92  [color=darkseagreen4, key=1, label=client, style=dashed];
n88 -> n91  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n98 -> n101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n106 -> n111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n115 -> n126  [color=darkseagreen4, key=1, label=client, style=dashed];
n116 -> n122  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n117 -> n125  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n117 -> n119  [color=darkseagreen4, key=1, label=exception, style=dashed];
n129 -> n134  [color=darkseagreen4, key=1, label=client, style=dashed];
n130 -> n133  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n138 -> n143  [color=darkseagreen4, key=1, label=client, style=dashed];
n139 -> n142  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n149 -> n151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n157 -> n159  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n163 -> n169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_0 -> m4_3  [color=green, key=1, label=string, style=dashed];
m4_18 -> m4_10  [color=green, key=1, label="HangFire.SqlServer.MessageQueueProcessingJob", style=dashed];
m4_18 -> m4_13  [color=green, key=1, label="HangFire.SqlServer.MessageQueueProcessingJob", style=dashed];
m4_18 -> m4_14  [color=green, key=1, label="HangFire.SqlServer.MessageQueueProcessingJob", style=dashed];
m5_35 -> m5_35  [color=darkseagreen4, key=1, label=i, style=dashed];
m5_38 -> m5_41  [color=darkseagreen4, key=1, label=i, style=dashed];
m5_37 -> m5_39  [color=darkseagreen4, key=1, label=workCount, style=dashed];
m5_40 -> m5_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_32 -> m5_35  [color=darkseagreen4, key=1, label=i, style=dashed];
m5_4 -> m5_10  [color=darkseagreen4, key=1, label=server, style=dashed];
m5_5 -> m5_101  [color=green, key=1, label="lambda expression", style=dashed];
m5_44 -> m5_90  [color=darkseagreen4, key=1, label=number, style=dashed];
m5_44 -> m5_46  [color=darkseagreen4, key=1, label=queue, style=dashed];
m5_44 -> m5_50  [color=darkseagreen4, key=1, label=queue, style=dashed];
m5_7 -> m5_9  [color=darkseagreen4, key=1, label=command, style=dashed];
m5_7 -> m5_11  [color=darkseagreen4, key=1, label=command, style=dashed];
m5_7 -> m5_22  [color=darkseagreen4, key=1, label=command, style=dashed];
m5_7 -> m5_30  [color=darkseagreen4, key=1, label=command, style=dashed];
m5_7 -> m5_31  [color=darkseagreen4, key=1, label=command, style=dashed];
m5_7 -> m5_36  [color=darkseagreen4, key=1, label=command, style=dashed];
m5_7 -> m5_42  [color=darkseagreen4, key=1, label=command, style=dashed];
m5_7 -> m5_43  [color=darkseagreen4, key=1, label=command, style=dashed];
m5_7 -> m5_46  [color=darkseagreen4, key=1, label=command, style=dashed];
m5_7 -> m5_47  [color=darkseagreen4, key=1, label=command, style=dashed];
m5_12 -> m5_14  [color=darkseagreen4, key=1, label=workCount, style=dashed];
m5_21 -> m5_23  [color=darkseagreen4, key=1, label=message, style=dashed];
m5_22 -> m5_24  [color=darkseagreen4, key=1, label=workCount, style=dashed];
m5_31 -> m5_33  [color=darkseagreen4, key=1, label=workCount, style=dashed];
m5_46 -> m5_49  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_15 -> m5_72  [color=darkseagreen4, key=1, label=number, style=dashed];
m5_18 -> m5_24  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m5_16 -> m5_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_23 -> m5_26  [color=darkseagreen4, key=1, label=i, style=dashed];
m5_26 -> m5_26  [color=darkseagreen4, key=1, label=i, style=dashed];
m5_25 -> m5_75  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_34 -> m5_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_41 -> m5_41  [color=darkseagreen4, key=1, label=i, style=dashed];
m5_45 -> m5_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_45 -> m5_50  [color=darkseagreen4, key=1, label=token, style=dashed];
m5_63 -> m5_67  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_76 -> m5_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_94 -> m5_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_94 -> m5_61  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts", style=dashed];
m5_94 -> m5_74  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts", style=dashed];
m5_96 -> m5_50  [color=darkseagreen4, key=1, label=token, style=dashed];
m5_105 -> m5_72  [color=darkseagreen4, key=1, label=number, style=dashed];
m5_106 -> m5_90  [color=darkseagreen4, key=1, label=number, style=dashed];
m6_40 -> m6_43  [color=darkseagreen4, key=1, label=connection, style=dashed];
m6_15 -> m6_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_36 -> m8_47  [color=darkseagreen4, key=1, label=canNotParseMessage, style=dashed];
m8_36 -> m8_49  [color=darkseagreen4, key=1, label=canNotParseMessage, style=dashed];
m8_37 -> m8_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_37 -> m8_62  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_37 -> m8_66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_37 -> m8_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_37 -> m8_40  [color=darkseagreen4, key=1, label=parts, style=dashed];
m8_37 -> m8_41  [color=darkseagreen4, key=1, label=parts, style=dashed];
m8_37 -> m8_45  [color=darkseagreen4, key=1, label=parts, style=dashed];
m8_37 -> m8_46  [color=darkseagreen4, key=1, label=parts, style=dashed];
m8_38 -> m8_41  [color=darkseagreen4, key=1, label=builder, style=dashed];
m8_38 -> m8_42  [color=darkseagreen4, key=1, label=builder, style=dashed];
m8_38 -> m8_43  [color=darkseagreen4, key=1, label=builder, style=dashed];
m8_38 -> m8_46  [color=darkseagreen4, key=1, label=builder, style=dashed];
m8_38 -> m8_47  [color=darkseagreen4, key=1, label=builder, style=dashed];
m8_39 -> m8_41  [color=darkseagreen4, key=1, label=alias, style=dashed];
m8_44 -> m8_46  [color=darkseagreen4, key=1, label=alias, style=dashed];
m8_28 -> m8_30  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m8_28 -> m8_31  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m8_2 -> m8_5  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorageOptions", style=dashed];
m8_2 -> m8_9  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorageOptions", style=dashed];
m8_72 -> m8_74  [color=darkseagreen4, key=1, label=connection, style=dashed];
m8_78 -> m8_17  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m8_78 -> m8_25  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m8_78 -> m8_30  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m8_78 -> m8_31  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m8_78 -> m8_22  [color=green, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m9_1 -> m9_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_0 -> m10_3  [color=darkseagreen4, key=1, label=IOwinContext, style=dashed];
m10_0 -> m10_4  [color=darkseagreen4, key=1, label=IOwinContext, style=dashed];
m10_0 -> m10_5  [color=darkseagreen4, key=1, label=IOwinContext, style=dashed];
m10_0 -> m10_6  [color=darkseagreen4, key=1, label=IOwinContext, style=dashed];
m10_0 -> m10_7  [color=darkseagreen4, key=1, label=IOwinContext, style=dashed];
m10_133 -> m10_145  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m10_136 -> m10_145  [color=green, key=1, label=utcNow, style=dashed];
m10_135 -> m10_140  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m10_135 -> m10_162  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m10_135 -> m10_143  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m10_137 -> m10_140  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m10_137 -> m10_141  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m10_134 -> m10_138  [color=darkseagreen4, key=1, label=serverNames, style=dashed];
m10_146 -> m10_146  [color=darkseagreen4, key=1, label=heartbeat, style=dashed];
m10_140 -> m10_156  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_140 -> m10_161  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_144 -> m10_146  [color=darkseagreen4, key=1, label=heartbeat, style=dashed];
m10_147 -> m10_147  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m10_147 -> m10_148  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m10_139 -> m10_162  [color=darkseagreen4, key=1, label=name, style=dashed];
m10_139 -> m10_157  [color=darkseagreen4, key=1, label=name, style=dashed];
m10_142 -> m10_147  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m10_142 -> m10_148  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m10_119 -> m10_126  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_116 -> m10_127  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_116 -> m10_118  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_116 -> m10_123  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_116 -> m10_119  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_117 -> m10_119  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m10_117 -> m10_120  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m10_118 -> m10_122  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_55 -> m10_61  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m10_55 -> m10_63  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m10_55 -> m10_65  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m10_171 -> m10_182  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_85 -> m10_175  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_85 -> m10_179  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_85 -> m10_183  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_85 -> m10_169  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_85 -> m10_170  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_85 -> m10_171  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_168 -> m10_170  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m10_168 -> m10_171  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m10_168 -> m10_172  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m10_169 -> m10_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_170 -> m10_178  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_91 -> m10_105  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_91 -> m10_110  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_91 -> m10_93  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_91 -> m10_101  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_91 -> m10_94  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_91 -> m10_95  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m10_91 -> m10_97  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_92 -> m10_94  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m10_92 -> m10_97  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m10_92 -> m10_98  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m10_93 -> m10_100  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_94 -> m10_104  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_97 -> m10_109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_96 -> m10_110  [color=darkseagreen4, key=1, label=queue1, style=dashed];
m10_24 -> m10_51  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m10_24 -> m10_34  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m10_24 -> m10_27  [color=darkseagreen4, key=1, label="HangFire.Storage.InvocationData", style=dashed];
m10_24 -> m10_30  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m10_32 -> m10_34  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m10_32 -> m10_35  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m10_33 -> m10_46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_34 -> m10_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_25 -> m10_51  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m10_25 -> m10_47  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m10_25 -> m10_33  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m10_25 -> m10_34  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m10_25 -> m10_36  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m10_26 -> m10_47  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m10_26 -> m10_31  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m10_26 -> m10_33  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m10_26 -> m10_28  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m10_26 -> m10_29  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m10_26 -> m10_30  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m10_27 -> m10_27  [color=darkseagreen4, key=1, label="HangFire.Storage.InvocationData", style=dashed];
m10_28 -> m10_28  [color=darkseagreen4, key=1, label="HangFire.Storage.InvocationData", style=dashed];
m10_29 -> m10_29  [color=darkseagreen4, key=1, label="HangFire.Storage.InvocationData", style=dashed];
m10_185 -> m10_14  [color=green, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m10_185 -> m10_19  [color=green, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m10_185 -> m10_75  [color=green, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m10_185 -> m10_5  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m10_185 -> m10_9  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m10_185 -> m10_79  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m10_185 -> m10_83  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m10_185 -> m10_87  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m10_185 -> m10_114  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m10_185 -> m10_131  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m10_185 -> m10_146  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m10_186 -> m10_51  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m10_186 -> m10_47  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m10_188 -> m10_51  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m10_187 -> m10_47  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m10_189 -> m10_105  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_189 -> m10_110  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_189 -> m10_101  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_190 -> m10_105  [color=darkseagreen4, key=1, label=int, style=dashed];
m10_191 -> m10_110  [color=darkseagreen4, key=1, label=queue1, style=dashed];
m10_192 -> m10_127  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_192 -> m10_123  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_195 -> m10_175  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_196 -> m10_175  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_196 -> m10_179  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_196 -> m10_183  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_193 -> m10_162  [color=darkseagreen4, key=1, label=name, style=dashed];
m10_193 -> m10_157  [color=darkseagreen4, key=1, label=name, style=dashed];
m10_194 -> m10_162  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m11_143 -> m11_32  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_36  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_44  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_51  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_56  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_63  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_67  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_76  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_80  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_88  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_92  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_99  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_103  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_110  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_115  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_120  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_124  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_130  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_134  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_141  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m12_376 -> m12_378  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_433 -> m12_435  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_300 -> m12_302  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_236 -> m12_238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_445 -> m12_447  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_400 -> m12_402  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_149 -> m12_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_99 -> m12_101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_207 -> m12_209  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_224 -> m12_226  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_388 -> m12_390  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_163 -> m12_165  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_25 -> m12_475  [color=darkseagreen4, key=1, label="System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>", style=dashed];
m12_325 -> m12_327  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_181 -> m12_183  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_362 -> m12_364  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_37 -> m12_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_274 -> m12_276  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_464 -> m12_466  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_14 -> m12_16  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_14 -> m12_31  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_13 -> m12_16  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_16 -> m12_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_40 -> m12_42  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_40 -> m12_50  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_39 -> m12_42  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_42 -> m12_49  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_58 -> m12_64  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_58 -> m12_94  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_58 -> m12_72  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_57 -> m12_64  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_64 -> m12_93  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_65 -> m12_67  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_68 -> m12_70  [color=darkseagreen4, key=1, label=anotherJob, style=dashed];
m12_71 -> m12_73  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_71 -> m12_74  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_71 -> m12_75  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_71 -> m12_76  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_60 -> m12_62  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_60 -> m12_63  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_60 -> m12_64  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_60 -> m12_94  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_61 -> m12_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_62 -> m12_86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_63 -> m12_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_102 -> m12_107  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_102 -> m12_128  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_102 -> m12_112  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_101 -> m12_107  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_107 -> m12_127  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_108 -> m12_110  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_111 -> m12_113  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_111 -> m12_114  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_111 -> m12_115  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_111 -> m12_116  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_103 -> m12_105  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_103 -> m12_106  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_103 -> m12_107  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_103 -> m12_128  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_104 -> m12_118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_105 -> m12_121  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_106 -> m12_124  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_135 -> m12_141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_152 -> m12_158  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_153 -> m12_155  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_153 -> m12_156  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_166 -> m12_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_167 -> m12_169  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_167 -> m12_170  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_171 -> m12_173  [color=darkseagreen4, key=1, label=expireAt, style=dashed];
m12_184 -> m12_188  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_188 -> m12_190  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_196 -> m12_202  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_197 -> m12_199  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_197 -> m12_200  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_210 -> m12_219  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_211 -> m12_213  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_211 -> m12_214  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_215 -> m12_217  [color=darkseagreen4, key=1, label=expireAt, style=dashed];
m12_227 -> m12_231  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_231 -> m12_233  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_239 -> m12_245  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_240 -> m12_242  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_240 -> m12_243  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_253 -> m12_257  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_257 -> m12_259  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_265 -> m12_269  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_269 -> m12_271  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_277 -> m12_283  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_278 -> m12_280  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_278 -> m12_281  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_291 -> m12_295  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_295 -> m12_297  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_303 -> m12_307  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_307 -> m12_309  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_316 -> m12_320  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_320 -> m12_322  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_328 -> m12_332  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_332 -> m12_334  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_340 -> m12_345  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_341 -> m12_343  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_353 -> m12_357  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_357 -> m12_359  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_365 -> m12_369  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_369 -> m12_371  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_369 -> m12_372  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_379 -> m12_383  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_383 -> m12_385  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_391 -> m12_395  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_395 -> m12_397  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_403 -> m12_410  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_404 -> m12_406  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_404 -> m12_407  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_410 -> m12_412  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_410 -> m12_413  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_410 -> m12_414  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_410 -> m12_415  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_422 -> m12_426  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_426 -> m12_428  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_426 -> m12_429  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_426 -> m12_430  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_436 -> m12_440  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_440 -> m12_442  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_448 -> m12_452  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_452 -> m12_454  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_460 -> m12_464  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_313 -> m12_315  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_262 -> m12_264  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_468 -> m12_470  [color=darkseagreen4, key=1, label="System.Action<SqlConnection>", style=dashed];
m12_457 -> m12_459  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_10 -> m12_13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_55 -> m12_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_350 -> m12_352  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_419 -> m12_421  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_250 -> m12_252  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_288 -> m12_290  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_337 -> m12_339  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_193 -> m12_195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_479 -> m12_16  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_42  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_64  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_107  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_135  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_152  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_166  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_184  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_196  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_210  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_227  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_239  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_253  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_265  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_277  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_291  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_303  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_316  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_328  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_340  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_353  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_365  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_379  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_391  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_403  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_422  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_436  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_448  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_479 -> m12_460  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
m12_481 -> m12_31  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_483 -> m12_50  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_485 -> m12_94  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_486 -> m12_94  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_488 -> m12_128  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_489 -> m12_128  [color=darkseagreen4, key=1, label=state, style=dashed];
}
