digraph  {
n219 [label="HangFire.Tests.StateMachineFeature", span=""];
n0 [cluster="HangFire.Tests.StateMachineFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", label="Entry HangFire.Tests.StateMachineFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
n1 [cluster="HangFire.Tests.StateMachineFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
n2 [cluster="HangFire.Tests.StateMachineFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=red, community=0, label="3: TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''State machine'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34"];
n5 [cluster="Unk.GetTestRunner", label="Entry Unk.GetTestRunner", span=""];
n3 [cluster="HangFire.Tests.StateMachineFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
n6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
n7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
n4 [cluster="HangFire.Tests.StateMachineFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", label="Exit HangFire.Tests.StateMachineFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
n8 [cluster="Unk.OnFeatureStart", label="Entry Unk.OnFeatureStart", span=""];
n9 [cluster="HangFire.Tests.StateMachineFeature.FeatureTearDown()", label="Entry HangFire.Tests.StateMachineFeature.FeatureTearDown()", span="39-39"];
n10 [cluster="HangFire.Tests.StateMachineFeature.FeatureTearDown()", label="testRunner.OnFeatureEnd()", span="41-41"];
n11 [cluster="HangFire.Tests.StateMachineFeature.FeatureTearDown()", label="testRunner = null", span="42-42"];
n13 [cluster="Unk.OnFeatureEnd", label="Entry Unk.OnFeatureEnd", span=""];
n12 [cluster="HangFire.Tests.StateMachineFeature.FeatureTearDown()", label="Exit HangFire.Tests.StateMachineFeature.FeatureTearDown()", span="39-39"];
n14 [cluster="HangFire.Tests.StateMachineFeature.TestInitialize()", label="Entry HangFire.Tests.StateMachineFeature.TestInitialize()", span="46-46"];
n15 [cluster="HangFire.Tests.StateMachineFeature.TestInitialize()", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''State machine''))", span="48-49"];
n16 [cluster="HangFire.Tests.StateMachineFeature.TestInitialize()", label="HangFire.Tests.StateMachineFeature.FeatureSetup(null)", span="51-51"];
n17 [cluster="HangFire.Tests.StateMachineFeature.TestInitialize()", label="Exit HangFire.Tests.StateMachineFeature.TestInitialize()", span="46-46"];
n18 [cluster="HangFire.Tests.StateMachineFeature.ScenarioTearDown()", label="Entry HangFire.Tests.StateMachineFeature.ScenarioTearDown()", span="56-56"];
n19 [cluster="HangFire.Tests.StateMachineFeature.ScenarioTearDown()", label="testRunner.OnScenarioEnd()", span="58-58"];
n20 [cluster="HangFire.Tests.StateMachineFeature.ScenarioTearDown()", label="Exit HangFire.Tests.StateMachineFeature.ScenarioTearDown()", span="56-56"];
n21 [cluster="Unk.OnScenarioEnd", label="Entry Unk.OnScenarioEnd", span=""];
n22 [cluster="HangFire.Tests.StateMachineFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", label="Entry HangFire.Tests.StateMachineFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
n23 [cluster="HangFire.Tests.StateMachineFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
n24 [cluster="HangFire.Tests.StateMachineFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", label="Exit HangFire.Tests.StateMachineFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
n25 [cluster="Unk.OnScenarioStart", label="Entry Unk.OnScenarioStart", span=""];
n26 [cluster="HangFire.Tests.StateMachineFeature.ScenarioCleanup()", label="Entry HangFire.Tests.StateMachineFeature.ScenarioCleanup()", span="66-66"];
n27 [cluster="HangFire.Tests.StateMachineFeature.ScenarioCleanup()", label="testRunner.CollectScenarioErrors()", span="68-68"];
n28 [cluster="HangFire.Tests.StateMachineFeature.ScenarioCleanup()", label="Exit HangFire.Tests.StateMachineFeature.ScenarioCleanup()", span="66-66"];
n29 [cluster="Unk.CollectScenarioErrors", label="Entry Unk.CollectScenarioErrors", span=""];
n30 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", label="Entry HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", span="75-75"];
n31 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The state of the job should be changed'', ((string[])(null)))", span="77-77"];
n32 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", label="this.ScenarioSetup(scenarioInfo)", span="79-79"];
n39 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
n33 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81"];
n34 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", label="testRunner.And(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83"];
n40 [cluster="Unk.Given", label="Entry Unk.Given", span=""];
n35 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85"];
n41 [cluster="Unk.And", label="Entry Unk.And", span=""];
n36 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", label="testRunner.Then(''the job state should be changed to \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="87-87"];
n42 [cluster="Unk.When", label="Entry Unk.When", span=""];
n37 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", label="this.ScenarioCleanup()", span="89-89"];
n43 [cluster="Unk.Then", label="Entry Unk.Then", span=""];
n38 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", label="Exit HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", span="75-75"];
n44 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", label="Entry HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", span="96-96"];
n45 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The new state should be applied'', ((string[])(null)))", span="98-98"];
n46 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", label="this.ScenarioSetup(scenarioInfo)", span="100-100"];
n47 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="102-102"];
n48 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", label="testRunner.And(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="104-104"];
n49 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="106-106"];
n50 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", label="testRunner.Then(''the \'Test\' state should be applied to the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="108-108"];
n51 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", label="this.ScenarioCleanup()", span="110-110"];
n52 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", label="Exit HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", span="96-96"];
n53 [cluster="HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", label="Entry HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", span="117-117"];
n54 [cluster="HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''An old state should be unapplied'', ((string[])(null)))", span="119-119"];
n55 [cluster="HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", label="this.ScenarioSetup(scenarioInfo)", span="121-121"];
n56 [cluster="HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="123-123"];
n57 [cluster="HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", label="testRunner.And(''a job in the \'Old\' state with registered descriptor'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="125-125"];
n58 [cluster="HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="127-127"];
n59 [cluster="HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", label="testRunner.Then(''the old state should be unapplied'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="129-129"];
n60 [cluster="HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", label="this.ScenarioCleanup()", span="131-131"];
n61 [cluster="HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", label="Exit HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", span="117-117"];
n62 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="Entry HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", span="138-138"];
n63 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The state entry should contain the state name'', ((string[])(null)))", span="140-140"];
n64 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="this.ScenarioSetup(scenarioInfo)", span="142-142"];
n65 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="144-144"];
n66 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="testRunner.And(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="146-146"];
n67 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="148-148"];
n68 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="150-152"];
n69 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="table1.AddRow(new string[] {\r\n                        ''State'',\r\n                        ''Test''})", span="153-155"];
n73 [cluster="TechTalk.SpecFlow.Table.cstr", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
n70 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="testRunner.Then(''the job\'s state entry should contain the following items:'', ((string)(null)), table1, ''Then '')", span="157-157"];
n74 [cluster="Unk.AddRow", label="Entry Unk.AddRow", span=""];
n71 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="this.ScenarioCleanup()", span="159-159"];
n72 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="Exit HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", span="138-138"];
n75 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="Entry HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", span="166-166"];
n76 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The job history should be appended'', ((string[])(null)))", span="168-168"];
n77 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="this.ScenarioSetup(scenarioInfo)", span="170-170"];
n78 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="172-172"];
n79 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="testRunner.And(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="174-174"];
n80 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="176-176"];
n81 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="178-180"];
n82 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="table2.AddRow(new string[] {\r\n                        ''CreatedAt'',\r\n                        ''<UtcNow timestamp>''})", span="181-183"];
n83 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="table2.AddRow(new string[] {\r\n                        ''State'',\r\n                        ''Test''})", span="184-186"];
n84 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="testRunner.Then(''the last history entry should contain the following items:'', ((string)(null)), table2, ''Then '')", span="188-188"];
n85 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="this.ScenarioCleanup()", span="190-190"];
n86 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="Exit HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", span="166-166"];
n87 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="Entry HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", span="197-197"];
n88 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''the job history record and the state entry should contain the state properties'', ((string[])(null)))", span="199-199"];
n89 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="this.ScenarioSetup(scenarioInfo)", span="201-201"];
n90 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="203-205"];
n91 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="table3.AddRow(new string[] {\r\n                        ''Server'',\r\n                        ''TestServer''})", span="206-208"];
n92 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="table3.AddRow(new string[] {\r\n                        ''Worker'',\r\n                        ''#3''})", span="209-211"];
n93 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="testRunner.Given(''a \'Test\' state with the following properties:'', ((string)(null)), table3, ''Given '')", span="213-213"];
n94 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="testRunner.And(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="215-215"];
n95 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="217-217"];
n96 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="testRunner.Then(''the last history entry should contain all of the above properties'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="219-219"];
n97 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="testRunner.And(''the state entry should contain all of the above properties'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="221-221"];
n98 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="this.ScenarioCleanup()", span="223-223"];
n99 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="Exit HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", span="197-197"];
n100 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", label="Entry HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", span="230-230"];
n101 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''the state should be changed to the Failed state when it could not find its type'', ((string[])(null)))", span="232-232"];
n102 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", label="this.ScenarioSetup(scenarioInfo)", span="234-234"];
n103 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", label="testRunner.Given(''a job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="236-236"];
n104 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", label="testRunner.And(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="238-238"];
n105 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="240-240"];
n106 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", label="testRunner.Then(''the job should be moved to the Failed state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="242-242"];
n107 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", label="this.ScenarioCleanup()", span="244-244"];
n108 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", label="Exit HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", span="230-230"];
n109 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="Entry HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", span="252-252"];
n110 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''the state should not be changed if allowed current states array does not contain '' +\r\n                    ''the current state'', ((string[])(null)))", span="254-255"];
n111 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="this.ScenarioSetup(scenarioInfo)", span="257-257"];
n112 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="259-259"];
n113 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="testRunner.And(''a job in the \'Old\' state with registered descriptor'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="261-261"];
n114 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="testRunner.When(''I change the state of the job to the \'Test\' allowing only transition from the \'En'' +\r\n                    ''queued\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="263-264"];
n115 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="testRunner.Then(''the job should be in the Old state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="266-266"];
n116 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="testRunner.And(''the old state should not be unapplied'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="268-268"];
n117 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="testRunner.And(''the \'Test\' state should not be applied to the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="270-270"];
n118 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="this.ScenarioCleanup()", span="272-272"];
n119 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="Exit HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", span="252-252"];
n120 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="Entry HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", span="279-279"];
n121 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State changing filters should be executed in the order they were defined'', ((string[])(null)))", span="281-281"];
n122 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="this.ScenarioSetup(scenarioInfo)", span="283-283"];
n123 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="285-285"];
n124 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.And(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="287-287"];
n125 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.And(''a state changing filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="289-289"];
n126 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.And(''a state changing filter \'second\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="291-291"];
n127 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="293-293"];
n128 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Filter''})", span="295-296"];
n129 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="table4.AddRow(new string[] {\r\n                        ''first''})", span="297-298"];
n130 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="table4.AddRow(new string[] {\r\n                        ''second''})", span="299-300"];
n131 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.Then(''changing filters should be executed in the following order:'', ((string)(null)), table4, ''Then '')", span="302-302"];
n132 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="this.ScenarioCleanup()", span="304-304"];
n133 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="Exit HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", span="279-279"];
n134 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="Entry HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", span="311-311"];
n135 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The state changing filters should be able to modify the state'', ((string[])(null)))", span="313-313"];
n136 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="this.ScenarioSetup(scenarioInfo)", span="315-315"];
n137 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="317-317"];
n138 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="testRunner.And(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="319-319"];
n139 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="testRunner.And(''a state changing filter \'first\' that changes the state to the \'AnotherTest\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="321-321"];
n140 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="323-323"];
n141 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="testRunner.Then(''the job state should be changed to \'AnotherTest\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="325-325"];
n142 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="testRunner.And(''the \'Test\' state should not be applied to the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="327-327"];
n143 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="testRunner.And(''the \'AnotherTest\' state should be applied to the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="329-329"];
n144 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="331-333"];
n145 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="table5.AddRow(new string[] {\r\n                        ''State'',\r\n                        ''AnotherTest''})", span="334-336"];
n146 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="testRunner.And(''the job\'s state entry should contain the following items:'', ((string)(null)), table5, ''And '')", span="338-338"];
n147 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="this.ScenarioCleanup()", span="340-340"];
n148 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="Exit HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", span="311-311"];
n149 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="Entry HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", span="347-347"];
n150 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The job history should contain every changed state'', ((string[])(null)))", span="349-349"];
n151 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="this.ScenarioSetup(scenarioInfo)", span="351-351"];
n152 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="353-353"];
n153 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="testRunner.And(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="355-355"];
n154 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="testRunner.And(''a state changing filter \'first\' that changes the state to the \'AnotherTest\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="357-357"];
n155 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="testRunner.And(''a state changing filter \'second\' that changes the state to the \'YetAnotherTest\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="359-359"];
n156 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="361-361"];
n157 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''State''})", span="363-364"];
n158 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="table6.AddRow(new string[] {\r\n                        ''YetAnotherTest''})", span="365-366"];
n159 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="table6.AddRow(new string[] {\r\n                        ''AnotherTest''})", span="367-368"];
n160 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="table6.AddRow(new string[] {\r\n                        ''Test''})", span="369-370"];
n161 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="testRunner.Then(''the history for the following states should be added:'', ((string)(null)), table6, ''Then '')", span="372-372"];
n162 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="this.ScenarioCleanup()", span="374-374"];
n163 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="Exit HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", span="347-347"];
n164 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", label="Entry HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", span="381-381"];
n165 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The state of the unexisting job should not be changed'', ((string[])(null)))", span="383-383"];
n166 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", label="this.ScenarioSetup(scenarioInfo)", span="385-385"];
n167 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="387-387"];
n168 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", label="testRunner.When(''I change the state of the \'unexisting\' job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="389-389"];
n169 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", label="testRunner.Then(''the \'Test\' state should not be applied to the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="391-391"];
n170 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", label="this.ScenarioCleanup()", span="393-393"];
n171 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", label="Exit HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", span="381-381"];
n172 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", label="Entry HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", span="400-400"];
n173 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Changing filters are should not be executed for unexisting job'', ((string[])(null)))", span="402-402"];
n174 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", label="this.ScenarioSetup(scenarioInfo)", span="404-404"];
n175 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="406-406"];
n176 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", label="testRunner.And(''a state changing filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="408-408"];
n177 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", label="testRunner.When(''I change the state of the \'unexisting\' job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="410-410"];
n178 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", label="testRunner.Then(''changing filters should not be executed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="412-412"];
n179 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", label="this.ScenarioCleanup()", span="414-414"];
n180 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", label="Exit HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", span="400-400"];
n181 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", label="Entry HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", span="422-422"];
n182 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Changing filters should not be executed if the transition is not allowed for the '' +\r\n                    ''current state'', ((string[])(null)))", span="424-425"];
n183 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", label="this.ScenarioSetup(scenarioInfo)", span="427-427"];
n184 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="429-429"];
n185 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", label="testRunner.And(''a job in the \'Old\' state with registered descriptor'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="431-431"];
n186 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", label="testRunner.And(''a state changing filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="433-433"];
n187 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", label="testRunner.When(''I change the state of the job to the \'Test\' allowing only transition from the \'En'' +\r\n                    ''queued\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="435-436"];
n188 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", label="testRunner.Then(''changing filters should not be executed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="438-438"];
n189 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", label="this.ScenarioCleanup()", span="440-440"];
n190 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", label="Exit HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", span="422-422"];
n191 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="Entry HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", span="447-447"];
n192 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State applied filters should be executed in the order they were defined'', ((string[])(null)))", span="449-449"];
n193 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="this.ScenarioSetup(scenarioInfo)", span="451-451"];
n194 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="453-453"];
n195 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.And(''a job in the \'Old\' state with registered descriptor'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="455-455"];
n196 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.And(''a state applied filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="457-457"];
n197 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.And(''a state applied filter \'second\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="459-459"];
n198 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="461-461"];
n199 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="463-464"];
n200 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="table7.AddRow(new string[] {\r\n                        ''first::OnStateUnapplied''})", span="465-466"];
n201 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="table7.AddRow(new string[] {\r\n                        ''second::OnStateUnapplied''})", span="467-468"];
n202 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="table7.AddRow(new string[] {\r\n                        ''first::OnStateApplied''})", span="469-470"];
n203 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="table7.AddRow(new string[] {\r\n                        ''second::OnStateApplied''})", span="471-472"];
n204 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.Then(''state applied filter methods should be executed in the following order:'', ((string)(null)), table7, ''Then '')", span="474-474"];
n205 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="this.ScenarioCleanup()", span="476-476"];
n206 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="Exit HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", span="447-447"];
n207 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="Entry HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", span="483-483"];
n208 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''OnStateUnapplied method should not be called when the state is empty'', ((string[])(null)))", span="485-485"];
n209 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="this.ScenarioSetup(scenarioInfo)", span="487-487"];
n210 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="489-489"];
n211 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="testRunner.And(''a job with empty state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="491-491"];
n212 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="testRunner.And(''a state applied filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="493-493"];
n213 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="495-495"];
n214 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="497-498"];
n215 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="table8.AddRow(new string[] {\r\n                        ''first::OnStateApplied''})", span="499-500"];
n216 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="testRunner.Then(''state applied filter methods should be executed in the following order:'', ((string)(null)), table8, ''Then '')", span="502-502"];
n217 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="this.ScenarioCleanup()", span="504-504"];
n218 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="Exit HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", span="483-483"];
d1 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", color=green, community=0, label="3: Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerConnection(null))", span="17-18"];
d0 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", span="15-15"];
d2 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", span="15-15"];
d3 [cluster="Unk.>", label="Entry Unk.>", span=""];
d4 [cluster="lambda expression", label="Entry lambda expression", span="18-18"];
d5 [cluster="lambda expression", color=green, community=0, label="1: new SqlServerConnection(null)", span="18-18"];
d6 [cluster="lambda expression", label="Exit lambda expression", span="18-18"];
d7 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", span="35-35"];
d19 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", color=green, community=0, label="1: UseConnection(connection =>\r\n            {\r\n                var @lock = connection.AcquireJobLock(''1'');\r\n                Assert.NotNull(@lock);\r\n            })", span="34-38"];
d439 [label="HangFire.SqlServer.Tests.ConnectionFacts", span=""];
d18 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", span="32-32"];
d20 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", span="32-32"];
d11 [cluster="Unk.UseConnection", label="Entry Unk.UseConnection", span=""];
d21 [cluster="lambda expression", label="Entry lambda expression", span="34-38"];
d22 [cluster="lambda expression", color=green, community=0, label="0: var @lock = connection.AcquireJobLock(''1'')", span="36-36"];
d23 [cluster="lambda expression", color=green, community=0, label="3: Assert.NotNull(@lock)", span="37-37"];
d25 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", label="Entry HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="52-52"];
d24 [cluster="lambda expression", label="Exit lambda expression", span="34-38"];
d17 [cluster="Unk.NotNull", label="Entry Unk.NotNull", span=""];
d27 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", color=green, community=0, label="1: UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''job'', exception.ParamName);\r\n            })", span="44-53"];
d26 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="42-42"];
d28 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="42-42"];
d29 [cluster="lambda expression", label="Entry lambda expression", span="44-53"];
d30 [cluster="lambda expression", color=green, community=0, label="3: var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero))", span="46-50"];
d31 [cluster="lambda expression", label="Assert.Equal(''job'', exception.ParamName)", span="52-52"];
d34 [cluster="lambda expression", label="Entry lambda expression", span="47-50"];
d35 [cluster="lambda expression", color=green, community=0, label="3: connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero)", span="47-50"];
d440 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d36 [cluster="lambda expression", label="Exit lambda expression", span="47-50"];
d37 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
d38 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", label="Entry HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="104-104"];
d40 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", color=green, community=0, label="3: UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''parameters'', exception.ParamName);\r\n            })", span="59-68"];
d39 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", span="57-57"];
d41 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", span="57-57"];
d42 [cluster="lambda expression", label="Entry lambda expression", span="59-68"];
d43 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero))", span="61-65"];
d100 [cluster="lambda expression", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null))", span="112-113"];
d148 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''))", span="187-188"];
d159 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''))", span="199-200"];
d203 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''))", span="281-282"];
d214 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null))", span="293-294"];
d232 [cluster="lambda expression", label="var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single()", span="324-326"];
d241 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(null, ''default''))", span="339-340"];
d252 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(''1'', null))", span="351-352"];
d265 [cluster="lambda expression", label="var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single()", span="371-371"];
d276 [cluster="lambda expression", label="var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single()", span="395-395"];
d283 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1))", span="405-406"];
d294 [cluster="lambda expression", label="Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1))", span="415-416"];
d319 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()))", span="457-458"];
d331 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null))", span="469-470"];
d359 [cluster="lambda expression", label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null))", span="510-511"];
d380 [cluster="lambda expression", label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null))", span="537-538"];
d407 [cluster="lambda expression", label="Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5)))", span="567-568"];
d428 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", label="var connection = new SqlServerConnection(sqlConnection)", span="598-598"];
d434 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", label="var connection = new SqlServerConnection(ConnectionUtils.CreateConnection())", span="606-606"];
d9 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", label="UseConnection(connection =>\r\n            {\r\n                var transaction = connection.CreateWriteTransaction();\r\n                Assert.NotNull(transaction);\r\n            })", span="24-28"];
d55 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    TimeSpan.FromDays(1));\r\n\r\n                Assert.NotNull(jobId);\r\n                Assert.NotEmpty(jobId);\r\n\r\n                var sqlJob = sql.Query(''select * from HangFire.Job'').Single();\r\n                Assert.Equal(jobId, sqlJob.Id.ToString());\r\n                Assert.Equal(null, (int?) sqlJob.StateId);\r\n                Assert.Equal(null, (string) sqlJob.StateName);\r\n\r\n                var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData);\r\n                invocationData.Arguments = sqlJob.Arguments;\r\n\r\n                var job = invocationData.Deserialize();\r\n                Assert.Equal(typeof(ConnectionFacts), job.Type);\r\n                Assert.Equal(''SampleMethod'', job.Method.Name);\r\n                Assert.Equal(''Hello'', job.Arguments[0]);\r\n\r\n                Assert.True(DateTime.UtcNow < sqlJob.ExpireAt && sqlJob.ExpireAt < DateTime.UtcNow.AddDays(1));\r\n\r\n                var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value);\r\n\r\n                Assert.Equal(''Value1'', parameters[''Key1'']);\r\n                Assert.Equal(''Value2'', parameters[''Key2'']);\r\n            })", span="74-106"];
d97 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null)))", span="112-113"];
d107 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetJobData(''1'');\r\n                Assert.Null(result);\r\n            })", span="119-123"];
d116 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = Job.FromExpression(() => SampleMethod(''wrong''));\r\n\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result);\r\n                Assert.NotNull(result.Job);\r\n                Assert.Equal(''Succeeded'', result.State);\r\n                Assert.Equal(''Arguments'', result.Job.Arguments[0]);\r\n                Assert.Null(result.LoadException);\r\n            })", span="134-154"];
d136 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result.LoadException);\r\n            })", span="165-179"];
d145 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="185-191"];
d156 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="197-203"];
d167 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''Value'', parameter.Value);\r\n            })", span="214-226"];
d178 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n                connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''AnotherValue'', parameter.Value);\r\n            })", span="237-250"];
d190 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', null);\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal((string) null, parameter.Value);\r\n            })", span="261-273"];
d200 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="279-285"];
d211 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="291-297"];
d221 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", label="UseConnection(connection =>\r\n            {\r\n                var value = connection.GetJobParameter(''1'', ''hello'');\r\n                Assert.Null(value);\r\n            })", span="303-307"];
d229 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single();\r\n\r\n                var value = connection.GetJobParameter(id.ToString(), ''name'');\r\n\r\n                Assert.Equal(''value'', value);\r\n            })", span="322-331"];
d238 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(null, ''default''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="337-343"];
d249 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(''1'', null));\r\n\r\n                Assert.Equal(''queue'', exception.ParamName);\r\n            })", span="349-355"];
d260 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql, new { id = ''1'', queue = ''default'' });\r\n\r\n                connection.DeleteJobFromQueue(''1'', ''default'');\r\n\r\n                var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single();\r\n                Assert.Equal(0, count);\r\n            })", span="365-373"];
d271 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    { \r\n                        new { id = ''1'', queue = ''critical'' },\r\n                        new { id = ''2'', queue = ''default'' } \r\n                    }); \r\n\r\n                connection.DeleteJobFromQueue(''1'', ''default'');\r\n\r\n                var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single();\r\n                Assert.Equal(2, count);\r\n            })", span="383-397"];
d280 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="403-409"];
d291 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)))", span="415-416"];
d300 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1);\r\n\r\n                Assert.Null(result);\r\n            })", span="422-428"];
d308 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0);\r\n                \r\n                Assert.Equal(''-1.0'', result);\r\n            })", span="442-449"];
d316 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()));\r\n\r\n                Assert.Equal(''serverId'', exception.ParamName);\r\n            })", span="455-461"];
d328 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null));\r\n\r\n                Assert.Equal(''context'', exception.ParamName);\r\n            })", span="467-473"];
d338 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                };\r\n                connection.AnnounceServer(''server'', context1);\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', server.Id);\r\n                Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data);\r\n                Assert.Null(server.HeartBeat);\r\n\r\n                var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                };\r\n                connection.AnnounceServer(''server'', context2);\r\n                var sameServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', sameServer.Id);\r\n                Assert.Contains(''1000'', sameServer.Data);\r\n            })", span="479-504"];
d356 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null)))", span="510-511"];
d367 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.RemoveServer(''Server1'');\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase);\r\n            })", span="523-531"];
d377 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null)))", span="537-538"];
d388 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.Heartbeat(''server1'');\r\n\r\n                var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime?)x.LastHeartbeat);\r\n\r\n                Assert.NotNull(servers[''server1'']);\r\n                Assert.Null(servers[''server2'']);\r\n            })", span="550-561"];
d404 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))))", span="567-568"];
d416 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    });\r\n\r\n                connection.RemoveTimedOutServers(TimeSpan.FromHours(15));\r\n\r\n                var liveServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server2'', liveServer.Id);\r\n            })", span="578-592"];
d14 [cluster="lambda expression", label="Assert.NotNull(transaction)", span="27-27"];
d60 [cluster="lambda expression", label="Assert.NotNull(jobId)", span="81-81"];
d122 [cluster="lambda expression", label="Assert.NotNull(result)", span="149-149"];
d123 [cluster="lambda expression", label="Assert.NotNull(result.Job)", span="150-150"];
d141 [cluster="lambda expression", label="Assert.NotNull(result.LoadException)", span="178-178"];
d394 [cluster="lambda expression", label="Assert.NotNull(servers[''server1''])", span="559-559"];
d32 [cluster="lambda expression", label="Exit lambda expression", span="44-53"];
d33 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
d59 [cluster="lambda expression", label="var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    TimeSpan.FromDays(1))", span="76-79"];
d47 [cluster="lambda expression", label="connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero)", span="62-65"];
d45 [cluster="lambda expression", label="Exit lambda expression", span="59-68"];
d44 [cluster="lambda expression", label="Assert.Equal(''parameters'', exception.ParamName)", span="67-67"];
d46 [cluster="lambda expression", label="Entry lambda expression", span="62-65"];
d99 [cluster="lambda expression", label="Entry lambda expression", span="112-113"];
d101 [cluster="lambda expression", label="Exit lambda expression", span="112-113"];
d102 [cluster="lambda expression", label="Entry lambda expression", span="113-113"];
d147 [cluster="lambda expression", label="Entry lambda expression", span="185-191"];
d149 [cluster="lambda expression", label="Assert.Equal(''id'', exception.ParamName)", span="190-190"];
d151 [cluster="lambda expression", label="Entry lambda expression", span="188-188"];
d158 [cluster="lambda expression", label="Entry lambda expression", span="197-203"];
d160 [cluster="lambda expression", label="Assert.Equal(''name'', exception.ParamName)", span="202-202"];
d162 [cluster="lambda expression", label="Entry lambda expression", span="200-200"];
d202 [cluster="lambda expression", label="Entry lambda expression", span="279-285"];
d204 [cluster="lambda expression", label="Assert.Equal(''id'', exception.ParamName)", span="284-284"];
d206 [cluster="lambda expression", label="Entry lambda expression", span="282-282"];
d213 [cluster="lambda expression", label="Entry lambda expression", span="291-297"];
d215 [cluster="lambda expression", label="Assert.Equal(''name'', exception.ParamName)", span="296-296"];
d217 [cluster="lambda expression", label="Entry lambda expression", span="294-294"];
d452 [label=arrangeSql, span=""];
d228 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", label="string arrangeSql = @''\r\ndeclare @id int\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nset @id = scope_identity()\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@id, @name, @value)\r\nselect @id''", span="313-320"];
d231 [cluster="lambda expression", label="Entry lambda expression", span="322-331"];
d233 [cluster="lambda expression", label="var value = connection.GetJobParameter(id.ToString(), ''name'')", span="328-328"];
d80 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
d240 [cluster="lambda expression", label="Entry lambda expression", span="337-343"];
d242 [cluster="lambda expression", label="Assert.Equal(''id'', exception.ParamName)", span="342-342"];
d244 [cluster="lambda expression", label="Entry lambda expression", span="340-340"];
d251 [cluster="lambda expression", label="Entry lambda expression", span="349-355"];
d253 [cluster="lambda expression", label="Assert.Equal(''queue'', exception.ParamName)", span="354-354"];
d255 [cluster="lambda expression", label="Entry lambda expression", span="352-352"];
d262 [cluster="lambda expression", label="Entry lambda expression", span="365-373"];
d264 [cluster="lambda expression", label="connection.DeleteJobFromQueue(''1'', ''default'')", span="369-369"];
d266 [cluster="lambda expression", label="Assert.Equal(0, count)", span="372-372"];
d273 [cluster="lambda expression", label="Entry lambda expression", span="383-397"];
d275 [cluster="lambda expression", label="connection.DeleteJobFromQueue(''1'', ''default'')", span="393-393"];
d277 [cluster="lambda expression", label="Assert.Equal(2, count)", span="396-396"];
d282 [cluster="lambda expression", label="Entry lambda expression", span="403-409"];
d284 [cluster="lambda expression", label="Assert.Equal(''key'', exception.ParamName)", span="408-408"];
d286 [cluster="lambda expression", label="Entry lambda expression", span="406-406"];
d293 [cluster="lambda expression", label="Entry lambda expression", span="415-416"];
d295 [cluster="lambda expression", label="Exit lambda expression", span="415-416"];
d296 [cluster="lambda expression", label="Entry lambda expression", span="416-416"];
d318 [cluster="lambda expression", label="Entry lambda expression", span="455-461"];
d320 [cluster="lambda expression", label="Assert.Equal(''serverId'', exception.ParamName)", span="460-460"];
d322 [cluster="lambda expression", label="Entry lambda expression", span="458-458"];
d330 [cluster="lambda expression", label="Entry lambda expression", span="467-473"];
d332 [cluster="lambda expression", label="Assert.Equal(''context'', exception.ParamName)", span="472-472"];
d334 [cluster="lambda expression", label="Entry lambda expression", span="470-470"];
d358 [cluster="lambda expression", label="Entry lambda expression", span="510-511"];
d360 [cluster="lambda expression", label="Exit lambda expression", span="510-511"];
d361 [cluster="lambda expression", label="Entry lambda expression", span="511-511"];
d379 [cluster="lambda expression", label="Entry lambda expression", span="537-538"];
d381 [cluster="lambda expression", label="Exit lambda expression", span="537-538"];
d382 [cluster="lambda expression", label="Entry lambda expression", span="538-538"];
d406 [cluster="lambda expression", label="Entry lambda expression", span="567-568"];
d408 [cluster="lambda expression", label="Exit lambda expression", span="567-568"];
d409 [cluster="lambda expression", label="Entry lambda expression", span="568-568"];
d427 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", label="var sqlConnection = ConnectionUtils.CreateConnection()", span="597-597"];
d429 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", label="action(sqlConnection, connection)", span="600-600"];
d433 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", span="604-604"];
d435 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", label="action(connection)", span="608-608"];
d431 [cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
d8 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="22-22"];
d10 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="22-22"];
d12 [cluster="lambda expression", label="Entry lambda expression", span="24-28"];
d54 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="72-72"];
d56 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="72-72"];
d57 [cluster="Unk.UseConnections", label="Entry Unk.UseConnections", span=""];
d58 [cluster="lambda expression", label="Entry lambda expression", span="74-106"];
d96 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="110-110"];
d98 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="110-110"];
d106 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="117-117"];
d108 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="117-117"];
d109 [cluster="lambda expression", label="Entry lambda expression", span="119-123"];
d115 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="129-132"];
d117 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="127-127"];
d118 [cluster="lambda expression", label="Entry lambda expression", span="134-154"];
d135 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="160-163"];
d137 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="158-158"];
d138 [cluster="lambda expression", label="Entry lambda expression", span="165-179"];
d144 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="183-183"];
d146 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="183-183"];
d155 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="195-195"];
d157 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="195-195"];
d166 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="209-212"];
d168 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="207-207"];
d169 [cluster="lambda expression", label="Entry lambda expression", span="214-226"];
d177 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="232-235"];
d179 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="230-230"];
d180 [cluster="lambda expression", label="Entry lambda expression", span="237-250"];
d189 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="256-259"];
d191 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="254-254"];
d192 [cluster="lambda expression", label="Entry lambda expression", span="261-273"];
d199 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="277-277"];
d201 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="277-277"];
d210 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="289-289"];
d212 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="289-289"];
d220 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="301-301"];
d222 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="301-301"];
d223 [cluster="lambda expression", label="Entry lambda expression", span="303-307"];
d230 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="311-311"];
d237 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", span="335-335"];
d239 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", span="335-335"];
d248 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", span="347-347"];
d250 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", span="347-347"];
d259 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", label="string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@id, @queue)''", span="361-363"];
d261 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", span="359-359"];
d270 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", label="string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@id, @queue)''", span="379-381"];
d272 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", span="377-377"];
d279 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="401-401"];
d281 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="401-401"];
d290 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="413-413"];
d292 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="413-413"];
d299 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="420-420"];
d301 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="420-420"];
d302 [cluster="lambda expression", label="Entry lambda expression", span="422-428"];
d307 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], Score, Value)\r\nvalues \r\n('key', 1.0, '1.0'),\r\n('key', -1.0, '-1.0'),\r\n('key', -5.0, '-5.0'),\r\n('another-key', -2.0, '-2.0')''", span="434-440"];
d309 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="432-432"];
d310 [cluster="lambda expression", label="Entry lambda expression", span="442-449"];
d315 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="453-453"];
d317 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="453-453"];
d327 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="465-465"];
d329 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="465-465"];
d337 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="477-477"];
d339 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="477-477"];
d340 [cluster="lambda expression", label="Entry lambda expression", span="479-504"];
d355 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="508-508"];
d357 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="508-508"];
d366 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data)\r\nvalues \r\n('Server1', ''),\r\n('Server2', '')''", span="517-521"];
d368 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", span="515-515"];
d369 [cluster="lambda expression", label="Entry lambda expression", span="523-531"];
d376 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="535-535"];
d378 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="535-535"];
d387 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data)\r\nvalues\r\n('server1', ''),\r\n('server2', '')''", span="544-548"];
d389 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="542-542"];
d390 [cluster="lambda expression", label="Entry lambda expression", span="550-561"];
d403 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="565-565"];
d405 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="565-565"];
d415 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues (@id, '', @heartbeat)''", span="574-576"];
d417 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="572-572"];
d418 [cluster="lambda expression", label="Entry lambda expression", span="578-592"];
d13 [cluster="lambda expression", label="var transaction = connection.CreateWriteTransaction()", span="26-26"];
d15 [cluster="lambda expression", label="Exit lambda expression", span="24-28"];
d61 [cluster="lambda expression", label="Assert.NotEmpty(jobId)", span="82-82"];
d121 [cluster="lambda expression", label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="147-147"];
d124 [cluster="lambda expression", label="Assert.Equal(''Succeeded'', result.State)", span="151-151"];
d140 [cluster="lambda expression", label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="176-176"];
d142 [cluster="lambda expression", label="Exit lambda expression", span="165-179"];
d393 [cluster="lambda expression", label="var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime?)x.LastHeartbeat)", span="556-557"];
d395 [cluster="lambda expression", label="Assert.Null(servers[''server2''])", span="560-560"];
d63 [cluster="lambda expression", label="Assert.Equal(jobId, sqlJob.Id.ToString())", span="85-85"];
d64 [cluster="lambda expression", label="Assert.Equal(null, (int?) sqlJob.StateId)", span="86-86"];
d65 [cluster="lambda expression", label="Assert.Equal(null, (string) sqlJob.StateName)", span="87-87"];
d69 [cluster="lambda expression", label="Assert.Equal(typeof(ConnectionFacts), job.Type)", span="93-93"];
d70 [cluster="lambda expression", label="Assert.Equal(''SampleMethod'', job.Method.Name)", span="94-94"];
d71 [cluster="lambda expression", label="Assert.Equal(''Hello'', job.Arguments[0])", span="95-95"];
d74 [cluster="lambda expression", label="Assert.Equal(''Value1'', parameters[''Key1''])", span="104-104"];
d75 [cluster="lambda expression", label="Assert.Equal(''Value2'', parameters[''Key2''])", span="105-105"];
d125 [cluster="lambda expression", label="Assert.Equal(''Arguments'', result.Job.Arguments[0])", span="152-152"];
d174 [cluster="lambda expression", label="Assert.Equal(''Value'', parameter.Value)", span="225-225"];
d186 [cluster="lambda expression", label="Assert.Equal(''AnotherValue'', parameter.Value)", span="249-249"];
d197 [cluster="lambda expression", label="Assert.Equal((string) null, parameter.Value)", span="272-272"];
d234 [cluster="lambda expression", label="Assert.Equal(''value'', value)", span="330-330"];
d313 [cluster="lambda expression", label="Assert.Equal(''-1.0'', result)", span="448-448"];
d344 [cluster="lambda expression", label="Assert.Equal(''server'', server.Id)", span="489-489"];
d350 [cluster="lambda expression", label="Assert.Equal(''server'', sameServer.Id)", span="502-502"];
d422 [cluster="lambda expression", label="Assert.Equal(''server2'', liveServer.Id)", span="591-591"];
d49 [cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="119-119"];
d77 [cluster="System.TimeSpan.FromDays(double)", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
d87 [cluster="lambda expression", label="Entry lambda expression", span="77-77"];
d73 [cluster="lambda expression", label="var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value)", span="99-102"];
d441 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d48 [cluster="lambda expression", label="Exit lambda expression", span="62-65"];
d50 [cluster="lambda expression", label="Entry lambda expression", span="63-63"];
d103 [cluster="lambda expression", label="connection.GetJobData(null)", span="113-113"];
d104 [cluster="lambda expression", label="Exit lambda expression", span="113-113"];
d150 [cluster="lambda expression", label="Exit lambda expression", span="185-191"];
d152 [cluster="lambda expression", label="connection.SetJobParameter(null, ''name'', ''value'')", span="188-188"];
d153 [cluster="lambda expression", label="Exit lambda expression", span="188-188"];
d161 [cluster="lambda expression", label="Exit lambda expression", span="197-203"];
d163 [cluster="lambda expression", label="connection.SetJobParameter(''1'', null, ''value'')", span="200-200"];
d164 [cluster="lambda expression", label="Exit lambda expression", span="200-200"];
d205 [cluster="lambda expression", label="Exit lambda expression", span="279-285"];
d207 [cluster="lambda expression", label="connection.GetJobParameter(null, ''hello'')", span="282-282"];
d208 [cluster="lambda expression", label="Exit lambda expression", span="282-282"];
d216 [cluster="lambda expression", label="Exit lambda expression", span="291-297"];
d218 [cluster="lambda expression", label="connection.GetJobParameter(''1'', null)", span="294-294"];
d219 [cluster="lambda expression", label="Exit lambda expression", span="294-294"];
d227 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="311-311"];
d235 [cluster="lambda expression", label="Exit lambda expression", span="322-331"];
d81 [cluster="Unk.ToString", label="Entry Unk.ToString", span=""];
d236 [cluster="Unk.GetJobParameter", label="Entry Unk.GetJobParameter", span=""];
d62 [cluster="lambda expression", label="var sqlJob = sql.Query(''select * from HangFire.Job'').Single()", span="84-84"];
d120 [cluster="lambda expression", label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="138-145"];
d139 [cluster="lambda expression", label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="167-174"];
d170 [cluster="lambda expression", label="var job = sql.Query(arrangeSql).Single()", span="216-216"];
d173 [cluster="lambda expression", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="221-223"];
d181 [cluster="lambda expression", label="var job = sql.Query(arrangeSql).Single()", span="239-239"];
d185 [cluster="lambda expression", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="245-247"];
d193 [cluster="lambda expression", label="var job = sql.Query(arrangeSql).Single()", span="263-263"];
d196 [cluster="lambda expression", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="268-270"];
d343 [cluster="lambda expression", label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="488-488"];
d349 [cluster="lambda expression", label="var sameServer = sql.Query(''select * from HangFire.Server'').Single()", span="501-501"];
d372 [cluster="lambda expression", label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="529-529"];
d421 [cluster="lambda expression", label="var liveServer = sql.Query(''select * from HangFire.Server'').Single()", span="590-590"];
d243 [cluster="lambda expression", label="Exit lambda expression", span="337-343"];
d245 [cluster="lambda expression", label="connection.DeleteJobFromQueue(null, ''default'')", span="340-340"];
d246 [cluster="lambda expression", label="Exit lambda expression", span="340-340"];
d254 [cluster="lambda expression", label="Exit lambda expression", span="349-355"];
d256 [cluster="lambda expression", label="connection.DeleteJobFromQueue(''1'', null)", span="352-352"];
d257 [cluster="lambda expression", label="Exit lambda expression", span="352-352"];
d267 [cluster="lambda expression", label="Exit lambda expression", span="365-373"];
d263 [cluster="lambda expression", label="sql.Execute(arrangeSql, new { id = ''1'', queue = ''default'' })", span="367-367"];
d247 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", label="Entry HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="214-214"];
d278 [cluster="lambda expression", label="Exit lambda expression", span="383-397"];
d274 [cluster="lambda expression", label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    { \r\n                        new { id = ''1'', queue = ''critical'' },\r\n                        new { id = ''2'', queue = ''default'' } \r\n                    })", span="385-391"];
d285 [cluster="lambda expression", label="Exit lambda expression", span="403-409"];
d287 [cluster="lambda expression", label="connection.GetFirstByLowestScoreFromSet(null, 0, 1)", span="406-406"];
d288 [cluster="lambda expression", label="Exit lambda expression", span="406-406"];
d297 [cluster="lambda expression", label="connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)", span="416-416"];
d298 [cluster="lambda expression", label="Exit lambda expression", span="416-416"];
d321 [cluster="lambda expression", label="Exit lambda expression", span="455-461"];
d323 [cluster="lambda expression", label="connection.AnnounceServer(null, new ServerContext())", span="458-458"];
d324 [cluster="lambda expression", label="Exit lambda expression", span="458-458"];
d333 [cluster="lambda expression", label="Exit lambda expression", span="467-473"];
d335 [cluster="lambda expression", label="connection.AnnounceServer(''server'', null)", span="470-470"];
d336 [cluster="lambda expression", label="Exit lambda expression", span="470-470"];
d362 [cluster="lambda expression", label="connection.RemoveServer(null)", span="511-511"];
d363 [cluster="lambda expression", label="Exit lambda expression", span="511-511"];
d383 [cluster="lambda expression", label="connection.Heartbeat(null)", span="538-538"];
d384 [cluster="lambda expression", label="Exit lambda expression", span="538-538"];
d410 [cluster="lambda expression", label="connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))", span="568-568"];
d411 [cluster="lambda expression", label="Exit lambda expression", span="568-568"];
d426 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", span="595-595"];
d430 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", span="595-595"];
d432 [cluster="System.Action<T1, T2>.Invoke(T1, T2)", label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0"];
d436 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", span="604-604"];
d437 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
d76 [cluster="lambda expression", label="Exit lambda expression", span="74-106"];
d112 [cluster="lambda expression", label="Exit lambda expression", span="119-123"];
d110 [cluster="lambda expression", label="var result = connection.GetJobData(''1'')", span="121-121"];
d114 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="127-127"];
d127 [cluster="lambda expression", label="Exit lambda expression", span="134-154"];
d119 [cluster="lambda expression", label="var job = Job.FromExpression(() => SampleMethod(''wrong''))", span="136-136"];
d134 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="158-158"];
d165 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="207-207"];
d175 [cluster="lambda expression", label="Exit lambda expression", span="214-226"];
d172 [cluster="lambda expression", label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="219-219"];
d176 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="230-230"];
d187 [cluster="lambda expression", label="Exit lambda expression", span="237-250"];
d183 [cluster="lambda expression", label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="242-242"];
d184 [cluster="lambda expression", label="connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'')", span="243-243"];
d188 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="254-254"];
d198 [cluster="lambda expression", label="Exit lambda expression", span="261-273"];
d195 [cluster="lambda expression", label="connection.SetJobParameter(jobId, ''Name'', null)", span="266-266"];
d226 [cluster="lambda expression", label="Exit lambda expression", span="303-307"];
d224 [cluster="lambda expression", label="var value = connection.GetJobParameter(''1'', ''hello'')", span="305-305"];
d258 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", span="359-359"];
d269 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", span="377-377"];
d305 [cluster="lambda expression", label="Exit lambda expression", span="422-428"];
d303 [cluster="lambda expression", label="var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1)", span="424-425"];
d306 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="432-432"];
d311 [cluster="lambda expression", label="sql.Execute(arrangeSql)", span="444-444"];
d314 [cluster="lambda expression", label="Exit lambda expression", span="442-449"];
d312 [cluster="lambda expression", label="var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0)", span="446-446"];
d352 [cluster="lambda expression", label="Exit lambda expression", span="479-504"];
d341 [cluster="lambda expression", label="var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                }", span="481-485"];
d342 [cluster="lambda expression", label="connection.AnnounceServer(''server'', context1)", span="486-486"];
d348 [cluster="lambda expression", label="connection.AnnounceServer(''server'', context2)", span="500-500"];
d365 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", span="515-515"];
d370 [cluster="lambda expression", label="sql.Execute(arrangeSql)", span="525-525"];
d374 [cluster="lambda expression", label="Exit lambda expression", span="523-531"];
d371 [cluster="lambda expression", label="connection.RemoveServer(''Server1'')", span="527-527"];
d386 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="542-542"];
d391 [cluster="lambda expression", label="sql.Execute(arrangeSql)", span="552-552"];
d396 [cluster="lambda expression", label="Exit lambda expression", span="550-561"];
d392 [cluster="lambda expression", label="connection.Heartbeat(''server1'')", span="554-554"];
d414 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="572-572"];
d419 [cluster="lambda expression", label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    })", span="580-586"];
d423 [cluster="lambda expression", label="Exit lambda expression", span="578-592"];
d420 [cluster="lambda expression", label="connection.RemoveTimedOutServers(TimeSpan.FromHours(15))", span="588-588"];
d16 [cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", label="Entry HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="47-47"];
d78 [cluster="Unk.NotEmpty", label="Entry Unk.NotEmpty", span=""];
d130 [cluster="int.ToString()", label="Entry int.ToString()", span="0-0"];
d105 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="153-153"];
d126 [cluster="lambda expression", label="Assert.Null(result.LoadException)", span="153-153"];
d79 [cluster="Unk.Query", label="Entry Unk.Query", span=""];
d86 [cluster="Unk.ToDictionary", label="Entry Unk.ToDictionary", span=""];
d397 [cluster="lambda expression", label="Entry lambda expression", span="557-557"];
d400 [cluster="lambda expression", label="Entry lambda expression", span="557-557"];
d113 [cluster="Unk.Null", label="Entry Unk.Null", span=""];
d66 [cluster="lambda expression", label="var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData)", span="89-89"];
d68 [cluster="lambda expression", label="var job = invocationData.Deserialize()", span="92-92"];
d72 [cluster="lambda expression", label="Assert.True(DateTime.UtcNow < sqlJob.ExpireAt && sqlJob.ExpireAt < DateTime.UtcNow.AddDays(1))", span="97-97"];
d345 [cluster="lambda expression", label="Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data)", span="490-492"];
d351 [cluster="lambda expression", label="Assert.Contains(''1000'', sameServer.Data)", span="503-503"];
d89 [cluster="lambda expression", label="Exit lambda expression", span="77-77"];
d88 [cluster="lambda expression", label="SampleMethod(''Hello'')", span="77-77"];
d90 [cluster="lambda expression", label="Entry lambda expression", span="102-102"];
d93 [cluster="lambda expression", label="Entry lambda expression", span="102-102"];
d52 [cluster="lambda expression", label="Exit lambda expression", span="63-63"];
d51 [cluster="lambda expression", label="SampleMethod(''hello'')", span="63-63"];
d442 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d445 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d154 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="189-189"];
d446 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d450 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d209 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="203-203"];
d451 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d171 [cluster="lambda expression", label="string jobId = job.Id.ToString()", span="217-217"];
d182 [cluster="lambda expression", label="string jobId = job.Id.ToString()", span="240-240"];
d194 [cluster="lambda expression", label="string jobId = job.Id.ToString()", span="264-264"];
d67 [cluster="lambda expression", label="invocationData.Arguments = sqlJob.Arguments", span="90-90"];
d443 [label=arrangeSql, span=""];
d128 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
d129 [cluster="HangFire.Common.JobHelper.ToJson(object)", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
d444 [label=arrangeSql, span=""];
d143 [cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", span="24-24"];
d447 [label=arrangeSql, span=""];
d448 [label=arrangeSql, span=""];
d449 [label=arrangeSql, span=""];
d346 [cluster="lambda expression", label="Assert.Null(server.HeartBeat)", span="493-493"];
d373 [cluster="lambda expression", label="Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase)", span="530-530"];
d453 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d454 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d455 [label=arrangeSql, span=""];
d268 [cluster="Unk.Execute", label="Entry Unk.Execute", span=""];
d456 [label=arrangeSql, span=""];
d457 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d289 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="223-223"];
d458 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d460 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d325 [cluster="HangFire.Server.ServerContext.ServerContext()", label="Entry HangFire.Server.ServerContext.ServerContext()", span="18-18"];
d326 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="234-234"];
d461 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d462 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d364 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="257-257"];
d464 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d385 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="266-266"];
d466 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d412 [cluster="System.TimeSpan.FromMinutes(double)", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
d413 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="275-275"];
d111 [cluster="lambda expression", label="Assert.Null(result)", span="122-122"];
d131 [cluster="lambda expression", label="Entry lambda expression", span="136-136"];
d225 [cluster="lambda expression", label="Assert.Null(value)", span="306-306"];
d304 [cluster="lambda expression", label="Assert.Null(result)", span="427-427"];
d459 [label=arrangeSql, span=""];
d347 [cluster="lambda expression", label="var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                }", span="495-499"];
d463 [label=arrangeSql, span=""];
d465 [label=arrangeSql, span=""];
d467 [label=arrangeSql, span=""];
d84 [cluster="System.DateTime.AddDays(double)", label="Entry System.DateTime.AddDays(double)", span="0-0"];
d424 [cluster="System.DateTime.AddHours(double)", label="Entry System.DateTime.AddHours(double)", span="0-0"];
d425 [cluster="System.TimeSpan.FromHours(double)", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
d399 [cluster="lambda expression", label="Exit lambda expression", span="557-557"];
d398 [cluster="lambda expression", label="(string)x.Id", span="557-557"];
d402 [cluster="lambda expression", label="Exit lambda expression", span="557-557"];
d401 [cluster="lambda expression", label="(DateTime?)x.LastHeartbeat", span="557-557"];
d82 [cluster="HangFire.Common.JobHelper.FromJson<T>(string)", label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="30-30"];
d83 [cluster="HangFire.Storage.InvocationData.Deserialize()", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
d85 [cluster="Unk.True", label="Entry Unk.True", span=""];
d353 [cluster="string.StartsWith(string)", label="Entry string.StartsWith(string)", span="0-0"];
d354 [cluster="Unk.Contains", label="Entry Unk.Contains", span=""];
d53 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", span="612-612"];
d92 [cluster="lambda expression", label="Exit lambda expression", span="102-102"];
d91 [cluster="lambda expression", label="(string) x.Name", span="102-102"];
d95 [cluster="lambda expression", label="Exit lambda expression", span="102-102"];
d94 [cluster="lambda expression", label="(string) x.Value", span="102-102"];
d375 [cluster="Unk.NotEqual", label="Entry Unk.NotEqual", span=""];
d133 [cluster="lambda expression", label="Exit lambda expression", span="136-136"];
d132 [cluster="lambda expression", label="SampleMethod(''wrong'')", span="136-136"];
d438 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", span="612-612"];
m1_0 [cluster="Hangfire.Client.ClientExceptionContext.ClientExceptionContext(Hangfire.Client.CreateContext, System.Exception)", file="CoreBackgroundJobPerformer.cs", label="Entry Hangfire.Client.ClientExceptionContext.ClientExceptionContext(Hangfire.Client.CreateContext, System.Exception)", span="26-26"];
m1_1 [cluster="Hangfire.Client.ClientExceptionContext.ClientExceptionContext(Hangfire.Client.CreateContext, System.Exception)", file="CoreBackgroundJobPerformer.cs", label="exception == null", span="29-29"];
m1_2 [cluster="Hangfire.Client.ClientExceptionContext.ClientExceptionContext(Hangfire.Client.CreateContext, System.Exception)", file="CoreBackgroundJobPerformer.cs", label="throw new ArgumentNullException(nameof(exception));", span="29-29"];
m1_3 [cluster="Hangfire.Client.ClientExceptionContext.ClientExceptionContext(Hangfire.Client.CreateContext, System.Exception)", file="CoreBackgroundJobPerformer.cs", label="Exception = exception", span="31-31"];
m1_4 [cluster="Hangfire.Client.ClientExceptionContext.ClientExceptionContext(Hangfire.Client.CreateContext, System.Exception)", file="CoreBackgroundJobPerformer.cs", label="Exit Hangfire.Client.ClientExceptionContext.ClientExceptionContext(Hangfire.Client.CreateContext, System.Exception)", span="26-26"];
m1_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="CoreBackgroundJobPerformer.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m1_6 [cluster="Unk.nameof", file="CoreBackgroundJobPerformer.cs", label="Entry Unk.nameof", span=""];
m1_7 [file="CoreBackgroundJobPerformer.cs", label="Hangfire.Client.ClientExceptionContext", span=""];
m2_6 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Ctor_ThrowsAnException_WhenActivatorIsNull()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Ctor_ThrowsAnException_WhenActivatorIsNull()", span="26-26"];
m2_7 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Ctor_ThrowsAnException_WhenActivatorIsNull()", file="CoreBackgroundJobPerformerFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                // ReSharper disable once AssignNullToNotNullAttribute\r\n                () => new CoreBackgroundJobPerformer(null))", span="28-30"];
m2_8 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Ctor_ThrowsAnException_WhenActivatorIsNull()", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.Equal(''activator'', exception.ParamName)", span="32-32"];
m2_9 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Ctor_ThrowsAnException_WhenActivatorIsNull()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Ctor_ThrowsAnException_WhenActivatorIsNull()", span="26-26"];
m2_190 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", span="224-224"];
m2_191 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", color=green, community=0, file="CoreBackgroundJobPerformerFacts.cs", label="1: _context.BackgroundJob.Job = Job.FromExpression(() => CancelableJob(JobCancellationToken.Null))", span="227-227"];
m2_192 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", color=green, community=0, file="CoreBackgroundJobPerformerFacts.cs", label="0: _context.CancellationToken.Setup(x => x.ThrowIfCancellationRequested()).Throws<OperationCanceledException>()", span="228-228"];
m2_193 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", color=green, community=3, file="CoreBackgroundJobPerformerFacts.cs", label="0: var performer = CreatePerformer()", span="229-229"];
m2_194 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", color=green, community=0, file="CoreBackgroundJobPerformerFacts.cs", label="0: Assert.Throws<OperationCanceledException>(\r\n                () => performer.Perform(_context.Object))", span="232-233"];
m2_195 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", span="224-224"];
m2_90 [cluster="System.DateTime.ToString(string)", file="CoreBackgroundJobPerformerFacts.cs", label="Entry System.DateTime.ToString(string)", span="0-0"];
m2_77 [cluster="System.ComponentModel.TypeConverter.ConvertToInvariantString(object)", file="CoreBackgroundJobPerformerFacts.cs", label="Entry System.ComponentModel.TypeConverter.ConvertToInvariantString(object)", span="0-0"];
m2_53 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Disposable.Method()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Disposable.Method()", span="254-254"];
m2_219 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Disposable.Method()", file="CoreBackgroundJobPerformerFacts.cs", label="_methodInvoked = true", span="256-256"];
m2_220 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Disposable.Method()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Disposable.Method()", span="254-254"];
m2_101 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithDateTimeArgument(System.DateTime)", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithDateTimeArgument(System.DateTime)", span="294-294"];
m2_239 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithDateTimeArgument(System.DateTime)", file="CoreBackgroundJobPerformerFacts.cs", label="_methodInvoked = true", span="296-296"];
m2_240 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithDateTimeArgument(System.DateTime)", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.Equal(SomeDateTime, argument)", span="298-298"];
m2_241 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithDateTimeArgument(System.DateTime)", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithDateTimeArgument(System.DateTime)", span="294-294"];
m2_157 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, params object[])", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, params object[])", span="144-144"];
m2_24 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CreatePerformer()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CreatePerformer()", span="319-319"];
m2_251 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CreatePerformer()", file="CoreBackgroundJobPerformerFacts.cs", label="return new CoreBackgroundJobPerformer(_activator.Object);", span="321-321"];
m2_252 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CreatePerformer()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CreatePerformer()", span="319-319"];
m2_0 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CoreBackgroundJobPerformerFacts()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CoreBackgroundJobPerformerFacts()", span="19-19"];
m2_1 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CoreBackgroundJobPerformerFacts()", file="CoreBackgroundJobPerformerFacts.cs", label="_activator = new Mock<JobActivator>() { CallBase = true }", span="21-21"];
m2_2 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CoreBackgroundJobPerformerFacts()", file="CoreBackgroundJobPerformerFacts.cs", label="_context = new PerformContextMock()", span="22-22"];
m2_3 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CoreBackgroundJobPerformerFacts()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CoreBackgroundJobPerformerFacts()", span="19-19"];
m2_38 [cluster="Hangfire.Common.Job.FromExpression<TType>(System.Linq.Expressions.Expression<System.Action<TType>>)", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Common.Job.FromExpression<TType>(System.Linq.Expressions.Expression<System.Action<TType>>)", span="286-286"];
m2_91 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTimeArguments()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTimeArguments()", span="128-128"];
m2_93 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTimeArguments()", file="CoreBackgroundJobPerformerFacts.cs", label="_context.BackgroundJob.Job = Job.FromExpression(() => MethodWithDateTimeArgument(SomeDateTime))", span="132-132"];
m2_94 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTimeArguments()", file="CoreBackgroundJobPerformerFacts.cs", label="var performer = CreatePerformer()", span="133-133"];
m2_95 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTimeArguments()", file="CoreBackgroundJobPerformerFacts.cs", label="performer.Perform(_context.Object)", span="136-136"];
m2_92 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTimeArguments()", file="CoreBackgroundJobPerformerFacts.cs", label="_methodInvoked = false", span="131-131"];
m2_96 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTimeArguments()", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.True(_methodInvoked)", span="139-139"];
m2_97 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTimeArguments()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTimeArguments()", span="128-128"];
m2_78 [cluster="System.Type.GetMethod(string)", file="CoreBackgroundJobPerformerFacts.cs", label="Entry System.Type.GetMethod(string)", span="0-0"];
m2_79 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", span="13-13"];
m2_207 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", span="237-237"];
m2_208 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", file="CoreBackgroundJobPerformerFacts.cs", label="_context.BackgroundJob.Job = Job.FromExpression<JobFacts.Instance>(x => x.FunctionReturningValue())", span="239-239"];
m2_209 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", file="CoreBackgroundJobPerformerFacts.cs", label="var performer = CreatePerformer()", span="240-240"];
m2_210 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", file="CoreBackgroundJobPerformerFacts.cs", label="var result = performer.Perform(_context.Object)", span="242-242"];
m2_211 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.Equal(''Return value'', result)", span="244-244"];
m2_212 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", span="237-237"];
m2_120 [cluster="System.InvalidOperationException.InvalidOperationException()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m2_186 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.ExceptionMethod()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.ExceptionMethod()", span="314-314"];
m2_248 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.ExceptionMethod()", file="CoreBackgroundJobPerformerFacts.cs", label="throw new InvalidOperationException(''exception'');", span="316-316"];
m2_249 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.ExceptionMethod()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.ExceptionMethod()", span="314-314"];
m2_10 [cluster="Unk.>", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Unk.>", span=""];
m2_102 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_WorksCorrectly_WithNullValues()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_WorksCorrectly_WithNullValues()", span="143-143"];
m2_104 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_WorksCorrectly_WithNullValues()", file="CoreBackgroundJobPerformerFacts.cs", label="_context.BackgroundJob.Job = Job.FromExpression(() => NullArgumentMethod(null))", span="147-147"];
m2_105 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_WorksCorrectly_WithNullValues()", file="CoreBackgroundJobPerformerFacts.cs", label="var performer = CreatePerformer()", span="149-149"];
m2_106 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_WorksCorrectly_WithNullValues()", file="CoreBackgroundJobPerformerFacts.cs", label="performer.Perform(_context.Object)", span="151-151"];
m2_103 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_WorksCorrectly_WithNullValues()", file="CoreBackgroundJobPerformerFacts.cs", label="_methodInvoked = false", span="146-146"];
m2_107 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_WorksCorrectly_WithNullValues()", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.True(_methodInvoked)", span="154-154"];
m2_108 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_WorksCorrectly_WithNullValues()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_WorksCorrectly_WithNullValues()", span="143-143"];
m2_203 [cluster="Unk.ThrowIfCancellationRequested", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Unk.ThrowIfCancellationRequested", span=""];
m2_54 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesArguments_ToACallingMethod()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesArguments_ToACallingMethod()", span="72-72"];
m2_56 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesArguments_ToACallingMethod()", file="CoreBackgroundJobPerformerFacts.cs", label="_context.BackgroundJob.Job = Job.FromExpression(() => MethodWithArguments(''hello'', 5))", span="76-76"];
m2_57 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesArguments_ToACallingMethod()", file="CoreBackgroundJobPerformerFacts.cs", label="var performer = CreatePerformer()", span="77-77"];
m2_58 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesArguments_ToACallingMethod()", file="CoreBackgroundJobPerformerFacts.cs", label="performer.Perform(_context.Object)", span="80-80"];
m2_55 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesArguments_ToACallingMethod()", file="CoreBackgroundJobPerformerFacts.cs", label="_methodInvoked = false", span="75-75"];
m2_59 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesArguments_ToACallingMethod()", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.True(_methodInvoked)", span="83-83"];
m2_60 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesArguments_ToACallingMethod()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesArguments_ToACallingMethod()", span="72-72"];
m2_15 [cluster="Hangfire.Server.CoreBackgroundJobPerformer.CoreBackgroundJobPerformer(Hangfire.JobActivator)", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Server.CoreBackgroundJobPerformer.CoreBackgroundJobPerformer(Hangfire.JobActivator)", span="35-35"];
m2_64 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithArguments(string, int)", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithArguments(string, int)", span="306-306"];
m2_244 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithArguments(string, int)", file="CoreBackgroundJobPerformerFacts.cs", label="_methodInvoked = true", span="308-308"];
m2_245 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithArguments(string, int)", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.Equal(''hello'', stringArg)", span="310-310"];
m2_246 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithArguments(string, int)", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.Equal(5, intArg)", span="311-311"];
m2_247 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithArguments(string, int)", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithArguments(string, int)", span="306-306"];
m2_250 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="CoreBackgroundJobPerformerFacts.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m2_65 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", span="87-87"];
m2_71 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="CoreBackgroundJobPerformerFacts.cs", label="_context.BackgroundJob.Job = new Job(type, method, new[] { convertedDate })", span="97-97"];
m2_72 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="CoreBackgroundJobPerformerFacts.cs", label="var performer = CreatePerformer()", span="98-98"];
m2_73 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="CoreBackgroundJobPerformerFacts.cs", label="performer.Perform(_context.Object)", span="101-101"];
m2_68 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="CoreBackgroundJobPerformerFacts.cs", label="var convertedDate = typeConverter.ConvertToInvariantString(SomeDateTime)", span="92-92"];
m2_69 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="CoreBackgroundJobPerformerFacts.cs", label="var type = typeof(CoreBackgroundJobPerformerFacts)", span="94-94"];
m2_70 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="CoreBackgroundJobPerformerFacts.cs", label="var method = type.GetMethod(''MethodWithDateTimeArgument'')", span="95-95"];
m2_74 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.True(_methodInvoked)", span="104-104"];
m2_67 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="CoreBackgroundJobPerformerFacts.cs", label="var typeConverter = TypeDescriptor.GetConverter(typeof(DateTime))", span="91-91"];
m2_66 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="CoreBackgroundJobPerformerFacts.cs", label="_methodInvoked = false", span="90-90"];
m2_75 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", span="87-87"];
m2_76 [cluster="System.ComponentModel.TypeDescriptor.GetConverter(System.Type)", file="CoreBackgroundJobPerformerFacts.cs", label="Entry System.ComponentModel.TypeDescriptor.GetConverter(System.Type)", span="0-0"];
m2_25 [cluster="Hangfire.Server.CoreBackgroundJobPerformer.Perform(Hangfire.Server.PerformContext)", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Server.CoreBackgroundJobPerformer.Perform(Hangfire.Server.PerformContext)", span="41-41"];
m2_158 [cluster="Unk.NotNull", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Unk.NotNull", span=""];
m2_162 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", span="198-198"];
m2_164 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", file="CoreBackgroundJobPerformerFacts.cs", label="_context.BackgroundJob.Job = Job.FromExpression<BrokenDispose>(x => x.Method())", span="201-201"];
m2_165 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", file="CoreBackgroundJobPerformerFacts.cs", label="var performer = CreatePerformer()", span="202-202"];
m2_166 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => performer.Perform(_context.Object))", span="204-205"];
m2_163 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", file="CoreBackgroundJobPerformerFacts.cs", label="_methodInvoked = false", span="200-200"];
m2_167 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.True(_methodInvoked)", span="207-207"];
m2_168 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", span="198-198"];
m2_16 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeStaticMethods()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeStaticMethods()", span="36-36"];
m2_18 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeStaticMethods()", file="CoreBackgroundJobPerformerFacts.cs", label="_context.BackgroundJob.Job = Job.FromExpression(() => StaticMethod())", span="39-39"];
m2_19 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeStaticMethods()", file="CoreBackgroundJobPerformerFacts.cs", label="var performer = CreatePerformer()", span="40-40"];
m2_20 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeStaticMethods()", file="CoreBackgroundJobPerformerFacts.cs", label="performer.Perform(_context.Object)", span="42-42"];
m2_17 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeStaticMethods()", file="CoreBackgroundJobPerformerFacts.cs", label="_methodInvoked = false", span="38-38"];
m2_21 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeStaticMethods()", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.True(_methodInvoked)", span="44-44"];
m2_22 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeStaticMethods()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeStaticMethods()", span="36-36"];
m2_121 [cluster="Unk.Setup", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Unk.Setup", span=""];
m2_113 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsException_WhenActivatorThrowsAnException()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsException_WhenActivatorThrowsAnException()", span="158-158"];
m2_115 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsException_WhenActivatorThrowsAnException()", file="CoreBackgroundJobPerformerFacts.cs", label="_activator.Setup(x => x.ActivateJob(It.IsAny<Type>())).Throws(exception)", span="162-162"];
m2_116 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsException_WhenActivatorThrowsAnException()", file="CoreBackgroundJobPerformerFacts.cs", label="_context.BackgroundJob.Job = Job.FromExpression(() => InstanceMethod())", span="164-164"];
m2_117 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsException_WhenActivatorThrowsAnException()", file="CoreBackgroundJobPerformerFacts.cs", label="var performer = CreatePerformer()", span="165-165"];
m2_118 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsException_WhenActivatorThrowsAnException()", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => performer.Perform(_context.Object))", span="168-169"];
m2_114 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsException_WhenActivatorThrowsAnException()", file="CoreBackgroundJobPerformerFacts.cs", label="var exception = new InvalidOperationException()", span="161-161"];
m2_119 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsException_WhenActivatorThrowsAnException()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsException_WhenActivatorThrowsAnException()", span="158-158"];
m2_122 [cluster="Unk.Throws", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Unk.Throws", span=""];
m2_235 [cluster="Unk.Null", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Unk.Null", span=""];
m2_149 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", span="184-184"];
m2_152 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="CoreBackgroundJobPerformerFacts.cs", label="_context.BackgroundJob.Job = new Job(type, method, new object[] { ''sdfa'' })", span="188-188"];
m2_153 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="CoreBackgroundJobPerformerFacts.cs", label="var performer = CreatePerformer()", span="189-189"];
m2_154 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="CoreBackgroundJobPerformerFacts.cs", label="var exception = Assert.Throws<JobPerformanceException>(\r\n                () => performer.Perform(_context.Object))", span="191-192"];
m2_150 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="CoreBackgroundJobPerformerFacts.cs", label="var type = typeof(JobFacts)", span="186-186"];
m2_151 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="CoreBackgroundJobPerformerFacts.cs", label="var method = type.GetMethod(''MethodWithDateTimeArgument'')", span="187-187"];
m2_155 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.NotNull(exception.InnerException)", span="194-194"];
m2_156 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", span="184-184"];
m2_253 [cluster="CoreBackgroundJobPerformer.cstr", file="CoreBackgroundJobPerformerFacts.cs", label="Entry CoreBackgroundJobPerformer.cstr", span=""];
m2_43 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_DisposesDisposableInstance_AfterPerformance()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_DisposesDisposableInstance_AfterPerformance()", span="60-60"];
m2_45 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_DisposesDisposableInstance_AfterPerformance()", file="CoreBackgroundJobPerformerFacts.cs", label="_context.BackgroundJob.Job = Job.FromExpression<Disposable>(x => x.Method())", span="63-63"];
m2_46 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_DisposesDisposableInstance_AfterPerformance()", file="CoreBackgroundJobPerformerFacts.cs", label="var performer = CreatePerformer()", span="64-64"];
m2_47 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_DisposesDisposableInstance_AfterPerformance()", file="CoreBackgroundJobPerformerFacts.cs", label="performer.Perform(_context.Object)", span="66-66"];
m2_44 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_DisposesDisposableInstance_AfterPerformance()", file="CoreBackgroundJobPerformerFacts.cs", label="_disposed = false", span="62-62"];
m2_48 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_DisposesDisposableInstance_AfterPerformance()", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.True(_disposed)", span="68-68"];
m2_49 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_DisposesDisposableInstance_AfterPerformance()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_DisposesDisposableInstance_AfterPerformance()", span="60-60"];
m2_133 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WhenActivatorReturnsNull()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WhenActivatorReturnsNull()", span="173-173"];
m2_134 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WhenActivatorReturnsNull()", file="CoreBackgroundJobPerformerFacts.cs", label="_activator.Setup(x => x.ActivateJob(It.IsNotNull<Type>())).Returns(null)", span="175-175"];
m2_135 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WhenActivatorReturnsNull()", file="CoreBackgroundJobPerformerFacts.cs", label="_context.BackgroundJob.Job = Job.FromExpression(() => InstanceMethod())", span="176-176"];
m2_136 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WhenActivatorReturnsNull()", file="CoreBackgroundJobPerformerFacts.cs", label="var performer = CreatePerformer()", span="177-177"];
m2_137 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WhenActivatorReturnsNull()", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => performer.Perform(_context.Object))", span="179-180"];
m2_138 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WhenActivatorReturnsNull()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WhenActivatorReturnsNull()", span="173-173"];
m2_12 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="30-30"];
m2_196 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="227-227"];
m2_200 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="228-228"];
m2_205 [cluster="lambda expression", color=green, community=0, file="CoreBackgroundJobPerformerFacts.cs", label="0: performer.Perform(_context.Object)", span="233-233"];
m2_204 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="233-233"];
m2_206 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="233-233"];
m2_197 [cluster="lambda expression", color=green, community=0, file="CoreBackgroundJobPerformerFacts.cs", label="0: CancelableJob(JobCancellationToken.Null)", span="227-227"];
m2_198 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="227-227"];
m2_201 [cluster="lambda expression", color=green, community=0, file="CoreBackgroundJobPerformerFacts.cs", label="1: x.ThrowIfCancellationRequested()", span="228-228"];
m2_202 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="228-228"];
m2_62 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="MethodWithArguments(''hello'', 5)", span="76-76"];
m2_99 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="MethodWithDateTimeArgument(SomeDateTime)", span="132-132"];
m2_128 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="InstanceMethod()", span="164-164"];
m2_131 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="performer.Perform(_context.Object)", span="169-169"];
m2_144 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="InstanceMethod()", span="176-176"];
m2_147 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="performer.Perform(_context.Object)", span="180-180"];
m2_160 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="performer.Perform(_context.Object)", span="192-192"];
m2_174 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="performer.Perform(_context.Object)", span="205-205"];
m2_188 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="performer.Perform(_context.Object)", span="217-217"];
m2_124 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="x.ActivateJob(It.IsAny<Type>())", span="162-162"];
m2_141 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="x.ActivateJob(It.IsNotNull<Type>())", span="175-175"];
m2_27 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="39-39"];
m2_39 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="51-51"];
m2_50 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="63-63"];
m2_61 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="76-76"];
m2_63 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="76-76"];
m2_98 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="132-132"];
m2_100 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="132-132"];
m2_109 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="147-147"];
m2_123 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="162-162"];
m2_127 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="164-164"];
m2_129 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="164-164"];
m2_130 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="169-169"];
m2_132 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="169-169"];
m2_140 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="175-175"];
m2_143 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="176-176"];
m2_145 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="176-176"];
m2_146 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="180-180"];
m2_148 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="180-180"];
m2_159 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="192-192"];
m2_161 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="192-192"];
m2_169 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="201-201"];
m2_173 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="205-205"];
m2_175 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="205-205"];
m2_183 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="213-213"];
m2_187 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="217-217"];
m2_189 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="217-217"];
m2_213 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Entry lambda expression", span="239-239"];
m2_125 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="162-162"];
m2_142 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="175-175"];
m2_29 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="39-39"];
m2_28 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="StaticMethod()", span="39-39"];
m2_41 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="51-51"];
m2_40 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="x.InstanceMethod()", span="51-51"];
m2_52 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="63-63"];
m2_51 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="x.Method()", span="63-63"];
m2_110 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="NullArgumentMethod(null)", span="147-147"];
m2_111 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="147-147"];
m2_171 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="201-201"];
m2_170 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="x.Method()", span="201-201"];
m2_185 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="213-213"];
m2_184 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="ExceptionMethod()", span="213-213"];
m2_215 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="239-239"];
m2_214 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="x.FunctionReturningValue()", span="239-239"];
m2_13 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="new CoreBackgroundJobPerformer(null)", span="30-30"];
m2_14 [cluster="lambda expression", file="CoreBackgroundJobPerformerFacts.cs", label="Exit lambda expression", span="30-30"];
m2_216 [cluster="Hangfire.Core.Tests.Common.JobFacts.Instance.FunctionReturningValue()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Common.JobFacts.Instance.FunctionReturningValue()", span="571-571"];
m2_126 [cluster="Unk.ActivateJob", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Unk.ActivateJob", span=""];
m2_80 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", span="108-108"];
m2_85 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="CoreBackgroundJobPerformerFacts.cs", label="_context.BackgroundJob.Job = new Job(type, method, new[] { convertedDate })", span="117-117"];
m2_86 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="CoreBackgroundJobPerformerFacts.cs", label="var performer = CreatePerformer()", span="118-118"];
m2_87 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="CoreBackgroundJobPerformerFacts.cs", label="performer.Perform(_context.Object)", span="121-121"];
m2_82 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="CoreBackgroundJobPerformerFacts.cs", label="var convertedDate = SomeDateTime.ToString(''MM/dd/yyyy HH:mm:ss.ffff'')", span="112-112"];
m2_83 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="CoreBackgroundJobPerformerFacts.cs", label="var type = typeof(CoreBackgroundJobPerformerFacts)", span="114-114"];
m2_84 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="CoreBackgroundJobPerformerFacts.cs", label="var method = type.GetMethod(''MethodWithDateTimeArgument'')", span="115-115"];
m2_88 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.True(_methodInvoked)", span="124-124"];
m2_81 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="CoreBackgroundJobPerformerFacts.cs", label="_methodInvoked = false", span="111-111"];
m2_89 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", span="108-108"];
m2_4 [cluster="Mock<JobActivator>.cstr", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Mock<JobActivator>.cstr", span=""];
m2_238 [cluster="Hangfire.IJobCancellationToken.ThrowIfCancellationRequested()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.IJobCancellationToken.ThrowIfCancellationRequested()", span="24-24"];
m2_172 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.BrokenDispose.Method()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.BrokenDispose.Method()", span="267-267"];
m2_224 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.BrokenDispose.Method()", file="CoreBackgroundJobPerformerFacts.cs", label="_methodInvoked = true", span="269-269"];
m2_225 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.BrokenDispose.Method()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.BrokenDispose.Method()", span="267-267"];
m2_31 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeInstanceMethods()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeInstanceMethods()", span="48-48"];
m2_33 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeInstanceMethods()", file="CoreBackgroundJobPerformerFacts.cs", label="_context.BackgroundJob.Job = Job.FromExpression<CoreBackgroundJobPerformerFacts>(x => x.InstanceMethod())", span="51-51"];
m2_34 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeInstanceMethods()", file="CoreBackgroundJobPerformerFacts.cs", label="var performer = CreatePerformer()", span="52-52"];
m2_35 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeInstanceMethods()", file="CoreBackgroundJobPerformerFacts.cs", label="performer.Perform(_context.Object)", span="54-54"];
m2_32 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeInstanceMethods()", file="CoreBackgroundJobPerformerFacts.cs", label="_methodInvoked = false", span="50-50"];
m2_36 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeInstanceMethods()", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.True(_methodInvoked)", span="56-56"];
m2_37 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeInstanceMethods()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeInstanceMethods()", span="48-48"];
m2_26 [cluster="Unk.True", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Unk.True", span=""];
m2_176 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", span="211-211"];
m2_177 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", file="CoreBackgroundJobPerformerFacts.cs", label="_context.BackgroundJob.Job = Job.FromExpression(() => ExceptionMethod())", span="213-213"];
m2_178 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", file="CoreBackgroundJobPerformerFacts.cs", label="var performer = CreatePerformer()", span="214-214"];
m2_179 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", file="CoreBackgroundJobPerformerFacts.cs", label="var thrownException = Assert.Throws<JobPerformanceException>(\r\n                () => performer.Perform(_context.Object))", span="216-217"];
m2_180 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.IsType<InvalidOperationException>(thrownException.InnerException)", span="219-219"];
m2_181 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.Equal(''exception'', thrownException.InnerException.Message)", span="220-220"];
m2_182 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", span="211-211"];
m2_139 [cluster="Unk.Returns", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Unk.Returns", span=""];
m2_30 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.StaticMethod()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.StaticMethod()", span="301-301"];
m2_242 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.StaticMethod()", file="CoreBackgroundJobPerformerFacts.cs", label="_methodInvoked = true", span="303-303"];
m2_243 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.StaticMethod()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.StaticMethod()", span="301-301"];
m2_199 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CancelableJob(Hangfire.IJobCancellationToken)", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CancelableJob(Hangfire.IJobCancellationToken)", span="289-289"];
m2_236 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CancelableJob(Hangfire.IJobCancellationToken)", file="CoreBackgroundJobPerformerFacts.cs", label="token.ThrowIfCancellationRequested()", span="291-291"];
m2_237 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CancelableJob(Hangfire.IJobCancellationToken)", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CancelableJob(Hangfire.IJobCancellationToken)", span="289-289"];
m2_112 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.NullArgumentMethod(string[])", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.NullArgumentMethod(string[])", span="283-283"];
m2_232 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.NullArgumentMethod(string[])", file="CoreBackgroundJobPerformerFacts.cs", label="_methodInvoked = true", span="285-285"];
m2_233 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.NullArgumentMethod(string[])", file="CoreBackgroundJobPerformerFacts.cs", label="Assert.Null(argument)", span="286-286"];
m2_234 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.NullArgumentMethod(string[])", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.NullArgumentMethod(string[])", span="283-283"];
m2_5 [cluster="Hangfire.Core.Tests.PerformContextMock.PerformContextMock()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.PerformContextMock.PerformContextMock()", span="12-12"];
m2_226 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.BrokenDispose.Dispose()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.BrokenDispose.Dispose()", span="272-272"];
m2_227 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.BrokenDispose.Dispose()", file="CoreBackgroundJobPerformerFacts.cs", label="throw new InvalidOperationException();", span="274-274"];
m2_228 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.BrokenDispose.Dispose()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.BrokenDispose.Dispose()", span="272-272"];
m2_42 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.InstanceMethod()", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.InstanceMethod()", span="247-247"];
m2_217 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.InstanceMethod()", file="CoreBackgroundJobPerformerFacts.cs", label="_methodInvoked = true", span="249-249"];
m2_218 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.InstanceMethod()", file="CoreBackgroundJobPerformerFacts.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.InstanceMethod()", span="247-247"];
m2_23 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="CoreBackgroundJobPerformerFacts.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="232-232"];
m2_254 [file="CoreBackgroundJobPerformerFacts.cs", label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", span=""];
m2_260 [file="CoreBackgroundJobPerformerFacts.cs", label=performer, span=""];
m2_255 [file="CoreBackgroundJobPerformerFacts.cs", label=performer, span=""];
m2_256 [file="CoreBackgroundJobPerformerFacts.cs", label=performer, span=""];
m2_257 [file="CoreBackgroundJobPerformerFacts.cs", label=performer, span=""];
m2_258 [file="CoreBackgroundJobPerformerFacts.cs", label=performer, span=""];
m2_259 [file="CoreBackgroundJobPerformerFacts.cs", label=performer, span=""];
m3_6 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="CountersAggregator.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m3_24 [cluster="Hangfire.SqlServer.CountersAggregator.GetAggregationQuery()", file="CountersAggregator.cs", label="Entry Hangfire.SqlServer.CountersAggregator.GetAggregationQuery()", span="72-72"];
m3_31 [cluster="Hangfire.SqlServer.CountersAggregator.GetAggregationQuery()", color=red, community=3, file="CountersAggregator.cs", label="2: return @''\r\nDECLARE @RecordsToAggregate TABLE\r\n(\r\n	[Key] NVARCHAR(100) NOT NULL,\r\n	[Value] SMALLINT NOT NULL,\r\n	[ExpireAt] DATETIME NULL\r\n)\r\n\r\nSET TRANSACTION ISOLATION LEVEL READ COMMITTED\r\nBEGIN TRAN\r\n\r\nDELETE TOP (@count) [HangFire].[Counter] with (readpast)\r\nOUTPUT DELETED.[Key], DELETED.[Value], DELETED.[ExpireAt] INTO @RecordsToAggregate\r\n\r\nSET NOCOUNT ON\r\n\r\n;MERGE [HangFire].[AggregatedCounter] AS [Target]\r\nUSING (\r\n	SELECT [Key], SUM([Value]) as [Value], MAX([ExpireAt]) AS [ExpireAt] FROM @RecordsToAggregate\r\n	GROUP BY [Key]) AS [Source] ([Key], [Value], [ExpireAt])\r\nON [Target].[Key] = [Source].[Key]\r\nWHEN MATCHED THEN UPDATE SET \r\n	[Target].[Value] = [Target].[Value] + [Source].[Value],\r\n	[Target].[ExpireAt] = (SELECT MAX([ExpireAt]) FROM (VALUES ([Source].ExpireAt), ([Target].[ExpireAt])) AS MaxExpireAt([ExpireAt]))\r\nWHEN NOT MATCHED THEN INSERT ([Key], [Value], [ExpireAt]) VALUES ([Source].[Key], [Source].[Value], [Source].[ExpireAt]);\r\n\r\nCOMMIT TRAN'';", span="74-100"];
m3_32 [cluster="Hangfire.SqlServer.CountersAggregator.GetAggregationQuery()", file="CountersAggregator.cs", label="Exit Hangfire.SqlServer.CountersAggregator.GetAggregationQuery()", span="72-72"];
m3_0 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="CountersAggregator.cs", label="Entry Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="34-34"];
m3_1 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="CountersAggregator.cs", label="storage == null", span="36-36"];
m3_3 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="CountersAggregator.cs", label="_storage = storage", span="38-38"];
m3_4 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="CountersAggregator.cs", label="_interval = interval", span="39-39"];
m3_2 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="CountersAggregator.cs", label="throw new ArgumentNullException(''storage'');", span="36-36"];
m3_5 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="CountersAggregator.cs", label="Exit Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="34-34"];
m3_19 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="CountersAggregator.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m3_30 [cluster="System.Type.ToString()", file="CountersAggregator.cs", label="Entry System.Type.ToString()", span="0-0"];
m3_7 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="CountersAggregator.cs", label="Entry Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", span="42-42"];
m3_8 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="CountersAggregator.cs", label="Logger.DebugFormat(''Aggregating records in 'Counter' table...'')", span="44-44"];
m3_12 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="CountersAggregator.cs", label="cancellationToken.WaitHandle.WaitOne(DelayBetweenPasses)", span="59-59"];
m3_15 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="CountersAggregator.cs", label="cancellationToken.WaitHandle.WaitOne(_interval)", span="64-64"];
m3_9 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="CountersAggregator.cs", label="int removedCount = 0", span="46-46"];
m3_10 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", color=red, community=0, file="CountersAggregator.cs", label="1: _storage.UseConnection(connection =>\r\n                {\r\n                    removedCount = connection.Execute(\r\n                        GetAggregationQuery(),\r\n                        new { now = DateTime.UtcNow, count = NumberOfRecordsInSinglePass });\r\n                })", span="50-55"];
m3_11 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="CountersAggregator.cs", label="removedCount >= NumberOfRecordsInSinglePass", span="57-57"];
m3_14 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="CountersAggregator.cs", label="removedCount >= NumberOfRecordsInSinglePass", span="62-62"];
m3_13 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="CountersAggregator.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="60-60"];
m3_16 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="CountersAggregator.cs", label="Exit Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", span="42-42"];
m3_17 [cluster="Hangfire.Logging.ILog.DebugFormat(string, params object[])", file="CountersAggregator.cs", label="Entry Hangfire.Logging.ILog.DebugFormat(string, params object[])", span="122-122"];
m3_26 [cluster="Hangfire.SqlServer.CountersAggregator.ToString()", file="CountersAggregator.cs", label="Entry Hangfire.SqlServer.CountersAggregator.ToString()", span="67-67"];
m3_27 [cluster="Hangfire.SqlServer.CountersAggregator.ToString()", file="CountersAggregator.cs", label="return GetType().ToString();", span="69-69"];
m3_28 [cluster="Hangfire.SqlServer.CountersAggregator.ToString()", file="CountersAggregator.cs", label="Exit Hangfire.SqlServer.CountersAggregator.ToString()", span="67-67"];
m3_18 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", file="CountersAggregator.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", span="173-173"];
m3_29 [cluster="object.GetType()", file="CountersAggregator.cs", label="Entry object.GetType()", span="0-0"];
m3_21 [cluster="lambda expression", file="CountersAggregator.cs", label="Entry lambda expression", span="50-55"];
m3_22 [cluster="lambda expression", color=red, community=0, file="CountersAggregator.cs", label="2: removedCount = connection.Execute(\r\n                        GetAggregationQuery(),\r\n                        new { now = DateTime.UtcNow, count = NumberOfRecordsInSinglePass })", span="52-54"];
m3_23 [cluster="lambda expression", file="CountersAggregator.cs", label="Exit lambda expression", span="50-55"];
m3_20 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="CountersAggregator.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m3_33 [file="CountersAggregator.cs", label="Hangfire.SqlServer.CountersAggregator", span=""];
m4_29 [cluster="Unk.Equal", file="ExpirationManager.cs", label="Entry Unk.Equal", span=""];
m4_67 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ExpirationManager.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", span="150-150"];
m4_72 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ExpirationManager.cs", label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="160-160"];
m4_70 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ExpirationManager.cs", label="this.FeatureBackground()", span="156-156"];
m4_71 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ExpirationManager.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="158-158"];
m4_73 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ExpirationManager.cs", label="testRunner.Then(''the processing set should not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="162-162"];
m4_69 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ExpirationManager.cs", label="this.ScenarioSetup(scenarioInfo)", span="154-154"];
m4_74 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ExpirationManager.cs", label="this.ScenarioCleanup()", span="164-164"];
m4_68 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ExpirationManager.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying, it should remove the job from the processing set'', ((string[])(null)))", span="152-152"];
m4_75 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ExpirationManager.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", span="150-150"];
m4_35 [cluster="Unk.And", file="ExpirationManager.cs", label="Entry Unk.And", span=""];
m4_12 [cluster="Unk.>", file="ExpirationManager.cs", label="Entry Unk.>", span=""];
m4_23 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ExpirationManager.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m4_16 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="ExpirationManager.cs", label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", span="24-24"];
m4_17 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="ExpirationManager.cs", label="var options = new SqlServerStorageOptions()", span="26-26"];
m4_18 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="ExpirationManager.cs", label="Assert.Throws<ArgumentException>(\r\n                () => options.QueuePollInterval = TimeSpan.FromSeconds(-1))", span="27-28"];
m4_19 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="ExpirationManager.cs", label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", span="24-24"];
m4_24 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ExpirationManager.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m4_25 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="ExpirationManager.cs", label="var options = new SqlServerStorageOptions()", span="34-34"];
m4_26 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", file="ExpirationManager.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", span="66-66"];
m4_27 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", file="ExpirationManager.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m4_28 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", file="ExpirationManager.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", span="66-66"];
m4_36 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameShouldBeProcessing()", file="ExpirationManager.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.StateNameShouldBeProcessing()", span="85-85"];
m4_39 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameShouldBeProcessing()", file="ExpirationManager.cs", label="this.FeatureBackground()", span="91-91"];
m4_38 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameShouldBeProcessing()", file="ExpirationManager.cs", label="this.ScenarioSetup(scenarioInfo)", span="89-89"];
m4_40 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameShouldBeProcessing()", file="ExpirationManager.cs", label="testRunner.Then(''the state name should be equal to \'Processing\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="93-93"];
m4_41 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameShouldBeProcessing()", file="ExpirationManager.cs", label="this.ScenarioCleanup()", span="95-95"];
m4_37 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameShouldBeProcessing()", file="ExpirationManager.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State name should be \'Processing\''', ((string[])(null)))", span="87-87"];
m4_42 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameShouldBeProcessing()", file="ExpirationManager.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.StateNameShouldBeProcessing()", span="85-85"];
m4_66 [cluster="Unk.When", file="ExpirationManager.cs", label="Entry Unk.When", span=""];
m4_57 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ExpirationManager.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", span="129-129"];
m4_63 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ExpirationManager.cs", label="testRunner.And(''processing timestamp should be set to UtcNow'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="141-141"];
m4_60 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ExpirationManager.cs", label="this.FeatureBackground()", span="135-135"];
m4_62 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ExpirationManager.cs", label="testRunner.Then(''the processing set should contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="139-139"];
m4_64 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ExpirationManager.cs", label="this.ScenarioCleanup()", span="143-143"];
m4_59 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ExpirationManager.cs", label="this.ScenarioSetup(scenarioInfo)", span="133-133"];
m4_61 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ExpirationManager.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="137-137"];
m4_58 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ExpirationManager.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After applying, it should add the job to the processing set'', ((string[])(null)))", span="131-131"];
m4_65 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ExpirationManager.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", span="129-129"];
m4_6 [cluster="Unk.NotEqual", file="ExpirationManager.cs", label="Entry Unk.NotEqual", span=""];
m4_56 [cluster="Unk.AddRow", file="ExpirationManager.cs", label="Entry Unk.AddRow", span=""];
m4_8 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="ExpirationManager.cs", label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", span="16-16"];
m4_9 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="ExpirationManager.cs", label="var options = new SqlServerStorageOptions()", span="18-18"];
m4_10 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="ExpirationManager.cs", label="Assert.Throws<ArgumentException>(\r\n                () => options.QueuePollInterval = TimeSpan.Zero)", span="19-20"];
m4_11 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="ExpirationManager.cs", label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", span="16-16"];
m4_20 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="28-28"];
m4_14 [cluster="lambda expression", file="ExpirationManager.cs", label="options.QueuePollInterval = TimeSpan.Zero", span="20-20"];
m4_13 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="20-20"];
m4_15 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="20-20"];
m4_21 [cluster="lambda expression", file="ExpirationManager.cs", label="options.QueuePollInterval = TimeSpan.FromSeconds(-1)", span="28-28"];
m4_22 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ExpirationManager.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m4_43 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="ExpirationManager.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m4_44 [cluster="Unk.Then", file="ExpirationManager.cs", label="Entry Unk.Then", span=""];
m4_34 [cluster="Unk.Given", file="ExpirationManager.cs", label="Entry Unk.Given", span=""];
m4_45 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ExpirationManager.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", span="102-102"];
m4_48 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ExpirationManager.cs", label="this.FeatureBackground()", span="108-108"];
m4_47 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ExpirationManager.cs", label="this.ScenarioSetup(scenarioInfo)", span="106-106"];
m4_49 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ExpirationManager.cs", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="110-112"];
m4_53 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ExpirationManager.cs", label="this.ScenarioCleanup()", span="122-122"];
m4_46 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ExpirationManager.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It should have the correct properties set'', ((string[])(null)))", span="104-104"];
m4_50 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ExpirationManager.cs", label="table1.AddRow(new string[] {\r\n                        ''StartedAt'',\r\n                        ''<UtcNow timestamp>''})", span="113-115"];
m4_51 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ExpirationManager.cs", label="table1.AddRow(new string[] {\r\n                        ''ServerName'',\r\n                        ''TestServer''})", span="116-118"];
m4_52 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ExpirationManager.cs", label="testRunner.Then(''properties table should contain the following items:'', ((string)(null)), table1, ''Then '')", span="120-120"];
m4_54 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ExpirationManager.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", span="102-102"];
m4_55 [cluster="TechTalk.SpecFlow.Table.cstr", file="ExpirationManager.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m4_7 [cluster="Unk.True", file="ExpirationManager.cs", label="Entry Unk.True", span=""];
m4_5 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="ExpirationManager.cs", label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
m4_30 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="ExpirationManager.cs", label=options, span=""];
m4_32 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", color=green, community=0, file="ExpirationManager.cs", label="0: testRunner.And(''the Processing state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="77-77"];
m4_31 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="ExpirationManager.cs", label=options, span=""];
m4_33 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="ExpirationManager.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", span="71-71"];
m4_0 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="ExpirationManager.cs", label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", span="8-8"];
m4_1 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="ExpirationManager.cs", label="var options = new SqlServerStorageOptions()", span="10-10"];
m4_2 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="ExpirationManager.cs", label="Assert.NotEqual(0, options.QueuePollInterval.TotalSeconds)", span="11-11"];
m4_3 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="ExpirationManager.cs", label="Assert.True(options.PrepareSchemaIfNecessary)", span="12-12"];
m4_4 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="ExpirationManager.cs", label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", span="8-8"];
m4_76 [file="ExpirationManager.cs", label="HangFire.Tests.States.ProcessingStateFeature", span=""];
m5_36 [cluster="HangFire.Web.RazorPage.Write(object)", file="RecurringJobManager.cs", label="Entry HangFire.Web.RazorPage.Write(object)", span="76-76"];
m5_31 [cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="RecurringJobManager.cs", label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="69-69"];
m5_0 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="Entry HangFire.Web.Pages.ServersPage.Execute()", span="57-57"];
m5_10 [cluster="HangFire.Web.Pages.ServersPage.Execute()", color=green, community=0, file="RecurringJobManager.cs", label="3: servers", span="126-126"];
m5_5 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="servers = monitor.Servers()", span="79-79"];
m5_9 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="WriteLiteral(@''    <table class=''''table''''>\r\n        <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>Workers</th>\r\n                <th>Queues</th>\r\n                <th>Started</th>\r\n                <th>Heartbeat</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n'')", span="110-121"];
m5_28 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="WriteLiteral(''                    </td>\r\n                </tr>\r\n'')", span="223-223"];
m5_11 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="WriteLiteral(''                <tr>\r\n                    <td>'')", span="132-132"];
m5_29 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="WriteLiteral(''        </tbody>\r\n    </table>\r\n'')", span="233-233"];
m5_12 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="Write(server.Name.ToUpperInvariant())", span="137-137"];
m5_14 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="Write(server.WorkersCount)", span="147-147"];
m5_16 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="Write(HtmlHelper.Raw(String.Join('' '', server.Queues.Select(HtmlHelper.QueueLabel))))", span="157-157"];
m5_18 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="Write(JobHelper.ToStringTimestamp(server.StartedAt))", span="167-167"];
m5_20 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="Write(server.StartedAt)", span="177-177"];
m5_22 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="server.Heartbeat.HasValue", span="187-187"];
m5_24 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="Write(JobHelper.ToStringTimestamp(server.Heartbeat.Value))", span="198-198"];
m5_26 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="Write(server.Heartbeat)", span="208-208"];
m5_4 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="var monitor = JobStorage.Current.GetMonitoringApi()", span="77-77"];
m5_6 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="WriteLiteral(''\r\n'')", span="86-86"];
m5_7 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="servers.Count == 0", span="91-91"];
m5_27 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="WriteLiteral(''\r\n                            </span>\r\n'')", span="213-213"];
m5_13 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="WriteLiteral(''</td>\r\n                    <td>'')", span="142-142"];
m5_15 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="WriteLiteral(''</td>\r\n                    <td>'')", span="152-152"];
m5_17 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="WriteLiteral(''</td>\r\n                    <td data-moment=\'''')", span="162-162"];
m5_19 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="WriteLiteral(''\''>'')", span="172-172"];
m5_21 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="WriteLiteral(''</td>\r\n                    <td>\r\n'')", span="182-182"];
m5_23 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="WriteLiteral(''                            <span data-moment=\'''')", span="193-193"];
m5_25 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="WriteLiteral(''\''>\r\n                                '')", span="203-203"];
m5_3 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="IList<ServerDto> servers", span="76-76"];
m5_8 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="WriteLiteral(''    <div class=\''alert alert-warning\''>\r\n        There are no active servers. Backg'' +\r\n''round tasks will not be processed.\r\n    </div>\r\n'')", span="97-98"];
m5_1 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="WriteLiteral(''\r\n'')", span="61-61"];
m5_2 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="Layout = new LayoutPage { Title = ''Servers'' }", span="74-74"];
m5_30 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="RecurringJobManager.cs", label="Exit HangFire.Web.Pages.ServersPage.Execute()", span="57-57"];
m5_34 [cluster="HangFire.Storage.IMonitoringApi.Servers()", file="RecurringJobManager.cs", label="Entry HangFire.Storage.IMonitoringApi.Servers()", span="25-25"];
m5_39 [cluster="HangFire.Web.HtmlHelper.Raw(string)", file="RecurringJobManager.cs", label="Entry HangFire.Web.HtmlHelper.Raw(string)", span="40-40"];
m5_33 [cluster="HangFire.JobStorage.GetMonitoringApi()", file="RecurringJobManager.cs", label="Entry HangFire.JobStorage.GetMonitoringApi()", span="54-54"];
m5_35 [cluster="string.ToUpperInvariant()", file="RecurringJobManager.cs", label="Entry string.ToUpperInvariant()", span="0-0"];
m5_32 [cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="RecurringJobManager.cs", label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4"];
m5_38 [cluster="Unk.Join", file="RecurringJobManager.cs", label="Entry Unk.Join", span=""];
m5_41 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="RecurringJobManager.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
m5_40 [cluster="Unk.Write", file="RecurringJobManager.cs", label="Entry Unk.Write", span=""];
m5_37 [cluster="Unk.Select", file="RecurringJobManager.cs", label="Entry Unk.Select", span=""];
m5_42 [file="RecurringJobManager.cs", label="HangFire.Web.Pages.ServersPage", span=""];
m6_10 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="RecurringJobManagerFacts.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", span="21-21"];
m6_31 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="44-44"];
m6_32 [cluster="lambda expression", color=green, community=0, file="RecurringJobManagerFacts.cs", label="2: options.WorkerCount = -1", span="44-44"];
m6_33 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="44-44"];
m6_34 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", span="48-48"];
m6_67 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", span="77-77"];
m6_68 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", file="RecurringJobManagerFacts.cs", label="var manager = CreateManager()", span="79-79"];
m6_69 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", file="RecurringJobManagerFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => manager.AddOrUpdate(_id, _job, null))", span="81-82"];
m6_70 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", file="RecurringJobManagerFacts.cs", label="Assert.Equal(''cronExpression'', exception.ParamName)", span="84-84"];
m6_71 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", file="RecurringJobManagerFacts.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", span="77-77"];
m6_40 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="53-53"];
m6_110 [cluster="Unk.SetRangeInHash", file="RecurringJobManagerFacts.cs", label="Entry Unk.SetRangeInHash", span=""];
m6_57 [cluster="Hangfire.Cron.Daily()", file="RecurringJobManagerFacts.cs", label=options, span=""];
m6_18 [cluster="lambda expression", color=red, community=0, file="RecurringJobManagerFacts.cs", label="1: options.ServerName = null", span="26-26"];
m6_156 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", span="170-170"];
m6_157 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", color=green, community=2, file="RecurringJobManagerFacts.cs", label="0: _connection.Setup(x => x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', _id)))\r\n                .Returns(new Dictionary<string, string>\r\n                {\r\n                    { ''Job'', JobHelper.ToJson(InvocationData.Serialize(Job.FromExpression(() => Console.WriteLine()))) },\r\n                    { ''Queue'', ''my_queue'' }\r\n                })", span="173-178"];
m6_158 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", color=green, community=0, file="RecurringJobManagerFacts.cs", label="0: var manager = CreateManager()", span="180-180"];
m6_159 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", color=green, community=0, file="RecurringJobManagerFacts.cs", label="2: manager.Trigger(_id)", span="183-183"];
m6_160 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", color=green, community=2, file="RecurringJobManagerFacts.cs", label="2: _factory.Verify(x => x.Create(It.Is<CreateContext>(context =>\r\n                ((EnqueuedState)context.InitialState).Queue == ''my_queue'')))", span="186-187"];
m6_161 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", file="RecurringJobManagerFacts.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", span="170-170"];
m6_144 [cluster="Unk.GetAllEntriesFromHash", file="RecurringJobManagerFacts.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m6_12 [cluster="Hangfire.Cron.Minutely()", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Cron.Minutely()", span="29-29"];
m6_13 [cluster="Mock<JobStorage>.cstr", file="RecurringJobManagerFacts.cs", label="Entry Mock<JobStorage>.cstr", span=""];
m6_14 [cluster="Mock<IBackgroundJobFactory>.cstr", color=red, community=0, file="RecurringJobManagerFacts.cs", label="0: Entry Mock<IBackgroundJobFactory>.cstr", span=""];
m6_15 [cluster="Mock<IStorageConnection>.cstr", file="RecurringJobManagerFacts.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m6_131 [cluster="Hangfire.RecurringJobManager.Trigger(string)", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.RecurringJobManager.Trigger(string)", span="109-109"];
m6_193 [cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.RecurringJobManager.RemoveIfExists(string)", span="133-133"];
m6_109 [cluster="string.Format(string, object)", file="RecurringJobManagerFacts.cs", label="Entry string.Format(string, object)", span="0-0"];
m6_179 [cluster="Unk.DoesNotThrow", file="RecurringJobManagerFacts.cs", label="Entry Unk.DoesNotThrow", span=""];
m6_8 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="RecurringJobManagerFacts.cs", label="_transaction = new Mock<IWriteOnlyTransaction>()", span="32-32"];
m6_53 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.CreateManager()", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.CreateManager()", span="220-220"];
m6_54 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="60-60"];
m6_194 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", span="209-209"];
m6_195 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="RecurringJobManagerFacts.cs", label="var manager = CreateManager()", span="211-211"];
m6_196 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="RecurringJobManagerFacts.cs", label="manager.RemoveIfExists(_id)", span="213-213"];
m6_197 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="RecurringJobManagerFacts.cs", label="_transaction.Verify(x => x.RemoveFromSet(''recurring-jobs'', _id))", span="215-215"];
m6_198 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="RecurringJobManagerFacts.cs", label="_transaction.Verify(x => x.RemoveHash(String.Format(''recurring-job:{0}'', _id)))", span="216-216"];
m6_199 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="RecurringJobManagerFacts.cs", label="_transaction.Verify(x => x.Commit())", span="217-217"];
m6_200 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="RecurringJobManagerFacts.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", span="209-209"];
m6_75 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", span="88-88"];
m6_76 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", file="RecurringJobManagerFacts.cs", label="var manager = CreateManager()", span="90-90"];
m6_77 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", file="RecurringJobManagerFacts.cs", label="var exception = Assert.Throws<ArgumentException>(\r\n                () => manager.AddOrUpdate(_id, _job, ''* * *''))", span="92-93"];
m6_78 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", file="RecurringJobManagerFacts.cs", label="Assert.Equal(''cronExpression'', exception.ParamName)", span="95-95"];
m6_79 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", file="RecurringJobManagerFacts.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", span="88-88"];
m6_91 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", span="110-110"];
m6_92 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", file="RecurringJobManagerFacts.cs", label="var manager = CreateManager()", span="112-112"];
m6_93 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", file="RecurringJobManagerFacts.cs", label="manager.AddOrUpdate(_id, _job, _cronExpression)", span="114-114"];
m6_94 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", file="RecurringJobManagerFacts.cs", label="_transaction.Verify(x => x.AddToSet(''recurring-jobs'', _id))", span="116-116"];
m6_95 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", file="RecurringJobManagerFacts.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", span="110-110"];
m6_35 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", color=red, community=0, file="RecurringJobManagerFacts.cs", label="2: var options = CreateOptions()", span="50-50"];
m6_16 [cluster="Unk.Setup", file="RecurringJobManagerFacts.cs", label="Entry Unk.Setup", span=""];
m6_58 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string)", file="RecurringJobManagerFacts.cs", label=options, span=""];
m6_100 [cluster="Unk.AddToSet", file="RecurringJobManagerFacts.cs", label="Entry Unk.AddToSet", span=""];
m6_9 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="RecurringJobManagerFacts.cs", label="_connection.Setup(x => x.CreateWriteTransaction()).Returns(_transaction.Object)", span="33-33"];
m6_186 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_ThrowsAnException_WhenIdIsNull()", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_ThrowsAnException_WhenIdIsNull()", span="200-200"];
m6_187 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_ThrowsAnException_WhenIdIsNull()", file="RecurringJobManagerFacts.cs", label="var manager = CreateManager()", span="202-202"];
m6_188 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_ThrowsAnException_WhenIdIsNull()", file="RecurringJobManagerFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => manager.RemoveIfExists(null))", span="204-205"];
m6_189 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_ThrowsAnException_WhenIdIsNull()", file="RecurringJobManagerFacts.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_ThrowsAnException_WhenIdIsNull()", span="200-200"];
m6_174 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", span="191-191"];
m6_177 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", color=green, community=0, file="RecurringJobManagerFacts.cs", label="2: _factory.Verify(x => x.Create(It.IsAny<CreateContext>()), Times.Never)", span="196-196"];
m6_176 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", file="RecurringJobManagerFacts.cs", label="Assert.DoesNotThrow(() => manager.Trigger(_id))", span="195-195"];
m6_175 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", file="RecurringJobManagerFacts.cs", label="var manager = CreateManager()", span="193-193"];
m6_178 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", file="RecurringJobManagerFacts.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", span="191-191"];
m6_139 [cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="72-72"];
m6_36 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", file="RecurringJobManagerFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => options.Queues = null)", span="52-53"];
m6_37 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="40-40"];
m6_208 [cluster="Unk.RemoveHash", file="RecurringJobManagerFacts.cs", label="Entry Unk.RemoveHash", span=""];
m6_26 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="35-35"];
m6_132 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", span="151-151"];
m6_136 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", color=green, community=0, file="RecurringJobManagerFacts.cs", label="2: _factory.Verify(x => x.Create(It.Is<CreateContext>(context => context.InitialState is EnqueuedState)))", span="166-166"];
m6_135 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", file="RecurringJobManagerFacts.cs", label="manager.Trigger(_id)", span="163-163"];
m6_133 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", file="RecurringJobManagerFacts.cs", label="_connection.Setup(x => x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', _id)))\r\n                .Returns(new Dictionary<string, string>\r\n                {\r\n                    { ''Job'', JobHelper.ToJson(InvocationData.Serialize(Job.FromExpression(() => Console.WriteLine()))) }\r\n                })", span="154-158"];
m6_134 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", file="RecurringJobManagerFacts.cs", label="var manager = CreateManager()", span="160-160"];
m6_137 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", file="RecurringJobManagerFacts.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", span="151-151"];
m6_52 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", file="RecurringJobManagerFacts.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", span="55-55"];
m6_138 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RecurringJobManagerFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m6_20 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", span="30-30"];
m6_21 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", file="RecurringJobManagerFacts.cs", label="var options = CreateOptions()", span="32-32"];
m6_22 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", file="RecurringJobManagerFacts.cs", label="Assert.Throws<ArgumentOutOfRangeException>(\r\n                () => options.WorkerCount = 0)", span="34-35"];
m6_23 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="30-30"];
m6_48 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", span="55-55"];
m6_49 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", file="RecurringJobManagerFacts.cs", label="var manager = CreateManager()", span="57-57"];
m6_50 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", file="RecurringJobManagerFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => manager.AddOrUpdate(null, _job, Cron.Daily()))", span="59-60"];
m6_51 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", file="RecurringJobManagerFacts.cs", label="Assert.Equal(''recurringJobId'', exception.ParamName)", span="62-62"];
m6_212 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.CreateManager()", color=green, community=0, file="RecurringJobManagerFacts.cs", label="0: return new RecurringJobManager(_storage.Object, _factory.Object);", span="222-222"];
m6_213 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.CreateManager()", file="RecurringJobManagerFacts.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.CreateManager()", span="220-220"];
m6_41 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", span="57-57"];
m6_43 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", color=green, community=0, file="RecurringJobManagerFacts.cs", label="2: Assert.Throws<ArgumentException>(\r\n                () => options.Queues = new string[0])", span="61-62"];
m6_42 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="RecurringJobManagerFacts.cs", label="var options = CreateOptions()", span="59-59"];
m6_44 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="RecurringJobManagerFacts.cs", label="Exit Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", span="57-57"];
m6_105 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", file="RecurringJobManagerFacts.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", span="120-120"];
m6_102 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", file="RecurringJobManagerFacts.cs", label="var manager = CreateManager()", span="122-122"];
m6_103 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", file="RecurringJobManagerFacts.cs", label="manager.AddOrUpdate(_id, _job, _cronExpression)", span="124-124"];
m6_104 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", file="RecurringJobManagerFacts.cs", label="_transaction.Verify(x => x.SetRangeInHash(\r\n                String.Format(''recurring-job:{0}'', _id),\r\n                It.Is<Dictionary<string, string>>(rj => \r\n                    rj[''Cron''] == ''* * * * *'' && !String.IsNullOrEmpty(rj[''Job'']))))", span="126-129"];
m6_101 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", span="120-120"];
m6_55 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="manager.AddOrUpdate(null, _job, Cron.Daily())", span="60-60"];
m6_140 [cluster="Hangfire.Common.JobHelper.ToJson(object)", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
m6_115 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", span="133-133"];
m6_116 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", file="RecurringJobManagerFacts.cs", label="var manager = CreateManager()", span="135-135"];
m6_117 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", file="RecurringJobManagerFacts.cs", label="manager.AddOrUpdate(_id, _job, _cronExpression)", span="137-137"];
m6_118 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", file="RecurringJobManagerFacts.cs", label="_transaction.Verify(x => x.Commit())", span="139-139"];
m6_119 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", file="RecurringJobManagerFacts.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", span="133-133"];
m6_190 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="205-205"];
m6_17 [cluster="Unk.Returns", file="RecurringJobManagerFacts.cs", label="Entry Unk.Returns", span=""];
m6_19 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="26-26"];
m6_25 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="30-30"];
m6_24 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="x.GetConnection()", span="30-30"];
m6_39 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="40-40"];
m6_38 [cluster="lambda expression", color=green, community=0, file="RecurringJobManagerFacts.cs", label="2: new RecurringJobManager(null, _factory.Object)", span="40-40"];
m6_46 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="new RecurringJobManager(_storage.Object, null)", span="49-49"];
m6_45 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="49-49"];
m6_47 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="49-49"];
m6_149 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="166-166"];
m6_150 [cluster="lambda expression", color=green, community=0, file="RecurringJobManagerFacts.cs", label="0: x.Create(It.Is<CreateContext>(context => context.InitialState is EnqueuedState))", span="166-166"];
m6_151 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="166-166"];
m6_153 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="166-166"];
m6_154 [cluster="lambda expression", color=green, community=0, file="RecurringJobManagerFacts.cs", label="2: context.InitialState is EnqueuedState", span="166-166"];
m6_155 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="166-166"];
m6_162 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="173-173"];
m6_165 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="176-176"];
m6_168 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="186-187"];
m6_163 [cluster="lambda expression", color=green, community=0, file="RecurringJobManagerFacts.cs", label="2: x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', _id))", span="173-173"];
m6_164 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="173-173"];
m6_166 [cluster="lambda expression", color=green, community=0, file="RecurringJobManagerFacts.cs", label="1: Console.WriteLine()", span="176-176"];
m6_167 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="176-176"];
m6_169 [cluster="lambda expression", color=green, community=2, file="RecurringJobManagerFacts.cs", label="0: x.Create(It.Is<CreateContext>(context =>\r\n                ((EnqueuedState)context.InitialState).Queue == ''my_queue''))", span="186-187"];
m6_170 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="186-187"];
m6_171 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="186-187"];
m6_172 [cluster="lambda expression", color=green, community=0, file="RecurringJobManagerFacts.cs", label="2: ((EnqueuedState)context.InitialState).Queue == ''my_queue''", span="187-187"];
m6_173 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="186-187"];
m6_183 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="196-196"];
m6_184 [cluster="lambda expression", color=green, community=0, file="RecurringJobManagerFacts.cs", label="0: x.Create(It.IsAny<CreateContext>())", span="196-196"];
m6_185 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="196-196"];
m6_65 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="manager.AddOrUpdate(_id, null, Cron.Daily())", span="71-71"];
m6_73 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="manager.AddOrUpdate(_id, _job, null)", span="82-82"];
m6_81 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="manager.AddOrUpdate(_id, _job, ''* * *'')", span="93-93"];
m6_89 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="manager.AddOrUpdate(_id, _job, ''* * * * 9999'')", span="104-104"];
m6_98 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="x.AddToSet(''recurring-jobs'', _id)", span="116-116"];
m6_107 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="x.SetRangeInHash(\r\n                String.Format(''recurring-job:{0}'', _id),\r\n                It.Is<Dictionary<string, string>>(rj => \r\n                    rj[''Cron''] == ''* * * * *'' && !String.IsNullOrEmpty(rj[''Job''])))", span="126-129"];
m6_142 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', _id))", span="154-154"];
m6_181 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="manager.Trigger(_id)", span="195-195"];
m6_202 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="x.RemoveFromSet(''recurring-jobs'', _id)", span="215-215"];
m6_206 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="x.RemoveHash(String.Format(''recurring-job:{0}'', _id))", span="216-216"];
m6_129 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="manager.Trigger(null)", span="147-147"];
m6_146 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Console.WriteLine()", span="157-157"];
m6_180 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="195-195"];
m6_27 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", span="39-39"];
m6_56 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts", span=""];
m6_64 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="71-71"];
m6_66 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="71-71"];
m6_72 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="82-82"];
m6_74 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="82-82"];
m6_80 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="93-93"];
m6_82 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="93-93"];
m6_88 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="104-104"];
m6_90 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="104-104"];
m6_97 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="116-116"];
m6_99 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="116-116"];
m6_106 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="126-129"];
m6_108 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="126-129"];
m6_111 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="128-129"];
m6_120 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="139-139"];
m6_141 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="154-154"];
m6_145 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="157-157"];
m6_143 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="154-154"];
m6_182 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="195-195"];
m6_191 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="manager.RemoveIfExists(null)", span="205-205"];
m6_201 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="215-215"];
m6_203 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="215-215"];
m6_205 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="216-216"];
m6_207 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="216-216"];
m6_209 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="217-217"];
m6_128 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Entry lambda expression", span="147-147"];
m6_130 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="147-147"];
m6_147 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="157-157"];
m6_29 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", file="RecurringJobManagerFacts.cs", label="Assert.Throws<ArgumentOutOfRangeException>(\r\n                () => options.WorkerCount = -1)", span="43-44"];
m6_28 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", file="RecurringJobManagerFacts.cs", label="var options = CreateOptions()", span="41-41"];
m6_113 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="128-129"];
m6_112 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="rj[''Cron''] == ''* * * * *'' && !String.IsNullOrEmpty(rj[''Job''])", span="129-129"];
m6_122 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="139-139"];
m6_121 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="x.Commit()", span="139-139"];
m6_192 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="205-205"];
m6_210 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="x.Commit()", span="217-217"];
m6_211 [cluster="lambda expression", file="RecurringJobManagerFacts.cs", label="Exit lambda expression", span="217-217"];
m6_59 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", file="RecurringJobManagerFacts.cs", label=options, span=""];
m6_60 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", file="RecurringJobManagerFacts.cs", label=options, span=""];
m6_61 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", file="RecurringJobManagerFacts.cs", label=options, span=""];
m6_62 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", file="RecurringJobManagerFacts.cs", label="Assert.Equal(''job'', exception.ParamName)", span="73-73"];
m6_63 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", file="RecurringJobManagerFacts.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", span="66-66"];
m6_83 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", span="99-99"];
m6_84 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", file="RecurringJobManagerFacts.cs", label="var manager = CreateManager()", span="101-101"];
m6_85 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", file="RecurringJobManagerFacts.cs", label="var exception = Assert.Throws<ArgumentException>(\r\n                () => manager.AddOrUpdate(_id, _job, ''* * * * 9999''))", span="103-104"];
m6_86 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", file="RecurringJobManagerFacts.cs", label="Assert.Equal(''cronExpression'', exception.ParamName)", span="106-106"];
m6_87 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", file="RecurringJobManagerFacts.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", span="99-99"];
m6_30 [cluster="Unk.CreateWriteTransaction", file="RecurringJobManagerFacts.cs", label="Entry Unk.CreateWriteTransaction", span=""];
m6_123 [cluster="Unk.Commit", file="RecurringJobManagerFacts.cs", label="Entry Unk.Commit", span=""];
m6_11 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="232-232"];
m6_114 [cluster="Unk.IsNullOrEmpty", file="RecurringJobManagerFacts.cs", label="Entry Unk.IsNullOrEmpty", span=""];
m6_0 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", span="9-9"];
m6_5 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", color=green, community=0, file="RecurringJobManagerFacts.cs", label="0: Assert.True(options.ShutdownTimeout > TimeSpan.Zero)", span="16-16"];
m6_4 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="RecurringJobManagerFacts.cs", label="Assert.Equal(EnqueuedState.DefaultQueue, options.Queues[0])", span="15-15"];
m6_6 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="RecurringJobManagerFacts.cs", label="Assert.True(options.SchedulePollingInterval > TimeSpan.Zero)", span="17-17"];
m6_1 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="RecurringJobManagerFacts.cs", label="var options = CreateOptions()", span="11-11"];
m6_2 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="RecurringJobManagerFacts.cs", label="Assert.Equal(Math.Min(Environment.ProcessorCount * 5, 40), options.WorkerCount)", span="13-13"];
m6_3 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="RecurringJobManagerFacts.cs", label="Assert.Equal(Environment.MachineName, options.ServerName)", span="14-14"];
m6_7 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="RecurringJobManagerFacts.cs", label="Exit Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", span="9-9"];
m6_152 [cluster="Unk.Create", file="RecurringJobManagerFacts.cs", label="Entry Unk.Create", span=""];
m6_204 [cluster="Unk.RemoveFromSet", file="RecurringJobManagerFacts.cs", label="Entry Unk.RemoveFromSet", span=""];
m6_96 [cluster="Unk.Verify", file="RecurringJobManagerFacts.cs", label="Entry Unk.Verify", span=""];
m6_148 [cluster="System.Console.WriteLine()", file="RecurringJobManagerFacts.cs", label="Entry System.Console.WriteLine()", span="0-0"];
m6_124 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_ThrowsAnException_WhenIdIsNull()", file="RecurringJobManagerFacts.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_ThrowsAnException_WhenIdIsNull()", span="143-143"];
m6_125 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_ThrowsAnException_WhenIdIsNull()", file="RecurringJobManagerFacts.cs", label="var manager = CreateManager()", span="145-145"];
m6_126 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_ThrowsAnException_WhenIdIsNull()", file="RecurringJobManagerFacts.cs", label="Assert.Throws<ArgumentNullException>(() => manager.Trigger(null))", span="147-147"];
m6_127 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_ThrowsAnException_WhenIdIsNull()", file="RecurringJobManagerFacts.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_ThrowsAnException_WhenIdIsNull()", span="143-143"];
m6_215 [file="RecurringJobManagerFacts.cs", label="Hangfire.Core.Tests.RecurringJobManagerFacts", span=""];
m6_216 [file="RecurringJobManagerFacts.cs", label=manager, span=""];
m6_217 [file="RecurringJobManagerFacts.cs", label=manager, span=""];
m6_218 [file="RecurringJobManagerFacts.cs", label=manager, span=""];
m6_219 [file="RecurringJobManagerFacts.cs", label=manager, span=""];
m6_220 [file="RecurringJobManagerFacts.cs", label=manager, span=""];
m6_222 [file="RecurringJobManagerFacts.cs", label=manager, span=""];
m6_221 [file="RecurringJobManagerFacts.cs", label=manager, span=""];
m6_223 [file="RecurringJobManagerFacts.cs", label=manager, span=""];
m7_19 [cluster="Hangfire.Server.ServerJobCancellationToken.IsJobAborted()", file="ServerJobCancellationToken.cs", label="Entry Hangfire.Server.ServerJobCancellationToken.IsJobAborted()", span="62-62"];
m7_21 [cluster="Hangfire.Server.ServerJobCancellationToken.IsJobAborted()", file="ServerJobCancellationToken.cs", label="var state = _connection.GetStateData(_jobId)", span="64-64"];
m7_22 [cluster="Hangfire.Server.ServerJobCancellationToken.IsJobAborted()", file="ServerJobCancellationToken.cs", label="state == null", span="66-66"];
m7_24 [cluster="Hangfire.Server.ServerJobCancellationToken.IsJobAborted()", file="ServerJobCancellationToken.cs", label="!state.Name.Equals(ProcessingState.StateName, StringComparison.OrdinalIgnoreCase)", span="71-71"];
m7_26 [cluster="Hangfire.Server.ServerJobCancellationToken.IsJobAborted()", file="ServerJobCancellationToken.cs", label="!state.Data.ContainsKey(''WorkerId'')", span="76-76"];
m7_28 [cluster="Hangfire.Server.ServerJobCancellationToken.IsJobAborted()", color=green, community=0, file="ServerJobCancellationToken.cs", label="1: !state.Data[''WorkerId''].Equals(_workerId, StringComparison.OrdinalIgnoreCase)", span="81-81"];
m7_23 [cluster="Hangfire.Server.ServerJobCancellationToken.IsJobAborted()", file="ServerJobCancellationToken.cs", label="return true;", span="68-68"];
m7_25 [cluster="Hangfire.Server.ServerJobCancellationToken.IsJobAborted()", file="ServerJobCancellationToken.cs", label="return true;", span="73-73"];
m7_27 [cluster="Hangfire.Server.ServerJobCancellationToken.IsJobAborted()", file="ServerJobCancellationToken.cs", label="return true;", span="78-78"];
m7_29 [cluster="Hangfire.Server.ServerJobCancellationToken.IsJobAborted()", color=green, community=1, file="ServerJobCancellationToken.cs", label="1: return true;", span="83-83"];
m7_30 [cluster="Hangfire.Server.ServerJobCancellationToken.IsJobAborted()", color=green, community=0, file="ServerJobCancellationToken.cs", label="1: return false;", span="86-86"];
m7_31 [cluster="Hangfire.Server.ServerJobCancellationToken.IsJobAborted()", file="ServerJobCancellationToken.cs", label="Exit Hangfire.Server.ServerJobCancellationToken.IsJobAborted()", span="62-62"];
m7_32 [cluster="Hangfire.Storage.IStorageConnection.GetStateData(string)", file="ServerJobCancellationToken.cs", label="Entry Hangfire.Storage.IStorageConnection.GetStateData(string)", span="45-45"];
m7_12 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="ServerJobCancellationToken.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m7_0 [cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(Hangfire.Storage.IStorageConnection, string, string, System.Threading.CancellationToken)", file="ServerJobCancellationToken.cs", label="Entry Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(Hangfire.Storage.IStorageConnection, string, string, System.Threading.CancellationToken)", span="31-31"];
m7_1 [cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(Hangfire.Storage.IStorageConnection, string, string, System.Threading.CancellationToken)", file="ServerJobCancellationToken.cs", label="jobId == null", span="37-37"];
m7_3 [cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(Hangfire.Storage.IStorageConnection, string, string, System.Threading.CancellationToken)", file="ServerJobCancellationToken.cs", label="workerId == null", span="38-38"];
m7_5 [cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(Hangfire.Storage.IStorageConnection, string, string, System.Threading.CancellationToken)", file="ServerJobCancellationToken.cs", label="connection == null", span="39-39"];
m7_7 [cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(Hangfire.Storage.IStorageConnection, string, string, System.Threading.CancellationToken)", file="ServerJobCancellationToken.cs", label="_jobId = jobId", span="41-41"];
m7_8 [cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(Hangfire.Storage.IStorageConnection, string, string, System.Threading.CancellationToken)", file="ServerJobCancellationToken.cs", label="_workerId = workerId", span="42-42"];
m7_9 [cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(Hangfire.Storage.IStorageConnection, string, string, System.Threading.CancellationToken)", file="ServerJobCancellationToken.cs", label="_connection = connection", span="43-43"];
m7_10 [cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(Hangfire.Storage.IStorageConnection, string, string, System.Threading.CancellationToken)", file="ServerJobCancellationToken.cs", label="_shutdownToken = shutdownToken", span="44-44"];
m7_2 [cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(Hangfire.Storage.IStorageConnection, string, string, System.Threading.CancellationToken)", file="ServerJobCancellationToken.cs", label="throw new ArgumentNullException(''jobId'');", span="37-37"];
m7_4 [cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(Hangfire.Storage.IStorageConnection, string, string, System.Threading.CancellationToken)", file="ServerJobCancellationToken.cs", label="throw new ArgumentNullException(''workerId'');", span="38-38"];
m7_6 [cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(Hangfire.Storage.IStorageConnection, string, string, System.Threading.CancellationToken)", file="ServerJobCancellationToken.cs", label="throw new ArgumentNullException(''connection'');", span="39-39"];
m7_11 [cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(Hangfire.Storage.IStorageConnection, string, string, System.Threading.CancellationToken)", file="ServerJobCancellationToken.cs", label="Exit Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(Hangfire.Storage.IStorageConnection, string, string, System.Threading.CancellationToken)", span="31-31"];
m7_13 [cluster="Hangfire.Server.ServerJobCancellationToken.ThrowIfCancellationRequested()", file="ServerJobCancellationToken.cs", label="Entry Hangfire.Server.ServerJobCancellationToken.ThrowIfCancellationRequested()", span="52-52"];
m7_14 [cluster="Hangfire.Server.ServerJobCancellationToken.ThrowIfCancellationRequested()", file="ServerJobCancellationToken.cs", label="_shutdownToken.ThrowIfCancellationRequested()", span="54-54"];
m7_15 [cluster="Hangfire.Server.ServerJobCancellationToken.ThrowIfCancellationRequested()", file="ServerJobCancellationToken.cs", label="IsJobAborted()", span="56-56"];
m7_16 [cluster="Hangfire.Server.ServerJobCancellationToken.ThrowIfCancellationRequested()", file="ServerJobCancellationToken.cs", label="throw new JobAbortedException();", span="58-58"];
m7_17 [cluster="Hangfire.Server.ServerJobCancellationToken.ThrowIfCancellationRequested()", file="ServerJobCancellationToken.cs", label="Exit Hangfire.Server.ServerJobCancellationToken.ThrowIfCancellationRequested()", span="52-52"];
m7_20 [cluster="Hangfire.Server.JobAbortedException.JobAbortedException()", file="ServerJobCancellationToken.cs", label="Entry Hangfire.Server.JobAbortedException.JobAbortedException()", span="20-20"];
m7_34 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="ServerJobCancellationToken.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m7_33 [cluster="string.Equals(string, System.StringComparison)", file="ServerJobCancellationToken.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m7_18 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="ServerJobCancellationToken.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m7_35 [file="ServerJobCancellationToken.cs", label="Hangfire.Server.ServerJobCancellationToken", span=""];
m8_123 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="ServerJobCancellationTokenFacts.cs", label="_connection.Execute(\r\n                @''merge HangFire.Server as Target ''\r\n                + @''using (VALUES (@id, @data)) as Source (Id, Data) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = null ''\r\n                + @''when not matched then insert (Id, Data) values (Source.Id, Source.Data);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data) })", span="248-254"];
m8_119 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="ServerJobCancellationTokenFacts.cs", label="throw new ArgumentNullException(''serverId'');", span="236-236"];
m8_121 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="ServerJobCancellationTokenFacts.cs", label="throw new ArgumentNullException(''context'');", span="237-237"];
m8_122 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="ServerJobCancellationTokenFacts.cs", label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="239-244"];
m8_118 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="ServerJobCancellationTokenFacts.cs", label="serverId == null", span="236-236"];
m8_120 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="ServerJobCancellationTokenFacts.cs", label="context == null", span="237-237"];
m8_124 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="ServerJobCancellationTokenFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="234-234"];
m8_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="ServerJobCancellationTokenFacts.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m8_95 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="203-203"];
m8_100 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="ServerJobCancellationTokenFacts.cs", label="return _connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault();", span="208-211"];
m8_97 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="ServerJobCancellationTokenFacts.cs", label="throw new ArgumentNullException(''id'');", span="205-205"];
m8_99 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="ServerJobCancellationTokenFacts.cs", label="throw new ArgumentNullException(''name'');", span="206-206"];
m8_98 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="ServerJobCancellationTokenFacts.cs", label="name == null", span="206-206"];
m8_96 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="ServerJobCancellationTokenFacts.cs", label="id == null", span="205-205"];
m8_101 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="ServerJobCancellationTokenFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="203-203"];
m8_125 [cluster="HangFire.SqlServer.Entities.ServerData.ServerData()", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.SqlServer.Entities.ServerData.ServerData()", span="20-20"];
m8_47 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="104-104"];
m8_54 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", color=green, community=0, file="ServerJobCancellationTokenFacts.cs", label="0: var jobId = _connection.Query<int>(\r\n                createJobSql,\r\n                new\r\n                {\r\n                    invocationData = JobHelper.ToJson(invocationData),\r\n                    arguments = invocationData.Arguments,\r\n                    createdAt = DateTime.UtcNow,\r\n                    expireAt = DateTime.UtcNow.Add(expireIn)\r\n                }).Single().ToString()", span="119-127"];
m8_53 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="ServerJobCancellationTokenFacts.cs", label="var invocationData = InvocationData.Serialize(job)", span="117-117"];
m8_52 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="ServerJobCancellationTokenFacts.cs", label="string createJobSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues (@invocationData, @arguments, @createdAt, @expireAt);\r\nSELECT CAST(SCOPE_IDENTITY() as int)''", span="112-115"];
m8_55 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", color=green, community=0, file="ServerJobCancellationTokenFacts.cs", label="0: parameters.Count > 0", span="129-129"];
m8_59 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="ServerJobCancellationTokenFacts.cs", label="parameterArray[parameterIndex++] = new\r\n                    {\r\n                        jobId = jobId,\r\n                        name = parameter.Key,\r\n                        value = parameter.Value\r\n                    }", span="135-140"];
m8_62 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="ServerJobCancellationTokenFacts.cs", label="return jobId;", span="150-150"];
m8_56 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", color=green, community=0, file="ServerJobCancellationTokenFacts.cs", label="0: var parameterArray = new object[parameters.Count]", span="131-131"];
m8_57 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", color=green, community=0, file="ServerJobCancellationTokenFacts.cs", label="2: int parameterIndex = 0", span="132-132"];
m8_61 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="ServerJobCancellationTokenFacts.cs", label="_connection.Execute(insertParameterSql, parameterArray)", span="147-147"];
m8_58 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", color=green, community=0, file="ServerJobCancellationTokenFacts.cs", label="0: parameters", span="133-133"];
m8_60 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", color=green, community=0, file="ServerJobCancellationTokenFacts.cs", label="0: string insertParameterSql = @''\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@jobId, @name, @value)''", span="143-145"];
m8_49 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="ServerJobCancellationTokenFacts.cs", label="throw new ArgumentNullException(''job'');", span="109-109"];
m8_51 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="ServerJobCancellationTokenFacts.cs", label="throw new ArgumentNullException(''parameters'');", span="110-110"];
m8_48 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="ServerJobCancellationTokenFacts.cs", label="job == null", span="109-109"];
m8_50 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="ServerJobCancellationTokenFacts.cs", label="parameters == null", span="110-110"];
m8_63 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="ServerJobCancellationTokenFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="104-104"];
m8_18 [cluster="string.Format(string, object)", file="ServerJobCancellationTokenFacts.cs", label="Entry string.Format(string, object)", span="0-0"];
m8_40 [cluster="System.TimeSpan.Negate()", file="ServerJobCancellationTokenFacts.cs", label="Entry System.TimeSpan.Negate()", span="0-0"];
m8_67 [cluster="Unk.>", file="ServerJobCancellationTokenFacts.cs", label="Entry Unk.>", span=""];
m8_45 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", span="22-22"];
m8_70 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="153-153"];
m8_74 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="ServerJobCancellationTokenFacts.cs", label="var jobData = _connection.Query<SqlJob>(sql, new { id = id })\r\n                .SingleOrDefault()", span="160-161"];
m8_72 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="ServerJobCancellationTokenFacts.cs", label="throw new ArgumentNullException(''id'');", span="155-155"];
m8_77 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="ServerJobCancellationTokenFacts.cs", label="var invocationData = JobHelper.FromJson<InvocationData>(jobData.InvocationData)", span="166-166"];
m8_73 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="ServerJobCancellationTokenFacts.cs", label="string sql = \r\n                @''select InvocationData, StateName, Arguments from HangFire.Job where id = @id''", span="157-158"];
m8_75 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="ServerJobCancellationTokenFacts.cs", label="jobData == null", span="163-163"];
m8_78 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="ServerJobCancellationTokenFacts.cs", label="invocationData.Arguments = jobData.Arguments", span="167-167"];
m8_84 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="ServerJobCancellationTokenFacts.cs", label="return new JobData\r\n            {\r\n                Job = job,\r\n                State = jobData.StateName,\r\n                LoadException = loadException\r\n            };", span="181-186"];
m8_71 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="ServerJobCancellationTokenFacts.cs", label="id == null", span="155-155"];
m8_81 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="ServerJobCancellationTokenFacts.cs", label="job = invocationData.Deserialize()", span="174-174"];
m8_79 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="ServerJobCancellationTokenFacts.cs", label="Job job = null", span="169-169"];
m8_80 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="ServerJobCancellationTokenFacts.cs", label="JobLoadException loadException = null", span="170-170"];
m8_76 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="ServerJobCancellationTokenFacts.cs", label="return null;", span="163-163"];
m8_83 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="ServerJobCancellationTokenFacts.cs", label="loadException = ex", span="178-178"];
m8_82 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="ServerJobCancellationTokenFacts.cs", label=JobLoadException, span="176-176"];
m8_85 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="ServerJobCancellationTokenFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="153-153"];
m8_10 [cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="47-47"];
m8_11 [cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", color=green, community=0, file="ServerJobCancellationTokenFacts.cs", label="2: return new SqlServerWriteOnlyTransaction(_connection);", span="49-49"];
m8_12 [cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="ServerJobCancellationTokenFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="47-47"];
m8_116 [cluster="System.ArgumentException.ArgumentException(string)", file="ServerJobCancellationTokenFacts.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m8_43 [cluster="System.TimeSpan.FromSeconds(double)", file="ServerJobCancellationTokenFacts.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m8_41 [cluster="Unk.Query", file="ServerJobCancellationTokenFacts.cs", label="Entry Unk.Query", span=""];
m8_46 [cluster="Unk.ToString", file="ServerJobCancellationTokenFacts.cs", label="Entry Unk.ToString", span=""];
m8_17 [cluster="SqlServerDistributedLock.cstr", file="ServerJobCancellationTokenFacts.cs", label="Entry SqlServerDistributedLock.cstr", span=""];
m8_39 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="ServerJobCancellationTokenFacts.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m8_66 [cluster="System.DateTime.Add(System.TimeSpan)", file="ServerJobCancellationTokenFacts.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m8_19 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="59-59"];
m8_20 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", color=green, community=0, file="ServerJobCancellationTokenFacts.cs", label="2: queues == null", span="61-61"];
m8_21 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", color=green, community=0, file="ServerJobCancellationTokenFacts.cs", label="2: throw new ArgumentNullException(''queues'');", span="61-61"];
m8_22 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", color=green, community=0, file="ServerJobCancellationTokenFacts.cs", label="2: queues.Length == 0", span="62-62"];
m8_23 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", color=green, community=0, file="ServerJobCancellationTokenFacts.cs", label="2: throw new ArgumentException(''Queue array must be non-empty.'', ''queues'');", span="62-62"];
m8_24 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", color=green, community=0, file="ServerJobCancellationTokenFacts.cs", label="2: dynamic idAndQueue", span="64-64"];
m8_25 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", color=green, community=0, file="ServerJobCancellationTokenFacts.cs", label="2: string fetchJobSqlTemplate = @''\r\nset transaction isolation level read committed\r\nupdate top (1) HangFire.JobQueue set FetchedAt = GETUTCDATE()\r\noutput INSERTED.JobId, INSERTED.Queue\r\nwhere FetchedAt {0}\r\nand Queue in @queues''", span="66-71"];
m8_26 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="ServerJobCancellationTokenFacts.cs", label="var fetchConditions = new[] { ''is null'', ''< DATEADD(second, @timeout, GETUTCDATE())'' }", span="75-75"];
m8_29 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="ServerJobCancellationTokenFacts.cs", label="idAndQueue = _connection.Query(\r\n                    String.Format(fetchJobSqlTemplate, fetchConditions[currentQueryIndex]),\r\n                    new { queues = queues, timeout = JobInvisibilityTimeOut.Negate().TotalSeconds })\r\n                    .SingleOrDefault()", span="82-85"];
m8_27 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="ServerJobCancellationTokenFacts.cs", label="var currentQueryIndex = 0", span="76-76"];
m8_28 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="ServerJobCancellationTokenFacts.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="80-80"];
m8_36 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="ServerJobCancellationTokenFacts.cs", label="return new ProcessingJob(\r\n                idAndQueue.JobId.ToString(CultureInfo.InvariantCulture),\r\n                idAndQueue.Queue);", span="99-101"];
m8_31 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="ServerJobCancellationTokenFacts.cs", label="currentQueryIndex == fetchConditions.Length - 1", span="89-89"];
m8_34 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="ServerJobCancellationTokenFacts.cs", label="currentQueryIndex = (currentQueryIndex + 1) % fetchConditions.Length", span="96-96"];
m8_30 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="ServerJobCancellationTokenFacts.cs", label="idAndQueue == null", span="87-87"];
m8_35 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="ServerJobCancellationTokenFacts.cs", label="idAndQueue == null", span="97-97"];
m8_32 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="ServerJobCancellationTokenFacts.cs", label="cancellationToken.WaitHandle.WaitOne(TimeSpan.FromSeconds(5))", span="91-91"];
m8_33 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="ServerJobCancellationTokenFacts.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="92-92"];
m8_37 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="ServerJobCancellationTokenFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="59-59"];
m8_136 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="275-275"];
m8_139 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="ServerJobCancellationTokenFacts.cs", label="return _connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) });", span="282-284"];
m8_138 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="ServerJobCancellationTokenFacts.cs", label="throw new ArgumentException(''The `timeOut` value must be positive.'', ''timeOut'');", span="279-279"];
m8_137 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="ServerJobCancellationTokenFacts.cs", label="timeOut.Duration() != timeOut", span="277-277"];
m8_140 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="ServerJobCancellationTokenFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="275-275"];
m8_0 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", span="35-35"];
m8_3 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", file="ServerJobCancellationTokenFacts.cs", label="_connection = connection", span="39-39"];
m8_2 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", file="ServerJobCancellationTokenFacts.cs", label="throw new ArgumentNullException(''connection'');", span="37-37"];
m8_1 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", file="ServerJobCancellationTokenFacts.cs", label="connection == null", span="37-37"];
m8_4 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", file="ServerJobCancellationTokenFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", span="35-35"];
m8_9 [cluster="Unk.Dispose", file="ServerJobCancellationTokenFacts.cs", label="Entry Unk.Dispose", span=""];
m8_141 [cluster="System.TimeSpan.Duration()", file="ServerJobCancellationTokenFacts.cs", label="Entry System.TimeSpan.Duration()", span="0-0"];
m8_6 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Dispose()", span="42-42"];
m8_7 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="ServerJobCancellationTokenFacts.cs", label="_connection.Dispose()", span="44-44"];
m8_8 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="ServerJobCancellationTokenFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.Dispose()", span="42-42"];
m8_102 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="214-214"];
m8_107 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="ServerJobCancellationTokenFacts.cs", label="_connection.Execute(''delete from HangFire.JobQueue where JobId = @id and Queue = @queueName'',\r\n                new { id = id, queueName = queue })", span="219-220"];
m8_104 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="ServerJobCancellationTokenFacts.cs", label="throw new ArgumentNullException(''id'');", span="216-216"];
m8_106 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="ServerJobCancellationTokenFacts.cs", label="throw new ArgumentNullException(''queue'');", span="217-217"];
m8_105 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="ServerJobCancellationTokenFacts.cs", label="queue == null", span="217-217"];
m8_103 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="ServerJobCancellationTokenFacts.cs", label="id == null", span="216-216"];
m8_108 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="ServerJobCancellationTokenFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="214-214"];
m8_88 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="189-189"];
m8_93 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="ServerJobCancellationTokenFacts.cs", label="_connection.Execute(\r\n                @''merge HangFire.JobParameter as Target ''\r\n                + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                + @''when matched then update set Value = Source.Value ''\r\n                + @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                new { jobId = id, name, value })", span="194-200"];
m8_90 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="ServerJobCancellationTokenFacts.cs", label="throw new ArgumentNullException(''id'');", span="191-191"];
m8_92 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="ServerJobCancellationTokenFacts.cs", label="throw new ArgumentNullException(''name'');", span="192-192"];
m8_91 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="ServerJobCancellationTokenFacts.cs", label="name == null", span="192-192"];
m8_89 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="ServerJobCancellationTokenFacts.cs", label="id == null", span="191-191"];
m8_94 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="ServerJobCancellationTokenFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="189-189"];
m8_13 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", span="34-34"];
m8_109 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="223-223"];
m8_114 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="ServerJobCancellationTokenFacts.cs", label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="228-231"];
m8_111 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="ServerJobCancellationTokenFacts.cs", label="throw new ArgumentNullException(''key'');", span="225-225"];
m8_112 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="ServerJobCancellationTokenFacts.cs", label="toScore < fromScore", span="226-226"];
m8_110 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="ServerJobCancellationTokenFacts.cs", label="key == null", span="225-225"];
m8_113 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="ServerJobCancellationTokenFacts.cs", label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", span="226-226"];
m8_115 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="ServerJobCancellationTokenFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="223-223"];
m8_65 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m8_14 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="52-52"];
m8_15 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="ServerJobCancellationTokenFacts.cs", label="return new SqlServerDistributedLock(\r\n                String.Format(''HangFire:Job:{0}'', jobId), \r\n                _connection);", span="54-56"];
m8_16 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="ServerJobCancellationTokenFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="52-52"];
m8_38 [cluster="System.ArgumentException.ArgumentException(string, string)", file="ServerJobCancellationTokenFacts.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m8_68 [cluster="Unk.Single", file="ServerJobCancellationTokenFacts.cs", label="Entry Unk.Single", span=""];
m8_44 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="ServerJobCancellationTokenFacts.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m8_126 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="257-257"];
m8_129 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="ServerJobCancellationTokenFacts.cs", label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="261-263"];
m8_128 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="ServerJobCancellationTokenFacts.cs", label="throw new ArgumentNullException(''serverId'');", span="259-259"];
m8_127 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="ServerJobCancellationTokenFacts.cs", label="serverId == null", span="259-259"];
m8_130 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="ServerJobCancellationTokenFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="257-257"];
m8_69 [cluster="Unk.Execute", file="ServerJobCancellationTokenFacts.cs", label="Entry Unk.Execute", span=""];
m8_87 [cluster="HangFire.Storage.JobData.JobData()", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.Storage.JobData.JobData()", span="20-20"];
m8_86 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m8_131 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="266-266"];
m8_134 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="ServerJobCancellationTokenFacts.cs", label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="270-272"];
m8_133 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="ServerJobCancellationTokenFacts.cs", label="throw new ArgumentNullException(''serverId'');", span="268-268"];
m8_132 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="ServerJobCancellationTokenFacts.cs", label="serverId == null", span="268-268"];
m8_135 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="ServerJobCancellationTokenFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="266-266"];
m8_42 [cluster="Unk.SingleOrDefault", file="ServerJobCancellationTokenFacts.cs", label="Entry Unk.SingleOrDefault", span=""];
m8_64 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="ServerJobCancellationTokenFacts.cs", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
m8_142 [file="ServerJobCancellationTokenFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m10_12 [cluster="Unk.>", file="SqlServerDistributedLock.cs", label="Entry Unk.>", span=""];
m10_16 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="SqlServerDistributedLock.cs", label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", span="24-24"];
m10_48 [cluster="string.Format(string, object, object)", file="SqlServerDistributedLock.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m10_45 [cluster="Hangfire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", file="SqlServerDistributedLock.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", span="22-22"];
m10_24 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="SqlServerDistributedLock.cs", label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", span="32-32"];
m10_49 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="SqlServerDistributedLock.cs", label="var parameters = new DynamicParameters()", span="115-115"];
m10_50 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="SqlServerDistributedLock.cs", label="parameters.Add(''@Resource'', resource)", span="116-116"];
m10_53 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="SqlServerDistributedLock.cs", label="connection.Execute(\r\n                @''sp_releaseapplock'',\r\n                parameters,\r\n                commandType: CommandType.StoredProcedure)", span="120-123"];
m10_56 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="SqlServerDistributedLock.cs", label="throw new SqlServerDistributedLockException(\r\n                    String.Format(\r\n                        ''Could not release a lock on the resource '{0}': Server returned the '{1}' error.'',\r\n                        resource,\r\n                        releaseResult));", span="129-133"];
m10_51 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="SqlServerDistributedLock.cs", label="parameters.Add(''@LockOwner'', LockOwner)", span="117-117"];
m10_52 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="SqlServerDistributedLock.cs", label="parameters.Add(''@Result'', dbType: DbType.Int32, direction: ParameterDirection.ReturnValue)", span="118-118"];
m10_54 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="SqlServerDistributedLock.cs", label="var releaseResult = parameters.Get<int>(''@Result'')", span="125-125"];
m10_55 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="SqlServerDistributedLock.cs", label="releaseResult < 0", span="127-127"];
m10_57 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="SqlServerDistributedLock.cs", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", span="113-113"];
m10_15 [cluster="lambda expression", file="SqlServerDistributedLock.cs", label="Exit lambda expression", span="20-20"];
m10_43 [cluster="Unk.>", file="SqlServerDistributedLock.cs", label="Entry Unk.>", span=""];
m10_18 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="SqlServerDistributedLock.cs", label="Assert.Throws<ArgumentException>(\r\n                () => options.QueuePollInterval = TimeSpan.FromSeconds(-1))", span="27-28"];
m10_19 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="SqlServerDistributedLock.cs", label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", span="24-24"];
m10_20 [cluster="lambda expression", file="SqlServerDistributedLock.cs", label="Entry lambda expression", span="28-28"];
m10_21 [cluster="lambda expression", file="SqlServerDistributedLock.cs", label="options.QueuePollInterval = TimeSpan.FromSeconds(-1)", span="28-28"];
m10_22 [cluster="lambda expression", file="SqlServerDistributedLock.cs", label="Exit lambda expression", span="28-28"];
m10_23 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerDistributedLock.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m10_17 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", span="75-75"];
m10_25 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="var parameters = new DynamicParameters()", span="77-77"];
m10_26 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="parameters.Add(''@Resource'', resource)", span="78-78"];
m10_27 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="parameters.Add(''@DbPrincipal'', ''public'')", span="79-79"];
m10_28 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="parameters.Add(''@LockMode'', LockMode)", span="80-80"];
m10_40 [cluster="DynamicParameters.cstr", file="SqlServerDistributedLock.cs", label="Entry DynamicParameters.cstr", span=""];
m10_41 [cluster="Unk.Add", file="SqlServerDistributedLock.cs", label="Entry Unk.Add", span=""];
m10_0 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="SqlServerDistributedLock.cs", label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", span="8-8"];
m10_1 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="SqlServerDistributedLock.cs", label="var options = new SqlServerStorageOptions()", span="10-10"];
m10_3 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="SqlServerDistributedLock.cs", label="Assert.True(options.PrepareSchemaIfNecessary)", span="12-12"];
m10_5 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerDistributedLock.cs", label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
m10_7 [cluster="Unk.True", file="SqlServerDistributedLock.cs", label="Entry Unk.True", span=""];
m10_8 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="SqlServerDistributedLock.cs", label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", span="16-16"];
m10_9 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="SqlServerDistributedLock.cs", label="var options = new SqlServerStorageOptions()", span="18-18"];
m10_2 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="SqlServerDistributedLock.cs", label="Assert.NotEqual(0, options.QueuePollInterval.TotalSeconds)", span="11-11"];
m10_4 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="SqlServerDistributedLock.cs", label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", span="8-8"];
m10_6 [cluster="Unk.NotEqual", file="SqlServerDistributedLock.cs", label="Entry Unk.NotEqual", span=""];
m10_10 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", color=green, community=0, file="SqlServerDistributedLock.cs", label="0: Assert.Throws<ArgumentException>(\r\n                () => options.QueuePollInterval = TimeSpan.Zero)", span="19-20"];
m10_11 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="SqlServerDistributedLock.cs", label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", span="16-16"];
m10_13 [cluster="lambda expression", file="SqlServerDistributedLock.cs", label="Entry lambda expression", span="20-20"];
m10_30 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label=options, span=""];
m10_33 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="connection.Execute(\r\n                @''sp_getapplock'',\r\n                parameters,\r\n                commandTimeout: commandTimeout,\r\n                commandType: CommandType.StoredProcedure)", span="88-92"];
m10_37 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="throw new DistributedLockTimeoutException(resource);", span="100-100"];
m10_38 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="throw new SqlServerDistributedLockException(\r\n                    String.Format(\r\n                    ''Could not place a lock on the resource '{0}': {1}.'',\r\n                    resource,\r\n                    LockErrorMessages.ContainsKey(lockResult)\r\n                        ? LockErrorMessages[lockResult]\r\n                        : String.Format(''Server returned the '{0}' error.'', lockResult)));", span="103-109"];
m10_29 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="parameters.Add(''@LockOwner'', LockOwner)", span="81-81"];
m10_31 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label=options, span=""];
m10_34 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="var lockResult = parameters.Get<int>(''@Result'')", span="94-94"];
m10_32 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="var commandTimeout = (int)(timeout.TotalSeconds + CommandTimeoutAdditionSeconds)", span="86-86"];
m10_35 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="lockResult < 0", span="96-96"];
m10_36 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="lockResult == -1", span="98-98"];
m10_39 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", span="75-75"];
m10_14 [cluster="System.ArgumentException.ArgumentException(string, string)", file="SqlServerDistributedLock.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m10_44 [cluster="Hangfire.Storage.DistributedLockTimeoutException.DistributedLockTimeoutException(string)", file="SqlServerDistributedLock.cs", label="Entry Hangfire.Storage.DistributedLockTimeoutException.DistributedLockTimeoutException(string)", span="6-6"];
m10_42 [cluster="Unk.Execute", file="SqlServerDistributedLock.cs", label="Entry Unk.Execute", span=""];
m10_47 [cluster="Unk.Format", file="SqlServerDistributedLock.cs", label="Entry Unk.Format", span=""];
m10_46 [cluster="Unk.ContainsKey", file="SqlServerDistributedLock.cs", label="Entry Unk.ContainsKey", span=""];
m10_58 [file="SqlServerDistributedLock.cs", label="Hangfire.SqlServer.SqlServerDistributedLock", span=""];
m11_58 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", span="125-125"];
m11_59 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SqlServerDistributedLockFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Poller will enqueue only jobs in the Scheduled state'', ((string[])(null)))", span="127-127"];
m11_60 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="129-129"];
m11_61 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SqlServerDistributedLockFacts.cs", label="testRunner.Given(''a scheduled job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="131-131"];
m11_62 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SqlServerDistributedLockFacts.cs", label="testRunner.And(''it\'s state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="133-133"];
m11_63 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SqlServerDistributedLockFacts.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="135-135"];
m11_64 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SqlServerDistributedLockFacts.cs", label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="137-137"];
m11_65 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SqlServerDistributedLockFacts.cs", label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="139-139"];
m11_66 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioCleanup()", span="141-141"];
m11_67 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", span="125-125"];
m11_29 [cluster="Unk.CollectScenarioErrors", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m11_14 [cluster="HangFire.Tests.SchedulePollerFeature.TestInitialize()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.SchedulePollerFeature.TestInitialize()", span="46-46"];
m11_15 [cluster="HangFire.Tests.SchedulePollerFeature.TestInitialize()", file="SqlServerDistributedLockFacts.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''SchedulePoller''))", span="48-49"];
m11_16 [cluster="HangFire.Tests.SchedulePollerFeature.TestInitialize()", file="SqlServerDistributedLockFacts.cs", label="HangFire.Tests.SchedulePollerFeature.FeatureSetup(null)", span="51-51"];
m11_17 [cluster="HangFire.Tests.SchedulePollerFeature.TestInitialize()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.SchedulePollerFeature.TestInitialize()", span="46-46"];
m11_21 [cluster="Unk.OnScenarioEnd", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.OnScenarioEnd", span=""];
m11_75 [cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", span="165-165"];
m11_76 [cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SqlServerDistributedLockFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Poller move the job to the Failed state when it could not find it\'s type'', ((string[])(null)))", span="167-167"];
m11_77 [cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="169-169"];
m11_78 [cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SqlServerDistributedLockFacts.cs", label="testRunner.Given(''a scheduled job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="171-171"];
m11_79 [cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SqlServerDistributedLockFacts.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="173-173"];
m11_80 [cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SqlServerDistributedLockFacts.cs", label="testRunner.Then(''the job moved to the Failed state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="175-175"];
m11_81 [cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioCleanup()", span="177-177"];
m11_82 [cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", span="165-165"];
m11_45 [cluster="Unk.And", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.And", span=""];
m11_46 [cluster="Unk.But", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.But", span=""];
m11_5 [cluster="Unk.GetTestRunner", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.GetTestRunner", span=""];
m11_83 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", span="184-184"];
m11_84 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SqlServerDistributedLockFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Poller will fail only jobs in the Scheduled state'', ((string[])(null)))", span="186-186"];
m11_85 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="188-188"];
m11_86 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SqlServerDistributedLockFacts.cs", label="testRunner.Given(''a scheduled job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="190-190"];
m11_87 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SqlServerDistributedLockFacts.cs", label="testRunner.And(''it\'s state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="192-192"];
m11_88 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SqlServerDistributedLockFacts.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="194-194"];
m11_89 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SqlServerDistributedLockFacts.cs", label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="196-196"];
m11_90 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioCleanup()", span="198-198"];
m11_91 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", span="184-184"];
m11_26 [cluster="HangFire.Tests.SchedulePollerFeature.ScenarioCleanup()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.SchedulePollerFeature.ScenarioCleanup()", span="66-66"];
m11_27 [cluster="HangFire.Tests.SchedulePollerFeature.ScenarioCleanup()", file="SqlServerDistributedLockFacts.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m11_28 [cluster="HangFire.Tests.SchedulePollerFeature.ScenarioCleanup()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.SchedulePollerFeature.ScenarioCleanup()", span="66-66"];
m11_13 [cluster="Unk.OnFeatureEnd", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.OnFeatureEnd", span=""];
m11_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="SqlServerDistributedLockFacts.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m11_30 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", span="75-75"];
m11_31 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SqlServerDistributedLockFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Scheduled jobs are being enqueued on their actual queues'', ((string[])(null)))", span="77-77"];
m11_32 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="79-79"];
m11_33 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SqlServerDistributedLockFacts.cs", label="testRunner.Given(''a scheduled job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81"];
m11_34 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SqlServerDistributedLockFacts.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="83-83"];
m11_35 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SqlServerDistributedLockFacts.cs", label="testRunner.Then(''the job becomes Enqueued'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="85-85"];
m11_36 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SqlServerDistributedLockFacts.cs", label="testRunner.And(''the schedule does not contain it anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="87-87"];
m11_37 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SqlServerDistributedLockFacts.cs", label="testRunner.But(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="89-89"];
m11_38 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SqlServerDistributedLockFacts.cs", label="testRunner.And(''schedule poller returns \'true\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="91-91"];
m11_39 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioCleanup()", span="93-93"];
m11_40 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", span="75-75"];
m11_43 [cluster="Unk.When", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.When", span=""];
m11_68 [cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", span="148-148"];
m11_69 [cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SqlServerDistributedLockFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Returns false when there are no jobs in the schedule'', ((string[])(null)))", span="150-150"];
m11_70 [cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="152-152"];
m11_71 [cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SqlServerDistributedLockFacts.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="154-154"];
m11_72 [cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SqlServerDistributedLockFacts.cs", label="testRunner.Then(''schedule poller returns \'false\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="156-156"];
m11_73 [cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioCleanup()", span="158-158"];
m11_74 [cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", span="148-148"];
m11_0 [cluster="HangFire.Tests.SchedulePollerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.SchedulePollerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m11_1 [cluster="HangFire.Tests.SchedulePollerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerDistributedLockFacts.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
m11_2 [cluster="HangFire.Tests.SchedulePollerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerDistributedLockFacts.cs", label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''SchedulePoller'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34"];
m11_3 [cluster="HangFire.Tests.SchedulePollerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerDistributedLockFacts.cs", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
m11_4 [cluster="HangFire.Tests.SchedulePollerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.SchedulePollerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m11_22 [cluster="HangFire.Tests.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m11_23 [cluster="HangFire.Tests.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerDistributedLockFacts.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m11_24 [cluster="HangFire.Tests.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m11_41 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SqlServerDistributedLockFacts.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m11_44 [cluster="Unk.Then", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.Then", span=""];
m11_42 [cluster="Unk.Given", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.Given", span=""];
m11_47 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", span="100-100"];
m11_48 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SqlServerDistributedLockFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Future jobs are not being enqueued'', ((string[])(null)))", span="102-102"];
m11_49 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="104-104"];
m11_50 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SqlServerDistributedLockFacts.cs", label="testRunner.Given(''a future job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="106-106"];
m11_51 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SqlServerDistributedLockFacts.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="108-108"];
m11_52 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SqlServerDistributedLockFacts.cs", label="testRunner.Then(''the job remains to be in the Scheduled state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="110-110"];
m11_53 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SqlServerDistributedLockFacts.cs", label="testRunner.And(''the schedule contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="112-112"];
m11_54 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SqlServerDistributedLockFacts.cs", label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="114-114"];
m11_55 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SqlServerDistributedLockFacts.cs", label="testRunner.And(''schedule poller returns \'false\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="116-116"];
m11_56 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SqlServerDistributedLockFacts.cs", label="this.ScenarioCleanup()", span="118-118"];
m11_57 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", span="100-100"];
m11_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SqlServerDistributedLockFacts.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m11_9 [cluster="HangFire.Tests.SchedulePollerFeature.FeatureTearDown()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.SchedulePollerFeature.FeatureTearDown()", span="39-39"];
m11_10 [cluster="HangFire.Tests.SchedulePollerFeature.FeatureTearDown()", file="SqlServerDistributedLockFacts.cs", label="testRunner.OnFeatureEnd()", span="41-41"];
m11_11 [cluster="HangFire.Tests.SchedulePollerFeature.FeatureTearDown()", file="SqlServerDistributedLockFacts.cs", label="testRunner = null", span="42-42"];
m11_12 [cluster="HangFire.Tests.SchedulePollerFeature.FeatureTearDown()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.SchedulePollerFeature.FeatureTearDown()", span="39-39"];
m11_18 [cluster="HangFire.Tests.SchedulePollerFeature.ScenarioTearDown()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.SchedulePollerFeature.ScenarioTearDown()", span="56-56"];
m11_19 [cluster="HangFire.Tests.SchedulePollerFeature.ScenarioTearDown()", file="SqlServerDistributedLockFacts.cs", label="testRunner.OnScenarioEnd()", span="58-58"];
m11_20 [cluster="HangFire.Tests.SchedulePollerFeature.ScenarioTearDown()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.SchedulePollerFeature.ScenarioTearDown()", span="56-56"];
m11_8 [cluster="Unk.OnFeatureStart", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.OnFeatureStart", span=""];
m11_92 [file="SqlServerDistributedLockFacts.cs", label="HangFire.Tests.SchedulePollerFeature", span=""];
m12_25 [cluster="Unk.ErrorFormat", file="SqlServerJobQueue.cs", label="Entry Unk.ErrorFormat", span=""];
m12_4 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="SqlServerJobQueue.cs", label="Entry HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", span="35-35"];
m12_5 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="SqlServerJobQueue.cs", label="var failedState = context.CandidateState as FailedState", span="37-37"];
m12_8 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="SqlServerJobQueue.cs", label="var retryAttempt = context.GetJobParameter<int>(''RetryCount'') + 1", span="44-44"];
m12_11 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="SqlServerJobQueue.cs", label="context.SetJobParameter(''RetryCount'', retryAttempt)", span="50-50"];
m12_12 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=red, community=0, file="SqlServerJobQueue.cs", label="0: context.CandidateState = new ScheduledState(delay)\r\n                {\r\n                    Reason = String.Format(''Retry attempt {0} of {1}'', retryAttempt, Attempts)\r\n                }", span="54-57"];
m12_14 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="SqlServerJobQueue.cs", label="Logger.WarnFormat(\r\n                        ''Failed to process the job '{0}': an exception occurred. Retry attempt {1} of {2} will be performed in {3}.'',\r\n                        failedState.Exception,\r\n                        context.JobId,\r\n                        retryAttempt,\r\n                        Attempts,\r\n                        delay)", span="61-67"];
m12_16 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="SqlServerJobQueue.cs", label="Logger.ErrorFormat(\r\n                        ''Failed to process the job '{0}': an exception occurred.'',\r\n                        failedState.Exception,\r\n                        context.JobId)", span="74-77"];
m12_6 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="SqlServerJobQueue.cs", label="failedState == null", span="38-38"];
m12_7 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="SqlServerJobQueue.cs", label="return;", span="41-41"];
m12_9 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="SqlServerJobQueue.cs", label="retryAttempt <= Attempts", span="46-46"];
m12_10 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="SqlServerJobQueue.cs", label="var delay = TimeSpan.FromSeconds(SecondsToDelay(retryAttempt))", span="48-48"];
m12_15 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="SqlServerJobQueue.cs", label=LogEvents, span="72-72"];
m12_13 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="SqlServerJobQueue.cs", label=LogEvents, span="59-59"];
m12_17 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="SqlServerJobQueue.cs", label="Exit HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", span="35-35"];
m12_23 [cluster="string.Format(string, object, object)", file="SqlServerJobQueue.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m12_0 [cluster="HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", file="SqlServerJobQueue.cs", label="Entry HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", span="14-14"];
m12_1 [cluster="HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", file="SqlServerJobQueue.cs", label="Attempts = DefaultRetryAttempts", span="16-16"];
m12_2 [cluster="HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", file="SqlServerJobQueue.cs", label="LogEvents = true", span="17-17"];
m12_3 [cluster="HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", file="SqlServerJobQueue.cs", label="Exit HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", span="14-14"];
m12_22 [cluster="HangFire.States.ScheduledState.ScheduledState(System.TimeSpan)", file="SqlServerJobQueue.cs", label="Entry HangFire.States.ScheduledState.ScheduledState(System.TimeSpan)", span="27-27"];
m12_18 [cluster="HangFire.States.ElectStateContext.GetJobParameter<T>(string)", file="SqlServerJobQueue.cs", label="Entry HangFire.States.ElectStateContext.GetJobParameter<T>(string)", span="54-54"];
m12_20 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerJobQueue.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m12_29 [cluster="System.Random.Random()", file="SqlServerJobQueue.cs", label="Entry System.Random.Random()", span="0-0"];
m12_19 [cluster="HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", file="SqlServerJobQueue.cs", label="Entry HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", span="83-83"];
m12_26 [cluster="HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", file="SqlServerJobQueue.cs", label="var random = new Random()", span="85-85"];
m12_27 [cluster="HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", file="SqlServerJobQueue.cs", label="return (int)Math.Round(\r\n                Math.Pow(retryCount - 1, 4) + 15 + (random.Next(30) * (retryCount)));", span="86-87"];
m12_28 [cluster="HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", file="SqlServerJobQueue.cs", label="Exit HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", span="83-83"];
m12_24 [cluster="Unk.WarnFormat", file="SqlServerJobQueue.cs", label="Entry Unk.WarnFormat", span=""];
m12_31 [cluster="System.Random.Next(int)", file="SqlServerJobQueue.cs", label="Entry System.Random.Next(int)", span="0-0"];
m12_32 [cluster="System.Math.Round(double)", file="SqlServerJobQueue.cs", label="Entry System.Math.Round(double)", span="0-0"];
m12_30 [cluster="System.Math.Pow(double, double)", file="SqlServerJobQueue.cs", label="Entry System.Math.Pow(double, double)", span="0-0"];
m12_21 [cluster="HangFire.States.ElectStateContext.SetJobParameter<T>(string, T)", file="SqlServerJobQueue.cs", label="Entry HangFire.States.ElectStateContext.SetJobParameter<T>(string, T)", span="49-49"];
m12_33 [file="SqlServerJobQueue.cs", label="HangFire.AutomaticRetryAttribute", span=""];
m13_15 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m13_24 [cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerStorage.GetConnection()", span="64-64"];
m13_25 [cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", file="SqlServerJobQueueMonitoringApi.cs", label="var connection = CreateAndOpenConnection()", span="66-66"];
m13_26 [cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", color=red, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="0: return new SqlServerConnection(connection, QueueProviders);", span="68-68"];
m13_27 [cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerStorage.GetConnection()", span="64-64"];
m13_40 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerStorage.ToString()", span="83-83"];
m13_41 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueueMonitoringApi.cs", label="string canNotParseMessage = ''<Connection string can not be parsed>''", span="85-85"];
m13_42 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", color=red, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="2: var parts = _connectionString.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)\r\n                    .Select(x => x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries))\r\n                    .Select(x => new { Key = x[0].Trim(), Value = x[1].Trim() })\r\n                    .ToDictionary(x => x.Key, x => x.Value)", span="89-92"];
m13_52 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueueMonitoringApi.cs", label="return builder.Length != 0 \r\n                    ? String.Format(''SQL Server: {0}'', builder) \r\n                    : canNotParseMessage;", span="116-118"];
m13_54 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueueMonitoringApi.cs", label="return canNotParseMessage;", span="122-122"];
m13_43 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueueMonitoringApi.cs", label="var builder = new StringBuilder()", span="94-94"];
m13_45 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueueMonitoringApi.cs", label="parts.ContainsKey(alias)", span="98-98"];
m13_46 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueueMonitoringApi.cs", label="builder.AppendFormat(''{1}'', alias, parts[alias])", span="100-100"];
m13_50 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueueMonitoringApi.cs", label="parts.ContainsKey(alias)", span="109-109"];
m13_51 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueueMonitoringApi.cs", label="builder.AppendFormat(''{1}'', alias, parts[alias])", span="111-111"];
m13_44 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueueMonitoringApi.cs", label="new[] { ''Data Source'', ''Server'', ''Address'', ''Addr'', ''Network Address'' }", span="96-96"];
m13_47 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueueMonitoringApi.cs", label="builder.Length != 0", span="105-105"];
m13_48 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueueMonitoringApi.cs", label="builder.Append(''@'')", span="105-105"];
m13_49 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueueMonitoringApi.cs", label="new[] { ''Database'', ''Initial Catalog'' }", span="107-107"];
m13_53 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueueMonitoringApi.cs", label=Exception, span="120-120"];
m13_55 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerStorage.ToString()", span="83-83"];
m13_62 [cluster="System.Text.StringBuilder.Append(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m13_60 [cluster="Unk.ContainsKey", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.ContainsKey", span=""];
m13_63 [cluster="string.Format(string, object)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry string.Format(string, object)", span="0-0"];
m13_38 [cluster="Unk.Info", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.Info", span=""];
m13_33 [cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", span="76-76"];
m13_34 [cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerJobQueueMonitoringApi.cs", label="logger.Info(''Using the following options for SQL Server job storage:'')", span="78-78"];
m13_35 [cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerJobQueueMonitoringApi.cs", label="logger.InfoFormat(''    Queue poll interval: {0}.'', _options.QueuePollInterval)", span="79-79"];
m13_36 [cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerJobQueueMonitoringApi.cs", label="logger.InfoFormat(''    Invisibility timeout: {0}.'', _options.InvisibilityTimeout)", span="80-80"];
m13_37 [cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", span="76-76"];
m13_59 [cluster="System.Text.StringBuilder.StringBuilder()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
m13_82 [cluster="Unk.Open", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.Open", span=""];
m13_39 [cluster="Unk.InfoFormat", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.InfoFormat", span=""];
m13_70 [cluster="Unk.Trim", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.Trim", span=""];
m13_19 [cluster="HangFire.SqlServer.PersistentJobQueueProviderCollection.PersistentJobQueueProviderCollection(HangFire.SqlServer.IPersistentJobQueueProvider)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.SqlServer.PersistentJobQueueProviderCollection.PersistentJobQueueProviderCollection(HangFire.SqlServer.IPersistentJobQueueProvider)", span="31-31"];
m13_81 [cluster="SqlConnection.cstr", file="SqlServerJobQueueMonitoringApi.cs", label="Entry SqlConnection.cstr", span=""];
m13_61 [cluster="Unk.AppendFormat", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.AppendFormat", span=""];
m13_18 [cluster="HangFire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(HangFire.SqlServer.SqlServerStorageOptions)", span="25-25"];
m13_20 [cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="59-59"];
m13_21 [cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="SqlServerJobQueueMonitoringApi.cs", label="return new SqlServerMonitoringApi(CreateAndOpenConnection(), QueueProviders);", span="61-61"];
m13_22 [cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="59-59"];
m13_32 [cluster="HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", span="39-39"];
m13_2 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="37-37"];
m13_3 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueMonitoringApi.cs", label="connectionString == null", span="39-39"];
m13_5 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueMonitoringApi.cs", label="options == null", span="40-40"];
m13_7 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueMonitoringApi.cs", label="_options = options", span="42-42"];
m13_8 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueMonitoringApi.cs", label="_connectionString = connectionString", span="43-43"];
m13_9 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueMonitoringApi.cs", label="options.PrepareSchemaIfNecessary", span="45-45"];
m13_12 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueMonitoringApi.cs", label="var defaultQueueProvider = new SqlServerJobQueueProvider(options)", span="53-53"];
m13_4 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''connectionString'');", span="39-39"];
m13_6 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''options'');", span="40-40"];
m13_10 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueMonitoringApi.cs", label="var connection = CreateAndOpenConnection()", span="47-47"];
m13_11 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueMonitoringApi.cs", label="SqlServerObjectsInstaller.Install(connection)", span="49-49"];
m13_13 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueMonitoringApi.cs", label="QueueProviders = new PersistentJobQueueProviderCollection(defaultQueueProvider)", span="54-54"];
m13_14 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="37-37"];
m13_56 [cluster="string.Split(char[], System.StringSplitOptions)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry string.Split(char[], System.StringSplitOptions)", span="0-0"];
m13_74 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="92-92"];
m13_64 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="90-90"];
m13_67 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="91-91"];
m13_71 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="92-92"];
m13_65 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries)", span="90-90"];
m13_66 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="90-90"];
m13_68 [cluster="lambda expression", color=red, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="1: new { Key = x[0].Trim(), Value = x[1].Trim() }", span="91-91"];
m13_69 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="91-91"];
m13_72 [cluster="lambda expression", color=red, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="2: x.Key", span="92-92"];
m13_73 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="92-92"];
m13_75 [cluster="lambda expression", color=red, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="3: x.Value", span="92-92"];
m13_76 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="92-92"];
m13_23 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="36-36"];
m13_57 [cluster="Unk.Select", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.Select", span=""];
m13_29 [cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerStorage.GetComponents()", span="71-71"];
m13_30 [cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerJobQueueMonitoringApi.cs", label="yield return new ExpirationManager(this);", span="73-73"];
m13_31 [cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerStorage.GetComponents()", span="71-71"];
m13_17 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", span="34-34"];
m13_0 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="32-32"];
m13_1 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="32-32"];
m13_16 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="126-126"];
m13_77 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerJobQueueMonitoringApi.cs", label="var connection = new SqlConnection(_connectionString)", span="128-128"];
m13_78 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerJobQueueMonitoringApi.cs", label="connection.Open()", span="129-129"];
m13_79 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerJobQueueMonitoringApi.cs", label="return connection;", span="131-131"];
m13_80 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="126-126"];
m13_28 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35"];
m13_83 [file="SqlServerJobQueueMonitoringApi.cs", label="HangFire.SqlServer.SqlServerStorage", span=""];
m14_4 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerObjectsInstaller.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m14_0 [cluster="HangFire.Redis.RedisStorageOptions.RedisStorageOptions()", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.Redis.RedisStorageOptions.RedisStorageOptions()", span="22-22"];
m14_1 [cluster="HangFire.Redis.RedisStorageOptions.RedisStorageOptions()", file="SqlServerObjectsInstaller.cs", label="PollInterval = TimeSpan.FromSeconds(15)", span="24-24"];
m14_2 [cluster="HangFire.Redis.RedisStorageOptions.RedisStorageOptions()", file="SqlServerObjectsInstaller.cs", label="ConnectionPoolSize = 50", span="25-25"];
m14_3 [cluster="HangFire.Redis.RedisStorageOptions.RedisStorageOptions()", file="SqlServerObjectsInstaller.cs", label="Exit HangFire.Redis.RedisStorageOptions.RedisStorageOptions()", span="22-22"];
m14_5 [file="SqlServerObjectsInstaller.cs", label="HangFire.Redis.RedisStorageOptions", span=""];
m15_12 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", file="SqlServerStorage.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", span="18-18"];
m15_13 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", file="SqlServerStorage.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetStateData(''random-id'');\r\n                Assert.Null(result);\r\n            })", span="20-24"];
m15_14 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", file="SqlServerStorage.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", span="18-18"];
m15_33 [cluster="Unk.SetRangeInHash", file="SqlServerStorage.cs", label="Entry Unk.SetRangeInHash", span=""];
m15_97 [cluster="Unk.GetAllEntriesFromHash", file="SqlServerStorage.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m15_35 [cluster="Unk.Equal", file="SqlServerStorage.cs", label="Entry Unk.Equal", span=""];
m15_11 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", file="SqlServerStorage.cs", label="Entry HangFire.Redis.RedisConnection.GetStateData(string)", span="204-204"];
m15_115 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", file="SqlServerStorage.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", span="147-147"];
m15_116 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", file="SqlServerStorage.cs", label="UseConnections((redis, connection) =>\r\n            {\r\n                // Arrange\r\n                redis.SetRangeInHash(''hangfire:some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetAllEntriesFromHash(''some-hash'');\r\n\r\n                // Assert\r\n                Assert.NotNull(result);\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="149-165"];
m15_117 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", file="SqlServerStorage.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", span="147-147"];
m15_7 [cluster="Unk.>", file="SqlServerStorage.cs", label="Entry Unk.>", span=""];
m15_0 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerStorage.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="10-10"];
m15_1 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerStorage.cs", label="UseConnection(\r\n                connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null)))", span="12-14"];
m15_2 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerStorage.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="10-10"];
m15_65 [cluster="Unk.AddItemToSortedSet", file="SqlServerStorage.cs", label="Entry Unk.AddItemToSortedSet", span=""];
m15_77 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerStorage.cs", label="Entry HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="255-255"];
m15_34 [cluster="Unk.NotNull", file="SqlServerStorage.cs", label="Entry Unk.NotNull", span=""];
m15_32 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerStorage.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m15_36 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerStorage.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", span="51-51"];
m15_37 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerStorage.cs", label="UseConnection(connection =>\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetAllItemsFromSet(null)))", span="53-54"];
m15_38 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerStorage.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", span="51-51"];
m15_19 [cluster="Unk.Null", file="SqlServerStorage.cs", label="Entry Unk.Null", span=""];
m15_98 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerStorage.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", span="130-130"];
m15_99 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerStorage.cs", label="UseConnection(connection =>\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetAllEntriesFromHash(null)))", span="132-133"];
m15_100 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerStorage.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", span="130-130"];
m15_67 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerStorage.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="89-89"];
m15_68 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerStorage.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(null, new Dictionary<string, string>()));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="91-97"];
m15_69 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerStorage.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="89-89"];
m15_108 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", file="SqlServerStorage.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", span="137-137"];
m15_109 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", file="SqlServerStorage.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllEntriesFromHash(''some-hash'');\r\n                Assert.Null(result);\r\n            })", span="139-143"];
m15_110 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", file="SqlServerStorage.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", span="137-137"];
m15_104 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="133-133"];
m15_57 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="72-85"];
m15_62 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="3: Assert.Contains(''1'', result)", span="83-83"];
m15_60 [cluster="lambda expression", file="SqlServerStorage.cs", label="var result = connection.GetAllItemsFromSet(''some-set'')", span="79-79"];
m15_61 [cluster="lambda expression", file="SqlServerStorage.cs", label="Assert.Equal(2, result.Count)", span="82-82"];
m15_63 [cluster="lambda expression", file="SqlServerStorage.cs", label="Assert.Contains(''2'', result)", span="84-84"];
m15_64 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="72-85"];
m15_58 [cluster="lambda expression", file="SqlServerStorage.cs", label="redis.AddItemToSortedSet(''hangfire:some-set'', ''1'')", span="75-75"];
m15_59 [cluster="lambda expression", file="SqlServerStorage.cs", label="redis.AddItemToSortedSet(''hangfire:some-set'', ''2'')", span="76-76"];
m15_4 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="13-14"];
m15_15 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="20-24"];
m15_24 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="30-47"];
m15_39 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="53-54"];
m15_49 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="60-66"];
m15_70 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="91-97"];
m15_81 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="103-109"];
m15_91 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="115-126"];
m15_101 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="132-133"];
m15_111 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="139-143"];
m15_118 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="149-165"];
m15_43 [cluster="lambda expression", file="SqlServerStorage.cs", label="connection.GetAllItemsFromSet(null)", span="54-54"];
m15_50 [cluster="lambda expression", file="SqlServerStorage.cs", label="var result = connection.GetAllItemsFromSet(''some-set'')", span="62-62"];
m15_28 [cluster="lambda expression", file="SqlServerStorage.cs", label="Assert.Equal(''Name'', result.Name)", span="44-44"];
m15_29 [cluster="lambda expression", file="SqlServerStorage.cs", label="Assert.Equal(''Reason'', result.Reason)", span="45-45"];
m15_30 [cluster="lambda expression", file="SqlServerStorage.cs", label="Assert.Equal(''Value'', result.Data[''Key''])", span="46-46"];
m15_52 [cluster="lambda expression", file="SqlServerStorage.cs", label="Assert.Equal(0, result.Count)", span="65-65"];
m15_72 [cluster="lambda expression", file="SqlServerStorage.cs", label="Assert.Equal(''key'', exception.ParamName)", span="96-96"];
m15_83 [cluster="lambda expression", file="SqlServerStorage.cs", label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="108-108"];
m15_94 [cluster="lambda expression", file="SqlServerStorage.cs", label="Assert.Equal(''Value1'', hash[''Key1''])", span="124-124"];
m15_95 [cluster="lambda expression", file="SqlServerStorage.cs", label="Assert.Equal(''Value2'', hash[''Key2''])", span="125-125"];
m15_122 [cluster="lambda expression", file="SqlServerStorage.cs", label="Assert.Equal(''Value1'', result[''Key1''])", span="163-163"];
m15_123 [cluster="lambda expression", file="SqlServerStorage.cs", label="Assert.Equal(''Value2'', result[''Key2''])", span="164-164"];
m15_6 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="13-14"];
m15_5 [cluster="lambda expression", file="SqlServerStorage.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null))", span="13-14"];
m15_9 [cluster="lambda expression", file="SqlServerStorage.cs", label="connection.GetStateData(null)", span="14-14"];
m15_18 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="20-24"];
m15_16 [cluster="lambda expression", file="SqlServerStorage.cs", label="var result = connection.GetStateData(''random-id'')", span="22-22"];
m15_31 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="30-47"];
m15_25 [cluster="lambda expression", file="SqlServerStorage.cs", label="redis.SetRangeInHash(\r\n                    ''hangfire:job:my-job:state'',\r\n                    new Dictionary<string, string>\r\n                    {\r\n                        { ''State'', ''Name'' },\r\n                        { ''Reason'', ''Reason'' },\r\n                        { ''Key'', ''Value'' }\r\n                    })", span="32-39"];
m15_26 [cluster="lambda expression", file="SqlServerStorage.cs", label="var result = connection.GetStateData(''my-job'')", span="41-41"];
m15_41 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="53-54"];
m15_40 [cluster="lambda expression", file="SqlServerStorage.cs", label="Assert.Throws<ArgumentNullException>(() => connection.GetAllItemsFromSet(null))", span="54-54"];
m15_53 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="60-66"];
m15_73 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="91-97"];
m15_71 [cluster="lambda expression", file="SqlServerStorage.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(null, new Dictionary<string, string>()))", span="93-94"];
m15_75 [cluster="lambda expression", file="SqlServerStorage.cs", label="connection.SetRangeInHash(null, new Dictionary<string, string>())", span="94-94"];
m15_84 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="103-109"];
m15_82 [cluster="lambda expression", file="SqlServerStorage.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(''some-hash'', null))", span="105-106"];
m15_86 [cluster="lambda expression", file="SqlServerStorage.cs", label="connection.SetRangeInHash(''some-hash'', null)", span="106-106"];
m15_96 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="115-126"];
m15_92 [cluster="lambda expression", file="SqlServerStorage.cs", label="connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="117-121"];
m15_93 [cluster="lambda expression", file="SqlServerStorage.cs", label="var hash = redis.GetAllEntriesFromHash(''hangfire:some-hash'')", span="123-123"];
m15_103 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="132-133"];
m15_102 [cluster="lambda expression", file="SqlServerStorage.cs", label="Assert.Throws<ArgumentNullException>(() => connection.GetAllEntriesFromHash(null))", span="133-133"];
m15_105 [cluster="lambda expression", file="SqlServerStorage.cs", label="connection.GetAllEntriesFromHash(null)", span="133-133"];
m15_114 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="139-143"];
m15_112 [cluster="lambda expression", file="SqlServerStorage.cs", label="var result = connection.GetAllEntriesFromHash(''some-hash'')", span="141-141"];
m15_124 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="149-165"];
m15_119 [cluster="lambda expression", file="SqlServerStorage.cs", label="redis.SetRangeInHash(''hangfire:some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="152-156"];
m15_120 [cluster="lambda expression", file="SqlServerStorage.cs", label="var result = connection.GetAllEntriesFromHash(''some-hash'')", span="159-159"];
m15_42 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="54-54"];
m15_44 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="54-54"];
m15_51 [cluster="lambda expression", file="SqlServerStorage.cs", label="Assert.NotNull(result)", span="64-64"];
m15_27 [cluster="lambda expression", file="SqlServerStorage.cs", label="Assert.NotNull(result)", span="43-43"];
m15_121 [cluster="lambda expression", file="SqlServerStorage.cs", label="Assert.NotNull(result)", span="162-162"];
m15_8 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="14-14"];
m15_10 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="14-14"];
m15_17 [cluster="lambda expression", file="SqlServerStorage.cs", label="Assert.Null(result)", span="23-23"];
m15_74 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="94-94"];
m15_76 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="94-94"];
m15_85 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="106-106"];
m15_87 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="106-106"];
m15_113 [cluster="lambda expression", file="SqlServerStorage.cs", label="Assert.Null(result)", span="142-142"];
m15_106 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="133-133"];
m15_23 [cluster="Unk.UseConnections", file="SqlServerStorage.cs", label="Entry Unk.UseConnections", span=""];
m15_20 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", file="SqlServerStorage.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", span="28-28"];
m15_21 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", file="SqlServerStorage.cs", label="UseConnections((redis, connection) =>\r\n            {\r\n                redis.SetRangeInHash(\r\n                    ''hangfire:job:my-job:state'',\r\n                    new Dictionary<string, string>\r\n                    {\r\n                        { ''State'', ''Name'' },\r\n                        { ''Reason'', ''Reason'' },\r\n                        { ''Key'', ''Value'' }\r\n                    });\r\n\r\n                var result = connection.GetStateData(''my-job'');\r\n\r\n                Assert.NotNull(result);\r\n                Assert.Equal(''Name'', result.Name);\r\n                Assert.Equal(''Reason'', result.Reason);\r\n                Assert.Equal(''Value'', result.Data[''Key'']);\r\n            })", span="30-47"];
m15_22 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", file="SqlServerStorage.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", span="28-28"];
m15_66 [cluster="Unk.Contains", file="SqlServerStorage.cs", label="Entry Unk.Contains", span=""];
m15_107 [cluster="HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", file="SqlServerStorage.cs", label="Entry HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", span="263-263"];
m15_54 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="SqlServerStorage.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", span="70-70"];
m15_55 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", color=green, community=0, file="SqlServerStorage.cs", label="2: UseConnections((redis, connection) =>\r\n            {\r\n                // Arrange\r\n                redis.AddItemToSortedSet(''hangfire:some-set'', ''1'');\r\n                redis.AddItemToSortedSet(''hangfire:some-set'', ''2'');\r\n\r\n                // Act\r\n                var result = connection.GetAllItemsFromSet(''some-set'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result.Count);\r\n                Assert.Contains(''1'', result);\r\n                Assert.Contains(''2'', result);\r\n            })", span="72-85"];
m15_56 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="SqlServerStorage.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", span="70-70"];
m15_46 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", file="SqlServerStorage.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", span="58-58"];
m15_47 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", file="SqlServerStorage.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllItemsFromSet(''some-set'');\r\n\r\n                Assert.NotNull(result);\r\n                Assert.Equal(0, result.Count);\r\n            })", span="60-66"];
m15_48 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", file="SqlServerStorage.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", span="58-58"];
m15_78 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerStorage.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="101-101"];
m15_79 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerStorage.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(''some-hash'', null));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="103-109"];
m15_80 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerStorage.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="101-101"];
m15_45 [cluster="HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", file="SqlServerStorage.cs", label="Entry HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", span="240-240"];
m15_88 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", file="SqlServerStorage.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", span="113-113"];
m15_89 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", file="SqlServerStorage.cs", label="UseConnections((redis, connection) =>\r\n            {\r\n                connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                });\r\n\r\n                var hash = redis.GetAllEntriesFromHash(''hangfire:some-hash'');\r\n                Assert.Equal(''Value1'', hash[''Key1'']);\r\n                Assert.Equal(''Value2'', hash[''Key2'']);\r\n            })", span="115-126"];
m15_90 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", file="SqlServerStorage.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", span="113-113"];
m15_138 [file="SqlServerStorage.cs", label="HangFire.Redis.Tests.RedisConnectionFacts", span=""];
m15_140 [file="SqlServerStorage.cs", label="HangFire.Redis.RedisConnection", span=""];
m15_139 [file="SqlServerStorage.cs", label="HangFire.Redis.RedisConnection", span=""];
m15_141 [file="SqlServerStorage.cs", label="HangFire.Redis.RedisConnection", span=""];
m15_142 [file="SqlServerStorage.cs", label="HangFire.Redis.RedisConnection", span=""];
m15_143 [file="SqlServerStorage.cs", label="HangFire.Redis.RedisConnection", span=""];
m17_46 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext, HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="Entry HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext, HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", span="30-30"];
m17_38 [cluster="HangFire.Server.ServerComponentRunnerCollection.Stop()", file="SqlServerStorageOptions.cs", label="Entry HangFire.Server.ServerComponentRunnerCollection.Stop()", span="44-44"];
m17_24 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerStorageOptions.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m17_0 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="Entry HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", span="32-32"];
m17_13 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="_storage = storage", span="47-47"];
m17_14 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="_performanceProcess = performanceProcess", span="48-48"];
m17_15 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="_stateMachineFactory = stateMachineFactory", span="49-49"];
m17_20 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="workerRunners.Add(CreateWorkerRunner(workerContext))", span="57-57"];
m17_22 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="_workerRunners = new ServerComponentRunnerCollection(workerRunners)", span="60-60"];
m17_19 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="var workerContext = new WorkerContext(serverId, queues, i)", span="54-54"];
m17_11 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="workerCount <= 0", span="45-45"];
m17_16 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="var workerRunners = new List<IServerComponentRunner>(workerCount)", span="51-51"];
m17_21 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="i++", span="52-52"];
m17_18 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="i <= workerCount", span="52-52"];
m17_17 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="var i = 1", span="52-52"];
m17_1 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="serverId == null", span="40-40"];
m17_3 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="storage == null", span="41-41"];
m17_5 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="performanceProcess == null", span="42-42"];
m17_7 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="stateMachineFactory == null", span="43-43"];
m17_9 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="queues == null", span="44-44"];
m17_12 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="throw new ArgumentOutOfRangeException(''workerCount'', ''Worker count value must be more than zero.'');", span="45-45"];
m17_2 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="throw new ArgumentNullException(''serverId'');", span="40-40"];
m17_4 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="throw new ArgumentNullException(''storage'');", span="41-41"];
m17_6 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="throw new ArgumentNullException(''performanceProcess'');", span="42-42"];
m17_8 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="throw new ArgumentNullException(''stateMachineFactory'');", span="43-43"];
m17_10 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="throw new ArgumentNullException(''queues'');", span="44-44"];
m17_23 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SqlServerStorageOptions.cs", label="Exit HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", span="32-32"];
m17_27 [cluster="HangFire.Server.WorkerContext.WorkerContext(string, string[], int)", file="SqlServerStorageOptions.cs", label="Entry HangFire.Server.WorkerContext.WorkerContext(string, string[], int)", span="27-27"];
m17_35 [cluster="HangFire.Server.WorkerManager.Stop()", file="SqlServerStorageOptions.cs", label="Entry HangFire.Server.WorkerManager.Stop()", span="68-68"];
m17_36 [cluster="HangFire.Server.WorkerManager.Stop()", file="SqlServerStorageOptions.cs", label="_workerRunners.Stop()", span="70-70"];
m17_37 [cluster="HangFire.Server.WorkerManager.Stop()", file="SqlServerStorageOptions.cs", label="Exit HangFire.Server.WorkerManager.Stop()", span="68-68"];
m17_26 [cluster="System.Collections.Generic.List<T>.List(int)", file="SqlServerStorageOptions.cs", label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0"];
m17_29 [cluster="System.Collections.Generic.List<T>.Add(T)", file="SqlServerStorageOptions.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m17_34 [cluster="HangFire.Server.ServerComponentRunnerCollection.Start()", file="SqlServerStorageOptions.cs", label="Entry HangFire.Server.ServerComponentRunnerCollection.Start()", span="36-36"];
m17_39 [cluster="HangFire.Server.WorkerManager.Dispose()", file="SqlServerStorageOptions.cs", label="Entry HangFire.Server.WorkerManager.Dispose()", span="73-73"];
m17_40 [cluster="HangFire.Server.WorkerManager.Dispose()", color=green, community=0, file="SqlServerStorageOptions.cs", label="0: _workerRunners.Dispose()", span="75-75"];
m17_41 [cluster="HangFire.Server.WorkerManager.Dispose()", file="SqlServerStorageOptions.cs", label="Exit HangFire.Server.WorkerManager.Dispose()", span="73-73"];
m17_25 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", file="SqlServerStorageOptions.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", span="0-0"];
m17_28 [cluster="HangFire.Server.WorkerManager.CreateWorkerRunner(HangFire.Server.WorkerContext)", file="SqlServerStorageOptions.cs", label="Entry HangFire.Server.WorkerManager.CreateWorkerRunner(HangFire.Server.WorkerContext)", span="78-78"];
m17_43 [cluster="HangFire.Server.WorkerManager.CreateWorkerRunner(HangFire.Server.WorkerContext)", color=green, community=0, file="SqlServerStorageOptions.cs", label="1: return new ServerComponentRunner(\r\n                new Worker(context, _storage, _performanceProcess, _stateMachineFactory));", span="80-81"];
m17_44 [cluster="HangFire.Server.WorkerManager.CreateWorkerRunner(HangFire.Server.WorkerContext)", file="SqlServerStorageOptions.cs", label="Exit HangFire.Server.WorkerManager.CreateWorkerRunner(HangFire.Server.WorkerContext)", span="78-78"];
m17_42 [cluster="HangFire.Server.ServerComponentRunnerCollection.Dispose()", file="SqlServerStorageOptions.cs", label="Entry HangFire.Server.ServerComponentRunnerCollection.Dispose()", span="52-52"];
m17_45 [cluster="HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent)", file="SqlServerStorageOptions.cs", label="Entry HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent)", span="36-36"];
m17_31 [cluster="HangFire.Server.WorkerManager.Start()", file="SqlServerStorageOptions.cs", label="Entry HangFire.Server.WorkerManager.Start()", span="63-63"];
m17_32 [cluster="HangFire.Server.WorkerManager.Start()", file="SqlServerStorageOptions.cs", label="_workerRunners.Start()", span="65-65"];
m17_33 [cluster="HangFire.Server.WorkerManager.Start()", file="SqlServerStorageOptions.cs", label="Exit HangFire.Server.WorkerManager.Start()", span="63-63"];
m17_30 [cluster="HangFire.Server.ServerComponentRunnerCollection.ServerComponentRunnerCollection(System.Collections.Generic.IEnumerable<HangFire.Server.IServerComponentRunner>)", file="SqlServerStorageOptions.cs", label="Entry HangFire.Server.ServerComponentRunnerCollection.ServerComponentRunnerCollection(System.Collections.Generic.IEnumerable<HangFire.Server.IServerComponentRunner>)", span="26-26"];
m17_47 [file="SqlServerStorageOptions.cs", label="HangFire.Server.WorkerManager", span=""];
m18_3 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerWriteOnlyTransaction.cs", label="_storage = storage", span="41-41"];
m18_4 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage)", span="37-37"];
m18_5 [cluster="HangFire.Redis.RedisConnection.Dispose()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.Dispose()", span="39-39"];
m18_50 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", span="99-99"];
m18_39 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: string addAndSetStateSql = @''\r\ninsert into HangFire.State (JobId, Name, Reason, CreatedAt, Data)\r\nvalues (@jobId, @name, @reason, @createdAt, @data);\r\nupdate HangFire.Job set StateId = SCOPE_IDENTITY(), StateName = @name where Id = @id;''", span="81-84"];
m18_40 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                addAndSetStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId,\r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow,\r\n                    data = JobHelper.ToJson(state.SerializeData()),\r\n                    id = jobId\r\n                }))", span="86-96"];
m18_41 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", span="79-79"];
m18_42 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="86-96"];
m18_47 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", color=red, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", span="99-99"];
m18_49 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                addStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId, \r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow, \r\n                    data = JobHelper.ToJson(state.SerializeData())\r\n                }))", span="105-114"];
m18_52 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                addStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId, \r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow, \r\n                    data = JobHelper.ToJson(state.SerializeData())\r\n                })", span="105-114"];
m18_43 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                addAndSetStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId,\r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow,\r\n                    data = JobHelper.ToJson(state.SerializeData()),\r\n                    id = jobId\r\n                })", span="86-96"];
m18_44 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="86-96"];
m18_45 [cluster="Hangfire.States.IState.SerializeData()", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.States.IState.SerializeData()", span="202-202"];
m18_46 [cluster="Hangfire.Common.JobHelper.ToJson(object)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
m18_48 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: string addStateSql = @''\r\ninsert into HangFire.State (JobId, Name, Reason, CreatedAt, Data)\r\nvalues (@jobId, @name, @reason, @createdAt, @data)''", span="101-103"];
m18_51 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="105-114"];
m18_53 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="105-114"];
m18_102 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: string query = @''delete from HangFire.[Set] where [Key] = @key and Value = @value''", span="175-175"];
m18_103 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", color=red, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: AcquireSetLock()", span="177-177"];
m18_105 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="173-173"];
m18_104 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", color=red, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: QueueCommand(x => x.Execute(\r\n                query,\r\n                new { key, value }))", span="178-180"];
m18_106 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="178-180"];
m18_108 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="178-180"];
m18_111 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.List ([Key], Value) values (@key, @value);'',\r\n                new { key, value }))", span="186-188"];
m18_107 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                query,\r\n                new { key, value })", span="178-180"];
m18_109 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="183-183"];
m18_110 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="AcquireListLock()", span="185-185"];
m18_112 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="183-183"];
m18_114 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="186-188"];
m18_193 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) })", span="273-273"];
m18_194 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="273-273"];
m18_205 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", span="287-287"];
m18_195 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="276-276"];
m18_198 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: string query = @''\r\nupdate HangFire.[Set] set ExpireAt = @expireAt where [Key] = @key''", span="280-281"];
m18_196 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="key == null", span="278-278"];
m18_200 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="284-284"];
m18_203 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) })", span="284-284"];
m18_197 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="throw new ArgumentNullException(''key'');", span="278-278"];
m18_201 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="276-276"];
m18_199 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="AcquireSetLock()", span="283-283"];
m18_202 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="284-284"];
m18_207 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="throw new ArgumentNullException(''key'');", span="289-289"];
m18_208 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: string query = @''\r\nupdate HangFire.[List] set ExpireAt = @expireAt where [Key] = @key''", span="291-292"];
m18_204 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="284-284"];
m18_206 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="key == null", span="289-289"];
m18_209 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="AcquireListLock()", span="294-294"];
m18_30 [cluster="Unk.BlockingPopAndPushItemBetweenLists", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.BlockingPopAndPushItemBetweenLists", span=""];
m18_210 [cluster="Unk.GetAllItemsFromSet", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.GetAllItemsFromSet", span=""];
m18_211 [cluster="Unk.CreatePipeline", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.CreatePipeline", span=""];
m18_101 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="173-173"];
m18_71 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="SqlServerWriteOnlyTransaction.cs", label="storedData.Count == 0", span="152-152"];
m18_72 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: return null;", span="152-152"];
m18_73 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="SqlServerWriteOnlyTransaction.cs", label="string type = null", span="154-154"];
m18_17 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerWriteOnlyTransaction.cs", label="queueIndex = (queueIndex + 1) % queues.Length", span="59-59"];
m18_55 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="var provider = _storage.QueueProviders.GetProvider(queue)", span="119-119"];
m18_92 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="SqlServerWriteOnlyTransaction.cs", label=JobLoadException, span="190-190"];
m18_93 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: loadException = ex", span="192-192"];
m18_94 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", color=red, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: return new JobData\r\n            {\r\n                Job = job,\r\n                State = storedData.ContainsKey(''State'') ? storedData[''State''] : null,\r\n                CreatedAt = JobHelper.FromNullableStringTimestamp(createdAt) ?? DateTime.MinValue,\r\n                LoadException = loadException\r\n            };", span="195-201"];
m18_95 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.GetJobData(string)", span="147-147"];
m18_96 [cluster="Unk.GetAllEntriesFromHash", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m18_185 [cluster="Unk.RemoveItemFromSet", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.RemoveItemFromSet", span=""];
m18_188 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: Exit lambda expression", span="312-314"];
m18_186 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="312-314"];
m18_189 [cluster="Unk.RemoveEntry", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.RemoveEntry", span=""];
m18_190 [cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.Heartbeat(string)", span="320-320"];
m18_187 [cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId))", span="312-314"];
m18_191 [cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", color=red, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                ''Heartbeat'',\r\n                JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="322-325"];
m18_69 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = +1 })", span="127-129"];
m18_70 [cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: Exit lambda expression", span="127-129"];
m18_78 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = -1 }))", span="141-143"];
m18_79 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="139-139"];
m18_80 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="141-143"];
m18_81 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = -1 })", span="141-143"];
m18_82 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="141-143"];
m18_83 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="146-146"];
m18_84 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = -1, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="148-150"];
m18_85 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="146-146"];
m18_86 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="148-150"];
m18_87 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = -1, expireAt = DateTime.UtcNow.Add(expireIn) })", span="148-150"];
m18_74 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="134-136"];
m18_90 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="AddToSet(key, value, 0.0)", span="155-155"];
m18_75 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = +1, expireAt = DateTime.UtcNow.Add(expireIn) })", span="134-136"];
m18_76 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="134-136"];
m18_77 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="139-139"];
m18_88 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="148-150"];
m18_89 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="153-153"];
m18_91 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="153-153"];
m18_145 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="227-229"];
m18_146 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="229-229"];
m18_148 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="229-229"];
m18_147 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="new { key = key, field = y.Key, value = y.Value }", span="229-229"];
m18_149 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", color=red, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", span="232-232"];
m18_150 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="SqlServerWriteOnlyTransaction.cs", label="key == null", span="234-234"];
m18_54 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="117-117"];
m18_123 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="194-196"];
m18_100 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="168-170"];
m18_99 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                addSql,\r\n                new { key, value, score })", span="168-170"];
m18_132 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="214-214"];
m18_215 [cluster="System.DateTime.Add(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m18_218 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: Exit lambda expression", span="342-344"];
m18_216 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="342-344"];
m18_219 [cluster="Unk.Format", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Format", span=""];
m18_220 [cluster="Unk.GetValuesFromHash", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.GetValuesFromHash", span=""];
m18_217 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat'')", span="342-344"];
m18_221 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="345-349"];
m18_38 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", span="79-79"];
m18_97 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireSetLock()", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireSetLock()", span="341-341"];
m18_113 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireListLock()", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireListLock()", span="336-336"];
m18_35 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="74-76"];
m18_36 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: x.Execute(\r\n                @''update HangFire.Job set ExpireAt = NULL where Id = @id'',\r\n                new { id = jobId })", span="74-76"];
m18_37 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="74-76"];
m18_226 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="SqlServerWriteOnlyTransaction.cs", label="key == null", span="311-311"];
m18_131 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="209-211"];
m18_235 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_238 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: string query = @''\r\nupdate HangFire.[List] set ExpireAt = null where [Key] = @key''", span="324-325"];
m18_236 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="SqlServerWriteOnlyTransaction.cs", label=name, span=""];
m18_239 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="SqlServerWriteOnlyTransaction.cs", label="AcquireListLock()", span="327-327"];
m18_240 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(query, new { key = key }))", span="328-328"];
m18_237 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="SqlServerWriteOnlyTransaction.cs", label=heartbeats, span=""];
m18_241 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", span="320-320"];
m18_65 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="136-138"];
m18_66 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn)", span="136-138"];
m18_67 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="136-138"];
m18_225 [cluster="Unk.FromStringTimestamp", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.FromStringTimestamp", span=""];
m18_228 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: HangFire.Redis.RedisConnection", span=""];
m18_229 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="SqlServerWriteOnlyTransaction.cs", label=jobId, span=""];
m18_230 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="SqlServerWriteOnlyTransaction.cs", label=storedParameters, span=""];
m18_227 [cluster="Unk.Add", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Add", span=""];
m18_231 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="SqlServerWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m18_60 [cluster="Unk.Commit", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Commit", span=""];
m18_251 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireLock(string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireLock(string)", span="351-351"];
m18_256 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireLock(string)", file="SqlServerWriteOnlyTransaction.cs", label="_lockedResources.Add(resource)", span="353-353"];
m18_257 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireLock(string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireLock(string)", span="351-351"];
m18_192 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="273-273"];
m18_120 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="191-191"];
m18_121 [cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: Entry lambda expression", span="194-196"];
m18_122 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: x.Execute(\r\n                @''delete from HangFire.List where [Key] = @key and Value = @value'',\r\n                new { key, value })", span="194-196"];
m18_68 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="127-129"];
m18_9 [cluster="HangFire.Redis.RedisConnection.CreateWriteTransaction()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.CreateWriteTransaction()", span="44-44"];
m18_137 [cluster="Unk.FirstOrDefault", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: Entry Unk.FirstOrDefault", span=""];
m18_135 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="248-248"];
m18_138 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="255-255"];
m18_139 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerWriteOnlyTransaction.cs", label="key == null", span="257-257"];
m18_133 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="248-248"];
m18_136 [cluster="Unk.GetRangeFromSortedSetByLowestScore", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.GetRangeFromSortedSetByLowestScore", span=""];
m18_134 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerWriteOnlyTransaction.cs", label="return Redis.GetRangeFromSortedSetByLowestScore(\r\n                RedisStorage.Prefix + key, fromScore, toScore, 0, 1)\r\n                .FirstOrDefault();", span="250-252"];
m18_140 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerWriteOnlyTransaction.cs", label="throw new ArgumentNullException(''key'');", span="257-257"];
m18_10 [cluster="RedisWriteOnlyTransaction.cstr", file="SqlServerWriteOnlyTransaction.cs", label="Entry RedisWriteOnlyTransaction.cstr", span=""];
m18_32 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
m18_33 [cluster="Unk.SetEntryInHash", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: Entry Unk.SetEntryInHash", span=""];
m18_34 [cluster="HangFire.Redis.RedisFetchedJob.RedisFetchedJob(IRedisClient, string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisFetchedJob.RedisFetchedJob(IRedisClient, string, string)", span="30-30"];
m18_6 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="44-44"];
m18_173 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="new { key = key, value = value }", span="252-252"];
m18_174 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="252-252"];
m18_175 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", span="255-255"];
m18_61 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="132-134"];
m18_62 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="persistentQueue.Enqueue(x, queue, jobId)", span="122-122"];
m18_63 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="122-122"];
m18_161 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="SqlServerWriteOnlyTransaction.cs", label="throw new ArgumentNullException(''key'');", span="244-244"];
m18_165 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", color=red, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: AcquireSetLock()", span="251-251"];
m18_170 [cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: Exit lambda expression", span="252-252"];
m18_160 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="SqlServerWriteOnlyTransaction.cs", label="key == null", span="244-244"];
m18_164 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: string query = @''\r\ninsert into HangFire.[Set] ([Key], Value, Score)\r\nvalues (@key, @value, 0.0)''", span="247-249"];
m18_169 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(query, items.Select(value => new { key = key, value = value }).ToList())", span="252-252"];
m18_162 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="SqlServerWriteOnlyTransaction.cs", label="items == null", span="245-245"];
m18_166 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(query, items.Select(value => new { key = key, value = value }).ToList()))", span="252-252"];
m18_171 [cluster="Unk.ToList", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.ToList", span=""];
m18_183 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(query, new { key = key })", span="262-262"];
m18_182 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="262-262"];
m18_184 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="262-262"];
m18_222 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="306-306"];
m18_223 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(query, new { key = key })", span="306-306"];
m18_29 [cluster="string.Format(string, object)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: Entry string.Format(string, object)", span="0-0"];
m18_115 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: Entry System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", span="0-0"];
m18_116 [cluster="HangFire.Storage.StateData.StateData()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Storage.StateData.StateData()", span="21-21"];
m18_130 [cluster="HangFire.Redis.RedisStorage.GetRedisKey(string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisStorage.GetRedisKey(string)", span="107-107"];
m18_144 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="255-255"];
m18_157 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", color=red, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: transaction.QueueCommand(x => x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1))", span="290-292"];
m18_213 [cluster="System.DateTime.DateTime(long)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.DateTime.DateTime(long)", span="0-0"];
m18_233 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="HangFire.Server.ServerContext", span=""];
m18_243 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(query, new { key = key })", span="328-328"];
m18_12 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="49-49"];
m18_13 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerWriteOnlyTransaction.cs", label="string jobId", span="51-51"];
m18_14 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerWriteOnlyTransaction.cs", label="string queueName", span="52-52"];
m18_98 [cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", span="24-24"];
m18_129 [cluster="HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", span="240-240"];
m18_143 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerWriteOnlyTransaction.cs", label="Redis.SetRangeInHash(RedisStorage.GetRedisKey(key), keyValuePairs)", span="260-260"];
m18_156 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerWriteOnlyTransaction.cs", label="var queue1 = queue", span="289-289"];
m18_158 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerWriteOnlyTransaction.cs", label="transaction.Commit()", span="295-295"];
m18_168 [cluster="int.ToString(System.IFormatProvider)", file="SqlServerWriteOnlyTransaction.cs", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
m18_172 [cluster="Unk.AddItemToList", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.AddItemToList", span=""];
m18_212 [cluster="Unk.Flush", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Flush", span=""];
m18_214 [cluster="System.Math.Max(long, long)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Math.Max(long, long)", span="0-0"];
m18_224 [cluster="System.Tuple<T1, T2>.Tuple(T1, T2)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Tuple<T1, T2>.Tuple(T1, T2)", span="0-0"];
m18_232 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_234 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label=queue1, span=""];
m18_242 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="328-328"];
m18_244 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="328-328"];
m18_11 [cluster="Unk.CreateTransaction", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.CreateTransaction", span=""];
m18_15 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerWriteOnlyTransaction.cs", label="var queueIndex = 0", span="53-53"];
m18_159 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="272-272"];
m18_163 [cluster="Unk.AddItemToSet", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.AddItemToSet", span=""];
m18_167 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m18_258 [cluster="System.Collections.Generic.SortedSet<T>.Add(T)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Collections.Generic.SortedSet<T>.Add(T)", span="0-0"];
m18_142 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerWriteOnlyTransaction.cs", label="throw new ArgumentNullException(''keyValuePairs'');", span="258-258"];
m18_59 [cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53"];
m18_117 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", span="225-225"];
m18_119 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: Exit HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", span="225-225"];
m18_118 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                name,\r\n                value)", span="227-230"];
m18_64 [cluster="Unk.Enqueue", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Enqueue", span=""];
m18_7 [cluster="HangFire.Redis.RedisConnection.CreateWriteTransaction()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.CreateWriteTransaction()", span="44-44"];
m18_8 [cluster="HangFire.Redis.RedisConnection.CreateWriteTransaction()", file="SqlServerWriteOnlyTransaction.cs", label="return new RedisWriteOnlyTransaction(Redis.CreateTransaction());", span="46-46"];
m18_247 [cluster="System.Collections.Generic.Queue<T>.Enqueue(T)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Collections.Generic.Queue<T>.Enqueue(T)", span="0-0"];
m18_179 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", color=red, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: AcquireSetLock()", span="261-261"];
m18_176 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="SqlServerWriteOnlyTransaction.cs", label="key == null", span="257-257"];
m18_177 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="SqlServerWriteOnlyTransaction.cs", label="throw new ArgumentNullException(''key'');", span="257-257"];
m18_178 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: string query = @''delete from HangFire.[Set] where [Key] = @key''", span="259-259"];
m18_180 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(query, new { key = key }))", span="262-262"];
m18_181 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", span="255-255"];
m18_20 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerWriteOnlyTransaction.cs", label="var fetchedKey = RedisStorage.Prefix + String.Format(''queue:{0}:dequeued'', queueName)", span="63-63"];
m18_141 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireHashLock()", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireHashLock()", span="346-346"];
m18_152 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: var transaction = Redis.CreateTransaction()", span="274-274"];
m18_153 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerWriteOnlyTransaction.cs", label="transaction.QueueCommand(x => x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId))", span="276-277"];
m18_154 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", color=red, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', context.WorkerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        }))", span="279-285"];
m18_151 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="272-272"];
m18_155 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerWriteOnlyTransaction.cs", label="context.Queues", span="287-287"];
m18_57 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => persistentQueue.Enqueue(x, queue, jobId))", span="122-122"];
m18_0 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage)", span="37-37"];
m18_1 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerWriteOnlyTransaction.cs", label="storage == null", span="39-39"];
m18_2 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerWriteOnlyTransaction.cs", label="throw new ArgumentNullException(''storage'');", span="39-39"];
m18_124 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="199-199"];
m18_125 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: string trimSql = @''\r\n;with cte as (\r\n    select row_number() over (order by Id desc) as row_num, [Key] \r\n    from HangFire.List\r\n    where [Key] = @key)\r\ndelete from cte where row_num not between @start and @end''", span="201-206"];
m18_127 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                trimSql,\r\n                new { key = key, start = keepStartingFrom + 1, end = keepEndingAt + 1 }))", span="209-211"];
m18_126 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransaction.cs", label="AcquireListLock()", span="208-208"];
m18_128 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="199-199"];
m18_31 [cluster="System.DateTime.Add(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m18_56 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="var persistentQueue = provider.GetJobQueue()", span="120-120"];
m18_252 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireSetLock()", file="SqlServerWriteOnlyTransaction.cs", label="AcquireLock(String.Format(''Hangfire:Set:Lock''))", span="343-343"];
m18_253 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireSetLock()", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireSetLock()", span="341-341"];
m18_25 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: QueueCommand(x => x.Execute(\r\n                @''update HangFire.Job set ExpireAt = @expireAt where Id = @id'',\r\n                new { expireAt = DateTime.UtcNow.Add(expireIn), id = jobId }))", span="67-69"];
m18_16 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerWriteOnlyTransaction.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="57-57"];
m18_18 [cluster="Unk.Select", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Select", span=""];
m18_21 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerWriteOnlyTransaction.cs", label="queueIndex == 0", span="65-65"];
m18_19 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerWriteOnlyTransaction.cs", label="var queueKey = RedisStorage.Prefix + String.Format(''queue:{0}'', queueName)", span="62-62"];
m18_26 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="65-65"];
m18_22 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", color=red, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: jobId = Redis.BlockingPopAndPushItemBetweenLists(\r\n                        queueKey,\r\n                        fetchedKey,\r\n                        FetchTimeout)", span="67-70"];
m18_23 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", color=red, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: jobId = Redis.PopAndPushItemBetweenLists(\r\n                        queueKey, fetchedKey)", span="74-75"];
m18_24 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="65-65"];
m18_27 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", span="331-331"];
m18_58 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="117-117"];
m18_250 [cluster="string.Format(string, params object[])", file="SqlServerWriteOnlyTransaction.cs", label="Entry string.Format(string, params object[])", span="0-0"];
m18_254 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireHashLock()", file="SqlServerWriteOnlyTransaction.cs", label="AcquireLock(String.Format(''Hangfire:Hash:Lock''))", span="348-348"];
m18_255 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireHashLock()", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireHashLock()", span="346-346"];
m18_245 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransaction.cs", label="_commandQueue.Enqueue(action)", span="333-333"];
m18_246 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", span="331-331"];
m18_28 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m18_248 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireListLock()", file="SqlServerWriteOnlyTransaction.cs", label="AcquireLock(String.Format(''Hangfire:List:Lock''))", span="338-338"];
m18_249 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireListLock()", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireListLock()", span="336-336"];
m18_259 [file="SqlServerWriteOnlyTransaction.cs", label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", span=""];
m18_272 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_273 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_274 [file="SqlServerWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m18_275 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_276 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_277 [file="SqlServerWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m18_285 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_286 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_287 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_288 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_263 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_264 [file="SqlServerWriteOnlyTransaction.cs", label="Hangfire.States.IState", span=""];
m18_265 [file="SqlServerWriteOnlyTransaction.cs", label=addAndSetStateSql, span=""];
m18_266 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_267 [file="SqlServerWriteOnlyTransaction.cs", label="Hangfire.States.IState", span=""];
m18_268 [file="SqlServerWriteOnlyTransaction.cs", label=addStateSql, span=""];
m18_278 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_279 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_280 [file="SqlServerWriteOnlyTransaction.cs", label=double, span=""];
m18_281 [file="SqlServerWriteOnlyTransaction.cs", label=addSql, span=""];
m18_282 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_283 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_284 [file="SqlServerWriteOnlyTransaction.cs", label=query, span=""];
m18_289 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_290 [file="SqlServerWriteOnlyTransaction.cs", label=int, span=""];
m18_291 [file="SqlServerWriteOnlyTransaction.cs", label=int, span=""];
m18_292 [file="SqlServerWriteOnlyTransaction.cs", label=trimSql, span=""];
m18_293 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_294 [file="SqlServerWriteOnlyTransaction.cs", label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", span=""];
m18_295 [file="SqlServerWriteOnlyTransaction.cs", label=sql, span=""];
m18_296 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_297 [file="SqlServerWriteOnlyTransaction.cs", label=query, span=""];
m18_298 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_299 [file="SqlServerWriteOnlyTransaction.cs", label="System.Collections.Generic.IList<string>", span=""];
m18_300 [file="SqlServerWriteOnlyTransaction.cs", label=query, span=""];
m18_301 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_302 [file="SqlServerWriteOnlyTransaction.cs", label=query, span=""];
m18_303 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_304 [file="SqlServerWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m18_305 [file="SqlServerWriteOnlyTransaction.cs", label=query, span=""];
m18_306 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_307 [file="SqlServerWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m18_308 [file="SqlServerWriteOnlyTransaction.cs", label=query, span=""];
m18_309 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_310 [file="SqlServerWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m18_311 [file="SqlServerWriteOnlyTransaction.cs", label=query, span=""];
m18_312 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_313 [file="SqlServerWriteOnlyTransaction.cs", label=query, span=""];
m18_314 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_315 [file="SqlServerWriteOnlyTransaction.cs", label=query, span=""];
m18_316 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_317 [file="SqlServerWriteOnlyTransaction.cs", label=query, span=""];
m18_269 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_270 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m18_271 [file="SqlServerWriteOnlyTransaction.cs", label=persistentQueue, span=""];
m19_9 [cluster="HangFire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="Worker.cs", label="Entry HangFire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", span="51-51"];
m19_10 [cluster="HangFire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="Worker.cs", label="var connection = _storage.CreateAndOpenConnection()", span="53-53"];
m19_14 [cluster="HangFire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="Worker.cs", label="cancellationToken.WaitHandle.WaitOne(_checkInterval)", span="67-67"];
m19_11 [cluster="HangFire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="Worker.cs", label=ProcessedTables, span="55-55"];
m19_13 [cluster="HangFire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="Worker.cs", label="connection.Execute(\r\n                        String.Format(@''\r\nset transaction isolation level read committed;\r\ndelete from HangFire.[{0}] with (tablock) where ExpireAt < @now;'', table),\r\n                        new { now = DateTime.UtcNow })", span="59-63"];
m19_12 [cluster="HangFire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="Worker.cs", label="Logger.DebugFormat(''Removing outdated records from table '{0}'...'', table)", span="57-57"];
m19_15 [cluster="HangFire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="Worker.cs", label="Exit HangFire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", span="51-51"];
m19_8 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="Worker.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m19_2 [cluster="HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage, System.TimeSpan)", file="Worker.cs", label="Entry HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage, System.TimeSpan)", span="43-43"];
m19_3 [cluster="HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage, System.TimeSpan)", file="Worker.cs", label="storage == null", span="45-45"];
m19_5 [cluster="HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage, System.TimeSpan)", file="Worker.cs", label="_storage = storage", span="47-47"];
m19_6 [cluster="HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage, System.TimeSpan)", file="Worker.cs", label="_checkInterval = checkInterval", span="48-48"];
m19_4 [cluster="HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage, System.TimeSpan)", file="Worker.cs", label="throw new ArgumentNullException(''storage'');", span="45-45"];
m19_7 [cluster="HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage, System.TimeSpan)", file="Worker.cs", label="Exit HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage, System.TimeSpan)", span="43-43"];
m19_0 [cluster="HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", file="Worker.cs", label="Entry HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", span="38-38"];
m19_1 [cluster="HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", file="Worker.cs", label="Exit HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", span="38-38"];
m19_20 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="Worker.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m19_21 [cluster="HangFire.SqlServer.ExpirationManager.ToString()", file="Worker.cs", label="Entry HangFire.SqlServer.ExpirationManager.ToString()", span="70-70"];
m19_22 [cluster="HangFire.SqlServer.ExpirationManager.ToString()", file="Worker.cs", label="return ''SQL Records Expiration Manager'';", span="72-72"];
m19_23 [cluster="HangFire.SqlServer.ExpirationManager.ToString()", file="Worker.cs", label="Exit HangFire.SqlServer.ExpirationManager.ToString()", span="70-70"];
m19_16 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="Worker.cs", label="Entry HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="62-62"];
m19_17 [cluster="Unk.DebugFormat", file="Worker.cs", label="Entry Unk.DebugFormat", span=""];
m19_18 [cluster="string.Format(string, object)", file="Worker.cs", label="Entry string.Format(string, object)", span="0-0"];
m19_24 [file="Worker.cs", label="HangFire.SqlServer.ExpirationManager", span=""];
n219 -> n32  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n37  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n46  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n51  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n55  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n60  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n64  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n71  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n77  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n85  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n89  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n98  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n102  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n107  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n111  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n118  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n122  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n132  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n136  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n147  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n151  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n162  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n166  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n170  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n174  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n179  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n183  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n189  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n193  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n205  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n209  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n217  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n0 -> n1  [key=0, style=solid];
n0 -> n16  [color=darkorchid, key=3, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext", style=bold];
n1 -> n2  [color=red, key=0, style=solid];
n1 -> n5  [key=2, style=dotted];
n2 -> n3  [color=red, key=0, style=solid];
n2 -> n6  [color=red, key=2, style=dotted];
n2 -> n7  [color=red, key=2, style=dotted];
n3 -> n4  [key=0, style=solid];
n3 -> n8  [key=2, style=dotted];
n4 -> n0  [color=blue, key=0, style=bold];
n9 -> n10  [key=0, style=solid];
n10 -> n11  [key=0, style=solid];
n10 -> n13  [key=2, style=dotted];
n11 -> n12  [key=0, style=solid];
n12 -> n9  [color=blue, key=0, style=bold];
n14 -> n15  [key=0, style=solid];
n15 -> n16  [key=0, style=solid];
n15 -> n17  [key=0, style=solid];
n16 -> n17  [key=0, style=solid];
n16 -> n0  [key=2, style=dotted];
n17 -> n14  [color=blue, key=0, style=bold];
n18 -> n19  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n21  [key=2, style=dotted];
n20 -> n18  [color=blue, key=0, style=bold];
n22 -> n23  [key=0, style=solid];
n22 -> n31  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
n22 -> n45  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
n22 -> n54  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
n22 -> n63  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
n22 -> n76  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
n22 -> n88  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
n22 -> n101  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
n22 -> n110  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
n22 -> n121  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
n22 -> n135  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
n22 -> n150  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
n22 -> n165  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
n22 -> n173  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
n22 -> n182  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
n22 -> n192  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
n22 -> n208  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
n23 -> n24  [key=0, style=solid];
n23 -> n25  [key=2, style=dotted];
n24 -> n22  [color=blue, key=0, style=bold];
n26 -> n27  [key=0, style=solid];
n27 -> n28  [key=0, style=solid];
n27 -> n29  [key=2, style=dotted];
n28 -> n26  [color=blue, key=0, style=bold];
n30 -> n31  [key=0, style=solid];
n31 -> n32  [key=0, style=solid];
n31 -> n39  [key=2, style=dotted];
n32 -> n33  [key=0, style=solid];
n32 -> n22  [key=2, style=dotted];
n33 -> n34  [key=0, style=solid];
n33 -> n40  [key=2, style=dotted];
n34 -> n35  [key=0, style=solid];
n34 -> n41  [key=2, style=dotted];
n35 -> n36  [key=0, style=solid];
n35 -> n42  [key=2, style=dotted];
n36 -> n37  [key=0, style=solid];
n36 -> n43  [key=2, style=dotted];
n37 -> n38  [key=0, style=solid];
n37 -> n26  [key=2, style=dotted];
n38 -> n30  [color=blue, key=0, style=bold];
n44 -> n45  [key=0, style=solid];
n45 -> n46  [key=0, style=solid];
n45 -> n39  [key=2, style=dotted];
n46 -> n47  [key=0, style=solid];
n46 -> n22  [key=2, style=dotted];
n47 -> n48  [key=0, style=solid];
n47 -> n40  [key=2, style=dotted];
n48 -> n49  [key=0, style=solid];
n48 -> n41  [key=2, style=dotted];
n49 -> n50  [key=0, style=solid];
n49 -> n42  [key=2, style=dotted];
n50 -> n51  [key=0, style=solid];
n50 -> n43  [key=2, style=dotted];
n51 -> n52  [key=0, style=solid];
n51 -> n26  [key=2, style=dotted];
n52 -> n44  [color=blue, key=0, style=bold];
n53 -> n54  [key=0, style=solid];
n54 -> n55  [key=0, style=solid];
n54 -> n39  [key=2, style=dotted];
n55 -> n56  [key=0, style=solid];
n55 -> n22  [key=2, style=dotted];
n56 -> n57  [key=0, style=solid];
n56 -> n40  [key=2, style=dotted];
n57 -> n58  [key=0, style=solid];
n57 -> n41  [key=2, style=dotted];
n58 -> n59  [key=0, style=solid];
n58 -> n42  [key=2, style=dotted];
n59 -> n60  [key=0, style=solid];
n59 -> n43  [key=2, style=dotted];
n60 -> n61  [key=0, style=solid];
n60 -> n26  [key=2, style=dotted];
n61 -> n53  [color=blue, key=0, style=bold];
n62 -> n63  [key=0, style=solid];
n63 -> n64  [key=0, style=solid];
n63 -> n39  [key=2, style=dotted];
n64 -> n65  [key=0, style=solid];
n64 -> n22  [key=2, style=dotted];
n65 -> n66  [key=0, style=solid];
n65 -> n40  [key=2, style=dotted];
n66 -> n67  [key=0, style=solid];
n66 -> n41  [key=2, style=dotted];
n67 -> n68  [key=0, style=solid];
n67 -> n42  [key=2, style=dotted];
n68 -> n69  [key=0, style=solid];
n68 -> n73  [key=2, style=dotted];
n68 -> n70  [color=darkseagreen4, key=1, label=table1, style=dashed];
n69 -> n70  [key=0, style=solid];
n69 -> n74  [key=2, style=dotted];
n70 -> n71  [key=0, style=solid];
n70 -> n43  [key=2, style=dotted];
n71 -> n72  [key=0, style=solid];
n71 -> n26  [key=2, style=dotted];
n72 -> n62  [color=blue, key=0, style=bold];
n75 -> n76  [key=0, style=solid];
n76 -> n77  [key=0, style=solid];
n76 -> n39  [key=2, style=dotted];
n77 -> n78  [key=0, style=solid];
n77 -> n22  [key=2, style=dotted];
n78 -> n79  [key=0, style=solid];
n78 -> n40  [key=2, style=dotted];
n79 -> n80  [key=0, style=solid];
n79 -> n41  [key=2, style=dotted];
n80 -> n81  [key=0, style=solid];
n80 -> n42  [key=2, style=dotted];
n81 -> n82  [key=0, style=solid];
n81 -> n73  [key=2, style=dotted];
n81 -> n83  [color=darkseagreen4, key=1, label=table2, style=dashed];
n81 -> n84  [color=darkseagreen4, key=1, label=table2, style=dashed];
n82 -> n83  [key=0, style=solid];
n82 -> n74  [key=2, style=dotted];
n83 -> n84  [key=0, style=solid];
n83 -> n74  [key=2, style=dotted];
n84 -> n85  [key=0, style=solid];
n84 -> n43  [key=2, style=dotted];
n85 -> n86  [key=0, style=solid];
n85 -> n26  [key=2, style=dotted];
n86 -> n75  [color=blue, key=0, style=bold];
n87 -> n88  [key=0, style=solid];
n88 -> n89  [key=0, style=solid];
n88 -> n39  [key=2, style=dotted];
n89 -> n90  [key=0, style=solid];
n89 -> n22  [key=2, style=dotted];
n90 -> n91  [key=0, style=solid];
n90 -> n73  [key=2, style=dotted];
n90 -> n92  [color=darkseagreen4, key=1, label=table3, style=dashed];
n90 -> n93  [color=darkseagreen4, key=1, label=table3, style=dashed];
n91 -> n92  [key=0, style=solid];
n91 -> n74  [key=2, style=dotted];
n92 -> n93  [key=0, style=solid];
n92 -> n74  [key=2, style=dotted];
n93 -> n94  [key=0, style=solid];
n93 -> n40  [key=2, style=dotted];
n94 -> n95  [key=0, style=solid];
n94 -> n41  [key=2, style=dotted];
n95 -> n96  [key=0, style=solid];
n95 -> n42  [key=2, style=dotted];
n96 -> n97  [key=0, style=solid];
n96 -> n43  [key=2, style=dotted];
n97 -> n98  [key=0, style=solid];
n97 -> n41  [key=2, style=dotted];
n98 -> n99  [key=0, style=solid];
n98 -> n26  [key=2, style=dotted];
n99 -> n87  [color=blue, key=0, style=bold];
n100 -> n101  [key=0, style=solid];
n101 -> n102  [key=0, style=solid];
n101 -> n39  [key=2, style=dotted];
n102 -> n103  [key=0, style=solid];
n102 -> n22  [key=2, style=dotted];
n103 -> n104  [key=0, style=solid];
n103 -> n40  [key=2, style=dotted];
n104 -> n105  [key=0, style=solid];
n104 -> n41  [key=2, style=dotted];
n105 -> n106  [key=0, style=solid];
n105 -> n42  [key=2, style=dotted];
n106 -> n107  [key=0, style=solid];
n106 -> n43  [key=2, style=dotted];
n107 -> n108  [key=0, style=solid];
n107 -> n26  [key=2, style=dotted];
n108 -> n100  [color=blue, key=0, style=bold];
n109 -> n110  [key=0, style=solid];
n110 -> n111  [key=0, style=solid];
n110 -> n39  [key=2, style=dotted];
n111 -> n112  [key=0, style=solid];
n111 -> n22  [key=2, style=dotted];
n112 -> n113  [key=0, style=solid];
n112 -> n40  [key=2, style=dotted];
n113 -> n114  [key=0, style=solid];
n113 -> n41  [key=2, style=dotted];
n114 -> n115  [key=0, style=solid];
n114 -> n42  [key=2, style=dotted];
n115 -> n116  [key=0, style=solid];
n115 -> n43  [key=2, style=dotted];
n116 -> n117  [key=0, style=solid];
n116 -> n41  [key=2, style=dotted];
n117 -> n118  [key=0, style=solid];
n117 -> n41  [key=2, style=dotted];
n118 -> n119  [key=0, style=solid];
n118 -> n26  [key=2, style=dotted];
n119 -> n109  [color=blue, key=0, style=bold];
n120 -> n121  [key=0, style=solid];
n121 -> n122  [key=0, style=solid];
n121 -> n39  [key=2, style=dotted];
n122 -> n123  [key=0, style=solid];
n122 -> n22  [key=2, style=dotted];
n123 -> n124  [key=0, style=solid];
n123 -> n40  [key=2, style=dotted];
n124 -> n125  [key=0, style=solid];
n124 -> n41  [key=2, style=dotted];
n125 -> n126  [key=0, style=solid];
n125 -> n41  [key=2, style=dotted];
n126 -> n127  [key=0, style=solid];
n126 -> n41  [key=2, style=dotted];
n127 -> n128  [key=0, style=solid];
n127 -> n42  [key=2, style=dotted];
n128 -> n129  [key=0, style=solid];
n128 -> n73  [key=2, style=dotted];
n128 -> n130  [color=darkseagreen4, key=1, label=table4, style=dashed];
n128 -> n131  [color=darkseagreen4, key=1, label=table4, style=dashed];
n129 -> n130  [key=0, style=solid];
n129 -> n74  [key=2, style=dotted];
n130 -> n131  [key=0, style=solid];
n130 -> n74  [key=2, style=dotted];
n131 -> n132  [key=0, style=solid];
n131 -> n43  [key=2, style=dotted];
n132 -> n133  [key=0, style=solid];
n132 -> n26  [key=2, style=dotted];
n133 -> n120  [color=blue, key=0, style=bold];
n134 -> n135  [key=0, style=solid];
n135 -> n136  [key=0, style=solid];
n135 -> n39  [key=2, style=dotted];
n136 -> n137  [key=0, style=solid];
n136 -> n22  [key=2, style=dotted];
n137 -> n138  [key=0, style=solid];
n137 -> n40  [key=2, style=dotted];
n138 -> n139  [key=0, style=solid];
n138 -> n41  [key=2, style=dotted];
n139 -> n140  [key=0, style=solid];
n139 -> n41  [key=2, style=dotted];
n140 -> n141  [key=0, style=solid];
n140 -> n42  [key=2, style=dotted];
n141 -> n142  [key=0, style=solid];
n141 -> n43  [key=2, style=dotted];
n142 -> n143  [key=0, style=solid];
n142 -> n41  [key=2, style=dotted];
n143 -> n144  [key=0, style=solid];
n143 -> n41  [key=2, style=dotted];
n144 -> n145  [key=0, style=solid];
n144 -> n73  [key=2, style=dotted];
n144 -> n146  [color=darkseagreen4, key=1, label=table5, style=dashed];
n145 -> n146  [key=0, style=solid];
n145 -> n74  [key=2, style=dotted];
n146 -> n147  [key=0, style=solid];
n146 -> n41  [key=2, style=dotted];
n147 -> n148  [key=0, style=solid];
n147 -> n26  [key=2, style=dotted];
n148 -> n134  [color=blue, key=0, style=bold];
n149 -> n150  [key=0, style=solid];
n150 -> n151  [key=0, style=solid];
n150 -> n39  [key=2, style=dotted];
n151 -> n152  [key=0, style=solid];
n151 -> n22  [key=2, style=dotted];
n152 -> n153  [key=0, style=solid];
n152 -> n40  [key=2, style=dotted];
n153 -> n154  [key=0, style=solid];
n153 -> n41  [key=2, style=dotted];
n154 -> n155  [key=0, style=solid];
n154 -> n41  [key=2, style=dotted];
n155 -> n156  [key=0, style=solid];
n155 -> n41  [key=2, style=dotted];
n156 -> n157  [key=0, style=solid];
n156 -> n42  [key=2, style=dotted];
n157 -> n158  [key=0, style=solid];
n157 -> n73  [key=2, style=dotted];
n157 -> n159  [color=darkseagreen4, key=1, label=table6, style=dashed];
n157 -> n160  [color=darkseagreen4, key=1, label=table6, style=dashed];
n157 -> n161  [color=darkseagreen4, key=1, label=table6, style=dashed];
n158 -> n159  [key=0, style=solid];
n158 -> n74  [key=2, style=dotted];
n159 -> n160  [key=0, style=solid];
n159 -> n74  [key=2, style=dotted];
n160 -> n161  [key=0, style=solid];
n160 -> n74  [key=2, style=dotted];
n161 -> n162  [key=0, style=solid];
n161 -> n43  [key=2, style=dotted];
n162 -> n163  [key=0, style=solid];
n162 -> n26  [key=2, style=dotted];
n163 -> n149  [color=blue, key=0, style=bold];
n164 -> n165  [key=0, style=solid];
n165 -> n166  [key=0, style=solid];
n165 -> n39  [key=2, style=dotted];
n166 -> n167  [key=0, style=solid];
n166 -> n22  [key=2, style=dotted];
n167 -> n168  [key=0, style=solid];
n167 -> n40  [key=2, style=dotted];
n168 -> n169  [key=0, style=solid];
n168 -> n42  [key=2, style=dotted];
n169 -> n170  [key=0, style=solid];
n169 -> n43  [key=2, style=dotted];
n170 -> n171  [key=0, style=solid];
n170 -> n26  [key=2, style=dotted];
n171 -> n164  [color=blue, key=0, style=bold];
n172 -> n173  [key=0, style=solid];
n173 -> n174  [key=0, style=solid];
n173 -> n39  [key=2, style=dotted];
n174 -> n175  [key=0, style=solid];
n174 -> n22  [key=2, style=dotted];
n175 -> n176  [key=0, style=solid];
n175 -> n40  [key=2, style=dotted];
n176 -> n177  [key=0, style=solid];
n176 -> n41  [key=2, style=dotted];
n177 -> n178  [key=0, style=solid];
n177 -> n42  [key=2, style=dotted];
n178 -> n179  [key=0, style=solid];
n178 -> n43  [key=2, style=dotted];
n179 -> n180  [key=0, style=solid];
n179 -> n26  [key=2, style=dotted];
n180 -> n172  [color=blue, key=0, style=bold];
n181 -> n182  [key=0, style=solid];
n182 -> n183  [key=0, style=solid];
n182 -> n39  [key=2, style=dotted];
n183 -> n184  [key=0, style=solid];
n183 -> n22  [key=2, style=dotted];
n184 -> n185  [key=0, style=solid];
n184 -> n40  [key=2, style=dotted];
n185 -> n186  [key=0, style=solid];
n185 -> n41  [key=2, style=dotted];
n186 -> n187  [key=0, style=solid];
n186 -> n41  [key=2, style=dotted];
n187 -> n188  [key=0, style=solid];
n187 -> n42  [key=2, style=dotted];
n188 -> n189  [key=0, style=solid];
n188 -> n43  [key=2, style=dotted];
n189 -> n190  [key=0, style=solid];
n189 -> n26  [key=2, style=dotted];
n190 -> n181  [color=blue, key=0, style=bold];
n191 -> n192  [key=0, style=solid];
n192 -> n193  [key=0, style=solid];
n192 -> n39  [key=2, style=dotted];
n193 -> n194  [key=0, style=solid];
n193 -> n22  [key=2, style=dotted];
n194 -> n195  [key=0, style=solid];
n194 -> n40  [key=2, style=dotted];
n195 -> n196  [key=0, style=solid];
n195 -> n41  [key=2, style=dotted];
n196 -> n197  [key=0, style=solid];
n196 -> n41  [key=2, style=dotted];
n197 -> n198  [key=0, style=solid];
n197 -> n41  [key=2, style=dotted];
n198 -> n199  [key=0, style=solid];
n198 -> n42  [key=2, style=dotted];
n199 -> n200  [key=0, style=solid];
n199 -> n73  [key=2, style=dotted];
n199 -> n201  [color=darkseagreen4, key=1, label=table7, style=dashed];
n199 -> n202  [color=darkseagreen4, key=1, label=table7, style=dashed];
n199 -> n203  [color=darkseagreen4, key=1, label=table7, style=dashed];
n199 -> n204  [color=darkseagreen4, key=1, label=table7, style=dashed];
n200 -> n201  [key=0, style=solid];
n200 -> n74  [key=2, style=dotted];
n201 -> n202  [key=0, style=solid];
n201 -> n74  [key=2, style=dotted];
n202 -> n203  [key=0, style=solid];
n202 -> n74  [key=2, style=dotted];
n203 -> n204  [key=0, style=solid];
n203 -> n74  [key=2, style=dotted];
n204 -> n205  [key=0, style=solid];
n204 -> n43  [key=2, style=dotted];
n205 -> n206  [key=0, style=solid];
n205 -> n26  [key=2, style=dotted];
n206 -> n191  [color=blue, key=0, style=bold];
n207 -> n208  [key=0, style=solid];
n208 -> n209  [key=0, style=solid];
n208 -> n39  [key=2, style=dotted];
n209 -> n210  [key=0, style=solid];
n209 -> n22  [key=2, style=dotted];
n210 -> n211  [key=0, style=solid];
n210 -> n40  [key=2, style=dotted];
n211 -> n212  [key=0, style=solid];
n211 -> n41  [key=2, style=dotted];
n212 -> n213  [key=0, style=solid];
n212 -> n41  [key=2, style=dotted];
n213 -> n214  [key=0, style=solid];
n213 -> n42  [key=2, style=dotted];
n214 -> n215  [key=0, style=solid];
n214 -> n73  [key=2, style=dotted];
n214 -> n216  [color=darkseagreen4, key=1, label=table8, style=dashed];
n215 -> n216  [key=0, style=solid];
n215 -> n74  [key=2, style=dotted];
n216 -> n217  [key=0, style=solid];
n216 -> n43  [key=2, style=dotted];
n217 -> n218  [key=0, style=solid];
n217 -> n26  [key=2, style=dotted];
n218 -> n207  [color=blue, key=0, style=bold];
d1 -> d2  [color=green, key=0, style=solid];
d1 -> d3  [color=green, key=2, style=dotted];
d1 -> d4  [color=green, key=1, label="lambda expression", style=dashed];
d0 -> d1  [color=green, key=0, style=solid];
d2 -> d0  [color=blue, key=0, style=bold];
d4 -> d5  [color=green, key=0, style=solid];
d5 -> d6  [color=green, key=0, style=solid];
d5 -> d7  [color=green, key=2, style=dotted];
d6 -> d4  [color=blue, key=0, style=bold];
d19 -> d20  [color=green, key=0, style=solid];
d19 -> d11  [color=green, key=2, style=dotted];
d19 -> d21  [color=green, key=1, label="lambda expression", style=dashed];
d439 -> d19  [color=green, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d27  [color=green, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d40  [color=green, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d9  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d55  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d97  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d107  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d116  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d136  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d145  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d156  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d167  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d178  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d190  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d200  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d211  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d221  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d229  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d238  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d249  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d260  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d271  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d280  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d291  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d300  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d308  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d316  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d328  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d338  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d356  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d367  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d377  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d388  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d404  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d439 -> d416  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
d18 -> d19  [color=green, key=0, style=solid];
d20 -> d18  [color=blue, key=0, style=bold];
d21 -> d22  [color=green, key=0, style=solid];
d22 -> d23  [color=green, key=0, style=solid];
d22 -> d25  [color=green, key=2, style=dotted];
d23 -> d24  [color=green, key=0, style=solid];
d23 -> d17  [color=green, key=2, style=dotted];
d24 -> d21  [color=blue, key=0, style=bold];
d27 -> d28  [color=green, key=0, style=solid];
d27 -> d11  [color=green, key=2, style=dotted];
d27 -> d29  [color=green, key=1, label="lambda expression", style=dashed];
d26 -> d27  [color=green, key=0, style=solid];
d28 -> d26  [color=blue, key=0, style=bold];
d29 -> d30  [color=green, key=0, style=solid];
d29 -> d35  [color=green, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d30 -> d31  [color=green, key=0, style=solid];
d30 -> d3  [color=green, key=2, style=dotted];
d30 -> d34  [color=green, key=1, label="lambda expression", style=dashed];
d31 -> d32  [key=0, style=solid];
d31 -> d33  [key=2, style=dotted];
d34 -> d35  [color=green, key=0, style=solid];
d35 -> d36  [color=green, key=0, style=solid];
d35 -> d37  [color=green, key=2, style=dotted];
d35 -> d38  [color=green, key=2, style=dotted];
d440 -> d35  [color=green, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d36 -> d34  [color=blue, key=0, style=bold];
d40 -> d41  [color=green, key=0, style=solid];
d40 -> d11  [color=green, key=2, style=dotted];
d40 -> d42  [color=green, key=1, label="lambda expression", style=dashed];
d39 -> d40  [color=green, key=0, style=solid];
d41 -> d39  [color=blue, key=0, style=bold];
d42 -> d43  [key=0, style=solid];
d42 -> d47  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d43 -> d3  [key=2, style=dotted];
d43 -> d44  [key=0, style=solid];
d43 -> d46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d100 -> d3  [key=2, style=dotted];
d100 -> d101  [key=0, style=solid];
d100 -> d102  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d148 -> d3  [key=2, style=dotted];
d148 -> d149  [key=0, style=solid];
d148 -> d151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d159 -> d3  [key=2, style=dotted];
d159 -> d160  [key=0, style=solid];
d159 -> d162  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d203 -> d3  [key=2, style=dotted];
d203 -> d204  [key=0, style=solid];
d203 -> d206  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d214 -> d3  [key=2, style=dotted];
d214 -> d215  [key=0, style=solid];
d214 -> d217  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d232 -> d3  [key=2, style=dotted];
d232 -> d233  [key=0, style=solid];
d232 -> d80  [key=2, style=dotted];
d241 -> d3  [key=2, style=dotted];
d241 -> d242  [key=0, style=solid];
d241 -> d244  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d252 -> d3  [key=2, style=dotted];
d252 -> d253  [key=0, style=solid];
d252 -> d255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d265 -> d3  [key=2, style=dotted];
d265 -> d266  [key=0, style=solid];
d265 -> d80  [key=2, style=dotted];
d276 -> d3  [key=2, style=dotted];
d276 -> d277  [key=0, style=solid];
d276 -> d80  [key=2, style=dotted];
d283 -> d3  [key=2, style=dotted];
d283 -> d284  [key=0, style=solid];
d283 -> d286  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d294 -> d3  [key=2, style=dotted];
d294 -> d295  [key=0, style=solid];
d294 -> d296  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d319 -> d3  [key=2, style=dotted];
d319 -> d320  [key=0, style=solid];
d319 -> d322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d331 -> d3  [key=2, style=dotted];
d331 -> d332  [key=0, style=solid];
d331 -> d334  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d359 -> d3  [key=2, style=dotted];
d359 -> d360  [key=0, style=solid];
d359 -> d361  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d380 -> d3  [key=2, style=dotted];
d380 -> d381  [key=0, style=solid];
d380 -> d382  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d407 -> d3  [key=2, style=dotted];
d407 -> d408  [key=0, style=solid];
d407 -> d409  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d428 -> d7  [key=2, style=dotted];
d428 -> d429  [key=0, style=solid];
d434 -> d7  [key=2, style=dotted];
d434 -> d435  [key=0, style=solid];
d434 -> d431  [key=2, style=dotted];
d9 -> d11  [key=2, style=dotted];
d9 -> d10  [key=0, style=solid];
d9 -> d12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d55 -> d56  [key=0, style=solid];
d55 -> d57  [key=2, style=dotted];
d55 -> d58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d97 -> d11  [key=2, style=dotted];
d97 -> d98  [key=0, style=solid];
d97 -> d99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d107 -> d11  [key=2, style=dotted];
d107 -> d108  [key=0, style=solid];
d107 -> d109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d116 -> d117  [key=0, style=solid];
d116 -> d57  [key=2, style=dotted];
d116 -> d118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d136 -> d137  [key=0, style=solid];
d136 -> d57  [key=2, style=dotted];
d136 -> d138  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d145 -> d11  [key=2, style=dotted];
d145 -> d146  [key=0, style=solid];
d145 -> d147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d156 -> d11  [key=2, style=dotted];
d156 -> d157  [key=0, style=solid];
d156 -> d158  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d167 -> d168  [key=0, style=solid];
d167 -> d57  [key=2, style=dotted];
d167 -> d169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d178 -> d179  [key=0, style=solid];
d178 -> d57  [key=2, style=dotted];
d178 -> d180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d190 -> d191  [key=0, style=solid];
d190 -> d57  [key=2, style=dotted];
d190 -> d192  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d200 -> d11  [key=2, style=dotted];
d200 -> d201  [key=0, style=solid];
d200 -> d202  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d211 -> d11  [key=2, style=dotted];
d211 -> d212  [key=0, style=solid];
d211 -> d213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d221 -> d11  [key=2, style=dotted];
d221 -> d222  [key=0, style=solid];
d221 -> d223  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d229 -> d230  [key=0, style=solid];
d229 -> d57  [key=2, style=dotted];
d229 -> d231  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d238 -> d11  [key=2, style=dotted];
d238 -> d239  [key=0, style=solid];
d238 -> d240  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d249 -> d11  [key=2, style=dotted];
d249 -> d250  [key=0, style=solid];
d249 -> d251  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d260 -> d261  [key=0, style=solid];
d260 -> d57  [key=2, style=dotted];
d260 -> d262  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d271 -> d272  [key=0, style=solid];
d271 -> d57  [key=2, style=dotted];
d271 -> d273  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d280 -> d11  [key=2, style=dotted];
d280 -> d281  [key=0, style=solid];
d280 -> d282  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d291 -> d11  [key=2, style=dotted];
d291 -> d292  [key=0, style=solid];
d291 -> d293  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d300 -> d11  [key=2, style=dotted];
d300 -> d301  [key=0, style=solid];
d300 -> d302  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d308 -> d309  [key=0, style=solid];
d308 -> d57  [key=2, style=dotted];
d308 -> d310  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d316 -> d11  [key=2, style=dotted];
d316 -> d317  [key=0, style=solid];
d316 -> d318  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d328 -> d11  [key=2, style=dotted];
d328 -> d329  [key=0, style=solid];
d328 -> d330  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d338 -> d339  [key=0, style=solid];
d338 -> d57  [key=2, style=dotted];
d338 -> d340  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d356 -> d11  [key=2, style=dotted];
d356 -> d357  [key=0, style=solid];
d356 -> d358  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d367 -> d368  [key=0, style=solid];
d367 -> d57  [key=2, style=dotted];
d367 -> d369  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d377 -> d11  [key=2, style=dotted];
d377 -> d378  [key=0, style=solid];
d377 -> d379  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d388 -> d389  [key=0, style=solid];
d388 -> d57  [key=2, style=dotted];
d388 -> d390  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d404 -> d11  [key=2, style=dotted];
d404 -> d405  [key=0, style=solid];
d404 -> d406  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d416 -> d417  [key=0, style=solid];
d416 -> d57  [key=2, style=dotted];
d416 -> d418  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d14 -> d17  [key=2, style=dotted];
d14 -> d15  [key=0, style=solid];
d60 -> d17  [key=2, style=dotted];
d60 -> d61  [key=0, style=solid];
d122 -> d17  [key=2, style=dotted];
d122 -> d123  [key=0, style=solid];
d123 -> d17  [key=2, style=dotted];
d123 -> d124  [key=0, style=solid];
d141 -> d17  [key=2, style=dotted];
d141 -> d142  [key=0, style=solid];
d394 -> d17  [key=2, style=dotted];
d394 -> d395  [key=0, style=solid];
d32 -> d29  [color=blue, key=0, style=bold];
d59 -> d37  [key=2, style=dotted];
d59 -> d38  [key=2, style=dotted];
d59 -> d60  [key=0, style=solid];
d59 -> d49  [key=2, style=dotted];
d59 -> d77  [key=2, style=dotted];
d59 -> d87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d59 -> d61  [color=darkseagreen4, key=1, label=jobId, style=dashed];
d59 -> d63  [color=darkseagreen4, key=1, label=jobId, style=dashed];
d59 -> d73  [color=darkseagreen4, key=1, label=jobId, style=dashed];
d47 -> d38  [key=2, style=dotted];
d47 -> d48  [key=0, style=solid];
d47 -> d49  [key=2, style=dotted];
d47 -> d50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d45 -> d42  [color=blue, key=0, style=bold];
d44 -> d33  [key=2, style=dotted];
d44 -> d45  [key=0, style=solid];
d46 -> d47  [key=0, style=solid];
d99 -> d100  [key=0, style=solid];
d99 -> d103  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d101 -> d99  [color=blue, key=0, style=bold];
d102 -> d103  [key=0, style=solid];
d147 -> d148  [key=0, style=solid];
d147 -> d152  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d149 -> d33  [key=2, style=dotted];
d149 -> d150  [key=0, style=solid];
d151 -> d152  [key=0, style=solid];
d158 -> d159  [key=0, style=solid];
d158 -> d163  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d160 -> d33  [key=2, style=dotted];
d160 -> d161  [key=0, style=solid];
d162 -> d163  [key=0, style=solid];
d202 -> d203  [key=0, style=solid];
d202 -> d207  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d204 -> d33  [key=2, style=dotted];
d204 -> d205  [key=0, style=solid];
d206 -> d207  [key=0, style=solid];
d213 -> d214  [key=0, style=solid];
d213 -> d218  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d215 -> d33  [key=2, style=dotted];
d215 -> d216  [key=0, style=solid];
d217 -> d218  [key=0, style=solid];
d452 -> d232  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d228 -> d232  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d228 -> d229  [key=0, style=solid];
d231 -> d232  [key=0, style=solid];
d231 -> d233  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d233 -> d234  [key=0, style=solid];
d233 -> d81  [key=2, style=dotted];
d233 -> d236  [key=2, style=dotted];
d240 -> d241  [key=0, style=solid];
d240 -> d245  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d242 -> d33  [key=2, style=dotted];
d242 -> d243  [key=0, style=solid];
d244 -> d245  [key=0, style=solid];
d251 -> d252  [key=0, style=solid];
d251 -> d256  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d253 -> d33  [key=2, style=dotted];
d253 -> d254  [key=0, style=solid];
d255 -> d256  [key=0, style=solid];
d262 -> d265  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d262 -> d263  [key=0, style=solid];
d262 -> d264  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d264 -> d265  [key=0, style=solid];
d264 -> d247  [key=2, style=dotted];
d266 -> d33  [key=2, style=dotted];
d266 -> d267  [key=0, style=solid];
d273 -> d276  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d273 -> d274  [key=0, style=solid];
d273 -> d275  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d275 -> d276  [key=0, style=solid];
d275 -> d247  [key=2, style=dotted];
d277 -> d33  [key=2, style=dotted];
d277 -> d278  [key=0, style=solid];
d282 -> d283  [key=0, style=solid];
d282 -> d287  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d284 -> d33  [key=2, style=dotted];
d284 -> d285  [key=0, style=solid];
d286 -> d287  [key=0, style=solid];
d293 -> d294  [key=0, style=solid];
d293 -> d297  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d295 -> d293  [color=blue, key=0, style=bold];
d296 -> d297  [key=0, style=solid];
d318 -> d319  [key=0, style=solid];
d318 -> d323  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d320 -> d33  [key=2, style=dotted];
d320 -> d321  [key=0, style=solid];
d322 -> d323  [key=0, style=solid];
d330 -> d331  [key=0, style=solid];
d330 -> d335  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d332 -> d33  [key=2, style=dotted];
d332 -> d333  [key=0, style=solid];
d334 -> d335  [key=0, style=solid];
d358 -> d359  [key=0, style=solid];
d358 -> d362  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d360 -> d358  [color=blue, key=0, style=bold];
d361 -> d362  [key=0, style=solid];
d379 -> d380  [key=0, style=solid];
d379 -> d383  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d381 -> d379  [color=blue, key=0, style=bold];
d382 -> d383  [key=0, style=solid];
d406 -> d407  [key=0, style=solid];
d406 -> d410  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d408 -> d406  [color=blue, key=0, style=bold];
d409 -> d410  [key=0, style=solid];
d427 -> d428  [key=0, style=solid];
d427 -> d431  [key=2, style=dotted];
d427 -> d429  [color=darkseagreen4, key=1, label=sqlConnection, style=dashed];
d429 -> d430  [key=0, style=solid];
d429 -> d432  [key=2, style=dotted];
d433 -> d434  [key=0, style=solid];
d433 -> d435  [color=darkseagreen4, key=1, label="System.Action<HangFire.SqlServer.SqlServerConnection>", style=dashed];
d435 -> d436  [key=0, style=solid];
d435 -> d437  [key=2, style=dotted];
d8 -> d9  [key=0, style=solid];
d10 -> d8  [color=blue, key=0, style=bold];
d12 -> d13  [key=0, style=solid];
d54 -> d55  [key=0, style=solid];
d56 -> d54  [color=blue, key=0, style=bold];
d58 -> d59  [key=0, style=solid];
d58 -> d62  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d58 -> d73  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d96 -> d97  [key=0, style=solid];
d98 -> d96  [color=blue, key=0, style=bold];
d106 -> d107  [key=0, style=solid];
d108 -> d106  [color=blue, key=0, style=bold];
d109 -> d110  [key=0, style=solid];
d115 -> d116  [key=0, style=solid];
d115 -> d120  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d117 -> d114  [color=blue, key=0, style=bold];
d118 -> d119  [key=0, style=solid];
d118 -> d120  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d118 -> d121  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d135 -> d136  [key=0, style=solid];
d135 -> d139  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d137 -> d134  [color=blue, key=0, style=bold];
d138 -> d139  [key=0, style=solid];
d138 -> d140  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d144 -> d145  [key=0, style=solid];
d146 -> d144  [color=blue, key=0, style=bold];
d155 -> d156  [key=0, style=solid];
d157 -> d155  [color=blue, key=0, style=bold];
d166 -> d167  [key=0, style=solid];
d166 -> d170  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d168 -> d165  [color=blue, key=0, style=bold];
d169 -> d170  [key=0, style=solid];
d169 -> d172  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d169 -> d173  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d177 -> d178  [key=0, style=solid];
d177 -> d181  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d179 -> d176  [color=blue, key=0, style=bold];
d180 -> d181  [key=0, style=solid];
d180 -> d183  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d180 -> d184  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d180 -> d185  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d189 -> d190  [key=0, style=solid];
d189 -> d193  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d191 -> d188  [color=blue, key=0, style=bold];
d192 -> d193  [key=0, style=solid];
d192 -> d195  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d192 -> d196  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d199 -> d200  [key=0, style=solid];
d201 -> d199  [color=blue, key=0, style=bold];
d210 -> d211  [key=0, style=solid];
d212 -> d210  [color=blue, key=0, style=bold];
d220 -> d221  [key=0, style=solid];
d222 -> d220  [color=blue, key=0, style=bold];
d223 -> d224  [key=0, style=solid];
d230 -> d227  [color=blue, key=0, style=bold];
d237 -> d238  [key=0, style=solid];
d239 -> d237  [color=blue, key=0, style=bold];
d248 -> d249  [key=0, style=solid];
d250 -> d248  [color=blue, key=0, style=bold];
d259 -> d260  [key=0, style=solid];
d259 -> d263  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d261 -> d258  [color=blue, key=0, style=bold];
d270 -> d271  [key=0, style=solid];
d270 -> d274  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d272 -> d269  [color=blue, key=0, style=bold];
d279 -> d280  [key=0, style=solid];
d281 -> d279  [color=blue, key=0, style=bold];
d290 -> d291  [key=0, style=solid];
d292 -> d290  [color=blue, key=0, style=bold];
d299 -> d300  [key=0, style=solid];
d301 -> d299  [color=blue, key=0, style=bold];
d302 -> d303  [key=0, style=solid];
d307 -> d308  [key=0, style=solid];
d307 -> d311  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d309 -> d306  [color=blue, key=0, style=bold];
d310 -> d311  [key=0, style=solid];
d310 -> d312  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d315 -> d316  [key=0, style=solid];
d317 -> d315  [color=blue, key=0, style=bold];
d327 -> d328  [key=0, style=solid];
d329 -> d327  [color=blue, key=0, style=bold];
d337 -> d338  [key=0, style=solid];
d339 -> d337  [color=blue, key=0, style=bold];
d340 -> d341  [key=0, style=solid];
d340 -> d342  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d340 -> d343  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d340 -> d348  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d340 -> d349  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d355 -> d356  [key=0, style=solid];
d357 -> d355  [color=blue, key=0, style=bold];
d366 -> d367  [key=0, style=solid];
d366 -> d370  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d368 -> d365  [color=blue, key=0, style=bold];
d369 -> d370  [key=0, style=solid];
d369 -> d371  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d369 -> d372  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d376 -> d377  [key=0, style=solid];
d378 -> d376  [color=blue, key=0, style=bold];
d387 -> d388  [key=0, style=solid];
d387 -> d391  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d389 -> d386  [color=blue, key=0, style=bold];
d390 -> d391  [key=0, style=solid];
d390 -> d392  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d390 -> d393  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d403 -> d404  [key=0, style=solid];
d405 -> d403  [color=blue, key=0, style=bold];
d415 -> d416  [key=0, style=solid];
d415 -> d419  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d417 -> d414  [color=blue, key=0, style=bold];
d418 -> d419  [key=0, style=solid];
d418 -> d420  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d418 -> d421  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d13 -> d14  [key=0, style=solid];
d13 -> d16  [key=2, style=dotted];
d15 -> d12  [color=blue, key=0, style=bold];
d61 -> d62  [key=0, style=solid];
d61 -> d78  [key=2, style=dotted];
d121 -> d122  [key=0, style=solid];
d121 -> d123  [color=darkseagreen4, key=1, label=result, style=dashed];
d121 -> d130  [key=2, style=dotted];
d121 -> d105  [key=2, style=dotted];
d121 -> d124  [color=darkseagreen4, key=1, label=result, style=dashed];
d121 -> d125  [color=darkseagreen4, key=1, label=result, style=dashed];
d121 -> d126  [color=darkseagreen4, key=1, label=result, style=dashed];
d124 -> d33  [key=2, style=dotted];
d124 -> d125  [key=0, style=solid];
d140 -> d141  [key=0, style=solid];
d140 -> d130  [key=2, style=dotted];
d140 -> d105  [key=2, style=dotted];
d142 -> d138  [color=blue, key=0, style=bold];
d393 -> d394  [key=0, style=solid];
d393 -> d79  [key=2, style=dotted];
d393 -> d86  [key=2, style=dotted];
d393 -> d397  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d393 -> d400  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d393 -> d395  [color=darkseagreen4, key=1, label=servers, style=dashed];
d395 -> d396  [key=0, style=solid];
d395 -> d113  [key=2, style=dotted];
d63 -> d33  [key=2, style=dotted];
d63 -> d64  [key=0, style=solid];
d63 -> d81  [key=2, style=dotted];
d64 -> d33  [key=2, style=dotted];
d64 -> d65  [key=0, style=solid];
d65 -> d33  [key=2, style=dotted];
d65 -> d66  [key=0, style=solid];
d69 -> d33  [key=2, style=dotted];
d69 -> d70  [key=0, style=solid];
d70 -> d33  [key=2, style=dotted];
d70 -> d71  [key=0, style=solid];
d71 -> d33  [key=2, style=dotted];
d71 -> d72  [key=0, style=solid];
d74 -> d33  [key=2, style=dotted];
d74 -> d75  [key=0, style=solid];
d75 -> d33  [key=2, style=dotted];
d75 -> d76  [key=0, style=solid];
d125 -> d33  [key=2, style=dotted];
d125 -> d126  [key=0, style=solid];
d174 -> d33  [key=2, style=dotted];
d174 -> d175  [key=0, style=solid];
d186 -> d33  [key=2, style=dotted];
d186 -> d187  [key=0, style=solid];
d197 -> d33  [key=2, style=dotted];
d197 -> d198  [key=0, style=solid];
d234 -> d33  [key=2, style=dotted];
d234 -> d235  [key=0, style=solid];
d313 -> d33  [key=2, style=dotted];
d313 -> d314  [key=0, style=solid];
d344 -> d33  [key=2, style=dotted];
d344 -> d345  [key=0, style=solid];
d350 -> d33  [key=2, style=dotted];
d350 -> d351  [key=0, style=solid];
d422 -> d33  [key=2, style=dotted];
d422 -> d423  [key=0, style=solid];
d87 -> d88  [key=0, style=solid];
d73 -> d74  [key=0, style=solid];
d73 -> d75  [color=darkseagreen4, key=1, label=parameters, style=dashed];
d73 -> d79  [key=2, style=dotted];
d73 -> d86  [key=2, style=dotted];
d73 -> d90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d73 -> d93  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d441 -> d47  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d48 -> d46  [color=blue, key=0, style=bold];
d50 -> d51  [key=0, style=solid];
d103 -> d104  [key=0, style=solid];
d103 -> d105  [key=2, style=dotted];
d104 -> d102  [color=blue, key=0, style=bold];
d150 -> d147  [color=blue, key=0, style=bold];
d152 -> d153  [key=0, style=solid];
d152 -> d154  [key=2, style=dotted];
d153 -> d151  [color=blue, key=0, style=bold];
d161 -> d158  [color=blue, key=0, style=bold];
d163 -> d164  [key=0, style=solid];
d163 -> d154  [key=2, style=dotted];
d164 -> d162  [color=blue, key=0, style=bold];
d205 -> d202  [color=blue, key=0, style=bold];
d207 -> d208  [key=0, style=solid];
d207 -> d209  [key=2, style=dotted];
d208 -> d206  [color=blue, key=0, style=bold];
d216 -> d213  [color=blue, key=0, style=bold];
d218 -> d219  [key=0, style=solid];
d218 -> d209  [key=2, style=dotted];
d219 -> d217  [color=blue, key=0, style=bold];
d227 -> d228  [key=0, style=solid];
d235 -> d231  [color=blue, key=0, style=bold];
d62 -> d80  [key=2, style=dotted];
d62 -> d63  [key=0, style=solid];
d62 -> d64  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
d62 -> d65  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
d62 -> d79  [key=2, style=dotted];
d62 -> d66  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
d62 -> d67  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
d62 -> d72  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
d120 -> d80  [key=2, style=dotted];
d120 -> d121  [key=0, style=solid];
d120 -> d128  [key=2, style=dotted];
d120 -> d129  [key=2, style=dotted];
d120 -> d79  [key=2, style=dotted];
d139 -> d80  [key=2, style=dotted];
d139 -> d140  [key=0, style=solid];
d139 -> d143  [key=2, style=dotted];
d139 -> d129  [key=2, style=dotted];
d139 -> d79  [key=2, style=dotted];
d170 -> d80  [key=2, style=dotted];
d170 -> d171  [key=0, style=solid];
d170 -> d79  [key=2, style=dotted];
d173 -> d80  [key=2, style=dotted];
d173 -> d174  [key=0, style=solid];
d173 -> d79  [key=2, style=dotted];
d181 -> d80  [key=2, style=dotted];
d181 -> d182  [key=0, style=solid];
d181 -> d79  [key=2, style=dotted];
d185 -> d80  [key=2, style=dotted];
d185 -> d186  [key=0, style=solid];
d185 -> d79  [key=2, style=dotted];
d193 -> d80  [key=2, style=dotted];
d193 -> d194  [key=0, style=solid];
d193 -> d79  [key=2, style=dotted];
d196 -> d80  [key=2, style=dotted];
d196 -> d197  [key=0, style=solid];
d196 -> d79  [key=2, style=dotted];
d343 -> d80  [key=2, style=dotted];
d343 -> d344  [key=0, style=solid];
d343 -> d79  [key=2, style=dotted];
d343 -> d345  [color=darkseagreen4, key=1, label=server, style=dashed];
d343 -> d346  [color=darkseagreen4, key=1, label=server, style=dashed];
d349 -> d80  [key=2, style=dotted];
d349 -> d350  [key=0, style=solid];
d349 -> d79  [key=2, style=dotted];
d349 -> d351  [color=darkseagreen4, key=1, label=sameServer, style=dashed];
d372 -> d80  [key=2, style=dotted];
d372 -> d373  [key=0, style=solid];
d372 -> d79  [key=2, style=dotted];
d421 -> d80  [key=2, style=dotted];
d421 -> d422  [key=0, style=solid];
d421 -> d79  [key=2, style=dotted];
d243 -> d240  [color=blue, key=0, style=bold];
d245 -> d246  [key=0, style=solid];
d245 -> d247  [key=2, style=dotted];
d246 -> d244  [color=blue, key=0, style=bold];
d254 -> d251  [color=blue, key=0, style=bold];
d256 -> d257  [key=0, style=solid];
d256 -> d247  [key=2, style=dotted];
d257 -> d255  [color=blue, key=0, style=bold];
d267 -> d262  [color=blue, key=0, style=bold];
d263 -> d264  [key=0, style=solid];
d263 -> d268  [key=2, style=dotted];
d278 -> d273  [color=blue, key=0, style=bold];
d274 -> d275  [key=0, style=solid];
d274 -> d268  [key=2, style=dotted];
d285 -> d282  [color=blue, key=0, style=bold];
d287 -> d288  [key=0, style=solid];
d287 -> d289  [key=2, style=dotted];
d288 -> d286  [color=blue, key=0, style=bold];
d297 -> d298  [key=0, style=solid];
d297 -> d289  [key=2, style=dotted];
d298 -> d296  [color=blue, key=0, style=bold];
d321 -> d318  [color=blue, key=0, style=bold];
d323 -> d324  [key=0, style=solid];
d323 -> d325  [key=2, style=dotted];
d323 -> d326  [key=2, style=dotted];
d324 -> d322  [color=blue, key=0, style=bold];
d333 -> d330  [color=blue, key=0, style=bold];
d335 -> d336  [key=0, style=solid];
d335 -> d326  [key=2, style=dotted];
d336 -> d334  [color=blue, key=0, style=bold];
d362 -> d363  [key=0, style=solid];
d362 -> d364  [key=2, style=dotted];
d363 -> d361  [color=blue, key=0, style=bold];
d383 -> d384  [key=0, style=solid];
d383 -> d385  [key=2, style=dotted];
d384 -> d382  [color=blue, key=0, style=bold];
d410 -> d411  [key=0, style=solid];
d410 -> d412  [key=2, style=dotted];
d410 -> d413  [key=2, style=dotted];
d411 -> d409  [color=blue, key=0, style=bold];
d426 -> d427  [key=0, style=solid];
d426 -> d429  [color=darkseagreen4, key=1, label="System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>", style=dashed];
d430 -> d426  [color=blue, key=0, style=bold];
d436 -> d433  [color=blue, key=0, style=bold];
d76 -> d58  [color=blue, key=0, style=bold];
d112 -> d109  [color=blue, key=0, style=bold];
d110 -> d111  [key=0, style=solid];
d110 -> d105  [key=2, style=dotted];
d114 -> d115  [key=0, style=solid];
d127 -> d118  [color=blue, key=0, style=bold];
d119 -> d49  [key=2, style=dotted];
d119 -> d120  [key=0, style=solid];
d119 -> d131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d134 -> d135  [key=0, style=solid];
d165 -> d166  [key=0, style=solid];
d175 -> d169  [color=blue, key=0, style=bold];
d172 -> d173  [key=0, style=solid];
d172 -> d154  [key=2, style=dotted];
d176 -> d177  [key=0, style=solid];
d187 -> d180  [color=blue, key=0, style=bold];
d183 -> d184  [key=0, style=solid];
d183 -> d154  [key=2, style=dotted];
d184 -> d185  [key=0, style=solid];
d184 -> d154  [key=2, style=dotted];
d188 -> d189  [key=0, style=solid];
d198 -> d192  [color=blue, key=0, style=bold];
d195 -> d196  [key=0, style=solid];
d195 -> d154  [key=2, style=dotted];
d226 -> d223  [color=blue, key=0, style=bold];
d224 -> d225  [key=0, style=solid];
d224 -> d209  [key=2, style=dotted];
d258 -> d259  [key=0, style=solid];
d269 -> d270  [key=0, style=solid];
d305 -> d302  [color=blue, key=0, style=bold];
d303 -> d304  [key=0, style=solid];
d303 -> d289  [key=2, style=dotted];
d306 -> d307  [key=0, style=solid];
d311 -> d312  [key=0, style=solid];
d311 -> d268  [key=2, style=dotted];
d314 -> d310  [color=blue, key=0, style=bold];
d312 -> d313  [key=0, style=solid];
d312 -> d289  [key=2, style=dotted];
d352 -> d340  [color=blue, key=0, style=bold];
d341 -> d342  [key=0, style=solid];
d341 -> d325  [key=2, style=dotted];
d342 -> d343  [key=0, style=solid];
d342 -> d326  [key=2, style=dotted];
d348 -> d349  [key=0, style=solid];
d348 -> d326  [key=2, style=dotted];
d365 -> d366  [key=0, style=solid];
d370 -> d371  [key=0, style=solid];
d370 -> d268  [key=2, style=dotted];
d374 -> d369  [color=blue, key=0, style=bold];
d371 -> d372  [key=0, style=solid];
d371 -> d364  [key=2, style=dotted];
d386 -> d387  [key=0, style=solid];
d391 -> d392  [key=0, style=solid];
d391 -> d268  [key=2, style=dotted];
d396 -> d390  [color=blue, key=0, style=bold];
d392 -> d393  [key=0, style=solid];
d392 -> d385  [key=2, style=dotted];
d414 -> d415  [key=0, style=solid];
d419 -> d420  [key=0, style=solid];
d419 -> d84  [key=2, style=dotted];
d419 -> d424  [key=2, style=dotted];
d419 -> d268  [key=2, style=dotted];
d423 -> d418  [color=blue, key=0, style=bold];
d420 -> d421  [key=0, style=solid];
d420 -> d425  [key=2, style=dotted];
d420 -> d413  [key=2, style=dotted];
d126 -> d127  [key=0, style=solid];
d126 -> d113  [key=2, style=dotted];
d397 -> d398  [key=0, style=solid];
d400 -> d401  [key=0, style=solid];
d66 -> d67  [key=0, style=solid];
d66 -> d82  [key=2, style=dotted];
d66 -> d68  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
d68 -> d69  [key=0, style=solid];
d68 -> d70  [color=darkseagreen4, key=1, label=job, style=dashed];
d68 -> d71  [color=darkseagreen4, key=1, label=job, style=dashed];
d68 -> d83  [key=2, style=dotted];
d72 -> d73  [key=0, style=solid];
d72 -> d84  [key=2, style=dotted];
d72 -> d85  [key=2, style=dotted];
d345 -> d346  [key=0, style=solid];
d345 -> d353  [key=2, style=dotted];
d345 -> d85  [key=2, style=dotted];
d351 -> d352  [key=0, style=solid];
d351 -> d354  [key=2, style=dotted];
d89 -> d87  [color=blue, key=0, style=bold];
d88 -> d89  [key=0, style=solid];
d88 -> d53  [key=2, style=dotted];
d90 -> d91  [key=0, style=solid];
d93 -> d94  [key=0, style=solid];
d52 -> d50  [color=blue, key=0, style=bold];
d51 -> d52  [key=0, style=solid];
d51 -> d53  [key=2, style=dotted];
d442 -> d103  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d445 -> d152  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d446 -> d163  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d450 -> d207  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d451 -> d218  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d171 -> d81  [key=2, style=dotted];
d171 -> d173  [color=darkseagreen4, key=1, label=jobId, style=dashed];
d171 -> d172  [key=0, style=solid];
d182 -> d81  [key=2, style=dotted];
d182 -> d185  [color=darkseagreen4, key=1, label=jobId, style=dashed];
d182 -> d183  [key=0, style=solid];
d182 -> d184  [color=darkseagreen4, key=1, label=jobId, style=dashed];
d194 -> d81  [key=2, style=dotted];
d194 -> d196  [color=darkseagreen4, key=1, label=jobId, style=dashed];
d194 -> d195  [key=0, style=solid];
d67 -> d68  [key=0, style=solid];
d443 -> d120  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d444 -> d139  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d447 -> d170  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d448 -> d181  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d449 -> d193  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d346 -> d113  [key=2, style=dotted];
d346 -> d347  [key=0, style=solid];
d373 -> d374  [key=0, style=solid];
d373 -> d375  [key=2, style=dotted];
d453 -> d245  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d454 -> d256  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d455 -> d263  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d456 -> d274  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d457 -> d287  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d458 -> d297  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d460 -> d323  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d461 -> d335  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d462 -> d362  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d464 -> d383  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d466 -> d410  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
d111 -> d112  [key=0, style=solid];
d111 -> d113  [key=2, style=dotted];
d131 -> d132  [key=0, style=solid];
d225 -> d226  [key=0, style=solid];
d225 -> d113  [key=2, style=dotted];
d304 -> d305  [key=0, style=solid];
d304 -> d113  [key=2, style=dotted];
d459 -> d311  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d347 -> d348  [key=0, style=solid];
d347 -> d325  [key=2, style=dotted];
d463 -> d370  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d465 -> d391  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d467 -> d419  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
d399 -> d397  [color=blue, key=0, style=bold];
d398 -> d399  [key=0, style=solid];
d402 -> d400  [color=blue, key=0, style=bold];
d401 -> d402  [key=0, style=solid];
d53 -> d438  [key=0, style=solid];
d92 -> d90  [color=blue, key=0, style=bold];
d91 -> d92  [key=0, style=solid];
d95 -> d93  [color=blue, key=0, style=bold];
d94 -> d95  [key=0, style=solid];
d133 -> d131  [color=blue, key=0, style=bold];
d132 -> d53  [key=2, style=dotted];
d132 -> d133  [key=0, style=solid];
d438 -> d53  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_2  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m1_0 -> m1_3  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=0, style=solid];
m1_2 -> m1_4  [key=0, style=solid];
m1_2 -> m1_5  [key=2, style=dotted];
m1_2 -> m1_6  [key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_4 -> m1_0  [color=blue, key=0, style=bold];
m1_7 -> m1_3  [color=darkseagreen4, key=1, label="Hangfire.Client.ClientExceptionContext", style=dashed];
m2_6 -> m2_7  [key=0, style=solid];
m2_7 -> m2_10  [key=2, style=dotted];
m2_7 -> m2_8  [key=0, style=solid];
m2_7 -> m2_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> d33  [key=2, style=dotted];
m2_9 -> m2_6  [color=blue, key=0, style=bold];
m2_190 -> m2_191  [color=green, key=0, style=solid];
m2_191 -> m2_192  [color=green, key=0, style=solid];
m2_191 -> m2_23  [color=green, key=2, style=dotted];
m2_191 -> m2_196  [color=green, key=1, label="lambda expression", style=dashed];
m2_192 -> m2_193  [color=green, key=0, style=solid];
m2_192 -> m2_121  [color=green, key=2, style=dotted];
m2_192 -> m2_10  [color=green, key=2, style=dotted];
m2_192 -> m2_200  [color=green, key=1, label="lambda expression", style=dashed];
m2_193 -> m2_194  [color=green, key=0, style=solid];
m2_193 -> m2_24  [color=green, key=2, style=dotted];
m2_193 -> m2_205  [color=green, key=1, label=performer, style=dashed];
m2_194 -> m2_195  [color=green, key=0, style=solid];
m2_194 -> m2_10  [color=green, key=2, style=dotted];
m2_194 -> m2_204  [color=green, key=1, label="lambda expression", style=dashed];
m2_195 -> m2_190  [color=blue, key=0, style=bold];
m2_53 -> m2_219  [key=0, style=solid];
m2_219 -> m2_220  [key=0, style=solid];
m2_220 -> m2_53  [color=blue, key=0, style=bold];
m2_101 -> m2_239  [key=0, style=solid];
m2_101 -> m2_240  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m2_239 -> m2_240  [key=0, style=solid];
m2_240 -> m2_241  [key=0, style=solid];
m2_240 -> d33  [key=2, style=dotted];
m2_241 -> m2_101  [color=blue, key=0, style=bold];
m2_24 -> m2_251  [key=0, style=solid];
m2_251 -> m2_252  [key=0, style=solid];
m2_251 -> m2_253  [key=2, style=dotted];
m2_252 -> m2_24  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_4  [key=2, style=dotted];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_5  [key=2, style=dotted];
m2_3 -> m2_0  [color=blue, key=0, style=bold];
m2_91 -> m2_92  [key=0, style=solid];
m2_93 -> m2_23  [key=2, style=dotted];
m2_93 -> m2_94  [key=0, style=solid];
m2_93 -> m2_98  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_94 -> m2_24  [key=2, style=dotted];
m2_94 -> m2_95  [key=0, style=solid];
m2_95 -> m2_25  [key=2, style=dotted];
m2_95 -> m2_96  [key=0, style=solid];
m2_92 -> m2_93  [key=0, style=solid];
m2_96 -> m2_97  [key=0, style=solid];
m2_96 -> m2_26  [key=2, style=dotted];
m2_97 -> m2_91  [color=blue, key=0, style=bold];
m2_207 -> m2_208  [key=0, style=solid];
m2_208 -> m2_209  [key=0, style=solid];
m2_208 -> m2_38  [key=2, style=dotted];
m2_208 -> m2_213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_209 -> m2_24  [key=2, style=dotted];
m2_209 -> m2_210  [key=0, style=solid];
m2_210 -> m2_25  [key=2, style=dotted];
m2_210 -> m2_211  [key=0, style=solid];
m2_211 -> m2_212  [key=0, style=solid];
m2_211 -> d33  [key=2, style=dotted];
m2_212 -> m2_207  [color=blue, key=0, style=bold];
m2_186 -> m2_248  [key=0, style=solid];
m2_248 -> m2_249  [key=0, style=solid];
m2_248 -> m2_250  [key=2, style=dotted];
m2_249 -> m2_186  [color=blue, key=0, style=bold];
m2_102 -> m2_103  [key=0, style=solid];
m2_104 -> m2_23  [key=2, style=dotted];
m2_104 -> m2_105  [key=0, style=solid];
m2_104 -> m2_109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_105 -> m2_24  [key=2, style=dotted];
m2_105 -> m2_106  [key=0, style=solid];
m2_106 -> m2_25  [key=2, style=dotted];
m2_106 -> m2_107  [key=0, style=solid];
m2_103 -> m2_104  [key=0, style=solid];
m2_107 -> m2_108  [key=0, style=solid];
m2_107 -> m2_26  [key=2, style=dotted];
m2_108 -> m2_102  [color=blue, key=0, style=bold];
m2_54 -> m2_55  [key=0, style=solid];
m2_56 -> m2_23  [key=2, style=dotted];
m2_56 -> m2_57  [key=0, style=solid];
m2_56 -> m2_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_57 -> m2_24  [key=2, style=dotted];
m2_57 -> m2_58  [key=0, style=solid];
m2_58 -> m2_25  [key=2, style=dotted];
m2_58 -> m2_59  [key=0, style=solid];
m2_55 -> m2_56  [key=0, style=solid];
m2_59 -> m2_60  [key=0, style=solid];
m2_59 -> m2_26  [key=2, style=dotted];
m2_60 -> m2_54  [color=blue, key=0, style=bold];
m2_64 -> m2_56  [color=darkorchid, key=3, label="Parameter variable int intArg", style=bold];
m2_64 -> m2_244  [key=0, style=solid];
m2_64 -> m2_245  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_64 -> m2_246  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_244 -> m2_245  [key=0, style=solid];
m2_245 -> m2_246  [key=0, style=solid];
m2_245 -> d33  [key=2, style=dotted];
m2_246 -> m2_247  [key=0, style=solid];
m2_246 -> d33  [key=2, style=dotted];
m2_247 -> m2_64  [color=blue, key=0, style=bold];
m2_65 -> m2_66  [key=0, style=solid];
m2_71 -> m2_72  [key=0, style=solid];
m2_71 -> m2_79  [key=2, style=dotted];
m2_72 -> m2_24  [key=2, style=dotted];
m2_72 -> m2_73  [key=0, style=solid];
m2_73 -> m2_25  [key=2, style=dotted];
m2_73 -> m2_74  [key=0, style=solid];
m2_68 -> m2_71  [color=darkseagreen4, key=1, label=convertedDate, style=dashed];
m2_68 -> m2_69  [key=0, style=solid];
m2_68 -> m2_77  [key=2, style=dotted];
m2_69 -> m2_71  [color=darkseagreen4, key=1, label=type, style=dashed];
m2_69 -> m2_70  [key=0, style=solid];
m2_70 -> m2_71  [key=0, style=solid];
m2_70 -> m2_78  [key=2, style=dotted];
m2_74 -> m2_75  [key=0, style=solid];
m2_74 -> m2_26  [key=2, style=dotted];
m2_67 -> m2_68  [key=0, style=solid];
m2_67 -> m2_76  [key=2, style=dotted];
m2_66 -> m2_67  [key=0, style=solid];
m2_75 -> m2_65  [color=blue, key=0, style=bold];
m2_162 -> m2_163  [key=0, style=solid];
m2_164 -> m2_165  [key=0, style=solid];
m2_164 -> m2_38  [key=2, style=dotted];
m2_164 -> m2_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_165 -> m2_24  [key=2, style=dotted];
m2_165 -> m2_166  [key=0, style=solid];
m2_165 -> m2_174  [color=darkseagreen4, key=1, label=performer, style=dashed];
m2_166 -> m2_10  [key=2, style=dotted];
m2_166 -> m2_167  [key=0, style=solid];
m2_166 -> m2_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_163 -> m2_164  [key=0, style=solid];
m2_167 -> m2_168  [key=0, style=solid];
m2_167 -> m2_26  [key=2, style=dotted];
m2_168 -> m2_162  [color=blue, key=0, style=bold];
m2_16 -> m2_17  [key=0, style=solid];
m2_18 -> m2_23  [key=2, style=dotted];
m2_18 -> m2_19  [key=0, style=solid];
m2_18 -> m2_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_19 -> m2_24  [key=2, style=dotted];
m2_19 -> m2_20  [key=0, style=solid];
m2_20 -> m2_25  [key=2, style=dotted];
m2_20 -> m2_21  [key=0, style=solid];
m2_17 -> m2_18  [key=0, style=solid];
m2_21 -> m2_22  [key=0, style=solid];
m2_21 -> m2_26  [key=2, style=dotted];
m2_22 -> m2_16  [color=blue, key=0, style=bold];
m2_113 -> m2_114  [key=0, style=solid];
m2_115 -> m2_121  [key=2, style=dotted];
m2_115 -> m2_116  [key=0, style=solid];
m2_115 -> m2_122  [key=2, style=dotted];
m2_115 -> m2_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_116 -> m2_23  [key=2, style=dotted];
m2_116 -> m2_117  [key=0, style=solid];
m2_116 -> m2_127  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_117 -> m2_24  [key=2, style=dotted];
m2_117 -> m2_118  [key=0, style=solid];
m2_117 -> m2_131  [color=darkseagreen4, key=1, label=performer, style=dashed];
m2_118 -> m2_10  [key=2, style=dotted];
m2_118 -> m2_119  [key=0, style=solid];
m2_118 -> m2_130  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_114 -> m2_115  [key=0, style=solid];
m2_114 -> m2_120  [key=2, style=dotted];
m2_119 -> m2_113  [color=blue, key=0, style=bold];
m2_149 -> m2_150  [key=0, style=solid];
m2_152 -> m2_153  [key=0, style=solid];
m2_152 -> m2_157  [key=2, style=dotted];
m2_153 -> m2_24  [key=2, style=dotted];
m2_153 -> m2_154  [key=0, style=solid];
m2_153 -> m2_160  [color=darkseagreen4, key=1, label=performer, style=dashed];
m2_154 -> m2_10  [key=2, style=dotted];
m2_154 -> m2_155  [key=0, style=solid];
m2_154 -> m2_159  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_150 -> m2_152  [color=darkseagreen4, key=1, label=type, style=dashed];
m2_150 -> m2_151  [key=0, style=solid];
m2_151 -> m2_152  [key=0, style=solid];
m2_151 -> m2_78  [key=2, style=dotted];
m2_155 -> m2_156  [key=0, style=solid];
m2_155 -> m2_158  [key=2, style=dotted];
m2_156 -> m2_149  [color=blue, key=0, style=bold];
m2_43 -> m2_44  [key=0, style=solid];
m2_45 -> m2_46  [key=0, style=solid];
m2_45 -> m2_38  [key=2, style=dotted];
m2_45 -> m2_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_46 -> m2_24  [key=2, style=dotted];
m2_46 -> m2_47  [key=0, style=solid];
m2_47 -> m2_25  [key=2, style=dotted];
m2_47 -> m2_48  [key=0, style=solid];
m2_44 -> m2_45  [key=0, style=solid];
m2_48 -> m2_49  [key=0, style=solid];
m2_48 -> m2_26  [key=2, style=dotted];
m2_49 -> m2_43  [color=blue, key=0, style=bold];
m2_133 -> m2_134  [key=0, style=solid];
m2_134 -> m2_121  [key=2, style=dotted];
m2_134 -> m2_135  [key=0, style=solid];
m2_134 -> m2_139  [key=2, style=dotted];
m2_134 -> m2_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_135 -> m2_23  [key=2, style=dotted];
m2_135 -> m2_136  [key=0, style=solid];
m2_135 -> m2_143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_136 -> m2_24  [key=2, style=dotted];
m2_136 -> m2_137  [key=0, style=solid];
m2_136 -> m2_147  [color=darkseagreen4, key=1, label=performer, style=dashed];
m2_137 -> m2_10  [key=2, style=dotted];
m2_137 -> m2_138  [key=0, style=solid];
m2_137 -> m2_146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_138 -> m2_133  [color=blue, key=0, style=bold];
m2_12 -> m2_13  [key=0, style=solid];
m2_196 -> m2_197  [color=green, key=0, style=solid];
m2_200 -> m2_201  [color=green, key=0, style=solid];
m2_205 -> m2_206  [color=green, key=0, style=solid];
m2_205 -> m2_25  [color=green, key=2, style=dotted];
m2_204 -> m2_205  [color=green, key=0, style=solid];
m2_206 -> m2_204  [color=blue, key=0, style=bold];
m2_197 -> m2_198  [color=green, key=0, style=solid];
m2_197 -> m2_199  [color=green, key=2, style=dotted];
m2_198 -> m2_196  [color=blue, key=0, style=bold];
m2_201 -> m2_202  [color=green, key=0, style=solid];
m2_201 -> m2_203  [color=green, key=2, style=dotted];
m2_202 -> m2_200  [color=blue, key=0, style=bold];
m2_62 -> m2_63  [key=0, style=solid];
m2_62 -> m2_64  [key=2, style=dotted];
m2_99 -> m2_100  [key=0, style=solid];
m2_99 -> m2_101  [key=2, style=dotted];
m2_128 -> m2_129  [key=0, style=solid];
m2_128 -> m2_42  [key=2, style=dotted];
m2_131 -> m2_25  [key=2, style=dotted];
m2_131 -> m2_132  [key=0, style=solid];
m2_144 -> m2_145  [key=0, style=solid];
m2_144 -> m2_42  [key=2, style=dotted];
m2_147 -> m2_25  [key=2, style=dotted];
m2_147 -> m2_148  [key=0, style=solid];
m2_160 -> m2_25  [key=2, style=dotted];
m2_160 -> m2_161  [key=0, style=solid];
m2_174 -> m2_25  [key=2, style=dotted];
m2_174 -> m2_175  [key=0, style=solid];
m2_188 -> m2_25  [key=2, style=dotted];
m2_188 -> m2_189  [key=0, style=solid];
m2_124 -> m2_10  [key=2, style=dotted];
m2_124 -> m2_125  [key=0, style=solid];
m2_124 -> m2_126  [key=2, style=dotted];
m2_141 -> m2_10  [key=2, style=dotted];
m2_141 -> m2_142  [key=0, style=solid];
m2_141 -> m2_126  [key=2, style=dotted];
m2_27 -> m2_28  [key=0, style=solid];
m2_39 -> m2_40  [key=0, style=solid];
m2_50 -> m2_51  [key=0, style=solid];
m2_61 -> m2_62  [key=0, style=solid];
m2_63 -> m2_61  [color=blue, key=0, style=bold];
m2_98 -> m2_99  [key=0, style=solid];
m2_100 -> m2_98  [color=blue, key=0, style=bold];
m2_109 -> m2_110  [key=0, style=solid];
m2_123 -> m2_124  [key=0, style=solid];
m2_127 -> m2_128  [key=0, style=solid];
m2_129 -> m2_127  [color=blue, key=0, style=bold];
m2_130 -> m2_131  [key=0, style=solid];
m2_132 -> m2_130  [color=blue, key=0, style=bold];
m2_140 -> m2_141  [key=0, style=solid];
m2_143 -> m2_144  [key=0, style=solid];
m2_145 -> m2_143  [color=blue, key=0, style=bold];
m2_146 -> m2_147  [key=0, style=solid];
m2_148 -> m2_146  [color=blue, key=0, style=bold];
m2_159 -> m2_160  [key=0, style=solid];
m2_161 -> m2_159  [color=blue, key=0, style=bold];
m2_169 -> m2_170  [key=0, style=solid];
m2_173 -> m2_174  [key=0, style=solid];
m2_175 -> m2_173  [color=blue, key=0, style=bold];
m2_183 -> m2_184  [key=0, style=solid];
m2_187 -> m2_188  [key=0, style=solid];
m2_189 -> m2_187  [color=blue, key=0, style=bold];
m2_213 -> m2_214  [key=0, style=solid];
m2_125 -> m2_123  [color=blue, key=0, style=bold];
m2_142 -> m2_140  [color=blue, key=0, style=bold];
m2_29 -> m2_27  [color=blue, key=0, style=bold];
m2_28 -> m2_29  [key=0, style=solid];
m2_28 -> m2_30  [key=2, style=dotted];
m2_41 -> m2_39  [color=blue, key=0, style=bold];
m2_40 -> m2_42  [key=2, style=dotted];
m2_40 -> m2_41  [key=0, style=solid];
m2_52 -> m2_50  [color=blue, key=0, style=bold];
m2_51 -> m2_52  [key=0, style=solid];
m2_51 -> m2_53  [key=2, style=dotted];
m2_110 -> m2_112  [key=2, style=dotted];
m2_110 -> m2_111  [key=0, style=solid];
m2_111 -> m2_109  [color=blue, key=0, style=bold];
m2_171 -> m2_169  [color=blue, key=0, style=bold];
m2_170 -> m2_171  [key=0, style=solid];
m2_170 -> m2_172  [key=2, style=dotted];
m2_185 -> m2_183  [color=blue, key=0, style=bold];
m2_184 -> m2_185  [key=0, style=solid];
m2_184 -> m2_186  [key=2, style=dotted];
m2_215 -> m2_213  [color=blue, key=0, style=bold];
m2_214 -> m2_215  [key=0, style=solid];
m2_214 -> m2_216  [key=2, style=dotted];
m2_13 -> m2_14  [key=0, style=solid];
m2_13 -> m2_15  [key=2, style=dotted];
m2_14 -> m2_12  [color=blue, key=0, style=bold];
m2_80 -> m2_81  [key=0, style=solid];
m2_85 -> m2_86  [key=0, style=solid];
m2_85 -> m2_79  [key=2, style=dotted];
m2_86 -> m2_24  [key=2, style=dotted];
m2_86 -> m2_87  [key=0, style=solid];
m2_87 -> m2_25  [key=2, style=dotted];
m2_87 -> m2_88  [key=0, style=solid];
m2_82 -> m2_85  [color=darkseagreen4, key=1, label=convertedDate, style=dashed];
m2_82 -> m2_83  [key=0, style=solid];
m2_82 -> m2_90  [key=2, style=dotted];
m2_83 -> m2_85  [color=darkseagreen4, key=1, label=type, style=dashed];
m2_83 -> m2_84  [key=0, style=solid];
m2_84 -> m2_85  [key=0, style=solid];
m2_84 -> m2_78  [key=2, style=dotted];
m2_88 -> m2_89  [key=0, style=solid];
m2_88 -> m2_26  [key=2, style=dotted];
m2_81 -> m2_82  [key=0, style=solid];
m2_89 -> m2_80  [color=blue, key=0, style=bold];
m2_172 -> m2_224  [key=0, style=solid];
m2_224 -> m2_225  [key=0, style=solid];
m2_225 -> m2_172  [color=blue, key=0, style=bold];
m2_31 -> m2_32  [key=0, style=solid];
m2_33 -> m2_34  [key=0, style=solid];
m2_33 -> m2_38  [key=2, style=dotted];
m2_33 -> m2_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_34 -> m2_24  [key=2, style=dotted];
m2_34 -> m2_35  [key=0, style=solid];
m2_35 -> m2_25  [key=2, style=dotted];
m2_35 -> m2_36  [key=0, style=solid];
m2_32 -> m2_33  [key=0, style=solid];
m2_36 -> m2_37  [key=0, style=solid];
m2_36 -> m2_26  [key=2, style=dotted];
m2_37 -> m2_31  [color=blue, key=0, style=bold];
m2_176 -> m2_177  [key=0, style=solid];
m2_177 -> m2_23  [key=2, style=dotted];
m2_177 -> m2_178  [key=0, style=solid];
m2_177 -> m2_183  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_178 -> m2_24  [key=2, style=dotted];
m2_178 -> m2_179  [key=0, style=solid];
m2_178 -> m2_188  [color=darkseagreen4, key=1, label=performer, style=dashed];
m2_179 -> m2_10  [key=2, style=dotted];
m2_179 -> m2_180  [key=0, style=solid];
m2_179 -> m2_187  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_179 -> m2_181  [color=darkseagreen4, key=1, label=thrownException, style=dashed];
m2_180 -> m2_10  [key=2, style=dotted];
m2_180 -> m2_181  [key=0, style=solid];
m2_181 -> m2_182  [key=0, style=solid];
m2_181 -> d33  [key=2, style=dotted];
m2_182 -> m2_176  [color=blue, key=0, style=bold];
m2_30 -> m2_242  [key=0, style=solid];
m2_242 -> m2_243  [key=0, style=solid];
m2_243 -> m2_30  [color=blue, key=0, style=bold];
m2_199 -> m2_236  [key=0, style=solid];
m2_236 -> m2_237  [key=0, style=solid];
m2_236 -> m2_238  [key=2, style=dotted];
m2_237 -> m2_199  [color=blue, key=0, style=bold];
m2_112 -> m2_104  [color=darkorchid, key=3, label="Parameter variable string[] argument", style=bold];
m2_112 -> m2_232  [key=0, style=solid];
m2_112 -> m2_233  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m2_232 -> m2_233  [key=0, style=solid];
m2_233 -> m2_234  [key=0, style=solid];
m2_233 -> m2_235  [key=2, style=dotted];
m2_234 -> m2_112  [color=blue, key=0, style=bold];
m2_226 -> m2_227  [key=0, style=solid];
m2_227 -> m2_120  [key=2, style=dotted];
m2_227 -> m2_228  [key=0, style=solid];
m2_228 -> m2_226  [color=blue, key=0, style=bold];
m2_42 -> m2_217  [key=0, style=solid];
m2_217 -> m2_218  [key=0, style=solid];
m2_218 -> m2_42  [color=blue, key=0, style=bold];
m2_254 -> m2_191  [color=green, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_192  [color=green, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_193  [color=green, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_194  [color=green, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_205  [color=green, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_1  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_2  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_18  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_19  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_20  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_33  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_34  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_35  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_45  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_46  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_47  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_56  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_62  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_57  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_58  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_71  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_72  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_73  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_85  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_86  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_87  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_93  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_99  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_94  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_95  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_104  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_105  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_106  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_115  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_116  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_128  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_117  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_118  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_131  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_134  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_135  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_144  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_136  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_137  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_147  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_152  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_153  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_154  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_160  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_164  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_165  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_166  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_174  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_177  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_178  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_179  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_188  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_208  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_209  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_210  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_251  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_260 -> m2_205  [color=green, key=1, label=performer, style=dashed];
m2_255 -> m2_131  [color=darkseagreen4, key=1, label=performer, style=dashed];
m2_256 -> m2_147  [color=darkseagreen4, key=1, label=performer, style=dashed];
m2_257 -> m2_160  [color=darkseagreen4, key=1, label=performer, style=dashed];
m2_258 -> m2_174  [color=darkseagreen4, key=1, label=performer, style=dashed];
m2_259 -> m2_188  [color=darkseagreen4, key=1, label=performer, style=dashed];
m3_24 -> m3_31  [color=red, key=0, style=solid];
m3_31 -> m3_32  [color=red, key=0, style=solid];
m3_32 -> m3_24  [color=blue, key=0, style=bold];
m3_0 -> m3_1  [key=0, style=solid];
m3_0 -> m3_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m3_0 -> m3_4  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=0, style=solid];
m3_3 -> m3_4  [key=0, style=solid];
m3_4 -> m3_5  [key=0, style=solid];
m3_2 -> m3_5  [key=0, style=solid];
m3_2 -> m3_6  [key=2, style=dotted];
m3_5 -> m3_0  [color=blue, key=0, style=bold];
m3_7 -> m3_8  [key=0, style=solid];
m3_7 -> m3_12  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m3_7 -> m3_15  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m3_8 -> m3_9  [key=0, style=solid];
m3_8 -> m3_17  [key=2, style=dotted];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_19  [key=2, style=dotted];
m3_12 -> m3_12  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m3_15 -> m3_16  [key=0, style=solid];
m3_15 -> m3_19  [key=2, style=dotted];
m3_15 -> m3_15  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m3_9 -> m3_10  [color=red, key=0, style=solid];
m3_9 -> m3_9  [color=darkorchid, key=3, label="Local variable int removedCount", style=bold];
m3_10 -> m3_11  [color=red, key=0, style=solid];
m3_10 -> m3_18  [color=red, key=2, style=dotted];
m3_10 -> m3_21  [color=red, key=1, label="lambda expression", style=dashed];
m3_10 -> m3_14  [color=red, key=1, label=removedCount, style=dashed];
m3_11 -> m3_12  [key=0, style=solid];
m3_11 -> m3_14  [key=0, style=solid];
m3_14 -> m3_9  [key=0, style=solid];
m3_14 -> m3_15  [key=0, style=solid];
m3_13 -> m3_14  [key=0, style=solid];
m3_13 -> m3_20  [key=2, style=dotted];
m3_13 -> m3_13  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m3_13 -> m3_15  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m3_16 -> m3_7  [color=blue, key=0, style=bold];
m3_26 -> m3_27  [key=0, style=solid];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_29  [key=2, style=dotted];
m3_27 -> m3_30  [key=2, style=dotted];
m3_28 -> m3_26  [color=blue, key=0, style=bold];
m3_21 -> m3_22  [color=red, key=0, style=solid];
m3_22 -> m3_23  [color=red, key=0, style=solid];
m3_22 -> m3_24  [color=red, key=2, style=dotted];
m3_22 -> d268  [color=red, key=2, style=dotted];
m3_23 -> m3_21  [color=blue, key=0, style=bold];
m3_33 -> m3_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.CountersAggregator", style=dashed];
m3_33 -> m3_4  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.CountersAggregator", style=dashed];
m3_33 -> m3_10  [color=red, key=1, label="Hangfire.SqlServer.CountersAggregator", style=dashed];
m3_33 -> m3_15  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.CountersAggregator", style=dashed];
m3_33 -> m3_27  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.CountersAggregator", style=dashed];
m4_67 -> m4_68  [key=0, style=solid];
m4_72 -> m4_35  [key=2, style=dotted];
m4_72 -> m4_73  [key=0, style=solid];
m4_70 -> m4_30  [key=2, style=dotted];
m4_70 -> m4_71  [key=0, style=solid];
m4_71 -> m4_72  [key=0, style=solid];
m4_71 -> m4_66  [key=2, style=dotted];
m4_73 -> m4_74  [key=0, style=solid];
m4_73 -> m4_44  [key=2, style=dotted];
m4_69 -> m4_70  [key=0, style=solid];
m4_69 -> m4_22  [key=2, style=dotted];
m4_74 -> m4_26  [key=2, style=dotted];
m4_74 -> m4_75  [key=0, style=solid];
m4_68 -> m4_69  [key=0, style=solid];
m4_68 -> m4_43  [key=2, style=dotted];
m4_75 -> m4_67  [color=blue, key=0, style=bold];
m4_23 -> m4_24  [key=0, style=solid];
m4_23 -> n25  [key=2, style=dotted];
m4_16 -> m4_17  [key=0, style=solid];
m4_17 -> m4_18  [key=0, style=solid];
m4_17 -> m4_5  [key=2, style=dotted];
m4_17 -> m4_21  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_18 -> m4_19  [key=0, style=solid];
m4_18 -> m4_12  [key=2, style=dotted];
m4_18 -> m4_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_19 -> m4_16  [color=blue, key=0, style=bold];
m4_24 -> m4_25  [key=0, style=solid];
m4_24 -> m4_22  [color=blue, key=0, style=bold];
m4_25 -> m4_26  [key=0, style=solid];
m4_25 -> m4_5  [key=2, style=dotted];
m4_25 -> m4_27  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_26 -> m4_27  [key=0, style=solid];
m4_26 -> m4_23  [key=2, style=dotted];
m4_27 -> m4_28  [key=0, style=solid];
m4_27 -> m4_23  [key=2, style=dotted];
m4_27 -> m4_29  [key=2, style=dotted];
m4_28 -> m4_24  [color=blue, key=0, style=bold];
m4_28 -> m4_26  [color=blue, key=0, style=bold];
m4_36 -> m4_37  [key=0, style=solid];
m4_39 -> m4_30  [key=2, style=dotted];
m4_39 -> m4_40  [key=0, style=solid];
m4_38 -> m4_39  [key=0, style=solid];
m4_38 -> m4_22  [key=2, style=dotted];
m4_40 -> m4_41  [key=0, style=solid];
m4_40 -> m4_44  [key=2, style=dotted];
m4_41 -> m4_26  [key=2, style=dotted];
m4_41 -> m4_42  [key=0, style=solid];
m4_37 -> m4_38  [key=0, style=solid];
m4_37 -> m4_43  [key=2, style=dotted];
m4_42 -> m4_36  [color=blue, key=0, style=bold];
m4_57 -> m4_58  [key=0, style=solid];
m4_63 -> m4_35  [key=2, style=dotted];
m4_63 -> m4_64  [key=0, style=solid];
m4_60 -> m4_30  [key=2, style=dotted];
m4_60 -> m4_61  [key=0, style=solid];
m4_62 -> m4_63  [key=0, style=solid];
m4_62 -> m4_44  [key=2, style=dotted];
m4_64 -> m4_65  [key=0, style=solid];
m4_64 -> m4_26  [key=2, style=dotted];
m4_59 -> m4_60  [key=0, style=solid];
m4_59 -> m4_22  [key=2, style=dotted];
m4_61 -> m4_62  [key=0, style=solid];
m4_61 -> m4_66  [key=2, style=dotted];
m4_58 -> m4_59  [key=0, style=solid];
m4_58 -> m4_43  [key=2, style=dotted];
m4_65 -> m4_57  [color=blue, key=0, style=bold];
m4_8 -> m4_9  [key=0, style=solid];
m4_9 -> m4_10  [key=0, style=solid];
m4_9 -> m4_5  [key=2, style=dotted];
m4_9 -> m4_14  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_10 -> m4_11  [key=0, style=solid];
m4_10 -> m4_12  [key=2, style=dotted];
m4_10 -> m4_13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_11 -> m4_8  [color=blue, key=0, style=bold];
m4_20 -> m4_21  [key=0, style=solid];
m4_14 -> m4_15  [key=0, style=solid];
m4_13 -> m4_14  [key=0, style=solid];
m4_15 -> m4_13  [color=blue, key=0, style=bold];
m4_21 -> m4_22  [key=0, style=solid];
m4_21 -> m4_23  [key=2, style=dotted];
m4_22 -> m4_20  [color=blue, key=0, style=bold];
m4_22 -> m4_70  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m4_22 -> m4_61  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m4_22 -> m4_23  [key=0, style=solid];
m4_22 -> m4_37  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m4_22 -> m4_46  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m4_22 -> m4_58  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m4_22 -> m4_68  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m4_45 -> m4_46  [key=0, style=solid];
m4_48 -> m4_30  [key=2, style=dotted];
m4_48 -> m4_49  [key=0, style=solid];
m4_47 -> m4_48  [key=0, style=solid];
m4_47 -> m4_22  [key=2, style=dotted];
m4_49 -> m4_50  [key=0, style=solid];
m4_49 -> m4_55  [key=2, style=dotted];
m4_49 -> m4_51  [color=darkseagreen4, key=1, label=table1, style=dashed];
m4_49 -> m4_52  [color=darkseagreen4, key=1, label=table1, style=dashed];
m4_53 -> m4_26  [key=2, style=dotted];
m4_53 -> m4_54  [key=0, style=solid];
m4_46 -> m4_47  [key=0, style=solid];
m4_46 -> m4_43  [key=2, style=dotted];
m4_50 -> m4_51  [key=0, style=solid];
m4_50 -> m4_56  [key=2, style=dotted];
m4_51 -> m4_52  [key=0, style=solid];
m4_51 -> m4_56  [key=2, style=dotted];
m4_52 -> m4_44  [key=2, style=dotted];
m4_52 -> m4_53  [key=0, style=solid];
m4_54 -> m4_45  [color=blue, key=0, style=bold];
m4_30 -> m4_31  [key=0, style=solid];
m4_30 -> m4_14  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_32 -> m4_33  [color=green, key=0, style=solid];
m4_32 -> m4_35  [color=green, key=2, style=dotted];
m4_31 -> m4_32  [color=green, key=0, style=solid];
m4_31 -> m4_34  [key=2, style=dotted];
m4_31 -> m4_21  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_33 -> m4_30  [color=blue, key=0, style=bold];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_5  [key=2, style=dotted];
m4_1 -> m4_3  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_6  [key=2, style=dotted];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_7  [key=2, style=dotted];
m4_4 -> m4_0  [color=blue, key=0, style=bold];
m4_76 -> m4_39  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m4_76 -> m4_48  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m4_76 -> m4_60  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m4_76 -> m4_70  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m4_76 -> m4_64  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m4_76 -> m4_38  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m4_76 -> m4_41  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m4_76 -> m4_47  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m4_76 -> m4_53  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m4_76 -> m4_59  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m4_76 -> m4_69  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m4_76 -> m4_74  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m5_0 -> m5_1  [key=0, style=solid];
m5_10 -> m5_11  [color=green, key=0, style=solid];
m5_10 -> m5_29  [color=green, key=0, style=solid];
m5_10 -> m5_12  [color=green, key=1, label=server, style=dashed];
m5_10 -> m5_14  [color=green, key=1, label=server, style=dashed];
m5_10 -> m5_16  [color=green, key=1, label=server, style=dashed];
m5_10 -> m5_18  [color=green, key=1, label=server, style=dashed];
m5_10 -> m5_20  [color=green, key=1, label=server, style=dashed];
m5_10 -> m5_22  [color=green, key=1, label=server, style=dashed];
m5_10 -> m5_24  [color=green, key=1, label=server, style=dashed];
m5_10 -> m5_26  [color=green, key=1, label=server, style=dashed];
m5_5 -> m5_10  [color=green, key=1, label=servers, style=dashed];
m5_5 -> m5_6  [key=0, style=solid];
m5_5 -> m5_34  [key=2, style=dotted];
m5_5 -> m5_7  [color=darkseagreen4, key=1, label=servers, style=dashed];
m5_9 -> m5_10  [color=green, key=0, style=solid];
m5_9 -> m5_31  [key=2, style=dotted];
m5_28 -> m5_10  [color=green, key=0, style=solid];
m5_28 -> m5_31  [key=2, style=dotted];
m5_11 -> m5_12  [key=0, style=solid];
m5_11 -> m5_31  [key=2, style=dotted];
m5_29 -> m5_30  [key=0, style=solid];
m5_29 -> m5_31  [key=2, style=dotted];
m5_12 -> m5_13  [key=0, style=solid];
m5_12 -> m5_35  [key=2, style=dotted];
m5_12 -> m5_36  [key=2, style=dotted];
m5_14 -> m5_15  [key=0, style=solid];
m5_14 -> m5_36  [key=2, style=dotted];
m5_16 -> m5_17  [key=0, style=solid];
m5_16 -> m5_37  [key=2, style=dotted];
m5_16 -> m5_38  [key=2, style=dotted];
m5_16 -> m5_39  [key=2, style=dotted];
m5_16 -> m5_40  [key=2, style=dotted];
m5_18 -> m5_19  [key=0, style=solid];
m5_18 -> m5_41  [key=2, style=dotted];
m5_18 -> m5_36  [key=2, style=dotted];
m5_20 -> m5_21  [key=0, style=solid];
m5_20 -> m5_36  [key=2, style=dotted];
m5_22 -> m5_28  [key=0, style=solid];
m5_22 -> m5_23  [key=0, style=solid];
m5_24 -> m5_25  [key=0, style=solid];
m5_24 -> m5_41  [key=2, style=dotted];
m5_24 -> m5_36  [key=2, style=dotted];
m5_26 -> m5_27  [key=0, style=solid];
m5_26 -> m5_36  [key=2, style=dotted];
m5_4 -> m5_5  [key=0, style=solid];
m5_4 -> m5_33  [key=2, style=dotted];
m5_6 -> m5_7  [key=0, style=solid];
m5_6 -> m5_31  [key=2, style=dotted];
m5_7 -> m5_9  [key=0, style=solid];
m5_7 -> m5_8  [key=0, style=solid];
m5_27 -> m5_28  [key=0, style=solid];
m5_27 -> m5_31  [key=2, style=dotted];
m5_13 -> m5_14  [key=0, style=solid];
m5_13 -> m5_31  [key=2, style=dotted];
m5_15 -> m5_16  [key=0, style=solid];
m5_15 -> m5_31  [key=2, style=dotted];
m5_17 -> m5_18  [key=0, style=solid];
m5_17 -> m5_31  [key=2, style=dotted];
m5_19 -> m5_20  [key=0, style=solid];
m5_19 -> m5_31  [key=2, style=dotted];
m5_21 -> m5_22  [key=0, style=solid];
m5_21 -> m5_31  [key=2, style=dotted];
m5_23 -> m5_24  [key=0, style=solid];
m5_23 -> m5_31  [key=2, style=dotted];
m5_25 -> m5_26  [key=0, style=solid];
m5_25 -> m5_31  [key=2, style=dotted];
m5_3 -> m5_4  [key=0, style=solid];
m5_8 -> m5_31  [key=2, style=dotted];
m5_8 -> m5_30  [key=0, style=solid];
m5_1 -> m5_31  [key=2, style=dotted];
m5_1 -> m5_2  [key=0, style=solid];
m5_2 -> m5_3  [key=0, style=solid];
m5_2 -> m5_32  [key=2, style=dotted];
m5_30 -> m5_0  [color=blue, key=0, style=bold];
m5_42 -> m5_9  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_28  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_11  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_29  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_12  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_14  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_16  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_18  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_20  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_24  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_26  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_6  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_1  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_2  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_8  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_13  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_15  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_17  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_19  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_21  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_23  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_25  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m5_42 -> m5_27  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m6_10 -> m6_0  [color=blue, key=0, style=bold];
m6_31 -> m6_32  [color=green, key=0, style=solid];
m6_32 -> m6_33  [color=green, key=0, style=solid];
m6_32 -> m6_35  [color=green, key=2, style=dotted];
m6_32 -> m6_37  [color=green, key=1, label="lambda expression", style=dashed];
m6_33 -> m6_34  [key=0, style=solid];
m6_33 -> d33  [key=2, style=dotted];
m6_33 -> m6_31  [color=blue, key=0, style=bold];
m6_34 -> m6_31  [color=blue, key=0, style=bold];
m6_34 -> m6_35  [color=red, key=0, style=solid];
m6_67 -> m6_68  [key=0, style=solid];
m6_68 -> m6_53  [key=2, style=dotted];
m6_68 -> m6_69  [key=0, style=solid];
m6_68 -> m6_73  [color=darkseagreen4, key=1, label=manager, style=dashed];
m6_69 -> m6_35  [key=2, style=dotted];
m6_69 -> m6_70  [key=0, style=solid];
m6_69 -> m6_72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_70 -> d33  [key=2, style=dotted];
m6_70 -> m6_71  [key=0, style=solid];
m6_71 -> m6_67  [color=blue, key=0, style=bold];
m6_40 -> m6_38  [color=blue, key=0, style=bold];
m6_57 -> m6_18  [color=red, key=1, label=options, style=dashed];
m6_18 -> m6_19  [color=red, key=0, style=solid];
m6_156 -> m6_157  [color=green, key=0, style=solid];
m6_157 -> m6_158  [color=green, key=0, style=solid];
m6_157 -> m6_16  [color=green, key=2, style=dotted];
m6_157 -> m6_138  [color=green, key=2, style=dotted];
m6_157 -> m6_11  [color=green, key=2, style=dotted];
m6_157 -> m6_139  [color=green, key=2, style=dotted];
m6_157 -> m6_140  [color=green, key=2, style=dotted];
m6_157 -> m6_17  [color=green, key=2, style=dotted];
m6_157 -> m6_162  [color=green, key=1, label="lambda expression", style=dashed];
m6_157 -> m6_165  [color=green, key=1, label="lambda expression", style=dashed];
m6_158 -> m6_159  [color=green, key=0, style=solid];
m6_158 -> m6_53  [color=green, key=2, style=dotted];
m6_159 -> m6_160  [color=green, key=0, style=solid];
m6_159 -> m6_131  [color=green, key=2, style=dotted];
m6_160 -> m6_161  [color=green, key=0, style=solid];
m6_160 -> m6_96  [color=green, key=2, style=dotted];
m6_160 -> m6_168  [color=green, key=1, label="lambda expression", style=dashed];
m6_161 -> m6_156  [color=blue, key=0, style=bold];
m6_12 -> m6_13  [key=0, style=solid];
m6_13 -> m6_14  [color=red, key=0, style=solid];
m6_13 -> m6_8  [key=2, style=dotted];
m6_13 -> m6_18  [color=red, key=1, label=options, style=dashed];
m6_14 -> m6_15  [color=red, key=0, style=solid];
m6_14 -> m6_16  [color=red, key=2, style=dotted];
m6_14 -> m6_17  [color=red, key=1, label="lambda expression", style=dashed];
m6_15 -> m6_12  [color=blue, key=0, style=bold];
m6_8 -> m6_53  [key=0, style=solid];
m6_8 -> m6_9  [key=0, style=solid];
m6_8 -> m6_18  [key=2, style=dotted];
m6_53 -> m6_54  [key=0, style=solid];
m6_53 -> m6_55  [key=2, style=dotted];
m6_53 -> m6_212  [color=green, key=0, style=solid];
m6_54 -> m6_8  [color=blue, key=0, style=bold];
m6_54 -> m6_55  [key=0, style=solid];
m6_194 -> m6_195  [key=0, style=solid];
m6_195 -> m6_53  [key=2, style=dotted];
m6_195 -> m6_196  [key=0, style=solid];
m6_196 -> m6_197  [key=0, style=solid];
m6_196 -> m6_193  [key=2, style=dotted];
m6_197 -> m6_96  [key=2, style=dotted];
m6_197 -> m6_198  [key=0, style=solid];
m6_197 -> m6_201  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_198 -> m6_96  [key=2, style=dotted];
m6_198 -> m6_199  [key=0, style=solid];
m6_198 -> m6_205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_199 -> m6_96  [key=2, style=dotted];
m6_199 -> m6_200  [key=0, style=solid];
m6_199 -> m6_209  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_200 -> m6_194  [color=blue, key=0, style=bold];
m6_75 -> m6_76  [key=0, style=solid];
m6_76 -> m6_53  [key=2, style=dotted];
m6_76 -> m6_77  [key=0, style=solid];
m6_76 -> m6_81  [color=darkseagreen4, key=1, label=manager, style=dashed];
m6_77 -> m6_35  [key=2, style=dotted];
m6_77 -> m6_78  [key=0, style=solid];
m6_77 -> m6_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_78 -> d33  [key=2, style=dotted];
m6_78 -> m6_79  [key=0, style=solid];
m6_79 -> m6_75  [color=blue, key=0, style=bold];
m6_91 -> m6_92  [key=0, style=solid];
m6_92 -> m6_53  [key=2, style=dotted];
m6_92 -> m6_93  [key=0, style=solid];
m6_93 -> m6_94  [key=0, style=solid];
m6_93 -> m6_58  [key=2, style=dotted];
m6_94 -> m6_96  [key=2, style=dotted];
m6_94 -> m6_95  [key=0, style=solid];
m6_94 -> m6_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_95 -> m6_91  [color=blue, key=0, style=bold];
m6_35 -> m6_36  [color=red, key=0, style=solid];
m6_35 -> m6_8  [color=red, key=2, style=dotted];
m6_35 -> m6_39  [color=red, key=1, label=options, style=dashed];
m6_58 -> m6_25  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_9 -> m6_16  [key=2, style=dotted];
m6_9 -> m6_17  [key=2, style=dotted];
m6_9 -> m6_10  [key=0, style=solid];
m6_9 -> m6_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_186 -> m6_187  [key=0, style=solid];
m6_187 -> m6_53  [key=2, style=dotted];
m6_187 -> m6_188  [key=0, style=solid];
m6_187 -> m6_191  [color=darkseagreen4, key=1, label=manager, style=dashed];
m6_188 -> m6_35  [key=2, style=dotted];
m6_188 -> m6_189  [key=0, style=solid];
m6_188 -> m6_190  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_189 -> m6_186  [color=blue, key=0, style=bold];
m6_174 -> m6_175  [key=0, style=solid];
m6_177 -> m6_178  [color=green, key=0, style=solid];
m6_177 -> m6_96  [color=green, key=2, style=dotted];
m6_177 -> m6_183  [color=green, key=1, label="lambda expression", style=dashed];
m6_176 -> m6_177  [color=green, key=0, style=solid];
m6_176 -> m6_179  [key=2, style=dotted];
m6_176 -> m6_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_175 -> m6_53  [key=2, style=dotted];
m6_175 -> m6_176  [key=0, style=solid];
m6_175 -> m6_181  [color=darkseagreen4, key=1, label=manager, style=dashed];
m6_178 -> m6_174  [color=blue, key=0, style=bold];
m6_36 -> m6_37  [key=0, style=solid];
m6_36 -> m6_16  [key=2, style=dotted];
m6_36 -> m6_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_37 -> m6_34  [color=blue, key=0, style=bold];
m6_37 -> m6_38  [color=green, key=0, style=solid];
m6_26 -> m6_24  [color=blue, key=0, style=bold];
m6_132 -> m6_133  [key=0, style=solid];
m6_136 -> m6_137  [color=green, key=0, style=solid];
m6_136 -> m6_96  [color=green, key=2, style=dotted];
m6_136 -> m6_149  [color=green, key=1, label="lambda expression", style=dashed];
m6_135 -> m6_136  [color=green, key=0, style=solid];
m6_135 -> m6_131  [key=2, style=dotted];
m6_133 -> m6_16  [key=2, style=dotted];
m6_133 -> m6_138  [key=2, style=dotted];
m6_133 -> m6_11  [key=2, style=dotted];
m6_133 -> m6_139  [key=2, style=dotted];
m6_133 -> m6_140  [key=2, style=dotted];
m6_133 -> m6_17  [key=2, style=dotted];
m6_133 -> m6_134  [key=0, style=solid];
m6_133 -> m6_141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_133 -> m6_145  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_134 -> m6_135  [key=0, style=solid];
m6_134 -> m6_53  [key=2, style=dotted];
m6_137 -> m6_132  [color=blue, key=0, style=bold];
m6_52 -> m6_48  [color=blue, key=0, style=bold];
m6_20 -> m6_21  [key=0, style=solid];
m6_21 -> m6_22  [key=0, style=solid];
m6_21 -> m6_8  [key=2, style=dotted];
m6_21 -> m6_25  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_22 -> m6_23  [key=0, style=solid];
m6_22 -> m6_16  [key=2, style=dotted];
m6_22 -> m6_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_23 -> m6_20  [color=blue, key=0, style=bold];
m6_23 -> m6_24  [key=0, style=solid];
m6_48 -> m6_49  [key=0, style=solid];
m6_49 -> m6_50  [key=0, style=solid];
m6_49 -> m6_8  [key=2, style=dotted];
m6_49 -> m6_53  [key=2, style=dotted];
m6_49 -> m6_55  [color=darkseagreen4, key=1, label=manager, style=dashed];
m6_50 -> m6_51  [key=0, style=solid];
m6_50 -> m6_52  [key=2, style=dotted];
m6_50 -> m6_35  [key=2, style=dotted];
m6_50 -> m6_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_51 -> m6_48  [color=blue, key=0, style=bold];
m6_51 -> d33  [key=2, style=dotted];
m6_51 -> m6_52  [key=0, style=solid];
m6_212 -> m6_213  [color=green, key=0, style=solid];
m6_212 -> m6_40  [color=green, key=2, style=dotted];
m6_213 -> m6_53  [color=blue, key=0, style=bold];
m6_41 -> m6_42  [key=0, style=solid];
m6_43 -> m6_44  [color=green, key=0, style=solid];
m6_43 -> d33  [color=green, key=2, style=dotted];
m6_43 -> m6_16  [key=2, style=dotted];
m6_43 -> m6_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_42 -> m6_43  [color=green, key=0, style=solid];
m6_42 -> m6_35  [key=2, style=dotted];
m6_42 -> m6_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_42 -> m6_8  [key=2, style=dotted];
m6_42 -> m6_46  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_44 -> m6_41  [color=blue, key=0, style=bold];
m6_105 -> m6_101  [color=blue, key=0, style=bold];
m6_102 -> m6_53  [key=2, style=dotted];
m6_102 -> m6_103  [key=0, style=solid];
m6_103 -> m6_104  [key=0, style=solid];
m6_103 -> m6_58  [key=2, style=dotted];
m6_104 -> m6_96  [key=2, style=dotted];
m6_104 -> m6_105  [key=0, style=solid];
m6_104 -> m6_106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_101 -> m6_102  [key=0, style=solid];
m6_55 -> m6_56  [key=0, style=solid];
m6_55 -> m6_57  [key=2, style=dotted];
m6_55 -> m6_58  [key=2, style=dotted];
m6_115 -> m6_116  [key=0, style=solid];
m6_116 -> m6_53  [key=2, style=dotted];
m6_116 -> m6_117  [key=0, style=solid];
m6_117 -> m6_118  [key=0, style=solid];
m6_117 -> m6_58  [key=2, style=dotted];
m6_118 -> m6_96  [key=2, style=dotted];
m6_118 -> m6_119  [key=0, style=solid];
m6_118 -> m6_120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_119 -> m6_115  [color=blue, key=0, style=bold];
m6_190 -> m6_191  [key=0, style=solid];
m6_17 -> m6_18  [color=red, key=0, style=solid];
m6_19 -> m6_17  [color=blue, key=0, style=bold];
m6_25 -> m6_26  [key=0, style=solid];
m6_25 -> m6_23  [color=blue, key=0, style=bold];
m6_24 -> m6_25  [key=0, style=solid];
m6_24 -> m6_26  [key=2, style=dotted];
m6_39 -> m6_40  [key=0, style=solid];
m6_39 -> m6_37  [color=blue, key=0, style=bold];
m6_38 -> m6_39  [color=green, key=0, style=solid];
m6_38 -> m6_40  [color=green, key=2, style=dotted];
m6_46 -> m6_47  [key=0, style=solid];
m6_46 -> m6_40  [key=2, style=dotted];
m6_45 -> m6_46  [key=0, style=solid];
m6_47 -> m6_45  [color=blue, key=0, style=bold];
m6_149 -> m6_150  [color=green, key=0, style=solid];
m6_150 -> m6_151  [color=green, key=0, style=solid];
m6_150 -> m6_35  [color=green, key=2, style=dotted];
m6_150 -> m6_152  [color=green, key=2, style=dotted];
m6_150 -> m6_153  [color=green, key=1, label="lambda expression", style=dashed];
m6_151 -> m6_149  [color=blue, key=0, style=bold];
m6_153 -> m6_154  [color=green, key=0, style=solid];
m6_154 -> m6_155  [color=green, key=0, style=solid];
m6_155 -> m6_153  [color=blue, key=0, style=bold];
m6_162 -> m6_163  [color=green, key=0, style=solid];
m6_165 -> m6_166  [color=green, key=0, style=solid];
m6_168 -> m6_169  [color=green, key=0, style=solid];
m6_163 -> m6_164  [color=green, key=0, style=solid];
m6_163 -> m6_109  [color=green, key=2, style=dotted];
m6_163 -> m6_144  [color=green, key=2, style=dotted];
m6_164 -> m6_162  [color=blue, key=0, style=bold];
m6_166 -> m6_167  [color=green, key=0, style=solid];
m6_166 -> m6_148  [color=green, key=2, style=dotted];
m6_167 -> m6_165  [color=blue, key=0, style=bold];
m6_169 -> m6_170  [color=green, key=0, style=solid];
m6_169 -> m6_35  [color=green, key=2, style=dotted];
m6_169 -> m6_152  [color=green, key=2, style=dotted];
m6_169 -> m6_171  [color=green, key=1, label="lambda expression", style=dashed];
m6_170 -> m6_168  [color=blue, key=0, style=bold];
m6_171 -> m6_172  [color=green, key=0, style=solid];
m6_172 -> m6_173  [color=green, key=0, style=solid];
m6_173 -> m6_171  [color=blue, key=0, style=bold];
m6_183 -> m6_184  [color=green, key=0, style=solid];
m6_184 -> m6_185  [color=green, key=0, style=solid];
m6_184 -> m6_35  [color=green, key=2, style=dotted];
m6_184 -> m6_152  [color=green, key=2, style=dotted];
m6_185 -> m6_183  [color=blue, key=0, style=bold];
m6_65 -> m6_66  [key=0, style=solid];
m6_65 -> m6_57  [key=2, style=dotted];
m6_65 -> m6_58  [key=2, style=dotted];
m6_73 -> m6_74  [key=0, style=solid];
m6_73 -> m6_58  [key=2, style=dotted];
m6_81 -> m6_82  [key=0, style=solid];
m6_81 -> m6_58  [key=2, style=dotted];
m6_89 -> m6_90  [key=0, style=solid];
m6_89 -> m6_58  [key=2, style=dotted];
m6_98 -> m6_99  [key=0, style=solid];
m6_98 -> m6_100  [key=2, style=dotted];
m6_107 -> m6_35  [key=2, style=dotted];
m6_107 -> m6_109  [key=2, style=dotted];
m6_107 -> m6_108  [key=0, style=solid];
m6_107 -> m6_110  [key=2, style=dotted];
m6_107 -> m6_111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_142 -> m6_109  [key=2, style=dotted];
m6_142 -> m6_144  [key=2, style=dotted];
m6_142 -> m6_143  [key=0, style=solid];
m6_181 -> m6_131  [key=2, style=dotted];
m6_181 -> m6_182  [key=0, style=solid];
m6_202 -> m6_203  [key=0, style=solid];
m6_202 -> m6_204  [key=2, style=dotted];
m6_206 -> m6_109  [key=2, style=dotted];
m6_206 -> m6_207  [key=0, style=solid];
m6_206 -> m6_208  [key=2, style=dotted];
m6_129 -> m6_131  [key=2, style=dotted];
m6_129 -> m6_130  [key=0, style=solid];
m6_146 -> m6_148  [key=2, style=dotted];
m6_146 -> m6_147  [key=0, style=solid];
m6_180 -> m6_181  [key=0, style=solid];
m6_27 -> m6_28  [key=0, style=solid];
m6_56 -> m6_54  [color=blue, key=0, style=bold];
m6_56 -> m6_1  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts", style=dashed];
m6_56 -> m6_13  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts", style=dashed];
m6_56 -> m6_21  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts", style=dashed];
m6_56 -> m6_28  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts", style=dashed];
m6_56 -> m6_35  [color=red, key=1, label="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts", style=dashed];
m6_56 -> m6_42  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts", style=dashed];
m6_56 -> m6_49  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts", style=dashed];
m6_64 -> m6_65  [key=0, style=solid];
m6_66 -> m6_64  [color=blue, key=0, style=bold];
m6_72 -> m6_73  [key=0, style=solid];
m6_74 -> m6_72  [color=blue, key=0, style=bold];
m6_80 -> m6_81  [key=0, style=solid];
m6_82 -> m6_80  [color=blue, key=0, style=bold];
m6_88 -> m6_89  [key=0, style=solid];
m6_90 -> m6_88  [color=blue, key=0, style=bold];
m6_97 -> m6_98  [key=0, style=solid];
m6_99 -> m6_97  [color=blue, key=0, style=bold];
m6_106 -> m6_107  [key=0, style=solid];
m6_108 -> m6_106  [color=blue, key=0, style=bold];
m6_111 -> m6_112  [key=0, style=solid];
m6_120 -> m6_121  [key=0, style=solid];
m6_141 -> m6_142  [key=0, style=solid];
m6_145 -> m6_146  [key=0, style=solid];
m6_143 -> m6_141  [color=blue, key=0, style=bold];
m6_182 -> m6_180  [color=blue, key=0, style=bold];
m6_191 -> m6_192  [key=0, style=solid];
m6_191 -> m6_193  [key=2, style=dotted];
m6_201 -> m6_202  [key=0, style=solid];
m6_203 -> m6_201  [color=blue, key=0, style=bold];
m6_205 -> m6_206  [key=0, style=solid];
m6_207 -> m6_205  [color=blue, key=0, style=bold];
m6_209 -> m6_210  [key=0, style=solid];
m6_128 -> m6_129  [key=0, style=solid];
m6_130 -> m6_128  [color=blue, key=0, style=bold];
m6_147 -> m6_145  [color=blue, key=0, style=bold];
m6_29 -> m6_27  [color=blue, key=0, style=bold];
m6_29 -> m6_30  [key=0, style=solid];
m6_29 -> m6_16  [key=2, style=dotted];
m6_29 -> m6_31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_28 -> m6_29  [key=0, style=solid];
m6_28 -> m6_30  [key=2, style=dotted];
m6_28 -> m6_8  [key=2, style=dotted];
m6_28 -> m6_32  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_113 -> m6_111  [color=blue, key=0, style=bold];
m6_112 -> m6_113  [key=0, style=solid];
m6_112 -> m6_114  [key=2, style=dotted];
m6_122 -> m6_120  [color=blue, key=0, style=bold];
m6_121 -> m6_122  [key=0, style=solid];
m6_121 -> m6_123  [key=2, style=dotted];
m6_192 -> m6_190  [color=blue, key=0, style=bold];
m6_210 -> m6_211  [key=0, style=solid];
m6_210 -> m6_123  [key=2, style=dotted];
m6_211 -> m6_209  [color=blue, key=0, style=bold];
m6_59 -> m6_60  [key=0, style=solid];
m6_59 -> m6_32  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_60 -> m6_53  [key=2, style=dotted];
m6_60 -> m6_61  [key=0, style=solid];
m6_60 -> m6_65  [color=darkseagreen4, key=1, label=manager, style=dashed];
m6_60 -> m6_39  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_61 -> m6_35  [key=2, style=dotted];
m6_61 -> m6_62  [key=0, style=solid];
m6_61 -> m6_64  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_61 -> m6_46  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_62 -> d33  [key=2, style=dotted];
m6_62 -> m6_63  [key=0, style=solid];
m6_63 -> m6_59  [color=blue, key=0, style=bold];
m6_83 -> m6_84  [key=0, style=solid];
m6_84 -> m6_53  [key=2, style=dotted];
m6_84 -> m6_85  [key=0, style=solid];
m6_84 -> m6_89  [color=darkseagreen4, key=1, label=manager, style=dashed];
m6_85 -> m6_35  [key=2, style=dotted];
m6_85 -> m6_86  [key=0, style=solid];
m6_85 -> m6_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_86 -> d33  [key=2, style=dotted];
m6_86 -> m6_87  [key=0, style=solid];
m6_87 -> m6_83  [color=blue, key=0, style=bold];
m6_30 -> m6_27  [color=blue, key=0, style=bold];
m6_0 -> m6_1  [key=0, style=solid];
m6_5 -> m6_6  [color=green, key=0, style=solid];
m6_5 -> m6_14  [color=green, key=2, style=dotted];
m6_5 -> m6_11  [key=2, style=dotted];
m6_4 -> m6_5  [color=green, key=0, style=solid];
m6_4 -> m6_13  [key=2, style=dotted];
m6_4 -> m6_10  [key=2, style=dotted];
m6_6 -> m6_7  [key=0, style=solid];
m6_6 -> m6_15  [key=2, style=dotted];
m6_6 -> m6_11  [key=2, style=dotted];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_8  [key=2, style=dotted];
m6_1 -> m6_3  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_1 -> m6_4  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_1 -> m6_5  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_1 -> m6_6  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_2 -> m6_11  [key=2, style=dotted];
m6_2 -> m6_3  [key=0, style=solid];
m6_2 -> m6_17  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_2 -> m6_9  [key=2, style=dotted];
m6_2 -> m6_10  [key=2, style=dotted];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_12  [key=2, style=dotted];
m6_3 -> m6_10  [key=2, style=dotted];
m6_7 -> m6_16  [key=2, style=dotted];
m6_7 -> m6_17  [key=2, style=dotted];
m6_7 -> m6_8  [key=0, style=solid];
m6_7 -> m6_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_7 -> m6_0  [color=blue, key=0, style=bold];
m6_124 -> m6_125  [key=0, style=solid];
m6_125 -> m6_53  [key=2, style=dotted];
m6_125 -> m6_126  [key=0, style=solid];
m6_125 -> m6_129  [color=darkseagreen4, key=1, label=manager, style=dashed];
m6_126 -> m6_35  [key=2, style=dotted];
m6_126 -> m6_127  [key=0, style=solid];
m6_126 -> m6_128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_127 -> m6_124  [color=blue, key=0, style=bold];
m6_215 -> m6_5  [color=green, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_32  [color=green, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_38  [color=green, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_136  [color=green, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_157  [color=green, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_158  [color=green, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_159  [color=green, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_160  [color=green, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_163  [color=green, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_177  [color=green, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_212  [color=green, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_1  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_2  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_3  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_4  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_6  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_7  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_8  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_9  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_42  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_46  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_49  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_50  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_55  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_60  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_61  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_65  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_68  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_69  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_73  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_76  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_77  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_81  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_84  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_85  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_89  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_92  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_93  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_94  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_98  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_102  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_103  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_104  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_107  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_116  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_117  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_118  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_125  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_133  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_142  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_134  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_135  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_175  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_176  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_181  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_187  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_195  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_196  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_197  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_202  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_198  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_206  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_215 -> m6_199  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m6_216 -> m6_55  [color=darkseagreen4, key=1, label=manager, style=dashed];
m6_217 -> m6_65  [color=darkseagreen4, key=1, label=manager, style=dashed];
m6_218 -> m6_73  [color=darkseagreen4, key=1, label=manager, style=dashed];
m6_219 -> m6_81  [color=darkseagreen4, key=1, label=manager, style=dashed];
m6_220 -> m6_89  [color=darkseagreen4, key=1, label=manager, style=dashed];
m6_222 -> m6_181  [color=darkseagreen4, key=1, label=manager, style=dashed];
m6_221 -> m6_129  [color=darkseagreen4, key=1, label=manager, style=dashed];
m6_223 -> m6_191  [color=darkseagreen4, key=1, label=manager, style=dashed];
m7_19 -> m7_21  [key=0, style=solid];
m7_19 -> m7_23  [color=darkorchid, key=3, label="method methodReturn bool IsJobAborted", style=bold];
m7_19 -> m7_30  [color=green, key=3, label="method methodReturn bool IsJobAborted", style=bold];
m7_21 -> m7_22  [key=0, style=solid];
m7_21 -> m7_32  [key=2, style=dotted];
m7_21 -> m7_24  [color=darkseagreen4, key=1, label=state, style=dashed];
m7_21 -> m7_26  [color=darkseagreen4, key=1, label=state, style=dashed];
m7_21 -> m7_28  [color=green, key=1, label=state, style=dashed];
m7_22 -> m7_23  [key=0, style=solid];
m7_22 -> m7_24  [key=0, style=solid];
m7_24 -> m7_25  [key=0, style=solid];
m7_24 -> m7_26  [key=0, style=solid];
m7_24 -> m7_33  [key=2, style=dotted];
m7_26 -> m7_27  [key=0, style=solid];
m7_26 -> m7_28  [color=green, key=0, style=solid];
m7_26 -> m7_34  [key=2, style=dotted];
m7_28 -> m7_29  [color=green, key=0, style=solid];
m7_28 -> m7_30  [color=green, key=0, style=solid];
m7_28 -> m7_33  [color=green, key=2, style=dotted];
m7_23 -> m7_31  [key=0, style=solid];
m7_25 -> m7_31  [key=0, style=solid];
m7_27 -> m7_31  [key=0, style=solid];
m7_29 -> m7_31  [color=green, key=0, style=solid];
m7_30 -> m7_31  [color=green, key=0, style=solid];
m7_31 -> m7_19  [color=blue, key=0, style=bold];
m7_0 -> m7_1  [key=0, style=solid];
m7_0 -> m7_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_0 -> m7_5  [color=darkseagreen4, key=1, label="Hangfire.Storage.IStorageConnection", style=dashed];
m7_0 -> m7_7  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_0 -> m7_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_0 -> m7_9  [color=darkseagreen4, key=1, label="Hangfire.Storage.IStorageConnection", style=dashed];
m7_0 -> m7_10  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_3  [key=0, style=solid];
m7_3 -> m7_4  [key=0, style=solid];
m7_3 -> m7_5  [key=0, style=solid];
m7_5 -> m7_6  [key=0, style=solid];
m7_5 -> m7_7  [key=0, style=solid];
m7_7 -> m7_8  [key=0, style=solid];
m7_8 -> m7_9  [key=0, style=solid];
m7_9 -> m7_10  [key=0, style=solid];
m7_10 -> m7_11  [key=0, style=solid];
m7_2 -> m7_11  [key=0, style=solid];
m7_2 -> m7_12  [key=2, style=dotted];
m7_4 -> m7_11  [key=0, style=solid];
m7_4 -> m7_12  [key=2, style=dotted];
m7_6 -> m7_11  [key=0, style=solid];
m7_6 -> m7_12  [key=2, style=dotted];
m7_11 -> m7_0  [color=blue, key=0, style=bold];
m7_13 -> m7_14  [key=0, style=solid];
m7_14 -> m7_15  [key=0, style=solid];
m7_14 -> m7_18  [key=2, style=dotted];
m7_15 -> m7_16  [key=0, style=solid];
m7_15 -> m7_17  [key=0, style=solid];
m7_15 -> m7_19  [key=2, style=dotted];
m7_16 -> m7_17  [key=0, style=solid];
m7_16 -> m7_20  [key=2, style=dotted];
m7_17 -> m7_13  [color=blue, key=0, style=bold];
m7_35 -> m7_7  [color=darkseagreen4, key=1, label="Hangfire.Server.ServerJobCancellationToken", style=dashed];
m7_35 -> m7_8  [color=darkseagreen4, key=1, label="Hangfire.Server.ServerJobCancellationToken", style=dashed];
m7_35 -> m7_9  [color=darkseagreen4, key=1, label="Hangfire.Server.ServerJobCancellationToken", style=dashed];
m7_35 -> m7_10  [color=darkseagreen4, key=1, label="Hangfire.Server.ServerJobCancellationToken", style=dashed];
m7_35 -> m7_14  [color=darkseagreen4, key=1, label="Hangfire.Server.ServerJobCancellationToken", style=dashed];
m7_35 -> m7_15  [color=darkseagreen4, key=1, label="Hangfire.Server.ServerJobCancellationToken", style=dashed];
m7_35 -> m7_21  [color=darkseagreen4, key=1, label="Hangfire.Server.ServerJobCancellationToken", style=dashed];
m7_35 -> m7_28  [color=green, key=1, label="Hangfire.Server.ServerJobCancellationToken", style=dashed];
m8_123 -> m8_65  [key=2, style=dotted];
m8_123 -> m8_124  [key=0, style=solid];
m8_123 -> m8_69  [key=2, style=dotted];
m8_119 -> m8_5  [key=2, style=dotted];
m8_119 -> m8_124  [key=0, style=solid];
m8_121 -> m8_5  [key=2, style=dotted];
m8_121 -> m8_124  [key=0, style=solid];
m8_122 -> m8_123  [key=0, style=solid];
m8_122 -> m8_125  [key=2, style=dotted];
m8_118 -> m8_119  [key=0, style=solid];
m8_118 -> m8_120  [key=0, style=solid];
m8_120 -> m8_121  [key=0, style=solid];
m8_120 -> m8_122  [key=0, style=solid];
m8_124 -> d326  [color=blue, key=0, style=bold];
m8_95 -> m8_100  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_95 -> m8_96  [key=0, style=solid];
m8_95 -> m8_98  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_100 -> m8_67  [key=2, style=dotted];
m8_100 -> m8_101  [key=0, style=solid];
m8_100 -> m8_42  [key=2, style=dotted];
m8_97 -> m8_5  [key=2, style=dotted];
m8_97 -> m8_101  [key=0, style=solid];
m8_99 -> m8_5  [key=2, style=dotted];
m8_99 -> m8_101  [key=0, style=solid];
m8_98 -> m8_100  [key=0, style=solid];
m8_98 -> m8_99  [key=0, style=solid];
m8_96 -> m8_97  [key=0, style=solid];
m8_96 -> m8_98  [key=0, style=solid];
m8_101 -> m8_95  [color=blue, key=0, style=bold];
m8_47 -> m8_54  [color=green, key=1, label="System.TimeSpan", style=dashed];
m8_47 -> m8_55  [color=green, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m8_47 -> m8_56  [color=green, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m8_47 -> m8_58  [color=green, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m8_47 -> m8_48  [key=0, style=solid];
m8_47 -> m8_50  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m8_47 -> m8_53  [color=darkseagreen4, key=1, label="HangFire.Common.Job", style=dashed];
m8_54 -> m8_55  [color=green, key=0, style=solid];
m8_54 -> m8_65  [color=green, key=2, style=dotted];
m8_54 -> m8_66  [color=green, key=2, style=dotted];
m8_54 -> m8_67  [color=green, key=2, style=dotted];
m8_54 -> m8_68  [color=green, key=2, style=dotted];
m8_54 -> m8_46  [color=green, key=2, style=dotted];
m8_54 -> m8_59  [color=green, key=1, label=jobId, style=dashed];
m8_54 -> m8_62  [color=green, key=1, label=jobId, style=dashed];
m8_53 -> m8_54  [color=green, key=0, style=solid];
m8_53 -> m8_64  [key=2, style=dotted];
m8_52 -> m8_54  [color=green, key=1, label=createJobSql, style=dashed];
m8_52 -> m8_53  [key=0, style=solid];
m8_52 -> m8_52  [color=darkorchid, key=3, label="Local variable string createJobSql", style=bold];
m8_55 -> m8_56  [color=green, key=0, style=solid];
m8_55 -> m8_62  [color=green, key=0, style=solid];
m8_59 -> m8_58  [color=green, key=0, style=solid];
m8_59 -> m8_59  [color=darkseagreen4, key=1, label=parameterIndex, style=dashed];
m8_62 -> m8_63  [key=0, style=solid];
m8_56 -> m8_57  [color=green, key=0, style=solid];
m8_56 -> m8_59  [color=green, key=1, label=parameterArray, style=dashed];
m8_56 -> m8_61  [color=green, key=1, label=parameterArray, style=dashed];
m8_57 -> m8_58  [color=green, key=0, style=solid];
m8_57 -> m8_59  [color=green, key=1, label=parameterIndex, style=dashed];
m8_57 -> m8_27  [color=green, key=3, label="Local variable int parameterIndex", style=bold];
m8_61 -> m8_62  [key=0, style=solid];
m8_61 -> m8_69  [key=2, style=dotted];
m8_58 -> m8_59  [color=green, key=0, style=solid];
m8_58 -> m8_60  [color=green, key=0, style=solid];
m8_60 -> m8_60  [color=green, key=3, label="Local variable string insertParameterSql", style=bold];
m8_60 -> m8_61  [color=green, key=0, style=solid];
m8_49 -> m8_5  [key=2, style=dotted];
m8_49 -> m8_63  [key=0, style=solid];
m8_51 -> m8_5  [key=2, style=dotted];
m8_51 -> m8_63  [key=0, style=solid];
m8_48 -> m8_49  [key=0, style=solid];
m8_48 -> m8_50  [key=0, style=solid];
m8_50 -> m8_52  [key=0, style=solid];
m8_50 -> m8_51  [key=0, style=solid];
m8_63 -> m8_47  [color=blue, key=0, style=bold];
m8_70 -> m8_74  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_70 -> m8_71  [key=0, style=solid];
m8_70 -> m8_75  [color=darkorchid, key=3, label="method methodReturn HangFire.Storage.JobData GetJobData", style=bold];
m8_74 -> m8_67  [key=2, style=dotted];
m8_74 -> m8_75  [key=0, style=solid];
m8_74 -> m8_42  [key=2, style=dotted];
m8_74 -> m8_77  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m8_74 -> m8_78  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m8_74 -> m8_84  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m8_72 -> m8_5  [key=2, style=dotted];
m8_72 -> m8_85  [key=0, style=solid];
m8_77 -> m8_67  [key=2, style=dotted];
m8_77 -> m8_78  [key=0, style=solid];
m8_77 -> m8_81  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m8_73 -> m8_74  [key=0, style=solid];
m8_73 -> m8_73  [color=darkorchid, key=3, label="Local variable string sql", style=bold];
m8_75 -> m8_77  [key=0, style=solid];
m8_75 -> m8_76  [key=0, style=solid];
m8_78 -> m8_79  [key=0, style=solid];
m8_84 -> m8_85  [key=0, style=solid];
m8_84 -> m8_87  [key=2, style=dotted];
m8_71 -> m8_72  [key=0, style=solid];
m8_71 -> m8_73  [key=0, style=solid];
m8_81 -> m8_84  [key=0, style=solid];
m8_81 -> m8_82  [key=0, style=solid];
m8_81 -> m8_86  [key=2, style=dotted];
m8_79 -> m8_75  [color=darkorchid, key=3, label="Local variable HangFire.Common.Job job", style=bold];
m8_79 -> m8_80  [key=0, style=solid];
m8_80 -> m8_75  [color=darkorchid, key=3, label="Local variable HangFire.Common.JobLoadException loadException", style=bold];
m8_80 -> m8_81  [key=0, style=solid];
m8_80 -> m8_82  [color=darkorchid, key=3, label="Local variable HangFire.Common.JobLoadException loadException", style=bold];
m8_76 -> m8_85  [key=0, style=solid];
m8_83 -> m8_84  [key=0, style=solid];
m8_82 -> m8_83  [key=0, style=solid];
m8_85 -> m8_70  [color=blue, key=0, style=bold];
m8_10 -> m8_11  [color=green, key=0, style=solid];
m8_11 -> m8_12  [color=green, key=0, style=solid];
m8_11 -> m8_13  [color=green, key=2, style=dotted];
m8_12 -> m8_10  [color=blue, key=0, style=bold];
m8_19 -> m8_20  [color=green, key=0, style=solid];
m8_19 -> m8_22  [color=green, key=1, label="string[]", style=dashed];
m8_19 -> m8_28  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m8_19 -> m8_29  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m8_20 -> m8_21  [color=green, key=0, style=solid];
m8_20 -> m8_22  [color=green, key=0, style=solid];
m8_21 -> m8_37  [color=green, key=0, style=solid];
m8_21 -> m8_5  [color=green, key=2, style=dotted];
m8_22 -> m8_23  [color=green, key=0, style=solid];
m8_22 -> m8_24  [color=green, key=0, style=solid];
m8_23 -> m8_37  [color=green, key=0, style=solid];
m8_23 -> m8_38  [color=green, key=2, style=dotted];
m8_24 -> m8_25  [color=green, key=0, style=solid];
m8_25 -> m8_25  [color=green, key=3, label="Local variable string fetchJobSqlTemplate", style=bold];
m8_25 -> m8_26  [color=green, key=0, style=solid];
m8_25 -> m8_29  [color=green, key=1, label=fetchJobSqlTemplate, style=dashed];
m8_26 -> m8_27  [key=0, style=solid];
m8_26 -> m8_29  [color=darkseagreen4, key=1, label=fetchConditions, style=dashed];
m8_26 -> m8_31  [color=darkseagreen4, key=1, label=fetchConditions, style=dashed];
m8_26 -> m8_34  [color=darkseagreen4, key=1, label=fetchConditions, style=dashed];
m8_29 -> m8_30  [key=0, style=solid];
m8_29 -> m8_18  [key=2, style=dotted];
m8_29 -> m8_40  [key=2, style=dotted];
m8_29 -> m8_41  [key=2, style=dotted];
m8_29 -> m8_42  [key=2, style=dotted];
m8_29 -> m8_35  [color=darkseagreen4, key=1, label=idAndQueue, style=dashed];
m8_29 -> m8_36  [color=darkseagreen4, key=1, label=idAndQueue, style=dashed];
m8_27 -> m8_29  [color=darkseagreen4, key=1, label=currentQueryIndex, style=dashed];
m8_27 -> m8_27  [color=darkorchid, key=3, label="Local variable int currentQueryIndex", style=bold];
m8_27 -> m8_28  [key=0, style=solid];
m8_27 -> m8_31  [color=darkseagreen4, key=1, label=currentQueryIndex, style=dashed];
m8_27 -> m8_34  [color=darkseagreen4, key=1, label=currentQueryIndex, style=dashed];
m8_28 -> m8_29  [key=0, style=solid];
m8_28 -> m8_28  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m8_28 -> m8_39  [key=2, style=dotted];
m8_28 -> m8_32  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m8_36 -> m8_37  [key=0, style=solid];
m8_36 -> m8_46  [key=2, style=dotted];
m8_36 -> m8_45  [key=2, style=dotted];
m8_31 -> m8_32  [key=0, style=solid];
m8_31 -> m8_34  [key=0, style=solid];
m8_34 -> m8_34  [color=darkseagreen4, key=1, label=currentQueryIndex, style=dashed];
m8_34 -> m8_35  [key=0, style=solid];
m8_30 -> m8_31  [key=0, style=solid];
m8_30 -> m8_34  [key=0, style=solid];
m8_35 -> m8_27  [key=0, style=solid];
m8_35 -> m8_36  [key=0, style=solid];
m8_32 -> m8_32  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m8_32 -> m8_33  [key=0, style=solid];
m8_32 -> m8_43  [key=2, style=dotted];
m8_32 -> m8_44  [key=2, style=dotted];
m8_33 -> m8_34  [key=0, style=solid];
m8_33 -> m8_39  [key=2, style=dotted];
m8_33 -> m8_33  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m8_37 -> m8_19  [color=blue, key=0, style=bold];
m8_136 -> m8_137  [key=0, style=solid];
m8_139 -> m8_66  [key=2, style=dotted];
m8_139 -> m8_139  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m8_139 -> m8_140  [key=0, style=solid];
m8_139 -> m8_40  [key=2, style=dotted];
m8_139 -> m8_69  [key=2, style=dotted];
m8_138 -> m8_38  [key=2, style=dotted];
m8_138 -> m8_140  [key=0, style=solid];
m8_137 -> m8_139  [key=0, style=solid];
m8_137 -> m8_138  [key=0, style=solid];
m8_137 -> m8_137  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m8_137 -> m8_141  [key=2, style=dotted];
m8_140 -> m8_136  [color=blue, key=0, style=bold];
m8_0 -> m8_3  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_0 -> m8_1  [key=0, style=solid];
m8_3 -> m8_4  [key=0, style=solid];
m8_2 -> m8_5  [key=2, style=dotted];
m8_2 -> m8_4  [key=0, style=solid];
m8_1 -> m8_3  [key=0, style=solid];
m8_1 -> m8_2  [key=0, style=solid];
m8_4 -> m8_0  [color=blue, key=0, style=bold];
m8_6 -> m8_7  [key=0, style=solid];
m8_7 -> m8_8  [key=0, style=solid];
m8_7 -> m8_9  [key=2, style=dotted];
m8_8 -> m8_6  [color=blue, key=0, style=bold];
m8_102 -> m8_107  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_102 -> m8_103  [key=0, style=solid];
m8_102 -> m8_105  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_107 -> m8_108  [key=0, style=solid];
m8_107 -> m8_69  [key=2, style=dotted];
m8_104 -> m8_5  [key=2, style=dotted];
m8_104 -> m8_108  [key=0, style=solid];
m8_106 -> m8_5  [key=2, style=dotted];
m8_106 -> m8_108  [key=0, style=solid];
m8_105 -> m8_107  [key=0, style=solid];
m8_105 -> m8_106  [key=0, style=solid];
m8_103 -> m8_104  [key=0, style=solid];
m8_103 -> m8_105  [key=0, style=solid];
m8_108 -> m8_102  [color=blue, key=0, style=bold];
m8_88 -> m8_93  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_88 -> m8_89  [key=0, style=solid];
m8_88 -> m8_91  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_93 -> m8_94  [key=0, style=solid];
m8_93 -> m8_69  [key=2, style=dotted];
m8_90 -> m8_5  [key=2, style=dotted];
m8_90 -> m8_94  [key=0, style=solid];
m8_92 -> m8_5  [key=2, style=dotted];
m8_92 -> m8_94  [key=0, style=solid];
m8_91 -> m8_93  [key=0, style=solid];
m8_91 -> m8_92  [key=0, style=solid];
m8_89 -> m8_90  [key=0, style=solid];
m8_89 -> m8_91  [key=0, style=solid];
m8_94 -> m8_88  [color=blue, key=0, style=bold];
m8_109 -> m8_114  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_109 -> m8_110  [key=0, style=solid];
m8_109 -> m8_112  [color=darkseagreen4, key=1, label=double, style=dashed];
m8_114 -> m8_67  [key=2, style=dotted];
m8_114 -> m8_115  [key=0, style=solid];
m8_114 -> m8_42  [key=2, style=dotted];
m8_111 -> m8_5  [key=2, style=dotted];
m8_111 -> m8_115  [key=0, style=solid];
m8_112 -> m8_114  [key=0, style=solid];
m8_112 -> m8_113  [key=0, style=solid];
m8_110 -> m8_111  [key=0, style=solid];
m8_110 -> m8_112  [key=0, style=solid];
m8_113 -> m8_115  [key=0, style=solid];
m8_113 -> m8_116  [key=2, style=dotted];
m8_115 -> m8_109  [color=blue, key=0, style=bold];
m8_14 -> m8_15  [key=0, style=solid];
m8_15 -> m8_16  [key=0, style=solid];
m8_15 -> m8_17  [key=2, style=dotted];
m8_15 -> m8_18  [key=2, style=dotted];
m8_16 -> m8_14  [color=blue, key=0, style=bold];
m8_126 -> m8_129  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_126 -> m8_127  [key=0, style=solid];
m8_129 -> m8_130  [key=0, style=solid];
m8_129 -> m8_69  [key=2, style=dotted];
m8_128 -> m8_5  [key=2, style=dotted];
m8_128 -> m8_130  [key=0, style=solid];
m8_127 -> m8_129  [key=0, style=solid];
m8_127 -> m8_128  [key=0, style=solid];
m8_130 -> m8_126  [color=blue, key=0, style=bold];
m8_131 -> m8_134  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_131 -> m8_132  [key=0, style=solid];
m8_134 -> m8_135  [key=0, style=solid];
m8_134 -> m8_69  [key=2, style=dotted];
m8_133 -> m8_5  [key=2, style=dotted];
m8_133 -> m8_135  [key=0, style=solid];
m8_132 -> m8_134  [key=0, style=solid];
m8_132 -> m8_133  [key=0, style=solid];
m8_135 -> m8_131  [color=blue, key=0, style=bold];
m8_142 -> m8_11  [color=green, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_142 -> m8_54  [color=green, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_142 -> m8_3  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_142 -> m8_7  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_142 -> m8_15  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_142 -> m8_29  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_142 -> m8_61  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_142 -> m8_74  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_142 -> m8_93  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_142 -> m8_100  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_142 -> m8_107  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_142 -> m8_114  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_142 -> m8_123  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_142 -> m8_129  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_142 -> m8_134  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_142 -> m8_139  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m10_16 -> m10_17  [key=0, style=solid];
m10_24 -> m10_49  [key=0, style=solid];
m10_24 -> m10_50  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_24 -> m10_53  [color=darkseagreen4, key=1, label=IDbConnection, style=dashed];
m10_24 -> m10_56  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_24 -> m10_25  [key=0, style=solid];
m10_49 -> m10_50  [key=0, style=solid];
m10_49 -> m10_40  [key=2, style=dotted];
m10_49 -> m10_51  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m10_49 -> m10_52  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m10_49 -> m10_53  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m10_49 -> m10_54  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m10_50 -> m10_51  [key=0, style=solid];
m10_50 -> m10_41  [key=2, style=dotted];
m10_53 -> m10_54  [key=0, style=solid];
m10_53 -> m10_42  [key=2, style=dotted];
m10_56 -> m10_57  [key=0, style=solid];
m10_56 -> m10_45  [key=2, style=dotted];
m10_56 -> m10_47  [key=2, style=dotted];
m10_51 -> m10_52  [key=0, style=solid];
m10_51 -> m10_41  [key=2, style=dotted];
m10_52 -> m10_53  [key=0, style=solid];
m10_52 -> m10_41  [key=2, style=dotted];
m10_54 -> m10_55  [key=0, style=solid];
m10_54 -> m10_43  [key=2, style=dotted];
m10_54 -> m10_56  [color=darkseagreen4, key=1, label=releaseResult, style=dashed];
m10_55 -> m10_56  [key=0, style=solid];
m10_55 -> m10_57  [key=0, style=solid];
m10_57 -> m10_24  [color=blue, key=0, style=bold];
m10_15 -> m10_13  [color=blue, key=0, style=bold];
m10_18 -> m10_19  [key=0, style=solid];
m10_18 -> m10_12  [key=2, style=dotted];
m10_18 -> m10_18  [color=darkorchid, key=3, label="Field variable string LockMode", style=bold];
m10_18 -> m10_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_19 -> m10_20  [key=0, style=solid];
m10_19 -> m10_21  [key=0, style=solid];
m10_19 -> m10_16  [color=blue, key=0, style=bold];
m10_20 -> m10_23  [key=0, style=solid];
m10_20 -> m10_21  [key=0, style=solid];
m10_21 -> m10_22  [key=0, style=solid];
m10_21 -> m10_23  [key=2, style=dotted];
m10_22 -> m10_23  [key=0, style=solid];
m10_22 -> m10_24  [key=2, style=dotted];
m10_22 -> m10_20  [color=blue, key=0, style=bold];
m10_23 -> m10_18  [color=blue, key=0, style=bold];
m10_17 -> m10_5  [key=2, style=dotted];
m10_17 -> m10_18  [key=0, style=solid];
m10_17 -> m10_21  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_17 -> m10_25  [key=0, style=solid];
m10_17 -> m10_26  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_17 -> m10_30  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m10_17 -> m10_33  [color=darkseagreen4, key=1, label=IDbConnection, style=dashed];
m10_17 -> m10_37  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_17 -> m10_38  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_17 -> m10_0  [color=darkorchid, key=3, label="Parameter variable System.TimeSpan timeout", style=bold];
m10_25 -> m10_5  [key=2, style=dotted];
m10_25 -> m10_26  [key=0, style=solid];
m10_25 -> m10_27  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m10_25 -> m10_40  [key=2, style=dotted];
m10_25 -> m10_28  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m10_25 -> m10_29  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m10_25 -> m10_30  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m10_25 -> m10_31  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m10_25 -> m10_33  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m10_25 -> m10_34  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m10_26 -> m10_27  [key=0, style=solid];
m10_26 -> m10_23  [key=2, style=dotted];
m10_26 -> m10_41  [key=2, style=dotted];
m10_27 -> m10_28  [key=0, style=solid];
m10_27 -> m10_23  [key=2, style=dotted];
m10_27 -> d33  [key=2, style=dotted];
m10_27 -> m10_41  [key=2, style=dotted];
m10_28 -> m10_24  [color=blue, key=0, style=bold];
m10_28 -> m10_29  [key=0, style=solid];
m10_28 -> m10_41  [key=2, style=dotted];
m10_0 -> m10_1  [key=0, style=solid];
m10_0 -> m10_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_0 -> m10_5  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m10_0 -> m10_7  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m10_0 -> m10_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_0 -> m10_9  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m10_1 -> m10_2  [key=0, style=solid];
m10_1 -> m10_3  [key=0, style=solid];
m10_1 -> m10_5  [key=2, style=dotted];
m10_3 -> m10_4  [key=0, style=solid];
m10_3 -> m10_5  [key=0, style=solid];
m10_3 -> m10_13  [key=2, style=dotted];
m10_3 -> m10_7  [key=2, style=dotted];
m10_5 -> m10_6  [key=0, style=solid];
m10_5 -> m10_7  [key=0, style=solid];
m10_5 -> m10_5  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m10_5 -> m10_10  [color=red, key=1, label="System.TimeSpan", style=dashed];
m10_7 -> m10_8  [key=0, style=solid];
m10_8 -> m10_9  [key=0, style=solid];
m10_9 -> m10_10  [color=green, key=0, style=solid];
m10_9 -> m10_16  [key=2, style=dotted];
m10_9 -> m10_5  [key=2, style=dotted];
m10_9 -> m10_14  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_2 -> m10_11  [key=0, style=solid];
m10_2 -> m10_12  [key=2, style=dotted];
m10_2 -> m10_3  [key=0, style=solid];
m10_2 -> m10_6  [key=2, style=dotted];
m10_4 -> m10_11  [key=0, style=solid];
m10_4 -> m10_12  [key=2, style=dotted];
m10_4 -> m10_0  [color=blue, key=0, style=bold];
m10_6 -> m10_11  [key=0, style=solid];
m10_6 -> m10_14  [key=2, style=dotted];
m10_6 -> m10_15  [key=2, style=dotted];
m10_10 -> m10_11  [color=green, key=0, style=solid];
m10_10 -> m10_17  [color=red, key=2, style=dotted];
m10_10 -> m10_12  [color=green, key=2, style=dotted];
m10_10 -> m10_13  [color=green, key=1, label="lambda expression", style=dashed];
m10_11 -> m10_0  [color=blue, key=0, style=bold];
m10_11 -> m10_8  [color=blue, key=0, style=bold];
m10_13 -> m10_14  [key=0, style=solid];
m10_30 -> m10_31  [key=0, style=solid];
m10_30 -> m10_41  [key=2, style=dotted];
m10_30 -> m10_30  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m10_30 -> m10_32  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m10_30 -> m10_14  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_33 -> m10_34  [key=0, style=solid];
m10_33 -> m10_42  [key=2, style=dotted];
m10_37 -> m10_39  [key=0, style=solid];
m10_37 -> m10_44  [key=2, style=dotted];
m10_38 -> m10_39  [key=0, style=solid];
m10_38 -> m10_45  [key=2, style=dotted];
m10_38 -> m10_46  [key=2, style=dotted];
m10_38 -> m10_47  [key=2, style=dotted];
m10_38 -> m10_48  [key=2, style=dotted];
m10_29 -> m10_30  [key=0, style=solid];
m10_29 -> m10_41  [key=2, style=dotted];
m10_31 -> m10_32  [key=0, style=solid];
m10_31 -> m10_41  [key=2, style=dotted];
m10_31 -> m10_21  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_34 -> m10_35  [key=0, style=solid];
m10_34 -> m10_43  [key=2, style=dotted];
m10_34 -> m10_36  [color=darkseagreen4, key=1, label=lockResult, style=dashed];
m10_34 -> m10_38  [color=darkseagreen4, key=1, label=lockResult, style=dashed];
m10_32 -> m10_33  [key=0, style=solid];
m10_32 -> m10_32  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m10_35 -> m10_36  [key=0, style=solid];
m10_35 -> m10_39  [key=0, style=solid];
m10_36 -> m10_37  [key=0, style=solid];
m10_36 -> m10_38  [key=0, style=solid];
m10_39 -> m10_17  [color=blue, key=0, style=bold];
m10_14 -> m10_15  [key=0, style=solid];
m10_58 -> m10_7  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
m10_58 -> m10_8  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
m10_58 -> m10_9  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
m10_58 -> m10_10  [color=red, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
m10_58 -> m10_19  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
m10_58 -> m10_21  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
m10_58 -> m10_22  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
m11_58 -> m11_59  [key=0, style=solid];
m11_59 -> m11_60  [key=0, style=solid];
m11_59 -> m11_41  [key=2, style=dotted];
m11_60 -> m11_61  [key=0, style=solid];
m11_60 -> m11_22  [key=2, style=dotted];
m11_61 -> m11_62  [key=0, style=solid];
m11_61 -> m11_42  [key=2, style=dotted];
m11_62 -> m11_63  [key=0, style=solid];
m11_62 -> m11_45  [key=2, style=dotted];
m11_63 -> m11_64  [key=0, style=solid];
m11_63 -> m11_43  [key=2, style=dotted];
m11_64 -> m11_65  [key=0, style=solid];
m11_64 -> m11_44  [key=2, style=dotted];
m11_65 -> m11_66  [key=0, style=solid];
m11_65 -> m11_45  [key=2, style=dotted];
m11_66 -> m11_67  [key=0, style=solid];
m11_66 -> m11_26  [key=2, style=dotted];
m11_67 -> m11_58  [color=blue, key=0, style=bold];
m11_14 -> m11_15  [key=0, style=solid];
m11_15 -> m11_16  [key=0, style=solid];
m11_15 -> m11_17  [key=0, style=solid];
m11_16 -> m11_17  [key=0, style=solid];
m11_16 -> m11_0  [key=2, style=dotted];
m11_17 -> m11_14  [color=blue, key=0, style=bold];
m11_75 -> m11_76  [key=0, style=solid];
m11_76 -> m11_77  [key=0, style=solid];
m11_76 -> m11_41  [key=2, style=dotted];
m11_77 -> m11_78  [key=0, style=solid];
m11_77 -> m11_22  [key=2, style=dotted];
m11_78 -> m11_79  [key=0, style=solid];
m11_78 -> m11_42  [key=2, style=dotted];
m11_79 -> m11_80  [key=0, style=solid];
m11_79 -> m11_43  [key=2, style=dotted];
m11_80 -> m11_81  [key=0, style=solid];
m11_80 -> m11_44  [key=2, style=dotted];
m11_81 -> m11_82  [key=0, style=solid];
m11_81 -> m11_26  [key=2, style=dotted];
m11_82 -> m11_75  [color=blue, key=0, style=bold];
m11_83 -> m11_84  [key=0, style=solid];
m11_84 -> m11_85  [key=0, style=solid];
m11_84 -> m11_41  [key=2, style=dotted];
m11_85 -> m11_86  [key=0, style=solid];
m11_85 -> m11_22  [key=2, style=dotted];
m11_86 -> m11_87  [key=0, style=solid];
m11_86 -> m11_42  [key=2, style=dotted];
m11_87 -> m11_88  [key=0, style=solid];
m11_87 -> m11_45  [key=2, style=dotted];
m11_88 -> m11_89  [key=0, style=solid];
m11_88 -> m11_43  [key=2, style=dotted];
m11_89 -> m11_90  [key=0, style=solid];
m11_89 -> m11_44  [key=2, style=dotted];
m11_90 -> m11_91  [key=0, style=solid];
m11_90 -> m11_26  [key=2, style=dotted];
m11_91 -> m11_83  [color=blue, key=0, style=bold];
m11_26 -> m11_27  [key=0, style=solid];
m11_27 -> m11_28  [key=0, style=solid];
m11_27 -> m11_29  [key=2, style=dotted];
m11_28 -> m11_26  [color=blue, key=0, style=bold];
m11_30 -> m11_31  [key=0, style=solid];
m11_31 -> m11_32  [key=0, style=solid];
m11_31 -> m11_41  [key=2, style=dotted];
m11_32 -> m11_33  [key=0, style=solid];
m11_32 -> m11_22  [key=2, style=dotted];
m11_33 -> m11_34  [key=0, style=solid];
m11_33 -> m11_42  [key=2, style=dotted];
m11_34 -> m11_35  [key=0, style=solid];
m11_34 -> m11_43  [key=2, style=dotted];
m11_35 -> m11_36  [key=0, style=solid];
m11_35 -> m11_44  [key=2, style=dotted];
m11_36 -> m11_37  [key=0, style=solid];
m11_36 -> m11_45  [key=2, style=dotted];
m11_37 -> m11_38  [key=0, style=solid];
m11_37 -> m11_46  [key=2, style=dotted];
m11_38 -> m11_39  [key=0, style=solid];
m11_38 -> m11_45  [key=2, style=dotted];
m11_39 -> m11_40  [key=0, style=solid];
m11_39 -> m11_26  [key=2, style=dotted];
m11_40 -> m11_30  [color=blue, key=0, style=bold];
m11_68 -> m11_69  [key=0, style=solid];
m11_69 -> m11_70  [key=0, style=solid];
m11_69 -> m11_41  [key=2, style=dotted];
m11_70 -> m11_71  [key=0, style=solid];
m11_70 -> m11_22  [key=2, style=dotted];
m11_71 -> m11_72  [key=0, style=solid];
m11_71 -> m11_43  [key=2, style=dotted];
m11_72 -> m11_73  [key=0, style=solid];
m11_72 -> m11_44  [key=2, style=dotted];
m11_73 -> m11_74  [key=0, style=solid];
m11_73 -> m11_26  [key=2, style=dotted];
m11_74 -> m11_68  [color=blue, key=0, style=bold];
m11_0 -> m11_1  [key=0, style=solid];
m11_0 -> m11_16  [color=darkorchid, key=3, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext", style=bold];
m11_1 -> m11_2  [key=0, style=solid];
m11_1 -> m11_5  [key=2, style=dotted];
m11_2 -> m11_3  [key=0, style=solid];
m11_2 -> m11_6  [key=2, style=dotted];
m11_2 -> m11_7  [key=2, style=dotted];
m11_3 -> m11_4  [key=0, style=solid];
m11_3 -> m11_8  [key=2, style=dotted];
m11_4 -> m11_0  [color=blue, key=0, style=bold];
m11_22 -> m11_23  [key=0, style=solid];
m11_22 -> m11_31  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m11_22 -> m11_48  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m11_22 -> m11_59  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m11_22 -> m11_69  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m11_22 -> m11_76  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m11_22 -> m11_84  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m11_23 -> m11_24  [key=0, style=solid];
m11_23 -> n25  [key=2, style=dotted];
m11_24 -> m11_22  [color=blue, key=0, style=bold];
m11_47 -> m11_48  [key=0, style=solid];
m11_48 -> m11_49  [key=0, style=solid];
m11_48 -> m11_41  [key=2, style=dotted];
m11_49 -> m11_50  [key=0, style=solid];
m11_49 -> m11_22  [key=2, style=dotted];
m11_50 -> m11_51  [key=0, style=solid];
m11_50 -> m11_42  [key=2, style=dotted];
m11_51 -> m11_52  [key=0, style=solid];
m11_51 -> m11_43  [key=2, style=dotted];
m11_52 -> m11_53  [key=0, style=solid];
m11_52 -> m11_44  [key=2, style=dotted];
m11_53 -> m11_54  [key=0, style=solid];
m11_53 -> m11_45  [key=2, style=dotted];
m11_54 -> m11_55  [key=0, style=solid];
m11_54 -> m11_45  [key=2, style=dotted];
m11_55 -> m11_56  [key=0, style=solid];
m11_55 -> m11_45  [key=2, style=dotted];
m11_56 -> m11_57  [key=0, style=solid];
m11_56 -> m11_26  [key=2, style=dotted];
m11_57 -> m11_47  [color=blue, key=0, style=bold];
m11_9 -> m11_10  [key=0, style=solid];
m11_10 -> m11_11  [key=0, style=solid];
m11_10 -> m11_13  [key=2, style=dotted];
m11_11 -> m11_12  [key=0, style=solid];
m11_12 -> m11_9  [color=blue, key=0, style=bold];
m11_18 -> m11_19  [key=0, style=solid];
m11_19 -> m11_20  [key=0, style=solid];
m11_19 -> m11_21  [key=2, style=dotted];
m11_20 -> m11_18  [color=blue, key=0, style=bold];
m11_92 -> m11_32  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m11_92 -> m11_39  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m11_92 -> m11_49  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m11_92 -> m11_56  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m11_92 -> m11_60  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m11_92 -> m11_66  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m11_92 -> m11_70  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m11_92 -> m11_73  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m11_92 -> m11_77  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m11_92 -> m11_81  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m11_92 -> m11_85  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m11_92 -> m11_90  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m12_4 -> m12_5  [key=0, style=solid];
m12_4 -> m12_8  [color=darkseagreen4, key=1, label="HangFire.States.ElectStateContext", style=dashed];
m12_4 -> m12_11  [color=darkseagreen4, key=1, label="HangFire.States.ElectStateContext", style=dashed];
m12_4 -> m12_12  [color=red, key=1, label="HangFire.States.ElectStateContext", style=dashed];
m12_4 -> m12_14  [color=darkseagreen4, key=1, label="HangFire.States.ElectStateContext", style=dashed];
m12_4 -> m12_16  [color=darkseagreen4, key=1, label="HangFire.States.ElectStateContext", style=dashed];
m12_5 -> m12_6  [key=0, style=solid];
m12_5 -> m12_14  [color=darkseagreen4, key=1, label=failedState, style=dashed];
m12_5 -> m12_16  [color=darkseagreen4, key=1, label=failedState, style=dashed];
m12_8 -> m12_9  [key=0, style=solid];
m12_8 -> m12_18  [key=2, style=dotted];
m12_8 -> m12_10  [color=darkseagreen4, key=1, label=retryAttempt, style=dashed];
m12_8 -> m12_11  [color=darkseagreen4, key=1, label=retryAttempt, style=dashed];
m12_8 -> m12_12  [color=red, key=1, label=retryAttempt, style=dashed];
m12_8 -> m12_14  [color=darkseagreen4, key=1, label=retryAttempt, style=dashed];
m12_11 -> m12_12  [color=red, key=0, style=solid];
m12_11 -> m12_21  [key=2, style=dotted];
m12_12 -> m12_13  [color=red, key=0, style=solid];
m12_12 -> m12_22  [color=red, key=2, style=dotted];
m12_12 -> m12_23  [color=red, key=2, style=dotted];
m12_14 -> m12_17  [key=0, style=solid];
m12_14 -> m12_24  [key=2, style=dotted];
m12_16 -> m12_17  [key=0, style=solid];
m12_16 -> m12_25  [key=2, style=dotted];
m12_6 -> m12_7  [key=0, style=solid];
m12_6 -> m12_8  [key=0, style=solid];
m12_7 -> m12_17  [key=0, style=solid];
m12_9 -> m12_10  [key=0, style=solid];
m12_9 -> m12_15  [key=0, style=solid];
m12_10 -> m12_11  [key=0, style=solid];
m12_10 -> m12_19  [key=2, style=dotted];
m12_10 -> m12_20  [key=2, style=dotted];
m12_10 -> m12_12  [color=red, key=1, label=delay, style=dashed];
m12_10 -> m12_14  [color=darkseagreen4, key=1, label=delay, style=dashed];
m12_15 -> m12_16  [key=0, style=solid];
m12_15 -> m12_17  [key=0, style=solid];
m12_13 -> m12_14  [key=0, style=solid];
m12_13 -> m12_17  [key=0, style=solid];
m12_17 -> m12_4  [color=blue, key=0, style=bold];
m12_0 -> m12_1  [key=0, style=solid];
m12_1 -> m12_2  [key=0, style=solid];
m12_2 -> m12_3  [key=0, style=solid];
m12_3 -> m12_0  [color=blue, key=0, style=bold];
m12_19 -> m12_26  [key=0, style=solid];
m12_19 -> m12_27  [color=darkseagreen4, key=1, label=long, style=dashed];
m12_19 -> m12_8  [color=darkorchid, key=3, label="Parameter variable long retryCount", style=bold];
m12_26 -> m12_27  [key=0, style=solid];
m12_26 -> m12_29  [key=2, style=dotted];
m12_27 -> m12_28  [key=0, style=solid];
m12_27 -> m12_30  [key=2, style=dotted];
m12_27 -> m12_31  [key=2, style=dotted];
m12_27 -> m12_32  [key=2, style=dotted];
m12_28 -> m12_19  [color=blue, key=0, style=bold];
m12_33 -> m12_1  [color=darkseagreen4, key=1, label="HangFire.AutomaticRetryAttribute", style=dashed];
m12_33 -> m12_2  [color=darkseagreen4, key=1, label="HangFire.AutomaticRetryAttribute", style=dashed];
m12_33 -> m12_9  [color=darkseagreen4, key=1, label="HangFire.AutomaticRetryAttribute", style=dashed];
m12_33 -> m12_12  [color=red, key=1, label="HangFire.AutomaticRetryAttribute", style=dashed];
m12_33 -> m12_13  [color=darkseagreen4, key=1, label="HangFire.AutomaticRetryAttribute", style=dashed];
m12_33 -> m12_14  [color=darkseagreen4, key=1, label="HangFire.AutomaticRetryAttribute", style=dashed];
m12_33 -> m12_15  [color=darkseagreen4, key=1, label="HangFire.AutomaticRetryAttribute", style=dashed];
m13_24 -> m13_25  [key=0, style=solid];
m13_25 -> m13_26  [color=red, key=0, style=solid];
m13_25 -> m13_16  [key=2, style=dotted];
m13_26 -> m13_27  [color=red, key=0, style=solid];
m13_26 -> m13_28  [color=red, key=2, style=dotted];
m13_27 -> m13_24  [color=blue, key=0, style=bold];
m13_40 -> m13_41  [key=0, style=solid];
m13_41 -> m13_42  [color=red, key=0, style=solid];
m13_41 -> m13_52  [color=darkseagreen4, key=1, label=canNotParseMessage, style=dashed];
m13_41 -> m13_54  [color=darkseagreen4, key=1, label=canNotParseMessage, style=dashed];
m13_42 -> m13_43  [color=red, key=0, style=solid];
m13_42 -> m13_56  [color=red, key=2, style=dotted];
m13_42 -> m13_57  [color=red, key=2, style=dotted];
m13_42 -> d86  [color=red, key=2, style=dotted];
m13_42 -> m13_64  [color=red, key=1, label="lambda expression", style=dashed];
m13_42 -> m13_67  [color=red, key=1, label="lambda expression", style=dashed];
m13_42 -> m13_71  [color=red, key=1, label="lambda expression", style=dashed];
m13_42 -> m13_74  [color=red, key=1, label="lambda expression", style=dashed];
m13_42 -> m13_45  [color=red, key=1, label=parts, style=dashed];
m13_42 -> m13_46  [color=red, key=1, label=parts, style=dashed];
m13_42 -> m13_50  [color=red, key=1, label=parts, style=dashed];
m13_42 -> m13_51  [color=red, key=1, label=parts, style=dashed];
m13_52 -> m13_55  [key=0, style=solid];
m13_52 -> m13_63  [key=2, style=dotted];
m13_54 -> m13_55  [key=0, style=solid];
m13_43 -> m13_44  [key=0, style=solid];
m13_43 -> m13_59  [key=2, style=dotted];
m13_43 -> m13_46  [color=darkseagreen4, key=1, label=builder, style=dashed];
m13_43 -> m13_47  [color=darkseagreen4, key=1, label=builder, style=dashed];
m13_43 -> m13_48  [color=darkseagreen4, key=1, label=builder, style=dashed];
m13_43 -> m13_51  [color=darkseagreen4, key=1, label=builder, style=dashed];
m13_43 -> m13_52  [color=darkseagreen4, key=1, label=builder, style=dashed];
m13_45 -> m13_46  [key=0, style=solid];
m13_45 -> m13_44  [key=0, style=solid];
m13_45 -> m13_60  [key=2, style=dotted];
m13_46 -> m13_47  [key=0, style=solid];
m13_46 -> m13_61  [key=2, style=dotted];
m13_50 -> m13_51  [key=0, style=solid];
m13_50 -> m13_49  [key=0, style=solid];
m13_50 -> m13_60  [key=2, style=dotted];
m13_51 -> m13_52  [key=0, style=solid];
m13_51 -> m13_61  [key=2, style=dotted];
m13_44 -> m13_45  [key=0, style=solid];
m13_44 -> m13_47  [key=0, style=solid];
m13_44 -> m13_46  [color=darkseagreen4, key=1, label=alias, style=dashed];
m13_47 -> m13_48  [key=0, style=solid];
m13_47 -> m13_49  [key=0, style=solid];
m13_48 -> m13_49  [key=0, style=solid];
m13_48 -> m13_62  [key=2, style=dotted];
m13_49 -> m13_50  [key=0, style=solid];
m13_49 -> m13_52  [key=0, style=solid];
m13_49 -> m13_51  [color=darkseagreen4, key=1, label=alias, style=dashed];
m13_53 -> m13_54  [key=0, style=solid];
m13_55 -> m13_40  [color=blue, key=0, style=bold];
m13_33 -> m13_34  [key=0, style=solid];
m13_33 -> m13_35  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m13_33 -> m13_36  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m13_34 -> m13_35  [key=0, style=solid];
m13_34 -> m13_38  [key=2, style=dotted];
m13_35 -> m13_36  [key=0, style=solid];
m13_35 -> m13_39  [key=2, style=dotted];
m13_36 -> m13_37  [key=0, style=solid];
m13_36 -> m13_39  [key=2, style=dotted];
m13_37 -> m13_33  [color=blue, key=0, style=bold];
m13_20 -> m13_21  [key=0, style=solid];
m13_21 -> m13_22  [key=0, style=solid];
m13_21 -> m13_23  [key=2, style=dotted];
m13_21 -> m13_16  [key=2, style=dotted];
m13_22 -> m13_20  [color=blue, key=0, style=bold];
m13_2 -> m13_3  [key=0, style=solid];
m13_2 -> m13_5  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorageOptions", style=dashed];
m13_2 -> m13_7  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorageOptions", style=dashed];
m13_2 -> m13_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_2 -> m13_9  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorageOptions", style=dashed];
m13_2 -> m13_12  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorageOptions", style=dashed];
m13_3 -> m13_4  [key=0, style=solid];
m13_3 -> m13_5  [key=0, style=solid];
m13_5 -> m13_6  [key=0, style=solid];
m13_5 -> m13_7  [key=0, style=solid];
m13_7 -> m13_8  [key=0, style=solid];
m13_8 -> m13_9  [key=0, style=solid];
m13_9 -> m13_10  [key=0, style=solid];
m13_9 -> m13_12  [key=0, style=solid];
m13_12 -> m13_13  [key=0, style=solid];
m13_12 -> m13_18  [key=2, style=dotted];
m13_4 -> m13_14  [key=0, style=solid];
m13_4 -> m13_15  [key=2, style=dotted];
m13_6 -> m13_14  [key=0, style=solid];
m13_6 -> m13_15  [key=2, style=dotted];
m13_10 -> m13_11  [key=0, style=solid];
m13_10 -> m13_16  [key=2, style=dotted];
m13_11 -> m13_12  [key=0, style=solid];
m13_11 -> m13_17  [key=2, style=dotted];
m13_13 -> m13_14  [key=0, style=solid];
m13_13 -> m13_19  [key=2, style=dotted];
m13_14 -> m13_2  [color=blue, key=0, style=bold];
m13_74 -> m13_75  [color=red, key=0, style=solid];
m13_64 -> m13_65  [key=0, style=solid];
m13_67 -> m13_68  [color=red, key=0, style=solid];
m13_71 -> m13_72  [color=red, key=0, style=solid];
m13_65 -> m13_66  [key=0, style=solid];
m13_65 -> m13_56  [key=2, style=dotted];
m13_66 -> m13_64  [color=blue, key=0, style=bold];
m13_68 -> m13_69  [color=red, key=0, style=solid];
m13_68 -> m13_70  [color=red, key=2, style=dotted];
m13_69 -> m13_67  [color=blue, key=0, style=bold];
m13_72 -> m13_73  [color=red, key=0, style=solid];
m13_73 -> m13_71  [color=blue, key=0, style=bold];
m13_75 -> m13_76  [color=red, key=0, style=solid];
m13_76 -> m13_74  [color=blue, key=0, style=bold];
m13_29 -> m13_30  [key=0, style=solid];
m13_30 -> m13_31  [key=0, style=solid];
m13_30 -> m13_32  [key=2, style=dotted];
m13_31 -> m13_29  [color=blue, key=0, style=bold];
m13_0 -> m13_1  [key=0, style=solid];
m13_1 -> m13_0  [color=blue, key=0, style=bold];
m13_16 -> m13_77  [key=0, style=solid];
m13_77 -> m13_78  [key=0, style=solid];
m13_77 -> m13_81  [key=2, style=dotted];
m13_77 -> m13_79  [color=darkseagreen4, key=1, label=connection, style=dashed];
m13_78 -> m13_79  [key=0, style=solid];
m13_78 -> m13_82  [key=2, style=dotted];
m13_79 -> m13_80  [key=0, style=solid];
m13_80 -> m13_16  [color=blue, key=0, style=bold];
m13_83 -> m13_7  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m13_83 -> m13_8  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m13_83 -> m13_10  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m13_83 -> m13_13  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m13_83 -> m13_21  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m13_83 -> m13_25  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m13_83 -> m13_26  [color=red, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m13_83 -> m13_30  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m13_83 -> m13_35  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m13_83 -> m13_36  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m13_83 -> m13_42  [color=red, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m13_83 -> m13_77  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m14_0 -> m14_1  [key=0, style=solid];
m14_1 -> m14_2  [key=0, style=solid];
m14_1 -> m14_4  [key=2, style=dotted];
m14_2 -> m14_3  [key=0, style=solid];
m14_3 -> m14_0  [color=blue, key=0, style=bold];
m14_5 -> m14_1  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageOptions", style=dashed];
m14_5 -> m14_2  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageOptions", style=dashed];
m15_12 -> m15_13  [key=0, style=solid];
m15_13 -> m15_14  [key=0, style=solid];
m15_13 -> d11  [key=2, style=dotted];
m15_13 -> m15_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_14 -> m15_12  [color=blue, key=0, style=bold];
m15_115 -> m15_116  [key=0, style=solid];
m15_116 -> m15_23  [key=2, style=dotted];
m15_116 -> m15_117  [key=0, style=solid];
m15_116 -> m15_118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_117 -> m15_115  [color=blue, key=0, style=bold];
m15_0 -> m15_1  [key=0, style=solid];
m15_1 -> m15_2  [key=0, style=solid];
m15_1 -> d11  [key=2, style=dotted];
m15_1 -> m15_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_2 -> m15_0  [color=blue, key=0, style=bold];
m15_36 -> m15_37  [key=0, style=solid];
m15_37 -> m15_38  [key=0, style=solid];
m15_37 -> d11  [key=2, style=dotted];
m15_37 -> m15_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_38 -> m15_36  [color=blue, key=0, style=bold];
m15_98 -> m15_99  [key=0, style=solid];
m15_99 -> m15_99  [color=darkorchid, key=3, label="Local variable string canNotParseMessage", style=bold];
m15_99 -> m15_100  [key=0, style=solid];
m15_99 -> d11  [key=2, style=dotted];
m15_99 -> m15_101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_100 -> m15_98  [color=blue, key=0, style=bold];
m15_67 -> m15_68  [key=0, style=solid];
m15_68 -> m15_69  [key=0, style=solid];
m15_68 -> d11  [key=2, style=dotted];
m15_68 -> m15_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_69 -> m15_67  [color=blue, key=0, style=bold];
m15_108 -> m15_109  [key=0, style=solid];
m15_109 -> m15_110  [key=0, style=solid];
m15_109 -> d11  [key=2, style=dotted];
m15_109 -> m15_111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_110 -> m15_108  [color=blue, key=0, style=bold];
m15_104 -> m15_105  [key=0, style=solid];
m15_57 -> m15_58  [key=0, style=solid];
m15_57 -> m15_59  [color=darkseagreen4, key=1, label=IRedisClient, style=dashed];
m15_57 -> m15_60  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m15_62 -> m15_63  [color=green, key=0, style=solid];
m15_62 -> m15_66  [color=green, key=2, style=dotted];
m15_60 -> m15_62  [color=green, key=1, label=result, style=dashed];
m15_60 -> m15_61  [key=0, style=solid];
m15_60 -> m15_45  [key=2, style=dotted];
m15_60 -> m15_63  [color=darkseagreen4, key=1, label=result, style=dashed];
m15_61 -> m15_62  [color=green, key=0, style=solid];
m15_61 -> m15_35  [key=2, style=dotted];
m15_63 -> m15_64  [key=0, style=solid];
m15_63 -> m15_66  [key=2, style=dotted];
m15_64 -> m15_57  [color=blue, key=0, style=bold];
m15_58 -> m15_59  [key=0, style=solid];
m15_58 -> m15_65  [key=2, style=dotted];
m15_59 -> m15_60  [key=0, style=solid];
m15_59 -> m15_65  [key=2, style=dotted];
m15_4 -> m15_5  [key=0, style=solid];
m15_4 -> m15_9  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m15_15 -> m15_16  [key=0, style=solid];
m15_24 -> m15_25  [key=0, style=solid];
m15_24 -> m15_26  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m15_39 -> m15_40  [key=0, style=solid];
m15_39 -> m15_43  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m15_49 -> m15_50  [key=0, style=solid];
m15_70 -> m15_71  [key=0, style=solid];
m15_70 -> m15_75  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m15_81 -> m15_82  [key=0, style=solid];
m15_81 -> m15_86  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m15_91 -> m15_92  [key=0, style=solid];
m15_91 -> m15_93  [color=darkseagreen4, key=1, label=IRedisClient, style=dashed];
m15_101 -> m15_102  [key=0, style=solid];
m15_101 -> m15_105  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m15_111 -> m15_112  [key=0, style=solid];
m15_118 -> m15_119  [key=0, style=solid];
m15_118 -> m15_120  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m15_43 -> m15_45  [key=2, style=dotted];
m15_43 -> m15_44  [key=0, style=solid];
m15_50 -> m15_45  [key=2, style=dotted];
m15_50 -> m15_51  [key=0, style=solid];
m15_50 -> m15_52  [color=darkseagreen4, key=1, label=result, style=dashed];
m15_28 -> m15_35  [key=2, style=dotted];
m15_28 -> m15_29  [key=0, style=solid];
m15_29 -> m15_35  [key=2, style=dotted];
m15_29 -> m15_30  [key=0, style=solid];
m15_30 -> m15_35  [key=2, style=dotted];
m15_30 -> m15_31  [key=0, style=solid];
m15_52 -> m15_35  [key=2, style=dotted];
m15_52 -> m15_53  [key=0, style=solid];
m15_72 -> m15_35  [key=2, style=dotted];
m15_72 -> m15_73  [key=0, style=solid];
m15_83 -> m15_35  [key=2, style=dotted];
m15_83 -> m15_84  [key=0, style=solid];
m15_94 -> m15_35  [key=2, style=dotted];
m15_94 -> m15_95  [key=0, style=solid];
m15_95 -> m15_35  [key=2, style=dotted];
m15_95 -> m15_96  [key=0, style=solid];
m15_122 -> m15_35  [key=2, style=dotted];
m15_122 -> m15_123  [key=0, style=solid];
m15_123 -> m15_35  [key=2, style=dotted];
m15_123 -> m15_124  [key=0, style=solid];
m15_6 -> m15_4  [color=blue, key=0, style=bold];
m15_5 -> m15_6  [key=0, style=solid];
m15_5 -> m15_7  [key=2, style=dotted];
m15_5 -> m15_8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_9 -> m15_10  [key=0, style=solid];
m15_9 -> m15_11  [key=2, style=dotted];
m15_18 -> m15_15  [color=blue, key=0, style=bold];
m15_16 -> m15_17  [key=0, style=solid];
m15_16 -> m15_11  [key=2, style=dotted];
m15_31 -> m15_24  [color=blue, key=0, style=bold];
m15_25 -> m15_26  [key=0, style=solid];
m15_25 -> m15_32  [key=2, style=dotted];
m15_25 -> m15_33  [key=2, style=dotted];
m15_26 -> m15_28  [color=darkseagreen4, key=1, label=result, style=dashed];
m15_26 -> m15_29  [color=darkseagreen4, key=1, label=result, style=dashed];
m15_26 -> m15_30  [color=darkseagreen4, key=1, label=result, style=dashed];
m15_26 -> m15_27  [key=0, style=solid];
m15_26 -> m15_11  [key=2, style=dotted];
m15_41 -> m15_39  [color=blue, key=0, style=bold];
m15_40 -> m15_41  [key=0, style=solid];
m15_40 -> m15_7  [key=2, style=dotted];
m15_40 -> m15_42  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_53 -> m15_49  [color=blue, key=0, style=bold];
m15_73 -> m15_70  [color=blue, key=0, style=bold];
m15_71 -> m15_72  [key=0, style=solid];
m15_71 -> m15_7  [key=2, style=dotted];
m15_71 -> m15_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_75 -> m15_76  [key=0, style=solid];
m15_75 -> m15_32  [key=2, style=dotted];
m15_75 -> m15_77  [key=2, style=dotted];
m15_84 -> m15_81  [color=blue, key=0, style=bold];
m15_82 -> m15_83  [key=0, style=solid];
m15_82 -> m15_7  [key=2, style=dotted];
m15_82 -> m15_85  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_86 -> m15_87  [key=0, style=solid];
m15_86 -> m15_77  [key=2, style=dotted];
m15_96 -> m15_91  [color=blue, key=0, style=bold];
m15_92 -> m15_93  [key=0, style=solid];
m15_92 -> m15_32  [key=2, style=dotted];
m15_92 -> m15_77  [key=2, style=dotted];
m15_93 -> m15_94  [key=0, style=solid];
m15_93 -> m15_95  [color=darkseagreen4, key=1, label=hash, style=dashed];
m15_93 -> m15_97  [key=2, style=dotted];
m15_103 -> m15_101  [color=blue, key=0, style=bold];
m15_102 -> m15_103  [key=0, style=solid];
m15_102 -> m15_7  [key=2, style=dotted];
m15_102 -> m15_104  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_105 -> m15_106  [key=0, style=solid];
m15_105 -> m15_107  [key=2, style=dotted];
m15_114 -> m15_111  [color=blue, key=0, style=bold];
m15_112 -> m15_113  [key=0, style=solid];
m15_112 -> m15_107  [key=2, style=dotted];
m15_124 -> m15_118  [color=blue, key=0, style=bold];
m15_119 -> m15_120  [key=0, style=solid];
m15_119 -> m15_32  [key=2, style=dotted];
m15_119 -> m15_33  [key=2, style=dotted];
m15_120 -> m15_122  [color=darkseagreen4, key=1, label=result, style=dashed];
m15_120 -> m15_123  [color=darkseagreen4, key=1, label=result, style=dashed];
m15_120 -> m15_121  [key=0, style=solid];
m15_120 -> m15_107  [key=2, style=dotted];
m15_42 -> m15_43  [key=0, style=solid];
m15_44 -> m15_42  [color=blue, key=0, style=bold];
m15_51 -> m15_52  [key=0, style=solid];
m15_51 -> m15_34  [key=2, style=dotted];
m15_27 -> m15_28  [key=0, style=solid];
m15_27 -> m15_34  [key=2, style=dotted];
m15_121 -> m15_122  [key=0, style=solid];
m15_121 -> m15_34  [key=2, style=dotted];
m15_8 -> m15_9  [key=0, style=solid];
m15_10 -> m15_8  [color=blue, key=0, style=bold];
m15_17 -> m15_18  [key=0, style=solid];
m15_17 -> m15_19  [key=2, style=dotted];
m15_74 -> m15_75  [key=0, style=solid];
m15_76 -> m15_74  [color=blue, key=0, style=bold];
m15_85 -> m15_86  [key=0, style=solid];
m15_87 -> m15_85  [color=blue, key=0, style=bold];
m15_113 -> m15_114  [key=0, style=solid];
m15_113 -> m15_19  [key=2, style=dotted];
m15_106 -> m15_104  [color=blue, key=0, style=bold];
m15_20 -> m15_21  [key=0, style=solid];
m15_21 -> m15_23  [key=2, style=dotted];
m15_21 -> m15_22  [key=0, style=solid];
m15_21 -> m15_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_21 -> m15_68  [color=darkorchid, key=3, label="Field variable SqlConnection _existingConnection", style=bold];
m15_22 -> m15_20  [color=blue, key=0, style=bold];
m15_54 -> m15_55  [color=green, key=0, style=solid];
m15_55 -> m15_56  [color=green, key=0, style=solid];
m15_55 -> m15_23  [color=green, key=2, style=dotted];
m15_55 -> m15_57  [color=green, key=1, label="lambda expression", style=dashed];
m15_56 -> m15_54  [color=blue, key=0, style=bold];
m15_46 -> m15_47  [key=0, style=solid];
m15_47 -> m15_48  [key=0, style=solid];
m15_47 -> d11  [key=2, style=dotted];
m15_47 -> m15_49  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_48 -> m15_46  [color=blue, key=0, style=bold];
m15_78 -> m15_79  [key=0, style=solid];
m15_79 -> m15_80  [key=0, style=solid];
m15_79 -> d11  [key=2, style=dotted];
m15_79 -> m15_81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_80 -> m15_78  [color=blue, key=0, style=bold];
m15_88 -> m15_89  [key=0, style=solid];
m15_89 -> m15_23  [key=2, style=dotted];
m15_89 -> m15_90  [key=0, style=solid];
m15_89 -> m15_91  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_90 -> m15_88  [color=blue, key=0, style=bold];
m15_138 -> m15_55  [color=green, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
m15_138 -> m15_1  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
m15_138 -> m15_13  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
m15_138 -> m15_21  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
m15_138 -> m15_37  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
m15_138 -> m15_47  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
m15_138 -> m15_68  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
m15_138 -> m15_79  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
m15_138 -> m15_89  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
m15_138 -> m15_99  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
m15_138 -> m15_109  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
m15_138 -> m15_116  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
m15_140 -> m15_43  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m15_139 -> m15_9  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m15_141 -> m15_75  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m15_142 -> m15_86  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m15_143 -> m15_105  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m17_0 -> m17_13  [color=darkseagreen4, key=1, label="HangFire.JobStorage", style=dashed];
m17_0 -> m17_14  [color=darkseagreen4, key=1, label="HangFire.Server.IJobPerformanceProcess", style=dashed];
m17_0 -> m17_15  [color=darkseagreen4, key=1, label="HangFire.States.IStateMachineFactory", style=dashed];
m17_0 -> m17_19  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_0 -> m17_1  [key=0, style=solid];
m17_0 -> m17_3  [color=darkseagreen4, key=1, label="HangFire.JobStorage", style=dashed];
m17_0 -> m17_5  [color=darkseagreen4, key=1, label="HangFire.Server.IJobPerformanceProcess", style=dashed];
m17_0 -> m17_7  [color=darkseagreen4, key=1, label="HangFire.States.IStateMachineFactory", style=dashed];
m17_0 -> m17_9  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m17_0 -> m17_11  [color=darkseagreen4, key=1, label=int, style=dashed];
m17_0 -> m17_16  [color=darkseagreen4, key=1, label=int, style=dashed];
m17_0 -> m17_18  [color=darkseagreen4, key=1, label=int, style=dashed];
m17_13 -> m17_14  [key=0, style=solid];
m17_14 -> m17_15  [key=0, style=solid];
m17_15 -> m17_16  [key=0, style=solid];
m17_20 -> m17_28  [key=2, style=dotted];
m17_20 -> m17_21  [key=0, style=solid];
m17_20 -> m17_29  [key=2, style=dotted];
m17_22 -> m17_23  [key=0, style=solid];
m17_22 -> m17_30  [key=2, style=dotted];
m17_19 -> m17_20  [key=0, style=solid];
m17_19 -> m17_27  [key=2, style=dotted];
m17_11 -> m17_13  [key=0, style=solid];
m17_11 -> m17_12  [key=0, style=solid];
m17_16 -> m17_20  [color=darkseagreen4, key=1, label=workerRunners, style=dashed];
m17_16 -> m17_22  [color=darkseagreen4, key=1, label=workerRunners, style=dashed];
m17_16 -> m17_17  [key=0, style=solid];
m17_16 -> m17_26  [key=2, style=dotted];
m17_21 -> m17_21  [color=darkseagreen4, key=1, label=i, style=dashed];
m17_21 -> m17_18  [key=0, style=solid];
m17_18 -> m17_22  [key=0, style=solid];
m17_18 -> m17_19  [key=0, style=solid];
m17_18 -> m17_18  [color=darkorchid, key=3, label="Local variable int i", style=bold];
m17_17 -> m17_19  [color=darkseagreen4, key=1, label=i, style=dashed];
m17_17 -> m17_21  [color=darkseagreen4, key=1, label=i, style=dashed];
m17_17 -> m17_18  [key=0, style=solid];
m17_1 -> m17_2  [key=0, style=solid];
m17_1 -> m17_3  [key=0, style=solid];
m17_3 -> m17_4  [key=0, style=solid];
m17_3 -> m17_5  [key=0, style=solid];
m17_5 -> m17_6  [key=0, style=solid];
m17_5 -> m17_7  [key=0, style=solid];
m17_7 -> m17_8  [key=0, style=solid];
m17_7 -> m17_9  [key=0, style=solid];
m17_9 -> m17_11  [key=0, style=solid];
m17_9 -> m17_10  [key=0, style=solid];
m17_12 -> m17_23  [key=0, style=solid];
m17_12 -> m17_25  [key=2, style=dotted];
m17_2 -> m17_23  [key=0, style=solid];
m17_2 -> m17_24  [key=2, style=dotted];
m17_4 -> m17_23  [key=0, style=solid];
m17_4 -> m17_24  [key=2, style=dotted];
m17_6 -> m17_23  [key=0, style=solid];
m17_6 -> m17_24  [key=2, style=dotted];
m17_8 -> m17_23  [key=0, style=solid];
m17_8 -> m17_24  [key=2, style=dotted];
m17_10 -> m17_23  [key=0, style=solid];
m17_10 -> m17_24  [key=2, style=dotted];
m17_23 -> m17_0  [color=blue, key=0, style=bold];
m17_27 -> m17_34  [color=darkorchid, key=3, label="Field variable HangFire.JobStorage _storage", style=bold];
m17_35 -> m17_36  [key=0, style=solid];
m17_36 -> m17_37  [key=0, style=solid];
m17_36 -> m17_38  [key=2, style=dotted];
m17_37 -> m17_35  [color=blue, key=0, style=bold];
m17_39 -> m17_40  [color=green, key=0, style=solid];
m17_40 -> m17_41  [color=green, key=0, style=solid];
m17_40 -> m17_42  [color=green, key=2, style=dotted];
m17_41 -> m17_39  [color=blue, key=0, style=bold];
m17_28 -> m17_43  [color=green, key=0, style=solid];
m17_28 -> m17_19  [color=darkorchid, key=3, label="Parameter variable HangFire.Server.WorkerContext context", style=bold];
m17_43 -> m17_44  [color=green, key=0, style=solid];
m17_43 -> m17_45  [color=green, key=2, style=dotted];
m17_43 -> m17_46  [color=green, key=2, style=dotted];
m17_44 -> m17_28  [color=blue, key=0, style=bold];
m17_31 -> m17_32  [key=0, style=solid];
m17_32 -> m17_33  [key=0, style=solid];
m17_32 -> m17_34  [key=2, style=dotted];
m17_33 -> m17_31  [color=blue, key=0, style=bold];
m17_47 -> m17_40  [color=green, key=1, label="HangFire.Server.WorkerManager", style=dashed];
m17_47 -> m17_43  [color=green, key=1, label="HangFire.Server.WorkerManager", style=dashed];
m17_47 -> m17_13  [color=darkseagreen4, key=1, label="HangFire.Server.WorkerManager", style=dashed];
m17_47 -> m17_14  [color=darkseagreen4, key=1, label="HangFire.Server.WorkerManager", style=dashed];
m17_47 -> m17_15  [color=darkseagreen4, key=1, label="HangFire.Server.WorkerManager", style=dashed];
m17_47 -> m17_20  [color=darkseagreen4, key=1, label="HangFire.Server.WorkerManager", style=dashed];
m17_47 -> m17_22  [color=darkseagreen4, key=1, label="HangFire.Server.WorkerManager", style=dashed];
m17_47 -> m17_32  [color=darkseagreen4, key=1, label="HangFire.Server.WorkerManager", style=dashed];
m17_47 -> m17_36  [color=darkseagreen4, key=1, label="HangFire.Server.WorkerManager", style=dashed];
m18_3 -> m18_4  [key=0, style=solid];
m18_4 -> m18_5  [key=0, style=solid];
m18_4 -> m18_6  [key=2, style=dotted];
m18_4 -> m18_0  [color=blue, key=0, style=bold];
m18_5 -> m18_3  [color=blue, key=0, style=bold];
m18_50 -> m18_51  [key=0, style=solid];
m18_50 -> m18_59  [key=2, style=dotted];
m18_50 -> m18_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_50 -> m18_47  [color=blue, key=0, style=bold];
m18_39 -> m18_40  [color=green, key=0, style=solid];
m18_39 -> m18_41  [color=darkseagreen4, key=1, label="HangFire.Common.Job", style=dashed];
m18_39 -> m18_42  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m18_39 -> m18_47  [color=red, key=1, label="System.DateTime", style=dashed];
m18_39 -> m18_50  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m18_39 -> m18_66  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m18_39 -> m18_43  [color=green, key=1, label=addAndSetStateSql, style=dashed];
m18_40 -> m18_41  [key=0, style=solid];
m18_40 -> m18_54  [key=2, style=dotted];
m18_40 -> m18_55  [key=2, style=dotted];
m18_40 -> m18_49  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m18_40 -> m18_62  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m18_40 -> m18_50  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m18_40 -> m18_66  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m18_40 -> m18_52  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m18_40 -> m18_27  [key=2, style=dotted];
m18_40 -> m18_42  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_41 -> m18_42  [key=0, style=solid];
m18_41 -> m18_56  [key=2, style=dotted];
m18_41 -> m18_43  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m18_41 -> m18_44  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m18_41 -> m18_45  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m18_41 -> m18_46  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m18_41 -> m18_38  [color=blue, key=0, style=bold];
m18_42 -> m18_43  [key=0, style=solid];
m18_42 -> m18_57  [key=2, style=dotted];
m18_42 -> m18_44  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m18_42 -> m18_45  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m18_42 -> m18_46  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m18_42 -> m18_47  [color=red, key=1, label=storedParameters, style=dashed];
m18_42 -> m18_49  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m18_42 -> m18_62  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m18_47 -> m18_48  [color=green, key=0, style=solid];
m18_47 -> m18_32  [color=red, key=2, style=dotted];
m18_47 -> m18_58  [color=red, key=2, style=dotted];
m18_47 -> m18_49  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_47 -> m18_52  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_49 -> m18_50  [key=0, style=solid];
m18_49 -> m18_59  [key=2, style=dotted];
m18_49 -> m18_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_49 -> m18_27  [key=2, style=dotted];
m18_49 -> m18_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_52 -> m18_53  [key=0, style=solid];
m18_52 -> d268  [key=2, style=dotted];
m18_52 -> m18_45  [key=2, style=dotted];
m18_52 -> m18_46  [key=2, style=dotted];
m18_43 -> m18_44  [key=0, style=solid];
m18_43 -> m18_58  [key=2, style=dotted];
m18_43 -> d268  [key=2, style=dotted];
m18_43 -> m18_45  [key=2, style=dotted];
m18_43 -> m18_46  [key=2, style=dotted];
m18_44 -> m18_45  [key=0, style=solid];
m18_44 -> m18_58  [key=2, style=dotted];
m18_44 -> m18_42  [color=blue, key=0, style=bold];
m18_45 -> m18_46  [key=0, style=solid];
m18_45 -> m18_58  [key=2, style=dotted];
m18_46 -> m18_47  [color=red, key=0, style=solid];
m18_46 -> m18_58  [key=2, style=dotted];
m18_48 -> m18_49  [color=green, key=0, style=solid];
m18_48 -> m18_11  [key=2, style=dotted];
m18_48 -> m18_50  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m18_48 -> m18_51  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m18_48 -> m18_52  [color=green, key=1, label=addStateSql, style=dashed];
m18_51 -> m18_52  [key=0, style=solid];
m18_51 -> m18_60  [key=2, style=dotted];
m18_53 -> m18_39  [color=blue, key=0, style=bold];
m18_53 -> m18_51  [color=blue, key=0, style=bold];
m18_102 -> m18_103  [color=green, key=0, style=solid];
m18_102 -> m18_105  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_102 -> m18_104  [color=green, key=1, label=query, style=dashed];
m18_102 -> m18_107  [color=green, key=1, label=query, style=dashed];
m18_103 -> m18_104  [color=red, key=0, style=solid];
m18_103 -> m18_105  [color=red, key=0, style=solid];
m18_103 -> m18_97  [key=2, style=dotted];
m18_105 -> m18_106  [key=0, style=solid];
m18_105 -> m18_29  [key=2, style=dotted];
m18_105 -> m18_96  [key=2, style=dotted];
m18_105 -> m18_108  [color=darkseagreen4, key=1, label=entries, style=dashed];
m18_105 -> m18_111  [color=red, key=1, label=entries, style=dashed];
m18_105 -> m18_101  [color=blue, key=0, style=bold];
m18_104 -> m18_112  [color=red, key=0, style=solid];
m18_104 -> m18_113  [color=red, key=2, style=dotted];
m18_104 -> m18_27  [key=2, style=dotted];
m18_104 -> m18_105  [key=0, style=solid];
m18_104 -> m18_106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_106 -> m18_107  [key=0, style=solid];
m18_106 -> m18_108  [key=0, style=solid];
m18_108 -> m18_109  [key=0, style=solid];
m18_108 -> m18_114  [key=2, style=dotted];
m18_108 -> m18_110  [color=darkseagreen4, key=1, label=stateData, style=dashed];
m18_108 -> m18_111  [color=red, key=1, label=stateData, style=dashed];
m18_108 -> m18_106  [color=blue, key=0, style=bold];
m18_111 -> m18_112  [color=green, key=0, style=solid];
m18_111 -> m18_116  [color=red, key=2, style=dotted];
m18_111 -> m18_27  [color=green, key=2, style=dotted];
m18_111 -> m18_114  [color=green, key=1, label="lambda expression", style=dashed];
m18_107 -> m18_112  [key=0, style=solid];
m18_107 -> d268  [key=2, style=dotted];
m18_107 -> m18_108  [key=0, style=solid];
m18_109 -> m18_110  [key=0, style=solid];
m18_109 -> m18_115  [key=2, style=dotted];
m18_109 -> m18_111  [color=green, key=1, label=string, style=dashed];
m18_110 -> m18_111  [color=green, key=0, style=solid];
m18_110 -> m18_115  [key=2, style=dotted];
m18_110 -> m18_113  [key=2, style=dotted];
m18_112 -> m18_102  [color=blue, key=0, style=bold];
m18_112 -> m18_109  [color=blue, key=0, style=bold];
m18_114 -> m18_115  [color=green, key=0, style=solid];
m18_193 -> m18_194  [key=0, style=solid];
m18_193 -> m18_205  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m18_193 -> m18_31  [key=2, style=dotted];
m18_193 -> d268  [key=2, style=dotted];
m18_194 -> m18_195  [key=0, style=solid];
m18_194 -> m18_210  [key=2, style=dotted];
m18_194 -> m18_198  [color=darkseagreen4, key=1, label=serverNames, style=dashed];
m18_194 -> m18_192  [color=blue, key=0, style=bold];
m18_205 -> m18_206  [key=0, style=solid];
m18_205 -> m18_203  [key=0, style=solid];
m18_205 -> m18_215  [key=2, style=dotted];
m18_205 -> m18_210  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_205 -> m18_213  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_195 -> m18_196  [key=0, style=solid];
m18_195 -> m18_167  [key=2, style=dotted];
m18_195 -> m18_200  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_195 -> m18_222  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m18_195 -> m18_203  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_198 -> m18_199  [color=green, key=0, style=solid];
m18_198 -> m18_201  [key=0, style=solid];
m18_198 -> m18_200  [color=green, key=1, label=query, style=dashed];
m18_198 -> m18_203  [color=green, key=1, label=query, style=dashed];
m18_196 -> m18_197  [key=0, style=solid];
m18_196 -> m18_205  [color=darkseagreen4, key=1, label=utcNow, style=dashed];
m18_196 -> m18_198  [color=green, key=0, style=solid];
m18_200 -> m18_198  [key=0, style=solid];
m18_200 -> m18_59  [key=2, style=dotted];
m18_200 -> m18_216  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_200 -> m18_221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_200 -> m18_27  [key=2, style=dotted];
m18_200 -> m18_201  [key=0, style=solid];
m18_200 -> m18_202  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_203 -> m18_204  [key=0, style=solid];
m18_203 -> m18_208  [key=0, style=solid];
m18_203 -> m18_31  [key=2, style=dotted];
m18_203 -> d268  [key=2, style=dotted];
m18_197 -> m18_198  [key=0, style=solid];
m18_197 -> m18_211  [key=2, style=dotted];
m18_197 -> m18_200  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m18_197 -> m18_201  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m18_197 -> m18_113  [key=2, style=dotted];
m18_201 -> m18_202  [key=0, style=solid];
m18_201 -> m18_212  [key=2, style=dotted];
m18_201 -> m18_195  [color=blue, key=0, style=bold];
m18_199 -> m18_200  [key=0, style=solid];
m18_199 -> m18_217  [color=darkseagreen4, key=1, label=name, style=dashed];
m18_199 -> m18_222  [color=darkseagreen4, key=1, label=name, style=dashed];
m18_199 -> m18_97  [key=2, style=dotted];
m18_202 -> m18_203  [key=0, style=solid];
m18_202 -> m18_207  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m18_202 -> m18_208  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m18_207 -> m18_203  [key=0, style=solid];
m18_207 -> m18_207  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m18_207 -> m18_208  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m18_207 -> m18_211  [key=0, style=solid];
m18_207 -> m18_113  [key=2, style=dotted];
m18_208 -> m18_209  [color=green, key=0, style=solid];
m18_208 -> m18_210  [color=green, key=1, label=query, style=dashed];
m18_208 -> m18_213  [color=green, key=1, label=query, style=dashed];
m18_204 -> m18_205  [key=0, style=solid];
m18_204 -> m18_213  [key=2, style=dotted];
m18_204 -> m18_214  [key=2, style=dotted];
m18_204 -> m18_204  [color=darkseagreen4, key=1, label=heartbeat, style=dashed];
m18_204 -> m18_206  [color=darkseagreen4, key=1, label=heartbeat, style=dashed];
m18_204 -> m18_202  [color=blue, key=0, style=bold];
m18_206 -> m18_207  [key=0, style=solid];
m18_206 -> m18_176  [key=2, style=dotted];
m18_206 -> m18_206  [color=darkseagreen4, key=1, label=heartbeat, style=dashed];
m18_206 -> m18_208  [color=green, key=0, style=solid];
m18_209 -> m18_193  [color=blue, key=0, style=bold];
m18_209 -> m18_210  [key=0, style=solid];
m18_209 -> m18_113  [key=2, style=dotted];
m18_210 -> m18_27  [key=2, style=dotted];
m18_210 -> m18_211  [key=0, style=solid];
m18_210 -> m18_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_211 -> m18_205  [color=blue, key=0, style=bold];
m18_101 -> m18_102  [color=green, key=0, style=solid];
m18_101 -> m18_104  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_101 -> m18_107  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_71 -> m18_72  [color=green, key=0, style=solid];
m18_71 -> m18_75  [color=green, key=1, label=string, style=dashed];
m18_71 -> m18_73  [key=0, style=solid];
m18_72 -> m18_73  [color=green, key=0, style=solid];
m18_72 -> m18_27  [color=green, key=2, style=dotted];
m18_72 -> m18_74  [color=green, key=1, label="lambda expression", style=dashed];
m18_72 -> m18_95  [key=0, style=solid];
m18_73 -> m18_71  [color=blue, key=0, style=bold];
m18_73 -> m18_74  [key=0, style=solid];
m18_73 -> m18_90  [color=darkseagreen4, key=1, label=type, style=dashed];
m18_17 -> m18_18  [key=0, style=solid];
m18_17 -> m18_17  [color=darkseagreen4, key=1, label=queueIndex, style=dashed];
m18_17 -> m18_21  [color=darkseagreen4, key=1, label=queueIndex, style=dashed];
m18_55 -> m18_56  [key=0, style=solid];
m18_55 -> m18_59  [key=2, style=dotted];
m18_92 -> m18_93  [color=green, key=0, style=solid];
m18_92 -> m18_95  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_92 -> m18_99  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_93 -> m18_94  [color=red, key=0, style=solid];
m18_93 -> m18_95  [color=green, key=1, label=addSql, style=dashed];
m18_93 -> m18_99  [color=green, key=1, label=addSql, style=dashed];
m18_94 -> m18_95  [color=red, key=0, style=solid];
m18_94 -> m18_97  [color=red, key=2, style=dotted];
m18_94 -> m18_100  [color=red, key=2, style=dotted];
m18_94 -> m18_101  [color=red, key=2, style=dotted];
m18_95 -> m18_27  [key=2, style=dotted];
m18_95 -> m18_96  [key=0, style=solid];
m18_95 -> m18_98  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_95 -> m18_69  [color=blue, key=0, style=bold];
m18_96 -> m18_92  [color=blue, key=0, style=bold];
m18_185 -> m18_186  [key=0, style=solid];
m18_185 -> m18_190  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_185 -> m18_193  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_188 -> m18_189  [color=green, key=0, style=solid];
m18_188 -> m18_190  [color=green, key=1, label=query, style=dashed];
m18_188 -> m18_193  [color=green, key=1, label=query, style=dashed];
m18_188 -> m18_186  [color=blue, key=0, style=bold];
m18_186 -> m18_188  [color=green, key=0, style=solid];
m18_186 -> m18_187  [color=red, key=0, style=solid];
m18_186 -> m18_29  [color=green, key=0, style=solid];
m18_189 -> m18_190  [key=0, style=solid];
m18_189 -> m18_141  [key=2, style=dotted];
m18_190 -> m18_27  [key=2, style=dotted];
m18_190 -> m18_191  [color=red, key=0, style=solid];
m18_190 -> m18_192  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_187 -> m18_191  [key=0, style=solid];
m18_187 -> m18_113  [key=2, style=dotted];
m18_187 -> m18_188  [color=red, key=0, style=solid];
m18_187 -> m18_29  [color=red, key=2, style=dotted];
m18_187 -> m18_189  [color=red, key=2, style=dotted];
m18_191 -> m18_185  [color=blue, key=0, style=bold];
m18_191 -> m18_192  [color=red, key=0, style=solid];
m18_191 -> m18_29  [color=red, key=2, style=dotted];
m18_191 -> m18_32  [color=red, key=2, style=dotted];
m18_191 -> m18_33  [color=red, key=2, style=dotted];
m18_69 -> m18_70  [color=green, key=0, style=solid];
m18_69 -> d268  [color=green, key=2, style=dotted];
m18_70 -> m18_71  [color=red, key=0, style=solid];
m18_70 -> m18_29  [color=red, key=2, style=dotted];
m18_70 -> m18_96  [color=red, key=2, style=dotted];
m18_70 -> m18_78  [color=red, key=1, label=storedData, style=dashed];
m18_70 -> m18_79  [color=red, key=1, label=storedData, style=dashed];
m18_70 -> m18_80  [color=red, key=1, label=storedData, style=dashed];
m18_70 -> m18_81  [color=red, key=1, label=storedData, style=dashed];
m18_70 -> m18_82  [color=red, key=1, label=storedData, style=dashed];
m18_70 -> m18_83  [color=red, key=1, label=storedData, style=dashed];
m18_70 -> m18_84  [color=red, key=1, label=storedData, style=dashed];
m18_70 -> m18_85  [color=red, key=1, label=storedData, style=dashed];
m18_70 -> m18_86  [color=red, key=1, label=storedData, style=dashed];
m18_70 -> m18_87  [color=red, key=1, label=storedData, style=dashed];
m18_70 -> m18_94  [color=red, key=1, label=storedData, style=dashed];
m18_70 -> m18_68  [color=blue, key=0, style=bold];
m18_78 -> m18_79  [color=green, key=0, style=solid];
m18_78 -> m18_80  [color=red, key=0, style=solid];
m18_78 -> m18_97  [color=red, key=2, style=dotted];
m18_78 -> m18_27  [color=green, key=2, style=dotted];
m18_79 -> m18_80  [key=0, style=solid];
m18_79 -> m18_90  [color=darkseagreen4, key=1, label=type, style=dashed];
m18_79 -> m18_77  [color=blue, key=0, style=bold];
m18_80 -> m18_81  [color=green, key=0, style=solid];
m18_80 -> m18_82  [key=0, style=solid];
m18_80 -> m18_97  [key=2, style=dotted];
m18_81 -> m18_82  [color=green, key=0, style=solid];
m18_81 -> m18_90  [color=darkseagreen4, key=1, label=method, style=dashed];
m18_81 -> d268  [color=green, key=2, style=dotted];
m18_82 -> m18_83  [key=0, style=solid];
m18_82 -> m18_84  [key=0, style=solid];
m18_82 -> m18_97  [key=2, style=dotted];
m18_82 -> m18_80  [color=blue, key=0, style=bold];
m18_83 -> m18_84  [color=green, key=0, style=solid];
m18_83 -> m18_90  [color=darkseagreen4, key=1, label=parameterTypes, style=dashed];
m18_83 -> m18_87  [color=green, key=1, label=string, style=dashed];
m18_84 -> m18_85  [color=green, key=0, style=solid];
m18_84 -> m18_86  [key=0, style=solid];
m18_84 -> m18_97  [key=2, style=dotted];
m18_84 -> m18_27  [color=green, key=2, style=dotted];
m18_85 -> m18_86  [key=0, style=solid];
m18_85 -> m18_90  [color=darkseagreen4, key=1, label=arguments, style=dashed];
m18_85 -> m18_83  [color=blue, key=0, style=bold];
m18_86 -> m18_87  [color=green, key=0, style=solid];
m18_86 -> m18_88  [key=0, style=solid];
m18_86 -> m18_97  [key=2, style=dotted];
m18_87 -> m18_88  [color=green, key=0, style=solid];
m18_87 -> m18_94  [color=red, key=1, label=createdAt, style=dashed];
m18_87 -> m18_31  [color=green, key=2, style=dotted];
m18_87 -> d268  [color=green, key=2, style=dotted];
m18_74 -> m18_75  [color=green, key=0, style=solid];
m18_74 -> m18_90  [color=darkseagreen4, key=1, label=method, style=dashed];
m18_90 -> m18_91  [key=0, style=solid];
m18_90 -> m18_98  [key=2, style=dotted];
m18_90 -> m18_92  [key=2, style=dotted];
m18_75 -> m18_76  [color=green, key=0, style=solid];
m18_75 -> m18_90  [color=darkseagreen4, key=1, label=parameterTypes, style=dashed];
m18_75 -> m18_31  [color=green, key=2, style=dotted];
m18_75 -> d268  [color=green, key=2, style=dotted];
m18_76 -> m18_77  [key=0, style=solid];
m18_76 -> m18_90  [color=darkseagreen4, key=1, label=arguments, style=dashed];
m18_76 -> m18_74  [color=blue, key=0, style=bold];
m18_77 -> m18_78  [color=green, key=0, style=solid];
m18_77 -> m18_94  [color=red, key=1, label=createdAt, style=dashed];
m18_77 -> m18_81  [color=green, key=1, label=string, style=dashed];
m18_88 -> m18_89  [key=0, style=solid];
m18_88 -> m18_86  [color=blue, key=0, style=bold];
m18_89 -> m18_90  [key=0, style=solid];
m18_91 -> m18_92  [key=0, style=solid];
m18_91 -> m18_94  [color=red, key=0, style=solid];
m18_91 -> m18_99  [key=2, style=dotted];
m18_91 -> m18_89  [color=blue, key=0, style=bold];
m18_145 -> m18_146  [key=0, style=solid];
m18_145 -> m18_148  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_145 -> m18_143  [color=blue, key=0, style=bold];
m18_146 -> m18_147  [key=0, style=solid];
m18_146 -> m18_148  [key=0, style=solid];
m18_148 -> m18_149  [color=red, key=0, style=solid];
m18_148 -> m18_130  [key=2, style=dotted];
m18_148 -> m18_96  [key=2, style=dotted];
m18_148 -> m18_146  [color=blue, key=0, style=bold];
m18_147 -> m18_150  [key=0, style=solid];
m18_147 -> m18_113  [key=2, style=dotted];
m18_147 -> m18_147  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, string>", style=dashed];
m18_147 -> m18_148  [key=0, style=solid];
m18_149 -> m18_150  [color=red, key=0, style=solid];
m18_149 -> m18_154  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_149 -> m18_157  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_150 -> m18_145  [color=blue, key=0, style=bold];
m18_150 -> m18_152  [color=green, key=0, style=solid];
m18_150 -> m18_151  [key=0, style=solid];
m18_54 -> m18_55  [key=0, style=solid];
m18_54 -> m18_57  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_54 -> m18_62  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_123 -> m18_121  [color=blue, key=0, style=bold];
m18_100 -> m18_98  [color=blue, key=0, style=bold];
m18_99 -> d268  [key=2, style=dotted];
m18_99 -> m18_100  [key=0, style=solid];
m18_132 -> m18_135  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m18_132 -> m18_139  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_132 -> m18_144  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_132 -> m18_133  [key=0, style=solid];
m18_132 -> m18_147  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_215 -> m18_216  [key=0, style=solid];
m18_215 -> m18_220  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_215 -> m18_223  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_218 -> m18_219  [color=green, key=0, style=solid];
m18_218 -> m18_220  [color=green, key=1, label=query, style=dashed];
m18_218 -> m18_223  [color=green, key=1, label=query, style=dashed];
m18_218 -> m18_216  [color=blue, key=0, style=bold];
m18_216 -> m18_218  [color=green, key=0, style=solid];
m18_216 -> m18_217  [key=0, style=solid];
m18_219 -> m18_220  [key=0, style=solid];
m18_219 -> m18_141  [key=2, style=dotted];
m18_220 -> m18_27  [key=2, style=dotted];
m18_220 -> m18_221  [key=0, style=solid];
m18_220 -> m18_222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_217 -> m18_221  [key=0, style=solid];
m18_217 -> m18_113  [key=2, style=dotted];
m18_217 -> m18_218  [key=0, style=solid];
m18_217 -> m18_219  [key=2, style=dotted];
m18_217 -> m18_220  [key=2, style=dotted];
m18_221 -> m18_215  [color=blue, key=0, style=bold];
m18_221 -> m18_222  [key=0, style=solid];
m18_38 -> m18_39  [color=green, key=0, style=solid];
m18_38 -> m18_40  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_38 -> m18_43  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_97 -> m18_252  [key=0, style=solid];
m18_113 -> m18_248  [key=0, style=solid];
m18_35 -> m18_36  [color=green, key=0, style=solid];
m18_36 -> m18_37  [color=green, key=0, style=solid];
m18_36 -> m18_38  [key=2, style=dotted];
m18_36 -> d268  [color=green, key=2, style=dotted];
m18_37 -> m18_35  [color=blue, key=0, style=bold];
m18_226 -> m18_228  [color=green, key=0, style=solid];
m18_226 -> m18_227  [key=0, style=solid];
m18_131 -> m18_129  [color=blue, key=0, style=bold];
m18_235 -> m18_236  [key=0, style=solid];
m18_235 -> m18_240  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_235 -> m18_243  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_235 -> m18_183  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_235 -> m18_187  [color=red, key=1, label=string, style=dashed];
m18_235 -> m18_36  [color=green, key=1, label=string, style=dashed];
m18_238 -> m18_239  [color=green, key=0, style=solid];
m18_238 -> m18_240  [color=green, key=1, label=query, style=dashed];
m18_238 -> m18_243  [color=green, key=1, label=query, style=dashed];
m18_236 -> m18_238  [color=green, key=0, style=solid];
m18_236 -> m18_237  [key=0, style=solid];
m18_236 -> m18_217  [color=darkseagreen4, key=1, label=name, style=dashed];
m18_236 -> m18_222  [color=darkseagreen4, key=1, label=name, style=dashed];
m18_239 -> m18_240  [key=0, style=solid];
m18_239 -> m18_113  [key=2, style=dotted];
m18_240 -> m18_27  [key=2, style=dotted];
m18_240 -> m18_241  [key=0, style=solid];
m18_240 -> m18_242  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_237 -> m18_241  [key=0, style=solid];
m18_237 -> m18_113  [key=2, style=dotted];
m18_237 -> m18_222  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m18_241 -> m18_235  [color=blue, key=0, style=bold];
m18_65 -> m18_66  [color=green, key=0, style=solid];
m18_65 -> m18_69  [color=green, key=1, label=string, style=dashed];
m18_66 -> m18_67  [color=green, key=0, style=solid];
m18_66 -> m18_27  [color=green, key=2, style=dotted];
m18_66 -> m18_68  [color=green, key=1, label="lambda expression", style=dashed];
m18_66 -> m18_29  [key=2, style=dotted];
m18_67 -> m18_65  [color=blue, key=0, style=bold];
m18_225 -> m18_226  [key=0, style=solid];
m18_225 -> m18_230  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_225 -> m18_233  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_228 -> m18_229  [color=green, key=0, style=solid];
m18_228 -> m18_230  [color=green, key=1, label=query, style=dashed];
m18_228 -> m18_233  [color=green, key=1, label=query, style=dashed];
m18_228 -> m18_1  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_4  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_8  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_22  [color=red, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_23  [color=red, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_25  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_26  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_36  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_48  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_70  [color=red, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_105  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_118  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_121  [color=red, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_127  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_134  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_143  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_148  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_152  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_174  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_191  [color=red, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_194  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_197  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_228 -> m18_206  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m18_229 -> m18_230  [key=0, style=solid];
m18_229 -> m18_97  [key=2, style=dotted];
m18_229 -> m18_62  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m18_229 -> m18_66  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m18_230 -> m18_27  [key=2, style=dotted];
m18_230 -> m18_231  [key=0, style=solid];
m18_230 -> m18_232  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_230 -> m18_62  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m18_227 -> m18_231  [key=0, style=solid];
m18_227 -> m18_113  [key=2, style=dotted];
m18_231 -> m18_225  [color=blue, key=0, style=bold];
m18_231 -> m18_66  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m18_231 -> m18_29  [color=green, key=1, label="System.TimeSpan", style=dashed];
m18_60 -> m18_60  [color=darkorchid, key=3, label="method methodReturn HangFire.States.JobState OnStateChanged", style=bold];
m18_251 -> m18_256  [key=0, style=solid];
m18_256 -> m18_257  [key=0, style=solid];
m18_256 -> m18_258  [key=2, style=dotted];
m18_257 -> m18_251  [color=blue, key=0, style=bold];
m18_192 -> m18_190  [color=blue, key=0, style=bold];
m18_192 -> m18_193  [key=0, style=solid];
m18_120 -> m18_121  [color=red, key=0, style=solid];
m18_120 -> m18_117  [color=blue, key=0, style=bold];
m18_121 -> m18_122  [color=green, key=0, style=solid];
m18_121 -> m18_29  [color=red, key=2, style=dotted];
m18_121 -> m18_123  [color=red, key=2, style=dotted];
m18_122 -> m18_120  [color=blue, key=0, style=bold];
m18_122 -> m18_123  [color=green, key=0, style=solid];
m18_122 -> d268  [color=green, key=2, style=dotted];
m18_68 -> m18_69  [color=green, key=0, style=solid];
m18_9 -> m18_7  [color=blue, key=0, style=bold];
m18_137 -> m18_138  [color=green, key=0, style=solid];
m18_137 -> m18_139  [color=green, key=1, label=sql, style=dashed];
m18_137 -> m18_144  [color=green, key=1, label=sql, style=dashed];
m18_135 -> m18_137  [color=green, key=0, style=solid];
m18_135 -> m18_136  [key=0, style=solid];
m18_135 -> m18_133  [color=blue, key=0, style=bold];
m18_138 -> m18_139  [key=0, style=solid];
m18_138 -> m18_141  [key=2, style=dotted];
m18_138 -> m18_143  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_139 -> m18_140  [key=0, style=solid];
m18_139 -> m18_142  [key=2, style=dotted];
m18_139 -> m18_143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_139 -> m18_141  [key=0, style=solid];
m18_133 -> m18_135  [key=0, style=solid];
m18_133 -> m18_134  [key=0, style=solid];
m18_136 -> m18_140  [key=0, style=solid];
m18_136 -> m18_113  [key=2, style=dotted];
m18_134 -> m18_140  [key=0, style=solid];
m18_134 -> m18_113  [key=2, style=dotted];
m18_134 -> m18_135  [key=0, style=solid];
m18_134 -> m18_136  [key=2, style=dotted];
m18_134 -> m18_137  [key=2, style=dotted];
m18_140 -> m18_132  [color=blue, key=0, style=bold];
m18_140 -> m18_144  [key=0, style=solid];
m18_140 -> m18_113  [key=2, style=dotted];
m18_32 -> m18_33  [color=green, key=0, style=solid];
m18_32 -> m18_36  [color=green, key=1, label=string, style=dashed];
m18_33 -> m18_34  [color=green, key=0, style=solid];
m18_33 -> m18_27  [color=green, key=2, style=dotted];
m18_33 -> m18_35  [color=green, key=1, label="lambda expression", style=dashed];
m18_34 -> m18_32  [color=blue, key=0, style=bold];
m18_6 -> m18_7  [key=0, style=solid];
m18_173 -> m18_174  [key=0, style=solid];
m18_174 -> m18_175  [key=0, style=solid];
m18_174 -> m18_176  [key=2, style=dotted];
m18_174 -> m18_172  [color=blue, key=0, style=bold];
m18_175 -> m18_173  [color=blue, key=0, style=bold];
m18_175 -> m18_176  [key=0, style=solid];
m18_175 -> m18_180  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_175 -> m18_183  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_61 -> m18_62  [key=0, style=solid];
m18_62 -> m18_63  [key=0, style=solid];
m18_62 -> m18_29  [key=2, style=dotted];
m18_62 -> m18_64  [key=2, style=dotted];
m18_63 -> m18_61  [color=blue, key=0, style=bold];
m18_161 -> m18_162  [key=0, style=solid];
m18_161 -> m18_163  [key=2, style=dotted];
m18_161 -> m18_167  [key=0, style=solid];
m18_161 -> m18_113  [key=2, style=dotted];
m18_165 -> m18_166  [color=red, key=0, style=solid];
m18_165 -> m18_29  [color=red, key=2, style=dotted];
m18_165 -> m18_167  [color=red, key=2, style=dotted];
m18_165 -> m18_168  [color=red, key=2, style=dotted];
m18_165 -> m18_32  [color=red, key=2, style=dotted];
m18_165 -> m18_64  [color=red, key=2, style=dotted];
m18_165 -> m18_97  [key=2, style=dotted];
m18_170 -> m18_171  [color=red, key=0, style=solid];
m18_170 -> m18_29  [color=red, key=2, style=dotted];
m18_170 -> m18_172  [color=red, key=2, style=dotted];
m18_170 -> m18_168  [color=blue, key=0, style=bold];
m18_160 -> m18_161  [key=0, style=solid];
m18_160 -> m18_162  [key=0, style=solid];
m18_164 -> m18_165  [color=green, key=0, style=solid];
m18_164 -> m18_13  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m18_164 -> m18_11  [key=0, style=solid];
m18_164 -> m18_15  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m18_164 -> m18_166  [color=green, key=1, label=query, style=dashed];
m18_164 -> m18_169  [color=green, key=1, label=query, style=dashed];
m18_169 -> m18_170  [color=red, key=0, style=solid];
m18_169 -> d268  [key=2, style=dotted];
m18_169 -> m18_18  [key=2, style=dotted];
m18_169 -> m18_171  [key=2, style=dotted];
m18_169 -> m18_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_162 -> m18_160  [color=blue, key=0, style=bold];
m18_162 -> m18_164  [color=green, key=0, style=solid];
m18_162 -> m18_163  [key=0, style=solid];
m18_166 -> m18_164  [color=blue, key=0, style=bold];
m18_166 -> m18_167  [key=0, style=solid];
m18_166 -> m18_142  [key=2, style=dotted];
m18_166 -> m18_168  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_171 -> m18_169  [color=blue, key=0, style=bold];
m18_183 -> m18_184  [key=0, style=solid];
m18_183 -> m18_185  [key=2, style=dotted];
m18_183 -> d268  [key=2, style=dotted];
m18_182 -> m18_183  [key=0, style=solid];
m18_184 -> m18_182  [color=blue, key=0, style=bold];
m18_222 -> m18_223  [key=0, style=solid];
m18_222 -> m18_224  [key=2, style=dotted];
m18_222 -> m18_225  [key=2, style=dotted];
m18_222 -> m18_226  [key=2, style=dotted];
m18_222 -> m18_227  [key=2, style=dotted];
m18_223 -> m18_221  [color=blue, key=0, style=bold];
m18_223 -> d268  [key=2, style=dotted];
m18_223 -> m18_224  [key=0, style=solid];
m18_29 -> m18_188  [color=green, key=0, style=solid];
m18_29 -> m18_31  [color=green, key=2, style=dotted];
m18_29 -> d268  [color=green, key=2, style=dotted];
m18_115 -> m18_116  [color=green, key=0, style=solid];
m18_115 -> d268  [color=green, key=2, style=dotted];
m18_116 -> m18_114  [color=blue, key=0, style=bold];
m18_130 -> d268  [key=2, style=dotted];
m18_130 -> m18_131  [key=0, style=solid];
m18_144 -> d268  [key=2, style=dotted];
m18_144 -> m18_145  [key=0, style=solid];
m18_144 -> m18_18  [key=2, style=dotted];
m18_144 -> m18_146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_144 -> m18_138  [color=blue, key=0, style=bold];
m18_157 -> d268  [key=2, style=dotted];
m18_157 -> m18_158  [key=0, style=solid];
m18_157 -> m18_155  [color=red, key=0, style=solid];
m18_157 -> m18_59  [color=red, key=2, style=dotted];
m18_157 -> m18_169  [color=red, key=1, label="lambda expression", style=dashed];
m18_213 -> m18_31  [key=2, style=dotted];
m18_213 -> d268  [key=2, style=dotted];
m18_213 -> m18_214  [key=0, style=solid];
m18_233 -> d268  [key=2, style=dotted];
m18_233 -> m18_234  [key=0, style=solid];
m18_233 -> m18_165  [color=red, key=1, label="HangFire.Server.ServerContext", style=dashed];
m18_243 -> d268  [key=2, style=dotted];
m18_243 -> m18_244  [key=0, style=solid];
m18_12 -> m18_13  [key=0, style=solid];
m18_12 -> m18_14  [key=0, style=solid];
m18_12 -> m18_16  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m18_12 -> m18_17  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m18_12 -> m18_18  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m18_13 -> d268  [key=2, style=dotted];
m18_13 -> m18_14  [key=0, style=solid];
m18_13 -> m18_18  [key=2, style=dotted];
m18_13 -> m18_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_14 -> m18_15  [key=0, style=solid];
m18_14 -> m18_166  [key=0, style=solid];
m18_98 -> m18_99  [key=0, style=solid];
m18_129 -> m18_130  [key=0, style=solid];
m18_129 -> m18_124  [color=blue, key=0, style=bold];
m18_143 -> m18_144  [key=0, style=solid];
m18_143 -> m18_130  [key=2, style=dotted];
m18_143 -> m18_64  [key=2, style=dotted];
m18_156 -> m18_157  [color=red, key=0, style=solid];
m18_156 -> m18_170  [color=red, key=1, label=queue1, style=dashed];
m18_158 -> m18_156  [color=blue, key=0, style=bold];
m18_158 -> m18_159  [key=0, style=solid];
m18_158 -> m18_60  [key=2, style=dotted];
m18_168 -> m18_169  [key=0, style=solid];
m18_172 -> m18_173  [key=0, style=solid];
m18_212 -> m18_213  [key=0, style=solid];
m18_214 -> m18_212  [color=blue, key=0, style=bold];
m18_224 -> m18_222  [color=blue, key=0, style=bold];
m18_232 -> m18_233  [key=0, style=solid];
m18_232 -> m18_161  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_232 -> m18_165  [color=red, key=1, label=string, style=dashed];
m18_232 -> m18_170  [color=red, key=1, label=string, style=dashed];
m18_232 -> m18_29  [color=green, key=1, label=string, style=dashed];
m18_234 -> m18_232  [color=blue, key=0, style=bold];
m18_234 -> m18_170  [color=red, key=1, label=queue1, style=dashed];
m18_242 -> m18_243  [key=0, style=solid];
m18_244 -> m18_242  [color=blue, key=0, style=bold];
m18_11 -> m18_12  [key=0, style=solid];
m18_11 -> m18_17  [key=2, style=dotted];
m18_15 -> m18_14  [key=0, style=solid];
m18_15 -> m18_20  [key=2, style=dotted];
m18_15 -> m18_16  [key=0, style=solid];
m18_15 -> m18_17  [color=darkseagreen4, key=1, label=queueIndex, style=dashed];
m18_159 -> m18_162  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<string>", style=dashed];
m18_159 -> m18_166  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_159 -> m18_169  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_159 -> m18_160  [key=0, style=solid];
m18_159 -> m18_173  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_159 -> m18_151  [color=blue, key=0, style=bold];
m18_163 -> m18_167  [key=0, style=solid];
m18_163 -> m18_113  [key=2, style=dotted];
m18_167 -> m18_159  [color=blue, key=0, style=bold];
m18_142 -> m18_144  [key=0, style=solid];
m18_142 -> m18_113  [key=2, style=dotted];
m18_117 -> m18_119  [color=green, key=1, label=string, style=dashed];
m18_117 -> m18_122  [color=green, key=1, label=string, style=dashed];
m18_117 -> m18_118  [key=0, style=solid];
m18_119 -> m18_120  [color=green, key=0, style=solid];
m18_119 -> m18_27  [color=green, key=2, style=dotted];
m18_119 -> m18_121  [color=green, key=1, label="lambda expression", style=dashed];
m18_119 -> m18_117  [color=blue, key=0, style=bold];
m18_118 -> m18_119  [color=green, key=0, style=solid];
m18_118 -> m18_113  [key=2, style=dotted];
m18_118 -> m18_29  [key=2, style=dotted];
m18_118 -> m18_33  [key=2, style=dotted];
m18_7 -> m18_8  [key=0, style=solid];
m18_7 -> m18_9  [key=2, style=dotted];
m18_7 -> m18_164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_8 -> m18_6  [color=blue, key=0, style=bold];
m18_8 -> m18_9  [key=0, style=solid];
m18_8 -> m18_10  [key=2, style=dotted];
m18_8 -> m18_11  [key=2, style=dotted];
m18_179 -> m18_180  [color=red, key=0, style=solid];
m18_179 -> m18_59  [color=red, key=2, style=dotted];
m18_179 -> m18_186  [color=red, key=1, label="lambda expression", style=dashed];
m18_179 -> m18_97  [key=2, style=dotted];
m18_176 -> m18_177  [key=0, style=solid];
m18_176 -> m18_178  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_176 -> m18_183  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_176 -> m18_179  [color=red, key=1, label=string, style=dashed];
m18_176 -> m18_187  [color=red, key=1, label=string, style=dashed];
m18_177 -> m18_178  [key=0, style=solid];
m18_177 -> m18_11  [key=2, style=dotted];
m18_177 -> m18_179  [color=red, key=1, label=transaction, style=dashed];
m18_177 -> m18_180  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m18_177 -> m18_181  [key=0, style=solid];
m18_177 -> m18_113  [key=2, style=dotted];
m18_178 -> m18_179  [color=green, key=0, style=solid];
m18_178 -> m18_59  [key=2, style=dotted];
m18_178 -> m18_182  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_178 -> m18_180  [color=green, key=1, label=query, style=dashed];
m18_178 -> m18_183  [color=green, key=1, label=query, style=dashed];
m18_180 -> m18_181  [key=0, style=solid];
m18_180 -> m18_60  [key=2, style=dotted];
m18_180 -> m18_27  [key=2, style=dotted];
m18_180 -> m18_182  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_181 -> m18_176  [color=blue, key=0, style=bold];
m18_181 -> m18_175  [color=blue, key=0, style=bold];
m18_20 -> m18_21  [key=0, style=solid];
m18_20 -> m18_29  [key=2, style=dotted];
m18_20 -> m18_22  [color=red, key=1, label=fetchedKey, style=dashed];
m18_20 -> m18_23  [color=red, key=1, label=fetchedKey, style=dashed];
m18_141 -> m18_142  [key=0, style=solid];
m18_141 -> m18_143  [key=0, style=solid];
m18_141 -> m18_254  [key=0, style=solid];
m18_152 -> m18_153  [color=green, key=0, style=solid];
m18_152 -> m18_154  [color=red, key=1, label=transaction, style=dashed];
m18_152 -> m18_157  [color=red, key=1, label=transaction, style=dashed];
m18_152 -> m18_11  [key=2, style=dotted];
m18_152 -> m18_158  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m18_153 -> m18_154  [color=red, key=0, style=solid];
m18_153 -> m18_141  [key=2, style=dotted];
m18_153 -> m18_59  [key=2, style=dotted];
m18_153 -> m18_160  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_154 -> m18_27  [key=2, style=dotted];
m18_154 -> m18_155  [color=red, key=0, style=solid];
m18_154 -> m18_156  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_154 -> m18_59  [color=red, key=2, style=dotted];
m18_154 -> m18_164  [color=red, key=1, label="lambda expression", style=dashed];
m18_151 -> m18_155  [key=0, style=solid];
m18_151 -> m18_113  [key=2, style=dotted];
m18_151 -> m18_152  [key=0, style=solid];
m18_151 -> m18_153  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_151 -> m18_161  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_151 -> m18_154  [color=red, key=1, label=string, style=dashed];
m18_151 -> m18_165  [color=red, key=1, label=string, style=dashed];
m18_151 -> m18_157  [color=red, key=1, label=string, style=dashed];
m18_151 -> m18_170  [color=red, key=1, label=string, style=dashed];
m18_155 -> m18_149  [color=blue, key=0, style=bold];
m18_155 -> m18_156  [key=0, style=solid];
m18_155 -> m18_158  [key=0, style=solid];
m18_57 -> m18_27  [key=2, style=dotted];
m18_57 -> m18_58  [key=0, style=solid];
m18_57 -> m18_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_0 -> m18_1  [key=0, style=solid];
m18_0 -> m18_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m18_1 -> m18_2  [key=0, style=solid];
m18_1 -> m18_3  [key=0, style=solid];
m18_2 -> m18_0  [color=blue, key=0, style=bold];
m18_2 -> m18_4  [key=0, style=solid];
m18_2 -> m18_113  [key=2, style=dotted];
m18_124 -> m18_125  [color=green, key=0, style=solid];
m18_124 -> m18_127  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_124 -> m18_130  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_125 -> m18_126  [color=green, key=0, style=solid];
m18_125 -> m18_127  [key=0, style=solid];
m18_125 -> m18_130  [color=green, key=1, label=trimSql, style=dashed];
m18_127 -> m18_128  [key=0, style=solid];
m18_127 -> m18_130  [key=2, style=dotted];
m18_127 -> m18_131  [key=2, style=dotted];
m18_127 -> m18_27  [key=2, style=dotted];
m18_127 -> m18_129  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_126 -> m18_129  [key=0, style=solid];
m18_126 -> m18_113  [key=2, style=dotted];
m18_126 -> m18_127  [key=0, style=solid];
m18_128 -> m18_129  [key=0, style=solid];
m18_128 -> m18_132  [key=2, style=dotted];
m18_128 -> m18_124  [color=blue, key=0, style=bold];
m18_56 -> m18_57  [key=0, style=solid];
m18_56 -> m18_60  [key=2, style=dotted];
m18_56 -> m18_62  [color=darkseagreen4, key=1, label=persistentQueue, style=dashed];
m18_252 -> m18_253  [key=0, style=solid];
m18_252 -> m18_250  [key=2, style=dotted];
m18_252 -> m18_251  [key=2, style=dotted];
m18_253 -> m18_97  [color=blue, key=0, style=bold];
m18_25 -> m18_26  [color=green, key=0, style=solid];
m18_25 -> m18_29  [key=2, style=dotted];
m18_25 -> m18_32  [key=2, style=dotted];
m18_25 -> m18_33  [key=2, style=dotted];
m18_25 -> m18_27  [color=green, key=2, style=dotted];
m18_25 -> m18_186  [color=green, key=1, label="lambda expression", style=dashed];
m18_16 -> m18_17  [key=0, style=solid];
m18_16 -> m18_28  [key=2, style=dotted];
m18_16 -> m18_16  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m18_18 -> m18_19  [key=0, style=solid];
m18_18 -> m18_20  [color=darkseagreen4, key=1, label=queueName, style=dashed];
m18_18 -> m18_26  [color=darkseagreen4, key=1, label=queueName, style=dashed];
m18_21 -> m18_22  [color=red, key=0, style=solid];
m18_21 -> m18_23  [color=red, key=0, style=solid];
m18_19 -> m18_20  [key=0, style=solid];
m18_19 -> m18_29  [key=2, style=dotted];
m18_19 -> m18_22  [color=red, key=1, label=queueKey, style=dashed];
m18_19 -> m18_23  [color=red, key=1, label=queueKey, style=dashed];
m18_26 -> m18_27  [key=0, style=solid];
m18_26 -> m18_34  [key=2, style=dotted];
m18_26 -> m18_24  [color=blue, key=0, style=bold];
m18_22 -> m18_24  [color=red, key=0, style=solid];
m18_22 -> m18_30  [color=red, key=2, style=dotted];
m18_22 -> m18_25  [color=red, key=1, label=jobId, style=dashed];
m18_22 -> m18_26  [color=red, key=1, label=jobId, style=dashed];
m18_23 -> m18_24  [color=red, key=0, style=solid];
m18_23 -> m18_31  [color=red, key=2, style=dotted];
m18_23 -> m18_25  [color=red, key=1, label=jobId, style=dashed];
m18_23 -> m18_26  [color=red, key=1, label=jobId, style=dashed];
m18_24 -> m18_15  [key=0, style=solid];
m18_24 -> m18_25  [color=green, key=0, style=solid];
m18_24 -> m18_29  [color=green, key=1, label=string, style=dashed];
m18_27 -> m18_12  [color=blue, key=0, style=bold];
m18_27 -> m18_245  [key=0, style=solid];
m18_58 -> m18_54  [color=blue, key=0, style=bold];
m18_254 -> m18_255  [key=0, style=solid];
m18_254 -> m18_250  [key=2, style=dotted];
m18_254 -> m18_251  [key=2, style=dotted];
m18_255 -> m18_141  [color=blue, key=0, style=bold];
m18_245 -> m18_246  [key=0, style=solid];
m18_245 -> m18_247  [key=2, style=dotted];
m18_246 -> m18_27  [color=blue, key=0, style=bold];
m18_248 -> m18_249  [key=0, style=solid];
m18_248 -> m18_250  [key=2, style=dotted];
m18_248 -> m18_251  [key=2, style=dotted];
m18_249 -> m18_113  [color=blue, key=0, style=bold];
m18_259 -> m18_25  [color=green, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_33  [color=green, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_66  [color=green, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_72  [color=green, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_78  [color=green, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_84  [color=green, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_111  [color=green, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_119  [color=green, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_7  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_12  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_13  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_14  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_40  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_49  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_55  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_57  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_90  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_94  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_95  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_103  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_104  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_110  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_118  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_126  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_127  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_138  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_139  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_153  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_154  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_165  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_166  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_179  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_180  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_189  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_190  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_199  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_200  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_209  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_210  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_219  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_220  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_229  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_230  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_239  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_240  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_245  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_248  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_252  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_254  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_259 -> m18_256  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m18_272 -> m18_69  [color=green, key=1, label=string, style=dashed];
m18_273 -> m18_75  [color=green, key=1, label=string, style=dashed];
m18_274 -> m18_75  [color=green, key=1, label="System.TimeSpan", style=dashed];
m18_275 -> m18_81  [color=green, key=1, label=string, style=dashed];
m18_276 -> m18_87  [color=green, key=1, label=string, style=dashed];
m18_277 -> m18_87  [color=green, key=1, label="System.TimeSpan", style=dashed];
m18_285 -> m18_115  [color=green, key=1, label=string, style=dashed];
m18_286 -> m18_115  [color=green, key=1, label=string, style=dashed];
m18_287 -> m18_122  [color=green, key=1, label=string, style=dashed];
m18_288 -> m18_122  [color=green, key=1, label=string, style=dashed];
m18_263 -> m18_43  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_264 -> m18_43  [color=darkseagreen4, key=1, label="Hangfire.States.IState", style=dashed];
m18_265 -> m18_43  [color=darkseagreen4, key=1, label=addAndSetStateSql, style=dashed];
m18_266 -> m18_52  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_267 -> m18_52  [color=darkseagreen4, key=1, label="Hangfire.States.IState", style=dashed];
m18_268 -> m18_52  [color=darkseagreen4, key=1, label=addStateSql, style=dashed];
m18_278 -> m18_99  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_279 -> m18_99  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_280 -> m18_99  [color=darkseagreen4, key=1, label=double, style=dashed];
m18_281 -> m18_99  [color=darkseagreen4, key=1, label=addSql, style=dashed];
m18_282 -> m18_107  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_283 -> m18_107  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_284 -> m18_107  [color=darkseagreen4, key=1, label=query, style=dashed];
m18_289 -> m18_130  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_290 -> m18_130  [color=darkseagreen4, key=1, label=int, style=dashed];
m18_291 -> m18_130  [color=darkseagreen4, key=1, label=int, style=dashed];
m18_292 -> m18_130  [color=darkseagreen4, key=1, label=trimSql, style=dashed];
m18_293 -> m18_144  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_293 -> m18_147  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_294 -> m18_144  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m18_295 -> m18_144  [color=darkseagreen4, key=1, label=sql, style=dashed];
m18_296 -> m18_157  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_297 -> m18_157  [color=darkseagreen4, key=1, label=query, style=dashed];
m18_298 -> m18_169  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_298 -> m18_173  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_299 -> m18_169  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<string>", style=dashed];
m18_300 -> m18_169  [color=darkseagreen4, key=1, label=query, style=dashed];
m18_301 -> m18_183  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_302 -> m18_183  [color=darkseagreen4, key=1, label=query, style=dashed];
m18_303 -> m18_193  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_304 -> m18_193  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m18_305 -> m18_193  [color=darkseagreen4, key=1, label=query, style=dashed];
m18_306 -> m18_203  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_307 -> m18_203  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m18_308 -> m18_203  [color=darkseagreen4, key=1, label=query, style=dashed];
m18_309 -> m18_213  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_310 -> m18_213  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m18_311 -> m18_213  [color=darkseagreen4, key=1, label=query, style=dashed];
m18_312 -> m18_223  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_313 -> m18_223  [color=darkseagreen4, key=1, label=query, style=dashed];
m18_314 -> m18_233  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_315 -> m18_233  [color=darkseagreen4, key=1, label=query, style=dashed];
m18_316 -> m18_243  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_317 -> m18_243  [color=darkseagreen4, key=1, label=query, style=dashed];
m18_269 -> m18_62  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_270 -> m18_62  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_271 -> m18_62  [color=darkseagreen4, key=1, label=persistentQueue, style=dashed];
m19_9 -> m19_10  [key=0, style=solid];
m19_9 -> m19_14  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m19_10 -> m19_11  [key=0, style=solid];
m19_10 -> m19_16  [key=2, style=dotted];
m19_10 -> m19_13  [color=darkseagreen4, key=1, label=connection, style=dashed];
m19_14 -> m19_15  [key=0, style=solid];
m19_14 -> m19_20  [key=2, style=dotted];
m19_14 -> m19_14  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m19_11 -> m19_12  [key=0, style=solid];
m19_11 -> m19_14  [key=0, style=solid];
m19_11 -> m19_13  [color=darkseagreen4, key=1, label=table, style=dashed];
m19_13 -> m19_11  [key=0, style=solid];
m19_13 -> m19_18  [key=2, style=dotted];
m19_13 -> d268  [key=2, style=dotted];
m19_12 -> m19_13  [key=0, style=solid];
m19_12 -> m19_17  [key=2, style=dotted];
m19_15 -> m19_9  [color=blue, key=0, style=bold];
m19_2 -> m19_3  [key=0, style=solid];
m19_2 -> m19_5  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m19_2 -> m19_6  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m19_3 -> m19_4  [key=0, style=solid];
m19_3 -> m19_5  [key=0, style=solid];
m19_5 -> m19_6  [key=0, style=solid];
m19_6 -> m19_7  [key=0, style=solid];
m19_6 -> m19_16  [color=darkorchid, key=3, label="Field variable Hangfire.Server.IBackgroundJobPerformer _performer", style=bold];
m19_4 -> m19_7  [key=0, style=solid];
m19_4 -> m19_8  [key=2, style=dotted];
m19_7 -> m19_2  [color=blue, key=0, style=bold];
m19_0 -> m19_1  [key=0, style=solid];
m19_1 -> m19_0  [color=blue, key=0, style=bold];
m19_21 -> m19_22  [key=0, style=solid];
m19_22 -> m19_23  [key=0, style=solid];
m19_23 -> m19_21  [color=blue, key=0, style=bold];
m19_24 -> m19_5  [color=darkseagreen4, key=1, label="HangFire.SqlServer.ExpirationManager", style=dashed];
m19_24 -> m19_6  [color=darkseagreen4, key=1, label="HangFire.SqlServer.ExpirationManager", style=dashed];
m19_24 -> m19_10  [color=darkseagreen4, key=1, label="HangFire.SqlServer.ExpirationManager", style=dashed];
m19_24 -> m19_14  [color=darkseagreen4, key=1, label="HangFire.SqlServer.ExpirationManager", style=dashed];
}
