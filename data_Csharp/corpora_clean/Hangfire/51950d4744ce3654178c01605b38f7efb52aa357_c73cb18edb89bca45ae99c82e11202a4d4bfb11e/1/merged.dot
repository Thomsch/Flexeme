digraph  {
n0 [label="Entry lambda expression", span="28-28", cluster="lambda expression"];
n1 [label="new BackgroundJobClient(JobStorage.Current)", span="28-28", cluster="lambda expression"];
n2 [label="Exit lambda expression", span="28-28", cluster="lambda expression"];
n3 [label="Entry Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage)", span="48-48", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage)"];
n4 [label="Entry Hangfire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", span="60-60", cluster="Hangfire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)"];
n5 [label="var client = ClientFactory()", span="62-62", cluster="Hangfire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)"];
n6 [label="return client.Enqueue(methodCall);", span="63-63", cluster="Hangfire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)"];
n8 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()"];
n7 [label="Exit Hangfire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", span="60-60", cluster="Hangfire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)"];
n9 [label="Entry Hangfire.IBackgroundJobClient.Enqueue(System.Linq.Expressions.Expression<System.Action>)", span="35-35", cluster="Hangfire.IBackgroundJobClient.Enqueue(System.Linq.Expressions.Expression<System.Action>)"];
n10 [label="Entry Hangfire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)", span="76-76", cluster="Hangfire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)"];
n11 [label="var client = ClientFactory()", span="78-78", cluster="Hangfire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)"];
n12 [label="return client.Enqueue(methodCall);", span="79-79", cluster="Hangfire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)"];
n13 [label="Exit Hangfire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)", span="76-76", cluster="Hangfire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)"];
n14 [label="Entry Hangfire.IBackgroundJobClient.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)", span="53-53", cluster="Hangfire.IBackgroundJobClient.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)"];
n15 [label="Entry Hangfire.BackgroundJob.Schedule(System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", span="90-90", cluster="Hangfire.BackgroundJob.Schedule(System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)"];
n16 [label="var client = ClientFactory()", span="92-92", cluster="Hangfire.BackgroundJob.Schedule(System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)"];
n17 [label="return client.Schedule(methodCall, delay);", span="93-93", cluster="Hangfire.BackgroundJob.Schedule(System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)"];
n18 [label="Exit Hangfire.BackgroundJob.Schedule(System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", span="90-90", cluster="Hangfire.BackgroundJob.Schedule(System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)"];
n19 [label="Entry Hangfire.IBackgroundJobClient.Schedule(System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", span="68-68", cluster="Hangfire.IBackgroundJobClient.Schedule(System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)"];
n20 [label="Entry Hangfire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", span="105-105", cluster="Hangfire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)"];
n21 [label="var client = ClientFactory()", span="107-107", cluster="Hangfire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)"];
n22 [label="return client.Schedule(methodCall, delay);", span="108-108", cluster="Hangfire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)"];
n23 [label="Exit Hangfire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", span="105-105", cluster="Hangfire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)"];
n24 [label="Entry Hangfire.IBackgroundJobClient.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", span="85-85", cluster="Hangfire.IBackgroundJobClient.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)"];
n25 [label="Entry Hangfire.BackgroundJob.Delete(string)", span="119-119", cluster="Hangfire.BackgroundJob.Delete(string)"];
n26 [label="var client = ClientFactory()", span="121-121", cluster="Hangfire.BackgroundJob.Delete(string)"];
n27 [label="return client.Delete(jobId);", span="122-122", cluster="Hangfire.BackgroundJob.Delete(string)"];
n28 [label="Exit Hangfire.BackgroundJob.Delete(string)", span="119-119", cluster="Hangfire.BackgroundJob.Delete(string)"];
n29 [label="Entry Hangfire.IBackgroundJobClient.Delete(string)", span="166-166", cluster="Hangfire.IBackgroundJobClient.Delete(string)"];
n30 [label="Entry Hangfire.BackgroundJob.Delete(string, string)", span="135-135", cluster="Hangfire.BackgroundJob.Delete(string, string)"];
n31 [label="var client = ClientFactory()", span="137-137", cluster="Hangfire.BackgroundJob.Delete(string, string)"];
n32 [label="return client.Delete(jobId, fromState);", span="138-138", cluster="Hangfire.BackgroundJob.Delete(string, string)"];
n33 [label="Exit Hangfire.BackgroundJob.Delete(string, string)", span="135-135", cluster="Hangfire.BackgroundJob.Delete(string, string)"];
n34 [label="Entry Hangfire.IBackgroundJobClient.Delete(string, string)", span="195-195", cluster="Hangfire.IBackgroundJobClient.Delete(string, string)"];
n35 [label="Entry Hangfire.BackgroundJob.Requeue(string)", span="148-148", cluster="Hangfire.BackgroundJob.Requeue(string)"];
n36 [label="var client = ClientFactory()", span="150-150", cluster="Hangfire.BackgroundJob.Requeue(string)"];
n37 [label="return client.Requeue(jobId);", span="151-151", cluster="Hangfire.BackgroundJob.Requeue(string)"];
n38 [label="Exit Hangfire.BackgroundJob.Requeue(string)", span="148-148", cluster="Hangfire.BackgroundJob.Requeue(string)"];
n39 [label="Entry Hangfire.IBackgroundJobClient.Requeue(string)", span="211-211", cluster="Hangfire.IBackgroundJobClient.Requeue(string)"];
n40 [label="Entry Hangfire.BackgroundJob.Requeue(string, string)", span="164-164", cluster="Hangfire.BackgroundJob.Requeue(string, string)"];
n41 [label="var client = ClientFactory()", span="166-166", cluster="Hangfire.BackgroundJob.Requeue(string, string)"];
n42 [label="return client.Requeue(jobId, fromState);", span="167-167", cluster="Hangfire.BackgroundJob.Requeue(string, string)"];
n43 [label="Exit Hangfire.BackgroundJob.Requeue(string, string)", span="164-164", cluster="Hangfire.BackgroundJob.Requeue(string, string)"];
n44 [label="Entry Hangfire.IBackgroundJobClient.Requeue(string, string)", span="227-227", cluster="Hangfire.IBackgroundJobClient.Requeue(string, string)"];
m2_85 [label="var redis = RedisUtils.CreateClient()", span="117-117", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_DoesNotEnqueueTimedOutByCheckedFlagJob_IfFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_89 [label="redis.SetEntryInHash(''hangfire:job:my-job'', ''Fetched'',\r\n                    JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="124-125", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_DoesNotEnqueueTimedOutByCheckedFlagJob_IfFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_88 [label="redis.SetEntryInHash(''hangfire:job:my-job'', ''Checked'',\r\n                    JobHelper.ToStringTimestamp(DateTime.UtcNow.AddDays(-1)))", span="122-123", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_DoesNotEnqueueTimedOutByCheckedFlagJob_IfFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_90 [label="var watcher = CreateWatcher()", span="127-127", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_DoesNotEnqueueTimedOutByCheckedFlagJob_IfFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_92 [label="_stateMachine.Verify(\r\n                    x => x.TryToChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>()),\r\n                    Times.Never)", span="133-135", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_DoesNotEnqueueTimedOutByCheckedFlagJob_IfFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_86 [label="redis.AddItemToSet(''hangfire:queues'', ''my-queue'')", span="120-120", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_DoesNotEnqueueTimedOutByCheckedFlagJob_IfFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_91 [label="watcher.Execute(_token)", span="130-130", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_DoesNotEnqueueTimedOutByCheckedFlagJob_IfFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_87 [label="redis.AddItemToList(''hangfire:queue:my-queue:dequeued'', ''my-job'')", span="121-121", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_DoesNotEnqueueTimedOutByCheckedFlagJob_IfFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_93 [label="Exit HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_DoesNotEnqueueTimedOutByCheckedFlagJob_IfFetchedFlagSet()", span="115-115", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_DoesNotEnqueueTimedOutByCheckedFlagJob_IfFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_9 [label="Entry HangFire.SqlServer.SqlServerConnection.Dispose()", span="46-46", cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="BackgroundJobFacts.cs"];
m2_64 [label="redis.AddItemToList(''hangfire:queue:my-queue:dequeued'', ''my-job'')", span="80-80", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_MarksDequeuedJobAsChecked_IfItHasNoFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_20 [label="Entry HangFire.Redis.Tests.FetchedJobsWatcherFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="30-30", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="BackgroundJobFacts.cs"];
m2_109 [label="Entry HangFire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="220-220", cluster="HangFire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="BackgroundJobFacts.cs"];
m2_112 [label="var result = _connection.Query<string>(\r\n                @''select Value from HangFire.[Set] where [Key] = @key'',\r\n                new { key })", span="224-226", cluster="HangFire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="BackgroundJobFacts.cs"];
m2_110 [label="key == null", span="222-222", cluster="HangFire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="BackgroundJobFacts.cs"];
m2_113 [label="return new HashSet<string>(result);", span="228-228", cluster="HangFire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="BackgroundJobFacts.cs"];
m2_111 [label="throw new ArgumentNullException(''key'');", span="222-222", cluster="HangFire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="BackgroundJobFacts.cs"];
m2_114 [label="Exit HangFire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="220-220", cluster="HangFire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="BackgroundJobFacts.cs"];
m2_116 [label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="231-231", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="BackgroundJobFacts.cs"];
m2_121 [label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="236-239", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="BackgroundJobFacts.cs"];
m2_119 [label="toScore < fromScore", span="234-234", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="BackgroundJobFacts.cs"];
m2_117 [label="key == null", span="233-233", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="BackgroundJobFacts.cs"];
m2_120 [label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", span="234-234", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="BackgroundJobFacts.cs"];
m2_118 [label="throw new ArgumentNullException(''key'');", span="233-233", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="BackgroundJobFacts.cs"];
m2_122 [label="Exit HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="231-231", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="BackgroundJobFacts.cs"];
m2_69 [label="string sql = \r\n                @''select InvocationData, StateName, Arguments, CreatedAt from HangFire.Job where id = @id''", span="138-139", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="BackgroundJobFacts.cs"];
m2_84 [label="Entry HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_DoesNotEnqueueTimedOutByCheckedFlagJob_IfFetchedFlagSet()", span="115-115", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_DoesNotEnqueueTimedOutByCheckedFlagJob_IfFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_65 [label="var watcher = CreateWatcher()", span="82-82", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_MarksDequeuedJobAsChecked_IfItHasNoFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_83 [label="Exit lambda expression", span="109-110", cluster="lambda expression", file="BackgroundJobFacts.cs"];
m2_115 [label="Entry HashSet<string>.cstr", span="", cluster="HashSet<string>.cstr", file="BackgroundJobFacts.cs"];
m2_21 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="BackgroundJobFacts.cs"];
m2_22 [label="Entry HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="64-64", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="BackgroundJobFacts.cs"];
m2_23 [label="queues == null || queues.Length == 0", span="66-66", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="BackgroundJobFacts.cs"];
m2_8 [label="Entry HangFire.Redis.Tests.RedisUtils.GetHostAndPort()", span="20-20", cluster="HangFire.Redis.Tests.RedisUtils.GetHostAndPort()", file="BackgroundJobFacts.cs"];
m2_150 [label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="277-277", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="BackgroundJobFacts.cs"];
m2_156 [label="_connection.Execute(\r\n                @''merge HangFire.Server as Target ''\r\n                + @''using (VALUES (@id, @data, @heartbeat)) as Source (Id, Data, Heartbeat) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = Source.Heartbeat ''\r\n                + @''when not matched then insert (Id, Data, LastHeartbeat) values (Source.Id, Source.Data, Source.Heartbeat);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data), heartbeat = DateTime.UtcNow })", span="289-295", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="BackgroundJobFacts.cs"];
m2_155 [label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="282-287", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="BackgroundJobFacts.cs"];
m2_151 [label="serverId == null", span="279-279", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="BackgroundJobFacts.cs"];
m2_153 [label="context == null", span="280-280", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="BackgroundJobFacts.cs"];
m2_152 [label="throw new ArgumentNullException(''serverId'');", span="279-279", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="BackgroundJobFacts.cs"];
m2_154 [label="throw new ArgumentNullException(''context'');", span="280-280", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="BackgroundJobFacts.cs"];
m2_157 [label="Exit HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="277-277", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="BackgroundJobFacts.cs"];
m2_70 [label="var jobData = _connection.Query<SqlJob>(sql, new { id = id })\r\n                .SingleOrDefault()", span="141-142", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="BackgroundJobFacts.cs"];
m2_17 [label="Exit lambda expression", span="25-25", cluster="lambda expression", file="BackgroundJobFacts.cs"];
m2_18 [label="Entry Unk.>", span="", cluster="Unk.>", color=green, community=0, file="BackgroundJobFacts.cs"];
m2_19 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="BackgroundJobFacts.cs"];
m2_41 [label="Entry HangFire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53", cluster="HangFire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="BackgroundJobFacts.cs"];
m2_37 [label="Entry Unk.Dequeue", span="", cluster="Unk.Dequeue", file="BackgroundJobFacts.cs"];
m2_38 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="BackgroundJobFacts.cs"];
m2_39 [label="_queueProviders.GetProvider(queue)", span="69-69", cluster="lambda expression", file="BackgroundJobFacts.cs"];
m2_40 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="BackgroundJobFacts.cs"];
m2_45 [label="parameters == null", span="91-91", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_42 [label="Entry HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="84-84", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_43 [label="job == null", span="90-90", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_44 [label="throw new ArgumentNullException(''job'');", span="90-90", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_46 [label="throw new ArgumentNullException(''parameters'');", span="91-91", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_66 [label="watcher.Execute(_token)", span="85-85", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_MarksDequeuedJobAsChecked_IfItHasNoFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_71 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="BackgroundJobFacts.cs"];
m2_73 [label="var redis = RedisUtils.CreateClient()", span="95-95", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_EnqueuesCheckedAndTimedOutJob_IfNoFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_74 [label="redis.AddItemToSet(''hangfire:queues'', ''my-queue'')", span="98-98", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_EnqueuesCheckedAndTimedOutJob_IfNoFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_80 [label="Exit HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_EnqueuesCheckedAndTimedOutJob_IfNoFetchedFlagSet()", span="93-93", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_EnqueuesCheckedAndTimedOutJob_IfNoFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_67 [label="Assert.NotNull(JobHelper.FromNullableStringTimestamp(\r\n                    redis.GetValueFromHash(''hangfire:job:my-job'', ''Checked'')))", span="87-88", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_MarksDequeuedJobAsChecked_IfItHasNoFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_75 [label="redis.AddItemToList(''hangfire:queue:my-queue:dequeued'', ''my-job'')", span="99-99", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_EnqueuesCheckedAndTimedOutJob_IfNoFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_76 [label="redis.SetEntryInHash(''hangfire:job:my-job'', ''Checked'',\r\n                    JobHelper.ToStringTimestamp(DateTime.UtcNow.AddDays(-1)))", span="100-101", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_EnqueuesCheckedAndTimedOutJob_IfNoFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_72 [label="Entry HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_EnqueuesCheckedAndTimedOutJob_IfNoFetchedFlagSet()", span="93-93", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_EnqueuesCheckedAndTimedOutJob_IfNoFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_77 [label="var watcher = CreateWatcher()", span="103-103", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_EnqueuesCheckedAndTimedOutJob_IfNoFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_79 [label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                    ''my-job'', It.IsAny<EnqueuedState>(), It.IsAny<string[]>()))", span="109-110", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_EnqueuesCheckedAndTimedOutJob_IfNoFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_68 [label="Exit HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_MarksDequeuedJobAsChecked_IfItHasNoFetchedFlagSet()", span="74-74", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_MarksDequeuedJobAsChecked_IfItHasNoFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_78 [label="watcher.Execute(_token)", span="106-106", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Execute_EnqueuesCheckedAndTimedOutJob_IfNoFetchedFlagSet()", file="BackgroundJobFacts.cs"];
m2_81 [label="Entry lambda expression", span="109-110", cluster="lambda expression", file="BackgroundJobFacts.cs"];
m2_13 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="BackgroundJobFacts.cs"];
m2_14 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", color=green, community=0, file="BackgroundJobFacts.cs"];
m2_15 [label="Entry lambda expression", span="25-25", cluster="lambda expression", file="BackgroundJobFacts.cs"];
m2_135 [label="Entry TransactionScope.cstr", span="", cluster="TransactionScope.cstr", file="BackgroundJobFacts.cs"];
m2_33 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="BackgroundJobFacts.cs"];
m2_50 [label="parameters.Count > 0", span="110-110", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_54 [label="parameterArray[parameterIndex++] = new\r\n                    {\r\n                        jobId = jobId,\r\n                        name = parameter.Key,\r\n                        value = parameter.Value\r\n                    }", span="116-121", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_27 [label="Exit lambda expression", span="33-33", cluster="lambda expression", color=green, community=0, file="BackgroundJobFacts.cs"];
m2_26 [label="new FetchedJobsWatcher(null, _stateMachineFactory.Object)", span="33-33", cluster="lambda expression", color=green, community=0, file="BackgroundJobFacts.cs"];
m2_29 [label="Entry HangFire.Redis.Tests.FetchedJobsWatcherFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="39-39", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", color=green, community=0, file="BackgroundJobFacts.cs"];
m2_28 [label="Entry FetchedJobsWatcher.cstr", span="", cluster="FetchedJobsWatcher.cstr", color=green, community=0, file="BackgroundJobFacts.cs"];
m2_25 [label="Entry lambda expression", span="33-33", cluster="lambda expression", file="BackgroundJobFacts.cs"];
m2_24 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="BackgroundJobFacts.cs"];
m2_30 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new FetchedJobsWatcher(_storage, null))", span="41-42", cluster="HangFire.Redis.Tests.FetchedJobsWatcherFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="BackgroundJobFacts.cs"];
m2_169 [label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="316-316", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_172 [label="return _connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) });", span="323-325", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_170 [label="timeOut.Duration() != timeOut", span="318-318", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_171 [label="throw new ArgumentException(''The `timeOut` value must be positive.'', ''timeOut'');", span="320-320", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_173 [label="Exit HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="316-316", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_12 [label="Entry Mock<IStateMachineFactory>.cstr", span="", cluster="Mock<IStateMachineFactory>.cstr", file="BackgroundJobFacts.cs"];
m2_53 [label=parameters, span="114-114", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_97 [label="throw new ArgumentNullException(''id'');", span="197-197", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="BackgroundJobFacts.cs"];
m2_98 [label="name == null", span="198-198", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="BackgroundJobFacts.cs"];
m2_174 [label="Entry System.TimeSpan.Duration()", span="0-0", cluster="System.TimeSpan.Duration()", file="BackgroundJobFacts.cs"];
m2_10 [label="Entry System.Threading.CancellationToken.CancellationToken(bool)", span="0-0", cluster="System.Threading.CancellationToken.CancellationToken(bool)", file="BackgroundJobFacts.cs"];
m2_11 [label="Entry Mock<IStateMachine>.cstr", span="", cluster="Mock<IStateMachine>.cstr", file="BackgroundJobFacts.cs"];
m2_147 [label="Entry lambda expression", span="272-272", cluster="lambda expression", file="BackgroundJobFacts.cs"];
m2_16 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="BackgroundJobFacts.cs"];
m2_34 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="BackgroundJobFacts.cs"];
m2_35 [label="Entry string.Join(string, params string[])", span="0-0", cluster="string.Join(string, params string[])", file="BackgroundJobFacts.cs"];
m2_57 [label="return jobId;", span="131-131", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_58 [label="Exit HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="84-84", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_59 [label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65", cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="BackgroundJobFacts.cs"];
m2_82 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="BackgroundJobFacts.cs"];
m2_94 [label="Entry HangFire.Storage.StateData.StateData()", span="21-21", cluster="HangFire.Storage.StateData.StateData()", file="BackgroundJobFacts.cs"];
m2_95 [label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="195-195", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="BackgroundJobFacts.cs"];
m2_96 [label="id == null", span="197-197", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="BackgroundJobFacts.cs"];
m2_144 [label="Entry lambda expression", span="272-272", cluster="lambda expression", file="BackgroundJobFacts.cs"];
m2_146 [label="Exit lambda expression", span="272-272", cluster="lambda expression", file="BackgroundJobFacts.cs"];
m2_145 [label="x.Field", span="272-272", cluster="lambda expression", file="BackgroundJobFacts.cs"];
m2_148 [label="x.Value", span="272-272", cluster="lambda expression", file="BackgroundJobFacts.cs"];
m2_149 [label="Exit lambda expression", span="272-272", cluster="lambda expression", file="BackgroundJobFacts.cs"];
m2_47 [label="string createJobSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues (@invocationData, @arguments, @createdAt, @expireAt);\r\nSELECT CAST(SCOPE_IDENTITY() as int)''", span="93-96", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_100 [label="_connection.Execute(\r\n                @''merge HangFire.JobParameter as Target ''\r\n                + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                + @''when matched then update set Value = Source.Value ''\r\n                + @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                new { jobId = id, name, value })", span="200-206", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="BackgroundJobFacts.cs"];
m2_99 [label="HangFire.Redis.Tests.FetchedJobsWatcherFacts", span="", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="BackgroundJobFacts.cs"];
m2_101 [label="Exit HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="195-195", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="BackgroundJobFacts.cs"];
m2_102 [label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="209-209", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="BackgroundJobFacts.cs"];
m2_107 [label="return _connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault();", span="214-217", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="BackgroundJobFacts.cs"];
m2_105 [label="name == null", span="212-212", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="BackgroundJobFacts.cs"];
m2_103 [label="id == null", span="211-211", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="BackgroundJobFacts.cs"];
m2_106 [label="throw new ArgumentNullException(''name'');", span="212-212", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="BackgroundJobFacts.cs"];
m2_104 [label="throw new ArgumentNullException(''id'');", span="211-211", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="BackgroundJobFacts.cs"];
m2_108 [label="Exit HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="209-209", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="BackgroundJobFacts.cs"];
m2_0 [label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="BackgroundJobFacts.cs"];
m2_1 [label="connection == null", span="39-39", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="BackgroundJobFacts.cs"];
m2_2 [label="throw new ArgumentNullException(''connection'');", span="39-39", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="BackgroundJobFacts.cs"];
m2_3 [label="queueProviders == null", span="40-40", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="BackgroundJobFacts.cs"];
m2_4 [label="throw new ArgumentNullException(''queueProviders'');", span="40-40", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="BackgroundJobFacts.cs"];
m2_5 [label="_connection = connection", span="42-42", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="BackgroundJobFacts.cs"];
m2_6 [label="_queueProviders = queueProviders", span="43-43", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="BackgroundJobFacts.cs"];
m2_158 [label="Entry HangFire.SqlServer.Entities.ServerData.ServerData()", span="20-20", cluster="HangFire.SqlServer.Entities.ServerData.ServerData()", file="BackgroundJobFacts.cs"];
m2_52 [label="int parameterIndex = 0", span="113-113", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_48 [label="var invocationData = InvocationData.Serialize(job)", span="98-98", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_31 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="BackgroundJobFacts.cs"];
m2_32 [label="Entry Unk.Distinct", span="", cluster="Unk.Distinct", file="BackgroundJobFacts.cs"];
m2_176 [label="Entry System.TimeSpan.Negate()", span="0-0", cluster="System.TimeSpan.Negate()", file="BackgroundJobFacts.cs"];
m2_36 [label="Entry Unk.GetJobQueue", span="", cluster="Unk.GetJobQueue", file="BackgroundJobFacts.cs"];
m2_136 [label="Entry Unk.Complete", span="", cluster="Unk.Complete", file="BackgroundJobFacts.cs"];
m2_49 [label="var jobId = _connection.Query<int>(\r\n                createJobSql,\r\n                new\r\n                {\r\n                    invocationData = JobHelper.ToJson(invocationData),\r\n                    arguments = invocationData.Arguments,\r\n                    createdAt = createdAt,\r\n                    expireAt = createdAt.Add(expireIn)\r\n                }).Single().ToString()", span="100-108", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_51 [label="var parameterArray = new object[parameters.Count]", span="112-112", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_175 [label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, string)", file="BackgroundJobFacts.cs"];
m2_159 [label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="298-298", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="BackgroundJobFacts.cs"];
m2_162 [label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="302-304", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="BackgroundJobFacts.cs"];
m2_160 [label="serverId == null", span="300-300", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="BackgroundJobFacts.cs"];
m2_161 [label="throw new ArgumentNullException(''serverId'');", span="300-300", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="BackgroundJobFacts.cs"];
m2_163 [label="Exit HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="298-298", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="BackgroundJobFacts.cs"];
m2_55 [label="string insertParameterSql = @''\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@jobId, @name, @value)''", span="124-126", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_61 [label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0", cluster="System.DateTime.Add(System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_62 [label="Entry Unk.>", span="", cluster="Unk.>", file="BackgroundJobFacts.cs"];
m2_63 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="BackgroundJobFacts.cs"];
m2_124 [label="Entry HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="242-242", cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="BackgroundJobFacts.cs"];
m2_132 [label="_connection.Execute(sql, new { key = key, field = keyValuePair.Key, value = keyValuePair.Value })", span="258-258", cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="BackgroundJobFacts.cs"];
m2_131 [label=keyValuePairs, span="256-256", cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="BackgroundJobFacts.cs"];
m2_129 [label="string sql = @''\r\nmerge HangFire.Hash as Target\r\nusing (VALUES (@key, @field, @value)) as Source ([Key], Field, Value)\r\non Target.[Key] = Source.[Key] and Target.Field = Source.Field\r\nwhen matched then update set Value = Source.Value\r\nwhen not matched then insert ([Key], Field, Value) values (Source.[Key], Source.Field, Source.Value);''", span="247-252", cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="BackgroundJobFacts.cs"];
m2_125 [label="key == null", span="244-244", cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="BackgroundJobFacts.cs"];
m2_127 [label="keyValuePairs == null", span="245-245", cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="BackgroundJobFacts.cs"];
m2_130 [label="var transaction = new TransactionScope()", span="254-254", cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="BackgroundJobFacts.cs"];
m2_133 [label="transaction.Complete()", span="261-261", cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="BackgroundJobFacts.cs"];
m2_126 [label="throw new ArgumentNullException(''key'');", span="244-244", cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="BackgroundJobFacts.cs"];
m2_128 [label="throw new ArgumentNullException(''keyValuePairs'');", span="245-245", cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="BackgroundJobFacts.cs"];
m2_134 [label="Exit HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="242-242", cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="BackgroundJobFacts.cs"];
m2_143 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="BackgroundJobFacts.cs"];
m2_123 [label="Entry System.ArgumentException.ArgumentException(string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string)", file="BackgroundJobFacts.cs"];
m2_56 [label="_connection.Execute(insertParameterSql, parameterArray)", span="128-128", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="BackgroundJobFacts.cs"];
m2_60 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="24-24", cluster="HangFire.Common.JobHelper.ToJson(object)", file="BackgroundJobFacts.cs"];
m2_7 [label="Exit HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="BackgroundJobFacts.cs"];
m2_137 [label="Entry HangFire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="265-265", cluster="HangFire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="BackgroundJobFacts.cs"];
m2_140 [label="var result = _connection.Query<SqlHash>(\r\n                ''select Field, Value from HangFire.Hash where [Key] = @key'',\r\n                new { key })\r\n                .ToDictionary(x => x.Field, x => x.Value)", span="269-272", cluster="HangFire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="BackgroundJobFacts.cs"];
m2_138 [label="key == null", span="267-267", cluster="HangFire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="BackgroundJobFacts.cs"];
m2_141 [label="return result.Count != 0 ? result : null;", span="274-274", cluster="HangFire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="BackgroundJobFacts.cs"];
m2_139 [label="throw new ArgumentNullException(''key'');", span="267-267", cluster="HangFire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="BackgroundJobFacts.cs"];
m2_142 [label="Exit HangFire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="265-265", cluster="HangFire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="BackgroundJobFacts.cs"];
m2_164 [label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="307-307", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="BackgroundJobFacts.cs"];
m2_167 [label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="311-313", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="BackgroundJobFacts.cs"];
m2_165 [label="serverId == null", span="309-309", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="BackgroundJobFacts.cs"];
m2_166 [label="throw new ArgumentNullException(''serverId'');", span="309-309", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="BackgroundJobFacts.cs"];
m2_168 [label="Exit HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="307-307", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="BackgroundJobFacts.cs"];
m2_177 [label="HangFire.SqlServer.SqlServerConnection", span="", file="BackgroundJobFacts.cs"];
m3_71 [label="Entry RecurringJobScheduler.cstr", span="", cluster="RecurringJobScheduler.cstr", file="RecurringJobSchedulerFacts.cs"];
m3_63 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="61-61", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RecurringJobSchedulerFacts.cs"];
m3_64 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n// ReSharper disable once AssignNullToNotNullAttribute\r\n                () => new RecurringJobScheduler(null, _client.Object, _instantFactory.Object, _throttler.Object))", span="63-65", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RecurringJobSchedulerFacts.cs"];
m3_65 [label="Assert.Equal(''storage'', exception.ParamName)", span="67-67", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RecurringJobSchedulerFacts.cs"];
m3_66 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="61-61", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RecurringJobSchedulerFacts.cs"];
m3_115 [label="Entry Unk.SetRangeInHash", span="", cluster="Unk.SetRangeInHash", file="RecurringJobSchedulerFacts.cs"];
m3_17 [label="Entry Mock<IBackgroundJobClient>.cstr", span="", cluster="Mock<IBackgroundJobClient>.cstr", file="RecurringJobSchedulerFacts.cs"];
m3_152 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", span="160-160", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="RecurringJobSchedulerFacts.cs"];
m3_154 [label="_recurringJob[''LastExecution''] = JobHelper.SerializeDateTime(time)", span="163-163", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m3_153 [label="var time = DateTime.UtcNow", span="162-162", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="RecurringJobSchedulerFacts.cs"];
m3_155 [label="var scheduler = CreateScheduler()", span="164-164", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="RecurringJobSchedulerFacts.cs"];
m3_156 [label="scheduler.Execute(_token)", span="166-166", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="RecurringJobSchedulerFacts.cs"];
m3_157 [label="_instant.Verify(x => x.GetMatches(time))", span="168-168", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="RecurringJobSchedulerFacts.cs"];
m3_158 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", span="160-160", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="RecurringJobSchedulerFacts.cs"];
m3_19 [label="Entry Mock<IThrottler>.cstr", span="", cluster="Mock<IThrottler>.cstr", file="RecurringJobSchedulerFacts.cs"];
m3_58 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash", file="RecurringJobSchedulerFacts.cs"];
m3_163 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", span="172-172", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="RecurringJobSchedulerFacts.cs"];
m3_164 [label="_connection.Setup(x => x.GetAllItemsFromSet(It.IsAny<string>()))\r\n                .Returns(new HashSet<string> { ''non-existing-job'' })", span="174-175", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="RecurringJobSchedulerFacts.cs"];
m3_165 [label="var scheduler = CreateScheduler()", span="176-176", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="RecurringJobSchedulerFacts.cs"];
m3_166 [label="Assert.DoesNotThrow(() => scheduler.Execute(_token))", span="178-178", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="RecurringJobSchedulerFacts.cs"];
m3_167 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", span="172-172", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="RecurringJobSchedulerFacts.cs"];
m3_67 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="RecurringJobSchedulerFacts.cs"];
m3_57 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="RecurringJobSchedulerFacts.cs"];
m3_104 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", span="111-111", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="RecurringJobSchedulerFacts.cs"];
m3_105 [label="var scheduler = CreateScheduler()", span="114-114", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="RecurringJobSchedulerFacts.cs"];
m3_106 [label="scheduler.Execute(_token)", span="117-117", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="RecurringJobSchedulerFacts.cs"];
m3_108 [label="_connection.Verify(x => x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''LastJobId'') && rj[''LastJobId''] == ''job-id'')))", span="122-125", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="RecurringJobSchedulerFacts.cs"];
m3_109 [label="_connection.Verify(x => x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''LastExecution'') && rj[''LastExecution''] \r\n                        == JobHelper.SerializeDateTime(_instant.Object.UtcTime))))", span="127-131", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="RecurringJobSchedulerFacts.cs"];
m3_110 [label="_connection.Verify(x => x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextOccurrence))))", span="133-137", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="RecurringJobSchedulerFacts.cs"];
m3_107 [label="var jobKey = String.Format(''recurring-job:{0}'', RecurringJobId)", span="120-120", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="RecurringJobSchedulerFacts.cs"];
m3_111 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", span="111-111", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="RecurringJobSchedulerFacts.cs"];
m3_133 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", span="141-141", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m3_134 [label="_instant.Setup(x => x.GetMatches(It.IsAny<DateTime?>())).Returns(Enumerable.Empty<DateTime>)", span="143-143", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m3_135 [label="var scheduler = CreateScheduler()", span="144-144", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m3_136 [label="scheduler.Execute(_token)", span="146-146", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m3_137 [label="_client.Verify(\r\n                x => x.Create(It.IsAny<Job>(), It.IsAny<EnqueuedState>()),\r\n                Times.Never)", span="148-150", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m3_138 [label="_connection.Verify(x => x.SetRangeInHash(\r\n                String.Format(''recurring-job:{0}'', RecurringJobId),\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextOccurrence))))", span="152-156", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m3_139 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", span="141-141", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m3_18 [label="Entry Mock<IScheduleInstantFactory>.cstr", span="", cluster="Mock<IScheduleInstantFactory>.cstr", file="RecurringJobSchedulerFacts.cs"];
m3_168 [label="Entry Unk.DoesNotThrow", span="", cluster="Unk.DoesNotThrow", file="RecurringJobSchedulerFacts.cs"];
m3_79 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenInstantFactoryIsNull()", span="81-81", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenInstantFactoryIsNull()", file="RecurringJobSchedulerFacts.cs"];
m3_80 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n// ReSharper disable once AssignNullToNotNullAttribute\r\n                () => new RecurringJobScheduler(_storage.Object, _client.Object, null, _throttler.Object))", span="83-85", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenInstantFactoryIsNull()", file="RecurringJobSchedulerFacts.cs"];
m3_81 [label="Assert.Equal(''instantFactory'', exception.ParamName)", span="87-87", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenInstantFactoryIsNull()", file="RecurringJobSchedulerFacts.cs"];
m3_82 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenInstantFactoryIsNull()", span="81-81", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenInstantFactoryIsNull()", file="RecurringJobSchedulerFacts.cs"];
m3_98 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", span="194-194", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", file="RecurringJobSchedulerFacts.cs"];
m3_184 [label="return new RecurringJobScheduler(\r\n                _storage.Object, \r\n                _client.Object, \r\n                _instantFactory.Object,\r\n                _throttler.Object);", span="196-200", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", file="RecurringJobSchedulerFacts.cs"];
m3_185 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", span="194-194", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", file="RecurringJobSchedulerFacts.cs"];
m3_33 [label="Entry Unk.>", span="", cluster="Unk.>", file="RecurringJobSchedulerFacts.cs"];
m3_99 [label="Entry Hangfire.Server.RecurringJobScheduler.Execute(System.Threading.CancellationToken)", span="56-56", cluster="Hangfire.Server.RecurringJobScheduler.Execute(System.Threading.CancellationToken)", file="RecurringJobSchedulerFacts.cs"];
m3_29 [label="Entry System.Collections.Generic.HashSet<T>.HashSet()", span="0-0", cluster="System.Collections.Generic.HashSet<T>.HashSet()", file="RecurringJobSchedulerFacts.cs"];
m3_26 [label="Entry Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="67-67", cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", file="RecurringJobSchedulerFacts.cs"];
m3_0 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", span="27-27", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m3_1 [label="_storage = new Mock<JobStorage>()", span="29-29", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m3_2 [label="_client = new Mock<IBackgroundJobClient>()", span="30-30", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m3_3 [label="_instantFactory = new Mock<IScheduleInstantFactory>()", span="31-31", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m3_4 [label="_throttler = new Mock<IThrottler>()", span="32-32", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m3_5 [label="_token = new CancellationTokenSource().Token", span="33-33", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m3_6 [label="_instant = new Mock<IScheduleInstant>()", span="36-36", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m3_7 [label="_instant.Setup(x => x.GetMatches(It.IsAny<DateTime?>())).Returns(new[] { _instant.Object.UtcTime })", span="37-37", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m3_8 [label="_instantFactory.Setup(x => x.GetInstant(It.IsNotNull<CrontabSchedule>()))\r\n                .Returns(() => _instant.Object)", span="39-40", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m3_9 [label="_recurringJob = new Dictionary<string, string>\r\n            {\r\n                { ''Cron'', ''* * * * *'' },\r\n                { ''Job'', JobHelper.ToJson(InvocationData.Serialize(Job.FromExpression(() => Console.WriteLine()))) }\r\n            }", span="42-46", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m3_10 [label="_connection = new Mock<IStorageConnection>()", span="48-48", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m3_11 [label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="49-49", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m3_12 [label="_connection.Setup(x => x.GetAllItemsFromSet(''recurring-jobs''))\r\n                .Returns(new HashSet<string> { RecurringJobId })", span="51-52", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m3_13 [label="_connection.Setup(x => x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', RecurringJobId)))\r\n                .Returns(_recurringJob)", span="54-55", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m3_14 [label="_client.Setup(x => x.Create(It.IsAny<Job>(), It.IsAny<IState>())).Returns(''job-id'')", span="57-57", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m3_15 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", span="27-27", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m3_21 [label="Entry Mock<IScheduleInstant>.cstr", span="", cluster="Mock<IScheduleInstant>.cstr", file="RecurringJobSchedulerFacts.cs"];
m3_34 [label="Entry Unk.GetMatches", span="", cluster="Unk.GetMatches", file="RecurringJobSchedulerFacts.cs"];
m3_45 [label="Entry System.Console.WriteLine()", span="0-0", cluster="System.Console.WriteLine()", file="RecurringJobSchedulerFacts.cs"];
m3_49 [label="Entry Unk.GetConnection", span="", cluster="Unk.GetConnection", file="RecurringJobSchedulerFacts.cs"];
m3_126 [label="Entry Unk.SerializeDateTime", span="", cluster="Unk.SerializeDateTime", file="RecurringJobSchedulerFacts.cs"];
m3_24 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RecurringJobSchedulerFacts.cs"];
m3_159 [label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68", cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="RecurringJobSchedulerFacts.cs"];
m3_22 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="RecurringJobSchedulerFacts.cs"];
m3_93 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", span="101-101", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m3_94 [label="var scheduler = CreateScheduler()", span="103-103", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m3_95 [label="scheduler.Execute(_token)", span="105-105", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m3_96 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>()))", span="107-107", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m3_97 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", span="101-101", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m3_20 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="RecurringJobSchedulerFacts.cs"];
m3_27 [label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32", cluster="Hangfire.Common.JobHelper.ToJson(object)", file="RecurringJobSchedulerFacts.cs"];
m3_38 [label="Entry Unk.GetInstant", span="", cluster="Unk.GetInstant", file="RecurringJobSchedulerFacts.cs"];
m3_116 [label="Entry lambda expression", span="124-125", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_40 [label="_instant.Object", span="40-40", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_69 [label="new RecurringJobScheduler(null, _client.Object, _instantFactory.Object, _throttler.Object)", span="65-65", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_77 [label="new RecurringJobScheduler(_storage.Object, null, _instantFactory.Object, _throttler.Object)", span="75-75", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_84 [label="new RecurringJobScheduler(_storage.Object, _client.Object, null, _throttler.Object)", span="85-85", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_91 [label="new RecurringJobScheduler(_storage.Object, _client.Object, _instantFactory.Object, null)", span="95-95", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_121 [label="x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''LastExecution'') && rj[''LastExecution''] \r\n                        == JobHelper.SerializeDateTime(_instant.Object.UtcTime)))", span="127-131", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_124 [label="rj.ContainsKey(''LastExecution'') && rj[''LastExecution''] \r\n                        == JobHelper.SerializeDateTime(_instant.Object.UtcTime)", span="130-131", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_128 [label="x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextOccurrence)))", span="133-137", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_131 [label="rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextOccurrence)", span="136-137", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_147 [label="x.SetRangeInHash(\r\n                String.Format(''recurring-job:{0}'', RecurringJobId),\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextOccurrence)))", span="152-156", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_150 [label="rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextOccurrence)", span="155-156", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_173 [label="scheduler.Execute(_token)", span="178-178", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_182 [label="scheduler.Execute(_token)", span="191-191", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_161 [label="x.GetMatches(time)", span="168-168", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_30 [label="Entry lambda expression", span="37-37", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_35 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_39 [label="Entry lambda expression", span="40-40", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_41 [label="Exit lambda expression", span="40-40", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_42 [label="Entry lambda expression", span="45-45", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_46 [label="Entry lambda expression", span="49-49", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_50 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_54 [label="Entry lambda expression", span="54-54", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_59 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_68 [label="Entry lambda expression", span="65-65", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_70 [label="Exit lambda expression", span="65-65", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_76 [label="Entry lambda expression", span="75-75", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_78 [label="Exit lambda expression", span="75-75", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_83 [label="Entry lambda expression", span="85-85", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_85 [label="Exit lambda expression", span="85-85", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_90 [label="Entry lambda expression", span="95-95", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_92 [label="Exit lambda expression", span="95-95", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_101 [label="Entry lambda expression", span="107-107", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_112 [label="Entry lambda expression", span="122-125", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_120 [label="Entry lambda expression", span="127-131", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_122 [label="Exit lambda expression", span="127-131", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_123 [label="Entry lambda expression", span="129-131", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_125 [label="Exit lambda expression", span="129-131", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_127 [label="Entry lambda expression", span="133-137", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_129 [label="Exit lambda expression", span="133-137", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_130 [label="Entry lambda expression", span="135-137", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_132 [label="Exit lambda expression", span="135-137", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_140 [label="Entry lambda expression", span="143-143", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_143 [label="Entry lambda expression", span="149-149", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_146 [label="Entry lambda expression", span="152-156", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_148 [label="Exit lambda expression", span="152-156", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_149 [label="Entry lambda expression", span="154-156", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_151 [label="Exit lambda expression", span="154-156", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_160 [label="Entry lambda expression", span="168-168", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_169 [label="Entry lambda expression", span="174-174", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_172 [label="Entry lambda expression", span="178-178", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_174 [label="Exit lambda expression", span="178-178", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_181 [label="Entry lambda expression", span="191-191", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_183 [label="Exit lambda expression", span="191-191", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_162 [label="Exit lambda expression", span="168-168", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_32 [label="Exit lambda expression", span="37-37", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_31 [label="x.GetMatches(It.IsAny<DateTime?>())", span="37-37", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_37 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_36 [label="x.GetInstant(It.IsNotNull<CrontabSchedule>())", span="39-39", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_44 [label="Exit lambda expression", span="45-45", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_43 [label="Console.WriteLine()", span="45-45", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_48 [label="Exit lambda expression", span="49-49", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_47 [label="x.GetConnection()", span="49-49", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_52 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_51 [label="x.GetAllItemsFromSet(''recurring-jobs'')", span="51-51", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_56 [label="Exit lambda expression", span="54-54", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_55 [label="x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', RecurringJobId))", span="54-54", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_61 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_60 [label="x.Create(It.IsAny<Job>(), It.IsAny<IState>())", span="57-57", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_102 [label="x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>())", span="107-107", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_113 [label="x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''LastJobId'') && rj[''LastJobId''] == ''job-id''))", span="122-125", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_141 [label="x.GetMatches(It.IsAny<DateTime?>())", span="143-143", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_144 [label="x.Create(It.IsAny<Job>(), It.IsAny<EnqueuedState>())", span="149-149", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_170 [label="x.GetAllItemsFromSet(It.IsAny<string>())", span="174-174", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_103 [label="Exit lambda expression", span="107-107", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_114 [label="Exit lambda expression", span="122-125", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_117 [label="rj.ContainsKey(''LastJobId'') && rj[''LastJobId''] == ''job-id''", span="125-125", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_142 [label="Exit lambda expression", span="143-143", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_145 [label="Exit lambda expression", span="149-149", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_171 [label="Exit lambda expression", span="174-174", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_118 [label="Exit lambda expression", span="124-125", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m3_100 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="RecurringJobSchedulerFacts.cs"];
m3_53 [label="Entry Unk.GetAllItemsFromSet", span="", cluster="Unk.GetAllItemsFromSet", file="RecurringJobSchedulerFacts.cs"];
m3_62 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="RecurringJobSchedulerFacts.cs"];
m3_180 [label="Entry Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", span="26-26", cluster="Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", file="RecurringJobSchedulerFacts.cs"];
m3_175 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", span="182-182", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", file="RecurringJobSchedulerFacts.cs"];
m3_176 [label="_recurringJob[''Job''] =\r\n                JobHelper.ToJson(new InvocationData(''SomeType'', ''SomeMethod'', ''Parameters'', ''arguments''))", span="185-186", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", file="RecurringJobSchedulerFacts.cs"];
m3_177 [label="var scheduler = CreateScheduler()", span="188-188", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", file="RecurringJobSchedulerFacts.cs"];
m3_178 [label="Assert.DoesNotThrow(() => scheduler.Execute(_token))", span="191-191", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", file="RecurringJobSchedulerFacts.cs"];
m3_179 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", span="182-182", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", file="RecurringJobSchedulerFacts.cs"];
m3_86 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", span="91-91", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", file="RecurringJobSchedulerFacts.cs"];
m3_87 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n// ReSharper disable once AssignNullToNotNullAttribute\r\n                () => new RecurringJobScheduler(_storage.Object, _client.Object, _instantFactory.Object, null))", span="93-95", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", file="RecurringJobSchedulerFacts.cs"];
m3_88 [label="Assert.Equal(''throttler'', exception.ParamName)", span="97-97", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", file="RecurringJobSchedulerFacts.cs"];
m3_89 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", span="91-91", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", file="RecurringJobSchedulerFacts.cs"];
m3_23 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="RecurringJobSchedulerFacts.cs"];
m3_28 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="RecurringJobSchedulerFacts.cs"];
m3_16 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr", file="RecurringJobSchedulerFacts.cs"];
m3_25 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="148-148", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="RecurringJobSchedulerFacts.cs"];
m3_119 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="RecurringJobSchedulerFacts.cs"];
m3_72 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", span="71-71", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", file="RecurringJobSchedulerFacts.cs"];
m3_73 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n// ReSharper disable once AssignNullToNotNullAttribute\r\n                () => new RecurringJobScheduler(_storage.Object, null, _instantFactory.Object, _throttler.Object))", span="73-75", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", file="RecurringJobSchedulerFacts.cs"];
m3_74 [label="Assert.Equal(''client'', exception.ParamName)", span="77-77", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", file="RecurringJobSchedulerFacts.cs"];
m3_75 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", span="71-71", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", file="RecurringJobSchedulerFacts.cs"];
m3_186 [label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", span="", file="RecurringJobSchedulerFacts.cs"];
m3_187 [label=jobKey, span="", file="RecurringJobSchedulerFacts.cs"];
m3_189 [label=scheduler, span="", file="RecurringJobSchedulerFacts.cs"];
m3_190 [label=scheduler, span="", file="RecurringJobSchedulerFacts.cs"];
m3_188 [label=time, span="", file="RecurringJobSchedulerFacts.cs"];
m4_29 [label="Entry Hangfire.Storage.IStorageConnection.GetAllItemsFromSet(string)", span="55-55", cluster="Hangfire.Storage.IStorageConnection.GetAllItemsFromSet(string)", file="StorageConnectionExtensions.cs"];
m4_36 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="StorageConnectionExtensions.cs"];
m4_38 [label="Entry Hangfire.Storage.IStorageConnection.GetStateData(string)", span="45-45", cluster="Hangfire.Storage.IStorageConnection.GetStateData(string)", file="StorageConnectionExtensions.cs"];
m4_28 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="StorageConnectionExtensions.cs"];
m4_35 [label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="40-40", cluster="Hangfire.Storage.InvocationData.Deserialize()", file="StorageConnectionExtensions.cs"];
m4_27 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="StorageConnectionExtensions.cs"];
m4_34 [label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39", cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="StorageConnectionExtensions.cs"];
m4_33 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="StorageConnectionExtensions.cs"];
m4_31 [label="Entry Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", span="64-64", cluster="Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", file="StorageConnectionExtensions.cs"];
m4_37 [label="Entry Hangfire.Common.JobHelper.DeserializeDateTime(string)", span="73-73", cluster="Hangfire.Common.JobHelper.DeserializeDateTime(string)", file="StorageConnectionExtensions.cs"];
m4_0 [label="Entry Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", span="25-25", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_1 [label="connection == null", span="27-27", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_4 [label="var ids = connection.GetAllItemsFromSet(''recurring-jobs'')", span="31-31", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_6 [label="var hash = connection.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', id))", span="35-35", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_19 [label="var stateData = connection.GetStateData(dto.LastJobId)", span="65-65", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_2 [label="throw new ArgumentNullException(''connection'');", span="27-27", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_3 [label="var result = new List<RecurringJobDto>()", span="29-29", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_8 [label="result.Add(new RecurringJobDto { Id = id, Removed = true })", span="39-39", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_24 [label="result.Add(dto)", span="77-77", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_25 [label="return result;", span="80-80", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_5 [label=ids, span="33-33", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_9 [label="var dto = new RecurringJobDto { Id = id }", span="43-43", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_7 [label="hash == null", span="37-37", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_10 [label="dto.Cron = hash[''Cron'']", span="44-44", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_11 [label="var invocationData = JobHelper.FromJson<InvocationData>(hash[''Job''])", span="48-48", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_15 [label="hash.ContainsKey(''NextExecution'')", span="56-56", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_16 [label="dto.NextExecution = JobHelper.DeserializeDateTime(hash[''NextExecution''])", span="58-58", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_17 [label="hash.ContainsKey(''LastJobId'')", span="61-61", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", color=red, community=0, file="StorageConnectionExtensions.cs"];
m4_18 [label="dto.LastJobId = hash[''LastJobId'']", span="63-63", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_22 [label="hash.ContainsKey(''LastExecution'')", span="72-72", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_23 [label="dto.LastExecution = JobHelper.DeserializeDateTime(hash[''LastExecution''])", span="74-74", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_12 [label="dto.Job = invocationData.Deserialize()", span="49-49", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_14 [label="dto.LoadException = ex", span="53-53", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_21 [label="dto.LastJobState = stateData.Name", span="68-68", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_13 [label=JobLoadException, span="51-51", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_20 [label="stateData != null", span="66-66", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_26 [label="Exit Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", span="25-25", cluster="Hangfire.Storage.StorageConnectionExtensions.GetRecurringJobs(Hangfire.Storage.IStorageConnection)", file="StorageConnectionExtensions.cs"];
m4_32 [label="Entry Hangfire.Storage.RecurringJobDto.RecurringJobDto()", span="21-21", cluster="Hangfire.Storage.RecurringJobDto.RecurringJobDto()", file="StorageConnectionExtensions.cs"];
m4_30 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="StorageConnectionExtensions.cs"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n4 -> n6  [key=1, style=dashed, color=darkseagreen4, label="System.Linq.Expressions.Expression<System.Action>"];
n5 -> n6  [key=0, style=solid];
n5 -> n8  [key=2, style=dotted];
n6 -> n7  [key=0, style=solid];
n6 -> n9  [key=2, style=dotted];
n7 -> n4  [key=0, style=bold, color=blue];
n10 -> n11  [key=0, style=solid];
n10 -> n12  [key=1, style=dashed, color=darkseagreen4, label="System.Linq.Expressions.Expression<System.Action<T>>"];
n11 -> n12  [key=0, style=solid];
n11 -> n8  [key=2, style=dotted];
n12 -> n13  [key=0, style=solid];
n12 -> n14  [key=2, style=dotted];
n13 -> n10  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid];
n15 -> n17  [key=1, style=dashed, color=darkseagreen4, label="System.Linq.Expressions.Expression<System.Action>"];
n16 -> n17  [key=0, style=solid];
n16 -> n8  [key=2, style=dotted];
n17 -> n18  [key=0, style=solid];
n17 -> n19  [key=2, style=dotted];
n18 -> n15  [key=0, style=bold, color=blue];
n20 -> n21  [key=0, style=solid];
n20 -> n22  [key=1, style=dashed, color=darkseagreen4, label="System.Linq.Expressions.Expression<System.Action<T>>"];
n21 -> n22  [key=0, style=solid];
n21 -> n8  [key=2, style=dotted];
n22 -> n23  [key=0, style=solid];
n22 -> n24  [key=2, style=dotted];
n23 -> n20  [key=0, style=bold, color=blue];
n25 -> n26  [key=0, style=solid];
n25 -> n27  [key=1, style=dashed, color=darkseagreen4, label=string];
n26 -> n27  [key=0, style=solid];
n26 -> n8  [key=2, style=dotted];
n27 -> n28  [key=0, style=solid];
n27 -> n29  [key=2, style=dotted];
n28 -> n25  [key=0, style=bold, color=blue];
n30 -> n31  [key=0, style=solid];
n30 -> n32  [key=1, style=dashed, color=darkseagreen4, label=string];
n31 -> n32  [key=0, style=solid];
n31 -> n8  [key=2, style=dotted];
n32 -> n33  [key=0, style=solid];
n32 -> n34  [key=2, style=dotted];
n33 -> n30  [key=0, style=bold, color=blue];
n35 -> n36  [key=0, style=solid];
n35 -> n37  [key=1, style=dashed, color=darkseagreen4, label=string];
n36 -> n37  [key=0, style=solid];
n36 -> n8  [key=2, style=dotted];
n37 -> n38  [key=0, style=solid];
n37 -> n39  [key=2, style=dotted];
n38 -> n35  [key=0, style=bold, color=blue];
n40 -> n41  [key=0, style=solid];
n40 -> n42  [key=1, style=dashed, color=darkseagreen4, label=string];
n41 -> n42  [key=0, style=solid];
n41 -> n8  [key=2, style=dotted];
n42 -> n43  [key=0, style=solid];
n42 -> n44  [key=2, style=dotted];
n43 -> n40  [key=0, style=bold, color=blue];
m2_85 -> m2_89  [key=1, style=dashed, color=darkseagreen4, label=redis];
m2_85 -> m2_71  [key=3, color=darkorchid, style=bold, label="method methodReturn HangFire.Storage.StateData GetStateData"];
m2_85 -> m2_86  [key=0, style=solid];
m2_85 -> m2_47  [key=2, style=dotted];
m2_85 -> m2_87  [key=1, style=dashed, color=darkseagreen4, label=redis];
m2_85 -> m2_88  [key=1, style=dashed, color=darkseagreen4, label=redis];
m2_89 -> m2_90  [key=0, style=solid];
m2_89 -> m2_62  [key=2, style=dotted];
m2_89 -> m2_82  [key=2, style=dotted];
m2_89 -> m2_92  [key=1, style=dashed, color=darkseagreen4, label=sqlState];
m2_89 -> m2_51  [key=2, style=dotted];
m2_89 -> m2_52  [key=2, style=dotted];
m2_88 -> m2_89  [key=0, style=solid];
m2_88 -> m2_88  [key=3, color=darkorchid, style=bold, label="Local variable string sql"];
m2_88 -> m2_50  [key=2, style=dotted];
m2_88 -> m2_51  [key=2, style=dotted];
m2_88 -> m2_52  [key=2, style=dotted];
m2_90 -> m2_91  [key=0, style=solid];
m2_90 -> m2_92  [key=0, style=solid];
m2_90 -> m2_53  [key=2, style=dotted];
m2_92 -> m2_62  [key=2, style=dotted];
m2_92 -> m2_93  [key=0, style=solid];
m2_92 -> m2_94  [key=2, style=dotted];
m2_92 -> m2_55  [key=2, style=dotted];
m2_86 -> m2_88  [key=0, style=solid];
m2_86 -> m2_87  [key=0, style=solid];
m2_86 -> m2_48  [key=2, style=dotted];
m2_91 -> m2_93  [key=0, style=solid];
m2_91 -> m2_92  [key=0, style=solid];
m2_91 -> m2_54  [key=2, style=dotted];
m2_87 -> m2_8  [key=2, style=dotted];
m2_87 -> m2_93  [key=0, style=solid];
m2_87 -> m2_88  [key=0, style=solid];
m2_87 -> m2_49  [key=2, style=dotted];
m2_93 -> m2_85  [key=0, style=bold, color=blue];
m2_93 -> m2_84  [key=0, style=bold, color=blue];
m2_9 -> m2_10  [key=0, style=solid];
m2_64 -> m2_65  [key=0, style=solid];
m2_64 -> m2_49  [key=2, style=dotted];
m2_20 -> m2_21  [key=0, style=solid];
m2_109 -> m2_112  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_109 -> m2_110  [key=0, style=solid];
m2_112 -> m2_113  [key=0, style=solid];
m2_112 -> m2_62  [key=2, style=dotted];
m2_110 -> m2_112  [key=0, style=solid];
m2_110 -> m2_111  [key=0, style=solid];
m2_113 -> m2_114  [key=0, style=solid];
m2_113 -> m2_115  [key=2, style=dotted];
m2_111 -> m2_8  [key=2, style=dotted];
m2_111 -> m2_114  [key=0, style=solid];
m2_114 -> m2_109  [key=0, style=bold, color=blue];
m2_116 -> m2_121  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_116 -> m2_117  [key=0, style=solid];
m2_116 -> m2_119  [key=1, style=dashed, color=darkseagreen4, label=double];
m2_121 -> m2_122  [key=0, style=solid];
m2_121 -> m2_62  [key=2, style=dotted];
m2_121 -> m2_82  [key=2, style=dotted];
m2_119 -> m2_121  [key=0, style=solid];
m2_119 -> m2_120  [key=0, style=solid];
m2_117 -> m2_119  [key=0, style=solid];
m2_117 -> m2_118  [key=0, style=solid];
m2_120 -> m2_122  [key=0, style=solid];
m2_120 -> m2_123  [key=2, style=dotted];
m2_118 -> m2_122  [key=0, style=solid];
m2_118 -> m2_8  [key=2, style=dotted];
m2_122 -> m2_116  [key=0, style=bold, color=blue];
m2_69 -> m2_70  [key=0, style=solid];
m2_69 -> m2_69  [key=3, color=darkorchid, style=bold, label="Local variable string sql"];
m2_84 -> m2_85  [key=0, style=solid];
m2_65 -> m2_66  [key=0, style=solid];
m2_65 -> m2_53  [key=2, style=dotted];
m2_83 -> m2_81  [key=0, style=bold, color=blue];
m2_21 -> m2_22  [key=0, style=solid];
m2_21 -> m2_18  [key=2, style=dotted];
m2_21 -> m2_25  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_22 -> m2_23  [key=0, style=solid];
m2_22 -> m2_24  [key=2, style=dotted];
m2_22 -> m2_27  [key=1, style=dashed, color=green, label="string[]"];
m2_22 -> m2_29  [key=1, style=dashed, color=green, label="string[]"];
m2_22 -> m2_25  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m2_23 -> m2_20  [key=0, style=bold, color=blue];
m2_23 -> m2_25  [key=0, style=solid];
m2_23 -> m2_24  [key=0, style=solid];
m2_150 -> m2_156  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_150 -> m2_151  [key=0, style=solid];
m2_150 -> m2_153  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.ServerContext"];
m2_150 -> m2_155  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.ServerContext"];
m2_156 -> m2_157  [key=0, style=solid];
m2_156 -> m2_60  [key=2, style=dotted];
m2_156 -> m2_65  [key=2, style=dotted];
m2_155 -> m2_156  [key=0, style=solid];
m2_155 -> m2_158  [key=2, style=dotted];
m2_151 -> m2_152  [key=0, style=solid];
m2_151 -> m2_153  [key=0, style=solid];
m2_153 -> m2_155  [key=0, style=solid];
m2_153 -> m2_154  [key=0, style=solid];
m2_152 -> m2_157  [key=0, style=solid];
m2_152 -> m2_8  [key=2, style=dotted];
m2_154 -> m2_157  [key=0, style=solid];
m2_154 -> m2_8  [key=2, style=dotted];
m2_157 -> m2_150  [key=0, style=bold, color=blue];
m2_70 -> m2_71  [key=0, style=solid];
m2_70 -> m2_62  [key=2, style=dotted];
m2_70 -> m2_82  [key=2, style=dotted];
m2_70 -> m2_73  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m2_70 -> m2_74  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m2_70 -> m2_80  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m2_17 -> m2_18  [key=0, style=solid, color=green];
m2_17 -> m2_15  [key=0, style=bold, color=blue];
m2_18 -> m2_19  [key=0, style=solid, color=green];
m2_18 -> m2_20  [key=2, style=dotted, color=green];
m2_18 -> m2_21  [key=2, style=dotted, color=green];
m2_19 -> m2_17  [key=0, style=bold, color=blue];
m2_41 -> m2_42  [key=0, style=solid];
m2_41 -> m2_50  [key=2, style=dotted];
m2_41 -> m2_51  [key=2, style=dotted];
m2_41 -> m2_52  [key=2, style=dotted];
m2_37 -> m2_38  [key=0, style=solid];
m2_38 -> m2_39  [key=0, style=solid];
m2_38 -> m2_47  [key=2, style=dotted];
m2_38 -> m2_40  [key=1, style=dashed, color=darkseagreen4, label=redis];
m2_38 -> m2_41  [key=1, style=dashed, color=darkseagreen4, label=redis];
m2_38 -> m2_45  [key=1, style=dashed, color=darkseagreen4, label=redis];
m2_39 -> m2_40  [key=0, style=solid];
m2_39 -> m2_48  [key=2, style=dotted];
m2_39 -> m2_41  [key=2, style=dotted];
m2_40 -> m2_41  [key=0, style=solid];
m2_40 -> m2_49  [key=2, style=dotted];
m2_40 -> m2_38  [key=0, style=bold, color=blue];
m2_45 -> m2_46  [key=0, style=solid];
m2_45 -> m2_56  [key=2, style=dotted];
m2_45 -> m2_24  [key=2, style=dotted];
m2_45 -> m2_47  [key=0, style=solid];
m2_42 -> m2_43  [key=0, style=solid];
m2_42 -> m2_53  [key=2, style=dotted];
m2_42 -> m2_49  [key=1, style=dashed, color=darkseagreen4, label="System.DateTime"];
m2_42 -> m2_45  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m2_42 -> m2_48  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.Job"];
m2_42 -> m2_50  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m2_42 -> m2_51  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m2_43 -> m2_44  [key=0, style=solid];
m2_43 -> m2_54  [key=2, style=dotted];
m2_43 -> m2_45  [key=0, style=solid];
m2_44 -> m2_45  [key=0, style=solid];
m2_44 -> m2_55  [key=2, style=dotted];
m2_44 -> m2_57  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_44 -> m2_8  [key=2, style=dotted];
m2_44 -> m2_58  [key=0, style=solid];
m2_46 -> m2_37  [key=0, style=bold, color=blue];
m2_46 -> m2_8  [key=2, style=dotted];
m2_46 -> m2_58  [key=0, style=solid];
m2_66 -> m2_70  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_66 -> m2_67  [key=0, style=solid];
m2_66 -> m2_71  [key=3, color=darkorchid, style=bold, label="method methodReturn HangFire.Storage.JobData GetJobData"];
m2_66 -> m2_54  [key=2, style=dotted];
m2_71 -> m2_72  [key=0, style=solid];
m2_71 -> m2_73  [key=0, style=solid];
m2_73 -> m2_62  [key=2, style=dotted];
m2_73 -> m2_74  [key=0, style=solid];
m2_73 -> m2_77  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
m2_73 -> m2_47  [key=2, style=dotted];
m2_73 -> m2_75  [key=1, style=dashed, color=darkseagreen4, label=redis];
m2_73 -> m2_76  [key=1, style=dashed, color=darkseagreen4, label=redis];
m2_74 -> m2_75  [key=0, style=solid];
m2_74 -> m2_48  [key=2, style=dotted];
m2_80 -> m2_81  [key=0, style=solid];
m2_80 -> m2_84  [key=2, style=dotted];
m2_80 -> m2_72  [key=0, style=bold, color=blue];
m2_67 -> m2_69  [key=0, style=solid];
m2_67 -> m2_68  [key=0, style=solid];
m2_67 -> m2_70  [key=2, style=dotted];
m2_67 -> m2_71  [key=2, style=dotted];
m2_75 -> m2_71  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.Common.Job job"];
m2_75 -> m2_76  [key=0, style=solid];
m2_75 -> m2_49  [key=2, style=dotted];
m2_76 -> m2_71  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.Common.JobLoadException loadException"];
m2_76 -> m2_77  [key=0, style=solid];
m2_76 -> m2_78  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.Common.JobLoadException loadException"];
m2_76 -> m2_50  [key=2, style=dotted];
m2_76 -> m2_51  [key=2, style=dotted];
m2_76 -> m2_52  [key=2, style=dotted];
m2_72 -> m2_81  [key=0, style=solid];
m2_72 -> m2_73  [key=0, style=solid];
m2_77 -> m2_80  [key=0, style=solid];
m2_77 -> m2_78  [key=0, style=solid];
m2_77 -> m2_83  [key=2, style=dotted];
m2_77 -> m2_53  [key=2, style=dotted];
m2_79 -> m2_80  [key=0, style=solid];
m2_79 -> m2_55  [key=2, style=dotted];
m2_79 -> m2_81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_68 -> m2_8  [key=2, style=dotted];
m2_68 -> m2_81  [key=0, style=solid];
m2_68 -> m2_61  [key=0, style=bold, color=blue];
m2_78 -> m2_79  [key=0, style=solid];
m2_78 -> m2_54  [key=2, style=dotted];
m2_81 -> m2_66  [key=0, style=bold, color=blue];
m2_81 -> m2_82  [key=0, style=solid];
m2_13 -> m2_14  [key=0, style=solid, color=green];
m2_14 -> m2_15  [key=0, style=solid, color=green];
m2_14 -> m2_16  [key=2, style=dotted, color=green];
m2_15 -> m2_13  [key=0, style=bold, color=blue];
m2_15 -> m2_16  [key=0, style=solid];
m2_33 -> m2_34  [key=0, style=solid];
m2_50 -> m2_51  [key=0, style=solid];
m2_50 -> m2_57  [key=0, style=solid];
m2_54 -> m2_54  [key=1, style=dashed, color=darkseagreen4, label=parameterIndex];
m2_54 -> m2_53  [key=0, style=solid];
m2_27 -> m2_30  [key=0, style=solid, color=green];
m2_27 -> m2_34  [key=2, style=dotted, color=green];
m2_27 -> m2_35  [key=2, style=dotted, color=green];
m2_27 -> m2_21  [key=2, style=dotted, color=green];
m2_27 -> m2_25  [key=0, style=bold, color=blue];
m2_26 -> m2_27  [key=0, style=solid, color=green];
m2_26 -> m2_28  [key=0, style=solid, color=green];
m2_29 -> m2_30  [key=0, style=solid, color=green];
m2_29 -> m2_37  [key=2, style=dotted, color=green];
m2_28 -> m2_29  [key=0, style=solid, color=green];
m2_28 -> m2_36  [key=2, style=dotted, color=green];
m2_25 -> m2_26  [key=0, style=solid, color=green];
m2_25 -> m2_28  [key=1, style=dashed, color=green, label=providers];
m2_25 -> m2_31  [key=2, style=dotted];
m2_25 -> m2_32  [key=2, style=dotted];
m2_25 -> m2_33  [key=2, style=dotted];
m2_25 -> m2_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_24 -> m2_30  [key=0, style=solid];
m2_24 -> m2_8  [key=2, style=dotted];
m2_30 -> m2_22  [key=0, style=bold, color=blue];
m2_30 -> m2_31  [key=0, style=solid];
m2_30 -> m2_18  [key=2, style=dotted];
m2_30 -> m2_33  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_169 -> m2_170  [key=0, style=solid];
m2_172 -> m2_172  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m2_172 -> m2_173  [key=0, style=solid];
m2_172 -> m2_176  [key=2, style=dotted];
m2_172 -> m2_61  [key=2, style=dotted];
m2_172 -> m2_65  [key=2, style=dotted];
m2_170 -> m2_172  [key=0, style=solid];
m2_170 -> m2_170  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m2_170 -> m2_171  [key=0, style=solid];
m2_170 -> m2_174  [key=2, style=dotted];
m2_171 -> m2_173  [key=0, style=solid];
m2_171 -> m2_175  [key=2, style=dotted];
m2_173 -> m2_169  [key=0, style=bold, color=blue];
m2_53 -> m2_97  [key=0, style=solid];
m2_53 -> m2_54  [key=0, style=solid];
m2_53 -> m2_55  [key=0, style=solid];
m2_97 -> m2_98  [key=0, style=solid];
m2_97 -> m2_28  [key=2, style=dotted];
m2_97 -> m2_101  [key=0, style=solid];
m2_97 -> m2_8  [key=2, style=dotted];
m2_98 -> m2_53  [key=0, style=bold, color=blue];
m2_98 -> m2_100  [key=0, style=solid];
m2_98 -> m2_99  [key=0, style=solid];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_12  [key=2, style=dotted];
m2_11 -> m2_9  [key=0, style=bold, color=blue];
m2_147 -> m2_148  [key=0, style=solid];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> m2_18  [key=2, style=dotted];
m2_16 -> m2_19  [key=2, style=dotted];
m2_34 -> m2_35  [key=0, style=solid];
m2_34 -> m2_36  [key=2, style=dotted];
m2_35 -> m2_33  [key=0, style=bold, color=blue];
m2_57 -> m2_58  [key=0, style=solid];
m2_58 -> m2_59  [key=0, style=solid];
m2_58 -> m2_18  [key=2, style=dotted];
m2_58 -> m2_60  [key=2, style=dotted];
m2_58 -> m2_42  [key=0, style=bold, color=blue];
m2_59 -> m2_57  [key=0, style=bold, color=blue];
m2_82 -> m2_83  [key=0, style=solid];
m2_82 -> m2_18  [key=2, style=dotted];
m2_82 -> m2_60  [key=2, style=dotted];
m2_94 -> m2_95  [key=0, style=solid];
m2_95 -> m2_96  [key=0, style=solid];
m2_95 -> m2_18  [key=2, style=dotted];
m2_95 -> m2_60  [key=2, style=dotted];
m2_95 -> m2_100  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_95 -> m2_98  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_96 -> m2_94  [key=0, style=bold, color=blue];
m2_96 -> m2_98  [key=0, style=solid];
m2_96 -> m2_97  [key=0, style=solid];
m2_144 -> m2_145  [key=0, style=solid];
m2_146 -> m2_144  [key=0, style=bold, color=blue];
m2_145 -> m2_146  [key=0, style=solid];
m2_148 -> m2_149  [key=0, style=solid];
m2_149 -> m2_147  [key=0, style=bold, color=blue];
m2_47 -> m2_49  [key=1, style=dashed, color=darkseagreen4, label=createJobSql];
m2_47 -> m2_48  [key=0, style=solid];
m2_47 -> m2_47  [key=3, color=darkorchid, style=bold, label="Local variable string createJobSql"];
m2_100 -> m2_101  [key=0, style=solid];
m2_100 -> m2_65  [key=2, style=dotted];
m2_99 -> m2_101  [key=0, style=solid];
m2_99 -> m2_8  [key=2, style=dotted];
m2_99 -> m2_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_99 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_99 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_99 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_99 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_99 -> m2_21  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_99 -> m2_26  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_99 -> m2_30  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_99 -> m2_34  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_99 -> m2_42  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_99 -> m2_43  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_99 -> m2_44  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_99 -> m2_65  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_99 -> m2_66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_99 -> m2_77  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_99 -> m2_78  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_99 -> m2_79  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_99 -> m2_90  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_99 -> m2_91  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_99 -> m2_92  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_99 -> m2_97  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.FetchedJobsWatcherFacts"];
m2_101 -> m2_95  [key=0, style=bold, color=blue];
m2_102 -> m2_107  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_102 -> m2_103  [key=0, style=solid];
m2_102 -> m2_105  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_107 -> m2_108  [key=0, style=solid];
m2_107 -> m2_62  [key=2, style=dotted];
m2_107 -> m2_82  [key=2, style=dotted];
m2_105 -> m2_107  [key=0, style=solid];
m2_105 -> m2_106  [key=0, style=solid];
m2_103 -> m2_105  [key=0, style=solid];
m2_103 -> m2_104  [key=0, style=solid];
m2_106 -> m2_108  [key=0, style=solid];
m2_106 -> m2_8  [key=2, style=dotted];
m2_104 -> m2_108  [key=0, style=solid];
m2_104 -> m2_8  [key=2, style=dotted];
m2_108 -> m2_102  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m2_0 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.PersistentJobQueueProviderCollection"];
m2_0 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.PersistentJobQueueProviderCollection"];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_7  [key=2, style=dotted];
m2_1 -> m2_8  [key=2, style=dotted];
m2_1 -> m2_9  [key=2, style=dotted];
m2_1 -> m2_3  [key=0, style=solid];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_10  [key=2, style=dotted];
m2_2 -> m2_7  [key=0, style=solid];
m2_2 -> m2_8  [key=2, style=dotted];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_11  [key=2, style=dotted];
m2_3 -> m2_5  [key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_12  [key=2, style=dotted];
m2_4 -> m2_7  [key=0, style=solid];
m2_4 -> m2_8  [key=2, style=dotted];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_13  [key=2, style=dotted];
m2_5 -> m2_14  [key=2, style=dotted];
m2_5 -> m2_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_6 -> m2_0  [key=0, style=bold, color=blue];
m2_6 -> m2_7  [key=0, style=solid];
m2_52 -> m2_54  [key=1, style=dashed, color=darkseagreen4, label=parameterIndex];
m2_52 -> m2_53  [key=0, style=solid];
m2_52 -> m2_52  [key=3, color=darkorchid, style=bold, label="Local variable int parameterIndex"];
m2_48 -> m2_49  [key=0, style=solid];
m2_48 -> m2_59  [key=2, style=dotted];
m2_31 -> m2_32  [key=0, style=solid];
m2_31 -> m2_24  [key=2, style=dotted];
m2_32 -> m2_29  [key=0, style=bold, color=blue];
m2_49 -> m2_50  [key=0, style=solid];
m2_49 -> m2_60  [key=2, style=dotted];
m2_49 -> m2_61  [key=2, style=dotted];
m2_49 -> m2_62  [key=2, style=dotted];
m2_49 -> m2_63  [key=2, style=dotted];
m2_49 -> m2_64  [key=2, style=dotted];
m2_49 -> m2_54  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m2_49 -> m2_57  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m2_51 -> m2_56  [key=1, style=dashed, color=darkseagreen4, label=parameterArray];
m2_51 -> m2_54  [key=1, style=dashed, color=darkseagreen4, label=parameterArray];
m2_51 -> m2_52  [key=0, style=solid];
m2_159 -> m2_162  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_159 -> m2_160  [key=0, style=solid];
m2_162 -> m2_163  [key=0, style=solid];
m2_162 -> m2_65  [key=2, style=dotted];
m2_160 -> m2_162  [key=0, style=solid];
m2_160 -> m2_161  [key=0, style=solid];
m2_161 -> m2_163  [key=0, style=solid];
m2_161 -> m2_8  [key=2, style=dotted];
m2_163 -> m2_159  [key=0, style=bold, color=blue];
m2_55 -> m2_56  [key=0, style=solid];
m2_55 -> m2_55  [key=3, color=darkorchid, style=bold, label="Local variable string insertParameterSql"];
m2_61 -> m2_62  [key=0, style=solid];
m2_62 -> m2_63  [key=0, style=solid];
m2_62 -> m2_47  [key=2, style=dotted];
m2_62 -> m2_64  [key=1, style=dashed, color=darkseagreen4, label=redis];
m2_62 -> m2_67  [key=1, style=dashed, color=darkseagreen4, label=redis];
m2_63 -> m2_64  [key=0, style=solid];
m2_63 -> m2_48  [key=2, style=dotted];
m2_124 -> m2_132  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_124 -> m2_125  [key=0, style=solid];
m2_124 -> m2_127  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>"];
m2_124 -> m2_131  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>"];
m2_132 -> m2_132  [key=1, style=dashed, color=darkseagreen4, label=keyValuePair];
m2_132 -> m2_131  [key=0, style=solid];
m2_132 -> m2_65  [key=2, style=dotted];
m2_131 -> m2_132  [key=0, style=solid];
m2_131 -> m2_133  [key=0, style=solid];
m2_129 -> m2_132  [key=1, style=dashed, color=darkseagreen4, label=sql];
m2_129 -> m2_129  [key=3, color=darkorchid, style=bold, label="Local variable string sql"];
m2_129 -> m2_130  [key=0, style=solid];
m2_125 -> m2_126  [key=0, style=solid];
m2_125 -> m2_127  [key=0, style=solid];
m2_127 -> m2_129  [key=0, style=solid];
m2_127 -> m2_128  [key=0, style=solid];
m2_130 -> m2_131  [key=0, style=solid];
m2_130 -> m2_135  [key=2, style=dotted];
m2_130 -> m2_133  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_133 -> m2_134  [key=0, style=solid];
m2_133 -> m2_136  [key=2, style=dotted];
m2_126 -> m2_8  [key=2, style=dotted];
m2_126 -> m2_134  [key=0, style=solid];
m2_128 -> m2_8  [key=2, style=dotted];
m2_128 -> m2_134  [key=0, style=solid];
m2_134 -> m2_124  [key=0, style=bold, color=blue];
m2_56 -> m2_57  [key=0, style=solid];
m2_56 -> m2_65  [key=2, style=dotted];
m2_7 -> m2_0  [key=0, style=bold, color=blue];
m2_137 -> m2_140  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_137 -> m2_138  [key=0, style=solid];
m2_140 -> m2_141  [key=0, style=solid];
m2_140 -> m2_62  [key=2, style=dotted];
m2_140 -> m2_143  [key=2, style=dotted];
m2_140 -> m2_144  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_140 -> m2_147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_138 -> m2_140  [key=0, style=solid];
m2_138 -> m2_139  [key=0, style=solid];
m2_141 -> m2_142  [key=0, style=solid];
m2_139 -> m2_8  [key=2, style=dotted];
m2_139 -> m2_142  [key=0, style=solid];
m2_142 -> m2_137  [key=0, style=bold, color=blue];
m2_164 -> m2_167  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_164 -> m2_165  [key=0, style=solid];
m2_167 -> m2_168  [key=0, style=solid];
m2_167 -> m2_65  [key=2, style=dotted];
m2_165 -> m2_167  [key=0, style=solid];
m2_165 -> m2_166  [key=0, style=solid];
m2_166 -> m2_168  [key=0, style=solid];
m2_166 -> m2_8  [key=2, style=dotted];
m2_168 -> m2_164  [key=0, style=bold, color=blue];
m2_177 -> m2_14  [key=1, style=dashed, color=green, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_18  [key=1, style=dashed, color=green, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_28  [key=1, style=dashed, color=green, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_39  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_49  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_56  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_70  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_89  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_100  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_107  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_112  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_121  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_132  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_140  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_156  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_162  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_167  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m2_177 -> m2_172  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_63 -> m3_64  [key=0, style=solid];
m3_64 -> m3_65  [key=0, style=solid];
m3_64 -> m3_33  [key=2, style=dotted];
m3_64 -> m3_68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_65 -> m3_66  [key=0, style=solid];
m3_65 -> m3_67  [key=2, style=dotted];
m3_66 -> m3_63  [key=0, style=bold, color=blue];
m3_152 -> m3_153  [key=0, style=solid];
m3_154 -> m3_155  [key=0, style=solid, color=green];
m3_154 -> m3_159  [key=2, style=dotted, color=green];
m3_153 -> m3_154  [key=0, style=solid, color=green];
m3_153 -> m3_157  [key=1, style=dashed, color=darkseagreen4, label=time];
m3_153 -> m3_161  [key=1, style=dashed, color=darkseagreen4, label=time];
m3_155 -> m3_156  [key=0, style=solid];
m3_155 -> m3_98  [key=2, style=dotted];
m3_156 -> m3_157  [key=0, style=solid];
m3_156 -> m3_99  [key=2, style=dotted];
m3_157 -> m3_158  [key=0, style=solid];
m3_157 -> m3_100  [key=2, style=dotted];
m3_157 -> m3_160  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_158 -> m3_152  [key=0, style=bold, color=blue];
m3_163 -> m3_164  [key=0, style=solid];
m3_164 -> m3_165  [key=0, style=solid];
m3_164 -> m3_22  [key=2, style=dotted];
m3_164 -> m3_29  [key=2, style=dotted];
m3_164 -> m3_23  [key=2, style=dotted];
m3_164 -> m3_169  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_165 -> m3_166  [key=0, style=solid];
m3_165 -> m3_98  [key=2, style=dotted];
m3_165 -> m3_173  [key=1, style=dashed, color=darkseagreen4, label=scheduler];
m3_166 -> m3_167  [key=0, style=solid];
m3_166 -> m3_168  [key=2, style=dotted];
m3_166 -> m3_172  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_167 -> m3_163  [key=0, style=bold, color=blue];
m3_104 -> m3_105  [key=0, style=solid];
m3_105 -> m3_106  [key=0, style=solid];
m3_105 -> m3_98  [key=2, style=dotted];
m3_106 -> m3_107  [key=0, style=solid];
m3_106 -> m3_99  [key=2, style=dotted];
m3_108 -> m3_109  [key=0, style=solid];
m3_108 -> m3_100  [key=2, style=dotted];
m3_108 -> m3_112  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_109 -> m3_110  [key=0, style=solid];
m3_109 -> m3_100  [key=2, style=dotted];
m3_109 -> m3_120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_110 -> m3_111  [key=0, style=solid];
m3_110 -> m3_100  [key=2, style=dotted];
m3_110 -> m3_127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_107 -> m3_108  [key=0, style=solid];
m3_107 -> m3_109  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m3_107 -> m3_121  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m3_107 -> m3_110  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m3_107 -> m3_128  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m3_107 -> m3_57  [key=2, style=dotted];
m3_107 -> m3_113  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m3_111 -> m3_104  [key=0, style=bold, color=blue];
m3_133 -> m3_134  [key=0, style=solid];
m3_134 -> m3_135  [key=0, style=solid];
m3_134 -> m3_22  [key=2, style=dotted];
m3_134 -> m3_23  [key=2, style=dotted];
m3_134 -> m3_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_135 -> m3_136  [key=0, style=solid];
m3_135 -> m3_98  [key=2, style=dotted];
m3_136 -> m3_137  [key=0, style=solid];
m3_136 -> m3_99  [key=2, style=dotted];
m3_137 -> m3_138  [key=0, style=solid];
m3_137 -> m3_100  [key=2, style=dotted];
m3_137 -> m3_143  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_138 -> m3_139  [key=0, style=solid];
m3_138 -> m3_100  [key=2, style=dotted];
m3_138 -> m3_146  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_139 -> m3_133  [key=0, style=bold, color=blue];
m3_79 -> m3_80  [key=0, style=solid];
m3_80 -> m3_81  [key=0, style=solid];
m3_80 -> m3_33  [key=2, style=dotted];
m3_80 -> m3_83  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_81 -> m3_82  [key=0, style=solid];
m3_81 -> m3_67  [key=2, style=dotted];
m3_82 -> m3_79  [key=0, style=bold, color=blue];
m3_98 -> m3_184  [key=0, style=solid];
m3_184 -> m3_185  [key=0, style=solid];
m3_184 -> m3_71  [key=2, style=dotted];
m3_185 -> m3_98  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_16  [key=2, style=dotted];
m3_2 -> m3_3  [key=0, style=solid];
m3_2 -> m3_17  [key=2, style=dotted];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_18  [key=2, style=dotted];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_19  [key=2, style=dotted];
m3_5 -> m3_6  [key=0, style=solid];
m3_5 -> m3_20  [key=2, style=dotted];
m3_6 -> m3_7  [key=0, style=solid];
m3_6 -> m3_21  [key=2, style=dotted];
m3_7 -> m3_8  [key=0, style=solid];
m3_7 -> m3_22  [key=2, style=dotted];
m3_7 -> m3_23  [key=2, style=dotted];
m3_7 -> m3_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_8 -> m3_9  [key=0, style=solid];
m3_8 -> m3_22  [key=2, style=dotted];
m3_8 -> m3_23  [key=2, style=dotted];
m3_8 -> m3_35  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_8 -> m3_39  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_9 -> m3_10  [key=0, style=solid];
m3_9 -> m3_24  [key=2, style=dotted];
m3_9 -> m3_25  [key=2, style=dotted];
m3_9 -> m3_26  [key=2, style=dotted];
m3_9 -> m3_27  [key=2, style=dotted];
m3_9 -> m3_42  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_10 -> m3_11  [key=0, style=solid];
m3_10 -> m3_28  [key=2, style=dotted];
m3_11 -> m3_12  [key=0, style=solid];
m3_11 -> m3_22  [key=2, style=dotted];
m3_11 -> m3_23  [key=2, style=dotted];
m3_11 -> m3_46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_22  [key=2, style=dotted];
m3_12 -> m3_29  [key=2, style=dotted];
m3_12 -> m3_23  [key=2, style=dotted];
m3_12 -> m3_50  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_13 -> m3_14  [key=0, style=solid];
m3_13 -> m3_22  [key=2, style=dotted];
m3_13 -> m3_23  [key=2, style=dotted];
m3_13 -> m3_54  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_14 -> m3_15  [key=0, style=solid];
m3_14 -> m3_22  [key=2, style=dotted];
m3_14 -> m3_23  [key=2, style=dotted];
m3_14 -> m3_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_15 -> m3_0  [key=0, style=bold, color=blue];
m3_93 -> m3_94  [key=0, style=solid];
m3_94 -> m3_95  [key=0, style=solid];
m3_94 -> m3_98  [key=2, style=dotted];
m3_95 -> m3_96  [key=0, style=solid];
m3_95 -> m3_99  [key=2, style=dotted];
m3_96 -> m3_97  [key=0, style=solid];
m3_96 -> m3_100  [key=2, style=dotted];
m3_96 -> m3_101  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_97 -> m3_93  [key=0, style=bold, color=blue];
m3_116 -> m3_117  [key=0, style=solid];
m3_40 -> m3_41  [key=0, style=solid];
m3_69 -> m3_70  [key=0, style=solid];
m3_69 -> m3_71  [key=2, style=dotted];
m3_77 -> m3_78  [key=0, style=solid];
m3_77 -> m3_71  [key=2, style=dotted];
m3_84 -> m3_85  [key=0, style=solid];
m3_84 -> m3_71  [key=2, style=dotted];
m3_91 -> m3_92  [key=0, style=solid];
m3_91 -> m3_71  [key=2, style=dotted];
m3_121 -> m3_122  [key=0, style=solid];
m3_121 -> m3_33  [key=2, style=dotted];
m3_121 -> m3_115  [key=2, style=dotted];
m3_121 -> m3_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_124 -> m3_125  [key=0, style=solid];
m3_124 -> m3_119  [key=2, style=dotted];
m3_124 -> m3_126  [key=2, style=dotted];
m3_128 -> m3_129  [key=0, style=solid];
m3_128 -> m3_33  [key=2, style=dotted];
m3_128 -> m3_115  [key=2, style=dotted];
m3_128 -> m3_130  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_131 -> m3_132  [key=0, style=solid];
m3_131 -> m3_119  [key=2, style=dotted];
m3_131 -> m3_126  [key=2, style=dotted];
m3_147 -> m3_148  [key=0, style=solid];
m3_147 -> m3_57  [key=2, style=dotted];
m3_147 -> m3_33  [key=2, style=dotted];
m3_147 -> m3_115  [key=2, style=dotted];
m3_147 -> m3_149  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_150 -> m3_151  [key=0, style=solid];
m3_150 -> m3_119  [key=2, style=dotted];
m3_150 -> m3_126  [key=2, style=dotted];
m3_173 -> m3_174  [key=0, style=solid];
m3_173 -> m3_99  [key=2, style=dotted];
m3_182 -> m3_183  [key=0, style=solid];
m3_182 -> m3_99  [key=2, style=dotted];
m3_161 -> m3_162  [key=0, style=solid];
m3_161 -> m3_34  [key=2, style=dotted];
m3_30 -> m3_31  [key=0, style=solid];
m3_35 -> m3_36  [key=0, style=solid];
m3_39 -> m3_40  [key=0, style=solid];
m3_41 -> m3_39  [key=0, style=bold, color=blue];
m3_42 -> m3_43  [key=0, style=solid];
m3_46 -> m3_47  [key=0, style=solid];
m3_50 -> m3_51  [key=0, style=solid];
m3_54 -> m3_55  [key=0, style=solid];
m3_59 -> m3_60  [key=0, style=solid];
m3_68 -> m3_69  [key=0, style=solid];
m3_70 -> m3_68  [key=0, style=bold, color=blue];
m3_76 -> m3_77  [key=0, style=solid];
m3_78 -> m3_76  [key=0, style=bold, color=blue];
m3_83 -> m3_84  [key=0, style=solid];
m3_85 -> m3_83  [key=0, style=bold, color=blue];
m3_90 -> m3_91  [key=0, style=solid];
m3_92 -> m3_90  [key=0, style=bold, color=blue];
m3_101 -> m3_102  [key=0, style=solid];
m3_112 -> m3_113  [key=0, style=solid];
m3_120 -> m3_121  [key=0, style=solid];
m3_122 -> m3_120  [key=0, style=bold, color=blue];
m3_123 -> m3_124  [key=0, style=solid];
m3_125 -> m3_123  [key=0, style=bold, color=blue];
m3_127 -> m3_128  [key=0, style=solid];
m3_129 -> m3_127  [key=0, style=bold, color=blue];
m3_130 -> m3_131  [key=0, style=solid];
m3_132 -> m3_130  [key=0, style=bold, color=blue];
m3_140 -> m3_141  [key=0, style=solid];
m3_143 -> m3_144  [key=0, style=solid];
m3_146 -> m3_147  [key=0, style=solid];
m3_148 -> m3_146  [key=0, style=bold, color=blue];
m3_149 -> m3_150  [key=0, style=solid];
m3_151 -> m3_149  [key=0, style=bold, color=blue];
m3_160 -> m3_161  [key=0, style=solid];
m3_169 -> m3_170  [key=0, style=solid];
m3_172 -> m3_173  [key=0, style=solid];
m3_174 -> m3_172  [key=0, style=bold, color=blue];
m3_181 -> m3_182  [key=0, style=solid];
m3_183 -> m3_181  [key=0, style=bold, color=blue];
m3_162 -> m3_160  [key=0, style=bold, color=blue];
m3_32 -> m3_30  [key=0, style=bold, color=blue];
m3_31 -> m3_33  [key=2, style=dotted];
m3_31 -> m3_34  [key=2, style=dotted];
m3_31 -> m3_32  [key=0, style=solid];
m3_37 -> m3_35  [key=0, style=bold, color=blue];
m3_36 -> m3_33  [key=2, style=dotted];
m3_36 -> m3_37  [key=0, style=solid];
m3_36 -> m3_38  [key=2, style=dotted];
m3_44 -> m3_42  [key=0, style=bold, color=blue];
m3_43 -> m3_44  [key=0, style=solid];
m3_43 -> m3_45  [key=2, style=dotted];
m3_48 -> m3_46  [key=0, style=bold, color=blue];
m3_47 -> m3_48  [key=0, style=solid];
m3_47 -> m3_49  [key=2, style=dotted];
m3_52 -> m3_50  [key=0, style=bold, color=blue];
m3_51 -> m3_52  [key=0, style=solid];
m3_51 -> m3_53  [key=2, style=dotted];
m3_56 -> m3_54  [key=0, style=bold, color=blue];
m3_55 -> m3_57  [key=2, style=dotted];
m3_55 -> m3_56  [key=0, style=solid];
m3_55 -> m3_58  [key=2, style=dotted];
m3_61 -> m3_59  [key=0, style=bold, color=blue];
m3_60 -> m3_33  [key=2, style=dotted];
m3_60 -> m3_61  [key=0, style=solid];
m3_60 -> m3_62  [key=2, style=dotted];
m3_102 -> m3_33  [key=2, style=dotted];
m3_102 -> m3_103  [key=0, style=solid];
m3_102 -> m3_62  [key=2, style=dotted];
m3_113 -> m3_33  [key=2, style=dotted];
m3_113 -> m3_115  [key=2, style=dotted];
m3_113 -> m3_114  [key=0, style=solid];
m3_113 -> m3_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_141 -> m3_33  [key=2, style=dotted];
m3_141 -> m3_34  [key=2, style=dotted];
m3_141 -> m3_142  [key=0, style=solid];
m3_144 -> m3_33  [key=2, style=dotted];
m3_144 -> m3_145  [key=0, style=solid];
m3_144 -> m3_62  [key=2, style=dotted];
m3_170 -> m3_33  [key=2, style=dotted];
m3_170 -> m3_171  [key=0, style=solid];
m3_170 -> m3_53  [key=2, style=dotted];
m3_103 -> m3_101  [key=0, style=bold, color=blue];
m3_114 -> m3_112  [key=0, style=bold, color=blue];
m3_117 -> m3_119  [key=2, style=dotted];
m3_117 -> m3_118  [key=0, style=solid];
m3_142 -> m3_140  [key=0, style=bold, color=blue];
m3_145 -> m3_143  [key=0, style=bold, color=blue];
m3_171 -> m3_169  [key=0, style=bold, color=blue];
m3_118 -> m3_116  [key=0, style=bold, color=blue];
m3_175 -> m3_176  [key=0, style=solid];
m3_176 -> m3_177  [key=0, style=solid];
m3_176 -> m3_180  [key=2, style=dotted];
m3_176 -> m3_27  [key=2, style=dotted];
m3_177 -> m3_178  [key=0, style=solid];
m3_177 -> m3_98  [key=2, style=dotted];
m3_177 -> m3_182  [key=1, style=dashed, color=darkseagreen4, label=scheduler];
m3_178 -> m3_179  [key=0, style=solid];
m3_178 -> m3_168  [key=2, style=dotted];
m3_178 -> m3_181  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_179 -> m3_175  [key=0, style=bold, color=blue];
m3_86 -> m3_87  [key=0, style=solid];
m3_87 -> m3_88  [key=0, style=solid];
m3_87 -> m3_33  [key=2, style=dotted];
m3_87 -> m3_90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_88 -> m3_89  [key=0, style=solid];
m3_88 -> m3_67  [key=2, style=dotted];
m3_89 -> m3_86  [key=0, style=bold, color=blue];
m3_72 -> m3_73  [key=0, style=solid];
m3_73 -> m3_74  [key=0, style=solid];
m3_73 -> m3_33  [key=2, style=dotted];
m3_73 -> m3_76  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_74 -> m3_75  [key=0, style=solid];
m3_74 -> m3_67  [key=2, style=dotted];
m3_75 -> m3_72  [key=0, style=bold, color=blue];
m3_186 -> m3_154  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_40  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_64  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_69  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_73  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_77  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_80  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_84  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_87  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_91  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_94  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_95  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_96  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_105  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_106  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_108  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_109  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_121  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_124  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_110  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_128  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_131  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_134  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_135  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_136  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_137  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_138  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_147  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_150  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_155  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_156  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_157  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_164  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_165  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_166  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_173  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_176  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_177  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_178  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_182  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_186 -> m3_184  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m3_187 -> m3_121  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m3_187 -> m3_128  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m3_187 -> m3_113  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m3_189 -> m3_173  [key=1, style=dashed, color=darkseagreen4, label=scheduler];
m3_190 -> m3_182  [key=1, style=dashed, color=darkseagreen4, label=scheduler];
m3_188 -> m3_161  [key=1, style=dashed, color=darkseagreen4, label=time];
m4_0 -> m4_1  [key=0, style=solid];
m4_0 -> m4_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Storage.IStorageConnection"];
m4_0 -> m4_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Storage.IStorageConnection"];
m4_0 -> m4_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Storage.IStorageConnection"];
m4_0 -> m4_3  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.List<Hangfire.Storage.RecurringJobDto> GetRecurringJobs"];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_3  [key=0, style=solid];
m4_4 -> m4_5  [key=0, style=solid];
m4_4 -> m4_29  [key=2, style=dotted];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_30  [key=2, style=dotted];
m4_6 -> m4_31  [key=2, style=dotted];
m4_6 -> m4_10  [key=1, style=dashed, color=darkseagreen4, label=hash];
m4_6 -> m4_11  [key=1, style=dashed, color=darkseagreen4, label=hash];
m4_6 -> m4_15  [key=1, style=dashed, color=darkseagreen4, label=hash];
m4_6 -> m4_16  [key=1, style=dashed, color=darkseagreen4, label=hash];
m4_6 -> m4_17  [key=1, style=dashed, color=red, label=hash];
m4_6 -> m4_18  [key=1, style=dashed, color=darkseagreen4, label=hash];
m4_6 -> m4_22  [key=1, style=dashed, color=darkseagreen4, label=hash];
m4_6 -> m4_23  [key=1, style=dashed, color=darkseagreen4, label=hash];
m4_19 -> m4_20  [key=0, style=solid];
m4_19 -> m4_38  [key=2, style=dotted];
m4_19 -> m4_21  [key=1, style=dashed, color=darkseagreen4, label=stateData];
m4_2 -> m4_26  [key=0, style=solid];
m4_2 -> m4_27  [key=2, style=dotted];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_28  [key=2, style=dotted];
m4_3 -> m4_8  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_3 -> m4_24  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_3 -> m4_25  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_8 -> m4_5  [key=0, style=solid];
m4_8 -> m4_32  [key=2, style=dotted];
m4_8 -> m4_33  [key=2, style=dotted];
m4_24 -> m4_5  [key=0, style=solid];
m4_24 -> m4_33  [key=2, style=dotted];
m4_25 -> m4_26  [key=0, style=solid];
m4_5 -> m4_6  [key=0, style=solid];
m4_5 -> m4_25  [key=0, style=solid];
m4_5 -> m4_8  [key=1, style=dashed, color=darkseagreen4, label=id];
m4_5 -> m4_9  [key=1, style=dashed, color=darkseagreen4, label=id];
m4_9 -> m4_10  [key=0, style=solid];
m4_9 -> m4_32  [key=2, style=dotted];
m4_9 -> m4_12  [key=1, style=dashed, color=darkseagreen4, label=dto];
m4_9 -> m4_14  [key=1, style=dashed, color=darkseagreen4, label=dto];
m4_9 -> m4_16  [key=1, style=dashed, color=darkseagreen4, label=dto];
m4_9 -> m4_18  [key=1, style=dashed, color=darkseagreen4, label=dto];
m4_9 -> m4_19  [key=1, style=dashed, color=darkseagreen4, label=dto];
m4_9 -> m4_21  [key=1, style=dashed, color=darkseagreen4, label=dto];
m4_9 -> m4_23  [key=1, style=dashed, color=darkseagreen4, label=dto];
m4_9 -> m4_24  [key=1, style=dashed, color=darkseagreen4, label=dto];
m4_7 -> m4_8  [key=0, style=solid];
m4_7 -> m4_9  [key=0, style=solid];
m4_10 -> m4_11  [key=0, style=solid];
m4_11 -> m4_12  [key=0, style=solid];
m4_11 -> m4_34  [key=2, style=dotted];
m4_15 -> m4_16  [key=0, style=solid];
m4_15 -> m4_17  [key=0, style=solid, color=red];
m4_15 -> m4_36  [key=2, style=dotted];
m4_16 -> m4_17  [key=0, style=solid, color=red];
m4_16 -> m4_37  [key=2, style=dotted];
m4_17 -> m4_18  [key=0, style=solid, color=red];
m4_17 -> m4_22  [key=0, style=solid, color=red];
m4_17 -> m4_36  [key=2, style=dotted, color=red];
m4_18 -> m4_19  [key=0, style=solid];
m4_22 -> m4_23  [key=0, style=solid];
m4_22 -> m4_24  [key=0, style=solid];
m4_22 -> m4_36  [key=2, style=dotted];
m4_23 -> m4_24  [key=0, style=solid];
m4_23 -> m4_37  [key=2, style=dotted];
m4_12 -> m4_13  [key=0, style=solid];
m4_12 -> m4_15  [key=0, style=solid];
m4_12 -> m4_35  [key=2, style=dotted];
m4_14 -> m4_15  [key=0, style=solid];
m4_21 -> m4_22  [key=0, style=solid];
m4_13 -> m4_14  [key=0, style=solid];
m4_20 -> m4_21  [key=0, style=solid];
m4_20 -> m4_22  [key=0, style=solid];
m4_26 -> m4_0  [key=0, style=bold, color=blue];
}
