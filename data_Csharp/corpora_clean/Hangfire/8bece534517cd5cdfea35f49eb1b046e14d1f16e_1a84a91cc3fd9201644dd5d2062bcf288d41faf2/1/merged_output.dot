digraph  {
n0 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(MessageQueue)", label="Entry Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(MessageQueue)", span="74-74"];
n1 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(MessageQueue)", label="return GetCount(queue.Path);", span="76-76"];
n2 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(MessageQueue)", label="Exit Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(MessageQueue)", span="74-74"];
n3 [cluster="Unk.GetCount", label="Entry Unk.GetCount", span=""];
n4 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", label="Entry Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", span="92-92"];
n5 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", label="!MessageQueue.Exists(path)", span="94-94"];
n16 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", label="var objectName = Marshal.StringToBSTR(''queue=Direct=OS:'' + path)", span="112-112"];
n6 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", label="return 0;", span="96-96"];
n7 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", color=red, community=0, label="1: var props = new MQMGMTPROPS()", span="99-99"];
n25 [cluster="Unk.Exists", label="Entry Unk.Exists", span=""];
n8 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", color=red, community=0, label="1: props.cProp = 1", span="100-100"];
n26 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.MQMGMTPROPS.MQMGMTPROPS()", label="Entry Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.MQMGMTPROPS.MQMGMTPROPS()", span="162-162"];
n9 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", color=red, community=0, label="1: var aPropId = PROPID_MGMT_QUEUE_MESSAGE_COUNT", span="102-102"];
n10 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", color=red, community=0, label="1: props.aPropID = &aPropId", span="103-103"];
n11 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", color=red, community=0, label="1: var aPropVar = new MQPROPVariant()", span="105-105"];
n12 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", color=red, community=0, label="1: aPropVar.vt = VT_NULL", span="106-106"];
n27 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.MQPROPVariant.MQPROPVariant()", label="Entry Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.MQPROPVariant.MQPROPVariant()", span="189-189"];
n13 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", color=red, community=0, label="1: props.aPropVar = &aPropVar", span="107-107"];
n14 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", color=red, community=0, label="1: var status = 0", span="109-109"];
n15 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", color=red, community=0, label="1: props.status = &status", span="110-110"];
n19 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", color=red, community=0, label="1: var result = MQMgmtGetInfo(null, (char*) objectName, &props)", span="119-119"];
n17 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", color=red, community=0, label="1: uint rtn", span="115-115"];
n28 [cluster="System.Runtime.InteropServices.Marshal.StringToBSTR(string)", label="Entry System.Runtime.InteropServices.Marshal.StringToBSTR(string)", span="0-0"];
n18 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", color=red, community=0, label="1: LockObject", span="117-117"];
n20 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", color=red, community=0, label="1: result != 0 || *props.status != 0 || props.aPropVar->vt != VT_UI4", span="120-120"];
n29 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.MQMgmtGetInfo(char*, char*, Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.MQMGMTPROPS*)", label="Entry Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.MQMgmtGetInfo(char*, char*, Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.MQMGMTPROPS*)", span="154-154"];
n22 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", label="rtn = props.aPropVar->ulVal", span="126-126"];
n21 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", label="rtn = 0", span="122-122"];
n23 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", color=red, community=0, label="0: return rtn;", span="130-130"];
n24 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", label="Exit Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.GetCount(string)", span="92-92"];
n30 [cluster="Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.MQMgmtGetInfo(char*, char*, Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.MQMGMTPROPS*)", label="Exit Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.MQMgmtGetInfo(char*, char*, Rsft.Lib.Msmq.MessageCounter.MessageQueueExtensions.MQMGMTPROPS*)", span="154-154"];
m0_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="BackgroundJobStateChangerFacts.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m0_0 [cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IAtomicWriteTransaction)", file="BackgroundJobStateChangerFacts.cs", label="Entry HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IAtomicWriteTransaction)", span="23-23"];
m0_1 [cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IAtomicWriteTransaction)", file="BackgroundJobStateChangerFacts.cs", label="transaction == null", span="27-27"];
m0_3 [cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IAtomicWriteTransaction)", file="BackgroundJobStateChangerFacts.cs", label="Transaction = transaction", span="29-29"];
m0_2 [cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IAtomicWriteTransaction)", file="BackgroundJobStateChangerFacts.cs", label="throw new ArgumentNullException(''transaction'');", span="27-27"];
m0_4 [cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IAtomicWriteTransaction)", file="BackgroundJobStateChangerFacts.cs", label="Exit HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IAtomicWriteTransaction)", span="23-23"];
m0_6 [file="BackgroundJobStateChangerFacts.cs", label="HangFire.Common.States.StateApplyingContext", span=""];
m1_8 [cluster="Hangfire.IBootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", file="Worker.cs", label="Entry Hangfire.IBootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", span="66-66"];
m1_9 [cluster="Hangfire.IBootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", file="Worker.cs", label="Exit Hangfire.IBootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", span="66-66"];
m1_0 [cluster="Hangfire.IBootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", file="Worker.cs", label="Entry Hangfire.IBootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", span="36-36"];
m1_1 [cluster="Hangfire.IBootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", file="Worker.cs", label="Exit Hangfire.IBootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", span="36-36"];
m1_10 [cluster="Hangfire.IBootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", file="Worker.cs", label="Entry Hangfire.IBootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", span="74-74"];
m1_11 [cluster="Hangfire.IBootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", file="Worker.cs", label="Exit Hangfire.IBootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", span="74-74"];
m1_4 [cluster="Hangfire.IBootstrapperConfiguration.UseDashboardPath(string)", file="Worker.cs", label="Entry Hangfire.IBootstrapperConfiguration.UseDashboardPath(string)", span="51-51"];
m1_5 [cluster="Hangfire.IBootstrapperConfiguration.UseDashboardPath(string)", file="Worker.cs", label="Exit Hangfire.IBootstrapperConfiguration.UseDashboardPath(string)", span="51-51"];
m1_2 [cluster="Hangfire.IBootstrapperConfiguration.UseFilter(object)", file="Worker.cs", label="Entry Hangfire.IBootstrapperConfiguration.UseFilter(object)", span="43-43"];
m1_3 [cluster="Hangfire.IBootstrapperConfiguration.UseFilter(object)", file="Worker.cs", label="Exit Hangfire.IBootstrapperConfiguration.UseFilter(object)", span="43-43"];
m1_12 [cluster="Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", file="Worker.cs", label="Entry Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", span="82-82"];
m1_13 [cluster="Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", file="Worker.cs", label="Exit Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", span="82-82"];
m1_6 [cluster="Hangfire.IBootstrapperConfiguration.UseAppPath(string)", file="Worker.cs", label="Entry Hangfire.IBootstrapperConfiguration.UseAppPath(string)", span="58-58"];
m1_7 [cluster="Hangfire.IBootstrapperConfiguration.UseAppPath(string)", file="Worker.cs", label="Exit Hangfire.IBootstrapperConfiguration.UseAppPath(string)", span="58-58"];
m2_36 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="44-44"];
m2_132 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="WorkerFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", span="162-162"];
m2_133 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="164-164"];
m2_134 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="WorkerFacts.cs", label="worker.Execute(_context.Object)", span="166-166"];
m2_135 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="WorkerFacts.cs", label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is ProcessingState &&\r\n                ctx.ExpectedStates.ElementAt(0) == EnqueuedState.StateName &&\r\n                ctx.ExpectedStates.ElementAt(1) == ProcessingState.StateName)))", span="168-171"];
m2_136 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="WorkerFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", span="162-162"];
m2_13 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="WorkerFacts.cs", label="WriteLiteral(''</td>\r\n                    <td>'')", span="142-142"];
m2_53 [cluster="Unk.Equal", file="WorkerFacts.cs", label="Entry Unk.Equal", span=""];
m2_168 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled_DuringShutdownOnly()", file="WorkerFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled_DuringShutdownOnly()", span="202-202"];
m2_169 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled_DuringShutdownOnly()", file="WorkerFacts.cs", label="var cts = new CancellationTokenSource()", span="205-205"];
m2_170 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled_DuringShutdownOnly()", file="WorkerFacts.cs", label="_context.CancellationTokenSource = cts", span="206-206"];
m2_171 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled_DuringShutdownOnly()", file="WorkerFacts.cs", label="_performer.Setup(x => x.Perform(It.IsAny<PerformContext>()))\r\n                .Callback(() => cts.Cancel())\r\n                .Throws<OperationCanceledException>()", span="208-210"];
m2_172 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled_DuringShutdownOnly()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="212-212"];
m2_173 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled_DuringShutdownOnly()", file="WorkerFacts.cs", label="Assert.Throws<OperationCanceledException>(() => worker.Execute(_context.Object))", span="215-215"];
m2_174 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled_DuringShutdownOnly()", file="WorkerFacts.cs", label="_stateChanger.Verify(\r\n                x => x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.NewState is FailedState)),\r\n                Times.Never)", span="218-220"];
m2_175 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled_DuringShutdownOnly()", file="WorkerFacts.cs", label="_fetchedJob.Verify(x => x.Requeue())", span="221-221"];
m2_176 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled_DuringShutdownOnly()", file="WorkerFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled_DuringShutdownOnly()", span="202-202"];
m2_251 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="WorkerFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", span="275-275"];
m2_252 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="WorkerFacts.cs", label="var exception = new InvalidOperationException()", span="278-278"];
m2_253 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="WorkerFacts.cs", label="_performer\r\n                .Setup(x => x.Perform(It.IsAny<PerformContext>()))\r\n                .Throws(exception)", span="279-281"];
m2_256 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="WorkerFacts.cs", label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState &&\r\n                ((FailedState) ctx.NewState).Exception == exception)))", span="289-292"];
m2_254 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="283-283"];
m2_255 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="WorkerFacts.cs", label="worker.Execute(_context.Object)", span="286-286"];
m2_257 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="WorkerFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", span="275-275"];
m2_58 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", file="WorkerFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", span="65-65"];
m2_59 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", file="WorkerFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(_queues, null, _stateChanger.Object))", span="67-68"];
m2_60 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", file="WorkerFacts.cs", label="Assert.Equal(''performer'', exception.ParamName)", span="70-70"];
m2_61 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", file="WorkerFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", span="65-65"];
m2_143 [cluster="Unk.ElementAt", file="WorkerFacts.cs", label="Entry Unk.ElementAt", span=""];
m2_240 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="WorkerFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", span="263-263"];
m2_241 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="265-265"];
m2_242 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="WorkerFacts.cs", label="worker.Execute(_context.Object)", span="267-267"];
m2_243 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="WorkerFacts.cs", label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is SucceededState &&\r\n                ctx.ExpectedStates.ElementAt(0) == ProcessingState.StateName)))", span="269-271"];
m2_244 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="WorkerFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", span="263-263"];
m2_293 [cluster="System.Exception.Exception()", file="WorkerFacts.cs", label="Entry System.Exception.Exception()", span="0-0"];
m2_38 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="47-47"];
m2_120 [cluster="Unk.Requeue", file="WorkerFacts.cs", label="Entry Unk.Requeue", span=""];
m2_144 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="WorkerFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", span="175-175"];
m2_145 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="WorkerFacts.cs", label="_stateChanger\r\n                .Setup(x => x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.NewState is ProcessingState)))\r\n                .Returns<IState>(null)", span="178-180"];
m2_146 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="182-182"];
m2_147 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="WorkerFacts.cs", label="worker.Execute(_context.Object)", span="185-185"];
m2_148 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="WorkerFacts.cs", label="_performer.Verify(x => x.Perform(It.IsAny<PerformContext>()), Times.Never)", span="188-188"];
m2_149 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="WorkerFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", span="175-175"];
m2_160 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="WorkerFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", span="192-192"];
m2_161 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="194-194"];
m2_162 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="WorkerFacts.cs", label="worker.Execute(_context.Object)", span="196-196"];
m2_163 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="WorkerFacts.cs", label="_performer.Verify(x => x.Perform(It.IsNotNull<PerformContext>()))", span="198-198"];
m2_164 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="WorkerFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", span="192-192"];
m2_185 [cluster="System.Threading.CancellationTokenSource.Cancel()", file="WorkerFacts.cs", label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0"];
m2_217 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJobToFailedState_AndRemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="WorkerFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJobToFailedState_AndRemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", span="244-244"];
m2_218 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJobToFailedState_AndRemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="WorkerFacts.cs", label="_performer.Setup(x => x.Perform(It.IsAny<PerformContext>()))\r\n                .Throws<JobAbortedException>()", span="247-248"];
m2_219 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJobToFailedState_AndRemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="250-250"];
m2_220 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJobToFailedState_AndRemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="WorkerFacts.cs", label="worker.Execute(_context.Object)", span="253-253"];
m2_221 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJobToFailedState_AndRemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="WorkerFacts.cs", label="_stateChanger.Verify(\r\n                x => x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.NewState is FailedState)),\r\n                Times.Never)", span="255-257"];
m2_222 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJobToFailedState_AndRemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="WorkerFacts.cs", label="_fetchedJob.Verify(x => x.RemoveFromQueue())", span="258-258"];
m2_223 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJobToFailedState_AndRemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="WorkerFacts.cs", label="_fetchedJob.Verify(x => x.Requeue(), Times.Never)", span="259-259"];
m2_224 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJobToFailedState_AndRemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="WorkerFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJobToFailedState_AndRemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", span="244-244"];
m2_258 [cluster="System.InvalidOperationException.InvalidOperationException()", file="WorkerFacts.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m2_31 [cluster="lambda expression", file="WorkerFacts.cs", label="x.FetchNextJob(_queues, It.IsNotNull<CancellationToken>())", span="41-41"];
m2_22 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="WorkerFacts.cs", label="server.Heartbeat.HasValue", span="187-187"];
m2_101 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="WorkerFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", span="108-108"];
m2_102 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="WorkerFacts.cs", label="_stateChanger\r\n                .Setup(x => x.ChangeState(It.IsAny<StateChangeContext>()))\r\n                .Throws<InvalidOperationException>()", span="110-112"];
m2_103 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="114-114"];
m2_104 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="WorkerFacts.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => worker.Execute(_context.Object))", span="116-117"];
m2_105 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="WorkerFacts.cs", label="_fetchedJob.Verify(x => x.RemoveFromQueue(), Times.Never)", span="119-119"];
m2_106 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="WorkerFacts.cs", label="_fetchedJob.Verify(x => x.Requeue())", span="120-120"];
m2_107 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="WorkerFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", span="108-108"];
m2_78 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="WorkerFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", span="332-332"];
m2_303 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="WorkerFacts.cs", label="return new Worker(_queues, _performer.Object, _stateChanger.Object);", span="334-334"];
m2_304 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="WorkerFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", span="332-332"];
m2_35 [cluster="lambda expression", file="WorkerFacts.cs", label="x.GetJobData(JobId)", span="44-44"];
m2_18 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="WorkerFacts.cs", label="Write(JobHelper.ToStringTimestamp(server.StartedAt))", span="167-167"];
m2_269 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="WorkerFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", span="296-296"];
m2_270 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="WorkerFacts.cs", label="var exception = new InvalidOperationException()", span="299-299"];
m2_271 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="WorkerFacts.cs", label="_performer\r\n                .Setup(x => x.Perform(It.IsAny<PerformContext>()))\r\n                .Throws(new JobPerformanceException(''hello'', exception))", span="300-302"];
m2_272 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="304-304"];
m2_273 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="WorkerFacts.cs", label="worker.Execute(_context.Object)", span="307-307"];
m2_274 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="WorkerFacts.cs", label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState)))", span="310-312"];
m2_275 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="WorkerFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", span="296-296"];
m2_198 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesAJob_ToTheFailedState_AndNotRequeuesIt_WhenProcessThrowsOperationCanceled_WhenShutdownWasNotRequested()", file="WorkerFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesAJob_ToTheFailedState_AndNotRequeuesIt_WhenProcessThrowsOperationCanceled_WhenShutdownWasNotRequested()", span="225-225"];
m2_199 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesAJob_ToTheFailedState_AndNotRequeuesIt_WhenProcessThrowsOperationCanceled_WhenShutdownWasNotRequested()", file="WorkerFacts.cs", label="_performer.Setup(x => x.Perform(It.IsAny<PerformContext>()))\r\n                .Throws<OperationCanceledException>()", span="228-229"];
m2_200 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesAJob_ToTheFailedState_AndNotRequeuesIt_WhenProcessThrowsOperationCanceled_WhenShutdownWasNotRequested()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="231-231"];
m2_201 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesAJob_ToTheFailedState_AndNotRequeuesIt_WhenProcessThrowsOperationCanceled_WhenShutdownWasNotRequested()", file="WorkerFacts.cs", label="worker.Execute(_context.Object)", span="234-234"];
m2_202 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesAJob_ToTheFailedState_AndNotRequeuesIt_WhenProcessThrowsOperationCanceled_WhenShutdownWasNotRequested()", file="WorkerFacts.cs", label="_stateChanger.Verify(\r\n                x => x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.NewState is FailedState)),\r\n                Times.Once)", span="237-239"];
m2_203 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesAJob_ToTheFailedState_AndNotRequeuesIt_WhenProcessThrowsOperationCanceled_WhenShutdownWasNotRequested()", file="WorkerFacts.cs", label="_fetchedJob.Verify(x => x.Requeue(), Times.Never)", span="240-240"];
m2_204 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesAJob_ToTheFailedState_AndNotRequeuesIt_WhenProcessThrowsOperationCanceled_WhenShutdownWasNotRequested()", file="WorkerFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesAJob_ToTheFailedState_AndNotRequeuesIt_WhenProcessThrowsOperationCanceled_WhenShutdownWasNotRequested()", span="225-225"];
m2_26 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="WorkerFacts.cs", label="Write(server.Heartbeat)", span="208-208"];
m2_45 [cluster="Unk.ChangeState", file="WorkerFacts.cs", label="Entry Unk.ChangeState", span=""];
m2_0 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="WorkerFacts.cs", label="Entry HangFire.Web.Pages.ServersPage.Execute()", span="57-57"];
m2_1 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="WorkerFacts.cs", label="WriteLiteral(''\r\n'')", span="61-61"];
m2_2 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="WorkerFacts.cs", label="Layout = new LayoutPage { Title = ''Servers'' }", span="74-74"];
m2_3 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="WorkerFacts.cs", label="IList<ServerDto> servers", span="76-76"];
m2_4 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="WorkerFacts.cs", label="var monitor = JobStorage.Current.GetMonitoringApi()", span="77-77"];
m2_5 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="WorkerFacts.cs", label="servers = monitor.Servers()", span="79-79"];
m2_6 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="WorkerFacts.cs", label="WriteLiteral(''\r\n'')", span="86-86"];
m2_7 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="WorkerFacts.cs", label="servers.Count == 0", span="91-91"];
m2_8 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="WorkerFacts.cs", label="WriteLiteral(''    <div class=\''alert alert-warning\''>\r\n        There are no active servers. Backg'' +\r\n''round tasks will not be processed.\r\n    </div>\r\n'')", span="97-98"];
m2_9 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="WorkerFacts.cs", label="WriteLiteral(@''    <table class=''''table''''>\r\n        <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>Workers</th>\r\n                <th>Queues</th>\r\n                <th>Started</th>\r\n                <th>Heartbeat</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n'')", span="110-121"];
m2_10 [cluster="HangFire.Web.Pages.ServersPage.Execute()", color=green, community=0, file="WorkerFacts.cs", label="0: servers", span="126-126"];
m2_11 [cluster="HangFire.Web.Pages.ServersPage.Execute()", color=green, community=0, file="WorkerFacts.cs", label="0: WriteLiteral(''                <tr>\r\n                    <td>'')", span="132-132"];
m2_12 [cluster="HangFire.Web.Pages.ServersPage.Execute()", color=green, community=0, file="WorkerFacts.cs", label="0: Write(server.Name.ToUpperInvariant())", span="137-137"];
m2_28 [cluster="lambda expression", file="WorkerFacts.cs", label="x.JobId", span="38-38"];
m2_29 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="38-38"];
m2_14 [cluster="Mock<IBackgroundJobPerformer>.cstr", file="WorkerFacts.cs", label="Entry Mock<IBackgroundJobPerformer>.cstr", span=""];
m2_16 [cluster="Unk.Setup", file="WorkerFacts.cs", label="Entry Unk.Setup", span=""];
m2_20 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="WorkerFacts.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="233-233"];
m2_24 [cluster="lambda expression", file="WorkerFacts.cs", label="x.GetConnection()", span="35-35"];
m2_27 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="38-38"];
m2_15 [cluster="Mock<IStorageConnection>.cstr", file="WorkerFacts.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m2_17 [cluster="Unk.Returns", file="WorkerFacts.cs", label="Entry Unk.Returns", span=""];
m2_19 [cluster="Hangfire.Storage.JobData.JobData()", file="WorkerFacts.cs", label="Entry Hangfire.Storage.JobData.JobData()", span="21-21"];
m2_21 [cluster="Mock<IBackgroundJobStateChanger>.cstr", file="WorkerFacts.cs", label="Entry Mock<IBackgroundJobStateChanger>.cstr", span=""];
m2_23 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="35-35"];
m2_25 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="35-35"];
m2_30 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="41-41"];
m2_39 [cluster="lambda expression", file="WorkerFacts.cs", label="Method()", span="47-47"];
m2_87 [cluster="Unk.Dispose", file="WorkerFacts.cs", label="Entry Unk.Dispose", span=""];
m2_259 [cluster="Unk.Throws", file="WorkerFacts.cs", label="Entry Unk.Throws", span=""];
m2_33 [cluster="HangFire.JobStorage.GetMonitoringApi()", file="WorkerFacts.cs", label="Entry HangFire.JobStorage.GetMonitoringApi()", span="54-54"];
m2_49 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", file="WorkerFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", span="56-56"];
m2_50 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", file="WorkerFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(null, _performer.Object, _stateChanger.Object))", span="58-59"];
m2_51 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", file="WorkerFacts.cs", label="Assert.Equal(''queues'', exception.ParamName)", span="61-61"];
m2_52 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", file="WorkerFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", span="56-56"];
m2_72 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="WorkerFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", span="83-83"];
m2_73 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="85-85"];
m2_74 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="WorkerFacts.cs", label="worker.Execute(_context.Object)", span="87-87"];
m2_75 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="WorkerFacts.cs", label="_context.Storage.Verify(x => x.GetConnection(), Times.Once)", span="89-89"];
m2_76 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="WorkerFacts.cs", label="_connection.Verify(x => x.Dispose(), Times.Once)", span="90-90"];
m2_77 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="WorkerFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", span="83-83"];
m2_159 [cluster="Unk.Perform", file="WorkerFacts.cs", label="Entry Unk.Perform", span=""];
m2_286 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="WorkerFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", span="316-316"];
m2_287 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="WorkerFacts.cs", label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData { LoadException = new JobLoadException(''asd'', new Exception()) })", span="319-320"];
m2_288 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="322-322"];
m2_289 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="WorkerFacts.cs", label="worker.Execute(_context.Object)", span="325-325"];
m2_290 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="WorkerFacts.cs", label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is FailedState)))", span="328-329"];
m2_291 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="WorkerFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", span="316-316"];
m2_100 [cluster="Unk.RemoveFromQueue", file="WorkerFacts.cs", label="Entry Unk.RemoveFromQueue", span=""];
m2_177 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="WorkerFacts.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0"];
m2_300 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="328-329"];
m2_34 [cluster="HangFire.Storage.IMonitoringApi.Servers()", file="WorkerFacts.cs", label="Entry HangFire.Storage.IMonitoringApi.Servers()", span="25-25"];
m2_42 [cluster="lambda expression", file="WorkerFacts.cs", label="HangFire.Web.Pages.ServersPage", span=""];
m2_46 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="52-52"];
m2_32 [cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="WorkerFacts.cs", label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4"];
m2_40 [cluster="Unk.Write", file="WorkerFacts.cs", label="Entry Unk.Write", span=""];
m2_43 [cluster="lambda expression", file="WorkerFacts.cs", label="x.ChangeState(It.IsAny<StateChangeContext>())", span="51-51"];
m2_44 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="51-51"];
m2_47 [cluster="lambda expression", file="WorkerFacts.cs", label="ctx.NewState", span="52-52"];
m2_48 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="52-52"];
m2_54 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="59-59"];
m2_55 [cluster="lambda expression", file="WorkerFacts.cs", label="new Worker(null, _performer.Object, _stateChanger.Object)", span="59-59"];
m2_56 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="59-59"];
m2_62 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="68-68"];
m2_63 [cluster="lambda expression", file="WorkerFacts.cs", label="new Worker(_queues, null, _stateChanger.Object)", span="68-68"];
m2_64 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="68-68"];
m2_69 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="77-77"];
m2_70 [cluster="lambda expression", file="WorkerFacts.cs", label="new Worker(_queues, _performer.Object, null)", span="77-77"];
m2_71 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="77-77"];
m2_81 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="89-89"];
m2_84 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="90-90"];
m2_82 [cluster="lambda expression", file="WorkerFacts.cs", label="x.GetConnection()", span="89-89"];
m2_83 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="89-89"];
m2_85 [cluster="lambda expression", file="WorkerFacts.cs", label="x.Dispose()", span="90-90"];
m2_86 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="90-90"];
m2_94 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="101-101"];
m2_97 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="104-104"];
m2_95 [cluster="lambda expression", file="WorkerFacts.cs", label="x.FetchNextJob(_queues, _context.CancellationTokenSource.Token)", span="101-101"];
m2_96 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="101-101"];
m2_98 [cluster="lambda expression", file="WorkerFacts.cs", label="x.RemoveFromQueue()", span="104-104"];
m2_99 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="104-104"];
m2_108 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="111-111"];
m2_112 [cluster="lambda expression", file="WorkerFacts.cs", label="worker.Execute(_context.Object)", span="117-117"];
m2_111 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="117-117"];
m2_114 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="119-119"];
m2_117 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="120-120"];
m2_109 [cluster="lambda expression", file="WorkerFacts.cs", label="x.ChangeState(It.IsAny<StateChangeContext>())", span="111-111"];
m2_110 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="111-111"];
m2_113 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="117-117"];
m2_115 [cluster="lambda expression", file="WorkerFacts.cs", label="x.RemoveFromQueue()", span="119-119"];
m2_116 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="119-119"];
m2_118 [cluster="lambda expression", file="WorkerFacts.cs", label="x.Requeue()", span="120-120"];
m2_119 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="120-120"];
m2_126 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="157-158"];
m2_127 [cluster="lambda expression", file="WorkerFacts.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is ProcessingState && (((ProcessingState) ctx.NewState).ServerId == _context.ServerId)))", span="157-158"];
m2_128 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="157-158"];
m2_129 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="157-158"];
m2_130 [cluster="lambda expression", file="WorkerFacts.cs", label="ctx.NewState is ProcessingState && (((ProcessingState) ctx.NewState).ServerId == _context.ServerId)", span="158-158"];
m2_131 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="157-158"];
m2_137 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="168-171"];
m2_138 [cluster="lambda expression", file="WorkerFacts.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is ProcessingState &&\r\n                ctx.ExpectedStates.ElementAt(0) == EnqueuedState.StateName &&\r\n                ctx.ExpectedStates.ElementAt(1) == ProcessingState.StateName))", span="168-171"];
m2_139 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="168-171"];
m2_140 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="168-171"];
m2_141 [cluster="lambda expression", file="WorkerFacts.cs", label="ctx.NewState is ProcessingState &&\r\n                ctx.ExpectedStates.ElementAt(0) == EnqueuedState.StateName &&\r\n                ctx.ExpectedStates.ElementAt(1) == ProcessingState.StateName", span="169-171"];
m2_142 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="168-171"];
m2_150 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="179-179"];
m2_156 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="188-188"];
m2_151 [cluster="lambda expression", file="WorkerFacts.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.NewState is ProcessingState))", span="179-179"];
m2_152 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="179-179"];
m2_153 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="179-179"];
m2_154 [cluster="lambda expression", file="WorkerFacts.cs", label="ctx.NewState is ProcessingState", span="179-179"];
m2_155 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="179-179"];
m2_157 [cluster="lambda expression", file="WorkerFacts.cs", label="x.Perform(It.IsAny<PerformContext>())", span="188-188"];
m2_158 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="188-188"];
m2_165 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="198-198"];
m2_166 [cluster="lambda expression", file="WorkerFacts.cs", label="x.Perform(It.IsNotNull<PerformContext>())", span="198-198"];
m2_167 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="198-198"];
m2_183 [cluster="lambda expression", file="WorkerFacts.cs", label="cts.Cancel()", span="209-209"];
m2_179 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="208-208"];
m2_182 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="209-209"];
m2_187 [cluster="lambda expression", file="WorkerFacts.cs", label="worker.Execute(_context.Object)", span="215-215"];
m2_186 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="215-215"];
m2_189 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="219-219"];
m2_195 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="221-221"];
m2_180 [cluster="lambda expression", file="WorkerFacts.cs", label="x.Perform(It.IsAny<PerformContext>())", span="208-208"];
m2_181 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="208-208"];
m2_184 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="209-209"];
m2_188 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="215-215"];
m2_190 [cluster="lambda expression", file="WorkerFacts.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.NewState is FailedState))", span="219-219"];
m2_191 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="219-219"];
m2_192 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="219-219"];
m2_193 [cluster="lambda expression", file="WorkerFacts.cs", label="ctx.NewState is FailedState", span="219-219"];
m2_194 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="219-219"];
m2_196 [cluster="lambda expression", file="WorkerFacts.cs", label="x.Requeue()", span="221-221"];
m2_197 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="221-221"];
m2_205 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="228-228"];
m2_208 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="238-238"];
m2_214 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="240-240"];
m2_206 [cluster="lambda expression", file="WorkerFacts.cs", label="x.Perform(It.IsAny<PerformContext>())", span="228-228"];
m2_207 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="228-228"];
m2_209 [cluster="lambda expression", file="WorkerFacts.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.NewState is FailedState))", span="238-238"];
m2_210 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="238-238"];
m2_211 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="238-238"];
m2_212 [cluster="lambda expression", file="WorkerFacts.cs", label="ctx.NewState is FailedState", span="238-238"];
m2_213 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="238-238"];
m2_215 [cluster="lambda expression", file="WorkerFacts.cs", label="x.Requeue()", span="240-240"];
m2_216 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="240-240"];
m2_225 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="247-247"];
m2_228 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="256-256"];
m2_234 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="258-258"];
m2_237 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="259-259"];
m2_226 [cluster="lambda expression", file="WorkerFacts.cs", label="x.Perform(It.IsAny<PerformContext>())", span="247-247"];
m2_227 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="247-247"];
m2_229 [cluster="lambda expression", file="WorkerFacts.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.NewState is FailedState))", span="256-256"];
m2_230 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="256-256"];
m2_231 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="256-256"];
m2_232 [cluster="lambda expression", file="WorkerFacts.cs", label="ctx.NewState is FailedState", span="256-256"];
m2_233 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="256-256"];
m2_235 [cluster="lambda expression", file="WorkerFacts.cs", label="x.RemoveFromQueue()", span="258-258"];
m2_236 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="258-258"];
m2_238 [cluster="lambda expression", file="WorkerFacts.cs", label="x.Requeue()", span="259-259"];
m2_239 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="259-259"];
m2_245 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="269-271"];
m2_246 [cluster="lambda expression", file="WorkerFacts.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is SucceededState &&\r\n                ctx.ExpectedStates.ElementAt(0) == ProcessingState.StateName))", span="269-271"];
m2_247 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="269-271"];
m2_248 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="269-271"];
m2_249 [cluster="lambda expression", file="WorkerFacts.cs", label="ctx.NewState is SucceededState &&\r\n                ctx.ExpectedStates.ElementAt(0) == ProcessingState.StateName", span="270-271"];
m2_250 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="269-271"];
m2_264 [cluster="lambda expression", file="WorkerFacts.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState &&\r\n                ((FailedState) ctx.NewState).Exception == exception))", span="289-292"];
m2_267 [cluster="lambda expression", file="WorkerFacts.cs", label="ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState &&\r\n                ((FailedState) ctx.NewState).Exception == exception", span="290-292"];
m2_260 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="280-280"];
m2_263 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="289-292"];
m2_261 [cluster="lambda expression", file="WorkerFacts.cs", label="x.Perform(It.IsAny<PerformContext>())", span="280-280"];
m2_262 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="280-280"];
m2_265 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="289-292"];
m2_266 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="289-292"];
m2_268 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="289-292"];
m2_277 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="301-301"];
m2_280 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="310-312"];
m2_278 [cluster="lambda expression", file="WorkerFacts.cs", label="x.Perform(It.IsAny<PerformContext>())", span="301-301"];
m2_279 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="301-301"];
m2_281 [cluster="lambda expression", file="WorkerFacts.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState))", span="310-312"];
m2_282 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="310-312"];
m2_283 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="310-312"];
m2_284 [cluster="lambda expression", file="WorkerFacts.cs", label="ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState", span="311-312"];
m2_285 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="310-312"];
m2_294 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="319-319"];
m2_297 [cluster="lambda expression", file="WorkerFacts.cs", label="Entry lambda expression", span="328-329"];
m2_295 [cluster="lambda expression", file="WorkerFacts.cs", label="x.GetJobData(JobId)", span="319-319"];
m2_296 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="319-319"];
m2_298 [cluster="lambda expression", file="WorkerFacts.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is FailedState))", span="328-329"];
m2_299 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="328-329"];
m2_301 [cluster="lambda expression", file="WorkerFacts.cs", label="ctx.NewState is FailedState", span="329-329"];
m2_302 [cluster="lambda expression", file="WorkerFacts.cs", label="Exit lambda expression", span="328-329"];
m2_57 [cluster="Worker.cstr", file="WorkerFacts.cs", label="Entry Worker.cstr", span=""];
m2_121 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="WorkerFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", span="151-151"];
m2_122 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="153-153"];
m2_123 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="WorkerFacts.cs", label="worker.Execute(_context.Object)", span="155-155"];
m2_124 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="WorkerFacts.cs", label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is ProcessingState && (((ProcessingState) ctx.NewState).ServerId == _context.ServerId))))", span="157-158"];
m2_125 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="WorkerFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", span="151-151"];
m2_80 [cluster="Unk.Verify", file="WorkerFacts.cs", label="Entry Unk.Verify", span=""];
m2_65 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", file="WorkerFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", span="74-74"];
m2_66 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", file="WorkerFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(_queues, _performer.Object, null))", span="76-77"];
m2_67 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", file="WorkerFacts.cs", label="Assert.Equal(''stateChanger'', exception.ParamName)", span="79-79"];
m2_68 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", file="WorkerFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", span="74-74"];
m2_37 [cluster="Unk.GetJobData", file="WorkerFacts.cs", label="Entry Unk.GetJobData", span=""];
m2_41 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Method()", file="WorkerFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Method()", span="337-337"];
m2_88 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="WorkerFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", span="94-94"];
m2_89 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="WorkerFacts.cs", label="var worker = CreateWorker()", span="96-96"];
m2_90 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="WorkerFacts.cs", label="worker.Execute(_context.Object)", span="98-98"];
m2_91 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="WorkerFacts.cs", label="_connection.Verify(\r\n                x => x.FetchNextJob(_queues, _context.CancellationTokenSource.Token),\r\n                Times.Once)", span="100-102"];
m2_92 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="WorkerFacts.cs", label="_fetchedJob.Verify(x => x.RemoveFromQueue())", span="104-104"];
m2_93 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="WorkerFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", span="94-94"];
m2_292 [cluster="Hangfire.Common.JobLoadException.JobLoadException(string, System.Exception)", file="WorkerFacts.cs", label="Entry Hangfire.Common.JobLoadException.JobLoadException(string, System.Exception)", span="31-31"];
m2_276 [cluster="Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", file="WorkerFacts.cs", label="Entry Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", span="22-22"];
m2_178 [cluster="Unk.Callback", file="WorkerFacts.cs", label="Entry Unk.Callback", span=""];
m2_305 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Method()", file="WorkerFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Method()", span="337-337"];
m2_79 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="WorkerFacts.cs", label="Entry Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", span="76-76"];
m2_306 [file="WorkerFacts.cs", label="Hangfire.Core.Tests.Server.WorkerFacts", span=""];
m2_307 [file="WorkerFacts.cs", label=worker, span=""];
m2_308 [file="WorkerFacts.cs", label=cts, span=""];
m2_309 [file="WorkerFacts.cs", label=worker, span=""];
m2_310 [file="WorkerFacts.cs", label=exception, span=""];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n2 -> n0  [color=blue, key=0, style=bold];
n4 -> n5  [key=0, style=solid];
n4 -> n16  [color=darkseagreen4, key=1, label=string, style=dashed];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [color=red, key=0, style=solid];
n5 -> n25  [key=2, style=dotted];
n16 -> n17  [color=red, key=0, style=solid];
n16 -> n28  [key=2, style=dotted];
n16 -> n19  [color=red, key=1, label=objectName, style=dashed];
n6 -> n24  [key=0, style=solid];
n7 -> n8  [color=red, key=0, style=solid];
n7 -> n26  [color=red, key=2, style=dotted];
n8 -> n9  [color=red, key=0, style=solid];
n9 -> n10  [color=red, key=0, style=solid];
n10 -> n11  [color=red, key=0, style=solid];
n10 -> n10  [color=red, key=1, label=aPropId, style=dashed];
n11 -> n12  [color=red, key=0, style=solid];
n11 -> n27  [color=red, key=2, style=dotted];
n12 -> n13  [color=red, key=0, style=solid];
n13 -> n14  [color=red, key=0, style=solid];
n13 -> n13  [color=red, key=1, label=aPropVar, style=dashed];
n13 -> n23  [color=red, key=3, label="Local variable System.Exception exception", style=bold];
n14 -> n15  [color=red, key=0, style=solid];
n14 -> n14  [color=red, key=3, label="Local variable int i", style=bold];
n15 -> n16  [color=red, key=0, style=solid];
n15 -> n15  [color=red, key=1, label=status, style=dashed];
n15 -> n19  [color=red, key=1, label=props, style=dashed];
n19 -> n20  [color=red, key=0, style=solid];
n19 -> n29  [color=red, key=2, style=dotted];
n19 -> n19  [color=red, key=1, label=props, style=dashed];
n19 -> n22  [color=red, key=1, label=props, style=dashed];
n17 -> n18  [color=red, key=0, style=solid];
n18 -> n19  [color=red, key=0, style=solid];
n20 -> n21  [color=red, key=0, style=solid];
n20 -> n22  [color=red, key=0, style=solid];
n29 -> n30  [key=0, style=solid];
n22 -> n23  [color=red, key=0, style=solid];
n21 -> n23  [color=red, key=0, style=solid];
n23 -> n24  [color=red, key=0, style=solid];
n24 -> n4  [color=blue, key=0, style=bold];
n30 -> n29  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_3  [color=darkseagreen4, key=1, label="HangFire.Storage.IAtomicWriteTransaction", style=dashed];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=0, style=solid];
m0_3 -> m0_4  [key=0, style=solid];
m0_2 -> m0_4  [key=0, style=solid];
m0_2 -> m0_5  [key=2, style=dotted];
m0_4 -> m0_0  [color=blue, key=0, style=bold];
m0_6 -> m0_3  [color=darkseagreen4, key=1, label="HangFire.Common.States.StateApplyingContext", style=dashed];
m1_8 -> m1_9  [key=0, style=solid];
m1_9 -> m1_8  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_0  [color=blue, key=0, style=bold];
m1_10 -> m1_11  [key=0, style=solid];
m1_11 -> m1_10  [color=blue, key=0, style=bold];
m1_4 -> m1_5  [key=0, style=solid];
m1_5 -> m1_4  [color=blue, key=0, style=bold];
m1_2 -> m1_3  [key=0, style=solid];
m1_3 -> m1_2  [color=blue, key=0, style=bold];
m1_12 -> m1_13  [key=0, style=solid];
m1_13 -> m1_12  [color=blue, key=0, style=bold];
m1_6 -> m1_7  [key=0, style=solid];
m1_7 -> m1_6  [color=blue, key=0, style=bold];
m2_36 -> m2_34  [color=blue, key=0, style=bold];
m2_132 -> m2_133  [key=0, style=solid];
m2_133 -> m2_134  [key=0, style=solid];
m2_133 -> m2_78  [key=2, style=dotted];
m2_134 -> m2_135  [key=0, style=solid];
m2_134 -> m2_79  [key=2, style=dotted];
m2_135 -> m2_136  [key=0, style=solid];
m2_135 -> m2_80  [key=2, style=dotted];
m2_135 -> m2_137  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_136 -> m2_132  [color=blue, key=0, style=bold];
m2_13 -> m2_14  [key=0, style=solid];
m2_13 -> m2_31  [key=2, style=dotted];
m2_168 -> m2_169  [key=0, style=solid];
m2_169 -> m2_170  [key=0, style=solid];
m2_169 -> m2_177  [key=2, style=dotted];
m2_169 -> m2_171  [color=darkseagreen4, key=1, label=cts, style=dashed];
m2_169 -> m2_183  [color=darkseagreen4, key=1, label=cts, style=dashed];
m2_170 -> m2_171  [key=0, style=solid];
m2_171 -> m2_172  [key=0, style=solid];
m2_171 -> m2_16  [key=2, style=dotted];
m2_171 -> m2_178  [key=2, style=dotted];
m2_171 -> m2_22  [key=2, style=dotted];
m2_171 -> m2_179  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_171 -> m2_182  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_172 -> m2_173  [key=0, style=solid];
m2_172 -> m2_78  [key=2, style=dotted];
m2_172 -> m2_187  [color=darkseagreen4, key=1, label=worker, style=dashed];
m2_173 -> m2_174  [key=0, style=solid];
m2_173 -> m2_22  [key=2, style=dotted];
m2_173 -> m2_186  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_174 -> m2_175  [key=0, style=solid];
m2_174 -> m2_80  [key=2, style=dotted];
m2_174 -> m2_189  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_175 -> m2_176  [key=0, style=solid];
m2_175 -> m2_80  [key=2, style=dotted];
m2_175 -> m2_195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_176 -> m2_168  [color=blue, key=0, style=bold];
m2_251 -> m2_252  [key=0, style=solid];
m2_252 -> m2_253  [key=0, style=solid];
m2_252 -> m2_258  [key=2, style=dotted];
m2_252 -> m2_256  [color=darkseagreen4, key=1, label=exception, style=dashed];
m2_252 -> m2_264  [color=darkseagreen4, key=1, label=exception, style=dashed];
m2_252 -> m2_267  [color=darkseagreen4, key=1, label=exception, style=dashed];
m2_253 -> m2_254  [key=0, style=solid];
m2_253 -> m2_16  [key=2, style=dotted];
m2_253 -> m2_259  [key=2, style=dotted];
m2_253 -> m2_260  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_256 -> m2_257  [key=0, style=solid];
m2_256 -> m2_80  [key=2, style=dotted];
m2_256 -> m2_263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_254 -> m2_255  [key=0, style=solid];
m2_254 -> m2_78  [key=2, style=dotted];
m2_255 -> m2_256  [key=0, style=solid];
m2_255 -> m2_79  [key=2, style=dotted];
m2_257 -> m2_251  [color=blue, key=0, style=bold];
m2_58 -> m2_59  [key=0, style=solid];
m2_59 -> m2_60  [key=0, style=solid];
m2_59 -> m2_22  [key=2, style=dotted];
m2_59 -> m2_62  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_60 -> m2_61  [key=0, style=solid];
m2_60 -> m2_53  [key=2, style=dotted];
m2_61 -> m2_58  [color=blue, key=0, style=bold];
m2_240 -> m2_241  [key=0, style=solid];
m2_241 -> m2_242  [key=0, style=solid];
m2_241 -> m2_78  [key=2, style=dotted];
m2_242 -> m2_243  [key=0, style=solid];
m2_242 -> m2_79  [key=2, style=dotted];
m2_243 -> m2_244  [key=0, style=solid];
m2_243 -> m2_80  [key=2, style=dotted];
m2_243 -> m2_245  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_244 -> m2_240  [color=blue, key=0, style=bold];
m2_38 -> m2_39  [key=0, style=solid];
m2_144 -> m2_145  [key=0, style=solid];
m2_145 -> m2_146  [key=0, style=solid];
m2_145 -> m2_16  [key=2, style=dotted];
m2_145 -> m2_22  [key=2, style=dotted];
m2_145 -> m2_150  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_146 -> m2_147  [key=0, style=solid];
m2_146 -> m2_78  [key=2, style=dotted];
m2_147 -> m2_148  [key=0, style=solid];
m2_147 -> m2_79  [key=2, style=dotted];
m2_148 -> m2_149  [key=0, style=solid];
m2_148 -> m2_80  [key=2, style=dotted];
m2_148 -> m2_156  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_149 -> m2_144  [color=blue, key=0, style=bold];
m2_160 -> m2_161  [key=0, style=solid];
m2_161 -> m2_162  [key=0, style=solid];
m2_161 -> m2_78  [key=2, style=dotted];
m2_162 -> m2_163  [key=0, style=solid];
m2_162 -> m2_79  [key=2, style=dotted];
m2_163 -> m2_164  [key=0, style=solid];
m2_163 -> m2_80  [key=2, style=dotted];
m2_163 -> m2_165  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_164 -> m2_160  [color=blue, key=0, style=bold];
m2_217 -> m2_218  [key=0, style=solid];
m2_218 -> m2_219  [key=0, style=solid];
m2_218 -> m2_16  [key=2, style=dotted];
m2_218 -> m2_22  [key=2, style=dotted];
m2_218 -> m2_225  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_219 -> m2_220  [key=0, style=solid];
m2_219 -> m2_78  [key=2, style=dotted];
m2_220 -> m2_221  [key=0, style=solid];
m2_220 -> m2_79  [key=2, style=dotted];
m2_221 -> m2_222  [key=0, style=solid];
m2_221 -> m2_80  [key=2, style=dotted];
m2_221 -> m2_228  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_222 -> m2_223  [key=0, style=solid];
m2_222 -> m2_80  [key=2, style=dotted];
m2_222 -> m2_234  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_223 -> m2_224  [key=0, style=solid];
m2_223 -> m2_80  [key=2, style=dotted];
m2_223 -> m2_237  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_224 -> m2_217  [color=blue, key=0, style=bold];
m2_31 -> m2_32  [key=0, style=solid];
m2_31 -> m2_22  [key=2, style=dotted];
m2_31 -> m2_33  [key=2, style=dotted];
m2_22 -> m2_28  [key=0, style=solid];
m2_22 -> m2_23  [key=0, style=solid];
m2_101 -> m2_102  [key=0, style=solid];
m2_102 -> m2_103  [key=0, style=solid];
m2_102 -> m2_16  [key=2, style=dotted];
m2_102 -> m2_22  [key=2, style=dotted];
m2_102 -> m2_108  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_103 -> m2_104  [key=0, style=solid];
m2_103 -> m2_78  [key=2, style=dotted];
m2_103 -> m2_112  [color=darkseagreen4, key=1, label=worker, style=dashed];
m2_104 -> m2_105  [key=0, style=solid];
m2_104 -> m2_22  [key=2, style=dotted];
m2_104 -> m2_111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_105 -> m2_106  [key=0, style=solid];
m2_105 -> m2_80  [key=2, style=dotted];
m2_105 -> m2_114  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_106 -> m2_107  [key=0, style=solid];
m2_106 -> m2_80  [key=2, style=dotted];
m2_106 -> m2_117  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_107 -> m2_101  [color=blue, key=0, style=bold];
m2_78 -> m2_303  [key=0, style=solid];
m2_303 -> m2_304  [key=0, style=solid];
m2_303 -> m2_57  [key=2, style=dotted];
m2_304 -> m2_78  [color=blue, key=0, style=bold];
m2_35 -> m2_36  [key=0, style=solid];
m2_35 -> m2_37  [key=2, style=dotted];
m2_18 -> m2_19  [key=0, style=solid];
m2_18 -> m2_41  [key=2, style=dotted];
m2_18 -> m2_36  [key=2, style=dotted];
m2_269 -> m2_270  [key=0, style=solid];
m2_270 -> m2_271  [key=0, style=solid];
m2_270 -> m2_258  [key=2, style=dotted];
m2_271 -> m2_272  [key=0, style=solid];
m2_271 -> m2_16  [key=2, style=dotted];
m2_271 -> m2_276  [key=2, style=dotted];
m2_271 -> m2_259  [key=2, style=dotted];
m2_271 -> m2_277  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_272 -> m2_273  [key=0, style=solid];
m2_272 -> m2_78  [key=2, style=dotted];
m2_273 -> m2_274  [key=0, style=solid];
m2_273 -> m2_79  [key=2, style=dotted];
m2_274 -> m2_275  [key=0, style=solid];
m2_274 -> m2_80  [key=2, style=dotted];
m2_274 -> m2_280  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_275 -> m2_269  [color=blue, key=0, style=bold];
m2_198 -> m2_199  [key=0, style=solid];
m2_199 -> m2_200  [key=0, style=solid];
m2_199 -> m2_16  [key=2, style=dotted];
m2_199 -> m2_22  [key=2, style=dotted];
m2_199 -> m2_205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_200 -> m2_201  [key=0, style=solid];
m2_200 -> m2_78  [key=2, style=dotted];
m2_201 -> m2_202  [key=0, style=solid];
m2_201 -> m2_79  [key=2, style=dotted];
m2_202 -> m2_203  [key=0, style=solid];
m2_202 -> m2_80  [key=2, style=dotted];
m2_202 -> m2_208  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_203 -> m2_204  [key=0, style=solid];
m2_203 -> m2_80  [key=2, style=dotted];
m2_203 -> m2_214  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_204 -> m2_198  [color=blue, key=0, style=bold];
m2_26 -> m2_27  [key=0, style=solid];
m2_26 -> m2_36  [key=2, style=dotted];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_13  [key=2, style=dotted];
m2_1 -> m2_31  [key=2, style=dotted];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_32  [key=2, style=dotted];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_14  [key=2, style=dotted];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_15  [key=2, style=dotted];
m2_4 -> m2_33  [key=2, style=dotted];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_16  [key=2, style=dotted];
m2_5 -> m2_17  [key=2, style=dotted];
m2_5 -> m2_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_5 -> m2_10  [color=green, key=1, label=servers, style=dashed];
m2_5 -> m2_34  [key=2, style=dotted];
m2_5 -> m2_7  [color=darkseagreen4, key=1, label=servers, style=dashed];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_18  [key=2, style=dotted];
m2_6 -> m2_31  [key=2, style=dotted];
m2_7 -> m2_8  [key=0, style=solid];
m2_7 -> m2_16  [key=2, style=dotted];
m2_7 -> m2_17  [key=2, style=dotted];
m2_7 -> m2_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_7 -> m2_9  [key=0, style=solid];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_16  [key=2, style=dotted];
m2_8 -> m2_17  [key=2, style=dotted];
m2_8 -> m2_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_8 -> m2_31  [key=2, style=dotted];
m2_9 -> m2_10  [color=green, key=0, style=solid];
m2_9 -> m2_16  [key=2, style=dotted];
m2_9 -> m2_19  [key=2, style=dotted];
m2_9 -> m2_20  [key=2, style=dotted];
m2_9 -> m2_17  [key=2, style=dotted];
m2_9 -> m2_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_9 -> m2_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_9 -> m2_31  [key=2, style=dotted];
m2_10 -> m2_11  [color=green, key=0, style=solid];
m2_10 -> m2_21  [key=2, style=dotted];
m2_10 -> m2_29  [color=green, key=0, style=solid];
m2_10 -> m2_12  [color=green, key=1, label=server, style=dashed];
m2_10 -> m2_14  [color=green, key=1, label=server, style=dashed];
m2_10 -> m2_16  [color=green, key=1, label=server, style=dashed];
m2_10 -> m2_18  [color=green, key=1, label=server, style=dashed];
m2_10 -> m2_20  [color=green, key=1, label=server, style=dashed];
m2_10 -> m2_22  [color=green, key=1, label=server, style=dashed];
m2_10 -> m2_24  [color=green, key=1, label=server, style=dashed];
m2_10 -> m2_26  [color=green, key=1, label=server, style=dashed];
m2_11 -> m2_12  [color=green, key=0, style=solid];
m2_11 -> m2_16  [key=2, style=dotted];
m2_11 -> m2_22  [key=2, style=dotted];
m2_11 -> m2_42  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_11 -> m2_46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_11 -> m2_31  [color=green, key=2, style=dotted];
m2_12 -> m2_0  [color=blue, key=0, style=bold];
m2_12 -> m2_13  [color=green, key=0, style=solid];
m2_12 -> m2_35  [color=green, key=2, style=dotted];
m2_12 -> m2_36  [color=green, key=2, style=dotted];
m2_28 -> m2_10  [color=green, key=0, style=solid];
m2_28 -> m2_31  [key=2, style=dotted];
m2_28 -> m2_29  [key=0, style=solid];
m2_29 -> m2_30  [key=0, style=solid];
m2_29 -> m2_31  [key=2, style=dotted];
m2_29 -> m2_27  [color=blue, key=0, style=bold];
m2_14 -> m2_15  [key=0, style=solid];
m2_14 -> m2_36  [key=2, style=dotted];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> m2_37  [key=2, style=dotted];
m2_16 -> m2_38  [key=2, style=dotted];
m2_16 -> m2_39  [key=2, style=dotted];
m2_16 -> m2_40  [key=2, style=dotted];
m2_20 -> m2_21  [key=0, style=solid];
m2_20 -> m2_36  [key=2, style=dotted];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_41  [key=2, style=dotted];
m2_24 -> m2_36  [key=2, style=dotted];
m2_24 -> m2_26  [key=2, style=dotted];
m2_27 -> m2_28  [key=0, style=solid];
m2_27 -> m2_31  [key=2, style=dotted];
m2_15 -> m2_16  [key=0, style=solid];
m2_15 -> m2_31  [key=2, style=dotted];
m2_17 -> m2_18  [key=0, style=solid];
m2_17 -> m2_31  [key=2, style=dotted];
m2_19 -> m2_20  [key=0, style=solid];
m2_19 -> m2_31  [key=2, style=dotted];
m2_21 -> m2_22  [key=0, style=solid];
m2_21 -> m2_31  [key=2, style=dotted];
m2_23 -> m2_24  [key=0, style=solid];
m2_23 -> m2_31  [key=2, style=dotted];
m2_25 -> m2_26  [key=0, style=solid];
m2_25 -> m2_31  [key=2, style=dotted];
m2_25 -> m2_23  [color=blue, key=0, style=bold];
m2_30 -> m2_0  [color=blue, key=0, style=bold];
m2_30 -> m2_31  [key=0, style=solid];
m2_39 -> m2_40  [key=0, style=solid];
m2_39 -> m2_41  [key=2, style=dotted];
m2_49 -> m2_50  [key=0, style=solid];
m2_50 -> m2_51  [key=0, style=solid];
m2_50 -> m2_22  [key=2, style=dotted];
m2_50 -> m2_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_51 -> m2_52  [key=0, style=solid];
m2_51 -> m2_53  [key=2, style=dotted];
m2_52 -> m2_49  [color=blue, key=0, style=bold];
m2_72 -> m2_73  [key=0, style=solid];
m2_73 -> m2_74  [key=0, style=solid];
m2_73 -> m2_78  [key=2, style=dotted];
m2_74 -> m2_75  [key=0, style=solid];
m2_74 -> m2_79  [key=2, style=dotted];
m2_75 -> m2_76  [key=0, style=solid];
m2_75 -> m2_80  [key=2, style=dotted];
m2_75 -> m2_81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_76 -> m2_77  [key=0, style=solid];
m2_76 -> m2_80  [key=2, style=dotted];
m2_76 -> m2_84  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_77 -> m2_72  [color=blue, key=0, style=bold];
m2_286 -> m2_287  [key=0, style=solid];
m2_287 -> m2_288  [key=0, style=solid];
m2_287 -> m2_16  [key=2, style=dotted];
m2_287 -> m2_19  [key=2, style=dotted];
m2_287 -> m2_292  [key=2, style=dotted];
m2_287 -> m2_293  [key=2, style=dotted];
m2_287 -> m2_17  [key=2, style=dotted];
m2_287 -> m2_294  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_288 -> m2_289  [key=0, style=solid];
m2_288 -> m2_78  [key=2, style=dotted];
m2_289 -> m2_290  [key=0, style=solid];
m2_289 -> m2_79  [key=2, style=dotted];
m2_290 -> m2_291  [key=0, style=solid];
m2_290 -> m2_80  [key=2, style=dotted];
m2_290 -> m2_297  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_291 -> m2_286  [color=blue, key=0, style=bold];
m2_300 -> m2_301  [key=0, style=solid];
m2_34 -> m2_35  [key=0, style=solid];
m2_42 -> m2_43  [key=0, style=solid];
m2_42 -> m2_11  [color=green, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_12  [color=green, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_9  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_28  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_29  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_14  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_16  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_18  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_20  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_24  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_26  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_1  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_2  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_6  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_8  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_13  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_15  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_17  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_19  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_21  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_23  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_25  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_42 -> m2_27  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m2_46 -> m2_47  [key=0, style=solid];
m2_32 -> m2_30  [color=blue, key=0, style=bold];
m2_40 -> m2_38  [color=blue, key=0, style=bold];
m2_43 -> m2_44  [key=0, style=solid];
m2_43 -> m2_22  [key=2, style=dotted];
m2_43 -> m2_45  [key=2, style=dotted];
m2_44 -> m2_42  [color=blue, key=0, style=bold];
m2_47 -> m2_48  [key=0, style=solid];
m2_48 -> m2_46  [color=blue, key=0, style=bold];
m2_54 -> m2_55  [key=0, style=solid];
m2_55 -> m2_56  [key=0, style=solid];
m2_55 -> m2_57  [key=2, style=dotted];
m2_56 -> m2_54  [color=blue, key=0, style=bold];
m2_62 -> m2_63  [key=0, style=solid];
m2_63 -> m2_64  [key=0, style=solid];
m2_63 -> m2_57  [key=2, style=dotted];
m2_64 -> m2_62  [color=blue, key=0, style=bold];
m2_69 -> m2_70  [key=0, style=solid];
m2_70 -> m2_71  [key=0, style=solid];
m2_70 -> m2_57  [key=2, style=dotted];
m2_71 -> m2_69  [color=blue, key=0, style=bold];
m2_81 -> m2_82  [key=0, style=solid];
m2_84 -> m2_85  [key=0, style=solid];
m2_82 -> m2_83  [key=0, style=solid];
m2_82 -> m2_26  [key=2, style=dotted];
m2_83 -> m2_81  [color=blue, key=0, style=bold];
m2_85 -> m2_86  [key=0, style=solid];
m2_85 -> m2_87  [key=2, style=dotted];
m2_86 -> m2_84  [color=blue, key=0, style=bold];
m2_94 -> m2_95  [key=0, style=solid];
m2_97 -> m2_98  [key=0, style=solid];
m2_95 -> m2_96  [key=0, style=solid];
m2_95 -> m2_33  [key=2, style=dotted];
m2_96 -> m2_94  [color=blue, key=0, style=bold];
m2_98 -> m2_99  [key=0, style=solid];
m2_98 -> m2_100  [key=2, style=dotted];
m2_99 -> m2_97  [color=blue, key=0, style=bold];
m2_108 -> m2_109  [key=0, style=solid];
m2_112 -> m2_113  [key=0, style=solid];
m2_112 -> m2_79  [key=2, style=dotted];
m2_111 -> m2_112  [key=0, style=solid];
m2_114 -> m2_115  [key=0, style=solid];
m2_117 -> m2_118  [key=0, style=solid];
m2_109 -> m2_110  [key=0, style=solid];
m2_109 -> m2_22  [key=2, style=dotted];
m2_109 -> m2_45  [key=2, style=dotted];
m2_110 -> m2_108  [color=blue, key=0, style=bold];
m2_113 -> m2_111  [color=blue, key=0, style=bold];
m2_115 -> m2_116  [key=0, style=solid];
m2_115 -> m2_100  [key=2, style=dotted];
m2_116 -> m2_114  [color=blue, key=0, style=bold];
m2_118 -> m2_119  [key=0, style=solid];
m2_118 -> m2_120  [key=2, style=dotted];
m2_119 -> m2_117  [color=blue, key=0, style=bold];
m2_126 -> m2_127  [key=0, style=solid];
m2_127 -> m2_128  [key=0, style=solid];
m2_127 -> m2_22  [key=2, style=dotted];
m2_127 -> m2_45  [key=2, style=dotted];
m2_127 -> m2_129  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_128 -> m2_126  [color=blue, key=0, style=bold];
m2_129 -> m2_130  [key=0, style=solid];
m2_130 -> m2_131  [key=0, style=solid];
m2_131 -> m2_129  [color=blue, key=0, style=bold];
m2_137 -> m2_138  [key=0, style=solid];
m2_138 -> m2_139  [key=0, style=solid];
m2_138 -> m2_22  [key=2, style=dotted];
m2_138 -> m2_45  [key=2, style=dotted];
m2_138 -> m2_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_139 -> m2_137  [color=blue, key=0, style=bold];
m2_140 -> m2_141  [key=0, style=solid];
m2_141 -> m2_142  [key=0, style=solid];
m2_141 -> m2_143  [key=2, style=dotted];
m2_142 -> m2_140  [color=blue, key=0, style=bold];
m2_150 -> m2_151  [key=0, style=solid];
m2_156 -> m2_157  [key=0, style=solid];
m2_151 -> m2_152  [key=0, style=solid];
m2_151 -> m2_22  [key=2, style=dotted];
m2_151 -> m2_45  [key=2, style=dotted];
m2_151 -> m2_153  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_152 -> m2_150  [color=blue, key=0, style=bold];
m2_153 -> m2_154  [key=0, style=solid];
m2_154 -> m2_155  [key=0, style=solid];
m2_155 -> m2_153  [color=blue, key=0, style=bold];
m2_157 -> m2_158  [key=0, style=solid];
m2_157 -> m2_22  [key=2, style=dotted];
m2_157 -> m2_159  [key=2, style=dotted];
m2_158 -> m2_156  [color=blue, key=0, style=bold];
m2_165 -> m2_166  [key=0, style=solid];
m2_166 -> m2_167  [key=0, style=solid];
m2_166 -> m2_22  [key=2, style=dotted];
m2_166 -> m2_159  [key=2, style=dotted];
m2_167 -> m2_165  [color=blue, key=0, style=bold];
m2_183 -> m2_184  [key=0, style=solid];
m2_183 -> m2_185  [key=2, style=dotted];
m2_179 -> m2_180  [key=0, style=solid];
m2_182 -> m2_183  [key=0, style=solid];
m2_187 -> m2_188  [key=0, style=solid];
m2_187 -> m2_79  [key=2, style=dotted];
m2_186 -> m2_187  [key=0, style=solid];
m2_189 -> m2_190  [key=0, style=solid];
m2_195 -> m2_196  [key=0, style=solid];
m2_180 -> m2_181  [key=0, style=solid];
m2_180 -> m2_22  [key=2, style=dotted];
m2_180 -> m2_159  [key=2, style=dotted];
m2_181 -> m2_179  [color=blue, key=0, style=bold];
m2_184 -> m2_182  [color=blue, key=0, style=bold];
m2_188 -> m2_186  [color=blue, key=0, style=bold];
m2_190 -> m2_191  [key=0, style=solid];
m2_190 -> m2_22  [key=2, style=dotted];
m2_190 -> m2_45  [key=2, style=dotted];
m2_190 -> m2_192  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_191 -> m2_189  [color=blue, key=0, style=bold];
m2_192 -> m2_193  [key=0, style=solid];
m2_193 -> m2_194  [key=0, style=solid];
m2_194 -> m2_192  [color=blue, key=0, style=bold];
m2_196 -> m2_197  [key=0, style=solid];
m2_196 -> m2_120  [key=2, style=dotted];
m2_197 -> m2_195  [color=blue, key=0, style=bold];
m2_205 -> m2_206  [key=0, style=solid];
m2_208 -> m2_209  [key=0, style=solid];
m2_214 -> m2_215  [key=0, style=solid];
m2_206 -> m2_207  [key=0, style=solid];
m2_206 -> m2_22  [key=2, style=dotted];
m2_206 -> m2_159  [key=2, style=dotted];
m2_207 -> m2_205  [color=blue, key=0, style=bold];
m2_209 -> m2_210  [key=0, style=solid];
m2_209 -> m2_22  [key=2, style=dotted];
m2_209 -> m2_45  [key=2, style=dotted];
m2_209 -> m2_211  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_210 -> m2_208  [color=blue, key=0, style=bold];
m2_211 -> m2_212  [key=0, style=solid];
m2_212 -> m2_213  [key=0, style=solid];
m2_213 -> m2_211  [color=blue, key=0, style=bold];
m2_215 -> m2_216  [key=0, style=solid];
m2_215 -> m2_120  [key=2, style=dotted];
m2_216 -> m2_214  [color=blue, key=0, style=bold];
m2_225 -> m2_226  [key=0, style=solid];
m2_228 -> m2_229  [key=0, style=solid];
m2_234 -> m2_235  [key=0, style=solid];
m2_237 -> m2_238  [key=0, style=solid];
m2_226 -> m2_227  [key=0, style=solid];
m2_226 -> m2_22  [key=2, style=dotted];
m2_226 -> m2_159  [key=2, style=dotted];
m2_227 -> m2_225  [color=blue, key=0, style=bold];
m2_229 -> m2_230  [key=0, style=solid];
m2_229 -> m2_22  [key=2, style=dotted];
m2_229 -> m2_45  [key=2, style=dotted];
m2_229 -> m2_231  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_230 -> m2_228  [color=blue, key=0, style=bold];
m2_231 -> m2_232  [key=0, style=solid];
m2_232 -> m2_233  [key=0, style=solid];
m2_233 -> m2_231  [color=blue, key=0, style=bold];
m2_235 -> m2_236  [key=0, style=solid];
m2_235 -> m2_100  [key=2, style=dotted];
m2_236 -> m2_234  [color=blue, key=0, style=bold];
m2_238 -> m2_239  [key=0, style=solid];
m2_238 -> m2_120  [key=2, style=dotted];
m2_239 -> m2_237  [color=blue, key=0, style=bold];
m2_245 -> m2_246  [key=0, style=solid];
m2_246 -> m2_247  [key=0, style=solid];
m2_246 -> m2_22  [key=2, style=dotted];
m2_246 -> m2_45  [key=2, style=dotted];
m2_246 -> m2_248  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_247 -> m2_245  [color=blue, key=0, style=bold];
m2_248 -> m2_249  [key=0, style=solid];
m2_249 -> m2_250  [key=0, style=solid];
m2_249 -> m2_143  [key=2, style=dotted];
m2_250 -> m2_248  [color=blue, key=0, style=bold];
m2_264 -> m2_265  [key=0, style=solid];
m2_264 -> m2_22  [key=2, style=dotted];
m2_264 -> m2_45  [key=2, style=dotted];
m2_264 -> m2_266  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_267 -> m2_268  [key=0, style=solid];
m2_260 -> m2_261  [key=0, style=solid];
m2_263 -> m2_264  [key=0, style=solid];
m2_261 -> m2_262  [key=0, style=solid];
m2_261 -> m2_22  [key=2, style=dotted];
m2_261 -> m2_159  [key=2, style=dotted];
m2_262 -> m2_260  [color=blue, key=0, style=bold];
m2_265 -> m2_263  [color=blue, key=0, style=bold];
m2_266 -> m2_267  [key=0, style=solid];
m2_268 -> m2_266  [color=blue, key=0, style=bold];
m2_277 -> m2_278  [key=0, style=solid];
m2_280 -> m2_281  [key=0, style=solid];
m2_278 -> m2_279  [key=0, style=solid];
m2_278 -> m2_22  [key=2, style=dotted];
m2_278 -> m2_159  [key=2, style=dotted];
m2_279 -> m2_277  [color=blue, key=0, style=bold];
m2_281 -> m2_282  [key=0, style=solid];
m2_281 -> m2_22  [key=2, style=dotted];
m2_281 -> m2_45  [key=2, style=dotted];
m2_281 -> m2_283  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_282 -> m2_280  [color=blue, key=0, style=bold];
m2_283 -> m2_284  [key=0, style=solid];
m2_284 -> m2_285  [key=0, style=solid];
m2_285 -> m2_283  [color=blue, key=0, style=bold];
m2_294 -> m2_295  [key=0, style=solid];
m2_297 -> m2_298  [key=0, style=solid];
m2_295 -> m2_296  [key=0, style=solid];
m2_295 -> m2_37  [key=2, style=dotted];
m2_296 -> m2_294  [color=blue, key=0, style=bold];
m2_298 -> m2_299  [key=0, style=solid];
m2_298 -> m2_22  [key=2, style=dotted];
m2_298 -> m2_45  [key=2, style=dotted];
m2_298 -> m2_300  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_299 -> m2_297  [color=blue, key=0, style=bold];
m2_301 -> m2_302  [key=0, style=solid];
m2_302 -> m2_300  [color=blue, key=0, style=bold];
m2_121 -> m2_122  [key=0, style=solid];
m2_122 -> m2_123  [key=0, style=solid];
m2_122 -> m2_78  [key=2, style=dotted];
m2_123 -> m2_124  [key=0, style=solid];
m2_123 -> m2_79  [key=2, style=dotted];
m2_124 -> m2_125  [key=0, style=solid];
m2_124 -> m2_80  [key=2, style=dotted];
m2_124 -> m2_126  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_125 -> m2_121  [color=blue, key=0, style=bold];
m2_65 -> m2_66  [key=0, style=solid];
m2_66 -> m2_67  [key=0, style=solid];
m2_66 -> m2_22  [key=2, style=dotted];
m2_66 -> m2_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_67 -> m2_68  [key=0, style=solid];
m2_67 -> m2_53  [key=2, style=dotted];
m2_68 -> m2_65  [color=blue, key=0, style=bold];
m2_41 -> m2_305  [key=0, style=solid];
m2_88 -> m2_89  [key=0, style=solid];
m2_89 -> m2_90  [key=0, style=solid];
m2_89 -> m2_78  [key=2, style=dotted];
m2_90 -> m2_91  [key=0, style=solid];
m2_90 -> m2_79  [key=2, style=dotted];
m2_91 -> m2_92  [key=0, style=solid];
m2_91 -> m2_80  [key=2, style=dotted];
m2_91 -> m2_94  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_92 -> m2_93  [key=0, style=solid];
m2_92 -> m2_80  [key=2, style=dotted];
m2_92 -> m2_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_93 -> m2_88  [color=blue, key=0, style=bold];
m2_305 -> m2_41  [color=blue, key=0, style=bold];
m2_306 -> m2_1  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_2  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_3  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_4  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_5  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_6  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_7  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_8  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_31  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_9  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_10  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_11  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_50  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_55  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_59  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_63  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_66  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_70  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_73  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_74  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_75  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_76  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_89  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_90  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_91  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_95  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_92  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_102  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_103  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_104  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_112  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_105  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_106  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_122  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_123  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_124  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_127  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_130  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_133  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_134  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_135  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_145  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_146  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_147  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_148  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_161  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_162  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_163  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_170  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_171  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_172  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_173  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_187  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_174  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_175  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_199  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_200  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_201  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_202  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_203  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_218  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_219  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_220  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_221  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_222  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_223  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_241  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_242  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_243  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_253  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_254  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_255  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_256  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_271  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_272  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_273  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_274  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_287  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_288  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_289  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_290  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_306 -> m2_303  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m2_307 -> m2_112  [color=darkseagreen4, key=1, label=worker, style=dashed];
m2_308 -> m2_183  [color=darkseagreen4, key=1, label=cts, style=dashed];
m2_309 -> m2_187  [color=darkseagreen4, key=1, label=worker, style=dashed];
m2_310 -> m2_264  [color=darkseagreen4, key=1, label=exception, style=dashed];
m2_310 -> m2_267  [color=darkseagreen4, key=1, label=exception, style=dashed];
}
