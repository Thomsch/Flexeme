digraph  {
n0 [cluster="HangFire.Common.States.JobStateHandler.Apply(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", label="Entry HangFire.Common.States.JobStateHandler.Apply(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", span="22-22"];
n1 [cluster="HangFire.Common.States.JobStateHandler.Apply(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", label="Exit HangFire.Common.States.JobStateHandler.Apply(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", span="22-22"];
n2 [cluster="HangFire.Common.States.JobStateHandler.Unapply(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", label="Entry HangFire.Common.States.JobStateHandler.Unapply(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", span="27-27"];
n3 [cluster="HangFire.Common.States.JobStateHandler.Unapply(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", label="Exit HangFire.Common.States.JobStateHandler.Unapply(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", span="27-27"];
m0_56 [cluster="HangFire.Web.RazorPage.Write(object)", file="ClientFilters.feature.cs", label="Entry HangFire.Web.RazorPage.Write(object)", span="76-76"];
m0_60 [cluster="HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.JobMethod)", file="ClientFilters.feature.cs", label="Entry HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.JobMethod)", span="34-34"];
m0_58 [cluster="HangFire.Web.HtmlHelper.QueueLabel(HangFire.Common.JobMethod)", file="ClientFilters.feature.cs", label="Entry HangFire.Web.HtmlHelper.QueueLabel(HangFire.Common.JobMethod)", span="90-90"];
m0_49 [cluster="HangFire.Web.Pager.Pager(int, int, long)", file="ClientFilters.feature.cs", label="Entry HangFire.Web.Pager.Pager(int, int, long)", span="29-29"];
m0_2 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="ClientFilters.feature.cs", label="Layout = new LayoutPage { Title = ''Processing Jobs'' }", span="62-62"];
m0_3 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="ClientFilters.feature.cs", label="int from, perPage", span="64-64"];
m0_45 [cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="ClientFilters.feature.cs", label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="69-69"];
m0_47 [cluster="Unk.TryParse", file="ClientFilters.feature.cs", label="Entry Unk.TryParse", span=""];
m0_0 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="ClientFilters.feature.cs", label="Entry HangFire.Web.Pages.ProcessingJobsPage.Execute()", span="47-47"];
m0_1 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="ClientFilters.feature.cs", label="WriteLiteral(''\r\n'')", span="51-51"];
m0_54 [cluster="HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", file="ClientFilters.feature.cs", label="Entry HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", span="89-89"];
m0_43 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="Write(RenderPartial(new Paginator(pager)))", prediction=0, span="296-296"];
m0_9 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="ClientFilters.feature.cs", label="pager = new Pager(from, perPage, monitor.ProcessingCount())\r\n        {\r\n            BasePageUrl = Request.LinkTo(''/processing'')\r\n        }", span="74-77"];
m0_42 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="WriteLiteral(''        </tbody>\r\n    </table>\r\n'')", prediction=0, span="284-284"];
m0_16 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="ClientFilters.feature.cs", label=processingJobs, span="134-134"];
m0_18 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="Write(!job.Value.InProcessingState ? ''obsolete-data'' : null)", prediction=0, span="145-145"];
m0_17 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="ClientFilters.feature.cs", label="WriteLiteral(''                <tr class=\'''')", span="140-140"];
m0_19 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="WriteLiteral(''\''>\r\n                    <td>\r\n                        <a href=\'''')", prediction=0, span="150-150"];
m0_20 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="Write(Request.LinkTo(''/job/'' + job.Key))", prediction=0, span="155-155"];
m0_21 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="WriteLiteral(''\''>\r\n                            '')", prediction=0, span="160-160"];
m0_22 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="Write(HtmlHelper.JobId(job.Key))", prediction=0, span="165-165"];
m0_23 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="WriteLiteral(''\r\n                        </a>\r\n'')", prediction=0, span="170-170"];
m0_24 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="!job.Value.InProcessingState", prediction=0, span="175-175"];
m0_25 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="WriteLiteral(''                            <span title=\''Job\'s state has been changed while fetch'' +\r\n''ing data.\'' class=\''glyphicon glyphicon-question-sign\''></span>\r\n'')", prediction=0, span="181-182"];
m0_26 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="WriteLiteral(''                    </td>\r\n                    <td>\r\n                        '')", prediction=0, span="192-192"];
m0_27 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="Write(HtmlHelper.QueueLabel(job.Value.Method))", prediction=0, span="197-197"];
m0_28 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="WriteLiteral(''\r\n                        <span title=\'''')", prediction=0, span="202-202"];
m0_29 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="Write(HtmlHelper.DisplayMethodHint(job.Value.Method))", prediction=0, span="207-207"];
m0_30 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="WriteLiteral(''\''>\r\n                            '')", prediction=0, span="212-212"];
m0_31 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="Write(HtmlHelper.DisplayMethod(job.Value.Method))", prediction=0, span="217-217"];
m0_32 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="WriteLiteral(''\r\n                        </span>\r\n                    </td>\r\n                   '' +\r\n'' <td>\r\n                        '')", prediction=0, span="222-223"];
m0_33 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="Write(job.Value.ServerName)", prediction=0, span="228-228"];
m0_34 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="WriteLiteral(''\r\n                    </td>\r\n                    <td>\r\n'')", prediction=0, span="233-233"];
m0_35 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="job.Value.StartedAt.HasValue", prediction=0, span="238-238"];
m0_36 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="WriteLiteral(''                            <span data-moment=\'''')", prediction=0, span="244-244"];
m0_41 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="WriteLiteral(''                    </td>\r\n                </tr>\r\n'')", prediction=0, span="274-274"];
m0_37 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="Write(JobHelper.ToStringTimestamp(job.Value.StartedAt.Value))", prediction=0, span="249-249"];
m0_40 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="WriteLiteral(''\r\n                            </span>\r\n'')", prediction=0, span="264-264"];
m0_38 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="WriteLiteral(''\''>\r\n                                '')", prediction=0, span="254-254"];
m0_39 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=green, community=0, file="ClientFilters.feature.cs", label="Write(job.Value.StartedAt)", prediction=0, span="259-259"];
m0_4 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="ClientFilters.feature.cs", label="int.TryParse(Request.QueryString[''from''], out from)", span="66-66"];
m0_5 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="ClientFilters.feature.cs", label="int.TryParse(Request.QueryString[''count''], out perPage)", span="67-67"];
m0_11 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="ClientFilters.feature.cs", label="WriteLiteral(''\r\n'')", span="87-87"];
m0_13 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="ClientFilters.feature.cs", label="WriteLiteral(''    <div class=\''alert alert-info\''>\r\n        No jobs are being processed right now'' +\r\n''.\r\n    </div>\r\n'')", span="98-99"];
m0_14 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="ClientFilters.feature.cs", label="Write(RenderPartial(new PerPageSelector(pager)))", span="113-113"];
m0_15 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="ClientFilters.feature.cs", label="WriteLiteral(''    <table class=\''table\''>\r\n        <thead>\r\n            <tr>\r\n                <th'' +\r\n''>Id</th>\r\n                <th>Job type</th>\r\n                <th>Server</th>\r\n  '' +\r\n''              <th>Started</th>\r\n            </tr>\r\n        </thead>\r\n        <tb'' +\r\n''ody>\r\n'')", span="126-129"];
m0_8 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="ClientFilters.feature.cs", label="var monitor = JobStorage.Current.GetMonitoringApi()", span="72-72"];
m0_10 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="ClientFilters.feature.cs", label="processingJobs = monitor\r\n            .ProcessingJobs(pager.FromRecord, pager.RecordsPerPage)", span="79-80"];
m0_12 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="ClientFilters.feature.cs", label="pager.TotalPageCount == 0", span="92-92"];
m0_6 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="ClientFilters.feature.cs", label="Pager pager", span="69-69"];
m0_7 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="ClientFilters.feature.cs", label="JobList<ProcessingJobDto> processingJobs", span="70-70"];
m0_44 [cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="ClientFilters.feature.cs", label="Exit HangFire.Web.Pages.ProcessingJobsPage.Execute()", span="47-47"];
m0_59 [cluster="HangFire.Web.HtmlHelper.DisplayMethodHint(HangFire.Common.JobMethod)", file="ClientFilters.feature.cs", label="Entry HangFire.Web.HtmlHelper.DisplayMethodHint(HangFire.Common.JobMethod)", span="45-45"];
m0_50 [cluster="HangFire.Storage.Monitoring.IMonitoringApi.ProcessingCount()", file="ClientFilters.feature.cs", label="Entry HangFire.Storage.Monitoring.IMonitoringApi.ProcessingCount()", span="24-24"];
m0_53 [cluster="HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", file="ClientFilters.feature.cs", label="Entry HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", span="6-6"];
m0_61 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="ClientFilters.feature.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46"];
m0_55 [cluster="Unk.Write", file="ClientFilters.feature.cs", label="Entry Unk.Write", span=""];
m0_57 [cluster="HangFire.Web.HtmlHelper.JobId(string, bool)", file="ClientFilters.feature.cs", label="Entry HangFire.Web.HtmlHelper.JobId(string, bool)", span="55-55"];
m0_48 [cluster="HangFire.JobStorage.GetMonitoringApi()", file="ClientFilters.feature.cs", label="Entry HangFire.JobStorage.GetMonitoringApi()", span="43-43"];
m0_46 [cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="ClientFilters.feature.cs", label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4"];
m0_52 [cluster="HangFire.Storage.Monitoring.IMonitoringApi.ProcessingJobs(int, int)", file="ClientFilters.feature.cs", label="Entry HangFire.Storage.Monitoring.IMonitoringApi.ProcessingJobs(int, int)", span="15-15"];
m0_51 [cluster="HttpRequestBase.LinkTo(string)", file="ClientFilters.feature.cs", label="Entry HttpRequestBase.LinkTo(string)", span="24-24"];
m0_62 [cluster="HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", file="ClientFilters.feature.cs", label="Entry HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", span="6-6"];
m0_63 [file="ClientFilters.feature.cs", label="HangFire.Web.Pages.ProcessingJobsPage", span=""];
m1_24 [cluster="HangFire.BackgroundJob.CreateEnqueuedState()", file="ClientJobDescriptor.cs", label="return new EnqueuedState();", span="146-146"];
m1_33 [cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)", file="ClientJobDescriptor.cs", label="Entry HangFire.States.ScheduledState.ScheduledState(System.DateTime)", span="28-28"];
m1_23 [cluster="HangFire.BackgroundJob.Schedule<TJob>(System.Linq.Expressions.Expression<System.Action<TJob>>, System.TimeSpan)", file="ClientJobDescriptor.cs", label="Exit HangFire.BackgroundJob.Schedule<TJob>(System.Linq.Expressions.Expression<System.Action<TJob>>, System.TimeSpan)", span="138-138"];
m1_15 [cluster="HangFire.BackgroundJob.Enqueue<TJob>(System.Linq.Expressions.Expression<System.Action<TJob>>)", file="ClientJobDescriptor.cs", label="Exit HangFire.BackgroundJob.Enqueue<TJob>(System.Linq.Expressions.Expression<System.Action<TJob>>)", span="97-97"];
m1_38 [cluster="HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ClientJobDescriptor.cs", label="Entry HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", span="58-58"];
m1_14 [cluster="HangFire.BackgroundJob.Enqueue<TJob>(System.Linq.Expressions.Expression<System.Action<TJob>>)", file="ClientJobDescriptor.cs", label="return CreateInternal(\r\n                Job.FromExpression(methodCall), CreateEnqueuedState());", span="99-100"];
m1_27 [cluster="HangFire.BackgroundJob.CreateScheduledState(System.TimeSpan)", file="ClientJobDescriptor.cs", label="return CreateScheduledState(DateTime.UtcNow.Add(delay));", span="151-151"];
m1_28 [cluster="HangFire.BackgroundJob.CreateScheduledState(System.TimeSpan)", color=green, community=0, file="ClientJobDescriptor.cs", label="Exit HangFire.BackgroundJob.CreateScheduledState(System.TimeSpan)", prediction=26, span="149-149"];
m1_29 [cluster="System.DateTime.Add(System.TimeSpan)", color=green, community=0, file="ClientJobDescriptor.cs", label="Entry System.DateTime.Add(System.TimeSpan)", prediction=27, span="0-0"];
m1_30 [cluster="HangFire.BackgroundJob.CreateScheduledState(System.DateTime)", file="ClientJobDescriptor.cs", label="Entry HangFire.BackgroundJob.CreateScheduledState(System.DateTime)", span="154-154"];
m1_31 [cluster="HangFire.BackgroundJob.CreateScheduledState(System.DateTime)", file="ClientJobDescriptor.cs", label="return new ScheduledState(utcDateTime);", span="156-156"];
m1_21 [cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="ClientJobDescriptor.cs", label="_jobParameters.Add(name, JobHelper.ToJson(value))", span="81-81"];
m1_22 [cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="ClientJobDescriptor.cs", label="Exit HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", span="72-72"];
m1_26 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="ClientJobDescriptor.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m1_13 [cluster="System.Diagnostics.Debug.Assert(bool)", file="ClientJobDescriptor.cs", label="Entry System.Diagnostics.Debug.Assert(bool)", span="0-0"];
m1_16 [cluster="HangFire.Common.Job.FromExpression<T>(System.Linq.Expressions.Expression<System.Action<T>>)", file="ClientJobDescriptor.cs", label="Entry HangFire.Common.Job.FromExpression<T>(System.Linq.Expressions.Expression<System.Action<T>>)", span="65-65"];
m1_17 [cluster="HangFire.BackgroundJob.Schedule(System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", color=green, community=0, file="ClientJobDescriptor.cs", label="Entry HangFire.BackgroundJob.Schedule(System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", prediction=28, span="117-117"];
m1_18 [cluster="HangFire.BackgroundJob.Schedule(System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", color=green, community=0, file="ClientJobDescriptor.cs", label="return CreateInternal(\r\n                Job.FromExpression(methodCall), CreateScheduledState(delay));", prediction=29, span="119-120"];
m1_19 [cluster="HangFire.BackgroundJob.Schedule(System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", color=green, community=0, file="ClientJobDescriptor.cs", label="Exit HangFire.BackgroundJob.Schedule(System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", prediction=30, span="117-117"];
m1_20 [cluster="HangFire.BackgroundJob.CreateScheduledState(System.TimeSpan)", color=green, community=0, file="ClientJobDescriptor.cs", label="Entry HangFire.BackgroundJob.CreateScheduledState(System.TimeSpan)", prediction=31, span="149-149"];
m1_11 [cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ClientJobDescriptor.cs", label="_jobParameters[''Args''] = JobHelper.ToJson(arguments)", span="41-41"];
m1_25 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="ClientJobDescriptor.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m1_6 [cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ClientJobDescriptor.cs", label="_stateMachine = new StateMachine(redis)", span="34-34"];
m1_0 [cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ClientJobDescriptor.cs", label="Entry HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", span="21-21"];
m1_1 [cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ClientJobDescriptor.cs", label="Debug.Assert(redis != null)", span="28-28"];
m1_32 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="ClientJobDescriptor.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m1_7 [cluster="HangFire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", file="ClientJobDescriptor.cs", label="Entry HangFire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", span="75-75"];
m1_8 [cluster="HangFire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", file="ClientJobDescriptor.cs", label="return CreateInternal(\r\n                Job.FromExpression(methodCall), CreateEnqueuedState());", span="77-78"];
m1_9 [cluster="HangFire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", file="ClientJobDescriptor.cs", label="Exit HangFire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", span="75-75"];
m1_10 [cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="ClientJobDescriptor.cs", label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="48-48"];
m1_5 [cluster="HangFire.Client.JobClient.JobClient(HangFire.Storage.IStorageConnection)", file="ClientJobDescriptor.cs", label="Entry HangFire.Client.JobClient.JobClient(HangFire.Storage.IStorageConnection)", span="40-40"];
m1_2 [cluster="lambda expression", file="ClientJobDescriptor.cs", label="Entry lambda expression", span="34-34"];
m1_3 [cluster="lambda expression", file="ClientJobDescriptor.cs", label="new JobClient(JobStorage.Current.GetConnection())", span="34-34"];
m1_4 [cluster="lambda expression", file="ClientJobDescriptor.cs", label="Exit lambda expression", span="34-34"];
m1_12 [cluster="HangFire.BackgroundJob.CreateInternal(HangFire.Common.Job, HangFire.Common.States.State)", file="ClientJobDescriptor.cs", label="Entry HangFire.BackgroundJob.CreateInternal(HangFire.Common.Job, HangFire.Common.States.State)", span="159-159"];
m1_34 [cluster="HangFire.Client.ClientJobDescriptor.Create()", file="ClientJobDescriptor.cs", label="Entry HangFire.Client.ClientJobDescriptor.Create()", span="105-105"];
m1_35 [cluster="HangFire.Client.ClientJobDescriptor.Create()", color=green, community=0, file="ClientJobDescriptor.cs", label="_jobWasCreated = true", prediction=32, span="107-107"];
m1_36 [cluster="HangFire.Client.ClientJobDescriptor.Create()", file="ClientJobDescriptor.cs", label="_stateMachine.CreateInState(JobId, _jobParameters, State)", span="108-108"];
m1_37 [cluster="System.Func<TResult>.Invoke()", file="ClientJobDescriptor.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m1_39 [file="ClientJobDescriptor.cs", label="HangFire.Client.ClientJobDescriptor", span=""];
m2_90 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateShouldBeChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateShouldBeChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", span="215-215"];
m2_91 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateShouldBeChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", color=green, community=1, file="DequeuedJobsWatcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Job\'s state should be changed to the Enqueued when the job is being timed out aft'' +\r\n                    ''er proceeding to the Processing state'', new string[] {\r\n                        ''checkpoint-3''})", prediction=33, span="217-219"];
m2_92 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateShouldBeChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="221-221"];
m2_97 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateShouldBeChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.Then(''the job should be moved to the Enqueued state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=34, span="231-231"];
m2_96 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateShouldBeChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="229-229"];
m2_98 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateShouldBeChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=35, span="233-233"];
m2_99 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateShouldBeChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioCleanup()", span="235-235"];
m2_94 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateShouldBeChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''its state is Processing'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="225-225"];
m2_95 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateShouldBeChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="227-227"];
m2_93 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateShouldBeChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="223-223"];
m2_100 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateShouldBeChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateShouldBeChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", span="215-215"];
m2_9 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="DequeuedJobsWatcher.feature.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m2_101 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateShouldNotMoveToTheEnqueuedState()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateShouldNotMoveToTheEnqueuedState()", span="243-243"];
m2_102 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateShouldNotMoveToTheEnqueuedState()", color=green, community=1, file="DequeuedJobsWatcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out job in the Succeeded state should not move to the Enqueued state'', new string[] {\r\n                        ''checkpoint-4''})", prediction=36, span="245-246"];
m2_103 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateShouldNotMoveToTheEnqueuedState()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="248-248"];
m2_108 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateShouldNotMoveToTheEnqueuedState()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.Then(''the job should be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=37, span="258-258"];
m2_107 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateShouldNotMoveToTheEnqueuedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="256-256"];
m2_109 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateShouldNotMoveToTheEnqueuedState()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.But(''it should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", prediction=38, span="260-260"];
m2_110 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateShouldNotMoveToTheEnqueuedState()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioCleanup()", span="262-262"];
m2_105 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateShouldNotMoveToTheEnqueuedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''its state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="252-252"];
m2_106 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateShouldNotMoveToTheEnqueuedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="254-254"];
m2_104 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateShouldNotMoveToTheEnqueuedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="250-250"];
m2_111 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateShouldNotMoveToTheEnqueuedState()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateShouldNotMoveToTheEnqueuedState()", span="243-243"];
m2_25 [cluster="Unk.OnScenarioStart", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.OnScenarioStart", span=""];
m2_29 [cluster="Unk.CollectScenarioErrors", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m2_0 [cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IState, string)", file="DequeuedJobsWatcher.feature.cs", label="Entry Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IState, string)", span="30-30"];
m2_1 [cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IState, string)", file="DequeuedJobsWatcher.feature.cs", label="connection == null", span="37-37"];
m2_3 [cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IState, string)", file="DequeuedJobsWatcher.feature.cs", label="candidateState == null", span="38-38"];
m2_5 [cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IState, string)", file="DequeuedJobsWatcher.feature.cs", label="_candidateState = candidateState", span="40-40"];
m2_6 [cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IState, string)", file="DequeuedJobsWatcher.feature.cs", label="Connection = connection", span="42-42"];
m2_7 [cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IState, string)", file="DequeuedJobsWatcher.feature.cs", label="CurrentState = currentState", span="43-43"];
m2_2 [cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IState, string)", file="DequeuedJobsWatcher.feature.cs", label="throw new ArgumentNullException(''connection'');", span="37-37"];
m2_4 [cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IState, string)", file="DequeuedJobsWatcher.feature.cs", label="throw new ArgumentNullException(''candidateState'');", span="38-38"];
m2_8 [cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IState, string)", file="DequeuedJobsWatcher.feature.cs", label="Exit Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IState, string)", span="30-30"];
m2_65 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", span="153-153"];
m2_72 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.Then(''the dequeued jobs list should contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=39, span="169-169"];
m2_71 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="167-167"];
m2_73 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the queue should not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=40, span="171-171"];
m2_74 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the job should have the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=41, span="173-173"];
m2_75 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the job should have the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=42, span="175-175"];
m2_76 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioCleanup()", span="177-177"];
m2_67 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="159-159"];
m2_66 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out job by the \'checked\' flag in the \'Fetched\' state should not be re-queue'' +\r\n                    ''d'', new string[] {\r\n                        ''checkpoint-2''})", span="155-157"];
m2_69 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it was checked a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="163-163"];
m2_70 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it was fetched a millisecond ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="165-165"];
m2_68 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="161-161"];
m2_77 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", span="153-153"];
m2_10 [cluster="Hangfire.States.ElectStateContext.SetJobParameter<T>(string, T)", file="DequeuedJobsWatcher.feature.cs", label="Entry Hangfire.States.ElectStateContext.SetJobParameter<T>(string, T)", span="74-74"];
m2_11 [cluster="Hangfire.States.ElectStateContext.SetJobParameter<T>(string, T)", file="DequeuedJobsWatcher.feature.cs", label="Connection.SetJobParameter(JobId, name, JobHelper.ToJson(value))", span="76-76"];
m2_12 [cluster="Hangfire.States.ElectStateContext.SetJobParameter<T>(string, T)", file="DequeuedJobsWatcher.feature.cs", label="Exit Hangfire.States.ElectStateContext.SetJobParameter<T>(string, T)", span="74-74"];
m2_53 [cluster="Unk.And", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.And", span=""];
m2_112 [cluster="Unk.But", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.But", span=""];
m2_14 [cluster="Hangfire.Storage.IStorageConnection.SetJobParameter(string, string, string)", file="DequeuedJobsWatcher.feature.cs", label="Entry Hangfire.Storage.IStorageConnection.SetJobParameter(string, string, string)", span="38-38"];
m2_78 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", span="185-185"];
m2_84 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.Then(''the queue should contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=43, span="198-198"];
m2_83 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="196-196"];
m2_85 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the job should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=44, span="200-200"];
m2_86 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the job should not have the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=45, span="202-202"];
m2_87 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the job should not have the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=46, span="204-204"];
m2_88 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioCleanup()", span="206-206"];
m2_80 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="190-190"];
m2_79 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out jobs in the \'Fetched\' state should be re-queued'', new string[] {\r\n                        ''checkpoint-2''})", span="187-188"];
m2_82 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="194-194"];
m2_81 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="192-192"];
m2_89 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", span="185-185"];
m2_26 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", span="67-67"];
m2_27 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.CollectScenarioErrors()", span="69-69"];
m2_28 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", span="67-67"];
m2_22 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="62-62"];
m2_23 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="DequeuedJobsWatcher.feature.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="64-64"];
m2_24 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="62-62"];
m2_15 [cluster="Hangfire.States.ElectStateContext.GetJobParameter<T>(string)", file="DequeuedJobsWatcher.feature.cs", label="Entry Hangfire.States.ElectStateContext.GetJobParameter<T>(string)", span="79-79"];
m2_16 [cluster="Hangfire.States.ElectStateContext.GetJobParameter<T>(string)", file="DequeuedJobsWatcher.feature.cs", label="return JobHelper.FromJson<T>(Connection.GetJobParameter(\r\n                JobId, name));", span="81-82"];
m2_17 [cluster="Hangfire.States.ElectStateContext.GetJobParameter<T>(string)", file="DequeuedJobsWatcher.feature.cs", label="Exit Hangfire.States.ElectStateContext.GetJobParameter<T>(string)", span="79-79"];
m2_40 [cluster="Unk.When", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.When", span=""];
m2_19 [cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="DequeuedJobsWatcher.feature.cs", label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39"];
m2_122 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobShouldBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobShouldBeMovedToTheFailedState()", span="291-291"];
m2_123 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobShouldBeMovedToTheFailedState()", color=green, community=1, file="DequeuedJobsWatcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''When the server could not find the job\'s type, the job should be moved to the Fai'' +\r\n                    ''led state'', ((string[])(null)))", prediction=47, span="293-294"];
m2_124 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobShouldBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="296-296"];
m2_128 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobShouldBeMovedToTheFailedState()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.Then(''the job should be moved to the Failed state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=48, span="304-304"];
m2_127 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobShouldBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="302-302"];
m2_129 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobShouldBeMovedToTheFailedState()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=49, span="306-306"];
m2_130 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobShouldBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioCleanup()", span="308-308"];
m2_126 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobShouldBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="300-300"];
m2_125 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobShouldBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Given(''a dequeued job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="298-298"];
m2_131 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobShouldBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobShouldBeMovedToTheFailedState()", span="291-291"];
m2_13 [cluster="Hangfire.Common.JobHelper.ToJson(object)", file="DequeuedJobsWatcher.feature.cs", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
m2_42 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", span="98-98"];
m2_48 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.Then(''the dequeued jobs list should contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=50, span="111-111"];
m2_47 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="109-109"];
m2_49 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the queue should not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=51, span="113-113"];
m2_50 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the job should have the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=52, span="115-115"];
m2_51 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioCleanup()", span="117-117"];
m2_44 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="103-103"];
m2_43 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Non-timed out job in the \'Checked\' state should not be requeued'', new string[] {\r\n                        ''checkpoint-1-2''})", span="100-101"];
m2_46 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it was checked a millisecond ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="107-107"];
m2_45 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="105-105"];
m2_52 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", span="98-98"];
m2_113 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobShouldBeEnqueuedOnItsActualQueueAfterTimingOut()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobShouldBeEnqueuedOnItsActualQueueAfterTimingOut()", span="269-269"];
m2_114 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobShouldBeEnqueuedOnItsActualQueueAfterTimingOut()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Job should be enqueued on its actual queue after timing out'', ((string[])(null)))", prediction=53, span="271-271"];
m2_115 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobShouldBeEnqueuedOnItsActualQueueAfterTimingOut()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="273-273"];
m2_119 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobShouldBeEnqueuedOnItsActualQueueAfterTimingOut()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.Then(''the queue should contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=54, span="281-281"];
m2_118 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobShouldBeEnqueuedOnItsActualQueueAfterTimingOut()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="279-279"];
m2_120 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobShouldBeEnqueuedOnItsActualQueueAfterTimingOut()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioCleanup()", span="283-283"];
m2_116 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobShouldBeEnqueuedOnItsActualQueueAfterTimingOut()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''a dequeued job from the \'test\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="275-275"];
m2_117 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobShouldBeEnqueuedOnItsActualQueueAfterTimingOut()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="277-277"];
m2_121 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobShouldBeEnqueuedOnItsActualQueueAfterTimingOut()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobShouldBeEnqueuedOnItsActualQueueAfterTimingOut()", span="269-269"];
m2_54 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", span="125-125"];
m2_60 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.Then(''the queue should contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=55, span="138-138"];
m2_59 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="136-136"];
m2_61 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the job should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=56, span="140-140"];
m2_62 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the job should not have the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=57, span="142-142"];
m2_63 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioCleanup()", span="144-144"];
m2_56 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="130-130"];
m2_55 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed job in the \'Checked\' state should be requeued'', new string[] {\r\n                        ''checkpoint-1-2''})", span="127-128"];
m2_58 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it was checked a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="134-134"];
m2_57 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="132-132"];
m2_64 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", span="125-125"];
m2_132 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeShouldNotBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeShouldNotBeMovedToTheFailedState()", span="315-315"];
m2_133 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeShouldNotBeMovedToTheFailedState()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Succeeded job of non-existing type should not be moved to the failed state'', ((string[])(null)))", prediction=58, span="317-317"];
m2_134 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeShouldNotBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="319-319"];
m2_139 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeShouldNotBeMovedToTheFailedState()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.Then(''the job should be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=59, span="329-329"];
m2_138 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeShouldNotBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="327-327"];
m2_140 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeShouldNotBeMovedToTheFailedState()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.But(''it should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", prediction=60, span="331-331"];
m2_141 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeShouldNotBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioCleanup()", span="333-333"];
m2_136 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeShouldNotBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''its state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="323-323"];
m2_137 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeShouldNotBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="325-325"];
m2_135 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeShouldNotBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Given(''a dequeued job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="321-321"];
m2_142 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeShouldNotBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeShouldNotBeMovedToTheFailedState()", span="315-315"];
m2_38 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="DequeuedJobsWatcher.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m2_41 [cluster="Unk.Then", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.Then", span=""];
m2_39 [cluster="Unk.Given", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.Given", span=""];
m2_18 [cluster="Hangfire.Storage.IStorageConnection.GetJobParameter(string, string)", file="DequeuedJobsWatcher.feature.cs", label="Entry Hangfire.Storage.IStorageConnection.GetJobParameter(string, string)", span="39-39"];
m2_30 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateShouldBeMovedToTheCheckedState()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateShouldBeMovedToTheCheckedState()", span="77-77"];
m2_31 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateShouldBeMovedToTheCheckedState()", color=green, community=1, file="DequeuedJobsWatcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''A job in the implicit \'Dequeued\' state should be moved to the \'Checked\' state'', new string[] {\r\n                        ''checkpoint-1-1''})", prediction=61, span="79-80"];
m2_32 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateShouldBeMovedToTheCheckedState()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="82-82"];
m2_35 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateShouldBeMovedToTheCheckedState()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="testRunner.Then(''it should mark the job as \'checked\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=62, span="88-88"];
m2_34 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateShouldBeMovedToTheCheckedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="86-86"];
m2_36 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateShouldBeMovedToTheCheckedState()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioCleanup()", span="90-90"];
m2_33 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateShouldBeMovedToTheCheckedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="84-84"];
m2_37 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateShouldBeMovedToTheCheckedState()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateShouldBeMovedToTheCheckedState()", span="77-77"];
m2_20 [file="DequeuedJobsWatcher.feature.cs", label="Hangfire.States.ElectStateContext", span=""];
m2_143 [file="DequeuedJobsWatcher.feature.cs", label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", span=""];
m3_61 [cluster="HangFire.Web.RazorPage.Write(object)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Web.RazorPage.Write(object)", span="76-76"];
m3_0 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Web.Pages.EnqueuedJobsPage.Execute()", span="62-62"];
m3_1 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''\r\n'')", span="66-66"];
m3_3 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="int from, perPage", span="90-90"];
m3_4 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="int.TryParse(Request.QueryString[''from''], out from)", span="92-92"];
m3_5 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="int.TryParse(Request.QueryString[''count''], out perPage)", span="93-93"];
m3_9 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="pager = new Pager(from, perPage, monitor.EnqueuedCount(Queue))\r\n    {\r\n        BasePageUrl = Request.LinkTo(''/queues/'' + Queue)\r\n    }", span="99-102"];
m3_6 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="Pager pager", span="95-95"];
m3_7 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="JobList<EnqueuedJobDto> enqueuedJobs", span="96-96"];
m3_8 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="var monitor = JobStorage.Current.GetMonitoringApi()", span="98-98"];
m3_10 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="enqueuedJobs = monitor\r\n        .EnqueuedJobs(Queue, pager.FromRecord, pager.RecordsPerPage)", span="104-105"];
m3_12 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="pager.TotalPageCount == 0", span="116-116"];
m3_17 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="Write(RenderPartial(new PerPageSelector(pager)))", span="158-158"];
m3_49 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="Write(RenderPartial(new Paginator(pager)))", span="371-371"];
m3_11 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''\r\n'')", span="111-111"];
m3_19 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label=enqueuedJobs, span="184-184"];
m3_13 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''    <div class=\''alert alert-info\''>\r\n        The queue is empty.\r\n    </div>\r\n'')", span="122-122"];
m3_14 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''    <div class=\''js-jobs-list\''>\r\n        <div class=\''btn-toolbar btn-toolbar-top\''>'' +\r\n''\r\n            <button class=\''js-jobs-list-command btn btn-sm btn-default\''\r\n     '' +\r\n''               data-url=\'''')", span="134-136"];
m3_15 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="Write(Request.LinkTo(''/enqueued/delete''))", span="141-141"];
m3_16 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(@''''''\r\n                    data-loading-text=''''Deleting...''''\r\n                    data-confirm=''''Do you really want to DELETE ALL selected jobs?''''>\r\n                <span class=''''glyphicon glyphicon-remove''''></span>\r\n                Delete selected\r\n            </button>\r\n\r\n            '')", span="146-153"];
m3_18 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(@''\r\n        </div>\r\n\r\n        <table class=''''table''''>\r\n            <thead>\r\n                <tr>\r\n                    <th class=''''min-width''''>\r\n                        <input type=''''checkbox'''' class=''''js-jobs-list-select-all'''' />\r\n                    </th>\r\n                    <th class=''''min-width''''>Id</th>\r\n                    <th class=''''min-width''''>State</th>\r\n                    <th>Job</th>\r\n                    <th class=''''align-right''''>Enqueued</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n'')", span="163-179"];
m3_20 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''                    <tr class=\''js-jobs-list-row hover '')", span="190-190"];
m3_48 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''            </tbody>\r\n        </table>\r\n    </div>\r\n'')", span="360-360"];
m3_21 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="Write(!job.Value.InEnqueuedState ? ''obsolete-data'' : null)", span="195-195"];
m3_22 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''\''>\r\n                        <td>\r\n                            <input type=\''checkb'' +\r\n''ox\'' class=\''js-jobs-list-checkbox\'' name=\''jobs[]\'' value=\'''')", span="200-201"];
m3_23 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="Write(job.Key)", span="206-206"];
m3_24 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''\'' />\r\n                        </td>\r\n                        <td class=\''min-width'' +\r\n''\''>\r\n                            <a href=\'''')", span="211-212"];
m3_25 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="Write(Request.LinkTo(''/job/'' + job.Key))", span="217-217"];
m3_26 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''\''>\r\n                                '')", span="222-222"];
m3_27 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="Write(HtmlHelper.JobId(job.Key))", span="227-227"];
m3_28 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''\r\n                            </a>\r\n'')", span="232-232"];
m3_29 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="!job.Value.InEnqueuedState", span="237-237"];
m3_30 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''                                <span title=\''Job\'s state has been changed while f'' +\r\n''etching data.\'' class=\''glyphicon glyphicon-question-sign\''></span>\r\n'')", span="243-244"];
m3_31 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''                        </td>\r\n                        <td class=\''min-width\''>\r\n  '' +\r\n''                          <span class=\''label label-default\'' style=\'''')", span="254-255"];
m3_32 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="Write(JobHistoryRenderer.ForegroundStateColors.ContainsKey(job.Value.State) ? String.Format(''background-color: {0};'', JobHistoryRenderer.ForegroundStateColors[job.Value.State]) : null)", span="260-260"];
m3_33 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''\''>\r\n                                '')", span="265-265"];
m3_34 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="Write(job.Value.State)", span="270-270"];
m3_35 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''\r\n                            </span>\r\n                        </td>\r\n           '' +\r\n''             <td>\r\n                            <a class=\''job-method\'' href=\'''')", span="275-276"];
m3_36 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="Write(Request.LinkTo(''/job/'' + job.Key))", span="281-281"];
m3_37 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''\''>\r\n                                '')", span="286-286"];
m3_38 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="Write(HtmlHelper.DisplayMethod(job.Value.Job))", span="291-291"];
m3_39 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''\r\n                            </a>\r\n                        </td>\r\n              '' +\r\n''          <td class=\''align-right\''>\r\n'')", span="296-297"];
m3_40 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="job.Value.EnqueuedAt.HasValue", span="302-302"];
m3_41 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''                                <span data-moment=\'''')", span="308-308"];
m3_46 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''                                <em>n/a</em>\r\n'')", span="340-340"];
m3_42 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="Write(JobHelper.ToStringTimestamp(job.Value.EnqueuedAt.Value))", span="313-313"];
m3_43 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''\''>\r\n                                    '')", span="318-318"];
m3_44 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="Write(job.Value.EnqueuedAt)", span="323-323"];
m3_45 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''\r\n                                </span>\r\n'')", span="328-328"];
m3_47 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="WriteLiteral(''                        </td>\r\n                    </tr>\r\n'')", span="350-350"];
m3_50 [cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Web.Pages.EnqueuedJobsPage.Execute()", span="62-62"];
m3_67 [cluster="string.Format(string, object)", file="DequeuedJobsWatcherSteps.cs", label="Entry string.Format(string, object)", span="0-0"];
m3_60 [cluster="HangFire.Storage.IMonitoringApi.EnqueuedJobs(string, int, int)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Storage.IMonitoringApi.EnqueuedJobs(string, int, int)", span="29-29"];
m3_58 [cluster="HangFire.Web.Pager.Pager(int, int, long)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Web.Pager.Pager(int, int, long)", span="29-29"];
m3_56 [cluster="Unk.TryParse", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.TryParse", span=""];
m3_51 [cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="69-69"];
m3_53 [cluster="string.ToUpperInvariant()", file="DequeuedJobsWatcherSteps.cs", label="Entry string.ToUpperInvariant()", span="0-0"];
m3_63 [cluster="HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", span="89-89"];
m3_54 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="DequeuedJobsWatcherSteps.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m3_62 [cluster="HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", span="6-6"];
m3_66 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="DequeuedJobsWatcherSteps.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m3_59 [cluster="HangFire.Storage.IMonitoringApi.EnqueuedCount(string)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Storage.IMonitoringApi.EnqueuedCount(string)", span="39-39"];
m3_69 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
m3_64 [cluster="Unk.Write", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.Write", span=""];
m3_65 [cluster="HangFire.Web.HtmlHelper.JobId(string, bool)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Web.HtmlHelper.JobId(string, bool)", span="45-45"];
m3_57 [cluster="HangFire.JobStorage.GetMonitoringApi()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.JobStorage.GetMonitoringApi()", span="54-54"];
m3_52 [cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4"];
m3_55 [cluster="HttpRequestBase.LinkTo(string)", file="DequeuedJobsWatcherSteps.cs", label="Entry HttpRequestBase.LinkTo(string)", span="24-24"];
m3_68 [cluster="HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", span="30-30"];
m3_70 [cluster="HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", span="6-6"];
m3_71 [file="DequeuedJobsWatcherSteps.cs", label="HangFire.Web.Pages.EnqueuedJobsPage", span=""];
m4_0 [cluster="Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, bool, System.Exception)", file="EnqueuedState.cs", label="Entry Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, bool, System.Exception)", span="26-26"];
m4_2 [cluster="Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, bool, System.Exception)", file="EnqueuedState.cs", label="Exception = exception", span="33-33"];
m4_3 [cluster="Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, bool, System.Exception)", file="EnqueuedState.cs", label="Exit Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, bool, System.Exception)", span="26-26"];
m4_4 [file="EnqueuedState.cs", label="Hangfire.Client.CreatedContext", span=""];
m5_56 [cluster="HangFire.Storage.IMonitoringApi.FetchedJobs(string, int, int)", file="EnqueuedState.feature.cs", label="Entry HangFire.Storage.IMonitoringApi.FetchedJobs(string, int, int)", span="30-30"];
m5_57 [cluster="HangFire.Web.RazorPage.Write(object)", file="EnqueuedState.feature.cs", label="Entry HangFire.Web.RazorPage.Write(object)", span="76-76"];
m5_63 [cluster="string.Format(string, object)", file="EnqueuedState.feature.cs", label="Entry string.Format(string, object)", span="0-0"];
m5_54 [cluster="HangFire.Web.Pager.Pager(int, int, long)", file="EnqueuedState.feature.cs", label="Entry HangFire.Web.Pager.Pager(int, int, long)", span="29-29"];
m5_52 [cluster="Unk.TryParse", file="EnqueuedState.feature.cs", label="Entry Unk.TryParse", span=""];
m5_47 [cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="EnqueuedState.feature.cs", label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="69-69"];
m5_0 [cluster="Hangfire.Client.IJobCreationProcess.Run(Hangfire.Client.CreateContext)", file="EnqueuedState.feature.cs", label="Entry Hangfire.Client.IJobCreationProcess.Run(Hangfire.Client.CreateContext)", span="28-28"];
m5_2 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", color=green, community=0, file="EnqueuedState.feature.cs", label="Layout = new LayoutPage\r\n        {\r\n            Title = Queue.ToUpperInvariant(),\r\n            Subtitle = ''Fetched jobs'',\r\n            Breadcrumbs = new Dictionary<string, string>\r\n                {\r\n                    { ''Queues'', Request.LinkTo(''/queues'') },\r\n                    { Queue.ToUpperInvariant(), Request.LinkTo(''/queues/'' + Queue) }\r\n                },\r\n            BreadcrumbsTitle = ''Fetched jobs'',\r\n        }", prediction=63, span="80-90"];
m5_1 [cluster="Hangfire.Client.IJobCreationProcess.Run(Hangfire.Client.CreateContext)", file="EnqueuedState.feature.cs", label="Exit Hangfire.Client.IJobCreationProcess.Run(Hangfire.Client.CreateContext)", span="28-28"];
m5_3 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="int from, perPage", span="92-92"];
m5_9 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", color=green, community=0, file="EnqueuedState.feature.cs", label="pager = new Pager(from, perPage, monitor.FetchedCount(Queue))\r\n        {\r\n            BasePageUrl = Request.LinkTo(''/queues/fetched/'' + Queue)\r\n        }", prediction=64, span="102-105"];
m5_4 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="int.TryParse(Request.QueryString[''from''], out from)", span="94-94"];
m5_5 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="int.TryParse(Request.QueryString[''count''], out perPage)", span="95-95"];
m5_8 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="var monitor = JobStorage.Current.GetMonitoringApi()", span="100-100"];
m5_10 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="fetchedJobs = monitor\r\n            .FetchedJobs(Queue, pager.FromRecord, pager.RecordsPerPage)", span="107-108"];
m5_12 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", color=green, community=0, file="EnqueuedState.feature.cs", label="pager.TotalPageCount == 0", prediction=64, span="120-120"];
m5_19 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(RenderPartial(new PerPageSelector(pager)))", span="179-179"];
m5_45 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(RenderPartial(new Paginator(pager)))", span="349-349"];
m5_11 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\r\n'')", span="115-115"];
m5_13 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''    <div class=\''alert alert-info\''>\r\n        The queue is empty.\r\n    </div>\r\n'')", span="126-126"];
m5_14 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", color=green, community=0, file="EnqueuedState.feature.cs", label="WriteLiteral(''    <div class=\''js-jobs-list\''>\r\n        <div class=\''btn-toolbar btn-toolbar-top\''>'' +\r\n''\r\n            <button class=\''js-jobs-list-command btn btn-sm btn-primary\''\r\n     '' +\r\n''               data-url=\'''')", prediction=66, span="138-140"];
m5_15 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(Request.LinkTo(''/enqueued/requeue''))", span="145-145"];
m5_17 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", color=green, community=0, file="EnqueuedState.feature.cs", label="Write(Request.LinkTo(''/enqueued/delete''))", prediction=66, span="162-162"];
m5_16 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(@''''''\r\n                    data-loading-text=''''Enqueueing...''''>\r\n                <span class=''''glyphicon glyphicon-repeat''''></span>\r\n                Requeue jobs\r\n            </button>\r\n\r\n            <button class=''''js-jobs-list-command btn btn-sm btn-default''''\r\n                    data-url='''''')", span="150-157"];
m5_18 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(@''''''\r\n                    data-loading-text=''''Deleting...''''\r\n                    data-confirm=''''Do you really want to DELETE ALL selected jobs?''''>\r\n                <span class=''''glyphicon glyphicon-remove''''></span>\r\n                Delete selected\r\n            </button>\r\n\r\n            '')", span="167-174"];
m5_20 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(@''\r\n        </div>\r\n\r\n        <table class=''''table''''>\r\n            <thead>\r\n                <tr>\r\n                    <th class=''''min-width''''>\r\n                        <input type=''''checkbox'''' class=''''js-jobs-list-select-all'''' />\r\n                    </th>\r\n                    <th class=''''min-width''''>Id</th>\r\n                    <th class=''''min-width''''>State</th>\r\n                    <th>Job</th>\r\n                    <th class=''''align-right''''>Fetched</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n'')", span="184-200"];
m5_22 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''                    <tr class=\''js-jobs-list-row hover\''>\r\n                        '' +\r\n''<td>\r\n                            <input type=\''checkbox\'' class=\''js-jobs-list-che'' +\r\n''ckbox\'' name=\''jobs[]\'' value=\'''')", span="211-213"];
m5_23 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(job.Key)", span="218-218"];
m5_24 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\'' />\r\n                        </td>\r\n                        <td class=\''min-width'' +\r\n''\''>\r\n                            <a href=\'''')", span="223-224"];
m5_25 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(Request.LinkTo(''/job/'' + job.Key))", span="229-229"];
m5_26 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\''>'')", span="234-234"];
m5_27 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(HtmlHelper.JobId(job.Key))", span="239-239"];
m5_28 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''</a>\r\n                        </td>\r\n                        <td class=\''min-width'' +\r\n''\''>\r\n                            <span class=\''label label-default\'' style=\'''')", span="244-245"];
m5_29 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(JobHistoryRenderer.ForegroundStateColors.ContainsKey(job.Value.State) ? String.Format(''background-color: {0};'', JobHistoryRenderer.ForegroundStateColors[job.Value.State]) : null)", span="250-250"];
m5_30 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\''>\r\n                                '')", span="255-255"];
m5_31 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(job.Value.State)", span="260-260"];
m5_32 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\r\n                            </span>\r\n                        </td>\r\n           '' +\r\n''             <td>\r\n                            <a class=\''job-method\'' href=\'''')", span="265-266"];
m5_33 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(Request.LinkTo(''/job/'' + job.Key))", span="271-271"];
m5_34 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\''>\r\n                                '')", span="276-276"];
m5_35 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(HtmlHelper.DisplayMethod(job.Value.Job))", span="281-281"];
m5_36 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\r\n                            </a>\r\n                        </td>\r\n              '' +\r\n''          <td class=\''align-right\''>\r\n'')", span="286-287"];
m5_38 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''                                <span data-moment=\'''')", span="298-298"];
m5_39 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(JobHelper.ToStringTimestamp(job.Value.FetchedAt.Value))", span="303-303"];
m5_40 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\''>\r\n                                    '')", span="308-308"];
m5_41 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(job.Value.FetchedAt)", span="313-313"];
m5_42 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\r\n                                </span>\r\n'')", span="318-318"];
m5_43 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''                        </td>\r\n                    </tr>\r\n'')", span="328-328"];
m5_44 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''            </tbody>\r\n        </table>\r\n    </div>\r\n'')", span="338-338"];
m5_6 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Pager pager", span="97-97"];
m5_7 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="JobList<FetchedJobDto> fetchedJobs", span="98-98"];
m5_21 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label=fetchedJobs, span="205-205"];
m5_37 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="job.Value.FetchedAt.HasValue", span="292-292"];
m5_46 [cluster="HangFire.Web.Pages.FetchedJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Exit HangFire.Web.Pages.FetchedJobsPage.Execute()", span="62-62"];
m5_49 [cluster="string.ToUpperInvariant()", file="EnqueuedState.feature.cs", label="Entry string.ToUpperInvariant()", span="0-0"];
m5_59 [cluster="HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", file="EnqueuedState.feature.cs", label="Entry HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", span="89-89"];
m5_50 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="EnqueuedState.feature.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m5_58 [cluster="HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", file="EnqueuedState.feature.cs", label="Entry HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", span="6-6"];
m5_62 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="EnqueuedState.feature.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m5_65 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="EnqueuedState.feature.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
m5_60 [cluster="Unk.Write", file="EnqueuedState.feature.cs", label="Entry Unk.Write", span=""];
m5_61 [cluster="HangFire.Web.HtmlHelper.JobId(string, bool)", file="EnqueuedState.feature.cs", label="Entry HangFire.Web.HtmlHelper.JobId(string, bool)", span="45-45"];
m5_53 [cluster="HangFire.JobStorage.GetMonitoringApi()", file="EnqueuedState.feature.cs", label="Entry HangFire.JobStorage.GetMonitoringApi()", span="54-54"];
m5_48 [cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="EnqueuedState.feature.cs", label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4"];
m5_51 [cluster="HttpRequestBase.LinkTo(string)", file="EnqueuedState.feature.cs", label="Entry HttpRequestBase.LinkTo(string)", span="24-24"];
m5_55 [cluster="HangFire.Storage.IMonitoringApi.FetchedCount(string)", file="EnqueuedState.feature.cs", label="Entry HangFire.Storage.IMonitoringApi.FetchedCount(string)", span="40-40"];
m5_64 [cluster="HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", file="EnqueuedState.feature.cs", label="Entry HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", span="30-30"];
m5_66 [cluster="HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", file="EnqueuedState.feature.cs", label="Entry HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", span="6-6"];
m5_67 [file="EnqueuedState.feature.cs", label="HangFire.Web.Pages.FetchedJobsPage", span=""];
m6_32 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="FailedState.feature.cs", label="!_removedFromQueue && !_requeued", span="80-80"];
m6_17 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", file="FailedState.feature.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", span="174-174"];
m6_12 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="FailedState.feature.cs", label="throw new ArgumentNullException(''process'');", span="72-72"];
m6_22 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="FailedState.feature.cs", label="throw new ArgumentNullException(''state'');", span="83-83"];
m6_23 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", color=green, community=0, file="FailedState.feature.cs", label="var connection = _storage.GetConnection()", prediction=68, span="87-87"];
m6_24 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="FailedState.feature.cs", label="var context = new CreateContext(connection, _stateMachineFactory, job, state)", span="89-89"];
m6_25 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="FailedState.feature.cs", label="_process.Run(context)", span="90-90"];
m6_0 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="FailedState.feature.cs", label="Entry Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", span="31-31"];
m6_1 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="FailedState.feature.cs", label="storage == null", span="37-37"];
m6_3 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="FailedState.feature.cs", label="jobId == null", span="38-38"];
m6_5 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="FailedState.feature.cs", label="queue == null", span="39-39"];
m6_7 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="FailedState.feature.cs", label="storage == null", span="70-70"];
m6_8 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="FailedState.feature.cs", label="throw new ArgumentNullException(''storage'');", span="70-70"];
m6_9 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="FailedState.feature.cs", label="stateMachineFactory == null", span="71-71"];
m6_10 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="FailedState.feature.cs", label="throw new ArgumentNullException(''stateMachineFactory'');", span="71-71"];
m6_2 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="FailedState.feature.cs", label="throw new ArgumentNullException(''storage'');", span="37-37"];
m6_4 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="FailedState.feature.cs", label="throw new ArgumentNullException(''jobId'');", span="38-38"];
m6_6 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="FailedState.feature.cs", label="Entry Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", span="65-65"];
m6_11 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="FailedState.feature.cs", label="process == null", span="72-72"];
m6_30 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="FailedState.feature.cs", label=_disposed, span="78-78"];
m6_35 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", color=green, community=0, file="FailedState.feature.cs", label="Exit Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", prediction=69, span="76-76"];
m6_36 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", color=green, community=0, file="FailedState.feature.cs", label="Hangfire.SqlServer.SqlServerFetchedJob", prediction=70, span=""];
m6_37 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="FailedState.feature.cs", label="state == null", span="105-105"];
m6_38 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="FailedState.feature.cs", label="throw new ArgumentNullException(''state'');", span="105-105"];
m6_39 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="FailedState.feature.cs", label="var connection = _storage.GetConnection()", span="107-107"];
m6_40 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="FailedState.feature.cs", label="var stateMachine = _stateMachineFactory.Create(connection)", span="109-109"];
m6_41 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="FailedState.feature.cs", label="return stateMachine.ChangeState(jobId, state, fromState != null ? new[] { fromState } : null);", span="110-110"];
m6_42 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="FailedState.feature.cs", label="Exit Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="102-102"];
m6_21 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="FailedState.feature.cs", label="state == null", span="83-83"];
m6_44 [cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="FailedState.feature.cs", label="Entry Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="24-24"];
m6_29 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="FailedState.feature.cs", label="Exit Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="80-80"];
m6_31 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachineFactory, Hangfire.Common.Job, Hangfire.States.IState)", file="FailedState.feature.cs", label="Entry Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachineFactory, Hangfire.Common.Job, Hangfire.States.IState)", span="46-46"];
m6_13 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="FailedState.feature.cs", label="_storage = storage", span="74-74"];
m6_14 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="FailedState.feature.cs", label="_stateMachineFactory = stateMachineFactory", span="75-75"];
m6_15 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="FailedState.feature.cs", label="_process = process", span="76-76"];
m6_16 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="FailedState.feature.cs", label="Exit Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", span="65-65"];
m6_26 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="FailedState.feature.cs", label="return context.JobId;", span="92-92"];
m6_18 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="FailedState.feature.cs", label="Entry Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="80-80"];
m6_19 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", color=green, community=0, file="FailedState.feature.cs", label="job == null", prediction=70, span="82-82"];
m6_20 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", color=green, community=0, file="FailedState.feature.cs", label="throw new ArgumentNullException(''job'');", prediction=72, span="82-82"];
m6_27 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="FailedState.feature.cs", label=Exception, span="95-95"];
m6_28 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="FailedState.feature.cs", label="throw new CreateJobFailedException(''Job creation process has bee failed. See inner exception for details'', ex);", span="97-97"];
m6_43 [cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", file="FailedState.feature.cs", label="Entry Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", span="22-22"];
m6_45 [file="FailedState.feature.cs", label="Hangfire.BackgroundJobClient", span=""];
m7_25 [cluster="Unk.OnScenarioStart", file="JobClient.feature.cs", label="Entry Unk.OnScenarioStart", span=""];
m7_29 [cluster="Unk.CollectScenarioErrors", file="JobClient.feature.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m7_86 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyIdShouldCauseAnException()", file="JobClient.feature.cs", label="Entry HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyIdShouldCauseAnException()", span="202-202"];
m7_88 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyIdShouldCauseAnException()", file="JobClient.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="206-206"];
m7_89 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyIdShouldCauseAnException()", file="JobClient.feature.cs", label="this.FeatureBackground()", span="208-208"];
m7_92 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyIdShouldCauseAnException()", file="JobClient.feature.cs", label="this.ScenarioCleanup()", span="214-214"];
m7_87 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyIdShouldCauseAnException()", file="JobClient.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Creating a job with an empty id should cause an exception'', ((string[])(null)))", span="204-204"];
m7_90 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyIdShouldCauseAnException()", file="JobClient.feature.cs", label="testRunner.When(''I create a job with an empty id'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="210-210"];
m7_91 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyIdShouldCauseAnException()", file="JobClient.feature.cs", label="testRunner.Then(''a \'System.ArgumentNullException\' should be thrown by the client'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="212-212"];
m7_93 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyIdShouldCauseAnException()", file="JobClient.feature.cs", label="Exit HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyIdShouldCauseAnException()", span="202-202"];
m7_30 [cluster="HangFire.Tests.Client.JobClientFeature.FeatureBackground()", file="JobClient.feature.cs", label="Entry HangFire.Tests.Client.JobClientFeature.FeatureBackground()", span="71-71"];
m7_31 [cluster="HangFire.Tests.Client.JobClientFeature.FeatureBackground()", file="JobClient.feature.cs", label="testRunner.Given(''a client'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="75-75"];
m7_32 [cluster="HangFire.Tests.Client.JobClientFeature.FeatureBackground()", file="JobClient.feature.cs", label="Exit HangFire.Tests.Client.JobClientFeature.FeatureBackground()", span="71-71"];
m7_94 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyTypeShouldCauseAnException()", file="JobClient.feature.cs", label="Entry HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyTypeShouldCauseAnException()", span="220-220"];
m7_96 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyTypeShouldCauseAnException()", file="JobClient.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="224-224"];
m7_97 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyTypeShouldCauseAnException()", file="JobClient.feature.cs", label="this.FeatureBackground()", span="226-226"];
m7_100 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyTypeShouldCauseAnException()", file="JobClient.feature.cs", label="this.ScenarioCleanup()", span="232-232"];
m7_95 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyTypeShouldCauseAnException()", file="JobClient.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Creating a job with an empty type should cause an exception'', ((string[])(null)))", span="222-222"];
m7_98 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyTypeShouldCauseAnException()", file="JobClient.feature.cs", label="testRunner.When(''I create a job with null type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="228-228"];
m7_99 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyTypeShouldCauseAnException()", file="JobClient.feature.cs", label="testRunner.Then(''a \'System.ArgumentNullException\' should be thrown by the client'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="230-230"];
m7_101 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyTypeShouldCauseAnException()", file="JobClient.feature.cs", label="Exit HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyTypeShouldCauseAnException()", span="220-220"];
m7_3 [cluster="HangFire.Web.BatchCommandHandler.ProcessRequest()", file="JobClient.feature.cs", label="Entry HangFire.Web.BatchCommandHandler.ProcessRequest()", span="31-31"];
m7_4 [cluster="HangFire.Web.BatchCommandHandler.ProcessRequest()", file="JobClient.feature.cs", label="var request = HttpContext.Current.Request", span="33-33"];
m7_5 [cluster="HangFire.Web.BatchCommandHandler.ProcessRequest()", file="JobClient.feature.cs", label="var jobIds = request.Form.GetValues(''jobs[]'')", span="34-34"];
m7_6 [cluster="HangFire.Web.BatchCommandHandler.ProcessRequest()", file="JobClient.feature.cs", label="jobIds == null", span="36-36"];
m7_9 [cluster="HangFire.Web.BatchCommandHandler.ProcessRequest()", file="JobClient.feature.cs", label=jobIds, span="42-42"];
m7_7 [cluster="HangFire.Web.BatchCommandHandler.ProcessRequest()", file="JobClient.feature.cs", label="Response.StatusCode = 422", span="38-38"];
m7_8 [cluster="HangFire.Web.BatchCommandHandler.ProcessRequest()", file="JobClient.feature.cs", label="return;", span="39-39"];
m7_10 [cluster="HangFire.Web.BatchCommandHandler.ProcessRequest()", file="JobClient.feature.cs", label="_command(jobId)", span="44-44"];
m7_11 [cluster="HangFire.Web.BatchCommandHandler.ProcessRequest()", file="JobClient.feature.cs", label="Response.StatusCode = (int)HttpStatusCode.NoContent", span="47-47"];
m7_12 [cluster="HangFire.Web.BatchCommandHandler.ProcessRequest()", file="JobClient.feature.cs", label="Exit HangFire.Web.BatchCommandHandler.ProcessRequest()", span="31-31"];
m7_34 [cluster="HangFire.Tests.Client.JobClientFeature.TheClientCreatesShouldCreateAJobInTheStorage()", file="JobClient.feature.cs", label="Entry HangFire.Tests.Client.JobClientFeature.TheClientCreatesShouldCreateAJobInTheStorage()", span="82-82"];
m7_36 [cluster="HangFire.Tests.Client.JobClientFeature.TheClientCreatesShouldCreateAJobInTheStorage()", file="JobClient.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="86-86"];
m7_37 [cluster="HangFire.Tests.Client.JobClientFeature.TheClientCreatesShouldCreateAJobInTheStorage()", file="JobClient.feature.cs", label="this.FeatureBackground()", span="88-88"];
m7_40 [cluster="HangFire.Tests.Client.JobClientFeature.TheClientCreatesShouldCreateAJobInTheStorage()", file="JobClient.feature.cs", label="this.ScenarioCleanup()", span="94-94"];
m7_35 [cluster="HangFire.Tests.Client.JobClientFeature.TheClientCreatesShouldCreateAJobInTheStorage()", file="JobClient.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The client creates should create a job in the storage'', ((string[])(null)))", span="84-84"];
m7_38 [cluster="HangFire.Tests.Client.JobClientFeature.TheClientCreatesShouldCreateAJobInTheStorage()", file="JobClient.feature.cs", label="testRunner.When(''I create a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="90-90"];
m7_39 [cluster="HangFire.Tests.Client.JobClientFeature.TheClientCreatesShouldCreateAJobInTheStorage()", file="JobClient.feature.cs", label="testRunner.Then(''the storage should contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="92-92"];
m7_41 [cluster="HangFire.Tests.Client.JobClientFeature.TheClientCreatesShouldCreateAJobInTheStorage()", file="JobClient.feature.cs", label="Exit HangFire.Tests.Client.JobClientFeature.TheClientCreatesShouldCreateAJobInTheStorage()", span="82-82"];
m7_13 [cluster="Unk.GetValues", file="JobClient.feature.cs", label="Entry Unk.GetValues", span=""];
m7_43 [cluster="Unk.When", file="JobClient.feature.cs", label="Entry Unk.When", span=""];
m7_0 [cluster="HangFire.Web.BatchCommandHandler.BatchCommandHandler(System.Action<string>)", file="JobClient.feature.cs", label="Entry HangFire.Web.BatchCommandHandler.BatchCommandHandler(System.Action<string>)", span="26-26"];
m7_1 [cluster="HangFire.Web.BatchCommandHandler.BatchCommandHandler(System.Action<string>)", file="JobClient.feature.cs", label="_command = command", span="28-28"];
m7_2 [cluster="HangFire.Web.BatchCommandHandler.BatchCommandHandler(System.Action<string>)", file="JobClient.feature.cs", label="Exit HangFire.Web.BatchCommandHandler.BatchCommandHandler(System.Action<string>)", span="26-26"];
m7_56 [cluster="Unk.AddRow", file="JobClient.feature.cs", label="Entry Unk.AddRow", span=""];
m7_45 [cluster="HangFire.Tests.Client.JobClientFeature.TheJobShouldContainTheTypeParameterThatIsEqualToTheAssemblyQualifiedTypeName()", file="JobClient.feature.cs", label="Entry HangFire.Tests.Client.JobClientFeature.TheJobShouldContainTheTypeParameterThatIsEqualToTheAssemblyQualifiedTypeName()", span="101-101"];
m7_47 [cluster="HangFire.Tests.Client.JobClientFeature.TheJobShouldContainTheTypeParameterThatIsEqualToTheAssemblyQualifiedTypeName()", file="JobClient.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="106-106"];
m7_48 [cluster="HangFire.Tests.Client.JobClientFeature.TheJobShouldContainTheTypeParameterThatIsEqualToTheAssemblyQualifiedTypeName()", file="JobClient.feature.cs", label="this.FeatureBackground()", span="108-108"];
m7_53 [cluster="HangFire.Tests.Client.JobClientFeature.TheJobShouldContainTheTypeParameterThatIsEqualToTheAssemblyQualifiedTypeName()", file="JobClient.feature.cs", label="this.ScenarioCleanup()", span="121-121"];
m7_46 [cluster="HangFire.Tests.Client.JobClientFeature.TheJobShouldContainTheTypeParameterThatIsEqualToTheAssemblyQualifiedTypeName()", file="JobClient.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The job should contain the \'Type\' parameter that is equal to the assembly qualifi'' +\r\n                    ''ed type name'', ((string[])(null)))", span="103-104"];
m7_49 [cluster="HangFire.Tests.Client.JobClientFeature.TheJobShouldContainTheTypeParameterThatIsEqualToTheAssemblyQualifiedTypeName()", file="JobClient.feature.cs", label="testRunner.When(''I create a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="110-110"];
m7_52 [cluster="HangFire.Tests.Client.JobClientFeature.TheJobShouldContainTheTypeParameterThatIsEqualToTheAssemblyQualifiedTypeName()", file="JobClient.feature.cs", label="testRunner.Then(''it should have the following parameters:'', ((string)(null)), table1, ''Then '')", span="119-119"];
m7_50 [cluster="HangFire.Tests.Client.JobClientFeature.TheJobShouldContainTheTypeParameterThatIsEqualToTheAssemblyQualifiedTypeName()", file="JobClient.feature.cs", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="112-114"];
m7_51 [cluster="HangFire.Tests.Client.JobClientFeature.TheJobShouldContainTheTypeParameterThatIsEqualToTheAssemblyQualifiedTypeName()", file="JobClient.feature.cs", label="table1.AddRow(new string[] {\r\n                        ''Type'',\r\n                        ''<Assembly qualified name of \'HangFire.Tests.TestJob\' type>''})", span="115-117"];
m7_54 [cluster="HangFire.Tests.Client.JobClientFeature.TheJobShouldContainTheTypeParameterThatIsEqualToTheAssemblyQualifiedTypeName()", file="JobClient.feature.cs", label="Exit HangFire.Tests.Client.JobClientFeature.TheJobShouldContainTheTypeParameterThatIsEqualToTheAssemblyQualifiedTypeName()", span="101-101"];
m7_14 [cluster="Unk._command", file="JobClient.feature.cs", label="Entry Unk._command", span=""];
m7_78 [cluster="HangFire.Tests.Client.JobClientFeature.TheSpecifiedStateShouldBeAppliedToTheJob()", file="JobClient.feature.cs", label="Entry HangFire.Tests.Client.JobClientFeature.TheSpecifiedStateShouldBeAppliedToTheJob()", span="184-184"];
m7_80 [cluster="HangFire.Tests.Client.JobClientFeature.TheSpecifiedStateShouldBeAppliedToTheJob()", file="JobClient.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="188-188"];
m7_81 [cluster="HangFire.Tests.Client.JobClientFeature.TheSpecifiedStateShouldBeAppliedToTheJob()", file="JobClient.feature.cs", label="this.FeatureBackground()", span="190-190"];
m7_84 [cluster="HangFire.Tests.Client.JobClientFeature.TheSpecifiedStateShouldBeAppliedToTheJob()", file="JobClient.feature.cs", label="this.ScenarioCleanup()", span="196-196"];
m7_79 [cluster="HangFire.Tests.Client.JobClientFeature.TheSpecifiedStateShouldBeAppliedToTheJob()", file="JobClient.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The specified state should be applied to the job'', ((string[])(null)))", span="186-186"];
m7_82 [cluster="HangFire.Tests.Client.JobClientFeature.TheSpecifiedStateShouldBeAppliedToTheJob()", file="JobClient.feature.cs", label="testRunner.When(''I create a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="192-192"];
m7_83 [cluster="HangFire.Tests.Client.JobClientFeature.TheSpecifiedStateShouldBeAppliedToTheJob()", file="JobClient.feature.cs", label="testRunner.Then(''the given state should be applied to it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="194-194"];
m7_85 [cluster="HangFire.Tests.Client.JobClientFeature.TheSpecifiedStateShouldBeAppliedToTheJob()", file="JobClient.feature.cs", label="Exit HangFire.Tests.Client.JobClientFeature.TheSpecifiedStateShouldBeAppliedToTheJob()", span="184-184"];
m7_42 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="JobClient.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m7_67 [cluster="HangFire.Tests.Client.JobClientFeature.ArgumentsShouldBeConvertedToAJSONStringAndContainedInTheArgsParameter()", file="JobClient.feature.cs", label="Entry HangFire.Tests.Client.JobClientFeature.ArgumentsShouldBeConvertedToAJSONStringAndContainedInTheArgsParameter()", span="155-155"];
m7_69 [cluster="HangFire.Tests.Client.JobClientFeature.ArgumentsShouldBeConvertedToAJSONStringAndContainedInTheArgsParameter()", file="JobClient.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="160-160"];
m7_70 [cluster="HangFire.Tests.Client.JobClientFeature.ArgumentsShouldBeConvertedToAJSONStringAndContainedInTheArgsParameter()", file="JobClient.feature.cs", label="this.FeatureBackground()", span="162-162"];
m7_76 [cluster="HangFire.Tests.Client.JobClientFeature.ArgumentsShouldBeConvertedToAJSONStringAndContainedInTheArgsParameter()", file="JobClient.feature.cs", label="this.ScenarioCleanup()", span="178-178"];
m7_68 [cluster="HangFire.Tests.Client.JobClientFeature.ArgumentsShouldBeConvertedToAJSONStringAndContainedInTheArgsParameter()", file="JobClient.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Arguments should be converted to a JSON string and contained in the \'Args\' parame'' +\r\n                    ''ter'', ((string[])(null)))", span="157-158"];
m7_71 [cluster="HangFire.Tests.Client.JobClientFeature.ArgumentsShouldBeConvertedToAJSONStringAndContainedInTheArgsParameter()", file="JobClient.feature.cs", label="TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="164-166"];
m7_75 [cluster="HangFire.Tests.Client.JobClientFeature.ArgumentsShouldBeConvertedToAJSONStringAndContainedInTheArgsParameter()", file="JobClient.feature.cs", label="testRunner.Then(''the job should contain all of the above arguments in the JSON format'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="176-176"];
m7_72 [cluster="HangFire.Tests.Client.JobClientFeature.ArgumentsShouldBeConvertedToAJSONStringAndContainedInTheArgsParameter()", file="JobClient.feature.cs", label="table3.AddRow(new string[] {\r\n                        ''ArticleId'',\r\n                        ''5''})", span="167-169"];
m7_73 [cluster="HangFire.Tests.Client.JobClientFeature.ArgumentsShouldBeConvertedToAJSONStringAndContainedInTheArgsParameter()", file="JobClient.feature.cs", label="table3.AddRow(new string[] {\r\n                        ''State'',\r\n                        ''Deleted''})", span="170-172"];
m7_74 [cluster="HangFire.Tests.Client.JobClientFeature.ArgumentsShouldBeConvertedToAJSONStringAndContainedInTheArgsParameter()", file="JobClient.feature.cs", label="testRunner.When(''I create a job with the following arguments:'', ((string)(null)), table3, ''When '')", span="174-174"];
m7_77 [cluster="HangFire.Tests.Client.JobClientFeature.ArgumentsShouldBeConvertedToAJSONStringAndContainedInTheArgsParameter()", file="JobClient.feature.cs", label="Exit HangFire.Tests.Client.JobClientFeature.ArgumentsShouldBeConvertedToAJSONStringAndContainedInTheArgsParameter()", span="155-155"];
m7_57 [cluster="HangFire.Tests.Client.JobClientFeature.IfTheArgumentsWereNotProvidedTheArgsParameterShouldContainTheEmptyJSONValue()", file="JobClient.feature.cs", label="Entry HangFire.Tests.Client.JobClientFeature.IfTheArgumentsWereNotProvidedTheArgsParameterShouldContainTheEmptyJSONValue()", span="128-128"];
m7_59 [cluster="HangFire.Tests.Client.JobClientFeature.IfTheArgumentsWereNotProvidedTheArgsParameterShouldContainTheEmptyJSONValue()", file="JobClient.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="133-133"];
m7_60 [cluster="HangFire.Tests.Client.JobClientFeature.IfTheArgumentsWereNotProvidedTheArgsParameterShouldContainTheEmptyJSONValue()", file="JobClient.feature.cs", label="this.FeatureBackground()", span="135-135"];
m7_65 [cluster="HangFire.Tests.Client.JobClientFeature.IfTheArgumentsWereNotProvidedTheArgsParameterShouldContainTheEmptyJSONValue()", file="JobClient.feature.cs", label="this.ScenarioCleanup()", span="148-148"];
m7_58 [cluster="HangFire.Tests.Client.JobClientFeature.IfTheArgumentsWereNotProvidedTheArgsParameterShouldContainTheEmptyJSONValue()", file="JobClient.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''If the arguments were not provided, the \'Args\' parameter should contain the empty'' +\r\n                    '' JSON value'', ((string[])(null)))", span="130-131"];
m7_61 [cluster="HangFire.Tests.Client.JobClientFeature.IfTheArgumentsWereNotProvidedTheArgsParameterShouldContainTheEmptyJSONValue()", file="JobClient.feature.cs", label="testRunner.When(''I create an argumentless job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="137-137"];
m7_64 [cluster="HangFire.Tests.Client.JobClientFeature.IfTheArgumentsWereNotProvidedTheArgsParameterShouldContainTheEmptyJSONValue()", file="JobClient.feature.cs", label="testRunner.Then(''it should have the following parameters:'', ((string)(null)), table2, ''Then '')", span="146-146"];
m7_62 [cluster="HangFire.Tests.Client.JobClientFeature.IfTheArgumentsWereNotProvidedTheArgsParameterShouldContainTheEmptyJSONValue()", file="JobClient.feature.cs", label="TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="139-141"];
m7_63 [cluster="HangFire.Tests.Client.JobClientFeature.IfTheArgumentsWereNotProvidedTheArgsParameterShouldContainTheEmptyJSONValue()", file="JobClient.feature.cs", label="table2.AddRow(new string[] {\r\n                        ''Args'',\r\n                        ''{}''})", span="142-144"];
m7_66 [cluster="HangFire.Tests.Client.JobClientFeature.IfTheArgumentsWereNotProvidedTheArgsParameterShouldContainTheEmptyJSONValue()", file="JobClient.feature.cs", label="Exit HangFire.Tests.Client.JobClientFeature.IfTheArgumentsWereNotProvidedTheArgsParameterShouldContainTheEmptyJSONValue()", span="128-128"];
m7_44 [cluster="Unk.Then", file="JobClient.feature.cs", label="Entry Unk.Then", span=""];
m7_22 [cluster="HangFire.Tests.Client.JobClientFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobClient.feature.cs", label="Entry HangFire.Tests.Client.JobClientFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m7_23 [cluster="HangFire.Tests.Client.JobClientFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobClient.feature.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m7_24 [cluster="HangFire.Tests.Client.JobClientFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobClient.feature.cs", label="Exit HangFire.Tests.Client.JobClientFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m7_33 [cluster="Unk.Given", file="JobClient.feature.cs", label="Entry Unk.Given", span=""];
m7_102 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithTheTypeThatIsNotDerivedFromTheBackgroundJobShouldCauseAnException()", file="JobClient.feature.cs", label="Entry HangFire.Tests.Client.JobClientFeature.CreatingAJobWithTheTypeThatIsNotDerivedFromTheBackgroundJobShouldCauseAnException()", span="239-239"];
m7_104 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithTheTypeThatIsNotDerivedFromTheBackgroundJobShouldCauseAnException()", file="JobClient.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="244-244"];
m7_105 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithTheTypeThatIsNotDerivedFromTheBackgroundJobShouldCauseAnException()", file="JobClient.feature.cs", label="this.FeatureBackground()", span="246-246"];
m7_108 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithTheTypeThatIsNotDerivedFromTheBackgroundJobShouldCauseAnException()", file="JobClient.feature.cs", label="this.ScenarioCleanup()", span="252-252"];
m7_103 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithTheTypeThatIsNotDerivedFromTheBackgroundJobShouldCauseAnException()", file="JobClient.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Creating a job with the type, that is not derived from the \'BackgroundJob\' should'' +\r\n                    '' cause an exception'', ((string[])(null)))", span="241-242"];
m7_106 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithTheTypeThatIsNotDerivedFromTheBackgroundJobShouldCauseAnException()", file="JobClient.feature.cs", label="testRunner.When(''I create a job with the incorrect type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="248-248"];
m7_107 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithTheTypeThatIsNotDerivedFromTheBackgroundJobShouldCauseAnException()", file="JobClient.feature.cs", label="testRunner.Then(''a \'System.ArgumentException\' should be thrown by the client'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="250-250"];
m7_109 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithTheTypeThatIsNotDerivedFromTheBackgroundJobShouldCauseAnException()", file="JobClient.feature.cs", label="Exit HangFire.Tests.Client.JobClientFeature.CreatingAJobWithTheTypeThatIsNotDerivedFromTheBackgroundJobShouldCauseAnException()", span="239-239"];
m7_55 [cluster="TechTalk.SpecFlow.Table.cstr", file="JobClient.feature.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m7_26 [cluster="HangFire.Tests.Client.JobClientFeature.ScenarioCleanup()", file="JobClient.feature.cs", label="Entry HangFire.Tests.Client.JobClientFeature.ScenarioCleanup()", span="66-66"];
m7_27 [cluster="HangFire.Tests.Client.JobClientFeature.ScenarioCleanup()", file="JobClient.feature.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m7_28 [cluster="HangFire.Tests.Client.JobClientFeature.ScenarioCleanup()", file="JobClient.feature.cs", label="Exit HangFire.Tests.Client.JobClientFeature.ScenarioCleanup()", span="66-66"];
m7_110 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyStateShouldCauseAnException()", file="JobClient.feature.cs", label="Entry HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyStateShouldCauseAnException()", span="258-258"];
m7_116 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyStateShouldCauseAnException()", color=green, community=0, file="JobClient.feature.cs", label="this.ScenarioCleanup()", prediction=73, span="270-270"];
m7_115 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyStateShouldCauseAnException()", file="JobClient.feature.cs", label="testRunner.Then(''a \'System.ArgumentNullException\' should be thrown by the client'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="268-268"];
m7_112 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyStateShouldCauseAnException()", file="JobClient.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="262-262"];
m7_113 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyStateShouldCauseAnException()", file="JobClient.feature.cs", label="this.FeatureBackground()", span="264-264"];
m7_114 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyStateShouldCauseAnException()", file="JobClient.feature.cs", label="testRunner.When(''I create a job with an empty state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="266-266"];
m7_111 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyStateShouldCauseAnException()", file="JobClient.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Creating a job with an empty state should cause an exception'', ((string[])(null)))", span="260-260"];
m7_117 [cluster="HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyStateShouldCauseAnException()", file="JobClient.feature.cs", label="Exit HangFire.Tests.Client.JobClientFeature.CreatingAJobWithAnEmptyStateShouldCauseAnException()", span="258-258"];
m7_15 [file="JobClient.feature.cs", label="HangFire.Web.BatchCommandHandler", span=""];
m7_118 [file="JobClient.feature.cs", label="HangFire.Tests.Client.JobClientFeature", span=""];
m8_0 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreatedContextFacts()", file="JobClientSteps.cs", label="Entry Hangfire.Core.Tests.Client.CreatedContextFacts.CreatedContextFacts()", span="15-15"];
m8_1 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreatedContextFacts()", file="JobClientSteps.cs", label="_exception = new Exception()", span="17-17"];
m8_53 [cluster="Unk.TestMethod", file="JobClientSteps.cs", label="Entry Unk.TestMethod", span=""];
m8_7 [cluster="Unk.>", file="JobClientSteps.cs", label="Entry Unk.>", span=""];
m8_22 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", file="JobClientSteps.cs", label="Entry Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", span="38-38"];
m8_23 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", file="JobClientSteps.cs", label="var context = CreateContext()", span="40-40"];
m8_24 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", file="JobClientSteps.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => context.SetJobParameter(null, null))", span="42-43"];
m8_25 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", file="JobClientSteps.cs", label="Assert.Equal(''name'', exception.ParamName)", span="45-45"];
m8_26 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", file="JobClientSteps.cs", label="Exit Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", span="38-38"];
m8_47 [cluster="Unk.FromExpression", file="JobClientSteps.cs", label="Entry Unk.FromExpression", span=""];
m8_48 [cluster="Mock<IState>.cstr", file="JobClientSteps.cs", label="Entry Mock<IState>.cstr", span=""];
m8_2 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreatedContextFacts()", file="JobClientSteps.cs", label="Exit Hangfire.Core.Tests.Client.CreatedContextFacts.CreatedContextFacts()", span="15-15"];
m8_20 [cluster="Unk.Same", file="JobClientSteps.cs", label="Entry Unk.Same", span=""];
m8_19 [cluster="Unk.True", file="JobClientSteps.cs", label="Entry Unk.True", span=""];
m8_21 [cluster="Unk.Equal", file="JobClientSteps.cs", label="Entry Unk.Equal", span=""];
m8_3 [cluster="System.Exception.Exception()", file="JobClientSteps.cs", label="Entry System.Exception.Exception()", span="0-0"];
m8_4 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", file="JobClientSteps.cs", label="Entry Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", span="21-21"];
m8_5 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", file="JobClientSteps.cs", label="Assert.Throws<NullReferenceException>(\r\n                () => new CreatedContext(null, JobId, false, null))", span="23-24"];
m8_6 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", file="JobClientSteps.cs", label="Exit Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", span="21-21"];
m8_11 [cluster="Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, string, bool, System.Exception)", file="JobClientSteps.cs", label="Entry Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, string, bool, System.Exception)", span="27-27"];
m8_12 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", file="JobClientSteps.cs", label="Entry Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", span="28-28"];
m8_13 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", file="JobClientSteps.cs", label="var context = CreateContext()", span="30-30"];
m8_15 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", file="JobClientSteps.cs", label="Assert.Same(_exception, context.Exception)", span="33-33"];
m8_14 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", file="JobClientSteps.cs", label="Assert.True(context.Canceled)", span="32-32"];
m8_16 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", file="JobClientSteps.cs", label="Assert.Equal(JobId, context.JobId)", span="34-34"];
m8_17 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", file="JobClientSteps.cs", label="Exit Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", span="28-28"];
m8_46 [cluster="Mock<IStorageConnection>.cstr", file="JobClientSteps.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m8_35 [cluster="lambda expression", file="JobClientSteps.cs", label="Entry lambda expression", span="56-56"];
m8_50 [cluster="lambda expression", file="JobClientSteps.cs", label="Entry lambda expression", span="64-64"];
m8_51 [cluster="lambda expression", color=green, community=0, file="JobClientSteps.cs", label="TestMethod()", prediction=74, span="64-64"];
m8_52 [cluster="lambda expression", file="JobClientSteps.cs", label="Exit lambda expression", span="64-64"];
m8_9 [cluster="lambda expression", file="JobClientSteps.cs", label="new CreatedContext(null, JobId, false, null)", span="24-24"];
m8_28 [cluster="lambda expression", file="JobClientSteps.cs", label="context.SetJobParameter(null, null)", span="43-43"];
m8_36 [cluster="lambda expression", file="JobClientSteps.cs", label="context.SetJobParameter(''name'', ''value'')", span="56-56"];
m8_8 [cluster="lambda expression", file="JobClientSteps.cs", label="Entry lambda expression", span="24-24"];
m8_10 [cluster="lambda expression", file="JobClientSteps.cs", label="Exit lambda expression", span="24-24"];
m8_27 [cluster="lambda expression", file="JobClientSteps.cs", label="Entry lambda expression", span="43-43"];
m8_29 [cluster="lambda expression", file="JobClientSteps.cs", label="Exit lambda expression", span="43-43"];
m8_37 [cluster="lambda expression", file="JobClientSteps.cs", label="Exit lambda expression", span="56-56"];
m8_49 [cluster="CreateContext.cstr", file="JobClientSteps.cs", label="Entry CreateContext.cstr", span=""];
m8_31 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_AfterCreateJobWasCalled()", file="JobClientSteps.cs", label="Entry Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_AfterCreateJobWasCalled()", span="49-49"];
m8_32 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_AfterCreateJobWasCalled()", file="JobClientSteps.cs", label="var context = CreateContext()", span="53-53"];
m8_33 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_AfterCreateJobWasCalled()", file="JobClientSteps.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => context.SetJobParameter(''name'', ''value''))", span="55-56"];
m8_34 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_AfterCreateJobWasCalled()", file="JobClientSteps.cs", label="Exit Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_AfterCreateJobWasCalled()", span="49-49"];
m8_30 [cluster="Hangfire.Client.CreateContext.SetJobParameter(string, object)", file="JobClientSteps.cs", label="Entry Hangfire.Client.CreateContext.SetJobParameter(string, object)", span="96-96"];
m8_18 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", file="JobClientSteps.cs", label="Entry Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", span="61-61"];
m8_40 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", color=green, community=0, file="JobClientSteps.cs", label="var connection = new Mock<IStorageConnection>()", prediction=75, span="63-63"];
m8_41 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", color=green, community=0, file="JobClientSteps.cs", label="var job = Job.FromExpression(() => TestMethod())", prediction=76, span="64-64"];
m8_43 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", color=green, community=0, file="JobClientSteps.cs", label="var createContext = new CreateContext(connection.Object, job, state.Object)", prediction=77, span="67-67"];
m8_42 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", color=green, community=0, file="JobClientSteps.cs", label="var state = new Mock<IState>()", prediction=78, span="65-65"];
m8_44 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", color=green, community=0, file="JobClientSteps.cs", label="return new CreatedContext(createContext, JobId, true, _exception);", prediction=74, span="68-68"];
m8_45 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", file="JobClientSteps.cs", label="Exit Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", span="61-61"];
m8_56 [file="JobClientSteps.cs", label="Hangfire.Core.Tests.Client.CreatedContextFacts", span=""];
m8_57 [file="JobClientSteps.cs", label=context, span=""];
m8_58 [file="JobClientSteps.cs", label=context, span=""];
m9_18 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="JobFetcher.feature.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m9_164 [cluster="Metric.cstr", file="JobFetcher.feature.cs", label="Entry Metric.cstr", span=""];
m9_26 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", span="96-96"];
m9_29 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", color=green, community=0, file="JobFetcher.feature.cs", label="_existingConnection = existingConnection", prediction=80, span="100-100"];
m9_27 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", file="JobFetcher.feature.cs", label="existingConnection == null", span="98-98"];
m9_30 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", file="JobFetcher.feature.cs", label="_options = new SqlServerStorageOptions()", span="101-101"];
m9_31 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", file="JobFetcher.feature.cs", label="InitializeQueueProviders()", span="103-103"];
m9_28 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", file="JobFetcher.feature.cs", label="throw new ArgumentNullException(''existingConnection'');", span="98-98"];
m9_32 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", file="JobFetcher.feature.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", span="96-96"];
m9_23 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="218-218"];
m9_120 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="JobFetcher.feature.cs", label="_existingConnection != null", span="220-220"];
m9_121 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="JobFetcher.feature.cs", label="return _existingConnection;", span="222-222"];
m9_122 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="JobFetcher.feature.cs", label="var connection = new SqlConnection(_connectionString)", span="225-225"];
m9_123 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="JobFetcher.feature.cs", label="connection.Open()", span="226-226"];
m9_124 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="JobFetcher.feature.cs", label="return connection;", span="228-228"];
m9_125 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="JobFetcher.feature.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="218-218"];
m9_146 [cluster="string.Contains(string)", file="JobFetcher.feature.cs", label="Entry string.Contains(string)", span="0-0"];
m9_128 [cluster="Hangfire.SqlServer.SqlServerStorage.ReleaseConnection(IDbConnection)", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.ReleaseConnection(IDbConnection)", span="231-231"];
m9_129 [cluster="Hangfire.SqlServer.SqlServerStorage.ReleaseConnection(IDbConnection)", file="JobFetcher.feature.cs", label="connection != null && !ReferenceEquals(connection, _existingConnection)", span="233-233"];
m9_130 [cluster="Hangfire.SqlServer.SqlServerStorage.ReleaseConnection(IDbConnection)", file="JobFetcher.feature.cs", label="connection.Dispose()", span="235-235"];
m9_131 [cluster="Hangfire.SqlServer.SqlServerStorage.ReleaseConnection(IDbConnection)", file="JobFetcher.feature.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.ReleaseConnection(IDbConnection)", span="231-231"];
m9_143 [cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.PersistentJobQueueProviderCollection(Hangfire.SqlServer.IPersistentJobQueueProvider)", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.PersistentJobQueueProviderCollection(Hangfire.SqlServer.IPersistentJobQueueProvider)", span="31-31"];
m9_156 [cluster="Hangfire.Dashboard.Metric.Metric(string)", file="JobFetcher.feature.cs", label="Entry Hangfire.Dashboard.Metric.Metric(string)", span="20-20"];
m9_77 [cluster="System.Text.StringBuilder.Append(string)", file="JobFetcher.feature.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m9_73 [cluster="Unk.ToDictionary", file="JobFetcher.feature.cs", label="Entry Unk.ToDictionary", span=""];
m9_42 [cluster="Hangfire.SqlServer.SqlServerStorage.GetComponents()", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.GetComponents()", span="118-118"];
m9_43 [cluster="Hangfire.SqlServer.SqlServerStorage.GetComponents()", file="JobFetcher.feature.cs", label="yield return new ExpirationManager(this, _options.JobExpirationCheckInterval);", span="120-120"];
m9_44 [cluster="Hangfire.SqlServer.SqlServerStorage.GetComponents()", file="JobFetcher.feature.cs", label="yield return new CountersAggregator(this, _options.CountersAggregateInterval);", span="121-121"];
m9_45 [cluster="Hangfire.SqlServer.SqlServerStorage.GetComponents()", file="JobFetcher.feature.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.GetComponents()", span="118-118"];
m9_33 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="25-25"];
m9_22 [cluster="string.Format(string, object)", file="JobFetcher.feature.cs", label="Entry string.Format(string, object)", span="0-0"];
m9_0 [cluster="HangFire.Client.IJobClient.CreateJob(HangFire.Common.JobMethod, string[], HangFire.Common.States.JobState)", file="JobFetcher.feature.cs", label="Entry HangFire.Client.IJobClient.CreateJob(HangFire.Common.JobMethod, string[], HangFire.Common.States.JobState)", span="24-24"];
m9_1 [cluster="HangFire.Client.IJobClient.CreateJob(HangFire.Common.JobMethod, string[], HangFire.Common.States.JobState)", file="JobFetcher.feature.cs", label="Exit HangFire.Client.IJobClient.CreateJob(HangFire.Common.JobMethod, string[], HangFire.Common.States.JobState)", span="24-24"];
m9_76 [cluster="Unk.Append", file="JobFetcher.feature.cs", label="Entry Unk.Append", span=""];
m9_162 [cluster="Unk.>", file="JobFetcher.feature.cs", label="Entry Unk.>", span=""];
m9_74 [cluster="System.Text.StringBuilder.StringBuilder()", file="JobFetcher.feature.cs", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
m9_104 [cluster="System.Func<T, TResult>.Invoke(T)", file="JobFetcher.feature.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m9_38 [cluster="Hangfire.SqlServer.SqlServerStorage.GetConnection()", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.GetConnection()", span="113-113"];
m9_39 [cluster="Hangfire.SqlServer.SqlServerStorage.GetConnection()", file="JobFetcher.feature.cs", label="return new SqlServerConnection(this);", span="115-115"];
m9_40 [cluster="Hangfire.SqlServer.SqlServerStorage.GetConnection()", file="JobFetcher.feature.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.GetConnection()", span="113-113"];
m9_21 [cluster="System.ArgumentException.ArgumentException(string)", file="JobFetcher.feature.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m9_48 [cluster="Hangfire.SqlServer.SqlServerStorage.WriteOptionsToLog(Hangfire.Logging.ILog)", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.WriteOptionsToLog(Hangfire.Logging.ILog)", span="124-124"];
m9_50 [cluster="Hangfire.SqlServer.SqlServerStorage.WriteOptionsToLog(Hangfire.Logging.ILog)", file="JobFetcher.feature.cs", label="logger.InfoFormat(''    Queue poll interval: {0}.'', _options.QueuePollInterval)", span="127-127"];
m9_51 [cluster="Hangfire.SqlServer.SqlServerStorage.WriteOptionsToLog(Hangfire.Logging.ILog)", file="JobFetcher.feature.cs", label="logger.InfoFormat(''    Invisibility timeout: {0}.'', _options.InvisibilityTimeout)", span="128-128"];
m9_49 [cluster="Hangfire.SqlServer.SqlServerStorage.WriteOptionsToLog(Hangfire.Logging.ILog)", file="JobFetcher.feature.cs", label="logger.Info(''Using the following options for SQL Server job storage:'')", span="126-126"];
m9_52 [cluster="Hangfire.SqlServer.SqlServerStorage.WriteOptionsToLog(Hangfire.Logging.ILog)", file="JobFetcher.feature.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.WriteOptionsToLog(Hangfire.Logging.ILog)", span="124-124"];
m9_127 [cluster="Unk.Open", file="JobFetcher.feature.cs", label="Entry Unk.Open", span=""];
m9_84 [cluster="Unk.Trim", file="JobFetcher.feature.cs", label="Entry Unk.Trim", span=""];
m9_132 [cluster="Unk.ReferenceEquals", file="JobFetcher.feature.cs", label="Entry Unk.ReferenceEquals", span=""];
m9_126 [cluster="SqlConnection.cstr", file="JobFetcher.feature.cs", label="Entry SqlConnection.cstr", span=""];
m9_37 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", span="35-35"];
m9_91 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", span="174-174"];
m9_92 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", file="JobFetcher.feature.cs", label="UseConnection(connection =>\r\n            {\r\n                action(connection);\r\n                return true;\r\n            })", span="176-180"];
m9_93 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", file="JobFetcher.feature.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", span="174-174"];
m9_20 [cluster="Hangfire.SqlServer.SqlServerStorage.IsConnectionStringInConfiguration(string)", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.IsConnectionStringInConfiguration(string)", span="258-258"];
m9_147 [cluster="Hangfire.SqlServer.SqlServerStorage.IsConnectionStringInConfiguration(string)", file="JobFetcher.feature.cs", label="var connectionStringSetting = ConfigurationManager.ConnectionStrings[connectionStringName]", span="260-260"];
m9_148 [cluster="Hangfire.SqlServer.SqlServerStorage.IsConnectionStringInConfiguration(string)", file="JobFetcher.feature.cs", label="return connectionStringSetting != null;", span="262-262"];
m9_149 [cluster="Hangfire.SqlServer.SqlServerStorage.IsConnectionStringInConfiguration(string)", file="JobFetcher.feature.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.IsConnectionStringInConfiguration(string)", span="258-258"];
m9_105 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction(System.Action<SqlConnection>)", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseTransaction(System.Action<SqlConnection>)", span="198-198"];
m9_106 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction(System.Action<SqlConnection>)", color=green, community=0, file="JobFetcher.feature.cs", label="UseTransaction(connection =>\r\n            {\r\n                action(connection);\r\n                return true;\r\n            }, null)", prediction=81, span="200-204"];
m9_107 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction(System.Action<SqlConnection>)", file="JobFetcher.feature.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.UseTransaction(System.Action<SqlConnection>)", span="198-198"];
m9_99 [cluster="System.Action<T>.Invoke(T)", file="JobFetcher.feature.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m9_165 [cluster="Unk.ToString", file="JobFetcher.feature.cs", label="Entry Unk.ToString", span=""];
m9_142 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", span="27-27"];
m9_119 [cluster="Unk.Complete", file="JobFetcher.feature.cs", label="Entry Unk.Complete", span=""];
m9_24 [cluster="Hangfire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", span="35-35"];
m9_133 [cluster="Unk.Dispose", file="JobFetcher.feature.cs", label="Entry Unk.Dispose", span=""];
m9_54 [cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", file="JobFetcher.feature.cs", label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="210-210"];
m9_71 [cluster="string.Split(char[], System.StringSplitOptions)", file="JobFetcher.feature.cs", label="Entry string.Split(char[], System.StringSplitOptions)", span="0-0"];
m9_46 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="47-47"];
m9_166 [cluster="lambda expression", file="JobFetcher.feature.cs", label="Entry lambda expression", span="290-307"];
m9_109 [cluster="lambda expression", file="JobFetcher.feature.cs", label="Entry lambda expression", span="200-204"];
m9_78 [cluster="lambda expression", file="JobFetcher.feature.cs", label="Entry lambda expression", span="138-138"];
m9_81 [cluster="lambda expression", file="JobFetcher.feature.cs", label="Entry lambda expression", span="139-139"];
m9_85 [cluster="lambda expression", file="JobFetcher.feature.cs", label="Entry lambda expression", span="140-140"];
m9_88 [cluster="lambda expression", file="JobFetcher.feature.cs", label="Entry lambda expression", span="140-140"];
m9_110 [cluster="lambda expression", file="JobFetcher.feature.cs", label="action(connection)", span="202-202"];
m9_112 [cluster="lambda expression", file="JobFetcher.feature.cs", label="Exit lambda expression", span="200-204"];
m9_95 [cluster="lambda expression", file="JobFetcher.feature.cs", label="Entry lambda expression", span="176-180"];
m9_79 [cluster="lambda expression", file="JobFetcher.feature.cs", label="x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries)", span="138-138"];
m9_80 [cluster="lambda expression", file="JobFetcher.feature.cs", label="Exit lambda expression", span="138-138"];
m9_83 [cluster="lambda expression", file="JobFetcher.feature.cs", label="Exit lambda expression", span="139-139"];
m9_82 [cluster="lambda expression", file="JobFetcher.feature.cs", label="new { Key = x[0].Trim(), Value = x[1].Trim() }", span="139-139"];
m9_87 [cluster="lambda expression", file="JobFetcher.feature.cs", label="Exit lambda expression", span="140-140"];
m9_86 [cluster="lambda expression", file="JobFetcher.feature.cs", label="x.Key", span="140-140"];
m9_90 [cluster="lambda expression", file="JobFetcher.feature.cs", label="Exit lambda expression", span="140-140"];
m9_89 [cluster="lambda expression", file="JobFetcher.feature.cs", label="x.Value", span="140-140"];
m9_154 [cluster="lambda expression", file="JobFetcher.feature.cs", label="return sqlStorage.UseConnection(connection =>\r\n                {\r\n                    var sqlQuery = @''\r\nselect count(*) from sys.sysprocesses\r\nwhere dbid = db_id(@name) and status != 'background' and status != 'sleeping''';\r\n\r\n                    var value = connection\r\n                        .Query<int>(sqlQuery, new { name = connection.Database })\r\n                        .Single();\r\n\r\n                    return new Metric(value.ToString(''N0''));\r\n                });", span="273-284"];
m9_170 [cluster="lambda expression", file="JobFetcher.feature.cs", label="return sqlStorage.UseConnection(connection =>\r\n                {\r\n                    var sqlQuery = @''\r\nselect count(*) from sys.sysprocesses\r\nwhere dbid = db_id(@name) and status != 'background''';\r\n\r\n                    var value = connection\r\n                        .Query<int>(sqlQuery, new { name = connection.Database })\r\n                        .Single();\r\n\r\n                    return new Metric(value.ToString(''N0''));\r\n                });", span="295-306"];
m9_111 [cluster="lambda expression", file="JobFetcher.feature.cs", label="return true;", span="203-203"];
m9_96 [cluster="lambda expression", file="JobFetcher.feature.cs", label="action(connection)", span="178-178"];
m9_98 [cluster="lambda expression", file="JobFetcher.feature.cs", label="Exit lambda expression", span="176-180"];
m9_151 [cluster="lambda expression", file="JobFetcher.feature.cs", label="var sqlStorage = page.Storage as SqlServerStorage", span="270-270"];
m9_152 [cluster="lambda expression", file="JobFetcher.feature.cs", label="sqlStorage == null", span="271-271"];
m9_155 [cluster="lambda expression", file="JobFetcher.feature.cs", label="Exit lambda expression", span="268-285"];
m9_157 [cluster="lambda expression", file="JobFetcher.feature.cs", label="Entry lambda expression", span="273-284"];
m9_167 [cluster="lambda expression", file="JobFetcher.feature.cs", label="var sqlStorage = page.Storage as SqlServerStorage", span="292-292"];
m9_168 [cluster="lambda expression", file="JobFetcher.feature.cs", label="sqlStorage == null", span="293-293"];
m9_171 [cluster="lambda expression", file="JobFetcher.feature.cs", label="Exit lambda expression", span="290-307"];
m9_172 [cluster="lambda expression", file="JobFetcher.feature.cs", label="Entry lambda expression", span="295-306"];
m9_97 [cluster="lambda expression", file="JobFetcher.feature.cs", label="return true;", span="179-179"];
m9_150 [cluster="lambda expression", file="JobFetcher.feature.cs", label="Entry lambda expression", span="268-285"];
m9_153 [cluster="lambda expression", file="JobFetcher.feature.cs", label="return new Metric(''???'');", span="271-271"];
m9_161 [cluster="lambda expression", file="JobFetcher.feature.cs", label="Exit lambda expression", span="273-284"];
m9_158 [cluster="lambda expression", file="JobFetcher.feature.cs", label="var sqlQuery = @''\r\nselect count(*) from sys.sysprocesses\r\nwhere dbid = db_id(@name) and status != 'background' and status != 'sleeping'''", span="275-277"];
m9_159 [cluster="lambda expression", file="JobFetcher.feature.cs", label="var value = connection\r\n                        .Query<int>(sqlQuery, new { name = connection.Database })\r\n                        .Single()", span="279-281"];
m9_169 [cluster="lambda expression", file="JobFetcher.feature.cs", label="return new Metric(''???'');", span="293-293"];
m9_173 [cluster="lambda expression", file="JobFetcher.feature.cs", label="var sqlQuery = @''\r\nselect count(*) from sys.sysprocesses\r\nwhere dbid = db_id(@name) and status != 'background'''", span="297-299"];
m9_174 [cluster="lambda expression", file="JobFetcher.feature.cs", label="var value = connection\r\n                        .Query<int>(sqlQuery, new { name = connection.Database })\r\n                        .Single()", span="301-303"];
m9_160 [cluster="lambda expression", file="JobFetcher.feature.cs", label="return new Metric(value.ToString(''N0''));", span="283-283"];
m9_175 [cluster="lambda expression", file="JobFetcher.feature.cs", label="return new Metric(value.ToString(''N0''));", span="305-305"];
m9_176 [cluster="lambda expression", file="JobFetcher.feature.cs", label="Exit lambda expression", span="295-306"];
m9_25 [cluster="Hangfire.SqlServer.SqlServerStorage.InitializeQueueProviders()", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.InitializeQueueProviders()", span="247-247"];
m9_139 [cluster="Hangfire.SqlServer.SqlServerStorage.InitializeQueueProviders()", file="JobFetcher.feature.cs", label="var defaultQueueProvider = new SqlServerJobQueueProvider(this, _options)", span="249-249"];
m9_140 [cluster="Hangfire.SqlServer.SqlServerStorage.InitializeQueueProviders()", file="JobFetcher.feature.cs", label="QueueProviders = new PersistentJobQueueProviderCollection(defaultQueueProvider)", span="250-250"];
m9_141 [cluster="Hangfire.SqlServer.SqlServerStorage.InitializeQueueProviders()", file="JobFetcher.feature.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.InitializeQueueProviders()", span="247-247"];
m9_34 [cluster="Hangfire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="108-108"];
m9_35 [cluster="Hangfire.SqlServer.SqlServerStorage.GetMonitoringApi()", color=green, community=0, file="JobFetcher.feature.cs", label="return new SqlServerMonitoringApi(this);", prediction=81, span="110-110"];
m9_36 [cluster="Hangfire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="JobFetcher.feature.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="108-108"];
m9_72 [cluster="Unk.Select", file="JobFetcher.feature.cs", label="Entry Unk.Select", span=""];
m9_53 [cluster="Hangfire.Logging.ILog.Info(string)", file="JobFetcher.feature.cs", label="Entry Hangfire.Logging.ILog.Info(string)", span="202-202"];
m9_55 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.ToString()", span="131-131"];
m9_60 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", color=green, community=0, file="JobFetcher.feature.cs", label="parts.ContainsKey(alias)", prediction=83, span="146-146"];
m9_57 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="JobFetcher.feature.cs", label="var parts = _connectionString.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)\r\n                    .Select(x => x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries))\r\n                    .Select(x => new { Key = x[0].Trim(), Value = x[1].Trim() })\r\n                    .ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase)", span="137-140"];
m9_59 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", color=green, community=0, file="JobFetcher.feature.cs", label="new[] { ''Data Source'', ''Server'', ''Address'', ''Addr'', ''Network Address'' }", prediction=84, span="144-144"];
m9_61 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="JobFetcher.feature.cs", label="builder.Append(parts[alias])", span="148-148"];
m9_58 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="JobFetcher.feature.cs", label="var builder = new StringBuilder()", span="142-142"];
m9_62 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="JobFetcher.feature.cs", label="builder.Length != 0", span="153-153"];
m9_68 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", color=green, community=0, file="JobFetcher.feature.cs", label=Exception, prediction=85, span="168-168"];
m9_69 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="JobFetcher.feature.cs", label="return canNotParseMessage;", span="170-170"];
m9_67 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="JobFetcher.feature.cs", label="return builder.Length != 0\r\n                    ? String.Format(''SQL Server: {0}'', builder)\r\n                    : canNotParseMessage;", span="164-166"];
m9_56 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="JobFetcher.feature.cs", label="string canNotParseMessage = ''<Connection string can not be parsed>''", span="133-133"];
m9_65 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="JobFetcher.feature.cs", label="parts.ContainsKey(alias)", span="157-157"];
m9_66 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="JobFetcher.feature.cs", label="builder.Append(parts[alias])", span="159-159"];
m9_63 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="JobFetcher.feature.cs", label="builder.Append(''@'')", span="153-153"];
m9_64 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="JobFetcher.feature.cs", label="new[] { ''Database'', ''Initial Catalog'' }", span="155-155"];
m9_70 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="JobFetcher.feature.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.ToString()", span="131-131"];
m9_47 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="34-34"];
m9_2 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", span="57-57"];
m9_12 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", color=green, community=0, file="JobFetcher.feature.cs", label="throw new ArgumentException(\r\n                    string.Format(''Could not find connection string with name '{0}' in application config file'',\r\n                                  nameOrConnectionString));", prediction=86, span="74-76"];
m9_10 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="JobFetcher.feature.cs", label="IsConnectionStringInConfiguration(nameOrConnectionString)", span="68-68"];
m9_16 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", color=green, community=0, file="JobFetcher.feature.cs", label="InitializeQueueProviders()", prediction=81, span="87-87"];
m9_13 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="JobFetcher.feature.cs", label="options.PrepareSchemaIfNecessary", span="79-79"];
m9_15 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="JobFetcher.feature.cs", label="SqlServerObjectsInstaller.Install(connection)", span="83-83"];
m9_3 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="JobFetcher.feature.cs", label="nameOrConnectionString == null", span="59-59"];
m9_5 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="JobFetcher.feature.cs", label="options == null", span="60-60"];
m9_7 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="JobFetcher.feature.cs", label="_options = options", span="62-62"];
m9_8 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="JobFetcher.feature.cs", label="IsConnectionString(nameOrConnectionString)", span="64-64"];
m9_9 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="JobFetcher.feature.cs", label="_connectionString = nameOrConnectionString", span="66-66"];
m9_11 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="JobFetcher.feature.cs", label="_connectionString = ConfigurationManager.ConnectionStrings[nameOrConnectionString].ConnectionString", span="70-70"];
m9_4 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="JobFetcher.feature.cs", label="throw new ArgumentNullException(''nameOrConnectionString'');", span="59-59"];
m9_6 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="JobFetcher.feature.cs", label="throw new ArgumentNullException(''options'');", span="60-60"];
m9_14 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="JobFetcher.feature.cs", label="var connection = CreateAndOpenConnection()", span="81-81"];
m9_17 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="JobFetcher.feature.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", span="57-57"];
m9_41 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(Hangfire.SqlServer.SqlServerStorage)", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(Hangfire.SqlServer.SqlServerStorage)", span="33-33"];
m9_163 [cluster="Unk.Single", file="JobFetcher.feature.cs", label="Entry Unk.Single", span=""];
m9_94 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<SqlConnection, T>)", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<SqlConnection, T>)", span="183-183"];
m9_101 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<SqlConnection, T>)", color=green, community=0, file="JobFetcher.feature.cs", label="connection = CreateAndOpenConnection()", prediction=88, span="189-189"];
m9_100 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<SqlConnection, T>)", file="JobFetcher.feature.cs", label="SqlConnection connection = null", span="185-185"];
m9_102 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<SqlConnection, T>)", file="JobFetcher.feature.cs", label="return func(connection);", span="190-190"];
m9_103 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<SqlConnection, T>)", file="JobFetcher.feature.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<SqlConnection, T>)", span="183-183"];
m9_19 [cluster="Hangfire.SqlServer.SqlServerStorage.IsConnectionString(string)", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.IsConnectionString(string)", span="253-253"];
m9_144 [cluster="Hangfire.SqlServer.SqlServerStorage.IsConnectionString(string)", file="JobFetcher.feature.cs", label="return nameOrConnectionString.Contains('';'');", span="255-255"];
m9_145 [cluster="Hangfire.SqlServer.SqlServerStorage.IsConnectionString(string)", file="JobFetcher.feature.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.IsConnectionString(string)", span="253-253"];
m9_108 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction<T>(System.Func<SqlConnection, T>, System.Transactions.IsolationLevel?)", file="JobFetcher.feature.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseTransaction<T>(System.Func<SqlConnection, T>, System.Transactions.IsolationLevel?)", span="207-207"];
m9_113 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction<T>(System.Func<SqlConnection, T>, System.Transactions.IsolationLevel?)", file="JobFetcher.feature.cs", label="var transaction = CreateTransaction(isolationLevel ?? _options.TransactionIsolationLevel)", span="209-209"];
m9_114 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction<T>(System.Func<SqlConnection, T>, System.Transactions.IsolationLevel?)", file="JobFetcher.feature.cs", label="var result = UseConnection(func)", span="211-211"];
m9_115 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction<T>(System.Func<SqlConnection, T>, System.Transactions.IsolationLevel?)", file="JobFetcher.feature.cs", label="transaction.Complete()", span="212-212"];
m9_116 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction<T>(System.Func<SqlConnection, T>, System.Transactions.IsolationLevel?)", file="JobFetcher.feature.cs", label="return result;", span="214-214"];
m9_117 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction<T>(System.Func<SqlConnection, T>, System.Transactions.IsolationLevel?)", file="JobFetcher.feature.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.UseTransaction<T>(System.Func<SqlConnection, T>, System.Transactions.IsolationLevel?)", span="207-207"];
m9_118 [cluster="Unk.CreateTransaction", file="JobFetcher.feature.cs", label="Entry Unk.CreateTransaction", span=""];
m9_75 [cluster="Unk.ContainsKey", file="JobFetcher.feature.cs", label="Entry Unk.ContainsKey", span=""];
m9_177 [file="JobFetcher.feature.cs", label="Hangfire.SqlServer.SqlServerStorage", span=""];
m9_179 [file="JobFetcher.feature.cs", label="System.Action<SqlConnection>", span=""];
m9_178 [file="JobFetcher.feature.cs", label="System.Action<SqlConnection>", span=""];
m10_39 [cluster="System.TimeSpan.FromMilliseconds(double)", file="JobFetcherSteps.cs", label="Entry System.TimeSpan.FromMilliseconds(double)", span="0-0"];
m10_63 [cluster="HangFire.Tests.JobFetcherSteps.ThenAllQueuesAreEmpty()", file="JobFetcherSteps.cs", label="Entry HangFire.Tests.JobFetcherSteps.ThenAllQueuesAreEmpty()", span="99-99"];
m10_64 [cluster="HangFire.Tests.JobFetcherSteps.ThenAllQueuesAreEmpty()", file="JobFetcherSteps.cs", label=_queues, span="101-101"];
m10_65 [cluster="HangFire.Tests.JobFetcherSteps.ThenAllQueuesAreEmpty()", file="JobFetcherSteps.cs", label="Then(String.Format(''the '{0}' queue is empty'', queue))", span="103-103"];
m10_66 [cluster="HangFire.Tests.JobFetcherSteps.ThenAllQueuesAreEmpty()", file="JobFetcherSteps.cs", label="Exit HangFire.Tests.JobFetcherSteps.ThenAllQueuesAreEmpty()", span="99-99"];
m10_58 [cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherDoesNotReturnAnyJob()", file="JobFetcherSteps.cs", label="Entry HangFire.Tests.JobFetcherSteps.ThenTheFetcherDoesNotReturnAnyJob()", span="92-92"];
m10_59 [cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherDoesNotReturnAnyJob()", file="JobFetcherSteps.cs", label="Assert.IsNotNull(_exception)", span="94-94"];
m10_60 [cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherDoesNotReturnAnyJob()", file="JobFetcherSteps.cs", label="Assert.AreEqual(typeof(OperationCanceledException).Name, _exception.GetType().Name)", span="95-95"];
m10_61 [cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherDoesNotReturnAnyJob()", file="JobFetcherSteps.cs", label="Exit HangFire.Tests.JobFetcherSteps.ThenTheFetcherDoesNotReturnAnyJob()", span="92-92"];
m10_3 [cluster="string.Format(string, object)", file="JobFetcherSteps.cs", label="Entry string.Format(string, object)", span="0-0"];
m10_41 [cluster="System.Threading.CancellationTokenSource.Cancel()", file="JobFetcherSteps.cs", label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0"];
m10_34 [cluster="HangFire.Server.JobFetcher.DequeueJob(System.Threading.CancellationToken)", file="JobFetcherSteps.cs", label="Entry HangFire.Server.JobFetcher.DequeueJob(System.Threading.CancellationToken)", span="26-26"];
m10_10 [cluster="HangFire.Tests.JobFetcherSteps.GivenTheFollowingQueues(Table)", file="JobFetcherSteps.cs", label="Entry HangFire.Tests.JobFetcherSteps.GivenTheFollowingQueues(Table)", span="34-34"];
m10_11 [cluster="HangFire.Tests.JobFetcherSteps.GivenTheFollowingQueues(Table)", file="JobFetcherSteps.cs", label="table.Rows", span="36-36"];
m10_16 [cluster="HangFire.Tests.JobFetcherSteps.GivenTheFollowingQueues(Table)", file="JobFetcherSteps.cs", label="_queues = table.Rows.Select(x => x[''Queue'']).ToList()", span="44-44"];
m10_12 [cluster="HangFire.Tests.JobFetcherSteps.GivenTheFollowingQueues(Table)", file="JobFetcherSteps.cs", label="var i = 0", span="38-38"];
m10_13 [cluster="HangFire.Tests.JobFetcherSteps.GivenTheFollowingQueues(Table)", file="JobFetcherSteps.cs", label="i < int.Parse(row[''Jobs''])", span="38-38"];
m10_14 [cluster="HangFire.Tests.JobFetcherSteps.GivenTheFollowingQueues(Table)", file="JobFetcherSteps.cs", label="Given(String.Format(''a job in the '{0}' queue'', row[''Queue'']))", span="40-40"];
m10_15 [cluster="HangFire.Tests.JobFetcherSteps.GivenTheFollowingQueues(Table)", file="JobFetcherSteps.cs", label="i++", span="38-38"];
m10_17 [cluster="HangFire.Tests.JobFetcherSteps.GivenTheFollowingQueues(Table)", file="JobFetcherSteps.cs", label="Exit HangFire.Tests.JobFetcherSteps.GivenTheFollowingQueues(Table)", span="34-34"];
m10_0 [cluster="HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue()", file="JobFetcherSteps.cs", label="Entry HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue()", span="22-22"];
m10_1 [cluster="HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue()", file="JobFetcherSteps.cs", label="Given(String.Format(''the fetcher listening the '{0}' queue'', QueueSteps.DefaultQueue))", span="24-24"];
m10_2 [cluster="HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue()", file="JobFetcherSteps.cs", label="Exit HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue()", span="22-22"];
m10_9 [cluster="System.TimeSpan.FromSeconds(double)", file="JobFetcherSteps.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m10_54 [cluster="Unk.AreEqual", file="JobFetcherSteps.cs", label="Entry Unk.AreEqual", span=""];
m10_40 [cluster="System.Threading.Thread.Sleep(System.TimeSpan)", file="JobFetcherSteps.cs", label="Entry System.Threading.Thread.Sleep(System.TimeSpan)", span="0-0"];
m10_18 [cluster="Unk.Parse", file="JobFetcherSteps.cs", label="Entry Unk.Parse", span=""];
m10_5 [cluster="HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue(string)", file="JobFetcherSteps.cs", label="Entry HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue(string)", span="28-28"];
m10_6 [cluster="HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue(string)", file="JobFetcherSteps.cs", label="_fetcher = new JobFetcher(RedisFactory.BasicManager, queue, TimeSpan.FromSeconds(1))", span="30-30"];
m10_7 [cluster="HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue(string)", file="JobFetcherSteps.cs", label="Exit HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue(string)", span="28-28"];
m10_48 [cluster="Unk.When", file="JobFetcherSteps.cs", label="Entry Unk.When", span=""];
m10_55 [cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob(string)", file="JobFetcherSteps.cs", label="Entry HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob(string)", span="86-86"];
m10_56 [cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob(string)", file="JobFetcherSteps.cs", label="Assert.AreEqual(jobId, _payload.Id)", span="88-88"];
m10_57 [cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob(string)", file="JobFetcherSteps.cs", label="Exit HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob(string)", span="86-86"];
m10_32 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="JobFetcherSteps.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0"];
m10_33 [cluster="System.Threading.Tasks.TaskFactory.StartNew(System.Action)", file="JobFetcherSteps.cs", label="Entry System.Threading.Tasks.TaskFactory.StartNew(System.Action)", span="0-0"];
m10_25 [cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesAJob()", file="JobFetcherSteps.cs", label="Entry HangFire.Tests.JobFetcherSteps.WhenItDequeuesAJob()", span="48-48"];
m10_26 [cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesAJob()", file="JobFetcherSteps.cs", label="var cts = new CancellationTokenSource()", span="50-50"];
m10_27 [cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesAJob()", file="JobFetcherSteps.cs", label="Task.Factory.StartNew(() =>\r\n                {\r\n                    Thread.Sleep(TimeSpan.FromMilliseconds(100)); \r\n                    cts.Cancel();\r\n                })", span="51-55"];
m10_28 [cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesAJob()", file="JobFetcherSteps.cs", label="_payload = _fetcher.DequeueJob(cts.Token)", span="59-59"];
m10_29 [cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesAJob()", file="JobFetcherSteps.cs", label=Exception, span="61-61"];
m10_30 [cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesAJob()", file="JobFetcherSteps.cs", label="_exception = ex", span="63-63"];
m10_31 [cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesAJob()", file="JobFetcherSteps.cs", label="Exit HangFire.Tests.JobFetcherSteps.WhenItDequeuesAJob()", span="48-48"];
m10_35 [cluster="lambda expression", file="JobFetcherSteps.cs", label="Entry lambda expression", span="51-55"];
m10_22 [cluster="lambda expression", file="JobFetcherSteps.cs", label="Entry lambda expression", span="44-44"];
m10_23 [cluster="lambda expression", file="JobFetcherSteps.cs", label="x[''Queue'']", span="44-44"];
m10_24 [cluster="lambda expression", file="JobFetcherSteps.cs", label="Exit lambda expression", span="44-44"];
m10_37 [cluster="lambda expression", file="JobFetcherSteps.cs", label="cts.Cancel()", span="54-54"];
m10_36 [cluster="lambda expression", file="JobFetcherSteps.cs", label="Thread.Sleep(TimeSpan.FromMilliseconds(100))", span="53-53"];
m10_38 [cluster="lambda expression", file="JobFetcherSteps.cs", label="Exit lambda expression", span="51-55"];
m10_53 [cluster="Unk.IsNotNull", file="JobFetcherSteps.cs", label="Entry Unk.IsNotNull", span=""];
m10_62 [cluster="System.Exception.GetType()", file="JobFetcherSteps.cs", label="Entry System.Exception.GetType()", span="0-0"];
m10_20 [cluster="Unk.Select", file="JobFetcherSteps.cs", label="Entry Unk.Select", span=""];
m10_67 [cluster="Unk.Then", file="JobFetcherSteps.cs", label="Entry Unk.Then", span=""];
m10_4 [cluster="Unk.Given", file="JobFetcherSteps.cs", label="Entry Unk.Given", span=""];
m10_42 [cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesJobs(int)", file="JobFetcherSteps.cs", label="Entry HangFire.Tests.JobFetcherSteps.WhenItDequeuesJobs(int)", span="68-68"];
m10_43 [cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesJobs(int)", file="JobFetcherSteps.cs", label="var i = 0", span="70-70"];
m10_44 [cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesJobs(int)", file="JobFetcherSteps.cs", label="i < count", span="70-70"];
m10_46 [cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesJobs(int)", file="JobFetcherSteps.cs", label="i++", span="70-70"];
m10_45 [cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesJobs(int)", file="JobFetcherSteps.cs", label="When(''it dequeues a job'')", span="72-72"];
m10_47 [cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesJobs(int)", file="JobFetcherSteps.cs", label="Exit HangFire.Tests.JobFetcherSteps.WhenItDequeuesJobs(int)", span="68-68"];
m10_49 [cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob()", file="JobFetcherSteps.cs", label="Entry HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob()", span="77-77"];
m10_50 [cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob()", file="JobFetcherSteps.cs", label="Assert.IsNotNull(_payload)", span="79-79"];
m10_51 [cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob()", file="JobFetcherSteps.cs", label="Assert.AreEqual(JobSteps.DefaultJobId, _payload.Id)", span="80-80"];
m10_52 [cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob()", file="JobFetcherSteps.cs", label="Exit HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob()", span="77-77"];
m10_21 [cluster="Unk.ToList", file="JobFetcherSteps.cs", label="Entry Unk.ToList", span=""];
m10_19 [cluster="Unk.Format", file="JobFetcherSteps.cs", label="Entry Unk.Format", span=""];
m10_8 [cluster="HangFire.Server.JobFetcher.JobFetcher(IRedisClientsManager, string, System.TimeSpan?)", file="JobFetcherSteps.cs", label="Entry HangFire.Server.JobFetcher.JobFetcher(IRedisClientsManager, string, System.TimeSpan?)", span="12-12"];
m10_68 [file="JobFetcherSteps.cs", label="HangFire.Tests.JobFetcherSteps", span=""];
m10_69 [file="JobFetcherSteps.cs", label=cts, span=""];
m11_7 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="JobHelper.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m11_0 [cluster="Hangfire.BackgroundJob.BackgroundJob(string, Hangfire.Common.Job, System.DateTime)", file="JobHelper.cs", label="Entry Hangfire.BackgroundJob.BackgroundJob(string, Hangfire.Common.Job, System.DateTime)", span="25-25"];
m11_1 [cluster="Hangfire.BackgroundJob.BackgroundJob(string, Hangfire.Common.Job, System.DateTime)", file="JobHelper.cs", label="id == null", span="27-27"];
m11_3 [cluster="Hangfire.BackgroundJob.BackgroundJob(string, Hangfire.Common.Job, System.DateTime)", file="JobHelper.cs", label="Id = id", span="29-29"];
m11_4 [cluster="Hangfire.BackgroundJob.BackgroundJob(string, Hangfire.Common.Job, System.DateTime)", file="JobHelper.cs", label="Job = job", span="30-30"];
m11_5 [cluster="Hangfire.BackgroundJob.BackgroundJob(string, Hangfire.Common.Job, System.DateTime)", file="JobHelper.cs", label="CreatedAt = createdAt", span="31-31"];
m11_2 [cluster="Hangfire.BackgroundJob.BackgroundJob(string, Hangfire.Common.Job, System.DateTime)", file="JobHelper.cs", label="throw new ArgumentNullException(''id'');", span="27-27"];
m11_6 [cluster="Hangfire.BackgroundJob.BackgroundJob(string, Hangfire.Common.Job, System.DateTime)", file="JobHelper.cs", label="Exit Hangfire.BackgroundJob.BackgroundJob(string, Hangfire.Common.Job, System.DateTime)", span="25-25"];
m11_8 [file="JobHelper.cs", label="Hangfire.BackgroundJob", span=""];
m13_4 [cluster="Unk.Given", file="JobSteps.cs", label="Entry Unk.Given", span=""];
m13_5 [cluster="HangFire.Tests.JobSteps.GivenTheJob(string)", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.GivenTheJob(string)", span="21-21"];
m13_6 [cluster="HangFire.Tests.JobSteps.GivenTheJob(string)", file="JobSteps.cs", label="Given(String.Format(''the '{0}' job of the '{1}' type'', jobId, DefaultJobType))", span="23-23"];
m13_7 [cluster="HangFire.Tests.JobSteps.GivenTheJob(string)", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.GivenTheJob(string)", span="21-21"];
m13_0 [cluster="HangFire.Tests.JobSteps.GivenAJob()", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.GivenAJob()", span="15-15"];
m13_1 [cluster="HangFire.Tests.JobSteps.GivenAJob()", file="JobSteps.cs", label="Given(String.Format(''a job of the '{0}' type'', DefaultJobType.AssemblyQualifiedName))", span="17-17"];
m13_2 [cluster="HangFire.Tests.JobSteps.GivenAJob()", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.GivenAJob()", span="15-15"];
m13_19 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="JobSteps.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m13_32 [cluster="Unk.GetValueFromHash", file="JobSteps.cs", label="Entry Unk.GetValueFromHash", span=""];
m13_21 [cluster="Unk.SetRangeInHash", file="JobSteps.cs", label="Entry Unk.SetRangeInHash", span=""];
m13_17 [cluster="Unk.AddItemToList", file="JobSteps.cs", label="Entry Unk.AddItemToList", span=""];
m13_8 [cluster="string.Format(string, object, object)", file="JobSteps.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m13_14 [cluster="HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", file="JobSteps.cs", label="Redis.Client.SetEntryInHash(\r\n                String.Format(''hangfire:job:{0}:state'', jobId),\r\n                ''StateProp'',\r\n                ''SomeValue'')", span="39-42"];
m13_12 [cluster="HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", span="33-33"];
m13_13 [cluster="HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", file="JobSteps.cs", label="Redis.Client.AddItemToList(\r\n                String.Format(''hangfire:job:{0}:history'', jobId),\r\n                '''')", span="35-37"];
m13_15 [cluster="HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", file="JobSteps.cs", label="Redis.Client.SetRangeInHash(\r\n                String.Format(''hangfire:job:{0}'', jobId),\r\n                new Dictionary<string, string>\r\n                    {\r\n                        { ''Type'', type },\r\n                        { ''Args'', JobHelper.ToJson(new Dictionary<string, string>()) },\r\n                        { ''State'', EnqueuedState.Name },\r\n                    })", span="44-51"];
m13_16 [cluster="HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", span="33-33"];
m13_22 [cluster="HangFire.Tests.JobSteps.GivenAJobWithEmptyState()", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.GivenAJobWithEmptyState()", span="55-55"];
m13_23 [cluster="HangFire.Tests.JobSteps.GivenAJobWithEmptyState()", file="JobSteps.cs", label="Redis.Client.SetRangeInHash(\r\n                String.Format(''hangfire:job:{0}'', DefaultJobId),\r\n                new Dictionary<string, string>\r\n                    {\r\n                        { ''Type'', typeof(TestJob).AssemblyQualifiedName },\r\n                        { ''Args'', JobHelper.ToJson(new Dictionary<string, string>()) },\r\n                        { ''State'', String.Empty }\r\n                    })", span="57-64"];
m13_24 [cluster="HangFire.Tests.JobSteps.GivenAJobWithEmptyState()", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.GivenAJobWithEmptyState()", span="55-55"];
m13_33 [cluster="Unk.AreEqual", file="JobSteps.cs", label="Entry Unk.AreEqual", span=""];
m13_20 [cluster="HangFire.JobHelper.ToJson(object)", file="JobSteps.cs", label="Entry HangFire.JobHelper.ToJson(object)", span="39-39"];
m13_26 [cluster="HangFire.Tests.JobSteps.GivenItsStateIs(string)", file="JobSteps.cs", label="Redis.Client.SetEntryInHash(\r\n                String.Format(''hangfire:job:{0}'', DefaultJobId),\r\n                ''State'',\r\n                state)", span="70-73"];
m13_25 [cluster="HangFire.Tests.JobSteps.GivenItsStateIs(string)", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.GivenItsStateIs(string)", span="68-68"];
m13_27 [cluster="HangFire.Tests.JobSteps.GivenItsStateIs(string)", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.GivenItsStateIs(string)", span="68-68"];
m13_18 [cluster="Unk.SetEntryInHash", file="JobSteps.cs", label="Entry Unk.SetEntryInHash", span=""];
m13_3 [cluster="string.Format(string, object)", file="JobSteps.cs", label="Entry string.Format(string, object)", span="0-0"];
m13_9 [cluster="HangFire.Tests.JobSteps.GivenAJobOfTheType(string)", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.GivenAJobOfTheType(string)", span="27-27"];
m13_10 [cluster="HangFire.Tests.JobSteps.GivenAJobOfTheType(string)", file="JobSteps.cs", label="Given(String.Format(''the '{0}' job of the '{1}' type'', DefaultJobId, type))", span="29-29"];
m13_11 [cluster="HangFire.Tests.JobSteps.GivenAJobOfTheType(string)", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.GivenAJobOfTheType(string)", span="27-27"];
m13_28 [cluster="HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", span="81-81"];
m13_29 [cluster="HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", file="JobSteps.cs", label="var jobState = Redis.Client.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', DefaultJobId),\r\n                ''State'')", span="83-85"];
m13_30 [cluster="HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", file="JobSteps.cs", label="Assert.AreEqual(state, jobState)", span="87-87"];
m13_31 [cluster="HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", span="81-81"];
m14_46 [cluster="HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="Entry HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="112-112"];
m14_54 [cluster="HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="_startPageIndex > 2", span="114-114"];
m14_59 [cluster="HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="results.Add(item)", span="119-119"];
m14_55 [cluster="HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="var index = _startPageIndex - 1", span="116-116"];
m14_56 [cluster="HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="index < 1", span="117-117"];
m14_58 [cluster="HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="var item = new Item(index, false, ItemType.MorePage)", span="118-118"];
m14_57 [cluster="HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="index = 1", span="117-117"];
m14_60 [cluster="HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="Exit HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="112-112"];
m14_42 [cluster="System.Collections.Generic.List<T>.List()", file="JobStorage.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m14_44 [cluster="HangFire.Web.Pager.Item.Item(int, bool, HangFire.Web.Pager.ItemType)", file="JobStorage.cs", label="Entry HangFire.Web.Pager.Item.Item(int, bool, HangFire.Web.Pager.ItemType)", span="151-151"];
m14_77 [cluster="HangFire.Web.Pager.Item.Item(int, bool, HangFire.Web.Pager.ItemType)", file="JobStorage.cs", label="PageIndex = pageIndex", span="153-153"];
m14_78 [cluster="HangFire.Web.Pager.Item.Item(int, bool, HangFire.Web.Pager.ItemType)", file="JobStorage.cs", label="Disabled = disabled", span="154-154"];
m14_79 [cluster="HangFire.Web.Pager.Item.Item(int, bool, HangFire.Web.Pager.ItemType)", file="JobStorage.cs", label="Type = type", span="155-155"];
m14_80 [cluster="HangFire.Web.Pager.Item.Item(int, bool, HangFire.Web.Pager.ItemType)", file="JobStorage.cs", label="Exit HangFire.Web.Pager.Item.Item(int, bool, HangFire.Web.Pager.ItemType)", span="151-151"];
m14_43 [cluster="HangFire.Web.Pager.AddPrevious(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="Entry HangFire.Web.Pager.AddPrevious(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="106-106"];
m14_50 [cluster="HangFire.Web.Pager.AddPrevious(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="var item = new Item(CurrentPage - 1, CurrentPage == 1, ItemType.PrevPage)", span="108-108"];
m14_51 [cluster="HangFire.Web.Pager.AddPrevious(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="results.Add(item)", span="109-109"];
m14_52 [cluster="HangFire.Web.Pager.AddPrevious(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="Exit HangFire.Web.Pager.AddPrevious(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="106-106"];
m14_53 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="JobStorage.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m14_48 [cluster="HangFire.Web.Pager.AddMoreAfter(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="Entry HangFire.Web.Pager.AddMoreAfter(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="123-123"];
m14_66 [cluster="HangFire.Web.Pager.AddMoreAfter(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="results.Add(item)", span="130-130"];
m14_62 [cluster="HangFire.Web.Pager.AddMoreAfter(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="var index = _startPageIndex + PageItemsCount", span="127-127"];
m14_63 [cluster="HangFire.Web.Pager.AddMoreAfter(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="index > TotalPageCount", span="128-128"];
m14_65 [cluster="HangFire.Web.Pager.AddMoreAfter(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="var item = new Item(index, false, ItemType.MorePage)", span="129-129"];
m14_64 [cluster="HangFire.Web.Pager.AddMoreAfter(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="index = TotalPageCount", span="128-128"];
m14_67 [cluster="HangFire.Web.Pager.AddMoreAfter(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="Exit HangFire.Web.Pager.AddMoreAfter(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="123-123"];
m14_45 [cluster="System.Collections.Generic.List<T>.Add(T)", file="JobStorage.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m14_10 [cluster="HangFire.Web.Pager.PageUrl(int)", file="JobStorage.cs", label="Entry HangFire.Web.Pager.PageUrl(int)", span="51-51"];
m14_11 [cluster="HangFire.Web.Pager.PageUrl(int)", file="JobStorage.cs", label="page < 1 || page > TotalPageCount", span="53-53"];
m14_13 [cluster="HangFire.Web.Pager.PageUrl(int)", file="JobStorage.cs", label="return BasePageUrl + ''?from='' + ((page - 1) * RecordsPerPage) + ''&count='' + RecordsPerPage;", span="55-55"];
m14_12 [cluster="HangFire.Web.Pager.PageUrl(int)", file="JobStorage.cs", label="return ''#'';", span="53-53"];
m14_14 [cluster="HangFire.Web.Pager.PageUrl(int)", file="JobStorage.cs", label="Exit HangFire.Web.Pager.PageUrl(int)", span="51-51"];
m14_8 [cluster="System.Math.Ceiling(double)", file="JobStorage.cs", label="Entry System.Math.Ceiling(double)", span="0-0"];
m14_49 [cluster="HangFire.Web.Pager.AddNext(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="Entry HangFire.Web.Pager.AddNext(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="143-143"];
m14_74 [cluster="HangFire.Web.Pager.AddNext(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="var item = new Item(CurrentPage + 1, CurrentPage >= TotalPageCount, ItemType.NextPage)", span="145-145"];
m14_75 [cluster="HangFire.Web.Pager.AddNext(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="results.Add(item)", span="146-146"];
m14_76 [cluster="HangFire.Web.Pager.AddNext(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="Exit HangFire.Web.Pager.AddNext(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="143-143"];
m14_9 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="Entry HangFire.Web.Pager.GenerateItems()", span="64-64"];
m14_20 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="_startPageIndex = CurrentPage - (PageItemsCount / 2)", span="67-67"];
m14_21 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="_startPageIndex + PageItemsCount > TotalPageCount", span="68-68"];
m14_22 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="_startPageIndex = TotalPageCount + 1 - PageItemsCount", span="69-69"];
m14_23 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="_startPageIndex < 1", span="70-70"];
m14_25 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="_endPageIndex = _startPageIndex + PageItemsCount - 1", span="74-74"];
m14_26 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="_endPageIndex > TotalPageCount", span="75-75"];
m14_27 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="_endPageIndex = TotalPageCount", span="76-76"];
m14_28 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="var pagerItems = new List<Item>()", span="78-78"];
m14_29 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="TotalPageCount == 0", span="79-79"];
m14_30 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="return pagerItems;", span="79-79"];
m14_31 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="AddPrevious(pagerItems)", span="81-81"];
m14_33 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="pagerItems.Add(new Item(1, false, ItemType.Page))", span="85-85"];
m14_34 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="AddMoreBefore(pagerItems)", span="88-88"];
m14_35 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="AddPageNumbers(pagerItems)", span="91-91"];
m14_36 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="AddMoreAfter(pagerItems)", span="94-94"];
m14_38 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="pagerItems.Add(new Item(TotalPageCount, false, ItemType.Page))", span="98-98"];
m14_39 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="AddNext(pagerItems)", span="101-101"];
m14_40 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="return pagerItems;", span="103-103"];
m14_32 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="_startPageIndex > 1", span="84-84"];
m14_37 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="_endPageIndex < TotalPageCount", span="97-97"];
m14_41 [cluster="HangFire.Web.Pager.GenerateItems()", file="JobStorage.cs", label="Exit HangFire.Web.Pager.GenerateItems()", span="64-64"];
m14_0 [cluster="HangFire.Web.Pager.Pager(int, int, long)", file="JobStorage.cs", label="Entry HangFire.Web.Pager.Pager(int, int, long)", span="29-29"];
m14_1 [cluster="HangFire.Web.Pager.Pager(int, int, long)", file="JobStorage.cs", label="FromRecord = from >= 0 ? from : 0", span="31-31"];
m14_2 [cluster="HangFire.Web.Pager.Pager(int, int, long)", file="JobStorage.cs", label="RecordsPerPage = perPage > 0 ? perPage : DefaultRecordsPerPage", span="32-32"];
m14_3 [cluster="HangFire.Web.Pager.Pager(int, int, long)", file="JobStorage.cs", label="TotalRecordCount = total", span="33-33"];
m14_4 [cluster="HangFire.Web.Pager.Pager(int, int, long)", file="JobStorage.cs", label="CurrentPage = FromRecord / RecordsPerPage + 1", span="34-34"];
m14_5 [cluster="HangFire.Web.Pager.Pager(int, int, long)", file="JobStorage.cs", label="TotalPageCount = (int)Math.Ceiling((double)TotalRecordCount / RecordsPerPage)", span="35-35"];
m14_6 [cluster="HangFire.Web.Pager.Pager(int, int, long)", file="JobStorage.cs", label="PagerItems = GenerateItems()", span="37-37"];
m14_7 [cluster="HangFire.Web.Pager.Pager(int, int, long)", file="JobStorage.cs", label="Exit HangFire.Web.Pager.Pager(int, int, long)", span="29-29"];
m14_47 [cluster="HangFire.Web.Pager.AddPageNumbers(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="Entry HangFire.Web.Pager.AddPageNumbers(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="134-134"];
m14_68 [cluster="HangFire.Web.Pager.AddPageNumbers(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="var pageIndex = _startPageIndex", span="136-136"];
m14_71 [cluster="HangFire.Web.Pager.AddPageNumbers(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="results.Add(item)", span="139-139"];
m14_69 [cluster="HangFire.Web.Pager.AddPageNumbers(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="pageIndex <= _endPageIndex", span="136-136"];
m14_70 [cluster="HangFire.Web.Pager.AddPageNumbers(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="var item = new Item(pageIndex, false, ItemType.Page)", span="138-138"];
m14_72 [cluster="HangFire.Web.Pager.AddPageNumbers(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="pageIndex++", span="136-136"];
m14_73 [cluster="HangFire.Web.Pager.AddPageNumbers(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="JobStorage.cs", label="Exit HangFire.Web.Pager.AddPageNumbers(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="134-134"];
m14_15 [cluster="HangFire.Web.Pager.RecordsPerPageUrl(int)", file="JobStorage.cs", label="Entry HangFire.Web.Pager.RecordsPerPageUrl(int)", span="58-58"];
m14_16 [cluster="HangFire.Web.Pager.RecordsPerPageUrl(int)", file="JobStorage.cs", label="perPage <= 0", span="60-60"];
m14_18 [cluster="HangFire.Web.Pager.RecordsPerPageUrl(int)", file="JobStorage.cs", label="return BasePageUrl + ''?from=0&count='' + perPage;", span="61-61"];
m14_17 [cluster="HangFire.Web.Pager.RecordsPerPageUrl(int)", file="JobStorage.cs", label="return ''#'';", span="60-60"];
m14_19 [cluster="HangFire.Web.Pager.RecordsPerPageUrl(int)", file="JobStorage.cs", label="Exit HangFire.Web.Pager.RecordsPerPageUrl(int)", span="58-58"];
m14_81 [file="JobStorage.cs", label="HangFire.Web.Pager", span=""];
m14_82 [file="JobStorage.cs", label="HangFire.Web.Pager.Item", span=""];
m15_32 [cluster="HangFire.Storage.InvocationData.InvocationData()", file="ProcessingState.cs", label="Entry HangFire.Storage.InvocationData.InvocationData()", span="2-2"];
m15_33 [cluster="Unk.CreatePipeline", file="ProcessingState.cs", label="Entry Unk.CreatePipeline", span=""];
m15_40 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="ProcessingState.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46"];
m15_0 [cluster="HangFire.Redis.RedisJobFetcher.RedisJobFetcher(IRedisClient, System.Collections.Generic.IEnumerable<string>, System.TimeSpan)", file="ProcessingState.cs", label="Entry HangFire.Redis.RedisJobFetcher.RedisJobFetcher(IRedisClient, System.Collections.Generic.IEnumerable<string>, System.TimeSpan)", span="17-17"];
m15_1 [cluster="HangFire.Redis.RedisJobFetcher.RedisJobFetcher(IRedisClient, System.Collections.Generic.IEnumerable<string>, System.TimeSpan)", file="ProcessingState.cs", label="_redis = redis", span="22-22"];
m15_2 [cluster="HangFire.Redis.RedisJobFetcher.RedisJobFetcher(IRedisClient, System.Collections.Generic.IEnumerable<string>, System.TimeSpan)", file="ProcessingState.cs", label="_queueNames = queueNames.ToList()", span="23-23"];
m15_3 [cluster="HangFire.Redis.RedisJobFetcher.RedisJobFetcher(IRedisClient, System.Collections.Generic.IEnumerable<string>, System.TimeSpan)", file="ProcessingState.cs", label="_fetchTimeout = fetchTimeout", span="24-24"];
m15_4 [cluster="HangFire.Redis.RedisJobFetcher.RedisJobFetcher(IRedisClient, System.Collections.Generic.IEnumerable<string>, System.TimeSpan)", file="ProcessingState.cs", label="Exit HangFire.Redis.RedisJobFetcher.RedisJobFetcher(IRedisClient, System.Collections.Generic.IEnumerable<string>, System.TimeSpan)", span="17-17"];
m15_45 [cluster="Unk.GetValuesFromHash", file="ProcessingState.cs", label="Entry Unk.GetValuesFromHash", span=""];
m15_5 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="ProcessingState.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m15_34 [cluster="Unk.QueueCommand", file="ProcessingState.cs", label="Entry Unk.QueueCommand", span=""];
m15_31 [cluster="Unk.PopAndPushItemBetweenLists", file="ProcessingState.cs", label="Entry Unk.PopAndPushItemBetweenLists", span=""];
m15_46 [cluster="lambda expression", file="ProcessingState.cs", label="Entry lambda expression", span="90-97"];
m15_38 [cluster="lambda expression", file="ProcessingState.cs", label="x.SetEntryInHash(\r\n                    String.Format(''hangfire:job:{0}'', jobId),\r\n                    ''Fetched'',\r\n                    JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="79-82"];
m15_43 [cluster="lambda expression", file="ProcessingState.cs", label="x.GetValuesFromHash(\r\n                        String.Format(''hangfire:job:{0}'', jobId),\r\n                        new[] { ''Type'', ''Args'', ''Method'', ''Arguments'', ''ParameterTypes'' })", span="87-89"];
m15_47 [cluster="lambda expression", file="ProcessingState.cs", label="invocationData.Type = x[0]", span="92-92"];
m15_48 [cluster="lambda expression", file="ProcessingState.cs", label="invocationData.Method = x[2]", span="93-93"];
m15_49 [cluster="lambda expression", file="ProcessingState.cs", label="invocationData.ParameterTypes = x[4]", span="94-94"];
m15_37 [cluster="lambda expression", file="ProcessingState.cs", label="Entry lambda expression", span="79-82"];
m15_42 [cluster="lambda expression", file="ProcessingState.cs", label="Entry lambda expression", span="87-89"];
m15_39 [cluster="lambda expression", file="ProcessingState.cs", label="Exit lambda expression", span="79-82"];
m15_44 [cluster="lambda expression", file="ProcessingState.cs", label="Exit lambda expression", span="87-89"];
m15_50 [cluster="lambda expression", file="ProcessingState.cs", label="args = x[1]", span="95-95"];
m15_51 [cluster="lambda expression", file="ProcessingState.cs", label="arguments = x[3]", span="96-96"];
m15_52 [cluster="lambda expression", file="ProcessingState.cs", label="Exit lambda expression", span="90-97"];
m15_36 [cluster="HangFire.Server.JobPayload.JobPayload(string, string, HangFire.Storage.InvocationData)", file="ProcessingState.cs", label="Entry HangFire.Server.JobPayload.JobPayload(string, string, HangFire.Storage.InvocationData)", span="23-23"];
m15_41 [cluster="Unk.SetEntryInHash", file="ProcessingState.cs", label="Entry Unk.SetEntryInHash", span=""];
m15_29 [cluster="string.Format(string, object)", file="ProcessingState.cs", label="Entry string.Format(string, object)", span="0-0"];
m15_35 [cluster="Unk.Flush", file="ProcessingState.cs", label="Entry Unk.Flush", span=""];
m15_30 [cluster="Unk.BlockingPopAndPushItemBetweenLists", file="ProcessingState.cs", label="Entry Unk.BlockingPopAndPushItemBetweenLists", span=""];
m15_28 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="ProcessingState.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m15_23 [cluster="HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", file="ProcessingState.cs", label="pipeline.QueueCommand(x => x.SetEntryInHash(\r\n                    String.Format(''hangfire:job:{0}'', jobId),\r\n                    ''Fetched'',\r\n                    JobHelper.ToStringTimestamp(DateTime.UtcNow)))", span="79-82"];
m15_6 [cluster="HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", file="ProcessingState.cs", label="Entry HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", span="27-27"];
m15_7 [cluster="HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", file="ProcessingState.cs", label="string jobId", span="29-29"];
m15_10 [cluster="HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", file="ProcessingState.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="35-35"];
m15_8 [cluster="HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", file="ProcessingState.cs", label="string queueName", span="30-30"];
m15_11 [cluster="HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", file="ProcessingState.cs", label="queueIndex = (queueIndex + 1) % _queueNames.Count", span="37-37"];
m15_12 [cluster="HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", file="ProcessingState.cs", label="queueName = _queueNames[queueIndex]", span="38-38"];
m15_15 [cluster="HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", file="ProcessingState.cs", label="queueIndex == 0", span="43-43"];
m15_13 [cluster="HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", file="ProcessingState.cs", label="var queueKey = String.Format(''hangfire:queue:{0}'', queueName)", span="40-40"];
m15_26 [cluster="HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", file="ProcessingState.cs", label="return new JobPayload(jobId, queueName, invocationData)\r\n            {\r\n                Args = args,\r\n                Arguments = arguments\r\n            };", span="106-110"];
m15_16 [cluster="HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", file="ProcessingState.cs", label="jobId = _redis.BlockingPopAndPushItemBetweenLists(\r\n                        queueKey,\r\n                        fetchedKey,\r\n                        _fetchTimeout)", span="45-48"];
m15_17 [cluster="HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", file="ProcessingState.cs", label="jobId = _redis.PopAndPushItemBetweenLists(\r\n                        queueKey, fetchedKey)", span="52-53"];
m15_18 [cluster="HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", file="ProcessingState.cs", label="jobId == null", span="56-56"];
m15_24 [cluster="HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", file="ProcessingState.cs", label="pipeline.QueueCommand(\r\n                    x => x.GetValuesFromHash(\r\n                        String.Format(''hangfire:job:{0}'', jobId),\r\n                        new[] { ''Type'', ''Args'', ''Method'', ''Arguments'', ''ParameterTypes'' }),\r\n                    x =>\r\n                    {\r\n                        invocationData.Type = x[0];\r\n                        invocationData.Method = x[2];\r\n                        invocationData.ParameterTypes = x[4];\r\n                        args = x[1];\r\n                        arguments = x[3];\r\n                    })", span="86-97"];
m15_19 [cluster="HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", file="ProcessingState.cs", label="var invocationData = new InvocationData()", span="73-73"];
m15_20 [cluster="HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", file="ProcessingState.cs", label="string arguments = null", span="74-74"];
m15_21 [cluster="HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", file="ProcessingState.cs", label="string args = null", span="75-75"];
m15_22 [cluster="HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", file="ProcessingState.cs", label="var pipeline = _redis.CreatePipeline()", span="77-77"];
m15_25 [cluster="HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", file="ProcessingState.cs", label="pipeline.Flush()", span="99-99"];
m15_27 [cluster="HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", file="ProcessingState.cs", label="Exit HangFire.Redis.RedisJobFetcher.DequeueJob(System.Threading.CancellationToken)", span="27-27"];
m15_53 [file="ProcessingState.cs", label="HangFire.Redis.RedisJobFetcher", span=""];
m15_54 [file="ProcessingState.cs", label=jobId, span=""];
m15_55 [file="ProcessingState.cs", label=invocationData, span=""];
m16_17 [cluster="HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", span="46-46"];
m16_45 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="Hangfire.BackgroundJobClient", span=""];
m16_47 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="106-106"];
m16_48 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="this.FeatureBackground()", span="108-108"];
m16_49 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="110-112"];
m16_50 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="table1.AddRow(new string[] {\r\n                        ''StartedAt'',\r\n                        ''<UtcNow timestamp>''})", span="113-115"];
m16_51 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="table1.AddRow(new string[] {\r\n                        ''ServerName'',\r\n                        ''TestServer''})", span="116-118"];
m16_53 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="this.ScenarioCleanup()", span="122-122"];
m16_54 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", span="102-102"];
m16_25 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="ProcessingState.feature.cs", label="_process.Run(context)", span="90-90"];
m16_29 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="ProcessingState.feature.cs", label="Exit Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="80-80"];
m16_30 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", span="71-71"];
m16_21 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="ProcessingState.feature.cs", label="state == null", span="83-83"];
m16_67 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", span="150-150"];
m16_68 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying, it should remove the job from the processing set'', ((string[])(null)))", span="152-152"];
m16_69 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="154-154"];
m16_70 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs", label="this.FeatureBackground()", span="156-156"];
m16_71 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="158-158"];
m16_72 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs", label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="160-160"];
m16_74 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs", label="this.ScenarioCleanup()", span="164-164"];
m16_75 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", span="150-150"];
m16_33 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", span="71-71"];
m16_35 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", color=green, community=0, file="ProcessingState.feature.cs", label="jobId == null", prediction=89, span="104-104"];
m16_18 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioTearDown()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.ScenarioTearDown()", span="56-56"];
m16_19 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioTearDown()", color=green, community=0, file="ProcessingState.feature.cs", label="testRunner.OnScenarioEnd()", prediction=90, span="58-58"];
m16_20 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioTearDown()", color=green, community=0, file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.ScenarioTearDown()", prediction=91, span="56-56"];
m16_23 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", color=green, community=0, file="ProcessingState.feature.cs", label="testRunner.OnScenarioStart(scenarioInfo)", prediction=92, span="63-63"];
m16_24 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m16_22 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m16_26 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", span="66-66"];
m16_28 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", span="66-66"];
m16_27 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", file="ProcessingState.feature.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m16_31 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="ProcessingState.feature.cs", label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="75-75"];
m16_43 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="ProcessingState.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m16_5 [cluster="Unk.GetTestRunner", file="ProcessingState.feature.cs", label="Entry Unk.GetTestRunner", span=""];
m16_36 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", color=green, community=0, file="ProcessingState.feature.cs", label="throw new ArgumentNullException(''jobId'');", prediction=93, span="104-104"];
m16_38 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="ProcessingState.feature.cs", label="throw new ArgumentNullException(''state'');", span="105-105"];
m16_39 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="ProcessingState.feature.cs", label="var connection = _storage.GetConnection()", span="107-107"];
m16_41 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="ProcessingState.feature.cs", label="return stateMachine.ChangeState(jobId, state, fromState != null ? new[] { fromState } : null);", span="110-110"];
m16_42 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="ProcessingState.feature.cs", label="Exit Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="102-102"];
m16_14 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="ProcessingState.feature.cs", label="_stateMachineFactory = stateMachineFactory", span="75-75"];
m16_15 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="ProcessingState.feature.cs", label="_process = process", span="76-76"];
m16_16 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="ProcessingState.feature.cs", label="Exit Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", span="65-65"];
m16_0 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m16_1 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ProcessingState.feature.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
m16_2 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ProcessingState.feature.cs", label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Processing state'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34"];
m16_3 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ProcessingState.feature.cs", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
m16_4 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m16_32 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="ProcessingState.feature.cs", label="testRunner.And(''the Processing state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="77-77"];
m16_13 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="ProcessingState.feature.cs", label="_storage = storage", span="74-74"];
m16_7 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="ProcessingState.feature.cs", label="storage == null", span="70-70"];
m16_66 [cluster="Unk.When", file="ProcessingState.feature.cs", label="Entry Unk.When", span=""];
m16_34 [cluster="Unk.Given", file="ProcessingState.feature.cs", label="Entry Unk.Given", span=""];
m16_57 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", span="129-129"];
m16_58 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After applying, it should add the job to the processing set'', ((string[])(null)))", span="131-131"];
m16_59 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="133-133"];
m16_60 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="this.FeatureBackground()", span="135-135"];
m16_61 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="137-137"];
m16_64 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="this.ScenarioCleanup()", span="143-143"];
m16_65 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", span="129-129"];
m16_56 [cluster="Unk.AddRow", file="ProcessingState.feature.cs", label="Entry Unk.AddRow", span=""];
m16_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="ProcessingState.feature.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m16_8 [cluster="Unk.OnFeatureStart", file="ProcessingState.feature.cs", label="Entry Unk.OnFeatureStart", span=""];
m16_10 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", file="ProcessingState.feature.cs", label="testRunner.OnFeatureEnd()", span="41-41"];
m16_12 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", span="39-39"];
m16_9 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", span="39-39"];
m16_11 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", file="ProcessingState.feature.cs", label="testRunner = null", span="42-42"];
m16_44 [cluster="Unk.Then", file="ProcessingState.feature.cs", label="Entry Unk.Then", span=""];
m16_55 [cluster="TechTalk.SpecFlow.Table.cstr", file="ProcessingState.feature.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m16_76 [file="ProcessingState.feature.cs", label="HangFire.Tests.States.ProcessingStateFeature", span=""];
m17_11 [cluster="Unk.EnqueueItemOnList", file="QueueSteps.cs", label="Entry Unk.EnqueueItemOnList", span=""];
m17_22 [cluster="string.Format(string, object, object)", file="QueueSteps.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m17_23 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", span="57-57"];
m17_24 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="QueueSteps.cs", label="Given(String.Format(''the '{0}' job'', jobId))", span="59-59"];
m17_25 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="QueueSteps.cs", label="Redis.Client.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', queue),\r\n                jobId)", span="61-63"];
m17_26 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", span="57-57"];
m17_7 [cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedBrokenJob()", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.GivenAnEnqueuedBrokenJob()", span="23-23"];
m17_8 [cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedBrokenJob()", file="QueueSteps.cs", label="Given(String.Format(''a job of the '{0}' type'', typeof(BrokenJob).AssemblyQualifiedName))", span="25-25"];
m17_9 [cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedBrokenJob()", file="QueueSteps.cs", label="Redis.Client.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', DefaultQueue),\r\n                JobSteps.DefaultJobId)", span="27-29"];
m17_10 [cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedBrokenJob()", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.GivenAnEnqueuedBrokenJob()", span="23-23"];
m17_2 [cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", span="17-17"];
m17_3 [cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", file="QueueSteps.cs", label="Given(String.Format(''a job in the '{0}' queue'', DefaultQueue))", span="19-19"];
m17_4 [cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", span="17-17"];
m17_5 [cluster="string.Format(string, object)", file="QueueSteps.cs", label="Entry string.Format(string, object)", span="0-0"];
m17_50 [cluster="Unk.AreEqual", file="QueueSteps.cs", label="Entry Unk.AreEqual", span=""];
m17_49 [cluster="Unk.GetListCount", file="QueueSteps.cs", label="Entry Unk.GetListCount", span=""];
m17_40 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", span="89-89"];
m17_41 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="QueueSteps.cs", label="var jobIds = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="91-92"];
m17_42 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="QueueSteps.cs", label="CollectionAssert.DoesNotContain(jobIds, JobSteps.DefaultJobId)", span="94-94"];
m17_43 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", span="89-89"];
m17_15 [cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", span="41-41"];
m17_17 [cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="QueueSteps.cs", label="Redis.Client.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', queue),\r\n                JobSteps.DefaultJobId)", span="45-47"];
m17_16 [cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="QueueSteps.cs", label="Given(''a job'')", span="43-43"];
m17_18 [cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", span="41-41"];
m17_37 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", span="83-83"];
m17_38 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", color=green, community=0, file="QueueSteps.cs", label="Then(String.Format(''the '{0}' queue should not contain the job'', DefaultQueue))", prediction=94, span="85-85"];
m17_39 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", span="83-83"];
m17_12 [cluster="HangFire.Tests.QueueSteps.GivenAnUnexistingEnqueuedJob(string)", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.GivenAnUnexistingEnqueuedJob(string)", span="33-33"];
m17_13 [cluster="HangFire.Tests.QueueSteps.GivenAnUnexistingEnqueuedJob(string)", file="QueueSteps.cs", label="Redis.Client.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', DefaultQueue),\r\n                jobId)", span="35-37"];
m17_14 [cluster="HangFire.Tests.QueueSteps.GivenAnUnexistingEnqueuedJob(string)", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.GivenAnUnexistingEnqueuedJob(string)", span="33-33"];
m17_31 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", span="73-73"];
m17_32 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="QueueSteps.cs", label="var jobIds = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="75-76"];
m17_33 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="QueueSteps.cs", label="CollectionAssert.Contains(jobIds, JobSteps.DefaultJobId)", span="78-78"];
m17_34 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", span="73-73"];
m17_35 [cluster="Unk.GetAllItemsFromList", file="QueueSteps.cs", label="Entry Unk.GetAllItemsFromList", span=""];
m17_36 [cluster="Unk.Contains", file="QueueSteps.cs", label="Entry Unk.Contains", span=""];
m17_30 [cluster="Unk.Then", file="QueueSteps.cs", label="Entry Unk.Then", span=""];
m17_6 [cluster="Unk.Given", file="QueueSteps.cs", label="Entry Unk.Given", span=""];
m17_44 [cluster="Unk.DoesNotContain", file="QueueSteps.cs", label="Entry Unk.DoesNotContain", span=""];
m17_19 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", span="51-51"];
m17_20 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", file="QueueSteps.cs", label="Given(String.Format(''the '{0}' job in the '{1}' queue'', jobId, DefaultQueue))", span="53-53"];
m17_21 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", span="51-51"];
m17_51 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", span="106-106"];
m17_52 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="QueueSteps.cs", label="var actualLength = Redis.Client.GetListCount(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="108-109"];
m17_53 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="QueueSteps.cs", label="Assert.AreEqual(length, actualLength)", span="110-110"];
m17_54 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", span="106-106"];
m17_27 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", span="67-67"];
m17_28 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", color=green, community=0, file="QueueSteps.cs", label="Then(String.Format(''the '{0}' queue should contain the job'', DefaultQueue))", prediction=95, span="69-69"];
m17_29 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", span="67-67"];
m17_45 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", span="98-98"];
m17_46 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="QueueSteps.cs", label="var length = Redis.Client.GetListCount(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="100-101"];
m17_47 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="QueueSteps.cs", label="Assert.AreEqual(0, length)", span="102-102"];
m17_48 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", span="98-98"];
m18_0 [cluster="HangFire.States.ScheduledState.ScheduledState(string, System.DateTime)", file="ScheduledState.cs", label="Entry HangFire.States.ScheduledState.ScheduledState(string, System.DateTime)", span="10-10"];
m18_1 [cluster="HangFire.States.ScheduledState.ScheduledState(string, System.DateTime)", file="ScheduledState.cs", label="EnqueueAt = enqueueAt", span="13-13"];
m18_2 [cluster="HangFire.States.ScheduledState.ScheduledState(string, System.DateTime)", file="ScheduledState.cs", label="Exit HangFire.States.ScheduledState.ScheduledState(string, System.DateTime)", span="10-10"];
m18_15 [cluster="HangFire.JobHelper.ToTimestamp(System.DateTime)", file="ScheduledState.cs", label="Entry HangFire.JobHelper.ToTimestamp(System.DateTime)", span="51-51"];
m18_6 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="ScheduledState.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m18_14 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="ScheduledState.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m18_16 [cluster="Unk.QueueCommand", file="ScheduledState.cs", label="Entry Unk.QueueCommand", span=""];
m18_20 [cluster="Unk.AddItemToSortedSet", file="ScheduledState.cs", label="Entry Unk.AddItemToSortedSet", span=""];
m18_26 [cluster="lambda expression", file="ScheduledState.cs", label="Entry lambda expression", span="45-45"];
m18_18 [cluster="lambda expression", file="ScheduledState.cs", label="x.AddItemToSortedSet(\r\n                ''hangfire:schedule'', jobId, timestamp)", span="35-36"];
m18_17 [cluster="lambda expression", file="ScheduledState.cs", label="Entry lambda expression", span="35-36"];
m18_19 [cluster="lambda expression", file="ScheduledState.cs", label="Exit lambda expression", span="35-36"];
m18_27 [cluster="lambda expression", file="ScheduledState.cs", label="x.RemoveItemFromSortedSet(''hangfire:schedule'', jobId)", span="45-45"];
m18_28 [cluster="lambda expression", file="ScheduledState.cs", label="Exit lambda expression", span="45-45"];
m18_3 [cluster="HangFire.States.ScheduledState.GetProperties()", file="ScheduledState.cs", label="Entry HangFire.States.ScheduledState.GetProperties()", span="20-20"];
m18_4 [cluster="HangFire.States.ScheduledState.GetProperties()", file="ScheduledState.cs", label="return new Dictionary<string, string>\r\n                {\r\n                    { ''ScheduledAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                    { ''EnqueueAt'', JobHelper.ToStringTimestamp(EnqueueAt) }\r\n                };", span="22-26"];
m18_5 [cluster="HangFire.States.ScheduledState.GetProperties()", file="ScheduledState.cs", label="Exit HangFire.States.ScheduledState.GetProperties()", span="20-20"];
m18_8 [cluster="HangFire.States.ScheduledState.Apply(IRedisTransaction, string)", file="ScheduledState.cs", label="Entry HangFire.States.ScheduledState.Apply(IRedisTransaction, string)", span="29-29"];
m18_12 [cluster="HangFire.States.ScheduledState.Apply(IRedisTransaction, string)", file="ScheduledState.cs", label="transaction.QueueCommand(x => x.AddItemToSortedSet(\r\n                ''hangfire:schedule'', jobId, timestamp))", span="35-36"];
m18_11 [cluster="HangFire.States.ScheduledState.Apply(IRedisTransaction, string)", file="ScheduledState.cs", label="var timestamp = JobHelper.ToTimestamp(EnqueueAt)", span="33-33"];
m18_13 [cluster="HangFire.States.ScheduledState.Apply(IRedisTransaction, string)", file="ScheduledState.cs", label="Exit HangFire.States.ScheduledState.Apply(IRedisTransaction, string)", span="29-29"];
m18_29 [cluster="Unk.RemoveItemFromSortedSet", file="ScheduledState.cs", label="Entry Unk.RemoveItemFromSortedSet", span=""];
m18_7 [cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="ScheduledState.cs", label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="62-62"];
m18_21 [cluster="HangFire.States.ScheduledState.Descriptor.Unapply(IRedisTransaction, string)", file="ScheduledState.cs", label="Entry HangFire.States.ScheduledState.Descriptor.Unapply(IRedisTransaction, string)", span="41-41"];
m18_24 [cluster="HangFire.States.ScheduledState.Descriptor.Unapply(IRedisTransaction, string)", file="ScheduledState.cs", label="transaction.QueueCommand(x => x.RemoveItemFromSortedSet(''hangfire:schedule'', jobId))", span="45-45"];
m18_25 [cluster="HangFire.States.ScheduledState.Descriptor.Unapply(IRedisTransaction, string)", file="ScheduledState.cs", label="Exit HangFire.States.ScheduledState.Descriptor.Unapply(IRedisTransaction, string)", span="41-41"];
m18_30 [file="ScheduledState.cs", label="HangFire.States.ScheduledState", span=""];
m18_31 [file="ScheduledState.cs", label=string, span=""];
m18_32 [file="ScheduledState.cs", label=timestamp, span=""];
m18_33 [file="ScheduledState.cs", label=string, span=""];
m19_25 [cluster="Unk.OnScenarioStart", file="ScheduledState.feature.cs", label="Entry Unk.OnScenarioStart", span=""];
m19_29 [cluster="Unk.CollectScenarioErrors", file="ScheduledState.feature.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m19_21 [cluster="Unk.OnScenarioEnd", file="ScheduledState.feature.cs", label="Entry Unk.OnScenarioEnd", span=""];
m19_9 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureTearDown()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.FeatureTearDown()", span="39-39"];
m19_10 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureTearDown()", file="ScheduledState.feature.cs", label="testRunner.OnFeatureEnd()", span="41-41"];
m19_11 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureTearDown()", file="ScheduledState.feature.cs", label="testRunner = null", span="42-42"];
m19_12 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureTearDown()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.FeatureTearDown()", span="39-39"];
m19_66 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", span="148-148"];
m19_67 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="ScheduledState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying, it should remove the job from the schedule'', ((string[])(null)))", span="150-150"];
m19_68 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="ScheduledState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="152-152"];
m19_69 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="ScheduledState.feature.cs", label="this.FeatureBackground()", span="154-154"];
m19_70 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="ScheduledState.feature.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="156-156"];
m19_71 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="ScheduledState.feature.cs", label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="158-158"];
m19_72 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", color=green, community=0, file="ScheduledState.feature.cs", label="testRunner.Then(''the schedule should not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=96, span="160-160"];
m19_73 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="ScheduledState.feature.cs", label="this.ScenarioCleanup()", span="162-162"];
m19_74 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", span="148-148"];
m19_57 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterApplyingItShouldAddTheJobToTheScheduleAtTomorrow()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.AfterApplyingItShouldAddTheJobToTheScheduleAtTomorrow()", span="129-129"];
m19_58 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterApplyingItShouldAddTheJobToTheScheduleAtTomorrow()", file="ScheduledState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After applying, it should add the job to the schedule at tomorrow'', ((string[])(null)))", span="131-131"];
m19_59 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterApplyingItShouldAddTheJobToTheScheduleAtTomorrow()", file="ScheduledState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="133-133"];
m19_60 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterApplyingItShouldAddTheJobToTheScheduleAtTomorrow()", file="ScheduledState.feature.cs", label="this.FeatureBackground()", span="135-135"];
m19_61 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterApplyingItShouldAddTheJobToTheScheduleAtTomorrow()", file="ScheduledState.feature.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="137-137"];
m19_62 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterApplyingItShouldAddTheJobToTheScheduleAtTomorrow()", color=green, community=0, file="ScheduledState.feature.cs", label="testRunner.Then(''the schedule should contain the job that will be enqueued tomorrow'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=97, span="139-139"];
m19_63 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterApplyingItShouldAddTheJobToTheScheduleAtTomorrow()", file="ScheduledState.feature.cs", label="this.ScenarioCleanup()", span="141-141"];
m19_64 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterApplyingItShouldAddTheJobToTheScheduleAtTomorrow()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.AfterApplyingItShouldAddTheJobToTheScheduleAtTomorrow()", span="129-129"];
m19_35 [cluster="Unk.And", file="ScheduledState.feature.cs", label="Entry Unk.And", span=""];
m19_5 [cluster="Unk.GetTestRunner", file="ScheduledState.feature.cs", label="Entry Unk.GetTestRunner", span=""];
m19_36 [cluster="HangFire.Tests.States.ScheduledStateFeature.StateNameIsScheduled()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.StateNameIsScheduled()", span="85-85"];
m19_38 [cluster="HangFire.Tests.States.ScheduledStateFeature.StateNameIsScheduled()", file="ScheduledState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="89-89"];
m19_39 [cluster="HangFire.Tests.States.ScheduledStateFeature.StateNameIsScheduled()", file="ScheduledState.feature.cs", label="this.FeatureBackground()", span="91-91"];
m19_41 [cluster="HangFire.Tests.States.ScheduledStateFeature.StateNameIsScheduled()", file="ScheduledState.feature.cs", label="this.ScenarioCleanup()", span="95-95"];
m19_42 [cluster="HangFire.Tests.States.ScheduledStateFeature.StateNameIsScheduled()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.StateNameIsScheduled()", span="85-85"];
m19_0 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m19_1 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ScheduledState.feature.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
m19_2 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ScheduledState.feature.cs", label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Scheduled state'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34"];
m19_3 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ScheduledState.feature.cs", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
m19_4 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m19_30 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureBackground()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.FeatureBackground()", span="71-71"];
m19_31 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureBackground()", file="ScheduledState.feature.cs", label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="75-75"];
m19_32 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureBackground()", file="ScheduledState.feature.cs", label="testRunner.And(''the Scheduled state with the date set to tomorrow'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="77-77"];
m19_33 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureBackground()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.FeatureBackground()", span="71-71"];
m19_13 [cluster="Unk.OnFeatureEnd", file="ScheduledState.feature.cs", label="Entry Unk.OnFeatureEnd", span=""];
m19_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="ScheduledState.feature.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m19_14 [cluster="HangFire.Tests.States.ScheduledStateFeature.TestInitialize()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.TestInitialize()", span="46-46"];
m19_15 [cluster="HangFire.Tests.States.ScheduledStateFeature.TestInitialize()", file="ScheduledState.feature.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Scheduled state''))", span="48-49"];
m19_16 [cluster="HangFire.Tests.States.ScheduledStateFeature.TestInitialize()", file="ScheduledState.feature.cs", label="HangFire.Tests.States.ScheduledStateFeature.FeatureSetup(null)", span="51-51"];
m19_17 [cluster="HangFire.Tests.States.ScheduledStateFeature.TestInitialize()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.TestInitialize()", span="46-46"];
m19_65 [cluster="Unk.When", file="ScheduledState.feature.cs", label="Entry Unk.When", span=""];
m19_18 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioTearDown()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.ScenarioTearDown()", span="56-56"];
m19_19 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioTearDown()", file="ScheduledState.feature.cs", label="testRunner.OnScenarioEnd()", span="58-58"];
m19_20 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioTearDown()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.ScenarioTearDown()", span="56-56"];
m19_56 [cluster="Unk.AddRow", file="ScheduledState.feature.cs", label="Entry Unk.AddRow", span=""];
m19_43 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="ScheduledState.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m19_44 [cluster="Unk.Then", file="ScheduledState.feature.cs", label="Entry Unk.Then", span=""];
m19_34 [cluster="Unk.Given", file="ScheduledState.feature.cs", label="Entry Unk.Given", span=""];
m19_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="ScheduledState.feature.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m19_22 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m19_23 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ScheduledState.feature.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m19_24 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m19_26 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioCleanup()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.ScenarioCleanup()", span="66-66"];
m19_27 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioCleanup()", file="ScheduledState.feature.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m19_28 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioCleanup()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.ScenarioCleanup()", span="66-66"];
m19_55 [cluster="TechTalk.SpecFlow.Table.cstr", file="ScheduledState.feature.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m19_45 [cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", span="102-102"];
m19_46 [cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", color=green, community=0, file="ScheduledState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It should have the correct properties set'', ((string[])(null)))", prediction=98, span="104-104"];
m19_47 [cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ScheduledState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="106-106"];
m19_48 [cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ScheduledState.feature.cs", label="this.FeatureBackground()", span="108-108"];
m19_49 [cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ScheduledState.feature.cs", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="110-112"];
m19_50 [cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ScheduledState.feature.cs", label="table1.AddRow(new string[] {\r\n                        ''ScheduledAt'',\r\n                        ''<UtcNow timestamp>''})", span="113-115"];
m19_51 [cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ScheduledState.feature.cs", label="table1.AddRow(new string[] {\r\n                        ''EnqueueAt'',\r\n                        ''<Tomorrow timestamp>''})", span="116-118"];
m19_52 [cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", color=green, community=0, file="ScheduledState.feature.cs", label="testRunner.Then(''properties table should contain the following items:'', ((string)(null)), table1, ''Then '')", prediction=99, span="120-120"];
m19_53 [cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ScheduledState.feature.cs", label="this.ScenarioCleanup()", span="122-122"];
m19_54 [cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", span="102-102"];
m19_8 [cluster="Unk.OnFeatureStart", file="ScheduledState.feature.cs", label="Entry Unk.OnFeatureStart", span=""];
m19_75 [file="ScheduledState.feature.cs", label="HangFire.Tests.States.ScheduledStateFeature", span=""];
m20_11 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SchedulePoller.feature.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m20_36 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.And(''the schedule should not contain it anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=100, span="88-88"];
m20_37 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.But(''the queue should contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", prediction=101, span="90-90"];
m20_40 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", span="76-76"];
m20_38 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.And(''schedule poller should return \'true\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=102, span="92-92"];
m20_39 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs", label="this.ScenarioCleanup()", span="94-94"];
m20_41 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SchedulePoller.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m20_25 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="message = null", span="62-62"];
m20_29 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="message == null", span="70-70"];
m20_45 [cluster="Unk.And", file="SchedulePoller.feature.cs", label="Entry Unk.And", span=""];
m20_73 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs", label="this.ScenarioCleanup()", span="159-159"];
m20_56 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", file="SchedulePoller.feature.cs", label="this.ScenarioCleanup()", span="119-119"];
m20_14 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.CreateChannel()", file="SchedulePoller.feature.cs", label="Entry Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.CreateChannel()", span="99-99"];
m20_59 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", color=green, community=0, file="SchedulePoller.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Poller should enqueue only jobs in the Scheduled state'', ((string[])(null)))", prediction=103, span="128-128"];
m20_61 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="testRunner.Given(''a scheduled job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="132-132"];
m20_62 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="testRunner.And(''its state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="134-134"];
m20_63 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="136-136"];
m20_64 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.Then(''the job should be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=104, span="138-138"];
m20_65 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.And(''the queue should not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=104, span="140-140"];
m20_66 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="this.ScenarioCleanup()", span="142-142"];
m20_68 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", span="149-149"];
m20_69 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", color=green, community=0, file="SchedulePoller.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Should return false when there are no jobs in the schedule'', ((string[])(null)))", prediction=106, span="151-151"];
m20_70 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="153-153"];
m20_71 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="155-155"];
m20_46 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.Dispose()", file="SchedulePoller.feature.cs", label="Entry Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.Dispose()", span="84-84"];
m20_75 [cluster="Unk.QueueDeclare", file="SchedulePoller.feature.cs", label="Entry Unk.QueueDeclare", span=""];
m20_80 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.GetConsumerForQueue(string, System.Threading.CancellationToken)", color=green, community=0, file="SchedulePoller.feature.cs", label="!_consumers.TryGetValue(queue, out consumer)", prediction=104, span="131-131"];
m20_79 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.GetConsumerForQueue(string, System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label=ConsumerLock, span="129-129"];
m20_81 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.GetConsumerForQueue(string, System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="consumer = new QueueingBasicConsumer(_channel)", span="133-133"];
m20_76 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.GetConsumerForQueue(string, System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="QueueingBasicConsumer consumer", span="122-122"];
m20_77 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.GetConsumerForQueue(string, System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="124-124"];
m20_82 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.GetConsumerForQueue(string, System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="_consumers.AddOrUpdate(queue, consumer, (dq, dc) => consumer)", span="134-134"];
m20_95 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, TValue, System.Func<TKey, TValue, TValue>)", file="SchedulePoller.feature.cs", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, TValue, System.Func<TKey, TValue, TValue>)", span="0-0"];
m20_83 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.GetConsumerForQueue(string, System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="_channel.BasicConsume(queue, false, ''Hangfire.RabbitMq.'' + Thread.CurrentThread.Name, consumer)", span="135-135"];
m20_88 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.GetConsumerForQueue(string, System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="_consumers.AddOrUpdate(queue, newConsumer, (dq, dc) => newConsumer)", span="150-150"];
m20_90 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.GetConsumerForQueue(string, System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="consumer = newConsumer", span="152-152"];
m20_84 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.GetConsumerForQueue(string, System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="consumer.Model.IsClosed", span="142-142"];
m20_85 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.GetConsumerForQueue(string, System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label=ConsumerLock, span="144-144"];
m20_91 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.GetConsumerForQueue(string, System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="return consumer;", span="158-158"];
m20_94 [cluster="QueueingBasicConsumer.cstr", file="SchedulePoller.feature.cs", label="Entry QueueingBasicConsumer.cstr", span=""];
m20_26 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="System.IO.EndOfStreamException", span="64-64"];
m20_27 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="CreateChannel()", span="66-66"];
m20_28 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="message = null", span="67-67"];
m20_35 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.Then(''the job should be in the Enqueued state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=108, span="86-86"];
m20_32 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="80-80"];
m20_43 [cluster="Unk.CreateBasicProperties", file="SchedulePoller.feature.cs", label="Entry Unk.CreateBasicProperties", span=""];
m20_13 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary()", file="SchedulePoller.feature.cs", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary()", span="0-0"];
m20_57 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", span="101-101"];
m20_12 [cluster="Unk.CreateConnection", file="SchedulePoller.feature.cs", label="Entry Unk.CreateConnection", span=""];
m20_48 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", color=green, community=0, file="SchedulePoller.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Future jobs should not be enqueued'', ((string[])(null)))", prediction=109, span="103-103"];
m20_50 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", file="SchedulePoller.feature.cs", label="testRunner.Given(''a future job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="107-107"];
m20_52 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.Then(''the job should be in the Scheduled state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=104, span="111-111"];
m20_53 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.And(''the schedule should contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=104, span="113-113"];
m20_54 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.And(''the queue should not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=104, span="115-115"];
m20_55 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.And(''schedule poller should return \'false\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=113, span="117-117"];
m20_33 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs", label="testRunner.Given(''a scheduled job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="82-82"];
m20_92 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.GetConsumerForQueue(string, System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="HangFire.Tests.Server.SchedulePollerFeature", span=""];
m20_34 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="84-84"];
m20_100 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="150-150"];
m20_98 [cluster="lambda expression", file="SchedulePoller.feature.cs", label=consumer, span="134-134"];
m20_97 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="134-134"];
m20_101 [cluster="lambda expression", file="SchedulePoller.feature.cs", label=newConsumer, span="150-150"];
m20_99 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="134-134"];
m20_102 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="150-150"];
m20_15 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="Entry Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="42-42"];
m20_16 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="BasicDeliverEventArgs message", span="44-44"];
m20_18 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="queueIndex = (queueIndex + 1) % queues.Length", span="49-49"];
m20_19 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="var queueName = queues[queueIndex]", span="50-50"];
m20_20 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="52-52"];
m20_17 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="var queueIndex = 0", span="45-45"];
m20_21 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="var consumer = GetConsumerForQueue(queueName, cancellationToken)", span="56-56"];
m20_22 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.Server.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="62-62"];
m20_23 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SchedulePoller.feature.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="64-64"];
m20_24 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.Server.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="62-62"];
m20_30 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", span="76-76"];
m20_31 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", color=green, community=0, file="SchedulePoller.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Scheduled jobs should be enqueued on their actual queues'', ((string[])(null)))", prediction=114, span="78-78"];
m20_44 [cluster="Unk.SetPersistent", file="SchedulePoller.feature.cs", label="Entry Unk.SetPersistent", span=""];
m20_42 [cluster="System.Text.Encoding.GetBytes(string)", file="SchedulePoller.feature.cs", label="Entry System.Text.Encoding.GetBytes(string)", span="0-0"];
m20_0 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.RabbitMqJobQueue(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", file="SchedulePoller.feature.cs", label="Entry Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.RabbitMqJobQueue(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", span="21-21"];
m20_1 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.RabbitMqJobQueue(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", file="SchedulePoller.feature.cs", label="queues == null", span="23-23"];
m20_3 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.RabbitMqJobQueue(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", file="SchedulePoller.feature.cs", label="factory == null", span="24-24"];
m20_5 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.RabbitMqJobQueue(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", file="SchedulePoller.feature.cs", label="_queues = queues", span="26-26"];
m20_6 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.RabbitMqJobQueue(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", file="SchedulePoller.feature.cs", label="_factory = factory", span="27-27"];
m20_7 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.RabbitMqJobQueue(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", file="SchedulePoller.feature.cs", label="_connection = factory.CreateConnection()", span="28-28"];
m20_2 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.RabbitMqJobQueue(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", file="SchedulePoller.feature.cs", label="throw new ArgumentNullException(''queues'');", span="23-23"];
m20_4 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.RabbitMqJobQueue(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", file="SchedulePoller.feature.cs", label="throw new ArgumentNullException(''factory'');", span="24-24"];
m20_8 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.RabbitMqJobQueue(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", file="SchedulePoller.feature.cs", label="_consumers = new ConcurrentDictionary<string, QueueingBasicConsumer>()", span="29-29"];
m20_9 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.RabbitMqJobQueue(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", file="SchedulePoller.feature.cs", label="CreateChannel()", span="31-31"];
m20_10 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.RabbitMqJobQueue(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", file="SchedulePoller.feature.cs", label="Exit Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.RabbitMqJobQueue(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", span="21-21"];
m20_72 [cluster="Unk.Abort", color=green, community=0, file="SchedulePoller.feature.cs", label="Entry Unk.Abort", prediction=115, span=""];
m20_74 [cluster="Unk.BasicQos", file="SchedulePoller.feature.cs", label="Entry Unk.BasicQos", span=""];
m20_93 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="SchedulePoller.feature.cs", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0"];
m20_96 [cluster="Unk.BasicConsume", file="SchedulePoller.feature.cs", label="Entry Unk.BasicConsume", span=""];
m20_103 [file="SchedulePoller.feature.cs", label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", span=""];
m20_104 [file="SchedulePoller.feature.cs", label=consumer, span=""];
m20_105 [file="SchedulePoller.feature.cs", label=newConsumer, span=""];
m21_8 [cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SchedulePollerSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="29-29"];
m21_52 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SchedulePollerSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="123-123"];
m21_53 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SchedulePollerSteps.cs", label="return _connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault();", span="125-128"];
m21_54 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SchedulePollerSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="123-123"];
m21_58 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, long, long)", file="SchedulePollerSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, long, long)", span="137-137"];
m21_59 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, long, long)", file="SchedulePollerSteps.cs", label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="139-142"];
m21_60 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, long, long)", file="SchedulePollerSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, long, long)", span="137-137"];
m21_66 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="SchedulePollerSteps.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m21_15 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueueMonitoringApi()", file="SchedulePollerSteps.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueueMonitoringApi()", span="43-43"];
m21_65 [cluster="HangFire.SqlServer.Entities.ServerData.ServerData()", file="SchedulePollerSteps.cs", label="Entry HangFire.SqlServer.Entities.ServerData.ServerData()", span="4-4"];
m21_20 [cluster="string.Format(string, object)", file="SchedulePollerSteps.cs", label="Entry string.Format(string, object)", span="0-0"];
m21_76 [cluster="System.TimeSpan.Negate()", file="SchedulePollerSteps.cs", label="Entry System.TimeSpan.Negate()", span="0-0"];
m21_35 [cluster="Unk.>", file="SchedulePollerSteps.cs", label="Entry Unk.>", span=""];
m21_12 [cluster="HangFire.SqlServer.SqlServerConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", file="SchedulePollerSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", span="34-34"];
m21_9 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueue()", file="SchedulePollerSteps.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueue()", span="38-38"];
m21_10 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueue()", file="SchedulePollerSteps.cs", label="return new SqlServerJobQueue(_storage, _options);", span="40-40"];
m21_61 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SchedulePollerSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", span="145-145"];
m21_63 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SchedulePollerSteps.cs", label="_connection.Execute(\r\n                @''merge HangFire.Server as Target ''\r\n                + @''using (VALUES (@id, @data)) as Source (Id, Data) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = null ''\r\n                + @''when not matched then insert (Id, Data) values (Source.Id, Source.Data);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data) })", span="154-160"];
m21_62 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SchedulePollerSteps.cs", label="var data = new ServerData\r\n            {\r\n                WorkerCount = workerCount,\r\n                Queues = queues.ToArray(),\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="147-152"];
m21_64 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SchedulePollerSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", span="145-145"];
m21_39 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobStateAndInvocationData(string)", file="SchedulePollerSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobStateAndInvocationData(string)", span="91-91"];
m21_41 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobStateAndInvocationData(string)", file="SchedulePollerSteps.cs", label="var job = _connection.Query<SqlJob>(sql, new { id = id })\r\n                .SingleOrDefault()", span="98-99"];
m21_44 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobStateAndInvocationData(string)", file="SchedulePollerSteps.cs", label="var data = JobHelper.FromJson<InvocationData>(job.InvocationData)", span="103-103"];
m21_40 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobStateAndInvocationData(string)", file="SchedulePollerSteps.cs", label="string sql = @''\r\nselect InvocationData, StateName \r\nfrom HangFire.Job\r\nwhere id = @id''", span="93-96"];
m21_42 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobStateAndInvocationData(string)", file="SchedulePollerSteps.cs", label="job == null", span="101-101"];
m21_45 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobStateAndInvocationData(string)", file="SchedulePollerSteps.cs", label="return new StateAndInvocationData\r\n            {\r\n                InvocationData = data,\r\n                State = job.StateName,\r\n            };", span="105-109"];
m21_43 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobStateAndInvocationData(string)", file="SchedulePollerSteps.cs", label="return null;", span="101-101"];
m21_46 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobStateAndInvocationData(string)", file="SchedulePollerSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetJobStateAndInvocationData(string)", span="91-91"];
m21_13 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueueMonitoringApi()", file="SchedulePollerSteps.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueueMonitoringApi()", span="43-43"];
m21_14 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueueMonitoringApi()", file="SchedulePollerSteps.cs", label="return new SqlServerJobQueueMonitoringApi(_storage);", span="45-45"];
m21_37 [cluster="Unk.ToString", file="SchedulePollerSteps.cs", label="Entry Unk.ToString", span=""];
m21_0 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.JobStorage, SqlConnection)", file="SchedulePollerSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.JobStorage, SqlConnection)", span="16-16"];
m21_1 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.JobStorage, SqlConnection)", file="SchedulePollerSteps.cs", label="_connection = connection", span="18-18"];
m21_3 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.JobStorage, SqlConnection)", file="SchedulePollerSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.JobStorage, SqlConnection)", span="16-16"];
m21_5 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SchedulePollerSteps.cs", label="_connection.Dispose()", span="26-26"];
m21_6 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SchedulePollerSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.Dispose()", span="24-24"];
m21_2 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.JobStorage, SqlConnection)", file="SchedulePollerSteps.cs", label="Storage = storage", span="19-19"];
m21_4 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SchedulePollerSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Dispose()", span="24-24"];
m21_7 [cluster="Unk.Dispose", file="SchedulePollerSteps.cs", label="Entry Unk.Dispose", span=""];
m21_34 [cluster="System.DateTime.Add(System.TimeSpan)", file="SchedulePollerSteps.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m21_73 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SchedulePollerSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="177-177"];
m21_74 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SchedulePollerSteps.cs", label="return _connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) });", span="179-181"];
m21_75 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SchedulePollerSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="177-177"];
m21_19 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="SchedulePollerSteps.cs", label="Entry HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", span="28-28"];
m21_49 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SchedulePollerSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="112-112"];
m21_50 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SchedulePollerSteps.cs", label="_connection.Execute(\r\n                @''merge HangFire.JobParameter as Target ''\r\n                + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                + @''when matched then update set Value = Source.Value ''\r\n                + @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                new { jobId = id, name, value })", span="114-120"];
m21_51 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SchedulePollerSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="112-112"];
m21_11 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueue()", file="SchedulePollerSteps.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueue()", span="38-38"];
m21_33 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="SchedulePollerSteps.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m21_16 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", file="SchedulePollerSteps.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", span="36-36"];
m21_17 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SchedulePollerSteps.cs", label="Hangfire.SqlServer.SqlServerJobQueueProvider", span=""];
m21_18 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SchedulePollerSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="39-39"];
m21_36 [cluster="Unk.Single", file="SchedulePollerSteps.cs", label="Entry Unk.Single", span=""];
m21_67 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SchedulePollerSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="163-163"];
m21_68 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SchedulePollerSteps.cs", label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="165-167"];
m21_69 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SchedulePollerSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="163-163"];
m21_38 [cluster="Unk.Execute", file="SchedulePollerSteps.cs", label="Entry Unk.Execute", span=""];
m21_21 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SchedulePollerSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="46-46"];
m21_23 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", color=green, community=0, file="SchedulePollerSteps.cs", label="var jobId = _connection.Query<int>(\r\n                createJobSql,\r\n                new\r\n                {\r\n                    invocationData = JobHelper.ToJson(invocationData),\r\n                    arguments = JobHelper.ToJson(arguments),\r\n                    createdAt = DateTime.UtcNow,\r\n                    expireAt = DateTime.UtcNow.Add(expireIn)\r\n                }).Single().ToString()", prediction=116, span="57-65"];
m21_22 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SchedulePollerSteps.cs", label="string createJobSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues (@invocationData, @arguments, @createdAt, @expireAt);\r\nSELECT CAST(SCOPE_IDENTITY() as int)''", span="52-55"];
m21_24 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SchedulePollerSteps.cs", label="parameters.Count > 0", span="67-67"];
m21_28 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", color=green, community=0, file="SchedulePollerSteps.cs", label="parameterArray[parameterIndex++] = new\r\n                    {\r\n                        jobId = jobId,\r\n                        name = parameter.Key,\r\n                        value = parameter.Value\r\n                    }", prediction=117, span="73-78"];
m21_31 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SchedulePollerSteps.cs", label="return jobId;", span="88-88"];
m21_25 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SchedulePollerSteps.cs", label="var parameterArray = new object[parameters.Count]", span="69-69"];
m21_27 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SchedulePollerSteps.cs", label=parameters, span="71-71"];
m21_26 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SchedulePollerSteps.cs", label="int parameterIndex = 0", span="70-70"];
m21_30 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SchedulePollerSteps.cs", label="_connection.Execute(insertParameterSql, parameterArray)", span="85-85"];
m21_29 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SchedulePollerSteps.cs", label="string insertParameterSql = @''\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@jobId, @name, @value)''", span="81-83"];
m21_32 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SchedulePollerSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="46-46"];
m21_70 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SchedulePollerSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="170-170"];
m21_71 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SchedulePollerSteps.cs", label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="172-174"];
m21_72 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SchedulePollerSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="170-170"];
m21_55 [cluster="HangFire.SqlServer.SqlServerConnection.CompleteJob(HangFire.Server.JobPayload)", file="SchedulePollerSteps.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CompleteJob(HangFire.Server.JobPayload)", span="131-131"];
m21_56 [cluster="HangFire.SqlServer.SqlServerConnection.CompleteJob(HangFire.Server.JobPayload)", file="SchedulePollerSteps.cs", label="_connection.Execute(''delete from HangFire.JobQueue where JobId = @id and Queue = @queueName'',\r\n                new { id = payload.Id, queueName = payload.Queue })", span="133-134"];
m21_57 [cluster="HangFire.SqlServer.SqlServerConnection.CompleteJob(HangFire.Server.JobPayload)", file="SchedulePollerSteps.cs", label="Exit HangFire.SqlServer.SqlServerConnection.CompleteJob(HangFire.Server.JobPayload)", span="131-131"];
m21_47 [cluster="Unk.SingleOrDefault", file="SchedulePollerSteps.cs", label="Entry Unk.SingleOrDefault", span=""];
m21_48 [cluster="HangFire.Storage.StateAndInvocationData.StateAndInvocationData()", file="SchedulePollerSteps.cs", label="Entry HangFire.Storage.StateAndInvocationData.StateAndInvocationData()", span="2-2"];
m21_77 [file="SchedulePollerSteps.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m22_25 [cluster="Unk.OnScenarioStart", file="ServerFilters.feature.cs", label="Entry Unk.OnScenarioStart", span=""];
m22_29 [cluster="Unk.CollectScenarioErrors", file="ServerFilters.feature.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m22_21 [cluster="Unk.OnScenarioEnd", file="ServerFilters.feature.cs", label="Entry Unk.OnScenarioEnd", span=""];
m22_26 [cluster="HangFire.Tests.ServerFiltersFeature.ScenarioCleanup()", file="ServerFilters.feature.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ScenarioCleanup()", span="66-66"];
m22_27 [cluster="HangFire.Tests.ServerFiltersFeature.ScenarioCleanup()", file="ServerFilters.feature.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m22_28 [cluster="HangFire.Tests.ServerFiltersFeature.ScenarioCleanup()", file="ServerFilters.feature.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ScenarioCleanup()", span="66-66"];
m22_50 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="Entry HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", span="105-105"];
m22_51 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Multiple server filters should be executed depending on their order'', ((string[])(null)))", span="107-107"];
m22_52 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="109-109"];
m22_53 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="111-111"];
m22_54 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="testRunner.And(''a server filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="113-113"];
m22_55 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="testRunner.And(''a server filter \'second\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="115-115"];
m22_56 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="117-117"];
m22_57 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="119-120"];
m22_58 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="table2.AddRow(new string[] {\r\n                        ''first::OnPerforming''})", span="121-122"];
m22_59 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="table2.AddRow(new string[] {\r\n                        ''second::OnPerforming''})", span="123-124"];
m22_60 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="table2.AddRow(new string[] {\r\n                        ''second::OnPerformed''})", span="125-126"];
m22_61 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="table2.AddRow(new string[] {\r\n                        ''first::OnPerformed''})", span="127-128"];
m22_62 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="testRunner.Then(''the server filter methods should be executed in the following order:'', ((string)(null)), table2, ''Then '')", span="130-130"];
m22_63 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="this.ScenarioCleanup()", span="132-132"];
m22_64 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="Exit HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", span="105-105"];
m22_81 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="ServerFilters.feature.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", span="175-175"];
m22_82 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="ServerFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server filter\'s OnPerformed could be skipped if there was an exception'', ((string[])(null)))", span="177-177"];
m22_83 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="ServerFilters.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="179-179"];
m22_84 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="ServerFilters.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="181-181"];
m22_85 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="ServerFilters.feature.cs", label="testRunner.And(''a server filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="183-183"];
m22_86 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="ServerFilters.feature.cs", label="testRunner.And(''a server filter \'second\' that throws an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="185-185"];
m22_87 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="ServerFilters.feature.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="187-187"];
m22_88 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="ServerFilters.feature.cs", label="TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="189-190"];
m22_89 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="ServerFilters.feature.cs", label="table4.AddRow(new string[] {\r\n                        ''first::OnPerforming''})", span="191-192"];
m22_90 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="ServerFilters.feature.cs", label="table4.AddRow(new string[] {\r\n                        ''second::OnPerforming''})", span="193-194"];
m22_91 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="ServerFilters.feature.cs", label="table4.AddRow(new string[] {\r\n                        ''first::OnPerformed''})", span="195-196"];
m22_93 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="ServerFilters.feature.cs", label="testRunner.And(''the state of the job should be Failed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="200-200"];
m22_94 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="ServerFilters.feature.cs", label="this.ScenarioCleanup()", span="202-202"];
m22_95 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="ServerFilters.feature.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", span="175-175"];
m22_45 [cluster="Unk.And", file="ServerFilters.feature.cs", label="Entry Unk.And", span=""];
m22_5 [cluster="Unk.GetTestRunner", file="ServerFilters.feature.cs", label="Entry Unk.GetTestRunner", span=""];
m22_124 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="Entry HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", span="274-274"];
m22_125 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Multiple server exception filters are executed depending on their order'', ((string[])(null)))", span="276-276"];
m22_126 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="278-278"];
m22_127 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="testRunner.Given(''an enqueued broken job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="280-280"];
m22_128 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="testRunner.And(''a server exception filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="282-282"];
m22_129 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="testRunner.And(''a server exception filter \'second\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="284-284"];
m22_130 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="286-286"];
m22_131 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Filter''})", span="288-289"];
m22_132 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="table6.AddRow(new string[] {\r\n                        ''first''})", span="290-291"];
m22_133 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="table6.AddRow(new string[] {\r\n                        ''second''})", span="292-293"];
m22_134 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="testRunner.Then(''the server exception filters should be executed in the following order:'', ((string)(null)), table6, ''Then '')", span="295-295"];
m22_135 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="testRunner.And(''the state of the job should be Failed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="297-297"];
m22_136 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="this.ScenarioCleanup()", span="299-299"];
m22_137 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ServerFilters.feature.cs", label="Exit HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", span="274-274"];
m22_0 [cluster="HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ServerFilters.feature.cs", label="Entry HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m22_1 [cluster="HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ServerFilters.feature.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
m22_2 [cluster="HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ServerFilters.feature.cs", label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Server filters'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34"];
m22_3 [cluster="HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ServerFilters.feature.cs", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
m22_4 [cluster="HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ServerFilters.feature.cs", label="Exit HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m22_18 [cluster="HangFire.Tests.ServerFiltersFeature.ScenarioTearDown()", file="ServerFilters.feature.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ScenarioTearDown()", span="56-56"];
m22_19 [cluster="HangFire.Tests.ServerFiltersFeature.ScenarioTearDown()", file="ServerFilters.feature.cs", label="testRunner.OnScenarioEnd()", span="58-58"];
m22_20 [cluster="HangFire.Tests.ServerFiltersFeature.ScenarioTearDown()", file="ServerFilters.feature.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ScenarioTearDown()", span="56-56"];
m22_13 [cluster="Unk.OnFeatureEnd", file="ServerFilters.feature.cs", label="Entry Unk.OnFeatureEnd", span=""];
m22_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="ServerFilters.feature.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m22_22 [cluster="HangFire.Tests.ServerFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ServerFilters.feature.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m22_23 [cluster="HangFire.Tests.ServerFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ServerFilters.feature.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m22_24 [cluster="HangFire.Tests.ServerFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ServerFilters.feature.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m22_46 [cluster="Unk.When", file="ServerFilters.feature.cs", label="Entry Unk.When", span=""];
m22_48 [cluster="Unk.AddRow", file="ServerFilters.feature.cs", label="Entry Unk.AddRow", span=""];
m22_9 [cluster="HangFire.Tests.ServerFiltersFeature.FeatureTearDown()", file="ServerFilters.feature.cs", label="Entry HangFire.Tests.ServerFiltersFeature.FeatureTearDown()", span="39-39"];
m22_10 [cluster="HangFire.Tests.ServerFiltersFeature.FeatureTearDown()", file="ServerFilters.feature.cs", label="testRunner.OnFeatureEnd()", span="41-41"];
m22_11 [cluster="HangFire.Tests.ServerFiltersFeature.FeatureTearDown()", file="ServerFilters.feature.cs", label="testRunner = null", span="42-42"];
m22_12 [cluster="HangFire.Tests.ServerFiltersFeature.FeatureTearDown()", file="ServerFilters.feature.cs", label="Exit HangFire.Tests.ServerFiltersFeature.FeatureTearDown()", span="39-39"];
m22_65 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="ServerFilters.feature.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", span="139-139"];
m22_66 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="ServerFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server filter should be able to cancel the performing of a job'', ((string[])(null)))", span="141-141"];
m22_67 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="ServerFilters.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="143-143"];
m22_68 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="ServerFilters.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="145-145"];
m22_69 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="ServerFilters.feature.cs", label="testRunner.And(''a server filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="147-147"];
m22_70 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="ServerFilters.feature.cs", label="testRunner.And(''a server filter \'second\' that cancels the performing'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="149-149"];
m22_71 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="ServerFilters.feature.cs", label="testRunner.And(''a server filter \'third\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="151-151"];
m22_72 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="ServerFilters.feature.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="153-153"];
m22_73 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="ServerFilters.feature.cs", label="testRunner.Then(''the job should not be performed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="155-155"];
m22_74 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="ServerFilters.feature.cs", label="TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="157-158"];
m22_75 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="ServerFilters.feature.cs", label="table3.AddRow(new string[] {\r\n                        ''first::OnPerforming''})", span="159-160"];
m22_76 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="ServerFilters.feature.cs", label="table3.AddRow(new string[] {\r\n                        ''second::OnPerforming''})", span="161-162"];
m22_77 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="ServerFilters.feature.cs", label="table3.AddRow(new string[] {\r\n                        ''first::OnPerformed (with the canceled flag set)''})", span="163-164"];
m22_79 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="ServerFilters.feature.cs", label="this.ScenarioCleanup()", span="168-168"];
m22_80 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="ServerFilters.feature.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", span="139-139"];
m22_96 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", span="209-209"];
m22_97 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server filter can handle the exception'', ((string[])(null)))", span="211-211"];
m22_98 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="213-213"];
m22_99 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="215-215"];
m22_100 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="testRunner.And(''a server filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="217-217"];
m22_101 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="testRunner.And(''a server filter \'second\' that handles an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="219-219"];
m22_102 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="testRunner.And(''a server filter \'third\' that throws an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="221-221"];
m22_103 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="223-223"];
m22_104 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="225-226"];
m22_105 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="table5.AddRow(new string[] {\r\n                        ''first::OnPerforming''})", span="227-228"];
m22_106 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="table5.AddRow(new string[] {\r\n                        ''second::OnPerforming''})", span="229-230"];
m22_107 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="table5.AddRow(new string[] {\r\n                        ''third::OnPerforming''})", span="231-232"];
m22_108 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="table5.AddRow(new string[] {\r\n                        ''second::OnPerformed''})", span="233-234"];
m22_109 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="table5.AddRow(new string[] {\r\n                        ''first::OnPerformed''})", span="235-236"];
m22_110 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="testRunner.Then(''the server filter methods should be executed in the following order:'', ((string)(null)), table5, ''Then '')", span="238-238"];
m22_111 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="testRunner.And(''the state of the job should be Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="240-240"];
m22_112 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="this.ScenarioCleanup()", span="242-242"];
m22_113 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", span="209-209"];
m22_43 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="ServerFilters.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m22_14 [cluster="HangFire.Tests.ServerFiltersFeature.TestInitialize()", file="ServerFilters.feature.cs", label="Entry HangFire.Tests.ServerFiltersFeature.TestInitialize()", span="46-46"];
m22_15 [cluster="HangFire.Tests.ServerFiltersFeature.TestInitialize()", file="ServerFilters.feature.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Server filters''))", span="48-49"];
m22_16 [cluster="HangFire.Tests.ServerFiltersFeature.TestInitialize()", file="ServerFilters.feature.cs", label="HangFire.Tests.ServerFiltersFeature.FeatureSetup(null)", span="51-51"];
m22_17 [cluster="HangFire.Tests.ServerFiltersFeature.TestInitialize()", file="ServerFilters.feature.cs", label="Exit HangFire.Tests.ServerFiltersFeature.TestInitialize()", span="46-46"];
m22_49 [cluster="Unk.Then", file="ServerFilters.feature.cs", label="Entry Unk.Then", span=""];
m22_44 [cluster="Unk.Given", file="ServerFilters.feature.cs", label="Entry Unk.Given", span=""];
m22_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="ServerFilters.feature.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m22_47 [cluster="TechTalk.SpecFlow.Table.cstr", file="ServerFilters.feature.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m22_8 [cluster="Unk.OnFeatureStart", file="ServerFilters.feature.cs", label="Entry Unk.OnFeatureStart", span=""];
m22_114 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="ServerFilters.feature.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", span="250-250"];
m22_115 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="ServerFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server exception filters are executed when there was an exception while performin'' +\r\n                    ''g a job'', ((string[])(null)))", span="252-253"];
m22_116 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="ServerFilters.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="255-255"];
m22_117 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="ServerFilters.feature.cs", label="testRunner.Given(''an enqueued broken job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="257-257"];
m22_118 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="ServerFilters.feature.cs", label="testRunner.And(''a server exception filter \'test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="259-259"];
m22_119 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="ServerFilters.feature.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="261-261"];
m22_120 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="ServerFilters.feature.cs", label="testRunner.Then(''the server exception filter should be executed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="263-263"];
m22_121 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="ServerFilters.feature.cs", label="testRunner.And(''the state of the job should be Failed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="265-265"];
m22_122 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="ServerFilters.feature.cs", label="this.ScenarioCleanup()", span="267-267"];
m22_123 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="ServerFilters.feature.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", span="250-250"];
m22_30 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="ServerFilters.feature.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", span="75-75"];
m22_31 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="ServerFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server filters should be executed when the worker performs the job'', ((string[])(null)))", span="77-77"];
m22_32 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="ServerFilters.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="79-79"];
m22_33 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="ServerFilters.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81"];
m22_34 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="ServerFilters.feature.cs", label="testRunner.And(''a server filter \'test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83"];
m22_35 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="ServerFilters.feature.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85"];
m22_36 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="ServerFilters.feature.cs", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="87-88"];
m22_37 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="ServerFilters.feature.cs", label="table1.AddRow(new string[] {\r\n                        ''test::OnPerforming''})", span="89-90"];
m22_38 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="ServerFilters.feature.cs", label="table1.AddRow(new string[] {\r\n                        ''test::OnPerformed''})", span="91-92"];
m22_39 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="ServerFilters.feature.cs", label="testRunner.Then(''the server filter methods should be executed in the following order:'', ((string)(null)), table1, ''Then '')", span="94-94"];
m22_40 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="ServerFilters.feature.cs", label="testRunner.And(''the job should be performed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="96-96"];
m22_41 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="ServerFilters.feature.cs", label="this.ScenarioCleanup()", span="98-98"];
m22_42 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="ServerFilters.feature.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", span="75-75"];
m22_138 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", span="306-306"];
m22_139 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server exception filter can handle the exception'', ((string[])(null)))", span="308-308"];
m22_140 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="310-310"];
m22_141 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="testRunner.Given(''an enqueued broken job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="312-312"];
m22_142 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="testRunner.And(''a server exception filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="314-314"];
m22_143 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="testRunner.And(''a server exception filter \'second\' that handles an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="316-316"];
m22_144 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="testRunner.And(''a server exception filter \'third\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="318-318"];
m22_145 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="320-320"];
m22_146 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Filter''})", span="322-323"];
m22_147 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="table7.AddRow(new string[] {\r\n                        ''first''})", span="324-325"];
m22_148 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="table7.AddRow(new string[] {\r\n                        ''second''})", span="326-327"];
m22_149 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="table7.AddRow(new string[] {\r\n                        ''third''})", span="328-329"];
m22_150 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="testRunner.Then(''the following server exception filters should be executed:'', ((string)(null)), table7, ''Then '')", span="331-331"];
m22_151 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="testRunner.And(''the state of the job should be Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="333-333"];
m22_152 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="this.ScenarioCleanup()", span="335-335"];
m22_153 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="ServerFilters.feature.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", span="306-306"];
m22_154 [file="ServerFilters.feature.cs", label="HangFire.Tests.ServerFiltersFeature", span=""];
m23_15 [cluster="System.DateTime.Add(System.TimeSpan)", file="ServerSteps.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m23_57 [cluster="Hangfire.SqlServer.EnqueuedAndFetchedCountDto.EnqueuedAndFetchedCountDto()", file="ServerSteps.cs", label="Entry Hangfire.SqlServer.EnqueuedAndFetchedCountDto.EnqueuedAndFetchedCountDto()", span="18-18"];
m23_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="ServerSteps.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m23_6 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="ServerSteps.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", span="42-42"];
m23_7 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="ServerSteps.cs", label="string sqlQuery = @''select distinct(Queue) from HangFire.JobQueue''", span="44-44"];
m23_8 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="ServerSteps.cs", label=_cacheLock, span="46-46"];
m23_10 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="ServerSteps.cs", label="var result = UseTransaction(connection =>\r\n                    {\r\n                        return connection.Query(sqlQuery).Select(x => (string) x.Queue).ToList();\r\n                    })", span="50-53"];
m23_9 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="ServerSteps.cs", label="_queuesCache.Count == 0 || _cacheUpdated.Add(QueuesCacheTimeout) < DateTime.UtcNow", span="48-48"];
m23_13 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="ServerSteps.cs", label="return _queuesCache.ToList();", span="59-59"];
m23_11 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="ServerSteps.cs", label="_queuesCache = result", span="55-55"];
m23_12 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="ServerSteps.cs", label="_cacheUpdated = DateTime.UtcNow", span="56-56"];
m23_14 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="ServerSteps.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", span="42-42"];
m23_0 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", file="ServerSteps.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", span="36-36"];
m23_1 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", file="ServerSteps.cs", label="storage == null", span="38-38"];
m23_3 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", file="ServerSteps.cs", label="_storage = storage", span="39-39"];
m23_2 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", file="ServerSteps.cs", label="throw new ArgumentNullException(''storage'');", span="38-38"];
m23_4 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", file="ServerSteps.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", span="36-36"];
m23_34 [cluster="Unk.>", file="ServerSteps.cs", label="Entry Unk.>", span=""];
m23_56 [cluster="Unk.Single", file="ServerSteps.cs", label="Entry Unk.Single", span=""];
m23_38 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", file="ServerSteps.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="84-84"];
m23_39 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", file="ServerSteps.cs", label="string fetchedJobsSql = @''\r\nselect r.Id from (\r\n  select j.Id, jq.FetchedAt, row_number() over (order by j.Id) as row_num \r\n  from HangFire.JobQueue jq\r\n  left join HangFire.Job j on jq.JobId = j.Id\r\n  where jq.Queue = @queue and jq.FetchedAt is not null\r\n) as r\r\nwhere r.row_num between @start and @end''", span="86-93"];
m23_41 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", file="ServerSteps.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="84-84"];
m23_23 [cluster="Unk.ToList", file="ServerSteps.cs", label="Entry Unk.ToList", span=""];
m23_27 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="ServerSteps.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="63-63"];
m23_28 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="ServerSteps.cs", label="string sqlQuery = @''\r\nselect r.Id from (\r\n  select jq.Id, row_number() over (order by jq.Id) as row_num \r\n  from HangFire.JobQueue jq\r\n  where jq.Queue = @queue\r\n) as r\r\nwhere r.row_num between @start and @end''", span="65-71"];
m23_29 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="ServerSteps.cs", label="return UseTransaction(connection =>\r\n            {\r\n                return connection.Query<JobIdDto>(\r\n                    sqlQuery,\r\n                    new { queue = queue, start = from + 1, end = @from + perPage })\r\n                    .ToList()\r\n                    .Select(x => x.Id)\r\n                    .ToList();\r\n            });", span="73-81"];
m23_30 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="ServerSteps.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="63-63"];
m23_48 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", file="ServerSteps.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="106-106"];
m23_49 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", file="ServerSteps.cs", label="string sqlQuery = @''\r\nselect count(Id) from HangFire.JobQueue where [Queue] = @queue''", span="108-109"];
m23_51 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", file="ServerSteps.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="106-106"];
m23_16 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.UseTransaction<T>(System.Func<SqlConnection, T>)", file="ServerSteps.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.UseTransaction<T>(System.Func<SqlConnection, T>)", span="123-123"];
m23_58 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.UseTransaction<T>(System.Func<SqlConnection, T>)", file="ServerSteps.cs", label="return _storage.UseTransaction(func, IsolationLevel.ReadUncommitted);", span="125-125"];
m23_59 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.UseTransaction<T>(System.Func<SqlConnection, T>)", file="ServerSteps.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.UseTransaction<T>(System.Func<SqlConnection, T>)", span="123-123"];
m23_17 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="ServerSteps.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m23_21 [cluster="Unk.Query", file="ServerSteps.cs", label="Entry Unk.Query", span=""];
m23_60 [cluster="Unk.UseTransaction", file="ServerSteps.cs", label="Entry Unk.UseTransaction", span=""];
m23_52 [cluster="lambda expression", file="ServerSteps.cs", label="Entry lambda expression", span="111-120"];
m23_19 [cluster="lambda expression", file="ServerSteps.cs", label="return connection.Query(sqlQuery).Select(x => (string) x.Queue).ToList();", span="52-52"];
m23_18 [cluster="lambda expression", file="ServerSteps.cs", label="Entry lambda expression", span="50-53"];
m23_20 [cluster="lambda expression", file="ServerSteps.cs", label="Exit lambda expression", span="50-53"];
m23_24 [cluster="lambda expression", file="ServerSteps.cs", label="Entry lambda expression", span="52-52"];
m23_25 [cluster="lambda expression", file="ServerSteps.cs", label="(string) x.Queue", span="52-52"];
m23_26 [cluster="lambda expression", file="ServerSteps.cs", label="Exit lambda expression", span="52-52"];
m23_32 [cluster="lambda expression", file="ServerSteps.cs", label="return connection.Query<JobIdDto>(\r\n                    sqlQuery,\r\n                    new { queue = queue, start = from + 1, end = @from + perPage })\r\n                    .ToList()\r\n                    .Select(x => x.Id)\r\n                    .ToList();", span="75-80"];
m23_31 [cluster="lambda expression", file="ServerSteps.cs", label="Entry lambda expression", span="73-81"];
m23_33 [cluster="lambda expression", file="ServerSteps.cs", label="Exit lambda expression", span="73-81"];
m23_35 [cluster="lambda expression", file="ServerSteps.cs", label="Entry lambda expression", span="79-79"];
m23_36 [cluster="lambda expression", file="ServerSteps.cs", label="x.Id", span="79-79"];
m23_37 [cluster="lambda expression", file="ServerSteps.cs", label="Exit lambda expression", span="79-79"];
m23_42 [cluster="lambda expression", file="ServerSteps.cs", label="Entry lambda expression", span="95-103"];
m23_44 [cluster="lambda expression", file="ServerSteps.cs", label="Exit lambda expression", span="95-103"];
m23_45 [cluster="lambda expression", file="ServerSteps.cs", label="Entry lambda expression", span="101-101"];
m23_47 [cluster="lambda expression", file="ServerSteps.cs", label="Exit lambda expression", span="101-101"];
m23_54 [cluster="lambda expression", file="ServerSteps.cs", label="return new EnqueuedAndFetchedCountDto\r\n                {\r\n                    EnqueuedCount = result.EnqueuedCount,\r\n                    FetchedCount = result.FetchedCount\r\n                };", span="115-119"];
m23_55 [cluster="lambda expression", file="ServerSteps.cs", label="Exit lambda expression", span="111-120"];
m23_22 [cluster="Unk.Select", file="ServerSteps.cs", label="Entry Unk.Select", span=""];
m23_61 [file="ServerSteps.cs", label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", span=""];
m23_62 [file="ServerSteps.cs", label=sqlQuery, span=""];
m23_63 [file="ServerSteps.cs", label=string, span=""];
m23_64 [file="ServerSteps.cs", label=int, span=""];
m23_65 [file="ServerSteps.cs", label=int, span=""];
m23_66 [file="ServerSteps.cs", label=sqlQuery, span=""];
m23_67 [file="ServerSteps.cs", label=string, span=""];
m23_68 [file="ServerSteps.cs", label=int, span=""];
m23_69 [file="ServerSteps.cs", label=int, span=""];
m23_70 [file="ServerSteps.cs", label=fetchedJobsSql, span=""];
m23_71 [file="ServerSteps.cs", label=string, span=""];
m23_72 [file="ServerSteps.cs", label=sqlQuery, span=""];
m24_87 [cluster="System.Collections.Generic.List<T>.List()", file="StateMachine.feature.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m24_350 [cluster="Hangfire.Storage.InvocationData.Deserialize()", file="StateMachine.feature.cs", label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="40-40"];
m24_111 [cluster="long.Parse(string)", file="StateMachine.feature.cs", label="Entry long.Parse(string)", span="0-0"];
m24_365 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="StateMachine.feature.cs", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
m24_6 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="42-42"];
m24_7 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="StateMachine.feature.cs", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ScheduledState.StateName));", span="44-45"];
m24_8 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="42-42"];
m24_9 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", span="427-427"];
m24_10 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="44-45"];
m24_88 [cluster="Hangfire.Storage.Monitoring.ServerDto.ServerDto()", file="StateMachine.feature.cs", label="Entry Hangfire.Storage.Monitoring.ServerDto.ServerDto()", span="21-21"];
m24_44 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="488-488"];
m24_353 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.feature.cs", label="return DeserializeJobs(jobs, selector);", span="509-509"];
m24_351 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.feature.cs", label="string jobsSql = @''\r\nselect * from (\r\n  select j.*, s.Reason as StateReason, s.Data as StateData, row_number() over (order by j.Id desc) as row_num\r\n  from HangFire.Job j\r\n  left join HangFire.State s on j.StateId = s.Id\r\n  where j.StateName = @stateName\r\n) as j where j.row_num between @start and @end\r\n''", span="495-502"];
m24_352 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.feature.cs", label="var jobs = connection.Query<SqlJob>(\r\n                        jobsSql,\r\n                        new { stateName = stateName, start = @from + 1, end = @from + count })\r\n                        .ToList()", span="504-507"];
m24_354 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="488-488"];
m24_36 [cluster="lambda expression", file="StateMachine.feature.cs", label="GetNumberOfJobsByStateName(connection, ProcessingState.StateName)", span="73-73"];
m24_366 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="StateMachine.feature.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m24_26 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="StateMachine.feature.cs", label="state = new SucceededState()", span="96-96"];
m24_27 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="StateMachine.feature.cs", label=JobPerformanceException, span="98-98"];
m24_28 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="StateMachine.feature.cs", label="state = new FailedState(ex.InnerException)\r\n                {\r\n                    Reason = ex.Message\r\n                }", span="100-103"];
m24_139 [cluster="Hangfire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", file="StateMachine.feature.cs", label="Entry Hangfire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="18-18"];
m24_99 [cluster="Hangfire.Storage.Monitoring.FailedJobDto.FailedJobDto()", file="StateMachine.feature.cs", label="Entry Hangfire.Storage.Monitoring.FailedJobDto.FailedJobDto()", span="23-23"];
m24_355 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="512-512"];
m24_361 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.feature.cs", label="result.Add(new KeyValuePair<string, TDto>(\r\n                    job.Id.ToString(), dto))", span="527-528"];
m24_356 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.feature.cs", label="var result = new List<KeyValuePair<string, TDto>>(jobs.Count)", span="516-516"];
m24_357 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.feature.cs", label=jobs, span="518-518"];
m24_360 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.feature.cs", label="var dto = selector(job, DeserializeJob(job.InvocationData, job.Arguments), stateData)", span="525-525"];
m24_359 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.feature.cs", label="var stateData = deserializedData != null\r\n                    ? new Dictionary<string, string>(deserializedData, StringComparer.OrdinalIgnoreCase)\r\n                    : null", span="521-523"];
m24_362 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.feature.cs", label="return new JobList<TDto>(result);", span="531-531"];
m24_358 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.feature.cs", label="var deserializedData = JobHelper.FromJson<Dictionary<string, string>>(job.StateData)", span="520-520"];
m24_363 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="512-512"];
m24_13 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="StateMachine.feature.cs", label="Entry HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", span="64-64"];
m24_338 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", color=green, community=0, file="StateMachine.feature.cs", label="string sqlQuery = @''\r\nselect count(Id) from HangFire.Job where StateName = @state''", prediction=118, span="462-463"];
m24_339 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", color=green, community=0, file="StateMachine.feature.cs", label="var count = connection.Query<int>(\r\n                 sqlQuery,\r\n                 new { state = stateName })\r\n                 .Single()", prediction=119, span="465-468"];
m24_340 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", file="StateMachine.feature.cs", label="return count;", span="470-470"];
m24_341 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", span="460-460"];
m24_226 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="298-298"];
m24_227 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="StateMachine.feature.cs", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, DeletedState.StateName));", span="300-301"];
m24_228 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="298-298"];
m24_378 [cluster="Unk.ToString", file="StateMachine.feature.cs", label="Entry Unk.ToString", span=""];
m24_326 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", color=green, community=0, file="StateMachine.feature.cs", label="return _storage.UseTransaction(action, IsolationLevel.ReadUncommitted);", prediction=120, span="429-429"];
m24_327 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", span="427-427"];
m24_238 [cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", file="StateMachine.feature.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0"];
m24_185 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="244-244"];
m24_186 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="StateMachine.feature.cs", label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''failed''));", span="246-247"];
m24_187 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="244-244"];
m24_333 [cluster="Unk.DeserializeJobs", file="StateMachine.feature.cs", label="Entry Unk.DeserializeJobs", span=""];
m24_232 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="304-304"];
m24_233 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", color=green, community=0, file="StateMachine.feature.cs", label="string sql = @''\r\nselect count(Id) from HangFire.Job where StateName = N'Enqueued';\r\nselect count(Id) from HangFire.Job where StateName = N'Failed';\r\nselect count(Id) from HangFire.Job where StateName = N'Processing';\r\nselect count(Id) from HangFire.Job where StateName = N'Scheduled';\r\nselect count(Id) from HangFire.Server;\r\nselect sum(s.[Value]) from (\r\n    select sum([Value]) as [Value] from HangFire.Counter where [Key] = N'stats:succeeded'\r\n    union all\r\n    select [Value] from HangFire.AggregatedCounter where [Key] = N'stats:succeeded'\r\n) as s;\r\nselect sum(s.[Value]) from (\r\n    select sum([Value]) as [Value] from HangFire.Counter where [Key] = N'stats:deleted'\r\n    union all\r\n    select [Value] from HangFire.AggregatedCounter where [Key] = N'stats:deleted'\r\n) as s;\r\nselect count(*) from HangFire.[Set] where [Key] = N'recurring-jobs';\r\n''", prediction=121, span="306-323"];
m24_234 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="StateMachine.feature.cs", label="var statistics = UseConnection(connection =>\r\n            {\r\n                var stats = new StatisticsDto();\r\n                using (var multi = connection.QueryMultiple(sql))\r\n                {\r\n                    stats.Enqueued = multi.Read<int>().Single();\r\n                    stats.Failed = multi.Read<int>().Single();\r\n                    stats.Processing = multi.Read<int>().Single();\r\n                    stats.Scheduled = multi.Read<int>().Single();\r\n\r\n                    stats.Servers = multi.Read<int>().Single();\r\n\r\n                    stats.Succeeded = multi.Read<long?>().SingleOrDefault() ?? 0;\r\n                    stats.Deleted = multi.Read<long?>().SingleOrDefault() ?? 0;\r\n\r\n                    stats.Recurring = multi.Read<int>().Single();\r\n                }\r\n                return stats;\r\n            })", span="325-343"];
m24_235 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="StateMachine.feature.cs", label="statistics.Queues = _storage.QueueProviders\r\n                .SelectMany(x => x.GetJobQueueMonitoringApi().GetQueues())\r\n                .Count()", span="345-347"];
m24_236 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="StateMachine.feature.cs", label="return statistics;", span="349-349"];
m24_237 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="304-304"];
m24_173 [cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="24-24"];
m24_168 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="230-230"];
m24_169 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="StateMachine.feature.cs", label="var queueApi = GetQueueApi(queue)", span="232-232"];
m24_171 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="StateMachine.feature.cs", label="return UseConnection(connection => FetchedJobs(connection, fetchedJobIds));", span="235-235"];
m24_170 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="StateMachine.feature.cs", label="var fetchedJobIds = queueApi.GetFetchedJobIds(queue, from, perPage)", span="233-233"];
m24_172 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="230-230"];
m24_184 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", span="352-352"];
m24_267 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="return GetTimelineStats(connection, keyMaps);", span="366-366"];
m24_263 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="dates.Add(endDate)", span="360-360"];
m24_266 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="var keyMaps = dates.ToDictionary(x => String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH'')), x => x)", span="364-364"];
m24_260 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="var dates = new List<DateTime>()", span="357-357"];
m24_259 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="var endDate = DateTime.UtcNow", span="356-356"];
m24_262 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="i < 24", span="358-358"];
m24_264 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="endDate = endDate.AddHours(-1)", span="361-361"];
m24_261 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="var i = 0", span="358-358"];
m24_265 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="i++", span="358-358"];
m24_268 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", span="352-352"];
m24_311 [cluster="Unk.ContainsKey", file="StateMachine.feature.cs", label="Entry Unk.ContainsKey", span=""];
m24_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="StateMachine.feature.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m24_110 [cluster="Hangfire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="StateMachine.feature.cs", label="Entry Hangfire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="23-23"];
m24_157 [cluster="Unk.EnqueuedJobs", file="StateMachine.feature.cs", label="Entry Unk.EnqueuedJobs", span=""];
m24_379 [cluster="Hangfire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", file="StateMachine.feature.cs", label="Entry Hangfire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", span="21-21"];
m24_258 [cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", span="22-22"];
m24_34 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="70-70"];
m24_163 [cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="23-23"];
m24_143 [cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi()", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi()", span="21-21"];
m24_14 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="48-48"];
m24_15 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="StateMachine.feature.cs", label="var queueApi = GetQueueApi(queue)", span="50-50"];
m24_16 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="StateMachine.feature.cs", label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="51-51"];
m24_49 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="StateMachine.feature.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m24_367 [cluster="int.ToString()", file="StateMachine.feature.cs", label="Entry int.ToString()", span="0-0"];
m24_35 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="72-73"];
m24_328 [cluster="Unk.UseTransaction", file="StateMachine.feature.cs", label="Entry Unk.UseTransaction", span=""];
m24_122 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", span="193-193"];
m24_123 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="StateMachine.feature.cs", label="var tuples = _storage.QueueProviders\r\n                .Select(x => x.GetJobQueueMonitoringApi())\r\n                .SelectMany(x => x.GetQueues(), (monitoring, queue) => new { Monitoring = monitoring, Queue = queue })\r\n                .OrderBy(x => x.Queue)\r\n                .ToArray()", span="195-199"];
m24_128 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="StateMachine.feature.cs", label="var firstJobs = UseConnection(connection => EnqueuedJobs(connection, enqueuedJobIds))", span="208-208"];
m24_129 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="StateMachine.feature.cs", label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                {\r\n                    Name = tuple.Queue,\r\n                    Length = counters.EnqueuedCount ?? 0,\r\n                    Fetched = counters.FetchedCount,\r\n                    FirstJobs = firstJobs\r\n                })", span="210-216"];
m24_124 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="StateMachine.feature.cs", label="var result = new List<QueueWithTopEnqueuedJobsDto>(tuples.Length)", span="201-201"];
m24_125 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="StateMachine.feature.cs", label=tuples, span="203-203"];
m24_126 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="StateMachine.feature.cs", label="var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue, 0, 5)", span="205-205"];
m24_127 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="StateMachine.feature.cs", label="var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount(tuple.Queue)", span="206-206"];
m24_130 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="StateMachine.feature.cs", label="return result;", span="219-219"];
m24_131 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", span="193-193"];
m24_135 [cluster="Unk.ToArray", file="StateMachine.feature.cs", label="Entry Unk.ToArray", span=""];
m24_289 [cluster="System.DateTime.AddDays(double)", file="StateMachine.feature.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m24_219 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", file="StateMachine.feature.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0"];
m24_33 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="StateMachine.feature.cs", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ProcessingState.StateName));", span="72-73"];
m24_349 [cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="StateMachine.feature.cs", label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39"];
m24_112 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="179-179"];
m24_113 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="StateMachine.feature.cs", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }));", span="181-190"];
m24_114 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="179-179"];
m24_270 [cluster="Unk.GetTimelineStats", file="StateMachine.feature.cs", label="Entry Unk.GetTimelineStats", span=""];
m24_218 [cluster="Hangfire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", file="StateMachine.feature.cs", label="Entry Hangfire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", span="21-21"];
m24_276 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="364-364"];
m24_41 [cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="StateMachine.feature.cs", label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="26-26"];
m24_42 [cluster="lambda expression", color=green, community=0, file="StateMachine.feature.cs", label="HangFire.Server.Worker", prediction=120, span=""];
m24_43 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="78-87"];
m24_45 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="82-87"];
m24_46 [cluster="lambda expression", color=green, community=0, file="StateMachine.feature.cs", label="new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeDateTime(stateData[''StartedAt'']),\r\n                }", prediction=123, span="82-87"];
m24_47 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="82-87"];
m24_78 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="118-140"];
m24_83 [cluster="lambda expression", color=green, community=0, file="StateMachine.feature.cs", label="result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    })", prediction=124, span="129-136"];
m24_80 [cluster="lambda expression", file="StateMachine.feature.cs", label="var result = new List<ServerDto>()", span="124-124"];
m24_81 [cluster="lambda expression", file="StateMachine.feature.cs", label=servers, span="126-126"];
m24_82 [cluster="lambda expression", file="StateMachine.feature.cs", label="var data = JobHelper.FromJson<ServerData>(server.Data)", span="128-128"];
m24_93 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="145-158"];
m24_94 [cluster="lambda expression", color=green, community=0, file="StateMachine.feature.cs", label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                })", prediction=125, span="145-158"];
m24_95 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="145-158"];
m24_96 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="150-158"];
m24_97 [cluster="lambda expression", color=green, community=0, file="StateMachine.feature.cs", label="new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }", prediction=126, span="150-158"];
m24_98 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="150-158"];
m24_194 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="252-289"];
m24_195 [cluster="lambda expression", color=green, community=0, file="StateMachine.feature.cs", label="string sql = @''\r\nselect * from HangFire.Job where Id = @id\r\nselect * from HangFire.JobParameter where JobId = @id\r\nselect * from HangFire.State where JobId = @id order by Id desc''", prediction=127, span="255-258"];
m24_196 [cluster="lambda expression", file="StateMachine.feature.cs", label="var multi = connection.QueryMultiple(sql, new { id = jobId })", span="260-260"];
m24_198 [cluster="lambda expression", color=green, community=0, file="StateMachine.feature.cs", label="job == null", prediction=128, span="263-263"];
m24_197 [cluster="lambda expression", file="StateMachine.feature.cs", label="var job = multi.Read<SqlJob>().SingleOrDefault()", span="262-262"];
m24_199 [cluster="lambda expression", color=green, community=0, file="StateMachine.feature.cs", label="return null;", prediction=129, span="263-263"];
m24_200 [cluster="lambda expression", file="StateMachine.feature.cs", label="var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value)", span="265-265"];
m24_202 [cluster="lambda expression", color=green, community=0, file="StateMachine.feature.cs", label="return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };", prediction=130, span="280-287"];
m24_201 [cluster="lambda expression", file="StateMachine.feature.cs", label="var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new Dictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList()", span="266-278"];
m24_203 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="252-289"];
m24_223 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="294-295"];
m24_224 [cluster="lambda expression", color=green, community=0, file="StateMachine.feature.cs", label="GetNumberOfJobsByStateName(connection, SucceededState.StateName)", prediction=120, span="295-295"];
m24_225 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="294-295"];
m24_242 [cluster="lambda expression", file="StateMachine.feature.cs", label="var multi = connection.QueryMultiple(sql)", span="328-328"];
m24_315 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="402-402"];
m24_318 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="402-402"];
m24_334 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="450-457"];
m24_335 [cluster="lambda expression", color=green, community=0, file="StateMachine.feature.cs", label="new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                }", prediction=132, span="450-457"];
m24_336 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="450-457"];
m24_11 [cluster="HangFire.JobStorage.GetConnection()", file="StateMachine.feature.cs", label="Entry HangFire.JobStorage.GetConnection()", span="56-56"];
m24_55 [cluster="lambda expression", file="StateMachine.feature.cs", label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                })", span="92-101"];
m24_65 [cluster="lambda expression", file="StateMachine.feature.cs", label="GetTimelineStats(connection, ''succeeded'')", span="107-107"];
m24_72 [cluster="lambda expression", file="StateMachine.feature.cs", label="GetTimelineStats(connection, ''failed'')", span="113-113"];
m24_105 [cluster="lambda expression", file="StateMachine.feature.cs", label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    Result = stateData.ContainsKey(''Result'') ? stateData[''Result''] : null,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                })", span="163-176"];
m24_116 [cluster="lambda expression", file="StateMachine.feature.cs", label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                })", span="181-190"];
m24_155 [cluster="lambda expression", file="StateMachine.feature.cs", label="EnqueuedJobs(connection, enqueuedJobIds)", span="208-208"];
m24_165 [cluster="lambda expression", file="StateMachine.feature.cs", label="EnqueuedJobs(connection, enqueuedJobIds)", span="227-227"];
m24_175 [cluster="lambda expression", file="StateMachine.feature.cs", label="FetchedJobs(connection, fetchedJobIds)", span="235-235"];
m24_182 [cluster="lambda expression", file="StateMachine.feature.cs", label="GetHourlyTimelineStats(connection, ''succeeded'')", span="241-241"];
m24_189 [cluster="lambda expression", file="StateMachine.feature.cs", label="GetHourlyTimelineStats(connection, ''failed'')", span="247-247"];
m24_230 [cluster="lambda expression", file="StateMachine.feature.cs", label="GetNumberOfJobsByStateName(connection, DeletedState.StateName)", span="301-301"];
m24_108 [cluster="lambda expression", file="StateMachine.feature.cs", label="new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    Result = stateData.ContainsKey(''Result'') ? stateData[''Result''] : null,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }", span="168-176"];
m24_58 [cluster="lambda expression", file="StateMachine.feature.cs", label="new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                }", span="96-101"];
m24_79 [cluster="lambda expression", file="StateMachine.feature.cs", label="var servers = connection.Query<Entities.Server>(\r\n                    @''select * from HangFire.Server'')\r\n                    .ToList()", span="120-122"];
m24_216 [cluster="lambda expression", file="StateMachine.feature.cs", label="new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new Dictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            }", span="269-277"];
m24_243 [cluster="lambda expression", file="StateMachine.feature.cs", label="stats.Enqueued = multi.Read<int>().Single()", span="330-330"];
m24_244 [cluster="lambda expression", file="StateMachine.feature.cs", label="stats.Failed = multi.Read<int>().Single()", span="331-331"];
m24_245 [cluster="lambda expression", file="StateMachine.feature.cs", label="stats.Processing = multi.Read<int>().Single()", span="332-332"];
m24_246 [cluster="lambda expression", file="StateMachine.feature.cs", label="stats.Scheduled = multi.Read<int>().Single()", span="333-333"];
m24_247 [cluster="lambda expression", file="StateMachine.feature.cs", label="stats.Servers = multi.Read<int>().Single()", span="335-335"];
m24_248 [cluster="lambda expression", file="StateMachine.feature.cs", label="stats.Succeeded = multi.Read<long?>().SingleOrDefault() ?? 0", span="337-337"];
m24_249 [cluster="lambda expression", file="StateMachine.feature.cs", label="stats.Deleted = multi.Read<long?>().SingleOrDefault() ?? 0", span="338-338"];
m24_250 [cluster="lambda expression", file="StateMachine.feature.cs", label="stats.Recurring = multi.Read<int>().Single()", span="340-340"];
m24_85 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="118-140"];
m24_84 [cluster="lambda expression", file="StateMachine.feature.cs", label="return result;", span="139-139"];
m24_119 [cluster="lambda expression", file="StateMachine.feature.cs", label="new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }", span="186-190"];
m24_209 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="265-265"];
m24_212 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="265-265"];
m24_215 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="269-277"];
m24_240 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="325-343"];
m24_241 [cluster="lambda expression", file="StateMachine.feature.cs", label="var stats = new StatisticsDto()", span="327-327"];
m24_291 [cluster="lambda expression", file="StateMachine.feature.cs", label="String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd''))", span="381-381"];
m24_317 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="402-402"];
m24_316 [cluster="lambda expression", file="StateMachine.feature.cs", label="(string)x.Key", span="402-402"];
m24_320 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="402-402"];
m24_319 [cluster="lambda expression", file="StateMachine.feature.cs", label="(long)x.Count", span="402-402"];
m24_12 [cluster="HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="StateMachine.feature.cs", label="Entry HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="30-30"];
m24_29 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="StateMachine.feature.cs", label=Exception, span="105-105"];
m24_31 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="StateMachine.feature.cs", label="stateMachine.TryToChangeState(jobId, state, new[] { ProcessingState.StateName })", span="115-115"];
m24_37 [cluster="HangFire.Storage.JobData.EnsureLoaded()", file="StateMachine.feature.cs", label="Entry HangFire.Storage.JobData.EnsureLoaded()", span="27-27"];
m24_54 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="92-101"];
m24_56 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="92-101"];
m24_57 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="96-101"];
m24_64 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="106-107"];
m24_66 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="106-107"];
m24_71 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="112-113"];
m24_73 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="112-113"];
m24_104 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="163-176"];
m24_106 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="163-176"];
m24_107 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="168-176"];
m24_115 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="181-190"];
m24_117 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="181-190"];
m24_118 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="186-190"];
m24_140 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="196-196"];
m24_144 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="197-197"];
m24_148 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="197-197"];
m24_151 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="198-198"];
m24_154 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="208-208"];
m24_156 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="208-208"];
m24_164 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="227-227"];
m24_166 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="227-227"];
m24_174 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="235-235"];
m24_176 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="235-235"];
m24_181 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="240-241"];
m24_183 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="240-241"];
m24_188 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="246-247"];
m24_190 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="246-247"];
m24_229 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="300-301"];
m24_231 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="300-301"];
m24_255 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="346-346"];
m24_109 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="168-176"];
m24_59 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="96-101"];
m24_217 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="269-277"];
m24_251 [cluster="lambda expression", file="StateMachine.feature.cs", label="return stats;", span="342-342"];
m24_120 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="186-190"];
m24_211 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="265-265"];
m24_210 [cluster="lambda expression", file="StateMachine.feature.cs", label="x.Name", span="265-265"];
m24_214 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="265-265"];
m24_213 [cluster="lambda expression", file="StateMachine.feature.cs", label="x.Value", span="265-265"];
m24_252 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="325-343"];
m24_290 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="381-381"];
m24_293 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="381-381"];
m24_292 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="381-381"];
m24_271 [cluster="lambda expression", file="StateMachine.feature.cs", label="Entry lambda expression", span="364-364"];
m24_142 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="196-196"];
m24_141 [cluster="lambda expression", file="StateMachine.feature.cs", label="x.GetJobQueueMonitoringApi()", span="196-196"];
m24_146 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="197-197"];
m24_145 [cluster="lambda expression", file="StateMachine.feature.cs", label="x.GetQueues()", span="197-197"];
m24_150 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="197-197"];
m24_149 [cluster="lambda expression", file="StateMachine.feature.cs", label="new { Monitoring = monitoring, Queue = queue }", span="197-197"];
m24_153 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="198-198"];
m24_152 [cluster="lambda expression", file="StateMachine.feature.cs", label="x.Queue", span="198-198"];
m24_272 [cluster="lambda expression", file="StateMachine.feature.cs", label="String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))", span="364-364"];
m24_257 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="346-346"];
m24_256 [cluster="lambda expression", file="StateMachine.feature.cs", label="x.GetJobQueueMonitoringApi().GetQueues()", span="346-346"];
m24_295 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="381-381"];
m24_294 [cluster="lambda expression", file="StateMachine.feature.cs", label=x, span="381-381"];
m24_273 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="364-364"];
m24_277 [cluster="lambda expression", file="StateMachine.feature.cs", label=x, span="364-364"];
m24_278 [cluster="lambda expression", file="StateMachine.feature.cs", label="Exit lambda expression", span="364-364"];
m24_89 [cluster="System.Collections.Generic.List<T>.Add(T)", file="StateMachine.feature.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m24_86 [cluster="Unk.ToList", file="StateMachine.feature.cs", label="Entry Unk.ToList", span=""];
m24_314 [cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", file="StateMachine.feature.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0"];
m24_21 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="StateMachine.feature.cs", label="IState state", span="85-85"];
m24_22 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="StateMachine.feature.cs", label="var jobData = connection.GetJobData(jobId)", span="89-89"];
m24_23 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="StateMachine.feature.cs", label="jobData.EnsureLoaded()", span="90-90"];
m24_24 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="StateMachine.feature.cs", label="var performContext = new PerformContext(_context, connection, jobId, jobData.Job)", span="92-92"];
m24_25 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="StateMachine.feature.cs", label="process.Run(performContext, jobData.Job)", span="94-94"];
m24_368 [cluster="Hangfire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", file="StateMachine.feature.cs", label="Entry Hangfire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="22-22"];
m24_60 [cluster="Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", file="StateMachine.feature.cs", label="Entry Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23"];
m24_274 [cluster="System.DateTime.ToString(string)", file="StateMachine.feature.cs", label="Entry System.DateTime.ToString(string)", span="0-0"];
m24_101 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="161-161"];
m24_102 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="StateMachine.feature.cs", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    Result = stateData.ContainsKey(''Result'') ? stateData[''Result''] : null,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }));", span="163-176"];
m24_103 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="161-161"];
m24_136 [cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="StateMachine.feature.cs", label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span=""];
m24_39 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", color=green, community=0, file="StateMachine.feature.cs", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeDateTime(stateData[''StartedAt'']),\r\n                }));", prediction=133, span="78-87"];
m24_20 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="StateMachine.feature.cs", label="return;", span="77-77"];
m24_121 [cluster="Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", file="StateMachine.feature.cs", label="Entry Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7"];
m24_38 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="76-76"];
m24_177 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="534-534"];
m24_373 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.feature.cs", label="result.Add(new KeyValuePair<string, FetchedJobDto>(\r\n                    job.Id.ToString(),\r\n                    new FetchedJobDto\r\n                    {\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        State = job.StateName,\r\n                        FetchedAt = job.FetchedAt\r\n                    }))", span="554-561"];
m24_370 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.feature.cs", label="var jobs = connection.Query<SqlJob>(\r\n                fetchedJobsSql,\r\n                new { jobIds = jobIds })\r\n                .ToList()", span="545-548"];
m24_371 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.feature.cs", label="var result = new List<KeyValuePair<string, FetchedJobDto>>(jobs.Count)", span="550-550"];
m24_372 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.feature.cs", label=jobs, span="552-552"];
m24_369 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.feature.cs", label="string fetchedJobsSql = @''\r\nselect j.*, jq.FetchedAt, s.Reason as StateReason, s.Data as StateData \r\nfrom HangFire.Job j\r\nleft join HangFire.State s on s.Id = j.StateId\r\nleft join HangFire.JobQueue jq on jq.JobId = j.Id\r\nwhere j.Id in @jobIds and jq.FetchedAt is not null''", span="538-543"];
m24_374 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.feature.cs", label="return new JobList<FetchedJobDto>(result);", span="564-564"];
m24_375 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="534-534"];
m24_377 [cluster="KeyValuePair<string, FetchedJobDto>.cstr", file="StateMachine.feature.cs", label="Entry KeyValuePair<string, FetchedJobDto>.cstr", span=""];
m24_191 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="250-250"];
m24_192 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", color=green, community=0, file="StateMachine.feature.cs", label="return UseConnection(connection =>\r\n            {\r\n\r\n                const string sql = @''\r\nselect * from HangFire.Job where Id = @id\r\nselect * from HangFire.JobParameter where JobId = @id\r\nselect * from HangFire.State where JobId = @id order by Id desc'';\r\n\r\n                using (var multi = connection.QueryMultiple(sql, new { id = jobId }))\r\n                {\r\n                    var job = multi.Read<SqlJob>().SingleOrDefault();\r\n                    if (job == null) return null;\r\n\r\n                    var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value);\r\n                    var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new Dictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList();\r\n\r\n                    return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };\r\n                }\r\n            });", prediction=134, span="252-289"];
m24_193 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="250-250"];
m24_310 [cluster="Unk.Query", file="StateMachine.feature.cs", label="Entry Unk.Query", span=""];
m24_0 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="StateMachine.feature.cs", label="Entry HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", span="27-27"];
m24_3 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="StateMachine.feature.cs", label="_context = context", span="31-31"];
m24_1 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="StateMachine.feature.cs", label="context == null", span="29-29"];
m24_2 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="StateMachine.feature.cs", label="throw new ArgumentNullException(''context'');", span="29-29"];
m24_4 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="StateMachine.feature.cs", label="Exit HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", span="27-27"];
m24_167 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="432-432"];
m24_331 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", color=green, community=0, file="StateMachine.feature.cs", label="return DeserializeJobs(\r\n                jobs,\r\n                (sqlJob, job, stateData) => new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                });", prediction=135, span="448-457"];
m24_330 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.feature.cs", label="var jobs = connection.Query<SqlJob>(\r\n                enqueuedJobsSql,\r\n                new { jobIds = jobIds })\r\n                .ToList()", span="443-446"];
m24_329 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.feature.cs", label="string enqueuedJobsSql = @''\r\nselect j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom HangFire.Job j\r\nleft join HangFire.State s on s.Id = j.StateId\r\nleft join HangFire.JobQueue jq on jq.JobId = j.Id\r\nwhere j.Id in @jobIds and jq.FetchedAt is null''", span="436-441"];
m24_332 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="432-432"];
m24_312 [cluster="Unk.Add", file="StateMachine.feature.cs", label="Entry Unk.Add", span=""];
m24_220 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="292-292"];
m24_221 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", color=green, community=0, file="StateMachine.feature.cs", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, SucceededState.StateName));", prediction=120, span="294-295"];
m24_222 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="292-292"];
m24_50 [cluster="Hangfire.Common.JobHelper.DeserializeDateTime(string)", file="StateMachine.feature.cs", label="Entry Hangfire.Common.JobHelper.DeserializeDateTime(string)", span="73-73"];
m24_337 [cluster="Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", file="StateMachine.feature.cs", label="Entry Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23"];
m24_376 [cluster="List<KeyValuePair<string, FetchedJobDto>>.cstr", file="StateMachine.feature.cs", label="Entry List<KeyValuePair<string, FetchedJobDto>>.cstr", span=""];
m24_269 [cluster="System.DateTime.AddHours(double)", file="StateMachine.feature.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m24_90 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="143-143"];
m24_91 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", color=green, community=0, file="StateMachine.feature.cs", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }));", prediction=137, span="145-158"];
m24_92 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="143-143"];
m24_342 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="473-473"];
m24_347 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", color=green, community=0, file="StateMachine.feature.cs", label="return null;", prediction=138, span="484-484"];
m24_346 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.feature.cs", label=JobLoadException, span="482-482"];
m24_345 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.feature.cs", label="return data.Deserialize();", span="480-480"];
m24_343 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.feature.cs", label="var data = JobHelper.FromJson<InvocationData>(invocationData)", span="475-475"];
m24_344 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.feature.cs", label="data.Arguments = arguments", span="476-476"];
m24_348 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="473-473"];
m24_74 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", span="116-116"];
m24_75 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", color=green, community=0, file="StateMachine.feature.cs", label="return UseConnection<IList<ServerDto>>(connection =>\r\n            {\r\n                var servers = connection.Query<Entities.Server>(\r\n                    @''select * from HangFire.Server'')\r\n                    .ToList();\r\n\r\n                var result = new List<ServerDto>();\r\n\r\n                foreach (var server in servers)\r\n                {\r\n                    var data = JobHelper.FromJson<ServerData>(server.Data);\r\n                    result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", prediction=139, span="118-140"];
m24_76 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", span="116-116"];
m24_204 [cluster="Unk.QueryMultiple", file="StateMachine.feature.cs", label="Entry Unk.QueryMultiple", span=""];
m24_40 [cluster="HangFire.States.SucceededState.SucceededState()", file="StateMachine.feature.cs", label="Entry HangFire.States.SucceededState.SucceededState()", span="27-27"];
m24_19 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="StateMachine.feature.cs", label="!stateMachine.TryToChangeState(\r\n                jobId,\r\n                processingState,\r\n                new[] { EnqueuedState.StateName, ProcessingState.StateName })", span="72-75"];
m24_321 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="StateMachine.feature.cs", label="var provider = _storage.QueueProviders.GetProvider(queueName)", span="421-421"];
m24_322 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="StateMachine.feature.cs", label="var monitoringApi = provider.GetJobQueueMonitoringApi()", span="422-422"];
m24_323 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="StateMachine.feature.cs", label="return monitoringApi;", span="424-424"];
m24_324 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="419-419"];
m24_51 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="90-90"];
m24_52 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="StateMachine.feature.cs", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                }));", span="92-101"];
m24_53 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="90-90"];
m24_207 [cluster="Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", file="StateMachine.feature.cs", label="Entry Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22"];
m24_68 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="110-110"];
m24_69 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="StateMachine.feature.cs", label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''failed''));", span="112-113"];
m24_70 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="110-110"];
m24_178 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="238-238"];
m24_179 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="StateMachine.feature.cs", label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''succeeded''));", span="240-241"];
m24_180 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="238-238"];
m24_275 [cluster="string.Format(string, object, object)", file="StateMachine.feature.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m24_325 [cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53"];
m24_206 [cluster="Unk.ToDictionary", file="StateMachine.feature.cs", label="Entry Unk.ToDictionary", span=""];
m24_133 [cluster="Unk.SelectMany", file="StateMachine.feature.cs", label="Entry Unk.SelectMany", span=""];
m24_77 [cluster="Unk.>", file="StateMachine.feature.cs", label="Entry Unk.>", span=""];
m24_137 [cluster="Unk.GetEnqueuedJobIds", file="StateMachine.feature.cs", label="Entry Unk.GetEnqueuedJobIds", span=""];
m24_100 [cluster="Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", file="StateMachine.feature.cs", label="Entry Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", span="84-84"];
m24_134 [cluster="Unk.OrderBy", file="StateMachine.feature.cs", label="Entry Unk.OrderBy", span=""];
m24_138 [cluster="Unk.GetEnqueuedAndFetchedCount", file="StateMachine.feature.cs", label="Entry Unk.GetEnqueuedAndFetchedCount", span=""];
m24_17 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="StateMachine.feature.cs", label="var stateMachine = _context.StateMachineFactory.Create(connection)", span="69-69"];
m24_18 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="StateMachine.feature.cs", label="var processingState = new ProcessingState(_context.ServerId)", span="70-70"];
m24_147 [cluster="Unk.GetQueues", file="StateMachine.feature.cs", label="Entry Unk.GetQueues", span=""];
m24_61 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="104-104"];
m24_62 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="StateMachine.feature.cs", label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''succeeded''));", span="106-107"];
m24_63 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="104-104"];
m24_313 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="StateMachine.feature.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m24_67 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", span="369-369"];
m24_279 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", color=green, community=0, file="StateMachine.feature.cs", label="var endDate = DateTime.UtcNow.Date", prediction=140, span="373-373"];
m24_280 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="var dates = new List<DateTime>()", span="374-374"];
m24_283 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="dates.Add(endDate)", span="377-377"];
m24_284 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="endDate = endDate.AddDays(-1)", span="378-378"];
m24_287 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="return GetTimelineStats(connection, keyMaps);", span="383-383"];
m24_286 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="var keyMaps = dates.ToDictionary(x => String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd'')), x => x)", span="381-381"];
m24_281 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="var i = 0", span="375-375"];
m24_282 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="i < 7", span="375-375"];
m24_285 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="i++", span="375-375"];
m24_288 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", span="369-369"];
m24_253 [cluster="Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", file="StateMachine.feature.cs", label="Entry Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18"];
m24_48 [cluster="Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", file="StateMachine.feature.cs", label="Entry Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23"];
m24_296 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="386-386"];
m24_297 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", color=green, community=0, file="StateMachine.feature.cs", label="string sqlQuery = @''\r\nselect s.[Key], sum(s.[Value]) as [Count] from (\r\n    select [Key], sum([Value]) as [Value] from HangFire.Counter \r\n	group by [Key]\r\n	having [Key] in @keys\r\n    union all\r\n    select [Key], [Value] from HangFire.AggregatedCounter \r\n	where [Key] in @keys\r\n) as s group by [Key];''", prediction=141, span="389-397"];
m24_298 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", color=green, community=0, file="StateMachine.feature.cs", label="var valuesMap = connection.Query(\r\n                sqlQuery,\r\n                new { keys = keyMaps.Keys })\r\n                .ToDictionary(x => (string)x.Key, x => (long)x.Count)", prediction=142, span="399-402"];
m24_299 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", color=green, community=0, file="StateMachine.feature.cs", label="keyMaps.Keys", prediction=142, span="404-404"];
m24_300 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", color=green, community=0, file="StateMachine.feature.cs", label="!valuesMap.ContainsKey(key)", prediction=142, span="406-406"];
m24_301 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", color=green, community=0, file="StateMachine.feature.cs", label="valuesMap.Add(key, 0)", prediction=142, span="406-406"];
m24_305 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.feature.cs", label="var value = valuesMap[keyMaps.ElementAt(i).Key]", span="412-412"];
m24_302 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.feature.cs", label="var result = new Dictionary<DateTime, long>()", span="409-409"];
m24_304 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.feature.cs", label="i < keyMaps.Count", span="410-410"];
m24_306 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.feature.cs", label="result.Add(keyMaps.ElementAt(i).Value, value)", span="413-413"];
m24_303 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.feature.cs", label="var i = 0", span="410-410"];
m24_308 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.feature.cs", label="return result;", span="416-416"];
m24_307 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.feature.cs", label="i++", span="410-410"];
m24_309 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="386-386"];
m24_239 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="StateMachine.feature.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m24_132 [cluster="Unk.Select", file="StateMachine.feature.cs", label="Entry Unk.Select", span=""];
m24_364 [cluster="System.Collections.Generic.List<T>.List(int)", file="StateMachine.feature.cs", label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0"];
m24_32 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="70-70"];
m24_254 [cluster="Unk.Single", file="StateMachine.feature.cs", label="Entry Unk.Single", span=""];
m24_158 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="StateMachine.feature.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="222-222"];
m24_159 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="StateMachine.feature.cs", label="var queueApi = GetQueueApi(queue)", span="224-224"];
m24_161 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="StateMachine.feature.cs", label="return UseConnection(connection => EnqueuedJobs(connection, enqueuedJobIds));", span="227-227"];
m24_160 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="StateMachine.feature.cs", label="var enqueuedJobIds = queueApi.GetEnqueuedJobIds(queue, from, perPage)", span="225-225"];
m24_162 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="StateMachine.feature.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="222-222"];
m24_205 [cluster="Unk.SingleOrDefault", file="StateMachine.feature.cs", label="Entry Unk.SingleOrDefault", span=""];
m24_208 [cluster="Unk.DeserializeJob", file="StateMachine.feature.cs", label="Entry Unk.DeserializeJob", span=""];
m24_380 [file="StateMachine.feature.cs", label="Hangfire.SqlServer.SqlServerMonitoringApi", span=""];
m24_381 [file="StateMachine.feature.cs", label=int, span=""];
m24_382 [file="StateMachine.feature.cs", label=int, span=""];
m24_385 [file="StateMachine.feature.cs", label=int, span=""];
m24_386 [file="StateMachine.feature.cs", label=int, span=""];
m24_394 [file="StateMachine.feature.cs", label=string, span=""];
m24_395 [file="StateMachine.feature.cs", label=sql, span=""];
m24_383 [file="StateMachine.feature.cs", label=int, span=""];
m24_384 [file="StateMachine.feature.cs", label=int, span=""];
m24_387 [file="StateMachine.feature.cs", label=int, span=""];
m24_388 [file="StateMachine.feature.cs", label=int, span=""];
m24_389 [file="StateMachine.feature.cs", label=int, span=""];
m24_390 [file="StateMachine.feature.cs", label=int, span=""];
m24_391 [file="StateMachine.feature.cs", label=enqueuedJobIds, span=""];
m24_392 [file="StateMachine.feature.cs", label=enqueuedJobIds, span=""];
m24_393 [file="StateMachine.feature.cs", label=fetchedJobIds, span=""];
m24_397 [file="StateMachine.feature.cs", label=string, span=""];
m24_396 [file="StateMachine.feature.cs", label=string, span=""];
m26_2 [cluster="HangFire.States.SucceededState.GetProperties()", file="SucceededState.cs", label="Entry HangFire.States.SucceededState.GetProperties()", span="19-19"];
m26_3 [cluster="HangFire.States.SucceededState.GetProperties()", file="SucceededState.cs", label="return new Dictionary<string, string>\r\n                {\r\n                    { ''SucceededAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) }\r\n                };", span="21-24"];
m26_4 [cluster="HangFire.States.SucceededState.GetProperties()", file="SucceededState.cs", label="Exit HangFire.States.SucceededState.GetProperties()", span="19-19"];
m26_5 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SucceededState.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m26_17 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SucceededState.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m26_33 [cluster="Unk.EnqueueItemOnList", file="SucceededState.cs", label="Entry Unk.EnqueueItemOnList", span=""];
m26_41 [cluster="Unk.IncrementValue", file="SucceededState.cs", label="Entry Unk.IncrementValue", span=""];
m26_62 [cluster="Unk.Persist", file="SucceededState.cs", label="Entry Unk.Persist", span=""];
m26_22 [cluster="string.Format(string, object)", file="SucceededState.cs", label="Entry string.Format(string, object)", span="0-0"];
m26_42 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="SucceededState.cs", label="Entry HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", span="51-51"];
m26_45 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="SucceededState.cs", label="transaction.QueueCommand(x => x.DecrementValue(''hangfire:stats:succeeded''))", span="55-55"];
m26_46 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="SucceededState.cs", label="transaction.QueueCommand(x => x.RemoveItemFromList(\r\n                    ''hangfire:succeeded'', jobId))", span="57-58"];
m26_47 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="SucceededState.cs", label="transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}'', jobId)))", span="60-61"];
m26_48 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="SucceededState.cs", label="transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId)))", span="62-63"];
m26_49 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="SucceededState.cs", label="transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}:state'', jobId)))", span="64-65"];
m26_50 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="SucceededState.cs", label="Exit HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", span="51-51"];
m26_12 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction, string)", file="SucceededState.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}:state'', jobId),\r\n                _jobExpirationTimeout))", span="39-41"];
m26_7 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction, string)", file="SucceededState.cs", label="Entry HangFire.States.SucceededState.Apply(IRedisTransaction, string)", span="27-27"];
m26_10 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction, string)", file="SucceededState.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}'', jobId),\r\n                _jobExpirationTimeout))", span="31-33"];
m26_11 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction, string)", file="SucceededState.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}:history'', jobId),\r\n                _jobExpirationTimeout))", span="35-37"];
m26_13 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction, string)", file="SucceededState.cs", label="transaction.QueueCommand(x => x.EnqueueItemOnList(''hangfire:succeeded'', jobId))", span="43-43"];
m26_14 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction, string)", file="SucceededState.cs", label="transaction.QueueCommand(x => x.TrimList(''hangfire:succeeded'', 0, 99))", span="44-44"];
m26_15 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction, string)", file="SucceededState.cs", label="transaction.QueueCommand(x => x.IncrementValue(''hangfire:stats:succeeded''))", span="46-46"];
m26_16 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction, string)", file="SucceededState.cs", label="Exit HangFire.States.SucceededState.Apply(IRedisTransaction, string)", span="27-27"];
m26_18 [cluster="Unk.QueueCommand", file="SucceededState.cs", label="Entry Unk.QueueCommand", span=""];
m26_23 [cluster="Unk.ExpireEntryIn", file="SucceededState.cs", label="Entry Unk.ExpireEntryIn", span=""];
m26_0 [cluster="HangFire.States.SucceededState.SucceededState(string)", file="SucceededState.cs", label="Entry HangFire.States.SucceededState.SucceededState(string)", span="12-12"];
m26_1 [cluster="HangFire.States.SucceededState.SucceededState(string)", file="SucceededState.cs", label="Exit HangFire.States.SucceededState.SucceededState(string)", span="12-12"];
m26_54 [cluster="Unk.DecrementValue", file="SucceededState.cs", label="Entry Unk.DecrementValue", span=""];
m26_37 [cluster="Unk.TrimList", file="SucceededState.cs", label="Entry Unk.TrimList", span=""];
m26_66 [cluster="lambda expression", file="SucceededState.cs", label="Entry lambda expression", span="64-65"];
m26_20 [cluster="lambda expression", file="SucceededState.cs", label="x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}'', jobId),\r\n                _jobExpirationTimeout)", span="31-33"];
m26_25 [cluster="lambda expression", file="SucceededState.cs", label="x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}:history'', jobId),\r\n                _jobExpirationTimeout)", span="35-37"];
m26_28 [cluster="lambda expression", file="SucceededState.cs", label="x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}:state'', jobId),\r\n                _jobExpirationTimeout)", span="39-41"];
m26_31 [cluster="lambda expression", file="SucceededState.cs", label="x.EnqueueItemOnList(''hangfire:succeeded'', jobId)", span="43-43"];
m26_19 [cluster="lambda expression", file="SucceededState.cs", label="Entry lambda expression", span="31-33"];
m26_24 [cluster="lambda expression", file="SucceededState.cs", label="Entry lambda expression", span="35-37"];
m26_27 [cluster="lambda expression", file="SucceededState.cs", label="Entry lambda expression", span="39-41"];
m26_30 [cluster="lambda expression", file="SucceededState.cs", label="Entry lambda expression", span="43-43"];
m26_34 [cluster="lambda expression", file="SucceededState.cs", label="Entry lambda expression", span="44-44"];
m26_38 [cluster="lambda expression", file="SucceededState.cs", label="Entry lambda expression", span="46-46"];
m26_21 [cluster="lambda expression", file="SucceededState.cs", label="Exit lambda expression", span="31-33"];
m26_26 [cluster="lambda expression", file="SucceededState.cs", label="Exit lambda expression", span="35-37"];
m26_29 [cluster="lambda expression", file="SucceededState.cs", label="Exit lambda expression", span="39-41"];
m26_32 [cluster="lambda expression", file="SucceededState.cs", label="Exit lambda expression", span="43-43"];
m26_35 [cluster="lambda expression", file="SucceededState.cs", label="x.TrimList(''hangfire:succeeded'', 0, 99)", span="44-44"];
m26_36 [cluster="lambda expression", file="SucceededState.cs", label="Exit lambda expression", span="44-44"];
m26_39 [cluster="lambda expression", file="SucceededState.cs", label="x.IncrementValue(''hangfire:stats:succeeded'')", span="46-46"];
m26_40 [cluster="lambda expression", file="SucceededState.cs", label="Exit lambda expression", span="46-46"];
m26_56 [cluster="lambda expression", file="SucceededState.cs", label="x.RemoveItemFromList(\r\n                    ''hangfire:succeeded'', jobId)", span="57-58"];
m26_60 [cluster="lambda expression", file="SucceededState.cs", label="((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}'', jobId))", span="60-61"];
m26_64 [cluster="lambda expression", file="SucceededState.cs", label="((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId))", span="62-63"];
m26_67 [cluster="lambda expression", file="SucceededState.cs", label="((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}:state'', jobId))", span="64-65"];
m26_51 [cluster="lambda expression", file="SucceededState.cs", label="Entry lambda expression", span="55-55"];
m26_55 [cluster="lambda expression", file="SucceededState.cs", label="Entry lambda expression", span="57-58"];
m26_59 [cluster="lambda expression", file="SucceededState.cs", label="Entry lambda expression", span="60-61"];
m26_63 [cluster="lambda expression", file="SucceededState.cs", label="Entry lambda expression", span="62-63"];
m26_52 [cluster="lambda expression", file="SucceededState.cs", label="x.DecrementValue(''hangfire:stats:succeeded'')", span="55-55"];
m26_53 [cluster="lambda expression", file="SucceededState.cs", label="Exit lambda expression", span="55-55"];
m26_57 [cluster="lambda expression", file="SucceededState.cs", label="Exit lambda expression", span="57-58"];
m26_61 [cluster="lambda expression", file="SucceededState.cs", label="Exit lambda expression", span="60-61"];
m26_65 [cluster="lambda expression", file="SucceededState.cs", label="Exit lambda expression", span="62-63"];
m26_68 [cluster="lambda expression", file="SucceededState.cs", label="Exit lambda expression", span="64-65"];
m26_6 [cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="SucceededState.cs", label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="62-62"];
m26_58 [cluster="Unk.RemoveItemFromList", file="SucceededState.cs", label="Entry Unk.RemoveItemFromList", span=""];
m26_69 [file="SucceededState.cs", label="HangFire.States.SucceededState", span=""];
m26_70 [file="SucceededState.cs", label=string, span=""];
m26_71 [file="SucceededState.cs", label=string, span=""];
m27_0 [cluster="HangFire.Web.Pages.JobDetailsPage.JobDetailsPage(string)", file="SucceededState.feature.cs", label="Entry HangFire.Web.Pages.JobDetailsPage.JobDetailsPage(string)", span="6-6"];
m27_1 [cluster="HangFire.Web.Pages.JobDetailsPage.JobDetailsPage(string)", file="SucceededState.feature.cs", label="JobId = jobId", span="8-8"];
m27_2 [cluster="HangFire.Web.Pages.JobDetailsPage.JobDetailsPage(string)", file="SucceededState.feature.cs", label="Exit HangFire.Web.Pages.JobDetailsPage.JobDetailsPage(string)", span="6-6"];
m27_3 [file="SucceededState.feature.cs", label="HangFire.Web.Pages.JobDetailsPage", span=""];
m28_34 [cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="TestFilter.cs", label="Entry HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="68-68"];
m28_35 [cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext)", span="70-70"];
m28_36 [cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext.JobDescriptor)", span="71-71"];
m28_38 [cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="TestFilter.cs", label="filterContext.Canceled = true", span="75-75"];
m28_37 [cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="TestFilter.cs", label=_cancelsTheCreation, span="73-73"];
m28_39 [cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="TestFilter.cs", label="_results.Add(String.Format(''{0}::{1}'', _name, ''OnPerforming''))", span="78-78"];
m28_40 [cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="TestFilter.cs", label=_throwException, span="80-80"];
m28_41 [cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="TestFilter.cs", label="throw new Exception();", span="82-82"];
m28_42 [cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="TestFilter.cs", label="Exit HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="68-68"];
m28_23 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="TestFilter.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m28_0 [cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool)", file="TestFilter.cs", label="Entry HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool)", span="15-15"];
m28_4 [cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool)", color=green, community=0, file="TestFilter.cs", label="_cancelsTheCreation = cancelsTheCreation", prediction=146, span="25-25"];
m28_2 [cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool)", file="TestFilter.cs", label="_results = results", span="23-23"];
m28_3 [cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool)", file="TestFilter.cs", label="_throwException = throwException", span="24-24"];
m28_5 [cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool)", color=green, community=0, file="TestFilter.cs", label="_handlesException = handlesException", prediction=147, span="26-26"];
m28_1 [cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool)", file="TestFilter.cs", label="_name = name", span="22-22"];
m28_6 [cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool)", file="TestFilter.cs", label="Exit HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool)", span="15-15"];
m28_22 [cluster="string.Format(string, object, object)", file="TestFilter.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m28_43 [cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="TestFilter.cs", label="Entry HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="86-86"];
m28_44 [cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext)", span="88-88"];
m28_45 [cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext.JobDescriptor)", span="89-89"];
m28_46 [cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="TestFilter.cs", label="_results.Add(String.Format(''{0}::{1}'', _name, ''OnPerformed'')\r\n                + (filterContext.Canceled ? '' (with the canceled flag set)'' : null))", span="91-92"];
m28_48 [cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="TestFilter.cs", label="filterContext.ExceptionHandled = true", span="96-96"];
m28_47 [cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="TestFilter.cs", label=_handlesException, span="94-94"];
m28_49 [cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="TestFilter.cs", label="Exit HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="86-86"];
m28_24 [cluster="System.Exception.Exception()", file="TestFilter.cs", label="Entry System.Exception.Exception()", span="0-0"];
m28_8 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext)", span="31-31"];
m28_25 [cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="TestFilter.cs", label="Entry HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", span="52-52"];
m28_26 [cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext)", span="54-54"];
m28_27 [cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext.Redis)", span="55-55"];
m28_28 [cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext.Items)", span="56-56"];
m28_29 [cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext.JobDescriptor)", span="57-57"];
m28_30 [cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="TestFilter.cs", label="_results.Add(String.Format(''{0}::{1}'', _name, ''OnCreated'') \r\n                + (filterContext.Canceled ? '' (with the canceled flag set)'' : null))", span="59-60"];
m28_32 [cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="TestFilter.cs", label="filterContext.ExceptionHandled = true", span="64-64"];
m28_31 [cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="TestFilter.cs", label=_handlesException, span="62-62"];
m28_33 [cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="TestFilter.cs", label="Exit HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", span="52-52"];
m28_21 [cluster="Unk.IsNotNull", file="TestFilter.cs", label="Entry Unk.IsNotNull", span=""];
m28_7 [cluster="Unk.Write", file="TestFilter.cs", label="Entry Unk.Write", span=""];
m28_9 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext.Items)", span="32-32"];
m28_10 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext.Redis)", span="33-33"];
m28_11 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext.JobDescriptor)", span="34-34"];
m28_12 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext.JobDescriptor.JobId)", span="35-35"];
m28_13 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext.JobDescriptor.Type)", span="36-36"];
m28_14 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext.JobDescriptor.State)", span="37-37"];
m28_16 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label="filterContext.Canceled = true", span="41-41"];
m28_15 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label=_cancelsTheCreation, span="39-39"];
m28_17 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label="_results.Add(String.Format(''{0}::{1}'', _name, ''OnCreating''))", span="44-44"];
m28_18 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label=_throwException, span="46-46"];
m28_19 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label="throw new Exception();", span="48-48"];
m28_20 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label="Exit HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", span="29-29"];
m28_50 [file="TestFilter.cs", label="HangFire.Tests.TestFilter", span=""];
m0_9 -> m0_43  [color=green, key=1, label=pager, style=dashed];
m0_9 -> m0_12  [color=darkseagreen4, key=1, label=pager, style=dashed];
m0_9 -> m0_14  [color=darkseagreen4, key=1, label=pager, style=dashed];
m0_16 -> m0_18  [color=green, key=1, label=job, style=dashed];
m0_18 -> m0_18  [color=green, key=1, label=job, style=dashed];
m0_18 -> m0_20  [color=green, key=1, label=job, style=dashed];
m0_20 -> m0_20  [color=green, key=1, label=job, style=dashed];
m0_20 -> m0_22  [color=green, key=1, label=job, style=dashed];
m0_22 -> m0_22  [color=green, key=1, label=job, style=dashed];
m0_22 -> m0_24  [color=green, key=1, label=job, style=dashed];
m0_24 -> m0_24  [color=green, key=1, label=job, style=dashed];
m0_24 -> m0_27  [color=green, key=1, label=job, style=dashed];
m0_27 -> m0_27  [color=green, key=1, label=job, style=dashed];
m0_27 -> m0_29  [color=green, key=1, label=job, style=dashed];
m0_29 -> m0_29  [color=green, key=1, label=job, style=dashed];
m0_29 -> m0_31  [color=green, key=1, label=job, style=dashed];
m0_31 -> m0_31  [color=green, key=1, label=job, style=dashed];
m0_31 -> m0_33  [color=green, key=1, label=job, style=dashed];
m0_33 -> m0_33  [color=green, key=1, label=job, style=dashed];
m0_33 -> m0_35  [color=green, key=1, label=job, style=dashed];
m0_35 -> m0_35  [color=green, key=1, label=job, style=dashed];
m0_35 -> m0_37  [color=green, key=1, label=job, style=dashed];
m0_37 -> m0_37  [color=green, key=1, label=job, style=dashed];
m0_37 -> m0_39  [color=green, key=1, label=job, style=dashed];
m0_39 -> m0_39  [color=green, key=1, label=job, style=dashed];
m0_10 -> m0_16  [color=darkseagreen4, key=1, label=processingJobs, style=dashed];
m0_63 -> m0_43  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_42  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_18  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_19  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_20  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_21  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_22  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_23  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_25  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_26  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_27  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_28  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_29  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_30  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_31  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_32  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_33  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_34  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_36  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_41  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_37  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_38  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_39  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_40  [color=green, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_1  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_4  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_5  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_11  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_13  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_14  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_15  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m0_63 -> m0_17  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ProcessingJobsPage", style=dashed];
m1_27 -> m1_30  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_16 -> m1_21  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_0 -> m1_7  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_0 -> m1_8  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_0 -> m1_9  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m1_0 -> m1_10  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_0 -> m1_2  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_0 -> m1_3  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_0 -> m1_4  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m1_0 -> m1_5  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m1_39 -> m1_19  [color=green, key=1, label="HangFire.Client.ClientJobDescriptor", style=dashed];
m1_39 -> m1_7  [color=darkseagreen4, key=1, label="HangFire.Client.ClientJobDescriptor", style=dashed];
m1_39 -> m1_8  [color=darkseagreen4, key=1, label="HangFire.Client.ClientJobDescriptor", style=dashed];
m1_39 -> m1_9  [color=darkseagreen4, key=1, label="HangFire.Client.ClientJobDescriptor", style=dashed];
m1_39 -> m1_10  [color=darkseagreen4, key=1, label="HangFire.Client.ClientJobDescriptor", style=dashed];
m1_39 -> m1_21  [color=darkseagreen4, key=1, label="HangFire.Client.ClientJobDescriptor", style=dashed];
m1_39 -> m1_30  [color=darkseagreen4, key=1, label="HangFire.Client.ClientJobDescriptor", style=dashed];
m1_39 -> m1_36  [color=darkseagreen4, key=1, label="HangFire.Client.ClientJobDescriptor", style=dashed];
m2_0 -> m2_3  [color=darkseagreen4, key=1, label="Hangfire.States.IState", style=dashed];
m2_20 -> m2_11  [color=darkseagreen4, key=1, label="Hangfire.States.ElectStateContext", style=dashed];
m2_20 -> m2_16  [color=darkseagreen4, key=1, label="Hangfire.States.ElectStateContext", style=dashed];
m2_143 -> m2_32  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_143 -> m2_36  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_143 -> m2_51  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_143 -> m2_63  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_143 -> m2_76  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_143 -> m2_88  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_143 -> m2_92  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_143 -> m2_99  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_143 -> m2_103  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_143 -> m2_110  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_143 -> m2_115  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_143 -> m2_120  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_143 -> m2_124  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_143 -> m2_130  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_143 -> m2_134  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_143 -> m2_141  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_143 -> m2_44  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_143 -> m2_56  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_143 -> m2_67  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_143 -> m2_80  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m3_9 -> m3_12  [color=darkseagreen4, key=1, label=pager, style=dashed];
m3_9 -> m3_17  [color=darkseagreen4, key=1, label=pager, style=dashed];
m3_9 -> m3_49  [color=darkseagreen4, key=1, label=pager, style=dashed];
m3_10 -> m3_19  [color=darkseagreen4, key=1, label=enqueuedJobs, style=dashed];
m3_19 -> m3_21  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_21 -> m3_21  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_21 -> m3_23  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_23 -> m3_23  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_23 -> m3_25  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_25 -> m3_25  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_25 -> m3_27  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_27 -> m3_27  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_27 -> m3_29  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_29 -> m3_29  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_29 -> m3_32  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_32 -> m3_32  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_32 -> m3_34  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_34 -> m3_34  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_34 -> m3_36  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_36 -> m3_36  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_36 -> m3_38  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_38 -> m3_38  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_38 -> m3_40  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_40 -> m3_40  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_40 -> m3_42  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_42 -> m3_42  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_42 -> m3_44  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_44 -> m3_44  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_71 -> m3_1  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_4  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_5  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_11  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_13  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_14  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_15  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_16  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_17  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_18  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_20  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_21  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_22  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_23  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_24  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_25  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_26  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_27  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_28  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_30  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_31  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_32  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_33  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_34  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_35  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_36  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_37  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_38  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_39  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_41  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_42  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_43  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_44  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_45  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_46  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_47  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_48  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m3_71 -> m3_49  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m5_9 -> m5_12  [color=green, key=1, label=pager, style=dashed];
m5_9 -> m5_19  [color=green, key=1, label=pager, style=dashed];
m5_9 -> m5_45  [color=green, key=1, label=pager, style=dashed];
m5_10 -> m5_21  [color=darkseagreen4, key=1, label=fetchedJobs, style=dashed];
m5_23 -> m5_23  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_23 -> m5_25  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_25 -> m5_25  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_25 -> m5_27  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_27 -> m5_27  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_27 -> m5_29  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_29 -> m5_29  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_29 -> m5_31  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_31 -> m5_31  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_31 -> m5_33  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_33 -> m5_33  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_33 -> m5_35  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_35 -> m5_35  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_35 -> m5_37  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_39 -> m5_39  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_39 -> m5_41  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_41 -> m5_41  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_21 -> m5_23  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_37 -> m5_39  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_37 -> m5_37  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_67 -> m5_14  [color=green, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_17  [color=green, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_1  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_4  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_5  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_11  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_13  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_15  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_16  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_18  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_19  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_20  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_22  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_23  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_24  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_25  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_26  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_27  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_28  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_29  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_30  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_31  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_32  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_33  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_34  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_35  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_36  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_38  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_39  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_40  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_41  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_42  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_43  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_44  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m5_67 -> m5_45  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FetchedJobsPage", style=dashed];
m6_23 -> m6_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_24 -> m6_26  [color=darkseagreen4, key=1, label=context, style=dashed];
m6_0 -> m6_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_0 -> m6_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_0 -> m6_7  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m6_0 -> m6_8  [color=darkseagreen4, key=1, label=int, style=dashed];
m6_0 -> m6_9  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_0 -> m6_10  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_6 -> m6_9  [color=darkseagreen4, key=1, label="Hangfire.States.IStateMachineFactory", style=dashed];
m6_36 -> m6_7  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerFetchedJob", style=dashed];
m6_36 -> m6_8  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerFetchedJob", style=dashed];
m6_36 -> m6_9  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerFetchedJob", style=dashed];
m6_36 -> m6_10  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerFetchedJob", style=dashed];
m6_36 -> m6_19  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerFetchedJob", style=dashed];
m6_36 -> m6_27  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerFetchedJob", style=dashed];
m6_36 -> m6_30  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerFetchedJob", style=dashed];
m6_36 -> m6_32  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerFetchedJob", style=dashed];
m6_14 -> m6_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_18 -> m6_21  [color=darkseagreen4, key=1, label="Hangfire.States.IState", style=dashed];
m6_45 -> m6_25  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobClient", style=dashed];
m7_5 -> m7_9  [color=darkseagreen4, key=1, label=jobIds, style=dashed];
m7_50 -> m7_52  [color=darkseagreen4, key=1, label=table1, style=dashed];
m7_71 -> m7_73  [color=darkseagreen4, key=1, label=table3, style=dashed];
m7_71 -> m7_74  [color=darkseagreen4, key=1, label=table3, style=dashed];
m7_62 -> m7_64  [color=darkseagreen4, key=1, label=table2, style=dashed];
m7_15 -> m7_10  [color=darkseagreen4, key=1, label="HangFire.Web.BatchCommandHandler", style=dashed];
m7_118 -> m7_116  [color=green, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_36  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_37  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_40  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_47  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_48  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_53  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_59  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_60  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_65  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_69  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_70  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_76  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_80  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_81  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_84  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_88  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_89  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_92  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_96  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_97  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_100  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_104  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_105  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_108  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_112  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m7_118 -> m7_113  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientFeature", style=dashed];
m8_23 -> m8_28  [color=darkseagreen4, key=1, label=context, style=dashed];
m8_24 -> m8_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_5 -> m8_8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_13 -> m8_15  [color=darkseagreen4, key=1, label=context, style=dashed];
m8_13 -> m8_16  [color=darkseagreen4, key=1, label=context, style=dashed];
m8_32 -> m8_36  [color=darkseagreen4, key=1, label=context, style=dashed];
m8_33 -> m8_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_41 -> m8_50  [color=green, key=1, label="lambda expression", style=dashed];
m8_56 -> m8_44  [color=green, key=1, label="Hangfire.Core.Tests.Client.CreatedContextFacts", style=dashed];
m8_56 -> m8_51  [color=green, key=1, label="Hangfire.Core.Tests.Client.CreatedContextFacts", style=dashed];
m8_56 -> m8_15  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.CreatedContextFacts", style=dashed];
m8_57 -> m8_28  [color=darkseagreen4, key=1, label=context, style=dashed];
m8_58 -> m8_36  [color=darkseagreen4, key=1, label=context, style=dashed];
m9_122 -> m9_124  [color=darkseagreen4, key=1, label=connection, style=dashed];
m9_128 -> m9_130  [color=darkseagreen4, key=1, label=IDbConnection, style=dashed];
m9_48 -> m9_50  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m9_48 -> m9_51  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m9_91 -> m9_96  [color=darkseagreen4, key=1, label="System.Action<SqlConnection>", style=dashed];
m9_92 -> m9_95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_105 -> m9_110  [color=darkseagreen4, key=1, label="System.Action<SqlConnection>", style=dashed];
m9_106 -> m9_109  [color=green, key=1, label="lambda expression", style=dashed];
m9_154 -> m9_157  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_170 -> m9_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_57 -> m9_60  [color=green, key=1, label=parts, style=dashed];
m9_57 -> m9_78  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_57 -> m9_81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_57 -> m9_85  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_57 -> m9_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_57 -> m9_61  [color=darkseagreen4, key=1, label=parts, style=dashed];
m9_57 -> m9_65  [color=darkseagreen4, key=1, label=parts, style=dashed];
m9_57 -> m9_66  [color=darkseagreen4, key=1, label=parts, style=dashed];
m9_59 -> m9_61  [color=green, key=1, label=alias, style=dashed];
m9_58 -> m9_61  [color=darkseagreen4, key=1, label=builder, style=dashed];
m9_58 -> m9_62  [color=darkseagreen4, key=1, label=builder, style=dashed];
m9_58 -> m9_63  [color=darkseagreen4, key=1, label=builder, style=dashed];
m9_58 -> m9_66  [color=darkseagreen4, key=1, label=builder, style=dashed];
m9_58 -> m9_67  [color=darkseagreen4, key=1, label=builder, style=dashed];
m9_56 -> m9_69  [color=darkseagreen4, key=1, label=canNotParseMessage, style=dashed];
m9_56 -> m9_67  [color=darkseagreen4, key=1, label=canNotParseMessage, style=dashed];
m9_64 -> m9_66  [color=darkseagreen4, key=1, label=alias, style=dashed];
m9_2 -> m9_12  [color=green, key=1, label=string, style=dashed];
m9_2 -> m9_5  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m9_2 -> m9_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_2 -> m9_10  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_2 -> m9_13  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m9_94 -> m9_102  [color=darkseagreen4, key=1, label="System.Func<SqlConnection, T>", style=dashed];
m9_113 -> m9_115  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m9_114 -> m9_116  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_177 -> m9_16  [color=green, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_177 -> m9_35  [color=green, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_177 -> m9_106  [color=green, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_177 -> m9_10  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_177 -> m9_8  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_177 -> m9_31  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_177 -> m9_39  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_177 -> m9_43  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_177 -> m9_44  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_177 -> m9_50  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_177 -> m9_51  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_177 -> m9_92  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_177 -> m9_120  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_177 -> m9_121  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_177 -> m9_129  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_179 -> m9_110  [color=darkseagreen4, key=1, label="System.Action<SqlConnection>", style=dashed];
m9_178 -> m9_96  [color=darkseagreen4, key=1, label="System.Action<SqlConnection>", style=dashed];
m10_11 -> m10_13  [color=darkseagreen4, key=1, label=row, style=dashed];
m10_11 -> m10_14  [color=darkseagreen4, key=1, label=row, style=dashed];
m10_16 -> m10_22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_12 -> m10_15  [color=darkseagreen4, key=1, label=i, style=dashed];
m10_15 -> m10_15  [color=darkseagreen4, key=1, label=i, style=dashed];
m10_26 -> m10_37  [color=darkseagreen4, key=1, label=cts, style=dashed];
m10_27 -> m10_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_42 -> m10_44  [color=darkseagreen4, key=1, label=int, style=dashed];
m10_43 -> m10_46  [color=darkseagreen4, key=1, label=i, style=dashed];
m10_46 -> m10_46  [color=darkseagreen4, key=1, label=i, style=dashed];
m10_68 -> m10_50  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherSteps", style=dashed];
m10_68 -> m10_51  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherSteps", style=dashed];
m10_68 -> m10_56  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherSteps", style=dashed];
m10_68 -> m10_59  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherSteps", style=dashed];
m10_68 -> m10_60  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherSteps", style=dashed];
m10_68 -> m10_64  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherSteps", style=dashed];
m10_69 -> m10_37  [color=darkseagreen4, key=1, label=cts, style=dashed];
m13_12 -> m13_14  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_12 -> m13_15  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_28 -> m13_30  [color=darkseagreen4, key=1, label=string, style=dashed];
m14_46 -> m14_59  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>", style=dashed];
m14_43 -> m14_51  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>", style=dashed];
m14_48 -> m14_66  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>", style=dashed];
m14_10 -> m14_13  [color=darkseagreen4, key=1, label=int, style=dashed];
m14_49 -> m14_75  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>", style=dashed];
m14_28 -> m14_30  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m14_28 -> m14_31  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m14_28 -> m14_33  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m14_28 -> m14_34  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m14_28 -> m14_35  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m14_28 -> m14_36  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m14_28 -> m14_38  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m14_28 -> m14_39  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m14_28 -> m14_40  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m14_47 -> m14_71  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>", style=dashed];
m14_68 -> m14_72  [color=darkseagreen4, key=1, label=pageIndex, style=dashed];
m14_72 -> m14_72  [color=darkseagreen4, key=1, label=pageIndex, style=dashed];
m14_15 -> m14_18  [color=darkseagreen4, key=1, label=int, style=dashed];
m14_81 -> m14_11  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m14_81 -> m14_13  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m14_81 -> m14_18  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m14_81 -> m14_21  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m14_81 -> m14_23  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m14_81 -> m14_26  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m14_81 -> m14_29  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m14_81 -> m14_31  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m14_81 -> m14_32  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m14_81 -> m14_34  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m14_81 -> m14_35  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m14_81 -> m14_36  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m14_81 -> m14_37  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m14_81 -> m14_38  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m14_81 -> m14_39  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m14_81 -> m14_54  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m14_81 -> m14_63  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m14_81 -> m14_69  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m15_50 -> m15_52  [color=darkseagreen4, key=1, label=args, style=dashed];
m15_23 -> m15_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_6 -> m15_10  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m15_10 -> m15_10  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m15_11 -> m15_15  [color=darkseagreen4, key=1, label=queueIndex, style=dashed];
m15_16 -> m15_23  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m15_16 -> m15_38  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m15_16 -> m15_43  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m15_17 -> m15_23  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m15_17 -> m15_38  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m15_17 -> m15_43  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m15_24 -> m15_42  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_24 -> m15_46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_22 -> m15_25  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m15_54 -> m15_38  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m15_54 -> m15_43  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m16_45 -> m16_23  [color=green, key=1, label="Hangfire.BackgroundJobClient", style=dashed];
m16_45 -> m16_24  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobClient", style=dashed];
m16_45 -> m16_25  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobClient", style=dashed];
m16_49 -> m16_51  [color=darkseagreen4, key=1, label=table1, style=dashed];
m16_18 -> m16_21  [color=darkseagreen4, key=1, label="Hangfire.States.IState", style=dashed];
m16_18 -> m16_24  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m16_24 -> m16_26  [color=darkseagreen4, key=1, label=context, style=dashed];
m16_34 -> m16_41  [color=darkseagreen4, key=1, label=string, style=dashed];
m16_6 -> m16_9  [color=darkseagreen4, key=1, label="Hangfire.States.IStateMachineFactory", style=dashed];
m16_76 -> m16_38  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m16_76 -> m16_41  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m16_76 -> m16_47  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m16_76 -> m16_48  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m16_76 -> m16_53  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m16_76 -> m16_59  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m16_76 -> m16_60  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m16_76 -> m16_64  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m16_76 -> m16_69  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m16_76 -> m16_70  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m16_76 -> m16_74  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m17_23 -> m17_25  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_15 -> m17_17  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_51 -> m17_53  [color=darkseagreen4, key=1, label=int, style=dashed];
m18_8 -> m18_12  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m18_8 -> m18_18  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_12 -> m18_17  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_11 -> m18_18  [color=darkseagreen4, key=1, label=timestamp, style=dashed];
m18_21 -> m18_24  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m18_21 -> m18_27  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_24 -> m18_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_30 -> m18_4  [color=darkseagreen4, key=1, label="HangFire.States.ScheduledState", style=dashed];
m18_31 -> m18_18  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_32 -> m18_18  [color=darkseagreen4, key=1, label=timestamp, style=dashed];
m18_33 -> m18_27  [color=darkseagreen4, key=1, label=string, style=dashed];
m19_49 -> m19_51  [color=darkseagreen4, key=1, label=table1, style=dashed];
m19_49 -> m19_52  [color=green, key=1, label=table1, style=dashed];
m19_75 -> m19_38  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m19_75 -> m19_39  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m19_75 -> m19_41  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m19_75 -> m19_47  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m19_75 -> m19_48  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m19_75 -> m19_53  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m19_75 -> m19_59  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m19_75 -> m19_60  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m19_75 -> m19_63  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m19_75 -> m19_68  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m19_75 -> m19_69  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m19_75 -> m19_73  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m20_36 -> m20_40  [color=darkseagreen4, key=1, label=string, style=dashed];
m20_37 -> m20_40  [color=darkseagreen4, key=1, label=body, style=dashed];
m20_81 -> m20_98  [color=darkseagreen4, key=1, label=consumer, style=dashed];
m20_81 -> m20_83  [color=darkseagreen4, key=1, label=consumer, style=dashed];
m20_81 -> m20_91  [color=darkseagreen4, key=1, label=consumer, style=dashed];
m20_77 -> m20_77  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m20_82 -> m20_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m20_88 -> m20_100  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m20_28 -> m20_30  [color=darkseagreen4, key=1, label=message, style=dashed];
m20_33 -> m20_77  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m20_33 -> m20_80  [color=darkseagreen4, key=1, label=string, style=dashed];
m20_33 -> m20_82  [color=darkseagreen4, key=1, label=string, style=dashed];
m20_33 -> m20_83  [color=darkseagreen4, key=1, label=string, style=dashed];
m20_33 -> m20_88  [color=darkseagreen4, key=1, label=string, style=dashed];
m20_92 -> m20_32  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m20_92 -> m20_39  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m20_92 -> m20_56  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m20_92 -> m20_66  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m20_92 -> m20_70  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m20_92 -> m20_73  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m20_92 -> m20_77  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m20_92 -> m20_85  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m20_15 -> m20_20  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m20_20 -> m20_20  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m20_0 -> m20_3  [color=darkseagreen4, key=1, label=ConnectionFactory, style=dashed];
m20_103 -> m20_9  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", style=dashed];
m20_103 -> m20_24  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", style=dashed];
m20_103 -> m20_27  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", style=dashed];
m20_103 -> m20_30  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", style=dashed];
m20_103 -> m20_40  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", style=dashed];
m20_103 -> m20_50  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", style=dashed];
m20_103 -> m20_52  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", style=dashed];
m20_103 -> m20_53  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", style=dashed];
m20_103 -> m20_54  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", style=dashed];
m20_103 -> m20_61  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", style=dashed];
m20_103 -> m20_62  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", style=dashed];
m20_103 -> m20_63  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", style=dashed];
m20_103 -> m20_64  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", style=dashed];
m20_103 -> m20_65  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", style=dashed];
m20_103 -> m20_66  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", style=dashed];
m20_103 -> m20_70  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", style=dashed];
m20_103 -> m20_80  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", style=dashed];
m20_103 -> m20_82  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", style=dashed];
m20_103 -> m20_83  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", style=dashed];
m20_103 -> m20_88  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue", style=dashed];
m20_104 -> m20_98  [color=darkseagreen4, key=1, label=consumer, style=dashed];
m20_105 -> m20_101  [color=darkseagreen4, key=1, label=newConsumer, style=dashed];
m21_0 -> m21_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m21_0 -> m21_5  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m21_0 -> m21_6  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m21_17 -> m21_5  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueProvider", style=dashed];
m21_17 -> m21_6  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueProvider", style=dashed];
m21_17 -> m21_10  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueProvider", style=dashed];
m21_17 -> m21_14  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueProvider", style=dashed];
m21_21 -> m21_24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m21_21 -> m21_27  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m21_23 -> m21_31  [color=green, key=1, label=jobId, style=dashed];
m21_25 -> m21_30  [color=darkseagreen4, key=1, label=parameterArray, style=dashed];
m21_77 -> m21_5  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_77 -> m21_9  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_77 -> m21_13  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_77 -> m21_17  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_77 -> m21_30  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m22_57 -> m22_59  [color=darkseagreen4, key=1, label=table2, style=dashed];
m22_57 -> m22_60  [color=darkseagreen4, key=1, label=table2, style=dashed];
m22_57 -> m22_61  [color=darkseagreen4, key=1, label=table2, style=dashed];
m22_57 -> m22_62  [color=darkseagreen4, key=1, label=table2, style=dashed];
m22_88 -> m22_90  [color=darkseagreen4, key=1, label=table4, style=dashed];
m22_88 -> m22_91  [color=darkseagreen4, key=1, label=table4, style=dashed];
m22_131 -> m22_133  [color=darkseagreen4, key=1, label=table6, style=dashed];
m22_131 -> m22_134  [color=darkseagreen4, key=1, label=table6, style=dashed];
m22_74 -> m22_76  [color=darkseagreen4, key=1, label=table3, style=dashed];
m22_74 -> m22_77  [color=darkseagreen4, key=1, label=table3, style=dashed];
m22_104 -> m22_106  [color=darkseagreen4, key=1, label=table5, style=dashed];
m22_104 -> m22_107  [color=darkseagreen4, key=1, label=table5, style=dashed];
m22_104 -> m22_108  [color=darkseagreen4, key=1, label=table5, style=dashed];
m22_104 -> m22_109  [color=darkseagreen4, key=1, label=table5, style=dashed];
m22_104 -> m22_110  [color=darkseagreen4, key=1, label=table5, style=dashed];
m22_36 -> m22_38  [color=darkseagreen4, key=1, label=table1, style=dashed];
m22_36 -> m22_39  [color=darkseagreen4, key=1, label=table1, style=dashed];
m22_146 -> m22_148  [color=darkseagreen4, key=1, label=table7, style=dashed];
m22_146 -> m22_149  [color=darkseagreen4, key=1, label=table7, style=dashed];
m22_146 -> m22_150  [color=darkseagreen4, key=1, label=table7, style=dashed];
m22_154 -> m22_32  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m22_154 -> m22_41  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m22_154 -> m22_52  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m22_154 -> m22_63  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m22_154 -> m22_67  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m22_154 -> m22_79  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m22_154 -> m22_83  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m22_154 -> m22_94  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m22_154 -> m22_98  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m22_154 -> m22_112  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m22_154 -> m22_116  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m22_154 -> m22_122  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m22_154 -> m22_126  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m22_154 -> m22_136  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m22_154 -> m22_140  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m22_154 -> m22_152  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m23_7 -> m23_19  [color=darkseagreen4, key=1, label=sqlQuery, style=dashed];
m23_10 -> m23_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m23_29 -> m23_31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m23_19 -> m23_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m23_32 -> m23_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m23_61 -> m23_8  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m23_61 -> m23_9  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m23_61 -> m23_13  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m23_61 -> m23_58  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m23_62 -> m23_19  [color=darkseagreen4, key=1, label=sqlQuery, style=dashed];
m24_6 -> m24_8  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m24_7 -> m24_9  [color=darkseagreen4, key=1, label=connection, style=dashed];
m24_7 -> m24_10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_44 -> m24_353  [color=darkseagreen4, key=1, label="System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>", style=dashed];
m24_27 -> m24_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_355 -> m24_357  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>", style=dashed];
m24_356 -> m24_361  [color=darkseagreen4, key=1, label=result, style=dashed];
m24_356 -> m24_362  [color=darkseagreen4, key=1, label=result, style=dashed];
m24_357 -> m24_361  [color=darkseagreen4, key=1, label=job, style=dashed];
m24_13 -> m24_19  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_13 -> m24_25  [color=darkseagreen4, key=1, label="HangFire.Server.IJobPerformanceProcess", style=dashed];
m24_13 -> m24_31  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_227 -> m24_229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_186 -> m24_188  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_234 -> m24_240  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_234 -> m24_236  [color=darkseagreen4, key=1, label=statistics, style=dashed];
m24_235 -> m24_255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_171 -> m24_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_170 -> m24_175  [color=darkseagreen4, key=1, label=fetchedJobIds, style=dashed];
m24_184 -> m24_267  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m24_184 -> m24_272  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_266 -> m24_271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_266 -> m24_276  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_260 -> m24_263  [color=darkseagreen4, key=1, label=dates, style=dashed];
m24_259 -> m24_263  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m24_261 -> m24_265  [color=darkseagreen4, key=1, label=i, style=dashed];
m24_265 -> m24_265  [color=darkseagreen4, key=1, label=i, style=dashed];
m24_123 -> m24_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_123 -> m24_144  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_123 -> m24_148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_123 -> m24_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_123 -> m24_125  [color=darkseagreen4, key=1, label=tuples, style=dashed];
m24_128 -> m24_154  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_124 -> m24_130  [color=darkseagreen4, key=1, label=result, style=dashed];
m24_126 -> m24_155  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
m24_33 -> m24_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_113 -> m24_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_42 -> m24_45  [color=green, key=1, label="lambda expression", style=dashed];
m24_42 -> m24_7  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m24_42 -> m24_8  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m24_42 -> m24_9  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m24_80 -> m24_84  [color=darkseagreen4, key=1, label=result, style=dashed];
m24_94 -> m24_96  [color=green, key=1, label="lambda expression", style=dashed];
m24_200 -> m24_209  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_200 -> m24_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_201 -> m24_215  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_55 -> m24_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_105 -> m24_107  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_116 -> m24_118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_79 -> m24_81  [color=darkseagreen4, key=1, label=servers, style=dashed];
m24_241 -> m24_251  [color=darkseagreen4, key=1, label=stats, style=dashed];
m24_21 -> m24_23  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_22 -> m24_25  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m24_102 -> m24_104  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_39 -> m24_41  [color=green, key=1, label="lambda expression", style=dashed];
m24_38 -> m24_42  [color=green, key=1, label=int, style=dashed];
m24_370 -> m24_372  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m24_371 -> m24_374  [color=darkseagreen4, key=1, label=result, style=dashed];
m24_192 -> m24_194  [color=green, key=1, label="lambda expression", style=dashed];
m24_331 -> m24_334  [color=green, key=1, label="lambda expression", style=dashed];
m24_221 -> m24_223  [color=green, key=1, label="lambda expression", style=dashed];
m24_91 -> m24_93  [color=green, key=1, label="lambda expression", style=dashed];
m24_343 -> m24_345  [color=darkseagreen4, key=1, label=data, style=dashed];
m24_75 -> m24_78  [color=green, key=1, label="lambda expression", style=dashed];
m24_52 -> m24_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_69 -> m24_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_179 -> m24_181  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_17 -> m24_19  [color=darkseagreen4, key=1, label=stateMachine, style=dashed];
m24_17 -> m24_31  [color=darkseagreen4, key=1, label=stateMachine, style=dashed];
m24_62 -> m24_64  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_67 -> m24_291  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_67 -> m24_287  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m24_279 -> m24_283  [color=green, key=1, label=endDate, style=dashed];
m24_280 -> m24_283  [color=darkseagreen4, key=1, label=dates, style=dashed];
m24_286 -> m24_290  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_286 -> m24_293  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_281 -> m24_285  [color=darkseagreen4, key=1, label=i, style=dashed];
m24_285 -> m24_285  [color=darkseagreen4, key=1, label=i, style=dashed];
m24_296 -> m24_299  [color=green, key=1, label="System.Collections.Generic.IDictionary<string, System.DateTime>", style=dashed];
m24_296 -> m24_304  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, System.DateTime>", style=dashed];
m24_296 -> m24_306  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, System.DateTime>", style=dashed];
m24_298 -> m24_315  [color=green, key=1, label="lambda expression", style=dashed];
m24_298 -> m24_318  [color=green, key=1, label="lambda expression", style=dashed];
m24_298 -> m24_300  [color=green, key=1, label=valuesMap, style=dashed];
m24_298 -> m24_301  [color=green, key=1, label=valuesMap, style=dashed];
m24_299 -> m24_301  [color=green, key=1, label=key, style=dashed];
m24_302 -> m24_306  [color=darkseagreen4, key=1, label=result, style=dashed];
m24_302 -> m24_308  [color=darkseagreen4, key=1, label=result, style=dashed];
m24_303 -> m24_306  [color=darkseagreen4, key=1, label=i, style=dashed];
m24_303 -> m24_307  [color=darkseagreen4, key=1, label=i, style=dashed];
m24_307 -> m24_307  [color=darkseagreen4, key=1, label=i, style=dashed];
m24_161 -> m24_164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_160 -> m24_165  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
m24_380 -> m24_42  [color=green, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_221  [color=green, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_224  [color=green, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_326  [color=green, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_7  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_11  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_27  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_33  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_36  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_62  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_65  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_69  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_72  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_155  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_161  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_165  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_171  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_175  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_179  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_182  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_186  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_189  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_227  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_230  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_267  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_287  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_380 -> m24_353  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m24_381 -> m24_42  [color=green, key=1, label=int, style=dashed];
m24_382 -> m24_42  [color=green, key=1, label=int, style=dashed];
m24_391 -> m24_155  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
m24_392 -> m24_165  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
m24_393 -> m24_175  [color=darkseagreen4, key=1, label=fetchedJobIds, style=dashed];
m24_397 -> m24_291  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_396 -> m24_272  [color=darkseagreen4, key=1, label=string, style=dashed];
m26_42 -> m26_45  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m26_42 -> m26_46  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m26_42 -> m26_56  [color=darkseagreen4, key=1, label=string, style=dashed];
m26_42 -> m26_47  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m26_42 -> m26_60  [color=darkseagreen4, key=1, label=string, style=dashed];
m26_42 -> m26_48  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m26_42 -> m26_64  [color=darkseagreen4, key=1, label=string, style=dashed];
m26_42 -> m26_49  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m26_42 -> m26_67  [color=darkseagreen4, key=1, label=string, style=dashed];
m26_45 -> m26_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m26_46 -> m26_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m26_47 -> m26_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m26_48 -> m26_63  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m26_49 -> m26_66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m26_12 -> m26_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m26_7 -> m26_10  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m26_7 -> m26_20  [color=darkseagreen4, key=1, label=string, style=dashed];
m26_7 -> m26_11  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m26_7 -> m26_25  [color=darkseagreen4, key=1, label=string, style=dashed];
m26_7 -> m26_12  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m26_7 -> m26_28  [color=darkseagreen4, key=1, label=string, style=dashed];
m26_7 -> m26_13  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m26_7 -> m26_31  [color=darkseagreen4, key=1, label=string, style=dashed];
m26_7 -> m26_14  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m26_7 -> m26_15  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m26_10 -> m26_19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m26_11 -> m26_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m26_13 -> m26_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m26_14 -> m26_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m26_15 -> m26_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m26_69 -> m26_10  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m26_69 -> m26_20  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m26_69 -> m26_11  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m26_69 -> m26_25  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m26_69 -> m26_12  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m26_69 -> m26_28  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m26_70 -> m26_20  [color=darkseagreen4, key=1, label=string, style=dashed];
m26_70 -> m26_25  [color=darkseagreen4, key=1, label=string, style=dashed];
m26_70 -> m26_28  [color=darkseagreen4, key=1, label=string, style=dashed];
m26_70 -> m26_31  [color=darkseagreen4, key=1, label=string, style=dashed];
m26_71 -> m26_56  [color=darkseagreen4, key=1, label=string, style=dashed];
m26_71 -> m26_60  [color=darkseagreen4, key=1, label=string, style=dashed];
m26_71 -> m26_64  [color=darkseagreen4, key=1, label=string, style=dashed];
m26_71 -> m26_67  [color=darkseagreen4, key=1, label=string, style=dashed];
m28_34 -> m28_36  [color=darkseagreen4, key=1, label="HangFire.Filters.PerformingContext", style=dashed];
m28_43 -> m28_45  [color=darkseagreen4, key=1, label="HangFire.Filters.PerformedContext", style=dashed];
m28_43 -> m28_46  [color=darkseagreen4, key=1, label="HangFire.Filters.PerformedContext", style=dashed];
m28_25 -> m28_27  [color=darkseagreen4, key=1, label="HangFire.Filters.CreatedContext", style=dashed];
m28_25 -> m28_28  [color=darkseagreen4, key=1, label="HangFire.Filters.CreatedContext", style=dashed];
m28_25 -> m28_29  [color=darkseagreen4, key=1, label="HangFire.Filters.CreatedContext", style=dashed];
m28_25 -> m28_30  [color=darkseagreen4, key=1, label="HangFire.Filters.CreatedContext", style=dashed];
m28_7 -> m28_9  [color=darkseagreen4, key=1, label="HangFire.Filters.CreatingContext", style=dashed];
m28_7 -> m28_10  [color=darkseagreen4, key=1, label="HangFire.Filters.CreatingContext", style=dashed];
m28_7 -> m28_11  [color=darkseagreen4, key=1, label="HangFire.Filters.CreatingContext", style=dashed];
m28_7 -> m28_12  [color=darkseagreen4, key=1, label="HangFire.Filters.CreatingContext", style=dashed];
m28_7 -> m28_13  [color=darkseagreen4, key=1, label="HangFire.Filters.CreatingContext", style=dashed];
m28_7 -> m28_14  [color=darkseagreen4, key=1, label="HangFire.Filters.CreatingContext", style=dashed];
m28_50 -> m28_15  [color=darkseagreen4, key=1, label="HangFire.Tests.TestFilter", style=dashed];
m28_50 -> m28_17  [color=darkseagreen4, key=1, label="HangFire.Tests.TestFilter", style=dashed];
m28_50 -> m28_18  [color=darkseagreen4, key=1, label="HangFire.Tests.TestFilter", style=dashed];
m28_50 -> m28_30  [color=darkseagreen4, key=1, label="HangFire.Tests.TestFilter", style=dashed];
m28_50 -> m28_31  [color=darkseagreen4, key=1, label="HangFire.Tests.TestFilter", style=dashed];
m28_50 -> m28_37  [color=darkseagreen4, key=1, label="HangFire.Tests.TestFilter", style=dashed];
m28_50 -> m28_39  [color=darkseagreen4, key=1, label="HangFire.Tests.TestFilter", style=dashed];
m28_50 -> m28_40  [color=darkseagreen4, key=1, label="HangFire.Tests.TestFilter", style=dashed];
m28_50 -> m28_46  [color=darkseagreen4, key=1, label="HangFire.Tests.TestFilter", style=dashed];
m28_50 -> m28_47  [color=darkseagreen4, key=1, label="HangFire.Tests.TestFilter", style=dashed];
}
