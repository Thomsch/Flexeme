digraph  {
n59 [label="HangFire.Web.Pages.QueuesPage", span=""];
n0 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Entry HangFire.Web.Pages.QueuesPage.Execute()", span="57-57"];
n1 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''\r\n'')", span="61-61"];
n2 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Layout = new LayoutPage { Title = ''Queues'' }", span="74-74"];
n49 [cluster="HangFire.Web.RazorPage.WriteLiteral(string)", label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="69-69"];
n3 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="IList<QueueWithTopEnqueuedJobsDto> queues", span="76-76"];
n50 [cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4"];
n4 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="var monitor = JobStorage.Current.GetMonitoringApi()", span="78-78"];
n5 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="queues = monitor.Queues()", span="80-80"];
n51 [cluster="HangFire.JobStorage.GetMonitoringApi()", label="Entry HangFire.JobStorage.GetMonitoringApi()", span="43-43"];
n6 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''\r\n'')", span="87-87"];
n52 [cluster="HangFire.Storage.Monitoring.IMonitoringApi.Queues()", label="Entry HangFire.Storage.Monitoring.IMonitoringApi.Queues()", span="7-7"];
n7 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="queues.Count == 0", span="92-92"];
n10 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label=queues, span="126-126"];
n8 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''    <div class=\''alert alert-warning\''>\r\n        You have no queues yet. Try to enq'' +\r\n''ueue your first job.\r\n    </div>\r\n'')", span="98-99"];
n9 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(@''    <table class=''''table table-striped''''>\r\n        <thead>\r\n            <tr>\r\n                <th>Queue</th>\r\n                <th>Length</th>\r\n                <th>Dequeued</th>\r\n                <th>Next jobs</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n'')", span="111-121"];
n11 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''                <tr>\r\n                    <td>\r\n                        <a class='' +\r\n''\''label-queue\'' href=\'''')", span="132-133"];
n47 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''        </tbody>\r\n    </table>\r\n'')", span="370-370"];
n12 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(Request.LinkTo(''/queues/'' + queue.Name))", span="138-138"];
n14 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(queue.Name)", span="148-148"];
n16 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(queue.Length)", span="159-159"];
n18 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(Request.LinkTo(''/queues/dequeued/'' + queue.Name))", span="169-169"];
n20 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(queue.Dequeued)", span="179-179"];
n22 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="queue.FirstJobs.Count == 0", span="195-195"];
n25 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="queue.FirstJobs", span="227-227"];
n13 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''\''>\r\n                            '')", span="143-143"];
n53 [cluster="HttpRequestBase.LinkTo(string)", label="Entry HttpRequestBase.LinkTo(string)", span="24-24"];
n54 [cluster="HangFire.Web.RazorPage.Write(object)", label="Entry HangFire.Web.RazorPage.Write(object)", span="76-76"];
n15 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''\r\n                        </a>\r\n                    </td>\r\n                    <t'' +\r\n''d>'')", span="153-154"];
n17 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''</td>\r\n                    <td>\r\n                        <a href=\'''')", span="164-164"];
n19 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''\''>\r\n                            '')", span="174-174"];
n21 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''    \r\n                        </a>\r\n                    </td>\r\n                  '' +\r\n''  <td>'')", span="187-188"];
n23 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''                        <em>No jobs queued.</em>\r\n'')", span="201-201"];
n24 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(@''                        <table class=''''table table-condensed table-bordered table-inner''''>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Id</th>\r\n                                    <th>Job type</th>\r\n                                    <th>Enqueued</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n'')", span="213-222"];
n26 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''                                    <tr class=\'''')", span="233-233"];
n45 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''                            </tbody>\r\n                        </table>\r\n'')", span="350-350"];
n27 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(!job.Value.InEnqueuedState ? ''obsolete-data'' : null)", span="238-238"];
n28 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''\''>\r\n                                        <td>\r\n                               '' +\r\n''             <a href=\'''')", span="243-244"];
n29 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(Request.LinkTo(''/job/'' + job.Key))", span="249-249"];
n30 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''\''>'')", span="254-254"];
n31 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(HtmlHelper.JobId(job.Key))", span="259-259"];
n32 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''</a>\r\n'')", span="264-264"];
n55 [cluster="HangFire.Web.HtmlHelper.JobId(string, bool)", label="Entry HangFire.Web.HtmlHelper.JobId(string, bool)", span="55-55"];
n56 [cluster="Unk.Write", label="Entry Unk.Write", span=""];
n33 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="!job.Value.InEnqueuedState", span="269-269"];
n34 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''                                                <span title=\''Job\'s state has been'' +\r\n'' changed while fetching data.\'' class=\''glyphicon glyphicon-question-sign\''></span>'' +\r\n''\r\n'')", span="275-277"];
n35 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''                                        </td>\r\n                                  '' +\r\n''      <td>'')", span="287-288"];
n36 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(HtmlHelper.DisplayMethod(job.Value.Method))", span="293-293"];
n37 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''</td>\r\n                                        <td>\r\n'')", span="298-298"];
n57 [cluster="HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.JobMethod)", label="Entry HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.JobMethod)", span="34-34"];
n38 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="job.Value.EnqueuedAt.HasValue", span="303-303"];
n39 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''                                                <span data-moment=\'''')", span="309-309"];
n44 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''                                        </td>\r\n                                  '' +\r\n''  </tr>\r\n'')", span="339-340"];
n40 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(JobHelper.ToStringTimestamp(job.Value.EnqueuedAt.Value))", span="314-314"];
n41 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''\''>\r\n                                                    '')", span="319-319"];
n58 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46"];
n42 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(job.Value.EnqueuedAt)", span="324-324"];
n43 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''\r\n                                                </span>\r\n'')", span="329-329"];
n46 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''                    </td>\r\n                </tr>\r\n'')", span="360-360"];
n48 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Exit HangFire.Web.Pages.QueuesPage.Execute()", span="57-57"];
m0_8 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="ExpirationManager.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m0_23 [cluster="Hangfire.SqlServer.SqlServerStorage.GetConnection()", file="ExpirationManager.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.GetConnection()", span="110-110"];
m0_28 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="ExpirationManager.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m0_25 [cluster="Unk.Execute", file="ExpirationManager.cs", label="Entry Unk.Execute", span=""];
m0_26 [cluster="string.Format(string, object, object)", file="ExpirationManager.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m0_27 [cluster="Hangfire.Logging.ILog.Trace(string)", file="ExpirationManager.cs", label="Entry Hangfire.Logging.ILog.Trace(string)", span="232-232"];
m0_30 [cluster="Hangfire.SqlServer.ExpirationManager.ToString()", file="ExpirationManager.cs", label="Entry Hangfire.SqlServer.ExpirationManager.ToString()", span="88-88"];
m0_31 [cluster="Hangfire.SqlServer.ExpirationManager.ToString()", file="ExpirationManager.cs", label="return ''SQL Records Expiration Manager'';", span="90-90"];
m0_32 [cluster="Hangfire.SqlServer.ExpirationManager.ToString()", file="ExpirationManager.cs", label="Exit Hangfire.SqlServer.ExpirationManager.ToString()", span="88-88"];
m0_29 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="ExpirationManager.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m0_0 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage)", file="ExpirationManager.cs", label="Entry Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage)", span="42-42"];
m0_1 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage)", file="ExpirationManager.cs", label="Exit Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage)", span="42-42"];
m0_22 [cluster="Hangfire.Logging.ILog.DebugFormat(string, params object[])", file="ExpirationManager.cs", label="Entry Hangfire.Logging.ILog.DebugFormat(string, params object[])", span="122-122"];
m0_2 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs", label="Entry Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="47-47"];
m0_3 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs", label="storage == null", span="49-49"];
m0_5 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs", label="_storage = storage", span="51-51"];
m0_6 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs", label="_checkInterval = checkInterval", span="52-52"];
m0_4 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs", label="throw new ArgumentNullException(''storage'');", span="49-49"];
m0_7 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs", label="Exit Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="47-47"];
m0_24 [cluster="string.Format(string, object)", file="ExpirationManager.cs", label="Entry string.Format(string, object)", span="0-0"];
m0_9 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs", label="Entry Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", span="55-55"];
m0_10 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs", label=ProcessedTables, span="57-57"];
m0_17 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs", label="cancellationToken.WaitHandle.WaitOne(DelayBetweenPasses)", span="79-79"];
m0_20 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs", label="cancellationToken.WaitHandle.WaitOne(_checkInterval)", span="85-85"];
m0_11 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs", label="Logger.DebugFormat(''Removing outdated records from table '{0}'...'', table)", span="59-59"];
m0_16 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs", label="Logger.Trace(String.Format(''Removed {0} outdated record(s) from '{1}' table.'', removedCount,\r\n                            table))", span="76-77"];
m0_15 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs", label="removedCount > 0", span="74-74"];
m0_19 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs", label="removedCount != 0", span="82-82"];
m0_18 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="80-80"];
m0_21 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs", label="Exit Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", span="55-55"];
m0_33 [file="ExpirationManager.cs", label="Hangfire.SqlServer.ExpirationManager", span=""];
m1_0 [cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueue(IDbConnection)", file="IPersistentJobQueueProvider.cs", label="Entry Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueue(IDbConnection)", span="22-22"];
m1_1 [cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueue(IDbConnection)", file="IPersistentJobQueueProvider.cs", label="Exit Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueue(IDbConnection)", span="22-22"];
m1_2 [cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", file="IPersistentJobQueueProvider.cs", label="Entry Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", span="23-23"];
m1_3 [cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", file="IPersistentJobQueueProvider.cs", label="Exit Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", span="23-23"];
m2_6 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.GetJobQueue(IDbConnection)", file="MsmqJobQueueProvider.cs", label="Entry Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.GetJobQueue(IDbConnection)", span="32-32"];
m2_7 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.GetJobQueue(IDbConnection)", file="MsmqJobQueueProvider.cs", label="return _jobQueue;", span="34-34"];
m2_8 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.GetJobQueue(IDbConnection)", file="MsmqJobQueueProvider.cs", label="Exit Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.GetJobQueue(IDbConnection)", span="32-32"];
m2_4 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueue.MsmqJobQueue(string, Hangfire.SqlServer.Msmq.MsmqTransactionType)", file="MsmqJobQueueProvider.cs", label="Entry Hangfire.SqlServer.Msmq.MsmqJobQueue.MsmqJobQueue(string, Hangfire.SqlServer.Msmq.MsmqTransactionType)", span="31-31"];
m2_5 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueueMonitoringApi.MsmqJobQueueMonitoringApi(string, System.Collections.Generic.IEnumerable<string>)", file="MsmqJobQueueProvider.cs", label="Entry Hangfire.SqlServer.Msmq.MsmqJobQueueMonitoringApi.MsmqJobQueueMonitoringApi(string, System.Collections.Generic.IEnumerable<string>)", span="29-29"];
m2_0 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.MsmqJobQueueProvider(string, System.Collections.Generic.IEnumerable<string>, Hangfire.SqlServer.Msmq.MsmqTransactionType)", file="MsmqJobQueueProvider.cs", label="Entry Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.MsmqJobQueueProvider(string, System.Collections.Generic.IEnumerable<string>, Hangfire.SqlServer.Msmq.MsmqTransactionType)", span="26-26"];
m2_1 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.MsmqJobQueueProvider(string, System.Collections.Generic.IEnumerable<string>, Hangfire.SqlServer.Msmq.MsmqTransactionType)", file="MsmqJobQueueProvider.cs", label="_jobQueue = new MsmqJobQueue(pathPattern, transactionType)", span="28-28"];
m2_2 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.MsmqJobQueueProvider(string, System.Collections.Generic.IEnumerable<string>, Hangfire.SqlServer.Msmq.MsmqTransactionType)", file="MsmqJobQueueProvider.cs", label="_monitoringApi = new MsmqJobQueueMonitoringApi(pathPattern, queues)", span="29-29"];
m2_3 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.MsmqJobQueueProvider(string, System.Collections.Generic.IEnumerable<string>, Hangfire.SqlServer.Msmq.MsmqTransactionType)", file="MsmqJobQueueProvider.cs", label="Exit Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.MsmqJobQueueProvider(string, System.Collections.Generic.IEnumerable<string>, Hangfire.SqlServer.Msmq.MsmqTransactionType)", span="26-26"];
m2_9 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", file="MsmqJobQueueProvider.cs", label="Entry Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", span="37-37"];
m2_10 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", file="MsmqJobQueueProvider.cs", label="return _monitoringApi;", span="39-39"];
m2_11 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", file="MsmqJobQueueProvider.cs", label="Exit Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", span="37-37"];
m2_12 [file="MsmqJobQueueProvider.cs", label="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider", span=""];
m3_8 [cluster="Unk.>", file="RabbitMqJobQueueProvider.cs", label="Entry Unk.>", span=""];
m3_29 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RabbitMqJobQueueProvider.cs", label="Entry HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="47-47"];
m3_31 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RabbitMqJobQueueProvider.cs", label="Assert.Equal(JobId, processingJob.JobId)", span="51-51"];
m3_32 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RabbitMqJobQueueProvider.cs", label="Assert.Equal(Queue, processingJob.Queue)", span="52-52"];
m3_30 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RabbitMqJobQueueProvider.cs", label="var processingJob = CreateProcessingJob()", span="49-49"];
m3_33 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RabbitMqJobQueueProvider.cs", label="Exit HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="47-47"];
m3_10 [cluster="lambda expression", file="RabbitMqJobQueueProvider.cs", label="Entry lambda expression", span="23-23"];
m3_11 [cluster="lambda expression", file="RabbitMqJobQueueProvider.cs", label="new SqlServerProcessingJob(null, JobId, Queue)", span="23-23"];
m3_45 [cluster="Unk.DeleteJobFromQueue", file="RabbitMqJobQueueProvider.cs", label="Entry Unk.DeleteJobFromQueue", span=""];
m3_9 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.RabbitMqJobQueue(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", file="RabbitMqJobQueueProvider.cs", label="Entry Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueue.RabbitMqJobQueue(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", span="21-21"];
m3_3 [cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueueProvider.RabbitMqJobQueueProvider(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", file="RabbitMqJobQueueProvider.cs", label="configureAction == null", span="16-16"];
m3_34 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.CreateProcessingJob()", file="RabbitMqJobQueueProvider.cs", label="Entry HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.CreateProcessingJob()", span="65-65"];
m3_46 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.CreateProcessingJob()", file="RabbitMqJobQueueProvider.cs", label="return new SqlServerProcessingJob(_connection.Object, JobId, Queue);", span="67-67"];
m3_47 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.CreateProcessingJob()", file="RabbitMqJobQueueProvider.cs", label="Exit HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.CreateProcessingJob()", span="65-65"];
m3_21 [cluster="SqlServerProcessingJob.cstr", file="RabbitMqJobQueueProvider.cs", label="Entry SqlServerProcessingJob.cstr", span=""];
m3_12 [cluster="lambda expression", file="RabbitMqJobQueueProvider.cs", label="Exit lambda expression", span="23-23"];
m3_13 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(HangFire.Storage.IStorageConnection, string, string)", file="RabbitMqJobQueueProvider.cs", label="Entry HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(HangFire.Storage.IStorageConnection, string, string)", span="25-25"];
m3_14 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="RabbitMqJobQueueProvider.cs", label="Entry HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", span="29-29"];
m3_0 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.SqlServerProcessingJobFacts()", file="RabbitMqJobQueueProvider.cs", label="Entry HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.SqlServerProcessingJobFacts()", span="14-14"];
m3_1 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.SqlServerProcessingJobFacts()", file="RabbitMqJobQueueProvider.cs", label="_connection = new Mock<IStorageConnection>()", span="16-16"];
m3_5 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", color=green, community=0, file="RabbitMqJobQueueProvider.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerProcessingJob(null, JobId, Queue))", prediction=0, span="22-23"];
m3_6 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="RabbitMqJobQueueProvider.cs", label="Assert.Equal(''connection'', exception.ParamName)", span="25-25"];
m3_2 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.SqlServerProcessingJobFacts()", file="RabbitMqJobQueueProvider.cs", label="Exit HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.SqlServerProcessingJobFacts()", span="14-14"];
m3_4 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="RabbitMqJobQueueProvider.cs", label="Entry HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="20-20"];
m3_7 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="RabbitMqJobQueueProvider.cs", label="Exit HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="20-20"];
m3_15 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="RabbitMqJobQueueProvider.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerProcessingJob(_connection.Object, null, Queue))", span="31-32"];
m3_16 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="RabbitMqJobQueueProvider.cs", label="Assert.Equal(''jobId'', exception.ParamName)", span="34-34"];
m3_17 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="RabbitMqJobQueueProvider.cs", label="Exit HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", span="29-29"];
m3_22 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RabbitMqJobQueueProvider.cs", label="Entry HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="38-38"];
m3_23 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RabbitMqJobQueueProvider.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerProcessingJob(_connection.Object, JobId, null))", span="40-41"];
m3_24 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RabbitMqJobQueueProvider.cs", label="Assert.Equal(''queue'', exception.ParamName)", span="43-43"];
m3_25 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RabbitMqJobQueueProvider.cs", label="Exit HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="38-38"];
m3_42 [cluster="lambda expression", file="RabbitMqJobQueueProvider.cs", label="Entry lambda expression", span="62-62"];
m3_18 [cluster="lambda expression", file="RabbitMqJobQueueProvider.cs", label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueueProvider", span=""];
m3_26 [cluster="lambda expression", file="RabbitMqJobQueueProvider.cs", label="Entry lambda expression", span="41-41"];
m3_19 [cluster="lambda expression", file="RabbitMqJobQueueProvider.cs", label="new SqlServerProcessingJob(_connection.Object, null, Queue)", span="32-32"];
m3_27 [cluster="lambda expression", file="RabbitMqJobQueueProvider.cs", label="new SqlServerProcessingJob(_connection.Object, JobId, null)", span="41-41"];
m3_20 [cluster="lambda expression", file="RabbitMqJobQueueProvider.cs", label="Exit lambda expression", span="32-32"];
m3_28 [cluster="lambda expression", file="RabbitMqJobQueueProvider.cs", label="Exit lambda expression", span="41-41"];
m3_43 [cluster="lambda expression", file="RabbitMqJobQueueProvider.cs", label="x.DeleteJobFromQueue(JobId, Queue)", span="62-62"];
m3_44 [cluster="lambda expression", file="RabbitMqJobQueueProvider.cs", label="Exit lambda expression", span="62-62"];
m3_35 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Dispose_CallsDeleteFromQueue()", file="RabbitMqJobQueueProvider.cs", label="Entry HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Dispose_CallsDeleteFromQueue()", span="56-56"];
m3_36 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Dispose_CallsDeleteFromQueue()", file="RabbitMqJobQueueProvider.cs", label="var processingJob = CreateProcessingJob()", span="58-58"];
m3_38 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Dispose_CallsDeleteFromQueue()", file="RabbitMqJobQueueProvider.cs", label="_connection.Verify(x => x.DeleteJobFromQueue(JobId, Queue))", span="62-62"];
m3_37 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Dispose_CallsDeleteFromQueue()", file="RabbitMqJobQueueProvider.cs", label="processingJob.Dispose()", span="60-60"];
m3_39 [cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Dispose_CallsDeleteFromQueue()", file="RabbitMqJobQueueProvider.cs", label="Exit HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Dispose_CallsDeleteFromQueue()", span="56-56"];
m3_41 [cluster="Unk.Verify", file="RabbitMqJobQueueProvider.cs", label="Entry Unk.Verify", span=""];
m3_40 [cluster="HangFire.SqlServer.SqlServerProcessingJob.Dispose()", file="RabbitMqJobQueueProvider.cs", label="Entry HangFire.SqlServer.SqlServerProcessingJob.Dispose()", span="40-40"];
m3_48 [file="RabbitMqJobQueueProvider.cs", label="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts", span=""];
m4_131 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="239-239"];
m4_136 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", color=green, community=0, file="SqlServerConnection.cs", label="return _storage.UseConnection(connection => connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault());", prediction=1, span="244-247"];
m4_134 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="toScore < fromScore", span="242-242"];
m4_133 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="241-241"];
m4_132 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="key == null", span="241-241"];
m4_135 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", span="242-242"];
m4_137 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="239-239"];
m4_5 [cluster="HangFire.Core.Tests.Server.ProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerConnection.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RedisProcessingJob(null, JobId, Queue))", span="22-23"];
m4_261 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="415-415"];
m4_265 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", color=green, community=0, file="SqlServerConnection.cs", label="return _storage.UseConnection(connection =>\r\n            {\r\n                var result = connection.Query<DateTime?>(query, new { key = key }).Single();\r\n                if (!result.HasValue) return TimeSpan.FromSeconds(-1);\r\n\r\n                return result.Value - DateTime.UtcNow;\r\n            });", prediction=2, span="423-429"];
m4_264 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs", label="string query = @''\r\nselect min([ExpireAt]) from HangFire.Hash\r\nwhere [Key] = @key''", span="419-421"];
m4_263 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="417-417"];
m4_262 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs", label="key == null", span="417-417"];
m4_266 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="415-415"];
m4_83 [cluster="Hangfire.Storage.InvocationData.Deserialize()", file="SqlServerConnection.cs", label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="40-40"];
m4_14 [cluster="string.Format(string, object)", file="SqlServerConnection.cs", label="Entry string.Format(string, object)", span="0-0"];
m4_17 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''queues'');", span="54-54"];
m4_18 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="Entry lambda expression", prediction=3, span="32-32"];
m4_21 [cluster="HangFire.Core.Tests.Server.ProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", color=green, community=0, file="SqlServerConnection.cs", label="Entry HangFire.Core.Tests.Server.ProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", prediction=3, span="38-38"];
m4_20 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="32-32"];
m4_23 [cluster="HangFire.Core.Tests.Server.ProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerConnection.cs", label="Assert.Equal(''queue'', exception.ParamName)", span="43-43"];
m4_172 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="286-286"];
m4_178 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", color=green, community=0, file="SqlServerConnection.cs", label="_storage.UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    @'';merge HangFire.Server with (holdlock) as Target ''\r\n                    + @''using (VALUES (@id, @data, @heartbeat)) as Source (Id, Data, Heartbeat) ''\r\n                    + @''on Target.Id = Source.Id ''\r\n                    + @''when matched then update set Data = Source.Data, LastHeartbeat = Source.Heartbeat ''\r\n                    +\r\n                    @''when not matched then insert (Id, Data, LastHeartbeat) values (Source.Id, Source.Data, Source.Heartbeat);'',\r\n                    new { id = serverId, data = JobHelper.ToJson(data), heartbeat = DateTime.UtcNow });\r\n            })", prediction=5, span="298-308"];
m4_177 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="291-296"];
m4_174 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''serverId'');", span="288-288"];
m4_176 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''context'');", span="289-289"];
m4_173 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="serverId == null", span="288-288"];
m4_175 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="context == null", span="289-289"];
m4_179 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="286-286"];
m4_160 [cluster="Unk.UseConnection", file="SqlServerConnection.cs", label="Entry Unk.UseConnection", span=""];
m4_44 [cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", file="SqlServerConnection.cs", label="Entry Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="67-67"];
m4_34 [cluster="HangFire.Core.Tests.Server.ProcessingJobFacts.Dispose_CallsDeleteFromQueue()", file="SqlServerConnection.cs", label="Entry HangFire.Core.Tests.Server.ProcessingJobFacts.Dispose_CallsDeleteFromQueue()", span="56-56"];
m4_9 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage)", span="37-37"];
m4_165 [cluster="Unk.ToDictionary", file="SqlServerConnection.cs", label="Entry Unk.ToDictionary", span=""];
m4_192 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="323-323"];
m4_195 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", color=green, community=0, file="SqlServerConnection.cs", label="_storage.UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                    new { now = DateTime.UtcNow, id = serverId });\r\n            })", prediction=6, span="327-332"];
m4_193 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="serverId == null", span="325-325"];
m4_194 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''serverId'');", span="325-325"];
m4_196 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="323-323"];
m4_220 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="356-356"];
m4_224 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", color=green, community=0, file="SqlServerConnection.cs", label="return _storage.UseConnection(connection => connection\r\n                .Query<string>(query, new { key = key, startingFrom = startingFrom + 1, endingAt = endingAt + 1 })\r\n                .ToList());", prediction=7, span="367-369"];
m4_223 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs", label="string query = @''\r\nselect [Value] from (\r\n	select [Value], row_number() over (order by [Id] ASC) as row_num \r\n	from HangFire.[Set]\r\n	where [Key] = @key \r\n) as s where s.row_num between @startingFrom and @endingAt''", span="360-365"];
m4_222 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="358-358"];
m4_221 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs", label="key == null", span="358-358"];
m4_225 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="356-356"];
m4_293 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="456-456"];
m4_297 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", color=green, community=0, file="SqlServerConnection.cs", label="return _storage.UseConnection(connection =>\r\n            {\r\n                var result = connection.Query<DateTime?>(query, new { key = key }).Single();\r\n                if (!result.HasValue) return TimeSpan.FromSeconds(-1);\r\n\r\n                return result.Value - DateTime.UtcNow;\r\n            });", prediction=8, span="464-470"];
m4_296 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs", label="string query = @''\r\nselect min([ExpireAt]) from HangFire.List\r\nwhere [Key] = @key''", span="460-462"];
m4_295 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="458-458"];
m4_294 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs", label="key == null", span="458-458"];
m4_298 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="456-456"];
m4_99 [cluster="Hangfire.Storage.StateData.StateData()", file="SqlServerConnection.cs", label="Entry Hangfire.Storage.StateData.StateData()", span="21-21"];
m4_252 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="404-404"];
m4_256 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", color=green, community=0, file="SqlServerConnection.cs", label="return _storage.UseConnection(connection => connection.Query<long>(query, new { key = key }).Single());", prediction=9, span="412-412"];
m4_255 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs", label="string query = @''\r\nselect count([Id]) from HangFire.Hash\r\nwhere [Key] = @key''", span="408-410"];
m4_254 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="406-406"];
m4_253 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs", label="key == null", span="406-406"];
m4_257 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="404-404"];
m4_314 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="489-489"];
m4_318 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", color=green, community=0, file="SqlServerConnection.cs", label="return _storage.UseConnection(connection => connection.Query<string>(query, new { key = key }).ToList());", prediction=10, span="498-498"];
m4_317 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs", label="string query = @''\r\nselect [Value] from HangFire.List\r\nwhere [Key] = @key\r\norder by [Id] desc''", span="493-496"];
m4_316 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="491-491"];
m4_315 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs", label="key == null", span="491-491"];
m4_319 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="489-489"];
m4_180 [cluster="Hangfire.SqlServer.Entities.ServerData.ServerData()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.Entities.ServerData.ServerData()", span="20-20"];
m4_63 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", span="125-125"];
m4_67 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", color=green, community=0, file="SqlServerConnection.cs", label="return _storage.UseConnection(connection =>\r\n            {\r\n                var jobData = connection.Query<SqlJob>(sql, new { id = id })\r\n                    .SingleOrDefault();\r\n\r\n                if (jobData == null) return null;\r\n\r\n                // TODO: conversion exception could be thrown.\r\n                var invocationData = JobHelper.FromJson<InvocationData>(jobData.InvocationData);\r\n                invocationData.Arguments = jobData.Arguments;\r\n\r\n                Job job = null;\r\n                JobLoadException loadException = null;\r\n\r\n                try\r\n                {\r\n                    job = invocationData.Deserialize();\r\n                }\r\n                catch (JobLoadException ex)\r\n                {\r\n                    loadException = ex;\r\n                }\r\n\r\n                return new JobData\r\n                {\r\n                    Job = job,\r\n                    State = jobData.StateName,\r\n                    CreatedAt = jobData.CreatedAt,\r\n                    LoadException = loadException\r\n                };\r\n            });", prediction=11, span="132-162"];
m4_66 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="string sql = \r\n                @''select InvocationData, StateName, Arguments, CreatedAt from HangFire.Job where Id = @id''", span="129-130"];
m4_65 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''id'');", span="127-127"];
m4_64 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="id == null", span="127-127"];
m4_68 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", span="125-125"];
m4_38 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="parameters == null", span="79-79"];
m4_155 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="271-271"];
m4_158 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", color=green, community=0, file="SqlServerConnection.cs", label="return _storage.UseConnection(connection =>\r\n            {\r\n                var result = connection.Query<SqlHash>(\r\n                    ''select Field, Value from HangFire.Hash with (forceseek) where [Key] = @key'',\r\n                    new { key })\r\n                    .ToDictionary(x => x.Field, x => x.Value);\r\n\r\n                return result.Count != 0 ? result : null;\r\n            });", prediction=12, span="275-283"];
m4_156 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs", label="key == null", span="273-273"];
m4_157 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="273-273"];
m4_159 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="271-271"];
m4_10 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="23-23"];
m4_11 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="new RedisProcessingJob(null, JobId, Queue)", prediction=3, span="23-23"];
m4_12 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="23-23"];
m4_8 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="39-39"];
m4_82 [cluster="Unk.SingleOrDefault", file="SqlServerConnection.cs", label="Entry Unk.SingleOrDefault", span=""];
m4_210 [cluster="System.TimeSpan.Negate()", file="SqlServerConnection.cs", label="Entry System.TimeSpan.Negate()", span="0-0"];
m4_100 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="196-196"];
m4_105 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", color=green, community=0, file="SqlServerConnection.cs", label="_storage.UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    @'';merge HangFire.JobParameter with (holdlock) as Target ''\r\n                    + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                    + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                    + @''when matched then update set Value = Source.Value ''\r\n                    +\r\n                    @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                    new { jobId = id, name, value });\r\n            })", prediction=14, span="201-211"];
m4_103 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="name == null", span="199-199"];
m4_102 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''id'');", span="198-198"];
m4_104 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''name'');", span="199-199"];
m4_101 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="id == null", span="198-198"];
m4_106 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="196-196"];
m4_138 [cluster="System.ArgumentException.ArgumentException(string)", file="SqlServerConnection.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m4_28 [cluster="HangFire.Core.Tests.Server.ProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerConnection.cs", label="Entry HangFire.Core.Tests.Server.ProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="47-47"];
m4_242 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerConnection.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m4_13 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", span="44-44"];
m4_107 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", span="174-174"];
m4_150 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction(System.Action<SqlConnection>)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseTransaction(System.Action<SqlConnection>)", span="198-198"];
m4_230 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="372-372"];
m4_234 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", color=green, community=0, file="SqlServerConnection.cs", label="return _storage.UseConnection(connection =>\r\n            {\r\n                var result = connection.Query<DateTime?>(query, new { key = key }).Single();\r\n                if (!result.HasValue) return TimeSpan.FromSeconds(-1);\r\n\r\n                return result.Value - DateTime.UtcNow;\r\n            });", prediction=15, span="380-386"];
m4_233 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs", label="string query = @''\r\nselect min([ExpireAt]) from HangFire.[Set]\r\nwhere [Key] = @key''", span="376-378"];
m4_232 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="374-374"];
m4_231 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs", label="key == null", span="374-374"];
m4_235 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="372-372"];
m4_243 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="389-389"];
m4_247 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", color=green, community=0, file="SqlServerConnection.cs", label="return _storage.UseConnection(connection => \r\n                connection.Query<long?>(query, new { key = key }).Single() ?? 0);", prediction=16, span="400-401"];
m4_246 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs", label="string query = @''\r\nselect sum(s.[Value]) from (select sum([Value]) as [Value] from HangFire.Counter\r\nwhere [Key] = @key\r\nunion all\r\nselect [Value] from HangFire.AggregatedCounter\r\nwhere [Key] = @key) as s''", span="393-398"];
m4_245 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="391-391"];
m4_244 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs", label="key == null", span="391-391"];
m4_248 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="389-389"];
m4_0 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(Hangfire.SqlServer.SqlServerStorage)", span="33-33"];
m4_1 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(Hangfire.SqlServer.SqlServerStorage)", color=green, community=0, file="SqlServerConnection.cs", label="storage == null", prediction=17, span="35-35"];
m4_2 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(Hangfire.SqlServer.SqlServerStorage)", color=green, community=0, file="SqlServerConnection.cs", label="throw new ArgumentNullException(''storage'');", prediction=18, span="35-35"];
m4_61 [cluster="Unk.ToString", file="SqlServerConnection.cs", label="Entry Unk.ToString", span=""];
m4_111 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="214-214"];
m4_116 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", color=green, community=0, file="SqlServerConnection.cs", label="return _storage.UseConnection(connection => connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault());", prediction=19, span="219-222"];
m4_114 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="name == null", span="217-217"];
m4_113 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''id'');", span="216-216"];
m4_115 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''name'');", span="217-217"];
m4_112 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="id == null", span="216-216"];
m4_117 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="214-214"];
m4_98 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", file="SqlServerConnection.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0"];
m4_184 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="311-311"];
m4_187 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", color=green, community=0, file="SqlServerConnection.cs", label="_storage.UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    @''delete from HangFire.Server where Id = @id'',\r\n                    new { id = serverId });\r\n            })", prediction=20, span="315-320"];
m4_185 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="serverId == null", span="313-313"];
m4_186 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''serverId'');", span="313-313"];
m4_188 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="311-311"];
m4_58 [cluster="System.DateTime.Add(System.TimeSpan)", file="SqlServerConnection.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m4_27 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="41-41"];
m4_4 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(Hangfire.SqlServer.SqlServerStorage)", span="33-33"];
m4_6 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="39-39"];
m4_7 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", color=green, community=0, file="SqlServerConnection.cs", label="return new SqlServerWriteOnlyTransaction(_storage);", prediction=3, span="41-41"];
m4_85 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="165-165"];
m4_89 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", color=green, community=0, file="SqlServerConnection.cs", label="return _storage.UseConnection(connection =>\r\n            {\r\n                var sqlState = connection.Query<SqlState>(sql, new { jobId = jobId }).SingleOrDefault();\r\n                if (sqlState == null)\r\n                {\r\n                    return null;\r\n                }\r\n\r\n                var data = new Dictionary<string, string>(\r\n                    JobHelper.FromJson<Dictionary<string, string>>(sqlState.Data),\r\n                    StringComparer.OrdinalIgnoreCase);\r\n\r\n                return new StateData\r\n                {\r\n                    Name = sqlState.Name,\r\n                    Reason = sqlState.Reason,\r\n                    Data = data\r\n                };\r\n            });", prediction=22, span="175-193"];
m4_88 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs", label="string sql = @''\r\nselect s.Name, s.Reason, s.Data\r\nfrom HangFire.State s\r\ninner join HangFire.Job j on j.StateId = s.Id\r\nwhere j.Id = @jobId''", span="169-173"];
m4_87 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''jobId'');", span="167-167"];
m4_86 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs", label="jobId == null", span="167-167"];
m4_90 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="165-165"];
m4_33 [cluster="HangFire.Core.Tests.Server.ProcessingJobFacts.CreateProcessingJob()", file="SqlServerConnection.cs", label="Entry HangFire.Core.Tests.Server.ProcessingJobFacts.CreateProcessingJob()", span="65-65"];
m4_46 [cluster="HangFire.Core.Tests.Server.ProcessingJobFacts.CreateProcessingJob()", file="SqlServerConnection.cs", label="Exit HangFire.Core.Tests.Server.ProcessingJobFacts.CreateProcessingJob()", span="65-65"];
m4_24 [cluster="Unk.Select", file="SqlServerConnection.cs", label="Entry Unk.Select", span=""];
m4_305 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="473-473"];
m4_309 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", color=green, community=0, file="SqlServerConnection.cs", label="return _storage.UseConnection(connection => connection\r\n                .Query<string>(query, new { key = key, startingFrom = startingFrom + 1, endingAt = endingAt + 1 })\r\n                .ToList());", prediction=23, span="484-486"];
m4_308 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs", label="string query = @''\r\nselect [Value] from (\r\n	select [Value], row_number() over (order by [Id] desc) as row_num \r\n	from HangFire.List\r\n	where [Key] = @key \r\n) as s where s.row_num between @startingFrom and @endingAt''", span="477-482"];
m4_307 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="475-475"];
m4_306 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs", label="key == null", span="475-475"];
m4_310 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="473-473"];
m4_39 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''parameters'');", span="79-79"];
m4_205 [cluster="System.TimeSpan.Duration()", file="SqlServerConnection.cs", label="Entry System.TimeSpan.Duration()", span="0-0"];
m4_41 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="62-62"];
m4_40 [cluster="Unk.Verify", file="SqlServerConnection.cs", label="Entry Unk.Verify", span=""];
m4_43 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="62-62"];
m4_57 [cluster="Hangfire.Common.JobHelper.ToJson(object)", file="SqlServerConnection.cs", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
m4_29 [cluster="Unk.GetJobQueue", file="SqlServerConnection.cs", label="Entry Unk.GetJobQueue", span=""];
m4_32 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="_storage.QueueProviders.GetProvider(queue)", prediction=3, span="57-57"];
m4_142 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="250-250"];
m4_148 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", color=green, community=0, file="SqlServerConnection.cs", label="_storage.UseTransaction(connection =>\r\n            {\r\n                foreach (var keyValuePair in keyValuePairs)\r\n                {\r\n                    connection.Execute(sql, new { key = key, field = keyValuePair.Key, value = keyValuePair.Value });\r\n                }\r\n            })", prediction=25, span="262-268"];
m4_147 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="string sql = @''\r\n;merge HangFire.Hash with (holdlock) as Target\r\nusing (VALUES (@key, @field, @value)) as Source ([Key], Field, Value)\r\non Target.[Key] = Source.[Key] and Target.Field = Source.Field\r\nwhen matched then update set Value = Source.Value\r\nwhen not matched then insert ([Key], Field, Value) values (Source.[Key], Source.Field, Source.Value);''", span="255-260"];
m4_144 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="252-252"];
m4_146 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''keyValuePairs'');", span="253-253"];
m4_143 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="key == null", span="252-252"];
m4_145 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="keyValuePairs == null", span="253-253"];
m4_149 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="250-250"];
m4_320 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="498-498"];
m4_25 [cluster="Unk.Distinct", file="SqlServerConnection.cs", label="Entry Unk.Distinct", span=""];
m4_47 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="HangFire.Core.Tests.Server.ProcessingJobFacts", prediction=17, span=""];
m4_48 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="parameters.Count > 0", prediction=27, span="100-100"];
m4_52 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="parameterArray[parameterIndex++] = new\r\n                        {\r\n                            jobId = jobId,\r\n                            name = parameter.Key,\r\n                            value = parameter.Value\r\n                        }", prediction=28, span="106-111"];
m4_55 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="return jobId;", prediction=17, span="121-121"];
m4_49 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="var parameterArray = new object[parameters.Count]", prediction=30, span="102-102"];
m4_50 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="int parameterIndex = 0", prediction=31, span="103-103"];
m4_54 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="connection.Execute(insertParameterSql, parameterArray)", prediction=30, span="118-118"];
m4_51 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label=parameters, prediction=27, span="104-104"];
m4_53 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="string insertParameterSql = @''\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@jobId, @name, @value)''", prediction=34, span="114-116"];
m4_70 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="var jobData = connection.Query<SqlJob>(sql, new { id = id })\r\n                    .SingleOrDefault()", prediction=35, span="134-135"];
m4_71 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="jobData == null", prediction=36, span="137-137"];
m4_73 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="var invocationData = JobHelper.FromJson<InvocationData>(jobData.InvocationData)", prediction=37, span="140-140"];
m4_74 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="invocationData.Arguments = jobData.Arguments", prediction=38, span="141-141"];
m4_80 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="return new JobData\r\n                {\r\n                    Job = job,\r\n                    State = jobData.StateName,\r\n                    CreatedAt = jobData.CreatedAt,\r\n                    LoadException = loadException\r\n                };", prediction=39, span="155-161"];
m4_72 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="return null;", prediction=40, span="137-137"];
m4_77 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="job = invocationData.Deserialize()", prediction=41, span="148-148"];
m4_75 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="Job job = null", prediction=42, span="143-143"];
m4_79 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="loadException = ex", prediction=43, span="152-152"];
m4_76 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="JobLoadException loadException = null", prediction=44, span="144-144"];
m4_78 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label=JobLoadException, prediction=45, span="150-150"];
m4_91 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="175-193"];
m4_92 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="var sqlState = connection.Query<SqlState>(sql, new { jobId = jobId }).SingleOrDefault()", prediction=46, span="177-177"];
m4_93 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="sqlState == null", prediction=47, span="178-178"];
m4_95 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="var data = new Dictionary<string, string>(\r\n                    JobHelper.FromJson<Dictionary<string, string>>(sqlState.Data),\r\n                    StringComparer.OrdinalIgnoreCase)", prediction=48, span="183-185"];
m4_96 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="return new StateData\r\n                {\r\n                    Name = sqlState.Name,\r\n                    Reason = sqlState.Reason,\r\n                    Data = data\r\n                };", prediction=49, span="187-192"];
m4_94 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="return null;", prediction=50, span="180-180"];
m4_97 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="175-193"];
m4_108 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="201-211"];
m4_109 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="connection.Execute(\r\n                    @'';merge HangFire.JobParameter with (holdlock) as Target ''\r\n                    + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                    + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                    + @''when matched then update set Value = Source.Value ''\r\n                    +\r\n                    @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                    new { jobId = id, name, value })", prediction=51, span="203-210"];
m4_110 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="201-211"];
m4_118 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="219-222"];
m4_119 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault()", prediction=52, span="219-222"];
m4_120 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="219-222"];
m4_126 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="229-236"];
m4_127 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="var result = connection.Query<string>(\r\n                    @''select Value from HangFire.[Set] where [Key] = @key'',\r\n                    new { key })", prediction=53, span="231-233"];
m4_128 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="return new HashSet<string>(result);", prediction=54, span="235-235"];
m4_129 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="229-236"];
m4_139 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="244-247"];
m4_140 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault()", prediction=55, span="244-247"];
m4_141 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="244-247"];
m4_151 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="262-268"];
m4_153 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="connection.Execute(sql, new { key = key, field = keyValuePair.Key, value = keyValuePair.Value })", prediction=56, span="266-266"];
m4_152 [cluster="lambda expression", file="SqlServerConnection.cs", label=keyValuePairs, span="264-264"];
m4_161 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="275-283"];
m4_162 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="var result = connection.Query<SqlHash>(\r\n                    ''select Field, Value from HangFire.Hash with (forceseek) where [Key] = @key'',\r\n                    new { key })\r\n                    .ToDictionary(x => x.Field, x => x.Value)", prediction=57, span="277-280"];
m4_163 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="return result.Count != 0 ? result : null;", prediction=58, span="282-282"];
m4_166 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="280-280"];
m4_169 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="280-280"];
m4_164 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="275-283"];
m4_167 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="x.Field", prediction=59, span="280-280"];
m4_168 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="280-280"];
m4_170 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="x.Value", prediction=60, span="280-280"];
m4_171 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="280-280"];
m4_181 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="298-308"];
m4_182 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="connection.Execute(\r\n                    @'';merge HangFire.Server with (holdlock) as Target ''\r\n                    + @''using (VALUES (@id, @data, @heartbeat)) as Source (Id, Data, Heartbeat) ''\r\n                    + @''on Target.Id = Source.Id ''\r\n                    + @''when matched then update set Data = Source.Data, LastHeartbeat = Source.Heartbeat ''\r\n                    +\r\n                    @''when not matched then insert (Id, Data, LastHeartbeat) values (Source.Id, Source.Data, Source.Heartbeat);'',\r\n                    new { id = serverId, data = JobHelper.ToJson(data), heartbeat = DateTime.UtcNow })", prediction=61, span="300-307"];
m4_183 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="298-308"];
m4_189 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="315-320"];
m4_190 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="connection.Execute(\r\n                    @''delete from HangFire.Server where Id = @id'',\r\n                    new { id = serverId })", prediction=62, span="317-319"];
m4_191 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="315-320"];
m4_197 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="327-332"];
m4_198 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="connection.Execute(\r\n                    @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                    new { now = DateTime.UtcNow, id = serverId })", prediction=63, span="329-331"];
m4_199 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="327-332"];
m4_207 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="342-344"];
m4_208 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) })", prediction=64, span="342-344"];
m4_209 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="342-344"];
m4_216 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="351-353"];
m4_217 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="connection.Query<int>(\r\n                ''select count([Key]) from HangFire.[Set] where [Key] = @key'',\r\n                new { key = key }).First()", prediction=65, span="351-353"];
m4_218 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="351-353"];
m4_226 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="367-369"];
m4_227 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="connection\r\n                .Query<string>(query, new { key = key, startingFrom = startingFrom + 1, endingAt = endingAt + 1 })\r\n                .ToList()", prediction=66, span="367-369"];
m4_228 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="367-369"];
m4_236 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="380-386"];
m4_237 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="var result = connection.Query<DateTime?>(query, new { key = key }).Single()", prediction=67, span="382-382"];
m4_238 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="!result.HasValue", prediction=68, span="383-383"];
m4_240 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="return result.Value - DateTime.UtcNow;", prediction=67, span="385-385"];
m4_239 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="return TimeSpan.FromSeconds(-1);", prediction=70, span="383-383"];
m4_241 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="380-386"];
m4_249 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="400-401"];
m4_250 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="connection.Query<long?>(query, new { key = key }).Single() ?? 0", prediction=71, span="401-401"];
m4_251 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="400-401"];
m4_258 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="412-412"];
m4_259 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="connection.Query<long>(query, new { key = key }).Single()", prediction=72, span="412-412"];
m4_260 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="412-412"];
m4_267 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="423-429"];
m4_268 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="var result = connection.Query<DateTime?>(query, new { key = key }).Single()", prediction=73, span="425-425"];
m4_269 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="!result.HasValue", prediction=74, span="426-426"];
m4_271 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="return result.Value - DateTime.UtcNow;", prediction=73, span="428-428"];
m4_270 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="return TimeSpan.FromSeconds(-1);", prediction=76, span="426-426"];
m4_272 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="423-429"];
m4_281 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="441-442"];
m4_282 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="connection\r\n                .Query<string>(query, new { key = key, field = name }).SingleOrDefault()", prediction=77, span="441-442"];
m4_283 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="441-442"];
m4_290 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="453-453"];
m4_291 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="connection.Query<long>(query, new { key = key }).Single()", prediction=78, span="453-453"];
m4_292 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="453-453"];
m4_299 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="464-470"];
m4_300 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="var result = connection.Query<DateTime?>(query, new { key = key }).Single()", prediction=79, span="466-466"];
m4_301 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="!result.HasValue", prediction=80, span="467-467"];
m4_303 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="return result.Value - DateTime.UtcNow;", prediction=79, span="469-469"];
m4_302 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="return TimeSpan.FromSeconds(-1);", prediction=82, span="467-467"];
m4_304 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="464-470"];
m4_311 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="484-486"];
m4_312 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="connection\r\n                .Query<string>(query, new { key = key, startingFrom = startingFrom + 1, endingAt = endingAt + 1 })\r\n                .ToList()", prediction=83, span="484-486"];
m4_313 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="484-486"];
m4_321 [cluster="lambda expression", color=green, community=0, file="SqlServerConnection.cs", label="connection.Query<string>(query, new { key = key }).ToList()", prediction=84, span="498-498"];
m4_322 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="498-498"];
m4_154 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="262-268"];
m4_219 [cluster="Unk.First", file="SqlServerConnection.cs", label="Entry Unk.First", span=""];
m4_84 [cluster="Hangfire.Storage.JobData.JobData()", file="SqlServerConnection.cs", label="Entry Hangfire.Storage.JobData.JobData()", span="21-21"];
m4_273 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="432-432"];
m4_279 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", color=green, community=0, file="SqlServerConnection.cs", label="return _storage.UseConnection(connection => connection\r\n                .Query<string>(query, new { key = key, field = name }).SingleOrDefault());", prediction=85, span="441-442"];
m4_278 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="string query = @''\r\nselect [Value] from HangFire.Hash\r\nwhere [Key] = @key and [Field] = @field''", span="437-439"];
m4_275 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="434-434"];
m4_277 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''name'');", span="435-435"];
m4_274 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="key == null", span="434-434"];
m4_276 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="name == null", span="435-435"];
m4_280 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="432-432"];
m4_211 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="347-347"];
m4_214 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", color=green, community=0, file="SqlServerConnection.cs", label="return _storage.UseConnection(connection => connection.Query<int>(\r\n                ''select count([Key]) from HangFire.[Set] where [Key] = @key'',\r\n                new { key = key }).First());", prediction=86, span="351-353"];
m4_212 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnection.cs", label="key == null", span="349-349"];
m4_213 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="349-349"];
m4_215 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="347-347"];
m4_3 [cluster="Mock<IStorageConnection>.cstr", color=green, community=0, file="SqlServerConnection.cs", label="Entry Mock<IStorageConnection>.cstr", prediction=3, span=""];
m4_60 [cluster="Unk.Single", file="SqlServerConnection.cs", label="Entry Unk.Single", span=""];
m4_206 [cluster="System.ArgumentException.ArgumentException(string, string)", file="SqlServerConnection.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m4_229 [cluster="Unk.ToList", file="SqlServerConnection.cs", label="Entry Unk.ToList", span=""];
m4_62 [cluster="Unk.Execute", file="SqlServerConnection.cs", label="Entry Unk.Execute", span=""];
m4_130 [cluster="HashSet<string>.cstr", file="SqlServerConnection.cs", label="Entry HashSet<string>.cstr", span=""];
m4_121 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="225-225"];
m4_124 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", color=green, community=0, file="SqlServerConnection.cs", label="return _storage.UseConnection(connection =>\r\n            {\r\n                var result = connection.Query<string>(\r\n                    @''select Value from HangFire.[Set] where [Key] = @key'',\r\n                    new { key });\r\n\r\n                return new HashSet<string>(result);\r\n            });", prediction=88, span="229-236"];
m4_122 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs", label="key == null", span="227-227"];
m4_123 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="227-227"];
m4_125 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="225-225"];
m4_284 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="445-445"];
m4_288 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", color=green, community=0, file="SqlServerConnection.cs", label="return _storage.UseConnection(connection => connection.Query<long>(query, new { key = key }).Single());", prediction=89, span="453-453"];
m4_287 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs", label="string query = @''\r\nselect count([Id]) from HangFire.List\r\nwhere [Key] = @key''", span="449-451"];
m4_286 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="447-447"];
m4_285 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs", label="key == null", span="447-447"];
m4_289 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="445-445"];
m4_200 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="335-335"];
m4_203 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", color=green, community=0, file="SqlServerConnection.cs", label="return _storage.UseConnection(connection => connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) }));", prediction=90, span="342-344"];
m4_201 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="timeOut.Duration() != timeOut", span="337-337"];
m4_202 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="throw new ArgumentException(''The `timeOut` value must be positive.'', ''timeOut'');", span="339-339"];
m4_204 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="335-335"];
m4_323 [file="SqlServerConnection.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m4_324 [file="SqlServerConnection.cs", label="System.DateTime", span=""];
m4_325 [file="SqlServerConnection.cs", label="System.TimeSpan", span=""];
m4_326 [file="SqlServerConnection.cs", label=createJobSql, span=""];
m4_327 [file="SqlServerConnection.cs", label=invocationData, span=""];
m4_328 [file="SqlServerConnection.cs", label="System.Collections.Generic.IDictionary<string, string>", span=""];
m4_329 [file="SqlServerConnection.cs", label=string, span=""];
m4_330 [file="SqlServerConnection.cs", label=sql, span=""];
m4_331 [file="SqlServerConnection.cs", label=string, span=""];
m4_332 [file="SqlServerConnection.cs", label=sql, span=""];
m4_333 [file="SqlServerConnection.cs", label=string, span=""];
m4_334 [file="SqlServerConnection.cs", label=string, span=""];
m4_335 [file="SqlServerConnection.cs", label=string, span=""];
m4_336 [file="SqlServerConnection.cs", label=string, span=""];
m4_337 [file="SqlServerConnection.cs", label=string, span=""];
m4_338 [file="SqlServerConnection.cs", label=string, span=""];
m4_339 [file="SqlServerConnection.cs", label=string, span=""];
m4_340 [file="SqlServerConnection.cs", label=double, span=""];
m4_341 [file="SqlServerConnection.cs", label=double, span=""];
m4_343 [file="SqlServerConnection.cs", label=string, span=""];
m4_344 [file="SqlServerConnection.cs", label=sql, span=""];
m4_345 [file="SqlServerConnection.cs", label=string, span=""];
m4_346 [file="SqlServerConnection.cs", label=string, span=""];
m4_347 [file="SqlServerConnection.cs", label=data, span=""];
m4_348 [file="SqlServerConnection.cs", label=string, span=""];
m4_349 [file="SqlServerConnection.cs", label=string, span=""];
m4_350 [file="SqlServerConnection.cs", label="System.TimeSpan", span=""];
m4_351 [file="SqlServerConnection.cs", label=string, span=""];
m4_352 [file="SqlServerConnection.cs", label=string, span=""];
m4_353 [file="SqlServerConnection.cs", label=int, span=""];
m4_354 [file="SqlServerConnection.cs", label=int, span=""];
m4_355 [file="SqlServerConnection.cs", label=query, span=""];
m4_356 [file="SqlServerConnection.cs", label=string, span=""];
m4_357 [file="SqlServerConnection.cs", label=query, span=""];
m4_358 [file="SqlServerConnection.cs", label=string, span=""];
m4_359 [file="SqlServerConnection.cs", label=query, span=""];
m4_360 [file="SqlServerConnection.cs", label=string, span=""];
m4_361 [file="SqlServerConnection.cs", label=query, span=""];
m4_362 [file="SqlServerConnection.cs", label=string, span=""];
m4_363 [file="SqlServerConnection.cs", label=query, span=""];
m4_364 [file="SqlServerConnection.cs", label=string, span=""];
m4_365 [file="SqlServerConnection.cs", label=string, span=""];
m4_366 [file="SqlServerConnection.cs", label=query, span=""];
m4_367 [file="SqlServerConnection.cs", label=string, span=""];
m4_368 [file="SqlServerConnection.cs", label=query, span=""];
m4_369 [file="SqlServerConnection.cs", label=string, span=""];
m4_370 [file="SqlServerConnection.cs", label=query, span=""];
m4_371 [file="SqlServerConnection.cs", label=string, span=""];
m4_372 [file="SqlServerConnection.cs", label=int, span=""];
m4_373 [file="SqlServerConnection.cs", label=int, span=""];
m4_374 [file="SqlServerConnection.cs", label=query, span=""];
m4_375 [file="SqlServerConnection.cs", label=string, span=""];
m4_376 [file="SqlServerConnection.cs", label=query, span=""];
m4_342 [file="SqlServerConnection.cs", label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", span=""];
m5_24 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerDistributedLock.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m5_33 [cluster="HangFire.Client.ClientJobDescriptor.Create()", file="SqlServerDistributedLock.cs", label="Exit HangFire.Client.ClientJobDescriptor.Create()", span="101-101"];
m5_27 [cluster="HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", color=green, community=0, file="SqlServerDistributedLock.cs", label="return _jobParameters.ContainsKey(name)\r\n                ? JobHelper.FromJson<T>(_jobParameters[name])\r\n                : default(T);", prediction=91, span="96-98"];
m5_25 [cluster="System.InvalidOperationException.InvalidOperationException(string)", color=green, community=0, file="SqlServerDistributedLock.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", prediction=92, span="0-0"];
m5_26 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", color=green, community=0, file="SqlServerDistributedLock.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", prediction=93, span="0-0"];
m5_31 [cluster="HangFire.Client.ClientJobDescriptor.Create()", file="SqlServerDistributedLock.cs", label="Entry HangFire.Client.ClientJobDescriptor.Create()", span="101-101"];
m5_0 [cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="SqlServerDistributedLock.cs", label="Entry HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", span="21-21"];
m5_1 [cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="SqlServerDistributedLock.cs", label="Debug.Assert(redis != null)", span="28-28"];
m5_2 [cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="SqlServerDistributedLock.cs", label="Debug.Assert(jobId != null)", span="29-29"];
m5_3 [cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="SqlServerDistributedLock.cs", label="Debug.Assert(type != null)", span="30-30"];
m5_4 [cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="SqlServerDistributedLock.cs", label="Debug.Assert(arguments != null)", span="31-31"];
m5_5 [cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="SqlServerDistributedLock.cs", label="Debug.Assert(state != null)", span="32-32"];
m5_6 [cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="SqlServerDistributedLock.cs", label="_stateMachine = new StateMachine(redis)", span="34-34"];
m5_7 [cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="SqlServerDistributedLock.cs", label="JobId = jobId", span="36-36"];
m5_8 [cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="SqlServerDistributedLock.cs", label="Type = type", span="37-37"];
m5_9 [cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="SqlServerDistributedLock.cs", label="State = state", span="38-38"];
m5_10 [cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="SqlServerDistributedLock.cs", label="_jobParameters[''Type''] = type.AssemblyQualifiedName", span="38-38"];
m5_11 [cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", color=green, community=0, file="SqlServerDistributedLock.cs", label="_jobParameters[''Args''] = JobHelper.ToJson(arguments)", prediction=94, span="39-39"];
m5_12 [cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="SqlServerDistributedLock.cs", label="Exit HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", span="21-21"];
m5_21 [cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="SqlServerDistributedLock.cs", label="_jobParameters.Add(name, JobHelper.ToJson(value))", span="81-81"];
m5_16 [cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="SqlServerDistributedLock.cs", label="Entry HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", span="72-72"];
m5_17 [cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="SqlServerDistributedLock.cs", label="String.IsNullOrEmpty(name)", span="72-72"];
m5_18 [cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="SqlServerDistributedLock.cs", label="throw new ArgumentNullException(''name'');", span="72-72"];
m5_19 [cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="SqlServerDistributedLock.cs", label="_jobParameters.Add(name, JobHelper.ToJson(value))", span="77-77"];
m5_20 [cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="SqlServerDistributedLock.cs", label="Exit HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", span="70-70"];
m5_22 [cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="SqlServerDistributedLock.cs", label="Exit HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", span="72-72"];
m5_23 [cluster="string.IsNullOrWhiteSpace(string)", file="SqlServerDistributedLock.cs", label="Entry string.IsNullOrWhiteSpace(string)", span="0-0"];
m5_34 [cluster="HangFire.Client.ClientJobDescriptor.Create()", file="SqlServerDistributedLock.cs", label="Entry HangFire.Client.ClientJobDescriptor.Create()", span="105-105"];
m5_35 [cluster="HangFire.Client.ClientJobDescriptor.Create()", file="SqlServerDistributedLock.cs", label="HangFire.Client.ClientJobDescriptor", span=""];
m5_36 [cluster="HangFire.Client.ClientJobDescriptor.Create()", file="SqlServerDistributedLock.cs", label="_stateMachine.CreateInState(JobId, _jobParameters, State)", span="108-108"];
m5_37 [cluster="HangFire.Client.ClientJobDescriptor.Create()", file="SqlServerDistributedLock.cs", label="Exit HangFire.Client.ClientJobDescriptor.Create()", span="105-105"];
m5_32 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", color=green, community=0, file="SqlServerDistributedLock.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", prediction=91, span="0-0"];
m5_15 [cluster="HangFire.JobHelper.ToJson(object)", file="SqlServerDistributedLock.cs", label="Entry HangFire.JobHelper.ToJson(object)", span="28-28"];
m5_38 [cluster="HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="SqlServerDistributedLock.cs", label="Entry HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", span="58-58"];
m5_13 [cluster="System.Diagnostics.Debug.Assert(bool)", file="SqlServerDistributedLock.cs", label="Entry System.Diagnostics.Debug.Assert(bool)", span="0-0"];
m5_14 [cluster="HangFire.States.StateMachine.StateMachine(IRedisClient)", file="SqlServerDistributedLock.cs", label="Entry HangFire.States.StateMachine.StateMachine(IRedisClient)", span="32-32"];
m5_39 [file="SqlServerDistributedLock.cs", label="HangFire.Client.ClientJobDescriptor", span=""];
m6_9 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerFetchedJob.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m6_19 [cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="SqlServerFetchedJob.cs", label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39"];
m6_18 [cluster="Hangfire.Storage.IStorageConnection.GetJobParameter(string, string)", file="SqlServerFetchedJob.cs", label="Entry Hangfire.Storage.IStorageConnection.GetJobParameter(string, string)", span="39-39"];
m6_15 [cluster="Hangfire.States.ElectStateContext.GetJobParameter<T>(string)", file="SqlServerFetchedJob.cs", label="Entry Hangfire.States.ElectStateContext.GetJobParameter<T>(string)", span="79-79"];
m6_16 [cluster="Hangfire.States.ElectStateContext.GetJobParameter<T>(string)", file="SqlServerFetchedJob.cs", label="return JobHelper.FromJson<T>(Connection.GetJobParameter(\r\n                JobId, name));", span="81-82"];
m6_17 [cluster="Hangfire.States.ElectStateContext.GetJobParameter<T>(string)", file="SqlServerFetchedJob.cs", label="Exit Hangfire.States.ElectStateContext.GetJobParameter<T>(string)", span="79-79"];
m6_13 [cluster="Hangfire.Common.JobHelper.ToJson(object)", file="SqlServerFetchedJob.cs", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
m6_0 [cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IState, string)", file="SqlServerFetchedJob.cs", label="Entry Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IState, string)", span="30-30"];
m6_3 [cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IState, string)", file="SqlServerFetchedJob.cs", label="candidateState == null", span="38-38"];
m6_5 [cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IState, string)", file="SqlServerFetchedJob.cs", label="_candidateState = candidateState", span="40-40"];
m6_6 [cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IState, string)", file="SqlServerFetchedJob.cs", label="Connection = connection", span="42-42"];
m6_7 [cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IState, string)", file="SqlServerFetchedJob.cs", label="CurrentState = currentState", span="43-43"];
m6_4 [cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IState, string)", file="SqlServerFetchedJob.cs", label="throw new ArgumentNullException(''candidateState'');", span="38-38"];
m6_8 [cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IState, string)", file="SqlServerFetchedJob.cs", label="Exit Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IState, string)", span="30-30"];
m6_10 [cluster="Hangfire.States.ElectStateContext.SetJobParameter<T>(string, T)", file="SqlServerFetchedJob.cs", label="Entry Hangfire.States.ElectStateContext.SetJobParameter<T>(string, T)", span="74-74"];
m6_11 [cluster="Hangfire.States.ElectStateContext.SetJobParameter<T>(string, T)", file="SqlServerFetchedJob.cs", label="Connection.SetJobParameter(JobId, name, JobHelper.ToJson(value))", span="76-76"];
m6_12 [cluster="Hangfire.States.ElectStateContext.SetJobParameter<T>(string, T)", file="SqlServerFetchedJob.cs", label="Exit Hangfire.States.ElectStateContext.SetJobParameter<T>(string, T)", span="74-74"];
m6_14 [cluster="Hangfire.Storage.IStorageConnection.SetJobParameter(string, string, string)", file="SqlServerFetchedJob.cs", label="Entry Hangfire.Storage.IStorageConnection.SetJobParameter(string, string, string)", span="38-38"];
m6_20 [file="SqlServerFetchedJob.cs", label="Hangfire.States.ElectStateContext", span=""];
m7_33 [cluster="int.ToString(System.IFormatProvider)", file="SqlServerJobQueue.cs", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
m7_8 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerJobQueue.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m7_38 [cluster="System.TimeSpan.Negate()", file="SqlServerJobQueue.cs", label="Entry System.TimeSpan.Negate()", span="0-0"];
m7_39 [cluster="Unk.>", file="SqlServerJobQueue.cs", label="Entry Unk.>", span=""];
m7_0 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", span="32-32"];
m7_1 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", color=green, community=0, file="SqlServerJobQueue.cs", label="storage == null", prediction=96, span="34-34"];
m7_2 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", color=green, community=0, file="SqlServerJobQueue.cs", label="throw new ArgumentNullException(''storage'');", prediction=97, span="34-34"];
m7_3 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="options == null", span="35-35"];
m7_5 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", color=green, community=0, file="SqlServerJobQueue.cs", label="_storage = storage", prediction=98, span="37-37"];
m7_6 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="_options = options", span="38-38"];
m7_4 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="throw new ArgumentNullException(''options'');", span="35-35"];
m7_7 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", span="32-32"];
m7_28 [cluster="System.ArgumentException.ArgumentException(string, string)", file="SqlServerJobQueue.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m7_32 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="SqlServerJobQueue.cs", label="Entry Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", span="31-31"];
m7_31 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="SqlServerJobQueue.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m7_37 [cluster="string.Format(string, object)", file="SqlServerJobQueue.cs", label="Entry string.Format(string, object)", span="0-0"];
m7_48 [cluster="Unk.Execute", file="SqlServerJobQueue.cs", label="Entry Unk.Execute", span=""];
m7_41 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Enqueue(string, string)", file="SqlServerJobQueue.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueue.Enqueue(string, string)", span="92-92"];
m7_43 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Enqueue(string, string)", color=green, community=0, file="SqlServerJobQueue.cs", label="_storage.UseConnection(connection =>\r\n            {\r\n                connection.Execute(enqueueJobSql, new { jobId = jobId, queue = queue });\r\n            })", prediction=99, span="97-100"];
m7_42 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Enqueue(string, string)", file="SqlServerJobQueue.cs", label="string enqueueJobSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue) values (@jobId, @queue)''", span="94-95"];
m7_44 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Enqueue(string, string)", file="SqlServerJobQueue.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueue.Enqueue(string, string)", span="92-92"];
m7_45 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="97-100"];
m7_34 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="65-71"];
m7_35 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueue.cs", label="fetchedJob = connection.Query<FetchedJob>(\r\n                        String.Format(fetchJobSqlTemplate, fetchConditions[currentQueryIndex]),\r\n                        new { queues = queues, timeout = _options.InvisibilityTimeout.Negate().TotalSeconds })\r\n                        .SingleOrDefault()", prediction=100, span="67-70"];
m7_36 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="65-71"];
m7_46 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueue.cs", label="connection.Execute(enqueueJobSql, new { jobId = jobId, queue = queue })", prediction=101, span="99-99"];
m7_47 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="97-100"];
m7_30 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", file="SqlServerJobQueue.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", span="174-174"];
m7_40 [cluster="Unk.SingleOrDefault", file="SqlServerJobQueue.cs", label="Entry Unk.SingleOrDefault", span=""];
m7_9 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="42-42"];
m7_19 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", color=green, community=0, file="SqlServerJobQueue.cs", label="_storage.UseConnection(connection =>\r\n                {\r\n                    fetchedJob = connection.Query<FetchedJob>(\r\n                        String.Format(fetchJobSqlTemplate, fetchConditions[currentQueryIndex]),\r\n                        new { queues = queues, timeout = _options.InvisibilityTimeout.Negate().TotalSeconds })\r\n                        .SingleOrDefault();\r\n                })", prediction=102, span="65-71"];
m7_18 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="63-63"];
m7_15 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="string fetchJobSqlTemplate = @''\r\nset transaction isolation level read committed\r\nupdate top (1) HangFire.JobQueue with (readpast) set FetchedAt = GETUTCDATE()\r\noutput INSERTED.Id, INSERTED.JobId, INSERTED.Queue\r\nwhere FetchedAt {0}\r\nand Queue in @queues''", span="49-54"];
m7_16 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="var fetchConditions = new[] { ''is null'', ''< DATEADD(second, @timeout, GETUTCDATE())'' }", span="58-58"];
m7_17 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="var currentQueryIndex = 0", span="59-59"];
m7_20 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="fetchedJob == null", span="73-73"];
m7_25 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="fetchedJob == null", span="83-83"];
m7_26 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", color=green, community=0, file="SqlServerJobQueue.cs", label="return new SqlServerFetchedJob(\r\n                _storage,\r\n                fetchedJob.Id,\r\n                fetchedJob.JobId.ToString(CultureInfo.InvariantCulture),\r\n                fetchedJob.Queue);", prediction=102, span="85-89"];
m7_14 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", color=green, community=0, file="SqlServerJobQueue.cs", label="FetchedJob fetchedJob = null", prediction=104, span="47-47"];
m7_12 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="queues.Length == 0", span="45-45"];
m7_22 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="cancellationToken.WaitHandle.WaitOne(_options.QueuePollInterval)", span="77-77"];
m7_11 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="throw new ArgumentNullException(''queues'');", span="44-44"];
m7_10 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="queues == null", span="44-44"];
m7_21 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="currentQueryIndex == fetchConditions.Length - 1", span="75-75"];
m7_24 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="currentQueryIndex = (currentQueryIndex + 1) % fetchConditions.Length", span="82-82"];
m7_13 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="throw new ArgumentException(''Queue array must be non-empty.'', ''queues'');", span="45-45"];
m7_23 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="78-78"];
m7_27 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="42-42"];
m7_29 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="SqlServerJobQueue.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m7_49 [file="SqlServerJobQueue.cs", label="Hangfire.SqlServer.SqlServerJobQueue", span=""];
m7_50 [file="SqlServerJobQueue.cs", label="string[]", span=""];
m7_51 [file="SqlServerJobQueue.cs", label=fetchJobSqlTemplate, span=""];
m7_52 [file="SqlServerJobQueue.cs", label=fetchConditions, span=""];
m7_53 [file="SqlServerJobQueue.cs", label=currentQueryIndex, span=""];
m7_54 [file="SqlServerJobQueue.cs", label=string, span=""];
m7_55 [file="SqlServerJobQueue.cs", label=string, span=""];
m7_56 [file="SqlServerJobQueue.cs", label=enqueueJobSql, span=""];
m8_36 [cluster="HangFire.JobHelper.FromJson<T>(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.JobHelper.FromJson<T>(string)", span="44-44"];
m8_113 [cluster="System.Collections.Generic.List<T>.List()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m8_296 [cluster="Unk.TryParse", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.TryParse", span=""];
m8_30 [cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0"];
m8_133 [cluster="int.Parse(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry int.Parse(string)", span="0-0"];
m8_43 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.ScheduledJobs(int, int)", span="80-80"];
m8_54 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetValueFromHash(\r\n                                String.Format(''hangfire:job:{0}:state'', job.Key),\r\n                                ''State''),\r\n                            x => states.Add(job.Key, x))", span="109-113"];
m8_51 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label=scheduledJobs, prediction=105, span="99-99"];
m8_45 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="var scheduledJobs = Redis.GetRangeWithScoresFromSortedSet(\r\n                    ''hangfire:schedule'',\r\n                    from,\r\n                    from + count - 1)", span="84-87"];
m8_50 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="var pipeline = Redis.CreatePipeline()", prediction=106, span="97-97"];
m8_52 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="var job = scheduledJob", prediction=107, span="101-101"];
m8_55 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.Flush()", span="116-116"];
m8_56 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="return scheduledJobs.ToDictionary(\r\n                    job => job.Key,\r\n                    job => new ScheduleDto\r\n                    {\r\n                        ScheduledAt = JobHelper.FromTimestamp((long) job.Value),\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(jobs[job.Key][1]),\r\n                        Queue = JobHelper.TryToGetQueue(jobs[job.Key][0]),\r\n                        Type = jobs[job.Key][0],\r\n                        InScheduledState =\r\n                            ScheduledState.Name.Equals(states[job.Key], StringComparison.OrdinalIgnoreCase)\r\n                    });", prediction=108, span="119-129"];
m8_48 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="var jobs = new Dictionary<string, List<string>>()", span="94-94"];
m8_49 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="var states = new Dictionary<string, string>()", prediction=109, span="95-95"];
m8_53 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}'', job.Key),\r\n                                new[] { ''Type'', ''Args'' }),\r\n                            x => jobs.Add(job.Key, x))", prediction=106, span="103-107"];
m8_46 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="scheduledJobs.Count == 0", span="89-89"];
m8_44 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label=Redis, span="82-82"];
m8_47 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="return new Dictionary<string, ScheduleDto>();", span="91-91"];
m8_57 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.ScheduledJobs(int, int)", span="80-80"];
m8_38 [cluster="HangFire.JobHelper.FromNullableStringTimestamp(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.JobHelper.FromNullableStringTimestamp(string)", span="72-72"];
m8_214 [cluster="HangFire.Web.DequeuedJobDto.DequeuedJobDto()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.DequeuedJobDto.DequeuedJobDto()", span="5-5"];
m8_391 [cluster="HangFire.Web.StatisticsDto.StatisticsDto()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.StatisticsDto.StatisticsDto()", span="2-2"];
m8_29 [cluster="Unk.GetJobsWithProperties", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.GetJobsWithProperties", span=""];
m8_31 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m8_364 [cluster="KeyValuePair<string, T>.cstr", file="SqlServerJobQueueMonitoringApi.cs", label="Entry KeyValuePair<string, T>.cstr", span=""];
m8_197 [cluster="HangFire.Web.EnqueuedJobDto.EnqueuedJobDto()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.EnqueuedJobDto.EnqueuedJobDto()", span="5-5"];
m8_60 [cluster="Unk.CreatePipeline", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.CreatePipeline", span=""];
m8_76 [cluster="Unk.GetValueFromHash", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.GetValueFromHash", span=""];
m8_23 [cluster="HangFire.Web.JobStorage.ProcessingJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.ProcessingJobs(int, int)", span="52-52"];
m8_24 [cluster="HangFire.Web.JobStorage.ProcessingJobs(int, int)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label=Redis, prediction=111, span="55-55"];
m8_25 [cluster="HangFire.Web.JobStorage.ProcessingJobs(int, int)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="var jobIds = Redis.GetRangeFromSortedSet(\r\n                    ''hangfire:processing'',\r\n                    from,\r\n                    from + count - 1)", prediction=112, span="57-60"];
m8_26 [cluster="HangFire.Web.JobStorage.ProcessingJobs(int, int)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="return GetJobsWithProperties(Redis,\r\n                    jobIds,\r\n                    new[] { ''Type'', ''Args'' },\r\n                    new[] { ''StartedAt'', ''ServerName'', ''State'' },\r\n                    (job, state) => new ProcessingJobDto\r\n                    {\r\n                        ServerName = state[1],\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        Type = job[0],\r\n                        Queue = JobHelper.TryToGetQueue(job[0]),\r\n                        StartedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InProcessingState = ProcessingState.Name.Equals(\r\n                            state[2], StringComparison.OrdinalIgnoreCase),\r\n                        State = state[2]\r\n                    }).OrderBy(x => x.Value.StartedAt).ToList();", prediction=113, span="62-76"];
m8_27 [cluster="HangFire.Web.JobStorage.ProcessingJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.ProcessingJobs(int, int)", span="52-52"];
m8_134 [cluster="HangFire.JobHelper.FromStringTimestamp(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.JobHelper.FromStringTimestamp(string)", span="67-67"];
m8_262 [cluster="Unk.ContainsKey", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.ContainsKey", span=""];
m8_173 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", span="500-500"];
m8_336 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetValuesFromHash(String.Format(''hangfire:job:{0}'', id), properties),\r\n                        x => { if (!jobs.ContainsKey(id)) jobs.Add(id, x); })", span="518-520"];
m8_338 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(String.Format(''hangfire:job:{0}:state'', id), stateProperties),\r\n                            x => { if (!states.ContainsKey(id)) states.Add(id, x); })", span="524-526"];
m8_333 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="SqlServerJobQueueMonitoringApi.cs", label="var pipeline = redis.CreatePipeline()", span="512-512"];
m8_335 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="SqlServerJobQueueMonitoringApi.cs", label="var id = jobId", span="516-516"];
m8_339 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.Flush()", span="530-530"];
m8_331 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="SqlServerJobQueueMonitoringApi.cs", label="var jobs = new Dictionary<string, List<string>>(jobIds.Count)", span="509-509"];
m8_337 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="SqlServerJobQueueMonitoringApi.cs", label="stateProperties != null", span="522-522"];
m8_332 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="SqlServerJobQueueMonitoringApi.cs", label="var states = new Dictionary<string, List<string>>(jobIds.Count)", span="510-510"];
m8_334 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="SqlServerJobQueueMonitoringApi.cs", label=jobIds, span="514-514"];
m8_329 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="SqlServerJobQueueMonitoringApi.cs", label="jobIds.Count == 0", span="507-507"];
m8_340 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="SqlServerJobQueueMonitoringApi.cs", label="return jobIds\r\n                .Select(x => new\r\n                {\r\n                    JobId = x,\r\n                    Job = jobs[x],\r\n                    State = states.ContainsKey(x) ? states[x] : null\r\n                })\r\n                .Select(x => new KeyValuePair<string, T>(\r\n                    x.JobId,\r\n                    x.Job.TrueForAll(y => y == null) ? default(T) : selector(x.Job, x.State)))\r\n                .ToList();", span="533-543"];
m8_330 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="SqlServerJobQueueMonitoringApi.cs", label="return new List<KeyValuePair<string, T>>();", span="507-507"];
m8_341 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", span="500-500"];
m8_366 [cluster="Unk.selector", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.selector", span=""];
m8_238 [cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", span="86-86"];
m8_236 [cluster="HangFire.States.StateMachine.StateMachine(IRedisClient)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.States.StateMachine.StateMachine(IRedisClient)", span="32-32"];
m8_350 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m8_11 [cluster="HangFire.Web.JobStorage.DequeuedCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.DequeuedCount(string)", span="28-28"];
m8_12 [cluster="HangFire.Web.JobStorage.DequeuedCount(string)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label=Redis, prediction=114, span="30-30"];
m8_13 [cluster="HangFire.Web.JobStorage.DequeuedCount(string)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="return Redis.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue));", prediction=115, span="32-32"];
m8_14 [cluster="HangFire.Web.JobStorage.DequeuedCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.DequeuedCount(string)", span="28-28"];
m8_219 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", span="439-439"];
m8_283 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="var result = new Dictionary<DateTime, long>()", span="453-453"];
m8_282 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="var valuesMap = redis.GetValuesMap(keys)", span="451-451"];
m8_284 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="var i = 0", span="454-454"];
m8_289 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="result.Add(dates[i], value)", span="462-462"];
m8_291 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="return result;", span="465-465"];
m8_281 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="var keys = dates.Select(x => String.Format(''hangfire:stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))).ToList()", span="450-450"];
m8_287 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="!long.TryParse(valuesMap[valuesMap.Keys.ElementAt(i)], out value)", span="457-457"];
m8_285 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="i < dates.Count", span="454-454"];
m8_290 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="i++", span="454-454"];
m8_275 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="var dates = new List<DateTime>()", span="443-443"];
m8_288 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="value = 0", span="459-459"];
m8_274 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="var endDate = DateTime.UtcNow", span="442-442"];
m8_277 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="i < 24", span="444-444"];
m8_286 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="long value", span="456-456"];
m8_276 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="var i = 0", span="444-444"];
m8_278 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="dates.Add(endDate)", span="446-446"];
m8_279 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="endDate = endDate.AddHours(-1)", span="447-447"];
m8_280 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="i++", span="444-444"];
m8_292 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", span="439-439"];
m8_234 [cluster="Unk.TryToGetQueue", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.TryToGetQueue", span=""];
m8_58 [cluster="Unk.GetRangeWithScoresFromSortedSet", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.GetRangeWithScoresFromSortedSet", span=""];
m8_132 [cluster="HangFire.Web.ServerDto.ServerDto()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.ServerDto.ServerDto()", span="5-5"];
m8_237 [cluster="HangFire.States.EnqueuedState.EnqueuedState(string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.States.EnqueuedState.EnqueuedState(string, string)", span="10-10"];
m8_263 [cluster="Unk.Where", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.Where", span=""];
m8_239 [cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.EnqueueScheduled(string)", span="393-393"];
m8_241 [cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var jobType = Redis.GetValueFromHash(String.Format(''hangfire:job:{0}'', jobId), ''Type'')", span="397-397"];
m8_240 [cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="SqlServerJobQueueMonitoringApi.cs", label=Redis, span="395-395"];
m8_242 [cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var queue = JobHelper.TryToGetQueue(jobType)", span="398-398"];
m8_247 [cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return stateMachine.ChangeState(jobId, state, ScheduledState.Name);", span="408-408"];
m8_243 [cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="SqlServerJobQueueMonitoringApi.cs", label="String.IsNullOrEmpty(queue)", span="400-400"];
m8_246 [cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var state = new EnqueuedState(''The job has been enqueued by a user.'', queue)", span="406-406"];
m8_244 [cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return false;", span="402-402"];
m8_245 [cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var stateMachine = new StateMachine(Redis)", span="405-405"];
m8_248 [cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.EnqueueScheduled(string)", span="393-393"];
m8_174 [cluster="HangFire.Web.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="4-4"];
m8_322 [cluster="System.DateTime.AddDays(double)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m8_365 [cluster="Unk.TrueForAll", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.TrueForAll", span=""];
m8_323 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="481-481"];
m8_32 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="66-76"];
m8_40 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="76-76"];
m8_33 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="new ProcessingJobDto\r\n                    {\r\n                        ServerName = state[1],\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        Type = job[0],\r\n                        Queue = JobHelper.TryToGetQueue(job[0]),\r\n                        StartedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InProcessingState = ProcessingState.Name.Equals(\r\n                            state[2], StringComparison.OrdinalIgnoreCase),\r\n                        State = state[2]\r\n                    }", prediction=116, span="66-76"];
m8_34 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="66-76"];
m8_41 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="x.Value.StartedAt", prediction=117, span="76-76"];
m8_42 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="76-76"];
m8_80 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="120-120"];
m8_83 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="121-129"];
m8_78 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="states.Add(job.Key, x)", span="113-113"];
m8_84 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="new ScheduleDto\r\n                    {\r\n                        ScheduledAt = JobHelper.FromTimestamp((long) job.Value),\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(jobs[job.Key][1]),\r\n                        Queue = JobHelper.TryToGetQueue(jobs[job.Key][0]),\r\n                        Type = jobs[job.Key][0],\r\n                        InScheduledState =\r\n                            ScheduledState.Name.Equals(states[job.Key], StringComparison.OrdinalIgnoreCase)\r\n                    }", prediction=118, span="121-129"];
m8_64 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="104-106"];
m8_69 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="107-107"];
m8_85 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="121-129"];
m8_65 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}'', job.Key),\r\n                                new[] { ''Type'', ''Args'' })", span="104-106"];
m8_70 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="jobs.Add(job.Key, x)", span="107-107"];
m8_74 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.GetValueFromHash(\r\n                                String.Format(''hangfire:job:{0}:state'', job.Key),\r\n                                ''State'')", span="110-112"];
m8_81 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="job.Key", prediction=119, span="120-120"];
m8_82 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="120-120"];
m8_344 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.GetValuesFromHash(String.Format(''hangfire:job:{0}'', id), properties)", span="519-519"];
m8_352 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.GetValuesFromHash(String.Format(''hangfire:job:{0}:state'', id), stateProperties)", span="525-525"];
m8_183 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.GetListCount(String.Format(''hangfire:queue:{0}'', queue))", span="269-269"];
m8_189 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue))", span="273-273"];
m8_432 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.GetListCount(String.Format(''hangfire:queue:{0}'', queueName))", span="592-592"];
m8_73 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="110-112"];
m8_77 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="113-113"];
m8_406 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.GetSortedSetCount(''hangfire:schedule'')", span="573-573"];
m8_412 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.GetSortedSetCount(''hangfire:processing'')", span="577-577"];
m8_426 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.GetSortedSetCount(''hangfire:failed'')", span="585-585"];
m8_142 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="new FailedJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Queue = JobHelper.TryToGetQueue(job[0]),\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        FailedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        ExceptionType = state[1],\r\n                        ExceptionMessage = state[2],\r\n                        ExceptionDetails = state[3],\r\n                        InFailedState = FailedState.Name.Equals(state[4], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="209-219"];
m8_152 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="new SucceededJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Queue = JobHelper.TryToGetQueue(job[0]),\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        SucceededAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InSucceededState = SucceededState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="237-244"];
m8_195 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="new EnqueuedJobDto\r\n                        {\r\n                            Type = job[0],\r\n                            Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                            EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                            InEnqueuedState = EnqueuedState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                        }", span="284-290"];
m8_204 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="new EnqueuedJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InEnqueuedState = EnqueuedState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="320-326"];
m8_212 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="new DequeuedJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        State = job[2],\r\n                        CreatedAt = JobHelper.FromNullableStringTimestamp(job[3]),\r\n                        FetchedAt = JobHelper.FromNullableStringTimestamp(job[4]),\r\n                        CheckedAt = JobHelper.FromNullableStringTimestamp(job[5])\r\n                    }", span="344-352"];
m8_130 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="new ServerDto\r\n                {\r\n                    Name = x,\r\n                    WorkersCount = int.Parse(servers[x][0]),\r\n                    Queues = queues[x],\r\n                    StartedAt = JobHelper.FromStringTimestamp(servers[x][1]),\r\n                    Heartbeat = JobHelper.FromNullableStringTimestamp(servers[x][2])\r\n                }", span="184-191"];
m8_79 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="113-113"];
m8_66 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="104-106"];
m8_71 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="107-107"];
m8_75 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="110-112"];
m8_343 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="519-519"];
m8_345 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="519-519"];
m8_351 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="525-525"];
m8_353 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="525-525"];
m8_182 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="269-269"];
m8_184 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="269-269"];
m8_188 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="273-273"];
m8_190 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="273-273"];
m8_431 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="592-592"];
m8_433 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="592-592"];
m8_405 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="573-573"];
m8_407 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="573-573"];
m8_411 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="577-577"];
m8_413 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="577-577"];
m8_425 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="585-585"];
m8_427 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="585-585"];
m8_141 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="209-219"];
m8_151 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="237-244"];
m8_203 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="320-326"];
m8_211 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="344-352"];
m8_143 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="209-219"];
m8_153 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="237-244"];
m8_194 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="284-290"];
m8_196 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="284-290"];
m8_205 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="320-326"];
m8_213 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="344-352"];
m8_129 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="184-191"];
m8_131 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="184-191"];
m8_264 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="433-433"];
m8_268 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="433-433"];
m8_271 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="433-433"];
m8_120 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="servers.Add(name, x)", span="173-173"];
m8_127 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="queues.Add(name, x)", span="178-178"];
m8_348 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="jobs.Add(id, x)", span="520-520"];
m8_356 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="states.Add(id, x)", span="526-526"];
m8_116 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="170-172"];
m8_119 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="173-173"];
m8_122 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="176-177"];
m8_126 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="178-178"];
m8_176 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="264-265"];
m8_179 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="266-266"];
m8_185 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="270-270"];
m8_191 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="274-274"];
m8_346 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="520-520"];
m8_354 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="526-526"];
m8_392 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="565-565"];
m8_396 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="566-566"];
m8_399 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="569-569"];
m8_402 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="570-570"];
m8_408 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="574-574"];
m8_414 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="578-578"];
m8_417 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="581-581"];
m8_421 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="582-582"];
m8_428 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="586-586"];
m8_434 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="593-593"];
m8_117 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.GetValuesFromHash(\r\n                                String.Format(''hangfire:server:{0}'', name),\r\n                                ''WorkerCount'', ''StartedAt'', ''Heartbeat'')", span="170-172"];
m8_123 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.GetAllItemsFromList(\r\n                                String.Format(''hangfire:server:{0}:queues'', name))", span="176-177"];
m8_177 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.GetRangeFromList(\r\n                                String.Format(''hangfire:queue:{0}'', queue), -5, -1)", span="264-265"];
m8_327 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="String.Format(''hangfire:stats:{0}:{1}'', type, x)", span="482-482"];
m8_265 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="!hiddenProperties.Contains(x.Key)", span="433-433"];
m8_347 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="!jobs.ContainsKey(id)", span="520-520"];
m8_355 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="!states.ContainsKey(id)", span="526-526"];
m8_362 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="new KeyValuePair<string, T>(\r\n                    x.JobId,\r\n                    x.Job.TrueForAll(y => y == null) ? default(T) : selector(x.Job, x.State))", span="540-542"];
m8_266 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="433-433"];
m8_270 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="433-433"];
m8_269 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.Key", span="433-433"];
m8_273 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="433-433"];
m8_272 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.Value", span="433-433"];
m8_121 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="173-173"];
m8_128 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="178-178"];
m8_349 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="520-520"];
m8_357 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="526-526"];
m8_118 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="170-172"];
m8_124 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="176-177"];
m8_178 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="264-265"];
m8_181 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="266-266"];
m8_180 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="firstJobIds = x", span="266-266"];
m8_187 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="270-270"];
m8_186 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="length = x", span="270-270"];
m8_193 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="274-274"];
m8_192 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="dequeued = x", span="274-274"];
m8_359 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="new\r\n                {\r\n                    JobId = x,\r\n                    Job = jobs[x],\r\n                    State = states.ContainsKey(x) ? states[x] : null\r\n                }", span="534-539"];
m8_397 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="stats.Servers = x", span="566-566"];
m8_403 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="stats.Queues = x", span="570-570"];
m8_409 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="stats.Scheduled = x", span="574-574"];
m8_415 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="stats.Processing = x", span="578-578"];
m8_422 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="stats.Succeeded = long.Parse(x ?? ''0'')", span="582-582"];
m8_429 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="stats.Failed = x", span="586-586"];
m8_435 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="stats.Enqueued += x", span="593-593"];
m8_394 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="565-565"];
m8_393 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.GetSetCount(''hangfire:servers'')", span="565-565"];
m8_398 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="566-566"];
m8_401 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="569-569"];
m8_400 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.GetSetCount(''hangfire:queues'')", span="569-569"];
m8_404 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="570-570"];
m8_410 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="574-574"];
m8_416 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="578-578"];
m8_419 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="581-581"];
m8_418 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.GetValue(''hangfire:stats:succeeded'')", span="581-581"];
m8_423 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="582-582"];
m8_430 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="586-586"];
m8_436 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="593-593"];
m8_326 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="482-482"];
m8_328 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="482-482"];
m8_358 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="534-539"];
m8_361 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="540-542"];
m8_363 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="540-542"];
m8_367 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="542-542"];
m8_299 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="String.Format(''hangfire:stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))", span="450-450"];
m8_298 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="450-450"];
m8_360 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="534-539"];
m8_369 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="542-542"];
m8_368 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="y == null", span="542-542"];
m8_300 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="450-450"];
m8_324 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.ToString(''yyyy-MM-dd'')", span="481-481"];
m8_325 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="481-481"];
m8_28 [cluster="Unk.GetRangeFromSortedSet", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.GetRangeFromSortedSet", span=""];
m8_175 [cluster="System.Collections.Generic.List<T>.Add(T)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m8_115 [cluster="Unk.ToList", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.ToList", span=""];
m8_67 [cluster="Unk.Format", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.Format", span=""];
m8_220 [cluster="HangFire.Web.JobStorage.HourlyFailedJobs()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.HourlyFailedJobs()", span="364-364"];
m8_222 [cluster="HangFire.Web.JobStorage.HourlyFailedJobs()", file="SqlServerJobQueueMonitoringApi.cs", label="return GetHourlyTimelineStats(Redis, ''failed'');", span="368-368"];
m8_221 [cluster="HangFire.Web.JobStorage.HourlyFailedJobs()", file="SqlServerJobQueueMonitoringApi.cs", label=Redis, span="366-366"];
m8_223 [cluster="HangFire.Web.JobStorage.HourlyFailedJobs()", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.HourlyFailedJobs()", span="364-364"];
m8_35 [cluster="HangFire.Web.ProcessingJobDto.ProcessingJobDto()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.ProcessingJobDto.ProcessingJobDto()", span="5-5"];
m8_61 [cluster="Unk.QueueCommand", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.QueueCommand", span=""];
m8_135 [cluster="HangFire.Web.JobStorage.FailedJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.FailedJobs(int, int)", span="195-195"];
m8_138 [cluster="HangFire.Web.JobStorage.FailedJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="return GetJobsWithProperties(\r\n                    Redis,\r\n                    failedJobIds,\r\n                    new[] { ''Type'', ''Args'' },\r\n                    new[] { ''FailedAt'', ''ExceptionType'', ''ExceptionMessage'', ''ExceptionDetails'', ''State'' },\r\n                    (job, state) => new FailedJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Queue = JobHelper.TryToGetQueue(job[0]),\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        FailedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        ExceptionType = state[1],\r\n                        ExceptionMessage = state[2],\r\n                        ExceptionDetails = state[3],\r\n                        InFailedState = FailedState.Name.Equals(state[4], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="204-219"];
m8_137 [cluster="HangFire.Web.JobStorage.FailedJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="var failedJobIds = Redis.GetRangeFromSortedSetDesc(\r\n                    ''hangfire:failed'',\r\n                    from,\r\n                    from + count - 1)", span="199-202"];
m8_136 [cluster="HangFire.Web.JobStorage.FailedJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label=Redis, span="197-197"];
m8_139 [cluster="HangFire.Web.JobStorage.FailedJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.FailedJobs(int, int)", span="195-195"];
m8_0 [cluster="HangFire.Web.JobStorage.ScheduledCount()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.ScheduledCount()", span="12-12"];
m8_2 [cluster="HangFire.Web.JobStorage.ScheduledCount()", file="SqlServerJobQueueMonitoringApi.cs", label="return Redis.GetSortedSetCount(''hangfire:schedule'');", span="16-16"];
m8_1 [cluster="HangFire.Web.JobStorage.ScheduledCount()", file="SqlServerJobQueueMonitoringApi.cs", label=Redis, span="14-14"];
m8_3 [cluster="HangFire.Web.JobStorage.ScheduledCount()", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.ScheduledCount()", span="12-12"];
m8_37 [cluster="HangFire.JobHelper.TryToGetQueue(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.JobHelper.TryToGetQueue(string)", span="11-11"];
m8_144 [cluster="HangFire.Web.FailedJobDto.FailedJobDto()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.FailedJobDto.FailedJobDto()", span="5-5"];
m8_87 [cluster="HangFire.JobHelper.FromTimestamp(long)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.JobHelper.FromTimestamp(long)", span="57-57"];
m8_301 [cluster="System.DateTime.ToString(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.DateTime.ToString(string)", span="0-0"];
m8_145 [cluster="HangFire.Web.JobStorage.SucceededJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.SucceededJobs(int, int)", span="223-223"];
m8_148 [cluster="HangFire.Web.JobStorage.SucceededJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="return GetJobsWithProperties(\r\n                    Redis,\r\n                    succeededJobIds,\r\n                    new[] { ''Type'', ''Args'' },\r\n                    new[] { ''SucceededAt'', ''State'' },\r\n                    (job, state) => new SucceededJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Queue = JobHelper.TryToGetQueue(job[0]),\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        SucceededAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InSucceededState = SucceededState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="232-244"];
m8_147 [cluster="HangFire.Web.JobStorage.SucceededJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="var succeededJobIds = Redis.GetRangeFromList(\r\n                    ''hangfire:succeeded'',\r\n                    from,\r\n                    from + count - 1)", span="227-230"];
m8_146 [cluster="HangFire.Web.JobStorage.SucceededJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label=Redis, span="225-225"];
m8_149 [cluster="HangFire.Web.JobStorage.SucceededJobs(int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.SucceededJobs(int, int)", span="223-223"];
m8_172 [cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="SqlServerJobQueueMonitoringApi.cs", label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span=""];
m8_295 [cluster="Unk.ElementAt", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.ElementAt", span=""];
m8_150 [cluster="Unk.GetRangeFromList", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.GetRangeFromList", span=""];
m8_155 [cluster="HangFire.Web.JobStorage.Queues()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.Queues()", span="248-248"];
m8_164 [cluster="HangFire.Web.JobStorage.Queues()", file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetRangeFromList(\r\n                                String.Format(''hangfire:queue:{0}'', queue), -5, -1),\r\n                            x => firstJobIds = x)", span="263-266"];
m8_165 [cluster="HangFire.Web.JobStorage.Queues()", file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queue)),\r\n                            x => length = x)", span="268-270"];
m8_166 [cluster="HangFire.Web.JobStorage.Queues()", file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue)),\r\n                            x => dequeued = x)", span="272-274"];
m8_163 [cluster="HangFire.Web.JobStorage.Queues()", file="SqlServerJobQueueMonitoringApi.cs", label="var pipeline = Redis.CreatePipeline()", span="261-261"];
m8_159 [cluster="HangFire.Web.JobStorage.Queues()", file="SqlServerJobQueueMonitoringApi.cs", label=queues, span="255-255"];
m8_167 [cluster="HangFire.Web.JobStorage.Queues()", file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.Flush()", span="276-276"];
m8_168 [cluster="HangFire.Web.JobStorage.Queues()", file="SqlServerJobQueueMonitoringApi.cs", label="var jobs = GetJobsWithProperties(\r\n                        Redis,\r\n                        firstJobIds,\r\n                        new[] { ''Type'', ''Args'' },\r\n                        new[] { ''EnqueuedAt'', ''State'' },\r\n                        (job, state) => new EnqueuedJobDto\r\n                        {\r\n                            Type = job[0],\r\n                            Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                            EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                            InEnqueuedState = EnqueuedState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                        })", span="279-290"];
m8_169 [cluster="HangFire.Web.JobStorage.Queues()", file="SqlServerJobQueueMonitoringApi.cs", label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = queue,\r\n                        FirstJobs = jobs,\r\n                        Length = length,\r\n                        Dequeued = dequeued\r\n                    })", span="292-298"];
m8_162 [cluster="HangFire.Web.JobStorage.Queues()", file="SqlServerJobQueueMonitoringApi.cs", label="long dequeued = 0", span="259-259"];
m8_157 [cluster="HangFire.Web.JobStorage.Queues()", file="SqlServerJobQueueMonitoringApi.cs", label="var queues = Redis.GetAllItemsFromSet(''hangfire:queues'')", span="252-252"];
m8_158 [cluster="HangFire.Web.JobStorage.Queues()", file="SqlServerJobQueueMonitoringApi.cs", label="var result = new List<QueueWithTopEnqueuedJobsDto>(queues.Count)", span="253-253"];
m8_160 [cluster="HangFire.Web.JobStorage.Queues()", file="SqlServerJobQueueMonitoringApi.cs", label="IList<string> firstJobIds = null", span="257-257"];
m8_170 [cluster="HangFire.Web.JobStorage.Queues()", file="SqlServerJobQueueMonitoringApi.cs", label="return result;", span="301-301"];
m8_161 [cluster="HangFire.Web.JobStorage.Queues()", file="SqlServerJobQueueMonitoringApi.cs", label="long length = 0", span="258-258"];
m8_156 [cluster="HangFire.Web.JobStorage.Queues()", file="SqlServerJobQueueMonitoringApi.cs", label=Redis, span="250-250"];
m8_171 [cluster="HangFire.Web.JobStorage.Queues()", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.Queues()", span="248-248"];
m8_88 [cluster="HangFire.Web.JobStorage.SucceededByDatesCount()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.SucceededByDatesCount()", span="133-133"];
m8_90 [cluster="HangFire.Web.JobStorage.SucceededByDatesCount()", file="SqlServerJobQueueMonitoringApi.cs", label="return GetTimelineStats(Redis, ''succeeded'');", span="137-137"];
m8_89 [cluster="HangFire.Web.JobStorage.SucceededByDatesCount()", file="SqlServerJobQueueMonitoringApi.cs", label=Redis, span="135-135"];
m8_91 [cluster="HangFire.Web.JobStorage.SucceededByDatesCount()", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.SucceededByDatesCount()", span="133-133"];
m8_62 [cluster="Unk.Flush", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.Flush", span=""];
m8_154 [cluster="HangFire.Web.SucceededJobDto.SucceededJobDto()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.SucceededJobDto.SucceededJobDto()", span="5-5"];
m8_424 [cluster="Unk.Parse", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.Parse", span=""];
m8_72 [cluster="Unk.Add", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.Add", span=""];
m8_97 [cluster="HangFire.Web.JobStorage.Servers()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.Servers()", span="149-149"];
m8_102 [cluster="HangFire.Web.JobStorage.Servers()", file="SqlServerJobQueueMonitoringApi.cs", label="var servers = new Dictionary<string, List<string>>()", span="160-160"];
m8_103 [cluster="HangFire.Web.JobStorage.Servers()", file="SqlServerJobQueueMonitoringApi.cs", label="var queues = new Dictionary<string, List<string>>()", span="161-161"];
m8_107 [cluster="HangFire.Web.JobStorage.Servers()", file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:server:{0}'', name),\r\n                                ''WorkerCount'', ''StartedAt'', ''Heartbeat''),\r\n                            x => servers.Add(name, x))", span="169-173"];
m8_108 [cluster="HangFire.Web.JobStorage.Servers()", file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetAllItemsFromList(\r\n                                String.Format(''hangfire:server:{0}:queues'', name)),\r\n                            x => queues.Add(name, x))", span="175-178"];
m8_104 [cluster="HangFire.Web.JobStorage.Servers()", file="SqlServerJobQueueMonitoringApi.cs", label="var pipeline = Redis.CreatePipeline()", span="163-163"];
m8_109 [cluster="HangFire.Web.JobStorage.Servers()", file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.Flush()", span="181-181"];
m8_100 [cluster="HangFire.Web.JobStorage.Servers()", file="SqlServerJobQueueMonitoringApi.cs", label="serverNames.Count == 0", span="155-155"];
m8_110 [cluster="HangFire.Web.JobStorage.Servers()", file="SqlServerJobQueueMonitoringApi.cs", label="return serverNames.Select(x => new ServerDto\r\n                {\r\n                    Name = x,\r\n                    WorkersCount = int.Parse(servers[x][0]),\r\n                    Queues = queues[x],\r\n                    StartedAt = JobHelper.FromStringTimestamp(servers[x][1]),\r\n                    Heartbeat = JobHelper.FromNullableStringTimestamp(servers[x][2])\r\n                }).ToList();", span="184-191"];
m8_106 [cluster="HangFire.Web.JobStorage.Servers()", file="SqlServerJobQueueMonitoringApi.cs", label="var name = serverName", span="167-167"];
m8_105 [cluster="HangFire.Web.JobStorage.Servers()", file="SqlServerJobQueueMonitoringApi.cs", label=serverNames, span="165-165"];
m8_99 [cluster="HangFire.Web.JobStorage.Servers()", file="SqlServerJobQueueMonitoringApi.cs", label="var serverNames = Redis.GetAllItemsFromSet(''hangfire:servers'')", span="153-153"];
m8_101 [cluster="HangFire.Web.JobStorage.Servers()", file="SqlServerJobQueueMonitoringApi.cs", label="return new List<ServerDto>();", span="157-157"];
m8_98 [cluster="HangFire.Web.JobStorage.Servers()", file="SqlServerJobQueueMonitoringApi.cs", label=Redis, span="151-151"];
m8_111 [cluster="HangFire.Web.JobStorage.Servers()", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.Servers()", span="149-149"];
m8_374 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.GetStatistics()", span="554-554"];
m8_379 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:servers''),\r\n                        x => stats.Servers = x)", span="564-566"];
m8_380 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:queues''),\r\n                        x => stats.Queues = x)", span="568-570"];
m8_381 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:schedule''),\r\n                        x => stats.Scheduled = x)", span="572-574"];
m8_382 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:processing''),\r\n                        x => stats.Processing = x)", span="576-578"];
m8_383 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetValue(''hangfire:stats:succeeded''),\r\n                        x => stats.Succeeded = long.Parse(x ?? ''0''))", span="580-582"];
m8_384 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:failed''),\r\n                        x => stats.Failed = x)", span="584-586"];
m8_387 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queueName)),\r\n                            x => stats.Enqueued += x)", span="591-593"];
m8_378 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="SqlServerJobQueueMonitoringApi.cs", label="var pipeline = Redis.CreatePipeline()", span="562-562"];
m8_386 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="SqlServerJobQueueMonitoringApi.cs", label="var queueName = queue", span="590-590"];
m8_388 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="SqlServerJobQueueMonitoringApi.cs", label="pipeline.Flush()", span="596-596"];
m8_376 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="SqlServerJobQueueMonitoringApi.cs", label="var stats = new StatisticsDto()", span="558-558"];
m8_385 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="SqlServerJobQueueMonitoringApi.cs", label=queues, span="588-588"];
m8_377 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="SqlServerJobQueueMonitoringApi.cs", label="var queues = Redis.GetAllItemsFromSet(''hangfire:queues'')", span="560-560"];
m8_389 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="SqlServerJobQueueMonitoringApi.cs", label="return stats;", span="599-599"];
m8_375 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="SqlServerJobQueueMonitoringApi.cs", label=Redis, span="556-556"];
m8_390 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.GetStatistics()", span="554-554"];
m8_370 [cluster="HangFire.Web.JobStorage.SucceededListCount()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.SucceededListCount()", span="546-546"];
m8_372 [cluster="HangFire.Web.JobStorage.SucceededListCount()", file="SqlServerJobQueueMonitoringApi.cs", label="return Redis.GetListCount(''hangfire:succeeded'');", span="550-550"];
m8_371 [cluster="HangFire.Web.JobStorage.SucceededListCount()", file="SqlServerJobQueueMonitoringApi.cs", label=Redis, span="548-548"];
m8_373 [cluster="HangFire.Web.JobStorage.SucceededListCount()", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.SucceededListCount()", span="546-546"];
m8_215 [cluster="HangFire.Web.JobStorage.HourlySucceededJobs()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.HourlySucceededJobs()", span="356-356"];
m8_217 [cluster="HangFire.Web.JobStorage.HourlySucceededJobs()", file="SqlServerJobQueueMonitoringApi.cs", label="return GetHourlyTimelineStats(Redis, ''succeeded'');", span="360-360"];
m8_216 [cluster="HangFire.Web.JobStorage.HourlySucceededJobs()", file="SqlServerJobQueueMonitoringApi.cs", label=Redis, span="358-358"];
m8_218 [cluster="HangFire.Web.JobStorage.HourlySucceededJobs()", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.HourlySucceededJobs()", span="356-356"];
m8_39 [cluster="string.Equals(string, System.StringComparison)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m8_293 [cluster="System.DateTime.AddHours(double)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m8_92 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", span="468-468"];
m8_312 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="var result = new Dictionary<DateTime, long>()", span="486-486"];
m8_311 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="var valuesMap = redis.GetValuesMap(keys)", span="484-484"];
m8_313 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="var i = 0", span="487-487"];
m8_318 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="result.Add(dates[i], value)", span="494-494"];
m8_320 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="return result;", span="497-497"];
m8_310 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="var keys = stringDates.Select(x => String.Format(''hangfire:stats:{0}:{1}'', type, x)).ToList()", span="482-482"];
m8_316 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="!long.TryParse(valuesMap[valuesMap.Keys.ElementAt(i)], out value)", span="490-490"];
m8_314 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="i < stringDates.Count", span="487-487"];
m8_319 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="i++", span="487-487"];
m8_305 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="var dates = new List<DateTime>()", span="473-473"];
m8_317 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="value = 0", span="492-492"];
m8_309 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="var stringDates = dates.Select(x => x.ToString(''yyyy-MM-dd'')).ToList()", span="481-481"];
m8_303 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="var endDate = DateTime.UtcNow.Date", span="471-471"];
m8_315 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="long value", span="489-489"];
m8_304 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="var startDate = endDate.AddDays(-7)", span="472-472"];
m8_306 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="startDate <= endDate", span="475-475"];
m8_307 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="dates.Add(endDate)", span="477-477"];
m8_308 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="endDate = endDate.AddDays(-1)", span="478-478"];
m8_321 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", span="468-468"];
m8_4 [cluster="Unk.GetSortedSetCount", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.GetSortedSetCount", span=""];
m8_15 [cluster="HangFire.Web.JobStorage.FailedCount()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.FailedCount()", span="36-36"];
m8_16 [cluster="HangFire.Web.JobStorage.FailedCount()", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label=Redis, prediction=120, span="38-38"];
m8_17 [cluster="HangFire.Web.JobStorage.FailedCount()", file="SqlServerJobQueueMonitoringApi.cs", label="return Redis.GetSortedSetCount(''hangfire:failed'');", span="40-40"];
m8_18 [cluster="HangFire.Web.JobStorage.FailedCount()", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.FailedCount()", span="36-36"];
m8_260 [cluster="HangFire.Web.JobDetailsDto.JobDetailsDto()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobDetailsDto.JobDetailsDto()", span="4-4"];
m8_249 [cluster="HangFire.Web.JobStorage.JobDetails(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.JobDetails(string)", span="412-412"];
m8_251 [cluster="HangFire.Web.JobStorage.JobDetails(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var job = Redis.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', jobId))", span="416-416"];
m8_255 [cluster="HangFire.Web.JobStorage.JobDetails(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var historyList = Redis.GetAllItemsFromList(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId))", span="421-422"];
m8_257 [cluster="HangFire.Web.JobStorage.JobDetails(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return new JobDetailsDto\r\n                {\r\n                    Type = job[''Type''],\r\n                    Arguments = JobHelper.FromJson<Dictionary<string, string>>(job[''Args'']),\r\n                    State = job.ContainsKey(''State'') ? job[''State''] : null,\r\n                    Properties = job.Where(x => !hiddenProperties.Contains(x.Key)).ToDictionary(x => x.Key, x => x.Value),\r\n                    History = history\r\n                };", span="428-435"];
m8_250 [cluster="HangFire.Web.JobStorage.JobDetails(string)", file="SqlServerJobQueueMonitoringApi.cs", label=Redis, span="414-414"];
m8_252 [cluster="HangFire.Web.JobStorage.JobDetails(string)", file="SqlServerJobQueueMonitoringApi.cs", label="job.Count == 0", span="417-417"];
m8_254 [cluster="HangFire.Web.JobStorage.JobDetails(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var hiddenProperties = new[] { ''Type'', ''Args'', ''State'' }", span="419-419"];
m8_256 [cluster="HangFire.Web.JobStorage.JobDetails(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var history = historyList\r\n                    .Select(JobHelper.FromJson<Dictionary<string, string>>)\r\n                    .ToList()", span="424-426"];
m8_253 [cluster="HangFire.Web.JobStorage.JobDetails(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return null;", span="417-417"];
m8_258 [cluster="HangFire.Web.JobStorage.JobDetails(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.JobDetails(string)", span="412-412"];
m8_297 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m8_5 [cluster="HangFire.Web.JobStorage.EnqueuedCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.EnqueuedCount(string)", span="20-20"];
m8_6 [cluster="HangFire.Web.JobStorage.EnqueuedCount(string)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label=Redis, prediction=121, span="22-22"];
m8_7 [cluster="HangFire.Web.JobStorage.EnqueuedCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return Redis.GetListCount(String.Format(''hangfire:queue:{0}'', queue));", span="24-24"];
m8_8 [cluster="HangFire.Web.JobStorage.EnqueuedCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.EnqueuedCount(string)", span="20-20"];
m8_302 [cluster="string.Format(string, object, object)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m8_259 [cluster="Unk.GetAllEntriesFromHash", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m8_63 [cluster="Unk.ToDictionary", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.ToDictionary", span=""];
m8_342 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int)", span="0-0"];
m8_395 [cluster="Unk.GetSetCount", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.GetSetCount", span=""];
m8_206 [cluster="HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", span="330-330"];
m8_208 [cluster="HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="var jobIds = Redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}:dequeued'', queue),\r\n                    from, from + perPage - 1)", span="335-337"];
m8_209 [cluster="HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="return GetJobsWithProperties(\r\n                    Redis,\r\n                    jobIds,\r\n                    new[] { ''Type'', ''Args'', ''State'', ''CreatedAt'', ''Fetched'', ''Checked'' },\r\n                    null,\r\n                    (job, state) => new DequeuedJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        State = job[2],\r\n                        CreatedAt = JobHelper.FromNullableStringTimestamp(job[3]),\r\n                        FetchedAt = JobHelper.FromNullableStringTimestamp(job[4]),\r\n                        CheckedAt = JobHelper.FromNullableStringTimestamp(job[5])\r\n                    });", span="339-352"];
m8_207 [cluster="HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label=Redis, span="333-333"];
m8_210 [cluster="HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", span="330-330"];
m8_9 [cluster="string.Format(string, object)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry string.Format(string, object)", span="0-0"];
m8_93 [cluster="HangFire.Web.JobStorage.FailedByDatesCount()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.FailedByDatesCount()", span="141-141"];
m8_95 [cluster="HangFire.Web.JobStorage.FailedByDatesCount()", file="SqlServerJobQueueMonitoringApi.cs", label="return GetTimelineStats(Redis, ''failed'');", span="145-145"];
m8_94 [cluster="HangFire.Web.JobStorage.FailedByDatesCount()", file="SqlServerJobQueueMonitoringApi.cs", label=Redis, span="143-143"];
m8_96 [cluster="HangFire.Web.JobStorage.FailedByDatesCount()", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.FailedByDatesCount()", span="141-141"];
m8_261 [cluster="Unk.>", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.>", span=""];
m8_10 [cluster="Unk.GetListCount", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.GetListCount", span=""];
m8_86 [cluster="HangFire.Web.ScheduleDto.ScheduleDto()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.ScheduleDto.ScheduleDto()", span="5-5"];
m8_59 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m8_235 [cluster="string.IsNullOrEmpty(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m8_294 [cluster="Unk.GetValuesMap", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.GetValuesMap", span=""];
m8_19 [cluster="HangFire.Web.JobStorage.ProcessingCount()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.ProcessingCount()", span="44-44"];
m8_20 [cluster="HangFire.Web.JobStorage.ProcessingCount()", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label=Redis, prediction=122, span="46-46"];
m8_21 [cluster="HangFire.Web.JobStorage.ProcessingCount()", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="return Redis.GetSortedSetCount(''hangfire:processing'');", prediction=123, span="48-48"];
m8_22 [cluster="HangFire.Web.JobStorage.ProcessingCount()", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.ProcessingCount()", span="44-44"];
m8_125 [cluster="Unk.GetAllItemsFromList", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.GetAllItemsFromList", span=""];
m8_267 [cluster="Unk.Contains", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.Contains", span=""];
m8_114 [cluster="Unk.Select", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.Select", span=""];
m8_112 [cluster="Unk.GetAllItemsFromSet", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.GetAllItemsFromSet", span=""];
m8_140 [cluster="Unk.GetRangeFromSortedSetDesc", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.GetRangeFromSortedSetDesc", span=""];
m8_420 [cluster="Unk.GetValue", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.GetValue", span=""];
m8_68 [cluster="Unk.GetValuesFromHash", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.GetValuesFromHash", span=""];
m8_224 [cluster="HangFire.Web.JobStorage.RetryJob(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.RetryJob(string)", span="372-372"];
m8_226 [cluster="HangFire.Web.JobStorage.RetryJob(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var jobType = Redis.GetValueFromHash(String.Format(''hangfire:job:{0}'', jobId), ''Type'')", span="376-376"];
m8_225 [cluster="HangFire.Web.JobStorage.RetryJob(string)", file="SqlServerJobQueueMonitoringApi.cs", label=Redis, span="374-374"];
m8_227 [cluster="HangFire.Web.JobStorage.RetryJob(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var queue = JobHelper.TryToGetQueue(jobType)", span="378-378"];
m8_232 [cluster="HangFire.Web.JobStorage.RetryJob(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return stateMachine.ChangeState(jobId, state, FailedState.Name);", span="389-389"];
m8_228 [cluster="HangFire.Web.JobStorage.RetryJob(string)", file="SqlServerJobQueueMonitoringApi.cs", label="String.IsNullOrEmpty(queue)", span="379-379"];
m8_231 [cluster="HangFire.Web.JobStorage.RetryJob(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var state = new EnqueuedState(''The job has been retried by a user.'', queue)", span="387-387"];
m8_229 [cluster="HangFire.Web.JobStorage.RetryJob(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return false;", span="381-381"];
m8_230 [cluster="HangFire.Web.JobStorage.RetryJob(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var stateMachine = new StateMachine(Redis)", span="386-386"];
m8_233 [cluster="HangFire.Web.JobStorage.RetryJob(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.RetryJob(string)", span="372-372"];
m8_198 [cluster="HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", span="305-305"];
m8_200 [cluster="HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="var jobIds = Redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}'', queue),\r\n                    from,\r\n                    from + perPage - 1)", span="310-313"];
m8_201 [cluster="HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="return GetJobsWithProperties(\r\n                    Redis,\r\n                    jobIds,\r\n                    new[] { ''Type'', ''Args'' },\r\n                    new[] { ''EnqueuedAt'', ''State'' },\r\n                    (job, state) => new EnqueuedJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InEnqueuedState = EnqueuedState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="315-326"];
m8_199 [cluster="HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label=Redis, span="308-308"];
m8_202 [cluster="HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", span="305-305"];
m8_438 [file="SqlServerJobQueueMonitoringApi.cs", label=jobs, span=""];
m8_439 [file="SqlServerJobQueueMonitoringApi.cs", label=states, span=""];
m8_437 [file="SqlServerJobQueueMonitoringApi.cs", label=job, span=""];
m8_447 [file="SqlServerJobQueueMonitoringApi.cs", label="string[]", span=""];
m8_448 [file="SqlServerJobQueueMonitoringApi.cs", label=id, span=""];
m8_450 [file="SqlServerJobQueueMonitoringApi.cs", label="string[]", span=""];
m8_443 [file="SqlServerJobQueueMonitoringApi.cs", label=queue, span=""];
m8_454 [file="SqlServerJobQueueMonitoringApi.cs", label=queueName, span=""];
m8_441 [file="SqlServerJobQueueMonitoringApi.cs", label=servers, span=""];
m8_442 [file="SqlServerJobQueueMonitoringApi.cs", label=queues, span=""];
m8_440 [file="SqlServerJobQueueMonitoringApi.cs", label=name, span=""];
m8_449 [file="SqlServerJobQueueMonitoringApi.cs", label=jobs, span=""];
m8_451 [file="SqlServerJobQueueMonitoringApi.cs", label=states, span=""];
m8_446 [file="SqlServerJobQueueMonitoringApi.cs", label=string, span=""];
m8_444 [file="SqlServerJobQueueMonitoringApi.cs", label=hiddenProperties, span=""];
m8_452 [file="SqlServerJobQueueMonitoringApi.cs", label="System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>", span=""];
m8_453 [file="SqlServerJobQueueMonitoringApi.cs", label=stats, span=""];
m8_445 [file="SqlServerJobQueueMonitoringApi.cs", label=string, span=""];
m9_10 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", file="SqlServerJobQueueProvider.cs", label="Exit HangFire.Web.FontsHandler.FontsHandler(string)", span="22-22"];
m9_12 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", file="SqlServerJobQueueProvider.cs", label="HangFire.Web.FontsHandler", span=""];
m9_5 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", color=green, community=0, file="SqlServerJobQueueProvider.cs", label="ContentType = ''image/svg+xml''", prediction=124, span="33-33"];
m9_9 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", color=green, community=0, file="SqlServerJobQueueProvider.cs", label="ContentType = ''application/font-woff''", prediction=125, span="41-41"];
m9_6 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", file="SqlServerJobQueueProvider.cs", label="fontName.EndsWith(''.ttf'', StringComparison.OrdinalIgnoreCase)", span="35-35"];
m9_8 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", file="SqlServerJobQueueProvider.cs", label="fontName.EndsWith(''.woff'', StringComparison.OrdinalIgnoreCase)", span="39-39"];
m9_0 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", file="SqlServerJobQueueProvider.cs", label="Entry HangFire.Web.FontsHandler.FontsHandler(string)", span="22-22"];
m9_1 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", color=green, community=0, file="SqlServerJobQueueProvider.cs", label="CacheResponse = true", prediction=126, span="25-25"];
m9_3 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", color=green, community=0, file="SqlServerJobQueueProvider.cs", label="ContentType = ''application/vnd.ms-fontobject''", prediction=127, span="29-29"];
m9_2 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", color=green, community=0, file="SqlServerJobQueueProvider.cs", label="fontName.EndsWith(''.eot'', StringComparison.OrdinalIgnoreCase)", prediction=128, span="27-27"];
m9_4 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", file="SqlServerJobQueueProvider.cs", label="fontName.EndsWith(''.svg'', StringComparison.OrdinalIgnoreCase)", span="31-31"];
m9_13 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(IDbConnection)", file="SqlServerJobQueueProvider.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(IDbConnection)", span="28-28"];
m9_14 [file="SqlServerJobQueueProvider.cs", label="Hangfire.SqlServer.SqlServerJobQueueProvider", span=""];
m10_72 [cluster="Unk.OnClientException", file="SqlServerMonitoringApi.cs", label="Entry Unk.OnClientException", span=""];
m10_12 [cluster="System.Collections.Generic.List<T>.List()", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m10_11 [cluster="Mock<IStateMachineFactory>.cstr", file="SqlServerMonitoringApi.cs", label="Entry Mock<IStateMachineFactory>.cstr", span=""];
m10_10 [cluster="Mock<IState>.cstr", file="SqlServerMonitoringApi.cs", label="Entry Mock<IState>.cstr", span=""];
m10_17 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.TestMethod()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.TestMethod()", span="308-308"];
m10_327 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.TestMethod()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.TestMethod()", span="308-308"];
m10_25 [cluster="Unk.Equal", file="SqlServerMonitoringApi.cs", label="Entry Unk.Equal", span=""];
m10_185 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", span="180-180"];
m10_186 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerMonitoringApi.cs", label="var outerFilter = new Mock<IClientFilter>()", span="183-183"];
m10_187 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerMonitoringApi.cs", label="var innerFilter = new Mock<IClientFilter>()", span="184-184"];
m10_188 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerMonitoringApi.cs", label="_filters.Add(outerFilter.Object)", span="186-186"];
m10_193 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerMonitoringApi.cs", label="outerFilter.Verify(x => x.OnCreated(It.Is<CreatedContext>(context => context.Canceled)))", span="198-198"];
m10_189 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerMonitoringApi.cs", label="_filters.Add(innerFilter.Object)", span="187-187"];
m10_190 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerMonitoringApi.cs", label="innerFilter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>()))\r\n                .Callback((CreatingContext context) => context.Canceled = true)", span="189-190"];
m10_191 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerMonitoringApi.cs", label="var process = CreateProcess()", span="192-192"];
m10_192 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerMonitoringApi.cs", label="process.Run(_context.Object)", span="195-195"];
m10_194 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", span="180-180"];
m10_13 [cluster="Mock<CreateContext>.cstr", file="SqlServerMonitoringApi.cs", label="Entry Mock<CreateContext>.cstr", span=""];
m10_164 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", span="160-160"];
m10_165 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", file="SqlServerMonitoringApi.cs", label="var filter = new Mock<IClientFilter>()", span="163-163"];
m10_166 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", file="SqlServerMonitoringApi.cs", label="_filters.Add(filter.Object)", span="164-164"];
m10_167 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", file="SqlServerMonitoringApi.cs", label="filter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>()))\r\n                .Callback((CreatingContext x) => x.Canceled = true)", span="166-167"];
m10_171 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", file="SqlServerMonitoringApi.cs", label="filter.Verify(x => x.OnCreated(It.IsAny<CreatedContext>()), Times.Never)", span="176-176"];
m10_168 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", file="SqlServerMonitoringApi.cs", label="var process = CreateProcess()", span="169-169"];
m10_169 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", file="SqlServerMonitoringApi.cs", label="process.Run(_context.Object)", span="172-172"];
m10_170 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", file="SqlServerMonitoringApi.cs", label="_context.Verify(x => x.CreateJob(), Times.Never)", span="175-175"];
m10_172 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis()", span="160-160"];
m10_298 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", span="285-285"];
m10_299 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerMonitoringApi.cs", label="var outerFilter = new Mock<IClientFilter>()", span="288-288"];
m10_300 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerMonitoringApi.cs", label="var innerFilter = new Mock<IClientFilter>()", span="289-289"];
m10_301 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerMonitoringApi.cs", label="_filters.Add(outerFilter.Object)", span="291-291"];
m10_307 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerMonitoringApi.cs", label="outerFilter.Verify(x => x.OnCreated(It.Is<CreatedContext>(context => context.Exception != null)))", span="305-305"];
m10_302 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerMonitoringApi.cs", label="_filters.Add(innerFilter.Object)", span="292-292"];
m10_304 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerMonitoringApi.cs", label="innerFilter.Setup(x => x.OnCreated(It.IsAny<CreatedContext>()))\r\n                .Callback((CreatedContext x) => x.ExceptionHandled = true)", span="296-297"];
m10_303 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerMonitoringApi.cs", label="_context.Setup(x => x.CreateJob()).Throws<InvalidOperationException>()", span="294-294"];
m10_305 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerMonitoringApi.cs", label="var process = CreateProcess()", span="299-299"];
m10_306 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerMonitoringApi.cs", label="Assert.DoesNotThrow(() => process.Run(_context.Object))", span="302-302"];
m10_308 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", span="285-285"];
m10_106 [cluster="Unk.DoesNotThrow", file="SqlServerMonitoringApi.cs", label="Entry Unk.DoesNotThrow", span=""];
m10_35 [cluster="Unk.Run", file="SqlServerMonitoringApi.cs", label="Entry Unk.Run", span=""];
m10_97 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", span="101-101"];
m10_98 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="SqlServerMonitoringApi.cs", label="_context.Setup(x => x.CreateJob()).Throws<InvalidOperationException>()", span="104-104"];
m10_99 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="SqlServerMonitoringApi.cs", label="var filter = new Mock<IClientExceptionFilter>()", span="105-105"];
m10_100 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="SqlServerMonitoringApi.cs", label="filter.Setup(x => x.OnClientException(It.IsAny<ClientExceptionContext>()))\r\n                .Callback((ClientExceptionContext x) => x.ExceptionHandled = true)", span="106-107"];
m10_101 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="SqlServerMonitoringApi.cs", label="_filters.Add(filter.Object)", span="109-109"];
m10_102 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="SqlServerMonitoringApi.cs", label="var process = CreateProcess()", span="111-111"];
m10_103 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="SqlServerMonitoringApi.cs", label="Assert.DoesNotThrow(() => process.Run(_context.Object))", span="114-114"];
m10_104 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", span="101-101"];
m10_237 [cluster="System.InvalidOperationException.InvalidOperationException()", file="SqlServerMonitoringApi.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m10_24 [cluster="Unk.>", file="SqlServerMonitoringApi.cs", label="Entry Unk.>", span=""];
m10_61 [cluster="Mock<IClientExceptionFilter>.cstr", file="SqlServerMonitoringApi.cs", label="Entry Mock<IClientExceptionFilter>.cstr", span=""];
m10_23 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.CreateProcess()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.CreateProcess()", span="312-312"];
m10_328 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.CreateProcess()", file="SqlServerMonitoringApi.cs", label="return new JobCreationProcess(_filters);", span="314-314"];
m10_329 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.CreateProcess()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.CreateProcess()", span="312-312"];
m10_140 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", span="137-137"];
m10_141 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerMonitoringApi.cs", label="var outerFilter = new Mock<IClientFilter>()", span="140-140"];
m10_142 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerMonitoringApi.cs", label="var innerFilter = new Mock<IClientFilter>()", span="141-141"];
m10_143 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerMonitoringApi.cs", label="_filters.Add(outerFilter.Object)", span="143-143"];
m10_145 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerMonitoringApi.cs", label="outerFilter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>())).InSequence()", span="146-146"];
m10_148 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerMonitoringApi.cs", label="outerFilter.Setup(x => x.OnCreated(It.IsAny<CreatedContext>())).InSequence()", span="149-149"];
m10_144 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerMonitoringApi.cs", label="_filters.Add(innerFilter.Object)", span="144-144"];
m10_146 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerMonitoringApi.cs", label="innerFilter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>())).InSequence()", span="147-147"];
m10_147 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerMonitoringApi.cs", label="innerFilter.Setup(x => x.OnCreated(It.IsAny<CreatedContext>())).InSequence()", span="148-148"];
m10_149 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerMonitoringApi.cs", label="var process = CreateProcess()", span="151-151"];
m10_150 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerMonitoringApi.cs", label="process.Run(_context.Object)", span="154-154"];
m10_151 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", span="137-137"];
m10_139 [cluster="Unk.OnCreated", file="SqlServerMonitoringApi.cs", label="Entry Unk.OnCreated", span=""];
m10_274 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", span="266-266"];
m10_275 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerMonitoringApi.cs", label="var filter = new Mock<IClientFilter>()", span="269-269"];
m10_276 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerMonitoringApi.cs", label="_filters.Add(filter.Object)", span="270-270"];
m10_279 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerMonitoringApi.cs", label="filter.Setup(x => x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception)))\r\n                .Callback((CreatedContext x) => x.ExceptionHandled = true)", span="275-276"];
m10_277 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerMonitoringApi.cs", label="var exception = new InvalidOperationException()", span="272-272"];
m10_278 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerMonitoringApi.cs", label="_context.Setup(x => x.CreateJob()).Throws(exception)", span="273-273"];
m10_280 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerMonitoringApi.cs", label="var process = CreateProcess()", span="278-278"];
m10_281 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerMonitoringApi.cs", label="Assert.DoesNotThrow(() => process.Run(_context.Object))", span="281-281"];
m10_282 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions()", span="266-266"];
m10_53 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", span="61-61"];
m10_59 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerMonitoringApi.cs", label="filter.Verify(x => x.OnClientException(\r\n                It.IsNotNull<ClientExceptionContext>()))", span="72-73"];
m10_56 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerMonitoringApi.cs", label="_context.Setup(x => x.CreateJob()).Throws<InvalidOperationException>()", span="66-66"];
m10_58 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerMonitoringApi.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object))", span="69-70"];
m10_60 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", span="61-61"];
m10_228 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", span="223-223"];
m10_235 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerMonitoringApi.cs", label="filter.Verify(x => x.OnCreated(It.Is<CreatedContext>(\r\n                context => context.Exception == exception)))", span="239-240"];
m10_231 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerMonitoringApi.cs", label="var exception = new InvalidOperationException()", span="229-229"];
m10_232 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerMonitoringApi.cs", label="_context.Setup(x => x.CreateJob()).Throws(exception)", span="230-230"];
m10_236 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", span="223-223"];
m10_251 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", span="244-244"];
m10_252 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerMonitoringApi.cs", label="var outerFilter = new Mock<IClientFilter>()", span="247-247"];
m10_254 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerMonitoringApi.cs", label="_filters.Add(outerFilter.Object)", span="250-250"];
m10_260 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerMonitoringApi.cs", label="outerFilter.Verify(x => x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception)))", span="262-262"];
m10_255 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerMonitoringApi.cs", label="_filters.Add(innerFilter.Object)", span="251-251"];
m10_256 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerMonitoringApi.cs", label="var exception = new InvalidOperationException()", span="253-253"];
m10_257 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerMonitoringApi.cs", label="_context.Setup(x => x.CreateJob()).Throws(exception)", span="254-254"];
m10_258 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerMonitoringApi.cs", label="var process = CreateProcess()", span="256-256"];
m10_259 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerMonitoringApi.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object))", span="259-260"];
m10_261 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", span="244-244"];
m10_62 [cluster="Unk.Add", file="SqlServerMonitoringApi.cs", label="Entry Unk.Add", span=""];
m10_84 [cluster="Unk.InSequence", file="SqlServerMonitoringApi.cs", label="Entry Unk.InSequence", span=""];
m10_0 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", span="17-17"];
m10_1 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerMonitoringApi.cs", label="var connection = new Mock<IStorageConnection>()", span="19-19"];
m10_2 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerMonitoringApi.cs", label="var job = Job.FromExpression(() => TestMethod())", span="20-20"];
m10_6 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerMonitoringApi.cs", label="_context = new Mock<CreateContext>(\r\n                connection.Object, stateMachineFactory.Object, job, state.Object)", span="25-26"];
m10_3 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerMonitoringApi.cs", label="var state = new Mock<IState>()", span="21-21"];
m10_4 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerMonitoringApi.cs", label="var stateMachineFactory = new Mock<IStateMachineFactory>()", span="22-22"];
m10_5 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerMonitoringApi.cs", label="_filters = new List<object>()", span="24-24"];
m10_7 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", span="17-17"];
m10_207 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", span="202-202"];
m10_211 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerMonitoringApi.cs", label="var process = CreateProcess()", span="211-211"];
m10_215 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", span="202-202"];
m10_29 [cluster="Hangfire.Client.JobCreationProcess.Run(Hangfire.Client.CreateContext)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Client.JobCreationProcess.Run(Hangfire.Client.CreateContext)", span="45-45"];
m10_46 [cluster="Unk.Setup", file="SqlServerMonitoringApi.cs", label="Entry Unk.Setup", span=""];
m10_238 [cluster="Unk.Throws", file="SqlServerMonitoringApi.cs", label="Entry Unk.Throws", span=""];
m10_73 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", span="77-77"];
m10_74 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerMonitoringApi.cs", label="var filter1 = new Mock<IClientExceptionFilter>()", span="80-80"];
m10_75 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerMonitoringApi.cs", label="var filter2 = new Mock<IClientExceptionFilter>()", span="81-81"];
m10_77 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerMonitoringApi.cs", label="filter1.Setup(x => x.OnClientException(It.IsAny<ClientExceptionContext>())).InSequence()", span="84-84"];
m10_78 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerMonitoringApi.cs", label="_filters.Add(filter1.Object)", span="86-86"];
m10_76 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerMonitoringApi.cs", label="filter2.Setup(x => x.OnClientException(It.IsAny<ClientExceptionContext>())).InSequence()", span="83-83"];
m10_79 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerMonitoringApi.cs", label="_filters.Add(filter2.Object)", span="87-87"];
m10_80 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerMonitoringApi.cs", label="_context.Setup(x => x.CreateJob()).Throws<InvalidOperationException>()", span="89-89"];
m10_81 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerMonitoringApi.cs", label="var process = CreateProcess()", span="91-91"];
m10_82 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerMonitoringApi.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object))", span="94-95"];
m10_83 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", span="77-77"];
m10_330 [cluster="Hangfire.Client.JobCreationProcess.JobCreationProcess(System.Collections.Generic.IEnumerable<object>)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Client.JobCreationProcess.JobCreationProcess(System.Collections.Generic.IEnumerable<object>)", span="39-39"];
m10_324 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="305-305"];
m10_14 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="20-20"];
m10_15 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="TestMethod()", span="20-20"];
m10_16 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="20-20"];
m10_26 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="35-35"];
m10_28 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="35-35"];
m10_37 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="47-47"];
m10_38 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.CreateJob()", span="47-47"];
m10_39 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="47-47"];
m10_47 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="53-53"];
m10_50 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="57-57"];
m10_49 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="53-53"];
m10_52 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="57-57"];
m10_63 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="66-66"];
m10_67 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="process.Run(_context.Object)", span="70-70"];
m10_66 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="70-70"];
m10_69 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="72-73"];
m10_64 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.CreateJob()", span="66-66"];
m10_65 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="66-66"];
m10_68 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="70-70"];
m10_70 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.OnClientException(\r\n                It.IsNotNull<ClientExceptionContext>())", span="72-73"];
m10_71 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="72-73"];
m10_85 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="83-83"];
m10_88 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="84-84"];
m10_91 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="89-89"];
m10_95 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="process.Run(_context.Object)", span="95-95"];
m10_94 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="95-95"];
m10_86 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.OnClientException(It.IsAny<ClientExceptionContext>())", span="83-83"];
m10_87 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="83-83"];
m10_89 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.OnClientException(It.IsAny<ClientExceptionContext>())", span="84-84"];
m10_90 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="84-84"];
m10_92 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.CreateJob()", span="89-89"];
m10_93 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="89-89"];
m10_96 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="95-95"];
m10_107 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="104-104"];
m10_110 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="106-106"];
m10_113 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="107-107"];
m10_117 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="process.Run(_context.Object)", span="114-114"];
m10_116 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="114-114"];
m10_108 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.CreateJob()", span="104-104"];
m10_109 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="104-104"];
m10_111 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.OnClientException(It.IsAny<ClientExceptionContext>())", span="106-106"];
m10_112 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="106-106"];
m10_114 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.ExceptionHandled = true", span="107-107"];
m10_115 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="107-107"];
m10_118 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="114-114"];
m10_129 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="124-124"];
m10_133 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="125-125"];
m10_136 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="126-126"];
m10_130 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.OnCreating(It.IsNotNull<CreatingContext>())", span="124-124"];
m10_131 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="124-124"];
m10_134 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.CreateJob()", span="125-125"];
m10_135 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="125-125"];
m10_137 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.OnCreated(It.IsNotNull<CreatedContext>())", span="126-126"];
m10_138 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="126-126"];
m10_152 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="146-146"];
m10_155 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="147-147"];
m10_158 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="148-148"];
m10_161 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="149-149"];
m10_153 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="146-146"];
m10_154 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="146-146"];
m10_156 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="147-147"];
m10_157 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="147-147"];
m10_159 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="148-148"];
m10_160 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="148-148"];
m10_162 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="149-149"];
m10_163 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="149-149"];
m10_173 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="166-166"];
m10_176 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="167-167"];
m10_179 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="175-175"];
m10_182 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="176-176"];
m10_174 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="166-166"];
m10_175 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="166-166"];
m10_177 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.Canceled = true", span="167-167"];
m10_178 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="167-167"];
m10_180 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.CreateJob()", span="175-175"];
m10_181 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="175-175"];
m10_183 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="176-176"];
m10_184 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="176-176"];
m10_195 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="189-189"];
m10_198 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="190-190"];
m10_201 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="198-198"];
m10_196 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="189-189"];
m10_197 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="189-189"];
m10_199 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="context.Canceled = true", span="190-190"];
m10_200 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="190-190"];
m10_202 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.OnCreated(It.Is<CreatedContext>(context => context.Canceled))", span="198-198"];
m10_203 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="198-198"];
m10_204 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="198-198"];
m10_205 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="context.Canceled", span="198-198"];
m10_206 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="198-198"];
m10_216 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="208-208"];
m10_219 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="215-215"];
m10_222 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="218-218"];
m10_225 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="219-219"];
m10_218 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="208-208"];
m10_221 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="215-215"];
m10_224 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="218-218"];
m10_227 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="219-219"];
m10_246 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.OnCreated(It.Is<CreatedContext>(\r\n                context => context.Exception == exception))", span="239-240"];
m10_249 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="context.Exception == exception", span="240-240"];
m10_239 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="230-230"];
m10_243 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="process.Run(_context.Object)", span="236-236"];
m10_242 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="236-236"];
m10_245 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="239-240"];
m10_240 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.CreateJob()", span="230-230"];
m10_241 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="230-230"];
m10_244 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="236-236"];
m10_247 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="239-240"];
m10_248 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="240-240"];
m10_250 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="240-240"];
m10_269 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception))", span="262-262"];
m10_272 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="context.Exception == exception", span="262-262"];
m10_262 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="254-254"];
m10_266 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="process.Run(_context.Object)", span="260-260"];
m10_265 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="260-260"];
m10_268 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="262-262"];
m10_263 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.CreateJob()", span="254-254"];
m10_264 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="254-254"];
m10_267 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="260-260"];
m10_270 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="262-262"];
m10_271 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="262-262"];
m10_273 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="262-262"];
m10_287 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception))", span="275-275"];
m10_290 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="context.Exception == exception", span="275-275"];
m10_283 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="273-273"];
m10_286 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="275-275"];
m10_292 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="276-276"];
m10_296 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="process.Run(_context.Object)", span="281-281"];
m10_295 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="281-281"];
m10_284 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.CreateJob()", span="273-273"];
m10_285 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="273-273"];
m10_288 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="275-275"];
m10_289 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="275-275"];
m10_291 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="275-275"];
m10_293 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.ExceptionHandled = true", span="276-276"];
m10_294 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="276-276"];
m10_297 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="281-281"];
m10_309 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="294-294"];
m10_312 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="296-296"];
m10_315 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="297-297"];
m10_319 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="process.Run(_context.Object)", span="302-302"];
m10_318 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="302-302"];
m10_321 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="305-305"];
m10_310 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.CreateJob()", span="294-294"];
m10_311 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="294-294"];
m10_313 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="296-296"];
m10_314 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="296-296"];
m10_316 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.ExceptionHandled = true", span="297-297"];
m10_317 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="297-297"];
m10_320 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="302-302"];
m10_322 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.OnCreated(It.Is<CreatedContext>(context => context.Exception != null))", span="305-305"];
m10_323 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="305-305"];
m10_325 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="context.Exception != null", span="305-305"];
m10_326 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="305-305"];
m10_36 [cluster="Unk.Verify", file="SqlServerMonitoringApi.cs", label="Entry Unk.Verify", span=""];
m10_30 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsCreateJobMethod()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsCreateJobMethod()", span="41-41"];
m10_31 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsCreateJobMethod()", file="SqlServerMonitoringApi.cs", label="var process = CreateProcess()", span="43-43"];
m10_32 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsCreateJobMethod()", file="SqlServerMonitoringApi.cs", label="process.Run(_context.Object)", span="45-45"];
m10_33 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsCreateJobMethod()", file="SqlServerMonitoringApi.cs", label="_context.Verify(x => x.CreateJob(), Times.Once)", span="47-47"];
m10_34 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsCreateJobMethod()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsCreateJobMethod()", span="41-41"];
m10_41 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCatchExceptions()", span="51-51"];
m10_45 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCatchExceptions()", span="51-51"];
m10_132 [cluster="Unk.OnCreating", file="SqlServerMonitoringApi.cs", label="Entry Unk.OnCreating", span=""];
m10_18 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", span="30-30"];
m10_22 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", span="30-30"];
m10_105 [cluster="Unk.Callback", file="SqlServerMonitoringApi.cs", label="Entry Unk.Callback", span=""];
m10_119 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", span="118-118"];
m10_120 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerMonitoringApi.cs", label="var filter = new Mock<IClientFilter>()", span="121-121"];
m10_121 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerMonitoringApi.cs", label="_filters.Add(filter.Object)", span="122-122"];
m10_122 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerMonitoringApi.cs", label="filter.Setup(x => x.OnCreating(It.IsNotNull<CreatingContext>())).InSequence()", span="124-124"];
m10_124 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerMonitoringApi.cs", label="filter.Setup(x => x.OnCreated(It.IsNotNull<CreatedContext>())).InSequence()", span="126-126"];
m10_123 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerMonitoringApi.cs", label="_context.Setup(x => x.CreateJob()).InSequence()", span="125-125"];
m10_125 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerMonitoringApi.cs", label="var process = CreateProcess()", span="128-128"];
m10_126 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerMonitoringApi.cs", label="process.Run(_context.Object)", span="131-131"];
m10_127 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", span="118-118"];
m10_40 [cluster="Unk.CreateJob", file="SqlServerMonitoringApi.cs", label="Entry Unk.CreateJob", span=""];
m10_128 [cluster="Mock<IClientFilter>.cstr", file="SqlServerMonitoringApi.cs", label="Entry Mock<IClientFilter>.cstr", span=""];
m10_8 [cluster="Mock<IStorageConnection>.cstr", file="SqlServerMonitoringApi.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m10_9 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="148-148"];
m10_331 [file="SqlServerMonitoringApi.cs", label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", span=""];
m10_332 [file="SqlServerMonitoringApi.cs", label=process, span=""];
m10_333 [file="SqlServerMonitoringApi.cs", label=process, span=""];
m10_334 [file="SqlServerMonitoringApi.cs", label=process, span=""];
m10_335 [file="SqlServerMonitoringApi.cs", label=process, span=""];
m10_336 [file="SqlServerMonitoringApi.cs", label=process, span=""];
m10_337 [file="SqlServerMonitoringApi.cs", label=process, span=""];
m10_338 [file="SqlServerMonitoringApi.cs", label=process, span=""];
m10_339 [file="SqlServerMonitoringApi.cs", label=exception, span=""];
m10_340 [file="SqlServerMonitoringApi.cs", label=process, span=""];
m10_341 [file="SqlServerMonitoringApi.cs", label=exception, span=""];
m10_342 [file="SqlServerMonitoringApi.cs", label=exception, span=""];
m10_343 [file="SqlServerMonitoringApi.cs", label=process, span=""];
m10_344 [file="SqlServerMonitoringApi.cs", label=process, span=""];
m11_164 [cluster="Metric.cstr", file="SqlServerStorage.cs", label="Entry Metric.cstr", span=""];
m11_18 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerStorage.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m11_134 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateTransaction(System.Transactions.IsolationLevel?)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.CreateTransaction(System.Transactions.IsolationLevel?)", span="239-239"];
m11_135 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateTransaction(System.Transactions.IsolationLevel?)", color=green, community=0, file="SqlServerStorage.cs", label="return isolationLevel != null\r\n                ? new TransactionScope(TransactionScopeOption.Required,\r\n                    new TransactionOptions { IsolationLevel = isolationLevel.Value })\r\n                : new TransactionScope();", prediction=129, span="241-244"];
m11_136 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateTransaction(System.Transactions.IsolationLevel?)", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.CreateTransaction(System.Transactions.IsolationLevel?)", span="239-239"];
m11_26 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", span="96-96"];
m11_29 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", file="SqlServerStorage.cs", label="_existingConnection = existingConnection", span="100-100"];
m11_30 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", file="SqlServerStorage.cs", label="_options = new SqlServerStorageOptions()", span="101-101"];
m11_31 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", file="SqlServerStorage.cs", label="InitializeQueueProviders()", span="103-103"];
m11_27 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", file="SqlServerStorage.cs", label="existingConnection == null", span="98-98"];
m11_28 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''existingConnection'');", span="98-98"];
m11_32 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", span="96-96"];
m11_23 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="218-218"];
m11_120 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", color=green, community=0, file="SqlServerStorage.cs", label="_existingConnection != null", prediction=130, span="220-220"];
m11_121 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", color=green, community=0, file="SqlServerStorage.cs", label="return _existingConnection;", prediction=130, span="222-222"];
m11_122 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="var connection = new SqlConnection(_connectionString)", span="225-225"];
m11_123 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="connection.Open()", span="226-226"];
m11_124 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="return connection;", span="228-228"];
m11_125 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="218-218"];
m11_146 [cluster="string.Contains(string)", file="SqlServerStorage.cs", label="Entry string.Contains(string)", span="0-0"];
m11_128 [cluster="Hangfire.SqlServer.SqlServerStorage.ReleaseConnection(IDbConnection)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.ReleaseConnection(IDbConnection)", span="231-231"];
m11_129 [cluster="Hangfire.SqlServer.SqlServerStorage.ReleaseConnection(IDbConnection)", color=green, community=0, file="SqlServerStorage.cs", label="connection != null && !ReferenceEquals(connection, _existingConnection)", prediction=130, span="233-233"];
m11_130 [cluster="Hangfire.SqlServer.SqlServerStorage.ReleaseConnection(IDbConnection)", color=green, community=0, file="SqlServerStorage.cs", label="connection.Dispose()", prediction=133, span="235-235"];
m11_131 [cluster="Hangfire.SqlServer.SqlServerStorage.ReleaseConnection(IDbConnection)", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.ReleaseConnection(IDbConnection)", span="231-231"];
m11_156 [cluster="Hangfire.Dashboard.Metric.Metric(string)", file="SqlServerStorage.cs", label="Entry Hangfire.Dashboard.Metric.Metric(string)", span="20-20"];
m11_143 [cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.PersistentJobQueueProviderCollection(Hangfire.SqlServer.IPersistentJobQueueProvider)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.PersistentJobQueueProviderCollection(Hangfire.SqlServer.IPersistentJobQueueProvider)", span="31-31"];
m11_77 [cluster="System.Text.StringBuilder.Append(string)", file="SqlServerStorage.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m11_73 [cluster="Unk.ToDictionary", file="SqlServerStorage.cs", label="Entry Unk.ToDictionary", span=""];
m11_42 [cluster="Hangfire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.GetComponents()", span="118-118"];
m11_43 [cluster="Hangfire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerStorage.cs", label="yield return new ExpirationManager(this, _options.JobExpirationCheckInterval);", span="120-120"];
m11_44 [cluster="Hangfire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerStorage.cs", label="yield return new CountersAggregator(this, _options.CountersAggregateInterval);", span="121-121"];
m11_45 [cluster="Hangfire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.GetComponents()", span="118-118"];
m11_33 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="25-25"];
m11_22 [cluster="string.Format(string, object)", file="SqlServerStorage.cs", label="Entry string.Format(string, object)", span="0-0"];
m11_7 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="_options = options", span="62-62"];
m11_76 [cluster="Unk.Append", file="SqlServerStorage.cs", label="Entry Unk.Append", span=""];
m11_162 [cluster="Unk.>", file="SqlServerStorage.cs", label="Entry Unk.>", span=""];
m11_74 [cluster="System.Text.StringBuilder.StringBuilder()", file="SqlServerStorage.cs", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
m11_104 [cluster="System.Func<T, TResult>.Invoke(T)", file="SqlServerStorage.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m11_8 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="IsConnectionString(nameOrConnectionString)", span="64-64"];
m11_38 [cluster="Hangfire.SqlServer.SqlServerStorage.GetConnection()", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.GetConnection()", span="113-113"];
m11_39 [cluster="Hangfire.SqlServer.SqlServerStorage.GetConnection()", color=green, community=0, file="SqlServerStorage.cs", label="return new SqlServerConnection(this);", prediction=130, span="115-115"];
m11_40 [cluster="Hangfire.SqlServer.SqlServerStorage.GetConnection()", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.GetConnection()", span="113-113"];
m11_21 [cluster="System.ArgumentException.ArgumentException(string)", file="SqlServerStorage.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m11_48 [cluster="Hangfire.SqlServer.SqlServerStorage.WriteOptionsToLog(Hangfire.Logging.ILog)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.WriteOptionsToLog(Hangfire.Logging.ILog)", span="124-124"];
m11_50 [cluster="Hangfire.SqlServer.SqlServerStorage.WriteOptionsToLog(Hangfire.Logging.ILog)", file="SqlServerStorage.cs", label="logger.InfoFormat(''    Queue poll interval: {0}.'', _options.QueuePollInterval)", span="127-127"];
m11_51 [cluster="Hangfire.SqlServer.SqlServerStorage.WriteOptionsToLog(Hangfire.Logging.ILog)", file="SqlServerStorage.cs", label="logger.InfoFormat(''    Invisibility timeout: {0}.'', _options.InvisibilityTimeout)", span="128-128"];
m11_49 [cluster="Hangfire.SqlServer.SqlServerStorage.WriteOptionsToLog(Hangfire.Logging.ILog)", file="SqlServerStorage.cs", label="logger.Info(''Using the following options for SQL Server job storage:'')", span="126-126"];
m11_52 [cluster="Hangfire.SqlServer.SqlServerStorage.WriteOptionsToLog(Hangfire.Logging.ILog)", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.WriteOptionsToLog(Hangfire.Logging.ILog)", span="124-124"];
m11_127 [cluster="Unk.Open", file="SqlServerStorage.cs", label="Entry Unk.Open", span=""];
m11_84 [cluster="Unk.Trim", file="SqlServerStorage.cs", label="Entry Unk.Trim", span=""];
m11_132 [cluster="Unk.ReferenceEquals", file="SqlServerStorage.cs", label="Entry Unk.ReferenceEquals", span=""];
m11_126 [cluster="SqlConnection.cstr", file="SqlServerStorage.cs", label="Entry SqlConnection.cstr", span=""];
m11_37 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", span="35-35"];
m11_91 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", span="174-174"];
m11_92 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", color=green, community=0, file="SqlServerStorage.cs", label="UseConnection(connection =>\r\n            {\r\n                action(connection);\r\n                return true;\r\n            })", prediction=130, span="176-180"];
m11_93 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", span="174-174"];
m11_99 [cluster="System.Action<T>.Invoke(T)", file="SqlServerStorage.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m11_105 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction(System.Action<SqlConnection>)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseTransaction(System.Action<SqlConnection>)", span="198-198"];
m11_106 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction(System.Action<SqlConnection>)", color=green, community=0, file="SqlServerStorage.cs", label="UseTransaction(connection =>\r\n            {\r\n                action(connection);\r\n                return true;\r\n            }, null)", prediction=130, span="200-204"];
m11_107 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction(System.Action<SqlConnection>)", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.UseTransaction(System.Action<SqlConnection>)", span="198-198"];
m11_137 [cluster="TransactionScope.cstr", file="SqlServerStorage.cs", label="Entry TransactionScope.cstr", span=""];
m11_20 [cluster="Hangfire.SqlServer.SqlServerStorage.IsConnectionStringInConfiguration(string)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.IsConnectionStringInConfiguration(string)", span="258-258"];
m11_147 [cluster="Hangfire.SqlServer.SqlServerStorage.IsConnectionStringInConfiguration(string)", file="SqlServerStorage.cs", label="var connectionStringSetting = ConfigurationManager.ConnectionStrings[connectionStringName]", span="260-260"];
m11_148 [cluster="Hangfire.SqlServer.SqlServerStorage.IsConnectionStringInConfiguration(string)", file="SqlServerStorage.cs", label="return connectionStringSetting != null;", span="262-262"];
m11_149 [cluster="Hangfire.SqlServer.SqlServerStorage.IsConnectionStringInConfiguration(string)", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.IsConnectionStringInConfiguration(string)", span="258-258"];
m11_165 [cluster="Unk.ToString", file="SqlServerStorage.cs", label="Entry Unk.ToString", span=""];
m11_6 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''options'');", span="60-60"];
m11_142 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", span="27-27"];
m11_119 [cluster="Unk.Complete", file="SqlServerStorage.cs", label="Entry Unk.Complete", span=""];
m11_24 [cluster="Hangfire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", span="35-35"];
m11_133 [cluster="Unk.Dispose", file="SqlServerStorage.cs", label="Entry Unk.Dispose", span=""];
m11_54 [cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", file="SqlServerStorage.cs", label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="210-210"];
m11_71 [cluster="string.Split(char[], System.StringSplitOptions)", file="SqlServerStorage.cs", label="Entry string.Split(char[], System.StringSplitOptions)", span="0-0"];
m11_138 [cluster="TransactionOptions.cstr", file="SqlServerStorage.cs", label="Entry TransactionOptions.cstr", span=""];
m11_46 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="47-47"];
m11_88 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="140-140"];
m11_0 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="26-40"];
m11_1 [cluster="lambda expression", file="SqlServerStorage.cs", label="var connection = JobStorage.Current.GetConnection()", span="28-28"];
m11_4 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''nameOrConnectionString'');", span="59-59"];
m11_2 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", span="57-57"];
m11_3 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="nameOrConnectionString == null", span="59-59"];
m11_5 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="options == null", span="60-60"];
m11_10 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="IsConnectionStringInConfiguration(nameOrConnectionString)", span="68-68"];
m11_11 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="_connectionString = ConfigurationManager.ConnectionStrings[nameOrConnectionString].ConnectionString", span="70-70"];
m11_14 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="var connection = CreateAndOpenConnection()", span="81-81"];
m11_12 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="throw new ArgumentException(\r\n                    string.Format(''Could not find connection string with name '{0}' in application config file'',\r\n                                  nameOrConnectionString));", span="74-76"];
m11_13 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="options.PrepareSchemaIfNecessary", span="79-79"];
m11_15 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="SqlServerObjectsInstaller.Install(connection)", span="83-83"];
m11_95 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="176-180"];
m11_96 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="action(connection)", prediction=137, span="178-178"];
m11_97 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="return true;", prediction=138, span="179-179"];
m11_98 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="176-180"];
m11_109 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="200-204"];
m11_110 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="action(connection)", prediction=139, span="202-202"];
m11_111 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="return true;", prediction=140, span="203-203"];
m11_112 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="200-204"];
m11_151 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="var sqlStorage = page.Storage as SqlServerStorage", prediction=141, span="270-270"];
m11_150 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="268-285"];
m11_152 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="sqlStorage == null", prediction=142, span="271-271"];
m11_154 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="return sqlStorage.UseConnection(connection =>\r\n                {\r\n                    var sqlQuery = @''\r\nselect count(*) from sys.sysprocesses\r\nwhere dbid = db_id(@name) and status != 'background' and status != 'sleeping''';\r\n\r\n                    var value = connection\r\n                        .Query<int>(sqlQuery, new { name = connection.Database })\r\n                        .Single();\r\n\r\n                    return new Metric(value.ToString(''N0''));\r\n                });", prediction=143, span="273-284"];
m11_153 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="return new Metric(''???'');", prediction=144, span="271-271"];
m11_155 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="268-285"];
m11_157 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="273-284"];
m11_159 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="var value = connection\r\n                        .Query<int>(sqlQuery, new { name = connection.Database })\r\n                        .Single()", prediction=145, span="279-281"];
m11_158 [cluster="lambda expression", file="SqlServerStorage.cs", label="var sqlQuery = @''\r\nselect count(*) from sys.sysprocesses\r\nwhere dbid = db_id(@name) and status != 'background' and status != 'sleeping'''", span="275-277"];
m11_160 [cluster="lambda expression", file="SqlServerStorage.cs", label="return new Metric(value.ToString(''N0''));", span="283-283"];
m11_167 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="var sqlStorage = page.Storage as SqlServerStorage", prediction=146, span="292-292"];
m11_166 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="290-307"];
m11_168 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="sqlStorage == null", prediction=147, span="293-293"];
m11_170 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="return sqlStorage.UseConnection(connection =>\r\n                {\r\n                    var sqlQuery = @''\r\nselect count(*) from sys.sysprocesses\r\nwhere dbid = db_id(@name) and status != 'background''';\r\n\r\n                    var value = connection\r\n                        .Query<int>(sqlQuery, new { name = connection.Database })\r\n                        .Single();\r\n\r\n                    return new Metric(value.ToString(''N0''));\r\n                });", prediction=148, span="295-306"];
m11_169 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="return new Metric(''???'');", prediction=149, span="293-293"];
m11_171 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="290-307"];
m11_172 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="295-306"];
m11_174 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="var value = connection\r\n                        .Query<int>(sqlQuery, new { name = connection.Database })\r\n                        .Single()", prediction=150, span="301-303"];
m11_173 [cluster="lambda expression", file="SqlServerStorage.cs", label="var sqlQuery = @''\r\nselect count(*) from sys.sysprocesses\r\nwhere dbid = db_id(@name) and status != 'background'''", span="297-299"];
m11_175 [cluster="lambda expression", file="SqlServerStorage.cs", label="return new Metric(value.ToString(''N0''));", span="305-305"];
m11_161 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="273-284"];
m11_176 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="295-306"];
m11_78 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="138-138"];
m11_81 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="139-139"];
m11_85 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="140-140"];
m11_79 [cluster="lambda expression", file="SqlServerStorage.cs", label="x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries)", span="138-138"];
m11_80 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="138-138"];
m11_83 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="139-139"];
m11_82 [cluster="lambda expression", file="SqlServerStorage.cs", label="new { Key = x[0].Trim(), Value = x[1].Trim() }", span="139-139"];
m11_87 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="140-140"];
m11_86 [cluster="lambda expression", file="SqlServerStorage.cs", label="x.Key", span="140-140"];
m11_89 [cluster="lambda expression", file="SqlServerStorage.cs", label="x.Value", span="140-140"];
m11_90 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="140-140"];
m11_25 [cluster="Hangfire.SqlServer.SqlServerStorage.InitializeQueueProviders()", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.InitializeQueueProviders()", span="247-247"];
m11_139 [cluster="Hangfire.SqlServer.SqlServerStorage.InitializeQueueProviders()", color=green, community=0, file="SqlServerStorage.cs", label="var defaultQueueProvider = new SqlServerJobQueueProvider(this, _options)", prediction=151, span="249-249"];
m11_140 [cluster="Hangfire.SqlServer.SqlServerStorage.InitializeQueueProviders()", file="SqlServerStorage.cs", label="QueueProviders = new PersistentJobQueueProviderCollection(defaultQueueProvider)", span="250-250"];
m11_141 [cluster="Hangfire.SqlServer.SqlServerStorage.InitializeQueueProviders()", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.InitializeQueueProviders()", span="247-247"];
m11_34 [cluster="Hangfire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="108-108"];
m11_35 [cluster="Hangfire.SqlServer.SqlServerStorage.GetMonitoringApi()", color=green, community=0, file="SqlServerStorage.cs", label="return new SqlServerMonitoringApi(this);", prediction=130, span="110-110"];
m11_36 [cluster="Hangfire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="108-108"];
m11_72 [cluster="Unk.Select", file="SqlServerStorage.cs", label="Entry Unk.Select", span=""];
m11_9 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="_connectionString = nameOrConnectionString", span="66-66"];
m11_55 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.ToString()", span="131-131"];
m11_57 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="var parts = _connectionString.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)\r\n                    .Select(x => x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries))\r\n                    .Select(x => new { Key = x[0].Trim(), Value = x[1].Trim() })\r\n                    .ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase)", span="137-140"];
m11_56 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="string canNotParseMessage = ''<Connection string can not be parsed>''", span="133-133"];
m11_58 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="var builder = new StringBuilder()", span="142-142"];
m11_60 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="parts.ContainsKey(alias)", span="146-146"];
m11_61 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="builder.Append(parts[alias])", span="148-148"];
m11_65 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="parts.ContainsKey(alias)", span="157-157"];
m11_66 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="builder.Append(parts[alias])", span="159-159"];
m11_67 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="return builder.Length != 0\r\n                    ? String.Format(''SQL Server: {0}'', builder)\r\n                    : canNotParseMessage;", span="164-166"];
m11_69 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="return canNotParseMessage;", span="170-170"];
m11_59 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="new[] { ''Data Source'', ''Server'', ''Address'', ''Addr'', ''Network Address'' }", span="144-144"];
m11_62 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="builder.Length != 0", span="153-153"];
m11_63 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="builder.Append(''@'')", span="153-153"];
m11_64 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="new[] { ''Database'', ''Initial Catalog'' }", span="155-155"];
m11_68 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label=Exception, span="168-168"];
m11_70 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.ToString()", span="131-131"];
m11_53 [cluster="Hangfire.Logging.ILog.Info(string)", file="SqlServerStorage.cs", label="Entry Hangfire.Logging.ILog.Info(string)", span="202-202"];
m11_47 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="34-34"];
m11_41 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(Hangfire.SqlServer.SqlServerStorage)", span="33-33"];
m11_163 [cluster="Unk.Single", file="SqlServerStorage.cs", label="Entry Unk.Single", span=""];
m11_16 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="InitializeQueueProviders()", span="87-87"];
m11_17 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", span="57-57"];
m11_94 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<SqlConnection, T>)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<SqlConnection, T>)", span="183-183"];
m11_100 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<SqlConnection, T>)", color=green, community=0, file="SqlServerStorage.cs", label="SqlConnection connection = null", prediction=153, span="185-185"];
m11_101 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<SqlConnection, T>)", color=green, community=0, file="SqlServerStorage.cs", label="connection = CreateAndOpenConnection()", prediction=154, span="189-189"];
m11_102 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<SqlConnection, T>)", color=green, community=0, file="SqlServerStorage.cs", label="return func(connection);", prediction=155, span="190-190"];
m11_103 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<SqlConnection, T>)", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<SqlConnection, T>)", span="183-183"];
m11_19 [cluster="Hangfire.SqlServer.SqlServerStorage.IsConnectionString(string)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.IsConnectionString(string)", span="253-253"];
m11_144 [cluster="Hangfire.SqlServer.SqlServerStorage.IsConnectionString(string)", file="SqlServerStorage.cs", label="return nameOrConnectionString.Contains('';'');", span="255-255"];
m11_145 [cluster="Hangfire.SqlServer.SqlServerStorage.IsConnectionString(string)", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.IsConnectionString(string)", span="253-253"];
m11_108 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction<T>(System.Func<SqlConnection, T>, System.Transactions.IsolationLevel?)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseTransaction<T>(System.Func<SqlConnection, T>, System.Transactions.IsolationLevel?)", span="207-207"];
m11_113 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction<T>(System.Func<SqlConnection, T>, System.Transactions.IsolationLevel?)", color=green, community=0, file="SqlServerStorage.cs", label="var transaction = CreateTransaction(isolationLevel ?? _options.TransactionIsolationLevel)", prediction=156, span="209-209"];
m11_114 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction<T>(System.Func<SqlConnection, T>, System.Transactions.IsolationLevel?)", color=green, community=0, file="SqlServerStorage.cs", label="var result = UseConnection(func)", prediction=157, span="211-211"];
m11_115 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction<T>(System.Func<SqlConnection, T>, System.Transactions.IsolationLevel?)", color=green, community=0, file="SqlServerStorage.cs", label="transaction.Complete()", prediction=156, span="212-212"];
m11_116 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction<T>(System.Func<SqlConnection, T>, System.Transactions.IsolationLevel?)", color=green, community=0, file="SqlServerStorage.cs", label="return result;", prediction=157, span="214-214"];
m11_117 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction<T>(System.Func<SqlConnection, T>, System.Transactions.IsolationLevel?)", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.UseTransaction<T>(System.Func<SqlConnection, T>, System.Transactions.IsolationLevel?)", span="207-207"];
m11_118 [cluster="Unk.CreateTransaction", file="SqlServerStorage.cs", label="Entry Unk.CreateTransaction", span=""];
m11_75 [cluster="Unk.ContainsKey", file="SqlServerStorage.cs", label="Entry Unk.ContainsKey", span=""];
m11_177 [file="SqlServerStorage.cs", label="Hangfire.SqlServer.SqlServerStorage", span=""];
m11_178 [file="SqlServerStorage.cs", label="System.Action<SqlConnection>", span=""];
m11_179 [file="SqlServerStorage.cs", label="System.Action<SqlConnection>", span=""];
m12_201 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", span="242-242"];
m12_202 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="SqlServerWriteOnlyTransaction.cs", label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData { LoadException = new JobLoadException() })", span="245-246"];
m12_203 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="SqlServerWriteOnlyTransaction.cs", label="var worker = CreateWorker()", span="248-248"];
m12_204 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="SqlServerWriteOnlyTransaction.cs", label="worker.Execute(_token)", span="251-251"];
m12_205 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="SqlServerWriteOnlyTransaction.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                JobId,\r\n                It.IsAny<FailedState>(),\r\n                It.IsAny<string[]>()))", span="254-257"];
m12_206 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", span="242-242"];
m12_42 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="43-43"];
m12_48 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="52-52"];
m12_61 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="67-67"];
m12_62 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="new Worker(null)", span="67-67"];
m12_63 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="67-67"];
m12_64 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", span="27-27"];
m12_66 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="SqlServerWriteOnlyTransaction.cs", label="var worker = CreateWorker()", span="75-75"];
m12_65 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", span="73-73"];
m12_67 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="SqlServerWriteOnlyTransaction.cs", label="worker.Execute(_token)", span="77-77"];
m12_93 [cluster="Unk.DeleteJobFromQueue", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.DeleteJobFromQueue", span=""];
m12_12 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="SqlServerWriteOnlyTransaction.cs", label="_context.SharedContext.StateMachineFactory\r\n                .Setup(x => x.Create(_connection.Object))\r\n                .Returns(_stateMachine.Object)", span="51-53"];
m12_60 [cluster="HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="112-112"];
m12_72 [cluster="HangFire.Web.Pager.AddPageNumbers(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SqlServerWriteOnlyTransaction.cs", label="pageIndex++", span="136-136"];
m12_24 [cluster="HangFire.Web.Pager.GenerateItems()", file="SqlServerWriteOnlyTransaction.cs", label="_startPageIndex = 1", span="71-71"];
m12_94 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", span="98-98"];
m12_95 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="SqlServerWriteOnlyTransaction.cs", label="_stateMachine\r\n                .Setup(x => x.TryToChangeState(\r\n                    JobId, It.IsAny<ProcessingState>(), It.IsAny<string[]>()))\r\n                .InSequence()\r\n                .Returns(true)", span="101-105"];
m12_96 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="SqlServerWriteOnlyTransaction.cs", label="_process.Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .InSequence()", span="107-108"];
m12_97 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="SqlServerWriteOnlyTransaction.cs", label="_stateMachine\r\n                .Setup(x => x.TryToChangeState(\r\n                    JobId, It.IsAny<SucceededState>(), It.IsAny<string[]>()))\r\n                .InSequence()\r\n                .Returns(true)", span="110-114"];
m12_98 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="SqlServerWriteOnlyTransaction.cs", label="var worker = CreateWorker()", span="116-116"];
m12_99 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="SqlServerWriteOnlyTransaction.cs", label="worker.Execute(_token)", span="119-119"];
m12_100 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", span="98-98"];
m12_16 [cluster="HangFire.Web.Pager.RecordsPerPageUrl(int)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="perPage <= 0", prediction=160, span="60-60"];
m12_207 [cluster="HangFire.Common.JobLoadException.JobLoadException()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Common.JobLoadException.JobLoadException()", span="33-33"];
m12_20 [cluster="HangFire.Web.Pager.GenerateItems()", file="SqlServerWriteOnlyTransaction.cs", label="_startPageIndex = CurrentPage - (PageItemsCount / 2)", span="67-67"];
m12_108 [cluster="Unk.Run", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Run", span=""];
m12_0 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", span="25-25"];
m12_5 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", prediction=161, span="33-33"];
m12_4 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="SqlServerWriteOnlyTransaction.cs", label="_connection = new Mock<IStorageConnection>()", span="31-31"];
m12_1 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="SqlServerWriteOnlyTransaction.cs", label="_context = new WorkerContextMock()", span="27-27"];
m12_2 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="SqlServerWriteOnlyTransaction.cs", label="_storage = _context.SharedContext.Storage", span="28-28"];
m12_3 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="SqlServerWriteOnlyTransaction.cs", label="_process = _context.SharedContext.PerformanceProcess", span="29-29"];
m12_165 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", span="200-200"];
m12_166 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="SqlServerWriteOnlyTransaction.cs", label="var exception = new InvalidOperationException()", span="203-203"];
m12_167 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="SqlServerWriteOnlyTransaction.cs", label="_process\r\n                .Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .Throws(exception)", span="204-206"];
m12_170 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="SqlServerWriteOnlyTransaction.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason.Contains(''Internal'')),\r\n                It.IsAny<string[]>()))", span="214-217"];
m12_168 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="SqlServerWriteOnlyTransaction.cs", label="var worker = CreateWorker()", span="208-208"];
m12_169 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="SqlServerWriteOnlyTransaction.cs", label="worker.Execute(_token)", span="211-211"];
m12_171 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", span="200-200"];
m12_172 [cluster="System.InvalidOperationException.InvalidOperationException()", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m12_191 [cluster="HangFire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", span="22-22"];
m12_38 [cluster="HangFire.Web.Pager.GenerateItems()", file="SqlServerWriteOnlyTransaction.cs", label="pagerItems.Add(new Item(TotalPageCount, false, ItemType.Page))", span="98-98"];
m12_47 [cluster="HangFire.Web.Pager.AddPageNumbers(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Web.Pager.AddPageNumbers(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="134-134"];
m12_216 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Method()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Method()", span="265-265"];
m12_154 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", span="187-187"];
m12_155 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="SqlServerWriteOnlyTransaction.cs", label="var worker = CreateWorker()", span="189-189"];
m12_156 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="SqlServerWriteOnlyTransaction.cs", label="worker.Execute(_token)", span="191-191"];
m12_157 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="SqlServerWriteOnlyTransaction.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<SucceededState>(),\r\n                It.Is<string[]>(states => states.Length == 1 && states[0] == ProcessingState.StateName)))", span="193-196"];
m12_158 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", span="187-187"];
m12_49 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Create(_connection.Object)", span="52-52"];
m12_74 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="79-79"];
m12_75 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.GetConnection()", span="79-79"];
m12_76 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="79-79"];
m12_28 [cluster="HangFire.Web.Pager.GenerateItems()", file="SqlServerWriteOnlyTransaction.cs", label="var pagerItems = new List<Item>()", span="78-78"];
m12_101 [cluster="Unk.InSequence", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.InSequence", span=""];
m12_184 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", span="221-221"];
m12_185 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="SqlServerWriteOnlyTransaction.cs", label="var exception = new InvalidOperationException()", span="224-224"];
m12_186 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="SqlServerWriteOnlyTransaction.cs", label="_process\r\n                .Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .Throws(new JobPerformanceException(''hello'', exception))", span="225-227"];
m12_189 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="SqlServerWriteOnlyTransaction.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason == ''hello''),\r\n                It.IsAny<string[]>()))", span="235-238"];
m12_187 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="SqlServerWriteOnlyTransaction.cs", label="var worker = CreateWorker()", span="229-229"];
m12_188 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="SqlServerWriteOnlyTransaction.cs", label="worker.Execute(_token)", span="232-232"];
m12_190 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", span="221-221"];
m12_15 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", span="25-25"];
m12_17 [cluster="Mock<IStorageConnection>.cstr", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="Entry Mock<IStorageConnection>.cstr", prediction=162, span=""];
m12_18 [cluster="Unk.Setup", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Setup", span=""];
m12_19 [cluster="Unk.Returns", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Returns", span=""];
m12_44 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="46-46"];
m12_77 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="80-80"];
m12_78 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Dispose()", span="80-80"];
m12_79 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="80-80"];
m12_80 [cluster="Unk.Dispose", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Dispose", span=""];
m12_123 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", span="138-138"];
m12_124 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="SqlServerWriteOnlyTransaction.cs", label="var worker = CreateWorker()", span="140-140"];
m12_125 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="SqlServerWriteOnlyTransaction.cs", label="worker.Execute(_token)", span="142-142"];
m12_126 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="SqlServerWriteOnlyTransaction.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<ProcessingState>(),\r\n                It.Is<string[]>(\r\n                    states => states.Length == 2 &&\r\n                        states[0] == EnqueuedState.StateName && states[1] == ProcessingState.StateName)))", span="144-149"];
m12_127 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", span="138-138"];
m12_134 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", span="153-153"];
m12_135 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="SqlServerWriteOnlyTransaction.cs", label="_stateMachine\r\n                .Setup(x => x.TryToChangeState(\r\n                    It.IsAny<string>(),\r\n                    It.IsAny<ProcessingState>(),\r\n                    It.IsAny<string[]>()))\r\n                .Returns(false)", span="156-161"];
m12_136 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="SqlServerWriteOnlyTransaction.cs", label="var worker = CreateWorker()", span="163-163"];
m12_137 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="SqlServerWriteOnlyTransaction.cs", label="worker.Execute(_token)", span="166-166"];
m12_138 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="SqlServerWriteOnlyTransaction.cs", label="_process.Verify(\r\n                x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()),\r\n                Times.Never)", span="169-171"];
m12_139 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", span="153-153"];
m12_39 [cluster="HangFire.Web.Pager.GenerateItems()", file="SqlServerWriteOnlyTransaction.cs", label="AddNext(pagerItems)", span="101-101"];
m12_68 [cluster="HangFire.Web.Pager.AddPageNumbers(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SqlServerWriteOnlyTransaction.cs", label="var pageIndex = _startPageIndex", span="136-136"];
m12_69 [cluster="HangFire.Web.Pager.AddPageNumbers(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SqlServerWriteOnlyTransaction.cs", label="pageIndex <= _endPageIndex", span="136-136"];
m12_70 [cluster="HangFire.Web.Pager.AddPageNumbers(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SqlServerWriteOnlyTransaction.cs", label="var item = new Item(pageIndex, false, ItemType.Page)", span="138-138"];
m12_173 [cluster="Unk.Throws", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Throws", span=""];
m12_55 [cluster="HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SqlServerWriteOnlyTransaction.cs", label="var index = _startPageIndex - 1", span="116-116"];
m12_211 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="254-257"];
m12_25 [cluster="HangFire.Web.Pager.GenerateItems()", file="SqlServerWriteOnlyTransaction.cs", label="_endPageIndex = _startPageIndex + PageItemsCount - 1", span="74-74"];
m12_29 [cluster="HangFire.Web.Pager.GenerateItems()", file="SqlServerWriteOnlyTransaction.cs", label="TotalPageCount == 0", span="79-79"];
m12_32 [cluster="HangFire.Web.Pager.GenerateItems()", file="SqlServerWriteOnlyTransaction.cs", label="_startPageIndex > 1", span="84-84"];
m12_35 [cluster="HangFire.Web.Pager.GenerateItems()", file="SqlServerWriteOnlyTransaction.cs", label="AddPageNumbers(pagerItems)", span="91-91"];
m12_40 [cluster="HangFire.Web.Pager.GenerateItems()", file="SqlServerWriteOnlyTransaction.cs", label="return pagerItems;", span="103-103"];
m12_52 [cluster="HangFire.Web.Pager.AddPrevious(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Web.Pager.AddPrevious(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="106-106"];
m12_26 [cluster="HangFire.Web.Pager.GenerateItems()", file="SqlServerWriteOnlyTransaction.cs", label="_endPageIndex > TotalPageCount", span="75-75"];
m12_27 [cluster="HangFire.Web.Pager.GenerateItems()", file="SqlServerWriteOnlyTransaction.cs", label="_endPageIndex = TotalPageCount", span="76-76"];
m12_31 [cluster="HangFire.Web.Pager.GenerateItems()", file="SqlServerWriteOnlyTransaction.cs", label="AddPrevious(pagerItems)", span="81-81"];
m12_34 [cluster="HangFire.Web.Pager.GenerateItems()", file="SqlServerWriteOnlyTransaction.cs", label="AddMoreBefore(pagerItems)", span="88-88"];
m12_37 [cluster="HangFire.Web.Pager.GenerateItems()", file="SqlServerWriteOnlyTransaction.cs", label="_endPageIndex < TotalPageCount", span="97-97"];
m12_41 [cluster="HangFire.Web.Pager.GenerateItems()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Web.Pager.GenerateItems()", span="64-64"];
m12_45 [cluster="System.Collections.Generic.List<T>.Add(T)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m12_46 [cluster="HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="112-112"];
m12_50 [cluster="HangFire.Web.Pager.AddPrevious(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SqlServerWriteOnlyTransaction.cs", label="var item = new Item(CurrentPage - 1, CurrentPage == 1, ItemType.PrevPage)", span="108-108"];
m12_54 [cluster="HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SqlServerWriteOnlyTransaction.cs", label="_startPageIndex > 2", span="114-114"];
m12_87 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="91-91"];
m12_90 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="94-94"];
m12_88 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.FetchNextJob(_context.SharedContext.Queues, _token)", span="91-91"];
m12_89 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="91-91"];
m12_91 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.DeleteJobFromQueue(JobId, Queue)", span="94-94"];
m12_92 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="94-94"];
m12_102 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="102-103"];
m12_105 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="107-107"];
m12_109 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="111-112"];
m12_103 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.TryToChangeState(\r\n                    JobId, It.IsAny<ProcessingState>(), It.IsAny<string[]>())", span="102-103"];
m12_104 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="102-103"];
m12_106 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="107-107"];
m12_107 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="107-107"];
m12_110 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.TryToChangeState(\r\n                    JobId, It.IsAny<SucceededState>(), It.IsAny<string[]>())", span="111-112"];
m12_111 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="111-112"];
m12_117 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="131-134"];
m12_118 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.Is<ProcessingState>(state => state.ServerName == _context.Object.ServerId),\r\n                It.IsAny<string[]>())", span="131-134"];
m12_119 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="131-134"];
m12_120 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="133-133"];
m12_121 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="state.ServerName == _context.Object.ServerId", span="133-133"];
m12_122 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="133-133"];
m12_128 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="144-149"];
m12_129 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<ProcessingState>(),\r\n                It.Is<string[]>(\r\n                    states => states.Length == 2 &&\r\n                        states[0] == EnqueuedState.StateName && states[1] == ProcessingState.StateName))", span="144-149"];
m12_130 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="144-149"];
m12_131 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="148-149"];
m12_132 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="states.Length == 2 &&\r\n                        states[0] == EnqueuedState.StateName && states[1] == ProcessingState.StateName", span="148-149"];
m12_133 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="148-149"];
m12_140 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="157-160"];
m12_143 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="170-170"];
m12_141 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.TryToChangeState(\r\n                    It.IsAny<string>(),\r\n                    It.IsAny<ProcessingState>(),\r\n                    It.IsAny<string[]>())", span="157-160"];
m12_142 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="157-160"];
m12_144 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="170-170"];
m12_145 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="170-170"];
m12_151 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="181-183"];
m12_152 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Run(\r\n                It.IsNotNull<PerformContext>(),\r\n                It.IsNotNull<IJobPerformer>())", span="181-183"];
m12_153 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="181-183"];
m12_159 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="193-196"];
m12_160 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<SucceededState>(),\r\n                It.Is<string[]>(states => states.Length == 1 && states[0] == ProcessingState.StateName))", span="193-196"];
m12_161 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="193-196"];
m12_162 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="196-196"];
m12_163 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="states.Length == 1 && states[0] == ProcessingState.StateName", span="196-196"];
m12_164 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="196-196"];
m12_178 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.TryToChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason.Contains(''Internal'')),\r\n                It.IsAny<string[]>())", span="214-217"];
m12_181 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="state.Exception == exception && state.Reason.Contains(''Internal'')", span="216-216"];
m12_174 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="205-205"];
m12_177 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="214-217"];
m12_175 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="205-205"];
m12_176 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="205-205"];
m12_179 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="214-217"];
m12_180 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="216-216"];
m12_182 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="216-216"];
m12_196 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.TryToChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason == ''hello''),\r\n                It.IsAny<string[]>())", span="235-238"];
m12_199 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="state.Exception == exception && state.Reason == ''hello''", span="237-237"];
m12_192 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="226-226"];
m12_195 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="235-238"];
m12_193 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="226-226"];
m12_194 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="226-226"];
m12_197 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="235-238"];
m12_198 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="237-237"];
m12_200 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="237-237"];
m12_208 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="245-245"];
m12_209 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.GetJobData(JobId)", span="245-245"];
m12_210 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="245-245"];
m12_212 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.TryToChangeState(\r\n                JobId,\r\n                It.IsAny<FailedState>(),\r\n                It.IsAny<string[]>())", span="254-257"];
m12_213 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="254-257"];
m12_112 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", span="125-125"];
m12_113 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="SqlServerWriteOnlyTransaction.cs", label="var worker = CreateWorker()", span="127-127"];
m12_115 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="SqlServerWriteOnlyTransaction.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.Is<ProcessingState>(state => state.ServerName == _context.Object.ServerId),\r\n                It.IsAny<string[]>()))", span="131-134"];
m12_116 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", span="125-125"];
m12_81 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", file="SqlServerWriteOnlyTransaction.cs", label="HangFire.Web.Pager", span=""];
m12_82 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", file="SqlServerWriteOnlyTransaction.cs", label="HangFire.Web.Pager.Item", span=""];
m12_83 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", file="SqlServerWriteOnlyTransaction.cs", label="worker.Execute(_token)", span="88-88"];
m12_84 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", file="SqlServerWriteOnlyTransaction.cs", label="_connection.Verify(\r\n                x => x.FetchNextJob(_context.SharedContext.Queues, _token),\r\n                Times.Once)", span="90-92"];
m12_85 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", file="SqlServerWriteOnlyTransaction.cs", label="_connection.Verify(x => x.DeleteJobFromQueue(JobId, Queue))", span="94-94"];
m12_86 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", span="84-84"];
m12_183 [cluster="Unk.Contains", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Contains", span=""];
m12_71 [cluster="HangFire.Web.Pager.AddPageNumbers(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SqlServerWriteOnlyTransaction.cs", label="results.Add(item)", span="139-139"];
m12_214 [cluster="HangFire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="SqlServerWriteOnlyTransaction.cs", label="return new Worker(_context.Object);", span="262-262"];
m12_215 [cluster="HangFire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.CreateWorker()", span="260-260"];
m12_73 [cluster="HangFire.Web.Pager.AddPageNumbers(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Web.Pager.AddPageNumbers(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="134-134"];
m12_21 [cluster="HangFire.Storage.JobData.JobData()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Storage.JobData.JobData()", span="20-20"];
m12_22 [cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="116-116"];
m12_23 [cluster="Mock<IStateMachine>.cstr", file="SqlServerWriteOnlyTransaction.cs", label="Entry Mock<IStateMachine>.cstr", span=""];
m12_59 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", prediction=163, span="64-64"];
m12_58 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="SqlServerWriteOnlyTransaction.cs", label="Assert.Equal(''context'', exception.ParamName)", span="69-69"];
m12_56 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", span="64-64"];
m12_57 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="SqlServerWriteOnlyTransaction.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(null))", span="66-67"];
m12_43 [cluster="Unk.GetJobData", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.GetJobData", span=""];
m12_51 [cluster="Unk.Create", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Create", span=""];
m12_146 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", span="175-175"];
m12_147 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="SqlServerWriteOnlyTransaction.cs", label="var worker = CreateWorker()", span="177-177"];
m12_148 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="SqlServerWriteOnlyTransaction.cs", label="worker.Execute(_token)", span="179-179"];
m12_149 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="SqlServerWriteOnlyTransaction.cs", label="_process.Verify(x => x.Run(\r\n                It.IsNotNull<PerformContext>(),\r\n                It.IsNotNull<IJobPerformer>()))", span="181-183"];
m12_150 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", span="175-175"];
m12_217 [file="SqlServerWriteOnlyTransaction.cs", label="HangFire.Core.Tests.Server.WorkerFacts", span=""];
m12_218 [file="SqlServerWriteOnlyTransaction.cs", label=exception, span=""];
m12_219 [file="SqlServerWriteOnlyTransaction.cs", label=exception, span=""];
n59 -> n1  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n6  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n8  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n9  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n11  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n12  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n13  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n14  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n15  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n16  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n17  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n18  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n19  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n20  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n21  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n23  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n24  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n26  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n27  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n28  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n29  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n30  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n31  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n32  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n34  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n35  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n36  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n37  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n39  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n40  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n41  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n42  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n43  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n44  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n45  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n46  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n59 -> n47  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n5 -> n7  [color=darkseagreen4, key=1, label=queues, style=dashed];
n5 -> n10  [color=darkseagreen4, key=1, label=queues, style=dashed];
n10 -> n12  [color=darkseagreen4, key=1, label=queue, style=dashed];
n10 -> n14  [color=darkseagreen4, key=1, label=queue, style=dashed];
n10 -> n16  [color=darkseagreen4, key=1, label=queue, style=dashed];
n10 -> n18  [color=darkseagreen4, key=1, label=queue, style=dashed];
n10 -> n20  [color=darkseagreen4, key=1, label=queue, style=dashed];
n10 -> n22  [color=darkseagreen4, key=1, label=queue, style=dashed];
n10 -> n25  [color=darkseagreen4, key=1, label=queue, style=dashed];
n25 -> n27  [color=darkseagreen4, key=1, label=job, style=dashed];
n27 -> n27  [color=darkseagreen4, key=1, label=job, style=dashed];
n27 -> n29  [color=darkseagreen4, key=1, label=job, style=dashed];
n29 -> n29  [color=darkseagreen4, key=1, label=job, style=dashed];
n29 -> n31  [color=darkseagreen4, key=1, label=job, style=dashed];
n31 -> n31  [color=darkseagreen4, key=1, label=job, style=dashed];
n31 -> n33  [color=darkseagreen4, key=1, label=job, style=dashed];
n33 -> n33  [color=darkseagreen4, key=1, label=job, style=dashed];
n33 -> n36  [color=darkseagreen4, key=1, label=job, style=dashed];
n36 -> n36  [color=darkseagreen4, key=1, label=job, style=dashed];
n36 -> n38  [color=darkseagreen4, key=1, label=job, style=dashed];
n38 -> n38  [color=darkseagreen4, key=1, label=job, style=dashed];
n38 -> n40  [color=darkseagreen4, key=1, label=job, style=dashed];
n40 -> n40  [color=darkseagreen4, key=1, label=job, style=dashed];
n40 -> n42  [color=darkseagreen4, key=1, label=job, style=dashed];
n42 -> n42  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_9 -> m0_17  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m0_9 -> m0_20  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m0_10 -> m0_16  [color=darkseagreen4, key=1, label=table, style=dashed];
m0_17 -> m0_17  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m0_20 -> m0_20  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m0_18 -> m0_18  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m0_18 -> m0_20  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m0_33 -> m0_20  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.ExpirationManager", style=dashed];
m2_12 -> m2_7  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider", style=dashed];
m2_12 -> m2_10  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider", style=dashed];
m3_30 -> m3_32  [color=darkseagreen4, key=1, label=processingJob, style=dashed];
m3_0 -> m3_3  [color=darkseagreen4, key=1, label=ConnectionFactory, style=dashed];
m3_0 -> m3_6  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_5 -> m3_10  [color=green, key=1, label="lambda expression", style=dashed];
m3_15 -> m3_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_23 -> m3_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_18 -> m3_6  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueueProvider", style=dashed];
m3_18 -> m3_13  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueueProvider", style=dashed];
m3_18 -> m3_16  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueueProvider", style=dashed];
m3_38 -> m3_42  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_48 -> m3_19  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts", style=dashed];
m3_48 -> m3_27  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts", style=dashed];
m3_48 -> m3_38  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts", style=dashed];
m3_48 -> m3_46  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts", style=dashed];
m4_131 -> m4_134  [color=darkseagreen4, key=1, label=double, style=dashed];
m4_136 -> m4_139  [color=green, key=1, label="lambda expression", style=dashed];
m4_5 -> m4_10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_265 -> m4_267  [color=green, key=1, label="lambda expression", style=dashed];
m4_18 -> m4_18  [color=green, key=1, label="lambda expression", style=dashed];
m4_18 -> m4_21  [color=green, key=1, label=providers, style=dashed];
m4_172 -> m4_175  [color=darkseagreen4, key=1, label="Hangfire.Server.ServerContext", style=dashed];
m4_178 -> m4_181  [color=green, key=1, label="lambda expression", style=dashed];
m4_195 -> m4_197  [color=green, key=1, label="lambda expression", style=dashed];
m4_224 -> m4_226  [color=green, key=1, label="lambda expression", style=dashed];
m4_297 -> m4_299  [color=green, key=1, label="lambda expression", style=dashed];
m4_256 -> m4_258  [color=green, key=1, label="lambda expression", style=dashed];
m4_318 -> m4_320  [color=green, key=1, label="lambda expression", style=dashed];
m4_67 -> m4_41  [color=green, key=1, label="lambda expression", style=dashed];
m4_158 -> m4_161  [color=green, key=1, label="lambda expression", style=dashed];
m4_100 -> m4_103  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_105 -> m4_108  [color=green, key=1, label="lambda expression", style=dashed];
m4_234 -> m4_236  [color=green, key=1, label="lambda expression", style=dashed];
m4_247 -> m4_249  [color=green, key=1, label="lambda expression", style=dashed];
m4_0 -> m4_3  [color=green, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m4_111 -> m4_114  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_116 -> m4_118  [color=green, key=1, label="lambda expression", style=dashed];
m4_187 -> m4_189  [color=green, key=1, label="lambda expression", style=dashed];
m4_89 -> m4_91  [color=green, key=1, label="lambda expression", style=dashed];
m4_309 -> m4_311  [color=green, key=1, label="lambda expression", style=dashed];
m4_41 -> m4_47  [color=green, key=1, label=invocationData, style=dashed];
m4_40 -> m4_47  [color=green, key=1, label=createJobSql, style=dashed];
m4_142 -> m4_145  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m4_142 -> m4_152  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m4_148 -> m4_151  [color=green, key=1, label="lambda expression", style=dashed];
m4_25 -> m4_54  [color=green, key=1, label=SqlConnection, style=dashed];
m4_47 -> m4_55  [color=green, key=1, label=jobId, style=dashed];
m4_47 -> m4_1  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.ProcessingJobFacts", style=dashed];
m4_47 -> m4_29  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.ProcessingJobFacts", style=dashed];
m4_49 -> m4_54  [color=green, key=1, label=parameterArray, style=dashed];
m4_162 -> m4_166  [color=green, key=1, label="lambda expression", style=dashed];
m4_162 -> m4_169  [color=green, key=1, label="lambda expression", style=dashed];
m4_237 -> m4_240  [color=green, key=1, label=result, style=dashed];
m4_268 -> m4_271  [color=green, key=1, label=result, style=dashed];
m4_300 -> m4_303  [color=green, key=1, label=result, style=dashed];
m4_273 -> m4_276  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_279 -> m4_281  [color=green, key=1, label="lambda expression", style=dashed];
m4_214 -> m4_216  [color=green, key=1, label="lambda expression", style=dashed];
m4_124 -> m4_126  [color=green, key=1, label="lambda expression", style=dashed];
m4_288 -> m4_290  [color=green, key=1, label="lambda expression", style=dashed];
m4_203 -> m4_207  [color=green, key=1, label="lambda expression", style=dashed];
m4_201 -> m4_201  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m4_323 -> m4_3  [color=green, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m4_323 -> m4_7  [color=green, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m4_323 -> m4_11  [color=green, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m4_323 -> m4_18  [color=green, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m4_323 -> m4_32  [color=green, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m4_324 -> m4_47  [color=green, key=1, label="System.DateTime", style=dashed];
m4_325 -> m4_47  [color=green, key=1, label="System.TimeSpan", style=dashed];
m4_326 -> m4_47  [color=green, key=1, label=createJobSql, style=dashed];
m4_327 -> m4_47  [color=green, key=1, label=invocationData, style=dashed];
m4_328 -> m4_48  [color=green, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m4_328 -> m4_51  [color=green, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m4_342 -> m4_152  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m5_27 -> m5_27  [color=green, key=1, label=string, style=dashed];
m5_0 -> m5_2  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_0 -> m5_3  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m5_0 -> m5_4  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m5_0 -> m5_5  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m5_16 -> m5_19  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_16 -> m5_21  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_35 -> m5_27  [color=green, key=1, label="HangFire.Client.ClientJobDescriptor", style=dashed];
m5_35 -> m5_32  [color=green, key=1, label="HangFire.Client.ClientJobDescriptor", style=dashed];
m5_35 -> m5_19  [color=darkseagreen4, key=1, label="HangFire.Client.ClientJobDescriptor", style=dashed];
m5_39 -> m5_19  [color=darkseagreen4, key=1, label="HangFire.Client.ClientJobDescriptor", style=dashed];
m5_39 -> m5_21  [color=darkseagreen4, key=1, label="HangFire.Client.ClientJobDescriptor", style=dashed];
m5_39 -> m5_35  [color=darkseagreen4, key=1, label="HangFire.Client.ClientJobDescriptor", style=dashed];
m5_39 -> m5_36  [color=darkseagreen4, key=1, label="HangFire.Client.ClientJobDescriptor", style=dashed];
m6_0 -> m6_3  [color=darkseagreen4, key=1, label="Hangfire.States.IState", style=dashed];
m6_20 -> m6_11  [color=darkseagreen4, key=1, label="Hangfire.States.ElectStateContext", style=dashed];
m6_20 -> m6_16  [color=darkseagreen4, key=1, label="Hangfire.States.ElectStateContext", style=dashed];
m7_0 -> m7_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m7_43 -> m7_45  [color=green, key=1, label="lambda expression", style=dashed];
m7_9 -> m7_12  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m7_9 -> m7_18  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_19 -> m7_34  [color=green, key=1, label="lambda expression", style=dashed];
m7_19 -> m7_25  [color=green, key=1, label=fetchedJob, style=dashed];
m7_19 -> m7_26  [color=green, key=1, label=fetchedJob, style=dashed];
m7_18 -> m7_18  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_18 -> m7_22  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_16 -> m7_21  [color=darkseagreen4, key=1, label=fetchConditions, style=dashed];
m7_17 -> m7_21  [color=darkseagreen4, key=1, label=currentQueryIndex, style=dashed];
m7_22 -> m7_22  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_23 -> m7_23  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_49 -> m7_26  [color=green, key=1, label="Hangfire.SqlServer.SqlServerJobQueue", style=dashed];
m7_49 -> m7_22  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueue", style=dashed];
m8_54 -> m8_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_54 -> m8_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_45 -> m8_51  [color=green, key=1, label=scheduledJobs, style=dashed];
m8_50 -> m8_53  [color=green, key=1, label=pipeline, style=dashed];
m8_50 -> m8_54  [color=green, key=1, label=pipeline, style=dashed];
m8_50 -> m8_55  [color=green, key=1, label=pipeline, style=dashed];
m8_52 -> m8_65  [color=green, key=1, label=job, style=dashed];
m8_52 -> m8_70  [color=green, key=1, label=job, style=dashed];
m8_52 -> m8_54  [color=green, key=1, label=job, style=dashed];
m8_52 -> m8_74  [color=green, key=1, label=job, style=dashed];
m8_52 -> m8_78  [color=green, key=1, label=job, style=dashed];
m8_56 -> m8_80  [color=green, key=1, label="lambda expression", style=dashed];
m8_56 -> m8_83  [color=green, key=1, label="lambda expression", style=dashed];
m8_48 -> m8_53  [color=green, key=1, label=jobs, style=dashed];
m8_48 -> m8_70  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m8_49 -> m8_54  [color=green, key=1, label=states, style=dashed];
m8_49 -> m8_78  [color=green, key=1, label=states, style=dashed];
m8_53 -> m8_64  [color=green, key=1, label="lambda expression", style=dashed];
m8_53 -> m8_69  [color=green, key=1, label="lambda expression", style=dashed];
m8_26 -> m8_32  [color=green, key=1, label="lambda expression", style=dashed];
m8_26 -> m8_40  [color=green, key=1, label="lambda expression", style=dashed];
m8_173 -> m8_344  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m8_173 -> m8_352  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m8_173 -> m8_336  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m8_173 -> m8_338  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m8_173 -> m8_334  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<string>", style=dashed];
m8_173 -> m8_337  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m8_173 -> m8_362  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>", style=dashed];
m8_336 -> m8_343  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_336 -> m8_346  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_338 -> m8_351  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_338 -> m8_354  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_333 -> m8_336  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m8_333 -> m8_338  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m8_333 -> m8_339  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m8_335 -> m8_344  [color=darkseagreen4, key=1, label=id, style=dashed];
m8_335 -> m8_352  [color=darkseagreen4, key=1, label=id, style=dashed];
m8_335 -> m8_338  [color=darkseagreen4, key=1, label=id, style=dashed];
m8_335 -> m8_347  [color=darkseagreen4, key=1, label=id, style=dashed];
m8_335 -> m8_348  [color=darkseagreen4, key=1, label=id, style=dashed];
m8_335 -> m8_355  [color=darkseagreen4, key=1, label=id, style=dashed];
m8_335 -> m8_356  [color=darkseagreen4, key=1, label=id, style=dashed];
m8_331 -> m8_336  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m8_331 -> m8_348  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m8_331 -> m8_347  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m8_332 -> m8_338  [color=darkseagreen4, key=1, label=states, style=dashed];
m8_332 -> m8_356  [color=darkseagreen4, key=1, label=states, style=dashed];
m8_332 -> m8_355  [color=darkseagreen4, key=1, label=states, style=dashed];
m8_340 -> m8_358  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_340 -> m8_361  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_11 -> m8_13  [color=green, key=1, label=string, style=dashed];
m8_219 -> m8_299  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_283 -> m8_289  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_283 -> m8_291  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_282 -> m8_287  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m8_284 -> m8_287  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_284 -> m8_289  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_284 -> m8_290  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_281 -> m8_298  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_290 -> m8_290  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_275 -> m8_289  [color=darkseagreen4, key=1, label=dates, style=dashed];
m8_275 -> m8_285  [color=darkseagreen4, key=1, label=dates, style=dashed];
m8_275 -> m8_278  [color=darkseagreen4, key=1, label=dates, style=dashed];
m8_274 -> m8_278  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m8_276 -> m8_280  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_280 -> m8_280  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_239 -> m8_247  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_245 -> m8_247  [color=darkseagreen4, key=1, label=stateMachine, style=dashed];
m8_41 -> m8_41  [color=green, key=1, label="System.Collections.Generic.KeyValuePair<string, HangFire.Web.ProcessingJobDto>", style=dashed];
m8_346 -> m8_348  [color=darkseagreen4, key=1, label="?", style=dashed];
m8_354 -> m8_356  [color=darkseagreen4, key=1, label="?", style=dashed];
m8_362 -> m8_367  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_138 -> m8_141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_148 -> m8_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_164 -> m8_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_164 -> m8_179  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_165 -> m8_182  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_165 -> m8_185  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_166 -> m8_188  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_166 -> m8_191  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_163 -> m8_167  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m8_159 -> m8_183  [color=darkseagreen4, key=1, label=queue, style=dashed];
m8_159 -> m8_189  [color=darkseagreen4, key=1, label=queue, style=dashed];
m8_159 -> m8_177  [color=darkseagreen4, key=1, label=queue, style=dashed];
m8_168 -> m8_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_157 -> m8_159  [color=darkseagreen4, key=1, label=queues, style=dashed];
m8_158 -> m8_170  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_102 -> m8_107  [color=darkseagreen4, key=1, label=servers, style=dashed];
m8_102 -> m8_120  [color=darkseagreen4, key=1, label=servers, style=dashed];
m8_103 -> m8_108  [color=darkseagreen4, key=1, label=queues, style=dashed];
m8_103 -> m8_127  [color=darkseagreen4, key=1, label=queues, style=dashed];
m8_107 -> m8_116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_107 -> m8_119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_108 -> m8_122  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_108 -> m8_126  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_104 -> m8_107  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m8_104 -> m8_108  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m8_104 -> m8_109  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m8_110 -> m8_129  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_106 -> m8_108  [color=darkseagreen4, key=1, label=name, style=dashed];
m8_106 -> m8_120  [color=darkseagreen4, key=1, label=name, style=dashed];
m8_106 -> m8_127  [color=darkseagreen4, key=1, label=name, style=dashed];
m8_106 -> m8_117  [color=darkseagreen4, key=1, label=name, style=dashed];
m8_106 -> m8_123  [color=darkseagreen4, key=1, label=name, style=dashed];
m8_99 -> m8_105  [color=darkseagreen4, key=1, label=serverNames, style=dashed];
m8_379 -> m8_392  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_379 -> m8_396  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_380 -> m8_399  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_380 -> m8_402  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_381 -> m8_405  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_381 -> m8_408  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_382 -> m8_411  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_382 -> m8_414  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_383 -> m8_417  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_383 -> m8_421  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_384 -> m8_425  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_384 -> m8_428  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_387 -> m8_431  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_387 -> m8_434  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_378 -> m8_388  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m8_386 -> m8_432  [color=darkseagreen4, key=1, label=queueName, style=dashed];
m8_376 -> m8_389  [color=darkseagreen4, key=1, label=stats, style=dashed];
m8_377 -> m8_385  [color=darkseagreen4, key=1, label=queues, style=dashed];
m8_92 -> m8_327  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_312 -> m8_318  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_312 -> m8_320  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_311 -> m8_316  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m8_313 -> m8_316  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_313 -> m8_318  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_313 -> m8_319  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_310 -> m8_326  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_319 -> m8_319  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_305 -> m8_318  [color=darkseagreen4, key=1, label=dates, style=dashed];
m8_305 -> m8_307  [color=darkseagreen4, key=1, label=dates, style=dashed];
m8_309 -> m8_314  [color=darkseagreen4, key=1, label=stringDates, style=dashed];
m8_309 -> m8_323  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_303 -> m8_306  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m8_303 -> m8_307  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m8_304 -> m8_306  [color=darkseagreen4, key=1, label=startDate, style=dashed];
m8_257 -> m8_264  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_257 -> m8_268  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_257 -> m8_271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_254 -> m8_265  [color=darkseagreen4, key=1, label=hiddenProperties, style=dashed];
m8_5 -> m8_7  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_209 -> m8_211  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_224 -> m8_232  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_230 -> m8_232  [color=darkseagreen4, key=1, label=stateMachine, style=dashed];
m8_201 -> m8_203  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_438 -> m8_70  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m8_439 -> m8_78  [color=darkseagreen4, key=1, label=states, style=dashed];
m8_437 -> m8_78  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_437 -> m8_65  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_437 -> m8_70  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_437 -> m8_74  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_447 -> m8_344  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m8_448 -> m8_344  [color=darkseagreen4, key=1, label=id, style=dashed];
m8_448 -> m8_352  [color=darkseagreen4, key=1, label=id, style=dashed];
m8_448 -> m8_347  [color=darkseagreen4, key=1, label=id, style=dashed];
m8_448 -> m8_348  [color=darkseagreen4, key=1, label=id, style=dashed];
m8_448 -> m8_355  [color=darkseagreen4, key=1, label=id, style=dashed];
m8_448 -> m8_356  [color=darkseagreen4, key=1, label=id, style=dashed];
m8_450 -> m8_352  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m8_443 -> m8_183  [color=darkseagreen4, key=1, label=queue, style=dashed];
m8_443 -> m8_189  [color=darkseagreen4, key=1, label=queue, style=dashed];
m8_443 -> m8_177  [color=darkseagreen4, key=1, label=queue, style=dashed];
m8_454 -> m8_432  [color=darkseagreen4, key=1, label=queueName, style=dashed];
m8_441 -> m8_120  [color=darkseagreen4, key=1, label=servers, style=dashed];
m8_442 -> m8_127  [color=darkseagreen4, key=1, label=queues, style=dashed];
m8_440 -> m8_120  [color=darkseagreen4, key=1, label=name, style=dashed];
m8_440 -> m8_127  [color=darkseagreen4, key=1, label=name, style=dashed];
m8_440 -> m8_117  [color=darkseagreen4, key=1, label=name, style=dashed];
m8_440 -> m8_123  [color=darkseagreen4, key=1, label=name, style=dashed];
m8_449 -> m8_348  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m8_449 -> m8_347  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m8_451 -> m8_356  [color=darkseagreen4, key=1, label=states, style=dashed];
m8_451 -> m8_355  [color=darkseagreen4, key=1, label=states, style=dashed];
m8_446 -> m8_327  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_444 -> m8_265  [color=darkseagreen4, key=1, label=hiddenProperties, style=dashed];
m8_452 -> m8_362  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>", style=dashed];
m8_445 -> m8_299  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_0 -> m9_2  [color=green, key=1, label=string, style=dashed];
m9_0 -> m9_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_0 -> m9_6  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_0 -> m9_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_186 -> m10_188  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m10_186 -> m10_193  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m10_187 -> m10_189  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m10_193 -> m10_201  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_190 -> m10_195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_190 -> m10_198  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_165 -> m10_171  [color=darkseagreen4, key=1, label=filter, style=dashed];
m10_167 -> m10_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_167 -> m10_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_171 -> m10_182  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_170 -> m10_179  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_299 -> m10_301  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m10_299 -> m10_307  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m10_300 -> m10_302  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m10_307 -> m10_321  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_304 -> m10_312  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_304 -> m10_315  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_303 -> m10_309  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_305 -> m10_319  [color=darkseagreen4, key=1, label=process, style=dashed];
m10_306 -> m10_318  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_98 -> m10_107  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_99 -> m10_101  [color=darkseagreen4, key=1, label=filter, style=dashed];
m10_100 -> m10_110  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_100 -> m10_113  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_102 -> m10_117  [color=darkseagreen4, key=1, label=process, style=dashed];
m10_103 -> m10_116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_141 -> m10_143  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m10_141 -> m10_145  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m10_141 -> m10_148  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m10_142 -> m10_144  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m10_142 -> m10_146  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m10_142 -> m10_147  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m10_145 -> m10_152  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_148 -> m10_161  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_146 -> m10_155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_147 -> m10_158  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_279 -> m10_286  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_279 -> m10_292  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_277 -> m10_287  [color=darkseagreen4, key=1, label=exception, style=dashed];
m10_277 -> m10_290  [color=darkseagreen4, key=1, label=exception, style=dashed];
m10_278 -> m10_283  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_280 -> m10_296  [color=darkseagreen4, key=1, label=process, style=dashed];
m10_281 -> m10_295  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_59 -> m10_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_56 -> m10_63  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_58 -> m10_66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_235 -> m10_245  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_231 -> m10_235  [color=darkseagreen4, key=1, label=exception, style=dashed];
m10_231 -> m10_246  [color=darkseagreen4, key=1, label=exception, style=dashed];
m10_231 -> m10_249  [color=darkseagreen4, key=1, label=exception, style=dashed];
m10_232 -> m10_239  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_252 -> m10_254  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m10_252 -> m10_260  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m10_260 -> m10_268  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_256 -> m10_260  [color=darkseagreen4, key=1, label=exception, style=dashed];
m10_256 -> m10_269  [color=darkseagreen4, key=1, label=exception, style=dashed];
m10_256 -> m10_272  [color=darkseagreen4, key=1, label=exception, style=dashed];
m10_257 -> m10_262  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_258 -> m10_266  [color=darkseagreen4, key=1, label=process, style=dashed];
m10_259 -> m10_265  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_2 -> m10_14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_74 -> m10_77  [color=darkseagreen4, key=1, label=filter1, style=dashed];
m10_74 -> m10_78  [color=darkseagreen4, key=1, label=filter1, style=dashed];
m10_75 -> m10_79  [color=darkseagreen4, key=1, label=filter2, style=dashed];
m10_77 -> m10_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_76 -> m10_85  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_80 -> m10_91  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_81 -> m10_95  [color=darkseagreen4, key=1, label=process, style=dashed];
m10_82 -> m10_94  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_202 -> m10_204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_246 -> m10_248  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_269 -> m10_271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_287 -> m10_289  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_322 -> m10_324  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_33 -> m10_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_120 -> m10_122  [color=darkseagreen4, key=1, label=filter, style=dashed];
m10_120 -> m10_124  [color=darkseagreen4, key=1, label=filter, style=dashed];
m10_122 -> m10_129  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_124 -> m10_136  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_123 -> m10_133  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_331 -> m10_15  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_32  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_33  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_56  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_58  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_67  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_78  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_79  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_80  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_82  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_95  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_98  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_101  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_103  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_117  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_121  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_123  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_126  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_143  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_144  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_150  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_166  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_169  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_170  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_188  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_189  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_192  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_232  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_243  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_254  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_255  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_257  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_259  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_266  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_276  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_278  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_281  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_296  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_301  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_302  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_303  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_306  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_319  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_331 -> m10_328  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m10_334 -> m10_67  [color=darkseagreen4, key=1, label=process, style=dashed];
m10_335 -> m10_95  [color=darkseagreen4, key=1, label=process, style=dashed];
m10_336 -> m10_117  [color=darkseagreen4, key=1, label=process, style=dashed];
m10_338 -> m10_243  [color=darkseagreen4, key=1, label=process, style=dashed];
m10_339 -> m10_246  [color=darkseagreen4, key=1, label=exception, style=dashed];
m10_339 -> m10_249  [color=darkseagreen4, key=1, label=exception, style=dashed];
m10_340 -> m10_266  [color=darkseagreen4, key=1, label=process, style=dashed];
m10_341 -> m10_269  [color=darkseagreen4, key=1, label=exception, style=dashed];
m10_341 -> m10_272  [color=darkseagreen4, key=1, label=exception, style=dashed];
m10_342 -> m10_287  [color=darkseagreen4, key=1, label=exception, style=dashed];
m10_342 -> m10_290  [color=darkseagreen4, key=1, label=exception, style=dashed];
m10_343 -> m10_296  [color=darkseagreen4, key=1, label=process, style=dashed];
m10_344 -> m10_319  [color=darkseagreen4, key=1, label=process, style=dashed];
m11_122 -> m11_124  [color=darkseagreen4, key=1, label=connection, style=dashed];
m11_128 -> m11_130  [color=green, key=1, label=IDbConnection, style=dashed];
m11_48 -> m11_50  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m11_48 -> m11_51  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m11_91 -> m11_96  [color=green, key=1, label="System.Action<SqlConnection>", style=dashed];
m11_92 -> m11_95  [color=green, key=1, label="lambda expression", style=dashed];
m11_105 -> m11_110  [color=green, key=1, label="System.Action<SqlConnection>", style=dashed];
m11_106 -> m11_109  [color=green, key=1, label="lambda expression", style=dashed];
m11_0 -> m11_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_2 -> m11_4  [color=darkseagreen4, key=1, label=stateMachine, style=dashed];
m11_2 -> m11_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_2 -> m11_10  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_2 -> m11_5  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m11_2 -> m11_12  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_2 -> m11_13  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m11_154 -> m11_157  [color=green, key=1, label="lambda expression", style=dashed];
m11_170 -> m11_172  [color=green, key=1, label="lambda expression", style=dashed];
m11_57 -> m11_78  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_57 -> m11_81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_57 -> m11_85  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_57 -> m11_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_57 -> m11_60  [color=darkseagreen4, key=1, label=parts, style=dashed];
m11_57 -> m11_61  [color=darkseagreen4, key=1, label=parts, style=dashed];
m11_57 -> m11_65  [color=darkseagreen4, key=1, label=parts, style=dashed];
m11_57 -> m11_66  [color=darkseagreen4, key=1, label=parts, style=dashed];
m11_56 -> m11_67  [color=darkseagreen4, key=1, label=canNotParseMessage, style=dashed];
m11_56 -> m11_69  [color=darkseagreen4, key=1, label=canNotParseMessage, style=dashed];
m11_58 -> m11_61  [color=darkseagreen4, key=1, label=builder, style=dashed];
m11_58 -> m11_62  [color=darkseagreen4, key=1, label=builder, style=dashed];
m11_58 -> m11_63  [color=darkseagreen4, key=1, label=builder, style=dashed];
m11_58 -> m11_66  [color=darkseagreen4, key=1, label=builder, style=dashed];
m11_58 -> m11_67  [color=darkseagreen4, key=1, label=builder, style=dashed];
m11_59 -> m11_61  [color=darkseagreen4, key=1, label=alias, style=dashed];
m11_64 -> m11_66  [color=darkseagreen4, key=1, label=alias, style=dashed];
m11_94 -> m11_102  [color=green, key=1, label="System.Func<SqlConnection, T>", style=dashed];
m11_113 -> m11_115  [color=green, key=1, label=transaction, style=dashed];
m11_114 -> m11_116  [color=green, key=1, label=result, style=dashed];
m11_177 -> m11_35  [color=green, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m11_177 -> m11_39  [color=green, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m11_177 -> m11_92  [color=green, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m11_177 -> m11_106  [color=green, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m11_177 -> m11_120  [color=green, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m11_177 -> m11_121  [color=green, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m11_177 -> m11_129  [color=green, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m11_177 -> m11_8  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m11_177 -> m11_10  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m11_177 -> m11_16  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m11_177 -> m11_31  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m11_177 -> m11_43  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m11_177 -> m11_44  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m11_177 -> m11_50  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m11_177 -> m11_51  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m11_178 -> m11_96  [color=green, key=1, label="System.Action<SqlConnection>", style=dashed];
m11_179 -> m11_110  [color=green, key=1, label="System.Action<SqlConnection>", style=dashed];
m12_202 -> m12_208  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_205 -> m12_211  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_62 -> m12_65  [color=darkseagreen4, key=1, label=index, style=dashed];
m12_12 -> m12_48  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_72 -> m12_72  [color=darkseagreen4, key=1, label=pageIndex, style=dashed];
m12_95 -> m12_102  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_96 -> m12_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_97 -> m12_109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_166 -> m12_170  [color=darkseagreen4, key=1, label=exception, style=dashed];
m12_166 -> m12_178  [color=darkseagreen4, key=1, label=exception, style=dashed];
m12_166 -> m12_181  [color=darkseagreen4, key=1, label=exception, style=dashed];
m12_167 -> m12_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_170 -> m12_177  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_47 -> m12_71  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>", style=dashed];
m12_157 -> m12_159  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_49 -> m12_75  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>", style=dashed];
m12_28 -> m12_31  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m12_28 -> m12_34  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m12_28 -> m12_35  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m12_28 -> m12_38  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m12_28 -> m12_39  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m12_28 -> m12_40  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m12_185 -> m12_189  [color=darkseagreen4, key=1, label=exception, style=dashed];
m12_185 -> m12_196  [color=darkseagreen4, key=1, label=exception, style=dashed];
m12_185 -> m12_199  [color=darkseagreen4, key=1, label=exception, style=dashed];
m12_186 -> m12_192  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_189 -> m12_195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_15 -> m12_18  [color=darkseagreen4, key=1, label=int, style=dashed];
m12_44 -> m12_78  [color=darkseagreen4, key=1, label=bool, style=dashed];
m12_44 -> m12_79  [color=darkseagreen4, key=1, label="HangFire.Web.Pager.ItemType", style=dashed];
m12_126 -> m12_128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_135 -> m12_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_138 -> m12_143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_68 -> m12_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_68 -> m12_72  [color=darkseagreen4, key=1, label=pageIndex, style=dashed];
m12_69 -> m12_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_55 -> m12_58  [color=darkseagreen4, key=1, label=index, style=dashed];
m12_46 -> m12_59  [color=green, key=1, label="System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>", style=dashed];
m12_118 -> m12_120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_129 -> m12_131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_160 -> m12_162  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_178 -> m12_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_196 -> m12_198  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_115 -> m12_117  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_81 -> m12_5  [color=green, key=1, label="HangFire.Web.Pager", style=dashed];
m12_81 -> m12_18  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m12_81 -> m12_21  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m12_81 -> m12_22  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m12_81 -> m12_23  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m12_81 -> m12_26  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m12_81 -> m12_29  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m12_81 -> m12_31  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m12_81 -> m12_32  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m12_81 -> m12_34  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m12_81 -> m12_35  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m12_81 -> m12_37  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m12_81 -> m12_38  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m12_81 -> m12_39  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m12_81 -> m12_54  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m12_81 -> m12_61  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m12_81 -> m12_62  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m12_81 -> m12_63  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m12_81 -> m12_64  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m12_81 -> m12_69  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m12_81 -> m12_74  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m12_82 -> m12_77  [color=darkseagreen4, key=1, label="HangFire.Web.Pager.Item", style=dashed];
m12_82 -> m12_78  [color=darkseagreen4, key=1, label="HangFire.Web.Pager.Item", style=dashed];
m12_82 -> m12_79  [color=darkseagreen4, key=1, label="HangFire.Web.Pager.Item", style=dashed];
m12_84 -> m12_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_85 -> m12_90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_57 -> m12_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_43 -> m12_51  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>", style=dashed];
m12_149 -> m12_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_217 -> m12_5  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_12  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_49  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_67  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_69  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_82  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_83  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_84  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_88  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_85  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_95  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_96  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_97  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_99  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_115  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_118  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_121  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_125  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_126  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_135  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_137  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_138  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_148  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_149  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_156  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_157  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_167  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_169  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_170  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_186  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_188  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_189  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_204  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_205  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_217 -> m12_214  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m12_218 -> m12_178  [color=darkseagreen4, key=1, label=exception, style=dashed];
m12_218 -> m12_181  [color=darkseagreen4, key=1, label=exception, style=dashed];
m12_219 -> m12_196  [color=darkseagreen4, key=1, label=exception, style=dashed];
m12_219 -> m12_199  [color=darkseagreen4, key=1, label=exception, style=dashed];
}
