digraph  {
n64 [label="Hangfire.Server.AutomaticRetryProcess", span=""];
n65 [label=i, span=""];
n66 [label=nextTry, span=""];
n0 [cluster="Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.ILongRunningProcess)", label="Entry Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.ILongRunningProcess)", span="30-30"];
n1 [cluster="Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.ILongRunningProcess)", label="innerProcess == null", span="32-32"];
n3 [cluster="Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.ILongRunningProcess)", label="_innerProcess = innerProcess", span="34-34"];
n2 [cluster="Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.ILongRunningProcess)", label="throw new ArgumentNullException(''innerProcess'');", span="32-32"];
n4 [cluster="Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.ILongRunningProcess)", label="_logger = LogProvider.GetLogger(_innerProcess.GetType())", span="35-35"];
n5 [cluster="Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.ILongRunningProcess)", label="MaxRetryAttempts = DefaultMaxRetryAttempts", span="37-37"];
n10 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
n11 [cluster="Hangfire.Logging.LogProvider.GetLogger(System.Type)", label="Entry Hangfire.Logging.LogProvider.GetLogger(System.Type)", span="353-353"];
n6 [cluster="Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.ILongRunningProcess)", label="MaxAttemptDelay = DefaultMaxAttemptDelay", span="38-38"];
n7 [cluster="Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.ILongRunningProcess)", label="DelayCallback = GetBackOffMultiplier", span="39-39"];
n8 [cluster="Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.ILongRunningProcess)", label="Exit Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.ILongRunningProcess)", span="30-30"];
n9 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n12 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", label="Entry Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="51-51"];
n13 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", label="var i = 0", span="53-53"];
n15 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", label="_innerProcess.Execute(context)", span="57-57"];
n25 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", label="context.CancellationToken.WaitHandle.WaitOne(nextTry)", span="83-83"];
n26 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", label="context.CancellationToken.ThrowIfCancellationRequested()", span="84-84"];
n14 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", label="i <= MaxRetryAttempts", span="53-53"];
n20 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", label="i >= MaxRetryAttempts - 1", span="67-67"];
n22 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", label="var nextTry = DelayCallback(i)", span="69-69"];
n23 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", label="var logLevel = GetLogLevel(i)", span="70-70"];
n24 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", label="_logger.Log(\r\n                        logLevel,\r\n                        () => String.Format(\r\n                            ''Error occurred during execution of '{0}' component. Execution will be retried (attempt {1} of {2}) in {3} seconds.'',\r\n                            _innerProcess,\r\n                            i + 1,\r\n                            MaxRetryAttempts,\r\n                            nextTry),\r\n                        ex)", span="72-80"];
n36 [cluster="lambda expression", label="String.Format(\r\n                            ''Error occurred during execution of '{0}' component. Execution will be retried (attempt {1} of {2}) in {3} seconds.'',\r\n                            _innerProcess,\r\n                            i + 1,\r\n                            MaxRetryAttempts,\r\n                            nextTry)", span="74-79"];
n27 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", label="i++", span="53-53"];
n28 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", label="Exit Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="51-51"];
n16 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", label="return;", span="58-58"];
n29 [cluster="Hangfire.Server.ILongRunningProcess.Execute(Hangfire.Server.BackgroundProcessContext)", label="Entry Hangfire.Server.ILongRunningProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="26-26"];
n17 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", label=OperationCanceledException, span="60-60"];
n18 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", label="throw;", span="62-62"];
n19 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", label=Exception, span="64-64"];
n21 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", label="throw;", span="67-67"];
n30 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n31 [cluster="Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", label="Entry Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", span="89-89"];
n32 [cluster="Hangfire.Logging.ILog.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", label="Entry Hangfire.Logging.ILog.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="54-54"];
n35 [cluster="lambda expression", label="Entry lambda expression", span="74-79"];
n33 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
n34 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
n37 [cluster="lambda expression", label="Exit lambda expression", span="74-79"];
n38 [cluster="string.Format(string, params object[])", label="Entry string.Format(string, params object[])", span="0-0"];
n39 [cluster="Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", label=i, span="91-91"];
n40 [cluster="Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", label=0, span="93-93"];
n42 [cluster="Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", label=1, span="95-95"];
n44 [cluster="Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", label=2, span="97-97"];
n41 [cluster="Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", label="return LogLevel.Debug;", span="94-94"];
n43 [cluster="Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", label="return LogLevel.Info;", span="96-96"];
n45 [cluster="Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", label="return LogLevel.Warn;", span="98-98"];
n46 [cluster="Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", label="Exit Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", span="89-89"];
n47 [cluster="Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", label="return LogLevel.Error;", span="101-101"];
n48 [cluster="Hangfire.Server.AutomaticRetryProcess.ToString()", label="Entry Hangfire.Server.AutomaticRetryProcess.ToString()", span="104-104"];
n49 [cluster="Hangfire.Server.AutomaticRetryProcess.ToString()", label="return _innerProcess.ToString();", span="106-106"];
n50 [cluster="Hangfire.Server.AutomaticRetryProcess.ToString()", label="Exit Hangfire.Server.AutomaticRetryProcess.ToString()", span="104-104"];
n51 [cluster="object.ToString()", label="Entry object.ToString()", span="0-0"];
n52 [cluster="Hangfire.Server.AutomaticRetryProcess.GetBackOffMultiplier(int)", label="Entry Hangfire.Server.AutomaticRetryProcess.GetBackOffMultiplier(int)", span="109-109"];
n53 [cluster="Hangfire.Server.AutomaticRetryProcess.GetBackOffMultiplier(int)", label="var rand = new Random(Guid.NewGuid().GetHashCode())", span="112-112"];
n54 [cluster="Hangfire.Server.AutomaticRetryProcess.GetBackOffMultiplier(int)", label="var nextTry = rand.Next(\r\n                (int)Math.Pow(retryAttemptNumber, 2), (int)Math.Pow(retryAttemptNumber + 1, 2) + 1)", span="113-114"];
n57 [cluster="System.Random.Random(int)", label="Entry System.Random.Random(int)", span="0-0"];
n58 [cluster="System.Guid.NewGuid()", label="Entry System.Guid.NewGuid()", span="0-0"];
n59 [cluster="System.Guid.GetHashCode()", label="Entry System.Guid.GetHashCode()", span="0-0"];
n55 [cluster="Hangfire.Server.AutomaticRetryProcess.GetBackOffMultiplier(int)", label="return TimeSpan.FromSeconds(Math.Min(nextTry, MaxAttemptDelay.TotalSeconds));", span="116-116"];
n60 [cluster="System.Math.Pow(double, double)", label="Entry System.Math.Pow(double, double)", span="0-0"];
n61 [cluster="System.Random.Next(int, int)", label="Entry System.Random.Next(int, int)", span="0-0"];
n56 [cluster="Hangfire.Server.AutomaticRetryProcess.GetBackOffMultiplier(int)", label="Exit Hangfire.Server.AutomaticRetryProcess.GetBackOffMultiplier(int)", span="109-109"];
n62 [cluster="System.Math.Min(double, double)", label="Entry System.Math.Min(double, double)", span="0-0"];
n63 [cluster="System.TimeSpan.FromSeconds(double)", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
d8 [cluster="HangFire.Redis.RedisConnection.CreateWriteTransaction()", color=green, community=0, label="return new RedisWriteOnlyTransaction(Redis.CreateTransaction());", prediction=0, span="46-46"];
d228 [label="HangFire.Redis.RedisConnection", span=""];
d7 [cluster="HangFire.Redis.RedisConnection.CreateWriteTransaction()", label="Entry HangFire.Redis.RedisConnection.CreateWriteTransaction()", span="44-44"];
d9 [cluster="HangFire.Redis.RedisConnection.CreateWriteTransaction()", label="Exit HangFire.Redis.RedisConnection.CreateWriteTransaction()", span="44-44"];
d10 [cluster="RedisWriteOnlyTransaction.cstr", label="Entry RedisWriteOnlyTransaction.cstr", span=""];
d11 [cluster="Unk.CreateTransaction", label="Entry Unk.CreateTransaction", span=""];
d1 [cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", label="Redis = redis", span="34-34"];
d4 [cluster="HangFire.Redis.RedisConnection.Dispose()", label="Redis.Dispose()", span="41-41"];
d22 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", label="jobId = Redis.BlockingPopAndPushItemBetweenLists(\r\n                        queueKey,\r\n                        fetchedKey,\r\n                        FetchTimeout)", span="67-70"];
d23 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", label="jobId = Redis.PopAndPushItemBetweenLists(\r\n                        queueKey, fetchedKey)", span="74-75"];
d25 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                ''Fetched'',\r\n                JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="95-98"];
d26 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", label="return new RedisFetchedJob(Redis, jobId, queueName);", span="104-104"];
d36 [cluster="HangFire.Redis.RedisConnection.AcquireDistributedLock(string, System.TimeSpan)", label="return Redis.AcquireLock(RedisStorage.Prefix + resource, timeout);", span="109-109"];
d48 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", label="var transaction = Redis.CreateTransaction()", span="130-130"];
d70 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="var storedData = Redis.GetAllEntriesFromHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id))", span="149-150"];
d105 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", label="var entries = Redis.GetAllEntriesFromHash(\r\n                RedisStorage.Prefix + String.Format(''job:{0}:state'', jobId))", span="208-209"];
d118 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                name,\r\n                value)", span="227-230"];
d121 [cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", label="return Redis.GetValueFromHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                name);", span="235-237"];
d127 [cluster="HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", label="var result = Redis.GetAllItemsFromSortedSet(RedisStorage.GetRedisKey(key))", span="244-244"];
d134 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", label="return Redis.GetRangeFromSortedSetByLowestScore(\r\n                RedisStorage.Prefix + key, fromScore, toScore, 0, 1)\r\n                .FirstOrDefault();", span="250-252"];
d143 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", label="Redis.SetRangeInHash(RedisStorage.GetRedisKey(key), keyValuePairs)", span="260-260"];
d148 [cluster="HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", label="var result = Redis.GetAllEntriesFromHash(RedisStorage.GetRedisKey(key))", span="267-267"];
d152 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", label="var transaction = Redis.CreateTransaction()", span="274-274"];
d174 [cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", label="RemoveServer(Redis, serverId)", span="301-301"];
d191 [cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                ''Heartbeat'',\r\n                JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="322-325"];
d194 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", label="var serverNames = Redis.GetAllItemsFromSet(RedisStorage.Prefix + ''servers'')", span="330-330"];
d197 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", label="var pipeline = Redis.CreatePipeline()", span="335-335"];
d206 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", label="RemoveServer(Redis, heartbeat.Key)", span="363-363"];
d177 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", label="var transaction = redis.CreateTransaction()", span="306-306"];
d0 [cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", label="Entry HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", span="32-32"];
d2 [cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", label="Exit HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", span="32-32"];
d3 [cluster="HangFire.Redis.RedisConnection.Dispose()", label="Entry HangFire.Redis.RedisConnection.Dispose()", span="39-39"];
d5 [cluster="HangFire.Redis.RedisConnection.Dispose()", label="Exit HangFire.Redis.RedisConnection.Dispose()", span="39-39"];
d6 [cluster="Unk.Dispose", label="Entry Unk.Dispose", span=""];
d21 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", label="queueIndex == 0", span="65-65"];
d19 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", label="var queueKey = RedisStorage.Prefix + String.Format(''queue:{0}'', queueName)", span="62-62"];
d20 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", label="var fetchedKey = RedisStorage.Prefix + String.Format(''queue:{0}:dequeued'', queueName)", span="63-63"];
d24 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", label="jobId == null", span="78-78"];
d30 [cluster="Unk.BlockingPopAndPushItemBetweenLists", label="Entry Unk.BlockingPopAndPushItemBetweenLists", span=""];
d31 [cluster="Unk.PopAndPushItemBetweenLists", label="Entry Unk.PopAndPushItemBetweenLists", span=""];
d29 [cluster="string.Format(string, object)", label="Entry string.Format(string, object)", span="0-0"];
d32 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
d33 [cluster="Unk.SetEntryInHash", label="Entry Unk.SetEntryInHash", span=""];
d18 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", label="queueName = queues[queueIndex]", span="60-60"];
d27 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", label="Exit HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="49-49"];
d34 [cluster="HangFire.Redis.RedisFetchedJob.RedisFetchedJob(IRedisClient, string, string)", label="Entry HangFire.Redis.RedisFetchedJob.RedisFetchedJob(IRedisClient, string, string)", span="30-30"];
d35 [cluster="HangFire.Redis.RedisConnection.AcquireDistributedLock(string, System.TimeSpan)", label="Entry HangFire.Redis.RedisConnection.AcquireDistributedLock(string, System.TimeSpan)", span="107-107"];
d37 [cluster="HangFire.Redis.RedisConnection.AcquireDistributedLock(string, System.TimeSpan)", label="Exit HangFire.Redis.RedisConnection.AcquireDistributedLock(string, System.TimeSpan)", span="107-107"];
d38 [cluster="Unk.AcquireLock", label="Entry Unk.AcquireLock", span=""];
d47 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", label="storedParameters.Add(''CreatedAt'', JobHelper.ToStringTimestamp(createdAt))", span="128-128"];
d49 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    storedParameters))", span="132-134"];
d50 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn))", span="136-138"];
d51 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", label="transaction.Commit()", span="141-141"];
d69 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="Entry HangFire.Redis.RedisConnection.GetJobData(string)", span="147-147"];
d71 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="storedData.Count == 0", span="152-152"];
d96 [cluster="Unk.GetAllEntriesFromHash", label="Entry Unk.GetAllEntriesFromHash", span=""];
d78 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="storedData.ContainsKey(''Type'')", span="160-160"];
d79 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="type = storedData[''Type'']", span="162-162"];
d80 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="storedData.ContainsKey(''Method'')", span="164-164"];
d81 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="method = storedData[''Method'']", span="166-166"];
d82 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="storedData.ContainsKey(''ParameterTypes'')", span="168-168"];
d83 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="parameterTypes = storedData[''ParameterTypes'']", span="170-170"];
d84 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="storedData.ContainsKey(''Arguments'')", span="172-172"];
d85 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="arguments = storedData[''Arguments'']", span="174-174"];
d86 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="storedData.ContainsKey(''CreatedAt'')", span="176-176"];
d87 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="createdAt = storedData[''CreatedAt'']", span="178-178"];
d94 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="return new JobData\r\n            {\r\n                Job = job,\r\n                State = storedData.ContainsKey(''State'') ? storedData[''State''] : null,\r\n                CreatedAt = JobHelper.FromNullableStringTimestamp(createdAt) ?? DateTime.MinValue,\r\n                LoadException = loadException\r\n            };", span="195-201"];
d102 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", label="Entry HangFire.Redis.RedisConnection.GetStateData(string)", span="204-204"];
d103 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", label="jobId == null", span="206-206"];
d106 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", label="entries.Count == 0", span="211-211"];
d108 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", label="var stateData = new Dictionary<string, string>(entries)", span="213-213"];
d111 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", label="return new StateData\r\n            {\r\n                Name = entries[''State''],\r\n                Reason = entries.ContainsKey(''Reason'') ? entries[''Reason''] : null,\r\n                Data = stateData\r\n            };", span="217-222"];
d117 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", label="Entry HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", span="225-225"];
d119 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", label="Exit HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", span="225-225"];
d120 [cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", label="Entry HangFire.Redis.RedisConnection.GetJobParameter(string, string)", span="233-233"];
d122 [cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", label="Exit HangFire.Redis.RedisConnection.GetJobParameter(string, string)", span="233-233"];
d123 [cluster="Unk.GetValueFromHash", label="Entry Unk.GetValueFromHash", span=""];
d124 [cluster="HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", label="Entry HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", span="240-240"];
d125 [cluster="HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", label="key == null", span="242-242"];
d128 [cluster="HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", label="return new HashSet<string>(result);", span="245-245"];
d130 [cluster="HangFire.Redis.RedisStorage.GetRedisKey(string)", label="Entry HangFire.Redis.RedisStorage.GetRedisKey(string)", span="107-107"];
d131 [cluster="Unk.GetAllItemsFromSortedSet", label="Entry Unk.GetAllItemsFromSortedSet", span=""];
d133 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", label="Entry HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="248-248"];
d135 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", label="Exit HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="248-248"];
d136 [cluster="Unk.GetRangeFromSortedSetByLowestScore", label="Entry Unk.GetRangeFromSortedSetByLowestScore", span=""];
d137 [cluster="Unk.FirstOrDefault", label="Entry Unk.FirstOrDefault", span=""];
d138 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", label="Entry HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="255-255"];
d141 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", label="keyValuePairs == null", span="258-258"];
d144 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", label="Exit HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="255-255"];
d64 [cluster="Unk.SetRangeInHash", label="Entry Unk.SetRangeInHash", span=""];
d145 [cluster="HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", label="Entry HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", span="263-263"];
d146 [cluster="HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", label="key == null", span="265-265"];
d149 [cluster="HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", label="return result.Count != 0 ? result : null;", span="269-269"];
d151 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", label="Entry HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="272-272"];
d153 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", label="transaction.QueueCommand(x => x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId))", span="276-277"];
d154 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', context.WorkerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        }))", span="279-285"];
d157 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", label="transaction.QueueCommand(x => x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1))", span="290-292"];
d158 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", label="transaction.Commit()", span="295-295"];
d173 [cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", label="Entry HangFire.Redis.RedisConnection.RemoveServer(string)", span="299-299"];
d175 [cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", label="Exit HangFire.Redis.RedisConnection.RemoveServer(string)", span="299-299"];
d176 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", label="Entry HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", span="304-304"];
d190 [cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", label="Entry HangFire.Redis.RedisConnection.Heartbeat(string)", span="320-320"];
d192 [cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", label="Exit HangFire.Redis.RedisConnection.Heartbeat(string)", span="320-320"];
d193 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", label="Entry HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", span="328-328"];
d195 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", label="var heartbeats = new Dictionary<string, Tuple<DateTime, DateTime?>>()", span="331-331"];
d210 [cluster="Unk.GetAllItemsFromSet", label="Entry Unk.GetAllItemsFromSet", span=""];
d198 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", label=serverNames, span="337-337"];
d196 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", label="var utcNow = DateTime.UtcNow", span="333-333"];
d211 [cluster="Unk.CreatePipeline", label="Entry Unk.CreatePipeline", span=""];
d200 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", label="pipeline.QueueCommand(\r\n                        x => x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat''),\r\n                        x => heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1]))))", span="341-349"];
d201 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", label="pipeline.Flush()", span="352-352"];
d205 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", label="utcNow > maxTime.Add(timeOut)", span="361-361"];
d204 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", label="var maxTime = new DateTime(\r\n                    Math.Max(heartbeat.Value.Item1.Ticks, (heartbeat.Value.Item2 ?? DateTime.MinValue).Ticks))", span="358-359"];
d207 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", label="removedServerCount++", span="364-364"];
d178 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", label="transaction.QueueCommand(x => x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId))", span="308-310"];
d179 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", label="transaction.QueueCommand(x => x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId)))", span="312-314"];
d180 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", label="transaction.Commit()", span="316-316"];
d17 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", label="queueIndex = (queueIndex + 1) % queues.Length", span="59-59"];
d15 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", label="var queueIndex = 0", span="53-53"];
d66 [cluster="lambda expression", label="x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn)", span="136-138"];
d62 [cluster="lambda expression", label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    storedParameters)", span="132-134"];
d165 [cluster="lambda expression", label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', context.WorkerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        })", span="279-285"];
d170 [cluster="lambda expression", label="x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1)", span="290-292"];
d187 [cluster="lambda expression", label="x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId))", span="312-314"];
d12 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", label="Entry HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="49-49"];
d39 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", label="Entry HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="112-112"];
d42 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", label="var storedParameters = new Dictionary<string, string>(parameters)", span="123-123"];
d46 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", label="storedParameters.Add(''Arguments'', invocationData.Arguments)", span="127-127"];
d58 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
d40 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", label="var jobId = Guid.NewGuid().ToString()", span="118-118"];
d59 [cluster="Unk.QueueCommand", label="Entry Unk.QueueCommand", span=""];
d61 [cluster="lambda expression", label="Entry lambda expression", span="132-134"];
d65 [cluster="lambda expression", label="Entry lambda expression", span="136-138"];
d52 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", label="return jobId;", span="144-144"];
d60 [cluster="Unk.Commit", label="Entry Unk.Commit", span=""];
d95 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="Exit HangFire.Redis.RedisConnection.GetJobData(string)", span="147-147"];
d72 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="return null;", span="152-152"];
d73 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="string type = null", span="154-154"];
d77 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="string createdAt = null", span="158-158"];
d97 [cluster="Unk.ContainsKey", label="Entry Unk.ContainsKey", span=""];
d90 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="var invocationData = new InvocationData(type, method, parameterTypes, arguments)", span="184-184"];
d88 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="Job job = null", span="181-181"];
d91 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="job = invocationData.Deserialize()", span="188-188"];
d93 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="loadException = ex", span="192-192"];
d100 [cluster="HangFire.Storage.JobData.JobData()", label="Entry HangFire.Storage.JobData.JobData()", span="21-21"];
d101 [cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", label="Entry HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", span="60-60"];
d112 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", label="Exit HangFire.Redis.RedisConnection.GetStateData(string)", span="204-204"];
d104 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", label="throw new ArgumentNullException(''jobId'');", span="206-206"];
d107 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", label="return null;", span="211-211"];
d109 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", label="stateData.Remove(''State'')", span="214-214"];
d114 [cluster="Dictionary<string, string>.cstr", label="Entry Dictionary<string, string>.cstr", span=""];
d110 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", label="stateData.Remove(''Reason'')", span="215-215"];
d116 [cluster="HangFire.Storage.StateData.StateData()", label="Entry HangFire.Storage.StateData.StateData()", span="21-21"];
d129 [cluster="HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", label="Exit HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", span="240-240"];
d126 [cluster="HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", label="throw new ArgumentNullException(''key'');", span="242-242"];
d132 [cluster="HashSet<string>.cstr", label="Entry HashSet<string>.cstr", span=""];
d139 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", label="key == null", span="257-257"];
d142 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", label="throw new ArgumentNullException(''keyValuePairs'');", span="258-258"];
d140 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", label="throw new ArgumentNullException(''key'');", span="257-257"];
d150 [cluster="HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", label="Exit HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", span="263-263"];
d147 [cluster="HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", label="throw new ArgumentNullException(''key'');", span="265-265"];
d159 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", label="Exit HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="272-272"];
d161 [cluster="lambda expression", label="x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId)", span="276-277"];
d155 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", label="context.Queues", span="287-287"];
d160 [cluster="lambda expression", label="Entry lambda expression", span="276-277"];
d164 [cluster="lambda expression", label="Entry lambda expression", span="279-285"];
d156 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", label="var queue1 = queue", span="289-289"];
d169 [cluster="lambda expression", label="Entry lambda expression", span="290-292"];
d181 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", label="Exit HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", span="304-304"];
d183 [cluster="lambda expression", label="x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId)", span="308-310"];
d209 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", label="Exit HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", span="328-328"];
d167 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
d222 [cluster="lambda expression", label="heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1])))", span="345-349"];
d203 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", label=heartbeats, span="356-356"];
d199 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", label="var name = serverName", span="339-339"];
d216 [cluster="lambda expression", label="Entry lambda expression", span="342-344"];
d221 [cluster="lambda expression", label="Entry lambda expression", span="345-349"];
d202 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", label="var removedServerCount = 0", span="355-355"];
d212 [cluster="Unk.Flush", label="Entry Unk.Flush", span=""];
d215 [cluster="System.DateTime.Add(System.TimeSpan)", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
d213 [cluster="System.DateTime.DateTime(long)", label="Entry System.DateTime.DateTime(long)", span="0-0"];
d214 [cluster="System.Math.Max(long, long)", label="Entry System.Math.Max(long, long)", span="0-0"];
d208 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", label="return removedServerCount;", span="368-368"];
d182 [cluster="lambda expression", label="Entry lambda expression", span="308-310"];
d186 [cluster="lambda expression", label="Entry lambda expression", span="312-314"];
d16 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", label="cancellationToken.ThrowIfCancellationRequested()", span="57-57"];
d14 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", label="string queueName", span="52-52"];
d229 [label=jobId, span=""];
d231 [label="System.TimeSpan", span=""];
d67 [cluster="lambda expression", label="Exit lambda expression", span="136-138"];
d68 [cluster="Unk.ExpireEntryIn", label="Entry Unk.ExpireEntryIn", span=""];
d230 [label=storedParameters, span=""];
d63 [cluster="lambda expression", label="Exit lambda expression", span="132-134"];
d232 [label=string, span=""];
d233 [label="HangFire.Server.ServerContext", span=""];
d166 [cluster="lambda expression", label="Exit lambda expression", span="279-285"];
d168 [cluster="int.ToString(System.IFormatProvider)", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
d234 [label=queue1, span=""];
d171 [cluster="lambda expression", label="Exit lambda expression", span="290-292"];
d172 [cluster="Unk.AddItemToList", label="Entry Unk.AddItemToList", span=""];
d235 [label=string, span=""];
d188 [cluster="lambda expression", label="Exit lambda expression", span="312-314"];
d189 [cluster="Unk.RemoveEntry", label="Entry Unk.RemoveEntry", span=""];
d13 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", label="string jobId", span="51-51"];
d53 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", label="Exit HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="112-112"];
d41 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", label="var invocationData = InvocationData.Serialize(job)", span="120-120"];
d43 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", label="storedParameters.Add(''Type'', invocationData.Type)", span="124-124"];
d57 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="0-0"];
d44 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", label="storedParameters.Add(''Method'', invocationData.Method)", span="125-125"];
d45 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", label="storedParameters.Add(''ParameterTypes'', invocationData.ParameterTypes)", span="126-126"];
d54 [cluster="System.Guid.NewGuid()", label="Entry System.Guid.NewGuid()", span="0-0"];
d55 [cluster="System.Guid.ToString()", label="Entry System.Guid.ToString()", span="0-0"];
d74 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="string method = null", span="155-155"];
d76 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="string arguments = null", span="157-157"];
d75 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="string parameterTypes = null", span="156-156"];
d89 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label="JobLoadException loadException = null", span="182-182"];
d98 [cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", span="24-24"];
d92 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", label=JobLoadException, span="190-190"];
d99 [cluster="HangFire.Storage.InvocationData.Deserialize()", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
d113 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
d115 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", span="0-0"];
d162 [cluster="lambda expression", label="Exit lambda expression", span="276-277"];
d163 [cluster="Unk.AddItemToSet", label="Entry Unk.AddItemToSet", span=""];
d184 [cluster="lambda expression", label="Exit lambda expression", span="308-310"];
d185 [cluster="Unk.RemoveItemFromSet", label="Entry Unk.RemoveItemFromSet", span=""];
d236 [label=name, span=""];
d237 [label=heartbeats, span=""];
d223 [cluster="lambda expression", label="Exit lambda expression", span="345-349"];
d224 [cluster="System.Tuple<T1, T2>.Tuple(T1, T2)", label="Entry System.Tuple<T1, T2>.Tuple(T1, T2)", span="0-0"];
d225 [cluster="Unk.FromStringTimestamp", label="Entry Unk.FromStringTimestamp", span=""];
d226 [cluster="Unk.FromNullableStringTimestamp", label="Entry Unk.FromNullableStringTimestamp", span=""];
d227 [cluster="Unk.Add", label="Entry Unk.Add", span=""];
d217 [cluster="lambda expression", label="x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat'')", span="342-344"];
d218 [cluster="lambda expression", label="Exit lambda expression", span="342-344"];
d28 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
d56 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
d219 [cluster="Unk.Format", label="Entry Unk.Format", span=""];
d220 [cluster="Unk.GetValuesFromHash", label="Entry Unk.GetValuesFromHash", span=""];
m0_11 [cluster="System.DateTime.DateTime(int, int, int)", file="BackgroundJobServer.cs", label="Entry System.DateTime.DateTime(int, int, int)", span="0-0"];
m0_4 [cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)", file="BackgroundJobServer.cs", label="Entry HangFire.States.ScheduledState.ScheduledState(System.DateTime)", span="32-32"];
m0_20 [cluster="System.DateTime.AddMinutes(double)", file="BackgroundJobServer.cs", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
m0_6 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.Ctor_SetsTheCorrectData_WhenDateIsPassed()", file="BackgroundJobServer.cs", label="Entry HangFire.Core.Tests.States.ScheduledStateFacts.Ctor_SetsTheCorrectData_WhenDateIsPassed()", span="18-18"];
m0_7 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.Ctor_SetsTheCorrectData_WhenDateIsPassed()", file="BackgroundJobServer.cs", label="var date = new DateTime(2012, 12, 12)", span="20-20"];
m0_8 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.Ctor_SetsTheCorrectData_WhenDateIsPassed()", file="BackgroundJobServer.cs", label="var state = new ScheduledState(date)", span="21-21"];
m0_9 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.Ctor_SetsTheCorrectData_WhenDateIsPassed()", file="BackgroundJobServer.cs", label="Assert.Equal(date, state.EnqueueAt)", span="22-22"];
m0_10 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.Ctor_SetsTheCorrectData_WhenDateIsPassed()", file="BackgroundJobServer.cs", label="Exit HangFire.Core.Tests.States.ScheduledStateFacts.Ctor_SetsTheCorrectData_WhenDateIsPassed()", span="18-18"];
m0_0 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.StateName_IsCorrect()", file="BackgroundJobServer.cs", label="Entry HangFire.Core.Tests.States.ScheduledStateFacts.StateName_IsCorrect()", span="11-11"];
m0_1 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.StateName_IsCorrect()", file="BackgroundJobServer.cs", label="var state = new ScheduledState(DateTime.UtcNow)", span="13-13"];
m0_2 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.StateName_IsCorrect()", file="BackgroundJobServer.cs", label="Assert.Equal(ScheduledState.StateName, state.Name)", span="14-14"];
m0_3 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.StateName_IsCorrect()", file="BackgroundJobServer.cs", label="Exit HangFire.Core.Tests.States.ScheduledStateFacts.StateName_IsCorrect()", span="11-11"];
m0_21 [cluster="Unk.True", file="BackgroundJobServer.cs", label="Entry Unk.True", span=""];
m0_34 [cluster="Unk.False", file="BackgroundJobServer.cs", label="Entry Unk.False", span=""];
m0_17 [cluster="HangFire.States.ScheduledState.ScheduledState(System.TimeSpan)", file="BackgroundJobServer.cs", label="Entry HangFire.States.ScheduledState.ScheduledState(System.TimeSpan)", span="27-27"];
m0_35 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.IgnoreExceptions_ReturnsFalse()", file="BackgroundJobServer.cs", label="Entry HangFire.Core.Tests.States.ScheduledStateFacts.IgnoreExceptions_ReturnsFalse()", span="53-53"];
m0_36 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.IgnoreExceptions_ReturnsFalse()", file="BackgroundJobServer.cs", label="var state = new ScheduledState(DateTime.UtcNow)", span="55-55"];
m0_37 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.IgnoreExceptions_ReturnsFalse()", file="BackgroundJobServer.cs", label="Assert.False(state.IgnoreJobLoadException)", span="56-56"];
m0_38 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.IgnoreExceptions_ReturnsFalse()", file="BackgroundJobServer.cs", label="Exit HangFire.Core.Tests.States.ScheduledStateFacts.IgnoreExceptions_ReturnsFalse()", span="53-53"];
m0_5 [cluster="Unk.Equal", file="BackgroundJobServer.cs", label="Entry Unk.Equal", span=""];
m0_28 [cluster="HangFire.States.ScheduledState.SerializeData()", file="BackgroundJobServer.cs", label="Entry HangFire.States.ScheduledState.SerializeData()", span="46-46"];
m0_30 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.IsFinal_ReturnsFalse()", file="BackgroundJobServer.cs", label="Entry HangFire.Core.Tests.States.ScheduledStateFacts.IsFinal_ReturnsFalse()", span="45-45"];
m0_31 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.IsFinal_ReturnsFalse()", file="BackgroundJobServer.cs", label="var state = new ScheduledState(DateTime.UtcNow)", span="47-47"];
m0_32 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.IsFinal_ReturnsFalse()", file="BackgroundJobServer.cs", label="Assert.False(state.IsFinal)", span="49-49"];
m0_33 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.IsFinal_ReturnsFalse()", file="BackgroundJobServer.cs", label="Exit HangFire.Core.Tests.States.ScheduledStateFacts.IsFinal_ReturnsFalse()", span="45-45"];
m0_18 [cluster="System.TimeSpan.FromDays(double)", file="BackgroundJobServer.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m0_22 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.SerializeData_ReturnsCorrectData()", file="BackgroundJobServer.cs", label="Entry HangFire.Core.Tests.States.ScheduledStateFacts.SerializeData_ReturnsCorrectData()", span="34-34"];
m0_23 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.SerializeData_ReturnsCorrectData()", file="BackgroundJobServer.cs", label="var state = new ScheduledState(new DateTime(2012, 12, 12))", span="36-36"];
m0_24 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.SerializeData_ReturnsCorrectData()", file="BackgroundJobServer.cs", label="var data = state.SerializeData()", span="38-38"];
m0_25 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.SerializeData_ReturnsCorrectData()", file="BackgroundJobServer.cs", label="Assert.Equal(JobHelper.SerializeDateTime(state.EnqueueAt), data[''EnqueueAt''])", span="40-40"];
m0_26 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.SerializeData_ReturnsCorrectData()", file="BackgroundJobServer.cs", label="Assert.Equal(JobHelper.SerializeDateTime(state.ScheduledAt), data[''ScheduledAt''])", span="41-41"];
m0_27 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.SerializeData_ReturnsCorrectData()", file="BackgroundJobServer.cs", label="Exit HangFire.Core.Tests.States.ScheduledStateFacts.SerializeData_ReturnsCorrectData()", span="34-34"];
m0_12 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.Ctor_SetsTheCorrectDate_WhenTimeSpanIsPassed()", file="BackgroundJobServer.cs", label="Entry HangFire.Core.Tests.States.ScheduledStateFacts.Ctor_SetsTheCorrectDate_WhenTimeSpanIsPassed()", span="26-26"];
m0_13 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.Ctor_SetsTheCorrectDate_WhenTimeSpanIsPassed()", file="BackgroundJobServer.cs", label="var state = new ScheduledState(TimeSpan.FromDays(1))", span="28-28"];
m0_14 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.Ctor_SetsTheCorrectDate_WhenTimeSpanIsPassed()", file="BackgroundJobServer.cs", label="Assert.True(DateTime.UtcNow.AddDays(1).AddMinutes(-1) < state.EnqueueAt)", span="29-29"];
m0_15 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.Ctor_SetsTheCorrectDate_WhenTimeSpanIsPassed()", file="BackgroundJobServer.cs", label="Assert.True(state.EnqueueAt < DateTime.UtcNow.AddDays(1).AddMinutes(1))", span="30-30"];
m0_16 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.Ctor_SetsTheCorrectDate_WhenTimeSpanIsPassed()", file="BackgroundJobServer.cs", label="Exit HangFire.Core.Tests.States.ScheduledStateFacts.Ctor_SetsTheCorrectDate_WhenTimeSpanIsPassed()", span="26-26"];
m0_19 [cluster="System.DateTime.AddDays(double)", file="BackgroundJobServer.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m0_29 [cluster="HangFire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="BackgroundJobServer.cs", label="Entry HangFire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="50-50"];
m3_0 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="BackgroundProcessContext.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", span="9-9"];
m3_2 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", color=green, community=0, file="BackgroundProcessContext.cs", label="Assert.Equal(Math.Min(Environment.ProcessorCount * 5, 40), options.WorkerCount)", prediction=1, span="13-13"];
m3_1 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="BackgroundProcessContext.cs", label="var options = CreateOptions()", span="11-11"];
m3_3 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="BackgroundProcessContext.cs", label="Assert.Equal(EnqueuedState.DefaultQueue, options.Queues[0])", span="14-14"];
m3_4 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="BackgroundProcessContext.cs", label="Assert.True(options.ShutdownTimeout > TimeSpan.Zero)", span="15-15"];
m3_5 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="BackgroundProcessContext.cs", label="Assert.True(options.SchedulePollingInterval > TimeSpan.Zero)", span="16-16"];
m3_45 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.CreateOptions()", file="BackgroundProcessContext.cs", label="return new BackgroundJobServerOptions();", span="65-65"];
m3_33 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="BackgroundProcessContext.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", span="47-47"];
m3_9 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.State)", file="BackgroundProcessContext.cs", label="stateMachineFactory == null", span="53-53"];
m3_47 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundProcessContext.cs", label="Entry Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="32-32"];
m3_7 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.State)", file="BackgroundProcessContext.cs", label="connection == null", span="52-52"];
m3_46 [cluster="System.InvalidOperationException.InvalidOperationException(string, System.Exception)", file="BackgroundProcessContext.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string, System.Exception)", span="0-0"];
m3_15 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.State)", file="BackgroundProcessContext.cs", label="_stateMachineFactory = stateMachineFactory", span="57-57"];
m3_8 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.State)", file="BackgroundProcessContext.cs", label="throw new ArgumentNullException(''connection'');", span="52-52"];
m3_54 [cluster="HangFire.States.IStateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.States.State)", file="BackgroundProcessContext.cs", label="Entry HangFire.States.IStateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.States.State)", span="23-23"];
m3_48 [cluster="HangFire.Client.CreateContext.CreateJob()", file="BackgroundProcessContext.cs", label=options, span=""];
m3_49 [cluster="HangFire.Client.CreateContext.CreateJob()", file="BackgroundProcessContext.cs", label=options, span=""];
m3_50 [cluster="HangFire.Client.CreateContext.CreateJob()", file="BackgroundProcessContext.cs", label=options, span=""];
m3_51 [cluster="HangFire.Client.CreateContext.CreateJob()", file="BackgroundProcessContext.cs", label=options, span=""];
m3_52 [cluster="HangFire.Client.CreateContext.CreateJob()", file="BackgroundProcessContext.cs", label="Exit HangFire.Client.CreateContext.CreateJob()", span="147-147"];
m3_26 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="BackgroundProcessContext.cs", label=_jobWasCreated, span="100-100"];
m3_27 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="BackgroundProcessContext.cs", label="throw new InvalidOperationException(''Could not set parameter for a created job.'');", span="102-102"];
m3_28 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="BackgroundProcessContext.cs", label="var serializedValue = JobHelper.ToJson(value)", span="105-105"];
m3_29 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="BackgroundProcessContext.cs", label="!_parameters.ContainsKey(name)", span="107-107"];
m3_34 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="BackgroundProcessContext.cs", label="var options = CreateOptions()", span="49-49"];
m3_44 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="BackgroundProcessContext.cs", label="Exit HangFire.Client.CreateContext.GetJobParameter<T>(string)", span="129-129"];
m3_22 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", file="BackgroundProcessContext.cs", label="Exit Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", span="29-29"];
m3_11 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.State)", file="BackgroundProcessContext.cs", label="job == null", span="54-54"];
m3_12 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.State)", file="BackgroundProcessContext.cs", label="throw new ArgumentNullException(''job'');", span="54-54"];
m3_13 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.State)", file="BackgroundProcessContext.cs", label="initialState == null", span="55-55"];
m3_14 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.State)", file="BackgroundProcessContext.cs", label="throw new ArgumentNullException(''initialState'');", span="55-55"];
m3_40 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="BackgroundProcessContext.cs", label="throw new ArgumentNullException(''name'');", span="131-131"];
m3_41 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="BackgroundProcessContext.cs", label="return _parameters.ContainsKey(name)\r\n                    ? JobHelper.FromJson<T>(_parameters[name])\r\n                    : default(T);", span="135-137"];
m3_42 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="BackgroundProcessContext.cs", label=Exception, span="139-139"];
m3_43 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="BackgroundProcessContext.cs", label="throw new InvalidOperationException(String.Format(\r\n                    ''Could not get a value of the job parameter `{0}`. See inner exception for details.'',\r\n                    name), ex);", span="141-143"];
m3_53 [cluster="HangFire.States.IStateMachineFactory.Create(HangFire.Storage.IStorageConnection)", file="BackgroundProcessContext.cs", label="Entry HangFire.States.IStateMachineFactory.Create(HangFire.Storage.IStorageConnection)", span="8-8"];
m3_6 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="BackgroundProcessContext.cs", label="Exit Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", span="9-9"];
m3_16 [cluster="lambda expression", file="BackgroundProcessContext.cs", label="Entry lambda expression", span="25-25"];
m3_17 [cluster="lambda expression", file="BackgroundProcessContext.cs", label="options.WorkerCount = 0", span="25-25"];
m3_18 [cluster="lambda expression", file="BackgroundProcessContext.cs", label="Exit lambda expression", span="25-25"];
m3_19 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", file="BackgroundProcessContext.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", span="29-29"];
m3_10 [cluster="Unk.True", file="BackgroundProcessContext.cs", label="Entry Unk.True", span=""];
m3_20 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", file="BackgroundProcessContext.cs", label="var options = CreateOptions()", span="31-31"];
m3_36 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="BackgroundProcessContext.cs", label="Exit Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", span="47-47"];
m3_37 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="BackgroundProcessContext.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m3_24 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="BackgroundProcessContext.cs", label="String.IsNullOrWhiteSpace(name)", span="98-98"];
m3_23 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="BackgroundProcessContext.cs", label="Entry HangFire.Client.CreateContext.SetJobParameter(string, object)", span="96-96"];
m3_25 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="BackgroundProcessContext.cs", label="throw new ArgumentNullException(''name'');", span="98-98"];
m3_31 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="BackgroundProcessContext.cs", label="_parameters[name] = serializedValue", span="113-113"];
m3_30 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="BackgroundProcessContext.cs", label="_parameters.Add(name, serializedValue)", span="109-109"];
m3_32 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="BackgroundProcessContext.cs", label="Exit HangFire.Client.CreateContext.SetJobParameter(string, object)", span="96-96"];
m3_38 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="BackgroundProcessContext.cs", label="Entry HangFire.Client.CreateContext.GetJobParameter<T>(string)", span="129-129"];
m3_39 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="BackgroundProcessContext.cs", label="String.IsNullOrWhiteSpace(name)", span="131-131"];
m3_35 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="BackgroundProcessContext.cs", label="Assert.Throws<ArgumentException>(\r\n                () => options.Queues = new string[0])", span="51-52"];
m3_55 [file="BackgroundProcessContext.cs", label="HangFire.Client.CreateContext", span=""];
m4_34 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="BackgroundProcessContextFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m4_25 [cluster="System.Collections.Generic.List<T>.List()", file="BackgroundProcessContextFacts.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m4_27 [cluster="HangFire.Storage.IStorageConnection.GetAllItemsFromSet(string)", file="BackgroundProcessContextFacts.cs", label="Entry HangFire.Storage.IStorageConnection.GetAllItemsFromSet(string)", span="55-55"];
m4_0 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="Entry HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", span="9-9"];
m4_1 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="RecurringJobs = new List<RecurringJobDto>()", span="11-11"];
m4_2 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="var connection = JobStorage.Current.GetConnection()", span="13-13"];
m4_3 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="var ids = connection.GetAllItemsFromSet(''recurring-jobs'')", span="15-15"];
m4_5 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="var hash = connection.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', id))", span="19-19"];
m4_18 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="var stateData = connection.GetStateData(dto.LastJobId)", span="49-49"];
m4_4 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label=ids, span="17-17"];
m4_7 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="RecurringJobs.Add(new RecurringJobDto { Id = id, Removed = true })", span="23-23"];
m4_8 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="var dto = new RecurringJobDto { Id = id }", span="27-27"];
m4_6 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="hash == null", span="21-21"];
m4_9 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="dto.Cron = hash[''Cron'']", span="28-28"];
m4_10 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="var invocationData = JobHelper.FromJson<InvocationData>(hash[''Job''])", span="32-32"];
m4_14 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="hash.ContainsKey(''NextExecution'')", span="40-40"];
m4_15 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="dto.NextExecution = JobHelper.DeserializeDateTime(hash[''NextExecution''])", span="42-42"];
m4_16 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="hash.ContainsKey(''LastJobId'')", span="45-45"];
m4_17 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="dto.LastJobId = hash[''LastJobId'']", span="47-47"];
m4_21 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="hash.ContainsKey(''LastExecution'')", span="56-56"];
m4_22 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="dto.LastExecution = JobHelper.DeserializeDateTime(hash[''LastExecution''])", span="58-58"];
m4_11 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="dto.Job = invocationData.Deserialize()", span="33-33"];
m4_13 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="dto.LoadException = ex", span="37-37"];
m4_20 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="dto.LastJobState = stateData.Name", span="52-52"];
m4_23 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="RecurringJobs.Add(dto)", span="61-61"];
m4_12 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label=JobLoadException, span="35-35"];
m4_19 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="stateData != null", span="50-50"];
m4_24 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="BackgroundProcessContextFacts.cs", label="Exit HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", span="9-9"];
m4_31 [cluster="System.Collections.Generic.List<T>.Add(T)", file="BackgroundProcessContextFacts.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m4_32 [cluster="HangFire.Common.JobHelper.FromJson<T>(string)", file="BackgroundProcessContextFacts.cs", label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="30-30"];
m4_35 [cluster="HangFire.Common.JobHelper.DeserializeDateTime(string)", file="BackgroundProcessContextFacts.cs", label="Entry HangFire.Common.JobHelper.DeserializeDateTime(string)", span="55-55"];
m4_29 [cluster="HangFire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", file="BackgroundProcessContextFacts.cs", label="Entry HangFire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", span="64-64"];
m4_36 [cluster="HangFire.Storage.IStorageConnection.GetStateData(string)", file="BackgroundProcessContextFacts.cs", label="Entry HangFire.Storage.IStorageConnection.GetStateData(string)", span="45-45"];
m4_30 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobDto.RecurringJobDto()", file="BackgroundProcessContextFacts.cs", label="Entry HangFire.Web.Pages.RecurringJobsPage.RecurringJobDto.RecurringJobDto()", span="68-68"];
m4_28 [cluster="string.Format(string, object)", file="BackgroundProcessContextFacts.cs", label="Entry string.Format(string, object)", span="0-0"];
m4_26 [cluster="HangFire.JobStorage.GetConnection()", file="BackgroundProcessContextFacts.cs", label="Entry HangFire.JobStorage.GetConnection()", span="56-56"];
m4_37 [file="BackgroundProcessContextFacts.cs", label="HangFire.Web.Pages.RecurringJobsPage", span=""];
m5_10 [cluster="long.ToString(System.IFormatProvider)", file="BackgroundProcessExtensions.cs", label="Entry long.ToString(System.IFormatProvider)", span="0-0"];
m5_11 [cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="BackgroundProcessExtensions.cs", label="Entry HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="57-57"];
m5_12 [cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="BackgroundProcessExtensions.cs", label="transaction.IncrementCounter(''stats:succeeded'')", span="59-59"];
m5_13 [cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="BackgroundProcessExtensions.cs", label="Exit HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="57-57"];
m5_14 [cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", file="BackgroundProcessExtensions.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", span="35-35"];
m5_5 [cluster="HangFire.States.SucceededState.SerializeData()", file="BackgroundProcessExtensions.cs", label="Entry HangFire.States.SucceededState.SerializeData()", span="45-45"];
m5_6 [cluster="HangFire.States.SucceededState.SerializeData()", color=green, community=0, file="BackgroundProcessExtensions.cs", label="return new Dictionary<string, string>\r\n            {\r\n                { ''SucceededAt'',  JobHelper.SerializeDateTime(SucceededAt) },\r\n                { ''PerformanceDuration'', PerformanceDuration.ToString(CultureInfo.InvariantCulture) },\r\n                { ''Latency'', Latency.ToString(CultureInfo.InvariantCulture) }\r\n            };", prediction=2, span="47-52"];
m5_7 [cluster="HangFire.States.SucceededState.SerializeData()", file="BackgroundProcessExtensions.cs", label="Exit HangFire.States.SucceededState.SerializeData()", span="45-45"];
m5_15 [cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="BackgroundProcessExtensions.cs", label="Entry HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="62-62"];
m5_16 [cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="BackgroundProcessExtensions.cs", label="transaction.DecrementCounter(''stats:succeeded'')", span="64-64"];
m5_17 [cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="BackgroundProcessExtensions.cs", label="Exit HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="62-62"];
m5_18 [cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", file="BackgroundProcessExtensions.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", span="37-37"];
m5_0 [cluster="HangFire.States.SucceededState.SucceededState(long, long)", file="BackgroundProcessExtensions.cs", label="Entry HangFire.States.SucceededState.SucceededState(long, long)", span="28-28"];
m5_1 [cluster="HangFire.States.SucceededState.SucceededState(long, long)", file="BackgroundProcessExtensions.cs", label="Latency = latency", span="30-30"];
m5_2 [cluster="HangFire.States.SucceededState.SucceededState(long, long)", file="BackgroundProcessExtensions.cs", label="PerformanceDuration = performanceDuration", span="31-31"];
m5_3 [cluster="HangFire.States.SucceededState.SucceededState(long, long)", file="BackgroundProcessExtensions.cs", label="SucceededAt = DateTime.UtcNow", span="32-32"];
m5_4 [cluster="HangFire.States.SucceededState.SucceededState(long, long)", file="BackgroundProcessExtensions.cs", label="Exit HangFire.States.SucceededState.SucceededState(long, long)", span="28-28"];
m5_9 [cluster="HangFire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="BackgroundProcessExtensions.cs", label="Entry HangFire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="50-50"];
m5_19 [file="BackgroundProcessExtensions.cs", label="HangFire.States.SucceededState", span=""];
m6_6 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.IState)", file="BackgroundProcessExtensionsFacts.cs", label="Entry HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.IState)", span="46-46"];
m6_7 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.IState)", file="BackgroundProcessExtensionsFacts.cs", label="connection == null", span="52-52"];
m6_9 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.IState)", file="BackgroundProcessExtensionsFacts.cs", label="stateMachineFactory == null", span="53-53"];
m6_11 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.IState)", file="BackgroundProcessExtensionsFacts.cs", label="job == null", span="54-54"];
m6_13 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.IState)", file="BackgroundProcessExtensionsFacts.cs", label="initialState == null", span="55-55"];
m6_15 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.IState)", file="BackgroundProcessExtensionsFacts.cs", label="_stateMachineFactory = stateMachineFactory", span="57-57"];
m6_16 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.IState)", file="BackgroundProcessExtensionsFacts.cs", label="Connection = connection", span="59-59"];
m6_17 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.IState)", file="BackgroundProcessExtensionsFacts.cs", label="Job = job", span="60-60"];
m6_18 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.IState)", file="BackgroundProcessExtensionsFacts.cs", label="InitialState = initialState", span="61-61"];
m6_8 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.IState)", file="BackgroundProcessExtensionsFacts.cs", label="throw new ArgumentNullException(''connection'');", span="52-52"];
m6_10 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.IState)", file="BackgroundProcessExtensionsFacts.cs", label="throw new ArgumentNullException(''stateMachineFactory'');", span="53-53"];
m6_12 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.IState)", file="BackgroundProcessExtensionsFacts.cs", label="throw new ArgumentNullException(''job'');", span="54-54"];
m6_14 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.IState)", file="BackgroundProcessExtensionsFacts.cs", label="throw new ArgumentNullException(''initialState'');", span="55-55"];
m6_19 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.IState)", file="BackgroundProcessExtensionsFacts.cs", label="Items = new Dictionary<string, object>()", span="63-63"];
m6_20 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.IState)", file="BackgroundProcessExtensionsFacts.cs", label="Exit HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.IState)", span="46-46"];
m6_22 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="BackgroundProcessExtensionsFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m6_35 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="BackgroundProcessExtensionsFacts.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m6_23 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="BackgroundProcessExtensionsFacts.cs", label="Entry HangFire.Client.CreateContext.SetJobParameter(string, object)", span="96-96"];
m6_24 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="BackgroundProcessExtensionsFacts.cs", label="String.IsNullOrWhiteSpace(name)", span="98-98"];
m6_28 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="BackgroundProcessExtensionsFacts.cs", label="var serializedValue = JobHelper.ToJson(value)", span="105-105"];
m6_29 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="BackgroundProcessExtensionsFacts.cs", label="!_parameters.ContainsKey(name)", span="107-107"];
m6_30 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="BackgroundProcessExtensionsFacts.cs", label="_parameters.Add(name, serializedValue)", span="109-109"];
m6_31 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="BackgroundProcessExtensionsFacts.cs", label="_parameters[name] = serializedValue", span="113-113"];
m6_25 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="BackgroundProcessExtensionsFacts.cs", label="throw new ArgumentNullException(''name'');", span="98-98"];
m6_26 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="BackgroundProcessExtensionsFacts.cs", label=_jobWasCreated, span="100-100"];
m6_27 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="BackgroundProcessExtensionsFacts.cs", label="throw new InvalidOperationException(''Could not set parameter for a created job.'');", span="102-102"];
m6_32 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="BackgroundProcessExtensionsFacts.cs", label="Exit HangFire.Client.CreateContext.SetJobParameter(string, object)", span="96-96"];
m6_46 [cluster="System.InvalidOperationException.InvalidOperationException(string, System.Exception)", file="BackgroundProcessExtensionsFacts.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string, System.Exception)", span="0-0"];
m6_53 [cluster="HangFire.States.IStateMachineFactory.Create(HangFire.Storage.IStorageConnection)", file="BackgroundProcessExtensionsFacts.cs", label="Entry HangFire.States.IStateMachineFactory.Create(HangFire.Storage.IStorageConnection)", span="8-8"];
m6_0 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.CreateContext)", file="BackgroundProcessExtensionsFacts.cs", label="Entry HangFire.Client.CreateContext.CreateContext(HangFire.Client.CreateContext)", span="37-37"];
m6_1 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.CreateContext)", file="BackgroundProcessExtensionsFacts.cs", label="Items = context.Items", span="40-40"];
m6_2 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.CreateContext)", file="BackgroundProcessExtensionsFacts.cs", label="JobId = context.JobId", span="41-41"];
m6_3 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.CreateContext)", file="BackgroundProcessExtensionsFacts.cs", label="_jobWasCreated = context._jobWasCreated", span="42-42"];
m6_4 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.CreateContext)", file="BackgroundProcessExtensionsFacts.cs", label="_parameters = context._parameters", span="43-43"];
m6_5 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.CreateContext)", file="BackgroundProcessExtensionsFacts.cs", label="Exit HangFire.Client.CreateContext.CreateContext(HangFire.Client.CreateContext)", span="37-37"];
m6_45 [cluster="HangFire.Common.JobHelper.FromJson<T>(string)", file="BackgroundProcessExtensionsFacts.cs", label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="30-30"];
m6_38 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="BackgroundProcessExtensionsFacts.cs", label="Entry HangFire.Client.CreateContext.GetJobParameter<T>(string)", span="129-129"];
m6_39 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="BackgroundProcessExtensionsFacts.cs", label="String.IsNullOrWhiteSpace(name)", span="131-131"];
m6_41 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="BackgroundProcessExtensionsFacts.cs", label="return _parameters.ContainsKey(name)\r\n                    ? JobHelper.FromJson<T>(_parameters[name])\r\n                    : default(T);", span="135-137"];
m6_43 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="BackgroundProcessExtensionsFacts.cs", label="throw new InvalidOperationException(String.Format(\r\n                    ''Could not get a value of the job parameter `{0}`. See inner exception for details.'',\r\n                    name), ex);", span="141-143"];
m6_40 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="BackgroundProcessExtensionsFacts.cs", label="throw new ArgumentNullException(''name'');", span="131-131"];
m6_42 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="BackgroundProcessExtensionsFacts.cs", label=Exception, span="139-139"];
m6_44 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="BackgroundProcessExtensionsFacts.cs", label="Exit HangFire.Client.CreateContext.GetJobParameter<T>(string)", span="129-129"];
m6_33 [cluster="string.IsNullOrWhiteSpace(string)", file="BackgroundProcessExtensionsFacts.cs", label="Entry string.IsNullOrWhiteSpace(string)", span="0-0"];
m6_48 [cluster="HangFire.Client.CreateContext.CreateJob()", file="BackgroundProcessExtensionsFacts.cs", label="Entry HangFire.Client.CreateContext.CreateJob()", span="147-147"];
m6_49 [cluster="HangFire.Client.CreateContext.CreateJob()", file="BackgroundProcessExtensionsFacts.cs", label="var stateMachine = _stateMachineFactory.Create(Connection)", span="149-149"];
m6_50 [cluster="HangFire.Client.CreateContext.CreateJob()", file="BackgroundProcessExtensionsFacts.cs", label="JobId = stateMachine.CreateInState(Job, _parameters, InitialState)", span="151-151"];
m6_51 [cluster="HangFire.Client.CreateContext.CreateJob()", file="BackgroundProcessExtensionsFacts.cs", label="_jobWasCreated = true", span="152-152"];
m6_52 [cluster="HangFire.Client.CreateContext.CreateJob()", file="BackgroundProcessExtensionsFacts.cs", label="Exit HangFire.Client.CreateContext.CreateJob()", span="147-147"];
m6_36 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="BackgroundProcessExtensionsFacts.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m6_37 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="BackgroundProcessExtensionsFacts.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m6_54 [cluster="HangFire.States.IStateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.States.IState)", file="BackgroundProcessExtensionsFacts.cs", label="Entry HangFire.States.IStateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.States.IState)", span="23-23"];
m6_47 [cluster="string.Format(string, object)", file="BackgroundProcessExtensionsFacts.cs", label="Entry string.Format(string, object)", span="0-0"];
m6_34 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="BackgroundProcessExtensionsFacts.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m6_55 [file="BackgroundProcessExtensionsFacts.cs", label="HangFire.Client.CreateContext", span=""];
m7_0 [cluster="Hangfire.Server.IBackgroundProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="IBackgroundProcess.cs", label="Entry Hangfire.Server.IBackgroundProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="24-24"];
m7_1 [cluster="Hangfire.Server.IBackgroundProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="IBackgroundProcess.cs", label="Exit Hangfire.Server.IBackgroundProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="24-24"];
m8_6 [cluster="Mock<IBackgroundProcess>.cstr", file="InfiniteLoopComponentFacts.cs", label="Entry Mock<IBackgroundProcess>.cstr", span=""];
m8_7 [cluster="Hangfire.Core.Tests.BackgroundProcessContextMock.BackgroundProcessContextMock()", file="InfiniteLoopComponentFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundProcessContextMock.BackgroundProcessContextMock()", span="12-12"];
m8_22 [cluster="Unk.Same", file="InfiniteLoopComponentFacts.cs", label="Entry Unk.Same", span=""];
m8_21 [cluster="Unk.CreateProcess", file="InfiniteLoopComponentFacts.cs", label="Entry Unk.CreateProcess", span=""];
m8_16 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InnerComponent_ReturnsTheInnerProcess()", file="InfiniteLoopComponentFacts.cs", label="Entry Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InnerComponent_ReturnsTheInnerProcess()", span="28-28"];
m8_17 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InnerComponent_ReturnsTheInnerProcess()", file="InfiniteLoopComponentFacts.cs", label="var process = CreateProcess(_innerComponent.Object)", span="30-30"];
m8_18 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InnerComponent_ReturnsTheInnerProcess()", file="InfiniteLoopComponentFacts.cs", label="var result = process.InnerProcess", span="31-31"];
m8_19 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InnerComponent_ReturnsTheInnerProcess()", file="InfiniteLoopComponentFacts.cs", label="Assert.Same(_innerComponent.Object, result)", span="32-32"];
m8_20 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InnerComponent_ReturnsTheInnerProcess()", file="InfiniteLoopComponentFacts.cs", label="Exit Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InnerComponent_ReturnsTheInnerProcess()", span="28-28"];
m8_32 [cluster="System.TimeSpan.FromMilliseconds(double)", file="InfiniteLoopComponentFacts.cs", label="Entry System.TimeSpan.FromMilliseconds(double)", span="0-0"];
m8_81 [cluster="Unk.Equal", file="InfiniteLoopComponentFacts.cs", label="Entry Unk.Equal", span=""];
m8_70 [cluster="System.Threading.CancellationTokenSource.Cancel()", file="InfiniteLoopComponentFacts.cs", label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0"];
m8_23 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_CallsTheExecuteMethod_OfAComponent_UntilCancellationToken_IsCanceled()", file="InfiniteLoopComponentFacts.cs", label="Entry Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_CallsTheExecuteMethod_OfAComponent_UntilCancellationToken_IsCanceled()", span="36-36"];
m8_24 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_CallsTheExecuteMethod_OfAComponent_UntilCancellationToken_IsCanceled()", file="InfiniteLoopComponentFacts.cs", label="_innerComponent.Setup(x => x.Execute(It.IsAny<CancellationToken>()))\r\n                  .Callback(() => { Thread.Sleep(5); })", span="39-40"];
m8_25 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_CallsTheExecuteMethod_OfAComponent_UntilCancellationToken_IsCanceled()", file="InfiniteLoopComponentFacts.cs", label="var process = CreateProcess(_innerComponent.Object)", span="42-42"];
m8_26 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_CallsTheExecuteMethod_OfAComponent_UntilCancellationToken_IsCanceled()", file="InfiniteLoopComponentFacts.cs", label="_context.CancellationTokenSource.CancelAfter(TimeSpan.FromMilliseconds(100))", span="43-43"];
m8_27 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_CallsTheExecuteMethod_OfAComponent_UntilCancellationToken_IsCanceled()", file="InfiniteLoopComponentFacts.cs", label="process.Execute(_context.Object)", span="46-46"];
m8_28 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_CallsTheExecuteMethod_OfAComponent_UntilCancellationToken_IsCanceled()", file="InfiniteLoopComponentFacts.cs", label="_innerComponent.Verify(x => x.Execute(_context.CancellationTokenSource.Token), Times.AtLeast(5))", span="49-49"];
m8_29 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_CallsTheExecuteMethod_OfAComponent_UntilCancellationToken_IsCanceled()", file="InfiniteLoopComponentFacts.cs", label="Exit Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_CallsTheExecuteMethod_OfAComponent_UntilCancellationToken_IsCanceled()", span="36-36"];
m8_44 [cluster="System.Threading.Thread.Sleep(int)", file="InfiniteLoopComponentFacts.cs", label="Entry System.Threading.Thread.Sleep(int)", span="0-0"];
m8_8 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Ctor_ThrowsAnException_WhenInnerComponentIsNull()", file="InfiniteLoopComponentFacts.cs", label="Entry Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Ctor_ThrowsAnException_WhenInnerComponentIsNull()", span="22-22"];
m8_9 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Ctor_ThrowsAnException_WhenInnerComponentIsNull()", file="InfiniteLoopComponentFacts.cs", label="Assert.Throws<ArgumentNullException>(() => new InfiniteLoopProcess(null))", span="24-24"];
m8_10 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Ctor_ThrowsAnException_WhenInnerComponentIsNull()", file="InfiniteLoopComponentFacts.cs", label="Exit Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Ctor_ThrowsAnException_WhenInnerComponentIsNull()", span="22-22"];
m8_11 [cluster="Unk.>", file="InfiniteLoopComponentFacts.cs", label="Entry Unk.>", span=""];
m8_79 [cluster="Hangfire.Server.InfiniteLoopProcess.ToString()", file="InfiniteLoopComponentFacts.cs", label="Entry Hangfire.Server.InfiniteLoopProcess.ToString()", span="39-39"];
m8_34 [cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopComponentFacts.cs", label="Entry Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="31-31"];
m8_0 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InfiniteLoopComponentFacts()", file="InfiniteLoopComponentFacts.cs", label="Entry Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InfiniteLoopComponentFacts()", span="14-14"];
m8_1 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InfiniteLoopComponentFacts()", file="InfiniteLoopComponentFacts.cs", label="_innerComponent = new Mock<IServerComponent>()", span="16-16"];
m8_2 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InfiniteLoopComponentFacts()", file="InfiniteLoopComponentFacts.cs", label="_innerProcess = new Mock<IBackgroundProcess>()", span="17-17"];
m8_3 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InfiniteLoopComponentFacts()", file="InfiniteLoopComponentFacts.cs", label="_context = new BackgroundProcessContextMock()", span="18-18"];
m8_4 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InfiniteLoopComponentFacts()", file="InfiniteLoopComponentFacts.cs", label="Exit Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InfiniteLoopComponentFacts()", span="14-14"];
m8_80 [cluster="Unk.ToString", file="InfiniteLoopComponentFacts.cs", label="Entry Unk.ToString", span=""];
m8_48 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_CallsTheExecuteMethod_OfAProcess_UntilCancellationToken_IsCanceled()", file="InfiniteLoopComponentFacts.cs", label="Entry Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_CallsTheExecuteMethod_OfAProcess_UntilCancellationToken_IsCanceled()", span="53-53"];
m8_49 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_CallsTheExecuteMethod_OfAProcess_UntilCancellationToken_IsCanceled()", file="InfiniteLoopComponentFacts.cs", label="_innerProcess.Setup(x => x.Execute(It.IsAny<BackgroundProcessContext>()))\r\n                  .Callback(() => { Thread.Sleep(5); })", span="56-57"];
m8_50 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_CallsTheExecuteMethod_OfAProcess_UntilCancellationToken_IsCanceled()", file="InfiniteLoopComponentFacts.cs", label="var process = CreateProcess(_innerProcess.Object)", span="59-59"];
m8_51 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_CallsTheExecuteMethod_OfAProcess_UntilCancellationToken_IsCanceled()", file="InfiniteLoopComponentFacts.cs", label="_context.CancellationTokenSource.CancelAfter(TimeSpan.FromMilliseconds(100))", span="60-60"];
m8_52 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_CallsTheExecuteMethod_OfAProcess_UntilCancellationToken_IsCanceled()", file="InfiniteLoopComponentFacts.cs", label="process.Execute(_context.Object)", span="63-63"];
m8_53 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_CallsTheExecuteMethod_OfAProcess_UntilCancellationToken_IsCanceled()", file="InfiniteLoopComponentFacts.cs", label="_innerProcess.Verify(x => x.Execute(_context.Object), Times.AtLeast(5))", span="66-66"];
m8_54 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_CallsTheExecuteMethod_OfAProcess_UntilCancellationToken_IsCanceled()", file="InfiniteLoopComponentFacts.cs", label="Exit Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_CallsTheExecuteMethod_OfAProcess_UntilCancellationToken_IsCanceled()", span="53-53"];
m8_30 [cluster="Unk.Setup", file="InfiniteLoopComponentFacts.cs", label="Entry Unk.Setup", span=""];
m8_5 [cluster="Mock<IServerComponent>.cstr", file="InfiniteLoopComponentFacts.cs", label="Entry Mock<IServerComponent>.cstr", span=""];
m8_71 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="Entry lambda expression", span="80-80"];
m8_12 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="Entry lambda expression", span="24-24"];
m8_13 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="new InfiniteLoopProcess(null)", span="24-24"];
m8_14 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="Exit lambda expression", span="24-24"];
m8_37 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="Entry lambda expression", span="39-39"];
m8_41 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="Entry lambda expression", span="40-40"];
m8_45 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="Entry lambda expression", span="49-49"];
m8_38 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="x.Execute(It.IsAny<CancellationToken>())", span="39-39"];
m8_39 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="Exit lambda expression", span="39-39"];
m8_42 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="Thread.Sleep(5)", span="40-40"];
m8_43 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="Exit lambda expression", span="40-40"];
m8_46 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="x.Execute(_context.CancellationTokenSource.Token)", span="49-49"];
m8_47 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="Exit lambda expression", span="49-49"];
m8_55 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="Entry lambda expression", span="56-56"];
m8_58 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="Entry lambda expression", span="57-57"];
m8_61 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="Entry lambda expression", span="66-66"];
m8_56 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="x.Execute(It.IsAny<BackgroundProcessContext>())", span="56-56"];
m8_57 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="Exit lambda expression", span="56-56"];
m8_59 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="Thread.Sleep(5)", span="57-57"];
m8_60 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="Exit lambda expression", span="57-57"];
m8_62 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="x.Execute(_context.Object)", span="66-66"];
m8_63 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="Exit lambda expression", span="66-66"];
m8_72 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="x.Execute(It.IsAny<CancellationToken>())", span="80-80"];
m8_73 [cluster="lambda expression", file="InfiniteLoopComponentFacts.cs", label="Exit lambda expression", span="80-80"];
m8_74 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.ToString_ReturnsTheName_OfInnerComponent()", file="InfiniteLoopComponentFacts.cs", label="Entry Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.ToString_ReturnsTheName_OfInnerComponent()", span="84-84"];
m8_75 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.ToString_ReturnsTheName_OfInnerComponent()", file="InfiniteLoopComponentFacts.cs", label="var process = CreateProcess(_innerComponent.Object)", span="86-86"];
m8_76 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.ToString_ReturnsTheName_OfInnerComponent()", file="InfiniteLoopComponentFacts.cs", label="var result = process.ToString()", span="87-87"];
m8_77 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.ToString_ReturnsTheName_OfInnerComponent()", file="InfiniteLoopComponentFacts.cs", label="Assert.Equal(_innerComponent.Object.ToString(), result)", span="88-88"];
m8_78 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.ToString_ReturnsTheName_OfInnerComponent()", file="InfiniteLoopComponentFacts.cs", label="Exit Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.ToString_ReturnsTheName_OfInnerComponent()", span="84-84"];
m8_64 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallTheExecuteMethod_WhenCancellationToken_IsAlreadyCanceled()", file="InfiniteLoopComponentFacts.cs", label="Entry Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallTheExecuteMethod_WhenCancellationToken_IsAlreadyCanceled()", span="70-70"];
m8_65 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallTheExecuteMethod_WhenCancellationToken_IsAlreadyCanceled()", file="InfiniteLoopComponentFacts.cs", label="var process = CreateProcess(_innerComponent.Object)", span="73-73"];
m8_66 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallTheExecuteMethod_WhenCancellationToken_IsAlreadyCanceled()", file="InfiniteLoopComponentFacts.cs", label="_context.CancellationTokenSource.Cancel()", span="74-74"];
m8_67 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallTheExecuteMethod_WhenCancellationToken_IsAlreadyCanceled()", file="InfiniteLoopComponentFacts.cs", label="process.Execute(_context.Object)", span="77-77"];
m8_68 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallTheExecuteMethod_WhenCancellationToken_IsAlreadyCanceled()", file="InfiniteLoopComponentFacts.cs", label="_innerComponent.Verify(x => x.Execute(It.IsAny<CancellationToken>()), Times.Never)", span="80-80"];
m8_69 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallTheExecuteMethod_WhenCancellationToken_IsAlreadyCanceled()", file="InfiniteLoopComponentFacts.cs", label="Exit Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallTheExecuteMethod_WhenCancellationToken_IsAlreadyCanceled()", span="70-70"];
m8_33 [cluster="System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)", file="InfiniteLoopComponentFacts.cs", label="Entry System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)", span="0-0"];
m8_35 [cluster="Unk.AtLeast", file="InfiniteLoopComponentFacts.cs", label="Entry Unk.AtLeast", span=""];
m8_15 [cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopComponentFacts.cs", label="Entry Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", span="23-23"];
m8_40 [cluster="Unk.Execute", file="InfiniteLoopComponentFacts.cs", label="Entry Unk.Execute", span=""];
m8_82 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.CreateProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopComponentFacts.cs", label="Entry Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.CreateProcess(Hangfire.Server.IServerProcess)", span="91-91"];
m8_83 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.CreateProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopComponentFacts.cs", label="return new InfiniteLoopProcess(process);", span="93-93"];
m8_84 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.CreateProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopComponentFacts.cs", label="Exit Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.CreateProcess(Hangfire.Server.IServerProcess)", span="91-91"];
m8_31 [cluster="Unk.Callback", file="InfiniteLoopComponentFacts.cs", label="Entry Unk.Callback", span=""];
m8_36 [cluster="Unk.Verify", file="InfiniteLoopComponentFacts.cs", label="Entry Unk.Verify", span=""];
m8_85 [file="InfiniteLoopComponentFacts.cs", label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", span=""];
m9_4 [cluster="HangFire.Redis.RedisConnection.Dispose()", file="InfiniteLoopProcess.cs", label="Redis.Dispose()", span="41-41"];
m9_113 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="InfiniteLoopProcess.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m9_168 [cluster="int.ToString(System.IFormatProvider)", file="InfiniteLoopProcess.cs", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
m9_25 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs", label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                ''Fetched'',\r\n                JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="95-98"];
m9_12 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="49-49"];
m9_13 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs", label="string jobId", span="51-51"];
m9_16 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="57-57"];
m9_17 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs", label="queueIndex = (queueIndex + 1) % queues.Length", span="59-59"];
m9_18 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs", label="queueName = queues[queueIndex]", span="60-60"];
m9_14 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs", label="string queueName", span="52-52"];
m9_15 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs", label="var queueIndex = 0", span="53-53"];
m9_21 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs", label="queueIndex == 0", span="65-65"];
m9_19 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs", label="var queueKey = RedisStorage.Prefix + String.Format(''queue:{0}'', queueName)", span="62-62"];
m9_20 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs", label="var fetchedKey = RedisStorage.Prefix + String.Format(''queue:{0}:dequeued'', queueName)", span="63-63"];
m9_26 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs", label="return new RedisFetchedJob(Redis, jobId, queueName);", span="104-104"];
m9_22 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs", label="jobId = Redis.BlockingPopAndPushItemBetweenLists(\r\n                        queueKey,\r\n                        fetchedKey,\r\n                        FetchTimeout)", span="67-70"];
m9_23 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs", label="jobId = Redis.PopAndPushItemBetweenLists(\r\n                        queueKey, fetchedKey)", span="74-75"];
m9_24 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs", label="jobId == null", span="78-78"];
m9_27 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs", label="Exit HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="49-49"];
m9_35 [cluster="HangFire.Redis.RedisConnection.AcquireDistributedLock(string, System.TimeSpan)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Redis.RedisConnection.AcquireDistributedLock(string, System.TimeSpan)", span="107-107"];
m9_36 [cluster="HangFire.Redis.RedisConnection.AcquireDistributedLock(string, System.TimeSpan)", file="InfiniteLoopProcess.cs", label="return Redis.AcquireLock(RedisStorage.Prefix + resource, timeout);", span="109-109"];
m9_37 [cluster="HangFire.Redis.RedisConnection.AcquireDistributedLock(string, System.TimeSpan)", file="InfiniteLoopProcess.cs", label="Exit HangFire.Redis.RedisConnection.AcquireDistributedLock(string, System.TimeSpan)", span="107-107"];
m9_58 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="InfiniteLoopProcess.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m9_98 [cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", span="24-24"];
m9_131 [cluster="Unk.GetAllItemsFromSortedSet", file="InfiniteLoopProcess.cs", label="Entry Unk.GetAllItemsFromSortedSet", span=""];
m9_50 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="InfiniteLoopProcess.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn))", span="136-138"];
m9_39 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="112-112"];
m9_40 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="InfiniteLoopProcess.cs", label="var jobId = Guid.NewGuid().ToString()", span="118-118"];
m9_41 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="InfiniteLoopProcess.cs", label="var invocationData = InvocationData.Serialize(job)", span="120-120"];
m9_42 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="InfiniteLoopProcess.cs", label="var storedParameters = new Dictionary<string, string>(parameters)", span="123-123"];
m9_47 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="InfiniteLoopProcess.cs", label="storedParameters.Add(''CreatedAt'', JobHelper.ToStringTimestamp(createdAt))", span="128-128"];
m9_49 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="InfiniteLoopProcess.cs", label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    storedParameters))", span="132-134"];
m9_52 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="InfiniteLoopProcess.cs", label="return jobId;", span="144-144"];
m9_43 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="InfiniteLoopProcess.cs", label="storedParameters.Add(''Type'', invocationData.Type)", span="124-124"];
m9_44 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="InfiniteLoopProcess.cs", label="storedParameters.Add(''Method'', invocationData.Method)", span="125-125"];
m9_45 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="InfiniteLoopProcess.cs", label="storedParameters.Add(''ParameterTypes'', invocationData.ParameterTypes)", span="126-126"];
m9_46 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="InfiniteLoopProcess.cs", label="storedParameters.Add(''Arguments'', invocationData.Arguments)", span="127-127"];
m9_48 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="InfiniteLoopProcess.cs", label="var transaction = Redis.CreateTransaction()", span="130-130"];
m9_51 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="InfiniteLoopProcess.cs", label="transaction.Commit()", span="141-141"];
m9_53 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="InfiniteLoopProcess.cs", label="Exit HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="112-112"];
m9_64 [cluster="Unk.SetRangeInHash", file="InfiniteLoopProcess.cs", label="Entry Unk.SetRangeInHash", span=""];
m9_133 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="248-248"];
m9_134 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="InfiniteLoopProcess.cs", label="return Redis.GetRangeFromSortedSetByLowestScore(\r\n                RedisStorage.Prefix + key, fromScore, toScore, 0, 1)\r\n                .FirstOrDefault();", span="250-252"];
m9_135 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="InfiniteLoopProcess.cs", label="Exit HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="248-248"];
m9_226 [cluster="Unk.FromNullableStringTimestamp", file="InfiniteLoopProcess.cs", label="Entry Unk.FromNullableStringTimestamp", span=""];
m9_96 [cluster="Unk.GetAllEntriesFromHash", file="InfiniteLoopProcess.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m9_102 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Redis.RedisConnection.GetStateData(string)", span="204-204"];
m9_103 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", file="InfiniteLoopProcess.cs", label="jobId == null", span="206-206"];
m9_105 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", file="InfiniteLoopProcess.cs", label="var entries = Redis.GetAllEntriesFromHash(\r\n                RedisStorage.Prefix + String.Format(''job:{0}:state'', jobId))", span="208-209"];
m9_104 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", file="InfiniteLoopProcess.cs", label="throw new ArgumentNullException(''jobId'');", span="206-206"];
m9_106 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", file="InfiniteLoopProcess.cs", label="entries.Count == 0", span="211-211"];
m9_108 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", file="InfiniteLoopProcess.cs", label="var stateData = new Dictionary<string, string>(entries)", span="213-213"];
m9_111 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", file="InfiniteLoopProcess.cs", label="return new StateData\r\n            {\r\n                Name = entries[''State''],\r\n                Reason = entries.ContainsKey(''Reason'') ? entries[''Reason''] : null,\r\n                Data = stateData\r\n            };", span="217-222"];
m9_107 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", file="InfiniteLoopProcess.cs", label="return null;", span="211-211"];
m9_109 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", file="InfiniteLoopProcess.cs", label="stateData.Remove(''State'')", span="214-214"];
m9_110 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", file="InfiniteLoopProcess.cs", label="stateData.Remove(''Reason'')", span="215-215"];
m9_112 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", file="InfiniteLoopProcess.cs", label="Exit HangFire.Redis.RedisConnection.GetStateData(string)", span="204-204"];
m9_114 [cluster="Dictionary<string, string>.cstr", file="InfiniteLoopProcess.cs", label="Entry Dictionary<string, string>.cstr", span=""];
m9_225 [cluster="Unk.FromStringTimestamp", file="InfiniteLoopProcess.cs", label="Entry Unk.FromStringTimestamp", span=""];
m9_11 [cluster="Unk.CreateTransaction", file="InfiniteLoopProcess.cs", label="Entry Unk.CreateTransaction", span=""];
m9_33 [cluster="Unk.SetEntryInHash", file="InfiniteLoopProcess.cs", label="Entry Unk.SetEntryInHash", span=""];
m9_130 [cluster="HangFire.Redis.RedisStorage.GetRedisKey(string)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Redis.RedisStorage.GetRedisKey(string)", span="107-107"];
m9_163 [cluster="Unk.AddItemToSet", file="InfiniteLoopProcess.cs", label="Entry Unk.AddItemToSet", span=""];
m9_193 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", span="328-328"];
m9_194 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="InfiniteLoopProcess.cs", label="var serverNames = Redis.GetAllItemsFromSet(RedisStorage.Prefix + ''servers'')", span="330-330"];
m9_205 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="InfiniteLoopProcess.cs", label="utcNow > maxTime.Add(timeOut)", span="361-361"];
m9_195 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="InfiniteLoopProcess.cs", label="var heartbeats = new Dictionary<string, Tuple<DateTime, DateTime?>>()", span="331-331"];
m9_198 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="InfiniteLoopProcess.cs", label=serverNames, span="337-337"];
m9_196 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="InfiniteLoopProcess.cs", label="var utcNow = DateTime.UtcNow", span="333-333"];
m9_200 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="InfiniteLoopProcess.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat''),\r\n                        x => heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1]))))", span="341-349"];
m9_203 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="InfiniteLoopProcess.cs", label=heartbeats, span="356-356"];
m9_197 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="InfiniteLoopProcess.cs", label="var pipeline = Redis.CreatePipeline()", span="335-335"];
m9_201 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="InfiniteLoopProcess.cs", label="pipeline.Flush()", span="352-352"];
m9_199 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="InfiniteLoopProcess.cs", label="var name = serverName", span="339-339"];
m9_202 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="InfiniteLoopProcess.cs", label="var removedServerCount = 0", span="355-355"];
m9_207 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="InfiniteLoopProcess.cs", label="removedServerCount++", span="364-364"];
m9_208 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="InfiniteLoopProcess.cs", label="return removedServerCount;", span="368-368"];
m9_204 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="InfiniteLoopProcess.cs", label="var maxTime = new DateTime(\r\n                    Math.Max(heartbeat.Value.Item1.Ticks, (heartbeat.Value.Item2 ?? DateTime.MinValue).Ticks))", span="358-359"];
m9_206 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="InfiniteLoopProcess.cs", label="RemoveServer(Redis, heartbeat.Key)", span="363-363"];
m9_209 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="InfiniteLoopProcess.cs", label="Exit HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", span="328-328"];
m9_29 [cluster="string.Format(string, object)", file="InfiniteLoopProcess.cs", label="Entry string.Format(string, object)", span="0-0"];
m9_30 [cluster="Unk.BlockingPopAndPushItemBetweenLists", file="InfiniteLoopProcess.cs", label="Entry Unk.BlockingPopAndPushItemBetweenLists", span=""];
m9_191 [cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="InfiniteLoopProcess.cs", label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                ''Heartbeat'',\r\n                JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="322-325"];
m9_190 [cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Redis.RedisConnection.Heartbeat(string)", span="320-320"];
m9_192 [cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="InfiniteLoopProcess.cs", label="Exit HangFire.Redis.RedisConnection.Heartbeat(string)", span="320-320"];
m9_189 [cluster="Unk.RemoveEntry", file="InfiniteLoopProcess.cs", label="Entry Unk.RemoveEntry", span=""];
m9_179 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="InfiniteLoopProcess.cs", label="transaction.QueueCommand(x => x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId)))", span="312-314"];
m9_176 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", span="304-304"];
m9_177 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="InfiniteLoopProcess.cs", label="var transaction = redis.CreateTransaction()", span="306-306"];
m9_178 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="InfiniteLoopProcess.cs", label="transaction.QueueCommand(x => x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId))", span="308-310"];
m9_180 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="InfiniteLoopProcess.cs", label="transaction.Commit()", span="316-316"];
m9_181 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="InfiniteLoopProcess.cs", label="Exit HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", span="304-304"];
m9_7 [cluster="HangFire.Redis.RedisConnection.CreateWriteTransaction()", file="InfiniteLoopProcess.cs", label="Entry HangFire.Redis.RedisConnection.CreateWriteTransaction()", span="44-44"];
m9_8 [cluster="HangFire.Redis.RedisConnection.CreateWriteTransaction()", file="InfiniteLoopProcess.cs", label="return new RedisWriteOnlyTransaction(Redis.CreateTransaction());", span="46-46"];
m9_9 [cluster="HangFire.Redis.RedisConnection.CreateWriteTransaction()", file="InfiniteLoopProcess.cs", label="Exit HangFire.Redis.RedisConnection.CreateWriteTransaction()", span="44-44"];
m9_101 [cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", span="60-60"];
m9_120 [cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Redis.RedisConnection.GetJobParameter(string, string)", span="233-233"];
m9_121 [cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="InfiniteLoopProcess.cs", label="return Redis.GetValueFromHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                name);", span="235-237"];
m9_122 [cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="InfiniteLoopProcess.cs", label="Exit HangFire.Redis.RedisConnection.GetJobParameter(string, string)", span="233-233"];
m9_68 [cluster="Unk.ExpireEntryIn", file="InfiniteLoopProcess.cs", label="Entry Unk.ExpireEntryIn", span=""];
m9_55 [cluster="System.Guid.ToString()", file="InfiniteLoopProcess.cs", label="Entry System.Guid.ToString()", span="0-0"];
m9_138 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="255-255"];
m9_139 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="InfiniteLoopProcess.cs", label="key == null", span="257-257"];
m9_141 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="InfiniteLoopProcess.cs", label="keyValuePairs == null", span="258-258"];
m9_143 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="InfiniteLoopProcess.cs", label="Redis.SetRangeInHash(RedisStorage.GetRedisKey(key), keyValuePairs)", span="260-260"];
m9_140 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="InfiniteLoopProcess.cs", label="throw new ArgumentNullException(''key'');", span="257-257"];
m9_142 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="InfiniteLoopProcess.cs", label="throw new ArgumentNullException(''keyValuePairs'');", span="258-258"];
m9_144 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="InfiniteLoopProcess.cs", label="Exit HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="255-255"];
m9_212 [cluster="Unk.Flush", file="InfiniteLoopProcess.cs", label="Entry Unk.Flush", span=""];
m9_28 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="InfiniteLoopProcess.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m9_10 [cluster="RedisWriteOnlyTransaction.cstr", file="InfiniteLoopProcess.cs", label="Entry RedisWriteOnlyTransaction.cstr", span=""];
m9_227 [cluster="Unk.Add", file="InfiniteLoopProcess.cs", label="Entry Unk.Add", span=""];
m9_215 [cluster="System.DateTime.Add(System.TimeSpan)", file="InfiniteLoopProcess.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m9_116 [cluster="HangFire.Storage.StateData.StateData()", file="InfiniteLoopProcess.cs", label="Entry HangFire.Storage.StateData.StateData()", span="21-21"];
m9_151 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="272-272"];
m9_152 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="InfiniteLoopProcess.cs", label="var transaction = Redis.CreateTransaction()", span="274-274"];
m9_153 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="InfiniteLoopProcess.cs", label="transaction.QueueCommand(x => x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId))", span="276-277"];
m9_154 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="InfiniteLoopProcess.cs", label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', context.WorkerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        }))", span="279-285"];
m9_155 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="InfiniteLoopProcess.cs", label="context.Queues", span="287-287"];
m9_157 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="InfiniteLoopProcess.cs", label="transaction.QueueCommand(x => x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1))", span="290-292"];
m9_158 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="InfiniteLoopProcess.cs", label="transaction.Commit()", span="295-295"];
m9_156 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="InfiniteLoopProcess.cs", label="var queue1 = queue", span="289-289"];
m9_159 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="InfiniteLoopProcess.cs", label="Exit HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="272-272"];
m9_167 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="InfiniteLoopProcess.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m9_224 [cluster="System.Tuple<T1, T2>.Tuple(T1, T2)", file="InfiniteLoopProcess.cs", label="Entry System.Tuple<T1, T2>.Tuple(T1, T2)", span="0-0"];
m9_34 [cluster="HangFire.Redis.RedisFetchedJob.RedisFetchedJob(IRedisClient, string, string)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Redis.RedisFetchedJob.RedisFetchedJob(IRedisClient, string, string)", span="30-30"];
m9_57 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="InfiniteLoopProcess.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="0-0"];
m9_172 [cluster="Unk.AddItemToList", file="InfiniteLoopProcess.cs", label="Entry Unk.AddItemToList", span=""];
m9_6 [cluster="Unk.Dispose", file="InfiniteLoopProcess.cs", label="Entry Unk.Dispose", span=""];
m9_185 [cluster="Unk.RemoveItemFromSet", file="InfiniteLoopProcess.cs", label="Entry Unk.RemoveItemFromSet", span=""];
m9_213 [cluster="System.DateTime.DateTime(long)", file="InfiniteLoopProcess.cs", label="Entry System.DateTime.DateTime(long)", span="0-0"];
m9_173 [cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Redis.RedisConnection.RemoveServer(string)", span="299-299"];
m9_174 [cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="InfiniteLoopProcess.cs", label="RemoveServer(Redis, serverId)", span="301-301"];
m9_175 [cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="InfiniteLoopProcess.cs", label="Exit HangFire.Redis.RedisConnection.RemoveServer(string)", span="299-299"];
m9_214 [cluster="System.Math.Max(long, long)", file="InfiniteLoopProcess.cs", label="Entry System.Math.Max(long, long)", span="0-0"];
m9_69 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Redis.RedisConnection.GetJobData(string)", span="147-147"];
m9_70 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="var storedData = Redis.GetAllEntriesFromHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id))", span="149-150"];
m9_71 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="storedData.Count == 0", span="152-152"];
m9_78 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="storedData.ContainsKey(''Type'')", span="160-160"];
m9_79 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="type = storedData[''Type'']", span="162-162"];
m9_80 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="storedData.ContainsKey(''Method'')", span="164-164"];
m9_81 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="method = storedData[''Method'']", span="166-166"];
m9_82 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="storedData.ContainsKey(''ParameterTypes'')", span="168-168"];
m9_83 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="parameterTypes = storedData[''ParameterTypes'']", span="170-170"];
m9_84 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="storedData.ContainsKey(''Arguments'')", span="172-172"];
m9_85 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="arguments = storedData[''Arguments'']", span="174-174"];
m9_86 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="storedData.ContainsKey(''CreatedAt'')", span="176-176"];
m9_87 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="createdAt = storedData[''CreatedAt'']", span="178-178"];
m9_94 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="return new JobData\r\n            {\r\n                Job = job,\r\n                State = storedData.ContainsKey(''State'') ? storedData[''State''] : null,\r\n                CreatedAt = JobHelper.FromNullableStringTimestamp(createdAt) ?? DateTime.MinValue,\r\n                LoadException = loadException\r\n            };", span="195-201"];
m9_72 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="return null;", span="152-152"];
m9_73 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="string type = null", span="154-154"];
m9_74 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="string method = null", span="155-155"];
m9_90 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="var invocationData = new InvocationData(type, method, parameterTypes, arguments)", span="184-184"];
m9_75 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="string parameterTypes = null", span="156-156"];
m9_76 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="string arguments = null", span="157-157"];
m9_77 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="string createdAt = null", span="158-158"];
m9_88 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="Job job = null", span="181-181"];
m9_89 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="JobLoadException loadException = null", span="182-182"];
m9_91 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="job = invocationData.Deserialize()", span="188-188"];
m9_92 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label=JobLoadException, span="190-190"];
m9_93 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="loadException = ex", span="192-192"];
m9_95 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="InfiniteLoopProcess.cs", label="Exit HangFire.Redis.RedisConnection.GetJobData(string)", span="147-147"];
m9_221 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="Entry lambda expression", span="345-349"];
m9_66 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn)", span="136-138"];
m9_62 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    storedParameters)", span="132-134"];
m9_61 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="Entry lambda expression", span="132-134"];
m9_65 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="Entry lambda expression", span="136-138"];
m9_63 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="Exit lambda expression", span="132-134"];
m9_67 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="Exit lambda expression", span="136-138"];
m9_161 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId)", span="276-277"];
m9_165 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', context.WorkerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        })", span="279-285"];
m9_170 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1)", span="290-292"];
m9_160 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="Entry lambda expression", span="276-277"];
m9_164 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="Entry lambda expression", span="279-285"];
m9_169 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="Entry lambda expression", span="290-292"];
m9_162 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="Exit lambda expression", span="276-277"];
m9_166 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="Exit lambda expression", span="279-285"];
m9_171 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="Exit lambda expression", span="290-292"];
m9_183 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId)", span="308-310"];
m9_187 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId))", span="312-314"];
m9_182 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="Entry lambda expression", span="308-310"];
m9_186 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="Entry lambda expression", span="312-314"];
m9_184 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="Exit lambda expression", span="308-310"];
m9_188 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="Exit lambda expression", span="312-314"];
m9_222 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1])))", span="345-349"];
m9_217 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat'')", span="342-344"];
m9_216 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="Entry lambda expression", span="342-344"];
m9_218 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="Exit lambda expression", span="342-344"];
m9_223 [cluster="lambda expression", file="InfiniteLoopProcess.cs", label="Exit lambda expression", span="345-349"];
m9_0 [cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", span="32-32"];
m9_1 [cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="InfiniteLoopProcess.cs", label="Redis = redis", span="34-34"];
m9_2 [cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="InfiniteLoopProcess.cs", label="Exit HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", span="32-32"];
m9_32 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
m9_137 [cluster="Unk.FirstOrDefault", file="InfiniteLoopProcess.cs", label="Entry Unk.FirstOrDefault", span=""];
m9_145 [cluster="HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", span="263-263"];
m9_146 [cluster="HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", file="InfiniteLoopProcess.cs", label="key == null", span="265-265"];
m9_148 [cluster="HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", file="InfiniteLoopProcess.cs", label="var result = Redis.GetAllEntriesFromHash(RedisStorage.GetRedisKey(key))", span="267-267"];
m9_147 [cluster="HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", file="InfiniteLoopProcess.cs", label="throw new ArgumentNullException(''key'');", span="265-265"];
m9_149 [cluster="HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", file="InfiniteLoopProcess.cs", label="return result.Count != 0 ? result : null;", span="269-269"];
m9_150 [cluster="HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", file="InfiniteLoopProcess.cs", label="Exit HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", span="263-263"];
m9_211 [cluster="Unk.CreatePipeline", file="InfiniteLoopProcess.cs", label="Entry Unk.CreatePipeline", span=""];
m9_118 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="InfiniteLoopProcess.cs", label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                name,\r\n                value)", span="227-230"];
m9_117 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", span="225-225"];
m9_119 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="InfiniteLoopProcess.cs", label="Exit HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", span="225-225"];
m9_54 [cluster="System.Guid.NewGuid()", file="InfiniteLoopProcess.cs", label="Entry System.Guid.NewGuid()", span="0-0"];
m9_123 [cluster="Unk.GetValueFromHash", file="InfiniteLoopProcess.cs", label="Entry Unk.GetValueFromHash", span=""];
m9_60 [cluster="Unk.Commit", file="InfiniteLoopProcess.cs", label="Entry Unk.Commit", span=""];
m9_210 [cluster="Unk.GetAllItemsFromSet", file="InfiniteLoopProcess.cs", label="Entry Unk.GetAllItemsFromSet", span=""];
m9_124 [cluster="HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", span="240-240"];
m9_125 [cluster="HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", file="InfiniteLoopProcess.cs", label="key == null", span="242-242"];
m9_127 [cluster="HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", file="InfiniteLoopProcess.cs", label="var result = Redis.GetAllItemsFromSortedSet(RedisStorage.GetRedisKey(key))", span="244-244"];
m9_126 [cluster="HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", file="InfiniteLoopProcess.cs", label="throw new ArgumentNullException(''key'');", span="242-242"];
m9_128 [cluster="HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", file="InfiniteLoopProcess.cs", label="return new HashSet<string>(result);", span="245-245"];
m9_129 [cluster="HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", file="InfiniteLoopProcess.cs", label="Exit HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", span="240-240"];
m9_100 [cluster="HangFire.Storage.JobData.JobData()", file="InfiniteLoopProcess.cs", label="Entry HangFire.Storage.JobData.JobData()", span="21-21"];
m9_99 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="InfiniteLoopProcess.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m9_219 [cluster="Unk.Format", file="InfiniteLoopProcess.cs", label="Entry Unk.Format", span=""];
m9_220 [cluster="Unk.GetValuesFromHash", file="InfiniteLoopProcess.cs", label="Entry Unk.GetValuesFromHash", span=""];
m9_132 [cluster="HashSet<string>.cstr", file="InfiniteLoopProcess.cs", label="Entry HashSet<string>.cstr", span=""];
m9_59 [cluster="Unk.QueueCommand", file="InfiniteLoopProcess.cs", label="Entry Unk.QueueCommand", span=""];
m9_136 [cluster="Unk.GetRangeFromSortedSetByLowestScore", file="InfiniteLoopProcess.cs", label="Entry Unk.GetRangeFromSortedSetByLowestScore", span=""];
m9_31 [cluster="Unk.PopAndPushItemBetweenLists", file="InfiniteLoopProcess.cs", label="Entry Unk.PopAndPushItemBetweenLists", span=""];
m9_115 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", file="InfiniteLoopProcess.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", span="0-0"];
m9_38 [cluster="Unk.AcquireLock", file="InfiniteLoopProcess.cs", label="Entry Unk.AcquireLock", span=""];
m9_56 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="InfiniteLoopProcess.cs", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
m9_97 [cluster="Unk.ContainsKey", file="InfiniteLoopProcess.cs", label="Entry Unk.ContainsKey", span=""];
m9_228 [file="InfiniteLoopProcess.cs", label="HangFire.Redis.RedisConnection", span=""];
m9_229 [file="InfiniteLoopProcess.cs", label=jobId, span=""];
m9_230 [file="InfiniteLoopProcess.cs", label=storedParameters, span=""];
m9_231 [file="InfiniteLoopProcess.cs", label="System.TimeSpan", span=""];
m9_232 [file="InfiniteLoopProcess.cs", label=string, span=""];
m9_233 [file="InfiniteLoopProcess.cs", label="HangFire.Server.ServerContext", span=""];
m9_234 [file="InfiniteLoopProcess.cs", label=queue1, span=""];
m9_235 [file="InfiniteLoopProcess.cs", label=string, span=""];
m9_236 [file="InfiniteLoopProcess.cs", label=name, span=""];
m9_237 [file="InfiniteLoopProcess.cs", label=heartbeats, span=""];
m10_0 [cluster="Hangfire.Server.IServerComponent.Execute(System.Threading.CancellationToken)", file="IServerComponent.cs", label="Entry Hangfire.Server.IServerComponent.Execute(System.Threading.CancellationToken)", span="22-22"];
m10_1 [cluster="Hangfire.Server.IServerComponent.Execute(System.Threading.CancellationToken)", file="IServerComponent.cs", label="Exit Hangfire.Server.IServerComponent.Execute(System.Threading.CancellationToken)", span="22-22"];
m12_0 [cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction)", file="ServerBootstrapperFacts.cs", label="Entry HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction)", span="23-23"];
m12_1 [cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction)", file="ServerBootstrapperFacts.cs", label="transaction == null", span="27-27"];
m12_3 [cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction)", file="ServerBootstrapperFacts.cs", label="Transaction = transaction", span="29-29"];
m12_2 [cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction)", file="ServerBootstrapperFacts.cs", label="throw new ArgumentNullException(''transaction'');", span="27-27"];
m12_4 [cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction)", file="ServerBootstrapperFacts.cs", label="Exit HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction)", span="23-23"];
m12_6 [file="ServerBootstrapperFacts.cs", label="HangFire.Common.States.StateApplyingContext", span=""];
n64 -> n14  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryProcess", style=dashed];
n64 -> n15  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryProcess", style=dashed];
n64 -> n20  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryProcess", style=dashed];
n64 -> n24  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryProcess", style=dashed];
n64 -> n36  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryProcess", style=dashed];
n64 -> n49  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryProcess", style=dashed];
n64 -> n55  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryProcess", style=dashed];
n65 -> n36  [color=darkseagreen4, key=1, label=i, style=dashed];
n66 -> n36  [color=darkseagreen4, key=1, label=nextTry, style=dashed];
n12 -> n15  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
n12 -> n25  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
n12 -> n26  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
n13 -> n20  [color=darkseagreen4, key=1, label=i, style=dashed];
n13 -> n24  [color=darkseagreen4, key=1, label=i, style=dashed];
n13 -> n36  [color=darkseagreen4, key=1, label=i, style=dashed];
n13 -> n27  [color=darkseagreen4, key=1, label=i, style=dashed];
n22 -> n24  [color=darkseagreen4, key=1, label=nextTry, style=dashed];
n22 -> n36  [color=darkseagreen4, key=1, label=nextTry, style=dashed];
n22 -> n25  [color=darkseagreen4, key=1, label=nextTry, style=dashed];
n24 -> n35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n27 -> n27  [color=darkseagreen4, key=1, label=i, style=dashed];
d228 -> d8  [color=green, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
d228 -> d4  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
d228 -> d25  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
d228 -> d26  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
d228 -> d36  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
d228 -> d118  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
d228 -> d121  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
d228 -> d134  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
d228 -> d143  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
d228 -> d174  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
d228 -> d191  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
d228 -> d206  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
d22 -> d25  [color=darkseagreen4, key=1, label=jobId, style=dashed];
d22 -> d26  [color=darkseagreen4, key=1, label=jobId, style=dashed];
d23 -> d25  [color=darkseagreen4, key=1, label=jobId, style=dashed];
d23 -> d26  [color=darkseagreen4, key=1, label=jobId, style=dashed];
d48 -> d50  [color=darkseagreen4, key=1, label=transaction, style=dashed];
d48 -> d51  [color=darkseagreen4, key=1, label=transaction, style=dashed];
d70 -> d78  [color=darkseagreen4, key=1, label=storedData, style=dashed];
d70 -> d80  [color=darkseagreen4, key=1, label=storedData, style=dashed];
d70 -> d82  [color=darkseagreen4, key=1, label=storedData, style=dashed];
d70 -> d84  [color=darkseagreen4, key=1, label=storedData, style=dashed];
d70 -> d86  [color=darkseagreen4, key=1, label=storedData, style=dashed];
d152 -> d154  [color=darkseagreen4, key=1, label=transaction, style=dashed];
d152 -> d157  [color=darkseagreen4, key=1, label=transaction, style=dashed];
d152 -> d158  [color=darkseagreen4, key=1, label=transaction, style=dashed];
d194 -> d198  [color=darkseagreen4, key=1, label=serverNames, style=dashed];
d197 -> d200  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
d197 -> d201  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
d206 -> d206  [color=darkseagreen4, key=1, label=heartbeat, style=dashed];
d177 -> d179  [color=darkseagreen4, key=1, label=transaction, style=dashed];
d177 -> d180  [color=darkseagreen4, key=1, label=transaction, style=dashed];
d18 -> d26  [color=darkseagreen4, key=1, label=queueName, style=dashed];
d49 -> d61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d50 -> d65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d108 -> d110  [color=darkseagreen4, key=1, label=stateData, style=dashed];
d138 -> d143  [color=darkseagreen4, key=1, label=string, style=dashed];
d138 -> d141  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
d151 -> d153  [color=darkseagreen4, key=1, label=string, style=dashed];
d151 -> d161  [color=darkseagreen4, key=1, label=string, style=dashed];
d151 -> d154  [color=darkseagreen4, key=1, label=string, style=dashed];
d151 -> d165  [color=darkseagreen4, key=1, label=string, style=dashed];
d151 -> d155  [color=darkseagreen4, key=1, label="HangFire.Server.ServerContext", style=dashed];
d151 -> d157  [color=darkseagreen4, key=1, label=string, style=dashed];
d151 -> d170  [color=darkseagreen4, key=1, label=string, style=dashed];
d153 -> d160  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d154 -> d164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d157 -> d169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d176 -> d178  [color=darkseagreen4, key=1, label=string, style=dashed];
d176 -> d183  [color=darkseagreen4, key=1, label=string, style=dashed];
d176 -> d179  [color=darkseagreen4, key=1, label=string, style=dashed];
d176 -> d187  [color=darkseagreen4, key=1, label=string, style=dashed];
d193 -> d205  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
d195 -> d200  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
d195 -> d222  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
d195 -> d203  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
d196 -> d205  [color=darkseagreen4, key=1, label=utcNow, style=dashed];
d200 -> d216  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d200 -> d221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d204 -> d206  [color=darkseagreen4, key=1, label=heartbeat, style=dashed];
d207 -> d207  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
d207 -> d208  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
d178 -> d182  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d179 -> d186  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d17 -> d21  [color=darkseagreen4, key=1, label=queueIndex, style=dashed];
d12 -> d16  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
d39 -> d47  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
d39 -> d50  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
d39 -> d66  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
d42 -> d47  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
d42 -> d49  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
d42 -> d62  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
d42 -> d44  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
d42 -> d45  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
d42 -> d46  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
d40 -> d49  [color=darkseagreen4, key=1, label=jobId, style=dashed];
d40 -> d50  [color=darkseagreen4, key=1, label=jobId, style=dashed];
d40 -> d66  [color=darkseagreen4, key=1, label=jobId, style=dashed];
d40 -> d62  [color=darkseagreen4, key=1, label=jobId, style=dashed];
d40 -> d52  [color=darkseagreen4, key=1, label=jobId, style=dashed];
d156 -> d170  [color=darkseagreen4, key=1, label=queue1, style=dashed];
d199 -> d222  [color=darkseagreen4, key=1, label=name, style=dashed];
d199 -> d217  [color=darkseagreen4, key=1, label=name, style=dashed];
d202 -> d207  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
d202 -> d208  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
d16 -> d16  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
d229 -> d66  [color=darkseagreen4, key=1, label=jobId, style=dashed];
d229 -> d62  [color=darkseagreen4, key=1, label=jobId, style=dashed];
d231 -> d66  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
d230 -> d62  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
d232 -> d165  [color=darkseagreen4, key=1, label=string, style=dashed];
d232 -> d170  [color=darkseagreen4, key=1, label=string, style=dashed];
d232 -> d161  [color=darkseagreen4, key=1, label=string, style=dashed];
d233 -> d165  [color=darkseagreen4, key=1, label="HangFire.Server.ServerContext", style=dashed];
d234 -> d170  [color=darkseagreen4, key=1, label=queue1, style=dashed];
d235 -> d187  [color=darkseagreen4, key=1, label=string, style=dashed];
d235 -> d183  [color=darkseagreen4, key=1, label=string, style=dashed];
d41 -> d46  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
d41 -> d43  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
d41 -> d44  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
d41 -> d45  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
d236 -> d222  [color=darkseagreen4, key=1, label=name, style=dashed];
d236 -> d217  [color=darkseagreen4, key=1, label=name, style=dashed];
d237 -> d222  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m0_7 -> m0_9  [color=darkseagreen4, key=1, label=date, style=dashed];
m0_23 -> m0_25  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_23 -> m0_26  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_24 -> m0_26  [color=darkseagreen4, key=1, label=data, style=dashed];
m0_13 -> m0_15  [color=darkseagreen4, key=1, label=state, style=dashed];
m3_0 -> m3_2  [color=green, key=1, label="HangFire.Client.CreateContext", style=dashed];
m3_0 -> m3_3  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m3_0 -> m3_4  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m3_1 -> m3_3  [color=darkseagreen4, key=1, label=options, style=dashed];
m3_1 -> m3_4  [color=darkseagreen4, key=1, label=options, style=dashed];
m3_1 -> m3_5  [color=darkseagreen4, key=1, label=options, style=dashed];
m3_49 -> m3_24  [color=darkseagreen4, key=1, label=options, style=dashed];
m3_51 -> m3_38  [color=darkseagreen4, key=1, label=options, style=dashed];
m3_28 -> m3_30  [color=darkseagreen4, key=1, label=serializedValue, style=dashed];
m3_34 -> m3_38  [color=darkseagreen4, key=1, label=options, style=dashed];
m3_13 -> m3_16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_6 -> m3_16  [color=darkseagreen4, key=1, label="HangFire.Storage.IStorageConnection", style=dashed];
m3_6 -> m3_18  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m3_6 -> m3_9  [color=darkseagreen4, key=1, label="HangFire.States.IStateMachineFactory", style=dashed];
m3_6 -> m3_11  [color=darkseagreen4, key=1, label="HangFire.Common.Job", style=dashed];
m3_6 -> m3_13  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m3_20 -> m3_24  [color=darkseagreen4, key=1, label=options, style=dashed];
m3_23 -> m3_29  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_23 -> m3_30  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_38 -> m3_41  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_38 -> m3_43  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_35 -> m3_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_55 -> m3_2  [color=green, key=1, label="HangFire.Client.CreateContext", style=dashed];
m3_55 -> m3_3  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m3_55 -> m3_4  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m3_55 -> m3_16  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m3_55 -> m3_18  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m3_55 -> m3_19  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m3_55 -> m3_26  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m3_55 -> m3_29  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m3_55 -> m3_30  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m3_55 -> m3_41  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m3_55 -> m3_49  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m3_55 -> m3_50  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m3_55 -> m3_51  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m4_5 -> m4_14  [color=darkseagreen4, key=1, label=hash, style=dashed];
m4_5 -> m4_16  [color=darkseagreen4, key=1, label=hash, style=dashed];
m4_5 -> m4_21  [color=darkseagreen4, key=1, label=hash, style=dashed];
m4_8 -> m4_23  [color=darkseagreen4, key=1, label=dto, style=dashed];
m4_37 -> m4_23  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.RecurringJobsPage", style=dashed];
m5_19 -> m5_6  [color=green, key=1, label="HangFire.States.SucceededState", style=dashed];
m6_6 -> m6_9  [color=darkseagreen4, key=1, label="HangFire.States.IStateMachineFactory", style=dashed];
m6_6 -> m6_11  [color=darkseagreen4, key=1, label="HangFire.Common.Job", style=dashed];
m6_6 -> m6_13  [color=darkseagreen4, key=1, label="HangFire.States.IState", style=dashed];
m6_23 -> m6_29  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_23 -> m6_30  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_28 -> m6_30  [color=darkseagreen4, key=1, label=serializedValue, style=dashed];
m6_38 -> m6_41  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_38 -> m6_43  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_55 -> m6_26  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m6_55 -> m6_29  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m6_55 -> m6_30  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m6_55 -> m6_41  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m8_24 -> m8_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_24 -> m8_41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_25 -> m8_27  [color=darkseagreen4, key=1, label=process, style=dashed];
m8_28 -> m8_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_9 -> m8_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_49 -> m8_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_49 -> m8_58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_50 -> m8_52  [color=darkseagreen4, key=1, label=process, style=dashed];
m8_53 -> m8_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_65 -> m8_67  [color=darkseagreen4, key=1, label=process, style=dashed];
m8_68 -> m8_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_85 -> m8_19  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m8_85 -> m8_24  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m8_85 -> m8_26  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m8_85 -> m8_27  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m8_85 -> m8_28  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m8_85 -> m8_46  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m8_85 -> m8_49  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m8_85 -> m8_51  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m8_85 -> m8_52  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m8_85 -> m8_53  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m8_85 -> m8_62  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m8_85 -> m8_66  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m8_85 -> m8_67  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m8_85 -> m8_68  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m8_85 -> m8_77  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m9_12 -> m9_16  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m9_16 -> m9_16  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m9_17 -> m9_21  [color=darkseagreen4, key=1, label=queueIndex, style=dashed];
m9_18 -> m9_26  [color=darkseagreen4, key=1, label=queueName, style=dashed];
m9_22 -> m9_25  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m9_22 -> m9_26  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m9_23 -> m9_25  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m9_23 -> m9_26  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m9_50 -> m9_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_39 -> m9_47  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m9_39 -> m9_50  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m9_39 -> m9_66  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m9_40 -> m9_49  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m9_40 -> m9_62  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m9_40 -> m9_50  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m9_40 -> m9_66  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m9_40 -> m9_52  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m9_41 -> m9_43  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m9_41 -> m9_44  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m9_41 -> m9_45  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m9_41 -> m9_46  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m9_42 -> m9_44  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m9_42 -> m9_45  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m9_42 -> m9_46  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m9_42 -> m9_47  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m9_42 -> m9_49  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m9_42 -> m9_62  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m9_49 -> m9_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_48 -> m9_50  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m9_48 -> m9_51  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m9_108 -> m9_110  [color=darkseagreen4, key=1, label=stateData, style=dashed];
m9_193 -> m9_205  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m9_194 -> m9_198  [color=darkseagreen4, key=1, label=serverNames, style=dashed];
m9_195 -> m9_200  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m9_195 -> m9_222  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m9_195 -> m9_203  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m9_196 -> m9_205  [color=darkseagreen4, key=1, label=utcNow, style=dashed];
m9_200 -> m9_216  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_200 -> m9_221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_197 -> m9_200  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m9_197 -> m9_201  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m9_199 -> m9_217  [color=darkseagreen4, key=1, label=name, style=dashed];
m9_199 -> m9_222  [color=darkseagreen4, key=1, label=name, style=dashed];
m9_202 -> m9_207  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m9_202 -> m9_208  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m9_207 -> m9_207  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m9_207 -> m9_208  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m9_204 -> m9_206  [color=darkseagreen4, key=1, label=heartbeat, style=dashed];
m9_206 -> m9_206  [color=darkseagreen4, key=1, label=heartbeat, style=dashed];
m9_179 -> m9_186  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_176 -> m9_178  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_176 -> m9_183  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_176 -> m9_179  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_176 -> m9_187  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_177 -> m9_179  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m9_177 -> m9_180  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m9_178 -> m9_182  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_138 -> m9_141  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m9_138 -> m9_143  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_151 -> m9_153  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_151 -> m9_161  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_151 -> m9_154  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_151 -> m9_165  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_151 -> m9_155  [color=darkseagreen4, key=1, label="HangFire.Server.ServerContext", style=dashed];
m9_151 -> m9_157  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_151 -> m9_170  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_152 -> m9_154  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m9_152 -> m9_157  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m9_152 -> m9_158  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m9_153 -> m9_160  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_154 -> m9_164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_157 -> m9_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_156 -> m9_170  [color=darkseagreen4, key=1, label=queue1, style=dashed];
m9_70 -> m9_78  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m9_70 -> m9_80  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m9_70 -> m9_82  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m9_70 -> m9_84  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m9_70 -> m9_86  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m9_228 -> m9_4  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m9_228 -> m9_8  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m9_228 -> m9_25  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m9_228 -> m9_26  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m9_228 -> m9_36  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m9_228 -> m9_118  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m9_228 -> m9_121  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m9_228 -> m9_134  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m9_228 -> m9_143  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m9_228 -> m9_174  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m9_228 -> m9_191  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m9_228 -> m9_206  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m9_229 -> m9_62  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m9_229 -> m9_66  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m9_230 -> m9_62  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m9_231 -> m9_66  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m9_232 -> m9_161  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_232 -> m9_165  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_232 -> m9_170  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_233 -> m9_165  [color=darkseagreen4, key=1, label="HangFire.Server.ServerContext", style=dashed];
m9_234 -> m9_170  [color=darkseagreen4, key=1, label=queue1, style=dashed];
m9_235 -> m9_183  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_235 -> m9_187  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_236 -> m9_217  [color=darkseagreen4, key=1, label=name, style=dashed];
m9_236 -> m9_222  [color=darkseagreen4, key=1, label=name, style=dashed];
m9_237 -> m9_222  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
}
