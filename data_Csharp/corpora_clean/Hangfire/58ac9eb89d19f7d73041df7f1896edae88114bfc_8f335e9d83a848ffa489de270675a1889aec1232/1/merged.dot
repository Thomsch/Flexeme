digraph  {
d65 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    TimeSpan.FromDays(1));\r\n\r\n                Assert.NotNull(jobId);\r\n                Assert.NotEmpty(jobId);\r\n\r\n                var sqlJob = sql.Query(''select * from HangFire.Job'').Single();\r\n                Assert.Equal(jobId, sqlJob.Id.ToString());\r\n                Assert.Equal(null, (int?) sqlJob.StateId);\r\n                Assert.Equal(null, (string) sqlJob.StateName);\r\n\r\n                var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData);\r\n                invocationData.Arguments = sqlJob.Arguments;\r\n\r\n                var job = invocationData.Deserialize();\r\n                Assert.Equal(typeof(ConnectionFacts), job.Type);\r\n                Assert.Equal(''SampleMethod'', job.Method.Name);\r\n                Assert.Equal(''Hello'', job.Arguments[0]);\r\n\r\n                Assert.True(DateTime.UtcNow < sqlJob.ExpireAt && sqlJob.ExpireAt < DateTime.UtcNow.AddDays(1));\r\n\r\n                var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value);\r\n\r\n                Assert.Equal(''Value1'', parameters[''Key1'']);\r\n                Assert.Equal(''Value2'', parameters[''Key2'']);\r\n            })", span="85-117", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", color=green, community=0];
d407 [label="HangFire.SqlServer.Tests.ConnectionFacts", span=""];
d64 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="83-83", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()"];
d66 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="83-83", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()"];
d67 [label="Entry Unk.UseConnections", span="", cluster="Unk.UseConnections"];
d68 [label="Entry lambda expression", span="85-117", cluster="lambda expression"];
d69 [label="var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    TimeSpan.FromDays(1))", span="87-90", cluster="lambda expression", color=green, community=0];
d70 [label="Assert.NotNull(jobId)", span="92-92", cluster="lambda expression", color=green, community=0];
d59 [label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="116-116", cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)"];
d47 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()"];
d87 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)"];
d48 [label="Entry HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="107-107", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)"];
d97 [label="Entry lambda expression", span="88-88", cluster="lambda expression"];
d71 [label="Assert.NotEmpty(jobId)", span="93-93", cluster="lambda expression"];
d73 [label="Assert.Equal(jobId, sqlJob.Id.ToString())", span="96-96", cluster="lambda expression"];
d83 [label="var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value)", span="110-113", cluster="lambda expression"];
d28 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull"];
d20 [label="UseConnection(connection =>\r\n            {\r\n                var transaction = connection.CreateWriteTransaction();\r\n                Assert.NotNull(transaction);\r\n            })", span="35-39", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()"];
d30 [label="UseConnection(connection =>\r\n            {\r\n                var @lock = connection.AcquireJobLock(''1'');\r\n                Assert.NotNull(@lock);\r\n            })", span="45-49", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()"];
d38 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''job'', exception.ParamName);\r\n            })", span="55-64", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()"];
d50 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''parameters'', exception.ParamName);\r\n            })", span="70-79", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()"];
d107 [label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null)))", span="123-124", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()"];
d117 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetJobData(''1'');\r\n                Assert.Null(result);\r\n            })", span="130-134", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()"];
d126 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = Job.FromExpression(() => SampleMethod(''wrong''));\r\n\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result);\r\n                Assert.NotNull(result.Job);\r\n                Assert.Equal(''Succeeded'', result.State);\r\n                Assert.Equal(''Arguments'', result.Job.Arguments[0]);\r\n                Assert.Null(result.LoadException);\r\n            })", span="145-165", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()"];
d146 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result.LoadException);\r\n            })", span="176-190", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()"];
d155 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="196-202", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()"];
d166 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="208-214", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()"];
d177 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''Value'', parameter.Value);\r\n            })", span="225-237", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()"];
d188 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n                connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''AnotherValue'', parameter.Value);\r\n            })", span="248-261", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()"];
d200 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', null);\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal((string) null, parameter.Value);\r\n            })", span="272-284", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()"];
d210 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="290-296", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()"];
d221 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="302-308", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()"];
d231 [label="UseConnection(connection =>\r\n            {\r\n                var value = connection.GetJobParameter(''1'', ''hello'');\r\n                Assert.Null(value);\r\n            })", span="314-318", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()"];
d239 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single();\r\n\r\n                var value = connection.GetJobParameter(id.ToString(), ''name'');\r\n\r\n                Assert.Equal(''value'', value);\r\n            })", span="333-342", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()"];
d248 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="348-354", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()"];
d259 [label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)))", span="360-361", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()"];
d268 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1);\r\n\r\n                Assert.Null(result);\r\n            })", span="367-373", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()"];
d276 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0);\r\n                \r\n                Assert.Equal(''-1.0'', result);\r\n            })", span="387-394", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()"];
d285 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()));\r\n\r\n                Assert.Equal(''serverId'', exception.ParamName);\r\n            })", span="400-406", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()"];
d297 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null));\r\n\r\n                Assert.Equal(''context'', exception.ParamName);\r\n            })", span="412-418", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()"];
d307 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                };\r\n                connection.AnnounceServer(''server'', context1);\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', server.Id);\r\n                Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data);\r\n                Assert.NotNull(server.LastHeartbeat);\r\n\r\n                var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                };\r\n                connection.AnnounceServer(''server'', context2);\r\n                var sameServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', sameServer.Id);\r\n                Assert.Contains(''1000'', sameServer.Data);\r\n            })", span="424-449", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()"];
d325 [label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null)))", span="455-456", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()"];
d336 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.RemoveServer(''Server1'');\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase);\r\n            })", span="468-476", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()"];
d346 [label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null)))", span="482-483", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()"];
d357 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.Heartbeat(''server1'');\r\n\r\n                var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime)x.LastHeartbeat);\r\n\r\n                Assert.NotEqual(2012, servers[''server1''].Year);\r\n                Assert.Equal(2012, servers[''server2''].Year);\r\n            })", span="495-506", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()"];
d373 [label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))))", span="512-513", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()"];
d385 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    });\r\n\r\n                connection.RemoveTimedOutServers(TimeSpan.FromHours(15));\r\n\r\n                var liveServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server2'', liveServer.Id);\r\n            })", span="523-537", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()"];
d86 [label="Exit lambda expression", span="85-117", cluster="lambda expression"];
d72 [label="var sqlJob = sql.Query(''select * from HangFire.Job'').Single()", span="95-95", cluster="lambda expression"];
d57 [label="connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero)", span="73-76", cluster="lambda expression"];
d129 [label="var job = Job.FromExpression(() => SampleMethod(''wrong''))", span="147-147", cluster="lambda expression"];
d45 [label="connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero)", span="58-61", cluster="lambda expression"];
d99 [label="Exit lambda expression", span="88-88", cluster="lambda expression"];
d98 [label="SampleMethod(''Hello'')", span="88-88", cluster="lambda expression"];
d88 [label="Entry Unk.NotEmpty", span="", cluster="Unk.NotEmpty"];
d74 [label="Assert.Equal(null, (int?) sqlJob.StateId)", span="97-97", cluster="lambda expression"];
d91 [label="Entry Unk.ToString", span="", cluster="Unk.ToString"];
d5 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
d82 [label="Assert.True(DateTime.UtcNow < sqlJob.ExpireAt && sqlJob.ExpireAt < DateTime.UtcNow.AddDays(1))", span="108-108", cluster="lambda expression"];
d84 [label="Assert.Equal(''Value1'', parameters[''Key1''])", span="115-115", cluster="lambda expression"];
d89 [label="Entry Unk.Query", span="", cluster="Unk.Query"];
d96 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary"];
d100 [label="Entry lambda expression", span="113-113", cluster="lambda expression"];
d103 [label="Entry lambda expression", span="113-113", cluster="lambda expression"];
d85 [label="Assert.Equal(''Value2'', parameters[''Key2''])", span="116-116", cluster="lambda expression"];
d25 [label="Assert.NotNull(transaction)", span="38-38", cluster="lambda expression"];
d34 [label="Assert.NotNull(@lock)", span="48-48", cluster="lambda expression"];
d132 [label="Assert.NotNull(result)", span="160-160", cluster="lambda expression"];
d133 [label="Assert.NotNull(result.Job)", span="161-161", cluster="lambda expression"];
d151 [label="Assert.NotNull(result.LoadException)", span="189-189", cluster="lambda expression"];
d315 [label="Assert.NotNull(server.LastHeartbeat)", span="438-438", cluster="lambda expression"];
d19 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="33-33", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()"];
d21 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="33-33", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()"];
d22 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection"];
d23 [label="Entry lambda expression", span="35-39", cluster="lambda expression"];
d27 [label="Entry HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="49-49", cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()"];
d29 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", span="43-43", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()"];
d31 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", span="43-43", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()"];
d32 [label="Entry lambda expression", span="45-49", cluster="lambda expression"];
d37 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="53-53", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()"];
d39 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="53-53", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()"];
d40 [label="Entry lambda expression", span="55-64", cluster="lambda expression"];
d49 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", span="68-68", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()"];
d51 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", span="68-68", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()"];
d52 [label="Entry lambda expression", span="70-79", cluster="lambda expression"];
d106 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="121-121", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()"];
d108 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="121-121", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()"];
d109 [label="Entry lambda expression", span="123-124", cluster="lambda expression"];
d116 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="128-128", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()"];
d118 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="128-128", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()"];
d119 [label="Entry lambda expression", span="130-134", cluster="lambda expression"];
d125 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="140-143", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()"];
d127 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="138-138", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()"];
d128 [label="Entry lambda expression", span="145-165", cluster="lambda expression"];
d145 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="171-174", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()"];
d147 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="169-169", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()"];
d148 [label="Entry lambda expression", span="176-190", cluster="lambda expression"];
d154 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="194-194", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()"];
d156 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="194-194", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()"];
d157 [label="Entry lambda expression", span="196-202", cluster="lambda expression"];
d165 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="206-206", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()"];
d167 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="206-206", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()"];
d168 [label="Entry lambda expression", span="208-214", cluster="lambda expression"];
d176 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="220-223", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()"];
d178 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="218-218", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()"];
d179 [label="Entry lambda expression", span="225-237", cluster="lambda expression"];
d187 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="243-246", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()"];
d189 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="241-241", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()"];
d190 [label="Entry lambda expression", span="248-261", cluster="lambda expression"];
d199 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="267-270", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()"];
d201 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="265-265", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()"];
d202 [label="Entry lambda expression", span="272-284", cluster="lambda expression"];
d209 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="288-288", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()"];
d211 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="288-288", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()"];
d212 [label="Entry lambda expression", span="290-296", cluster="lambda expression"];
d220 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="300-300", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()"];
d222 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="300-300", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()"];
d223 [label="Entry lambda expression", span="302-308", cluster="lambda expression"];
d230 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="312-312", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()"];
d232 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="312-312", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()"];
d233 [label="Entry lambda expression", span="314-318", cluster="lambda expression"];
d238 [label="string arrangeSql = @''\r\ndeclare @id int\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nset @id = scope_identity()\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@id, @name, @value)\r\nselect @id''", span="324-331", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()"];
d240 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="322-322", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()"];
d241 [label="Entry lambda expression", span="333-342", cluster="lambda expression"];
d247 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="346-346", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()"];
d249 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="346-346", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()"];
d250 [label="Entry lambda expression", span="348-354", cluster="lambda expression"];
d258 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="358-358", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()"];
d260 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="358-358", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()"];
d261 [label="Entry lambda expression", span="360-361", cluster="lambda expression"];
d267 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="365-365", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()"];
d269 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="365-365", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()"];
d270 [label="Entry lambda expression", span="367-373", cluster="lambda expression"];
d275 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], Score, Value)\r\nvalues \r\n('key', 1.0, '1.0'),\r\n('key', -1.0, '-1.0'),\r\n('key', -5.0, '-5.0'),\r\n('another-key', -2.0, '-2.0')''", span="379-385", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()"];
d277 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="377-377", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()"];
d278 [label="Entry lambda expression", span="387-394", cluster="lambda expression"];
d284 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="398-398", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()"];
d286 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="398-398", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()"];
d287 [label="Entry lambda expression", span="400-406", cluster="lambda expression"];
d296 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="410-410", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()"];
d298 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="410-410", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()"];
d299 [label="Entry lambda expression", span="412-418", cluster="lambda expression"];
d306 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="422-422", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()"];
d308 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="422-422", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()"];
d309 [label="Entry lambda expression", span="424-449", cluster="lambda expression"];
d324 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="453-453", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()"];
d326 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="453-453", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()"];
d327 [label="Entry lambda expression", span="455-456", cluster="lambda expression"];
d335 [label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues \r\n('Server1', '', getutcdate()),\r\n('Server2', '', getutcdate())''", span="462-466", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()"];
d337 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", span="460-460", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()"];
d338 [label="Entry lambda expression", span="468-476", cluster="lambda expression"];
d345 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="480-480", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()"];
d347 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="480-480", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()"];
d348 [label="Entry lambda expression", span="482-483", cluster="lambda expression"];
d356 [label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues\r\n('server1', '', '2012-12-12 12:12:12'),\r\n('server2', '', '2012-12-12 12:12:12')''", span="489-493", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()"];
d358 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="487-487", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()"];
d359 [label="Entry lambda expression", span="495-506", cluster="lambda expression"];
d372 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="510-510", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()"];
d374 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="510-510", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()"];
d375 [label="Entry lambda expression", span="512-513", cluster="lambda expression"];
d384 [label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues (@id, '', @heartbeat)''", span="519-521", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()"];
d386 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="517-517", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()"];
d387 [label="Entry lambda expression", span="523-537", cluster="lambda expression"];
d90 [label="Entry Unk.Single", span="", cluster="Unk.Single"];
d75 [label="Assert.Equal(null, (string) sqlJob.StateName)", span="98-98", cluster="lambda expression"];
d76 [label="var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData)", span="100-100", cluster="lambda expression"];
d77 [label="invocationData.Arguments = sqlJob.Arguments", span="101-101", cluster="lambda expression"];
d409 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d56 [label="Entry lambda expression", span="73-76", cluster="lambda expression"];
d58 [label="Exit lambda expression", span="73-76", cluster="lambda expression"];
d60 [label="Entry lambda expression", span="74-74", cluster="lambda expression"];
d130 [label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="149-156", cluster="lambda expression"];
d141 [label="Entry lambda expression", span="147-147", cluster="lambda expression"];
d408 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d44 [label="Entry lambda expression", span="58-61", cluster="lambda expression"];
d46 [label="Exit lambda expression", span="58-61", cluster="lambda expression"];
d63 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", span="558-558", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)"];
d181 [label="string jobId = job.Id.ToString()", span="228-228", cluster="lambda expression"];
d192 [label="string jobId = job.Id.ToString()", span="251-251", cluster="lambda expression"];
d204 [label="string jobId = job.Id.ToString()", span="275-275", cluster="lambda expression"];
d243 [label="var value = connection.GetJobParameter(id.ToString(), ''name'')", span="339-339", cluster="lambda expression"];
d2 [label="Assert.Equal(''connection'', exception.ParamName)", span="20-20", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()"];
d13 [label="Assert.Equal(''options'', exception.ParamName)", span="29-29", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()"];
d42 [label="Assert.Equal(''job'', exception.ParamName)", span="63-63", cluster="lambda expression"];
d54 [label="Assert.Equal(''parameters'', exception.ParamName)", span="78-78", cluster="lambda expression"];
d79 [label="Assert.Equal(typeof(ConnectionFacts), job.Type)", span="104-104", cluster="lambda expression"];
d80 [label="Assert.Equal(''SampleMethod'', job.Method.Name)", span="105-105", cluster="lambda expression"];
d81 [label="Assert.Equal(''Hello'', job.Arguments[0])", span="106-106", cluster="lambda expression"];
d134 [label="Assert.Equal(''Succeeded'', result.State)", span="162-162", cluster="lambda expression"];
d135 [label="Assert.Equal(''Arguments'', result.Job.Arguments[0])", span="163-163", cluster="lambda expression"];
d159 [label="Assert.Equal(''id'', exception.ParamName)", span="201-201", cluster="lambda expression"];
d170 [label="Assert.Equal(''name'', exception.ParamName)", span="213-213", cluster="lambda expression"];
d184 [label="Assert.Equal(''Value'', parameter.Value)", span="236-236", cluster="lambda expression"];
d196 [label="Assert.Equal(''AnotherValue'', parameter.Value)", span="260-260", cluster="lambda expression"];
d207 [label="Assert.Equal((string) null, parameter.Value)", span="283-283", cluster="lambda expression"];
d214 [label="Assert.Equal(''id'', exception.ParamName)", span="295-295", cluster="lambda expression"];
d225 [label="Assert.Equal(''name'', exception.ParamName)", span="307-307", cluster="lambda expression"];
d244 [label="Assert.Equal(''value'', value)", span="341-341", cluster="lambda expression"];
d252 [label="Assert.Equal(''key'', exception.ParamName)", span="353-353", cluster="lambda expression"];
d281 [label="Assert.Equal(''-1.0'', result)", span="393-393", cluster="lambda expression"];
d289 [label="Assert.Equal(''serverId'', exception.ParamName)", span="405-405", cluster="lambda expression"];
d301 [label="Assert.Equal(''context'', exception.ParamName)", span="417-417", cluster="lambda expression"];
d313 [label="Assert.Equal(''server'', server.Id)", span="434-434", cluster="lambda expression"];
d319 [label="Assert.Equal(''server'', sameServer.Id)", span="447-447", cluster="lambda expression"];
d364 [label="Assert.Equal(2012, servers[''server2''].Year)", span="505-505", cluster="lambda expression"];
d391 [label="Assert.Equal(''server2'', liveServer.Id)", span="536-536", cluster="lambda expression"];
d94 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)"];
d95 [label="Entry Unk.True", span="", cluster="Unk.True"];
d149 [label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="178-185", cluster="lambda expression"];
d180 [label="var job = sql.Query(arrangeSql).Single()", span="227-227", cluster="lambda expression"];
d183 [label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="232-234", cluster="lambda expression"];
d191 [label="var job = sql.Query(arrangeSql).Single()", span="250-250", cluster="lambda expression"];
d195 [label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="256-258", cluster="lambda expression"];
d203 [label="var job = sql.Query(arrangeSql).Single()", span="274-274", cluster="lambda expression"];
d206 [label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="279-281", cluster="lambda expression"];
d312 [label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="433-433", cluster="lambda expression"];
d318 [label="var sameServer = sql.Query(''select * from HangFire.Server'').Single()", span="446-446", cluster="lambda expression"];
d341 [label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="474-474", cluster="lambda expression"];
d362 [label="var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime)x.LastHeartbeat)", span="501-502", cluster="lambda expression"];
d390 [label="var liveServer = sql.Query(''select * from HangFire.Server'').Single()", span="535-535", cluster="lambda expression"];
d102 [label="Exit lambda expression", span="113-113", cluster="lambda expression"];
d101 [label="(string) x.Name", span="113-113", cluster="lambda expression"];
d105 [label="Exit lambda expression", span="113-113", cluster="lambda expression"];
d104 [label="(string) x.Value", span="113-113", cluster="lambda expression"];
d24 [label="var transaction = connection.CreateWriteTransaction()", span="37-37", cluster="lambda expression"];
d26 [label="Exit lambda expression", span="35-39", cluster="lambda expression"];
d33 [label="var @lock = connection.AcquireJobLock(''1'')", span="47-47", cluster="lambda expression"];
d35 [label="Exit lambda expression", span="45-49", cluster="lambda expression"];
d131 [label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="158-158", cluster="lambda expression"];
d150 [label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="187-187", cluster="lambda expression"];
d152 [label="Exit lambda expression", span="176-190", cluster="lambda expression"];
d314 [label="Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data)", span="435-437", cluster="lambda expression"];
d316 [label="var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                }", span="440-444", cluster="lambda expression"];
d92 [label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="30-30", cluster="HangFire.Common.JobHelper.FromJson<T>(string)"];
d43 [label="Exit lambda expression", span="55-64", cluster="lambda expression"];
d41 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero))", span="57-61", cluster="lambda expression"];
d55 [label="Exit lambda expression", span="70-79", cluster="lambda expression"];
d53 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero))", span="72-76", cluster="lambda expression"];
d111 [label="Exit lambda expression", span="123-124", cluster="lambda expression"];
d110 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null))", span="123-124", cluster="lambda expression"];
d113 [label="connection.GetJobData(null)", span="124-124", cluster="lambda expression"];
d122 [label="Exit lambda expression", span="130-134", cluster="lambda expression"];
d120 [label="var result = connection.GetJobData(''1'')", span="132-132", cluster="lambda expression"];
d124 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="138-138", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()"];
d137 [label="Exit lambda expression", span="145-165", cluster="lambda expression"];
d144 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="169-169", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()"];
d160 [label="Exit lambda expression", span="196-202", cluster="lambda expression"];
d158 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''))", span="198-199", cluster="lambda expression"];
d162 [label="connection.SetJobParameter(null, ''name'', ''value'')", span="199-199", cluster="lambda expression"];
d171 [label="Exit lambda expression", span="208-214", cluster="lambda expression"];
d169 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''))", span="210-211", cluster="lambda expression"];
d173 [label="connection.SetJobParameter(''1'', null, ''value'')", span="211-211", cluster="lambda expression"];
d175 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="218-218", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()"];
d185 [label="Exit lambda expression", span="225-237", cluster="lambda expression"];
d182 [label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="230-230", cluster="lambda expression"];
d186 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="241-241", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()"];
d197 [label="Exit lambda expression", span="248-261", cluster="lambda expression"];
d193 [label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="253-253", cluster="lambda expression"];
d194 [label="connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'')", span="254-254", cluster="lambda expression"];
d198 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="265-265", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()"];
d208 [label="Exit lambda expression", span="272-284", cluster="lambda expression"];
d205 [label="connection.SetJobParameter(jobId, ''Name'', null)", span="277-277", cluster="lambda expression"];
d215 [label="Exit lambda expression", span="290-296", cluster="lambda expression"];
d213 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''))", span="292-293", cluster="lambda expression"];
d217 [label="connection.GetJobParameter(null, ''hello'')", span="293-293", cluster="lambda expression"];
d226 [label="Exit lambda expression", span="302-308", cluster="lambda expression"];
d224 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null))", span="304-305", cluster="lambda expression"];
d228 [label="connection.GetJobParameter(''1'', null)", span="305-305", cluster="lambda expression"];
d236 [label="Exit lambda expression", span="314-318", cluster="lambda expression"];
d234 [label="var value = connection.GetJobParameter(''1'', ''hello'')", span="316-316", cluster="lambda expression"];
d237 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="322-322", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()"];
d242 [label="var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single()", span="335-337", cluster="lambda expression"];
d245 [label="Exit lambda expression", span="333-342", cluster="lambda expression"];
d253 [label="Exit lambda expression", span="348-354", cluster="lambda expression"];
d251 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1))", span="350-351", cluster="lambda expression"];
d255 [label="connection.GetFirstByLowestScoreFromSet(null, 0, 1)", span="351-351", cluster="lambda expression"];
d263 [label="Exit lambda expression", span="360-361", cluster="lambda expression"];
d262 [label="Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1))", span="360-361", cluster="lambda expression"];
d265 [label="connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)", span="361-361", cluster="lambda expression"];
d273 [label="Exit lambda expression", span="367-373", cluster="lambda expression"];
d271 [label="var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1)", span="369-370", cluster="lambda expression"];
d274 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="377-377", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()"];
d279 [label="sql.Execute(arrangeSql)", span="389-389", cluster="lambda expression"];
d282 [label="Exit lambda expression", span="387-394", cluster="lambda expression"];
d280 [label="var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0)", span="391-391", cluster="lambda expression"];
d290 [label="Exit lambda expression", span="400-406", cluster="lambda expression"];
d288 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()))", span="402-403", cluster="lambda expression"];
d292 [label="connection.AnnounceServer(null, new ServerContext())", span="403-403", cluster="lambda expression"];
d302 [label="Exit lambda expression", span="412-418", cluster="lambda expression"];
d300 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null))", span="414-415", cluster="lambda expression"];
d304 [label="connection.AnnounceServer(''server'', null)", span="415-415", cluster="lambda expression"];
d321 [label="Exit lambda expression", span="424-449", cluster="lambda expression"];
d310 [label="var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                }", span="426-430", cluster="lambda expression"];
d311 [label="connection.AnnounceServer(''server'', context1)", span="431-431", cluster="lambda expression"];
d317 [label="connection.AnnounceServer(''server'', context2)", span="445-445", cluster="lambda expression"];
d329 [label="Exit lambda expression", span="455-456", cluster="lambda expression"];
d328 [label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null))", span="455-456", cluster="lambda expression"];
d331 [label="connection.RemoveServer(null)", span="456-456", cluster="lambda expression"];
d334 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", span="460-460", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()"];
d339 [label="sql.Execute(arrangeSql)", span="470-470", cluster="lambda expression"];
d343 [label="Exit lambda expression", span="468-476", cluster="lambda expression"];
d340 [label="connection.RemoveServer(''Server1'')", span="472-472", cluster="lambda expression"];
d350 [label="Exit lambda expression", span="482-483", cluster="lambda expression"];
d349 [label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null))", span="482-483", cluster="lambda expression"];
d352 [label="connection.Heartbeat(null)", span="483-483", cluster="lambda expression"];
d355 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="487-487", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()"];
d360 [label="sql.Execute(arrangeSql)", span="497-497", cluster="lambda expression"];
d365 [label="Exit lambda expression", span="495-506", cluster="lambda expression"];
d361 [label="connection.Heartbeat(''server1'')", span="499-499", cluster="lambda expression"];
d377 [label="Exit lambda expression", span="512-513", cluster="lambda expression"];
d376 [label="Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5)))", span="512-513", cluster="lambda expression"];
d379 [label="connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))", span="513-513", cluster="lambda expression"];
d383 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="517-517", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()"];
d388 [label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    })", span="525-531", cluster="lambda expression"];
d392 [label="Exit lambda expression", span="523-537", cluster="lambda expression"];
d389 [label="connection.RemoveTimedOutServers(TimeSpan.FromHours(15))", span="533-533", cluster="lambda expression"];
d78 [label="var job = invocationData.Deserialize()", span="103-103", cluster="lambda expression"];
d62 [label="Exit lambda expression", span="74-74", cluster="lambda expression"];
d61 [label="SampleMethod(''hello'')", span="74-74", cluster="lambda expression"];
d411 [label=arrangeSql, span=""];
d138 [label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65", cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)"];
d139 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)"];
d143 [label="Exit lambda expression", span="147-147", cluster="lambda expression"];
d142 [label="SampleMethod(''wrong'')", span="147-147", cluster="lambda expression"];
d406 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", span="558-558", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)"];
d246 [label="Entry Unk.GetJobParameter", span="", cluster="Unk.GetJobParameter"];
d1 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerConnection(null, new SqlServerStorageOptions()))", span="17-18", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()"];
d3 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", span="15-15", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()"];
d12 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerConnection(ConnectionUtils.CreateConnection(), null))", span="26-27", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()"];
d14 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="24-24", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()"];
d136 [label="Assert.Null(result.LoadException)", span="164-164", cluster="lambda expression"];
d320 [label="Assert.Contains(''1000'', sameServer.Data)", span="448-448", cluster="lambda expression"];
d363 [label="Assert.NotEqual(2012, servers[''server1''].Year)", span="504-504", cluster="lambda expression"];
d412 [label=arrangeSql, span=""];
d153 [label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", span="24-24", cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string, string)"];
d415 [label=arrangeSql, span=""];
d416 [label=arrangeSql, span=""];
d417 [label=arrangeSql, span=""];
d342 [label="Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase)", span="475-475", cluster="lambda expression"];
d366 [label="Entry lambda expression", span="502-502", cluster="lambda expression"];
d369 [label="Entry lambda expression", span="502-502", cluster="lambda expression"];
d36 [label="Entry HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="54-54", cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)"];
d140 [label="Entry int.ToString()", span="0-0", cluster="int.ToString()"];
d115 [label="Entry HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="156-156", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)"];
d322 [label="Entry string.StartsWith(string)", span="0-0", cluster="string.StartsWith(string)"];
d294 [label="Entry HangFire.Server.ServerContext.ServerContext()", span="18-18", cluster="HangFire.Server.ServerContext.ServerContext()"];
d4 [label="Entry Unk.>", span="", cluster="Unk.>"];
d112 [label="Entry lambda expression", span="124-124", cluster="lambda expression"];
d410 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d114 [label="Exit lambda expression", span="124-124", cluster="lambda expression"];
d121 [label="Assert.Null(result)", span="133-133", cluster="lambda expression"];
d161 [label="Entry lambda expression", span="199-199", cluster="lambda expression"];
d413 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d163 [label="Exit lambda expression", span="199-199", cluster="lambda expression"];
d164 [label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="192-192", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)"];
d172 [label="Entry lambda expression", span="211-211", cluster="lambda expression"];
d414 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d174 [label="Exit lambda expression", span="211-211", cluster="lambda expression"];
d216 [label="Entry lambda expression", span="293-293", cluster="lambda expression"];
d418 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d218 [label="Exit lambda expression", span="293-293", cluster="lambda expression"];
d219 [label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="206-206", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)"];
d227 [label="Entry lambda expression", span="305-305", cluster="lambda expression"];
d419 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d229 [label="Exit lambda expression", span="305-305", cluster="lambda expression"];
d235 [label="Assert.Null(value)", span="317-317", cluster="lambda expression"];
d420 [label=arrangeSql, span=""];
d254 [label="Entry lambda expression", span="351-351", cluster="lambda expression"];
d421 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d256 [label="Exit lambda expression", span="351-351", cluster="lambda expression"];
d257 [label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="222-222", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)"];
d264 [label="Entry lambda expression", span="361-361", cluster="lambda expression"];
d422 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d266 [label="Exit lambda expression", span="361-361", cluster="lambda expression"];
d272 [label="Assert.Null(result)", span="372-372", cluster="lambda expression"];
d423 [label=arrangeSql, span=""];
d283 [label="Entry Unk.Execute", span="", cluster="Unk.Execute"];
d291 [label="Entry lambda expression", span="403-403", cluster="lambda expression"];
d424 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d293 [label="Exit lambda expression", span="403-403", cluster="lambda expression"];
d295 [label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="233-233", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)"];
d303 [label="Entry lambda expression", span="415-415", cluster="lambda expression"];
d425 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d305 [label="Exit lambda expression", span="415-415", cluster="lambda expression"];
d330 [label="Entry lambda expression", span="456-456", cluster="lambda expression"];
d426 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d332 [label="Exit lambda expression", span="456-456", cluster="lambda expression"];
d333 [label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="254-254", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)"];
d427 [label=arrangeSql, span=""];
d351 [label="Entry lambda expression", span="483-483", cluster="lambda expression"];
d428 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d353 [label="Exit lambda expression", span="483-483", cluster="lambda expression"];
d354 [label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="263-263", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)"];
d429 [label=arrangeSql, span=""];
d378 [label="Entry lambda expression", span="513-513", cluster="lambda expression"];
d430 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d380 [label="Exit lambda expression", span="513-513", cluster="lambda expression"];
d381 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)"];
d382 [label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="272-272", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)"];
d431 [label=arrangeSql, span=""];
d393 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)"];
d394 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)"];
d93 [label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38", cluster="HangFire.Storage.InvocationData.Deserialize()"];
d0 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", span="15-15", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()"];
d6 [label="Entry lambda expression", span="18-18", cluster="lambda expression"];
d11 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="24-24", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()"];
d15 [label="Entry lambda expression", span="27-27", cluster="lambda expression"];
d123 [label="Entry Unk.Null", span="", cluster="Unk.Null"];
d323 [label="Entry Unk.Contains", span="", cluster="Unk.Contains"];
d344 [label="Entry Unk.NotEqual", span="", cluster="Unk.NotEqual"];
d368 [label="Exit lambda expression", span="502-502", cluster="lambda expression"];
d367 [label="(string)x.Id", span="502-502", cluster="lambda expression"];
d371 [label="Exit lambda expression", span="502-502", cluster="lambda expression"];
d370 [label="(DateTime)x.LastHeartbeat", span="502-502", cluster="lambda expression"];
d8 [label="Exit lambda expression", span="18-18", cluster="lambda expression"];
d7 [label="new SqlServerConnection(null, new SqlServerStorageOptions())", span="18-18", cluster="lambda expression"];
d17 [label="Exit lambda expression", span="27-27", cluster="lambda expression"];
d16 [label="new SqlServerConnection(ConnectionUtils.CreateConnection(), null)", span="27-27", cluster="lambda expression"];
d9 [label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", span="35-35", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)"];
d10 [label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()"];
d18 [label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37", cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()"];
d397 [label="var connection = new SqlServerConnection(sqlConnection, new SqlServerStorageOptions())", span="543-543", cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)"];
d402 [label="var connection = new SqlServerConnection(\r\n                ConnectionUtils.CreateConnection(), new SqlServerStorageOptions())", span="551-552", cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)"];
d396 [label="var sqlConnection = ConnectionUtils.CreateConnection()", span="542-542", cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)"];
d398 [label="action(sqlConnection, connection)", span="545-545", cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)"];
d401 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", span="549-549", cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)"];
d403 [label="action(connection)", span="554-554", cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)"];
d395 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", span="540-540", cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)"];
d399 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", span="540-540", cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)"];
d400 [label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0", cluster="System.Action<T1, T2>.Invoke(T1, T2)"];
d404 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", span="549-549", cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)"];
d405 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)"];
m0_52 [label="Entry HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="113-113", cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="BackgroundJobClientFacts.cs"];
m0_53 [label="Assert.IsNotNull(filterContext)", span="115-115", cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="BackgroundJobClientFacts.cs"];
m0_54 [label="Assert.IsNotNull(filterContext.JobDescriptor)", span="116-116", cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="BackgroundJobClientFacts.cs"];
m0_56 [label="filterContext.Canceled = true", span="120-120", cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="BackgroundJobClientFacts.cs"];
m0_55 [label=_cancelsTheCreation, span="118-118", cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", color=red, community=0, file="BackgroundJobClientFacts.cs"];
m0_57 [label="_results.Add(String.Format(''{0}::{1}'', _name, ''OnPerforming''))", span="123-123", cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="BackgroundJobClientFacts.cs"];
m0_58 [label=_throwException, span="125-125", cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="BackgroundJobClientFacts.cs"];
m0_59 [label="throw new Exception();", span="127-127", cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="BackgroundJobClientFacts.cs"];
m0_60 [label="Exit HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="113-113", cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="BackgroundJobClientFacts.cs"];
m0_32 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="BackgroundJobClientFacts.cs"];
m0_34 [label="Entry HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", span="96-96", cluster="HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", file="BackgroundJobClientFacts.cs"];
m0_31 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="BackgroundJobClientFacts.cs"];
m0_61 [label="Entry HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="131-131", cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="BackgroundJobClientFacts.cs"];
m0_62 [label="Assert.IsNotNull(filterContext)", span="133-133", cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="BackgroundJobClientFacts.cs"];
m0_63 [label="Assert.IsNotNull(filterContext.JobDescriptor)", span="134-134", cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="BackgroundJobClientFacts.cs"];
m0_64 [label="_results.Add(String.Format(''{0}::{1}'', _name, ''OnPerformed'')\r\n                + (filterContext.Canceled ? '' (with the canceled flag set)'' : null))", span="136-137", cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="BackgroundJobClientFacts.cs"];
m0_66 [label="filterContext.ExceptionHandled = true", span="141-141", cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="BackgroundJobClientFacts.cs"];
m0_65 [label=_handlesException, span="139-139", cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="BackgroundJobClientFacts.cs"];
m0_67 [label="Exit HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="131-131", cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="BackgroundJobClientFacts.cs"];
m0_35 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="BackgroundJobClientFacts.cs"];
m0_36 [label="Entry System.Exception.Exception()", span="0-0", cluster="System.Exception.Exception()", file="BackgroundJobClientFacts.cs"];
m0_0 [label="Entry HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", span="18-18", cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobClientFacts.cs"];
m0_1 [label="_name = name", span="28-28", cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobClientFacts.cs"];
m0_2 [label="_results = results", span="29-29", cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobClientFacts.cs"];
m0_3 [label="_throwException = throwException", span="30-30", cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobClientFacts.cs"];
m0_4 [label="_cancelsTheCreation = cancelsTheCreation", span="31-31", cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobClientFacts.cs"];
m0_5 [label="_handlesException = handlesException", span="32-32", cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobClientFacts.cs"];
m0_6 [label="_setOnCreatingParameters = setOnCreatingParameters", span="33-33", cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobClientFacts.cs"];
m0_7 [label="_readParameters = readParameters", span="34-34", cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobClientFacts.cs"];
m0_8 [label="_setOnCreatedParameters = setOnCreatedParameters", span="35-35", cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobClientFacts.cs"];
m0_9 [label="Exit HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", span="18-18", cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobClientFacts.cs"];
m0_37 [label="Entry HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", span="79-79", cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="BackgroundJobClientFacts.cs"];
m0_38 [label="Assert.IsNotNull(filterContext)", span="81-81", cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="BackgroundJobClientFacts.cs"];
m0_39 [label="Assert.IsNotNull(filterContext.Redis)", span="82-82", cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="BackgroundJobClientFacts.cs"];
m0_40 [label="Assert.IsNotNull(filterContext.Items)", span="83-83", cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="BackgroundJobClientFacts.cs"];
m0_41 [label="Assert.IsNotNull(filterContext.JobDescriptor)", span="84-84", cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="BackgroundJobClientFacts.cs"];
m0_42 [label="_results.Add(String.Format(''{0}::{1}'', _name, ''OnCreated'') \r\n                + (filterContext.Canceled ? '' (with the canceled flag set)'' : null))", span="86-87", cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="BackgroundJobClientFacts.cs"];
m0_45 [label="filterContext.JobDescriptor.SetParameter(parameter.Key, parameter.Value)", span="93-93", cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="BackgroundJobClientFacts.cs"];
m0_48 [label="Assert.AreEqual(\r\n                        parameter.Value,\r\n                        filterContext.JobDescriptor.GetParameter<string>(parameter.Key))", span="101-103", cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="BackgroundJobClientFacts.cs"];
m0_50 [label="filterContext.ExceptionHandled = true", span="109-109", cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="BackgroundJobClientFacts.cs"];
m0_43 [label="_setOnCreatedParameters != null", span="89-89", cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="BackgroundJobClientFacts.cs"];
m0_44 [label=_setOnCreatedParameters, span="91-91", cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="BackgroundJobClientFacts.cs"];
m0_46 [label="_readParameters != null", span="97-97", cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="BackgroundJobClientFacts.cs"];
m0_47 [label=_readParameters, span="99-99", cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="BackgroundJobClientFacts.cs"];
m0_49 [label=_handlesException, span="107-107", cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="BackgroundJobClientFacts.cs"];
m0_51 [label="Exit HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", span="79-79", cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="BackgroundJobClientFacts.cs"];
m0_33 [label="Entry HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", span="72-72", cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="BackgroundJobClientFacts.cs"];
m0_30 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="BackgroundJobClientFacts.cs"];
m0_10 [label="Entry HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", span="38-38", cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="BackgroundJobClientFacts.cs"];
m0_11 [label="Assert.IsNotNull(filterContext)", span="40-40", cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="BackgroundJobClientFacts.cs"];
m0_12 [label="Assert.IsNotNull(filterContext.Items)", span="41-41", cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="BackgroundJobClientFacts.cs"];
m0_13 [label="Assert.IsNotNull(filterContext.Redis)", span="42-42", cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="BackgroundJobClientFacts.cs"];
m0_14 [label="Assert.IsNotNull(filterContext.JobDescriptor)", span="43-43", cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="BackgroundJobClientFacts.cs"];
m0_15 [label="Assert.IsNotNull(filterContext.JobDescriptor.JobId)", span="44-44", cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="BackgroundJobClientFacts.cs"];
m0_16 [label="Assert.IsNotNull(filterContext.JobDescriptor.Type)", span="45-45", cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="BackgroundJobClientFacts.cs"];
m0_17 [label="Assert.IsNotNull(filterContext.JobDescriptor.State)", span="46-46", cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="BackgroundJobClientFacts.cs"];
m0_19 [label="filterContext.Canceled = true", span="50-50", cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="BackgroundJobClientFacts.cs"];
m0_23 [label="filterContext.JobDescriptor.SetParameter(parameter.Key, parameter.Value)", span="59-59", cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="BackgroundJobClientFacts.cs"];
m0_26 [label="Assert.AreEqual(\r\n                        parameter.Value, \r\n                        filterContext.JobDescriptor.GetParameter<string>(parameter.Key))", span="67-69", cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="BackgroundJobClientFacts.cs"];
m0_18 [label=_cancelsTheCreation, span="48-48", cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="BackgroundJobClientFacts.cs"];
m0_20 [label="_results.Add(String.Format(''{0}::{1}'', _name, ''OnCreating''))", span="53-53", cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="BackgroundJobClientFacts.cs"];
m0_21 [label="_setOnCreatingParameters != null", span="55-55", cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="BackgroundJobClientFacts.cs"];
m0_22 [label=_setOnCreatingParameters, span="57-57", cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="BackgroundJobClientFacts.cs"];
m0_24 [label="_readParameters != null", span="63-63", cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="BackgroundJobClientFacts.cs"];
m0_25 [label=_readParameters, span="65-65", cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="BackgroundJobClientFacts.cs"];
m0_27 [label=_throwException, span="73-73", cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="BackgroundJobClientFacts.cs"];
m0_28 [label="throw new Exception();", span="75-75", cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="BackgroundJobClientFacts.cs"];
m0_29 [label="Exit HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", span="38-38", cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="BackgroundJobClientFacts.cs"];
m0_68 [label="HangFire.Tests.TestFilter", span="", file="BackgroundJobClientFacts.cs"];
m1_10 [label="Entry Mock<IStateMachineFactory>.cstr", span="", cluster="Mock<IStateMachineFactory>.cstr", file="ClientExceptionContextFacts.cs"];
m1_9 [label="Entry Mock<IState>.cstr", span="", cluster="Mock<IState>.cstr", file="ClientExceptionContextFacts.cs"];
m1_23 [label="Entry Hangfire.Client.ClientExceptionContext.ClientExceptionContext(Hangfire.Client.CreateContext, System.Exception)", span="26-26", cluster="Hangfire.Client.ClientExceptionContext.ClientExceptionContext(Hangfire.Client.CreateContext, System.Exception)", file="ClientExceptionContextFacts.cs"];
m1_25 [label="Entry Hangfire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenExceptionIsNull()", span="33-33", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenExceptionIsNull()", file="ClientExceptionContextFacts.cs"];
m1_26 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new ClientExceptionContext(_createContext, null))", span="35-36", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenExceptionIsNull()", file="ClientExceptionContextFacts.cs"];
m1_27 [label="Assert.Equal(''exception'', exception.ParamName)", span="38-38", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenExceptionIsNull()", file="ClientExceptionContextFacts.cs"];
m1_28 [label="Exit Hangfire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenExceptionIsNull()", span="33-33", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenExceptionIsNull()", file="ClientExceptionContextFacts.cs"];
m1_39 [label="Entry Unk.Same", span="", cluster="Unk.Same", file="ClientExceptionContextFacts.cs"];
m1_0 [label="Entry Hangfire.Core.Tests.Client.ClientExceptionContextFacts.ClientExceptionContextFacts()", span="14-14", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.ClientExceptionContextFacts()", file="ClientExceptionContextFacts.cs"];
m1_1 [label="var connection = new Mock<IStorageConnection>()", span="16-16", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.ClientExceptionContextFacts()", file="ClientExceptionContextFacts.cs"];
m1_2 [label="var job = Job.FromExpression(() => TestMethod())", span="17-17", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.ClientExceptionContextFacts()", file="ClientExceptionContextFacts.cs"];
m1_5 [label="_createContext = new CreateContext(\r\n                connection.Object, stateMachineFactory.Object, job, state.Object)", span="21-22", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.ClientExceptionContextFacts()", color=red, community=0, file="ClientExceptionContextFacts.cs"];
m1_3 [label="var state = new Mock<IState>()", span="18-18", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.ClientExceptionContextFacts()", file="ClientExceptionContextFacts.cs"];
m1_4 [label="_createContext = new CreateContext(\r\n                connection.Object, job, state.Object)", span="20-21", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.ClientExceptionContextFacts()", color=green, community=0, file="ClientExceptionContextFacts.cs"];
m1_6 [label="Exit Hangfire.Core.Tests.Client.ClientExceptionContextFacts.ClientExceptionContextFacts()", span="14-14", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.ClientExceptionContextFacts()", file="ClientExceptionContextFacts.cs"];
m1_40 [label="Entry Unk.False", span="", cluster="Unk.False", file="ClientExceptionContextFacts.cs"];
m1_29 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="ClientExceptionContextFacts.cs"];
m1_24 [label="Entry System.Exception.Exception()", span="0-0", cluster="System.Exception.Exception()", file="ClientExceptionContextFacts.cs"];
m1_15 [label="Entry Hangfire.Core.Tests.Client.ClientExceptionContextFacts.TestMethod()", span="51-51", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.TestMethod()", file="ClientExceptionContextFacts.cs"];
m1_41 [label="Exit Hangfire.Core.Tests.Client.ClientExceptionContextFacts.TestMethod()", span="51-51", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.TestMethod()", file="ClientExceptionContextFacts.cs"];
m1_7 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="ClientExceptionContextFacts.cs"];
m1_33 [label="Entry Hangfire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_CorrectlySets_AllProperties()", span="42-42", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_CorrectlySets_AllProperties()", file="ClientExceptionContextFacts.cs"];
m1_34 [label="var exception = new Exception()", span="44-44", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_CorrectlySets_AllProperties()", file="ClientExceptionContextFacts.cs"];
m1_35 [label="var context = new ClientExceptionContext(_createContext, exception)", span="45-45", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_CorrectlySets_AllProperties()", file="ClientExceptionContextFacts.cs"];
m1_36 [label="Assert.Same(exception, context.Exception)", span="47-47", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_CorrectlySets_AllProperties()", file="ClientExceptionContextFacts.cs"];
m1_37 [label="Assert.False(context.ExceptionHandled)", span="48-48", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_CorrectlySets_AllProperties()", file="ClientExceptionContextFacts.cs"];
m1_38 [label="Exit Hangfire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_CorrectlySets_AllProperties()", span="42-42", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_CorrectlySets_AllProperties()", file="ClientExceptionContextFacts.cs"];
m1_30 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="ClientExceptionContextFacts.cs"];
m1_12 [label="Entry lambda expression", span="17-17", cluster="lambda expression", file="ClientExceptionContextFacts.cs"];
m1_13 [label="TestMethod()", span="17-17", cluster="lambda expression", file="ClientExceptionContextFacts.cs"];
m1_14 [label="Exit lambda expression", span="17-17", cluster="lambda expression", file="ClientExceptionContextFacts.cs"];
m1_20 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="ClientExceptionContextFacts.cs"];
m1_21 [label="new ClientExceptionContext(null, new Exception())", span="29-29", cluster="lambda expression", file="ClientExceptionContextFacts.cs"];
m1_22 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="ClientExceptionContextFacts.cs"];
m1_31 [label="new ClientExceptionContext(_createContext, null)", span="36-36", cluster="lambda expression", file="ClientExceptionContextFacts.cs"];
m1_32 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="ClientExceptionContextFacts.cs"];
m1_11 [label="Entry CreateContext.cstr", span="", cluster="CreateContext.cstr", file="ClientExceptionContextFacts.cs"];
m1_8 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="148-148", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="ClientExceptionContextFacts.cs"];
m1_16 [label="Entry Hangfire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", span="26-26", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", file="ClientExceptionContextFacts.cs"];
m1_17 [label="Assert.Throws<NullReferenceException>(\r\n                () => new ClientExceptionContext(null, new Exception()))", span="28-29", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", file="ClientExceptionContextFacts.cs"];
m1_18 [label="Exit Hangfire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", span="26-26", cluster="Hangfire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", file="ClientExceptionContextFacts.cs"];
m1_42 [label="Hangfire.Core.Tests.Client.ClientExceptionContextFacts", span="", file="ClientExceptionContextFacts.cs"];
m2_14 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", file="CreateContext.cs"];
m2_15 [label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Enqueued state''))", span="48-49", cluster="HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", file="CreateContext.cs"];
m2_16 [label="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(null)", span="51-51", cluster="HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", file="CreateContext.cs"];
m2_17 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", file="CreateContext.cs"];
m2_57 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", span="129-129", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", file="CreateContext.cs"];
m2_58 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After applying, it should enqueue the job to the given queue'', ((string[])(null)))", span="131-131", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", file="CreateContext.cs"];
m2_59 [label="this.ScenarioSetup(scenarioInfo)", span="133-133", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", file="CreateContext.cs"];
m2_60 [label="this.FeatureBackground()", span="135-135", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", file="CreateContext.cs"];
m2_61 [label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="137-137", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", file="CreateContext.cs"];
m2_62 [label="testRunner.Then(''the \'test\' queue should contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="139-139", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", color=red, community=0, file="CreateContext.cs"];
m2_63 [label="testRunner.And(''the \'test\' queue should be added to the queues set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="141-141", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", color=red, community=0, file="CreateContext.cs"];
m2_64 [label="this.ScenarioCleanup()", span="143-143", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", color=red, community=0, file="CreateContext.cs"];
m2_65 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", span="129-129", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", file="CreateContext.cs"];
m2_25 [label="Entry Unk.OnScenarioStart", span="", cluster="Unk.OnScenarioStart", file="CreateContext.cs"];
m2_29 [label="Entry Unk.CollectScenarioErrors", span="", cluster="Unk.CollectScenarioErrors", file="CreateContext.cs"];
m2_21 [label="Entry Unk.OnScenarioEnd", span="", cluster="Unk.OnScenarioEnd", file="CreateContext.cs"];
m2_26 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioCleanup()", file="CreateContext.cs"];
m2_27 [label="testRunner.CollectScenarioErrors()", span="68-68", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioCleanup()", file="CreateContext.cs"];
m2_28 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioCleanup()", file="CreateContext.cs"];
m2_9 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", file="CreateContext.cs"];
m2_10 [label="testRunner.OnFeatureEnd()", span="41-41", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", file="CreateContext.cs"];
m2_11 [label="testRunner = null", span="42-42", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", file="CreateContext.cs"];
m2_12 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", file="CreateContext.cs"];
m2_35 [label="Entry Unk.And", span="", cluster="Unk.And", file="CreateContext.cs"];
m2_67 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", span="150-150", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", file="CreateContext.cs"];
m2_68 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying, it should not remove the job from the queue'', ((string[])(null)))", span="152-152", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", file="CreateContext.cs"];
m2_69 [label="this.ScenarioSetup(scenarioInfo)", span="154-154", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", file="CreateContext.cs"];
m2_70 [label="this.FeatureBackground()", span="156-156", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", file="CreateContext.cs"];
m2_71 [label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="158-158", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", file="CreateContext.cs"];
m2_72 [label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="160-160", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", file="CreateContext.cs"];
m2_73 [label="testRunner.Then(''the \'test\' queue should contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="162-162", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", file="CreateContext.cs"];
m2_74 [label="this.ScenarioCleanup()", span="164-164", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", file="CreateContext.cs"];
m2_75 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", span="150-150", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", file="CreateContext.cs"];
m2_5 [label="Entry Unk.GetTestRunner", span="", cluster="Unk.GetTestRunner", file="CreateContext.cs"];
m2_13 [label="Entry Unk.OnFeatureEnd", span="", cluster="Unk.OnFeatureEnd", file="CreateContext.cs"];
m2_7 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="CreateContext.cs"];
m2_66 [label="Entry Unk.When", span="", cluster="Unk.When", file="CreateContext.cs"];
m2_56 [label="Entry Unk.AddRow", span="", cluster="Unk.AddRow", file="CreateContext.cs"];
m2_18 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioTearDown()", file="CreateContext.cs"];
m2_19 [label="testRunner.OnScenarioEnd()", span="58-58", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioTearDown()", file="CreateContext.cs"];
m2_20 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioTearDown()", file="CreateContext.cs"];
m2_22 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="CreateContext.cs"];
m2_23 [label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="CreateContext.cs"];
m2_24 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="CreateContext.cs"];
m2_43 [label="var i = 0", span="70-70", cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesJobs(int)", file="CreateContext.cs", color=green, community=0];
m2_45 [label="When(''it dequeues a job'')", span="72-72", cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesJobs(int)", file="CreateContext.cs", color=green, community=0];
m2_46 [label="i++", span="70-70", cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesJobs(int)", file="CreateContext.cs", color=green, community=0];
m2_47 [label="Exit HangFire.Tests.JobFetcherSteps.WhenItDequeuesJobs(int)", span="68-68", cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesJobs(int)", file="CreateContext.cs"];
m2_48 [label="this.FeatureBackground()", span="108-108", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="CreateContext.cs"];
m2_49 [label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="110-112", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="CreateContext.cs"];
m2_50 [label="table1.AddRow(new string[] {\r\n                        ''EnqueuedAt'',\r\n                        ''<UtcNow timestamp>''})", span="113-115", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="CreateContext.cs"];
m2_51 [label="table1.AddRow(new string[] {\r\n                        ''Queue'',\r\n                        ''test''})", span="116-118", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="CreateContext.cs"];
m2_52 [label="testRunner.Then(''properties table should contain the following items:'', ((string)(null)), table1, ''Then '')", span="120-120", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="CreateContext.cs"];
m2_53 [label="this.ScenarioCleanup()", span="122-122", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="CreateContext.cs"];
m2_54 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.ItShouldHaveTheCorrectPropertiesSet()", span="102-102", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="CreateContext.cs"];
m2_44 [label="i < count", span="70-70", cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesJobs(int)", file="CreateContext.cs", color=green, community=0];
m2_34 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="CreateContext.cs"];
m2_42 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.StateNameShouldBeEnqueued()", span="85-85", cluster="HangFire.Tests.States.EnqueuedStateFeature.StateNameShouldBeEnqueued()", file="CreateContext.cs"];
m2_6 [label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span="", cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="CreateContext.cs"];
m2_55 [label="Entry TechTalk.SpecFlow.Table.cstr", span="", cluster="TechTalk.SpecFlow.Table.cstr", file="CreateContext.cs"];
m2_30 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.FeatureBackground()", span="71-71", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureBackground()", file="CreateContext.cs"];
m2_31 [label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="75-75", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureBackground()", file="CreateContext.cs"];
m2_32 [label="testRunner.And(''the Enqueued state with the \'test\' value for the \'queue\' argument'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="77-77", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureBackground()", file="CreateContext.cs"];
m2_33 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.FeatureBackground()", span="71-71", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureBackground()", file="CreateContext.cs"];
m2_36 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.StateNameShouldBeEnqueued()", span="85-85", cluster="HangFire.Tests.States.EnqueuedStateFeature.StateNameShouldBeEnqueued()", file="CreateContext.cs"];
m2_37 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State name should be \'Enqueued\''', ((string[])(null)))", span="87-87", cluster="HangFire.Tests.States.EnqueuedStateFeature.StateNameShouldBeEnqueued()", file="CreateContext.cs"];
m2_38 [label="this.ScenarioSetup(scenarioInfo)", span="89-89", cluster="HangFire.Tests.States.EnqueuedStateFeature.StateNameShouldBeEnqueued()", file="CreateContext.cs"];
m2_39 [label="this.FeatureBackground()", span="91-91", cluster="HangFire.Tests.States.EnqueuedStateFeature.StateNameShouldBeEnqueued()", file="CreateContext.cs"];
m2_40 [label="testRunner.Then(''the state name should be equal to \'Enqueued\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="93-93", cluster="HangFire.Tests.States.EnqueuedStateFeature.StateNameShouldBeEnqueued()", file="CreateContext.cs"];
m2_41 [label="this.ScenarioCleanup()", span="95-95", cluster="HangFire.Tests.States.EnqueuedStateFeature.StateNameShouldBeEnqueued()", file="CreateContext.cs"];
m2_8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", file="CreateContext.cs"];
m2_0 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="CreateContext.cs"];
m2_1 [label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="CreateContext.cs"];
m2_2 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Enqueued state'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="CreateContext.cs"];
m2_3 [label="testRunner.OnFeatureStart(featureInfo)", span="35-35", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="CreateContext.cs"];
m2_4 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="CreateContext.cs"];
m2_76 [label="HangFire.Tests.States.EnqueuedStateFeature", span="", file="CreateContext.cs"];
m3_26 [label="Entry HangFire.Tests.JobClientSteps.WhenICreateAJob()", span="73-73", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJob()", file="CreateContextFacts.cs"];
m3_27 [label="_stateMock = new Mock<JobState>(''SomeReason'')", span="75-75", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJob()", file="CreateContextFacts.cs"];
m3_28 [label="_stateMock.Setup(x => x.StateName).Returns(''Test'')", span="76-76", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJob()", file="CreateContextFacts.cs"];
m3_29 [label="_stateMock.Setup(x => x.GetProperties()).Returns(new Dictionary<string, string>())", span="77-77", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJob()", file="CreateContextFacts.cs"];
m3_30 [label="_client.CreateJob(\r\n                    JobSteps.DefaultJobId,\r\n                    typeof(TestJob),\r\n                    _stateMock.Object,\r\n                    _arguments)", span="81-85", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJob()", file="CreateContextFacts.cs"];
m3_31 [label=Exception, span="87-87", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJob()", file="CreateContextFacts.cs"];
m3_32 [label="_exception = ex", span="89-89", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJob()", file="CreateContextFacts.cs"];
m3_33 [label="Exit HangFire.Tests.JobClientSteps.WhenICreateAJob()", span="73-73", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJob()", file="CreateContextFacts.cs"];
m3_0 [label="Entry HangFire.Tests.JobClientSteps.GivenAClient()", span="28-28", cluster="HangFire.Tests.JobClientSteps.GivenAClient()", file="CreateContextFacts.cs"];
m3_1 [label="_client = new JobClient(\r\n                RedisFactory.BasicManager,\r\n                new JobCreator(_clientFilters, _exceptionFilters))", span="30-32", cluster="HangFire.Tests.JobClientSteps.GivenAClient()", file="CreateContextFacts.cs"];
m3_2 [label="Exit HangFire.Tests.JobClientSteps.GivenAClient()", span="28-28", cluster="HangFire.Tests.JobClientSteps.GivenAClient()", file="CreateContextFacts.cs"];
m3_9 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="CreateContextFacts.cs"];
m3_19 [label="Entry HangFire.Tests.JobClientSteps.GivenTheExceptionFilter(string)", span="60-60", cluster="HangFire.Tests.JobClientSteps.GivenTheExceptionFilter(string)", file="CreateContextFacts.cs"];
m3_20 [label="_exceptionFilters.Add(new TestExceptionFilter(name, _exceptionFilterResults))", span="62-62", cluster="HangFire.Tests.JobClientSteps.GivenTheExceptionFilter(string)", file="CreateContextFacts.cs"];
m3_21 [label="Exit HangFire.Tests.JobClientSteps.GivenTheExceptionFilter(string)", span="60-60", cluster="HangFire.Tests.JobClientSteps.GivenTheExceptionFilter(string)", file="CreateContextFacts.cs"];
m3_76 [label="Entry HangFire.Client.JobClient.CreateJob(string, System.Type, HangFire.States.JobState, System.Collections.Generic.IDictionary<string, string>)", span="98-98", cluster="HangFire.Client.JobClient.CreateJob(string, System.Type, HangFire.States.JobState, System.Collections.Generic.IDictionary<string, string>)", file="CreateContextFacts.cs"];
m3_116 [label="Entry Unk.Apply", span="", cluster="Unk.Apply", file="CreateContextFacts.cs"];
m3_95 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash", file="CreateContextFacts.cs"];
m3_86 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="CreateContextFacts.cs"];
m3_22 [label="Entry HangFire.Tests.TestExceptionFilter.TestExceptionFilter(string, System.Collections.Generic.IList<string>, bool)", span="12-12", cluster="HangFire.Tests.TestExceptionFilter.TestExceptionFilter(string, System.Collections.Generic.IList<string>, bool)", file="CreateContextFacts.cs"];
m3_34 [label="Entry Mock<JobState>.cstr", span="", cluster="Mock<JobState>.cstr", file="CreateContextFacts.cs"];
m3_66 [label="Entry HangFire.Tests.JobClientSteps.WhenICreateAJobWithNullType()", span="120-120", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithNullType()", file="CreateContextFacts.cs"];
m3_67 [label="_client.CreateJob(JobSteps.DefaultJobId, null, new Mock<JobState>(''1'').Object, null)", span="124-124", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithNullType()", file="CreateContextFacts.cs"];
m3_68 [label=Exception, span="126-126", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithNullType()", file="CreateContextFacts.cs"];
m3_69 [label="_exception = ex", span="128-128", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithNullType()", file="CreateContextFacts.cs"];
m3_70 [label="Exit HangFire.Tests.JobClientSteps.WhenICreateAJobWithNullType()", span="120-120", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithNullType()", file="CreateContextFacts.cs"];
m3_136 [label="Entry HangFire.Tests.JobClientSteps.ThenTheClientFilterWasExecuted()", span="229-229", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterWasExecuted()", file="CreateContextFacts.cs"];
m3_137 [label="Assert.AreNotEqual(0, _exceptionFilterResults.Count)", span="231-231", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterWasExecuted()", color=red, community=0, file="CreateContextFacts.cs"];
m3_138 [label="Exit HangFire.Tests.JobClientSteps.ThenTheClientFilterWasExecuted()", span="229-229", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterWasExecuted()", file="CreateContextFacts.cs"];
m3_108 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="CreateContextFacts.cs"];
m3_128 [label="Entry HangFire.Tests.JobClientSteps.ThenTheClientFilterMethodsWereExecuted(Table)", span="217-217", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterMethodsWereExecuted(Table)", file="CreateContextFacts.cs"];
m3_129 [label="Assert.AreEqual(table.RowCount, _clientFilterResults.Count)", span="219-219", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterMethodsWereExecuted(Table)", color=red, community=0, file="CreateContextFacts.cs"];
m3_131 [label="i < table.RowCount", span="221-221", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterMethodsWereExecuted(Table)", color=red, community=0, file="CreateContextFacts.cs"];
m3_132 [label="var method = table.Rows[i][''Method'']", span="223-223", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterMethodsWereExecuted(Table)", color=red, community=0, file="CreateContextFacts.cs"];
m3_130 [label="var i = 0", span="221-221", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterMethodsWereExecuted(Table)", color=red, community=0, file="CreateContextFacts.cs"];
m3_133 [label="Assert.AreEqual(method, _clientFilterResults[i])", span="224-224", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterMethodsWereExecuted(Table)", color=red, community=0, file="CreateContextFacts.cs"];
m3_134 [label="i++", span="221-221", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterMethodsWereExecuted(Table)", color=red, community=0, file="CreateContextFacts.cs"];
m3_135 [label="Exit HangFire.Tests.JobClientSteps.ThenTheClientFilterMethodsWereExecuted(Table)", span="217-217", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterMethodsWereExecuted(Table)", file="CreateContextFacts.cs"];
m3_106 [label="Entry Unk.>", span="", cluster="Unk.>", file="CreateContextFacts.cs"];
m3_13 [label="Entry HangFire.Tests.JobClientSteps.GivenTheClientFilterThatHandlesAnException(string)", span="48-48", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatHandlesAnException(string)", file="CreateContextFacts.cs"];
m3_14 [label="_clientFilters.Add(new TestFilter(name, _clientFilterResults, false, false, true))", span="50-50", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatHandlesAnException(string)", file="CreateContextFacts.cs"];
m3_15 [label="Exit HangFire.Tests.JobClientSteps.GivenTheClientFilterThatHandlesAnException(string)", span="48-48", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatHandlesAnException(string)", file="CreateContextFacts.cs"];
m3_46 [label="Entry HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheFollowingArguments(Table)", span="94-94", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheFollowingArguments(Table)", file="CreateContextFacts.cs"];
m3_47 [label="_arguments = table.Rows.ToDictionary(x => x[''Name''], x => x[''Value''])", span="96-96", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheFollowingArguments(Table)", color=red, community=0, file="CreateContextFacts.cs"];
m3_48 [label="When(''I create a job'')", span="97-97", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheFollowingArguments(Table)", color=red, community=0, file="CreateContextFacts.cs"];
m3_49 [label="Exit HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheFollowingArguments(Table)", span="94-94", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheFollowingArguments(Table)", file="CreateContextFacts.cs"];
m3_139 [label="Entry Unk.AreNotEqual", span="", cluster="Unk.AreNotEqual", file="CreateContextFacts.cs"];
m3_10 [label="Entry HangFire.Tests.JobClientSteps.GivenTheClientFilterThatCancelsTheJob(string)", span="42-42", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatCancelsTheJob(string)", file="CreateContextFacts.cs"];
m3_11 [label="_clientFilters.Add(new TestFilter(name, _clientFilterResults, false, true))", span="44-44", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatCancelsTheJob(string)", color=red, community=0, file="CreateContextFacts.cs"];
m3_12 [label="Exit HangFire.Tests.JobClientSteps.GivenTheClientFilterThatCancelsTheJob(string)", span="42-42", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatCancelsTheJob(string)", file="CreateContextFacts.cs"];
m3_5 [label="Entry HangFire.Tests.JobClientSteps.GivenTheClientFilter(string)", span="36-36", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilter(string)", file="CreateContextFacts.cs"];
m3_6 [label="_clientFilters.Add(new TestFilter(name, _clientFilterResults))", span="38-38", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilter(string)", file="CreateContextFacts.cs"];
m3_7 [label="Exit HangFire.Tests.JobClientSteps.GivenTheClientFilter(string)", span="36-36", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilter(string)", file="CreateContextFacts.cs"];
m3_90 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse", file="CreateContextFacts.cs"];
m3_107 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="CreateContextFacts.cs"];
m3_58 [label="Entry HangFire.Tests.JobClientSteps.WhenThereWasAnExceptionWhileCreatingAJob()", span="101-101", cluster="HangFire.Tests.JobClientSteps.WhenThereWasAnExceptionWhileCreatingAJob()", file="CreateContextFacts.cs"];
m3_59 [label="_clientFilters.Add(new TestFilter(''buggy'', _clientFilterResults, true))", span="103-103", cluster="HangFire.Tests.JobClientSteps.WhenThereWasAnExceptionWhileCreatingAJob()", file="CreateContextFacts.cs"];
m3_60 [label="Exit HangFire.Tests.JobClientSteps.WhenThereWasAnExceptionWhileCreatingAJob()", span="101-101", cluster="HangFire.Tests.JobClientSteps.WhenThereWasAnExceptionWhileCreatingAJob()", file="CreateContextFacts.cs"];
m3_71 [label="Entry HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyState()", span="133-133", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyState()", file="CreateContextFacts.cs"];
m3_72 [label="_client.CreateJob(JobSteps.DefaultJobId, typeof(TestJob), null, null)", span="137-137", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyState()", file="CreateContextFacts.cs"];
m3_73 [label=Exception, span="139-139", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyState()", file="CreateContextFacts.cs"];
m3_74 [label="_exception = ex", span="141-141", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyState()", file="CreateContextFacts.cs"];
m3_75 [label="Exit HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyState()", span="133-133", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyState()", file="CreateContextFacts.cs"];
m3_91 [label="Entry HangFire.Tests.JobClientSteps.ThenItHasTheFollowingParameters(Table)", span="171-171", cluster="HangFire.Tests.JobClientSteps.ThenItHasTheFollowingParameters(Table)", file="CreateContextFacts.cs"];
m3_92 [label="var job = Redis.Client.GetAllEntriesFromHash(''hangfire:job:'' + JobSteps.DefaultJobId)", span="173-173", cluster="HangFire.Tests.JobClientSteps.ThenItHasTheFollowingParameters(Table)", file="CreateContextFacts.cs"];
m3_93 [label="DictionaryAssert.ContainsFollowingItems(table, job)", span="174-174", cluster="HangFire.Tests.JobClientSteps.ThenItHasTheFollowingParameters(Table)", file="CreateContextFacts.cs"];
m3_94 [label="Exit HangFire.Tests.JobClientSteps.ThenItHasTheFollowingParameters(Table)", span="171-171", cluster="HangFire.Tests.JobClientSteps.ThenItHasTheFollowingParameters(Table)", file="CreateContextFacts.cs"];
m3_151 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull", file="CreateContextFacts.cs"];
m3_77 [label="Entry HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheIncorrectType()", span="146-146", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheIncorrectType()", file="CreateContextFacts.cs"];
m3_78 [label="_client.CreateJob(JobSteps.DefaultJobId, typeof(JobClientSteps), null, null)", span="150-150", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheIncorrectType()", file="CreateContextFacts.cs"];
m3_79 [label=Exception, span="152-152", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheIncorrectType()", file="CreateContextFacts.cs"];
m3_80 [label="_exception = ex", span="154-154", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheIncorrectType()", file="CreateContextFacts.cs"];
m3_81 [label="Exit HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheIncorrectType()", span="146-146", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheIncorrectType()", file="CreateContextFacts.cs"];
m3_3 [label="Entry HangFire.Client.JobClient.JobClient(IRedisClientsManager, HangFire.Client.JobCreator)", span="31-31", cluster="HangFire.Client.JobClient.JobClient(IRedisClientsManager, HangFire.Client.JobCreator)", file="CreateContextFacts.cs"];
m3_109 [label="Entry HangFire.Tests.JobClientSteps.ThenTheGivenStateWasAppliedToIt()", span="194-194", cluster="HangFire.Tests.JobClientSteps.ThenTheGivenStateWasAppliedToIt()", file="CreateContextFacts.cs"];
m3_110 [label="_stateMock.Verify(\r\n                x => x.Apply(It.IsAny<IRedisTransaction>(), JobSteps.DefaultJobId),\r\n                Times.Once)", span="196-198", cluster="HangFire.Tests.JobClientSteps.ThenTheGivenStateWasAppliedToIt()", file="CreateContextFacts.cs"];
m3_111 [label="Exit HangFire.Tests.JobClientSteps.ThenTheGivenStateWasAppliedToIt()", span="194-194", cluster="HangFire.Tests.JobClientSteps.ThenTheGivenStateWasAppliedToIt()", file="CreateContextFacts.cs"];
m3_45 [label="Entry Unk.GetProperties", span="", cluster="Unk.GetProperties", file="CreateContextFacts.cs"];
m3_97 [label="Entry HangFire.Tests.JobClientSteps.ThenTheJobContainsAllOfTheAboveArguments()", span="178-178", cluster="HangFire.Tests.JobClientSteps.ThenTheJobContainsAllOfTheAboveArguments()", file="CreateContextFacts.cs"];
m3_98 [label="var argsJson = Redis.Client.GetValueFromHash(\r\n                ''hangfire:job:'' + JobSteps.DefaultJobId,\r\n                ''Args'')", span="180-182", cluster="HangFire.Tests.JobClientSteps.ThenTheJobContainsAllOfTheAboveArguments()", file="CreateContextFacts.cs"];
m3_99 [label="var args = JobHelper.FromJson<Dictionary<string, string>>(argsJson)", span="183-183", cluster="HangFire.Tests.JobClientSteps.ThenTheJobContainsAllOfTheAboveArguments()", file="CreateContextFacts.cs"];
m3_100 [label="Assert.AreEqual(_arguments.Count, args.Count)", span="185-185", cluster="HangFire.Tests.JobClientSteps.ThenTheJobContainsAllOfTheAboveArguments()", file="CreateContextFacts.cs"];
m3_102 [label="Assert.IsTrue(args.ContainsKey(pair.Key))", span="188-188", cluster="HangFire.Tests.JobClientSteps.ThenTheJobContainsAllOfTheAboveArguments()", file="CreateContextFacts.cs"];
m3_101 [label=_arguments, span="186-186", cluster="HangFire.Tests.JobClientSteps.ThenTheJobContainsAllOfTheAboveArguments()", file="CreateContextFacts.cs"];
m3_103 [label="Assert.AreEqual(_arguments[pair.Key], pair.Value)", span="189-189", cluster="HangFire.Tests.JobClientSteps.ThenTheJobContainsAllOfTheAboveArguments()", file="CreateContextFacts.cs"];
m3_104 [label="Exit HangFire.Tests.JobClientSteps.ThenTheJobContainsAllOfTheAboveArguments()", span="178-178", cluster="HangFire.Tests.JobClientSteps.ThenTheJobContainsAllOfTheAboveArguments()", file="CreateContextFacts.cs"];
m3_16 [label="Entry HangFire.Tests.JobClientSteps.GivenTheClientFilterThatThrowsAnException(string)", span="54-54", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatThrowsAnException(string)", file="CreateContextFacts.cs"];
m3_17 [label="_clientFilters.Add(new TestFilter(name, _clientFilterResults, true, false, false))", span="56-56", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatThrowsAnException(string)", file="CreateContextFacts.cs"];
m3_18 [label="Exit HangFire.Tests.JobClientSteps.GivenTheClientFilterThatThrowsAnException(string)", span="54-54", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatThrowsAnException(string)", file="CreateContextFacts.cs"];
m3_37 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="CreateContextFacts.cs"];
m3_51 [label="Entry Unk.When", span="", cluster="Unk.When", file="CreateContextFacts.cs"];
m3_124 [label="Entry HangFire.Tests.JobClientSteps.ThenTheCreateJobFailedExceptionWasThrown()", span="209-209", cluster="HangFire.Tests.JobClientSteps.ThenTheCreateJobFailedExceptionWasThrown()", file="CreateContextFacts.cs"];
m3_125 [label="Assert.IsNotNull(_exception)", span="211-211", cluster="HangFire.Tests.JobClientSteps.ThenTheCreateJobFailedExceptionWasThrown()", color=red, community=0, file="CreateContextFacts.cs"];
m3_126 [label="Assert.IsInstanceOfType(_exception, typeof(CreateJobFailedException))", span="212-212", cluster="HangFire.Tests.JobClientSteps.ThenTheCreateJobFailedExceptionWasThrown()", color=red, community=0, file="CreateContextFacts.cs"];
m3_127 [label="Exit HangFire.Tests.JobClientSteps.ThenTheCreateJobFailedExceptionWasThrown()", span="209-209", cluster="HangFire.Tests.JobClientSteps.ThenTheCreateJobFailedExceptionWasThrown()", file="CreateContextFacts.cs"];
m3_35 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="CreateContextFacts.cs"];
m3_123 [label="Entry Unk.IsInstanceOfType", span="", cluster="Unk.IsInstanceOfType", file="CreateContextFacts.cs"];
m3_87 [label="Entry HangFire.Tests.JobClientSteps.ThenTheStorageDoesNotContainTheJob()", span="165-165", cluster="HangFire.Tests.JobClientSteps.ThenTheStorageDoesNotContainTheJob()", file="CreateContextFacts.cs"];
m3_88 [label="Assert.IsFalse(Redis.Client.ContainsKey(''hangfire:job:'' + JobSteps.DefaultJobId))", span="167-167", cluster="HangFire.Tests.JobClientSteps.ThenTheStorageDoesNotContainTheJob()", file="CreateContextFacts.cs"];
m3_89 [label="Exit HangFire.Tests.JobClientSteps.ThenTheStorageDoesNotContainTheJob()", span="165-165", cluster="HangFire.Tests.JobClientSteps.ThenTheStorageDoesNotContainTheJob()", file="CreateContextFacts.cs"];
m3_122 [label="Entry System.Type.GetType(string, bool)", span="0-0", cluster="System.Type.GetType(string, bool)", file="CreateContextFacts.cs"];
m3_23 [label="Entry HangFire.Tests.JobClientSteps.GivenTheExceptionFilterThatHandlesAnException(string)", span="66-66", cluster="HangFire.Tests.JobClientSteps.GivenTheExceptionFilterThatHandlesAnException(string)", file="CreateContextFacts.cs"];
m3_24 [label="_exceptionFilters.Add(new TestExceptionFilter(name, _exceptionFilterResults, true))", span="68-68", cluster="HangFire.Tests.JobClientSteps.GivenTheExceptionFilterThatHandlesAnException(string)", file="CreateContextFacts.cs"];
m3_25 [label="Exit HangFire.Tests.JobClientSteps.GivenTheExceptionFilterThatHandlesAnException(string)", span="66-66", cluster="HangFire.Tests.JobClientSteps.GivenTheExceptionFilterThatHandlesAnException(string)", file="CreateContextFacts.cs"];
m3_82 [label="Entry HangFire.Tests.JobClientSteps.ThenTheStorageContainsIt()", span="159-159", cluster="HangFire.Tests.JobClientSteps.ThenTheStorageContainsIt()", file="CreateContextFacts.cs"];
m3_83 [label="Assert.IsTrue(Redis.Client.ContainsKey(''hangfire:job:'' + JobSteps.DefaultJobId))", span="161-161", cluster="HangFire.Tests.JobClientSteps.ThenTheStorageContainsIt()", file="CreateContextFacts.cs"];
m3_84 [label="Exit HangFire.Tests.JobClientSteps.ThenTheStorageContainsIt()", span="159-159", cluster="HangFire.Tests.JobClientSteps.ThenTheStorageContainsIt()", file="CreateContextFacts.cs"];
m3_113 [label="Entry lambda expression", span="197-197", cluster="lambda expression", file="CreateContextFacts.cs"];
m3_39 [label="Entry lambda expression", span="76-76", cluster="lambda expression", file="CreateContextFacts.cs"];
m3_42 [label="Entry lambda expression", span="77-77", cluster="lambda expression", file="CreateContextFacts.cs"];
m3_40 [label="x.StateName", span="76-76", cluster="lambda expression", file="CreateContextFacts.cs"];
m3_41 [label="Exit lambda expression", span="76-76", cluster="lambda expression", file="CreateContextFacts.cs"];
m3_43 [label="x.GetProperties()", span="77-77", cluster="lambda expression", file="CreateContextFacts.cs"];
m3_44 [label="Exit lambda expression", span="77-77", cluster="lambda expression", file="CreateContextFacts.cs"];
m3_52 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="CreateContextFacts.cs"];
m3_55 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="CreateContextFacts.cs"];
m3_53 [label="x[''Name'']", span="96-96", cluster="lambda expression", color=red, community=0, file="CreateContextFacts.cs"];
m3_54 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="CreateContextFacts.cs"];
m3_56 [label="x[''Value'']", span="96-96", cluster="lambda expression", color=red, community=0, file="CreateContextFacts.cs"];
m3_57 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="CreateContextFacts.cs"];
m3_114 [label="x.Apply(It.IsAny<IRedisTransaction>(), JobSteps.DefaultJobId)", span="197-197", cluster="lambda expression", file="CreateContextFacts.cs"];
m3_115 [label="Exit lambda expression", span="197-197", cluster="lambda expression", file="CreateContextFacts.cs"];
m3_121 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="CreateContextFacts.cs"];
m3_117 [label="Entry HangFire.Tests.JobClientSteps.ThenAnExceptionIsThrown(string)", span="202-202", cluster="HangFire.Tests.JobClientSteps.ThenAnExceptionIsThrown(string)", file="CreateContextFacts.cs"];
m3_118 [label="Assert.IsNotNull(_exception)", span="204-204", cluster="HangFire.Tests.JobClientSteps.ThenAnExceptionIsThrown(string)", color=red, community=0, file="CreateContextFacts.cs"];
m3_119 [label="Assert.IsInstanceOfType(_exception, Type.GetType(exceptionType, true))", span="205-205", cluster="HangFire.Tests.JobClientSteps.ThenAnExceptionIsThrown(string)", color=red, community=0, file="CreateContextFacts.cs"];
m3_120 [label="Exit HangFire.Tests.JobClientSteps.ThenAnExceptionIsThrown(string)", span="202-202", cluster="HangFire.Tests.JobClientSteps.ThenAnExceptionIsThrown(string)", file="CreateContextFacts.cs"];
m3_140 [label="Entry HangFire.Tests.JobClientSteps.ThenTheClientExceptionFiltersWereExecuted(Table)", span="236-236", cluster="HangFire.Tests.JobClientSteps.ThenTheClientExceptionFiltersWereExecuted(Table)", file="CreateContextFacts.cs"];
m3_141 [label="Assert.AreEqual(table.RowCount, _exceptionFilterResults.Count)", span="238-238", cluster="HangFire.Tests.JobClientSteps.ThenTheClientExceptionFiltersWereExecuted(Table)", color=red, community=0, file="CreateContextFacts.cs"];
m3_143 [label="i < table.RowCount", span="240-240", cluster="HangFire.Tests.JobClientSteps.ThenTheClientExceptionFiltersWereExecuted(Table)", color=red, community=0, file="CreateContextFacts.cs"];
m3_144 [label="var filter = table.Rows[i][''Filter'']", span="242-242", cluster="HangFire.Tests.JobClientSteps.ThenTheClientExceptionFiltersWereExecuted(Table)", color=red, community=0, file="CreateContextFacts.cs"];
m3_142 [label="var i = 0", span="240-240", cluster="HangFire.Tests.JobClientSteps.ThenTheClientExceptionFiltersWereExecuted(Table)", color=red, community=0, file="CreateContextFacts.cs"];
m3_145 [label="Assert.AreEqual(filter, _exceptionFilterResults[i])", span="243-243", cluster="HangFire.Tests.JobClientSteps.ThenTheClientExceptionFiltersWereExecuted(Table)", color=red, community=0, file="CreateContextFacts.cs"];
m3_146 [label="i++", span="240-240", cluster="HangFire.Tests.JobClientSteps.ThenTheClientExceptionFiltersWereExecuted(Table)", color=red, community=0, file="CreateContextFacts.cs"];
m3_147 [label="Exit HangFire.Tests.JobClientSteps.ThenTheClientExceptionFiltersWereExecuted(Table)", span="236-236", cluster="HangFire.Tests.JobClientSteps.ThenTheClientExceptionFiltersWereExecuted(Table)", file="CreateContextFacts.cs"];
m3_112 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="CreateContextFacts.cs"];
m3_105 [label="Entry Unk.GetValueFromHash", span="", cluster="Unk.GetValueFromHash", file="CreateContextFacts.cs"];
m3_8 [label="Entry HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool)", span="15-15", cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool)", file="CreateContextFacts.cs"];
m3_148 [label="Entry HangFire.Tests.JobClientSteps.ThenNoExceptionWereThrown()", span="248-248", cluster="HangFire.Tests.JobClientSteps.ThenNoExceptionWereThrown()", file="CreateContextFacts.cs"];
m3_149 [label="Assert.IsNull(_exception)", span="250-250", cluster="HangFire.Tests.JobClientSteps.ThenNoExceptionWereThrown()", color=red, community=0, file="CreateContextFacts.cs"];
m3_150 [label="Exit HangFire.Tests.JobClientSteps.ThenNoExceptionWereThrown()", span="248-248", cluster="HangFire.Tests.JobClientSteps.ThenNoExceptionWereThrown()", file="CreateContextFacts.cs"];
m3_96 [label="Entry Unk.ContainsFollowingItems", span="", cluster="Unk.ContainsFollowingItems", file="CreateContextFacts.cs"];
m3_36 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="CreateContextFacts.cs"];
m3_38 [label="Entry Unk.CreateJob", span="", cluster="Unk.CreateJob", file="CreateContextFacts.cs"];
m3_61 [label="Entry HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyId()", span="107-107", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyId()", file="CreateContextFacts.cs"];
m3_62 [label="_client.CreateJob(null, typeof(TestJob), new Mock<JobState>(''1'').Object, null)", span="111-111", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyId()", file="CreateContextFacts.cs"];
m3_63 [label=Exception, span="113-113", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyId()", file="CreateContextFacts.cs"];
m3_64 [label="_exception = ex", span="115-115", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyId()", file="CreateContextFacts.cs"];
m3_65 [label="Exit HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyId()", span="107-107", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyId()", file="CreateContextFacts.cs"];
m3_4 [label="Entry HangFire.Client.JobCreator.JobCreator(System.Collections.Generic.IEnumerable<HangFire.Filters.IClientFilter>, System.Collections.Generic.IEnumerable<HangFire.Filters.IClientExceptionFilter>)", span="27-27", cluster="HangFire.Client.JobCreator.JobCreator(System.Collections.Generic.IEnumerable<HangFire.Filters.IClientFilter>, System.Collections.Generic.IEnumerable<HangFire.Filters.IClientExceptionFilter>)", file="CreateContextFacts.cs"];
m3_85 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="CreateContextFacts.cs"];
m3_152 [label="HangFire.Tests.JobClientSteps", span="", file="CreateContextFacts.cs"];
m4_14 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", file="CreatedContext.cs"];
m4_15 [label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Enqueued state''))", span="48-49", cluster="HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", file="CreatedContext.cs"];
m4_16 [label="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(null)", span="51-51", cluster="HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", file="CreatedContext.cs"];
m4_17 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", file="CreatedContext.cs"];
m4_57 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", span="129-129", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", file="CreatedContext.cs"];
m4_58 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After applying, it should enqueue the job to the given queue'', ((string[])(null)))", span="131-131", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", file="CreatedContext.cs"];
m4_59 [label="this.ScenarioSetup(scenarioInfo)", span="133-133", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", file="CreatedContext.cs"];
m4_60 [label="this.FeatureBackground()", span="135-135", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", file="CreatedContext.cs"];
m4_61 [label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="137-137", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", file="CreatedContext.cs"];
m4_62 [label="testRunner.Then(''the \'test\' queue should contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="139-139", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", file="CreatedContext.cs"];
m4_63 [label="testRunner.And(''the \'test\' queue should be added to the queues set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="141-141", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", file="CreatedContext.cs"];
m4_64 [label="this.ScenarioCleanup()", span="143-143", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", file="CreatedContext.cs"];
m4_65 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", span="129-129", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", file="CreatedContext.cs"];
m4_25 [label="Entry Unk.OnScenarioStart", span="", cluster="Unk.OnScenarioStart", file="CreatedContext.cs"];
m4_29 [label="Entry Unk.CollectScenarioErrors", span="", cluster="Unk.CollectScenarioErrors", file="CreatedContext.cs"];
m4_21 [label="Entry Unk.OnScenarioEnd", span="", cluster="Unk.OnScenarioEnd", file="CreatedContext.cs"];
m4_26 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioCleanup()", file="CreatedContext.cs"];
m4_27 [label="testRunner.CollectScenarioErrors()", span="68-68", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioCleanup()", file="CreatedContext.cs"];
m4_28 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioCleanup()", file="CreatedContext.cs"];
m4_9 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", file="CreatedContext.cs"];
m4_10 [label="testRunner.OnFeatureEnd()", span="41-41", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", file="CreatedContext.cs"];
m4_11 [label="testRunner = null", span="42-42", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", file="CreatedContext.cs"];
m4_12 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", file="CreatedContext.cs"];
m4_35 [label="Entry Unk.And", span="", cluster="Unk.And", file="CreatedContext.cs"];
m4_67 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", span="150-150", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", file="CreatedContext.cs"];
m4_68 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying, it should not remove the job from the queue'', ((string[])(null)))", span="152-152", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", file="CreatedContext.cs"];
m4_69 [label="this.ScenarioSetup(scenarioInfo)", span="154-154", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", file="CreatedContext.cs"];
m4_70 [label="this.FeatureBackground()", span="156-156", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", file="CreatedContext.cs"];
m4_71 [label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="158-158", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", file="CreatedContext.cs"];
m4_72 [label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="160-160", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", file="CreatedContext.cs"];
m4_73 [label="testRunner.Then(''the \'test\' queue should contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="162-162", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", file="CreatedContext.cs"];
m4_74 [label="this.ScenarioCleanup()", span="164-164", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", file="CreatedContext.cs"];
m4_75 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", span="150-150", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", file="CreatedContext.cs"];
m4_5 [label="Entry Unk.GetTestRunner", span="", cluster="Unk.GetTestRunner", file="CreatedContext.cs"];
m4_13 [label="Hangfire.Client.CreatedContext", span="", cluster="Unk.OnFeatureEnd", file="CreatedContext.cs"];
m4_7 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="CreatedContext.cs"];
m4_66 [label="Entry Unk.When", span="", cluster="Unk.When", file="CreatedContext.cs"];
m4_56 [label="Entry Unk.AddRow", span="", cluster="Unk.AddRow", file="CreatedContext.cs"];
m4_18 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioTearDown()", file="CreatedContext.cs"];
m4_19 [label="testRunner.OnScenarioEnd()", span="58-58", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioTearDown()", file="CreatedContext.cs"];
m4_20 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioTearDown()", file="CreatedContext.cs"];
m4_22 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="CreatedContext.cs"];
m4_23 [label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="CreatedContext.cs"];
m4_24 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="CreatedContext.cs"];
m4_0 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="CreatedContext.cs"];
m4_1 [label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=0, file="CreatedContext.cs"];
m4_2 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Enqueued state'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="CreatedContext.cs"];
m4_3 [label="testRunner.OnFeatureStart(featureInfo)", span="35-35", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="CreatedContext.cs"];
m4_4 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="CreatedContext.cs"];
m4_43 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="CreatedContext.cs"];
m4_45 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.ItShouldHaveTheCorrectPropertiesSet()", span="102-102", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="CreatedContext.cs"];
m4_46 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It should have the correct properties set'', ((string[])(null)))", span="104-104", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="CreatedContext.cs"];
m4_47 [label="this.ScenarioSetup(scenarioInfo)", span="106-106", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="CreatedContext.cs"];
m4_48 [label="this.FeatureBackground()", span="108-108", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="CreatedContext.cs"];
m4_49 [label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="110-112", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="CreatedContext.cs"];
m4_50 [label="table1.AddRow(new string[] {\r\n                        ''EnqueuedAt'',\r\n                        ''<UtcNow timestamp>''})", span="113-115", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="CreatedContext.cs"];
m4_51 [label="table1.AddRow(new string[] {\r\n                        ''Queue'',\r\n                        ''test''})", span="116-118", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="CreatedContext.cs"];
m4_52 [label="testRunner.Then(''properties table should contain the following items:'', ((string)(null)), table1, ''Then '')", span="120-120", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="CreatedContext.cs"];
m4_53 [label="this.ScenarioCleanup()", span="122-122", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="CreatedContext.cs"];
m4_54 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.ItShouldHaveTheCorrectPropertiesSet()", span="102-102", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="CreatedContext.cs"];
m4_44 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="CreatedContext.cs"];
m4_34 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="CreatedContext.cs"];
m4_6 [label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span="", cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="CreatedContext.cs"];
m4_55 [label="Entry TechTalk.SpecFlow.Table.cstr", span="", cluster="TechTalk.SpecFlow.Table.cstr", file="CreatedContext.cs"];
m4_30 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.FeatureBackground()", span="71-71", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureBackground()", file="CreatedContext.cs"];
m4_31 [label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="75-75", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureBackground()", file="CreatedContext.cs"];
m4_32 [label="testRunner.And(''the Enqueued state with the \'test\' value for the \'queue\' argument'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="77-77", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureBackground()", file="CreatedContext.cs"];
m4_33 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.FeatureBackground()", span="71-71", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureBackground()", file="CreatedContext.cs"];
m4_36 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.StateNameShouldBeEnqueued()", span="85-85", cluster="HangFire.Tests.States.EnqueuedStateFeature.StateNameShouldBeEnqueued()", file="CreatedContext.cs"];
m4_37 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State name should be \'Enqueued\''', ((string[])(null)))", span="87-87", cluster="HangFire.Tests.States.EnqueuedStateFeature.StateNameShouldBeEnqueued()", file="CreatedContext.cs"];
m4_38 [label="this.ScenarioSetup(scenarioInfo)", span="89-89", cluster="HangFire.Tests.States.EnqueuedStateFeature.StateNameShouldBeEnqueued()", file="CreatedContext.cs"];
m4_39 [label="this.FeatureBackground()", span="91-91", cluster="HangFire.Tests.States.EnqueuedStateFeature.StateNameShouldBeEnqueued()", file="CreatedContext.cs"];
m4_40 [label="testRunner.Then(''the state name should be equal to \'Enqueued\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="93-93", cluster="HangFire.Tests.States.EnqueuedStateFeature.StateNameShouldBeEnqueued()", file="CreatedContext.cs"];
m4_41 [label="this.ScenarioCleanup()", span="95-95", cluster="HangFire.Tests.States.EnqueuedStateFeature.StateNameShouldBeEnqueued()", file="CreatedContext.cs"];
m4_42 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.StateNameShouldBeEnqueued()", span="85-85", cluster="HangFire.Tests.States.EnqueuedStateFeature.StateNameShouldBeEnqueued()", file="CreatedContext.cs"];
m4_8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", file="CreatedContext.cs"];
m4_76 [label="HangFire.Tests.States.EnqueuedStateFeature", span="", file="CreatedContext.cs"];
m5_26 [label="Entry Hangfire.Core.Tests.Client.CreatingContextFacts.TestMethod()", span="34-34", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.TestMethod()", file="CreatingContextFacts.cs"];
m5_27 [label="Exit Hangfire.Core.Tests.Client.CreatingContextFacts.TestMethod()", span="34-34", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.TestMethod()", file="CreatingContextFacts.cs"];
m5_0 [label="Entry Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_ThrowsAnException_WhenContextIsNull()", span="13-13", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="CreatingContextFacts.cs"];
m5_1 [label="Assert.Throws<NullReferenceException>(\r\n                () => new CreatingContext(null))", span="15-16", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="CreatingContextFacts.cs"];
m5_2 [label="Exit Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_ThrowsAnException_WhenContextIsNull()", span="13-13", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="CreatingContextFacts.cs"];
m5_19 [label="Entry Mock<IState>.cstr", span="", cluster="Mock<IState>.cstr", file="CreatingContextFacts.cs"];
m5_20 [label="Entry Mock<IStateMachineFactory>.cstr", span="", cluster="Mock<IStateMachineFactory>.cstr", file="CreatingContextFacts.cs"];
m5_22 [label="Entry Unk.False", span="", cluster="Unk.False", file="CreatingContextFacts.cs"];
m5_7 [label="Entry Hangfire.Client.CreatingContext.CreatingContext(Hangfire.Client.CreateContext)", span="24-24", cluster="Hangfire.Client.CreatingContext.CreatingContext(Hangfire.Client.CreateContext)", file="CreatingContextFacts.cs"];
m5_17 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="CreatingContextFacts.cs"];
m5_23 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="CreatingContextFacts.cs"];
m5_4 [label="Entry lambda expression", span="16-16", cluster="lambda expression", file="CreatingContextFacts.cs"];
m5_5 [label="new CreatingContext(null)", span="16-16", cluster="lambda expression", file="CreatingContextFacts.cs"];
m5_6 [label="Exit lambda expression", span="16-16", cluster="lambda expression", file="CreatingContextFacts.cs"];
m5_24 [label="TestMethod()", span="23-23", cluster="lambda expression", file="CreatingContextFacts.cs"];
m5_25 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="CreatingContextFacts.cs"];
m5_21 [label="Entry CreateContext.cstr", span="", cluster="CreateContext.cstr", file="CreatingContextFacts.cs"];
m5_8 [label="Entry Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", span="20-20", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", file="CreatingContextFacts.cs"];
m5_9 [label="var connection = new Mock<IStorageConnection>()", span="22-22", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", file="CreatingContextFacts.cs"];
m5_10 [label="var job = Job.FromExpression(() => TestMethod())", span="23-23", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", file="CreatingContextFacts.cs"];
m5_13 [label="var createContext = new CreateContext(\r\n                connection.Object, stateMachineFactory.Object, job, state.Object)", span="27-28", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", color=red, community=0, file="CreatingContextFacts.cs"];
m5_11 [label="var state = new Mock<IState>()", span="24-24", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", file="CreatingContextFacts.cs"];
m5_12 [label="var stateMachineFactory = new Mock<IStateMachineFactory>()", span="25-25", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", color=red, community=0, file="CreatingContextFacts.cs"];
m5_14 [label="var context = new CreatingContext(createContext)", span="29-29", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", file="CreatingContextFacts.cs"];
m5_15 [label="Assert.False(context.Canceled)", span="31-31", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", file="CreatingContextFacts.cs"];
m5_16 [label="Exit Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", span="20-20", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", file="CreatingContextFacts.cs"];
m5_18 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="148-148", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="CreatingContextFacts.cs"];
m6_10 [label="return mvcFilter.AllowMultiple;", span="61-61", cluster="HangFire.Common.Filters.JobFilterProviderCollection.AllowMultiple(object)", file="DefaultJobCreationProcess.cs"];
m6_11 [label="Exit HangFire.Common.Filters.JobFilterProviderCollection.AllowMultiple(object)", span="53-53", cluster="HangFire.Common.Filters.JobFilterProviderCollection.AllowMultiple(object)", file="DefaultJobCreationProcess.cs"];
m6_22 [label="Entry HangFire.Common.Filters.JobFilterProviderCollection.RemoveDuplicates(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", span="84-84", cluster="HangFire.Common.Filters.JobFilterProviderCollection.RemoveDuplicates(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", file="DefaultJobCreationProcess.cs"];
m6_23 [label="Entry lambda expression", span="77-77", cluster="lambda expression", file="DefaultJobCreationProcess.cs"];
m6_21 [label="Exit HangFire.Storage.IStorageConnection.RemoveServer(string)", span="42-42", cluster="HangFire.Storage.IStorageConnection.RemoveServer(string)", file="DefaultJobCreationProcess.cs"];
m6_12 [label="Entry HangFire.Storage.IStorageConnection.AcquireJobLock(string)", span="36-36", cluster="HangFire.Storage.IStorageConnection.AcquireJobLock(string)", file="DefaultJobCreationProcess.cs"];
m6_15 [label="Exit HangFire.Storage.IStorageConnection.GetJobData(string)", span="37-37", cluster="HangFire.Storage.IStorageConnection.GetJobData(string)", color=green, community=0, file="DefaultJobCreationProcess.cs"];
m6_13 [label="Exit HangFire.Storage.IStorageConnection.AcquireJobLock(string)", span="36-36", cluster="HangFire.Storage.IStorageConnection.AcquireJobLock(string)", file="DefaultJobCreationProcess.cs"];
m6_16 [label="Entry HangFire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="39-39", cluster="HangFire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="DefaultJobCreationProcess.cs"];
m6_14 [label="Entry HangFire.Storage.IStorageConnection.GetJobData(string)", span="37-37", cluster="HangFire.Storage.IStorageConnection.GetJobData(string)", file="DefaultJobCreationProcess.cs"];
m6_17 [label="Exit HangFire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="39-39", cluster="HangFire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="DefaultJobCreationProcess.cs"];
m6_39 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="DefaultJobCreationProcess.cs"];
m6_26 [label="Entry HangFire.Common.Filters.IJobFilterProvider.GetFilters(HangFire.Common.JobMethod)", span="34-34", cluster="HangFire.Common.Filters.IJobFilterProvider.GetFilters(HangFire.Common.JobMethod)", file="DefaultJobCreationProcess.cs"];
m6_32 [label="var filterInstance = filter.Instance", span="91-91", cluster="HangFire.Common.Filters.JobFilterProviderCollection.RemoveDuplicates(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", color=green, community=0, file="DefaultJobCreationProcess.cs"];
m6_31 [label=filters, span="89-89", cluster="HangFire.Common.Filters.JobFilterProviderCollection.RemoveDuplicates(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", file="DefaultJobCreationProcess.cs"];
m6_33 [label="var filterInstanceType = filterInstance.GetType()", span="92-92", cluster="HangFire.Common.Filters.JobFilterProviderCollection.RemoveDuplicates(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", file="DefaultJobCreationProcess.cs"];
m6_34 [label="!visitedTypes.Contains(filterInstanceType) || AllowMultiple(filterInstance)", span="94-94", cluster="HangFire.Common.Filters.JobFilterProviderCollection.RemoveDuplicates(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", file="DefaultJobCreationProcess.cs"];
m6_35 [label="yield return filter;", span="96-96", cluster="HangFire.Common.Filters.JobFilterProviderCollection.RemoveDuplicates(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", file="DefaultJobCreationProcess.cs"];
m6_30 [label="var visitedTypes = new HashSet<Type>()", span="87-87", cluster="HangFire.Common.Filters.JobFilterProviderCollection.RemoveDuplicates(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", file="DefaultJobCreationProcess.cs"];
m6_36 [label="visitedTypes.Add(filterInstanceType)", span="97-97", cluster="HangFire.Common.Filters.JobFilterProviderCollection.RemoveDuplicates(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", file="DefaultJobCreationProcess.cs"];
m6_37 [label="Exit HangFire.Common.Filters.JobFilterProviderCollection.RemoveDuplicates(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", span="84-84", cluster="HangFire.Common.Filters.JobFilterProviderCollection.RemoveDuplicates(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", file="DefaultJobCreationProcess.cs"];
m6_2 [label="Entry HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="28-28", cluster="HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DefaultJobCreationProcess.cs"];
m6_3 [label="Exit HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="28-28", cluster="HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DefaultJobCreationProcess.cs"];
m6_6 [label="Entry HangFire.Common.Filters.JobFilterProviderCollection.AllowMultiple(object)", span="53-53", cluster="HangFire.Common.Filters.JobFilterProviderCollection.AllowMultiple(object)", file="DefaultJobCreationProcess.cs"];
m6_7 [label="var mvcFilter = filterInstance as IJobFilter", span="55-55", cluster="HangFire.Common.Filters.JobFilterProviderCollection.AllowMultiple(object)", file="DefaultJobCreationProcess.cs", color=green, community=0];
m6_0 [label="Entry HangFire.Storage.IStorageConnection.CreateWriteTransaction()", span="26-26", cluster="HangFire.Storage.IStorageConnection.CreateWriteTransaction()", file="DefaultJobCreationProcess.cs"];
m6_1 [label="Exit HangFire.Storage.IStorageConnection.CreateWriteTransaction()", span="26-26", cluster="HangFire.Storage.IStorageConnection.CreateWriteTransaction()", file="DefaultJobCreationProcess.cs"];
m6_8 [label="Entry HangFire.Storage.IStorageConnection.SetJobParameter(string, string, string)", span="33-33", cluster="HangFire.Storage.IStorageConnection.SetJobParameter(string, string, string)", file="DefaultJobCreationProcess.cs"];
m6_9 [label="Exit HangFire.Storage.IStorageConnection.SetJobParameter(string, string, string)", span="33-33", cluster="HangFire.Storage.IStorageConnection.SetJobParameter(string, string, string)", file="DefaultJobCreationProcess.cs"];
m6_18 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="DefaultJobCreationProcess.cs"];
m6_19 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", file="DefaultJobCreationProcess.cs"];
m6_41 [label="Entry System.Collections.Generic.HashSet<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.HashSet<T>.Add(T)", file="DefaultJobCreationProcess.cs"];
m6_27 [label="Entry lambda expression", span="78-78", cluster="lambda expression", file="DefaultJobCreationProcess.cs"];
m6_28 [label=filter, span="78-78", cluster="lambda expression", color=green, community=0, file="DefaultJobCreationProcess.cs"];
m6_29 [label="Exit lambda expression", span="78-78", cluster="lambda expression", file="DefaultJobCreationProcess.cs"];
m6_24 [label="Entry HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="44-44", cluster="HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DefaultJobCreationProcess.cs"];
m6_25 [label="Exit HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="44-44", cluster="HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DefaultJobCreationProcess.cs"];
m6_20 [label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)", file="DefaultJobCreationProcess.cs"];
m6_4 [label="Entry HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="30-30", cluster="HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="DefaultJobCreationProcess.cs"];
m6_5 [label="Exit HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="30-30", cluster="HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="DefaultJobCreationProcess.cs"];
m6_40 [label="Entry System.Collections.Generic.HashSet<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.HashSet<T>.Contains(T)", file="DefaultJobCreationProcess.cs"];
m6_38 [label="Entry System.Collections.Generic.HashSet<T>.HashSet()", span="0-0", cluster="System.Collections.Generic.HashSet<T>.HashSet()", file="DefaultJobCreationProcess.cs"];
m6_59 [label="HangFire.Common.Filters.JobFilterProviderCollection", span="", file="DefaultJobCreationProcess.cs"];
m6_60 [label="HangFire.Common.JobMethod", span="", file="DefaultJobCreationProcess.cs"];
m7_51 [label="Entry HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", span="156-156", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="DefaultJobCreationProcessFacts.cs"];
m7_86 [label="var changedContext = new StateApplyingContext(stateChangingContext)", span="158-158", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="DefaultJobCreationProcessFacts.cs"];
m7_87 [label="return changedContext.ApplyState(_handlers, stateChangedFilters);", span="159-159", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="DefaultJobCreationProcessFacts.cs"];
m7_88 [label="Exit HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", span="156-156", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="DefaultJobCreationProcessFacts.cs"];
m7_14 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="DefaultJobCreationProcessFacts.cs"];
m7_81 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="DefaultJobCreationProcessFacts.cs"];
m7_117 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="DefaultJobCreationProcessFacts.cs"];
m7_83 [label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="28-28", cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="DefaultJobCreationProcessFacts.cs"];
m7_46 [label="Entry HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="13-13", cluster="HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DefaultJobCreationProcessFacts.cs"];
m7_84 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="DefaultJobCreationProcessFacts.cs"];
m7_78 [label="Entry string.IsNullOrWhiteSpace(string)", span="0-0", cluster="string.IsNullOrWhiteSpace(string)", file="DefaultJobCreationProcessFacts.cs"];
m7_82 [label="Entry HangFire.Common.JobMethod.Deserialize(HangFire.Storage.InvocationData)", span="91-91", cluster="HangFire.Common.JobMethod.Deserialize(HangFire.Storage.InvocationData)", file="DefaultJobCreationProcessFacts.cs"];
m7_102 [label="Entry HangFire.Storage.IWriteOnlyTransaction.Commit()", span="39-39", cluster="HangFire.Storage.IWriteOnlyTransaction.Commit()", file="DefaultJobCreationProcessFacts.cs"];
m7_17 [label="Entry HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", span="186-186", cluster="HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", file="DefaultJobCreationProcessFacts.cs"];
m7_107 [label="handler == null", span="188-188", cluster="HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", file="DefaultJobCreationProcessFacts.cs"];
m7_109 [label="String.IsNullOrEmpty(handler.StateName)", span="189-189", cluster="HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", file="DefaultJobCreationProcessFacts.cs"];
m7_111 [label="!_handlers.ContainsKey(handler.StateName)", span="191-191", cluster="HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", file="DefaultJobCreationProcessFacts.cs"];
m7_112 [label="_handlers.Add(handler.StateName, new List<JobStateHandler>())", span="193-193", cluster="HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", file="DefaultJobCreationProcessFacts.cs"];
m7_113 [label="_handlers[handler.StateName].Add(handler)", span="196-196", cluster="HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", file="DefaultJobCreationProcessFacts.cs"];
m7_108 [label="throw new ArgumentNullException(''handler'');", span="188-188", cluster="HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", file="DefaultJobCreationProcessFacts.cs"];
m7_110 [label="throw new ArgumentNullException(''stateName'');", span="189-189", cluster="HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", file="DefaultJobCreationProcessFacts.cs"];
m7_114 [label="Exit HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", span="186-186", cluster="HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", file="DefaultJobCreationProcessFacts.cs"];
m7_0 [label="Entry HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection)", span="36-36", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection)", file="DefaultJobCreationProcessFacts.cs"];
m7_1 [label="Exit HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection)", span="36-36", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection)", file="DefaultJobCreationProcessFacts.cs"];
m7_49 [label="Entry HangFire.Common.States.StateChangingContext.StateChangingContext(HangFire.Common.States.StateContext, HangFire.Common.States.JobState, string, HangFire.Storage.IStorageConnection)", span="25-25", cluster="HangFire.Common.States.StateChangingContext.StateChangingContext(HangFire.Common.States.StateContext, HangFire.Common.States.JobState, string, HangFire.Storage.IStorageConnection)", file="DefaultJobCreationProcessFacts.cs"];
m7_106 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="DefaultJobCreationProcessFacts.cs"];
m7_100 [label="Entry HangFire.Storage.IStorageConnection.CreateWriteTransaction()", span="10-10", cluster="HangFire.Storage.IStorageConnection.CreateWriteTransaction()", file="DefaultJobCreationProcessFacts.cs"];
m7_25 [label="Entry HangFire.Common.Filters.JobFilter.JobFilter(object, HangFire.Common.Filters.JobFilterScope, int?)", span="38-38", cluster="HangFire.Common.Filters.JobFilter.JobFilter(object, HangFire.Common.Filters.JobFilterScope, int?)", file="DefaultJobCreationProcessFacts.cs"];
m7_26 [label="Entry HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", span="63-63", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="DefaultJobCreationProcessFacts.cs"];
m7_27 [label="method == null", span="69-69", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", color=red, community=0, file="DefaultJobCreationProcessFacts.cs"];
m7_29 [label="parameters == null", span="70-70", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="DefaultJobCreationProcessFacts.cs"];
m7_31 [label="state == null", span="71-71", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="DefaultJobCreationProcessFacts.cs"];
m7_33 [label="var invocationData = new InvocationData\r\n            {\r\n                Type = method.Type.AssemblyQualifiedName,\r\n                Method = method.Method.Name,\r\n                ParameterTypes = JobHelper.ToJson(method.Method.GetParameters().Select(x => x.ParameterType)),\r\n            }", span="73-78", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", color=red, community=0, file="DefaultJobCreationProcessFacts.cs"];
m7_34 [label="var jobId = _connection.CreateExpiredJob(\r\n                invocationData, \r\n                arguments,\r\n                parameters,\r\n                TimeSpan.FromHours(1))", span="80-84", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", color=red, community=0, file="DefaultJobCreationProcessFacts.cs"];
m7_35 [label="var filterInfo = GetFilters(method)", span="86-86", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="DefaultJobCreationProcessFacts.cs"];
m7_36 [label="var context = new StateContext(jobId, method)", span="87-87", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="DefaultJobCreationProcessFacts.cs"];
m7_37 [label="var changingContext = new StateChangingContext(context, state, ''Created'', _connection)", span="88-88", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="DefaultJobCreationProcessFacts.cs"];
m7_28 [label="throw new ArgumentNullException(''method'');", span="69-69", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", color=red, community=0, file="DefaultJobCreationProcessFacts.cs"];
m7_30 [label="throw new ArgumentNullException(''parameters'');", span="70-70", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="DefaultJobCreationProcessFacts.cs"];
m7_32 [label="throw new ArgumentNullException(''state'');", span="71-71", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="DefaultJobCreationProcessFacts.cs"];
m7_40 [label="return jobId;", span="95-95", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="DefaultJobCreationProcessFacts.cs"];
m7_38 [label="InvokeStateChangingFilters(changingContext, filterInfo.StateChangingFilters)", span="90-90", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="DefaultJobCreationProcessFacts.cs"];
m7_39 [label="ApplyState(changingContext, filterInfo.StateChangedFilters)", span="93-93", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="DefaultJobCreationProcessFacts.cs"];
m7_41 [label="Exit HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", span="63-63", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="DefaultJobCreationProcessFacts.cs"];
m7_15 [label="Entry HangFire.JobStorage.GetStateHandlers()", span="52-52", cluster="HangFire.JobStorage.GetStateHandlers()", file="DefaultJobCreationProcessFacts.cs"];
m7_105 [label="Entry HangFire.Common.Filters.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", span="119-119", cluster="HangFire.Common.Filters.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", file="DefaultJobCreationProcessFacts.cs"];
m7_90 [label="Entry HangFire.Common.States.StateApplyingContext.ApplyState(System.Collections.Generic.IDictionary<string, System.Collections.Generic.List<HangFire.Common.States.JobStateHandler>>, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", span="42-42", cluster="HangFire.Common.States.StateApplyingContext.ApplyState(System.Collections.Generic.IDictionary<string, System.Collections.Generic.List<HangFire.Common.States.JobStateHandler>>, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="DefaultJobCreationProcessFacts.cs"];
m7_89 [label="Entry HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateChangingContext)", span="28-28", cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateChangingContext)", file="DefaultJobCreationProcessFacts.cs"];
m7_115 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="DefaultJobCreationProcessFacts.cs"];
m7_79 [label="Entry HangFire.Storage.IStorageConnection.AcquireJobLock(string)", span="22-22", cluster="HangFire.Storage.IStorageConnection.AcquireJobLock(string)", file="DefaultJobCreationProcessFacts.cs"];
m7_101 [label="Entry HangFire.Storage.IWriteOnlyTransaction.AppendJobHistory(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", span="13-13", cluster="HangFire.Storage.IWriteOnlyTransaction.AppendJobHistory(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="DefaultJobCreationProcessFacts.cs"];
m7_116 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="DefaultJobCreationProcessFacts.cs"];
m7_44 [label="Entry Unk.ToJson", span="", cluster="Unk.ToJson", file="DefaultJobCreationProcessFacts.cs"];
m7_52 [label="Entry lambda expression", span="77-77", cluster="lambda expression", file="DefaultJobCreationProcessFacts.cs"];
m7_19 [label="filters.Select(f => new JobFilter(f, JobFilterScope.Type, null))", span="59-59", cluster="lambda expression", file="DefaultJobCreationProcessFacts.cs"];
m7_18 [label="Entry lambda expression", span="59-59", cluster="lambda expression", file="DefaultJobCreationProcessFacts.cs"];
m7_20 [label="Exit lambda expression", span="59-59", cluster="lambda expression", file="DefaultJobCreationProcessFacts.cs"];
m7_22 [label="Entry lambda expression", span="59-59", cluster="lambda expression", file="DefaultJobCreationProcessFacts.cs"];
m7_23 [label="new JobFilter(f, JobFilterScope.Type, null)", span="59-59", cluster="lambda expression", file="DefaultJobCreationProcessFacts.cs"];
m7_24 [label="Exit lambda expression", span="59-59", cluster="lambda expression", file="DefaultJobCreationProcessFacts.cs"];
m7_53 [label="x.ParameterType", span="77-77", cluster="lambda expression", file="DefaultJobCreationProcessFacts.cs"];
m7_54 [label="Exit lambda expression", span="77-77", cluster="lambda expression", file="DefaultJobCreationProcessFacts.cs"];
m7_21 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="DefaultJobCreationProcessFacts.cs"];
m7_50 [label="Entry HangFire.States.StateMachine.InvokeStateChangingFilters(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangingFilter>)", span="162-162", cluster="HangFire.States.StateMachine.InvokeStateChangingFilters(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangingFilter>)", file="DefaultJobCreationProcessFacts.cs"];
m7_91 [label=filters, span="165-165", cluster="HangFire.States.StateMachine.InvokeStateChangingFilters(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangingFilter>)", file="DefaultJobCreationProcessFacts.cs"];
m7_92 [label="var oldState = context.CandidateState", span="167-167", cluster="HangFire.States.StateMachine.InvokeStateChangingFilters(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangingFilter>)", file="DefaultJobCreationProcessFacts.cs"];
m7_93 [label="filter.OnStateChanging(context)", span="168-168", cluster="HangFire.States.StateMachine.InvokeStateChangingFilters(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangingFilter>)", file="DefaultJobCreationProcessFacts.cs"];
m7_94 [label="oldState != context.CandidateState", span="170-170", cluster="HangFire.States.StateMachine.InvokeStateChangingFilters(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangingFilter>)", file="DefaultJobCreationProcessFacts.cs"];
m7_96 [label="transaction.AppendJobHistory(context.JobId, oldState, context.JobMethod)", span="174-174", cluster="HangFire.States.StateMachine.InvokeStateChangingFilters(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangingFilter>)", file="DefaultJobCreationProcessFacts.cs"];
m7_95 [label="var transaction = _connection.CreateWriteTransaction()", span="172-172", cluster="HangFire.States.StateMachine.InvokeStateChangingFilters(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangingFilter>)", color=red, community=0, file="DefaultJobCreationProcessFacts.cs"];
m7_97 [label="transaction.Commit()", span="175-175", cluster="HangFire.States.StateMachine.InvokeStateChangingFilters(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangingFilter>)", file="DefaultJobCreationProcessFacts.cs"];
m7_98 [label="Exit HangFire.States.StateMachine.InvokeStateChangingFilters(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangingFilter>)", span="162-162", cluster="HangFire.States.StateMachine.InvokeStateChangingFilters(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangingFilter>)", file="DefaultJobCreationProcessFacts.cs"];
m7_55 [label="Entry HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", span="98-98", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="DefaultJobCreationProcessFacts.cs"];
m7_56 [label="String.IsNullOrWhiteSpace(jobId)", span="101-101", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", color=red, community=0, file="DefaultJobCreationProcessFacts.cs"];
m7_58 [label="state == null", span="102-102", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="DefaultJobCreationProcessFacts.cs"];
m7_60 [label="_connection.AcquireJobLock(jobId)", span="104-104", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="DefaultJobCreationProcessFacts.cs"];
m7_61 [label="var jobData = _connection.GetJobStateAndInvocationData(jobId)", span="106-106", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="DefaultJobCreationProcessFacts.cs"];
m7_64 [label="allowedCurrentStates.Length > 0 && !allowedCurrentStates.Contains(jobData.State)", span="114-114", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="DefaultJobCreationProcessFacts.cs"];
m7_69 [label="state = new FailedState(ex)\r\n                    {\r\n                        Reason = String.Format(\r\n                            ''Could not change the state of the job '{0}' to the '{1}'. See the inner exception for details.'',\r\n                            state.StateName, jobId)\r\n                    }", span="132-137", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", color=red, community=0, file="DefaultJobCreationProcessFacts.cs"];
m7_70 [label="var context = new StateContext(jobId, jobMethod)", span="140-140", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="DefaultJobCreationProcessFacts.cs"];
m7_57 [label="throw new ArgumentNullException(''jobId'');", span="101-101", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", color=red, community=0, file="DefaultJobCreationProcessFacts.cs"];
m7_59 [label="throw new ArgumentNullException(''state'');", span="102-102", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="DefaultJobCreationProcessFacts.cs"];
m7_62 [label="jobData == null", span="108-108", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="DefaultJobCreationProcessFacts.cs"];
m7_67 [label="jobMethod = JobMethod.Deserialize(jobData.InvocationData)", span="123-123", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="DefaultJobCreationProcessFacts.cs"];
m7_71 [label="var stateChangingContext = \r\n                    new StateChangingContext(context, state, jobData.State, _connection)", span="141-142", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="DefaultJobCreationProcessFacts.cs"];
m7_63 [label="return false;", span="111-111", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="DefaultJobCreationProcessFacts.cs"];
m7_65 [label="return false;", span="116-116", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", color=red, community=0, file="DefaultJobCreationProcessFacts.cs"];
m7_66 [label="JobMethod jobMethod = null", span="119-119", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="DefaultJobCreationProcessFacts.cs"];
m7_68 [label=JobLoadException, span="125-125", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", color=red, community=0, file="DefaultJobCreationProcessFacts.cs"];
m7_72 [label="jobMethod == null", span="144-144", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="DefaultJobCreationProcessFacts.cs"];
m7_74 [label="var filterInfo = GetFilters(jobMethod)", span="149-149", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="DefaultJobCreationProcessFacts.cs"];
m7_73 [label="return ApplyState(stateChangingContext, Enumerable.Empty<IStateChangedFilter>());", span="146-146", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="DefaultJobCreationProcessFacts.cs"];
m7_75 [label="InvokeStateChangingFilters(stateChangingContext, filterInfo.StateChangingFilters)", span="150-150", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="DefaultJobCreationProcessFacts.cs"];
m7_76 [label="return ApplyState(stateChangingContext, filterInfo.StateChangedFilters);", span="152-152", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="DefaultJobCreationProcessFacts.cs"];
m7_77 [label="Exit HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", span="98-98", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="DefaultJobCreationProcessFacts.cs"];
m7_99 [label="Entry HangFire.Common.States.IStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", span="30-30", cluster="HangFire.Common.States.IStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="DefaultJobCreationProcessFacts.cs"];
m7_80 [label="Entry HangFire.Storage.IStorageConnection.GetJobStateAndInvocationData(string)", span="23-23", cluster="HangFire.Storage.IStorageConnection.GetJobStateAndInvocationData(string)", file="DefaultJobCreationProcessFacts.cs"];
m7_119 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="DefaultJobCreationProcessFacts.cs"];
m7_47 [label="Entry HangFire.States.StateMachine.GetFilters(HangFire.Common.JobMethod)", span="181-181", cluster="HangFire.States.StateMachine.GetFilters(HangFire.Common.JobMethod)", file="DefaultJobCreationProcessFacts.cs"];
m7_103 [label="return new JobFilterInfo(_getFiltersThunk(method));", span="183-183", cluster="HangFire.States.StateMachine.GetFilters(HangFire.Common.JobMethod)", file="DefaultJobCreationProcessFacts.cs"];
m7_104 [label="Exit HangFire.States.StateMachine.GetFilters(HangFire.Common.JobMethod)", span="181-181", cluster="HangFire.States.StateMachine.GetFilters(HangFire.Common.JobMethod)", file="DefaultJobCreationProcessFacts.cs"];
m7_16 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="DefaultJobCreationProcessFacts.cs"];
m7_43 [label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0", cluster="System.Reflection.MethodBase.GetParameters()", file="DefaultJobCreationProcessFacts.cs"];
m7_118 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="DefaultJobCreationProcessFacts.cs"];
m7_48 [label="Entry HangFire.Common.States.StateContext.StateContext(string, HangFire.Common.JobMethod)", span="27-27", cluster="HangFire.Common.States.StateContext.StateContext(string, HangFire.Common.JobMethod)", file="DefaultJobCreationProcessFacts.cs"];
m7_42 [label="Entry HangFire.Storage.InvocationData.InvocationData()", span="2-2", cluster="HangFire.Storage.InvocationData.InvocationData()", file="DefaultJobCreationProcessFacts.cs"];
m7_85 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="DefaultJobCreationProcessFacts.cs"];
m7_2 [label="Entry HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", span="41-41", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="DefaultJobCreationProcessFacts.cs"];
m7_3 [label="connection == null", span="46-46", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="DefaultJobCreationProcessFacts.cs"];
m7_5 [label="stateHandlers == null", span="47-47", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", color=red, community=0, file="DefaultJobCreationProcessFacts.cs"];
m7_7 [label="_connection = connection", span="49-49", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", color=red, community=0, file="DefaultJobCreationProcessFacts.cs"];
m7_8 [label="var handlers = stateHandlers.Union(connection.Storage.GetStateHandlers())", span="51-51", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="DefaultJobCreationProcessFacts.cs"];
m7_11 [label="filters != null", span="57-57", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", color=red, community=0, file="DefaultJobCreationProcessFacts.cs"];
m7_12 [label="_getFiltersThunk = jd => filters.Select(f => new JobFilter(f, JobFilterScope.Type, null))", span="59-59", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="DefaultJobCreationProcessFacts.cs"];
m7_4 [label="throw new ArgumentNullException(''connection'');", span="46-46", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="DefaultJobCreationProcessFacts.cs"];
m7_6 [label="throw new ArgumentNullException(''stateHandlers'');", span="47-47", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", color=red, community=0, file="DefaultJobCreationProcessFacts.cs"];
m7_9 [label=handlers, span="52-52", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="DefaultJobCreationProcessFacts.cs"];
m7_10 [label="RegisterHandler(handler)", span="54-54", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="DefaultJobCreationProcessFacts.cs"];
m7_13 [label="Exit HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", span="41-41", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="DefaultJobCreationProcessFacts.cs"];
m7_120 [label="HangFire.States.StateMachine", span="", file="DefaultJobCreationProcessFacts.cs"];
m7_121 [label="System.Collections.Generic.IEnumerable<object>", span="", file="DefaultJobCreationProcessFacts.cs"];
m8_0 [label="Entry Hangfire.Client.IJobCreationProcess.Run(Hangfire.Client.CreateContext)", span="28-28", cluster="Hangfire.Client.IJobCreationProcess.Run(Hangfire.Client.CreateContext)", file="IJobCreationProcess.cs"];
m8_1 [label="Exit Hangfire.Client.IJobCreationProcess.Run(Hangfire.Client.CreateContext)", span="28-28", cluster="Hangfire.Client.IJobCreationProcess.Run(Hangfire.Client.CreateContext)", file="IJobCreationProcess.cs"];
m10_0 [label="Entry Hangfire.States.IStateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", span="23-23", cluster="Hangfire.States.IStateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="IStateMachine.cs"];
m10_1 [label="Exit Hangfire.States.IStateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", span="23-23", cluster="Hangfire.States.IStateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="IStateMachine.cs"];
m10_2 [label="Entry Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="24-24", cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="IStateMachine.cs"];
m10_3 [label="Exit Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="24-24", cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="IStateMachine.cs"];
m12_25 [label="return counters.FetchedCount ?? 0;", span="63-63", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="StateMachine.cs"];
m12_88 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="StateMachine.cs"];
m12_351 [label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="40-40", cluster="Hangfire.Storage.InvocationData.Deserialize()", file="StateMachine.cs"];
m12_112 [label="Entry long.Parse(string)", span="0-0", cluster="long.Parse(string)", file="StateMachine.cs"];
m12_366 [label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0", cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="StateMachine.cs"];
m12_89 [label="Entry Hangfire.Storage.Monitoring.ServerDto.ServerDto()", span="21-21", cluster="Hangfire.Storage.Monitoring.ServerDto.ServerDto()", file="StateMachine.cs"];
m12_45 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="490-490", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs"];
m12_352 [label="string jobsSql = @''\r\nselect * from (\r\n  select j.*, s.Reason as StateReason, s.Data as StateData, row_number() over (order by j.Id desc) as row_num\r\n  from HangFire.Job j\r\n  left join HangFire.State s on j.StateId = s.Id\r\n  where j.StateName = @stateName\r\n) as j where j.row_num between @start and @end\r\n''", span="497-504", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs"];
m12_353 [label="var jobs = connection.Query<SqlJob>(\r\n                        jobsSql,\r\n                        new { stateName = stateName, start = @from + 1, end = @from + count })\r\n                        .ToList()", span="506-509", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs"];
m12_354 [label="return DeserializeJobs(jobs, selector);", span="511-511", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs"];
m12_355 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="490-490", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs"];
m12_367 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="StateMachine.cs"];
m12_27 [label="Entry HangFire.Storage.IStorageConnection.GetAllItemsFromSet(string)", span="55-55", cluster="HangFire.Storage.IStorageConnection.GetAllItemsFromSet(string)", file="StateMachine.cs"];
m12_28 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="StateMachine.cs"];
m12_29 [label="Entry HangFire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", span="64-64", cluster="HangFire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", file="StateMachine.cs"];
m12_140 [label="Entry Hangfire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="18-18", cluster="Hangfire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", file="StateMachine.cs"];
m12_100 [label="Entry Hangfire.Storage.Monitoring.FailedJobDto.FailedJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.FailedJobDto.FailedJobDto()", file="StateMachine.cs"];
m12_356 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="514-514", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs"];
m12_357 [label="var result = new List<KeyValuePair<string, TDto>>(jobs.Count)", span="518-518", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs"];
m12_358 [label=jobs, span="520-520", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs"];
m12_361 [label="var dto = selector(job, DeserializeJob(job.InvocationData, job.Arguments), stateData)", span="527-527", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs"];
m12_362 [label="result.Add(new KeyValuePair<string, TDto>(\r\n                    job.Id.ToString(), dto))", span="529-530", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs"];
m12_363 [label="return new JobList<TDto>(result);", span="533-533", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs"];
m12_359 [label="var deserializedData = JobHelper.FromJson<Dictionary<string, string>>(job.StateData)", span="522-522", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs"];
m12_360 [label="var stateData = deserializedData != null\r\n                    ? new Dictionary<string, string>(deserializedData, StringComparer.OrdinalIgnoreCase)\r\n                    : null", span="523-525", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs"];
m12_364 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="514-514", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs"];
m12_14 [label="hash.ContainsKey(''NextExecution'')", span="40-40", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="StateMachine.cs", color=green, community=0];
m12_339 [label="var sqlQuery = _jobListLimit.HasValue\r\n                ? @''select count(j.Id) from (select top (@limit) Id from HangFire.Job where StateName = @state) as j''\r\n                : @''select count(Id) from HangFire.Job where StateName = @state''", span="463-465", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", file="StateMachine.cs"];
m12_340 [label="var count = connection.Query<int>(\r\n                 sqlQuery,\r\n                 new { state = stateName, limit = _jobListLimit })\r\n                 .Single()", span="467-470", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", file="StateMachine.cs"];
m12_341 [label="return count;", span="472-472", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", file="StateMachine.cs"];
m12_342 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", span="461-461", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", file="StateMachine.cs"];
m12_227 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="300-300", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="StateMachine.cs"];
m12_228 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, DeletedState.StateName));", span="302-303", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="StateMachine.cs"];
m12_229 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="300-300", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="StateMachine.cs"];
m12_0 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", span="36-36", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="StateMachine.cs"];
m12_5 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", span="36-36", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="StateMachine.cs"];
m12_11 [label="Entry lambda expression", span="46-47", cluster="lambda expression", file="StateMachine.cs"];
m12_13 [label="Exit lambda expression", span="46-47", cluster="lambda expression", file="StateMachine.cs"];
m12_15 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="50-50", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="StateMachine.cs"];
m12_16 [label="var queueApi = GetQueueApi(queue)", span="52-52", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="StateMachine.cs"];
m12_2 [label="throw new ArgumentNullException(''storage'');", span="38-38", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="StateMachine.cs"];
m12_4 [label="_jobListLimit = jobListLimit", span="41-41", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="StateMachine.cs"];
m12_6 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="StateMachine.cs"];
m12_9 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="44-44", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="StateMachine.cs"];
m12_10 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", span="429-429", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="StateMachine.cs"];
m12_17 [label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="53-53", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="StateMachine.cs"];
m12_21 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="25-25", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", file="StateMachine.cs"];
m12_22 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="58-58", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="StateMachine.cs"];
m12_8 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ScheduledState.StateName));", span="46-47", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="StateMachine.cs"];
m12_12 [label="GetNumberOfJobsByStateName(connection, ScheduledState.StateName)", span="47-47", cluster="lambda expression", file="StateMachine.cs"];
m12_1 [label="storage == null", span="38-38", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="StateMachine.cs"];
m12_3 [label="_storage = storage", span="40-40", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="StateMachine.cs", color=red, community=0];
m12_18 [label="return counters.EnqueuedCount ?? 0;", span="55-55", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="StateMachine.cs"];
m12_7 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="44-44", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="StateMachine.cs"];
m12_23 [label="var queueApi = GetQueueApi(queue)", span="60-60", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="StateMachine.cs"];
m12_20 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="421-421", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="StateMachine.cs"];
m12_19 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="50-50", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="StateMachine.cs"];
m12_24 [label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="61-61", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="StateMachine.cs"];
m12_327 [label="return _storage.UseTransaction(action, IsolationLevel.ReadUncommitted);", span="431-431", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="StateMachine.cs"];
m12_328 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", span="429-429", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="StateMachine.cs"];
m12_239 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", file="StateMachine.cs"];
m12_186 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="246-246", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="StateMachine.cs"];
m12_187 [label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''failed''));", span="248-249", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="StateMachine.cs"];
m12_188 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="246-246", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="StateMachine.cs"];
m12_334 [label="Entry Unk.DeserializeJobs", span="", cluster="Unk.DeserializeJobs", file="StateMachine.cs"];
m12_233 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="306-306", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="StateMachine.cs"];
m12_234 [label="string sql = @''\r\nselect count(Id) from HangFire.Job where StateName = N'Enqueued';\r\nselect count(Id) from HangFire.Job where StateName = N'Failed';\r\nselect count(Id) from HangFire.Job where StateName = N'Processing';\r\nselect count(Id) from HangFire.Job where StateName = N'Scheduled';\r\nselect count(Id) from HangFire.Server;\r\nselect sum(s.[Value]) from (\r\n    select sum([Value]) as [Value] from HangFire.Counter where [Key] = N'stats:succeeded'\r\n    union all\r\n    select [Value] from HangFire.AggregatedCounter where [Key] = N'stats:succeeded'\r\n) as s;\r\nselect sum(s.[Value]) from (\r\n    select sum([Value]) as [Value] from HangFire.Counter where [Key] = N'stats:deleted'\r\n    union all\r\n    select [Value] from HangFire.AggregatedCounter where [Key] = N'stats:deleted'\r\n) as s;\r\nselect count(*) from HangFire.[Set] where [Key] = N'recurring-jobs';\r\n''", span="308-325", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="StateMachine.cs"];
m12_235 [label="var statistics = UseConnection(connection =>\r\n            {\r\n                var stats = new StatisticsDto();\r\n                using (var multi = connection.QueryMultiple(sql))\r\n                {\r\n                    stats.Enqueued = multi.Read<int>().Single();\r\n                    stats.Failed = multi.Read<int>().Single();\r\n                    stats.Processing = multi.Read<int>().Single();\r\n                    stats.Scheduled = multi.Read<int>().Single();\r\n\r\n                    stats.Servers = multi.Read<int>().Single();\r\n\r\n                    stats.Succeeded = multi.Read<long?>().SingleOrDefault() ?? 0;\r\n                    stats.Deleted = multi.Read<long?>().SingleOrDefault() ?? 0;\r\n\r\n                    stats.Recurring = multi.Read<int>().Single();\r\n                }\r\n                return stats;\r\n            })", span="327-345", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="StateMachine.cs"];
m12_236 [label="statistics.Queues = _storage.QueueProviders\r\n                .SelectMany(x => x.GetJobQueueMonitoringApi().GetQueues())\r\n                .Count()", span="347-349", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="StateMachine.cs"];
m12_237 [label="return statistics;", span="351-351", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="StateMachine.cs"];
m12_238 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="306-306", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="StateMachine.cs"];
m12_174 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="24-24", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", file="StateMachine.cs"];
m12_169 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="232-232", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="StateMachine.cs"];
m12_170 [label="var queueApi = GetQueueApi(queue)", span="234-234", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="StateMachine.cs"];
m12_171 [label="var fetchedJobIds = queueApi.GetFetchedJobIds(queue, from, perPage)", span="235-235", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="StateMachine.cs"];
m12_172 [label="return UseConnection(connection => FetchedJobs(connection, fetchedJobIds));", span="237-237", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="StateMachine.cs"];
m12_173 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="232-232", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="StateMachine.cs"];
m12_185 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", span="354-354", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_260 [label="var endDate = DateTime.UtcNow", span="358-358", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_267 [label="var keyMaps = dates.ToDictionary(x => String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH'')), x => x)", span="366-366", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_268 [label="return GetTimelineStats(connection, keyMaps);", span="368-368", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_261 [label="var dates = new List<DateTime>()", span="359-359", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_264 [label="dates.Add(endDate)", span="362-362", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_265 [label="endDate = endDate.AddHours(-1)", span="363-363", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_262 [label="var i = 0", span="360-360", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_263 [label="i < 24", span="360-360", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_266 [label="i++", span="360-360", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_269 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", span="354-354", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_33 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="72-72", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="StateMachine.cs"];
m12_312 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="StateMachine.cs"];
m12_111 [label="Entry Hangfire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="StateMachine.cs"];
m12_158 [label="Entry Unk.EnqueuedJobs", span="", cluster="Unk.EnqueuedJobs", file="StateMachine.cs"];
m12_380 [label="Entry Hangfire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", span="21-21", cluster="Hangfire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", file="StateMachine.cs"];
m12_32 [label="Exit lambda expression", span="68-69", cluster="lambda expression", file="StateMachine.cs"];
m12_259 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", span="22-22", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", file="StateMachine.cs"];
m12_164 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="23-23", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="StateMachine.cs"];
m12_144 [label="Entry Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi()", span="21-21", cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi()", file="StateMachine.cs"];
m12_34 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ProcessingState.StateName));", span="74-75", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="StateMachine.cs"];
m12_50 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="StateMachine.cs"];
m12_368 [label="Entry int.ToString()", span="0-0", cluster="int.ToString()", file="StateMachine.cs"];
m12_329 [label="Entry Unk.UseTransaction", span="", cluster="Unk.UseTransaction", file="StateMachine.cs"];
m12_123 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", span="195-195", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="StateMachine.cs"];
m12_124 [label="var tuples = _storage.QueueProviders\r\n                .Select(x => x.GetJobQueueMonitoringApi())\r\n                .SelectMany(x => x.GetQueues(), (monitoring, queue) => new { Monitoring = monitoring, Queue = queue })\r\n                .OrderBy(x => x.Queue)\r\n                .ToArray()", span="197-201", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="StateMachine.cs"];
m12_125 [label="var result = new List<QueueWithTopEnqueuedJobsDto>(tuples.Length)", span="203-203", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="StateMachine.cs"];
m12_126 [label=tuples, span="205-205", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="StateMachine.cs"];
m12_130 [label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                {\r\n                    Name = tuple.Queue,\r\n                    Length = counters.EnqueuedCount ?? 0,\r\n                    Fetched = counters.FetchedCount,\r\n                    FirstJobs = firstJobs\r\n                })", span="212-218", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="StateMachine.cs"];
m12_131 [label="return result;", span="221-221", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="StateMachine.cs"];
m12_127 [label="var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue, 0, 5)", span="207-207", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="StateMachine.cs"];
m12_128 [label="var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount(tuple.Queue)", span="208-208", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="StateMachine.cs"];
m12_129 [label="var firstJobs = UseConnection(connection => EnqueuedJobs(connection, enqueuedJobIds))", span="210-210", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="StateMachine.cs"];
m12_132 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", span="195-195", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="StateMachine.cs"];
m12_136 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="StateMachine.cs"];
m12_290 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="StateMachine.cs"];
m12_220 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", file="StateMachine.cs"];
m12_350 [label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39", cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="StateMachine.cs"];
m12_113 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="181-181", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="StateMachine.cs"];
m12_114 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }));", span="183-192", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="StateMachine.cs"];
m12_115 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="181-181", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="StateMachine.cs"];
m12_271 [label="Entry Unk.GetTimelineStats", span="", cluster="Unk.GetTimelineStats", file="StateMachine.cs"];
m12_219 [label="Entry Hangfire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", span="21-21", cluster="Hangfire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", file="StateMachine.cs"];
m12_30 [label="Entry lambda expression", span="68-69", cluster="lambda expression", file="StateMachine.cs"];
m12_335 [label="Entry lambda expression", span="451-458", cluster="lambda expression", file="StateMachine.cs"];
m12_31 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="StateMachine.cs"];
m12_36 [label="Entry HangFire.Storage.IStorageConnection.GetStateData(string)", span="45-45", cluster="HangFire.Storage.IStorageConnection.GetStateData(string)", file="StateMachine.cs"];
m12_37 [label="HangFire.Web.Pages.RecurringJobsPage", span="", cluster="lambda expression", file="StateMachine.cs"];
m12_38 [label="Exit lambda expression", span="74-75", cluster="lambda expression", file="StateMachine.cs"];
m12_43 [label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeDateTime(stateData[''StartedAt'']),\r\n                })", span="80-89", cluster="lambda expression", file="StateMachine.cs"];
m12_42 [label="Entry lambda expression", span="80-89", cluster="lambda expression", file="StateMachine.cs"];
m12_44 [label="Exit lambda expression", span="80-89", cluster="lambda expression", file="StateMachine.cs"];
m12_46 [label="Entry lambda expression", span="84-89", cluster="lambda expression", file="StateMachine.cs"];
m12_47 [label="new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeDateTime(stateData[''StartedAt'']),\r\n                }", span="84-89", cluster="lambda expression", file="StateMachine.cs"];
m12_48 [label="Exit lambda expression", span="84-89", cluster="lambda expression", file="StateMachine.cs"];
m12_56 [label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                })", span="94-103", cluster="lambda expression", file="StateMachine.cs"];
m12_55 [label="Entry lambda expression", span="94-103", cluster="lambda expression", file="StateMachine.cs"];
m12_57 [label="Exit lambda expression", span="94-103", cluster="lambda expression", file="StateMachine.cs"];
m12_58 [label="Entry lambda expression", span="98-103", cluster="lambda expression", file="StateMachine.cs"];
m12_59 [label="new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                }", span="98-103", cluster="lambda expression", file="StateMachine.cs"];
m12_60 [label="Exit lambda expression", span="98-103", cluster="lambda expression", file="StateMachine.cs"];
m12_65 [label="Entry lambda expression", span="108-109", cluster="lambda expression", file="StateMachine.cs"];
m12_66 [label="GetTimelineStats(connection, ''succeeded'')", span="109-109", cluster="lambda expression", file="StateMachine.cs"];
m12_67 [label="Exit lambda expression", span="108-109", cluster="lambda expression", file="StateMachine.cs"];
m12_72 [label="Entry lambda expression", span="114-115", cluster="lambda expression", file="StateMachine.cs"];
m12_73 [label="GetTimelineStats(connection, ''failed'')", span="115-115", cluster="lambda expression", file="StateMachine.cs"];
m12_74 [label="Exit lambda expression", span="114-115", cluster="lambda expression", file="StateMachine.cs"];
m12_79 [label="Entry lambda expression", span="120-142", cluster="lambda expression", file="StateMachine.cs"];
m12_80 [label="var servers = connection.Query<Entities.Server>(\r\n                    @''select * from HangFire.Server'')\r\n                    .ToList()", span="122-124", cluster="lambda expression", file="StateMachine.cs"];
m12_81 [label="var result = new List<ServerDto>()", span="126-126", cluster="lambda expression", file="StateMachine.cs"];
m12_82 [label=servers, span="128-128", cluster="lambda expression", file="StateMachine.cs"];
m12_84 [label="result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    })", span="131-138", cluster="lambda expression", file="StateMachine.cs"];
m12_85 [label="return result;", span="141-141", cluster="lambda expression", file="StateMachine.cs"];
m12_83 [label="var data = JobHelper.FromJson<ServerData>(server.Data)", span="130-130", cluster="lambda expression", file="StateMachine.cs"];
m12_86 [label="Exit lambda expression", span="120-142", cluster="lambda expression", file="StateMachine.cs"];
m12_95 [label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                })", span="147-160", cluster="lambda expression", file="StateMachine.cs"];
m12_94 [label="Entry lambda expression", span="147-160", cluster="lambda expression", file="StateMachine.cs"];
m12_96 [label="Exit lambda expression", span="147-160", cluster="lambda expression", file="StateMachine.cs"];
m12_97 [label="Entry lambda expression", span="152-160", cluster="lambda expression", file="StateMachine.cs"];
m12_98 [label="new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }", span="152-160", cluster="lambda expression", file="StateMachine.cs"];
m12_99 [label="Exit lambda expression", span="152-160", cluster="lambda expression", file="StateMachine.cs"];
m12_106 [label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    Result = stateData.ContainsKey(''Result'') ? stateData[''Result''] : null,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                })", span="165-178", cluster="lambda expression", file="StateMachine.cs"];
m12_105 [label="Entry lambda expression", span="165-178", cluster="lambda expression", file="StateMachine.cs"];
m12_107 [label="Exit lambda expression", span="165-178", cluster="lambda expression", file="StateMachine.cs"];
m12_108 [label="Entry lambda expression", span="170-178", cluster="lambda expression", file="StateMachine.cs"];
m12_109 [label="new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    Result = stateData.ContainsKey(''Result'') ? stateData[''Result''] : null,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }", span="170-178", cluster="lambda expression", file="StateMachine.cs"];
m12_110 [label="Exit lambda expression", span="170-178", cluster="lambda expression", file="StateMachine.cs"];
m12_117 [label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                })", span="183-192", cluster="lambda expression", file="StateMachine.cs"];
m12_116 [label="Entry lambda expression", span="183-192", cluster="lambda expression", file="StateMachine.cs"];
m12_118 [label="Exit lambda expression", span="183-192", cluster="lambda expression", file="StateMachine.cs"];
m12_119 [label="Entry lambda expression", span="188-192", cluster="lambda expression", file="StateMachine.cs"];
m12_120 [label="new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }", span="188-192", cluster="lambda expression", file="StateMachine.cs"];
m12_121 [label="Exit lambda expression", span="188-192", cluster="lambda expression", file="StateMachine.cs"];
m12_141 [label="Entry lambda expression", span="198-198", cluster="lambda expression", file="StateMachine.cs"];
m12_145 [label="Entry lambda expression", span="199-199", cluster="lambda expression", file="StateMachine.cs"];
m12_149 [label="Entry lambda expression", span="199-199", cluster="lambda expression", file="StateMachine.cs"];
m12_152 [label="Entry lambda expression", span="200-200", cluster="lambda expression", file="StateMachine.cs"];
m12_156 [label="EnqueuedJobs(connection, enqueuedJobIds)", span="210-210", cluster="lambda expression", file="StateMachine.cs"];
m12_155 [label="Entry lambda expression", span="210-210", cluster="lambda expression", file="StateMachine.cs"];
m12_142 [label="x.GetJobQueueMonitoringApi()", span="198-198", cluster="lambda expression", file="StateMachine.cs"];
m12_143 [label="Exit lambda expression", span="198-198", cluster="lambda expression", file="StateMachine.cs"];
m12_146 [label="x.GetQueues()", span="199-199", cluster="lambda expression", file="StateMachine.cs"];
m12_147 [label="Exit lambda expression", span="199-199", cluster="lambda expression", file="StateMachine.cs"];
m12_150 [label="new { Monitoring = monitoring, Queue = queue }", span="199-199", cluster="lambda expression", file="StateMachine.cs"];
m12_151 [label="Exit lambda expression", span="199-199", cluster="lambda expression", file="StateMachine.cs"];
m12_153 [label="x.Queue", span="200-200", cluster="lambda expression", file="StateMachine.cs"];
m12_154 [label="Exit lambda expression", span="200-200", cluster="lambda expression", file="StateMachine.cs"];
m12_157 [label="Exit lambda expression", span="210-210", cluster="lambda expression", file="StateMachine.cs"];
m12_166 [label="EnqueuedJobs(connection, enqueuedJobIds)", span="229-229", cluster="lambda expression", file="StateMachine.cs"];
m12_165 [label="Entry lambda expression", span="229-229", cluster="lambda expression", file="StateMachine.cs"];
m12_167 [label="Exit lambda expression", span="229-229", cluster="lambda expression", file="StateMachine.cs"];
m12_176 [label="FetchedJobs(connection, fetchedJobIds)", span="237-237", cluster="lambda expression", file="StateMachine.cs"];
m12_175 [label="Entry lambda expression", span="237-237", cluster="lambda expression", file="StateMachine.cs"];
m12_177 [label="Exit lambda expression", span="237-237", cluster="lambda expression", file="StateMachine.cs"];
m12_182 [label="Entry lambda expression", span="242-243", cluster="lambda expression", file="StateMachine.cs"];
m12_183 [label="GetHourlyTimelineStats(connection, ''succeeded'')", span="243-243", cluster="lambda expression", file="StateMachine.cs"];
m12_184 [label="Exit lambda expression", span="242-243", cluster="lambda expression", file="StateMachine.cs"];
m12_189 [label="Entry lambda expression", span="248-249", cluster="lambda expression", file="StateMachine.cs"];
m12_190 [label="GetHourlyTimelineStats(connection, ''failed'')", span="249-249", cluster="lambda expression", file="StateMachine.cs"];
m12_191 [label="Exit lambda expression", span="248-249", cluster="lambda expression", file="StateMachine.cs"];
m12_197 [label="var multi = connection.QueryMultiple(sql, new { id = jobId })", span="262-262", cluster="lambda expression", file="StateMachine.cs"];
m12_195 [label="Entry lambda expression", span="254-291", cluster="lambda expression", file="StateMachine.cs"];
m12_196 [label="string sql = @''\r\nselect * from HangFire.Job where Id = @id\r\nselect * from HangFire.JobParameter where JobId = @id\r\nselect * from HangFire.State where JobId = @id order by Id desc''", span="257-260", cluster="lambda expression", file="StateMachine.cs"];
m12_198 [label="var job = multi.Read<SqlJob>().SingleOrDefault()", span="264-264", cluster="lambda expression", file="StateMachine.cs"];
m12_201 [label="var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value)", span="267-267", cluster="lambda expression", file="StateMachine.cs"];
m12_202 [label="var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new Dictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList()", span="268-280", cluster="lambda expression", file="StateMachine.cs"];
m12_199 [label="job == null", span="265-265", cluster="lambda expression", file="StateMachine.cs"];
m12_203 [label="return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };", span="282-289", cluster="lambda expression", file="StateMachine.cs"];
m12_200 [label="return null;", span="265-265", cluster="lambda expression", file="StateMachine.cs"];
m12_210 [label="Entry lambda expression", span="267-267", cluster="lambda expression", file="StateMachine.cs"];
m12_213 [label="Entry lambda expression", span="267-267", cluster="lambda expression", file="StateMachine.cs"];
m12_216 [label="Entry lambda expression", span="271-279", cluster="lambda expression", file="StateMachine.cs"];
m12_204 [label="Exit lambda expression", span="254-291", cluster="lambda expression", file="StateMachine.cs"];
m12_211 [label="x.Name", span="267-267", cluster="lambda expression", file="StateMachine.cs"];
m12_212 [label="Exit lambda expression", span="267-267", cluster="lambda expression", file="StateMachine.cs"];
m12_214 [label="x.Value", span="267-267", cluster="lambda expression", file="StateMachine.cs"];
m12_215 [label="Exit lambda expression", span="267-267", cluster="lambda expression", file="StateMachine.cs"];
m12_217 [label="new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new Dictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            }", span="271-279", cluster="lambda expression", file="StateMachine.cs"];
m12_218 [label="Exit lambda expression", span="271-279", cluster="lambda expression", file="StateMachine.cs"];
m12_224 [label="Entry lambda expression", span="296-297", cluster="lambda expression", file="StateMachine.cs"];
m12_225 [label="GetNumberOfJobsByStateName(connection, SucceededState.StateName)", span="297-297", cluster="lambda expression", file="StateMachine.cs"];
m12_226 [label="Exit lambda expression", span="296-297", cluster="lambda expression", file="StateMachine.cs"];
m12_230 [label="Entry lambda expression", span="302-303", cluster="lambda expression", file="StateMachine.cs"];
m12_231 [label="GetNumberOfJobsByStateName(connection, DeletedState.StateName)", span="303-303", cluster="lambda expression", file="StateMachine.cs"];
m12_232 [label="Exit lambda expression", span="302-303", cluster="lambda expression", file="StateMachine.cs"];
m12_243 [label="var multi = connection.QueryMultiple(sql)", span="330-330", cluster="lambda expression", file="StateMachine.cs"];
m12_241 [label="Entry lambda expression", span="327-345", cluster="lambda expression", file="StateMachine.cs"];
m12_256 [label="Entry lambda expression", span="348-348", cluster="lambda expression", file="StateMachine.cs"];
m12_242 [label="var stats = new StatisticsDto()", span="329-329", cluster="lambda expression", file="StateMachine.cs"];
m12_244 [label="stats.Enqueued = multi.Read<int>().Single()", span="332-332", cluster="lambda expression", file="StateMachine.cs"];
m12_245 [label="stats.Failed = multi.Read<int>().Single()", span="333-333", cluster="lambda expression", file="StateMachine.cs"];
m12_246 [label="stats.Processing = multi.Read<int>().Single()", span="334-334", cluster="lambda expression", file="StateMachine.cs"];
m12_247 [label="stats.Scheduled = multi.Read<int>().Single()", span="335-335", cluster="lambda expression", file="StateMachine.cs"];
m12_248 [label="stats.Servers = multi.Read<int>().Single()", span="337-337", cluster="lambda expression", file="StateMachine.cs"];
m12_249 [label="stats.Succeeded = multi.Read<long?>().SingleOrDefault() ?? 0", span="339-339", cluster="lambda expression", file="StateMachine.cs"];
m12_250 [label="stats.Deleted = multi.Read<long?>().SingleOrDefault() ?? 0", span="340-340", cluster="lambda expression", file="StateMachine.cs"];
m12_251 [label="stats.Recurring = multi.Read<int>().Single()", span="342-342", cluster="lambda expression", file="StateMachine.cs"];
m12_252 [label="return stats;", span="344-344", cluster="lambda expression", file="StateMachine.cs"];
m12_253 [label="Exit lambda expression", span="327-345", cluster="lambda expression", file="StateMachine.cs"];
m12_257 [label="x.GetJobQueueMonitoringApi().GetQueues()", span="348-348", cluster="lambda expression", file="StateMachine.cs"];
m12_258 [label="Exit lambda expression", span="348-348", cluster="lambda expression", file="StateMachine.cs"];
m12_273 [label="String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))", span="366-366", cluster="lambda expression", file="StateMachine.cs"];
m12_272 [label="Entry lambda expression", span="366-366", cluster="lambda expression", file="StateMachine.cs"];
m12_277 [label="Entry lambda expression", span="366-366", cluster="lambda expression", file="StateMachine.cs"];
m12_274 [label="Exit lambda expression", span="366-366", cluster="lambda expression", file="StateMachine.cs"];
m12_278 [label=x, span="366-366", cluster="lambda expression", file="StateMachine.cs"];
m12_279 [label="Exit lambda expression", span="366-366", cluster="lambda expression", file="StateMachine.cs"];
m12_292 [label="String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd''))", span="383-383", cluster="lambda expression", file="StateMachine.cs"];
m12_291 [label="Entry lambda expression", span="383-383", cluster="lambda expression", file="StateMachine.cs"];
m12_294 [label="Entry lambda expression", span="383-383", cluster="lambda expression", file="StateMachine.cs"];
m12_293 [label="Exit lambda expression", span="383-383", cluster="lambda expression", file="StateMachine.cs"];
m12_295 [label=x, span="383-383", cluster="lambda expression", file="StateMachine.cs"];
m12_296 [label="Exit lambda expression", span="383-383", cluster="lambda expression", file="StateMachine.cs"];
m12_316 [label="Entry lambda expression", span="404-404", cluster="lambda expression", file="StateMachine.cs"];
m12_319 [label="Entry lambda expression", span="404-404", cluster="lambda expression", file="StateMachine.cs"];
m12_317 [label="(string)x.Key", span="404-404", cluster="lambda expression", file="StateMachine.cs"];
m12_318 [label="Exit lambda expression", span="404-404", cluster="lambda expression", file="StateMachine.cs"];
m12_320 [label="(long)x.Count", span="404-404", cluster="lambda expression", file="StateMachine.cs"];
m12_321 [label="Exit lambda expression", span="404-404", cluster="lambda expression", file="StateMachine.cs"];
m12_336 [label="new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                }", span="451-458", cluster="lambda expression", file="StateMachine.cs"];
m12_337 [label="Exit lambda expression", span="451-458", cluster="lambda expression", file="StateMachine.cs"];
m12_90 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="StateMachine.cs"];
m12_87 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="StateMachine.cs"];
m12_35 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="72-72", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="StateMachine.cs"];
m12_315 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", file="StateMachine.cs"];
m12_26 [label="Entry HangFire.JobStorage.GetConnection()", span="56-56", cluster="HangFire.JobStorage.GetConnection()", file="StateMachine.cs"];
m12_369 [label="Entry Hangfire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="22-22", cluster="Hangfire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", file="StateMachine.cs"];
m12_61 [label="Entry Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", file="StateMachine.cs"];
m12_275 [label="Entry System.DateTime.ToString(string)", span="0-0", cluster="System.DateTime.ToString(string)", file="StateMachine.cs"];
m12_102 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="163-163", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="StateMachine.cs"];
m12_103 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    Result = stateData.ContainsKey(''Result'') ? stateData[''Result''] : null,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }));", span="165-178", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="StateMachine.cs"];
m12_104 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="163-163", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="StateMachine.cs"];
m12_137 [label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span="", cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="StateMachine.cs"];
m12_122 [label="Entry Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7", cluster="Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", file="StateMachine.cs"];
m12_178 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="536-536", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.cs"];
m12_370 [label="string fetchedJobsSql = @''\r\nselect j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom HangFire.Job j\r\nleft join HangFire.State s on s.Id = j.StateId\r\nwhere j.Id in @jobIds''", span="540-544", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.cs"];
m12_371 [label="var jobs = connection.Query<SqlJob>(\r\n                fetchedJobsSql,\r\n                new { jobIds = jobIds })\r\n                .ToList()", span="546-549", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.cs"];
m12_372 [label="var result = new List<KeyValuePair<string, FetchedJobDto>>(jobs.Count)", span="551-551", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.cs"];
m12_373 [label=jobs, span="553-553", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.cs"];
m12_374 [label="result.Add(new KeyValuePair<string, FetchedJobDto>(\r\n                    job.Id.ToString(),\r\n                    new FetchedJobDto\r\n                    {\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        State = job.StateName,\r\n                    }))", span="555-561", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.cs"];
m12_375 [label="return new JobList<FetchedJobDto>(result);", span="564-564", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.cs"];
m12_376 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="536-536", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.cs"];
m12_378 [label="Entry KeyValuePair<string, FetchedJobDto>.cstr", span="", cluster="KeyValuePair<string, FetchedJobDto>.cstr", file="StateMachine.cs"];
m12_192 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="252-252", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="StateMachine.cs"];
m12_193 [label="return UseConnection(connection =>\r\n            {\r\n\r\n                const string sql = @''\r\nselect * from HangFire.Job where Id = @id\r\nselect * from HangFire.JobParameter where JobId = @id\r\nselect * from HangFire.State where JobId = @id order by Id desc'';\r\n\r\n                using (var multi = connection.QueryMultiple(sql, new { id = jobId }))\r\n                {\r\n                    var job = multi.Read<SqlJob>().SingleOrDefault();\r\n                    if (job == null) return null;\r\n\r\n                    var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value);\r\n                    var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new Dictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList();\r\n\r\n                    return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };\r\n                }\r\n            });", span="254-291", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="StateMachine.cs"];
m12_194 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="252-252", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="StateMachine.cs"];
m12_311 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="StateMachine.cs"];
m12_168 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="434-434", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.cs"];
m12_330 [label="string enqueuedJobsSql = @''\r\nselect j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom HangFire.Job j\r\nleft join HangFire.State s on s.Id = j.StateId\r\nwhere j.Id in @jobIds''", span="438-442", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.cs"];
m12_331 [label="var jobs = connection.Query<SqlJob>(\r\n                enqueuedJobsSql,\r\n                new { jobIds = jobIds })\r\n                .ToList()", span="444-447", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.cs"];
m12_332 [label="return DeserializeJobs(\r\n                jobs,\r\n                (sqlJob, job, stateData) => new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                });", span="449-458", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.cs"];
m12_333 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="434-434", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="StateMachine.cs"];
m12_313 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="StateMachine.cs"];
m12_221 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="294-294", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="StateMachine.cs"];
m12_222 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, SucceededState.StateName));", span="296-297", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="StateMachine.cs"];
m12_223 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="294-294", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="StateMachine.cs"];
m12_51 [label="Entry Hangfire.Common.JobHelper.DeserializeDateTime(string)", span="73-73", cluster="Hangfire.Common.JobHelper.DeserializeDateTime(string)", file="StateMachine.cs"];
m12_338 [label="Entry Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", file="StateMachine.cs"];
m12_377 [label="Entry List<KeyValuePair<string, FetchedJobDto>>.cstr", span="", cluster="List<KeyValuePair<string, FetchedJobDto>>.cstr", file="StateMachine.cs"];
m12_270 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="StateMachine.cs"];
m12_91 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="145-145", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="StateMachine.cs"];
m12_92 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }));", span="147-160", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="StateMachine.cs"];
m12_93 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="145-145", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="StateMachine.cs"];
m12_343 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="475-475", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs"];
m12_344 [label="var data = JobHelper.FromJson<InvocationData>(invocationData)", span="477-477", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs"];
m12_345 [label="data.Arguments = arguments", span="478-478", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs"];
m12_346 [label="return data.Deserialize();", span="482-482", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs"];
m12_347 [label=JobLoadException, span="484-484", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs"];
m12_348 [label="return null;", span="486-486", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs"];
m12_349 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="475-475", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs"];
m12_75 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", span="118-118", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", file="StateMachine.cs"];
m12_76 [label="return UseConnection<IList<ServerDto>>(connection =>\r\n            {\r\n                var servers = connection.Query<Entities.Server>(\r\n                    @''select * from HangFire.Server'')\r\n                    .ToList();\r\n\r\n                var result = new List<ServerDto>();\r\n\r\n                foreach (var server in servers)\r\n                {\r\n                    var data = JobHelper.FromJson<ServerData>(server.Data);\r\n                    result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="120-142", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", file="StateMachine.cs"];
m12_77 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", span="118-118", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", file="StateMachine.cs"];
m12_205 [label="Entry Unk.QueryMultiple", span="", cluster="Unk.QueryMultiple", file="StateMachine.cs"];
m12_322 [label="var provider = _storage.QueueProviders.GetProvider(queueName)", span="423-423", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="StateMachine.cs"];
m12_323 [label="var monitoringApi = provider.GetJobQueueMonitoringApi()", span="424-424", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="StateMachine.cs"];
m12_324 [label="return monitoringApi;", span="426-426", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="StateMachine.cs"];
m12_325 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="421-421", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="StateMachine.cs"];
m12_39 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="78-78", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="StateMachine.cs"];
m12_40 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeDateTime(stateData[''StartedAt'']),\r\n                }));", span="80-89", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="StateMachine.cs"];
m12_41 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="78-78", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="StateMachine.cs"];
m12_52 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="92-92", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="StateMachine.cs"];
m12_53 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                }));", span="94-103", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="StateMachine.cs"];
m12_54 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="92-92", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="StateMachine.cs"];
m12_208 [label="Entry Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22", cluster="Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", file="StateMachine.cs"];
m12_69 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="112-112", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="StateMachine.cs"];
m12_70 [label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''failed''));", span="114-115", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="StateMachine.cs"];
m12_71 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="112-112", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="StateMachine.cs"];
m12_179 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="240-240", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="StateMachine.cs"];
m12_180 [label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''succeeded''));", span="242-243", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="StateMachine.cs"];
m12_181 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="240-240", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="StateMachine.cs"];
m12_276 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="StateMachine.cs"];
m12_326 [label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53", cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="StateMachine.cs"];
m12_134 [label="Entry Unk.SelectMany", span="", cluster="Unk.SelectMany", file="StateMachine.cs"];
m12_207 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="StateMachine.cs"];
m12_78 [label="Entry Unk.>", span="", cluster="Unk.>", file="StateMachine.cs"];
m12_138 [label="Entry Unk.GetEnqueuedJobIds", span="", cluster="Unk.GetEnqueuedJobIds", file="StateMachine.cs"];
m12_101 [label="Entry Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", span="84-84", cluster="Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", file="StateMachine.cs"];
m12_135 [label="Entry Unk.OrderBy", span="", cluster="Unk.OrderBy", file="StateMachine.cs"];
m12_139 [label="Entry Unk.GetEnqueuedAndFetchedCount", span="", cluster="Unk.GetEnqueuedAndFetchedCount", file="StateMachine.cs"];
m12_148 [label="Entry Unk.GetQueues", span="", cluster="Unk.GetQueues", file="StateMachine.cs"];
m12_62 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="106-106", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="StateMachine.cs"];
m12_63 [label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''succeeded''));", span="108-109", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="StateMachine.cs"];
m12_64 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="106-106", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="StateMachine.cs"];
m12_314 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="StateMachine.cs"];
m12_68 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", span="371-371", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_280 [label="var endDate = DateTime.UtcNow.Date", span="375-375", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_287 [label="var keyMaps = dates.ToDictionary(x => String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd'')), x => x)", span="383-383", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_288 [label="return GetTimelineStats(connection, keyMaps);", span="385-385", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_281 [label="var dates = new List<DateTime>()", span="376-376", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_284 [label="dates.Add(endDate)", span="379-379", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_285 [label="endDate = endDate.AddDays(-1)", span="380-380", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_282 [label="var i = 0", span="377-377", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_283 [label="i < 7", span="377-377", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_286 [label="i++", span="377-377", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_289 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", span="371-371", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="StateMachine.cs"];
m12_254 [label="Entry Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18", cluster="Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", file="StateMachine.cs"];
m12_49 [label="Entry Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", file="StateMachine.cs"];
m12_297 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="388-388", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m12_298 [label="string sqlQuery = @''\r\nselect s.[Key], sum(s.[Value]) as [Count] from (\r\n    select [Key], sum([Value]) as [Value] from HangFire.Counter \r\n	group by [Key]\r\n	having [Key] in @keys\r\n    union all\r\n    select [Key], [Value] from HangFire.AggregatedCounter \r\n	where [Key] in @keys\r\n) as s group by [Key];''", span="391-399", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m12_299 [label="var valuesMap = connection.Query(\r\n                sqlQuery,\r\n                new { keys = keyMaps.Keys })\r\n                .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="401-404", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m12_300 [label="keyMaps.Keys", span="406-406", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m12_305 [label="i < keyMaps.Count", span="412-412", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m12_306 [label="var value = valuesMap[keyMaps.ElementAt(i).Key]", span="414-414", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m12_307 [label="result.Add(keyMaps.ElementAt(i).Value, value)", span="415-415", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m12_301 [label="!valuesMap.ContainsKey(key)", span="408-408", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m12_302 [label="valuesMap.Add(key, 0)", span="408-408", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m12_303 [label="var result = new Dictionary<DateTime, long>()", span="411-411", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m12_304 [label="var i = 0", span="412-412", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m12_309 [label="return result;", span="418-418", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m12_308 [label="i++", span="412-412", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m12_310 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="388-388", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m12_240 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="StateMachine.cs"];
m12_133 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="StateMachine.cs"];
m12_365 [label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0", cluster="System.Collections.Generic.List<T>.List(int)", file="StateMachine.cs"];
m12_255 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="StateMachine.cs"];
m12_159 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="224-224", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="StateMachine.cs"];
m12_160 [label="var queueApi = GetQueueApi(queue)", span="226-226", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="StateMachine.cs"];
m12_161 [label="var enqueuedJobIds = queueApi.GetEnqueuedJobIds(queue, from, perPage)", span="227-227", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="StateMachine.cs"];
m12_162 [label="return UseConnection(connection => EnqueuedJobs(connection, enqueuedJobIds));", span="229-229", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="StateMachine.cs"];
m12_163 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="224-224", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="StateMachine.cs"];
m12_206 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="StateMachine.cs"];
m12_209 [label="Entry Unk.DeserializeJob", span="", cluster="Unk.DeserializeJob", file="StateMachine.cs"];
m12_381 [label="Hangfire.SqlServer.SqlServerMonitoringApi", span="", file="StateMachine.cs"];
m12_382 [label=int, span="", file="StateMachine.cs"];
m12_383 [label=int, span="", file="StateMachine.cs"];
m12_384 [label=int, span="", file="StateMachine.cs"];
m12_385 [label=int, span="", file="StateMachine.cs"];
m12_386 [label=int, span="", file="StateMachine.cs"];
m12_387 [label=int, span="", file="StateMachine.cs"];
m12_388 [label=int, span="", file="StateMachine.cs"];
m12_389 [label=int, span="", file="StateMachine.cs"];
m12_390 [label=int, span="", file="StateMachine.cs"];
m12_391 [label=int, span="", file="StateMachine.cs"];
m12_392 [label=enqueuedJobIds, span="", file="StateMachine.cs"];
m12_393 [label=enqueuedJobIds, span="", file="StateMachine.cs"];
m12_394 [label=fetchedJobIds, span="", file="StateMachine.cs"];
m12_395 [label=string, span="", file="StateMachine.cs"];
m12_396 [label=sql, span="", file="StateMachine.cs"];
m12_397 [label=string, span="", file="StateMachine.cs"];
m12_398 [label=string, span="", file="StateMachine.cs"];
m13_92 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_CreatesExpiredJob()", span="110-110", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_CreatesExpiredJob()", file="StateMachineFacts.cs"];
m13_93 [label="var job = Job.FromExpression(() => Console.WriteLine(''SomeString''))", span="112-112", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_CreatesExpiredJob()", file="StateMachineFacts.cs"];
m13_94 [label="_parameters.Add(''Name'', ''Value'')", span="113-113", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_CreatesExpiredJob()", file="StateMachineFacts.cs"];
m13_96 [label="stateMachine.CreateInState(job, _parameters, _state.Object)", span="117-117", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_CreatesExpiredJob()", color=green, community=0, file="StateMachineFacts.cs"];
m13_97 [label="_connection.Verify(x => x.CreateExpiredJob(\r\n				job,\r\n                It.Is<Dictionary<string, string>>(d => d[''Name''] == ''Value''),\r\n                It.IsAny<DateTime>(),\r\n                It.IsAny<TimeSpan>()))", span="119-123", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_CreatesExpiredJob()", file="StateMachineFacts.cs"];
m13_95 [label="var stateMachine = CreateStateMachine()", span="115-115", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_CreatesExpiredJob()", file="StateMachineFacts.cs"];
m13_98 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_CreatesExpiredJob()", span="110-110", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_CreatesExpiredJob()", file="StateMachineFacts.cs"];
m13_214 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenApplyStateThrowsException()", span="265-265", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenApplyStateThrowsException()", file="StateMachineFacts.cs"];
m13_215 [label="_process.Setup(x => x.ApplyState(It.IsAny<IWriteOnlyTransaction>(), It.IsAny<ApplyStateContext>(), true))\r\n                .Throws(new Exception())", span="268-269", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenApplyStateThrowsException()", file="StateMachineFacts.cs"];
m13_216 [label="var stateMachine = CreateStateMachine()", span="271-271", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenApplyStateThrowsException()", file="StateMachineFacts.cs"];
m13_217 [label="var result = stateMachine.ChangeState(JobId, _state.Object, FromOldState)", span="274-274", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenApplyStateThrowsException()", file="StateMachineFacts.cs"];
m13_218 [label="_process.Verify(x => x.ApplyState(_transaction.Object, It.IsNotNull<ApplyStateContext>(), false))", span="277-277", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenApplyStateThrowsException()", file="StateMachineFacts.cs"];
m13_219 [label="Assert.False(result)", span="279-279", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenApplyStateThrowsException()", file="StateMachineFacts.cs"];
m13_220 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenApplyStateThrowsException()", span="265-265", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenApplyStateThrowsException()", file="StateMachineFacts.cs"];
m13_99 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="StateMachineFacts.cs"];
m13_17 [label="Entry Mock<IState>.cstr", span="", cluster="Mock<IState>.cstr", file="StateMachineFacts.cs"];
m13_58 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenStateChangeProcessIsNull()", span="68-68", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenStateChangeProcessIsNull()", file="StateMachineFacts.cs"];
m13_59 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new StateMachine(_connection.Object, null))", span="70-71", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenStateChangeProcessIsNull()", file="StateMachineFacts.cs"];
m13_60 [label="Assert.Equal(''stateChangeProcess'', exception.ParamName)", span="73-73", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenStateChangeProcessIsNull()", file="StateMachineFacts.cs"];
m13_61 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenStateChangeProcessIsNull()", span="68-68", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenStateChangeProcessIsNull()", file="StateMachineFacts.cs"];
m13_83 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenStateIsNull()", span="99-99", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenStateIsNull()", file="StateMachineFacts.cs"];
m13_84 [label="var stateMachine = CreateStateMachine()", span="101-101", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenStateIsNull()", file="StateMachineFacts.cs"];
m13_85 [label="var exception = Assert.Throws<ArgumentNullException> (\r\n                () => stateMachine.CreateInState(_job, _parameters, null))", span="103-104", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenStateIsNull()", color=green, community=0, file="StateMachineFacts.cs"];
m13_86 [label="Assert.Equal(''state'', exception.ParamName)", span="106-106", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenStateIsNull()", file="StateMachineFacts.cs"];
m13_87 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenStateIsNull()", span="99-99", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenStateIsNull()", file="StateMachineFacts.cs"];
m13_247 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheGivenState_IfStateIgnoresThisException_AndMethodDataCouldNotBeResolved()", span="309-309", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheGivenState_IfStateIgnoresThisException_AndMethodDataCouldNotBeResolved()", file="StateMachineFacts.cs"];
m13_248 [label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData\r\n                {\r\n                    State = OldStateName,\r\n                    Job = null,\r\n                    LoadException = new JobLoadException(''asd'', new Exception())\r\n                })", span="312-318", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheGivenState_IfStateIgnoresThisException_AndMethodDataCouldNotBeResolved()", file="StateMachineFacts.cs"];
m13_249 [label="_state.Setup(x => x.IgnoreJobLoadException).Returns(true)", span="320-320", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheGivenState_IfStateIgnoresThisException_AndMethodDataCouldNotBeResolved()", file="StateMachineFacts.cs"];
m13_250 [label="var stateMachine = CreateStateMachine()", span="322-322", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheGivenState_IfStateIgnoresThisException_AndMethodDataCouldNotBeResolved()", file="StateMachineFacts.cs"];
m13_251 [label="var result = stateMachine.ChangeState(JobId, _state.Object, FromOldState)", span="325-325", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheGivenState_IfStateIgnoresThisException_AndMethodDataCouldNotBeResolved()", file="StateMachineFacts.cs"];
m13_252 [label="_process.Verify(x => x.ApplyState(\r\n                _transaction.Object, \r\n                It.Is<ApplyStateContext>(ctx => ctx.NewState == _state.Object),\r\n                true))", span="328-331", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheGivenState_IfStateIgnoresThisException_AndMethodDataCouldNotBeResolved()", file="StateMachineFacts.cs"];
m13_253 [label="Assert.True(result)", span="333-333", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheGivenState_IfStateIgnoresThisException_AndMethodDataCouldNotBeResolved()", file="StateMachineFacts.cs"];
m13_254 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheGivenState_IfStateIgnoresThisException_AndMethodDataCouldNotBeResolved()", span="309-309", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheGivenState_IfStateIgnoresThisException_AndMethodDataCouldNotBeResolved()", file="StateMachineFacts.cs"];
m13_21 [label="Entry Mock<IWriteOnlyTransaction>.cstr", span="", cluster="Mock<IWriteOnlyTransaction>.cstr", file="StateMachineFacts.cs"];
m13_221 [label="Entry System.Exception.Exception()", span="0-0", cluster="System.Exception.Exception()", file="StateMachineFacts.cs"];
m13_75 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenParametersIsNull()", span="88-88", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenParametersIsNull()", file="StateMachineFacts.cs"];
m13_76 [label="var stateMachine = CreateStateMachine()", span="90-90", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenParametersIsNull()", file="StateMachineFacts.cs"];
m13_77 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => stateMachine.CreateInState(_job, null, _state.Object))", span="92-93", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenParametersIsNull()", color=green, community=0, file="StateMachineFacts.cs"];
m13_78 [label="Assert.Equal(''parameters'', exception.ParamName)", span="95-95", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenParametersIsNull()", file="StateMachineFacts.cs"];
m13_79 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenParametersIsNull()", span="88-88", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenParametersIsNull()", file="StateMachineFacts.cs"];
m13_0 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", span="25-25", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="StateMachineFacts.cs"];
m13_1 [label="_process = new Mock<IStateChangeProcess>()", span="27-27", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="StateMachineFacts.cs"];
m13_2 [label="_job = Job.FromExpression(() => Console.WriteLine())", span="29-29", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="StateMachineFacts.cs"];
m13_3 [label="_parameters = new Dictionary<string, string>()", span="30-30", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="StateMachineFacts.cs"];
m13_4 [label="_state = new Mock<IState>()", span="31-31", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="StateMachineFacts.cs"];
m13_5 [label="_state.Setup(x => x.Name).Returns(StateName)", span="32-32", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="StateMachineFacts.cs"];
m13_6 [label="_connection = new Mock<IStorageConnection>()", span="34-34", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="StateMachineFacts.cs"];
m13_7 [label="_transaction = new Mock<IWriteOnlyTransaction>()", span="35-35", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="StateMachineFacts.cs"];
m13_8 [label="_connection.Setup(x => x.CreateWriteTransaction()).Returns(_transaction.Object)", span="37-37", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="StateMachineFacts.cs"];
m13_9 [label="_connection.Setup(x => x.CreateExpiredJob(\r\n                It.IsAny<Job>(),\r\n                It.IsAny<IDictionary<string, string>>(),\r\n                It.IsAny<DateTime>(),\r\n                It.IsAny<TimeSpan>())).Returns(JobId)", span="39-43", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="StateMachineFacts.cs"];
m13_10 [label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData\r\n                {\r\n                    State = OldStateName,\r\n                    Job = _job\r\n                })", span="45-50", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="StateMachineFacts.cs"];
m13_11 [label="_distributedLock = new Mock<IDisposable>()", span="52-52", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="StateMachineFacts.cs"];
m13_12 [label="_connection\r\n                .Setup(x => x.AcquireDistributedLock(String.Format(''job:{0}:state-lock'', JobId), It.IsAny<TimeSpan>()))\r\n                .Returns(_distributedLock.Object)", span="53-55", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="StateMachineFacts.cs"];
m13_13 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", span="25-25", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="StateMachineFacts.cs"];
m13_295 [label="Entry Unk.ElectState", span="", cluster="Unk.ElectState", file="StateMachineFacts.cs"];
m13_47 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="StateMachineFacts.cs"];
m13_237 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()", file="StateMachineFacts.cs"];
m13_145 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenFromStatesIsEmpty()", span="170-170", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenFromStatesIsEmpty()", file="StateMachineFacts.cs"];
m13_146 [label="var stateMachine = CreateStateMachine()", span="172-172", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenFromStatesIsEmpty()", file="StateMachineFacts.cs"];
m13_147 [label="var exception = Assert.Throws<ArgumentException>(\r\n                () => stateMachine.ChangeState(JobId, _state.Object, new string[0]))", span="174-175", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenFromStatesIsEmpty()", file="StateMachineFacts.cs"];
m13_148 [label="Assert.Equal(''fromStates'', exception.ParamName)", span="177-177", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenFromStatesIsEmpty()", file="StateMachineFacts.cs"];
m13_149 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenFromStatesIsEmpty()", span="170-170", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenFromStatesIsEmpty()", file="StateMachineFacts.cs"];
m13_38 [label="Entry Unk.>", span="", cluster="Unk.>", file="StateMachineFacts.cs"];
m13_39 [label="Entry Unk.CreateExpiredJob", span="", cluster="Unk.CreateExpiredJob", file="StateMachineFacts.cs"];
m13_267 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_CommitsTheNewState_AndReturnsTrue()", span="337-337", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_CommitsTheNewState_AndReturnsTrue()", file="StateMachineFacts.cs"];
m13_268 [label="var machine = CreateStateMachine()", span="340-340", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_CommitsTheNewState_AndReturnsTrue()", file="StateMachineFacts.cs"];
m13_269 [label="var result = machine.ChangeState(JobId, _state.Object, new[] { OldStateName })", span="343-343", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_CommitsTheNewState_AndReturnsTrue()", file="StateMachineFacts.cs"];
m13_270 [label="_process.Verify(x => x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(ctx => ctx.NewState == _state.Object && ctx.OldStateName == OldStateName\r\n                    && ctx.Job == _job && ctx.JobId == JobId),\r\n                true))", span="346-350", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_CommitsTheNewState_AndReturnsTrue()", file="StateMachineFacts.cs"];
m13_272 [label="Assert.True(result)", span="354-354", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_CommitsTheNewState_AndReturnsTrue()", file="StateMachineFacts.cs"];
m13_271 [label="_transaction.Verify(x => x.Commit())", span="352-352", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_CommitsTheNewState_AndReturnsTrue()", file="StateMachineFacts.cs"];
m13_273 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_CommitsTheNewState_AndReturnsTrue()", span="337-337", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_CommitsTheNewState_AndReturnsTrue()", file="StateMachineFacts.cs"];
m13_176 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ChangesTheStateOfTheJob_WhenFromStatesIsNull()", span="210-210", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ChangesTheStateOfTheJob_WhenFromStatesIsNull()", file="StateMachineFacts.cs"];
m13_177 [label="var stateMachine = CreateStateMachine()", span="213-213", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ChangesTheStateOfTheJob_WhenFromStatesIsNull()", file="StateMachineFacts.cs"];
m13_178 [label="stateMachine.ChangeState(JobId, _state.Object, null)", span="216-216", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ChangesTheStateOfTheJob_WhenFromStatesIsNull()", file="StateMachineFacts.cs"];
m13_179 [label="_process.Verify(x => x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(ctx => ctx.NewState == _state.Object && ctx.OldStateName == OldStateName),\r\n                true))", span="219-222", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ChangesTheStateOfTheJob_WhenFromStatesIsNull()", file="StateMachineFacts.cs"];
m13_180 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ChangesTheStateOfTheJob_WhenFromStatesIsNull()", span="210-210", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ChangesTheStateOfTheJob_WhenFromStatesIsNull()", file="StateMachineFacts.cs"];
m13_57 [label="Entry StateMachine.cstr", span="", cluster="StateMachine.cstr", file="StateMachineFacts.cs"];
m13_195 [label="Entry Unk.False", span="", cluster="Unk.False", file="StateMachineFacts.cs"];
m13_127 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", span="148-148", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="StateMachineFacts.cs"];
m13_128 [label="var stateMachine = CreateStateMachine()", span="150-150", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="StateMachineFacts.cs"];
m13_129 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => stateMachine.ChangeState(null, _state.Object, FromOldState))", span="152-153", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="StateMachineFacts.cs"];
m13_130 [label="Assert.Equal(''jobId'', exception.ParamName)", span="155-155", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="StateMachineFacts.cs"];
m13_131 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", span="148-148", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="StateMachineFacts.cs"];
m13_49 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="59-59", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="StateMachineFacts.cs"];
m13_50 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new StateMachine(null, _process.Object))", span="61-62", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="StateMachineFacts.cs"];
m13_51 [label="Assert.Equal(''connection'', exception.ParamName)", span="64-64", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="StateMachineFacts.cs"];
m13_52 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="59-59", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="StateMachineFacts.cs"];
m13_27 [label="Entry System.Console.WriteLine()", span="0-0", cluster="System.Console.WriteLine()", file="StateMachineFacts.cs"];
m13_14 [label="Entry Mock<IStateChangeProcess>.cstr", span="", cluster="Mock<IStateChangeProcess>.cstr", file="StateMachineFacts.cs"];
m13_135 [label="Entry Unk.ChangeState", span="", cluster="Unk.ChangeState", file="StateMachineFacts.cs"];
m13_144 [label="Entry Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="62-62", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="StateMachineFacts.cs"];
m13_153 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_WorksWithinAJobLock()", span="181-181", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_WorksWithinAJobLock()", file="StateMachineFacts.cs"];
m13_154 [label="var stateMachine = CreateStateMachine()", span="183-183", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_WorksWithinAJobLock()", file="StateMachineFacts.cs"];
m13_155 [label="stateMachine.ChangeState(JobId, _state.Object, FromOldState)", span="185-185", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_WorksWithinAJobLock()", file="StateMachineFacts.cs"];
m13_156 [label="_distributedLock.Verify(x => x.Dispose())", span="187-187", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_WorksWithinAJobLock()", file="StateMachineFacts.cs"];
m13_157 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_WorksWithinAJobLock()", span="181-181", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_WorksWithinAJobLock()", file="StateMachineFacts.cs"];
m13_313 [label="Entry System.NotSupportedException.NotSupportedException()", span="0-0", cluster="System.NotSupportedException.NotSupportedException()", file="StateMachineFacts.cs"];
m13_70 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.CreateStateMachine()", span="402-402", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateStateMachine()", file="StateMachineFacts.cs"];
m13_323 [label="return new StateMachine(\r\n                _connection.Object,\r\n                _process.Object);", span="404-406", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateStateMachine()", file="StateMachineFacts.cs"];
m13_324 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.CreateStateMachine()", span="402-402", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateStateMachine()", file="StateMachineFacts.cs"];
m13_16 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="StateMachineFacts.cs"];
m13_136 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenToStateIsNull()", span="159-159", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenToStateIsNull()", file="StateMachineFacts.cs"];
m13_137 [label="var stateMachine = CreateStateMachine()", span="161-161", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenToStateIsNull()", file="StateMachineFacts.cs"];
m13_138 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => stateMachine.ChangeState(JobId, null, FromOldState))", span="163-164", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenToStateIsNull()", file="StateMachineFacts.cs"];
m13_139 [label="Assert.Equal(''toState'', exception.ParamName)", span="166-166", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenToStateIsNull()", file="StateMachineFacts.cs"];
m13_140 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenToStateIsNull()", span="159-159", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenToStateIsNull()", file="StateMachineFacts.cs"];
m13_18 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="StateMachineFacts.cs"];
m13_305 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_AppliesFailedState_WhenThereIsAnException_AndReturnsFalse()", span="379-379", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_AppliesFailedState_WhenThereIsAnException_AndReturnsFalse()", file="StateMachineFacts.cs"];
m13_306 [label="var exception = new NotSupportedException()", span="382-382", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_AppliesFailedState_WhenThereIsAnException_AndReturnsFalse()", file="StateMachineFacts.cs"];
m13_307 [label="_process.Setup(\r\n                x => x.ApplyState(It.IsAny<IWriteOnlyTransaction>(), It.IsAny<ApplyStateContext>(), true))\r\n                .Throws(exception)", span="384-386", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_AppliesFailedState_WhenThereIsAnException_AndReturnsFalse()", file="StateMachineFacts.cs"];
m13_310 [label="_process.Verify(x => x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(ctx => ctx.NewState is FailedState && ((FailedState)ctx.NewState).Exception == exception),\r\n                false))", span="394-397", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_AppliesFailedState_WhenThereIsAnException_AndReturnsFalse()", file="StateMachineFacts.cs"];
m13_308 [label="var machine = CreateStateMachine()", span="388-388", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_AppliesFailedState_WhenThereIsAnException_AndReturnsFalse()", file="StateMachineFacts.cs"];
m13_309 [label="var result = machine.ChangeState(JobId, _state.Object, new[] { OldStateName })", span="391-391", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_AppliesFailedState_WhenThereIsAnException_AndReturnsFalse()", file="StateMachineFacts.cs"];
m13_311 [label="Assert.False(result)", span="399-399", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_AppliesFailedState_WhenThereIsAnException_AndReturnsFalse()", file="StateMachineFacts.cs"];
m13_312 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_AppliesFailedState_WhenThereIsAnException_AndReturnsFalse()", span="379-379", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_AppliesFailedState_WhenThereIsAnException_AndReturnsFalse()", file="StateMachineFacts.cs"];
m13_91 [label="Entry Hangfire.States.StateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", span="40-40", cluster="Hangfire.States.StateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StateMachineFacts.cs"];
m13_161 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="StateMachineFacts.cs"];
m13_222 [label="Entry Unk.Throws", span="", cluster="Unk.Throws", file="StateMachineFacts.cs"];
m13_65 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenJobIsNull()", span="77-77", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenJobIsNull()", file="StateMachineFacts.cs"];
m13_66 [label="var stateMachine = CreateStateMachine()", span="79-79", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenJobIsNull()", file="StateMachineFacts.cs"];
m13_67 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => stateMachine.CreateInState(null, _parameters, _state.Object))", span="81-82", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenJobIsNull()", color=green, community=0, file="StateMachineFacts.cs"];
m13_68 [label="Assert.Equal(''job'', exception.ParamName)", span="84-84", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenJobIsNull()", file="StateMachineFacts.cs"];
m13_69 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenJobIsNull()", span="77-77", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ThrowsAnException_WhenJobIsNull()", file="StateMachineFacts.cs"];
m13_123 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ReturnsNewJobId()", span="141-141", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ReturnsNewJobId()", file="StateMachineFacts.cs"];
m13_124 [label="var stateMachine = CreateStateMachine()", span="143-143", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ReturnsNewJobId()", file="StateMachineFacts.cs"];
m13_125 [label="Assert.Equal(JobId, stateMachine.CreateInState(_job, _parameters, _state.Object))", span="144-144", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ReturnsNewJobId()", color=green, community=0, file="StateMachineFacts.cs"];
m13_126 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ReturnsNewJobId()", span="141-141", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ReturnsNewJobId()", file="StateMachineFacts.cs"];
m13_205 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenFromStatesArgumentDoesNotContainCurrentState()", span="247-247", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenFromStatesArgumentDoesNotContainCurrentState()", file="StateMachineFacts.cs"];
m13_206 [label="var stateMachine = CreateStateMachine()", span="250-250", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenFromStatesArgumentDoesNotContainCurrentState()", file="StateMachineFacts.cs"];
m13_207 [label="var result = stateMachine.ChangeState(\r\n                JobId, _state.Object, new [] { ''AnotherState'' })", span="253-254", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenFromStatesArgumentDoesNotContainCurrentState()", file="StateMachineFacts.cs"];
m13_208 [label="Assert.False(result)", span="257-257", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenFromStatesArgumentDoesNotContainCurrentState()", file="StateMachineFacts.cs"];
m13_209 [label="_process.Verify(\r\n                x => x.ApplyState(It.IsAny<IWriteOnlyTransaction>(), It.IsAny<ApplyStateContext>(), It.IsAny<bool>()),\r\n                Times.Never)", span="259-261", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenFromStatesArgumentDoesNotContainCurrentState()", file="StateMachineFacts.cs"];
m13_210 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenFromStatesArgumentDoesNotContainCurrentState()", span="247-247", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenFromStatesArgumentDoesNotContainCurrentState()", file="StateMachineFacts.cs"];
m13_48 [label="Entry Unk.AcquireDistributedLock", span="", cluster="Unk.AcquireDistributedLock", file="StateMachineFacts.cs"];
m13_23 [label="Entry Mock<IDisposable>.cstr", span="", cluster="Mock<IDisposable>.cstr", file="StateMachineFacts.cs"];
m13_74 [label="Entry Unk.CreateInState", span="", cluster="Unk.CreateInState", file="StateMachineFacts.cs"];
m13_162 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.TryToChangeState_ChangesTheStateOfTheJob()", span="191-191", cluster="Hangfire.Core.Tests.States.StateMachineFacts.TryToChangeState_ChangesTheStateOfTheJob()", file="StateMachineFacts.cs"];
m13_163 [label="var stateMachine = CreateStateMachine()", span="194-194", cluster="Hangfire.Core.Tests.States.StateMachineFacts.TryToChangeState_ChangesTheStateOfTheJob()", file="StateMachineFacts.cs"];
m13_164 [label="var result = stateMachine.ChangeState(JobId, _state.Object, FromOldState)", span="197-197", cluster="Hangfire.Core.Tests.States.StateMachineFacts.TryToChangeState_ChangesTheStateOfTheJob()", file="StateMachineFacts.cs"];
m13_165 [label="_process.Verify(x => x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(sc => sc.JobId == JobId && sc.Job.Type.Name.Equals(''Console'')\r\n                    && sc.NewState == _state.Object && sc.OldStateName == OldStateName),\r\n                true))", span="200-204", cluster="Hangfire.Core.Tests.States.StateMachineFacts.TryToChangeState_ChangesTheStateOfTheJob()", file="StateMachineFacts.cs"];
m13_166 [label="Assert.True(result)", span="206-206", cluster="Hangfire.Core.Tests.States.StateMachineFacts.TryToChangeState_ChangesTheStateOfTheJob()", file="StateMachineFacts.cs"];
m13_167 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.TryToChangeState_ChangesTheStateOfTheJob()", span="191-191", cluster="Hangfire.Core.Tests.States.StateMachineFacts.TryToChangeState_ChangesTheStateOfTheJob()", file="StateMachineFacts.cs"];
m13_320 [label="Entry lambda expression", span="396-396", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_24 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_28 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_31 [label="Entry lambda expression", span="37-37", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_35 [label="Entry lambda expression", span="39-43", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_40 [label="Entry lambda expression", span="45-45", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_44 [label="Entry lambda expression", span="54-54", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_25 [label="Console.WriteLine()", span="29-29", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_26 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_29 [label="x.Name", span="32-32", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_30 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_32 [label="x.CreateWriteTransaction()", span="37-37", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_33 [label="Exit lambda expression", span="37-37", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_36 [label="x.CreateExpiredJob(\r\n                It.IsAny<Job>(),\r\n                It.IsAny<IDictionary<string, string>>(),\r\n                It.IsAny<DateTime>(),\r\n                It.IsAny<TimeSpan>())", span="39-43", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_37 [label="Exit lambda expression", span="39-43", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_41 [label="x.GetJobData(JobId)", span="45-45", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_42 [label="Exit lambda expression", span="45-45", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_45 [label="x.AcquireDistributedLock(String.Format(''job:{0}:state-lock'', JobId), It.IsAny<TimeSpan>())", span="54-54", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_46 [label="Exit lambda expression", span="54-54", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_54 [label="Entry lambda expression", span="62-62", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_55 [label="new StateMachine(null, _process.Object)", span="62-62", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_56 [label="Exit lambda expression", span="62-62", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_62 [label="Entry lambda expression", span="71-71", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_63 [label="new StateMachine(_connection.Object, null)", span="71-71", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_64 [label="Exit lambda expression", span="71-71", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_72 [label="stateMachine.CreateInState(null, _parameters, _state.Object)", span="82-82", cluster="lambda expression", color=green, community=0, file="StateMachineFacts.cs"];
m13_71 [label="Entry lambda expression", span="82-82", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_73 [label="Exit lambda expression", span="82-82", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_81 [label="stateMachine.CreateInState(_job, null, _state.Object)", span="93-93", cluster="lambda expression", color=green, community=0, file="StateMachineFacts.cs"];
m13_80 [label="Entry lambda expression", span="93-93", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_82 [label="Exit lambda expression", span="93-93", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_89 [label="stateMachine.CreateInState(_job, _parameters, null)", span="104-104", cluster="lambda expression", color=green, community=0, file="StateMachineFacts.cs"];
m13_88 [label="Entry lambda expression", span="104-104", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_90 [label="Exit lambda expression", span="104-104", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_101 [label="Entry lambda expression", span="112-112", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_106 [label="x.CreateExpiredJob(\r\n				job,\r\n                It.Is<Dictionary<string, string>>(d => d[''Name''] == ''Value''),\r\n                It.IsAny<DateTime>(),\r\n                It.IsAny<TimeSpan>())", span="119-123", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_105 [label="Entry lambda expression", span="119-123", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_102 [label="Console.WriteLine(''SomeString'')", span="112-112", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_103 [label="Exit lambda expression", span="112-112", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_107 [label="Exit lambda expression", span="119-123", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_108 [label="Entry lambda expression", span="121-121", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_109 [label="d[''Name''] == ''Value''", span="121-121", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_110 [label="Exit lambda expression", span="121-121", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_116 [label="Entry lambda expression", span="133-137", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_117 [label="x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(sc => sc.JobId == JobId && sc.Job == _job\r\n                    && sc.NewState == _state.Object && sc.OldStateName == null),\r\n                true)", span="133-137", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_118 [label="Exit lambda expression", span="133-137", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_120 [label="Entry lambda expression", span="135-136", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_121 [label="sc.JobId == JobId && sc.Job == _job\r\n                    && sc.NewState == _state.Object && sc.OldStateName == null", span="135-136", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_122 [label="Exit lambda expression", span="135-136", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_133 [label="stateMachine.ChangeState(null, _state.Object, FromOldState)", span="153-153", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_132 [label="Entry lambda expression", span="153-153", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_134 [label="Exit lambda expression", span="153-153", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_142 [label="stateMachine.ChangeState(JobId, null, FromOldState)", span="164-164", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_141 [label="Entry lambda expression", span="164-164", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_143 [label="Exit lambda expression", span="164-164", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_151 [label="stateMachine.ChangeState(JobId, _state.Object, new string[0])", span="175-175", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_150 [label="Entry lambda expression", span="175-175", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_152 [label="Exit lambda expression", span="175-175", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_158 [label="Entry lambda expression", span="187-187", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_159 [label="x.Dispose()", span="187-187", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_160 [label="Exit lambda expression", span="187-187", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_169 [label="Entry lambda expression", span="200-204", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_170 [label="x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(sc => sc.JobId == JobId && sc.Job.Type.Name.Equals(''Console'')\r\n                    && sc.NewState == _state.Object && sc.OldStateName == OldStateName),\r\n                true)", span="200-204", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_171 [label="Exit lambda expression", span="200-204", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_172 [label="Entry lambda expression", span="202-203", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_173 [label="sc.JobId == JobId && sc.Job.Type.Name.Equals(''Console'')\r\n                    && sc.NewState == _state.Object && sc.OldStateName == OldStateName", span="202-203", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_174 [label="Exit lambda expression", span="202-203", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_181 [label="Entry lambda expression", span="219-222", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_182 [label="x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(ctx => ctx.NewState == _state.Object && ctx.OldStateName == OldStateName),\r\n                true)", span="219-222", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_183 [label="Exit lambda expression", span="219-222", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_184 [label="Entry lambda expression", span="221-221", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_185 [label="ctx.NewState == _state.Object && ctx.OldStateName == OldStateName", span="221-221", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_186 [label="Exit lambda expression", span="221-221", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_196 [label="Entry lambda expression", span="229-229", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_199 [label="Entry lambda expression", span="239-239", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_202 [label="Entry lambda expression", span="242-242", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_197 [label="x.GetJobData(It.IsAny<string>())", span="229-229", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_198 [label="Exit lambda expression", span="229-229", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_200 [label="x.GetJobData(JobId)", span="239-239", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_201 [label="Exit lambda expression", span="239-239", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_203 [label="x.ApplyState(It.IsAny<IWriteOnlyTransaction>(), It.IsAny<ApplyStateContext>(), It.IsAny<bool>())", span="242-242", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_204 [label="Exit lambda expression", span="242-242", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_211 [label="Entry lambda expression", span="260-260", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_212 [label="x.ApplyState(It.IsAny<IWriteOnlyTransaction>(), It.IsAny<ApplyStateContext>(), It.IsAny<bool>())", span="260-260", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_213 [label="Exit lambda expression", span="260-260", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_223 [label="Entry lambda expression", span="268-268", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_226 [label="Entry lambda expression", span="277-277", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_224 [label="x.ApplyState(It.IsAny<IWriteOnlyTransaction>(), It.IsAny<ApplyStateContext>(), true)", span="268-268", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_225 [label="Exit lambda expression", span="268-268", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_227 [label="x.ApplyState(_transaction.Object, It.IsNotNull<ApplyStateContext>(), false)", span="277-277", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_228 [label="Exit lambda expression", span="277-277", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_238 [label="Entry lambda expression", span="286-286", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_241 [label="Entry lambda expression", span="300-303", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_239 [label="x.GetJobData(JobId)", span="286-286", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_240 [label="Exit lambda expression", span="286-286", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_242 [label="x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(ctx => ctx.JobId == JobId && ctx.Job == null && ctx.NewState is FailedState),\r\n                true)", span="300-303", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_243 [label="Exit lambda expression", span="300-303", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_244 [label="Entry lambda expression", span="302-302", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_245 [label="ctx.JobId == JobId && ctx.Job == null && ctx.NewState is FailedState", span="302-302", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_246 [label="Exit lambda expression", span="302-302", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_255 [label="Entry lambda expression", span="312-312", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_258 [label="Entry lambda expression", span="320-320", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_261 [label="Entry lambda expression", span="328-331", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_256 [label="x.GetJobData(JobId)", span="312-312", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_257 [label="Exit lambda expression", span="312-312", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_259 [label="x.IgnoreJobLoadException", span="320-320", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_260 [label="Exit lambda expression", span="320-320", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_262 [label="x.ApplyState(\r\n                _transaction.Object, \r\n                It.Is<ApplyStateContext>(ctx => ctx.NewState == _state.Object),\r\n                true)", span="328-331", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_263 [label="Exit lambda expression", span="328-331", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_264 [label="Entry lambda expression", span="330-330", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_265 [label="ctx.NewState == _state.Object", span="330-330", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_266 [label="Exit lambda expression", span="330-330", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_274 [label="Entry lambda expression", span="346-350", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_280 [label="Entry lambda expression", span="352-352", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_275 [label="x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(ctx => ctx.NewState == _state.Object && ctx.OldStateName == OldStateName\r\n                    && ctx.Job == _job && ctx.JobId == JobId),\r\n                true)", span="346-350", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_276 [label="Exit lambda expression", span="346-350", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_277 [label="Entry lambda expression", span="348-349", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_278 [label="ctx.NewState == _state.Object && ctx.OldStateName == OldStateName\r\n                    && ctx.Job == _job && ctx.JobId == JobId", span="348-349", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_279 [label="Exit lambda expression", span="348-349", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_281 [label="x.Commit()", span="352-352", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_282 [label="Exit lambda expression", span="352-352", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_297 [label="context.CandidateState = anotherState.Object", span="364-364", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_300 [label="x.ApplyState(\r\n                _transaction.Object, \r\n                It.Is<ApplyStateContext>(ctx => ctx.NewState == anotherState.Object),\r\n                true)", span="372-375", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_303 [label="ctx.NewState == anotherState.Object", span="374-374", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_292 [label="Entry lambda expression", span="363-363", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_296 [label="Entry lambda expression", span="364-364", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_299 [label="Entry lambda expression", span="372-375", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_293 [label="x.ElectState(_connection.Object, It.IsAny<ElectStateContext>())", span="363-363", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_294 [label="Exit lambda expression", span="363-363", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_298 [label="Exit lambda expression", span="364-364", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_301 [label="Exit lambda expression", span="372-375", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_302 [label="Entry lambda expression", span="374-374", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_304 [label="Exit lambda expression", span="374-374", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_318 [label="x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(ctx => ctx.NewState is FailedState && ((FailedState)ctx.NewState).Exception == exception),\r\n                false)", span="394-397", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_321 [label="ctx.NewState is FailedState && ((FailedState)ctx.NewState).Exception == exception", span="396-396", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_314 [label="Entry lambda expression", span="385-385", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_317 [label="Entry lambda expression", span="394-397", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_315 [label="x.ApplyState(It.IsAny<IWriteOnlyTransaction>(), It.IsAny<ApplyStateContext>(), true)", span="385-385", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_316 [label="Exit lambda expression", span="385-385", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_319 [label="Exit lambda expression", span="394-397", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_322 [label="Exit lambda expression", span="396-396", cluster="lambda expression", file="StateMachineFacts.cs"];
m13_22 [label="Entry Hangfire.Storage.JobData.JobData()", span="21-21", cluster="Hangfire.Storage.JobData.JobData()", file="StateMachineFacts.cs"];
m13_284 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_SetsAnotherState_WhenItWasElected()", span="358-358", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_SetsAnotherState_WhenItWasElected()", file="StateMachineFacts.cs"];
m13_285 [label="var anotherState = new Mock<IState>()", span="361-361", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_SetsAnotherState_WhenItWasElected()", file="StateMachineFacts.cs"];
m13_286 [label="_process.Setup(x => x.ElectState(_connection.Object, It.IsAny<ElectStateContext>()))\r\n                .Callback((IStorageConnection connection, ElectStateContext context) => context.CandidateState = anotherState.Object)", span="363-364", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_SetsAnotherState_WhenItWasElected()", file="StateMachineFacts.cs"];
m13_289 [label="_process.Verify(x => x.ApplyState(\r\n                _transaction.Object, \r\n                It.Is<ApplyStateContext>(ctx => ctx.NewState == anotherState.Object),\r\n                true))", span="372-375", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_SetsAnotherState_WhenItWasElected()", file="StateMachineFacts.cs"];
m13_287 [label="var machine = CreateStateMachine()", span="366-366", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_SetsAnotherState_WhenItWasElected()", file="StateMachineFacts.cs"];
m13_288 [label="machine.ChangeState(JobId, _state.Object, new[] { OldStateName })", span="369-369", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_SetsAnotherState_WhenItWasElected()", file="StateMachineFacts.cs"];
m13_290 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_SetsAnotherState_WhenItWasElected()", span="358-358", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_SetsAnotherState_WhenItWasElected()", file="StateMachineFacts.cs"];
m13_100 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="StateMachineFacts.cs"];
m13_111 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ChangesTheStateOfACreatedJob()", span="127-127", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ChangesTheStateOfACreatedJob()", file="StateMachineFacts.cs"];
m13_112 [label="var stateMachine = CreateStateMachine()", span="129-129", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ChangesTheStateOfACreatedJob()", file="StateMachineFacts.cs"];
m13_113 [label="stateMachine.CreateInState(_job, _parameters, _state.Object)", span="131-131", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ChangesTheStateOfACreatedJob()", color=green, community=0, file="StateMachineFacts.cs"];
m13_114 [label="_process.Verify(x => x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(sc => sc.JobId == JobId && sc.Job == _job\r\n                    && sc.NewState == _state.Object && sc.OldStateName == null),\r\n                true))", span="133-137", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ChangesTheStateOfACreatedJob()", file="StateMachineFacts.cs"];
m13_115 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ChangesTheStateOfACreatedJob()", span="127-127", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateInState_ChangesTheStateOfACreatedJob()", file="StateMachineFacts.cs"];
m13_229 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheFailedState_IfMethodDataCouldNotBeResolved()", span="283-283", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheFailedState_IfMethodDataCouldNotBeResolved()", file="StateMachineFacts.cs"];
m13_230 [label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData\r\n                {\r\n                    State = OldStateName,\r\n                    Job = null,\r\n                    LoadException = new JobLoadException(''asd'', new InvalidOperationException())\r\n                })", span="286-292", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheFailedState_IfMethodDataCouldNotBeResolved()", file="StateMachineFacts.cs"];
m13_231 [label="var stateMachine = CreateStateMachine()", span="294-294", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheFailedState_IfMethodDataCouldNotBeResolved()", file="StateMachineFacts.cs"];
m13_232 [label="var result = stateMachine.ChangeState(JobId, _state.Object, FromOldState)", span="297-297", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheFailedState_IfMethodDataCouldNotBeResolved()", file="StateMachineFacts.cs"];
m13_233 [label="_process.Verify(x => x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(ctx => ctx.JobId == JobId && ctx.Job == null && ctx.NewState is FailedState),\r\n                true))", span="300-303", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheFailedState_IfMethodDataCouldNotBeResolved()", file="StateMachineFacts.cs"];
m13_234 [label="Assert.False(result)", span="305-305", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheFailedState_IfMethodDataCouldNotBeResolved()", file="StateMachineFacts.cs"];
m13_235 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheFailedState_IfMethodDataCouldNotBeResolved()", span="283-283", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheFailedState_IfMethodDataCouldNotBeResolved()", file="StateMachineFacts.cs"];
m13_283 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="StateMachineFacts.cs"];
m13_34 [label="Entry Unk.CreateWriteTransaction", span="", cluster="Unk.CreateWriteTransaction", file="StateMachineFacts.cs"];
m13_168 [label="Entry Unk.True", span="", cluster="Unk.True", file="StateMachineFacts.cs"];
m13_175 [label="Entry Unk.Equals", span="", cluster="Unk.Equals", file="StateMachineFacts.cs"];
m13_187 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenJobIsNotFound()", span="226-226", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenJobIsNotFound()", file="StateMachineFacts.cs"];
m13_188 [label="_connection.Setup(x => x.GetJobData(It.IsAny<string>()))\r\n                .Returns((JobData)null)", span="229-230", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenJobIsNotFound()", file="StateMachineFacts.cs"];
m13_189 [label="var stateMachine = CreateStateMachine()", span="232-232", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenJobIsNotFound()", file="StateMachineFacts.cs"];
m13_190 [label="var result = stateMachine.ChangeState(JobId, _state.Object, FromOldState)", span="235-235", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenJobIsNotFound()", file="StateMachineFacts.cs"];
m13_191 [label="Assert.False(result)", span="238-238", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenJobIsNotFound()", file="StateMachineFacts.cs"];
m13_192 [label="_connection.Verify(x => x.GetJobData(JobId))", span="239-239", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenJobIsNotFound()", file="StateMachineFacts.cs"];
m13_193 [label="_process.Verify(\r\n                x => x.ApplyState(It.IsAny<IWriteOnlyTransaction>(), It.IsAny<ApplyStateContext>(), It.IsAny<bool>()),\r\n                Times.Never)", span="241-243", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenJobIsNotFound()", file="StateMachineFacts.cs"];
m13_194 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenJobIsNotFound()", span="226-226", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenJobIsNotFound()", file="StateMachineFacts.cs"];
m13_236 [label="Entry Hangfire.Common.JobLoadException.JobLoadException(string, System.Exception)", span="33-33", cluster="Hangfire.Common.JobLoadException.JobLoadException(string, System.Exception)", file="StateMachineFacts.cs"];
m13_291 [label="Entry Unk.Callback", span="", cluster="Unk.Callback", file="StateMachineFacts.cs"];
m13_19 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="StateMachineFacts.cs"];
m13_104 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="StateMachineFacts.cs"];
m13_20 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="StateMachineFacts.cs"];
m13_43 [label="Entry Unk.GetJobData", span="", cluster="Unk.GetJobData", file="StateMachineFacts.cs"];
m13_119 [label="Entry Unk.ApplyState", span="", cluster="Unk.ApplyState", file="StateMachineFacts.cs"];
m13_15 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="148-148", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="StateMachineFacts.cs"];
m13_325 [label="Hangfire.Core.Tests.States.StateMachineFacts", span="", file="StateMachineFacts.cs"];
m13_326 [label=stateMachine, span="", file="StateMachineFacts.cs"];
m13_327 [label=stateMachine, span="", file="StateMachineFacts.cs"];
m13_328 [label=stateMachine, span="", file="StateMachineFacts.cs"];
m13_329 [label=job, span="", file="StateMachineFacts.cs"];
m13_330 [label=stateMachine, span="", file="StateMachineFacts.cs"];
m13_331 [label=stateMachine, span="", file="StateMachineFacts.cs"];
m13_332 [label=stateMachine, span="", file="StateMachineFacts.cs"];
m13_333 [label=anotherState, span="", file="StateMachineFacts.cs"];
m13_334 [label=exception, span="", file="StateMachineFacts.cs"];
d65 -> d65  [key=3, color=green, style=bold, label="Local variable string enqueueJobSql"];
d65 -> d66  [key=0, style=solid, color=green];
d65 -> d67  [key=2, style=dotted, color=green];
d65 -> d68  [key=1, style=dashed, color=green, label="lambda expression"];
d407 -> d65  [key=1, style=dashed, color=green, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d20  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d30  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d38  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d50  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d107  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d117  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d126  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d146  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d155  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d166  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d177  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d188  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d200  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d210  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d221  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d231  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d239  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d248  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d259  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d268  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d276  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d285  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d297  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d307  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d325  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d336  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d346  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d357  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d373  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d407 -> d385  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d64 -> d65  [key=0, style=solid, color=green];
d66 -> d64  [key=0, style=bold, color=blue];
d68 -> d69  [key=0, style=solid, color=green];
d68 -> d72  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d68 -> d83  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d69 -> d70  [key=0, style=solid, color=green];
d69 -> d59  [key=2, style=dotted, color=green];
d69 -> d47  [key=2, style=dotted, color=green];
d69 -> d87  [key=2, style=dotted, color=green];
d69 -> d48  [key=2, style=dotted, color=green];
d69 -> d97  [key=1, style=dashed, color=green, label="lambda expression"];
d69 -> d71  [key=1, style=dashed, color=green, label=jobId];
d69 -> d73  [key=1, style=dashed, color=green, label=jobId];
d69 -> d83  [key=1, style=dashed, color=green, label=jobId];
d70 -> d71  [key=0, style=solid, color=green];
d70 -> d28  [key=2, style=dotted, color=green];
d97 -> d98  [key=0, style=solid];
d71 -> d72  [key=0, style=solid];
d71 -> d88  [key=2, style=dotted];
d73 -> d74  [key=0, style=solid];
d73 -> d91  [key=2, style=dotted];
d73 -> d5  [key=2, style=dotted];
d83 -> d84  [key=0, style=solid];
d83 -> d89  [key=2, style=dotted];
d83 -> d96  [key=2, style=dotted];
d83 -> d100  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d83 -> d103  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d83 -> d85  [key=1, style=dashed, color=darkseagreen4, label=parameters];
d20 -> d21  [key=0, style=solid];
d20 -> d22  [key=2, style=dotted];
d20 -> d23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d30 -> d30  [key=3, color=darkorchid, style=bold, label="Local variable Hangfire.SqlServer.SqlServerJobQueue.FetchedJob fetchedJob"];
d30 -> d31  [key=0, style=solid];
d30 -> d22  [key=2, style=dotted];
d30 -> d32  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d38 -> d39  [key=0, style=solid];
d38 -> d22  [key=2, style=dotted];
d38 -> d40  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d50 -> d51  [key=0, style=solid];
d50 -> d22  [key=2, style=dotted];
d50 -> d52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d107 -> d108  [key=0, style=solid];
d107 -> d22  [key=2, style=dotted];
d107 -> d109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d117 -> d118  [key=0, style=solid];
d117 -> d22  [key=2, style=dotted];
d117 -> d119  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d126 -> d67  [key=2, style=dotted];
d126 -> d127  [key=0, style=solid];
d126 -> d128  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d146 -> d67  [key=2, style=dotted];
d146 -> d147  [key=0, style=solid];
d146 -> d148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d155 -> d156  [key=0, style=solid];
d155 -> d22  [key=2, style=dotted];
d155 -> d157  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d166 -> d167  [key=0, style=solid];
d166 -> d22  [key=2, style=dotted];
d166 -> d168  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d177 -> d67  [key=2, style=dotted];
d177 -> d178  [key=0, style=solid];
d177 -> d179  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d188 -> d67  [key=2, style=dotted];
d188 -> d189  [key=0, style=solid];
d188 -> d190  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d200 -> d67  [key=2, style=dotted];
d200 -> d201  [key=0, style=solid];
d200 -> d202  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d210 -> d211  [key=0, style=solid];
d210 -> d22  [key=2, style=dotted];
d210 -> d212  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d221 -> d222  [key=0, style=solid];
d221 -> d22  [key=2, style=dotted];
d221 -> d223  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d231 -> d232  [key=0, style=solid];
d231 -> d22  [key=2, style=dotted];
d231 -> d233  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d239 -> d67  [key=2, style=dotted];
d239 -> d240  [key=0, style=solid];
d239 -> d241  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d248 -> d249  [key=0, style=solid];
d248 -> d22  [key=2, style=dotted];
d248 -> d250  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d259 -> d260  [key=0, style=solid];
d259 -> d22  [key=2, style=dotted];
d259 -> d261  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d268 -> d269  [key=0, style=solid];
d268 -> d22  [key=2, style=dotted];
d268 -> d270  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d276 -> d67  [key=2, style=dotted];
d276 -> d277  [key=0, style=solid];
d276 -> d278  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d285 -> d286  [key=0, style=solid];
d285 -> d22  [key=2, style=dotted];
d285 -> d287  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d297 -> d298  [key=0, style=solid];
d297 -> d22  [key=2, style=dotted];
d297 -> d299  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d307 -> d67  [key=2, style=dotted];
d307 -> d308  [key=0, style=solid];
d307 -> d309  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d325 -> d326  [key=0, style=solid];
d325 -> d22  [key=2, style=dotted];
d325 -> d327  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d336 -> d67  [key=2, style=dotted];
d336 -> d337  [key=0, style=solid];
d336 -> d338  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d346 -> d347  [key=0, style=solid];
d346 -> d22  [key=2, style=dotted];
d346 -> d348  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d357 -> d67  [key=2, style=dotted];
d357 -> d358  [key=0, style=solid];
d357 -> d359  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d373 -> d374  [key=0, style=solid];
d373 -> d22  [key=2, style=dotted];
d373 -> d375  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d385 -> d67  [key=2, style=dotted];
d385 -> d386  [key=0, style=solid];
d385 -> d387  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d86 -> d68  [key=0, style=bold, color=blue];
d72 -> d73  [key=0, style=solid];
d72 -> d89  [key=2, style=dotted];
d72 -> d90  [key=2, style=dotted];
d72 -> d74  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
d72 -> d75  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
d72 -> d76  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
d72 -> d77  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
d72 -> d82  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
d57 -> d59  [key=2, style=dotted];
d57 -> d48  [key=2, style=dotted];
d57 -> d58  [key=0, style=solid];
d57 -> d60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d129 -> d59  [key=2, style=dotted];
d129 -> d130  [key=0, style=solid];
d129 -> d141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d45 -> d47  [key=2, style=dotted];
d45 -> d48  [key=2, style=dotted];
d45 -> d46  [key=0, style=solid];
d99 -> d97  [key=0, style=bold, color=blue];
d98 -> d99  [key=0, style=solid];
d98 -> d63  [key=2, style=dotted];
d74 -> d75  [key=0, style=solid];
d74 -> d5  [key=2, style=dotted];
d82 -> d83  [key=0, style=solid];
d82 -> d94  [key=2, style=dotted];
d82 -> d95  [key=2, style=dotted];
d84 -> d5  [key=2, style=dotted];
d84 -> d85  [key=0, style=solid];
d100 -> d101  [key=0, style=solid];
d103 -> d104  [key=0, style=solid];
d85 -> d86  [key=0, style=solid];
d85 -> d5  [key=2, style=dotted];
d25 -> d28  [key=2, style=dotted];
d25 -> d26  [key=0, style=solid];
d34 -> d28  [key=2, style=dotted];
d34 -> d35  [key=0, style=solid];
d132 -> d28  [key=2, style=dotted];
d132 -> d133  [key=0, style=solid];
d133 -> d28  [key=2, style=dotted];
d133 -> d134  [key=0, style=solid];
d151 -> d28  [key=2, style=dotted];
d151 -> d152  [key=0, style=solid];
d315 -> d28  [key=2, style=dotted];
d315 -> d316  [key=0, style=solid];
d19 -> d20  [key=0, style=solid];
d21 -> d19  [key=0, style=bold, color=blue];
d23 -> d24  [key=0, style=solid];
d27 -> d30  [key=3, color=darkorchid, style=bold, label="Local variable SqlConnection connection"];
d29 -> d30  [key=0, style=solid];
d31 -> d29  [key=0, style=bold, color=blue];
d32 -> d33  [key=0, style=solid];
d37 -> d38  [key=0, style=solid];
d39 -> d37  [key=0, style=bold, color=blue];
d40 -> d45  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d40 -> d41  [key=0, style=solid];
d49 -> d50  [key=0, style=solid];
d51 -> d49  [key=0, style=bold, color=blue];
d52 -> d57  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d52 -> d53  [key=0, style=solid];
d106 -> d107  [key=0, style=solid];
d108 -> d106  [key=0, style=bold, color=blue];
d109 -> d110  [key=0, style=solid];
d109 -> d113  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d116 -> d117  [key=0, style=solid];
d118 -> d116  [key=0, style=bold, color=blue];
d119 -> d120  [key=0, style=solid];
d125 -> d126  [key=0, style=solid];
d125 -> d130  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d127 -> d124  [key=0, style=bold, color=blue];
d128 -> d129  [key=0, style=solid];
d128 -> d130  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d128 -> d131  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d145 -> d146  [key=0, style=solid];
d145 -> d149  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d147 -> d144  [key=0, style=bold, color=blue];
d148 -> d149  [key=0, style=solid];
d148 -> d150  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d154 -> d155  [key=0, style=solid];
d156 -> d154  [key=0, style=bold, color=blue];
d157 -> d158  [key=0, style=solid];
d157 -> d162  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d165 -> d166  [key=0, style=solid];
d167 -> d165  [key=0, style=bold, color=blue];
d168 -> d169  [key=0, style=solid];
d168 -> d173  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d176 -> d177  [key=0, style=solid];
d176 -> d180  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d178 -> d175  [key=0, style=bold, color=blue];
d179 -> d180  [key=0, style=solid];
d179 -> d182  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d179 -> d183  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d187 -> d188  [key=0, style=solid];
d187 -> d191  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d189 -> d186  [key=0, style=bold, color=blue];
d190 -> d191  [key=0, style=solid];
d190 -> d193  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d190 -> d194  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d190 -> d195  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d199 -> d200  [key=0, style=solid];
d199 -> d203  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d201 -> d198  [key=0, style=bold, color=blue];
d202 -> d203  [key=0, style=solid];
d202 -> d205  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d202 -> d206  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d209 -> d210  [key=0, style=solid];
d211 -> d209  [key=0, style=bold, color=blue];
d212 -> d213  [key=0, style=solid];
d212 -> d217  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d220 -> d221  [key=0, style=solid];
d222 -> d220  [key=0, style=bold, color=blue];
d223 -> d224  [key=0, style=solid];
d223 -> d228  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d230 -> d231  [key=0, style=solid];
d232 -> d230  [key=0, style=bold, color=blue];
d233 -> d234  [key=0, style=solid];
d238 -> d239  [key=0, style=solid];
d238 -> d242  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d240 -> d237  [key=0, style=bold, color=blue];
d241 -> d242  [key=0, style=solid];
d241 -> d243  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d247 -> d248  [key=0, style=solid];
d249 -> d247  [key=0, style=bold, color=blue];
d250 -> d251  [key=0, style=solid];
d250 -> d255  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d258 -> d259  [key=0, style=solid];
d260 -> d258  [key=0, style=bold, color=blue];
d261 -> d262  [key=0, style=solid];
d261 -> d265  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d267 -> d268  [key=0, style=solid];
d269 -> d267  [key=0, style=bold, color=blue];
d270 -> d271  [key=0, style=solid];
d275 -> d276  [key=0, style=solid];
d275 -> d279  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d277 -> d274  [key=0, style=bold, color=blue];
d278 -> d279  [key=0, style=solid];
d278 -> d280  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d284 -> d285  [key=0, style=solid];
d286 -> d284  [key=0, style=bold, color=blue];
d287 -> d288  [key=0, style=solid];
d287 -> d292  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d296 -> d297  [key=0, style=solid];
d298 -> d296  [key=0, style=bold, color=blue];
d299 -> d300  [key=0, style=solid];
d299 -> d304  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d306 -> d307  [key=0, style=solid];
d308 -> d306  [key=0, style=bold, color=blue];
d309 -> d310  [key=0, style=solid];
d309 -> d311  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d309 -> d312  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d309 -> d317  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d309 -> d318  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d324 -> d325  [key=0, style=solid];
d326 -> d324  [key=0, style=bold, color=blue];
d327 -> d328  [key=0, style=solid];
d327 -> d331  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d335 -> d336  [key=0, style=solid];
d335 -> d339  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d337 -> d334  [key=0, style=bold, color=blue];
d338 -> d339  [key=0, style=solid];
d338 -> d340  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d338 -> d341  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d345 -> d346  [key=0, style=solid];
d347 -> d345  [key=0, style=bold, color=blue];
d348 -> d349  [key=0, style=solid];
d348 -> d352  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d356 -> d357  [key=0, style=solid];
d356 -> d360  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d358 -> d355  [key=0, style=bold, color=blue];
d359 -> d360  [key=0, style=solid];
d359 -> d361  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d359 -> d362  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d372 -> d373  [key=0, style=solid];
d374 -> d372  [key=0, style=bold, color=blue];
d375 -> d376  [key=0, style=solid];
d375 -> d379  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d384 -> d385  [key=0, style=solid];
d384 -> d388  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d386 -> d383  [key=0, style=bold, color=blue];
d387 -> d388  [key=0, style=solid];
d387 -> d389  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d387 -> d390  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d75 -> d5  [key=2, style=dotted];
d75 -> d76  [key=0, style=solid];
d76 -> d77  [key=0, style=solid];
d76 -> d92  [key=2, style=dotted];
d76 -> d78  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
d77 -> d78  [key=0, style=solid];
d409 -> d57  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d56 -> d57  [key=0, style=solid];
d58 -> d56  [key=0, style=bold, color=blue];
d60 -> d61  [key=0, style=solid];
d130 -> d89  [key=2, style=dotted];
d130 -> d90  [key=2, style=dotted];
d130 -> d131  [key=0, style=solid];
d130 -> d138  [key=2, style=dotted];
d130 -> d139  [key=2, style=dotted];
d141 -> d142  [key=0, style=solid];
d408 -> d45  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d44 -> d45  [key=0, style=solid];
d46 -> d44  [key=0, style=bold, color=blue];
d63 -> d406  [key=0, style=solid];
d181 -> d91  [key=2, style=dotted];
d181 -> d182  [key=0, style=solid];
d181 -> d183  [key=1, style=dashed, color=darkseagreen4, label=jobId];
d192 -> d91  [key=2, style=dotted];
d192 -> d193  [key=0, style=solid];
d192 -> d194  [key=1, style=dashed, color=darkseagreen4, label=jobId];
d192 -> d195  [key=1, style=dashed, color=darkseagreen4, label=jobId];
d204 -> d91  [key=2, style=dotted];
d204 -> d205  [key=0, style=solid];
d204 -> d206  [key=1, style=dashed, color=darkseagreen4, label=jobId];
d243 -> d91  [key=2, style=dotted];
d243 -> d244  [key=0, style=solid];
d243 -> d246  [key=2, style=dotted];
d2 -> d5  [key=2, style=dotted];
d2 -> d3  [key=0, style=solid];
d13 -> d5  [key=2, style=dotted];
d13 -> d14  [key=0, style=solid];
d42 -> d5  [key=2, style=dotted];
d42 -> d43  [key=0, style=solid];
d54 -> d5  [key=2, style=dotted];
d54 -> d55  [key=0, style=solid];
d79 -> d5  [key=2, style=dotted];
d79 -> d80  [key=0, style=solid];
d80 -> d5  [key=2, style=dotted];
d80 -> d81  [key=0, style=solid];
d81 -> d5  [key=2, style=dotted];
d81 -> d82  [key=0, style=solid];
d134 -> d5  [key=2, style=dotted];
d134 -> d135  [key=0, style=solid];
d135 -> d5  [key=2, style=dotted];
d135 -> d136  [key=0, style=solid];
d159 -> d5  [key=2, style=dotted];
d159 -> d160  [key=0, style=solid];
d170 -> d5  [key=2, style=dotted];
d170 -> d171  [key=0, style=solid];
d184 -> d5  [key=2, style=dotted];
d184 -> d185  [key=0, style=solid];
d196 -> d5  [key=2, style=dotted];
d196 -> d197  [key=0, style=solid];
d207 -> d5  [key=2, style=dotted];
d207 -> d208  [key=0, style=solid];
d214 -> d5  [key=2, style=dotted];
d214 -> d215  [key=0, style=solid];
d225 -> d5  [key=2, style=dotted];
d225 -> d226  [key=0, style=solid];
d244 -> d5  [key=2, style=dotted];
d244 -> d245  [key=0, style=solid];
d252 -> d5  [key=2, style=dotted];
d252 -> d253  [key=0, style=solid];
d281 -> d5  [key=2, style=dotted];
d281 -> d282  [key=0, style=solid];
d289 -> d5  [key=2, style=dotted];
d289 -> d290  [key=0, style=solid];
d301 -> d5  [key=2, style=dotted];
d301 -> d302  [key=0, style=solid];
d313 -> d5  [key=2, style=dotted];
d313 -> d314  [key=0, style=solid];
d319 -> d5  [key=2, style=dotted];
d319 -> d320  [key=0, style=solid];
d364 -> d5  [key=2, style=dotted];
d364 -> d365  [key=0, style=solid];
d391 -> d5  [key=2, style=dotted];
d391 -> d392  [key=0, style=solid];
d149 -> d89  [key=2, style=dotted];
d149 -> d90  [key=2, style=dotted];
d149 -> d150  [key=0, style=solid];
d149 -> d153  [key=2, style=dotted];
d149 -> d139  [key=2, style=dotted];
d180 -> d89  [key=2, style=dotted];
d180 -> d90  [key=2, style=dotted];
d180 -> d181  [key=0, style=solid];
d183 -> d89  [key=2, style=dotted];
d183 -> d90  [key=2, style=dotted];
d183 -> d184  [key=0, style=solid];
d191 -> d89  [key=2, style=dotted];
d191 -> d90  [key=2, style=dotted];
d191 -> d192  [key=0, style=solid];
d195 -> d89  [key=2, style=dotted];
d195 -> d90  [key=2, style=dotted];
d195 -> d196  [key=0, style=solid];
d203 -> d89  [key=2, style=dotted];
d203 -> d90  [key=2, style=dotted];
d203 -> d204  [key=0, style=solid];
d206 -> d89  [key=2, style=dotted];
d206 -> d90  [key=2, style=dotted];
d206 -> d207  [key=0, style=solid];
d312 -> d89  [key=2, style=dotted];
d312 -> d315  [key=1, style=dashed, color=darkseagreen4, label=server];
d312 -> d90  [key=2, style=dotted];
d312 -> d313  [key=0, style=solid];
d312 -> d314  [key=1, style=dashed, color=darkseagreen4, label=server];
d318 -> d89  [key=2, style=dotted];
d318 -> d90  [key=2, style=dotted];
d318 -> d319  [key=0, style=solid];
d318 -> d320  [key=1, style=dashed, color=darkseagreen4, label=sameServer];
d341 -> d89  [key=2, style=dotted];
d341 -> d90  [key=2, style=dotted];
d341 -> d342  [key=0, style=solid];
d362 -> d89  [key=2, style=dotted];
d362 -> d96  [key=2, style=dotted];
d362 -> d364  [key=1, style=dashed, color=darkseagreen4, label=servers];
d362 -> d363  [key=0, style=solid];
d362 -> d366  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d362 -> d369  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d390 -> d89  [key=2, style=dotted];
d390 -> d90  [key=2, style=dotted];
d390 -> d391  [key=0, style=solid];
d102 -> d100  [key=0, style=bold, color=blue];
d101 -> d102  [key=0, style=solid];
d105 -> d103  [key=0, style=bold, color=blue];
d104 -> d105  [key=0, style=solid];
d24 -> d25  [key=0, style=solid];
d24 -> d27  [key=2, style=dotted];
d26 -> d23  [key=0, style=bold, color=blue];
d33 -> d34  [key=0, style=solid];
d33 -> d36  [key=2, style=dotted];
d35 -> d32  [key=0, style=bold, color=blue];
d131 -> d132  [key=0, style=solid];
d131 -> d133  [key=1, style=dashed, color=darkseagreen4, label=result];
d131 -> d134  [key=1, style=dashed, color=darkseagreen4, label=result];
d131 -> d135  [key=1, style=dashed, color=darkseagreen4, label=result];
d131 -> d140  [key=2, style=dotted];
d131 -> d115  [key=2, style=dotted];
d131 -> d136  [key=1, style=dashed, color=darkseagreen4, label=result];
d150 -> d151  [key=0, style=solid];
d150 -> d140  [key=2, style=dotted];
d150 -> d115  [key=2, style=dotted];
d152 -> d148  [key=0, style=bold, color=blue];
d314 -> d315  [key=0, style=solid];
d314 -> d95  [key=2, style=dotted];
d314 -> d322  [key=2, style=dotted];
d316 -> d317  [key=0, style=solid];
d316 -> d294  [key=2, style=dotted];
d92 -> d19  [key=3, color=darkorchid, style=bold, label="Field variable Hangfire.SqlServer.SqlServerStorage _storage"];
d92 -> d49  [key=3, color=darkorchid, style=bold, label="Field variable Hangfire.Client.IJobCreationProcess _process"];
d43 -> d40  [key=0, style=bold, color=blue];
d41 -> d44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d41 -> d42  [key=0, style=solid];
d41 -> d4  [key=2, style=dotted];
d55 -> d52  [key=0, style=bold, color=blue];
d53 -> d56  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d53 -> d54  [key=0, style=solid];
d53 -> d4  [key=2, style=dotted];
d111 -> d109  [key=0, style=bold, color=blue];
d110 -> d111  [key=0, style=solid];
d110 -> d4  [key=2, style=dotted];
d110 -> d112  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d113 -> d114  [key=0, style=solid];
d113 -> d115  [key=2, style=dotted];
d122 -> d119  [key=0, style=bold, color=blue];
d120 -> d121  [key=0, style=solid];
d120 -> d115  [key=2, style=dotted];
d124 -> d125  [key=0, style=solid];
d137 -> d128  [key=0, style=bold, color=blue];
d144 -> d145  [key=0, style=solid];
d160 -> d157  [key=0, style=bold, color=blue];
d158 -> d159  [key=0, style=solid];
d158 -> d4  [key=2, style=dotted];
d158 -> d161  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d162 -> d163  [key=0, style=solid];
d162 -> d164  [key=2, style=dotted];
d171 -> d168  [key=0, style=bold, color=blue];
d169 -> d170  [key=0, style=solid];
d169 -> d4  [key=2, style=dotted];
d169 -> d172  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d173 -> d174  [key=0, style=solid];
d173 -> d164  [key=2, style=dotted];
d175 -> d176  [key=0, style=solid];
d185 -> d179  [key=0, style=bold, color=blue];
d182 -> d183  [key=0, style=solid];
d182 -> d164  [key=2, style=dotted];
d186 -> d187  [key=0, style=solid];
d197 -> d190  [key=0, style=bold, color=blue];
d193 -> d194  [key=0, style=solid];
d193 -> d164  [key=2, style=dotted];
d194 -> d195  [key=0, style=solid];
d194 -> d164  [key=2, style=dotted];
d198 -> d199  [key=0, style=solid];
d208 -> d202  [key=0, style=bold, color=blue];
d205 -> d206  [key=0, style=solid];
d205 -> d164  [key=2, style=dotted];
d215 -> d212  [key=0, style=bold, color=blue];
d213 -> d214  [key=0, style=solid];
d213 -> d4  [key=2, style=dotted];
d213 -> d216  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d217 -> d218  [key=0, style=solid];
d217 -> d219  [key=2, style=dotted];
d226 -> d223  [key=0, style=bold, color=blue];
d224 -> d225  [key=0, style=solid];
d224 -> d4  [key=2, style=dotted];
d224 -> d227  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d228 -> d229  [key=0, style=solid];
d228 -> d219  [key=2, style=dotted];
d236 -> d233  [key=0, style=bold, color=blue];
d234 -> d235  [key=0, style=solid];
d234 -> d219  [key=2, style=dotted];
d237 -> d238  [key=0, style=solid];
d242 -> d90  [key=2, style=dotted];
d242 -> d243  [key=0, style=solid];
d242 -> d4  [key=2, style=dotted];
d245 -> d241  [key=0, style=bold, color=blue];
d253 -> d250  [key=0, style=bold, color=blue];
d251 -> d252  [key=0, style=solid];
d251 -> d4  [key=2, style=dotted];
d251 -> d254  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d255 -> d256  [key=0, style=solid];
d255 -> d257  [key=2, style=dotted];
d263 -> d261  [key=0, style=bold, color=blue];
d262 -> d263  [key=0, style=solid];
d262 -> d4  [key=2, style=dotted];
d262 -> d264  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d265 -> d266  [key=0, style=solid];
d265 -> d257  [key=2, style=dotted];
d273 -> d270  [key=0, style=bold, color=blue];
d271 -> d272  [key=0, style=solid];
d271 -> d257  [key=2, style=dotted];
d274 -> d275  [key=0, style=solid];
d279 -> d280  [key=0, style=solid];
d279 -> d283  [key=2, style=dotted];
d282 -> d278  [key=0, style=bold, color=blue];
d280 -> d281  [key=0, style=solid];
d280 -> d257  [key=2, style=dotted];
d290 -> d287  [key=0, style=bold, color=blue];
d288 -> d289  [key=0, style=solid];
d288 -> d4  [key=2, style=dotted];
d288 -> d291  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d292 -> d293  [key=0, style=solid];
d292 -> d294  [key=2, style=dotted];
d292 -> d295  [key=2, style=dotted];
d302 -> d299  [key=0, style=bold, color=blue];
d300 -> d301  [key=0, style=solid];
d300 -> d4  [key=2, style=dotted];
d300 -> d303  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d304 -> d305  [key=0, style=solid];
d304 -> d295  [key=2, style=dotted];
d321 -> d309  [key=0, style=bold, color=blue];
d310 -> d311  [key=0, style=solid];
d310 -> d294  [key=2, style=dotted];
d311 -> d312  [key=0, style=solid];
d311 -> d295  [key=2, style=dotted];
d317 -> d318  [key=0, style=solid];
d317 -> d295  [key=2, style=dotted];
d329 -> d327  [key=0, style=bold, color=blue];
d328 -> d329  [key=0, style=solid];
d328 -> d4  [key=2, style=dotted];
d328 -> d330  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d331 -> d332  [key=0, style=solid];
d331 -> d333  [key=2, style=dotted];
d334 -> d335  [key=0, style=solid];
d339 -> d340  [key=0, style=solid];
d339 -> d283  [key=2, style=dotted];
d343 -> d338  [key=0, style=bold, color=blue];
d340 -> d341  [key=0, style=solid];
d340 -> d333  [key=2, style=dotted];
d350 -> d348  [key=0, style=bold, color=blue];
d349 -> d350  [key=0, style=solid];
d349 -> d4  [key=2, style=dotted];
d349 -> d351  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d352 -> d353  [key=0, style=solid];
d352 -> d354  [key=2, style=dotted];
d355 -> d356  [key=0, style=solid];
d360 -> d361  [key=0, style=solid];
d360 -> d283  [key=2, style=dotted];
d365 -> d359  [key=0, style=bold, color=blue];
d361 -> d362  [key=0, style=solid];
d361 -> d354  [key=2, style=dotted];
d377 -> d375  [key=0, style=bold, color=blue];
d376 -> d377  [key=0, style=solid];
d376 -> d4  [key=2, style=dotted];
d376 -> d378  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d379 -> d380  [key=0, style=solid];
d379 -> d381  [key=2, style=dotted];
d379 -> d382  [key=2, style=dotted];
d383 -> d384  [key=0, style=solid];
d388 -> d94  [key=2, style=dotted];
d388 -> d389  [key=0, style=solid];
d388 -> d393  [key=2, style=dotted];
d388 -> d283  [key=2, style=dotted];
d392 -> d387  [key=0, style=bold, color=blue];
d389 -> d390  [key=0, style=solid];
d389 -> d394  [key=2, style=dotted];
d389 -> d382  [key=2, style=dotted];
d78 -> d79  [key=0, style=solid];
d78 -> d80  [key=1, style=dashed, color=darkseagreen4, label=job];
d78 -> d81  [key=1, style=dashed, color=darkseagreen4, label=job];
d78 -> d93  [key=2, style=dotted];
d62 -> d60  [key=0, style=bold, color=blue];
d61 -> d63  [key=2, style=dotted];
d61 -> d62  [key=0, style=solid];
d411 -> d130  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d143 -> d141  [key=0, style=bold, color=blue];
d142 -> d63  [key=2, style=dotted];
d142 -> d143  [key=0, style=solid];
d406 -> d63  [key=0, style=bold, color=blue];
d1 -> d2  [key=0, style=solid];
d1 -> d4  [key=2, style=dotted];
d1 -> d6  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d3 -> d0  [key=0, style=bold, color=blue];
d12 -> d13  [key=0, style=solid];
d12 -> d4  [key=2, style=dotted];
d12 -> d15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d14 -> d11  [key=0, style=bold, color=blue];
d136 -> d137  [key=0, style=solid];
d136 -> d123  [key=2, style=dotted];
d320 -> d321  [key=0, style=solid];
d320 -> d323  [key=2, style=dotted];
d363 -> d364  [key=0, style=solid];
d363 -> d344  [key=2, style=dotted];
d412 -> d149  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d415 -> d180  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d416 -> d191  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d417 -> d203  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d342 -> d343  [key=0, style=solid];
d342 -> d344  [key=2, style=dotted];
d366 -> d367  [key=0, style=solid];
d369 -> d370  [key=0, style=solid];
d112 -> d113  [key=0, style=solid];
d410 -> d113  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d114 -> d112  [key=0, style=bold, color=blue];
d121 -> d122  [key=0, style=solid];
d121 -> d123  [key=2, style=dotted];
d161 -> d162  [key=0, style=solid];
d413 -> d162  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d163 -> d161  [key=0, style=bold, color=blue];
d172 -> d173  [key=0, style=solid];
d414 -> d173  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d174 -> d172  [key=0, style=bold, color=blue];
d216 -> d217  [key=0, style=solid];
d418 -> d217  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d218 -> d216  [key=0, style=bold, color=blue];
d227 -> d228  [key=0, style=solid];
d419 -> d228  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d229 -> d227  [key=0, style=bold, color=blue];
d235 -> d236  [key=0, style=solid];
d235 -> d123  [key=2, style=dotted];
d420 -> d242  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d254 -> d255  [key=0, style=solid];
d421 -> d255  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d256 -> d254  [key=0, style=bold, color=blue];
d264 -> d265  [key=0, style=solid];
d422 -> d265  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d266 -> d264  [key=0, style=bold, color=blue];
d272 -> d273  [key=0, style=solid];
d272 -> d123  [key=2, style=dotted];
d423 -> d279  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d291 -> d292  [key=0, style=solid];
d424 -> d292  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d293 -> d291  [key=0, style=bold, color=blue];
d303 -> d304  [key=0, style=solid];
d425 -> d304  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d305 -> d303  [key=0, style=bold, color=blue];
d330 -> d331  [key=0, style=solid];
d426 -> d331  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d332 -> d330  [key=0, style=bold, color=blue];
d427 -> d339  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d351 -> d352  [key=0, style=solid];
d428 -> d352  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d353 -> d351  [key=0, style=bold, color=blue];
d429 -> d360  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d378 -> d379  [key=0, style=solid];
d430 -> d379  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d380 -> d378  [key=0, style=bold, color=blue];
d431 -> d388  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d0 -> d1  [key=0, style=solid];
d6 -> d7  [key=0, style=solid];
d11 -> d12  [key=0, style=solid];
d15 -> d16  [key=0, style=solid];
d368 -> d366  [key=0, style=bold, color=blue];
d367 -> d368  [key=0, style=solid];
d371 -> d369  [key=0, style=bold, color=blue];
d370 -> d371  [key=0, style=solid];
d8 -> d6  [key=0, style=bold, color=blue];
d7 -> d8  [key=0, style=solid];
d7 -> d9  [key=2, style=dotted];
d7 -> d10  [key=2, style=dotted];
d17 -> d15  [key=0, style=bold, color=blue];
d16 -> d17  [key=0, style=solid];
d16 -> d9  [key=2, style=dotted];
d16 -> d18  [key=2, style=dotted];
d397 -> d9  [key=2, style=dotted];
d397 -> d10  [key=2, style=dotted];
d397 -> d398  [key=0, style=solid];
d402 -> d9  [key=2, style=dotted];
d402 -> d10  [key=2, style=dotted];
d402 -> d18  [key=2, style=dotted];
d402 -> d403  [key=0, style=solid];
d396 -> d18  [key=2, style=dotted];
d396 -> d397  [key=0, style=solid];
d396 -> d398  [key=1, style=dashed, color=darkseagreen4, label=sqlConnection];
d398 -> d399  [key=0, style=solid];
d398 -> d400  [key=2, style=dotted];
d401 -> d402  [key=0, style=solid];
d401 -> d403  [key=1, style=dashed, color=darkseagreen4, label="System.Action<HangFire.SqlServer.SqlServerConnection>"];
d403 -> d404  [key=0, style=solid];
d403 -> d405  [key=2, style=dotted];
d395 -> d396  [key=0, style=solid];
d395 -> d398  [key=1, style=dashed, color=darkseagreen4, label="System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>"];
d399 -> d395  [key=0, style=bold, color=blue];
d404 -> d401  [key=0, style=bold, color=blue];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.PerformingContext"];
m0_52 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.PerformingContext"];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_30  [key=2, style=dotted];
m0_54 -> m0_55  [key=0, style=solid, color=red];
m0_54 -> m0_30  [key=2, style=dotted];
m0_56 -> m0_57  [key=0, style=solid];
m0_55 -> m0_56  [key=0, style=solid, color=red];
m0_55 -> m0_57  [key=0, style=solid, color=red];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_31  [key=2, style=dotted];
m0_57 -> m0_32  [key=2, style=dotted];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_60  [key=0, style=solid];
m0_59 -> m0_60  [key=0, style=solid];
m0_59 -> m0_36  [key=2, style=dotted];
m0_60 -> m0_52  [key=0, style=bold, color=blue];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_63  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.PerformedContext"];
m0_61 -> m0_64  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.PerformedContext"];
m0_61 -> m0_66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.PerformedContext"];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_30  [key=2, style=dotted];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_30  [key=2, style=dotted];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_31  [key=2, style=dotted];
m0_64 -> m0_32  [key=2, style=dotted];
m0_66 -> m0_67  [key=0, style=solid];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_67  [key=0, style=solid];
m0_67 -> m0_61  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_2  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.ICollection<string>"];
m0_0 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_0 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_0 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_0 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m0_0 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m0_0 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m0_1 -> m0_2  [key=0, style=solid];
m0_2 -> m0_3  [key=0, style=solid];
m0_3 -> m0_4  [key=0, style=solid];
m0_4 -> m0_5  [key=0, style=solid];
m0_5 -> m0_6  [key=0, style=solid];
m0_6 -> m0_7  [key=0, style=solid];
m0_7 -> m0_8  [key=0, style=solid];
m0_8 -> m0_9  [key=0, style=solid];
m0_9 -> m0_0  [key=0, style=bold, color=blue];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.CreatedContext"];
m0_37 -> m0_40  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.CreatedContext"];
m0_37 -> m0_41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.CreatedContext"];
m0_37 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.CreatedContext"];
m0_37 -> m0_45  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.CreatedContext"];
m0_37 -> m0_48  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.CreatedContext"];
m0_37 -> m0_50  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.CreatedContext"];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_30  [key=2, style=dotted];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_30  [key=2, style=dotted];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_30  [key=2, style=dotted];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_30  [key=2, style=dotted];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_31  [key=2, style=dotted];
m0_42 -> m0_32  [key=2, style=dotted];
m0_45 -> m0_44  [key=0, style=solid];
m0_45 -> m0_33  [key=2, style=dotted];
m0_45 -> m0_45  [key=1, style=dashed, color=darkseagreen4, label=parameter];
m0_48 -> m0_47  [key=0, style=solid];
m0_48 -> m0_34  [key=2, style=dotted];
m0_48 -> m0_35  [key=2, style=dotted];
m0_48 -> m0_48  [key=1, style=dashed, color=darkseagreen4, label=parameter];
m0_50 -> m0_51  [key=0, style=solid];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_46  [key=0, style=solid];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_46  [key=0, style=solid];
m0_46 -> m0_47  [key=0, style=solid];
m0_46 -> m0_49  [key=0, style=solid];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_49  [key=0, style=solid];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_51  [key=0, style=solid];
m0_51 -> m0_37  [key=0, style=bold, color=blue];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.CreatingContext"];
m0_10 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.CreatingContext"];
m0_10 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.CreatingContext"];
m0_10 -> m0_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.CreatingContext"];
m0_10 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.CreatingContext"];
m0_10 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.CreatingContext"];
m0_10 -> m0_19  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.CreatingContext"];
m0_10 -> m0_23  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.CreatingContext"];
m0_10 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.CreatingContext"];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_30  [key=2, style=dotted];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_30  [key=2, style=dotted];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_30  [key=2, style=dotted];
m0_14 -> m0_15  [key=0, style=solid];
m0_14 -> m0_30  [key=2, style=dotted];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_30  [key=2, style=dotted];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_30  [key=2, style=dotted];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_30  [key=2, style=dotted];
m0_19 -> m0_20  [key=0, style=solid];
m0_23 -> m0_22  [key=0, style=solid];
m0_23 -> m0_33  [key=2, style=dotted];
m0_23 -> m0_23  [key=1, style=dashed, color=darkseagreen4, label=parameter];
m0_26 -> m0_25  [key=0, style=solid];
m0_26 -> m0_34  [key=2, style=dotted];
m0_26 -> m0_35  [key=2, style=dotted];
m0_26 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label=parameter];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_20  [key=0, style=solid];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_31  [key=2, style=dotted];
m0_20 -> m0_32  [key=2, style=dotted];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_24  [key=0, style=solid];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_24  [key=0, style=solid];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_27  [key=0, style=solid];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_27  [key=0, style=solid];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_29  [key=0, style=solid];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_36  [key=2, style=dotted];
m0_29 -> m0_10  [key=0, style=bold, color=blue];
m0_68 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_18  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_22  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_43  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_46  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_47  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_49  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_55  [key=1, style=dashed, color=red, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_57  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_64  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m0_68 -> m0_65  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestFilter"];
m1_25 -> m1_26  [key=0, style=solid];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> d4  [key=2, style=dotted];
m1_26 -> m1_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_29  [key=2, style=dotted];
m1_28 -> m1_25  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_7  [key=2, style=dotted];
m1_1 -> m1_5  [key=1, style=dashed, color=red, label=connection];
m1_1 -> m1_4  [key=1, style=dashed, color=green, label=connection];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_8  [key=2, style=dotted];
m1_2 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_2 -> m1_5  [key=1, style=dashed, color=red, label=job];
m1_2 -> m1_4  [key=1, style=dashed, color=green, label=job];
m1_5 -> m1_6  [key=0, style=solid, color=red];
m1_5 -> m1_11  [key=2, style=dotted, color=red];
m1_3 -> m1_4  [key=0, style=solid, color=green];
m1_3 -> m1_9  [key=2, style=dotted];
m1_3 -> m1_5  [key=1, style=dashed, color=red, label=state];
m1_4 -> m1_5  [key=0, style=solid, color=red];
m1_4 -> m1_10  [key=2, style=dotted, color=red];
m1_4 -> m1_6  [key=0, style=solid, color=green];
m1_4 -> m1_11  [key=2, style=dotted, color=green];
m1_6 -> m1_0  [key=0, style=bold, color=blue];
m1_15 -> m1_41  [key=0, style=solid];
m1_41 -> m1_15  [key=0, style=bold, color=blue];
m1_33 -> m1_34  [key=0, style=solid];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_24  [key=2, style=dotted];
m1_34 -> m1_36  [key=1, style=dashed, color=darkseagreen4, label=exception];
m1_35 -> m1_36  [key=0, style=solid];
m1_35 -> m1_23  [key=2, style=dotted];
m1_35 -> m1_37  [key=1, style=dashed, color=darkseagreen4, label=context];
m1_36 -> m1_37  [key=0, style=solid];
m1_36 -> m1_39  [key=2, style=dotted];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_40  [key=2, style=dotted];
m1_38 -> m1_33  [key=0, style=bold, color=blue];
m1_30 -> m1_31  [key=0, style=solid];
m1_12 -> m1_13  [key=0, style=solid];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_15  [key=2, style=dotted];
m1_14 -> m1_12  [key=0, style=bold, color=blue];
m1_20 -> m1_21  [key=0, style=solid];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_23  [key=2, style=dotted];
m1_21 -> m1_24  [key=2, style=dotted];
m1_22 -> m1_20  [key=0, style=bold, color=blue];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_23  [key=2, style=dotted];
m1_32 -> m1_30  [key=0, style=bold, color=blue];
m1_16 -> m1_17  [key=0, style=solid];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> d4  [key=2, style=dotted];
m1_17 -> m1_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_18 -> m1_16  [key=0, style=bold, color=blue];
m1_42 -> m1_5  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Client.ClientExceptionContextFacts"];
m1_42 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.ClientExceptionContextFacts"];
m1_42 -> m1_31  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.ClientExceptionContextFacts"];
m1_42 -> m1_35  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.ClientExceptionContextFacts"];
m1_42 -> m1_4  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Client.ClientExceptionContextFacts"];
m2_14 -> m2_15  [key=0, style=solid];
m2_15 -> m2_16  [key=0, style=solid];
m2_15 -> m2_17  [key=0, style=solid];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> m2_0  [key=2, style=dotted];
m2_17 -> m2_14  [key=0, style=bold, color=blue];
m2_57 -> m2_58  [key=0, style=solid];
m2_58 -> m2_59  [key=0, style=solid];
m2_58 -> m2_43  [key=2, style=dotted];
m2_59 -> m2_60  [key=0, style=solid];
m2_59 -> m2_22  [key=2, style=dotted];
m2_60 -> m2_61  [key=0, style=solid];
m2_60 -> m2_30  [key=2, style=dotted];
m2_61 -> m2_62  [key=0, style=solid, color=red];
m2_61 -> m2_66  [key=2, style=dotted];
m2_62 -> m2_63  [key=0, style=solid, color=red];
m2_62 -> m2_44  [key=2, style=dotted, color=red];
m2_63 -> m2_64  [key=0, style=solid, color=red];
m2_63 -> m2_35  [key=2, style=dotted, color=red];
m2_64 -> m2_65  [key=0, style=solid, color=red];
m2_64 -> m2_26  [key=2, style=dotted, color=red];
m2_65 -> m2_57  [key=0, style=bold, color=blue];
m2_26 -> m2_27  [key=0, style=solid];
m2_27 -> m2_28  [key=0, style=solid];
m2_27 -> m2_29  [key=2, style=dotted];
m2_28 -> m2_26  [key=0, style=bold, color=blue];
m2_9 -> m2_10  [key=0, style=solid];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_13  [key=2, style=dotted];
m2_11 -> m2_12  [key=0, style=solid];
m2_12 -> m2_9  [key=0, style=bold, color=blue];
m2_67 -> m2_68  [key=0, style=solid];
m2_68 -> m2_69  [key=0, style=solid];
m2_68 -> m2_43  [key=2, style=dotted];
m2_69 -> m2_70  [key=0, style=solid];
m2_69 -> m2_22  [key=2, style=dotted];
m2_70 -> m2_71  [key=0, style=solid];
m2_70 -> m2_30  [key=2, style=dotted];
m2_71 -> m2_72  [key=0, style=solid];
m2_71 -> m2_66  [key=2, style=dotted];
m2_72 -> m2_73  [key=0, style=solid];
m2_72 -> m2_35  [key=2, style=dotted];
m2_73 -> m2_74  [key=0, style=solid];
m2_73 -> m2_44  [key=2, style=dotted];
m2_74 -> m2_75  [key=0, style=solid];
m2_74 -> m2_26  [key=2, style=dotted];
m2_75 -> m2_67  [key=0, style=bold, color=blue];
m2_18 -> m2_19  [key=0, style=solid];
m2_19 -> m2_20  [key=0, style=solid];
m2_19 -> m2_21  [key=2, style=dotted];
m2_20 -> m2_18  [key=0, style=bold, color=blue];
m2_22 -> m2_23  [key=0, style=solid];
m2_22 -> m2_37  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m2_22 -> m2_46  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m2_22 -> m2_58  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m2_22 -> m2_68  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m2_23 -> m2_24  [key=0, style=solid];
m2_23 -> m2_25  [key=2, style=dotted];
m2_24 -> m2_22  [key=0, style=bold, color=blue];
m2_43 -> m2_44  [key=0, style=solid, color=green];
m2_43 -> m2_46  [key=1, style=dashed, color=green, label=i];
m2_45 -> m2_46  [key=0, style=solid, color=green];
m2_45 -> m2_66  [key=2, style=dotted, color=green];
m2_46 -> m2_47  [key=0, style=solid];
m2_46 -> m2_43  [key=2, style=dotted];
m2_46 -> m2_44  [key=0, style=solid, color=green];
m2_46 -> m2_46  [key=1, style=dashed, color=green, label=i];
m2_47 -> m2_48  [key=0, style=solid];
m2_47 -> m2_22  [key=2, style=dotted];
m2_47 -> m2_42  [key=0, style=bold, color=blue];
m2_48 -> m2_49  [key=0, style=solid];
m2_48 -> m2_30  [key=2, style=dotted];
m2_49 -> m2_50  [key=0, style=solid];
m2_49 -> m2_55  [key=2, style=dotted];
m2_49 -> m2_51  [key=1, style=dashed, color=darkseagreen4, label=table1];
m2_49 -> m2_52  [key=1, style=dashed, color=darkseagreen4, label=table1];
m2_50 -> m2_51  [key=0, style=solid];
m2_50 -> m2_56  [key=2, style=dotted];
m2_51 -> m2_52  [key=0, style=solid];
m2_51 -> m2_56  [key=2, style=dotted];
m2_52 -> m2_53  [key=0, style=solid];
m2_52 -> m2_44  [key=2, style=dotted];
m2_53 -> m2_54  [key=0, style=solid];
m2_53 -> m2_26  [key=2, style=dotted];
m2_54 -> m2_45  [key=0, style=bold, color=blue];
m2_44 -> m2_45  [key=0, style=solid, color=green];
m2_44 -> m2_47  [key=0, style=solid, color=green];
m2_42 -> m2_43  [key=0, style=solid, color=green];
m2_42 -> m2_44  [key=1, style=dashed, color=green, label=int];
m2_42 -> m2_36  [key=0, style=bold, color=blue];
m2_30 -> m2_31  [key=0, style=solid];
m2_31 -> m2_32  [key=0, style=solid];
m2_31 -> m2_34  [key=2, style=dotted];
m2_32 -> m2_33  [key=0, style=solid];
m2_32 -> m2_35  [key=2, style=dotted];
m2_33 -> m2_30  [key=0, style=bold, color=blue];
m2_36 -> m2_37  [key=0, style=solid];
m2_37 -> m2_38  [key=0, style=solid];
m2_37 -> m2_43  [key=2, style=dotted];
m2_38 -> m2_39  [key=0, style=solid];
m2_38 -> m2_22  [key=2, style=dotted];
m2_39 -> m2_40  [key=0, style=solid];
m2_39 -> m2_30  [key=2, style=dotted];
m2_40 -> m2_41  [key=0, style=solid];
m2_40 -> m2_44  [key=2, style=dotted];
m2_41 -> m2_42  [key=0, style=solid];
m2_41 -> m2_26  [key=2, style=dotted];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_16  [key=3, color=darkorchid, style=bold, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext"];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_5  [key=2, style=dotted];
m2_1 -> m2_1  [key=3, color=darkorchid, style=bold, label="Field variable System.Collections.Generic.IDictionary<string, string> _parameters"];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_6  [key=2, style=dotted];
m2_2 -> m2_7  [key=2, style=dotted];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_8  [key=2, style=dotted];
m2_4 -> m2_0  [key=0, style=bold, color=blue];
m2_76 -> m2_38  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m2_76 -> m2_39  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m2_76 -> m2_41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m2_76 -> m2_47  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m2_76 -> m2_48  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m2_76 -> m2_53  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m2_76 -> m2_59  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m2_76 -> m2_60  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m2_76 -> m2_64  [key=1, style=dashed, color=red, label="HangFire.Tests.States.EnqueuedStateFeature"];
m2_76 -> m2_69  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m2_76 -> m2_70  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m2_76 -> m2_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m3_26 -> m3_27  [key=0, style=solid];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_34  [key=2, style=dotted];
m3_28 -> m3_29  [key=0, style=solid];
m3_28 -> m3_35  [key=2, style=dotted];
m3_28 -> m3_36  [key=2, style=dotted];
m3_28 -> m3_39  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_29 -> m3_30  [key=0, style=solid];
m3_29 -> m3_35  [key=2, style=dotted];
m3_29 -> m3_37  [key=2, style=dotted];
m3_29 -> m3_36  [key=2, style=dotted];
m3_29 -> m3_42  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_30 -> m3_31  [key=0, style=solid];
m3_30 -> m3_33  [key=0, style=solid];
m3_30 -> m3_38  [key=2, style=dotted];
m3_31 -> m3_32  [key=0, style=solid];
m3_32 -> m3_33  [key=0, style=solid];
m3_33 -> m3_26  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=2, style=dotted];
m3_1 -> m3_4  [key=2, style=dotted];
m3_2 -> m3_0  [key=0, style=bold, color=blue];
m3_19 -> m3_20  [key=0, style=solid];
m3_20 -> m3_21  [key=0, style=solid];
m3_20 -> m3_22  [key=2, style=dotted];
m3_20 -> m3_9  [key=2, style=dotted];
m3_21 -> m3_19  [key=0, style=bold, color=blue];
m3_66 -> m3_67  [key=0, style=solid];
m3_67 -> m3_68  [key=0, style=solid];
m3_67 -> m3_70  [key=0, style=solid];
m3_67 -> m3_34  [key=2, style=dotted];
m3_67 -> m3_38  [key=2, style=dotted];
m3_68 -> m3_69  [key=0, style=solid];
m3_69 -> m3_70  [key=0, style=solid];
m3_70 -> m3_66  [key=0, style=bold, color=blue];
m3_136 -> m3_137  [key=0, style=solid, color=red];
m3_137 -> m3_138  [key=0, style=solid, color=red];
m3_137 -> m3_139  [key=2, style=dotted, color=red];
m3_138 -> m3_136  [key=0, style=bold, color=blue];
m3_128 -> m3_129  [key=0, style=solid, color=red];
m3_128 -> m3_131  [key=1, style=dashed, color=red, label=Table];
m3_128 -> m3_132  [key=1, style=dashed, color=red, label=Table];
m3_129 -> m3_130  [key=0, style=solid, color=red];
m3_129 -> m3_107  [key=2, style=dotted, color=red];
m3_131 -> m3_132  [key=0, style=solid, color=red];
m3_131 -> m3_135  [key=0, style=solid, color=red];
m3_132 -> m3_133  [key=0, style=solid, color=red];
m3_130 -> m3_131  [key=0, style=solid, color=red];
m3_130 -> m3_132  [key=1, style=dashed, color=red, label=i];
m3_130 -> m3_133  [key=1, style=dashed, color=red, label=i];
m3_130 -> m3_134  [key=1, style=dashed, color=red, label=i];
m3_133 -> m3_134  [key=0, style=solid, color=red];
m3_133 -> m3_107  [key=2, style=dotted, color=red];
m3_134 -> m3_131  [key=0, style=solid, color=red];
m3_134 -> m3_134  [key=1, style=dashed, color=red, label=i];
m3_135 -> m3_128  [key=0, style=bold, color=blue];
m3_13 -> m3_14  [key=0, style=solid];
m3_14 -> m3_15  [key=0, style=solid];
m3_14 -> m3_8  [key=2, style=dotted];
m3_14 -> m3_9  [key=2, style=dotted];
m3_15 -> m3_13  [key=0, style=bold, color=blue];
m3_46 -> m3_47  [key=0, style=solid, color=red];
m3_47 -> m3_48  [key=0, style=solid, color=red];
m3_47 -> d96  [key=2, style=dotted, color=red];
m3_47 -> m3_52  [key=1, style=dashed, color=red, label="lambda expression"];
m3_47 -> m3_55  [key=1, style=dashed, color=red, label="lambda expression"];
m3_48 -> m3_49  [key=0, style=solid, color=red];
m3_48 -> m3_51  [key=2, style=dotted, color=red];
m3_49 -> m3_46  [key=0, style=bold, color=blue];
m3_10 -> m3_11  [key=0, style=solid, color=red];
m3_11 -> m3_12  [key=0, style=solid, color=red];
m3_11 -> m3_8  [key=2, style=dotted, color=red];
m3_11 -> m3_9  [key=2, style=dotted, color=red];
m3_12 -> m3_10  [key=0, style=bold, color=blue];
m3_5 -> m3_6  [key=0, style=solid];
m3_6 -> m3_7  [key=0, style=solid];
m3_6 -> m3_8  [key=2, style=dotted];
m3_6 -> m3_9  [key=2, style=dotted];
m3_7 -> m3_5  [key=0, style=bold, color=blue];
m3_58 -> m3_59  [key=0, style=solid];
m3_59 -> m3_60  [key=0, style=solid];
m3_59 -> m3_8  [key=2, style=dotted];
m3_59 -> m3_9  [key=2, style=dotted];
m3_60 -> m3_58  [key=0, style=bold, color=blue];
m3_71 -> m3_72  [key=0, style=solid];
m3_72 -> m3_73  [key=0, style=solid];
m3_72 -> m3_75  [key=0, style=solid];
m3_72 -> m3_76  [key=2, style=dotted];
m3_73 -> m3_74  [key=0, style=solid];
m3_74 -> m3_75  [key=0, style=solid];
m3_75 -> m3_71  [key=0, style=bold, color=blue];
m3_91 -> m3_92  [key=0, style=solid];
m3_91 -> m3_93  [key=1, style=dashed, color=darkseagreen4, label=Table];
m3_92 -> m3_93  [key=0, style=solid];
m3_92 -> m3_95  [key=2, style=dotted];
m3_93 -> m3_94  [key=0, style=solid];
m3_93 -> m3_96  [key=2, style=dotted];
m3_94 -> m3_91  [key=0, style=bold, color=blue];
m3_77 -> m3_78  [key=0, style=solid];
m3_78 -> m3_79  [key=0, style=solid];
m3_78 -> m3_81  [key=0, style=solid];
m3_78 -> m3_76  [key=2, style=dotted];
m3_79 -> m3_80  [key=0, style=solid];
m3_80 -> m3_81  [key=0, style=solid];
m3_81 -> m3_77  [key=0, style=bold, color=blue];
m3_109 -> m3_110  [key=0, style=solid];
m3_110 -> m3_111  [key=0, style=solid];
m3_110 -> m3_112  [key=2, style=dotted];
m3_110 -> m3_113  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_111 -> m3_109  [key=0, style=bold, color=blue];
m3_97 -> m3_98  [key=0, style=solid];
m3_98 -> m3_99  [key=0, style=solid];
m3_98 -> m3_105  [key=2, style=dotted];
m3_99 -> m3_100  [key=0, style=solid];
m3_99 -> m3_106  [key=2, style=dotted];
m3_99 -> m3_102  [key=1, style=dashed, color=darkseagreen4, label=args];
m3_100 -> m3_101  [key=0, style=solid];
m3_100 -> m3_107  [key=2, style=dotted];
m3_102 -> m3_103  [key=0, style=solid];
m3_102 -> m3_108  [key=2, style=dotted];
m3_102 -> m3_86  [key=2, style=dotted];
m3_102 -> m3_102  [key=1, style=dashed, color=darkseagreen4, label=pair];
m3_101 -> m3_102  [key=0, style=solid];
m3_101 -> m3_104  [key=0, style=solid];
m3_103 -> m3_101  [key=0, style=solid];
m3_103 -> m3_107  [key=2, style=dotted];
m3_103 -> m3_103  [key=1, style=dashed, color=darkseagreen4, label=pair];
m3_104 -> m3_97  [key=0, style=bold, color=blue];
m3_16 -> m3_17  [key=0, style=solid];
m3_17 -> m3_18  [key=0, style=solid];
m3_17 -> m3_8  [key=2, style=dotted];
m3_17 -> m3_9  [key=2, style=dotted];
m3_18 -> m3_16  [key=0, style=bold, color=blue];
m3_124 -> m3_125  [key=0, style=solid, color=red];
m3_125 -> m3_126  [key=0, style=solid, color=red];
m3_125 -> m3_121  [key=2, style=dotted, color=red];
m3_126 -> m3_127  [key=0, style=solid, color=red];
m3_126 -> m3_123  [key=2, style=dotted, color=red];
m3_127 -> m3_124  [key=0, style=bold, color=blue];
m3_87 -> m3_88  [key=0, style=solid];
m3_88 -> m3_89  [key=0, style=solid];
m3_88 -> m3_85  [key=2, style=dotted];
m3_88 -> m3_90  [key=2, style=dotted];
m3_89 -> m3_87  [key=0, style=bold, color=blue];
m3_23 -> m3_24  [key=0, style=solid];
m3_24 -> m3_25  [key=0, style=solid];
m3_24 -> m3_22  [key=2, style=dotted];
m3_24 -> m3_9  [key=2, style=dotted];
m3_25 -> m3_23  [key=0, style=bold, color=blue];
m3_82 -> m3_83  [key=0, style=solid];
m3_83 -> m3_84  [key=0, style=solid];
m3_83 -> m3_85  [key=2, style=dotted];
m3_83 -> m3_86  [key=2, style=dotted];
m3_84 -> m3_82  [key=0, style=bold, color=blue];
m3_113 -> m3_114  [key=0, style=solid];
m3_39 -> m3_40  [key=0, style=solid];
m3_42 -> m3_43  [key=0, style=solid];
m3_40 -> m3_41  [key=0, style=solid];
m3_41 -> m3_39  [key=0, style=bold, color=blue];
m3_43 -> m3_44  [key=0, style=solid];
m3_43 -> m3_45  [key=2, style=dotted];
m3_44 -> m3_42  [key=0, style=bold, color=blue];
m3_52 -> m3_53  [key=0, style=solid, color=red];
m3_55 -> m3_56  [key=0, style=solid, color=red];
m3_53 -> m3_54  [key=0, style=solid, color=red];
m3_54 -> m3_52  [key=0, style=bold, color=blue];
m3_56 -> m3_57  [key=0, style=solid, color=red];
m3_57 -> m3_55  [key=0, style=bold, color=blue];
m3_114 -> m3_115  [key=0, style=solid];
m3_114 -> m3_106  [key=2, style=dotted];
m3_114 -> m3_116  [key=2, style=dotted];
m3_115 -> m3_113  [key=0, style=bold, color=blue];
m3_117 -> m3_118  [key=0, style=solid, color=red];
m3_117 -> m3_119  [key=1, style=dashed, color=red, label=string];
m3_118 -> m3_119  [key=0, style=solid, color=red];
m3_118 -> m3_121  [key=2, style=dotted, color=red];
m3_119 -> m3_120  [key=0, style=solid, color=red];
m3_119 -> m3_122  [key=2, style=dotted, color=red];
m3_119 -> m3_123  [key=2, style=dotted, color=red];
m3_120 -> m3_117  [key=0, style=bold, color=blue];
m3_140 -> m3_141  [key=0, style=solid, color=red];
m3_140 -> m3_143  [key=1, style=dashed, color=red, label=Table];
m3_140 -> m3_144  [key=1, style=dashed, color=red, label=Table];
m3_141 -> m3_142  [key=0, style=solid, color=red];
m3_141 -> m3_107  [key=2, style=dotted, color=red];
m3_143 -> m3_144  [key=0, style=solid, color=red];
m3_143 -> m3_147  [key=0, style=solid, color=red];
m3_144 -> m3_145  [key=0, style=solid, color=red];
m3_142 -> m3_143  [key=0, style=solid, color=red];
m3_142 -> m3_144  [key=1, style=dashed, color=red, label=i];
m3_142 -> m3_145  [key=1, style=dashed, color=red, label=i];
m3_142 -> m3_146  [key=1, style=dashed, color=red, label=i];
m3_145 -> m3_146  [key=0, style=solid, color=red];
m3_145 -> m3_107  [key=2, style=dotted, color=red];
m3_146 -> m3_143  [key=0, style=solid, color=red];
m3_146 -> m3_146  [key=1, style=dashed, color=red, label=i];
m3_147 -> m3_140  [key=0, style=bold, color=blue];
m3_148 -> m3_149  [key=0, style=solid, color=red];
m3_149 -> m3_150  [key=0, style=solid, color=red];
m3_149 -> m3_151  [key=2, style=dotted, color=red];
m3_150 -> m3_148  [key=0, style=bold, color=blue];
m3_61 -> m3_62  [key=0, style=solid];
m3_62 -> m3_63  [key=0, style=solid];
m3_62 -> m3_65  [key=0, style=solid];
m3_62 -> m3_34  [key=2, style=dotted];
m3_62 -> m3_38  [key=2, style=dotted];
m3_63 -> m3_64  [key=0, style=solid];
m3_64 -> m3_65  [key=0, style=solid];
m3_65 -> m3_61  [key=0, style=bold, color=blue];
m3_152 -> m3_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_11  [key=1, style=dashed, color=red, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_14  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_17  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_20  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_24  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_27  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_28  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_29  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_30  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_47  [key=1, style=dashed, color=red, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_59  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_62  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_64  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_67  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_69  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_72  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_78  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_80  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_100  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_101  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_103  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_110  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_118  [key=1, style=dashed, color=red, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_119  [key=1, style=dashed, color=red, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_125  [key=1, style=dashed, color=red, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_126  [key=1, style=dashed, color=red, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_129  [key=1, style=dashed, color=red, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_133  [key=1, style=dashed, color=red, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_137  [key=1, style=dashed, color=red, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_141  [key=1, style=dashed, color=red, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_145  [key=1, style=dashed, color=red, label="HangFire.Tests.JobClientSteps"];
m3_152 -> m3_149  [key=1, style=dashed, color=red, label="HangFire.Tests.JobClientSteps"];
m4_14 -> m4_15  [key=0, style=solid];
m4_15 -> m4_16  [key=0, style=solid];
m4_15 -> m4_17  [key=0, style=solid];
m4_16 -> m4_17  [key=0, style=solid];
m4_16 -> m4_0  [key=2, style=dotted];
m4_17 -> m4_14  [key=0, style=bold, color=blue];
m4_57 -> m4_58  [key=0, style=solid];
m4_58 -> m4_59  [key=0, style=solid];
m4_58 -> m4_43  [key=2, style=dotted];
m4_59 -> m4_60  [key=0, style=solid];
m4_59 -> m4_22  [key=2, style=dotted];
m4_60 -> m4_61  [key=0, style=solid];
m4_60 -> m4_30  [key=2, style=dotted];
m4_61 -> m4_62  [key=0, style=solid];
m4_61 -> m4_66  [key=2, style=dotted];
m4_62 -> m4_63  [key=0, style=solid];
m4_62 -> m4_44  [key=2, style=dotted];
m4_63 -> m4_64  [key=0, style=solid];
m4_63 -> m4_35  [key=2, style=dotted];
m4_64 -> m4_65  [key=0, style=solid];
m4_64 -> m4_26  [key=2, style=dotted];
m4_65 -> m4_57  [key=0, style=bold, color=blue];
m4_26 -> m4_27  [key=0, style=solid];
m4_27 -> m4_28  [key=0, style=solid];
m4_27 -> m4_29  [key=2, style=dotted];
m4_28 -> m4_26  [key=0, style=bold, color=blue];
m4_9 -> m4_10  [key=0, style=solid];
m4_10 -> m4_11  [key=0, style=solid];
m4_10 -> m4_13  [key=2, style=dotted];
m4_11 -> m4_12  [key=0, style=solid];
m4_12 -> m4_9  [key=0, style=bold, color=blue];
m4_67 -> m4_68  [key=0, style=solid];
m4_68 -> m4_69  [key=0, style=solid];
m4_68 -> m4_43  [key=2, style=dotted];
m4_69 -> m4_70  [key=0, style=solid];
m4_69 -> m4_22  [key=2, style=dotted];
m4_70 -> m4_71  [key=0, style=solid];
m4_70 -> m4_30  [key=2, style=dotted];
m4_71 -> m4_72  [key=0, style=solid];
m4_71 -> m4_66  [key=2, style=dotted];
m4_72 -> m4_73  [key=0, style=solid];
m4_72 -> m4_35  [key=2, style=dotted];
m4_73 -> m4_74  [key=0, style=solid];
m4_73 -> m4_44  [key=2, style=dotted];
m4_74 -> m4_75  [key=0, style=solid];
m4_74 -> m4_26  [key=2, style=dotted];
m4_75 -> m4_67  [key=0, style=bold, color=blue];
m4_13 -> m4_1  [key=1, style=dashed, color=green, label="Hangfire.Client.CreatedContext"];
m4_13 -> m4_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Client.CreatedContext"];
m4_13 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Client.CreatedContext"];
m4_18 -> m4_19  [key=0, style=solid];
m4_19 -> m4_20  [key=0, style=solid];
m4_19 -> m4_21  [key=2, style=dotted];
m4_20 -> m4_18  [key=0, style=bold, color=blue];
m4_22 -> m4_23  [key=0, style=solid];
m4_23 -> m4_24  [key=0, style=solid];
m4_23 -> m4_25  [key=2, style=dotted];
m4_24 -> m4_22  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid, color=green];
m4_0 -> m4_2  [key=1, style=dashed, color=darkseagreen4, label=bool];
m4_0 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label="System.Exception"];
m4_1 -> m4_2  [key=0, style=solid, color=green];
m4_1 -> m4_5  [key=2, style=dotted];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_6  [key=2, style=dotted];
m4_2 -> m4_7  [key=2, style=dotted];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_8  [key=2, style=dotted];
m4_4 -> m4_0  [key=0, style=bold, color=blue];
m4_45 -> m4_46  [key=0, style=solid];
m4_46 -> m4_47  [key=0, style=solid];
m4_46 -> m4_43  [key=2, style=dotted];
m4_47 -> m4_48  [key=0, style=solid];
m4_47 -> m4_22  [key=2, style=dotted];
m4_48 -> m4_49  [key=0, style=solid];
m4_48 -> m4_30  [key=2, style=dotted];
m4_49 -> m4_50  [key=0, style=solid];
m4_49 -> m4_55  [key=2, style=dotted];
m4_49 -> m4_51  [key=1, style=dashed, color=darkseagreen4, label=table1];
m4_49 -> m4_52  [key=1, style=dashed, color=darkseagreen4, label=table1];
m4_50 -> m4_51  [key=0, style=solid];
m4_50 -> m4_56  [key=2, style=dotted];
m4_51 -> m4_52  [key=0, style=solid];
m4_51 -> m4_56  [key=2, style=dotted];
m4_52 -> m4_53  [key=0, style=solid];
m4_52 -> m4_44  [key=2, style=dotted];
m4_53 -> m4_54  [key=0, style=solid];
m4_53 -> m4_26  [key=2, style=dotted];
m4_54 -> m4_45  [key=0, style=bold, color=blue];
m4_30 -> m4_31  [key=0, style=solid];
m4_31 -> m4_32  [key=0, style=solid];
m4_31 -> m4_34  [key=2, style=dotted];
m4_32 -> m4_33  [key=0, style=solid];
m4_32 -> m4_35  [key=2, style=dotted];
m4_33 -> m4_30  [key=0, style=bold, color=blue];
m4_36 -> m4_37  [key=0, style=solid];
m4_37 -> m4_38  [key=0, style=solid];
m4_37 -> m4_43  [key=2, style=dotted];
m4_38 -> m4_39  [key=0, style=solid];
m4_38 -> m4_22  [key=2, style=dotted];
m4_39 -> m4_40  [key=0, style=solid];
m4_39 -> m4_30  [key=2, style=dotted];
m4_40 -> m4_41  [key=0, style=solid];
m4_40 -> m4_44  [key=2, style=dotted];
m4_41 -> m4_42  [key=0, style=solid];
m4_41 -> m4_26  [key=2, style=dotted];
m4_42 -> m4_36  [key=0, style=bold, color=blue];
m4_76 -> m4_38  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m4_76 -> m4_39  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m4_76 -> m4_41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m4_76 -> m4_47  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m4_76 -> m4_48  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m4_76 -> m4_53  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m4_76 -> m4_59  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m4_76 -> m4_60  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m4_76 -> m4_64  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m4_76 -> m4_69  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m4_76 -> m4_70  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m4_76 -> m4_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m5_26 -> m5_27  [key=0, style=solid];
m5_27 -> m5_26  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> d4  [key=2, style=dotted];
m5_1 -> m5_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_2 -> m5_0  [key=0, style=bold, color=blue];
m5_23 -> m5_24  [key=0, style=solid];
m5_4 -> m5_5  [key=0, style=solid];
m5_5 -> m5_6  [key=0, style=solid];
m5_5 -> m5_7  [key=2, style=dotted];
m5_6 -> m5_4  [key=0, style=bold, color=blue];
m5_24 -> m5_25  [key=0, style=solid];
m5_24 -> m5_26  [key=2, style=dotted];
m5_25 -> m5_23  [key=0, style=bold, color=blue];
m5_8 -> m5_9  [key=0, style=solid];
m5_9 -> m5_10  [key=0, style=solid];
m5_9 -> m5_17  [key=2, style=dotted];
m5_9 -> m5_13  [key=1, style=dashed, color=red, label=connection];
m5_10 -> m5_11  [key=0, style=solid];
m5_10 -> m5_18  [key=2, style=dotted];
m5_10 -> m5_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_10 -> m5_13  [key=1, style=dashed, color=red, label=job];
m5_13 -> m5_14  [key=0, style=solid, color=red];
m5_13 -> m5_21  [key=2, style=dotted, color=red];
m5_11 -> m5_12  [key=0, style=solid, color=red];
m5_11 -> m5_19  [key=2, style=dotted];
m5_11 -> m5_13  [key=1, style=dashed, color=red, label=state];
m5_12 -> m5_13  [key=0, style=solid, color=red];
m5_12 -> m5_20  [key=2, style=dotted, color=red];
m5_14 -> m5_15  [key=0, style=solid];
m5_14 -> m5_7  [key=2, style=dotted];
m5_15 -> m5_16  [key=0, style=solid];
m5_15 -> m5_22  [key=2, style=dotted];
m5_16 -> m5_8  [key=0, style=bold, color=blue];
m6_10 -> m6_11  [key=0, style=solid];
m6_11 -> m6_10  [key=0, style=bold, color=blue];
m6_11 -> m6_6  [key=0, style=bold, color=blue];
m6_22 -> m6_23  [key=0, style=solid];
m6_22 -> m6_31  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>"];
m6_22 -> m6_35  [key=0, style=bold, color=crimson];
m6_22 -> m6_30  [key=0, style=solid];
m6_23 -> m6_22  [key=0, style=bold, color=blue];
m6_23 -> m6_24  [key=0, style=solid];
m6_21 -> m6_20  [key=0, style=bold, color=blue];
m6_12 -> m6_15  [key=1, style=dashed, color=green, label="HangFire.Common.JobMethod"];
m6_12 -> m6_13  [key=0, style=solid];
m6_12 -> m6_24  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.JobMethod"];
m6_15 -> m6_16  [key=0, style=solid, color=green];
m6_15 -> m6_19  [key=2, style=dotted, color=green];
m6_15 -> m6_20  [key=2, style=dotted, color=green];
m6_15 -> m6_23  [key=1, style=dashed, color=green, label="lambda expression"];
m6_15 -> m6_27  [key=1, style=dashed, color=green, label="lambda expression"];
m6_15 -> m6_14  [key=0, style=bold, color=blue];
m6_13 -> m6_15  [key=0, style=solid, color=green];
m6_13 -> m6_14  [key=0, style=solid];
m6_13 -> m6_12  [key=0, style=bold, color=blue];
m6_16 -> m6_17  [key=0, style=solid];
m6_16 -> m6_21  [key=2, style=dotted];
m6_16 -> m6_22  [key=2, style=dotted];
m6_14 -> m6_17  [key=0, style=solid];
m6_14 -> m6_18  [key=2, style=dotted];
m6_14 -> m6_15  [key=0, style=solid];
m6_17 -> m6_12  [key=0, style=bold, color=blue];
m6_17 -> m6_16  [key=0, style=bold, color=blue];
m6_32 -> m6_33  [key=0, style=solid, color=green];
m6_32 -> m6_34  [key=1, style=dashed, color=green, label=filterInstance];
m6_31 -> m6_32  [key=0, style=solid, color=green];
m6_31 -> m6_37  [key=0, style=solid];
m6_31 -> m6_35  [key=1, style=dashed, color=darkseagreen4, label=filter];
m6_33 -> m6_34  [key=0, style=solid];
m6_33 -> m6_39  [key=2, style=dotted];
m6_33 -> m6_36  [key=1, style=dashed, color=darkseagreen4, label=filterInstanceType];
m6_34 -> m6_6  [key=2, style=dotted];
m6_34 -> m6_31  [key=0, style=solid];
m6_34 -> m6_35  [key=0, style=solid];
m6_34 -> m6_40  [key=2, style=dotted];
m6_35 -> m6_16  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.Client.CreatingContext preContext"];
m6_35 -> m6_36  [key=0, style=solid];
m6_30 -> m6_31  [key=0, style=solid];
m6_30 -> m6_34  [key=1, style=dashed, color=darkseagreen4, label=visitedTypes];
m6_30 -> m6_38  [key=2, style=dotted];
m6_30 -> m6_36  [key=1, style=dashed, color=darkseagreen4, label=visitedTypes];
m6_36 -> m6_31  [key=0, style=solid];
m6_36 -> m6_41  [key=2, style=dotted];
m6_37 -> m6_22  [key=0, style=bold, color=blue];
m6_2 -> m6_3  [key=0, style=solid];
m6_3 -> m6_2  [key=0, style=bold, color=blue];
m6_6 -> m6_7  [key=0, style=solid, color=green];
m6_7 -> m6_6  [key=0, style=bold, color=blue];
m6_7 -> m6_8  [key=0, style=solid, color=green];
m6_7 -> m6_10  [key=1, style=dashed, color=green, label=mvcFilter];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_0  [key=0, style=bold, color=blue];
m6_8 -> m6_9  [key=0, style=solid];
m6_8 -> m6_10  [key=0, style=solid];
m6_9 -> m6_11  [key=0, style=solid];
m6_9 -> m6_8  [key=0, style=bold, color=blue];
m6_18 -> m6_19  [key=0, style=solid];
m6_19 -> m6_18  [key=0, style=bold, color=blue];
m6_27 -> m6_28  [key=0, style=solid, color=green];
m6_28 -> m6_29  [key=0, style=solid, color=green];
m6_29 -> m6_27  [key=0, style=bold, color=blue];
m6_24 -> m6_25  [key=0, style=solid];
m6_24 -> m6_26  [key=2, style=dotted];
m6_25 -> m6_23  [key=0, style=bold, color=blue];
m6_25 -> m6_24  [key=0, style=bold, color=blue];
m6_20 -> m6_21  [key=0, style=solid];
m6_4 -> m6_5  [key=0, style=solid];
m6_5 -> m6_4  [key=0, style=bold, color=blue];
m6_59 -> m6_15  [key=1, style=dashed, color=green, label="HangFire.Common.Filters.JobFilterProviderCollection"];
m6_60 -> m6_24  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.JobMethod"];
m7_51 -> m7_86  [key=0, style=solid];
m7_51 -> m7_87  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>"];
m7_86 -> m7_87  [key=0, style=solid];
m7_86 -> m7_89  [key=2, style=dotted];
m7_87 -> m7_88  [key=0, style=solid];
m7_87 -> m7_90  [key=2, style=dotted];
m7_88 -> m7_51  [key=0, style=bold, color=blue];
m7_17 -> m7_107  [key=0, style=solid];
m7_17 -> m7_109  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobStateHandler"];
m7_17 -> m7_111  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobStateHandler"];
m7_17 -> m7_112  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobStateHandler"];
m7_17 -> m7_113  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobStateHandler"];
m7_107 -> m7_108  [key=0, style=solid];
m7_107 -> m7_109  [key=0, style=solid];
m7_109 -> m7_110  [key=0, style=solid];
m7_109 -> m7_111  [key=0, style=solid];
m7_109 -> m7_115  [key=2, style=dotted];
m7_111 -> m7_112  [key=0, style=solid];
m7_111 -> m7_113  [key=0, style=solid];
m7_111 -> m7_116  [key=2, style=dotted];
m7_112 -> m7_113  [key=0, style=solid];
m7_112 -> m7_117  [key=2, style=dotted];
m7_112 -> m7_118  [key=2, style=dotted];
m7_113 -> m7_114  [key=0, style=solid];
m7_113 -> m7_119  [key=2, style=dotted];
m7_108 -> m7_114  [key=0, style=solid];
m7_108 -> m7_14  [key=2, style=dotted];
m7_110 -> m7_114  [key=0, style=solid];
m7_110 -> m7_14  [key=2, style=dotted];
m7_114 -> m7_17  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid];
m7_1 -> m7_0  [key=0, style=bold, color=blue];
m7_26 -> m7_27  [key=0, style=solid, color=red];
m7_26 -> m7_29  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m7_26 -> m7_31  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobState"];
m7_26 -> m7_33  [key=1, style=dashed, color=red, label="HangFire.Common.JobMethod"];
m7_26 -> m7_34  [key=1, style=dashed, color=red, label="string[]"];
m7_26 -> m7_35  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.JobMethod"];
m7_26 -> m7_36  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.JobMethod"];
m7_26 -> m7_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobState"];
m7_27 -> m7_28  [key=0, style=solid, color=red];
m7_27 -> m7_29  [key=0, style=solid, color=red];
m7_29 -> m7_30  [key=0, style=solid];
m7_29 -> m7_31  [key=0, style=solid];
m7_31 -> m7_32  [key=0, style=solid];
m7_31 -> m7_33  [key=0, style=solid, color=red];
m7_33 -> m7_34  [key=0, style=solid, color=red];
m7_33 -> m7_42  [key=2, style=dotted, color=red];
m7_33 -> m7_43  [key=2, style=dotted, color=red];
m7_33 -> m7_21  [key=2, style=dotted, color=red];
m7_33 -> m7_44  [key=2, style=dotted, color=red];
m7_33 -> m7_52  [key=1, style=dashed, color=red, label="lambda expression"];
m7_34 -> m7_35  [key=0, style=solid, color=red];
m7_34 -> d394  [key=2, style=dotted, color=red];
m7_34 -> m7_46  [key=2, style=dotted, color=red];
m7_34 -> m7_36  [key=1, style=dashed, color=red, label=jobId];
m7_34 -> m7_40  [key=1, style=dashed, color=red, label=jobId];
m7_35 -> m7_36  [key=0, style=solid];
m7_35 -> m7_47  [key=2, style=dotted];
m7_35 -> m7_38  [key=1, style=dashed, color=darkseagreen4, label=filterInfo];
m7_35 -> m7_39  [key=1, style=dashed, color=darkseagreen4, label=filterInfo];
m7_36 -> m7_37  [key=0, style=solid];
m7_36 -> m7_48  [key=2, style=dotted];
m7_37 -> m7_38  [key=0, style=solid];
m7_37 -> m7_49  [key=2, style=dotted];
m7_37 -> m7_39  [key=1, style=dashed, color=darkseagreen4, label=changingContext];
m7_28 -> m7_41  [key=0, style=solid, color=red];
m7_28 -> m7_14  [key=2, style=dotted, color=red];
m7_30 -> m7_41  [key=0, style=solid];
m7_30 -> m7_14  [key=2, style=dotted];
m7_32 -> m7_41  [key=0, style=solid];
m7_32 -> m7_14  [key=2, style=dotted];
m7_40 -> m7_41  [key=0, style=solid];
m7_38 -> m7_39  [key=0, style=solid];
m7_38 -> m7_50  [key=2, style=dotted];
m7_39 -> m7_40  [key=0, style=solid];
m7_39 -> m7_51  [key=2, style=dotted];
m7_41 -> m7_26  [key=0, style=bold, color=blue];
m7_52 -> m7_53  [key=0, style=solid];
m7_19 -> m7_20  [key=0, style=solid];
m7_19 -> m7_21  [key=2, style=dotted];
m7_19 -> m7_22  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_18 -> m7_19  [key=0, style=solid];
m7_20 -> m7_18  [key=0, style=bold, color=blue];
m7_22 -> m7_23  [key=0, style=solid];
m7_23 -> m7_24  [key=0, style=solid];
m7_23 -> m7_25  [key=2, style=dotted];
m7_24 -> m7_22  [key=0, style=bold, color=blue];
m7_53 -> m7_54  [key=0, style=solid];
m7_54 -> m7_52  [key=0, style=bold, color=blue];
m7_50 -> m7_91  [key=0, style=solid];
m7_50 -> m7_92  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateChangingContext"];
m7_50 -> m7_93  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateChangingContext"];
m7_50 -> m7_94  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateChangingContext"];
m7_50 -> m7_96  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateChangingContext"];
m7_91 -> m7_92  [key=0, style=solid];
m7_91 -> m7_98  [key=0, style=solid];
m7_91 -> m7_93  [key=1, style=dashed, color=darkseagreen4, label=filter];
m7_92 -> m7_93  [key=0, style=solid];
m7_92 -> m7_94  [key=1, style=dashed, color=darkseagreen4, label=oldState];
m7_92 -> m7_96  [key=1, style=dashed, color=darkseagreen4, label=oldState];
m7_93 -> m7_94  [key=0, style=solid];
m7_93 -> m7_99  [key=2, style=dotted];
m7_94 -> m7_95  [key=0, style=solid, color=red];
m7_94 -> m7_91  [key=0, style=solid];
m7_96 -> m7_97  [key=0, style=solid];
m7_96 -> m7_101  [key=2, style=dotted];
m7_95 -> m7_96  [key=0, style=solid, color=red];
m7_95 -> m7_100  [key=2, style=dotted, color=red];
m7_95 -> m7_97  [key=1, style=dashed, color=red, label=transaction];
m7_97 -> m7_91  [key=0, style=solid];
m7_97 -> m7_102  [key=2, style=dotted];
m7_98 -> m7_50  [key=0, style=bold, color=blue];
m7_55 -> m7_56  [key=0, style=solid, color=red];
m7_55 -> m7_58  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobState"];
m7_55 -> m7_60  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_55 -> m7_61  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_55 -> m7_64  [key=1, style=dashed, color=darkseagreen4, label="params string[]"];
m7_55 -> m7_69  [key=1, style=dashed, color=red, label=string];
m7_55 -> m7_70  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_56 -> m7_57  [key=0, style=solid, color=red];
m7_56 -> m7_58  [key=0, style=solid, color=red];
m7_56 -> m7_78  [key=2, style=dotted, color=red];
m7_58 -> m7_59  [key=0, style=solid];
m7_58 -> m7_60  [key=0, style=solid];
m7_60 -> m7_61  [key=0, style=solid];
m7_60 -> m7_79  [key=2, style=dotted];
m7_61 -> m7_62  [key=0, style=solid];
m7_61 -> m7_80  [key=2, style=dotted];
m7_61 -> m7_64  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m7_61 -> m7_67  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m7_61 -> m7_71  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m7_64 -> m7_65  [key=0, style=solid, color=red];
m7_64 -> m7_66  [key=0, style=solid];
m7_64 -> m7_81  [key=2, style=dotted];
m7_69 -> m7_70  [key=0, style=solid, color=red];
m7_69 -> m7_83  [key=2, style=dotted, color=red];
m7_69 -> m7_84  [key=2, style=dotted, color=red];
m7_69 -> m7_69  [key=1, style=dashed, color=red, label="HangFire.Common.States.JobState"];
m7_69 -> m7_71  [key=1, style=dashed, color=red, label="HangFire.Common.States.JobState"];
m7_70 -> m7_71  [key=0, style=solid];
m7_70 -> m7_48  [key=2, style=dotted];
m7_57 -> m7_77  [key=0, style=solid, color=red];
m7_57 -> m7_14  [key=2, style=dotted, color=red];
m7_59 -> m7_77  [key=0, style=solid];
m7_59 -> m7_14  [key=2, style=dotted];
m7_62 -> m7_63  [key=0, style=solid];
m7_62 -> m7_64  [key=0, style=solid];
m7_67 -> m7_68  [key=0, style=solid, color=red];
m7_67 -> m7_70  [key=0, style=solid];
m7_67 -> m7_82  [key=2, style=dotted];
m7_67 -> m7_72  [key=1, style=dashed, color=darkseagreen4, label=jobMethod];
m7_67 -> m7_74  [key=1, style=dashed, color=darkseagreen4, label=jobMethod];
m7_71 -> m7_72  [key=0, style=solid];
m7_71 -> m7_49  [key=2, style=dotted];
m7_71 -> m7_73  [key=1, style=dashed, color=darkseagreen4, label=stateChangingContext];
m7_71 -> m7_75  [key=1, style=dashed, color=darkseagreen4, label=stateChangingContext];
m7_71 -> m7_76  [key=1, style=dashed, color=darkseagreen4, label=stateChangingContext];
m7_63 -> m7_77  [key=0, style=solid];
m7_65 -> m7_77  [key=0, style=solid, color=red];
m7_66 -> m7_67  [key=0, style=solid];
m7_68 -> m7_69  [key=0, style=solid, color=red];
m7_72 -> m7_73  [key=0, style=solid];
m7_72 -> m7_74  [key=0, style=solid];
m7_74 -> m7_75  [key=0, style=solid];
m7_74 -> m7_47  [key=2, style=dotted];
m7_74 -> m7_76  [key=1, style=dashed, color=darkseagreen4, label=filterInfo];
m7_73 -> m7_77  [key=0, style=solid];
m7_73 -> m7_85  [key=2, style=dotted];
m7_73 -> m7_51  [key=2, style=dotted];
m7_75 -> m7_76  [key=0, style=solid];
m7_75 -> m7_50  [key=2, style=dotted];
m7_76 -> m7_77  [key=0, style=solid];
m7_76 -> m7_51  [key=2, style=dotted];
m7_77 -> m7_55  [key=0, style=bold, color=blue];
m7_47 -> m7_103  [key=0, style=solid];
m7_103 -> m7_104  [key=0, style=solid];
m7_103 -> m7_105  [key=2, style=dotted];
m7_103 -> m7_106  [key=2, style=dotted];
m7_104 -> m7_47  [key=0, style=bold, color=blue];
m7_2 -> m7_3  [key=0, style=solid];
m7_2 -> m7_5  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>"];
m7_2 -> m7_7  [key=1, style=dashed, color=red, label="HangFire.Storage.IStorageConnection"];
m7_2 -> m7_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Storage.IStorageConnection"];
m7_2 -> m7_11  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<object>"];
m7_2 -> m7_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<object>"];
m7_2 -> m7_19  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<object>"];
m7_3 -> m7_4  [key=0, style=solid];
m7_3 -> m7_5  [key=0, style=solid, color=red];
m7_5 -> m7_6  [key=0, style=solid, color=red];
m7_5 -> m7_7  [key=0, style=solid, color=red];
m7_7 -> m7_8  [key=0, style=solid, color=red];
m7_8 -> m7_9  [key=0, style=solid];
m7_8 -> m7_15  [key=2, style=dotted];
m7_8 -> m7_16  [key=2, style=dotted];
m7_11 -> m7_12  [key=0, style=solid, color=red];
m7_11 -> m7_13  [key=0, style=solid, color=red];
m7_12 -> m7_13  [key=0, style=solid];
m7_4 -> m7_13  [key=0, style=solid];
m7_4 -> m7_14  [key=2, style=dotted];
m7_6 -> m7_13  [key=0, style=solid, color=red];
m7_6 -> m7_14  [key=2, style=dotted, color=red];
m7_9 -> m7_10  [key=0, style=solid];
m7_9 -> m7_11  [key=0, style=solid, color=red];
m7_10 -> m7_9  [key=0, style=solid];
m7_10 -> m7_17  [key=2, style=dotted];
m7_13 -> m7_2  [key=0, style=bold, color=blue];
m7_120 -> m7_7  [key=1, style=dashed, color=red, label="HangFire.States.StateMachine"];
m7_120 -> m7_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m7_120 -> m7_12  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m7_120 -> m7_34  [key=1, style=dashed, color=red, label="HangFire.States.StateMachine"];
m7_120 -> m7_35  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m7_120 -> m7_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m7_120 -> m7_38  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m7_120 -> m7_39  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m7_120 -> m7_60  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m7_120 -> m7_61  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m7_120 -> m7_71  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m7_120 -> m7_73  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m7_120 -> m7_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m7_120 -> m7_75  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m7_120 -> m7_76  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m7_120 -> m7_87  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m7_120 -> m7_95  [key=1, style=dashed, color=red, label="HangFire.States.StateMachine"];
m7_120 -> m7_103  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m7_120 -> m7_111  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m7_120 -> m7_112  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m7_120 -> m7_113  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m7_121 -> m7_19  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<object>"];
m8_0 -> m8_1  [key=0, style=solid];
m8_1 -> m8_0  [key=0, style=bold, color=blue];
m10_0 -> m10_1  [key=0, style=solid];
m10_1 -> m10_0  [key=0, style=bold, color=blue];
m10_2 -> m10_3  [key=0, style=solid];
m10_3 -> m10_2  [key=0, style=bold, color=blue];
m12_25 -> m12_26  [key=0, style=solid];
m12_45 -> m12_352  [key=0, style=solid];
m12_45 -> m12_353  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_45 -> m12_354  [key=1, style=dashed, color=darkseagreen4, label="System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>"];
m12_352 -> m12_353  [key=0, style=solid];
m12_353 -> m12_354  [key=0, style=solid];
m12_353 -> m12_78  [key=2, style=dotted];
m12_353 -> m12_87  [key=2, style=dotted];
m12_354 -> m12_355  [key=0, style=solid];
m12_354 -> m12_334  [key=2, style=dotted];
m12_355 -> m12_45  [key=0, style=bold, color=blue];
m12_27 -> m12_28  [key=0, style=solid];
m12_28 -> m12_29  [key=0, style=solid];
m12_28 -> m12_10  [key=2, style=dotted];
m12_28 -> m12_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_29 -> m12_27  [key=0, style=bold, color=blue];
m12_356 -> m12_357  [key=0, style=solid];
m12_356 -> m12_358  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>"];
m12_356 -> m12_361  [key=1, style=dashed, color=darkseagreen4, label="System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>"];
m12_357 -> m12_358  [key=0, style=solid];
m12_357 -> m12_365  [key=2, style=dotted];
m12_357 -> m12_362  [key=1, style=dashed, color=darkseagreen4, label=result];
m12_357 -> m12_363  [key=1, style=dashed, color=darkseagreen4, label=result];
m12_358 -> m12_359  [key=0, style=solid];
m12_358 -> m12_363  [key=0, style=solid];
m12_358 -> m12_361  [key=1, style=dashed, color=darkseagreen4, label=job];
m12_358 -> m12_362  [key=1, style=dashed, color=darkseagreen4, label=job];
m12_361 -> m12_362  [key=0, style=solid];
m12_361 -> m12_343  [key=2, style=dotted];
m12_361 -> m12_366  [key=2, style=dotted];
m12_362 -> m12_358  [key=0, style=solid];
m12_362 -> m12_367  [key=2, style=dotted];
m12_362 -> m12_368  [key=2, style=dotted];
m12_362 -> m12_90  [key=2, style=dotted];
m12_363 -> m12_364  [key=0, style=solid];
m12_363 -> m12_369  [key=2, style=dotted];
m12_359 -> m12_360  [key=0, style=solid];
m12_359 -> m12_350  [key=2, style=dotted];
m12_360 -> m12_361  [key=0, style=solid];
m12_360 -> m12_220  [key=2, style=dotted];
m12_364 -> m12_356  [key=0, style=bold, color=blue];
m12_14 -> m12_339  [key=0, style=solid];
m12_14 -> m12_340  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_14 -> m12_15  [key=0, style=solid, color=green];
m12_14 -> m12_16  [key=0, style=solid, color=green];
m12_14 -> m12_34  [key=2, style=dotted, color=green];
m12_339 -> m12_340  [key=0, style=solid];
m12_340 -> m12_341  [key=0, style=solid];
m12_340 -> m12_78  [key=2, style=dotted];
m12_340 -> m12_255  [key=2, style=dotted];
m12_341 -> m12_342  [key=0, style=solid];
m12_342 -> m12_14  [key=0, style=bold, color=blue];
m12_227 -> m12_228  [key=0, style=solid];
m12_228 -> m12_229  [key=0, style=solid];
m12_228 -> m12_10  [key=2, style=dotted];
m12_228 -> m12_230  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_229 -> m12_227  [key=0, style=bold, color=blue];
m12_0 -> m12_1  [key=0, style=solid];
m12_0 -> m12_3  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.SqlServerStorage"];
m12_0 -> m12_4  [key=1, style=dashed, color=darkseagreen4, label="int?"];
m12_5 -> m12_14  [key=1, style=dashed, color=green, label=hash];
m12_5 -> m12_6  [key=0, style=solid];
m12_5 -> m12_28  [key=2, style=dotted];
m12_5 -> m12_29  [key=2, style=dotted];
m12_5 -> m12_9  [key=1, style=dashed, color=darkseagreen4, label=hash];
m12_5 -> m12_10  [key=1, style=dashed, color=darkseagreen4, label=hash];
m12_5 -> m12_15  [key=1, style=dashed, color=darkseagreen4, label=hash];
m12_5 -> m12_16  [key=1, style=dashed, color=darkseagreen4, label=hash];
m12_5 -> m12_17  [key=1, style=dashed, color=darkseagreen4, label=hash];
m12_5 -> m12_21  [key=1, style=dashed, color=darkseagreen4, label=hash];
m12_5 -> m12_22  [key=1, style=dashed, color=darkseagreen4, label=hash];
m12_5 -> m12_0  [key=0, style=bold, color=blue];
m12_11 -> m12_14  [key=0, style=solid, color=green];
m12_11 -> m12_12  [key=0, style=solid];
m12_11 -> m12_33  [key=2, style=dotted];
m12_13 -> m12_14  [key=0, style=solid, color=green];
m12_13 -> m12_11  [key=0, style=bold, color=blue];
m12_15 -> m12_16  [key=0, style=solid];
m12_15 -> m12_35  [key=2, style=dotted];
m12_15 -> m12_17  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_16 -> m12_17  [key=0, style=solid];
m12_16 -> m12_21  [key=0, style=solid];
m12_16 -> m12_34  [key=2, style=dotted];
m12_16 -> m12_20  [key=2, style=dotted];
m12_2 -> m12_5  [key=1, style=dashed, color=darkseagreen4, label=connection];
m12_2 -> m12_3  [key=0, style=solid];
m12_2 -> m12_26  [key=2, style=dotted];
m12_2 -> m12_18  [key=1, style=dashed, color=darkseagreen4, label=connection];
m12_2 -> m12_6  [key=2, style=dotted];
m12_4 -> m12_5  [key=0, style=solid];
m12_4 -> m12_24  [key=0, style=solid];
m12_4 -> m12_7  [key=1, style=dashed, color=darkseagreen4, label=id];
m12_4 -> m12_8  [key=1, style=dashed, color=darkseagreen4, label=id];
m12_6 -> m12_7  [key=0, style=solid];
m12_6 -> m12_8  [key=0, style=solid];
m12_9 -> m12_10  [key=0, style=solid];
m12_9 -> m12_7  [key=0, style=bold, color=blue];
m12_10 -> m12_11  [key=0, style=solid];
m12_10 -> m12_32  [key=2, style=dotted];
m12_10 -> m12_327  [key=0, style=solid];
m12_17 -> m12_18  [key=0, style=solid];
m12_17 -> m12_21  [key=2, style=dotted];
m12_21 -> m12_34  [key=2, style=dotted];
m12_21 -> m12_22  [key=0, style=solid];
m12_21 -> m12_23  [key=0, style=solid];
m12_22 -> m12_23  [key=0, style=solid];
m12_22 -> m12_35  [key=2, style=dotted];
m12_22 -> m12_24  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_8 -> m12_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_8 -> m12_13  [key=1, style=dashed, color=darkseagreen4, label=dto];
m12_8 -> m12_15  [key=1, style=dashed, color=darkseagreen4, label=dto];
m12_8 -> m12_9  [key=0, style=solid];
m12_8 -> m12_17  [key=1, style=dashed, color=darkseagreen4, label=dto];
m12_8 -> m12_22  [key=1, style=dashed, color=darkseagreen4, label=dto];
m12_8 -> m12_30  [key=2, style=dotted];
m12_8 -> m12_18  [key=1, style=dashed, color=darkseagreen4, label=dto];
m12_8 -> m12_20  [key=1, style=dashed, color=darkseagreen4, label=dto];
m12_8 -> m12_23  [key=1, style=dashed, color=darkseagreen4, label=dto];
m12_8 -> m12_10  [key=2, style=dotted];
m12_12 -> m12_13  [key=0, style=solid];
m12_12 -> m12_14  [key=2, style=dotted];
m12_1 -> m12_2  [key=0, style=solid];
m12_1 -> m12_25  [key=2, style=dotted];
m12_1 -> m12_3  [key=0, style=solid, color=red];
m12_3 -> m12_4  [key=0, style=solid, color=red];
m12_3 -> m12_27  [key=2, style=dotted];
m12_18 -> m12_19  [key=0, style=solid];
m12_18 -> m12_36  [key=2, style=dotted];
m12_18 -> m12_20  [key=1, style=dashed, color=darkseagreen4, label=stateData];
m12_7 -> m12_4  [key=0, style=solid];
m12_7 -> m12_30  [key=2, style=dotted];
m12_7 -> m12_31  [key=2, style=dotted];
m12_7 -> m12_8  [key=0, style=solid];
m12_23 -> m12_4  [key=0, style=solid];
m12_23 -> m12_31  [key=2, style=dotted];
m12_23 -> m12_24  [key=0, style=solid];
m12_23 -> m12_20  [key=2, style=dotted];
m12_20 -> m12_21  [key=0, style=solid];
m12_20 -> m12_322  [key=0, style=solid];
m12_19 -> m12_21  [key=0, style=solid];
m12_19 -> m12_20  [key=0, style=solid];
m12_19 -> m12_15  [key=0, style=bold, color=blue];
m12_24 -> m12_0  [key=0, style=bold, color=blue];
m12_24 -> m12_25  [key=0, style=solid];
m12_24 -> m12_21  [key=2, style=dotted];
m12_327 -> m12_328  [key=0, style=solid];
m12_327 -> m12_329  [key=2, style=dotted];
m12_328 -> m12_10  [key=0, style=bold, color=blue];
m12_186 -> m12_187  [key=0, style=solid];
m12_187 -> m12_188  [key=0, style=solid];
m12_187 -> m12_10  [key=2, style=dotted];
m12_187 -> m12_189  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_188 -> m12_186  [key=0, style=bold, color=blue];
m12_233 -> m12_234  [key=0, style=solid];
m12_234 -> m12_235  [key=0, style=solid];
m12_234 -> m12_243  [key=1, style=dashed, color=darkseagreen4, label=sql];
m12_235 -> m12_236  [key=0, style=solid];
m12_235 -> m12_10  [key=2, style=dotted];
m12_235 -> m12_241  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_235 -> m12_237  [key=1, style=dashed, color=darkseagreen4, label=statistics];
m12_236 -> m12_237  [key=0, style=solid];
m12_236 -> m12_239  [key=2, style=dotted];
m12_236 -> m12_240  [key=2, style=dotted];
m12_236 -> m12_256  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_237 -> m12_238  [key=0, style=solid];
m12_238 -> m12_233  [key=0, style=bold, color=blue];
m12_169 -> m12_170  [key=0, style=solid];
m12_169 -> m12_171  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_170 -> m12_171  [key=0, style=solid];
m12_170 -> m12_20  [key=2, style=dotted];
m12_171 -> m12_172  [key=0, style=solid];
m12_171 -> m12_174  [key=2, style=dotted];
m12_171 -> m12_176  [key=1, style=dashed, color=darkseagreen4, label=fetchedJobIds];
m12_172 -> m12_173  [key=0, style=solid];
m12_172 -> m12_10  [key=2, style=dotted];
m12_172 -> m12_175  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_173 -> m12_169  [key=0, style=bold, color=blue];
m12_185 -> m12_260  [key=0, style=solid];
m12_185 -> m12_267  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_185 -> m12_273  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_185 -> m12_268  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_260 -> m12_261  [key=0, style=solid];
m12_260 -> m12_264  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m12_260 -> m12_265  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m12_267 -> m12_268  [key=0, style=solid];
m12_267 -> m12_207  [key=2, style=dotted];
m12_267 -> m12_272  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_267 -> m12_277  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_268 -> m12_269  [key=0, style=solid];
m12_268 -> m12_271  [key=2, style=dotted];
m12_261 -> m12_262  [key=0, style=solid];
m12_261 -> m12_88  [key=2, style=dotted];
m12_261 -> m12_264  [key=1, style=dashed, color=darkseagreen4, label=dates];
m12_261 -> m12_267  [key=1, style=dashed, color=darkseagreen4, label=dates];
m12_264 -> m12_265  [key=0, style=solid];
m12_264 -> m12_90  [key=2, style=dotted];
m12_265 -> m12_266  [key=0, style=solid];
m12_265 -> m12_270  [key=2, style=dotted];
m12_265 -> m12_265  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m12_262 -> m12_263  [key=0, style=solid];
m12_262 -> m12_266  [key=1, style=dashed, color=darkseagreen4, label=i];
m12_263 -> m12_264  [key=0, style=solid];
m12_263 -> m12_267  [key=0, style=solid];
m12_266 -> m12_263  [key=0, style=solid];
m12_266 -> m12_266  [key=1, style=dashed, color=darkseagreen4, label=i];
m12_269 -> m12_185  [key=0, style=bold, color=blue];
m12_33 -> m12_34  [key=0, style=solid];
m12_32 -> m12_30  [key=0, style=bold, color=blue];
m12_34 -> m12_35  [key=0, style=solid];
m12_34 -> m12_10  [key=2, style=dotted];
m12_34 -> m12_36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_123 -> m12_124  [key=0, style=solid];
m12_124 -> m12_125  [key=0, style=solid];
m12_124 -> m12_133  [key=2, style=dotted];
m12_124 -> m12_134  [key=2, style=dotted];
m12_124 -> m12_135  [key=2, style=dotted];
m12_124 -> m12_136  [key=2, style=dotted];
m12_124 -> m12_141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_124 -> m12_145  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_124 -> m12_149  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_124 -> m12_152  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_124 -> m12_126  [key=1, style=dashed, color=darkseagreen4, label=tuples];
m12_125 -> m12_126  [key=0, style=solid];
m12_125 -> m12_137  [key=2, style=dotted];
m12_125 -> m12_130  [key=1, style=dashed, color=darkseagreen4, label=result];
m12_125 -> m12_131  [key=1, style=dashed, color=darkseagreen4, label=result];
m12_126 -> m12_127  [key=0, style=solid];
m12_126 -> m12_131  [key=0, style=solid];
m12_126 -> m12_128  [key=1, style=dashed, color=darkseagreen4, label=tuple];
m12_126 -> m12_130  [key=1, style=dashed, color=darkseagreen4, label=tuple];
m12_130 -> m12_126  [key=0, style=solid];
m12_130 -> m12_140  [key=2, style=dotted];
m12_130 -> m12_90  [key=2, style=dotted];
m12_131 -> m12_132  [key=0, style=solid];
m12_127 -> m12_128  [key=0, style=solid];
m12_127 -> m12_138  [key=2, style=dotted];
m12_127 -> m12_129  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
m12_127 -> m12_156  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
m12_128 -> m12_129  [key=0, style=solid];
m12_128 -> m12_139  [key=2, style=dotted];
m12_128 -> m12_130  [key=1, style=dashed, color=darkseagreen4, label=counters];
m12_129 -> m12_130  [key=0, style=solid];
m12_129 -> m12_10  [key=2, style=dotted];
m12_129 -> m12_155  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_132 -> m12_123  [key=0, style=bold, color=blue];
m12_113 -> m12_114  [key=0, style=solid];
m12_113 -> m12_117  [key=1, style=dashed, color=darkseagreen4, label=int];
m12_114 -> m12_115  [key=0, style=solid];
m12_114 -> m12_10  [key=2, style=dotted];
m12_114 -> m12_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_115 -> m12_113  [key=0, style=bold, color=blue];
m12_30 -> m12_31  [key=0, style=solid];
m12_335 -> m12_336  [key=0, style=solid];
m12_31 -> m12_32  [key=0, style=solid];
m12_31 -> m12_14  [key=2, style=dotted];
m12_36 -> m12_37  [key=0, style=solid];
m12_37 -> m12_38  [key=0, style=solid];
m12_37 -> m12_14  [key=2, style=dotted];
m12_37 -> m12_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.RecurringJobsPage"];
m12_37 -> m12_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.RecurringJobsPage"];
m12_37 -> m12_23  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.RecurringJobsPage"];
m12_38 -> m12_36  [key=0, style=bold, color=blue];
m12_43 -> m12_44  [key=0, style=solid];
m12_43 -> m12_45  [key=2, style=dotted];
m12_43 -> m12_46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_42 -> m12_43  [key=0, style=solid];
m12_44 -> m12_42  [key=0, style=bold, color=blue];
m12_46 -> m12_47  [key=0, style=solid];
m12_47 -> m12_48  [key=0, style=solid];
m12_47 -> m12_49  [key=2, style=dotted];
m12_47 -> m12_50  [key=2, style=dotted];
m12_47 -> m12_51  [key=2, style=dotted];
m12_48 -> m12_46  [key=0, style=bold, color=blue];
m12_56 -> m12_57  [key=0, style=solid];
m12_56 -> m12_45  [key=2, style=dotted];
m12_56 -> m12_58  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_55 -> m12_56  [key=0, style=solid];
m12_57 -> m12_55  [key=0, style=bold, color=blue];
m12_58 -> m12_59  [key=0, style=solid];
m12_59 -> m12_60  [key=0, style=solid];
m12_59 -> m12_61  [key=2, style=dotted];
m12_59 -> m12_51  [key=2, style=dotted];
m12_60 -> m12_58  [key=0, style=bold, color=blue];
m12_65 -> m12_66  [key=0, style=solid];
m12_66 -> m12_67  [key=0, style=solid];
m12_66 -> m12_68  [key=2, style=dotted];
m12_67 -> m12_65  [key=0, style=bold, color=blue];
m12_72 -> m12_73  [key=0, style=solid];
m12_73 -> m12_74  [key=0, style=solid];
m12_73 -> m12_68  [key=2, style=dotted];
m12_74 -> m12_72  [key=0, style=bold, color=blue];
m12_79 -> m12_80  [key=0, style=solid];
m12_80 -> m12_81  [key=0, style=solid];
m12_80 -> m12_78  [key=2, style=dotted];
m12_80 -> m12_87  [key=2, style=dotted];
m12_80 -> m12_82  [key=1, style=dashed, color=darkseagreen4, label=servers];
m12_81 -> m12_82  [key=0, style=solid];
m12_81 -> m12_88  [key=2, style=dotted];
m12_81 -> m12_84  [key=1, style=dashed, color=darkseagreen4, label=result];
m12_81 -> m12_85  [key=1, style=dashed, color=darkseagreen4, label=result];
m12_82 -> m12_83  [key=0, style=solid];
m12_82 -> m12_85  [key=0, style=solid];
m12_82 -> m12_84  [key=1, style=dashed, color=darkseagreen4, label=server];
m12_84 -> m12_82  [key=0, style=solid];
m12_84 -> m12_89  [key=2, style=dotted];
m12_84 -> m12_90  [key=2, style=dotted];
m12_85 -> m12_86  [key=0, style=solid];
m12_83 -> m12_84  [key=0, style=solid];
m12_83 -> m12_78  [key=2, style=dotted];
m12_86 -> m12_79  [key=0, style=bold, color=blue];
m12_95 -> m12_96  [key=0, style=solid];
m12_95 -> m12_45  [key=2, style=dotted];
m12_95 -> m12_97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_94 -> m12_95  [key=0, style=solid];
m12_96 -> m12_94  [key=0, style=bold, color=blue];
m12_97 -> m12_98  [key=0, style=solid];
m12_98 -> m12_99  [key=0, style=solid];
m12_98 -> m12_100  [key=2, style=dotted];
m12_98 -> m12_101  [key=2, style=dotted];
m12_99 -> m12_97  [key=0, style=bold, color=blue];
m12_106 -> m12_107  [key=0, style=solid];
m12_106 -> m12_45  [key=2, style=dotted];
m12_106 -> m12_108  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_105 -> m12_106  [key=0, style=solid];
m12_107 -> m12_105  [key=0, style=bold, color=blue];
m12_108 -> m12_109  [key=0, style=solid];
m12_109 -> m12_110  [key=0, style=solid];
m12_109 -> m12_111  [key=2, style=dotted];
m12_109 -> m12_50  [key=2, style=dotted];
m12_109 -> m12_112  [key=2, style=dotted];
m12_109 -> m12_101  [key=2, style=dotted];
m12_110 -> m12_108  [key=0, style=bold, color=blue];
m12_117 -> m12_118  [key=0, style=solid];
m12_117 -> m12_45  [key=2, style=dotted];
m12_117 -> m12_119  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_116 -> m12_117  [key=0, style=solid];
m12_118 -> m12_116  [key=0, style=bold, color=blue];
m12_119 -> m12_120  [key=0, style=solid];
m12_120 -> m12_121  [key=0, style=solid];
m12_120 -> m12_122  [key=2, style=dotted];
m12_120 -> m12_101  [key=2, style=dotted];
m12_121 -> m12_119  [key=0, style=bold, color=blue];
m12_141 -> m12_142  [key=0, style=solid];
m12_145 -> m12_146  [key=0, style=solid];
m12_149 -> m12_150  [key=0, style=solid];
m12_152 -> m12_153  [key=0, style=solid];
m12_156 -> m12_157  [key=0, style=solid];
m12_156 -> m12_158  [key=2, style=dotted];
m12_155 -> m12_156  [key=0, style=solid];
m12_142 -> m12_143  [key=0, style=solid];
m12_142 -> m12_144  [key=2, style=dotted];
m12_143 -> m12_141  [key=0, style=bold, color=blue];
m12_146 -> m12_147  [key=0, style=solid];
m12_146 -> m12_148  [key=2, style=dotted];
m12_147 -> m12_145  [key=0, style=bold, color=blue];
m12_150 -> m12_151  [key=0, style=solid];
m12_151 -> m12_149  [key=0, style=bold, color=blue];
m12_153 -> m12_154  [key=0, style=solid];
m12_154 -> m12_152  [key=0, style=bold, color=blue];
m12_157 -> m12_155  [key=0, style=bold, color=blue];
m12_166 -> m12_167  [key=0, style=solid];
m12_166 -> m12_168  [key=2, style=dotted];
m12_165 -> m12_166  [key=0, style=solid];
m12_167 -> m12_165  [key=0, style=bold, color=blue];
m12_176 -> m12_177  [key=0, style=solid];
m12_176 -> m12_178  [key=2, style=dotted];
m12_175 -> m12_176  [key=0, style=solid];
m12_177 -> m12_175  [key=0, style=bold, color=blue];
m12_182 -> m12_183  [key=0, style=solid];
m12_183 -> m12_184  [key=0, style=solid];
m12_183 -> m12_185  [key=2, style=dotted];
m12_184 -> m12_182  [key=0, style=bold, color=blue];
m12_189 -> m12_190  [key=0, style=solid];
m12_190 -> m12_191  [key=0, style=solid];
m12_190 -> m12_185  [key=2, style=dotted];
m12_191 -> m12_189  [key=0, style=bold, color=blue];
m12_197 -> m12_198  [key=0, style=solid];
m12_197 -> m12_205  [key=2, style=dotted];
m12_197 -> m12_201  [key=1, style=dashed, color=darkseagreen4, label=multi];
m12_197 -> m12_202  [key=1, style=dashed, color=darkseagreen4, label=multi];
m12_195 -> m12_196  [key=0, style=solid];
m12_195 -> m12_197  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_196 -> m12_197  [key=0, style=solid];
m12_198 -> m12_199  [key=0, style=solid];
m12_198 -> m12_78  [key=2, style=dotted];
m12_198 -> m12_206  [key=2, style=dotted];
m12_198 -> m12_203  [key=1, style=dashed, color=darkseagreen4, label=job];
m12_201 -> m12_202  [key=0, style=solid];
m12_201 -> m12_78  [key=2, style=dotted];
m12_201 -> m12_207  [key=2, style=dotted];
m12_201 -> m12_210  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_201 -> m12_213  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_201 -> m12_203  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m12_202 -> m12_203  [key=0, style=solid];
m12_202 -> m12_78  [key=2, style=dotted];
m12_202 -> m12_87  [key=2, style=dotted];
m12_202 -> m12_133  [key=2, style=dotted];
m12_202 -> m12_216  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_199 -> m12_200  [key=0, style=solid];
m12_199 -> m12_201  [key=0, style=solid];
m12_203 -> m12_204  [key=0, style=solid];
m12_203 -> m12_208  [key=2, style=dotted];
m12_203 -> m12_209  [key=2, style=dotted];
m12_200 -> m12_204  [key=0, style=solid];
m12_210 -> m12_211  [key=0, style=solid];
m12_213 -> m12_214  [key=0, style=solid];
m12_216 -> m12_217  [key=0, style=solid];
m12_204 -> m12_195  [key=0, style=bold, color=blue];
m12_211 -> m12_212  [key=0, style=solid];
m12_212 -> m12_210  [key=0, style=bold, color=blue];
m12_214 -> m12_215  [key=0, style=solid];
m12_215 -> m12_213  [key=0, style=bold, color=blue];
m12_217 -> m12_218  [key=0, style=solid];
m12_217 -> m12_219  [key=2, style=dotted];
m12_217 -> m12_220  [key=2, style=dotted];
m12_217 -> m12_78  [key=2, style=dotted];
m12_218 -> m12_216  [key=0, style=bold, color=blue];
m12_224 -> m12_225  [key=0, style=solid];
m12_225 -> m12_226  [key=0, style=solid];
m12_225 -> m12_14  [key=2, style=dotted];
m12_226 -> m12_224  [key=0, style=bold, color=blue];
m12_230 -> m12_231  [key=0, style=solid];
m12_231 -> m12_232  [key=0, style=solid];
m12_231 -> m12_14  [key=2, style=dotted];
m12_232 -> m12_230  [key=0, style=bold, color=blue];
m12_243 -> m12_244  [key=0, style=solid];
m12_243 -> m12_205  [key=2, style=dotted];
m12_243 -> m12_245  [key=1, style=dashed, color=darkseagreen4, label=multi];
m12_243 -> m12_246  [key=1, style=dashed, color=darkseagreen4, label=multi];
m12_243 -> m12_247  [key=1, style=dashed, color=darkseagreen4, label=multi];
m12_243 -> m12_248  [key=1, style=dashed, color=darkseagreen4, label=multi];
m12_243 -> m12_249  [key=1, style=dashed, color=darkseagreen4, label=multi];
m12_243 -> m12_250  [key=1, style=dashed, color=darkseagreen4, label=multi];
m12_243 -> m12_251  [key=1, style=dashed, color=darkseagreen4, label=multi];
m12_241 -> m12_242  [key=0, style=solid];
m12_241 -> m12_243  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_256 -> m12_257  [key=0, style=solid];
m12_242 -> m12_243  [key=0, style=solid];
m12_242 -> m12_254  [key=2, style=dotted];
m12_242 -> m12_244  [key=1, style=dashed, color=darkseagreen4, label=stats];
m12_242 -> m12_245  [key=1, style=dashed, color=darkseagreen4, label=stats];
m12_242 -> m12_246  [key=1, style=dashed, color=darkseagreen4, label=stats];
m12_242 -> m12_247  [key=1, style=dashed, color=darkseagreen4, label=stats];
m12_242 -> m12_248  [key=1, style=dashed, color=darkseagreen4, label=stats];
m12_242 -> m12_249  [key=1, style=dashed, color=darkseagreen4, label=stats];
m12_242 -> m12_250  [key=1, style=dashed, color=darkseagreen4, label=stats];
m12_242 -> m12_251  [key=1, style=dashed, color=darkseagreen4, label=stats];
m12_242 -> m12_252  [key=1, style=dashed, color=darkseagreen4, label=stats];
m12_244 -> m12_245  [key=0, style=solid];
m12_244 -> m12_78  [key=2, style=dotted];
m12_244 -> m12_255  [key=2, style=dotted];
m12_245 -> m12_246  [key=0, style=solid];
m12_245 -> m12_78  [key=2, style=dotted];
m12_245 -> m12_255  [key=2, style=dotted];
m12_246 -> m12_247  [key=0, style=solid];
m12_246 -> m12_78  [key=2, style=dotted];
m12_246 -> m12_255  [key=2, style=dotted];
m12_247 -> m12_248  [key=0, style=solid];
m12_247 -> m12_78  [key=2, style=dotted];
m12_247 -> m12_255  [key=2, style=dotted];
m12_248 -> m12_249  [key=0, style=solid];
m12_248 -> m12_78  [key=2, style=dotted];
m12_248 -> m12_255  [key=2, style=dotted];
m12_249 -> m12_250  [key=0, style=solid];
m12_249 -> m12_78  [key=2, style=dotted];
m12_249 -> m12_206  [key=2, style=dotted];
m12_250 -> m12_251  [key=0, style=solid];
m12_250 -> m12_78  [key=2, style=dotted];
m12_250 -> m12_206  [key=2, style=dotted];
m12_251 -> m12_252  [key=0, style=solid];
m12_251 -> m12_78  [key=2, style=dotted];
m12_251 -> m12_255  [key=2, style=dotted];
m12_252 -> m12_253  [key=0, style=solid];
m12_253 -> m12_241  [key=0, style=bold, color=blue];
m12_257 -> m12_258  [key=0, style=solid];
m12_257 -> m12_144  [key=2, style=dotted];
m12_257 -> m12_259  [key=2, style=dotted];
m12_258 -> m12_256  [key=0, style=bold, color=blue];
m12_273 -> m12_274  [key=0, style=solid];
m12_273 -> m12_275  [key=2, style=dotted];
m12_273 -> m12_276  [key=2, style=dotted];
m12_272 -> m12_273  [key=0, style=solid];
m12_277 -> m12_278  [key=0, style=solid];
m12_274 -> m12_272  [key=0, style=bold, color=blue];
m12_278 -> m12_279  [key=0, style=solid];
m12_279 -> m12_277  [key=0, style=bold, color=blue];
m12_292 -> m12_293  [key=0, style=solid];
m12_292 -> m12_275  [key=2, style=dotted];
m12_292 -> m12_276  [key=2, style=dotted];
m12_291 -> m12_292  [key=0, style=solid];
m12_294 -> m12_295  [key=0, style=solid];
m12_293 -> m12_291  [key=0, style=bold, color=blue];
m12_295 -> m12_296  [key=0, style=solid];
m12_296 -> m12_294  [key=0, style=bold, color=blue];
m12_316 -> m12_317  [key=0, style=solid];
m12_319 -> m12_320  [key=0, style=solid];
m12_317 -> m12_318  [key=0, style=solid];
m12_318 -> m12_316  [key=0, style=bold, color=blue];
m12_320 -> m12_321  [key=0, style=solid];
m12_321 -> m12_319  [key=0, style=bold, color=blue];
m12_336 -> m12_337  [key=0, style=solid];
m12_336 -> m12_338  [key=2, style=dotted];
m12_336 -> m12_101  [key=2, style=dotted];
m12_337 -> m12_335  [key=0, style=bold, color=blue];
m12_35 -> m12_33  [key=0, style=bold, color=blue];
m12_26 -> m12_22  [key=0, style=bold, color=blue];
m12_102 -> m12_103  [key=0, style=solid];
m12_102 -> m12_106  [key=1, style=dashed, color=darkseagreen4, label=int];
m12_103 -> m12_104  [key=0, style=solid];
m12_103 -> m12_10  [key=2, style=dotted];
m12_103 -> m12_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_104 -> m12_102  [key=0, style=bold, color=blue];
m12_178 -> m12_370  [key=0, style=solid];
m12_178 -> m12_371  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_370 -> m12_371  [key=0, style=solid];
m12_371 -> m12_372  [key=0, style=solid];
m12_371 -> m12_78  [key=2, style=dotted];
m12_371 -> m12_87  [key=2, style=dotted];
m12_371 -> m12_373  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m12_372 -> m12_373  [key=0, style=solid];
m12_372 -> m12_377  [key=2, style=dotted];
m12_372 -> m12_374  [key=1, style=dashed, color=darkseagreen4, label=result];
m12_372 -> m12_375  [key=1, style=dashed, color=darkseagreen4, label=result];
m12_373 -> m12_374  [key=0, style=solid];
m12_373 -> m12_375  [key=0, style=solid];
m12_374 -> m12_373  [key=0, style=solid];
m12_374 -> m12_378  [key=2, style=dotted];
m12_374 -> d91  [key=2, style=dotted];
m12_374 -> m12_380  [key=2, style=dotted];
m12_374 -> m12_209  [key=2, style=dotted];
m12_374 -> m12_90  [key=2, style=dotted];
m12_375 -> m12_376  [key=0, style=solid];
m12_375 -> m12_369  [key=2, style=dotted];
m12_376 -> m12_178  [key=0, style=bold, color=blue];
m12_192 -> m12_193  [key=0, style=solid];
m12_192 -> m12_197  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_193 -> m12_194  [key=0, style=solid];
m12_193 -> m12_10  [key=2, style=dotted];
m12_193 -> m12_195  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_194 -> m12_192  [key=0, style=bold, color=blue];
m12_168 -> m12_330  [key=0, style=solid];
m12_168 -> m12_331  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_330 -> m12_331  [key=0, style=solid];
m12_331 -> m12_332  [key=0, style=solid];
m12_331 -> m12_78  [key=2, style=dotted];
m12_331 -> m12_87  [key=2, style=dotted];
m12_332 -> m12_333  [key=0, style=solid];
m12_332 -> m12_334  [key=2, style=dotted];
m12_332 -> m12_335  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_333 -> m12_168  [key=0, style=bold, color=blue];
m12_221 -> m12_222  [key=0, style=solid];
m12_222 -> m12_223  [key=0, style=solid];
m12_222 -> m12_10  [key=2, style=dotted];
m12_222 -> m12_224  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_223 -> m12_221  [key=0, style=bold, color=blue];
m12_91 -> m12_92  [key=0, style=solid];
m12_91 -> m12_95  [key=1, style=dashed, color=darkseagreen4, label=int];
m12_92 -> m12_93  [key=0, style=solid];
m12_92 -> m12_10  [key=2, style=dotted];
m12_92 -> m12_94  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_93 -> m12_91  [key=0, style=bold, color=blue];
m12_343 -> m12_344  [key=0, style=solid];
m12_343 -> m12_345  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_344 -> m12_345  [key=0, style=solid];
m12_344 -> m12_350  [key=2, style=dotted];
m12_344 -> m12_346  [key=1, style=dashed, color=darkseagreen4, label=data];
m12_345 -> m12_346  [key=0, style=solid];
m12_346 -> m12_349  [key=0, style=solid];
m12_346 -> m12_351  [key=2, style=dotted];
m12_347 -> m12_348  [key=0, style=solid];
m12_348 -> m12_349  [key=0, style=solid];
m12_349 -> m12_343  [key=0, style=bold, color=blue];
m12_75 -> m12_76  [key=0, style=solid];
m12_76 -> m12_77  [key=0, style=solid];
m12_76 -> m12_78  [key=2, style=dotted];
m12_76 -> m12_79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_77 -> m12_75  [key=0, style=bold, color=blue];
m12_322 -> m12_323  [key=0, style=solid];
m12_322 -> m12_326  [key=2, style=dotted];
m12_323 -> m12_324  [key=0, style=solid];
m12_323 -> m12_144  [key=2, style=dotted];
m12_324 -> m12_325  [key=0, style=solid];
m12_325 -> m12_20  [key=0, style=bold, color=blue];
m12_39 -> m12_40  [key=0, style=solid];
m12_39 -> m12_43  [key=1, style=dashed, color=darkseagreen4, label=int];
m12_40 -> m12_41  [key=0, style=solid];
m12_40 -> m12_10  [key=2, style=dotted];
m12_40 -> m12_42  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_41 -> m12_39  [key=0, style=bold, color=blue];
m12_52 -> m12_53  [key=0, style=solid];
m12_52 -> m12_56  [key=1, style=dashed, color=darkseagreen4, label=int];
m12_53 -> m12_54  [key=0, style=solid];
m12_53 -> m12_10  [key=2, style=dotted];
m12_53 -> m12_55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_54 -> m12_52  [key=0, style=bold, color=blue];
m12_69 -> m12_70  [key=0, style=solid];
m12_70 -> m12_71  [key=0, style=solid];
m12_70 -> m12_10  [key=2, style=dotted];
m12_70 -> m12_72  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_71 -> m12_69  [key=0, style=bold, color=blue];
m12_179 -> m12_180  [key=0, style=solid];
m12_180 -> m12_181  [key=0, style=solid];
m12_180 -> m12_10  [key=2, style=dotted];
m12_180 -> m12_182  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_181 -> m12_179  [key=0, style=bold, color=blue];
m12_62 -> m12_63  [key=0, style=solid];
m12_63 -> m12_64  [key=0, style=solid];
m12_63 -> m12_10  [key=2, style=dotted];
m12_63 -> m12_65  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_64 -> m12_62  [key=0, style=bold, color=blue];
m12_68 -> m12_280  [key=0, style=solid];
m12_68 -> m12_287  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_68 -> m12_292  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_68 -> m12_288  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_280 -> m12_281  [key=0, style=solid];
m12_280 -> m12_284  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m12_280 -> m12_285  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m12_287 -> m12_288  [key=0, style=solid];
m12_287 -> m12_207  [key=2, style=dotted];
m12_287 -> m12_291  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_287 -> m12_294  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_288 -> m12_289  [key=0, style=solid];
m12_288 -> m12_271  [key=2, style=dotted];
m12_281 -> m12_282  [key=0, style=solid];
m12_281 -> m12_88  [key=2, style=dotted];
m12_281 -> m12_284  [key=1, style=dashed, color=darkseagreen4, label=dates];
m12_281 -> m12_287  [key=1, style=dashed, color=darkseagreen4, label=dates];
m12_284 -> m12_285  [key=0, style=solid];
m12_284 -> m12_90  [key=2, style=dotted];
m12_285 -> m12_286  [key=0, style=solid];
m12_285 -> m12_290  [key=2, style=dotted];
m12_285 -> m12_285  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m12_282 -> m12_283  [key=0, style=solid];
m12_282 -> m12_286  [key=1, style=dashed, color=darkseagreen4, label=i];
m12_283 -> m12_284  [key=0, style=solid];
m12_283 -> m12_287  [key=0, style=solid];
m12_286 -> m12_283  [key=0, style=solid];
m12_286 -> m12_286  [key=1, style=dashed, color=darkseagreen4, label=i];
m12_289 -> m12_68  [key=0, style=bold, color=blue];
m12_297 -> m12_298  [key=0, style=solid];
m12_297 -> m12_299  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_297 -> m12_300  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, System.DateTime>"];
m12_297 -> m12_305  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, System.DateTime>"];
m12_297 -> m12_306  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, System.DateTime>"];
m12_297 -> m12_307  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, System.DateTime>"];
m12_298 -> m12_299  [key=0, style=solid];
m12_299 -> m12_300  [key=0, style=solid];
m12_299 -> m12_311  [key=2, style=dotted];
m12_299 -> m12_207  [key=2, style=dotted];
m12_299 -> m12_316  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_299 -> m12_319  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_299 -> m12_301  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m12_299 -> m12_302  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m12_299 -> m12_306  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m12_300 -> m12_301  [key=0, style=solid];
m12_300 -> m12_303  [key=0, style=solid];
m12_300 -> m12_302  [key=1, style=dashed, color=darkseagreen4, label=key];
m12_305 -> m12_306  [key=0, style=solid];
m12_305 -> m12_309  [key=0, style=solid];
m12_306 -> m12_307  [key=0, style=solid];
m12_306 -> m12_315  [key=2, style=dotted];
m12_307 -> m12_308  [key=0, style=solid];
m12_307 -> m12_315  [key=2, style=dotted];
m12_307 -> m12_313  [key=2, style=dotted];
m12_301 -> m12_302  [key=0, style=solid];
m12_301 -> m12_300  [key=0, style=solid];
m12_301 -> m12_312  [key=2, style=dotted];
m12_302 -> m12_300  [key=0, style=solid];
m12_302 -> m12_313  [key=2, style=dotted];
m12_303 -> m12_304  [key=0, style=solid];
m12_303 -> m12_314  [key=2, style=dotted];
m12_303 -> m12_307  [key=1, style=dashed, color=darkseagreen4, label=result];
m12_303 -> m12_309  [key=1, style=dashed, color=darkseagreen4, label=result];
m12_304 -> m12_305  [key=0, style=solid];
m12_304 -> m12_306  [key=1, style=dashed, color=darkseagreen4, label=i];
m12_304 -> m12_307  [key=1, style=dashed, color=darkseagreen4, label=i];
m12_304 -> m12_308  [key=1, style=dashed, color=darkseagreen4, label=i];
m12_309 -> m12_310  [key=0, style=solid];
m12_308 -> m12_305  [key=0, style=solid];
m12_308 -> m12_308  [key=1, style=dashed, color=darkseagreen4, label=i];
m12_310 -> m12_297  [key=0, style=bold, color=blue];
m12_159 -> m12_160  [key=0, style=solid];
m12_159 -> m12_161  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_160 -> m12_161  [key=0, style=solid];
m12_160 -> m12_20  [key=2, style=dotted];
m12_161 -> m12_162  [key=0, style=solid];
m12_161 -> m12_164  [key=2, style=dotted];
m12_161 -> m12_166  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
m12_162 -> m12_163  [key=0, style=solid];
m12_162 -> m12_10  [key=2, style=dotted];
m12_162 -> m12_165  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_163 -> m12_159  [key=0, style=bold, color=blue];
m12_381 -> m12_3  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_16  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_23  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_28  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_31  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_34  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_37  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_40  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_43  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_53  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_56  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_63  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_66  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_70  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_73  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_76  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_92  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_95  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_103  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_106  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_114  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_117  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_124  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_129  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_156  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_160  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_162  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_166  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_170  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_172  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_176  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_180  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_183  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_187  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_190  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_193  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_203  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_222  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_225  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_228  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_231  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_235  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_236  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_268  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_288  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_322  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_327  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_332  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_339  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_340  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_354  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_381 -> m12_374  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m12_382 -> m12_43  [key=1, style=dashed, color=darkseagreen4, label=int];
m12_383 -> m12_43  [key=1, style=dashed, color=darkseagreen4, label=int];
m12_384 -> m12_56  [key=1, style=dashed, color=darkseagreen4, label=int];
m12_385 -> m12_56  [key=1, style=dashed, color=darkseagreen4, label=int];
m12_386 -> m12_95  [key=1, style=dashed, color=darkseagreen4, label=int];
m12_387 -> m12_95  [key=1, style=dashed, color=darkseagreen4, label=int];
m12_388 -> m12_106  [key=1, style=dashed, color=darkseagreen4, label=int];
m12_389 -> m12_106  [key=1, style=dashed, color=darkseagreen4, label=int];
m12_390 -> m12_117  [key=1, style=dashed, color=darkseagreen4, label=int];
m12_391 -> m12_117  [key=1, style=dashed, color=darkseagreen4, label=int];
m12_392 -> m12_156  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
m12_393 -> m12_166  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
m12_394 -> m12_176  [key=1, style=dashed, color=darkseagreen4, label=fetchedJobIds];
m12_395 -> m12_197  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_396 -> m12_243  [key=1, style=dashed, color=darkseagreen4, label=sql];
m12_397 -> m12_273  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_398 -> m12_292  [key=1, style=dashed, color=darkseagreen4, label=string];
m13_92 -> m13_93  [key=0, style=solid];
m13_93 -> m13_94  [key=0, style=solid];
m13_93 -> m13_15  [key=2, style=dotted];
m13_93 -> m13_101  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_93 -> m13_96  [key=1, style=dashed, color=green, label=job];
m13_93 -> m13_97  [key=1, style=dashed, color=darkseagreen4, label=job];
m13_93 -> m13_106  [key=1, style=dashed, color=darkseagreen4, label=job];
m13_94 -> m13_95  [key=0, style=solid];
m13_94 -> m13_99  [key=2, style=dotted];
m13_96 -> m13_97  [key=0, style=solid, color=green];
m13_96 -> m13_74  [key=2, style=dotted, color=green];
m13_97 -> m13_98  [key=0, style=solid];
m13_97 -> m13_100  [key=2, style=dotted];
m13_97 -> m13_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_95 -> m13_96  [key=0, style=solid, color=green];
m13_95 -> m13_70  [key=2, style=dotted];
m13_98 -> m13_92  [key=0, style=bold, color=blue];
m13_214 -> m13_215  [key=0, style=solid];
m13_215 -> m13_216  [key=0, style=solid];
m13_215 -> m13_18  [key=2, style=dotted];
m13_215 -> m13_221  [key=2, style=dotted];
m13_215 -> m13_222  [key=2, style=dotted];
m13_215 -> m13_223  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_216 -> m13_217  [key=0, style=solid];
m13_216 -> m13_70  [key=2, style=dotted];
m13_217 -> m13_218  [key=0, style=solid];
m13_217 -> m13_135  [key=2, style=dotted];
m13_217 -> m13_219  [key=1, style=dashed, color=darkseagreen4, label=result];
m13_218 -> m13_219  [key=0, style=solid];
m13_218 -> m13_100  [key=2, style=dotted];
m13_218 -> m13_226  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_219 -> m13_220  [key=0, style=solid];
m13_219 -> m13_195  [key=2, style=dotted];
m13_220 -> m13_214  [key=0, style=bold, color=blue];
m13_58 -> m13_59  [key=0, style=solid];
m13_59 -> m13_60  [key=0, style=solid];
m13_59 -> m13_38  [key=2, style=dotted];
m13_59 -> m13_62  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_60 -> m13_61  [key=0, style=solid];
m13_60 -> d5  [key=2, style=dotted];
m13_61 -> m13_58  [key=0, style=bold, color=blue];
m13_83 -> m13_84  [key=0, style=solid];
m13_84 -> m13_85  [key=0, style=solid, color=green];
m13_84 -> m13_70  [key=2, style=dotted];
m13_84 -> m13_89  [key=1, style=dashed, color=green, label=stateMachine];
m13_85 -> m13_86  [key=0, style=solid, color=green];
m13_85 -> m13_38  [key=2, style=dotted, color=green];
m13_85 -> m13_88  [key=1, style=dashed, color=green, label="lambda expression"];
m13_86 -> m13_87  [key=0, style=solid];
m13_86 -> d5  [key=2, style=dotted];
m13_87 -> m13_83  [key=0, style=bold, color=blue];
m13_247 -> m13_248  [key=0, style=solid];
m13_248 -> m13_249  [key=0, style=solid];
m13_248 -> m13_18  [key=2, style=dotted];
m13_248 -> m13_22  [key=2, style=dotted];
m13_248 -> m13_236  [key=2, style=dotted];
m13_248 -> m13_221  [key=2, style=dotted];
m13_248 -> m13_19  [key=2, style=dotted];
m13_248 -> m13_255  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_249 -> m13_250  [key=0, style=solid];
m13_249 -> m13_18  [key=2, style=dotted];
m13_249 -> m13_19  [key=2, style=dotted];
m13_249 -> m13_258  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_250 -> m13_251  [key=0, style=solid];
m13_250 -> m13_70  [key=2, style=dotted];
m13_251 -> m13_252  [key=0, style=solid];
m13_251 -> m13_135  [key=2, style=dotted];
m13_251 -> m13_253  [key=1, style=dashed, color=darkseagreen4, label=result];
m13_252 -> m13_253  [key=0, style=solid];
m13_252 -> m13_100  [key=2, style=dotted];
m13_252 -> m13_261  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_253 -> m13_254  [key=0, style=solid];
m13_253 -> m13_168  [key=2, style=dotted];
m13_254 -> m13_247  [key=0, style=bold, color=blue];
m13_75 -> m13_76  [key=0, style=solid];
m13_76 -> m13_77  [key=0, style=solid, color=green];
m13_76 -> m13_70  [key=2, style=dotted];
m13_76 -> m13_81  [key=1, style=dashed, color=green, label=stateMachine];
m13_77 -> m13_78  [key=0, style=solid, color=green];
m13_77 -> m13_38  [key=2, style=dotted, color=green];
m13_77 -> m13_80  [key=1, style=dashed, color=green, label="lambda expression"];
m13_78 -> m13_79  [key=0, style=solid];
m13_78 -> d5  [key=2, style=dotted];
m13_79 -> m13_75  [key=0, style=bold, color=blue];
m13_0 -> m13_1  [key=0, style=solid];
m13_1 -> m13_2  [key=0, style=solid];
m13_1 -> m13_14  [key=2, style=dotted];
m13_2 -> m13_3  [key=0, style=solid];
m13_2 -> m13_15  [key=2, style=dotted];
m13_2 -> m13_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_3 -> m13_4  [key=0, style=solid];
m13_3 -> m13_16  [key=2, style=dotted];
m13_4 -> m13_5  [key=0, style=solid];
m13_4 -> m13_17  [key=2, style=dotted];
m13_5 -> m13_6  [key=0, style=solid];
m13_5 -> m13_18  [key=2, style=dotted];
m13_5 -> m13_19  [key=2, style=dotted];
m13_5 -> m13_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_6 -> m13_7  [key=0, style=solid];
m13_6 -> m13_20  [key=2, style=dotted];
m13_7 -> m13_8  [key=0, style=solid];
m13_7 -> m13_21  [key=2, style=dotted];
m13_8 -> m13_9  [key=0, style=solid];
m13_8 -> m13_18  [key=2, style=dotted];
m13_8 -> m13_19  [key=2, style=dotted];
m13_8 -> m13_31  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_9 -> m13_10  [key=0, style=solid];
m13_9 -> m13_18  [key=2, style=dotted];
m13_9 -> m13_19  [key=2, style=dotted];
m13_9 -> m13_35  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_10 -> m13_11  [key=0, style=solid];
m13_10 -> m13_18  [key=2, style=dotted];
m13_10 -> m13_22  [key=2, style=dotted];
m13_10 -> m13_19  [key=2, style=dotted];
m13_10 -> m13_40  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_11 -> m13_12  [key=0, style=solid];
m13_11 -> m13_23  [key=2, style=dotted];
m13_12 -> m13_13  [key=0, style=solid];
m13_12 -> m13_18  [key=2, style=dotted];
m13_12 -> m13_19  [key=2, style=dotted];
m13_12 -> m13_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_13 -> m13_0  [key=0, style=bold, color=blue];
m13_145 -> m13_146  [key=0, style=solid];
m13_146 -> m13_147  [key=0, style=solid];
m13_146 -> m13_70  [key=2, style=dotted];
m13_146 -> m13_151  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m13_147 -> m13_148  [key=0, style=solid];
m13_147 -> m13_38  [key=2, style=dotted];
m13_147 -> m13_150  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_148 -> m13_149  [key=0, style=solid];
m13_148 -> d5  [key=2, style=dotted];
m13_149 -> m13_145  [key=0, style=bold, color=blue];
m13_267 -> m13_268  [key=0, style=solid];
m13_268 -> m13_269  [key=0, style=solid];
m13_268 -> m13_70  [key=2, style=dotted];
m13_269 -> m13_270  [key=0, style=solid];
m13_269 -> m13_135  [key=2, style=dotted];
m13_269 -> m13_272  [key=1, style=dashed, color=darkseagreen4, label=result];
m13_270 -> m13_271  [key=0, style=solid];
m13_270 -> m13_100  [key=2, style=dotted];
m13_270 -> m13_274  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_272 -> m13_273  [key=0, style=solid];
m13_272 -> m13_168  [key=2, style=dotted];
m13_271 -> m13_272  [key=0, style=solid];
m13_271 -> m13_100  [key=2, style=dotted];
m13_271 -> m13_280  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_273 -> m13_267  [key=0, style=bold, color=blue];
m13_176 -> m13_177  [key=0, style=solid];
m13_177 -> m13_178  [key=0, style=solid];
m13_177 -> m13_70  [key=2, style=dotted];
m13_178 -> m13_179  [key=0, style=solid];
m13_178 -> m13_135  [key=2, style=dotted];
m13_179 -> m13_180  [key=0, style=solid];
m13_179 -> m13_100  [key=2, style=dotted];
m13_179 -> m13_181  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_180 -> m13_176  [key=0, style=bold, color=blue];
m13_127 -> m13_128  [key=0, style=solid];
m13_128 -> m13_129  [key=0, style=solid];
m13_128 -> m13_70  [key=2, style=dotted];
m13_128 -> m13_133  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m13_129 -> m13_130  [key=0, style=solid];
m13_129 -> m13_38  [key=2, style=dotted];
m13_129 -> m13_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_130 -> m13_131  [key=0, style=solid];
m13_130 -> d5  [key=2, style=dotted];
m13_131 -> m13_127  [key=0, style=bold, color=blue];
m13_49 -> m13_50  [key=0, style=solid];
m13_50 -> m13_51  [key=0, style=solid];
m13_50 -> m13_38  [key=2, style=dotted];
m13_50 -> m13_54  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_51 -> m13_52  [key=0, style=solid];
m13_51 -> d5  [key=2, style=dotted];
m13_52 -> m13_49  [key=0, style=bold, color=blue];
m13_153 -> m13_154  [key=0, style=solid];
m13_154 -> m13_155  [key=0, style=solid];
m13_154 -> m13_70  [key=2, style=dotted];
m13_155 -> m13_156  [key=0, style=solid];
m13_155 -> m13_135  [key=2, style=dotted];
m13_156 -> m13_157  [key=0, style=solid];
m13_156 -> m13_100  [key=2, style=dotted];
m13_156 -> m13_158  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_157 -> m13_153  [key=0, style=bold, color=blue];
m13_70 -> m13_323  [key=0, style=solid];
m13_323 -> m13_324  [key=0, style=solid];
m13_323 -> m13_57  [key=2, style=dotted];
m13_324 -> m13_70  [key=0, style=bold, color=blue];
m13_136 -> m13_137  [key=0, style=solid];
m13_137 -> m13_138  [key=0, style=solid];
m13_137 -> m13_70  [key=2, style=dotted];
m13_137 -> m13_142  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m13_138 -> m13_139  [key=0, style=solid];
m13_138 -> m13_38  [key=2, style=dotted];
m13_138 -> m13_141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_139 -> m13_140  [key=0, style=solid];
m13_139 -> d5  [key=2, style=dotted];
m13_140 -> m13_136  [key=0, style=bold, color=blue];
m13_305 -> m13_306  [key=0, style=solid];
m13_306 -> m13_307  [key=0, style=solid];
m13_306 -> m13_313  [key=2, style=dotted];
m13_306 -> m13_310  [key=1, style=dashed, color=darkseagreen4, label=exception];
m13_306 -> m13_318  [key=1, style=dashed, color=darkseagreen4, label=exception];
m13_306 -> m13_321  [key=1, style=dashed, color=darkseagreen4, label=exception];
m13_307 -> m13_308  [key=0, style=solid];
m13_307 -> m13_18  [key=2, style=dotted];
m13_307 -> m13_222  [key=2, style=dotted];
m13_307 -> m13_314  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_310 -> m13_311  [key=0, style=solid];
m13_310 -> m13_100  [key=2, style=dotted];
m13_310 -> m13_317  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_308 -> m13_309  [key=0, style=solid];
m13_308 -> m13_70  [key=2, style=dotted];
m13_309 -> m13_310  [key=0, style=solid];
m13_309 -> m13_135  [key=2, style=dotted];
m13_309 -> m13_311  [key=1, style=dashed, color=darkseagreen4, label=result];
m13_311 -> m13_312  [key=0, style=solid];
m13_311 -> m13_195  [key=2, style=dotted];
m13_312 -> m13_305  [key=0, style=bold, color=blue];
m13_65 -> m13_66  [key=0, style=solid];
m13_66 -> m13_67  [key=0, style=solid, color=green];
m13_66 -> m13_70  [key=2, style=dotted];
m13_66 -> m13_72  [key=1, style=dashed, color=green, label=stateMachine];
m13_67 -> m13_68  [key=0, style=solid, color=green];
m13_67 -> m13_38  [key=2, style=dotted, color=green];
m13_67 -> m13_71  [key=1, style=dashed, color=green, label="lambda expression"];
m13_68 -> m13_69  [key=0, style=solid];
m13_68 -> d5  [key=2, style=dotted];
m13_69 -> m13_65  [key=0, style=bold, color=blue];
m13_123 -> m13_124  [key=0, style=solid];
m13_124 -> m13_125  [key=0, style=solid, color=green];
m13_124 -> m13_70  [key=2, style=dotted];
m13_125 -> m13_126  [key=0, style=solid, color=green];
m13_125 -> m13_74  [key=2, style=dotted, color=green];
m13_125 -> d5  [key=2, style=dotted, color=green];
m13_126 -> m13_123  [key=0, style=bold, color=blue];
m13_205 -> m13_206  [key=0, style=solid];
m13_206 -> m13_207  [key=0, style=solid];
m13_206 -> m13_70  [key=2, style=dotted];
m13_207 -> m13_208  [key=0, style=solid];
m13_207 -> m13_135  [key=2, style=dotted];
m13_208 -> m13_209  [key=0, style=solid];
m13_208 -> m13_195  [key=2, style=dotted];
m13_209 -> m13_210  [key=0, style=solid];
m13_209 -> m13_100  [key=2, style=dotted];
m13_209 -> m13_211  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_210 -> m13_205  [key=0, style=bold, color=blue];
m13_162 -> m13_163  [key=0, style=solid];
m13_163 -> m13_164  [key=0, style=solid];
m13_163 -> m13_70  [key=2, style=dotted];
m13_164 -> m13_165  [key=0, style=solid];
m13_164 -> m13_135  [key=2, style=dotted];
m13_164 -> m13_166  [key=1, style=dashed, color=darkseagreen4, label=result];
m13_165 -> m13_166  [key=0, style=solid];
m13_165 -> m13_100  [key=2, style=dotted];
m13_165 -> m13_169  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_166 -> m13_167  [key=0, style=solid];
m13_166 -> m13_168  [key=2, style=dotted];
m13_167 -> m13_162  [key=0, style=bold, color=blue];
m13_320 -> m13_321  [key=0, style=solid];
m13_24 -> m13_25  [key=0, style=solid];
m13_28 -> m13_29  [key=0, style=solid];
m13_31 -> m13_32  [key=0, style=solid];
m13_35 -> m13_36  [key=0, style=solid];
m13_40 -> m13_41  [key=0, style=solid];
m13_44 -> m13_45  [key=0, style=solid];
m13_25 -> m13_26  [key=0, style=solid];
m13_25 -> m13_27  [key=2, style=dotted];
m13_26 -> m13_24  [key=0, style=bold, color=blue];
m13_29 -> m13_30  [key=0, style=solid];
m13_30 -> m13_28  [key=0, style=bold, color=blue];
m13_32 -> m13_33  [key=0, style=solid];
m13_32 -> m13_34  [key=2, style=dotted];
m13_33 -> m13_31  [key=0, style=bold, color=blue];
m13_36 -> m13_37  [key=0, style=solid];
m13_36 -> m13_38  [key=2, style=dotted];
m13_36 -> m13_39  [key=2, style=dotted];
m13_37 -> m13_35  [key=0, style=bold, color=blue];
m13_41 -> m13_42  [key=0, style=solid];
m13_41 -> m13_43  [key=2, style=dotted];
m13_42 -> m13_40  [key=0, style=bold, color=blue];
m13_45 -> m13_46  [key=0, style=solid];
m13_45 -> m13_47  [key=2, style=dotted];
m13_45 -> m13_38  [key=2, style=dotted];
m13_45 -> m13_48  [key=2, style=dotted];
m13_46 -> m13_44  [key=0, style=bold, color=blue];
m13_54 -> m13_55  [key=0, style=solid];
m13_55 -> m13_56  [key=0, style=solid];
m13_55 -> m13_57  [key=2, style=dotted];
m13_56 -> m13_54  [key=0, style=bold, color=blue];
m13_62 -> m13_63  [key=0, style=solid];
m13_63 -> m13_64  [key=0, style=solid];
m13_63 -> m13_57  [key=2, style=dotted];
m13_64 -> m13_62  [key=0, style=bold, color=blue];
m13_72 -> m13_73  [key=0, style=solid, color=green];
m13_72 -> m13_74  [key=2, style=dotted, color=green];
m13_71 -> m13_72  [key=0, style=solid, color=green];
m13_73 -> m13_71  [key=0, style=bold, color=blue];
m13_81 -> m13_82  [key=0, style=solid, color=green];
m13_81 -> m13_74  [key=2, style=dotted, color=green];
m13_80 -> m13_81  [key=0, style=solid, color=green];
m13_82 -> m13_80  [key=0, style=bold, color=blue];
m13_89 -> m13_90  [key=0, style=solid, color=green];
m13_89 -> m13_91  [key=2, style=dotted, color=green];
m13_88 -> m13_89  [key=0, style=solid, color=green];
m13_90 -> m13_88  [key=0, style=bold, color=blue];
m13_101 -> m13_102  [key=0, style=solid];
m13_106 -> m13_107  [key=0, style=solid];
m13_106 -> m13_38  [key=2, style=dotted];
m13_106 -> m13_39  [key=2, style=dotted];
m13_106 -> m13_108  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_105 -> m13_106  [key=0, style=solid];
m13_102 -> m13_103  [key=0, style=solid];
m13_102 -> m13_104  [key=2, style=dotted];
m13_103 -> m13_101  [key=0, style=bold, color=blue];
m13_107 -> m13_105  [key=0, style=bold, color=blue];
m13_108 -> m13_109  [key=0, style=solid];
m13_109 -> m13_110  [key=0, style=solid];
m13_110 -> m13_108  [key=0, style=bold, color=blue];
m13_116 -> m13_117  [key=0, style=solid];
m13_117 -> m13_118  [key=0, style=solid];
m13_117 -> m13_38  [key=2, style=dotted];
m13_117 -> m13_119  [key=2, style=dotted];
m13_117 -> m13_120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_118 -> m13_116  [key=0, style=bold, color=blue];
m13_120 -> m13_121  [key=0, style=solid];
m13_121 -> m13_122  [key=0, style=solid];
m13_122 -> m13_120  [key=0, style=bold, color=blue];
m13_133 -> m13_134  [key=0, style=solid];
m13_133 -> m13_135  [key=2, style=dotted];
m13_132 -> m13_133  [key=0, style=solid];
m13_134 -> m13_132  [key=0, style=bold, color=blue];
m13_142 -> m13_143  [key=0, style=solid];
m13_142 -> m13_144  [key=2, style=dotted];
m13_141 -> m13_142  [key=0, style=solid];
m13_143 -> m13_141  [key=0, style=bold, color=blue];
m13_151 -> m13_152  [key=0, style=solid];
m13_151 -> m13_135  [key=2, style=dotted];
m13_150 -> m13_151  [key=0, style=solid];
m13_152 -> m13_150  [key=0, style=bold, color=blue];
m13_158 -> m13_159  [key=0, style=solid];
m13_159 -> m13_160  [key=0, style=solid];
m13_159 -> m13_161  [key=2, style=dotted];
m13_160 -> m13_158  [key=0, style=bold, color=blue];
m13_169 -> m13_170  [key=0, style=solid];
m13_170 -> m13_171  [key=0, style=solid];
m13_170 -> m13_38  [key=2, style=dotted];
m13_170 -> m13_119  [key=2, style=dotted];
m13_170 -> m13_172  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_171 -> m13_169  [key=0, style=bold, color=blue];
m13_172 -> m13_173  [key=0, style=solid];
m13_173 -> m13_174  [key=0, style=solid];
m13_173 -> m13_175  [key=2, style=dotted];
m13_174 -> m13_172  [key=0, style=bold, color=blue];
m13_181 -> m13_182  [key=0, style=solid];
m13_182 -> m13_183  [key=0, style=solid];
m13_182 -> m13_38  [key=2, style=dotted];
m13_182 -> m13_119  [key=2, style=dotted];
m13_182 -> m13_184  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_183 -> m13_181  [key=0, style=bold, color=blue];
m13_184 -> m13_185  [key=0, style=solid];
m13_185 -> m13_186  [key=0, style=solid];
m13_186 -> m13_184  [key=0, style=bold, color=blue];
m13_196 -> m13_197  [key=0, style=solid];
m13_199 -> m13_200  [key=0, style=solid];
m13_202 -> m13_203  [key=0, style=solid];
m13_197 -> m13_198  [key=0, style=solid];
m13_197 -> m13_38  [key=2, style=dotted];
m13_197 -> m13_43  [key=2, style=dotted];
m13_198 -> m13_196  [key=0, style=bold, color=blue];
m13_200 -> m13_201  [key=0, style=solid];
m13_200 -> m13_43  [key=2, style=dotted];
m13_201 -> m13_199  [key=0, style=bold, color=blue];
m13_203 -> m13_204  [key=0, style=solid];
m13_203 -> m13_38  [key=2, style=dotted];
m13_203 -> m13_119  [key=2, style=dotted];
m13_204 -> m13_202  [key=0, style=bold, color=blue];
m13_211 -> m13_212  [key=0, style=solid];
m13_212 -> m13_213  [key=0, style=solid];
m13_212 -> m13_38  [key=2, style=dotted];
m13_212 -> m13_119  [key=2, style=dotted];
m13_213 -> m13_211  [key=0, style=bold, color=blue];
m13_223 -> m13_224  [key=0, style=solid];
m13_226 -> m13_227  [key=0, style=solid];
m13_224 -> m13_225  [key=0, style=solid];
m13_224 -> m13_38  [key=2, style=dotted];
m13_224 -> m13_119  [key=2, style=dotted];
m13_225 -> m13_223  [key=0, style=bold, color=blue];
m13_227 -> m13_228  [key=0, style=solid];
m13_227 -> m13_38  [key=2, style=dotted];
m13_227 -> m13_119  [key=2, style=dotted];
m13_228 -> m13_226  [key=0, style=bold, color=blue];
m13_238 -> m13_239  [key=0, style=solid];
m13_241 -> m13_242  [key=0, style=solid];
m13_239 -> m13_240  [key=0, style=solid];
m13_239 -> m13_43  [key=2, style=dotted];
m13_240 -> m13_238  [key=0, style=bold, color=blue];
m13_242 -> m13_243  [key=0, style=solid];
m13_242 -> m13_38  [key=2, style=dotted];
m13_242 -> m13_119  [key=2, style=dotted];
m13_242 -> m13_244  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_243 -> m13_241  [key=0, style=bold, color=blue];
m13_244 -> m13_245  [key=0, style=solid];
m13_245 -> m13_246  [key=0, style=solid];
m13_246 -> m13_244  [key=0, style=bold, color=blue];
m13_255 -> m13_256  [key=0, style=solid];
m13_258 -> m13_259  [key=0, style=solid];
m13_261 -> m13_262  [key=0, style=solid];
m13_256 -> m13_257  [key=0, style=solid];
m13_256 -> m13_43  [key=2, style=dotted];
m13_257 -> m13_255  [key=0, style=bold, color=blue];
m13_259 -> m13_260  [key=0, style=solid];
m13_260 -> m13_258  [key=0, style=bold, color=blue];
m13_262 -> m13_263  [key=0, style=solid];
m13_262 -> m13_38  [key=2, style=dotted];
m13_262 -> m13_119  [key=2, style=dotted];
m13_262 -> m13_264  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_263 -> m13_261  [key=0, style=bold, color=blue];
m13_264 -> m13_265  [key=0, style=solid];
m13_265 -> m13_266  [key=0, style=solid];
m13_266 -> m13_264  [key=0, style=bold, color=blue];
m13_274 -> m13_275  [key=0, style=solid];
m13_280 -> m13_281  [key=0, style=solid];
m13_275 -> m13_276  [key=0, style=solid];
m13_275 -> m13_38  [key=2, style=dotted];
m13_275 -> m13_119  [key=2, style=dotted];
m13_275 -> m13_277  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_276 -> m13_274  [key=0, style=bold, color=blue];
m13_277 -> m13_278  [key=0, style=solid];
m13_278 -> m13_279  [key=0, style=solid];
m13_279 -> m13_277  [key=0, style=bold, color=blue];
m13_281 -> m13_282  [key=0, style=solid];
m13_281 -> m13_283  [key=2, style=dotted];
m13_282 -> m13_280  [key=0, style=bold, color=blue];
m13_297 -> m13_298  [key=0, style=solid];
m13_300 -> m13_301  [key=0, style=solid];
m13_300 -> m13_38  [key=2, style=dotted];
m13_300 -> m13_119  [key=2, style=dotted];
m13_300 -> m13_302  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_303 -> m13_304  [key=0, style=solid];
m13_292 -> m13_293  [key=0, style=solid];
m13_296 -> m13_297  [key=0, style=solid];
m13_299 -> m13_300  [key=0, style=solid];
m13_293 -> m13_294  [key=0, style=solid];
m13_293 -> m13_38  [key=2, style=dotted];
m13_293 -> m13_295  [key=2, style=dotted];
m13_294 -> m13_292  [key=0, style=bold, color=blue];
m13_298 -> m13_296  [key=0, style=bold, color=blue];
m13_301 -> m13_299  [key=0, style=bold, color=blue];
m13_302 -> m13_303  [key=0, style=solid];
m13_304 -> m13_302  [key=0, style=bold, color=blue];
m13_318 -> m13_319  [key=0, style=solid];
m13_318 -> m13_38  [key=2, style=dotted];
m13_318 -> m13_119  [key=2, style=dotted];
m13_318 -> m13_320  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_321 -> m13_322  [key=0, style=solid];
m13_314 -> m13_315  [key=0, style=solid];
m13_317 -> m13_318  [key=0, style=solid];
m13_315 -> m13_316  [key=0, style=solid];
m13_315 -> m13_38  [key=2, style=dotted];
m13_315 -> m13_119  [key=2, style=dotted];
m13_316 -> m13_314  [key=0, style=bold, color=blue];
m13_319 -> m13_317  [key=0, style=bold, color=blue];
m13_322 -> m13_320  [key=0, style=bold, color=blue];
m13_284 -> m13_285  [key=0, style=solid];
m13_285 -> m13_286  [key=0, style=solid];
m13_285 -> m13_17  [key=2, style=dotted];
m13_285 -> m13_297  [key=1, style=dashed, color=darkseagreen4, label=anotherState];
m13_285 -> m13_289  [key=1, style=dashed, color=darkseagreen4, label=anotherState];
m13_285 -> m13_300  [key=1, style=dashed, color=darkseagreen4, label=anotherState];
m13_285 -> m13_303  [key=1, style=dashed, color=darkseagreen4, label=anotherState];
m13_286 -> m13_287  [key=0, style=solid];
m13_286 -> m13_18  [key=2, style=dotted];
m13_286 -> m13_291  [key=2, style=dotted];
m13_286 -> m13_292  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_286 -> m13_296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_289 -> m13_290  [key=0, style=solid];
m13_289 -> m13_100  [key=2, style=dotted];
m13_289 -> m13_299  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_287 -> m13_288  [key=0, style=solid];
m13_287 -> m13_70  [key=2, style=dotted];
m13_288 -> m13_289  [key=0, style=solid];
m13_288 -> m13_135  [key=2, style=dotted];
m13_290 -> m13_284  [key=0, style=bold, color=blue];
m13_111 -> m13_112  [key=0, style=solid];
m13_112 -> m13_113  [key=0, style=solid, color=green];
m13_112 -> m13_70  [key=2, style=dotted];
m13_113 -> m13_114  [key=0, style=solid, color=green];
m13_113 -> m13_74  [key=2, style=dotted, color=green];
m13_114 -> m13_115  [key=0, style=solid];
m13_114 -> m13_100  [key=2, style=dotted];
m13_114 -> m13_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_115 -> m13_111  [key=0, style=bold, color=blue];
m13_229 -> m13_230  [key=0, style=solid];
m13_230 -> m13_231  [key=0, style=solid];
m13_230 -> m13_18  [key=2, style=dotted];
m13_230 -> m13_22  [key=2, style=dotted];
m13_230 -> m13_236  [key=2, style=dotted];
m13_230 -> m13_237  [key=2, style=dotted];
m13_230 -> m13_19  [key=2, style=dotted];
m13_230 -> m13_238  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_231 -> m13_232  [key=0, style=solid];
m13_231 -> m13_70  [key=2, style=dotted];
m13_232 -> m13_233  [key=0, style=solid];
m13_232 -> m13_135  [key=2, style=dotted];
m13_232 -> m13_234  [key=1, style=dashed, color=darkseagreen4, label=result];
m13_233 -> m13_234  [key=0, style=solid];
m13_233 -> m13_100  [key=2, style=dotted];
m13_233 -> m13_241  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_234 -> m13_235  [key=0, style=solid];
m13_234 -> m13_195  [key=2, style=dotted];
m13_235 -> m13_229  [key=0, style=bold, color=blue];
m13_187 -> m13_188  [key=0, style=solid];
m13_188 -> m13_189  [key=0, style=solid];
m13_188 -> m13_18  [key=2, style=dotted];
m13_188 -> m13_19  [key=2, style=dotted];
m13_188 -> m13_196  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_189 -> m13_190  [key=0, style=solid];
m13_189 -> m13_70  [key=2, style=dotted];
m13_190 -> m13_191  [key=0, style=solid];
m13_190 -> m13_135  [key=2, style=dotted];
m13_191 -> m13_192  [key=0, style=solid];
m13_191 -> m13_195  [key=2, style=dotted];
m13_192 -> m13_193  [key=0, style=solid];
m13_192 -> m13_100  [key=2, style=dotted];
m13_192 -> m13_199  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_193 -> m13_194  [key=0, style=solid];
m13_193 -> m13_100  [key=2, style=dotted];
m13_193 -> m13_202  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m13_194 -> m13_187  [key=0, style=bold, color=blue];
m13_325 -> m13_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_50  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_55  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_59  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_63  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_66  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_67  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_72  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_76  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_77  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_81  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_84  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_85  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_89  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_94  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_95  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_96  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_97  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_112  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_113  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_114  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_117  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_121  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_124  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_125  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_128  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_129  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_133  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_137  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_146  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_147  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_151  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_154  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_155  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_156  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_163  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_164  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_165  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_170  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_173  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_177  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_178  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_179  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_182  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_185  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_188  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_189  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_190  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_192  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_193  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_206  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_207  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_209  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_215  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_216  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_217  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_218  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_227  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_230  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_231  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_232  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_233  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_242  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_248  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_249  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_250  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_251  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_252  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_262  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_265  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_268  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_269  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_270  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_275  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_278  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_271  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_286  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_293  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_287  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_288  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_289  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_300  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_307  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_308  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_309  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_310  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_318  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_325 -> m13_323  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m13_326 -> m13_72  [key=1, style=dashed, color=green, label=stateMachine];
m13_327 -> m13_81  [key=1, style=dashed, color=green, label=stateMachine];
m13_328 -> m13_89  [key=1, style=dashed, color=green, label=stateMachine];
m13_329 -> m13_106  [key=1, style=dashed, color=darkseagreen4, label=job];
m13_330 -> m13_133  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m13_331 -> m13_142  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m13_332 -> m13_151  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m13_333 -> m13_297  [key=1, style=dashed, color=darkseagreen4, label=anotherState];
m13_333 -> m13_300  [key=1, style=dashed, color=darkseagreen4, label=anotherState];
m13_333 -> m13_303  [key=1, style=dashed, color=darkseagreen4, label=anotherState];
m13_334 -> m13_318  [key=1, style=dashed, color=darkseagreen4, label=exception];
m13_334 -> m13_321  [key=1, style=dashed, color=darkseagreen4, label=exception];
}
