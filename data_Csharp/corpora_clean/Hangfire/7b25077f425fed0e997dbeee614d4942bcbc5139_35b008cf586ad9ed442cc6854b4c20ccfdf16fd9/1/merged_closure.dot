digraph  {
n0 [cluster="HangFire.Filters.IClientExceptionFilter.OnClientException(HangFire.Filters.ClientExceptionContext)", label="Entry HangFire.Filters.IClientExceptionFilter.OnClientException(HangFire.Filters.ClientExceptionContext)", span="4-4"];
n1 [cluster="HangFire.Filters.IClientExceptionFilter.OnClientException(HangFire.Filters.ClientExceptionContext)", label="Exit HangFire.Filters.IClientExceptionFilter.OnClientException(HangFire.Filters.ClientExceptionContext)", span="4-4"];
d7 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", color=green, community=0, label="Jobs = storage", prediction=0, span="19-19"];
d18 [label="HangFire.Redis.RedisAtomicWriteTransaction", span=""];
d2 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", label="var storage = new RedisStoredValues(_transaction)", span="13-13"];
d6 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", label="Queues = storage", span="18-18"];
d8 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", label="Exit HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", span="9-9"];
d1 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", label="_transaction = transaction", span="11-11"];
d3 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", label="Values = storage", span="15-15"];
d4 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", label="Sets = storage", span="16-16"];
d5 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", label="Lists = storage", span="17-17"];
d11 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.Commit()", label="return _transaction.Commit();", span="30-30"];
d15 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.Dispose()", label="_transaction.Dispose()", span="35-35"];
d9 [cluster="HangFire.Redis.RedisStoredValues.RedisStoredValues(IRedisTransaction)", label="Entry HangFire.Redis.RedisStoredValues.RedisStoredValues(IRedisTransaction)", span="15-15"];
d0 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", label="Entry HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", span="9-9"];
d10 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.Commit()", label="Entry HangFire.Redis.RedisAtomicWriteTransaction.Commit()", span="28-28"];
d12 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.Commit()", label="Exit HangFire.Redis.RedisAtomicWriteTransaction.Commit()", span="28-28"];
d13 [cluster="Unk.Commit", label="Entry Unk.Commit", span=""];
d14 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.Dispose()", label="Entry HangFire.Redis.RedisAtomicWriteTransaction.Dispose()", span="33-33"];
d16 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.Dispose()", label="Exit HangFire.Redis.RedisAtomicWriteTransaction.Dispose()", span="33-33"];
d17 [cluster="Unk.Dispose", label="Entry Unk.Dispose", span=""];
m0_8 [cluster="HangFire.Sample.Highlighter.HangFireConfig.Stop()", file="DefaultStateChangeProcessFacts.cs", label="Entry HangFire.Sample.Highlighter.HangFireConfig.Stop()", span="28-28"];
m0_9 [cluster="HangFire.Sample.Highlighter.HangFireConfig.Stop()", file="DefaultStateChangeProcessFacts.cs", label="_server.Stop()", span="30-30"];
m0_10 [cluster="HangFire.Sample.Highlighter.HangFireConfig.Stop()", file="DefaultStateChangeProcessFacts.cs", label="Exit HangFire.Sample.Highlighter.HangFireConfig.Stop()", span="28-28"];
m0_7 [cluster="HangFire.BackgroundJobServer.Start()", file="DefaultStateChangeProcessFacts.cs", label="Entry HangFire.BackgroundJobServer.Start()", span="60-60"];
m0_5 [cluster="SqlServerStorage.cstr", file="DefaultStateChangeProcessFacts.cs", label="Entry SqlServerStorage.cstr", span=""];
m0_0 [cluster="HangFire.Sample.Highlighter.HangFireConfig.Start()", file="DefaultStateChangeProcessFacts.cs", label="Entry HangFire.Sample.Highlighter.HangFireConfig.Start()", span="19-19"];
m0_1 [cluster="HangFire.Sample.Highlighter.HangFireConfig.Start()", file="DefaultStateChangeProcessFacts.cs", label="JobStorage.Current = new SqlServerStorage(\r\n                ConfigurationManager.ConnectionStrings[''HighlighterDb''].ConnectionString)", span="21-22"];
m0_2 [cluster="HangFire.Sample.Highlighter.HangFireConfig.Start()", file="DefaultStateChangeProcessFacts.cs", label="_server = new AspNetBackgroundJobServer()", span="24-24"];
m0_3 [cluster="HangFire.Sample.Highlighter.HangFireConfig.Start()", file="DefaultStateChangeProcessFacts.cs", label="_server.Start()", span="25-25"];
m0_4 [cluster="HangFire.Sample.Highlighter.HangFireConfig.Start()", file="DefaultStateChangeProcessFacts.cs", label="Exit HangFire.Sample.Highlighter.HangFireConfig.Start()", span="19-19"];
m0_6 [cluster="HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer()", file="DefaultStateChangeProcessFacts.cs", label="Entry HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer()", span="31-31"];
m0_11 [cluster="HangFire.BackgroundJobServer.Stop()", file="DefaultStateChangeProcessFacts.cs", label="Entry HangFire.BackgroundJobServer.Stop()", span="71-71"];
m1_2 [cluster="Hangfire.States.IStateChangeProcess.ApplyState(Hangfire.Storage.IWriteOnlyTransaction, Hangfire.States.ApplyStateContext, bool)", file="IStateChangeProcess.cs", label="Entry Hangfire.States.IStateChangeProcess.ApplyState(Hangfire.Storage.IWriteOnlyTransaction, Hangfire.States.ApplyStateContext, bool)", span="23-23"];
m1_3 [cluster="Hangfire.States.IStateChangeProcess.ApplyState(Hangfire.Storage.IWriteOnlyTransaction, Hangfire.States.ApplyStateContext, bool)", file="IStateChangeProcess.cs", label="Exit Hangfire.States.IStateChangeProcess.ApplyState(Hangfire.Storage.IWriteOnlyTransaction, Hangfire.States.ApplyStateContext, bool)", span="23-23"];
m1_0 [cluster="Hangfire.States.IStateChangeProcess.ElectState(Hangfire.Storage.IStorageConnection, Hangfire.States.ElectStateContext)", file="IStateChangeProcess.cs", label="Entry Hangfire.States.IStateChangeProcess.ElectState(Hangfire.Storage.IStorageConnection, Hangfire.States.ElectStateContext)", span="22-22"];
m1_1 [cluster="Hangfire.States.IStateChangeProcess.ElectState(Hangfire.Storage.IStorageConnection, Hangfire.States.ElectStateContext)", file="IStateChangeProcess.cs", label="Exit Hangfire.States.IStateChangeProcess.ElectState(Hangfire.Storage.IStorageConnection, Hangfire.States.ElectStateContext)", span="22-22"];
m2_0 [cluster="HangFire.Filters.JobPerformingContext.JobPerformingContext(HangFire.Server.WorkerContext, HangFire.Server.ServerJobDescriptor)", file="LibLog.cs", label="Entry HangFire.Filters.JobPerformingContext.JobPerformingContext(HangFire.Server.WorkerContext, HangFire.Server.ServerJobDescriptor)", span="6-6"];
m2_1 [cluster="HangFire.Filters.JobPerformingContext.JobPerformingContext(HangFire.Server.WorkerContext, HangFire.Server.ServerJobDescriptor)", file="LibLog.cs", label="JobDescriptor = jobDescriptor", span="11-11"];
m2_2 [cluster="HangFire.Filters.JobPerformingContext.JobPerformingContext(HangFire.Server.WorkerContext, HangFire.Server.ServerJobDescriptor)", file="LibLog.cs", label="Exit HangFire.Filters.JobPerformingContext.JobPerformingContext(HangFire.Server.WorkerContext, HangFire.Server.ServerJobDescriptor)", span="6-6"];
m2_3 [file="LibLog.cs", label="HangFire.Filters.JobPerformingContext", span=""];
m3_123 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="255-255"];
m3_124 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="key == null", span="257-257"];
m3_126 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="toScore < fromScore", span="258-258"];
m3_128 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="260-263"];
m3_125 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="257-257"];
m3_127 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", span="258-258"];
m3_129 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="255-255"];
m3_2 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", span="44-44"];
m3_3 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerConnection.cs", label="connection == null", span="50-50"];
m3_5 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerConnection.cs", label="queueProviders == null", span="51-51"];
m3_7 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerConnection.cs", label="_connection = connection", span="53-53"];
m3_8 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerConnection.cs", label="_isolationLevel = isolationLevel", span="54-54"];
m3_9 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerConnection.cs", label="_queueProviders = queueProviders", span="55-55"];
m3_10 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerConnection.cs", label="OwnsConnection = ownsConnection", span="57-57"];
m3_4 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''connection'');", span="50-50"];
m3_6 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''queueProviders'');", span="51-51"];
m3_11 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", span="44-44"];
m3_12 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerConnection.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m3_88 [cluster="Hangfire.Storage.InvocationData.Deserialize()", file="SqlServerConnection.cs", label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="40-40"];
m3_219 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="416-416"];
m3_220 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs", label="key == null", span="418-418"];
m3_223 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs", label="var result = _connection.Query<DateTime?>(query, new { key = key }).Single()", span="424-424"];
m3_221 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="418-418"];
m3_222 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs", label="string query = @''\r\nselect min([ExpireAt]) from HangFire.Hash\r\nwhere [Key] = @key''", span="420-422"];
m3_224 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs", label="!result.HasValue", span="425-425"];
m3_226 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs", label="return result.Value - DateTime.UtcNow;", span="427-427"];
m3_225 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs", label="return TimeSpan.FromSeconds(-1);", span="425-425"];
m3_227 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="416-416"];
m3_157 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="301-301"];
m3_158 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="serverId == null", span="303-303"];
m3_160 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="context == null", span="304-304"];
m3_162 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="306-311"];
m3_163 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="_connection.Execute(\r\n                @''merge HangFire.Server with (holdlock) as Target ''\r\n                + @''using (VALUES (@id, @data, @heartbeat)) as Source (Id, Data, Heartbeat) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = Source.Heartbeat ''\r\n                + @''when not matched then insert (Id, Data, LastHeartbeat) values (Source.Id, Source.Data, Source.Heartbeat);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data), heartbeat = DateTime.UtcNow })", span="313-319"];
m3_159 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''serverId'');", span="303-303"];
m3_161 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''context'');", span="304-304"];
m3_164 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="301-301"];
m3_27 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="84-84"];
m3_28 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="queues == null || queues.Length == 0", span="86-86"];
m3_30 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="var providers = queues\r\n                .Select(queue => _queueProviders.GetProvider(queue))\r\n                .Distinct()\r\n                .ToArray()", span="88-91"];
m3_32 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="throw new InvalidOperationException(String.Format(\r\n                    ''Multiple provider instances registered for queues: {0}. You should choose only one type of persistent queues per server instance.'',\r\n                    String.Join('', '', queues)));", span="95-97"];
m3_34 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="return persistentQueue.Dequeue(queues, cancellationToken);", span="101-101"];
m3_29 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''queues'');", span="86-86"];
m3_31 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="providers.Length != 1", span="93-93"];
m3_33 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="var persistentQueue = providers[0].GetJobQueue(_connection)", span="100-100"];
m3_35 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="84-84"];
m3_46 [cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53"];
m3_150 [cluster="Unk.ToDictionary", file="SqlServerConnection.cs", label="Entry Unk.ToDictionary", span=""];
m3_13 [cluster="Hangfire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.Dispose()", span="63-63"];
m3_14 [cluster="Hangfire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs", label=OwnsConnection, span="65-65"];
m3_15 [cluster="Hangfire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs", label="_connection.Dispose()", span="67-67"];
m3_16 [cluster="Hangfire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.Dispose()", span="63-63"];
m3_171 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="331-331"];
m3_172 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="serverId == null", span="333-333"];
m3_174 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="335-337"];
m3_173 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''serverId'');", span="333-333"];
m3_175 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="331-331"];
m3_190 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="361-361"];
m3_191 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs", label="key == null", span="363-363"];
m3_194 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs", label="return _connection\r\n                .Query<string>(query, new { key = key, startingFrom = startingFrom + 1, endingAt = endingAt + 1 })\r\n                .ToList();", span="372-374"];
m3_192 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="363-363"];
m3_193 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs", label="var query = @''\r\nselect [Value] from (\r\n	select [Value], row_number() over (order by [Id] ASC) as row_num \r\n	from Hangfire.[Set]\r\n	where [Key] = @key \r\n) as s where s.row_num between @startingFrom and @endingAt''", span="365-370"];
m3_195 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="361-361"];
m3_242 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="453-453"];
m3_243 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs", label="key == null", span="455-455"];
m3_246 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs", label="var result = _connection.Query<DateTime?>(query, new { key = key }).Single()", span="461-461"];
m3_244 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="455-455"];
m3_245 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs", label="string query = @''\r\nselect min([ExpireAt]) from HangFire.List\r\nwhere [Key] = @key''", span="457-459"];
m3_247 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs", label="!result.HasValue", span="462-462"];
m3_249 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs", label="return result.Value - DateTime.UtcNow;", span="464-464"];
m3_248 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs", label="return TimeSpan.FromSeconds(-1);", span="462-462"];
m3_250 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="453-453"];
m3_101 [cluster="Hangfire.Storage.StateData.StateData()", file="SqlServerConnection.cs", label="Entry Hangfire.Storage.StateData.StateData()", span="21-21"];
m3_213 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="405-405"];
m3_214 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs", label="key == null", span="407-407"];
m3_217 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs", label="return _connection.Query<long>(query, new { key = key }).Single();", span="413-413"];
m3_215 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="407-407"];
m3_216 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs", label="string query = @''\r\nselect count([Id]) from HangFire.Hash\r\nwhere [Key] = @key''", span="409-411"];
m3_218 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="405-405"];
m3_165 [cluster="Hangfire.SqlServer.Entities.ServerData.ServerData()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.Entities.ServerData.ServerData()", span="20-20"];
m3_257 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="483-483"];
m3_258 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs", label="key == null", span="485-485"];
m3_261 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs", label="return _connection.Query<string>(query, new { key = key }).ToList();", span="492-492"];
m3_259 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="485-485"];
m3_260 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs", label="string query = @''\r\nselect [Value] from Hangfire.List\r\nwhere [Key] = @key\r\norder by [Id] desc''", span="487-490"];
m3_262 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="483-483"];
m3_26 [cluster="string.Format(string, object)", file="SqlServerConnection.cs", label="Entry string.Format(string, object)", span="0-0"];
m3_21 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", span="39-39"];
m3_71 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", span="154-154"];
m3_72 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="id == null", span="156-156"];
m3_75 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="var jobData = _connection.Query<SqlJob>(sql, new { id = id })\r\n                .SingleOrDefault()", span="161-162"];
m3_73 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''id'');", span="156-156"];
m3_74 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="string sql = \r\n                @''select InvocationData, StateName, Arguments, CreatedAt from HangFire.Job where Id = @id''", span="158-159"];
m3_76 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="jobData == null", span="164-164"];
m3_78 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="var invocationData = JobHelper.FromJson<InvocationData>(jobData.InvocationData)", span="167-167"];
m3_79 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="invocationData.Arguments = jobData.Arguments", span="168-168"];
m3_85 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="return new JobData\r\n            {\r\n                Job = job,\r\n                State = jobData.StateName,\r\n                CreatedAt = jobData.CreatedAt,\r\n                LoadException = loadException\r\n            };", span="182-188"];
m3_77 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="return null;", span="164-164"];
m3_82 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="job = invocationData.Deserialize()", span="175-175"];
m3_80 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="Job job = null", span="170-170"];
m3_81 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="JobLoadException loadException = null", span="171-171"];
m3_83 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label=JobLoadException, span="177-177"];
m3_84 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="loadException = ex", span="179-179"];
m3_86 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", span="154-154"];
m3_144 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="289-289"];
m3_145 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs", label="key == null", span="291-291"];
m3_147 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs", label="var result = _connection.Query<SqlHash>(\r\n                ''select Field, Value from HangFire.Hash with (forceseek) where [Key] = @key'',\r\n                new { key })\r\n                .ToDictionary(x => x.Field, x => x.Value)", span="293-296"];
m3_146 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="291-291"];
m3_148 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs", label="return result.Count != 0 ? result : null;", span="298-298"];
m3_149 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="289-289"];
m3_22 [cluster="Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", span="76-76"];
m3_23 [cluster="Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="SqlServerConnection.cs", label="return new SqlServerDistributedLock(\r\n                String.Format(''HangFire:{0}'', resource),\r\n                timeout,\r\n                _connection);", span="78-81"];
m3_24 [cluster="Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", span="76-76"];
m3_67 [cluster="Unk.>", file="SqlServerConnection.cs", label="Entry Unk.>", span=""];
m3_183 [cluster="System.TimeSpan.Negate()", file="SqlServerConnection.cs", label="Entry System.TimeSpan.Negate()", span="0-0"];
m3_102 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="219-219"];
m3_103 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="id == null", span="221-221"];
m3_105 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="name == null", span="222-222"];
m3_107 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="_connection.Execute(\r\n                @''merge HangFire.JobParameter with (holdlock) as Target ''\r\n                + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                + @''when matched then update set Value = Source.Value ''\r\n                + @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                new { jobId = id, name, value })", span="224-230"];
m3_104 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''id'');", span="221-221"];
m3_106 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''name'');", span="222-222"];
m3_108 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="219-219"];
m3_130 [cluster="System.ArgumentException.ArgumentException(string)", file="SqlServerConnection.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m3_40 [cluster="string.Join(string, params string[])", file="SqlServerConnection.cs", label="Entry string.Join(string, params string[])", span="0-0"];
m3_206 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerConnection.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m3_64 [cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", file="SqlServerConnection.cs", label="Entry Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="67-67"];
m3_142 [cluster="TransactionScope.cstr", file="SqlServerConnection.cs", label="Entry TransactionScope.cstr", span=""];
m3_197 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="377-377"];
m3_198 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs", label="key == null", span="379-379"];
m3_201 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs", label="var result = _connection.Query<DateTime?>(query, new { key = key }).Single()", span="385-385"];
m3_199 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="379-379"];
m3_200 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs", label="string query = @''\r\nselect min([ExpireAt]) from HangFire.[Set]\r\nwhere [Key] = @key''", span="381-383"];
m3_202 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs", label="!result.HasValue", span="386-386"];
m3_204 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs", label="return result.Value - DateTime.UtcNow;", span="388-388"];
m3_203 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs", label="return TimeSpan.FromSeconds(-1);", span="386-386"];
m3_205 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="377-377"];
m3_38 [cluster="Unk.ToArray", file="SqlServerConnection.cs", label="Entry Unk.ToArray", span=""];
m3_207 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="391-391"];
m3_208 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs", label="key == null", span="393-393"];
m3_211 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs", label="return _connection.Query<long?>(query, new { key = key }).Single() ?? 0;", span="402-402"];
m3_209 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="393-393"];
m3_210 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs", label="string query = @''\r\nselect sum(s.[Value]) from (select sum([Value]) as [Value] from HangFire.Counter\r\nwhere [Key] = @key\r\nunion all\r\nselect [Value] from HangFire.AggregatedCounter\r\nwhere [Key] = @key) as s''", span="395-400"];
m3_212 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="391-391"];
m3_39 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="SqlServerConnection.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m3_25 [cluster="SqlServerDistributedLock.cstr", file="SqlServerConnection.cs", label="Entry SqlServerDistributedLock.cstr", span=""];
m3_69 [cluster="Unk.ToString", file="SqlServerConnection.cs", label="Entry Unk.ToString", span=""];
m3_100 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", file="SqlServerConnection.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0"];
m3_66 [cluster="System.DateTime.Add(System.TimeSpan)", file="SqlServerConnection.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m3_109 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="233-233"];
m3_110 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="id == null", span="235-235"];
m3_112 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="name == null", span="236-236"];
m3_114 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="return _connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault();", span="238-241"];
m3_111 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''id'');", span="235-235"];
m3_113 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''name'');", span="236-236"];
m3_115 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="233-233"];
m3_143 [cluster="Unk.Complete", file="SqlServerConnection.cs", label="Entry Unk.Complete", span=""];
m3_166 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="322-322"];
m3_167 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="serverId == null", span="324-324"];
m3_169 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="326-328"];
m3_168 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''serverId'');", span="324-324"];
m3_170 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="322-322"];
m3_90 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="191-191"];
m3_91 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs", label="jobId == null", span="193-193"];
m3_94 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs", label="var sqlState = _connection.Query<SqlState>(sql, new { jobId = jobId }).SingleOrDefault()", span="201-201"];
m3_92 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''jobId'');", span="193-193"];
m3_93 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs", label="string sql = @''\r\nselect s.Name, s.Reason, s.Data\r\nfrom HangFire.State s\r\ninner join HangFire.Job j on j.StateId = s.Id\r\nwhere j.Id = @jobId''", span="195-199"];
m3_95 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs", label="sqlState == null", span="202-202"];
m3_97 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs", label="var data = new Dictionary<string, string>(\r\n                JobHelper.FromJson<Dictionary<string, string>>(sqlState.Data),\r\n                StringComparer.OrdinalIgnoreCase)", span="207-209"];
m3_98 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs", label="return new StateData\r\n            {\r\n                Name = sqlState.Name,\r\n                Reason = sqlState.Reason,\r\n                Data = data\r\n            };", span="211-216"];
m3_96 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs", label="return null;", span="204-204"];
m3_99 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="191-191"];
m3_251 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="467-467"];
m3_252 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs", label="key == null", span="469-469"];
m3_255 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs", label="return _connection\r\n                .Query<string>(query, new { key = key, startingFrom = startingFrom + 1, endingAt = endingAt + 1 })\r\n                .ToList();", span="478-480"];
m3_253 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="469-469"];
m3_254 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs", label="string query = @''\r\nselect [Value] from (\r\n	select [Value], row_number() over (order by [Id] desc) as row_num \r\n	from Hangfire.List\r\n	where [Key] = @key \r\n) as s where s.row_num between @startingFrom and @endingAt''", span="471-476"];
m3_256 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="467-467"];
m3_181 [cluster="System.TimeSpan.Duration()", file="SqlServerConnection.cs", label="Entry System.TimeSpan.Duration()", span="0-0"];
m3_47 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="104-104"];
m3_48 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="job == null", span="110-110"];
m3_50 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="parameters == null", span="111-111"];
m3_53 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="var invocationData = InvocationData.Serialize(job)", span="118-118"];
m3_54 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="var jobId = _connection.Query<int>(\r\n                createJobSql,\r\n                new\r\n                {\r\n                    invocationData = JobHelper.ToJson(invocationData),\r\n                    arguments = invocationData.Arguments,\r\n                    createdAt = createdAt,\r\n                    expireAt = createdAt.Add(expireIn)\r\n                }).Single().ToString()", span="120-128"];
m3_55 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="parameters.Count > 0", span="130-130"];
m3_56 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="var parameterArray = new object[parameters.Count]", span="132-132"];
m3_58 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label=parameters, span="134-134"];
m3_49 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''job'');", span="110-110"];
m3_51 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''parameters'');", span="111-111"];
m3_52 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="string createJobSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues (@invocationData, @arguments, @createdAt, @expireAt);\r\nSELECT CAST(SCOPE_IDENTITY() as int)''", span="113-116"];
m3_59 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="parameterArray[parameterIndex++] = new\r\n                    {\r\n                        jobId = jobId,\r\n                        name = parameter.Key,\r\n                        value = parameter.Value\r\n                    }", span="136-141"];
m3_62 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="return jobId;", span="151-151"];
m3_57 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="int parameterIndex = 0", span="133-133"];
m3_61 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="_connection.Execute(insertParameterSql, parameterArray)", span="148-148"];
m3_60 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="string insertParameterSql = @''\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@jobId, @name, @value)''", span="144-146"];
m3_63 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="104-104"];
m3_65 [cluster="Hangfire.Common.JobHelper.ToJson(object)", file="SqlServerConnection.cs", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
m3_42 [cluster="Unk.Dequeue", file="SqlServerConnection.cs", label="Entry Unk.Dequeue", span=""];
m3_37 [cluster="Unk.Distinct", file="SqlServerConnection.cs", label="Entry Unk.Distinct", span=""];
m3_154 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="296-296"];
m3_43 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="89-89"];
m3_44 [cluster="lambda expression", file="SqlServerConnection.cs", label="_queueProviders.GetProvider(queue)", span="89-89"];
m3_45 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="89-89"];
m3_151 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="296-296"];
m3_152 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Field", span="296-296"];
m3_153 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="296-296"];
m3_155 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Value", span="296-296"];
m3_156 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="296-296"];
m3_131 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="266-266"];
m3_132 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="key == null", span="268-268"];
m3_134 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="keyValuePairs == null", span="269-269"];
m3_138 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label=keyValuePairs, span="280-280"];
m3_139 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="_connection.Execute(sql, new { key = key, field = keyValuePair.Key, value = keyValuePair.Value })", span="282-282"];
m3_133 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="268-268"];
m3_135 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''keyValuePairs'');", span="269-269"];
m3_136 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="string sql = @''\r\nmerge HangFire.Hash with (holdlock) as Target\r\nusing (VALUES (@key, @field, @value)) as Source ([Key], Field, Value)\r\non Target.[Key] = Source.[Key] and Target.Field = Source.Field\r\nwhen matched then update set Value = Source.Value\r\nwhen not matched then insert ([Key], Field, Value) values (Source.[Key], Source.Field, Source.Value);''", span="271-276"];
m3_137 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="var transaction = new TransactionScope()", span="278-278"];
m3_140 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="transaction.Complete()", span="285-285"];
m3_141 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="266-266"];
m3_89 [cluster="Hangfire.Storage.JobData.JobData()", file="SqlServerConnection.cs", label="Entry Hangfire.Storage.JobData.JobData()", span="21-21"];
m3_18 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="71-71"];
m3_19 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnection.cs", label="return new SqlServerWriteOnlyTransaction(_connection, _isolationLevel, _queueProviders);", span="73-73"];
m3_20 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="71-71"];
m3_189 [cluster="Unk.First", file="SqlServerConnection.cs", label="Entry Unk.First", span=""];
m3_36 [cluster="Unk.Select", file="SqlServerConnection.cs", label="Entry Unk.Select", span=""];
m3_228 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="430-430"];
m3_229 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="key == null", span="432-432"];
m3_231 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="name == null", span="433-433"];
m3_234 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="return _connection.Query<string>(query, new { key = key, field = name }).SingleOrDefault();", span="439-439"];
m3_230 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="432-432"];
m3_232 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''name'');", span="433-433"];
m3_233 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="string query = @''\r\nselect [Value] from HangFire.Hash\r\nwhere [Key] = @key and [Field] = @field''", span="435-437"];
m3_235 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="430-430"];
m3_184 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="352-352"];
m3_185 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnection.cs", label="key == null", span="354-354"];
m3_187 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnection.cs", label="return _connection.Query<int>(\r\n                ''select count([Key]) from HangFire.[Set] where [Key] = @key'',\r\n                new { key = key }).First();", span="356-358"];
m3_186 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="354-354"];
m3_188 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="352-352"];
m3_68 [cluster="Unk.Single", file="SqlServerConnection.cs", label="Entry Unk.Single", span=""];
m3_182 [cluster="System.ArgumentException.ArgumentException(string, string)", file="SqlServerConnection.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m3_196 [cluster="Unk.ToList", file="SqlServerConnection.cs", label="Entry Unk.ToList", span=""];
m3_70 [cluster="Unk.Execute", file="SqlServerConnection.cs", label="Entry Unk.Execute", span=""];
m3_41 [cluster="Unk.GetJobQueue", file="SqlServerConnection.cs", label="Entry Unk.GetJobQueue", span=""];
m3_0 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", span="36-36"];
m3_1 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", span="36-36"];
m3_122 [cluster="HashSet<string>.cstr", file="SqlServerConnection.cs", label="Entry HashSet<string>.cstr", span=""];
m3_116 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="244-244"];
m3_117 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs", label="key == null", span="246-246"];
m3_119 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs", label="var result = _connection.Query<string>(\r\n                @''select Value from HangFire.[Set] where [Key] = @key'',\r\n                new { key })", span="248-250"];
m3_118 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="246-246"];
m3_120 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs", label="return new HashSet<string>(result);", span="252-252"];
m3_121 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="244-244"];
m3_236 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="442-442"];
m3_237 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs", label="key == null", span="444-444"];
m3_240 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs", label="return _connection.Query<long>(query, new { key = key }).Single();", span="450-450"];
m3_238 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="444-444"];
m3_239 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs", label="string query = @''\r\nselect count([Id]) from HangFire.List\r\nwhere [Key] = @key''", span="446-448"];
m3_241 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="442-442"];
m3_87 [cluster="Unk.SingleOrDefault", file="SqlServerConnection.cs", label="Entry Unk.SingleOrDefault", span=""];
m3_176 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="340-340"];
m3_177 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="timeOut.Duration() != timeOut", span="342-342"];
m3_178 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="throw new ArgumentException(''The `timeOut` value must be positive.'', ''timeOut'');", span="344-344"];
m3_179 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="return _connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) });", span="347-349"];
m3_180 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="340-340"];
m3_263 [file="SqlServerConnection.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m4_8 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerStorageOptions.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m4_9 [cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerStorageOptions.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m4_10 [cluster="System.TimeSpan.FromHours(double)", file="SqlServerStorageOptions.cs", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
m4_0 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="25-25"];
m4_2 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="QueuePollInterval = TimeSpan.FromSeconds(15)", span="28-28"];
m4_3 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="InvisibilityTimeout = TimeSpan.FromMinutes(30)", span="29-29"];
m4_4 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="JobExpirationCheckInterval = TimeSpan.FromHours(1)", span="30-30"];
m4_5 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="CountersAggregateInterval = TimeSpan.FromMinutes(5)", span="31-31"];
m4_6 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="PrepareSchemaIfNecessary = true", span="32-32"];
m4_7 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="25-25"];
m4_11 [file="SqlServerStorageOptions.cs", label="Hangfire.SqlServer.SqlServerStorageOptions", span=""];
m5_7 [cluster="Unk.>", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.>", span=""];
m5_22 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", span="38-38"];
m5_23 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", file="SqlServerWriteOnlyTransaction.cs", label="var context = CreateContext()", span="40-40"];
m5_24 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", file="SqlServerWriteOnlyTransaction.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => context.SetJobParameter(null, null))", span="42-43"];
m5_25 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", file="SqlServerWriteOnlyTransaction.cs", label="Assert.Equal(''name'', exception.ParamName)", span="45-45"];
m5_26 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", span="38-38"];
m5_50 [cluster="Mock<IState>.cstr", file="SqlServerWriteOnlyTransaction.cs", label="Entry Mock<IState>.cstr", span=""];
m5_0 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreatedContextFacts()", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.Core.Tests.Client.CreatedContextFacts.CreatedContextFacts()", span="15-15"];
m5_1 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreatedContextFacts()", file="SqlServerWriteOnlyTransaction.cs", label="_exception = new Exception()", span="17-17"];
m5_2 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreatedContextFacts()", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.Core.Tests.Client.CreatedContextFacts.CreatedContextFacts()", span="15-15"];
m5_20 [cluster="Unk.Same", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Same", span=""];
m5_19 [cluster="Unk.True", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.True", span=""];
m5_30 [cluster="Hangfire.Client.CreatedContext.SetJobParameter(string, object)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.Client.CreatedContext.SetJobParameter(string, object)", span="70-70"];
m5_38 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.TestMethod()", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.Core.Tests.Client.CreatedContextFacts.TestMethod()", span="59-59"];
m5_39 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.TestMethod()", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.Core.Tests.Client.CreatedContextFacts.TestMethod()", span="59-59"];
m5_21 [cluster="Unk.Equal", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Equal", span=""];
m5_3 [cluster="System.Exception.Exception()", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Exception.Exception()", span="0-0"];
m5_4 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", span="21-21"];
m5_5 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", file="SqlServerWriteOnlyTransaction.cs", label="Assert.Throws<NullReferenceException>(\r\n                () => new CreatedContext(null, JobId, false, null))", span="23-24"];
m5_6 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", span="21-21"];
m5_11 [cluster="Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, string, bool, System.Exception)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, string, bool, System.Exception)", span="29-29"];
m5_12 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", span="28-28"];
m5_13 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", file="SqlServerWriteOnlyTransaction.cs", label="var context = CreateContext()", span="30-30"];
m5_14 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", file="SqlServerWriteOnlyTransaction.cs", label="Assert.True(context.Canceled)", span="32-32"];
m5_15 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", file="SqlServerWriteOnlyTransaction.cs", label="Assert.Same(_exception, context.Exception)", span="33-33"];
m5_16 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", file="SqlServerWriteOnlyTransaction.cs", label="Assert.Equal(JobId, context.JobId)", span="34-34"];
m5_17 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", span="28-28"];
m5_8 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="24-24"];
m5_52 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="65-65"];
m5_28 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="context.SetJobParameter(null, null)", span="43-43"];
m5_36 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="context.SetJobParameter(''name'', ''value'')", span="56-56"];
m5_54 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="65-65"];
m5_53 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="TestMethod()", span="65-65"];
m5_27 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="43-43"];
m5_29 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="43-43"];
m5_35 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="56-56"];
m5_37 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="56-56"];
m5_9 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="new CreatedContext(null, JobId, false, null)", span="24-24"];
m5_10 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="24-24"];
m5_48 [cluster="Mock<IStorageConnection>.cstr", file="SqlServerWriteOnlyTransaction.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m5_47 [cluster="Mock<JobStorage>.cstr", file="SqlServerWriteOnlyTransaction.cs", label="Entry Mock<JobStorage>.cstr", span=""];
m5_31 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_AfterCreateJobWasCalled()", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_AfterCreateJobWasCalled()", span="49-49"];
m5_32 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_AfterCreateJobWasCalled()", file="SqlServerWriteOnlyTransaction.cs", label="var context = CreateContext()", span="53-53"];
m5_33 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_AfterCreateJobWasCalled()", file="SqlServerWriteOnlyTransaction.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => context.SetJobParameter(''name'', ''value''))", span="55-56"];
m5_34 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_AfterCreateJobWasCalled()", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_AfterCreateJobWasCalled()", span="49-49"];
m5_51 [cluster="CreateContext.cstr", file="SqlServerWriteOnlyTransaction.cs", label="Entry CreateContext.cstr", span=""];
m5_49 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="188-188"];
m5_18 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", span="61-61"];
m5_40 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="var storage = new Mock<JobStorage>()", prediction=1, span="63-63"];
m5_41 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="var connection = new Mock<IStorageConnection>()", prediction=2, span="64-64"];
m5_44 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", file="SqlServerWriteOnlyTransaction.cs", label="var createContext = new CreateContext(storage.Object, connection.Object, job, state.Object)", span="68-68"];
m5_42 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", file="SqlServerWriteOnlyTransaction.cs", label="var job = Job.FromExpression(() => TestMethod())", span="65-65"];
m5_43 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", file="SqlServerWriteOnlyTransaction.cs", label="var state = new Mock<IState>()", span="66-66"];
m5_45 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", file="SqlServerWriteOnlyTransaction.cs", label="return new CreatedContext(createContext, JobId, true, _exception);", span="69-69"];
m5_46 [cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", span="61-61"];
m5_55 [file="SqlServerWriteOnlyTransaction.cs", label="Hangfire.Core.Tests.Client.CreatedContextFacts", span=""];
m5_56 [file="SqlServerWriteOnlyTransaction.cs", label=context, span=""];
m5_57 [file="SqlServerWriteOnlyTransaction.cs", label=context, span=""];
m6_587 [cluster="System.Collections.Generic.List<T>.List()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m6_21 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="new SqlServerWriteOnlyTransaction(null, null, _queueProviders)", prediction=3, span="30-30"];
m6_153 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", span="162-162"];
m6_154 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var correctJobQueue = new Mock<IPersistentJobQueue>();\r\n                var correctProvider = new Mock<IPersistentJobQueueProvider>();\r\n                correctProvider.Setup(x => x.GetJobQueue(It.IsNotNull<IDbConnection>()))\r\n                    .Returns(correctJobQueue.Object);\r\n\r\n                _queueProviders.Add(correctProvider.Object, new [] { ''default'' });\r\n\r\n                Commit(sql, x => x.AddToQueue(''default'', ''1''));\r\n\r\n                correctJobQueue.Verify(x => x.Enqueue(''default'', ''1''));\r\n            })", span="164-176"];
m6_155 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", span="162-162"];
m6_726 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", span="297-297"];
m6_627 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", span="722-722"];
m6_629 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                Commit(sql, x => x.RemoveSet(''set-1''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n                Assert.Equal(''set-2'', record.Key);\r\n            })", span="727-739"];
m6_628 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score]) values (@key, @value, 0.0)''", span="724-725"];
m6_630 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", span="722-722"];
m6_119 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="129-129"];
m6_121 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="136-158"];
m6_120 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="131-134"];
m6_122 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="129-129"];
m6_393 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="454-454"];
m6_394 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="456-468"];
m6_395 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="454-454"];
m6_614 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", span="712-712"];
m6_615 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null)));\r\n            })", span="714-718"];
m6_616 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", span="712-712"];
m6_211 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="142-142"];
m6_419 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="489-489"];
m6_420 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="491-502"];
m6_421 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="489-489"];
m6_318 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="168-168"];
m6_48 [cluster="Unk.ToString", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ToString", span=""];
m6_152 [cluster="Unk.AddJobState", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.AddJobState", span=""];
m6_476 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="564-564"];
m6_477 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="566-577"];
m6_478 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="564-564"];
m6_22 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="30-30"];
m6_23 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", span="39-39"];
m6_24 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", span="36-36"];
m6_782 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", span="897-897"];
m6_783 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="899-905"];
m6_784 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", span="897-897"];
m6_655 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", span="275-275"];
m6_319 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="355-355"];
m6_320 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                });\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="357-368"];
m6_321 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="355-355"];
m6_559 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", span="653-653"];
m6_560 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }));\r\n\r\n                // Act\r\n                Commit(sql, x => x.RemoveHash(''some-hash''));\r\n\r\n                // Assert\r\n                var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single();\r\n                Assert.Equal(0, count);\r\n            })", span="655-670"];
m6_561 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", span="653-653"];
m6_589 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", span="686-686"];
m6_590 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null)));\r\n\r\n                Assert.Equal(''items'', exception.ParamName);\r\n            })", span="688-694"];
m6_591 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", span="686-686"];
m6_637 [cluster="Unk.Execute", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Execute", span=""];
m6_407 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="472-472"];
m6_408 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="474-485"];
m6_409 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="472-472"];
m6_177 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="179-179"];
m6_178 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="return connection\r\n                .Query(''select * from HangFire.Job where id = @id'', new { id = jobId })\r\n                .Single();", span="181-183"];
m6_179 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="179-179"];
m6_761 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", span="308-308"];
m6_343 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="183-183"];
m6_50 [cluster="Unk.GetTestJob", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.GetTestJob", span=""];
m6_816 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", span="935-935"];
m6_817 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="937-943"];
m6_818 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", span="935-935"];
m6_7 [cluster="HangFire.BackgroundJobServer.Start()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.BackgroundJobServer.Start()", span="50-50"];
m6_267 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="291-291"];
m6_268 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(0.0, record.Score, 2);\r\n            })", span="293-302"];
m6_269 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="291-291"];
m6_829 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", span="330-330"];
m6_193 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="135-135"];
m6_795 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", span="319-319"];
m6_514 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="610-610"];
m6_515 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="612-618"];
m6_516 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="610-610"];
m6_691 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="286-286"];
m6_280 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="163-163"];
m6_194 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="202-202"];
m6_195 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime) record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="204-218"];
m6_196 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="202-202"];
m6_293 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="323-323"];
m6_294 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n                \r\n                Assert.Equal(1, recordCount);\r\n            })", span="325-336"];
m6_295 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="323-323"];
m6_513 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="224-224"];
m6_441 [cluster="Unk.ToArray", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ToArray", span=""];
m6_52 [cluster="System.DateTime.AddDays(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m6_0 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.BackgroundJobServer.BackgroundJobServer()", span="13-13"];
m6_3 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Queue = ''default''", span="17-17"];
m6_1 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer()", file="SqlServerWriteOnlyTransactionFacts.cs", label="MachineName = Environment.MachineName", span="15-15"];
m6_2 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer()", file="SqlServerWriteOnlyTransactionFacts.cs", label="WorkersCount = Environment.ProcessorCount * 2", span="16-16"];
m6_4 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer()", file="SqlServerWriteOnlyTransactionFacts.cs", label="PollInterval = TimeSpan.FromSeconds(15)", span="18-18"];
m6_5 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit HangFire.BackgroundJobServer.BackgroundJobServer()", span="13-13"];
m6_830 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", span="947-947"];
m6_832 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistList(''list-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''list-1'']);\r\n                Assert.NotNull(records[''list-2'']);\r\n            })", span="953-969"];
m6_831 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key], [ExpireAt])\r\nvalues (@key, @expireAt)''", span="949-951"];
m6_833 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", span="947-947"];
m6_692 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", span="794-794"];
m6_694 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1'']);\r\n                Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''set-2'']);\r\n            })", span="800-817"];
m6_693 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@key, @value, 0.0)''", span="796-798"];
m6_695 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", span="794-794"];
m6_143 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="142-142"];
m6_20 [cluster="HangFire.BackgroundJobServer.Stop()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit HangFire.BackgroundJobServer.Stop()", span="64-64"];
m6_28 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="39-39"];
m6_29 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="new SqlServerWriteOnlyTransaction(ConnectionUtils.CreateConnection(), null, null)", prediction=4, span="39-39"];
m6_30 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="39-39"];
m6_40 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)))", span="57-57"];
m6_41 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="59-59"];
m6_43 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="62-62"];
m6_67 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistJob(jobId))", span="80-80"];
m6_68 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="82-82"];
m6_70 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="85-85"];
m6_89 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetJobState(jobId, state.Object))", span="109-109"];
m6_90 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="111-111"];
m6_93 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="115-115"];
m6_129 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddJobState(jobId, state.Object))", span="146-146"];
m6_130 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="148-148"];
m6_160 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="_queueProviders.Add(correctProvider.Object, new [] { ''default'' })", span="171-171"];
m6_161 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddToQueue(''default'', ''1''))", span="173-173"];
m6_184 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.IncrementCounter(''my-key''))", span="191-191"];
m6_198 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="206-206"];
m6_216 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                })", span="226-230"];
m6_228 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.DecrementCounter(''my-key''))", span="243-243"];
m6_242 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="258-258"];
m6_259 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                })", span="278-282"];
m6_271 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value''))", span="295-295"];
m6_285 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                })", span="310-314"];
m6_297 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                })", span="327-331"];
m6_309 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2))", span="344-344"];
m6_323 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                })", span="359-363"];
m6_335 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                })", span="376-380"];
m6_348 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                })", span="393-397"];
m6_360 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                })", span="410-414"];
m6_372 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''))", span="427-427"];
m6_385 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                })", span="441-445"];
m6_397 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                })", span="458-463"];
m6_411 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                })", span="476-480"];
m6_423 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                })", span="493-497"];
m6_435 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                })", span="510-517"];
m6_454 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="532-538"];
m6_468 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="551-555"];
m6_480 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                })", span="568-572"];
m6_492 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                })", span="585-589"];
m6_504 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())))", span="602-603"];
m6_508 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()))", span="603-603"];
m6_518 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)))", span="614-615"];
m6_522 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', null))", span="615-615"];
m6_531 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }))", span="626-630"];
m6_550 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null)))", span="647-648"];
m6_553 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.RemoveHash(null))", span="648-648"];
m6_563 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }))", span="658-662"];
m6_564 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.RemoveHash(''some-hash''))", span="665-665"];
m6_578 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>())))", span="678-679"];
m6_582 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddRangeToSet(null, new List<string>()))", span="679-679"];
m6_593 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null)))", span="690-691"];
m6_597 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddRangeToSet(''my-set'', null))", span="691-691"];
m6_607 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddRangeToSet(''my-set'', items))", span="704-704"];
m6_618 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null)))", span="716-717"];
m6_621 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.RemoveSet(null))", span="717-717"];
m6_633 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.RemoveSet(''set-1''))", span="735-735"];
m6_645 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5))))", span="747-748"];
m6_649 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5)))", span="748-748"];
m6_662 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)))", span="771-771"];
m6_681 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45))))", span="786-787"];
m6_685 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45)))", span="787-787"];
m6_698 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)))", span="810-810"];
m6_717 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45))))", span="825-826"];
m6_721 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45)))", span="826-826"];
m6_733 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)))", span="848-848"];
m6_752 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null)))", span="863-864"];
m6_756 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistHash(null))", span="864-864"];
m6_768 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistHash(''hash-1''))", span="887-887"];
m6_786 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null)))", span="901-902"];
m6_790 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistSet(null))", span="902-902"];
m6_802 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistSet(''set-1''))", span="925-925"];
m6_820 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null)))", span="939-940"];
m6_824 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistList(null))", span="940-940"];
m6_836 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistList(''list-1''))", span="963-963"];
m6_11 [cluster="HangFire.BackgroundJobServer.Start()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit HangFire.BackgroundJobServer.Start()", span="50-50"];
m6_167 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.GetJobQueue(It.IsNotNull<IDbConnection>())", span="168-168"];
m6_217 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="232-232"];
m6_260 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="284-284"];
m6_286 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="316-316"];
m6_298 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="333-333"];
m6_336 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="382-382"];
m6_349 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="399-399"];
m6_361 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="416-416"];
m6_386 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="447-447"];
m6_398 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="465-465"];
m6_412 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="482-482"];
m6_424 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="499-499"];
m6_455 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="540-540"];
m6_469 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="557-557"];
m6_481 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="574-574"];
m6_493 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="591-591"];
m6_565 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single()", span="668-668"];
m6_608 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''')", span="706-706"];
m6_37 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="52-64"];
m6_38 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="54-54"];
m6_39 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="55-55"];
m6_55 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="57-57"];
m6_42 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1))", span="60-60"];
m6_44 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(anotherJob.ExpireAt)", span="63-63"];
m6_64 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="75-87"];
m6_65 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="77-77"];
m6_66 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="78-78"];
m6_74 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="80-80"];
m6_69 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.ExpireAt)", span="83-83"];
m6_71 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(anotherJob.ExpireAt)", span="86-86"];
m6_82 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="98-125"];
m6_83 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="100-100"];
m6_85 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var state = new Mock<IState>()", span="103-103"];
m6_88 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="106-107"];
m6_115 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="109-109"];
m6_91 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', job.StateName)", span="112-112"];
m6_92 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(job.StateId)", span="113-113"];
m6_84 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="101-101"];
m6_94 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(anotherJob.StateName)", span="116-116"];
m6_95 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(anotherJob.StateId)", span="117-117"];
m6_123 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="136-158"];
m6_124 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="138-138"];
m6_125 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var state = new Mock<IState>()", span="140-140"];
m6_128 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="143-144"];
m6_149 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="146-146"];
m6_131 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.StateName)", span="149-149"];
m6_132 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.StateId)", span="150-150"];
m6_156 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="164-176"];
m6_158 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var correctProvider = new Mock<IPersistentJobQueueProvider>()", span="167-167"];
m6_159 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="correctProvider.Setup(x => x.GetJobQueue(It.IsNotNull<IDbConnection>()))\r\n                    .Returns(correctJobQueue.Object)", span="168-169"];
m6_162 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="correctJobQueue.Verify(x => x.Enqueue(''default'', ''1''))", span="175-175"];
m6_169 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="173-173"];
m6_183 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="189-198"];
m6_185 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="193-193"];
m6_190 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="191-191"];
m6_197 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="204-218"];
m6_199 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="208-208"];
m6_208 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="206-206"];
m6_215 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="224-235"];
m6_220 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="226-230"];
m6_227 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="241-250"];
m6_229 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="245-245"];
m6_234 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="243-243"];
m6_241 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="256-270"];
m6_243 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="260-260"];
m6_251 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="258-258"];
m6_258 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="276-287"];
m6_263 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="278-282"];
m6_270 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="293-302"];
m6_272 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="297-297"];
m6_277 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="295-295"];
m6_284 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="308-319"];
m6_289 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="310-314"];
m6_296 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="325-336"];
m6_301 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="327-331"];
m6_308 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="342-351"];
m6_310 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="346-346"];
m6_315 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="344-344"];
m6_322 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="357-368"];
m6_324 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="365-365"];
m6_327 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="359-363"];
m6_334 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="374-385"];
m6_339 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="376-380"];
m6_347 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="391-402"];
m6_352 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="393-397"];
m6_359 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="408-419"];
m6_364 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="410-414"];
m6_371 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="425-433"];
m6_373 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.List'').Single()", span="429-429"];
m6_377 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="427-427"];
m6_384 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="439-450"];
m6_389 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="441-445"];
m6_396 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="456-468"];
m6_401 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="458-463"];
m6_410 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="474-485"];
m6_415 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="476-480"];
m6_422 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="491-502"];
m6_427 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="493-497"];
m6_434 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="508-524"];
m6_436 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="519-519"];
m6_442 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="510-517"];
m6_453 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="530-543"];
m6_458 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="532-538"];
m6_467 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="549-560"];
m6_472 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="551-555"];
m6_479 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="566-577"];
m6_484 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="568-572"];
m6_491 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="583-594"];
m6_496 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="585-589"];
m6_503 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="600-606"];
m6_505 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="605-605"];
m6_507 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="603-603"];
m6_509 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="603-603"];
m6_510 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="603-603"];
m6_517 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="612-618"];
m6_519 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="617-617"];
m6_521 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="615-615"];
m6_523 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="615-615"];
m6_524 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="615-615"];
m6_530 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="624-639"];
m6_532 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="632-635"];
m6_537 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="626-630"];
m6_549 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="645-649"];
m6_551 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="645-649"];
m6_552 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="648-648"];
m6_554 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="648-648"];
m6_555 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="648-648"];
m6_562 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="655-670"];
m6_568 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="658-662"];
m6_571 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="665-665"];
m6_577 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="676-682"];
m6_579 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="681-681"];
m6_581 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="679-679"];
m6_583 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="679-679"];
m6_584 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="679-679"];
m6_592 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="688-694"];
m6_594 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''items'', exception.ParamName)", span="693-693"];
m6_596 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="691-691"];
m6_598 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="691-691"];
m6_599 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="691-691"];
m6_605 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="700-708"];
m6_606 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var items = new List<string> { ''1'', ''2'', ''3'' }", span="702-702"];
m6_611 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="704-704"];
m6_617 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="714-718"];
m6_619 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="714-718"];
m6_620 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="717-717"];
m6_622 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="717-717"];
m6_623 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="717-717"];
m6_631 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="727-739"];
m6_632 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="729-733"];
m6_634 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="737-737"];
m6_638 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="735-735"];
m6_644 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="745-751"];
m6_646 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="750-750"];
m6_648 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="748-748"];
m6_650 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="748-748"];
m6_651 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="748-748"];
m6_660 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="761-778"];
m6_661 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                })", span="764-768"];
m6_663 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="774-774"];
m6_668 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="771-771"];
m6_680 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="784-790"];
m6_682 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="789-789"];
m6_684 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="787-787"];
m6_686 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="787-787"];
m6_687 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="787-787"];
m6_696 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="800-817"];
m6_697 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="803-807"];
m6_699 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="813-813"];
m6_704 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="810-810"];
m6_716 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="823-829"];
m6_718 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="828-828"];
m6_720 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="826-826"];
m6_722 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="826-826"];
m6_723 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="826-826"];
m6_731 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="838-855"];
m6_732 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                })", span="841-845"];
m6_734 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="851-851"];
m6_739 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="848-848"];
m6_751 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="861-867"];
m6_753 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="866-866"];
m6_755 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="864-864"];
m6_757 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="864-864"];
m6_758 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="864-864"];
m6_766 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="877-893"];
m6_767 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="880-884"];
m6_769 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="890-890"];
m6_773 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="887-887"];
m6_785 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="899-905"];
m6_787 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="904-904"];
m6_789 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="902-902"];
m6_791 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="902-902"];
m6_792 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="902-902"];
m6_800 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="915-931"];
m6_801 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="918-922"];
m6_803 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="928-928"];
m6_807 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="925-925"];
m6_819 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="937-943"];
m6_821 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="942-942"];
m6_823 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="940-940"];
m6_825 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="940-940"];
m6_826 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="940-940"];
m6_834 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="953-969"];
m6_835 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="956-960"];
m6_837 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="966-966"];
m6_841 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="963-963"];
m6_97 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="120-120"];
m6_98 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', jobState.Name)", span="121-121"];
m6_99 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Reason'', jobState.Reason)", span="122-122"];
m6_101 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="124-124"];
m6_134 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="153-153"];
m6_135 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', jobState.Name)", span="154-154"];
m6_136 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Reason'', jobState.Reason)", span="155-155"];
m6_138 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="157-157"];
m6_186 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="195-195"];
m6_187 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, record.Value)", span="196-196"];
m6_188 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="197-197"];
m6_200 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="210-210"];
m6_201 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, record.Value)", span="211-211"];
m6_218 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="234-234"];
m6_230 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="247-247"];
m6_231 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(-1, record.Value)", span="248-248"];
m6_232 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="249-249"];
m6_244 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="262-262"];
m6_245 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(-1, record.Value)", span="263-263"];
m6_261 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="286-286"];
m6_273 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="299-299"];
m6_274 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="300-300"];
m6_275 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0.0, record.Score, 2)", span="301-301"];
m6_287 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="318-318"];
m6_299 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="335-335"];
m6_311 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="348-348"];
m6_312 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="349-349"];
m6_313 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(3.2, record.Score, 3)", span="350-350"];
m6_325 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(3.2, record.Score, 3)", span="367-367"];
m6_337 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="384-384"];
m6_350 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="401-401"];
m6_362 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="418-418"];
m6_374 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="431-431"];
m6_375 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="432-432"];
m6_387 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="449-449"];
m6_399 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="467-467"];
m6_413 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="484-484"];
m6_425 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="501-501"];
m6_437 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, records.Length)", span="521-521"];
m6_438 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''1'', records[0].Value)", span="522-522"];
m6_439 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''2'', records[1].Value)", span="523-523"];
m6_456 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="542-542"];
m6_470 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="559-559"];
m6_482 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="576-576"];
m6_494 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="593-593"];
m6_533 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Value1'', result[''Key1''])", span="637-637"];
m6_534 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Value2'', result[''Key2''])", span="638-638"];
m6_566 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, count)", span="669-669"];
m6_609 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(items, records)", span="707-707"];
m6_635 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''set-2'', record.Key)", span="738-738"];
m6_10 [cluster="HangFire.BackgroundJobServer.Start()", file="SqlServerWriteOnlyTransactionFacts.cs", label="_server = new JobServer(MachineName, Queue, WorkersCount, PollInterval, JobActivator)", span="57-57"];
m6_12 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m6_166 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="168-168"];
m6_168 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="168-168"];
m6_45 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="52-64"];
m6_56 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireJob(jobId, TimeSpan.FromDays(1))", span="57-57"];
m6_57 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="57-57"];
m6_72 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="75-87"];
m6_75 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistJob(jobId)", span="80-80"];
m6_76 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="80-80"];
m6_102 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="98-125"];
m6_96 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="119-119"];
m6_116 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetJobState(jobId, state.Object)", span="109-109"];
m6_86 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Name).Returns(''State'')", span="104-104"];
m6_87 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Reason).Returns(''Reason'')", span="105-105"];
m6_111 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="106-106"];
m6_117 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="109-109"];
m6_139 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="136-158"];
m6_133 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="152-152"];
m6_150 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddJobState(jobId, state.Object)", span="146-146"];
m6_126 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Name).Returns(''State'')", span="141-141"];
m6_127 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Reason).Returns(''Reason'')", span="142-142"];
m6_146 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="143-143"];
m6_151 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="146-146"];
m6_163 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="164-176"];
m6_157 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var correctJobQueue = new Mock<IPersistentJobQueue>()", span="166-166"];
m6_173 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="175-175"];
m6_171 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="173-173"];
m6_170 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToQueue(''default'', ''1'')", span="173-173"];
m6_189 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="189-198"];
m6_192 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="191-191"];
m6_191 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'')", span="191-191"];
m6_206 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="204-218"];
m6_202 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(record.ExpireAt)", span="212-212"];
m6_203 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var expireAt = (DateTime) record.ExpireAt", span="214-214"];
m6_210 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="206-206"];
m6_209 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'', TimeSpan.FromDays(1))", span="206-206"];
m6_219 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="224-235"];
m6_223 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="226-230"];
m6_221 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'')", span="228-228"];
m6_222 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'')", span="229-229"];
m6_233 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="241-250"];
m6_236 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="243-243"];
m6_235 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'')", span="243-243"];
m6_250 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="256-270"];
m6_246 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(record.ExpireAt)", span="264-264"];
m6_247 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var expireAt = (DateTime)record.ExpireAt", span="266-266"];
m6_253 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="258-258"];
m6_252 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'', TimeSpan.FromDays(1))", span="258-258"];
m6_262 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="276-287"];
m6_266 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="278-282"];
m6_264 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'')", span="280-280"];
m6_265 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'')", span="281-281"];
m6_276 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="293-302"];
m6_279 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="295-295"];
m6_278 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="295-295"];
m6_288 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="308-319"];
m6_292 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="310-314"];
m6_290 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="312-312"];
m6_291 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''another-value'')", span="313-313"];
m6_300 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="325-336"];
m6_304 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="327-331"];
m6_302 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="329-329"];
m6_303 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="330-330"];
m6_314 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="342-351"];
m6_317 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="344-344"];
m6_316 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="344-344"];
m6_326 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="357-368"];
m6_330 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="359-363"];
m6_328 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="361-361"];
m6_329 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="362-362"];
m6_338 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="374-385"];
m6_342 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="376-380"];
m6_340 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="378-378"];
m6_341 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromSet(''my-key'', ''my-value'')", span="379-379"];
m6_351 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="391-402"];
m6_355 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="393-397"];
m6_353 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="395-395"];
m6_354 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromSet(''my-key'', ''different-value'')", span="396-396"];
m6_363 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="408-419"];
m6_367 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="410-414"];
m6_365 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="412-412"];
m6_366 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromSet(''different-key'', ''my-value'')", span="413-413"];
m6_376 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="425-433"];
m6_379 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="427-427"];
m6_378 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="427-427"];
m6_388 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="439-450"];
m6_392 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="441-445"];
m6_390 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="443-443"];
m6_391 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="444-444"];
m6_400 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="456-468"];
m6_405 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="458-463"];
m6_402 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="460-460"];
m6_403 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="461-461"];
m6_404 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromList(''my-key'', ''my-value'')", span="462-462"];
m6_414 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="474-485"];
m6_418 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="476-480"];
m6_416 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="478-478"];
m6_417 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromList(''my-key'', ''different-value'')", span="479-479"];
m6_426 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="491-502"];
m6_430 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="493-497"];
m6_428 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="495-495"];
m6_429 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromList(''different-key'', ''my-value'')", span="496-496"];
m6_440 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="508-524"];
m6_448 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="510-517"];
m6_443 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="512-512"];
m6_444 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''1'')", span="513-513"];
m6_445 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''2'')", span="514-514"];
m6_446 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''3'')", span="515-515"];
m6_447 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 2)", span="516-516"];
m6_457 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="530-543"];
m6_463 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="532-538"];
m6_459 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="534-534"];
m6_460 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''1'')", span="535-535"];
m6_461 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''2'')", span="536-536"];
m6_462 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 100)", span="537-537"];
m6_471 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="549-560"];
m6_475 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="551-555"];
m6_473 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="553-553"];
m6_474 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 100)", span="554-554"];
m6_483 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="566-577"];
m6_487 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="568-572"];
m6_485 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="570-570"];
m6_486 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 0)", span="571-571"];
m6_495 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="583-594"];
m6_499 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="585-589"];
m6_497 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="587-587"];
m6_498 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''another-key'', 1, 0)", span="588-588"];
m6_506 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="600-606"];
m6_512 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="603-603"];
m6_511 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(null, new Dictionary<string, string>())", span="603-603"];
m6_520 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="612-618"];
m6_526 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="615-615"];
m6_525 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(''some-hash'', null)", span="615-615"];
m6_535 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="624-639"];
m6_540 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="635-635"];
m6_543 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="635-635"];
m6_539 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="626-630"];
m6_538 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="626-630"];
m6_557 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="648-648"];
m6_556 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveHash(null)", span="648-648"];
m6_567 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="655-670"];
m6_570 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="658-662"];
m6_569 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="658-662"];
m6_573 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="665-665"];
m6_572 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveHash(''some-hash'')", span="665-665"];
m6_580 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="676-682"];
m6_586 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="679-679"];
m6_585 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddRangeToSet(null, new List<string>())", span="679-679"];
m6_595 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="688-694"];
m6_601 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="691-691"];
m6_600 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddRangeToSet(''my-set'', null)", span="691-691"];
m6_610 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="700-708"];
m6_612 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddRangeToSet(''my-set'', items)", span="704-704"];
m6_613 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="704-704"];
m6_625 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="717-717"];
m6_624 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveSet(null)", span="717-717"];
m6_636 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="727-739"];
m6_640 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="735-735"];
m6_639 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveSet(''set-1'')", span="735-735"];
m6_647 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="745-751"];
m6_653 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="748-748"];
m6_652 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireHash(null, TimeSpan.FromMinutes(5))", span="748-748"];
m6_667 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="761-778"];
m6_664 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1''])", span="775-775"];
m6_671 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="774-774"];
m6_674 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="774-774"];
m6_665 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61))", span="776-776"];
m6_666 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''hash-2''])", span="777-777"];
m6_670 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="771-771"];
m6_669 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60))", span="771-771"];
m6_683 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="784-790"];
m6_689 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="787-787"];
m6_688 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireSet(null, TimeSpan.FromSeconds(45))", span="787-787"];
m6_703 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="800-817"];
m6_700 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1''])", span="814-814"];
m6_707 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="813-813"];
m6_710 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="813-813"];
m6_701 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61))", span="815-815"];
m6_702 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''set-2''])", span="816-816"];
m6_706 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="810-810"];
m6_705 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60))", span="810-810"];
m6_719 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="823-829"];
m6_725 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="826-826"];
m6_724 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireList(null, TimeSpan.FromSeconds(45))", span="826-826"];
m6_738 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="838-855"];
m6_735 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1''])", span="852-852"];
m6_742 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="851-851"];
m6_745 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="851-851"];
m6_736 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61))", span="853-853"];
m6_737 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''list-2''])", span="854-854"];
m6_741 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="848-848"];
m6_740 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireList(''list-1'', TimeSpan.FromMinutes(60))", span="848-848"];
m6_754 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="861-867"];
m6_760 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="864-864"];
m6_759 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistHash(null)", span="864-864"];
m6_772 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="877-893"];
m6_770 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''hash-1''])", span="891-891"];
m6_776 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="890-890"];
m6_779 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="890-890"];
m6_771 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(records[''hash-2''])", span="892-892"];
m6_775 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="887-887"];
m6_774 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistHash(''hash-1'')", span="887-887"];
m6_788 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="899-905"];
m6_794 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="902-902"];
m6_793 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistSet(null)", span="902-902"];
m6_806 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="915-931"];
m6_804 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''set-1''])", span="929-929"];
m6_810 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="928-928"];
m6_813 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="928-928"];
m6_805 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(records[''set-2''])", span="930-930"];
m6_809 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="925-925"];
m6_808 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistSet(''set-1'')", span="925-925"];
m6_822 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="937-943"];
m6_828 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="940-940"];
m6_827 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistList(null)", span="940-940"];
m6_840 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="953-969"];
m6_838 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''list-1''])", span="967-967"];
m6_844 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="966-966"];
m6_847 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="966-966"];
m6_839 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(records[''list-2''])", span="968-968"];
m6_843 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="963-963"];
m6_842 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistList(''list-1'')", span="963-963"];
m6_100 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(jobState.CreatedAt)", span="123-123"];
m6_137 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(jobState.CreatedAt)", span="156-156"];
m6_204 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="216-216"];
m6_205 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="217-217"];
m6_248 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="268-268"];
m6_249 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="269-269"];
m6_105 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="104-104"];
m6_108 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="105-105"];
m6_113 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="106-106"];
m6_112 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SerializeData()", span="106-106"];
m6_140 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="141-141"];
m6_148 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="143-143"];
m6_147 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SerializeData()", span="143-143"];
m6_175 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="175-175"];
m6_174 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Enqueue(''default'', ''1'')", span="175-175"];
m6_542 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="635-635"];
m6_541 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Field", span="635-635"];
m6_545 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="635-635"];
m6_544 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Value", span="635-635"];
m6_673 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="774-774"];
m6_672 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="774-774"];
m6_676 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="774-774"];
m6_675 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="774-774"];
m6_709 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="813-813"];
m6_708 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="813-813"];
m6_712 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="813-813"];
m6_711 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="813-813"];
m6_744 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="851-851"];
m6_743 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="851-851"];
m6_747 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="851-851"];
m6_746 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="851-851"];
m6_778 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="890-890"];
m6_777 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="890-890"];
m6_781 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="890-890"];
m6_780 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="890-890"];
m6_812 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="928-928"];
m6_811 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="928-928"];
m6_815 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="928-928"];
m6_814 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="928-928"];
m6_846 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="966-966"];
m6_845 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="966-966"];
m6_849 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="966-966"];
m6_848 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="966-966"];
m6_107 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="104-104"];
m6_106 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Name", span="104-104"];
m6_110 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="105-105"];
m6_109 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Reason", span="105-105"];
m6_142 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="141-141"];
m6_141 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Name", span="141-141"];
m6_144 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Reason", span="142-142"];
m6_145 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="142-142"];
m6_588 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", span="252-252"];
m6_381 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="437-437"];
m6_382 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="439-450"];
m6_383 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="437-437"];
m6_368 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="423-423"];
m6_369 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.InsertToList(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.List'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n            })", span="425-433"];
m6_370 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="423-423"];
m6_602 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", span="698-698"];
m6_603 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var items = new List<string> { ''1'', ''2'', ''3'' };\r\n\r\n                Commit(sql, x => x.AddRangeToSet(''my-set'', items));\r\n\r\n                var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''');\r\n                Assert.Equal(items, records);\r\n            })", span="700-708"];
m6_604 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", span="698-698"];
m6_406 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="201-201"];
m6_8 [cluster="HangFire.BackgroundJobServer.Start()", file="SqlServerWriteOnlyTransactionFacts.cs", label="_server != null", span="52-52"];
m6_796 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", span="909-909"];
m6_798 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistSet(''set-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''set-1'']);\r\n                Assert.NotNull(records[''set-2'']);\r\n            })", span="915-931"];
m6_797 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [ExpireAt], [Score])\r\nvalues (@key, @value, @expireAt, 0.0)''", span="911-913"];
m6_799 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", span="909-909"];
m6_356 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="406-406"];
m6_357 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="408-419"];
m6_358 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="406-406"];
m6_713 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", span="821-821"];
m6_714 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="823-829"];
m6_715 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", span="821-821"];
m6_103 [cluster="Mock<IState>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Mock<IState>.cstr", span=""];
m6_224 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="239-239"];
m6_225 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="241-250"];
m6_226 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="239-239"];
m6_51 [cluster="System.DateTime.AddMinutes(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
m6_859 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="52-52"];
m6_36 [cluster="Unk.UseConnection", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.UseConnection", span=""];
m6_19 [cluster="HangFire.BackgroundJobServer.Stop()", file="SqlServerWriteOnlyTransactionFacts.cs", label="return false;", span="73-73"];
m6_237 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="149-149"];
m6_118 [cluster="Unk.SetJobState", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.SetJobState", span=""];
m6_488 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="581-581"];
m6_489 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="583-594"];
m6_490 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="581-581"];
m6_31 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m6_25 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="HangFire.BackgroundJobServer", prediction=3, span=""];
m6_26 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''queueProviders'', exception.ParamName)", span="41-41"];
m6_27 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", span="36-36"];
m6_59 [cluster="Unk.ExpireJob", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ExpireJob", span=""];
m6_331 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="372-372"];
m6_332 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="374-385"];
m6_333 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="372-372"];
m6_15 [cluster="HangFire.BackgroundJobServer.Stop()", file="SqlServerWriteOnlyTransactionFacts.cs", label="_server != null", span="66-66"];
m6_16 [cluster="HangFire.BackgroundJobServer.Stop()", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="_server.Dispose()", prediction=3, span="68-68"];
m6_17 [cluster="HangFire.BackgroundJobServer.Stop()", file="SqlServerWriteOnlyTransactionFacts.cs", label="_server = null", span="69-69"];
m6_18 [cluster="HangFire.BackgroundJobServer.Stop()", file="SqlServerWriteOnlyTransactionFacts.cs", label="return true;", span="71-71"];
m6_305 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="340-340"];
m6_306 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="342-351"];
m6_307 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="340-340"];
m6_46 [cluster="Unk.Query", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Query", span=""];
m6_854 [cluster="System.Action<T>.Invoke(T)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m6_558 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", span="242-242"];
m6_238 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="254-254"];
m6_239 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime)record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="256-270"];
m6_240 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="254-254"];
m6_500 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="598-598"];
m6_501 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="600-606"];
m6_502 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="598-598"];
m6_727 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", span="833-833"];
m6_729 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1'']);\r\n                Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''list-2'']);\r\n            })", span="838-855"];
m6_728 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key]) values (@key)''", span="835-836"];
m6_730 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", span="833-833"];
m6_164 [cluster="Unk.Add", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Add", span=""];
m6_73 [cluster="Unk.NotNull", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.NotNull", span=""];
m6_32 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", span="45-45"];
m6_34 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1));\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.ExpireAt);\r\n            })", span="52-64"];
m6_33 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="47-50"];
m6_35 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", span="45-45"];
m6_762 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", span="871-871"];
m6_764 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistHash(''hash-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''hash-1'']);\r\n                Assert.NotNull(records[''hash-2'']);\r\n            })", span="877-893"];
m6_763 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [ExpireAt])\r\nvalues (@key, @field, @expireAt)''", span="873-875"];
m6_765 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", span="871-871"];
m6_49 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", span="980-980"];
m6_855 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var transaction = new SqlServerWriteOnlyTransaction(connection, null, _queueProviders)", prediction=7, span="984-984"];
m6_856 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="action(transaction)", span="986-986"];
m6_857 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="transaction.Commit()", span="987-987"];
m6_858 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", span="980-980"];
m6_180 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="187-187"];
m6_181 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="189-198"];
m6_182 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="187-187"];
m6_6 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m6_54 [cluster="Unk.Null", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Null", span=""];
m6_14 [cluster="Unk.GetJobQueue", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.GetJobQueue", span=""];
m6_9 [cluster="HangFire.BackgroundJobServer.Start()", file="SqlServerWriteOnlyTransactionFacts.cs", label="throw new InvalidOperationException(''Background job server has already been started. Please stop it first.'');", span="54-54"];
m6_850 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="972-972"];
m6_851 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="var connection = ConnectionUtils.CreateConnection()", span="974-974"];
m6_852 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="action(connection)", span="976-976"];
m6_853 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="972-972"];
m6_656 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", span="755-755"];
m6_658 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1'']);\r\n                Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''hash-2'']);\r\n            })", span="761-778"];
m6_657 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field])\r\nvalues (@key, @field)''", span="757-759"];
m6_659 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", span="755-755"];
m6_464 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="547-547"];
m6_465 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="549-560"];
m6_466 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="547-547"];
m6_207 [cluster="System.DateTime.AddHours(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m6_212 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="222-222"];
m6_213 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(2, recordCount);\r\n            })", span="224-235"];
m6_214 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="222-222"];
m6_748 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", span="859-859"];
m6_749 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="861-867"];
m6_750 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", span="859-859"];
m6_450 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="528-528"];
m6_451 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="530-543"];
m6_452 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="528-528"];
m6_13 [cluster="Unk.>", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.>", span=""];
m6_431 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="506-506"];
m6_432 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                });\r\n\r\n                var records = sql.Query(''select * from HangFire.List'').ToArray();\r\n\r\n                Assert.Equal(2, records.Length);\r\n                Assert.Equal(''1'', records[0].Value);\r\n                Assert.Equal(''2'', records[1].Value);\r\n            })", span="508-524"];
m6_433 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="506-506"];
m6_165 [cluster="Unk.Verify", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Verify", span=""];
m6_255 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="274-274"];
m6_256 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="276-287"];
m6_257 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="274-274"];
m6_449 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="209-209"];
m6_654 [cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m6_536 [cluster="Unk.ToDictionary", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ToDictionary", span=""];
m6_281 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="306-306"];
m6_282 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="308-319"];
m6_283 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="306-306"];
m6_78 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="91-91"];
m6_80 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.StateName);\r\n                Assert.Null(anotherJob.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="98-125"];
m6_79 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="93-96"];
m6_81 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="91-91"];
m6_60 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="68-68"];
m6_62 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.PersistJob(jobId));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.ExpireAt);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.NotNull(anotherJob.ExpireAt);\r\n            })", span="75-87"];
m6_61 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues ('', '', getutcdate(), getutcdate())\r\nselect scope_identity() as Id''", span="70-73"];
m6_63 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="68-68"];
m6_254 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="156-156"];
m6_626 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", span="265-265"];
m6_690 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m6_172 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="127-127"];
m6_58 [cluster="System.TimeSpan.FromDays(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m6_176 [cluster="Unk.Enqueue", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Enqueue", span=""];
m6_527 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="622-622"];
m6_528 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }));\r\n\r\n                var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="624-639"];
m6_529 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="622-622"];
m6_104 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m6_574 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", span="674-674"];
m6_575 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>())));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="676-682"];
m6_576 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", span="674-674"];
m6_344 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="389-389"];
m6_345 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="391-402"];
m6_346 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="389-389"];
m6_641 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", span="743-743"];
m6_642 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="745-751"];
m6_643 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", span="743-743"];
m6_114 [cluster="Unk.SerializeData", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.SerializeData", span=""];
m6_47 [cluster="Unk.Single", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Single", span=""];
m6_53 [cluster="Unk.True", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.True", span=""];
m6_77 [cluster="Unk.PersistJob", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.PersistJob", span=""];
m6_677 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", span="782-782"];
m6_678 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="784-790"];
m6_679 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", span="782-782"];
m6_380 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="193-193"];
m6_546 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", span="643-643"];
m6_547 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null)));\r\n            })", span="645-649"];
m6_548 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", span="643-643"];
m6_860 [file="SqlServerWriteOnlyTransactionFacts.cs", label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", span=""];
m6_871 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m6_872 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m6_873 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m6_874 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m6_875 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m6_877 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m6_879 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m6_881 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m6_883 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m6_885 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m6_887 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m6_889 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m6_861 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m6_863 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m6_865 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m6_868 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m6_878 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m6_880 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m6_882 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m6_884 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m6_886 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m6_888 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m6_890 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m6_862 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m6_864 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m6_866 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m6_867 [file="SqlServerWriteOnlyTransactionFacts.cs", label=state, span=""];
m6_869 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m6_870 [file="SqlServerWriteOnlyTransactionFacts.cs", label=state, span=""];
m6_876 [file="SqlServerWriteOnlyTransactionFacts.cs", label=items, span=""];
m7_230 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(''my-key'', record.Key)", span="246-246"];
m7_90 [cluster="lambda expression", file="StateMachine.cs", label="var job = GetTestJob(sql, jobId)", span="110-110"];
m7_372 [cluster="lambda expression", file="StateMachine.cs", label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''))", span="426-426"];
m7_113 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="105-105"];
m7_390 [cluster="lambda expression", file="StateMachine.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="442-442"];
m7_60 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="100-106"];
m7_62 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="100-106"];
m7_61 [cluster="lambda expression", file="StateMachine.cs", label="new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    InScheduledState = ScheduledState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueueAt = JobHelper.DeserializeNullableDateTime(stateData[''EnqueueAt'']) ?? DateTime.MinValue,\r\n                    ScheduledAt = JobHelper.DeserializeNullableDateTime(stateData[''ScheduledAt''])\r\n                }", span="100-106"];
m7_63 [cluster="Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", file="StateMachine.cs", label="Entry Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23"];
m7_153 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="206-206"];
m7_154 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="207-207"];
m7_155 [cluster="lambda expression", file="StateMachine.cs", label="x.Queue", span="207-207"];
m7_91 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(''State'', job.StateName)", span="111-111"];
m7_212 [cluster="lambda expression", file="StateMachine.cs", label="var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new SafeDictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList()", span="279-291"];
m7_213 [cluster="lambda expression", file="StateMachine.cs", label="return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };", span="293-300"];
m7_214 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="266-302"];
m7_419 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="StateMachine.cs", label=fetchedJobIds, span=""];
m7_420 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="StateMachine.cs", label=string, span=""];
m7_421 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="StateMachine.cs", label=sql, span=""];
m7_391 [cluster="lambda expression", file="StateMachine.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="443-443"];
m7_28 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="67-67"];
m7_29 [cluster="lambda expression", file="StateMachine.cs", label="new SqlServerWriteOnlyTransaction(ConnectionUtils.CreateConnection(), null)", span="38-38"];
m7_30 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="67-67"];
m7_142 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="140-140"];
m7_102 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="97-124"];
m7_377 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="426-426"];
m7_378 [cluster="lambda expression", file="StateMachine.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="426-426"];
m7_379 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="426-426"];
m7_384 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="438-449"];
m7_385 [cluster="lambda expression", file="StateMachine.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                })", span="440-444"];
m7_386 [cluster="lambda expression", file="StateMachine.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="446-446"];
m7_380 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="StateMachine.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="181-181"];
m7_381 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="StateMachine.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="436-436"];
m7_382 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="StateMachine.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="438-449"];
m7_383 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="436-436"];
m7_387 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(2, recordCount)", span="448-448"];
m7_237 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="StateMachine.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="141-141"];
m7_238 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="StateMachine.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="253-253"];
m7_239 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="StateMachine.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime)record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="255-269"];
m7_449 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="StateMachine.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="195-195"];
m7_527 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="StateMachine.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="621-621"];
m7_528 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="StateMachine.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }));\r\n\r\n                var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="623-638"];
m7_529 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="621-621"];
m7_267 [cluster="lambda expression", file="StateMachine.cs", label="x.GetJobQueueMonitoringApi().GetQueues()", span="361-361"];
m7_268 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="361-361"];
m7_269 [cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", file="StateMachine.cs", label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", span="22-22"];
m7_368 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs", label=JobLoadException, span="493-493"];
m7_369 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs", label="return null;", span="495-495"];
m7_370 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="484-484"];
m7_48 [cluster="lambda expression", file="StateMachine.cs", label="new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    InProcessingState = ProcessingState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeNullableDateTime(stateData[''StartedAt'']),\r\n                }", span="85-91"];
m7_404 [cluster="lambda expression", file="StateMachine.cs", label="x.RemoveFromList(''my-key'', ''my-value'')", span="461-461"];
m7_331 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="StateMachine.cs", label="var provider = _storage.QueueProviders.GetProvider(queueName)", span="428-428"];
m7_332 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="StateMachine.cs", label="var monitoringApi = provider.GetJobQueueMonitoringApi()", span="429-429"];
m7_333 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="StateMachine.cs", label="return monitoringApi;", span="431-431"];
m7_152 [cluster="lambda expression", file="StateMachine.cs", label="new { Monitoring = monitoring, Queue = queue }", span="206-206"];
m7_250 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="255-269"];
m7_343 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="StateMachine.cs", label="return DeserializeJobs(\r\n                sortedSqlJobs,\r\n                (sqlJob, job, stateData) => new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    InEnqueuedState = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueuedAt = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase)\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                });", span="457-467"];
m7_305 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="392-392"];
m7_306 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="397-397"];
m7_307 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs", label="string sqlQuery =\r\n$@''select [Key], [Value] as [Count] from [{_storage.SchemaName}].AggregatedCounter with (nolock)\r\nwhere [Key] in @keys''", span="401-403"];
m7_431 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="StateMachine.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="505-505"];
m7_432 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="StateMachine.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                });\r\n\r\n                var records = sql.Query(''select * from HangFire.List'').ToArray();\r\n\r\n                Assert.Equal(2, records.Length);\r\n                Assert.Equal(''1'', records[0].Value);\r\n                Assert.Equal(''2'', records[1].Value);\r\n            })", span="507-523"];
m7_433 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="505-505"];
m7_196 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="201-201"];
m7_197 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="203-217"];
m7_198 [cluster="lambda expression", file="StateMachine.cs", label="Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="205-205"];
m7_406 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="StateMachine.cs", label="Hangfire.SqlServer.SqlServerMonitoringApi", span=""];
m7_49 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="85-91"];
m7_551 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="StateMachine.cs", label="var transaction = new SqlServerWriteOnlyTransaction(connection, _queueProviders)", span="653-653"];
m7_552 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="StateMachine.cs", label="action(transaction)", span="655-655"];
m7_553 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="StateMachine.cs", label="transaction.Commit()", span="656-656"];
m7_554 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", span="649-649"];
m7_345 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="StateMachine.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="390-401"];
m7_243 [cluster="lambda expression", file="StateMachine.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="259-259"];
m7_244 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(''my-key'', record.Key)", span="261-261"];
m7_245 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(-1, record.Value)", span="262-262"];
m7_246 [cluster="lambda expression", file="StateMachine.cs", label="Assert.NotNull(record.ExpireAt)", span="263-263"];
m7_247 [cluster="lambda expression", file="StateMachine.cs", label="var expireAt = (DateTime)record.ExpireAt", span="265-265"];
m7_248 [cluster="lambda expression", file="StateMachine.cs", label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="267-267"];
m7_407 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="StateMachine.cs", label=int, span=""];
m7_408 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="StateMachine.cs", label=int, span=""];
m7_409 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="StateMachine.cs", label=int, span=""];
m7_181 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="StateMachine.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="188-197"];
m7_176 [cluster="Unk.Enqueue", file="StateMachine.cs", label="Entry Unk.Enqueue", span=""];
m7_177 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="StateMachine.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="178-178"];
m7_178 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="StateMachine.cs", label="return connection\r\n                .Query(''select * from HangFire.Job where id = @id'', new { id = jobId })\r\n                .Single();", span="180-182"];
m7_179 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="178-178"];
m7_180 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="StateMachine.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="186-186"];
m7_31 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="69-70"];
m7_338 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="373-384"];
m7_355 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="392-396"];
m7_321 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="354-354"];
m7_255 [cluster="lambda expression", file="StateMachine.cs", label="stats.Enqueued = multi.ReadSingle<int>()", span="345-345"];
m7_256 [cluster="lambda expression", file="StateMachine.cs", label="stats.Failed = multi.ReadSingle<int>()", span="346-346"];
m7_257 [cluster="lambda expression", file="StateMachine.cs", label="stats.Processing = multi.ReadSingle<int>()", span="347-347"];
m7_119 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="189-199"];
m7_120 [cluster="lambda expression", color=green, community=0, file="StateMachine.cs", label="Entry lambda expression", prediction=8, span="194-199"];
m7_121 [cluster="lambda expression", color=green, community=0, file="StateMachine.cs", label="new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    InDeletedState = DeletedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }", prediction=9, span="194-199"];
m7_122 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="194-199"];
m7_6 [cluster="Unk.Setup", file="StateMachine.cs", label="Entry Unk.Setup", span=""];
m7_112 [cluster="lambda expression", file="StateMachine.cs", label="x.SerializeData()", span="105-105"];
m7_15 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", span="470-470"];
m7_16 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="51-51"];
m7_17 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="StateMachine.cs", label="var queueApi = GetQueueApi(queue)", span="53-53"];
m7_18 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="StateMachine.cs", label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="54-54"];
m7_293 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs", label="dates.Add(endDate)", span="388-388"];
m7_294 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs", label="endDate = endDate.AddDays(-1)", span="389-389"];
m7_295 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs", label="i++", span="386-386"];
m7_160 [cluster="lambda expression", file="StateMachine.cs", label="_queueProviders.Add(correctProvider.Object, new [] { ''default'' })", span="170-170"];
m7_405 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="457-462"];
m7_50 [cluster="Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", file="StateMachine.cs", label="Entry Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23"];
m7_7 [cluster="Unk.nameof", file="StateMachine.cs", label="Entry Unk.nameof", span=""];
m7_280 [cluster="System.DateTime.AddHours(double)", file="StateMachine.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m7_32 [cluster="lambda expression", file="StateMachine.cs", label="GetNumberOfJobsByStateName(connection, FailedState.StateName)", span="70-70"];
m7_34 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="73-73"];
m7_33 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="69-70"];
m7_35 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="StateMachine.cs", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ProcessingState.StateName));", span="75-76"];
m7_169 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="172-172"];
m7_185 [cluster="lambda expression", file="StateMachine.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="192-192"];
m7_500 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="StateMachine.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="597-597"];
m7_501 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="StateMachine.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="599-605"];
m7_502 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="597-597"];
m7_146 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="142-142"];
m7_344 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", span="439-439"];
m7_346 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="451-451"];
m7_52 [cluster="System.DateTime.AddDays(double)", file="StateMachine.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m7_224 [cluster="lambda expression", file="StateMachine.cs", label="x.Value", span="278-278"];
m7_225 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="278-278"];
m7_226 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="282-290"];
m7_356 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="459-467"];
m7_357 [cluster="lambda expression", file="StateMachine.cs", label="new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    InEnqueuedState = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueuedAt = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase)\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                }", span="459-467"];
m7_358 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="459-467"];
m7_124 [cluster="lambda expression", color=green, community=0, file="StateMachine.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", prediction=10, span="137-137"];
m7_125 [cluster="lambda expression", color=green, community=0, file="StateMachine.cs", label="var state = new Mock<IState>()", prediction=11, span="139-139"];
m7_126 [cluster="lambda expression", file="StateMachine.cs", label="state.Setup(x => x.Name).Returns(''State'')", span="140-140"];
m7_127 [cluster="lambda expression", color=green, community=0, file="StateMachine.cs", label="state.Setup(x => x.Reason).Returns(''Reason'')", prediction=11, span="141-141"];
m7_131 [cluster="lambda expression", color=green, community=0, file="StateMachine.cs", label="Assert.Null(job.StateName)", prediction=11, span="148-148"];
m7_132 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Null(job.StateId)", span="149-149"];
m7_128 [cluster="lambda expression", file="StateMachine.cs", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="142-143"];
m7_129 [cluster="lambda expression", file="StateMachine.cs", label="Commit(sql, x => x.AddJobState(jobId, state.Object))", span="145-145"];
m7_130 [cluster="lambda expression", file="StateMachine.cs", label="var job = GetTestJob(sql, jobId)", span="147-147"];
m7_133 [cluster="lambda expression", file="StateMachine.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="151-151"];
m7_441 [cluster="Unk.ToArray", file="StateMachine.cs", label="Entry Unk.ToArray", span=""];
m7_137 [cluster="lambda expression", file="StateMachine.cs", label="Assert.NotNull(jobState.CreatedAt)", span="155-155"];
m7_299 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(1, recordCount)", span="334-334"];
m7_319 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="397-397"];
m7_320 [cluster="Unk.Query", file="StateMachine.cs", label="Entry Unk.Query", span=""];
m7_389 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="440-444"];
m7_5 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", span="37-37"];
m7_371 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="424-432"];
m7_0 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="StateMachine.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="16-16"];
m7_1 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="StateMachine.cs", label="var defaultProvider = new Mock<IPersistentJobQueueProvider>()", span="18-18"];
m7_2 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="StateMachine.cs", label="defaultProvider.Setup(x => x.GetJobQueue(It.IsNotNull<IDbConnection>()))\r\n                .Returns(new Mock<IPersistentJobQueue>().Object)", span="19-20"];
m7_3 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="StateMachine.cs", label="_queueProviders = new PersistentJobQueueProviderCollection(defaultProvider.Object)", span="22-22"];
m7_4 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="16-16"];
m7_555 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="StateMachine.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="50-50"];
m7_114 [cluster="Unk.SerializeData", file="StateMachine.cs", label="Entry Unk.SerializeData", span=""];
m7_115 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="108-108"];
m7_116 [cluster="lambda expression", file="StateMachine.cs", label="x.SetJobState(jobId, state.Object)", span="108-108"];
m7_281 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="StateMachine.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="305-305"];
m7_229 [cluster="lambda expression", file="StateMachine.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="244-244"];
m7_173 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="240-240"];
m7_12 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="47-48"];
m7_13 [cluster="Unk.>", file="StateMachine.cs", label="Entry Unk.>", span=""];
m7_14 [cluster="Unk.GetJobQueue", file="StateMachine.cs", label="Entry Unk.GetJobQueue", span=""];
m7_37 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="75-76"];
m7_38 [cluster="lambda expression", file="StateMachine.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="53-53"];
m7_39 [cluster="lambda expression", file="StateMachine.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="54-54"];
m7_44 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Null(anotherJob.ExpireAt)", span="62-62"];
m7_43 [cluster="lambda expression", file="StateMachine.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="61-61"];
m7_45 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="51-63"];
m7_47 [cluster="Unk.Single", file="StateMachine.cs", label="Entry Unk.Single", span=""];
m7_58 [cluster="System.TimeSpan.FromDays(double)", file="StateMachine.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m7_57 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="56-56"];
m7_59 [cluster="Unk.ExpireJob", file="StateMachine.cs", label="Entry Unk.ExpireJob", span=""];
m7_67 [cluster="lambda expression", file="StateMachine.cs", label="Commit(sql, x => x.PersistJob(jobId))", span="79-79"];
m7_68 [cluster="lambda expression", file="StateMachine.cs", label="var job = GetTestJob(sql, jobId)", span="81-81"];
m7_69 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Null(job.ExpireAt)", span="82-82"];
m7_74 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="79-79"];
m7_75 [cluster="lambda expression", file="StateMachine.cs", label="x.PersistJob(jobId)", span="79-79"];
m7_76 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="79-79"];
m7_81 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="90-90"];
m7_83 [cluster="lambda expression", file="StateMachine.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="99-99"];
m7_84 [cluster="lambda expression", file="StateMachine.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="100-100"];
m7_87 [cluster="lambda expression", file="StateMachine.cs", label="state.Setup(x => x.Reason).Returns(''Reason'')", span="104-104"];
m7_88 [cluster="lambda expression", file="StateMachine.cs", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="105-106"];
m7_96 [cluster="lambda expression", file="StateMachine.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="118-118"];
m7_98 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(''State'', jobState.Name)", span="120-120"];
m7_99 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(''Reason'', jobState.Reason)", span="121-121"];
m7_101 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="123-123"];
m7_106 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="170-184"];
m7_108 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="104-104"];
m7_109 [cluster="lambda expression", file="StateMachine.cs", label="x.Reason", span="104-104"];
m7_110 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="104-104"];
m7_111 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="105-105"];
m7_118 [cluster="Unk.SetJobState", file="StateMachine.cs", label="Entry Unk.SetJobState", span=""];
m7_117 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="108-108"];
m7_143 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="205-205"];
m7_147 [cluster="lambda expression", file="StateMachine.cs", label="x.SerializeData()", span="142-142"];
m7_151 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="145-145"];
m7_158 [cluster="lambda expression", file="StateMachine.cs", label="var correctProvider = new Mock<IPersistentJobQueueProvider>()", span="166-166"];
m7_157 [cluster="lambda expression", file="StateMachine.cs", label="var correctJobQueue = new Mock<IPersistentJobQueue>()", span="165-165"];
m7_144 [cluster="lambda expression", color=green, community=0, file="StateMachine.cs", label="x.Reason", prediction=14, span="141-141"];
m7_145 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="205-205"];
m7_148 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="142-142"];
m7_149 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="145-145"];
m7_156 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="163-175"];
m7_159 [cluster="lambda expression", file="StateMachine.cs", label="correctProvider.Setup(x => x.GetJobQueue(It.IsNotNull<IDbConnection>()))\r\n                    .Returns(correctJobQueue.Object)", span="167-168"];
m7_161 [cluster="lambda expression", file="StateMachine.cs", label="Commit(sql, x => x.AddToQueue(''default'', ''1''))", span="172-172"];
m7_162 [cluster="lambda expression", file="StateMachine.cs", label="correctJobQueue.Verify(x => x.Enqueue(''default'', ''1''))", span="174-174"];
m7_163 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="163-175"];
m7_171 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="172-172"];
m7_170 [cluster="lambda expression", file="StateMachine.cs", label="x.AddToQueue(''default'', ''1'')", span="172-172"];
m7_172 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="StateMachine.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="119-119"];
m7_174 [cluster="lambda expression", file="StateMachine.cs", label="x.Enqueue(''default'', ''1'')", span="174-174"];
m7_175 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="174-174"];
m7_183 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="188-197"];
m7_182 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="186-186"];
m7_184 [cluster="lambda expression", file="StateMachine.cs", label="Commit(sql, x => x.IncrementCounter(''my-key''))", span="190-190"];
m7_186 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(''my-key'', record.Key)", span="194-194"];
m7_187 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(1, record.Value)", span="195-195"];
m7_188 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="196-196"];
m7_192 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="190-190"];
m7_193 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="StateMachine.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="127-127"];
m7_194 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="StateMachine.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="201-201"];
m7_199 [cluster="lambda expression", file="StateMachine.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="207-207"];
m7_200 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(''my-key'', record.Key)", span="209-209"];
m7_201 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(1, record.Value)", span="210-210"];
m7_207 [cluster="System.DateTime.AddHours(double)", file="StateMachine.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m7_205 [cluster="lambda expression", file="StateMachine.cs", label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="216-216"];
m7_206 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="203-217"];
m7_208 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="205-205"];
m7_211 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="StateMachine.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="134-134"];
m7_209 [cluster="lambda expression", file="StateMachine.cs", label="x.IncrementCounter(''my-key'', TimeSpan.FromDays(1))", span="205-205"];
m7_210 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="205-205"];
m7_220 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="225-229"];
m7_223 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="225-229"];
m7_221 [cluster="lambda expression", file="StateMachine.cs", label="x.IncrementCounter(''my-key'')", span="227-227"];
m7_222 [cluster="lambda expression", file="StateMachine.cs", label="x.IncrementCounter(''my-key'')", span="228-228"];
m7_227 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="240-249"];
m7_228 [cluster="lambda expression", file="StateMachine.cs", label="Commit(sql, x => x.DecrementCounter(''my-key''))", span="242-242"];
m7_234 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="242-242"];
m7_235 [cluster="lambda expression", file="StateMachine.cs", label="x.DecrementCounter(''my-key'')", span="242-242"];
m7_236 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="242-242"];
m7_240 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="253-253"];
m7_241 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="255-269"];
m7_242 [cluster="lambda expression", file="StateMachine.cs", label="Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="257-257"];
m7_254 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="StateMachine.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="148-148"];
m7_252 [cluster="lambda expression", file="StateMachine.cs", label="x.DecrementCounter(''my-key'', TimeSpan.FromDays(1))", span="257-257"];
m7_266 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="277-281"];
m7_253 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="257-257"];
m7_258 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="275-286"];
m7_259 [cluster="lambda expression", file="StateMachine.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                })", span="277-281"];
m7_260 [cluster="lambda expression", file="StateMachine.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="283-283"];
m7_261 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(2, recordCount)", span="285-285"];
m7_262 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="275-286"];
m7_263 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="277-281"];
m7_264 [cluster="lambda expression", file="StateMachine.cs", label="x.DecrementCounter(''my-key'')", span="279-279"];
m7_283 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="305-305"];
m7_282 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="StateMachine.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="307-318"];
m7_286 [cluster="lambda expression", file="StateMachine.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="315-315"];
m7_284 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="307-318"];
m7_287 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(2, recordCount)", span="317-317"];
m7_288 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="307-318"];
m7_301 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="326-330"];
m7_300 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="324-335"];
m7_303 [cluster="lambda expression", file="StateMachine.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="329-329"];
m7_302 [cluster="lambda expression", file="StateMachine.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="328-328"];
m7_304 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="326-330"];
m7_325 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(3.2, record.Score, 3)", span="366-366"];
m7_328 [cluster="lambda expression", file="StateMachine.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="360-360"];
m7_326 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="356-367"];
m7_327 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="358-362"];
m7_329 [cluster="lambda expression", file="StateMachine.cs", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="361-361"];
m7_330 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="358-362"];
m7_349 [cluster="lambda expression", file="StateMachine.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="398-398"];
m7_353 [cluster="lambda expression", file="StateMachine.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="394-394"];
m7_352 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="392-396"];
m7_347 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="390-401"];
m7_348 [cluster="lambda expression", file="StateMachine.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                })", span="392-396"];
m7_350 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(1, recordCount)", span="400-400"];
m7_351 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="390-401"];
m7_354 [cluster="lambda expression", file="StateMachine.cs", label="x.RemoveFromSet(''my-key'', ''different-value'')", span="395-395"];
m7_123 [cluster="Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", file="StateMachine.cs", label="Entry Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7"];
m7_150 [cluster="Unk.GetQueues", file="StateMachine.cs", label="Entry Unk.GetQueues", span=""];
m7_134 [cluster="Unk.Select", file="StateMachine.cs", label="Entry Unk.Select", span=""];
m7_21 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="426-426"];
m7_40 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="79-79"];
m7_41 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="StateMachine.cs", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    InProcessingState = ProcessingState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeNullableDateTime(stateData[''StartedAt'']),\r\n                }));", span="81-91"];
m7_70 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", span="382-382"];
m7_89 [cluster="Unk.ToList", file="StateMachine.cs", label="Entry Unk.ToList", span=""];
m7_93 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="149-149"];
m7_216 [cluster="Unk.SingleOrDefault", file="StateMachine.cs", label="Entry Unk.SingleOrDefault", span=""];
m7_271 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="StateMachine.cs", label="var dates = new List<DateTime>()", span="370-370"];
m7_285 [cluster="System.DateTime.ToString(string)", file="StateMachine.cs", label="Entry System.DateTime.ToString(string)", span="0-0"];
m7_297 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs", label="return GetTimelineStats(connection, keyMaps);", span="394-394"];
m7_309 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs", label="keyMaps.Keys", span="411-411"];
m7_323 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="StateMachine.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m7_335 [cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="StateMachine.cs", label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53"];
m7_360 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="StateMachine.cs", label="var sqlQuery = _jobListLimit.HasValue\r\n                ? $@''select count(j.Id) from (select top (@limit) Id from [{_storage.SchemaName}].Job with (nolock) where StateName = @state) as j''\r\n                : $@''select count(Id) from [{_storage.SchemaName}].Job with (nolock) where StateName = @state''", span="472-474"];
m7_397 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="StateMachine.cs", label="var result = new List<KeyValuePair<string, FetchedJobDto>>(jobs.Count)", span="571-571"];
m7_411 [cluster="lambda expression", file="StateMachine.cs", label=int, span=""];
m7_423 [cluster="lambda expression", file="StateMachine.cs", label=string, span=""];
m7_435 [cluster="lambda expression", file="StateMachine.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                })", span="509-516"];
m7_454 [cluster="lambda expression", file="StateMachine.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="531-537"];
m7_468 [cluster="lambda expression", file="StateMachine.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="550-554"];
m7_480 [cluster="lambda expression", file="StateMachine.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                })", span="567-571"];
m7_492 [cluster="lambda expression", file="StateMachine.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                })", span="584-588"];
m7_504 [cluster="lambda expression", file="StateMachine.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())))", span="601-602"];
m7_508 [cluster="lambda expression", file="StateMachine.cs", label="Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()))", span="602-602"];
m7_518 [cluster="lambda expression", file="StateMachine.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)))", span="613-614"];
m7_522 [cluster="lambda expression", file="StateMachine.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', null))", span="614-614"];
m7_531 [cluster="lambda expression", file="StateMachine.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }))", span="625-629"];
m7_139 [cluster="Unk.GetEnqueuedJobIds", file="StateMachine.cs", label="Entry Unk.GetEnqueuedJobIds", span=""];
m7_65 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="StateMachine.cs", label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''succeeded''));", span="111-112"];
m7_66 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="109-109"];
m7_272 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="StateMachine.cs", label="var i = 0", span="371-371"];
m7_310 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs", label="!valuesMap.ContainsKey(key)", span="413-413"];
m7_324 [cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", file="StateMachine.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0"];
m7_373 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs", label="string jobsSql = \r\n$@'';with cte as \r\n(\r\n  select j.Id, row_number() over (order by j.Id desc) as row_num\r\n  from [{_storage.SchemaName}].Job j with (nolock, forceseek)\r\n  where j.StateName = @stateName\r\n)\r\nselect j.*, s.Reason as StateReason, s.Data as StateData\r\nfrom [{_storage.SchemaName}].Job j with (nolock)\r\ninner join cte on cte.Id = j.Id \r\nleft join [{_storage.SchemaName}].State s with (nolock) on j.StateId = s.Id\r\nwhere cte.row_num between @start and @end\r\norder by j.Id desc''", span="506-518"];
m7_436 [cluster="lambda expression", file="StateMachine.cs", label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="518-518"];
m7_532 [cluster="lambda expression", file="StateMachine.cs", label="var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="631-634"];
m7_217 [cluster="Unk.ToDictionary", file="StateMachine.cs", label="Entry Unk.ToDictionary", span=""];
m7_298 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", span="382-382"];
m7_336 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", file="StateMachine.cs", label="return _storage.UseConnection(action);", span="436-436"];
m7_361 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="StateMachine.cs", label="var count = connection.ExecuteScalar<int>(\r\n                 sqlQuery,\r\n                 new { state = stateName, limit = _jobListLimit },\r\n                 commandTimeout: _storage.CommandTimeout)", span="476-479"];
m7_398 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="StateMachine.cs", label=jobs, span="574-574"];
m7_412 [cluster="lambda expression", file="StateMachine.cs", label=int, span=""];
m7_424 [cluster="lambda expression", file="StateMachine.cs", label=jobs, span=""];
m7_455 [cluster="lambda expression", file="StateMachine.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="539-539"];
m7_469 [cluster="lambda expression", file="StateMachine.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="556-556"];
m7_481 [cluster="lambda expression", file="StateMachine.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="573-573"];
m7_493 [cluster="lambda expression", file="StateMachine.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="590-590"];
m7_135 [cluster="Unk.SelectMany", file="StateMachine.cs", label="Entry Unk.SelectMany", span=""];
m7_140 [cluster="Unk.GetEnqueuedAndFetchedCount", file="StateMachine.cs", label="Entry Unk.GetEnqueuedAndFetchedCount", span=""];
m7_95 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="149-149"];
m7_55 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="StateMachine.cs", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    InScheduledState = ScheduledState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueueAt = JobHelper.DeserializeNullableDateTime(stateData[''EnqueueAt'']) ?? DateTime.MinValue,\r\n                    ScheduledAt = JobHelper.DeserializeNullableDateTime(stateData[''ScheduledAt''])\r\n                }));", span="96-106"];
m7_42 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="79-79"];
m7_64 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="109-109"];
m7_71 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="115-115"];
m7_92 [cluster="System.Collections.Generic.List<T>.Add(T)", file="StateMachine.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m7_190 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="StateMachine.cs", label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''succeeded''));", span="254-255"];
m7_215 [cluster="Unk.QueryMultiple", file="StateMachine.cs", label="Entry Unk.QueryMultiple", span=""];
m7_251 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="StateMachine.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m7_270 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="StateMachine.cs", label="var endDate = DateTime.UtcNow", span="369-369"];
m7_277 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="StateMachine.cs", label="var keyMaps = dates.ToDictionary(x => $''stats:{type}:{x.ToString(''yyyy-MM-dd-HH'')}'', x => x)", span="377-377"];
m7_289 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs", label="var endDate = DateTime.UtcNow.Date", span="384-384"];
m7_296 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs", label="var keyMaps = dates.ToDictionary(x => $''stats:{type}:{x.ToString(''yyyy-MM-dd'')}'', x => x)", span="392-392"];
m7_308 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs", label="var valuesMap = connection.Query(\r\n                sqlQuery,\r\n                new { keys = keyMaps.Keys },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="405-409"];
m7_315 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs", label="var value = valuesMap[keyMaps.ElementAt(i).Key]", span="419-419"];
m7_322 [cluster="Unk.Add", file="StateMachine.cs", label="Entry Unk.Add", span=""];
m7_334 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="426-426"];
m7_339 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", span="439-439"];
m7_359 [cluster="Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", file="StateMachine.cs", label="Entry Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23"];
m7_364 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="484-484"];
m7_396 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="StateMachine.cs", label="var jobs = connection.Query<SqlJob>(\r\n                fetchedJobsSql,\r\n                new { jobIds = jobIds },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToList()", span="565-569"];
m7_401 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", span="557-557"];
m7_410 [cluster="lambda expression", file="StateMachine.cs", label=int, span=""];
m7_415 [cluster="lambda expression", file="StateMachine.cs", label=int, span=""];
m7_422 [cluster="lambda expression", file="StateMachine.cs", label=string, span=""];
m7_427 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="492-496"];
m7_434 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="507-523"];
m7_442 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="509-516"];
m7_453 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="529-542"];
m7_458 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="531-537"];
m7_467 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="548-559"];
m7_472 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="550-554"];
m7_479 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="565-576"];
m7_484 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="567-571"];
m7_491 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="582-593"];
m7_496 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="584-588"];
m7_503 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="599-605"];
m7_505 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(''key'', exception.ParamName)", span="604-604"];
m7_507 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="602-602"];
m7_509 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="602-602"];
m7_510 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="602-602"];
m7_517 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="611-617"];
m7_519 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="616-616"];
m7_521 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="614-614"];
m7_523 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="614-614"];
m7_524 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="614-614"];
m7_530 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="623-638"];
m7_537 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="625-629"];
m7_138 [cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="StateMachine.cs", label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span=""];
m7_136 [cluster="Unk.OrderBy", file="StateMachine.cs", label="Entry Unk.OrderBy", span=""];
m7_56 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="94-94"];
m7_202 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="264-264"];
m7_203 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="StateMachine.cs", label="return UseConnection(connection =>\r\n            {\r\n                string sql = $@''\r\nselect * from [{_storage.SchemaName}].Job with (nolock) where Id = @id\r\nselect * from [{_storage.SchemaName}].JobParameter with (nolock) where JobId = @id\r\nselect * from [{_storage.SchemaName}].State with (nolock) where JobId = @id order by Id desc'';\r\n\r\n                using (var multi = connection.QueryMultiple(sql, new { id = jobId }, commandTimeout: _storage.CommandTimeout))\r\n                {\r\n                    var job = multi.Read<SqlJob>().SingleOrDefault();\r\n                    if (job == null) return null;\r\n\r\n                    var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value);\r\n                    var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new SafeDictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList();\r\n\r\n                    return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };\r\n                }\r\n            });", span="266-302"];
m7_231 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="305-305"];
m7_232 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="StateMachine.cs", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, SucceededState.StateName));", span="307-308"];
m7_273 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="StateMachine.cs", label="i < 24", span="371-371"];
m7_274 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="StateMachine.cs", label="dates.Add(endDate)", span="373-373"];
m7_275 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="StateMachine.cs", label="endDate = endDate.AddHours(-1)", span="374-374"];
m7_311 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs", label="valuesMap.Add(key, 0)", span="413-413"];
m7_312 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs", label="var result = new Dictionary<DateTime, long>()", span="416-416"];
m7_313 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs", label="var i = 0", span="417-417"];
m7_374 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs", label="var jobs = connection.Query<SqlJob>(\r\n                        jobsSql,\r\n                        new { stateName = stateName, start = @from + 1, end = @from + count },\r\n                        commandTimeout: _storage.CommandTimeout)\r\n                        .ToList()", span="520-524"];
m7_375 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs", label="return DeserializeJobs(jobs, selector);", span="526-526"];
m7_437 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(2, records.Length)", span="520-520"];
m7_438 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(''1'', records[0].Value)", span="521-521"];
m7_439 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(''2'', records[1].Value)", span="522-522"];
m7_533 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(''Value1'', result[''Key1''])", span="636-636"];
m7_540 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="634-634"];
m7_543 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="634-634"];
m7_534 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(''Value2'', result[''Key2''])", span="637-637"];
m7_218 [cluster="Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", file="StateMachine.cs", label="Entry Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22"];
m7_337 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", span="434-434"];
m7_362 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="StateMachine.cs", label="return count;", span="481-481"];
m7_399 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="StateMachine.cs", label="result.Add(new KeyValuePair<string, FetchedJobDto>(\r\n                    job.Id.ToString(),\r\n                    new FetchedJobDto\r\n                    {\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        State = job.StateName,\r\n                    }))", span="576-582"];
m7_413 [cluster="lambda expression", file="StateMachine.cs", label=int, span=""];
m7_425 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(1, recordCount)", span="500-500"];
m7_456 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(2, recordCount)", span="541-541"];
m7_470 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(0, recordCount)", span="558-558"];
m7_482 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(0, recordCount)", span="575-575"];
m7_494 [cluster="lambda expression", file="StateMachine.cs", label="Assert.Equal(1, recordCount)", span="592-592"];
m7_141 [cluster="Unk.UseConnection", file="StateMachine.cs", label="Entry Unk.UseConnection", span=""];
m7_511 [cluster="lambda expression", file="StateMachine.cs", label="x.SetRangeInHash(null, new Dictionary<string, string>())", span="602-602"];
m7_538 [cluster="lambda expression", file="StateMachine.cs", label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="625-629"];
m7_105 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="168-168"];
m7_166 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="StateMachine.cs", label="var enqueuedJobIds = queueApi.GetEnqueuedJobIds(queue, from, perPage)", span="237-237"];
m7_11 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", span="434-434"];
m7_167 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="StateMachine.cs", label="return UseConnection(connection => EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray()));", span="240-240"];
m7_72 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="StateMachine.cs", label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''failed''));", span="117-118"];
m7_189 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="252-252"];
m7_191 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="252-252"];
m7_219 [cluster="Unk.DeserializeJob", file="StateMachine.cs", label="Entry Unk.DeserializeJob", span=""];
m7_233 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="305-305"];
m7_265 [cluster="Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", file="StateMachine.cs", label="Entry Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18"];
m7_276 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="StateMachine.cs", label="i++", span="371-371"];
m7_279 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", span="367-367"];
m7_278 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="StateMachine.cs", label="return GetTimelineStats(connection, keyMaps);", span="379-379"];
m7_292 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs", label="i < 7", span="386-386"];
m7_290 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs", label="var dates = new List<DateTime>()", span="385-385"];
m7_291 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs", label="var i = 0", span="386-386"];
m7_314 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs", label="i < keyMaps.Count", span="417-417"];
m7_317 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs", label="i++", span="417-417"];
m7_316 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs", label="result.Add(keyMaps.ElementAt(i).Value, value)", span="420-420"];
m7_342 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="StateMachine.cs", label="var sortedSqlJobs = jobIds\r\n                .Select(jobId => jobs.ContainsKey(jobId) ? jobs[jobId] : new SqlJob { Id = jobId })\r\n                .ToList()", span="453-455"];
m7_340 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="StateMachine.cs", label="string enqueuedJobsSql = \r\n$@''select j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom [{_storage.SchemaName}].Job j with (nolock)\r\nleft join [{_storage.SchemaName}].State s with (nolock) on s.Id = j.StateId\r\nwhere j.Id in @jobIds''", span="441-445"];
m7_341 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="StateMachine.cs", label="var jobs = connection.Query<SqlJob>(\r\n                enqueuedJobsSql,\r\n                new { jobIds = jobIds },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToDictionary(x => x.Id, x => x)", span="447-451"];
m7_363 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", span="470-470"];
m7_367 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs", label="return data.Deserialize();", span="491-491"];
m7_365 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs", label="var data = JobHelper.FromJson<InvocationData>(invocationData)", span="486-486"];
m7_366 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs", label="data.Arguments = arguments", span="487-487"];
m7_376 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="499-499"];
m7_388 [cluster="System.Collections.Generic.List<T>.List(int)", file="StateMachine.cs", label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0"];
m7_392 [cluster="long.ToString()", file="StateMachine.cs", label="Entry long.ToString()", span="0-0"];
m7_400 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="StateMachine.cs", label="return new JobList<FetchedJobDto>(result);", span="585-585"];
m7_402 [cluster="List<KeyValuePair<string, FetchedJobDto>>.cstr", file="StateMachine.cs", label="Entry List<KeyValuePair<string, FetchedJobDto>>.cstr", span=""];
m7_403 [cluster="KeyValuePair<string, FetchedJobDto>.cstr", file="StateMachine.cs", label="Entry KeyValuePair<string, FetchedJobDto>.cstr", span=""];
m7_414 [cluster="lambda expression", file="StateMachine.cs", label=int, span=""];
m7_418 [cluster="lambda expression", file="StateMachine.cs", label=enqueuedJobIds, span=""];
m7_416 [cluster="lambda expression", file="StateMachine.cs", label=int, span=""];
m7_417 [cluster="lambda expression", file="StateMachine.cs", label=enqueuedJobIds, span=""];
m7_426 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="490-501"];
m7_430 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="492-496"];
m7_428 [cluster="lambda expression", file="StateMachine.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="494-494"];
m7_429 [cluster="lambda expression", file="StateMachine.cs", label="x.RemoveFromList(''different-key'', ''my-value'')", span="495-495"];
m7_440 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="507-523"];
m7_448 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="509-516"];
m7_443 [cluster="lambda expression", file="StateMachine.cs", label="x.InsertToList(''my-key'', ''0'')", span="511-511"];
m7_444 [cluster="lambda expression", file="StateMachine.cs", label="x.InsertToList(''my-key'', ''1'')", span="512-512"];
m7_445 [cluster="lambda expression", file="StateMachine.cs", label="x.InsertToList(''my-key'', ''2'')", span="513-513"];
m7_446 [cluster="lambda expression", file="StateMachine.cs", label="x.InsertToList(''my-key'', ''3'')", span="514-514"];
m7_447 [cluster="lambda expression", file="StateMachine.cs", label="x.TrimList(''my-key'', 1, 2)", span="515-515"];
m7_457 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="529-542"];
m7_463 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="531-537"];
m7_459 [cluster="lambda expression", file="StateMachine.cs", label="x.InsertToList(''my-key'', ''0'')", span="533-533"];
m7_460 [cluster="lambda expression", file="StateMachine.cs", label="x.InsertToList(''my-key'', ''1'')", span="534-534"];
m7_461 [cluster="lambda expression", file="StateMachine.cs", label="x.InsertToList(''my-key'', ''2'')", span="535-535"];
m7_462 [cluster="lambda expression", file="StateMachine.cs", label="x.TrimList(''my-key'', 1, 100)", span="536-536"];
m7_471 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="548-559"];
m7_475 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="550-554"];
m7_473 [cluster="lambda expression", file="StateMachine.cs", label="x.InsertToList(''my-key'', ''0'')", span="552-552"];
m7_474 [cluster="lambda expression", file="StateMachine.cs", label="x.TrimList(''my-key'', 1, 100)", span="553-553"];
m7_483 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="565-576"];
m7_487 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="567-571"];
m7_485 [cluster="lambda expression", file="StateMachine.cs", label="x.InsertToList(''my-key'', ''0'')", span="569-569"];
m7_486 [cluster="lambda expression", file="StateMachine.cs", label="x.TrimList(''my-key'', 1, 0)", span="570-570"];
m7_495 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="582-593"];
m7_499 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="584-588"];
m7_497 [cluster="lambda expression", file="StateMachine.cs", label="x.InsertToList(''my-key'', ''0'')", span="586-586"];
m7_498 [cluster="lambda expression", file="StateMachine.cs", label="x.TrimList(''another-key'', 1, 0)", span="587-587"];
m7_506 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="599-605"];
m7_512 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="602-602"];
m7_520 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="611-617"];
m7_526 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="614-614"];
m7_525 [cluster="lambda expression", file="StateMachine.cs", label="x.SetRangeInHash(''some-hash'', null)", span="614-614"];
m7_535 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="623-638"];
m7_539 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="625-629"];
m7_204 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="264-264"];
m7_249 [cluster="string.Format(string, object)", file="StateMachine.cs", label="Entry string.Format(string, object)", span="0-0"];
m7_542 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="634-634"];
m7_541 [cluster="lambda expression", file="StateMachine.cs", label="(string)x.Field", span="634-634"];
m7_545 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="634-634"];
m7_544 [cluster="lambda expression", file="StateMachine.cs", label="(string)x.Value", span="634-634"];
m7_168 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="234-234"];
m7_8 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="45-45"];
m7_23 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="StateMachine.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35"];
m7_24 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="StateMachine.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", span="35-35"];
m7_25 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="StateMachine.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerWriteOnlyTransaction(ConnectionUtils.CreateConnection(), null))", span="37-38"];
m7_26 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="StateMachine.cs", label="Assert.Equal(''queueProviders'', exception.ParamName)", span="40-40"];
m7_27 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", span="35-35"];
m7_393 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="StateMachine.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="453-453"];
m7_394 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="StateMachine.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="455-467"];
m7_395 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="453-453"];
m7_103 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="168-168"];
m7_51 [cluster="string.Equals(string, System.StringComparison)", file="StateMachine.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m7_36 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="73-73"];
m7_19 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="StateMachine.cs", label="return counters.EnqueuedCount ?? 0;", span="56-56"];
m7_318 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs", label="return result;", span="423-423"];
m7_22 [cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", file="StateMachine.cs", label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="30-30"];
m7_195 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="StateMachine.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime) record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="203-217"];
m7_46 [cluster="Unk.Query", file="StateMachine.cs", label="Entry Unk.Query", span=""];
m7_464 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="StateMachine.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="546-546"];
m7_465 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="StateMachine.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="548-559"];
m7_466 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="546-546"];
m7_476 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="StateMachine.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="563-563"];
m7_477 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="StateMachine.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="565-576"];
m7_478 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="563-563"];
m7_9 [cluster="PersistentJobQueueProviderCollection.cstr", file="StateMachine.cs", label="Entry PersistentJobQueueProviderCollection.cstr", span=""];
m7_10 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="45-45"];
m7_550 [cluster="System.Action<T>.Invoke(T)", file="StateMachine.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m7_164 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="234-234"];
m7_73 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="115-115"];
m7_54 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="StateMachine.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="94-94"];
m7_77 [cluster="Unk.PersistJob", file="StateMachine.cs", label="Entry Unk.PersistJob", span=""];
m7_79 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="StateMachine.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="92-95"];
m7_488 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="StateMachine.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="580-580"];
m7_489 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="StateMachine.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="582-593"];
m7_490 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="580-580"];
m7_165 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="StateMachine.cs", label="var queueApi = GetQueueApi(queue)", span="236-236"];
m7_536 [cluster="Unk.ToDictionary", file="StateMachine.cs", label="Entry Unk.ToDictionary", span=""];
m7_513 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="StateMachine.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="207-207"];
m7_80 [cluster="Unk.>", color=green, community=0, file="StateMachine.cs", label="Entry Unk.>", prediction=15, span=""];
m7_53 [cluster="Unk.True", file="StateMachine.cs", label="Entry Unk.True", span=""];
m7_546 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="StateMachine.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="641-641"];
m7_548 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="StateMachine.cs", label="action(connection)", span="645-645"];
m7_547 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="StateMachine.cs", label="var connection = ConnectionUtils.CreateConnection()", span="643-643"];
m7_549 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="641-641"];
m7_514 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="StateMachine.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="609-609"];
m7_515 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="StateMachine.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="611-617"];
m7_516 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="609-609"];
m7_20 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="StateMachine.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="51-51"];
m7_450 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="StateMachine.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="527-527"];
m7_451 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="StateMachine.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="529-542"];
m7_452 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="StateMachine.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="527-527"];
m7_556 [file="StateMachine.cs", label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", span=""];
m7_564 [file="StateMachine.cs", label=arrangeSql, span=""];
m7_565 [file="StateMachine.cs", label=jobId, span=""];
m7_566 [file="StateMachine.cs", label=state, span=""];
m7_567 [file="StateMachine.cs", label=SqlConnection, span=""];
m7_568 [file="StateMachine.cs", label=SqlConnection, span=""];
m7_561 [file="StateMachine.cs", label=arrangeSql, span=""];
m7_557 [file="StateMachine.cs", label=arrangeSql, span=""];
m7_559 [file="StateMachine.cs", label=arrangeSql, span=""];
m7_562 [file="StateMachine.cs", label=jobId, span=""];
m7_563 [file="StateMachine.cs", label=state, span=""];
m7_558 [file="StateMachine.cs", label=jobId, span=""];
m7_560 [file="StateMachine.cs", label=jobId, span=""];
d18 -> d11  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisAtomicWriteTransaction", style=dashed];
d18 -> d15  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisAtomicWriteTransaction", style=dashed];
m3_123 -> m3_126  [color=darkseagreen4, key=1, label=double, style=dashed];
m3_2 -> m3_5  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.PersistentJobQueueProviderCollection", style=dashed];
m3_223 -> m3_226  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_157 -> m3_160  [color=darkseagreen4, key=1, label="Hangfire.Server.ServerContext", style=dashed];
m3_27 -> m3_32  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m3_27 -> m3_34  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m3_30 -> m3_43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_246 -> m3_249  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_147 -> m3_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_147 -> m3_154  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_102 -> m3_105  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_201 -> m3_204  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_109 -> m3_112  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_47 -> m3_50  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m3_47 -> m3_55  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m3_47 -> m3_58  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m3_54 -> m3_62  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m3_56 -> m3_61  [color=darkseagreen4, key=1, label=parameterArray, style=dashed];
m3_131 -> m3_134  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m3_131 -> m3_138  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m3_137 -> m3_140  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m3_228 -> m3_231  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_177 -> m3_177  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m3_263 -> m3_14  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_263 -> m3_15  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_263 -> m3_19  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_263 -> m3_23  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_263 -> m3_44  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m3_263 -> m3_61  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m5_23 -> m5_28  [color=darkseagreen4, key=1, label=context, style=dashed];
m5_24 -> m5_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_5 -> m5_8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_13 -> m5_15  [color=darkseagreen4, key=1, label=context, style=dashed];
m5_13 -> m5_16  [color=darkseagreen4, key=1, label=context, style=dashed];
m5_32 -> m5_36  [color=darkseagreen4, key=1, label=context, style=dashed];
m5_33 -> m5_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_42 -> m5_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_55 -> m5_45  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.CreatedContextFacts", style=dashed];
m5_55 -> m5_15  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.CreatedContextFacts", style=dashed];
m5_56 -> m5_28  [color=darkseagreen4, key=1, label=context, style=dashed];
m5_57 -> m5_36  [color=darkseagreen4, key=1, label=context, style=dashed];
m6_154 -> m6_156  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_629 -> m6_631  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_121 -> m6_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_394 -> m6_396  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_615 -> m6_617  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_420 -> m6_422  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_477 -> m6_479  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_783 -> m6_785  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_320 -> m6_322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_560 -> m6_562  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_590 -> m6_592  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_408 -> m6_410  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_817 -> m6_819  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_268 -> m6_270  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_515 -> m6_517  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_195 -> m6_197  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_294 -> m6_296  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_832 -> m6_834  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_694 -> m6_696  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_40 -> m6_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_67 -> m6_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_89 -> m6_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_90 -> m6_92  [color=darkseagreen4, key=1, label=job, style=dashed];
m6_93 -> m6_95  [color=darkseagreen4, key=1, label=anotherJob, style=dashed];
m6_129 -> m6_149  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_130 -> m6_132  [color=darkseagreen4, key=1, label=job, style=dashed];
m6_161 -> m6_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_184 -> m6_190  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_198 -> m6_208  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_216 -> m6_220  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_228 -> m6_234  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_242 -> m6_251  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_259 -> m6_263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_271 -> m6_277  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_285 -> m6_289  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_297 -> m6_301  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_309 -> m6_315  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_323 -> m6_327  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_335 -> m6_339  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_348 -> m6_352  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_360 -> m6_364  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_372 -> m6_377  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_385 -> m6_389  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_397 -> m6_401  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_411 -> m6_415  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_423 -> m6_427  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_435 -> m6_442  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_454 -> m6_458  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_468 -> m6_472  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_480 -> m6_484  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_492 -> m6_496  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_504 -> m6_507  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_508 -> m6_510  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_518 -> m6_521  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_522 -> m6_524  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_531 -> m6_537  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_550 -> m6_552  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_553 -> m6_555  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_563 -> m6_568  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_564 -> m6_571  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_578 -> m6_581  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_582 -> m6_584  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_593 -> m6_596  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_597 -> m6_599  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_607 -> m6_611  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_618 -> m6_620  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_621 -> m6_623  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_633 -> m6_638  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_645 -> m6_648  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_649 -> m6_651  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_662 -> m6_668  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_681 -> m6_684  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_685 -> m6_687  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_698 -> m6_704  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_717 -> m6_720  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_721 -> m6_723  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_733 -> m6_739  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_752 -> m6_755  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_756 -> m6_758  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_768 -> m6_773  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_786 -> m6_789  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_790 -> m6_792  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_802 -> m6_807  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_820 -> m6_823  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_824 -> m6_826  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_836 -> m6_841  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_37 -> m6_40  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_38 -> m6_40  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m6_38 -> m6_56  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m6_64 -> m6_67  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_65 -> m6_67  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m6_65 -> m6_75  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m6_82 -> m6_89  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_83 -> m6_89  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m6_83 -> m6_116  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m6_83 -> m6_97  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m6_85 -> m6_89  [color=darkseagreen4, key=1, label=state, style=dashed];
m6_85 -> m6_87  [color=darkseagreen4, key=1, label=state, style=dashed];
m6_85 -> m6_88  [color=darkseagreen4, key=1, label=state, style=dashed];
m6_85 -> m6_116  [color=darkseagreen4, key=1, label=state, style=dashed];
m6_88 -> m6_111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_123 -> m6_129  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_124 -> m6_129  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m6_124 -> m6_150  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m6_124 -> m6_134  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m6_125 -> m6_129  [color=darkseagreen4, key=1, label=state, style=dashed];
m6_125 -> m6_127  [color=darkseagreen4, key=1, label=state, style=dashed];
m6_125 -> m6_128  [color=darkseagreen4, key=1, label=state, style=dashed];
m6_125 -> m6_150  [color=darkseagreen4, key=1, label=state, style=dashed];
m6_128 -> m6_146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_156 -> m6_161  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_158 -> m6_160  [color=darkseagreen4, key=1, label=correctProvider, style=dashed];
m6_159 -> m6_166  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_162 -> m6_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_185 -> m6_187  [color=darkseagreen4, key=1, label=record, style=dashed];
m6_185 -> m6_188  [color=darkseagreen4, key=1, label=record, style=dashed];
m6_199 -> m6_201  [color=darkseagreen4, key=1, label=record, style=dashed];
m6_199 -> m6_202  [color=darkseagreen4, key=1, label=record, style=dashed];
m6_220 -> m6_222  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_229 -> m6_231  [color=darkseagreen4, key=1, label=record, style=dashed];
m6_229 -> m6_232  [color=darkseagreen4, key=1, label=record, style=dashed];
m6_243 -> m6_245  [color=darkseagreen4, key=1, label=record, style=dashed];
m6_243 -> m6_246  [color=darkseagreen4, key=1, label=record, style=dashed];
m6_263 -> m6_265  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_272 -> m6_274  [color=darkseagreen4, key=1, label=record, style=dashed];
m6_272 -> m6_275  [color=darkseagreen4, key=1, label=record, style=dashed];
m6_289 -> m6_291  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_301 -> m6_303  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_310 -> m6_312  [color=darkseagreen4, key=1, label=record, style=dashed];
m6_310 -> m6_313  [color=darkseagreen4, key=1, label=record, style=dashed];
m6_327 -> m6_329  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_339 -> m6_341  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_352 -> m6_354  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_364 -> m6_366  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_373 -> m6_375  [color=darkseagreen4, key=1, label=record, style=dashed];
m6_389 -> m6_391  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_401 -> m6_403  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_401 -> m6_404  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_415 -> m6_417  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_427 -> m6_429  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_436 -> m6_438  [color=darkseagreen4, key=1, label=records, style=dashed];
m6_436 -> m6_439  [color=darkseagreen4, key=1, label=records, style=dashed];
m6_442 -> m6_444  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_442 -> m6_445  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_442 -> m6_446  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_442 -> m6_447  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_458 -> m6_460  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_458 -> m6_461  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_458 -> m6_462  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_472 -> m6_474  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_484 -> m6_486  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_496 -> m6_498  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m6_503 -> m6_508  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_517 -> m6_522  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_532 -> m6_540  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_532 -> m6_543  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_532 -> m6_534  [color=darkseagreen4, key=1, label=result, style=dashed];
m6_549 -> m6_553  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_562 -> m6_564  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_577 -> m6_582  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_592 -> m6_597  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_605 -> m6_607  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_606 -> m6_612  [color=darkseagreen4, key=1, label=items, style=dashed];
m6_606 -> m6_609  [color=darkseagreen4, key=1, label=items, style=dashed];
m6_617 -> m6_621  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_631 -> m6_633  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_644 -> m6_649  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_660 -> m6_662  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_663 -> m6_671  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_663 -> m6_674  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_663 -> m6_665  [color=darkseagreen4, key=1, label=records, style=dashed];
m6_663 -> m6_666  [color=darkseagreen4, key=1, label=records, style=dashed];
m6_680 -> m6_685  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_696 -> m6_698  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_699 -> m6_707  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_699 -> m6_710  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_699 -> m6_701  [color=darkseagreen4, key=1, label=records, style=dashed];
m6_699 -> m6_702  [color=darkseagreen4, key=1, label=records, style=dashed];
m6_716 -> m6_721  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_731 -> m6_733  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_734 -> m6_742  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_734 -> m6_745  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_734 -> m6_736  [color=darkseagreen4, key=1, label=records, style=dashed];
m6_734 -> m6_737  [color=darkseagreen4, key=1, label=records, style=dashed];
m6_751 -> m6_756  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_766 -> m6_768  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_769 -> m6_776  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_769 -> m6_779  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_769 -> m6_771  [color=darkseagreen4, key=1, label=records, style=dashed];
m6_785 -> m6_790  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_800 -> m6_802  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_803 -> m6_810  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_803 -> m6_813  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_803 -> m6_805  [color=darkseagreen4, key=1, label=records, style=dashed];
m6_819 -> m6_824  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_834 -> m6_836  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_837 -> m6_844  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_837 -> m6_847  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_837 -> m6_839  [color=darkseagreen4, key=1, label=records, style=dashed];
m6_96 -> m6_98  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m6_96 -> m6_99  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m6_96 -> m6_101  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m6_96 -> m6_100  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m6_86 -> m6_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_87 -> m6_108  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_133 -> m6_135  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m6_133 -> m6_136  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m6_133 -> m6_138  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m6_133 -> m6_137  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m6_126 -> m6_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_127 -> m6_143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_157 -> m6_159  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
m6_157 -> m6_162  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
m6_203 -> m6_205  [color=darkseagreen4, key=1, label=expireAt, style=dashed];
m6_247 -> m6_249  [color=darkseagreen4, key=1, label=expireAt, style=dashed];
m6_382 -> m6_384  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_369 -> m6_371  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_603 -> m6_605  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_798 -> m6_800  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_357 -> m6_359  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_714 -> m6_716  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_225 -> m6_227  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_489 -> m6_491  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_25 -> m6_28  [color=green, key=1, label="lambda expression", style=dashed];
m6_25 -> m6_8  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m6_25 -> m6_15  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m6_25 -> m6_16  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m6_25 -> m6_23  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m6_332 -> m6_334  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_16 -> m6_20  [color=green, key=1, label="lambda expression", style=dashed];
m6_306 -> m6_308  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_239 -> m6_241  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_501 -> m6_503  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_729 -> m6_731  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_34 -> m6_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_764 -> m6_766  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_49 -> m6_856  [color=darkseagreen4, key=1, label="System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>", style=dashed];
m6_855 -> m6_857  [color=green, key=1, label=transaction, style=dashed];
m6_181 -> m6_183  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_850 -> m6_852  [color=darkseagreen4, key=1, label="System.Action<SqlConnection>", style=dashed];
m6_658 -> m6_660  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_465 -> m6_467  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_213 -> m6_215  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_749 -> m6_751  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_451 -> m6_453  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_432 -> m6_434  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_256 -> m6_258  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_282 -> m6_284  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_80 -> m6_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_62 -> m6_64  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_528 -> m6_530  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_575 -> m6_577  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_345 -> m6_347  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_642 -> m6_644  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_678 -> m6_680  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_547 -> m6_549  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_860 -> m6_16  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_21  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_40  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_67  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_89  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_129  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_160  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_161  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_184  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_198  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_216  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_228  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_242  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_259  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_271  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_285  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_297  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_309  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_323  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_335  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_348  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_360  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_372  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_385  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_397  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_411  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_423  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_435  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_454  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_468  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_480  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_492  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_508  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_522  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_531  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_547  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_550  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_553  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_563  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_564  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_582  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_597  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_607  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_615  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_618  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_621  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_633  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_649  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_662  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_685  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_698  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_721  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_733  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_756  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_768  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_790  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_802  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_824  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_860 -> m6_836  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m6_871 -> m6_508  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_872 -> m6_522  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_873 -> m6_553  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_874 -> m6_582  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_875 -> m6_597  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_877 -> m6_621  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_879 -> m6_649  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_881 -> m6_685  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_883 -> m6_721  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_885 -> m6_756  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_887 -> m6_790  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_889 -> m6_824  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_862 -> m6_56  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m6_864 -> m6_75  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m6_866 -> m6_116  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m6_867 -> m6_116  [color=darkseagreen4, key=1, label=state, style=dashed];
m6_869 -> m6_150  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m6_870 -> m6_150  [color=darkseagreen4, key=1, label=state, style=dashed];
m6_876 -> m6_612  [color=darkseagreen4, key=1, label=items, style=dashed];
m7_90 -> m7_92  [color=darkseagreen4, key=1, label=job, style=dashed];
m7_372 -> m7_377  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_62 -> m7_64  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_61 -> m7_65  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m7_61 -> m7_66  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m7_154 -> m7_156  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_212 -> m7_226  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_213 -> m7_215  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_419 -> m7_183  [color=darkseagreen4, key=1, label=fetchedJobIds, style=dashed];
m7_420 -> m7_422  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_420 -> m7_207  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_421 -> m7_254  [color=darkseagreen4, key=1, label=sql, style=dashed];
m7_29 -> m7_31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_377 -> m7_379  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>", style=dashed];
m7_377 -> m7_384  [color=darkseagreen4, key=1, label="System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>", style=dashed];
m7_378 -> m7_385  [color=darkseagreen4, key=1, label=result, style=dashed];
m7_379 -> m7_381  [color=darkseagreen4, key=1, label=job, style=dashed];
m7_379 -> m7_384  [color=darkseagreen4, key=1, label=job, style=dashed];
m7_379 -> m7_385  [color=darkseagreen4, key=1, label=job, style=dashed];
m7_385 -> m7_389  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_380 -> m7_385  [color=darkseagreen4, key=1, label=dto, style=dashed];
m7_382 -> m7_384  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_238 -> m7_240  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_239 -> m7_241  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_528 -> m7_530  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_369 -> m7_371  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_332 -> m7_334  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_343 -> m7_356  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_306 -> m7_309  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, System.DateTime>", style=dashed];
m7_306 -> m7_314  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, System.DateTime>", style=dashed];
m7_306 -> m7_316  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, System.DateTime>", style=dashed];
m7_432 -> m7_434  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_198 -> m7_208  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_406 -> m7_4  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_9  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_13  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_24  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_29  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_32  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_35  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_44  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_58  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_65  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_72  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_75  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_115  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_118  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_167  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_171  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_177  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_179  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_183  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_190  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_193  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_197  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_200  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_206  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_207  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_232  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_235  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_238  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_241  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_244  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_245  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_254  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_246  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_278  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_297  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_307  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_336  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_375  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_406 -> m7_395  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m7_49 -> m7_552  [color=darkseagreen4, key=1, label="System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>", style=dashed];
m7_551 -> m7_553  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m7_345 -> m7_347  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_243 -> m7_246  [color=darkseagreen4, key=1, label=record, style=dashed];
m7_244 -> m7_254  [color=darkseagreen4, key=1, label=sql, style=dashed];
m7_245 -> m7_252  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_246 -> m7_266  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_247 -> m7_249  [color=darkseagreen4, key=1, label=expireAt, style=dashed];
m7_407 -> m7_44  [color=darkseagreen4, key=1, label=int, style=dashed];
m7_408 -> m7_410  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_408 -> m7_44  [color=darkseagreen4, key=1, label=int, style=dashed];
m7_409 -> m7_58  [color=darkseagreen4, key=1, label=int, style=dashed];
m7_181 -> m7_183  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_178 -> m7_183  [color=darkseagreen4, key=1, label=fetchedJobIds, style=dashed];
m7_179 -> m7_182  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_256 -> m7_258  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_121 -> m7_123  [color=green, key=1, label="lambda expression", style=dashed];
m7_295 -> m7_295  [color=darkseagreen4, key=1, label=i, style=dashed];
m7_34 -> m7_106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_35 -> m7_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_185 -> m7_187  [color=darkseagreen4, key=1, label=record, style=dashed];
m7_185 -> m7_188  [color=darkseagreen4, key=1, label=record, style=dashed];
m7_501 -> m7_503  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_225 -> m7_227  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_357 -> m7_359  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_124 -> m7_129  [color=green, key=1, label=jobId, style=dashed];
m7_124 -> m7_150  [color=green, key=1, label=jobId, style=dashed];
m7_124 -> m7_134  [color=green, key=1, label=jobId, style=dashed];
m7_125 -> m7_143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_125 -> m7_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_125 -> m7_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_125 -> m7_154  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_125 -> m7_127  [color=green, key=1, label=state, style=dashed];
m7_125 -> m7_128  [color=green, key=1, label=state, style=dashed];
m7_125 -> m7_129  [color=green, key=1, label=state, style=dashed];
m7_125 -> m7_150  [color=green, key=1, label=state, style=dashed];
m7_126 -> m7_131  [color=darkseagreen4, key=1, label=result, style=dashed];
m7_126 -> m7_132  [color=darkseagreen4, key=1, label=result, style=dashed];
m7_126 -> m7_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_127 -> m7_129  [color=darkseagreen4, key=1, label=tuple, style=dashed];
m7_127 -> m7_131  [color=darkseagreen4, key=1, label=tuple, style=dashed];
m7_128 -> m7_146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_129 -> m7_131  [color=darkseagreen4, key=1, label=counters, style=dashed];
m7_129 -> m7_149  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_130 -> m7_132  [color=darkseagreen4, key=1, label=job, style=dashed];
m7_133 -> m7_135  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m7_133 -> m7_136  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m7_133 -> m7_137  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m7_133 -> m7_138  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m7_320 -> m7_322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_389 -> m7_391  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m7_0 -> m7_2  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m7_0 -> m7_4  [color=darkseagreen4, key=1, label="int?", style=dashed];
m7_2 -> m7_81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_114 -> m7_118  [color=darkseagreen4, key=1, label=int, style=dashed];
m7_115 -> m7_117  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_229 -> m7_231  [color=darkseagreen4, key=1, label=record, style=dashed];
m7_229 -> m7_232  [color=darkseagreen4, key=1, label=record, style=dashed];
m7_38 -> m7_40  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m7_38 -> m7_56  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m7_44 -> m7_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_58 -> m7_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_67 -> m7_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_83 -> m7_87  [color=darkseagreen4, key=1, label=result, style=dashed];
m7_83 -> m7_89  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m7_83 -> m7_116  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m7_84 -> m7_93  [color=darkseagreen4, key=1, label=anotherJobId, style=dashed];
m7_87 -> m7_108  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_88 -> m7_111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_96 -> m7_98  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m7_96 -> m7_99  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m7_96 -> m7_101  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m7_106 -> m7_40  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m7_118 -> m7_120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_158 -> m7_161  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_157 -> m7_159  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
m7_157 -> m7_162  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
m7_156 -> m7_161  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m7_161 -> m7_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_162 -> m7_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_171 -> m7_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_183 -> m7_186  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_184 -> m7_190  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_199 -> m7_201  [color=darkseagreen4, key=1, label=record, style=dashed];
m7_199 -> m7_202  [color=darkseagreen4, key=1, label=record, style=dashed];
m7_207 -> m7_211  [color=darkseagreen4, key=1, label=multi, style=dashed];
m7_205 -> m7_207  [color=darkseagreen4, key=1, label=DbConnection, style=dashed];
m7_211 -> m7_220  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_211 -> m7_223  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_220 -> m7_222  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m7_228 -> m7_234  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_242 -> m7_251  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_254 -> m7_258  [color=darkseagreen4, key=1, label=multi, style=dashed];
m7_254 -> m7_259  [color=darkseagreen4, key=1, label=multi, style=dashed];
m7_254 -> m7_261  [color=darkseagreen4, key=1, label=multi, style=dashed];
m7_254 -> m7_262  [color=darkseagreen4, key=1, label=multi, style=dashed];
m7_252 -> m7_254  [color=darkseagreen4, key=1, label=DbConnection, style=dashed];
m7_253 -> m7_258  [color=darkseagreen4, key=1, label=stats, style=dashed];
m7_253 -> m7_259  [color=darkseagreen4, key=1, label=stats, style=dashed];
m7_253 -> m7_261  [color=darkseagreen4, key=1, label=stats, style=dashed];
m7_253 -> m7_262  [color=darkseagreen4, key=1, label=stats, style=dashed];
m7_253 -> m7_263  [color=darkseagreen4, key=1, label=stats, style=dashed];
m7_259 -> m7_263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_263 -> m7_265  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m7_282 -> m7_284  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_301 -> m7_303  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m7_327 -> m7_329  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m7_352 -> m7_354  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m7_348 -> m7_352  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_123 -> m7_129  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m7_40 -> m7_44  [color=darkseagreen4, key=1, label=int, style=dashed];
m7_70 -> m7_301  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_70 -> m7_297  [color=darkseagreen4, key=1, label=DbConnection, style=dashed];
m7_89 -> m7_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_93 -> m7_95  [color=darkseagreen4, key=1, label=anotherJob, style=dashed];
m7_216 -> m7_220  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_271 -> m7_274  [color=darkseagreen4, key=1, label=dates, style=dashed];
m7_297 -> m7_301  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_309 -> m7_311  [color=darkseagreen4, key=1, label=key, style=dashed];
m7_323 -> m7_327  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_335 -> m7_339  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_360 -> m7_364  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_397 -> m7_401  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_397 -> m7_400  [color=darkseagreen4, key=1, label=result, style=dashed];
m7_411 -> m7_415  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_423 -> m7_427  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_423 -> m7_301  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_435 -> m7_442  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_454 -> m7_458  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_468 -> m7_472  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_480 -> m7_484  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_492 -> m7_496  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_504 -> m7_507  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_508 -> m7_510  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_518 -> m7_521  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_522 -> m7_524  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_531 -> m7_537  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_65 -> m7_67  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_65 -> m7_75  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m7_66 -> m7_70  [color=darkseagreen4, key=1, label=anotherJobId, style=dashed];
m7_272 -> m7_274  [color=darkseagreen4, key=1, label=record, style=dashed];
m7_272 -> m7_276  [color=darkseagreen4, key=1, label=i, style=dashed];
m7_373 -> m7_375  [color=darkseagreen4, key=1, label=record, style=dashed];
m7_436 -> m7_438  [color=darkseagreen4, key=1, label=records, style=dashed];
m7_436 -> m7_439  [color=darkseagreen4, key=1, label=records, style=dashed];
m7_532 -> m7_540  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_532 -> m7_543  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_532 -> m7_534  [color=darkseagreen4, key=1, label=result, style=dashed];
m7_424 -> m7_353  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m7_55 -> m7_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_64 -> m7_67  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m7_64 -> m7_70  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m7_64 -> m7_66  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m7_190 -> m7_192  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_215 -> m7_217  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m7_270 -> m7_274  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m7_289 -> m7_293  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m7_296 -> m7_298  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m7_296 -> m7_300  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_296 -> m7_303  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_308 -> m7_310  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m7_308 -> m7_325  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_308 -> m7_328  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_308 -> m7_311  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m7_322 -> m7_324  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m7_334 -> m7_336  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m7_396 -> m7_398  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m7_401 -> m7_403  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m7_401 -> m7_404  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m7_410 -> m7_412  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m7_410 -> m7_58  [color=darkseagreen4, key=1, label=int, style=dashed];
m7_415 -> m7_417  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m7_415 -> m7_118  [color=darkseagreen4, key=1, label=int, style=dashed];
m7_422 -> m7_424  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m7_422 -> m7_283  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_427 -> m7_429  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m7_442 -> m7_444  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m7_442 -> m7_445  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m7_442 -> m7_446  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m7_442 -> m7_447  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m7_458 -> m7_460  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m7_458 -> m7_461  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m7_458 -> m7_462  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m7_472 -> m7_474  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m7_484 -> m7_486  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m7_496 -> m7_498  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m7_503 -> m7_508  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m7_517 -> m7_522  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m7_202 -> m7_207  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_203 -> m7_205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_232 -> m7_234  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_312 -> m7_316  [color=darkseagreen4, key=1, label=result, style=dashed];
m7_312 -> m7_318  [color=darkseagreen4, key=1, label=result, style=dashed];
m7_313 -> m7_316  [color=darkseagreen4, key=1, label=i, style=dashed];
m7_313 -> m7_317  [color=darkseagreen4, key=1, label=i, style=dashed];
m7_166 -> m7_171  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
m7_167 -> m7_170  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_72 -> m7_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_276 -> m7_276  [color=darkseagreen4, key=1, label=i, style=dashed];
m7_290 -> m7_293  [color=darkseagreen4, key=1, label=dates, style=dashed];
m7_291 -> m7_295  [color=darkseagreen4, key=1, label=i, style=dashed];
m7_317 -> m7_317  [color=darkseagreen4, key=1, label=i, style=dashed];
m7_342 -> m7_352  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_341 -> m7_346  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_341 -> m7_353  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m7_365 -> m7_367  [color=darkseagreen4, key=1, label=data, style=dashed];
m7_418 -> m7_171  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
m7_416 -> m7_118  [color=darkseagreen4, key=1, label=int, style=dashed];
m7_25 -> m7_99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_195 -> m7_283  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_195 -> m7_278  [color=darkseagreen4, key=1, label=DbConnection, style=dashed];
m7_46 -> m7_375  [color=darkseagreen4, key=1, label="System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>", style=dashed];
m7_465 -> m7_467  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_477 -> m7_479  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_9 -> m7_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_54 -> m7_58  [color=darkseagreen4, key=1, label=int, style=dashed];
m7_489 -> m7_491  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_546 -> m7_548  [color=darkseagreen4, key=1, label="System.Action<SqlConnection>", style=dashed];
m7_515 -> m7_517  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_451 -> m7_453  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_556 -> m7_80  [color=green, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_16  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_21  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_34  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_40  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_62  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_67  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_70  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_89  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_93  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_129  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_154  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_160  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_161  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_184  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_198  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_216  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_225  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_228  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_242  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_259  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_268  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_285  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_297  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_306  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_309  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_320  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_323  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_335  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_348  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_369  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_372  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_385  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_408  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_411  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_420  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_423  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_435  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_454  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_468  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_480  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_492  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_508  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_522  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_556 -> m7_531  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m7_565 -> m7_150  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m7_566 -> m7_150  [color=darkseagreen4, key=1, label=state, style=dashed];
m7_567 -> m7_508  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m7_568 -> m7_522  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m7_559 -> m7_65  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m7_559 -> m7_66  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m7_562 -> m7_116  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m7_563 -> m7_116  [color=darkseagreen4, key=1, label=state, style=dashed];
m7_558 -> m7_56  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m7_560 -> m7_75  [color=darkseagreen4, key=1, label=jobId, style=dashed];
}
