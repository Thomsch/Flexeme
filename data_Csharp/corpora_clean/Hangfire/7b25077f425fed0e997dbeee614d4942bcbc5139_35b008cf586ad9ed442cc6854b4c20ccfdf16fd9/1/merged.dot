digraph  {
n0 [label="Entry HangFire.Filters.IClientExceptionFilter.OnClientException(HangFire.Filters.ClientExceptionContext)", span="4-4", cluster="HangFire.Filters.IClientExceptionFilter.OnClientException(HangFire.Filters.ClientExceptionContext)"];
n1 [label="Exit HangFire.Filters.IClientExceptionFilter.OnClientException(HangFire.Filters.ClientExceptionContext)", span="4-4", cluster="HangFire.Filters.IClientExceptionFilter.OnClientException(HangFire.Filters.ClientExceptionContext)"];
d7 [label="Jobs = storage", span="19-19", cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", color=green, community=0];
d18 [label="HangFire.Redis.RedisAtomicWriteTransaction", span=""];
d2 [label="var storage = new RedisStoredValues(_transaction)", span="13-13", cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)"];
d6 [label="Queues = storage", span="18-18", cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)"];
d8 [label="Exit HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", span="9-9", cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)"];
d1 [label="_transaction = transaction", span="11-11", cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)"];
d3 [label="Values = storage", span="15-15", cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)"];
d4 [label="Sets = storage", span="16-16", cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)"];
d5 [label="Lists = storage", span="17-17", cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)"];
d11 [label="return _transaction.Commit();", span="30-30", cluster="HangFire.Redis.RedisAtomicWriteTransaction.Commit()"];
d15 [label="_transaction.Dispose()", span="35-35", cluster="HangFire.Redis.RedisAtomicWriteTransaction.Dispose()"];
d9 [label="Entry HangFire.Redis.RedisStoredValues.RedisStoredValues(IRedisTransaction)", span="15-15", cluster="HangFire.Redis.RedisStoredValues.RedisStoredValues(IRedisTransaction)"];
d0 [label="Entry HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", span="9-9", cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)"];
d10 [label="Entry HangFire.Redis.RedisAtomicWriteTransaction.Commit()", span="28-28", cluster="HangFire.Redis.RedisAtomicWriteTransaction.Commit()"];
d12 [label="Exit HangFire.Redis.RedisAtomicWriteTransaction.Commit()", span="28-28", cluster="HangFire.Redis.RedisAtomicWriteTransaction.Commit()"];
d13 [label="Entry Unk.Commit", span="", cluster="Unk.Commit"];
d14 [label="Entry HangFire.Redis.RedisAtomicWriteTransaction.Dispose()", span="33-33", cluster="HangFire.Redis.RedisAtomicWriteTransaction.Dispose()"];
d16 [label="Exit HangFire.Redis.RedisAtomicWriteTransaction.Dispose()", span="33-33", cluster="HangFire.Redis.RedisAtomicWriteTransaction.Dispose()"];
d17 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose"];
m0_8 [label="Entry HangFire.Sample.Highlighter.HangFireConfig.Stop()", span="28-28", cluster="HangFire.Sample.Highlighter.HangFireConfig.Stop()", file="DefaultStateChangeProcessFacts.cs"];
m0_9 [label="_server.Stop()", span="30-30", cluster="HangFire.Sample.Highlighter.HangFireConfig.Stop()", file="DefaultStateChangeProcessFacts.cs"];
m0_10 [label="Exit HangFire.Sample.Highlighter.HangFireConfig.Stop()", span="28-28", cluster="HangFire.Sample.Highlighter.HangFireConfig.Stop()", file="DefaultStateChangeProcessFacts.cs"];
m0_7 [label="Entry HangFire.BackgroundJobServer.Start()", span="60-60", cluster="HangFire.BackgroundJobServer.Start()", file="DefaultStateChangeProcessFacts.cs"];
m0_5 [label="Entry SqlServerStorage.cstr", span="", cluster="SqlServerStorage.cstr", file="DefaultStateChangeProcessFacts.cs"];
m0_0 [label="Entry HangFire.Sample.Highlighter.HangFireConfig.Start()", span="19-19", cluster="HangFire.Sample.Highlighter.HangFireConfig.Start()", file="DefaultStateChangeProcessFacts.cs"];
m0_1 [label="JobStorage.Current = new SqlServerStorage(\r\n                ConfigurationManager.ConnectionStrings[''HighlighterDb''].ConnectionString)", span="21-22", cluster="HangFire.Sample.Highlighter.HangFireConfig.Start()", file="DefaultStateChangeProcessFacts.cs"];
m0_2 [label="_server = new AspNetBackgroundJobServer()", span="24-24", cluster="HangFire.Sample.Highlighter.HangFireConfig.Start()", file="DefaultStateChangeProcessFacts.cs"];
m0_3 [label="_server.Start()", span="25-25", cluster="HangFire.Sample.Highlighter.HangFireConfig.Start()", file="DefaultStateChangeProcessFacts.cs"];
m0_4 [label="Exit HangFire.Sample.Highlighter.HangFireConfig.Start()", span="19-19", cluster="HangFire.Sample.Highlighter.HangFireConfig.Start()", file="DefaultStateChangeProcessFacts.cs"];
m0_6 [label="Entry HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer()", span="31-31", cluster="HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer()", file="DefaultStateChangeProcessFacts.cs"];
m0_11 [label="Entry HangFire.BackgroundJobServer.Stop()", span="71-71", cluster="HangFire.BackgroundJobServer.Stop()", file="DefaultStateChangeProcessFacts.cs"];
m1_2 [label="Entry Hangfire.States.IStateChangeProcess.ApplyState(Hangfire.Storage.IWriteOnlyTransaction, Hangfire.States.ApplyStateContext, bool)", span="23-23", cluster="Hangfire.States.IStateChangeProcess.ApplyState(Hangfire.Storage.IWriteOnlyTransaction, Hangfire.States.ApplyStateContext, bool)", file="IStateChangeProcess.cs"];
m1_3 [label="Exit Hangfire.States.IStateChangeProcess.ApplyState(Hangfire.Storage.IWriteOnlyTransaction, Hangfire.States.ApplyStateContext, bool)", span="23-23", cluster="Hangfire.States.IStateChangeProcess.ApplyState(Hangfire.Storage.IWriteOnlyTransaction, Hangfire.States.ApplyStateContext, bool)", file="IStateChangeProcess.cs"];
m1_0 [label="Entry Hangfire.States.IStateChangeProcess.ElectState(Hangfire.Storage.IStorageConnection, Hangfire.States.ElectStateContext)", span="22-22", cluster="Hangfire.States.IStateChangeProcess.ElectState(Hangfire.Storage.IStorageConnection, Hangfire.States.ElectStateContext)", file="IStateChangeProcess.cs"];
m1_1 [label="Exit Hangfire.States.IStateChangeProcess.ElectState(Hangfire.Storage.IStorageConnection, Hangfire.States.ElectStateContext)", span="22-22", cluster="Hangfire.States.IStateChangeProcess.ElectState(Hangfire.Storage.IStorageConnection, Hangfire.States.ElectStateContext)", file="IStateChangeProcess.cs"];
m2_0 [label="Entry HangFire.Filters.JobPerformingContext.JobPerformingContext(HangFire.Server.WorkerContext, HangFire.Server.ServerJobDescriptor)", span="6-6", cluster="HangFire.Filters.JobPerformingContext.JobPerformingContext(HangFire.Server.WorkerContext, HangFire.Server.ServerJobDescriptor)", file="LibLog.cs"];
m2_1 [label="JobDescriptor = jobDescriptor", span="11-11", cluster="HangFire.Filters.JobPerformingContext.JobPerformingContext(HangFire.Server.WorkerContext, HangFire.Server.ServerJobDescriptor)", file="LibLog.cs"];
m2_2 [label="Exit HangFire.Filters.JobPerformingContext.JobPerformingContext(HangFire.Server.WorkerContext, HangFire.Server.ServerJobDescriptor)", span="6-6", cluster="HangFire.Filters.JobPerformingContext.JobPerformingContext(HangFire.Server.WorkerContext, HangFire.Server.ServerJobDescriptor)", file="LibLog.cs"];
m2_3 [label="HangFire.Filters.JobPerformingContext", span="", file="LibLog.cs"];
m3_123 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="255-255", cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m3_124 [label="key == null", span="257-257", cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m3_126 [label="toScore < fromScore", span="258-258", cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m3_128 [label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="260-263", cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m3_125 [label="throw new ArgumentNullException(''key'');", span="257-257", cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m3_127 [label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", span="258-258", cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m3_129 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="255-255", cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m3_2 [label="Entry Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", span="44-44", cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerConnection.cs"];
m3_3 [label="connection == null", span="50-50", cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerConnection.cs"];
m3_5 [label="queueProviders == null", span="51-51", cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerConnection.cs"];
m3_7 [label="_connection = connection", span="53-53", cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerConnection.cs"];
m3_8 [label="_isolationLevel = isolationLevel", span="54-54", cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerConnection.cs"];
m3_9 [label="_queueProviders = queueProviders", span="55-55", cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerConnection.cs"];
m3_10 [label="OwnsConnection = ownsConnection", span="57-57", cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerConnection.cs"];
m3_4 [label="throw new ArgumentNullException(''connection'');", span="50-50", cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerConnection.cs"];
m3_6 [label="throw new ArgumentNullException(''queueProviders'');", span="51-51", cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerConnection.cs"];
m3_11 [label="Exit Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", span="44-44", cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerConnection.cs"];
m3_12 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerConnection.cs"];
m3_88 [label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="40-40", cluster="Hangfire.Storage.InvocationData.Deserialize()", file="SqlServerConnection.cs"];
m3_219 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="416-416", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs"];
m3_220 [label="key == null", span="418-418", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs"];
m3_223 [label="var result = _connection.Query<DateTime?>(query, new { key = key }).Single()", span="424-424", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs"];
m3_221 [label="throw new ArgumentNullException(''key'');", span="418-418", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs"];
m3_222 [label="string query = @''\r\nselect min([ExpireAt]) from HangFire.Hash\r\nwhere [Key] = @key''", span="420-422", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs"];
m3_224 [label="!result.HasValue", span="425-425", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs"];
m3_226 [label="return result.Value - DateTime.UtcNow;", span="427-427", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs"];
m3_225 [label="return TimeSpan.FromSeconds(-1);", span="425-425", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs"];
m3_227 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="416-416", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs"];
m3_157 [label="Entry Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="301-301", cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs"];
m3_158 [label="serverId == null", span="303-303", cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs"];
m3_160 [label="context == null", span="304-304", cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs"];
m3_162 [label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="306-311", cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs"];
m3_163 [label="_connection.Execute(\r\n                @''merge HangFire.Server with (holdlock) as Target ''\r\n                + @''using (VALUES (@id, @data, @heartbeat)) as Source (Id, Data, Heartbeat) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = Source.Heartbeat ''\r\n                + @''when not matched then insert (Id, Data, LastHeartbeat) values (Source.Id, Source.Data, Source.Heartbeat);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data), heartbeat = DateTime.UtcNow })", span="313-319", cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs"];
m3_159 [label="throw new ArgumentNullException(''serverId'');", span="303-303", cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs"];
m3_161 [label="throw new ArgumentNullException(''context'');", span="304-304", cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs"];
m3_164 [label="Exit Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="301-301", cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs"];
m3_27 [label="Entry Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="84-84", cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_28 [label="queues == null || queues.Length == 0", span="86-86", cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_30 [label="var providers = queues\r\n                .Select(queue => _queueProviders.GetProvider(queue))\r\n                .Distinct()\r\n                .ToArray()", span="88-91", cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_32 [label="throw new InvalidOperationException(String.Format(\r\n                    ''Multiple provider instances registered for queues: {0}. You should choose only one type of persistent queues per server instance.'',\r\n                    String.Join('', '', queues)));", span="95-97", cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_34 [label="return persistentQueue.Dequeue(queues, cancellationToken);", span="101-101", cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_29 [label="throw new ArgumentNullException(''queues'');", span="86-86", cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_31 [label="providers.Length != 1", span="93-93", cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_33 [label="var persistentQueue = providers[0].GetJobQueue(_connection)", span="100-100", cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_35 [label="Exit Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="84-84", cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_46 [label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53", cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="SqlServerConnection.cs"];
m3_150 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="SqlServerConnection.cs"];
m3_13 [label="Entry Hangfire.SqlServer.SqlServerConnection.Dispose()", span="63-63", cluster="Hangfire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs"];
m3_14 [label=OwnsConnection, span="65-65", cluster="Hangfire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs"];
m3_15 [label="_connection.Dispose()", span="67-67", cluster="Hangfire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs"];
m3_16 [label="Exit Hangfire.SqlServer.SqlServerConnection.Dispose()", span="63-63", cluster="Hangfire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs"];
m3_171 [label="Entry Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="331-331", cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs"];
m3_172 [label="serverId == null", span="333-333", cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs"];
m3_174 [label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="335-337", cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs"];
m3_173 [label="throw new ArgumentNullException(''serverId'');", span="333-333", cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs"];
m3_175 [label="Exit Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="331-331", cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs"];
m3_190 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="361-361", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs"];
m3_191 [label="key == null", span="363-363", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs"];
m3_194 [label="return _connection\r\n                .Query<string>(query, new { key = key, startingFrom = startingFrom + 1, endingAt = endingAt + 1 })\r\n                .ToList();", span="372-374", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs"];
m3_192 [label="throw new ArgumentNullException(''key'');", span="363-363", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs"];
m3_193 [label="var query = @''\r\nselect [Value] from (\r\n	select [Value], row_number() over (order by [Id] ASC) as row_num \r\n	from Hangfire.[Set]\r\n	where [Key] = @key \r\n) as s where s.row_num between @startingFrom and @endingAt''", span="365-370", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs"];
m3_195 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="361-361", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs"];
m3_242 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="453-453", cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs"];
m3_243 [label="key == null", span="455-455", cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs"];
m3_246 [label="var result = _connection.Query<DateTime?>(query, new { key = key }).Single()", span="461-461", cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs"];
m3_244 [label="throw new ArgumentNullException(''key'');", span="455-455", cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs"];
m3_245 [label="string query = @''\r\nselect min([ExpireAt]) from HangFire.List\r\nwhere [Key] = @key''", span="457-459", cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs"];
m3_247 [label="!result.HasValue", span="462-462", cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs"];
m3_249 [label="return result.Value - DateTime.UtcNow;", span="464-464", cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs"];
m3_248 [label="return TimeSpan.FromSeconds(-1);", span="462-462", cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs"];
m3_250 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="453-453", cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs"];
m3_101 [label="Entry Hangfire.Storage.StateData.StateData()", span="21-21", cluster="Hangfire.Storage.StateData.StateData()", file="SqlServerConnection.cs"];
m3_213 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="405-405", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs"];
m3_214 [label="key == null", span="407-407", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs"];
m3_217 [label="return _connection.Query<long>(query, new { key = key }).Single();", span="413-413", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs"];
m3_215 [label="throw new ArgumentNullException(''key'');", span="407-407", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs"];
m3_216 [label="string query = @''\r\nselect count([Id]) from HangFire.Hash\r\nwhere [Key] = @key''", span="409-411", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs"];
m3_218 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="405-405", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs"];
m3_165 [label="Entry Hangfire.SqlServer.Entities.ServerData.ServerData()", span="20-20", cluster="Hangfire.SqlServer.Entities.ServerData.ServerData()", file="SqlServerConnection.cs"];
m3_257 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="483-483", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs"];
m3_258 [label="key == null", span="485-485", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs"];
m3_261 [label="return _connection.Query<string>(query, new { key = key }).ToList();", span="492-492", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs"];
m3_259 [label="throw new ArgumentNullException(''key'');", span="485-485", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs"];
m3_260 [label="string query = @''\r\nselect [Value] from Hangfire.List\r\nwhere [Key] = @key\r\norder by [Id] desc''", span="487-490", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs"];
m3_262 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="483-483", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs"];
m3_26 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="SqlServerConnection.cs"];
m3_21 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", span="39-39", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerConnection.cs"];
m3_71 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", span="154-154", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_72 [label="id == null", span="156-156", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_75 [label="var jobData = _connection.Query<SqlJob>(sql, new { id = id })\r\n                .SingleOrDefault()", span="161-162", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_73 [label="throw new ArgumentNullException(''id'');", span="156-156", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_74 [label="string sql = \r\n                @''select InvocationData, StateName, Arguments, CreatedAt from HangFire.Job where Id = @id''", span="158-159", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_76 [label="jobData == null", span="164-164", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_78 [label="var invocationData = JobHelper.FromJson<InvocationData>(jobData.InvocationData)", span="167-167", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_79 [label="invocationData.Arguments = jobData.Arguments", span="168-168", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_85 [label="return new JobData\r\n            {\r\n                Job = job,\r\n                State = jobData.StateName,\r\n                CreatedAt = jobData.CreatedAt,\r\n                LoadException = loadException\r\n            };", span="182-188", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_77 [label="return null;", span="164-164", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_82 [label="job = invocationData.Deserialize()", span="175-175", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_80 [label="Job job = null", span="170-170", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_81 [label="JobLoadException loadException = null", span="171-171", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_83 [label=JobLoadException, span="177-177", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_84 [label="loadException = ex", span="179-179", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_86 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", span="154-154", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_144 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="289-289", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs"];
m3_145 [label="key == null", span="291-291", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs"];
m3_147 [label="var result = _connection.Query<SqlHash>(\r\n                ''select Field, Value from HangFire.Hash with (forceseek) where [Key] = @key'',\r\n                new { key })\r\n                .ToDictionary(x => x.Field, x => x.Value)", span="293-296", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs"];
m3_146 [label="throw new ArgumentNullException(''key'');", span="291-291", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs"];
m3_148 [label="return result.Count != 0 ? result : null;", span="298-298", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs"];
m3_149 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="289-289", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs"];
m3_22 [label="Entry Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", span="76-76", cluster="Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_23 [label="return new SqlServerDistributedLock(\r\n                String.Format(''HangFire:{0}'', resource),\r\n                timeout,\r\n                _connection);", span="78-81", cluster="Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_24 [label="Exit Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", span="76-76", cluster="Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_67 [label="Entry Unk.>", span="", cluster="Unk.>", file="SqlServerConnection.cs"];
m3_183 [label="Entry System.TimeSpan.Negate()", span="0-0", cluster="System.TimeSpan.Negate()", file="SqlServerConnection.cs"];
m3_102 [label="Entry Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="219-219", cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs"];
m3_103 [label="id == null", span="221-221", cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs"];
m3_105 [label="name == null", span="222-222", cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs"];
m3_107 [label="_connection.Execute(\r\n                @''merge HangFire.JobParameter with (holdlock) as Target ''\r\n                + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                + @''when matched then update set Value = Source.Value ''\r\n                + @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                new { jobId = id, name, value })", span="224-230", cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs"];
m3_104 [label="throw new ArgumentNullException(''id'');", span="221-221", cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs"];
m3_106 [label="throw new ArgumentNullException(''name'');", span="222-222", cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs"];
m3_108 [label="Exit Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="219-219", cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs"];
m3_130 [label="Entry System.ArgumentException.ArgumentException(string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string)", file="SqlServerConnection.cs"];
m3_40 [label="Entry string.Join(string, params string[])", span="0-0", cluster="string.Join(string, params string[])", file="SqlServerConnection.cs"];
m3_206 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerConnection.cs"];
m3_64 [label="Entry Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="67-67", cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", file="SqlServerConnection.cs"];
m3_142 [label="Entry TransactionScope.cstr", span="", cluster="TransactionScope.cstr", file="SqlServerConnection.cs"];
m3_197 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="377-377", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs"];
m3_198 [label="key == null", span="379-379", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs"];
m3_201 [label="var result = _connection.Query<DateTime?>(query, new { key = key }).Single()", span="385-385", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs"];
m3_199 [label="throw new ArgumentNullException(''key'');", span="379-379", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs"];
m3_200 [label="string query = @''\r\nselect min([ExpireAt]) from HangFire.[Set]\r\nwhere [Key] = @key''", span="381-383", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs"];
m3_202 [label="!result.HasValue", span="386-386", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs"];
m3_204 [label="return result.Value - DateTime.UtcNow;", span="388-388", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs"];
m3_203 [label="return TimeSpan.FromSeconds(-1);", span="386-386", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs"];
m3_205 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="377-377", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs"];
m3_38 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="SqlServerConnection.cs"];
m3_207 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="391-391", cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs"];
m3_208 [label="key == null", span="393-393", cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs"];
m3_211 [label="return _connection.Query<long?>(query, new { key = key }).Single() ?? 0;", span="402-402", cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs"];
m3_209 [label="throw new ArgumentNullException(''key'');", span="393-393", cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs"];
m3_210 [label="string query = @''\r\nselect sum(s.[Value]) from (select sum([Value]) as [Value] from HangFire.Counter\r\nwhere [Key] = @key\r\nunion all\r\nselect [Value] from HangFire.AggregatedCounter\r\nwhere [Key] = @key) as s''", span="395-400", cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs"];
m3_212 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="391-391", cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs"];
m3_39 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="SqlServerConnection.cs"];
m3_25 [label="Entry SqlServerDistributedLock.cstr", span="", cluster="SqlServerDistributedLock.cstr", file="SqlServerConnection.cs"];
m3_69 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="SqlServerConnection.cs"];
m3_100 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", file="SqlServerConnection.cs"];
m3_66 [label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0", cluster="System.DateTime.Add(System.TimeSpan)", file="SqlServerConnection.cs"];
m3_109 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="233-233", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs"];
m3_110 [label="id == null", span="235-235", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs"];
m3_112 [label="name == null", span="236-236", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs"];
m3_114 [label="return _connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault();", span="238-241", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs"];
m3_111 [label="throw new ArgumentNullException(''id'');", span="235-235", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs"];
m3_113 [label="throw new ArgumentNullException(''name'');", span="236-236", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs"];
m3_115 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="233-233", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs"];
m3_143 [label="Entry Unk.Complete", span="", cluster="Unk.Complete", file="SqlServerConnection.cs"];
m3_166 [label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="322-322", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs"];
m3_167 [label="serverId == null", span="324-324", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs"];
m3_169 [label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="326-328", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs"];
m3_168 [label="throw new ArgumentNullException(''serverId'');", span="324-324", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs"];
m3_170 [label="Exit Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="322-322", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs"];
m3_90 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="191-191", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs"];
m3_91 [label="jobId == null", span="193-193", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs"];
m3_94 [label="var sqlState = _connection.Query<SqlState>(sql, new { jobId = jobId }).SingleOrDefault()", span="201-201", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs"];
m3_92 [label="throw new ArgumentNullException(''jobId'');", span="193-193", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs"];
m3_93 [label="string sql = @''\r\nselect s.Name, s.Reason, s.Data\r\nfrom HangFire.State s\r\ninner join HangFire.Job j on j.StateId = s.Id\r\nwhere j.Id = @jobId''", span="195-199", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs"];
m3_95 [label="sqlState == null", span="202-202", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs"];
m3_97 [label="var data = new Dictionary<string, string>(\r\n                JobHelper.FromJson<Dictionary<string, string>>(sqlState.Data),\r\n                StringComparer.OrdinalIgnoreCase)", span="207-209", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs"];
m3_98 [label="return new StateData\r\n            {\r\n                Name = sqlState.Name,\r\n                Reason = sqlState.Reason,\r\n                Data = data\r\n            };", span="211-216", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs"];
m3_96 [label="return null;", span="204-204", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs"];
m3_99 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="191-191", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs"];
m3_251 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="467-467", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs"];
m3_252 [label="key == null", span="469-469", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs"];
m3_255 [label="return _connection\r\n                .Query<string>(query, new { key = key, startingFrom = startingFrom + 1, endingAt = endingAt + 1 })\r\n                .ToList();", span="478-480", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs"];
m3_253 [label="throw new ArgumentNullException(''key'');", span="469-469", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs"];
m3_254 [label="string query = @''\r\nselect [Value] from (\r\n	select [Value], row_number() over (order by [Id] desc) as row_num \r\n	from Hangfire.List\r\n	where [Key] = @key \r\n) as s where s.row_num between @startingFrom and @endingAt''", span="471-476", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs"];
m3_256 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="467-467", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs"];
m3_181 [label="Entry System.TimeSpan.Duration()", span="0-0", cluster="System.TimeSpan.Duration()", file="SqlServerConnection.cs"];
m3_47 [label="Entry Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="104-104", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_48 [label="job == null", span="110-110", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_50 [label="parameters == null", span="111-111", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_53 [label="var invocationData = InvocationData.Serialize(job)", span="118-118", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_54 [label="var jobId = _connection.Query<int>(\r\n                createJobSql,\r\n                new\r\n                {\r\n                    invocationData = JobHelper.ToJson(invocationData),\r\n                    arguments = invocationData.Arguments,\r\n                    createdAt = createdAt,\r\n                    expireAt = createdAt.Add(expireIn)\r\n                }).Single().ToString()", span="120-128", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_55 [label="parameters.Count > 0", span="130-130", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_56 [label="var parameterArray = new object[parameters.Count]", span="132-132", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_58 [label=parameters, span="134-134", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_49 [label="throw new ArgumentNullException(''job'');", span="110-110", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_51 [label="throw new ArgumentNullException(''parameters'');", span="111-111", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_52 [label="string createJobSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues (@invocationData, @arguments, @createdAt, @expireAt);\r\nSELECT CAST(SCOPE_IDENTITY() as int)''", span="113-116", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_59 [label="parameterArray[parameterIndex++] = new\r\n                    {\r\n                        jobId = jobId,\r\n                        name = parameter.Key,\r\n                        value = parameter.Value\r\n                    }", span="136-141", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_62 [label="return jobId;", span="151-151", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_57 [label="int parameterIndex = 0", span="133-133", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_61 [label="_connection.Execute(insertParameterSql, parameterArray)", span="148-148", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_60 [label="string insertParameterSql = @''\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@jobId, @name, @value)''", span="144-146", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_63 [label="Exit Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="104-104", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_65 [label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32", cluster="Hangfire.Common.JobHelper.ToJson(object)", file="SqlServerConnection.cs"];
m3_42 [label="Entry Unk.Dequeue", span="", cluster="Unk.Dequeue", file="SqlServerConnection.cs"];
m3_37 [label="Entry Unk.Distinct", span="", cluster="Unk.Distinct", file="SqlServerConnection.cs"];
m3_154 [label="Entry lambda expression", span="296-296", cluster="lambda expression", file="SqlServerConnection.cs"];
m3_43 [label="Entry lambda expression", span="89-89", cluster="lambda expression", file="SqlServerConnection.cs"];
m3_44 [label="_queueProviders.GetProvider(queue)", span="89-89", cluster="lambda expression", file="SqlServerConnection.cs"];
m3_45 [label="Exit lambda expression", span="89-89", cluster="lambda expression", file="SqlServerConnection.cs"];
m3_151 [label="Entry lambda expression", span="296-296", cluster="lambda expression", file="SqlServerConnection.cs"];
m3_152 [label="x.Field", span="296-296", cluster="lambda expression", file="SqlServerConnection.cs"];
m3_153 [label="Exit lambda expression", span="296-296", cluster="lambda expression", file="SqlServerConnection.cs"];
m3_155 [label="x.Value", span="296-296", cluster="lambda expression", file="SqlServerConnection.cs"];
m3_156 [label="Exit lambda expression", span="296-296", cluster="lambda expression", file="SqlServerConnection.cs"];
m3_131 [label="Entry Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="266-266", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs"];
m3_132 [label="key == null", span="268-268", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs"];
m3_134 [label="keyValuePairs == null", span="269-269", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs"];
m3_138 [label=keyValuePairs, span="280-280", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs"];
m3_139 [label="_connection.Execute(sql, new { key = key, field = keyValuePair.Key, value = keyValuePair.Value })", span="282-282", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs"];
m3_133 [label="throw new ArgumentNullException(''key'');", span="268-268", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs"];
m3_135 [label="throw new ArgumentNullException(''keyValuePairs'');", span="269-269", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs"];
m3_136 [label="string sql = @''\r\nmerge HangFire.Hash with (holdlock) as Target\r\nusing (VALUES (@key, @field, @value)) as Source ([Key], Field, Value)\r\non Target.[Key] = Source.[Key] and Target.Field = Source.Field\r\nwhen matched then update set Value = Source.Value\r\nwhen not matched then insert ([Key], Field, Value) values (Source.[Key], Source.Field, Source.Value);''", span="271-276", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs"];
m3_137 [label="var transaction = new TransactionScope()", span="278-278", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs"];
m3_140 [label="transaction.Complete()", span="285-285", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs"];
m3_141 [label="Exit Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="266-266", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs"];
m3_89 [label="Entry Hangfire.Storage.JobData.JobData()", span="21-21", cluster="Hangfire.Storage.JobData.JobData()", file="SqlServerConnection.cs"];
m3_18 [label="Entry Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="71-71", cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnection.cs"];
m3_19 [label="return new SqlServerWriteOnlyTransaction(_connection, _isolationLevel, _queueProviders);", span="73-73", cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnection.cs"];
m3_20 [label="Exit Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="71-71", cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnection.cs"];
m3_189 [label="Entry Unk.First", span="", cluster="Unk.First", file="SqlServerConnection.cs"];
m3_36 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="SqlServerConnection.cs"];
m3_228 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="430-430", cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs"];
m3_229 [label="key == null", span="432-432", cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs"];
m3_231 [label="name == null", span="433-433", cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs"];
m3_234 [label="return _connection.Query<string>(query, new { key = key, field = name }).SingleOrDefault();", span="439-439", cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs"];
m3_230 [label="throw new ArgumentNullException(''key'');", span="432-432", cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs"];
m3_232 [label="throw new ArgumentNullException(''name'');", span="433-433", cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs"];
m3_233 [label="string query = @''\r\nselect [Value] from HangFire.Hash\r\nwhere [Key] = @key and [Field] = @field''", span="435-437", cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs"];
m3_235 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="430-430", cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs"];
m3_184 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="352-352", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnection.cs"];
m3_185 [label="key == null", span="354-354", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnection.cs"];
m3_187 [label="return _connection.Query<int>(\r\n                ''select count([Key]) from HangFire.[Set] where [Key] = @key'',\r\n                new { key = key }).First();", span="356-358", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnection.cs"];
m3_186 [label="throw new ArgumentNullException(''key'');", span="354-354", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnection.cs"];
m3_188 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="352-352", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnection.cs"];
m3_68 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="SqlServerConnection.cs"];
m3_182 [label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, string)", file="SqlServerConnection.cs"];
m3_196 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="SqlServerConnection.cs"];
m3_70 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="SqlServerConnection.cs"];
m3_41 [label="Entry Unk.GetJobQueue", span="", cluster="Unk.GetJobQueue", file="SqlServerConnection.cs"];
m3_0 [label="Entry Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", span="36-36", cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerConnection.cs"];
m3_1 [label="Exit Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", span="36-36", cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerConnection.cs"];
m3_122 [label="Entry HashSet<string>.cstr", span="", cluster="HashSet<string>.cstr", file="SqlServerConnection.cs"];
m3_116 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="244-244", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs"];
m3_117 [label="key == null", span="246-246", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs"];
m3_119 [label="var result = _connection.Query<string>(\r\n                @''select Value from HangFire.[Set] where [Key] = @key'',\r\n                new { key })", span="248-250", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs"];
m3_118 [label="throw new ArgumentNullException(''key'');", span="246-246", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs"];
m3_120 [label="return new HashSet<string>(result);", span="252-252", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs"];
m3_121 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="244-244", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs"];
m3_236 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="442-442", cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs"];
m3_237 [label="key == null", span="444-444", cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs"];
m3_240 [label="return _connection.Query<long>(query, new { key = key }).Single();", span="450-450", cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs"];
m3_238 [label="throw new ArgumentNullException(''key'');", span="444-444", cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs"];
m3_239 [label="string query = @''\r\nselect count([Id]) from HangFire.List\r\nwhere [Key] = @key''", span="446-448", cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs"];
m3_241 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="442-442", cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs"];
m3_87 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="SqlServerConnection.cs"];
m3_176 [label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="340-340", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs"];
m3_177 [label="timeOut.Duration() != timeOut", span="342-342", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs"];
m3_178 [label="throw new ArgumentException(''The `timeOut` value must be positive.'', ''timeOut'');", span="344-344", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs"];
m3_179 [label="return _connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) });", span="347-349", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs"];
m3_180 [label="Exit Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="340-340", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs"];
m3_263 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnection.cs"];
m4_8 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerStorageOptions.cs"];
m4_9 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerStorageOptions.cs"];
m4_10 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="SqlServerStorageOptions.cs"];
m4_0 [label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="25-25", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs"];
m4_1 [label="TransactionIsolationLevel = IsolationLevel.Serializable", span="27-27", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=red, community=0, file="SqlServerStorageOptions.cs"];
m4_2 [label="QueuePollInterval = TimeSpan.FromSeconds(15)", span="28-28", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs"];
m4_3 [label="InvisibilityTimeout = TimeSpan.FromMinutes(30)", span="29-29", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs"];
m4_4 [label="JobExpirationCheckInterval = TimeSpan.FromHours(1)", span="30-30", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs"];
m4_5 [label="CountersAggregateInterval = TimeSpan.FromMinutes(5)", span="31-31", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs"];
m4_6 [label="PrepareSchemaIfNecessary = true", span="32-32", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs"];
m4_7 [label="Exit Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="25-25", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs"];
m4_11 [label="Hangfire.SqlServer.SqlServerStorageOptions", span="", file="SqlServerStorageOptions.cs"];
m5_7 [label="Entry Unk.>", span="", cluster="Unk.>", file="SqlServerWriteOnlyTransaction.cs"];
m5_22 [label="Entry Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", span="38-38", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", file="SqlServerWriteOnlyTransaction.cs"];
m5_23 [label="var context = CreateContext()", span="40-40", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", file="SqlServerWriteOnlyTransaction.cs"];
m5_24 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => context.SetJobParameter(null, null))", span="42-43", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", file="SqlServerWriteOnlyTransaction.cs"];
m5_25 [label="Assert.Equal(''name'', exception.ParamName)", span="45-45", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", file="SqlServerWriteOnlyTransaction.cs"];
m5_26 [label="Exit Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", span="38-38", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_WhenParameterNameIsNull()", file="SqlServerWriteOnlyTransaction.cs"];
m5_50 [label="Entry Mock<IState>.cstr", span="", cluster="Mock<IState>.cstr", file="SqlServerWriteOnlyTransaction.cs"];
m5_0 [label="Entry Hangfire.Core.Tests.Client.CreatedContextFacts.CreatedContextFacts()", span="15-15", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreatedContextFacts()", file="SqlServerWriteOnlyTransaction.cs"];
m5_1 [label="_exception = new Exception()", span="17-17", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreatedContextFacts()", file="SqlServerWriteOnlyTransaction.cs"];
m5_2 [label="Exit Hangfire.Core.Tests.Client.CreatedContextFacts.CreatedContextFacts()", span="15-15", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreatedContextFacts()", file="SqlServerWriteOnlyTransaction.cs"];
m5_20 [label="Entry Unk.Same", span="", cluster="Unk.Same", file="SqlServerWriteOnlyTransaction.cs"];
m5_19 [label="Entry Unk.True", span="", cluster="Unk.True", file="SqlServerWriteOnlyTransaction.cs"];
m5_30 [label="Entry Hangfire.Client.CreatedContext.SetJobParameter(string, object)", span="70-70", cluster="Hangfire.Client.CreatedContext.SetJobParameter(string, object)", file="SqlServerWriteOnlyTransaction.cs"];
m5_38 [label="Entry Hangfire.Core.Tests.Client.CreatedContextFacts.TestMethod()", span="59-59", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.TestMethod()", file="SqlServerWriteOnlyTransaction.cs"];
m5_39 [label="Exit Hangfire.Core.Tests.Client.CreatedContextFacts.TestMethod()", span="59-59", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.TestMethod()", file="SqlServerWriteOnlyTransaction.cs"];
m5_21 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="SqlServerWriteOnlyTransaction.cs"];
m5_3 [label="Entry System.Exception.Exception()", span="0-0", cluster="System.Exception.Exception()", file="SqlServerWriteOnlyTransaction.cs"];
m5_4 [label="Entry Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", span="21-21", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", file="SqlServerWriteOnlyTransaction.cs"];
m5_5 [label="Assert.Throws<NullReferenceException>(\r\n                () => new CreatedContext(null, JobId, false, null))", span="23-24", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", file="SqlServerWriteOnlyTransaction.cs"];
m5_6 [label="Exit Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", span="21-21", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", file="SqlServerWriteOnlyTransaction.cs"];
m5_11 [label="Entry Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, string, bool, System.Exception)", span="29-29", cluster="Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, string, bool, System.Exception)", file="SqlServerWriteOnlyTransaction.cs"];
m5_12 [label="Entry Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", span="28-28", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", file="SqlServerWriteOnlyTransaction.cs"];
m5_13 [label="var context = CreateContext()", span="30-30", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", file="SqlServerWriteOnlyTransaction.cs"];
m5_14 [label="Assert.True(context.Canceled)", span="32-32", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", file="SqlServerWriteOnlyTransaction.cs"];
m5_15 [label="Assert.Same(_exception, context.Exception)", span="33-33", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", file="SqlServerWriteOnlyTransaction.cs"];
m5_16 [label="Assert.Equal(JobId, context.JobId)", span="34-34", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", file="SqlServerWriteOnlyTransaction.cs"];
m5_17 [label="Exit Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", span="28-28", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.Ctor_CorrectlySetsAllProperties()", file="SqlServerWriteOnlyTransaction.cs"];
m5_8 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m5_52 [label="Entry lambda expression", span="65-65", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m5_28 [label="context.SetJobParameter(null, null)", span="43-43", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m5_36 [label="context.SetJobParameter(''name'', ''value'')", span="56-56", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m5_54 [label="Exit lambda expression", span="65-65", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m5_53 [label="TestMethod()", span="65-65", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m5_27 [label="Entry lambda expression", span="43-43", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m5_29 [label="Exit lambda expression", span="43-43", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m5_35 [label="Entry lambda expression", span="56-56", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m5_37 [label="Exit lambda expression", span="56-56", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m5_9 [label="new CreatedContext(null, JobId, false, null)", span="24-24", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m5_10 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m5_48 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="SqlServerWriteOnlyTransaction.cs"];
m5_47 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr", file="SqlServerWriteOnlyTransaction.cs"];
m5_31 [label="Entry Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_AfterCreateJobWasCalled()", span="49-49", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_AfterCreateJobWasCalled()", file="SqlServerWriteOnlyTransaction.cs"];
m5_32 [label="var context = CreateContext()", span="53-53", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_AfterCreateJobWasCalled()", file="SqlServerWriteOnlyTransaction.cs"];
m5_33 [label="Assert.Throws<InvalidOperationException>(\r\n                () => context.SetJobParameter(''name'', ''value''))", span="55-56", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_AfterCreateJobWasCalled()", file="SqlServerWriteOnlyTransaction.cs"];
m5_34 [label="Exit Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_AfterCreateJobWasCalled()", span="49-49", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.SetJobParameter_ThrowsAnException_AfterCreateJobWasCalled()", file="SqlServerWriteOnlyTransaction.cs"];
m5_51 [label="Entry CreateContext.cstr", span="", cluster="CreateContext.cstr", file="SqlServerWriteOnlyTransaction.cs"];
m5_49 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="188-188", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerWriteOnlyTransaction.cs"];
m5_18 [label="Entry Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", span="61-61", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", file="SqlServerWriteOnlyTransaction.cs"];
m5_40 [label="var storage = new Mock<JobStorage>()", span="63-63", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs"];
m5_41 [label="var connection = new Mock<IStorageConnection>()", span="64-64", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs"];
m5_44 [label="var createContext = new CreateContext(storage.Object, connection.Object, job, state.Object)", span="68-68", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", file="SqlServerWriteOnlyTransaction.cs"];
m5_42 [label="var job = Job.FromExpression(() => TestMethod())", span="65-65", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", file="SqlServerWriteOnlyTransaction.cs"];
m5_43 [label="var state = new Mock<IState>()", span="66-66", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", file="SqlServerWriteOnlyTransaction.cs"];
m5_45 [label="return new CreatedContext(createContext, JobId, true, _exception);", span="69-69", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", file="SqlServerWriteOnlyTransaction.cs"];
m5_46 [label="Exit Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", span="61-61", cluster="Hangfire.Core.Tests.Client.CreatedContextFacts.CreateContext()", file="SqlServerWriteOnlyTransaction.cs"];
m5_55 [label="Hangfire.Core.Tests.Client.CreatedContextFacts", span="", file="SqlServerWriteOnlyTransaction.cs"];
m5_56 [label=context, span="", file="SqlServerWriteOnlyTransaction.cs"];
m5_57 [label=context, span="", file="SqlServerWriteOnlyTransaction.cs"];
m6_587 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_21 [label="new SqlServerWriteOnlyTransaction(null, null, _queueProviders)", span="30-30", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", color=green, community=0];
m6_153 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", span="162-162", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_154 [label="UseConnection(sql =>\r\n            {\r\n                var correctJobQueue = new Mock<IPersistentJobQueue>();\r\n                var correctProvider = new Mock<IPersistentJobQueueProvider>();\r\n                correctProvider.Setup(x => x.GetJobQueue(It.IsNotNull<IDbConnection>()))\r\n                    .Returns(correctJobQueue.Object);\r\n\r\n                _queueProviders.Add(correctProvider.Object, new [] { ''default'' });\r\n\r\n                Commit(sql, x => x.AddToQueue(''default'', ''1''));\r\n\r\n                correctJobQueue.Verify(x => x.Enqueue(''default'', ''1''));\r\n            })", span="164-176", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_155 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", span="162-162", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_726 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", span="297-297", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_627 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", span="722-722", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_629 [label="UseConnection(sql =>\r\n            {\r\n                sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                Commit(sql, x => x.RemoveSet(''set-1''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n                Assert.Equal(''set-2'', record.Key);\r\n            })", span="727-739", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_628 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score]) values (@key, @value, 0.0)''", span="724-725", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_630 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", span="722-722", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_119 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="129-129", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_121 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="136-158", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_120 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="131-134", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_122 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="129-129", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_393 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="454-454", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_394 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="456-468", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_395 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="454-454", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_614 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", span="712-712", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_615 [label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null)));\r\n            })", span="714-718", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_616 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", span="712-712", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_211 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="142-142", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_419 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="489-489", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_420 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="491-502", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_421 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="489-489", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_318 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="168-168", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_48 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_152 [label="Entry Unk.AddJobState", span="", cluster="Unk.AddJobState", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_476 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="564-564", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_477 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="566-577", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_478 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="564-564", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_22 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_23 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", span="39-39", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_24 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", span="36-36", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_782 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", span="897-897", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_783 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="899-905", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_784 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", span="897-897", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_655 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", span="275-275", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_319 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="355-355", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_320 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                });\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="357-368", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_321 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="355-355", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_559 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", span="653-653", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_560 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }));\r\n\r\n                // Act\r\n                Commit(sql, x => x.RemoveHash(''some-hash''));\r\n\r\n                // Assert\r\n                var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single();\r\n                Assert.Equal(0, count);\r\n            })", span="655-670", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_561 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", span="653-653", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_589 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", span="686-686", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_590 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null)));\r\n\r\n                Assert.Equal(''items'', exception.ParamName);\r\n            })", span="688-694", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_591 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", span="686-686", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_637 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_407 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="472-472", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_408 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="474-485", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_409 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="472-472", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_177 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="179-179", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_178 [label="return connection\r\n                .Query(''select * from HangFire.Job where id = @id'', new { id = jobId })\r\n                .Single();", span="181-183", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_179 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="179-179", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_761 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", span="308-308", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_343 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="183-183", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_50 [label="Entry Unk.GetTestJob", span="", cluster="Unk.GetTestJob", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_816 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", span="935-935", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_817 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="937-943", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_818 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", span="935-935", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_7 [label="Entry HangFire.BackgroundJobServer.Start()", span="50-50", cluster="HangFire.BackgroundJobServer.Start()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_267 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="291-291", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_268 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(0.0, record.Score, 2);\r\n            })", span="293-302", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_269 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="291-291", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_829 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", span="330-330", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_193 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="135-135", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_795 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", span="319-319", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_514 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="610-610", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_515 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="612-618", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_516 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="610-610", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_691 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="286-286", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_280 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="163-163", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_194 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="202-202", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_195 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime) record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="204-218", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_196 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="202-202", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_293 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="323-323", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_294 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n                \r\n                Assert.Equal(1, recordCount);\r\n            })", span="325-336", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_295 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="323-323", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_513 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="224-224", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_441 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_52 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_0 [label="Entry HangFire.BackgroundJobServer.BackgroundJobServer()", span="13-13", cluster="HangFire.BackgroundJobServer.BackgroundJobServer()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_3 [label="Queue = ''default''", span="17-17", cluster="HangFire.BackgroundJobServer.BackgroundJobServer()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_1 [label="MachineName = Environment.MachineName", span="15-15", cluster="HangFire.BackgroundJobServer.BackgroundJobServer()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_2 [label="WorkersCount = Environment.ProcessorCount * 2", span="16-16", cluster="HangFire.BackgroundJobServer.BackgroundJobServer()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_4 [label="PollInterval = TimeSpan.FromSeconds(15)", span="18-18", cluster="HangFire.BackgroundJobServer.BackgroundJobServer()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_5 [label="Exit HangFire.BackgroundJobServer.BackgroundJobServer()", span="13-13", cluster="HangFire.BackgroundJobServer.BackgroundJobServer()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_830 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", span="947-947", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_832 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistList(''list-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''list-1'']);\r\n                Assert.NotNull(records[''list-2'']);\r\n            })", span="953-969", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_831 [label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key], [ExpireAt])\r\nvalues (@key, @expireAt)''", span="949-951", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_833 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", span="947-947", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_692 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", span="794-794", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_694 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1'']);\r\n                Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''set-2'']);\r\n            })", span="800-817", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_693 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@key, @value, 0.0)''", span="796-798", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_695 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", span="794-794", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_143 [label="Entry lambda expression", span="142-142", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_20 [label="Exit HangFire.BackgroundJobServer.Stop()", span="64-64", cluster="HangFire.BackgroundJobServer.Stop()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_28 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_29 [label="new SqlServerWriteOnlyTransaction(ConnectionUtils.CreateConnection(), null, null)", span="39-39", cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_30 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_40 [label="Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)))", span="57-57", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_41 [label="var job = GetTestJob(sql, jobId)", span="59-59", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_43 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="62-62", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_67 [label="Commit(sql, x => x.PersistJob(jobId))", span="80-80", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_68 [label="var job = GetTestJob(sql, jobId)", span="82-82", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_70 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="85-85", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_89 [label="Commit(sql, x => x.SetJobState(jobId, state.Object))", span="109-109", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_90 [label="var job = GetTestJob(sql, jobId)", span="111-111", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_93 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="115-115", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_129 [label="Commit(sql, x => x.AddJobState(jobId, state.Object))", span="146-146", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_130 [label="var job = GetTestJob(sql, jobId)", span="148-148", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_160 [label="_queueProviders.Add(correctProvider.Object, new [] { ''default'' })", span="171-171", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_161 [label="Commit(sql, x => x.AddToQueue(''default'', ''1''))", span="173-173", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_184 [label="Commit(sql, x => x.IncrementCounter(''my-key''))", span="191-191", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_198 [label="Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="206-206", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_216 [label="Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                })", span="226-230", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_228 [label="Commit(sql, x => x.DecrementCounter(''my-key''))", span="243-243", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_242 [label="Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="258-258", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_259 [label="Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                })", span="278-282", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_271 [label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value''))", span="295-295", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_285 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                })", span="310-314", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_297 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                })", span="327-331", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_309 [label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2))", span="344-344", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_323 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                })", span="359-363", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_335 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                })", span="376-380", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_348 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                })", span="393-397", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_360 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                })", span="410-414", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_372 [label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''))", span="427-427", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_385 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                })", span="441-445", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_397 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                })", span="458-463", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_411 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                })", span="476-480", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_423 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                })", span="493-497", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_435 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                })", span="510-517", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_454 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="532-538", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_468 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="551-555", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_480 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                })", span="568-572", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_492 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                })", span="585-589", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_504 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())))", span="602-603", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_508 [label="Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()))", span="603-603", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_518 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)))", span="614-615", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_522 [label="Commit(sql, x => x.SetRangeInHash(''some-hash'', null))", span="615-615", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_531 [label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }))", span="626-630", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_550 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null)))", span="647-648", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_553 [label="Commit(sql, x => x.RemoveHash(null))", span="648-648", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_563 [label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }))", span="658-662", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_564 [label="Commit(sql, x => x.RemoveHash(''some-hash''))", span="665-665", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_578 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>())))", span="678-679", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_582 [label="Commit(sql, x => x.AddRangeToSet(null, new List<string>()))", span="679-679", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_593 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null)))", span="690-691", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_597 [label="Commit(sql, x => x.AddRangeToSet(''my-set'', null))", span="691-691", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_607 [label="Commit(sql, x => x.AddRangeToSet(''my-set'', items))", span="704-704", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_618 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null)))", span="716-717", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_621 [label="Commit(sql, x => x.RemoveSet(null))", span="717-717", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_633 [label="Commit(sql, x => x.RemoveSet(''set-1''))", span="735-735", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_645 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5))))", span="747-748", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_649 [label="Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5)))", span="748-748", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_662 [label="Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)))", span="771-771", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_681 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45))))", span="786-787", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_685 [label="Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45)))", span="787-787", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_698 [label="Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)))", span="810-810", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_717 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45))))", span="825-826", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_721 [label="Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45)))", span="826-826", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_733 [label="Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)))", span="848-848", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_752 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null)))", span="863-864", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_756 [label="Commit(sql, x => x.PersistHash(null))", span="864-864", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_768 [label="Commit(sql, x => x.PersistHash(''hash-1''))", span="887-887", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_786 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null)))", span="901-902", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_790 [label="Commit(sql, x => x.PersistSet(null))", span="902-902", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_802 [label="Commit(sql, x => x.PersistSet(''set-1''))", span="925-925", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_820 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null)))", span="939-940", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_824 [label="Commit(sql, x => x.PersistList(null))", span="940-940", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_836 [label="Commit(sql, x => x.PersistList(''list-1''))", span="963-963", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_11 [label="Exit HangFire.BackgroundJobServer.Start()", span="50-50", cluster="HangFire.BackgroundJobServer.Start()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_167 [label="x.GetJobQueue(It.IsNotNull<IDbConnection>())", span="168-168", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_217 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="232-232", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_260 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="284-284", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_286 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="316-316", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_298 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="333-333", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_336 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="382-382", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_349 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="399-399", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_361 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="416-416", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_386 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="447-447", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_398 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="465-465", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_412 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="482-482", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_424 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="499-499", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_455 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="540-540", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_469 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="557-557", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_481 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="574-574", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_493 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="591-591", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_565 [label="var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single()", span="668-668", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_608 [label="var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''')", span="706-706", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_37 [label="Entry lambda expression", span="52-64", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_38 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="54-54", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_39 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="55-55", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_55 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_42 [label="Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1))", span="60-60", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_44 [label="Assert.Null(anotherJob.ExpireAt)", span="63-63", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_64 [label="Entry lambda expression", span="75-87", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_65 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="77-77", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_66 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="78-78", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_74 [label="Entry lambda expression", span="80-80", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_69 [label="Assert.Null(job.ExpireAt)", span="83-83", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_71 [label="Assert.NotNull(anotherJob.ExpireAt)", span="86-86", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_82 [label="Entry lambda expression", span="98-125", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_83 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="100-100", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_85 [label="var state = new Mock<IState>()", span="103-103", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_88 [label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="106-107", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_115 [label="Entry lambda expression", span="109-109", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_91 [label="Assert.Equal(''State'', job.StateName)", span="112-112", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_92 [label="Assert.NotNull(job.StateId)", span="113-113", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_84 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="101-101", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_94 [label="Assert.Null(anotherJob.StateName)", span="116-116", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_95 [label="Assert.Null(anotherJob.StateId)", span="117-117", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_123 [label="Entry lambda expression", span="136-158", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_124 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="138-138", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_125 [label="var state = new Mock<IState>()", span="140-140", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_128 [label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="143-144", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_149 [label="Entry lambda expression", span="146-146", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_131 [label="Assert.Null(job.StateName)", span="149-149", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_132 [label="Assert.Null(job.StateId)", span="150-150", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_156 [label="Entry lambda expression", span="164-176", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_158 [label="var correctProvider = new Mock<IPersistentJobQueueProvider>()", span="167-167", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_159 [label="correctProvider.Setup(x => x.GetJobQueue(It.IsNotNull<IDbConnection>()))\r\n                    .Returns(correctJobQueue.Object)", span="168-169", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_162 [label="correctJobQueue.Verify(x => x.Enqueue(''default'', ''1''))", span="175-175", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_169 [label="Entry lambda expression", span="173-173", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_183 [label="Entry lambda expression", span="189-198", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_185 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="193-193", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_190 [label="Entry lambda expression", span="191-191", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_197 [label="Entry lambda expression", span="204-218", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_199 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="208-208", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_208 [label="Entry lambda expression", span="206-206", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_215 [label="Entry lambda expression", span="224-235", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_220 [label="Entry lambda expression", span="226-230", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_227 [label="Entry lambda expression", span="241-250", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_229 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="245-245", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_234 [label="Entry lambda expression", span="243-243", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_241 [label="Entry lambda expression", span="256-270", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_243 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="260-260", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_251 [label="Entry lambda expression", span="258-258", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_258 [label="Entry lambda expression", span="276-287", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_263 [label="Entry lambda expression", span="278-282", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_270 [label="Entry lambda expression", span="293-302", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_272 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="297-297", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_277 [label="Entry lambda expression", span="295-295", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_284 [label="Entry lambda expression", span="308-319", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_289 [label="Entry lambda expression", span="310-314", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_296 [label="Entry lambda expression", span="325-336", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_301 [label="Entry lambda expression", span="327-331", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_308 [label="Entry lambda expression", span="342-351", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_310 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="346-346", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_315 [label="Entry lambda expression", span="344-344", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_322 [label="Entry lambda expression", span="357-368", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_324 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="365-365", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_327 [label="Entry lambda expression", span="359-363", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_334 [label="Entry lambda expression", span="374-385", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_339 [label="Entry lambda expression", span="376-380", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_347 [label="Entry lambda expression", span="391-402", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_352 [label="Entry lambda expression", span="393-397", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_359 [label="Entry lambda expression", span="408-419", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_364 [label="Entry lambda expression", span="410-414", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_371 [label="Entry lambda expression", span="425-433", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_373 [label="var record = sql.Query(''select * from HangFire.List'').Single()", span="429-429", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_377 [label="Entry lambda expression", span="427-427", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_384 [label="Entry lambda expression", span="439-450", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_389 [label="Entry lambda expression", span="441-445", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_396 [label="Entry lambda expression", span="456-468", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_401 [label="Entry lambda expression", span="458-463", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_410 [label="Entry lambda expression", span="474-485", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_415 [label="Entry lambda expression", span="476-480", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_422 [label="Entry lambda expression", span="491-502", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_427 [label="Entry lambda expression", span="493-497", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_434 [label="Entry lambda expression", span="508-524", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_436 [label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="519-519", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_442 [label="Entry lambda expression", span="510-517", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_453 [label="Entry lambda expression", span="530-543", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_458 [label="Entry lambda expression", span="532-538", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_467 [label="Entry lambda expression", span="549-560", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_472 [label="Entry lambda expression", span="551-555", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_479 [label="Entry lambda expression", span="566-577", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_484 [label="Entry lambda expression", span="568-572", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_491 [label="Entry lambda expression", span="583-594", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_496 [label="Entry lambda expression", span="585-589", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_503 [label="Entry lambda expression", span="600-606", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_505 [label="Assert.Equal(''key'', exception.ParamName)", span="605-605", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_507 [label="Entry lambda expression", span="603-603", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_509 [label="Exit lambda expression", span="603-603", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_510 [label="Entry lambda expression", span="603-603", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_517 [label="Entry lambda expression", span="612-618", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_519 [label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="617-617", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_521 [label="Entry lambda expression", span="615-615", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_523 [label="Exit lambda expression", span="615-615", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_524 [label="Entry lambda expression", span="615-615", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_530 [label="Entry lambda expression", span="624-639", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_532 [label="var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="632-635", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_537 [label="Entry lambda expression", span="626-630", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_549 [label="Entry lambda expression", span="645-649", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_551 [label="Exit lambda expression", span="645-649", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_552 [label="Entry lambda expression", span="648-648", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_554 [label="Exit lambda expression", span="648-648", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_555 [label="Entry lambda expression", span="648-648", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_562 [label="Entry lambda expression", span="655-670", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_568 [label="Entry lambda expression", span="658-662", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_571 [label="Entry lambda expression", span="665-665", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_577 [label="Entry lambda expression", span="676-682", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_579 [label="Assert.Equal(''key'', exception.ParamName)", span="681-681", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_581 [label="Entry lambda expression", span="679-679", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_583 [label="Exit lambda expression", span="679-679", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_584 [label="Entry lambda expression", span="679-679", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_592 [label="Entry lambda expression", span="688-694", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_594 [label="Assert.Equal(''items'', exception.ParamName)", span="693-693", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_596 [label="Entry lambda expression", span="691-691", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_598 [label="Exit lambda expression", span="691-691", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_599 [label="Entry lambda expression", span="691-691", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_605 [label="Entry lambda expression", span="700-708", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_606 [label="var items = new List<string> { ''1'', ''2'', ''3'' }", span="702-702", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_611 [label="Entry lambda expression", span="704-704", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_617 [label="Entry lambda expression", span="714-718", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_619 [label="Exit lambda expression", span="714-718", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_620 [label="Entry lambda expression", span="717-717", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_622 [label="Exit lambda expression", span="717-717", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_623 [label="Entry lambda expression", span="717-717", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_631 [label="Entry lambda expression", span="727-739", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_632 [label="sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="729-733", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_634 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="737-737", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_638 [label="Entry lambda expression", span="735-735", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_644 [label="Entry lambda expression", span="745-751", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_646 [label="Assert.Equal(''key'', exception.ParamName)", span="750-750", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_648 [label="Entry lambda expression", span="748-748", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_650 [label="Exit lambda expression", span="748-748", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_651 [label="Entry lambda expression", span="748-748", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_660 [label="Entry lambda expression", span="761-778", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_661 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                })", span="764-768", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_663 [label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="774-774", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_668 [label="Entry lambda expression", span="771-771", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_680 [label="Entry lambda expression", span="784-790", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_682 [label="Assert.Equal(''key'', exception.ParamName)", span="789-789", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_684 [label="Entry lambda expression", span="787-787", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_686 [label="Exit lambda expression", span="787-787", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_687 [label="Entry lambda expression", span="787-787", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_696 [label="Entry lambda expression", span="800-817", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_697 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="803-807", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_699 [label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="813-813", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_704 [label="Entry lambda expression", span="810-810", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_716 [label="Entry lambda expression", span="823-829", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_718 [label="Assert.Equal(''key'', exception.ParamName)", span="828-828", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_720 [label="Entry lambda expression", span="826-826", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_722 [label="Exit lambda expression", span="826-826", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_723 [label="Entry lambda expression", span="826-826", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_731 [label="Entry lambda expression", span="838-855", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_732 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                })", span="841-845", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_734 [label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="851-851", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_739 [label="Entry lambda expression", span="848-848", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_751 [label="Entry lambda expression", span="861-867", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_753 [label="Assert.Equal(''key'', exception.ParamName)", span="866-866", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_755 [label="Entry lambda expression", span="864-864", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_757 [label="Exit lambda expression", span="864-864", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_758 [label="Entry lambda expression", span="864-864", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_766 [label="Entry lambda expression", span="877-893", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_767 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="880-884", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_769 [label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="890-890", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_773 [label="Entry lambda expression", span="887-887", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_785 [label="Entry lambda expression", span="899-905", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_787 [label="Assert.Equal(''key'', exception.ParamName)", span="904-904", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_789 [label="Entry lambda expression", span="902-902", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_791 [label="Exit lambda expression", span="902-902", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_792 [label="Entry lambda expression", span="902-902", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_800 [label="Entry lambda expression", span="915-931", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_801 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="918-922", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_803 [label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="928-928", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_807 [label="Entry lambda expression", span="925-925", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_819 [label="Entry lambda expression", span="937-943", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_821 [label="Assert.Equal(''key'', exception.ParamName)", span="942-942", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_823 [label="Entry lambda expression", span="940-940", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_825 [label="Exit lambda expression", span="940-940", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_826 [label="Entry lambda expression", span="940-940", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_834 [label="Entry lambda expression", span="953-969", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_835 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="956-960", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_837 [label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="966-966", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_841 [label="Entry lambda expression", span="963-963", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_97 [label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="120-120", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_98 [label="Assert.Equal(''State'', jobState.Name)", span="121-121", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_99 [label="Assert.Equal(''Reason'', jobState.Reason)", span="122-122", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_101 [label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="124-124", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_134 [label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="153-153", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_135 [label="Assert.Equal(''State'', jobState.Name)", span="154-154", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_136 [label="Assert.Equal(''Reason'', jobState.Reason)", span="155-155", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_138 [label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="157-157", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_186 [label="Assert.Equal(''my-key'', record.Key)", span="195-195", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_187 [label="Assert.Equal(1, record.Value)", span="196-196", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_188 [label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="197-197", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_200 [label="Assert.Equal(''my-key'', record.Key)", span="210-210", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_201 [label="Assert.Equal(1, record.Value)", span="211-211", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_218 [label="Assert.Equal(2, recordCount)", span="234-234", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_230 [label="Assert.Equal(''my-key'', record.Key)", span="247-247", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_231 [label="Assert.Equal(-1, record.Value)", span="248-248", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_232 [label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="249-249", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_244 [label="Assert.Equal(''my-key'', record.Key)", span="262-262", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_245 [label="Assert.Equal(-1, record.Value)", span="263-263", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_261 [label="Assert.Equal(2, recordCount)", span="286-286", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_273 [label="Assert.Equal(''my-key'', record.Key)", span="299-299", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_274 [label="Assert.Equal(''my-value'', record.Value)", span="300-300", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_275 [label="Assert.Equal(0.0, record.Score, 2)", span="301-301", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_287 [label="Assert.Equal(2, recordCount)", span="318-318", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_299 [label="Assert.Equal(1, recordCount)", span="335-335", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_311 [label="Assert.Equal(''my-key'', record.Key)", span="348-348", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_312 [label="Assert.Equal(''my-value'', record.Value)", span="349-349", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_313 [label="Assert.Equal(3.2, record.Score, 3)", span="350-350", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_325 [label="Assert.Equal(3.2, record.Score, 3)", span="367-367", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_337 [label="Assert.Equal(0, recordCount)", span="384-384", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_350 [label="Assert.Equal(1, recordCount)", span="401-401", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_362 [label="Assert.Equal(1, recordCount)", span="418-418", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_374 [label="Assert.Equal(''my-key'', record.Key)", span="431-431", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_375 [label="Assert.Equal(''my-value'', record.Value)", span="432-432", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_387 [label="Assert.Equal(2, recordCount)", span="449-449", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_399 [label="Assert.Equal(0, recordCount)", span="467-467", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_413 [label="Assert.Equal(1, recordCount)", span="484-484", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_425 [label="Assert.Equal(1, recordCount)", span="501-501", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_437 [label="Assert.Equal(2, records.Length)", span="521-521", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_438 [label="Assert.Equal(''1'', records[0].Value)", span="522-522", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_439 [label="Assert.Equal(''2'', records[1].Value)", span="523-523", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_456 [label="Assert.Equal(2, recordCount)", span="542-542", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_470 [label="Assert.Equal(0, recordCount)", span="559-559", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_482 [label="Assert.Equal(0, recordCount)", span="576-576", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_494 [label="Assert.Equal(1, recordCount)", span="593-593", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_533 [label="Assert.Equal(''Value1'', result[''Key1''])", span="637-637", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_534 [label="Assert.Equal(''Value2'', result[''Key2''])", span="638-638", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_566 [label="Assert.Equal(0, count)", span="669-669", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_609 [label="Assert.Equal(items, records)", span="707-707", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_635 [label="Assert.Equal(''set-2'', record.Key)", span="738-738", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_10 [label="_server = new JobServer(MachineName, Queue, WorkersCount, PollInterval, JobActivator)", span="57-57", cluster="HangFire.BackgroundJobServer.Start()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_12 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_166 [label="Entry lambda expression", span="168-168", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_168 [label="Exit lambda expression", span="168-168", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_45 [label="Exit lambda expression", span="52-64", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_56 [label="x.ExpireJob(jobId, TimeSpan.FromDays(1))", span="57-57", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_57 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_72 [label="Exit lambda expression", span="75-87", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_75 [label="x.PersistJob(jobId)", span="80-80", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_76 [label="Exit lambda expression", span="80-80", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_102 [label="Exit lambda expression", span="98-125", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_96 [label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="119-119", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_116 [label="x.SetJobState(jobId, state.Object)", span="109-109", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_86 [label="state.Setup(x => x.Name).Returns(''State'')", span="104-104", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_87 [label="state.Setup(x => x.Reason).Returns(''Reason'')", span="105-105", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_111 [label="Entry lambda expression", span="106-106", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_117 [label="Exit lambda expression", span="109-109", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_139 [label="Exit lambda expression", span="136-158", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_133 [label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="152-152", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_150 [label="x.AddJobState(jobId, state.Object)", span="146-146", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_126 [label="state.Setup(x => x.Name).Returns(''State'')", span="141-141", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_127 [label="state.Setup(x => x.Reason).Returns(''Reason'')", span="142-142", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_146 [label="Entry lambda expression", span="143-143", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_151 [label="Exit lambda expression", span="146-146", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_163 [label="Exit lambda expression", span="164-176", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_157 [label="var correctJobQueue = new Mock<IPersistentJobQueue>()", span="166-166", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_173 [label="Entry lambda expression", span="175-175", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_171 [label="Exit lambda expression", span="173-173", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_170 [label="x.AddToQueue(''default'', ''1'')", span="173-173", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_189 [label="Exit lambda expression", span="189-198", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_192 [label="Exit lambda expression", span="191-191", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_191 [label="x.IncrementCounter(''my-key'')", span="191-191", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_206 [label="Exit lambda expression", span="204-218", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_202 [label="Assert.NotNull(record.ExpireAt)", span="212-212", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_203 [label="var expireAt = (DateTime) record.ExpireAt", span="214-214", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_210 [label="Exit lambda expression", span="206-206", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_209 [label="x.IncrementCounter(''my-key'', TimeSpan.FromDays(1))", span="206-206", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_219 [label="Exit lambda expression", span="224-235", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_223 [label="Exit lambda expression", span="226-230", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_221 [label="x.IncrementCounter(''my-key'')", span="228-228", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_222 [label="x.IncrementCounter(''my-key'')", span="229-229", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_233 [label="Exit lambda expression", span="241-250", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_236 [label="Exit lambda expression", span="243-243", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_235 [label="x.DecrementCounter(''my-key'')", span="243-243", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_250 [label="Exit lambda expression", span="256-270", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_246 [label="Assert.NotNull(record.ExpireAt)", span="264-264", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_247 [label="var expireAt = (DateTime)record.ExpireAt", span="266-266", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_253 [label="Exit lambda expression", span="258-258", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_252 [label="x.DecrementCounter(''my-key'', TimeSpan.FromDays(1))", span="258-258", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_262 [label="Exit lambda expression", span="276-287", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_266 [label="Exit lambda expression", span="278-282", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_264 [label="x.DecrementCounter(''my-key'')", span="280-280", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_265 [label="x.DecrementCounter(''my-key'')", span="281-281", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_276 [label="Exit lambda expression", span="293-302", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_279 [label="Exit lambda expression", span="295-295", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_278 [label="x.AddToSet(''my-key'', ''my-value'')", span="295-295", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_288 [label="Exit lambda expression", span="308-319", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_292 [label="Exit lambda expression", span="310-314", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_290 [label="x.AddToSet(''my-key'', ''my-value'')", span="312-312", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_291 [label="x.AddToSet(''my-key'', ''another-value'')", span="313-313", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_300 [label="Exit lambda expression", span="325-336", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_304 [label="Exit lambda expression", span="327-331", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_302 [label="x.AddToSet(''my-key'', ''my-value'')", span="329-329", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_303 [label="x.AddToSet(''my-key'', ''my-value'')", span="330-330", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_314 [label="Exit lambda expression", span="342-351", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_317 [label="Exit lambda expression", span="344-344", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_316 [label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="344-344", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_326 [label="Exit lambda expression", span="357-368", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_330 [label="Exit lambda expression", span="359-363", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_328 [label="x.AddToSet(''my-key'', ''my-value'')", span="361-361", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_329 [label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="362-362", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_338 [label="Exit lambda expression", span="374-385", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_342 [label="Exit lambda expression", span="376-380", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_340 [label="x.AddToSet(''my-key'', ''my-value'')", span="378-378", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_341 [label="x.RemoveFromSet(''my-key'', ''my-value'')", span="379-379", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_351 [label="Exit lambda expression", span="391-402", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_355 [label="Exit lambda expression", span="393-397", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_353 [label="x.AddToSet(''my-key'', ''my-value'')", span="395-395", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_354 [label="x.RemoveFromSet(''my-key'', ''different-value'')", span="396-396", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_363 [label="Exit lambda expression", span="408-419", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_367 [label="Exit lambda expression", span="410-414", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_365 [label="x.AddToSet(''my-key'', ''my-value'')", span="412-412", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_366 [label="x.RemoveFromSet(''different-key'', ''my-value'')", span="413-413", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_376 [label="Exit lambda expression", span="425-433", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_379 [label="Exit lambda expression", span="427-427", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_378 [label="x.InsertToList(''my-key'', ''my-value'')", span="427-427", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_388 [label="Exit lambda expression", span="439-450", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_392 [label="Exit lambda expression", span="441-445", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_390 [label="x.InsertToList(''my-key'', ''my-value'')", span="443-443", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_391 [label="x.InsertToList(''my-key'', ''my-value'')", span="444-444", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_400 [label="Exit lambda expression", span="456-468", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_405 [label="Exit lambda expression", span="458-463", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_402 [label="x.InsertToList(''my-key'', ''my-value'')", span="460-460", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_403 [label="x.InsertToList(''my-key'', ''my-value'')", span="461-461", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_404 [label="x.RemoveFromList(''my-key'', ''my-value'')", span="462-462", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_414 [label="Exit lambda expression", span="474-485", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_418 [label="Exit lambda expression", span="476-480", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_416 [label="x.InsertToList(''my-key'', ''my-value'')", span="478-478", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_417 [label="x.RemoveFromList(''my-key'', ''different-value'')", span="479-479", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_426 [label="Exit lambda expression", span="491-502", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_430 [label="Exit lambda expression", span="493-497", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_428 [label="x.InsertToList(''my-key'', ''my-value'')", span="495-495", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_429 [label="x.RemoveFromList(''different-key'', ''my-value'')", span="496-496", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_440 [label="Exit lambda expression", span="508-524", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_448 [label="Exit lambda expression", span="510-517", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_443 [label="x.InsertToList(''my-key'', ''0'')", span="512-512", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_444 [label="x.InsertToList(''my-key'', ''1'')", span="513-513", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_445 [label="x.InsertToList(''my-key'', ''2'')", span="514-514", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_446 [label="x.InsertToList(''my-key'', ''3'')", span="515-515", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_447 [label="x.TrimList(''my-key'', 1, 2)", span="516-516", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_457 [label="Exit lambda expression", span="530-543", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_463 [label="Exit lambda expression", span="532-538", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_459 [label="x.InsertToList(''my-key'', ''0'')", span="534-534", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_460 [label="x.InsertToList(''my-key'', ''1'')", span="535-535", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_461 [label="x.InsertToList(''my-key'', ''2'')", span="536-536", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_462 [label="x.TrimList(''my-key'', 1, 100)", span="537-537", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_471 [label="Exit lambda expression", span="549-560", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_475 [label="Exit lambda expression", span="551-555", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_473 [label="x.InsertToList(''my-key'', ''0'')", span="553-553", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_474 [label="x.TrimList(''my-key'', 1, 100)", span="554-554", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_483 [label="Exit lambda expression", span="566-577", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_487 [label="Exit lambda expression", span="568-572", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_485 [label="x.InsertToList(''my-key'', ''0'')", span="570-570", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_486 [label="x.TrimList(''my-key'', 1, 0)", span="571-571", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_495 [label="Exit lambda expression", span="583-594", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_499 [label="Exit lambda expression", span="585-589", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_497 [label="x.InsertToList(''my-key'', ''0'')", span="587-587", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_498 [label="x.TrimList(''another-key'', 1, 0)", span="588-588", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_506 [label="Exit lambda expression", span="600-606", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_512 [label="Exit lambda expression", span="603-603", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_511 [label="x.SetRangeInHash(null, new Dictionary<string, string>())", span="603-603", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_520 [label="Exit lambda expression", span="612-618", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_526 [label="Exit lambda expression", span="615-615", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_525 [label="x.SetRangeInHash(''some-hash'', null)", span="615-615", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_535 [label="Exit lambda expression", span="624-639", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_540 [label="Entry lambda expression", span="635-635", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_543 [label="Entry lambda expression", span="635-635", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_539 [label="Exit lambda expression", span="626-630", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_538 [label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="626-630", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_557 [label="Exit lambda expression", span="648-648", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_556 [label="x.RemoveHash(null)", span="648-648", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_567 [label="Exit lambda expression", span="655-670", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_570 [label="Exit lambda expression", span="658-662", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_569 [label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="658-662", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_573 [label="Exit lambda expression", span="665-665", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_572 [label="x.RemoveHash(''some-hash'')", span="665-665", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_580 [label="Exit lambda expression", span="676-682", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_586 [label="Exit lambda expression", span="679-679", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_585 [label="x.AddRangeToSet(null, new List<string>())", span="679-679", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_595 [label="Exit lambda expression", span="688-694", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_601 [label="Exit lambda expression", span="691-691", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_600 [label="x.AddRangeToSet(''my-set'', null)", span="691-691", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_610 [label="Exit lambda expression", span="700-708", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_612 [label="x.AddRangeToSet(''my-set'', items)", span="704-704", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_613 [label="Exit lambda expression", span="704-704", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_625 [label="Exit lambda expression", span="717-717", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_624 [label="x.RemoveSet(null)", span="717-717", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_636 [label="Exit lambda expression", span="727-739", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_640 [label="Exit lambda expression", span="735-735", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_639 [label="x.RemoveSet(''set-1'')", span="735-735", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_647 [label="Exit lambda expression", span="745-751", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_653 [label="Exit lambda expression", span="748-748", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_652 [label="x.ExpireHash(null, TimeSpan.FromMinutes(5))", span="748-748", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_667 [label="Exit lambda expression", span="761-778", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_664 [label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1''])", span="775-775", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_671 [label="Entry lambda expression", span="774-774", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_674 [label="Entry lambda expression", span="774-774", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_665 [label="Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61))", span="776-776", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_666 [label="Assert.Null(records[''hash-2''])", span="777-777", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_670 [label="Exit lambda expression", span="771-771", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_669 [label="x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60))", span="771-771", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_683 [label="Exit lambda expression", span="784-790", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_689 [label="Exit lambda expression", span="787-787", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_688 [label="x.ExpireSet(null, TimeSpan.FromSeconds(45))", span="787-787", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_703 [label="Exit lambda expression", span="800-817", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_700 [label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1''])", span="814-814", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_707 [label="Entry lambda expression", span="813-813", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_710 [label="Entry lambda expression", span="813-813", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_701 [label="Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61))", span="815-815", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_702 [label="Assert.Null(records[''set-2''])", span="816-816", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_706 [label="Exit lambda expression", span="810-810", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_705 [label="x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60))", span="810-810", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_719 [label="Exit lambda expression", span="823-829", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_725 [label="Exit lambda expression", span="826-826", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_724 [label="x.ExpireList(null, TimeSpan.FromSeconds(45))", span="826-826", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_738 [label="Exit lambda expression", span="838-855", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_735 [label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1''])", span="852-852", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_742 [label="Entry lambda expression", span="851-851", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_745 [label="Entry lambda expression", span="851-851", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_736 [label="Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61))", span="853-853", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_737 [label="Assert.Null(records[''list-2''])", span="854-854", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_741 [label="Exit lambda expression", span="848-848", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_740 [label="x.ExpireList(''list-1'', TimeSpan.FromMinutes(60))", span="848-848", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_754 [label="Exit lambda expression", span="861-867", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_760 [label="Exit lambda expression", span="864-864", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_759 [label="x.PersistHash(null)", span="864-864", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_772 [label="Exit lambda expression", span="877-893", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_770 [label="Assert.Null(records[''hash-1''])", span="891-891", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_776 [label="Entry lambda expression", span="890-890", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_779 [label="Entry lambda expression", span="890-890", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_771 [label="Assert.NotNull(records[''hash-2''])", span="892-892", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_775 [label="Exit lambda expression", span="887-887", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_774 [label="x.PersistHash(''hash-1'')", span="887-887", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_788 [label="Exit lambda expression", span="899-905", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_794 [label="Exit lambda expression", span="902-902", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_793 [label="x.PersistSet(null)", span="902-902", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_806 [label="Exit lambda expression", span="915-931", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_804 [label="Assert.Null(records[''set-1''])", span="929-929", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_810 [label="Entry lambda expression", span="928-928", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_813 [label="Entry lambda expression", span="928-928", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_805 [label="Assert.NotNull(records[''set-2''])", span="930-930", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_809 [label="Exit lambda expression", span="925-925", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_808 [label="x.PersistSet(''set-1'')", span="925-925", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_822 [label="Exit lambda expression", span="937-943", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_828 [label="Exit lambda expression", span="940-940", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_827 [label="x.PersistList(null)", span="940-940", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_840 [label="Exit lambda expression", span="953-969", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_838 [label="Assert.Null(records[''list-1''])", span="967-967", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_844 [label="Entry lambda expression", span="966-966", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_847 [label="Entry lambda expression", span="966-966", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_839 [label="Assert.NotNull(records[''list-2''])", span="968-968", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_843 [label="Exit lambda expression", span="963-963", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_842 [label="x.PersistList(''list-1'')", span="963-963", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_100 [label="Assert.NotNull(jobState.CreatedAt)", span="123-123", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_137 [label="Assert.NotNull(jobState.CreatedAt)", span="156-156", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_204 [label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="216-216", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_205 [label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="217-217", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_248 [label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="268-268", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_249 [label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="269-269", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_105 [label="Entry lambda expression", span="104-104", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_108 [label="Entry lambda expression", span="105-105", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_113 [label="Exit lambda expression", span="106-106", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_112 [label="x.SerializeData()", span="106-106", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_140 [label="Entry lambda expression", span="141-141", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_148 [label="Exit lambda expression", span="143-143", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_147 [label="x.SerializeData()", span="143-143", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_175 [label="Exit lambda expression", span="175-175", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_174 [label="x.Enqueue(''default'', ''1'')", span="175-175", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_542 [label="Exit lambda expression", span="635-635", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_541 [label="(string)x.Field", span="635-635", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_545 [label="Exit lambda expression", span="635-635", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_544 [label="(string)x.Value", span="635-635", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_673 [label="Exit lambda expression", span="774-774", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_672 [label="(string)x.Key", span="774-774", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_676 [label="Exit lambda expression", span="774-774", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_675 [label="(DateTime?)x.ExpireAt", span="774-774", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_709 [label="Exit lambda expression", span="813-813", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_708 [label="(string)x.Key", span="813-813", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_712 [label="Exit lambda expression", span="813-813", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_711 [label="(DateTime?)x.ExpireAt", span="813-813", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_744 [label="Exit lambda expression", span="851-851", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_743 [label="(string)x.Key", span="851-851", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_747 [label="Exit lambda expression", span="851-851", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_746 [label="(DateTime?)x.ExpireAt", span="851-851", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_778 [label="Exit lambda expression", span="890-890", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_777 [label="(string)x.Key", span="890-890", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_781 [label="Exit lambda expression", span="890-890", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_780 [label="(DateTime?)x.ExpireAt", span="890-890", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_812 [label="Exit lambda expression", span="928-928", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_811 [label="(string)x.Key", span="928-928", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_815 [label="Exit lambda expression", span="928-928", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_814 [label="(DateTime?)x.ExpireAt", span="928-928", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_846 [label="Exit lambda expression", span="966-966", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_845 [label="(string)x.Key", span="966-966", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_849 [label="Exit lambda expression", span="966-966", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_848 [label="(DateTime?)x.ExpireAt", span="966-966", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_107 [label="Exit lambda expression", span="104-104", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_106 [label="x.Name", span="104-104", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_110 [label="Exit lambda expression", span="105-105", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_109 [label="x.Reason", span="105-105", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_142 [label="Exit lambda expression", span="141-141", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_141 [label="x.Name", span="141-141", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_144 [label="x.Reason", span="142-142", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_145 [label="Exit lambda expression", span="142-142", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_588 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", span="252-252", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_381 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="437-437", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_382 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="439-450", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_383 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="437-437", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_368 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="423-423", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_369 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.InsertToList(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.List'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n            })", span="425-433", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_370 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="423-423", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_602 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", span="698-698", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_603 [label="UseConnection(sql =>\r\n            {\r\n                var items = new List<string> { ''1'', ''2'', ''3'' };\r\n\r\n                Commit(sql, x => x.AddRangeToSet(''my-set'', items));\r\n\r\n                var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''');\r\n                Assert.Equal(items, records);\r\n            })", span="700-708", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_604 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", span="698-698", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_406 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="201-201", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_8 [label="_server != null", span="52-52", cluster="HangFire.BackgroundJobServer.Start()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_796 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", span="909-909", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_798 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistSet(''set-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''set-1'']);\r\n                Assert.NotNull(records[''set-2'']);\r\n            })", span="915-931", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_797 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [ExpireAt], [Score])\r\nvalues (@key, @value, @expireAt, 0.0)''", span="911-913", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_799 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", span="909-909", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_356 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="406-406", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_357 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="408-419", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_358 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="406-406", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_713 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", span="821-821", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_714 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="823-829", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_715 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", span="821-821", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_103 [label="Entry Mock<IState>.cstr", span="", cluster="Mock<IState>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_224 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="239-239", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_225 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="241-250", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_226 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="239-239", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_51 [label="Entry System.DateTime.AddMinutes(double)", span="0-0", cluster="System.DateTime.AddMinutes(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_859 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="52-52", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_36 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_19 [label="return false;", span="73-73", cluster="HangFire.BackgroundJobServer.Stop()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_237 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="149-149", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_118 [label="Entry Unk.SetJobState", span="", cluster="Unk.SetJobState", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_488 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="581-581", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_489 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="583-594", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_490 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="581-581", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_31 [label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37", cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_25 [label="HangFire.BackgroundJobServer", span="", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_26 [label="Assert.Equal(''queueProviders'', exception.ParamName)", span="41-41", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_27 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", span="36-36", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_59 [label="Entry Unk.ExpireJob", span="", cluster="Unk.ExpireJob", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_331 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="372-372", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_332 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="374-385", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_333 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="372-372", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_15 [label="_server != null", span="66-66", cluster="HangFire.BackgroundJobServer.Stop()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_16 [label="_server.Dispose()", span="68-68", cluster="HangFire.BackgroundJobServer.Stop()", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_17 [label="_server = null", span="69-69", cluster="HangFire.BackgroundJobServer.Stop()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_18 [label="return true;", span="71-71", cluster="HangFire.BackgroundJobServer.Stop()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_305 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="340-340", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_306 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="342-351", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_307 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="340-340", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_46 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_854 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_558 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", span="242-242", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_238 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="254-254", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_239 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime)record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="256-270", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_240 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="254-254", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_500 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="598-598", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_501 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="600-606", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_502 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="598-598", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_727 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", span="833-833", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_729 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1'']);\r\n                Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''list-2'']);\r\n            })", span="838-855", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_728 [label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key]) values (@key)''", span="835-836", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_730 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", span="833-833", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_164 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_73 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_32 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", span="45-45", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_34 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1));\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.ExpireAt);\r\n            })", span="52-64", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_33 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="47-50", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_35 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", span="45-45", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_762 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", span="871-871", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_764 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistHash(''hash-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''hash-1'']);\r\n                Assert.NotNull(records[''hash-2'']);\r\n            })", span="877-893", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_763 [label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [ExpireAt])\r\nvalues (@key, @field, @expireAt)''", span="873-875", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_765 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", span="871-871", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_49 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", span="980-980", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_855 [label="var transaction = new SqlServerWriteOnlyTransaction(connection, null, _queueProviders)", span="984-984", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_856 [label="action(transaction)", span="986-986", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_857 [label="transaction.Commit()", span="987-987", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_858 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", span="980-980", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_180 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="187-187", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_181 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="189-198", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_182 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="187-187", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_6 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_54 [label="Entry Unk.Null", span="", cluster="Unk.Null", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_14 [label="Entry Unk.GetJobQueue", span="", cluster="Unk.GetJobQueue", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_9 [label="throw new InvalidOperationException(''Background job server has already been started. Please stop it first.'');", span="54-54", cluster="HangFire.BackgroundJobServer.Start()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_850 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="972-972", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_851 [label="var connection = ConnectionUtils.CreateConnection()", span="974-974", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_852 [label="action(connection)", span="976-976", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_853 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="972-972", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_656 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", span="755-755", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_658 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1'']);\r\n                Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''hash-2'']);\r\n            })", span="761-778", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_657 [label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field])\r\nvalues (@key, @field)''", span="757-759", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_659 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", span="755-755", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_464 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="547-547", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_465 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="549-560", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_466 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="547-547", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_207 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_212 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="222-222", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_213 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(2, recordCount);\r\n            })", span="224-235", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_214 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="222-222", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_748 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", span="859-859", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_749 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="861-867", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_750 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", span="859-859", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_450 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="528-528", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_451 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="530-543", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_452 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="528-528", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_13 [label="Entry Unk.>", span="", cluster="Unk.>", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_431 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="506-506", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_432 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                });\r\n\r\n                var records = sql.Query(''select * from HangFire.List'').ToArray();\r\n\r\n                Assert.Equal(2, records.Length);\r\n                Assert.Equal(''1'', records[0].Value);\r\n                Assert.Equal(''2'', records[1].Value);\r\n            })", span="508-524", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_433 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="506-506", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_165 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_255 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="274-274", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_256 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="276-287", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_257 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="274-274", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_449 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="209-209", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_654 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_536 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_281 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="306-306", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_282 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="308-319", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_283 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="306-306", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_78 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="91-91", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_80 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.StateName);\r\n                Assert.Null(anotherJob.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="98-125", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_79 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="93-96", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_81 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="91-91", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_60 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="68-68", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_62 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.PersistJob(jobId));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.ExpireAt);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.NotNull(anotherJob.ExpireAt);\r\n            })", span="75-87", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_61 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues ('', '', getutcdate(), getutcdate())\r\nselect scope_identity() as Id''", span="70-73", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_63 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="68-68", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_254 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="156-156", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_626 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", span="265-265", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_690 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_172 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="127-127", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_58 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_176 [label="Entry Unk.Enqueue", span="", cluster="Unk.Enqueue", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_527 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="622-622", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_528 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }));\r\n\r\n                var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="624-639", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_529 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="622-622", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_104 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_574 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", span="674-674", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_575 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>())));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="676-682", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_576 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", span="674-674", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_344 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="389-389", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_345 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="391-402", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_346 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="389-389", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_641 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", span="743-743", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_642 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="745-751", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_643 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", span="743-743", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_114 [label="Entry Unk.SerializeData", span="", cluster="Unk.SerializeData", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_47 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_53 [label="Entry Unk.True", span="", cluster="Unk.True", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_77 [label="Entry Unk.PersistJob", span="", cluster="Unk.PersistJob", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_677 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", span="782-782", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_678 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="784-790", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_679 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", span="782-782", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_380 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="193-193", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_546 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", span="643-643", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_547 [label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null)));\r\n            })", span="645-649", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_548 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", span="643-643", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_860 [label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_871 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_872 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_873 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_874 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_875 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_877 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_879 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_881 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_883 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_885 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_887 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_889 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_861 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_863 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_865 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_868 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_878 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_880 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_882 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_884 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_886 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_888 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_890 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_862 [label=jobId, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_864 [label=jobId, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_866 [label=jobId, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_867 [label=state, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_869 [label=jobId, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_870 [label=state, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m6_876 [label=items, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m7_230 [label="Assert.Equal(''my-key'', record.Key)", span="246-246", cluster="lambda expression", file="StateMachine.cs"];
m7_90 [label="var job = GetTestJob(sql, jobId)", span="110-110", cluster="lambda expression", file="StateMachine.cs"];
m7_372 [label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''))", span="426-426", cluster="lambda expression", file="StateMachine.cs"];
m7_113 [label="Exit lambda expression", span="105-105", cluster="lambda expression", file="StateMachine.cs"];
m7_390 [label="x.InsertToList(''my-key'', ''my-value'')", span="442-442", cluster="lambda expression", file="StateMachine.cs"];
m7_60 [label="Entry lambda expression", span="100-106", cluster="lambda expression", file="StateMachine.cs"];
m7_62 [label="Exit lambda expression", span="100-106", cluster="lambda expression", file="StateMachine.cs"];
m7_61 [label="new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    InScheduledState = ScheduledState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueueAt = JobHelper.DeserializeNullableDateTime(stateData[''EnqueueAt'']) ?? DateTime.MinValue,\r\n                    ScheduledAt = JobHelper.DeserializeNullableDateTime(stateData[''ScheduledAt''])\r\n                }", span="100-106", cluster="lambda expression", file="StateMachine.cs"];
m7_63 [label="Entry Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", file="StateMachine.cs"];
m7_153 [label="Exit lambda expression", span="206-206", cluster="lambda expression", file="StateMachine.cs"];
m7_154 [label="Entry lambda expression", span="207-207", cluster="lambda expression", file="StateMachine.cs"];
m7_155 [label="x.Queue", span="207-207", cluster="lambda expression", file="StateMachine.cs"];
m7_91 [label="Assert.Equal(''State'', job.StateName)", span="111-111", cluster="lambda expression", file="StateMachine.cs"];
m7_212 [label="var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new SafeDictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList()", span="279-291", cluster="lambda expression", file="StateMachine.cs"];
m7_213 [label="return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };", span="293-300", cluster="lambda expression", file="StateMachine.cs"];
m7_214 [label="Exit lambda expression", span="266-302", cluster="lambda expression", file="StateMachine.cs"];
m7_419 [label=fetchedJobIds, span="", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="StateMachine.cs"];
m7_420 [label=string, span="", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="StateMachine.cs"];
m7_421 [label=sql, span="", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="StateMachine.cs"];
m7_391 [label="x.InsertToList(''my-key'', ''my-value'')", span="443-443", cluster="lambda expression", file="StateMachine.cs"];
m7_28 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="67-67", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="StateMachine.cs"];
m7_29 [label="new SqlServerWriteOnlyTransaction(ConnectionUtils.CreateConnection(), null)", span="38-38", cluster="lambda expression", file="StateMachine.cs"];
m7_30 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="67-67", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="StateMachine.cs"];
m7_142 [label="Exit lambda expression", span="140-140", cluster="lambda expression", file="StateMachine.cs"];
m7_102 [label="Exit lambda expression", span="97-124", cluster="lambda expression", file="StateMachine.cs"];
m7_377 [label="Entry lambda expression", span="426-426", cluster="lambda expression", file="StateMachine.cs"];
m7_378 [label="x.InsertToList(''my-key'', ''my-value'')", span="426-426", cluster="lambda expression", file="StateMachine.cs"];
m7_379 [label="Exit lambda expression", span="426-426", cluster="lambda expression", file="StateMachine.cs"];
m7_384 [label="Entry lambda expression", span="438-449", cluster="lambda expression", file="StateMachine.cs"];
m7_385 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                })", span="440-444", cluster="lambda expression", file="StateMachine.cs"];
m7_386 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="446-446", cluster="lambda expression", file="StateMachine.cs"];
m7_380 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="181-181", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="StateMachine.cs"];
m7_381 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="436-436", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="StateMachine.cs"];
m7_382 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="438-449", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="StateMachine.cs"];
m7_383 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="436-436", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="StateMachine.cs"];
m7_387 [label="Assert.Equal(2, recordCount)", span="448-448", cluster="lambda expression", file="StateMachine.cs"];
m7_237 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="141-141", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="StateMachine.cs"];
m7_238 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="253-253", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="StateMachine.cs"];
m7_239 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime)record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="255-269", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="StateMachine.cs"];
m7_449 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="195-195", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="StateMachine.cs"];
m7_527 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="621-621", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="StateMachine.cs"];
m7_528 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }));\r\n\r\n                var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="623-638", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="StateMachine.cs"];
m7_529 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="621-621", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="StateMachine.cs"];
m7_267 [label="x.GetJobQueueMonitoringApi().GetQueues()", span="361-361", cluster="lambda expression", file="StateMachine.cs"];
m7_268 [label="Exit lambda expression", span="361-361", cluster="lambda expression", file="StateMachine.cs"];
m7_269 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", span="22-22", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", file="StateMachine.cs"];
m7_368 [label=JobLoadException, span="493-493", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs"];
m7_369 [label="return null;", span="495-495", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs"];
m7_370 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="484-484", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs"];
m7_48 [label="new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    InProcessingState = ProcessingState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeNullableDateTime(stateData[''StartedAt'']),\r\n                }", span="85-91", cluster="lambda expression", file="StateMachine.cs"];
m7_404 [label="x.RemoveFromList(''my-key'', ''my-value'')", span="461-461", cluster="lambda expression", file="StateMachine.cs"];
m7_331 [label="var provider = _storage.QueueProviders.GetProvider(queueName)", span="428-428", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="StateMachine.cs"];
m7_332 [label="var monitoringApi = provider.GetJobQueueMonitoringApi()", span="429-429", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="StateMachine.cs"];
m7_333 [label="return monitoringApi;", span="431-431", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="StateMachine.cs"];
m7_152 [label="new { Monitoring = monitoring, Queue = queue }", span="206-206", cluster="lambda expression", file="StateMachine.cs"];
m7_250 [label="Exit lambda expression", span="255-269", cluster="lambda expression", file="StateMachine.cs"];
m7_343 [label="return DeserializeJobs(\r\n                sortedSqlJobs,\r\n                (sqlJob, job, stateData) => new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    InEnqueuedState = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueuedAt = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase)\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                });", span="457-467", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="StateMachine.cs"];
m7_305 [label="Exit lambda expression", span="392-392", cluster="lambda expression", file="StateMachine.cs"];
m7_306 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="397-397", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m7_307 [label="string sqlQuery =\r\n$@''select [Key], [Value] as [Count] from [{_storage.SchemaName}].AggregatedCounter with (nolock)\r\nwhere [Key] in @keys''", span="401-403", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m7_431 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="505-505", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="StateMachine.cs"];
m7_432 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                });\r\n\r\n                var records = sql.Query(''select * from HangFire.List'').ToArray();\r\n\r\n                Assert.Equal(2, records.Length);\r\n                Assert.Equal(''1'', records[0].Value);\r\n                Assert.Equal(''2'', records[1].Value);\r\n            })", span="507-523", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="StateMachine.cs"];
m7_433 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="505-505", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="StateMachine.cs"];
m7_196 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="201-201", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="StateMachine.cs"];
m7_197 [label="Entry lambda expression", span="203-217", cluster="lambda expression", file="StateMachine.cs"];
m7_198 [label="Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="205-205", cluster="lambda expression", file="StateMachine.cs"];
m7_406 [label="Hangfire.SqlServer.SqlServerMonitoringApi", span="", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="StateMachine.cs"];
m7_49 [label="Exit lambda expression", span="85-91", cluster="lambda expression", file="StateMachine.cs"];
m7_551 [label="var transaction = new SqlServerWriteOnlyTransaction(connection, _queueProviders)", span="653-653", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="StateMachine.cs"];
m7_552 [label="action(transaction)", span="655-655", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="StateMachine.cs"];
m7_553 [label="transaction.Commit()", span="656-656", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="StateMachine.cs"];
m7_554 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", span="649-649", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="StateMachine.cs"];
m7_345 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="390-401", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="StateMachine.cs"];
m7_243 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="259-259", cluster="lambda expression", file="StateMachine.cs"];
m7_244 [label="Assert.Equal(''my-key'', record.Key)", span="261-261", cluster="lambda expression", file="StateMachine.cs"];
m7_245 [label="Assert.Equal(-1, record.Value)", span="262-262", cluster="lambda expression", file="StateMachine.cs"];
m7_246 [label="Assert.NotNull(record.ExpireAt)", span="263-263", cluster="lambda expression", file="StateMachine.cs"];
m7_247 [label="var expireAt = (DateTime)record.ExpireAt", span="265-265", cluster="lambda expression", file="StateMachine.cs"];
m7_248 [label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="267-267", cluster="lambda expression", file="StateMachine.cs"];
m7_407 [label=int, span="", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="StateMachine.cs"];
m7_408 [label=int, span="", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="StateMachine.cs"];
m7_409 [label=int, span="", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="StateMachine.cs"];
m7_181 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="188-197", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="StateMachine.cs"];
m7_176 [label="Entry Unk.Enqueue", span="", cluster="Unk.Enqueue", file="StateMachine.cs"];
m7_177 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="178-178", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="StateMachine.cs"];
m7_178 [label="return connection\r\n                .Query(''select * from HangFire.Job where id = @id'', new { id = jobId })\r\n                .Single();", span="180-182", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="StateMachine.cs"];
m7_179 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="178-178", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="StateMachine.cs"];
m7_180 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="186-186", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="StateMachine.cs"];
m7_31 [label="Entry lambda expression", span="69-70", cluster="lambda expression", file="StateMachine.cs"];
m7_338 [label="Exit lambda expression", span="373-384", cluster="lambda expression", file="StateMachine.cs"];
m7_355 [label="Exit lambda expression", span="392-396", cluster="lambda expression", file="StateMachine.cs"];
m7_321 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="354-354", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="StateMachine.cs"];
m7_255 [label="stats.Enqueued = multi.ReadSingle<int>()", span="345-345", cluster="lambda expression", file="StateMachine.cs"];
m7_256 [label="stats.Failed = multi.ReadSingle<int>()", span="346-346", cluster="lambda expression", file="StateMachine.cs"];
m7_257 [label="stats.Processing = multi.ReadSingle<int>()", span="347-347", cluster="lambda expression", file="StateMachine.cs"];
m7_119 [label="Exit lambda expression", span="189-199", cluster="lambda expression", file="StateMachine.cs"];
m7_120 [label="Entry lambda expression", span="194-199", cluster="lambda expression", color=green, community=0, file="StateMachine.cs"];
m7_121 [label="new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    InDeletedState = DeletedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }", span="194-199", cluster="lambda expression", color=green, community=0, file="StateMachine.cs"];
m7_122 [label="Exit lambda expression", span="194-199", cluster="lambda expression", file="StateMachine.cs"];
m7_6 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="StateMachine.cs"];
m7_112 [label="x.SerializeData()", span="105-105", cluster="lambda expression", file="StateMachine.cs"];
m7_15 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", span="470-470", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="StateMachine.cs"];
m7_16 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="51-51", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="StateMachine.cs"];
m7_17 [label="var queueApi = GetQueueApi(queue)", span="53-53", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="StateMachine.cs"];
m7_18 [label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="54-54", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="StateMachine.cs"];
m7_293 [label="dates.Add(endDate)", span="388-388", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_294 [label="endDate = endDate.AddDays(-1)", span="389-389", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_295 [label="i++", span="386-386", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_160 [label="_queueProviders.Add(correctProvider.Object, new [] { ''default'' })", span="170-170", cluster="lambda expression", file="StateMachine.cs"];
m7_405 [label="Exit lambda expression", span="457-462", cluster="lambda expression", file="StateMachine.cs"];
m7_50 [label="Entry Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", file="StateMachine.cs"];
m7_7 [label="Entry Unk.nameof", span="", cluster="Unk.nameof", file="StateMachine.cs"];
m7_280 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="StateMachine.cs"];
m7_32 [label="GetNumberOfJobsByStateName(connection, FailedState.StateName)", span="70-70", cluster="lambda expression", file="StateMachine.cs"];
m7_34 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="73-73", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="StateMachine.cs"];
m7_33 [label="Exit lambda expression", span="69-70", cluster="lambda expression", file="StateMachine.cs"];
m7_35 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ProcessingState.StateName));", span="75-76", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="StateMachine.cs"];
m7_169 [label="Entry lambda expression", span="172-172", cluster="lambda expression", file="StateMachine.cs"];
m7_185 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="192-192", cluster="lambda expression", file="StateMachine.cs"];
m7_500 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="597-597", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="StateMachine.cs"];
m7_501 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="599-605", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="StateMachine.cs"];
m7_502 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="597-597", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="StateMachine.cs"];
m7_146 [label="Entry lambda expression", span="142-142", cluster="lambda expression", file="StateMachine.cs"];
m7_344 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", span="439-439", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="StateMachine.cs"];
m7_346 [label="Entry lambda expression", span="451-451", cluster="lambda expression", file="StateMachine.cs"];
m7_52 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="StateMachine.cs"];
m7_224 [label="x.Value", span="278-278", cluster="lambda expression", file="StateMachine.cs"];
m7_225 [label="Exit lambda expression", span="278-278", cluster="lambda expression", file="StateMachine.cs"];
m7_226 [label="Entry lambda expression", span="282-290", cluster="lambda expression", file="StateMachine.cs"];
m7_356 [label="Entry lambda expression", span="459-467", cluster="lambda expression", file="StateMachine.cs"];
m7_357 [label="new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    InEnqueuedState = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueuedAt = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase)\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                }", span="459-467", cluster="lambda expression", file="StateMachine.cs"];
m7_358 [label="Exit lambda expression", span="459-467", cluster="lambda expression", file="StateMachine.cs"];
m7_124 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="137-137", cluster="lambda expression", file="StateMachine.cs", color=green, community=0];
m7_125 [label="var state = new Mock<IState>()", span="139-139", cluster="lambda expression", file="StateMachine.cs", color=green, community=0];
m7_126 [label="state.Setup(x => x.Name).Returns(''State'')", span="140-140", cluster="lambda expression", file="StateMachine.cs"];
m7_127 [label="state.Setup(x => x.Reason).Returns(''Reason'')", span="141-141", cluster="lambda expression", file="StateMachine.cs", color=green, community=0];
m7_131 [label="Assert.Null(job.StateName)", span="148-148", cluster="lambda expression", file="StateMachine.cs", color=green, community=0];
m7_132 [label="Assert.Null(job.StateId)", span="149-149", cluster="lambda expression", file="StateMachine.cs"];
m7_128 [label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="142-143", cluster="lambda expression", file="StateMachine.cs"];
m7_129 [label="Commit(sql, x => x.AddJobState(jobId, state.Object))", span="145-145", cluster="lambda expression", file="StateMachine.cs"];
m7_130 [label="var job = GetTestJob(sql, jobId)", span="147-147", cluster="lambda expression", file="StateMachine.cs"];
m7_133 [label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="151-151", cluster="lambda expression", file="StateMachine.cs"];
m7_441 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="StateMachine.cs"];
m7_137 [label="Assert.NotNull(jobState.CreatedAt)", span="155-155", cluster="lambda expression", file="StateMachine.cs"];
m7_299 [label="Assert.Equal(1, recordCount)", span="334-334", cluster="lambda expression", file="StateMachine.cs"];
m7_319 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="397-397", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m7_320 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="StateMachine.cs"];
m7_389 [label="Entry lambda expression", span="440-444", cluster="lambda expression", file="StateMachine.cs"];
m7_5 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", span="37-37", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="StateMachine.cs"];
m7_371 [label="Entry lambda expression", span="424-432", cluster="lambda expression", file="StateMachine.cs"];
m7_0 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="16-16", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="StateMachine.cs"];
m7_1 [label="var defaultProvider = new Mock<IPersistentJobQueueProvider>()", span="18-18", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="StateMachine.cs"];
m7_2 [label="defaultProvider.Setup(x => x.GetJobQueue(It.IsNotNull<IDbConnection>()))\r\n                .Returns(new Mock<IPersistentJobQueue>().Object)", span="19-20", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="StateMachine.cs"];
m7_3 [label="_queueProviders = new PersistentJobQueueProviderCollection(defaultProvider.Object)", span="22-22", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="StateMachine.cs"];
m7_4 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="16-16", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="StateMachine.cs"];
m7_555 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="50-50", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="StateMachine.cs"];
m7_114 [label="Entry Unk.SerializeData", span="", cluster="Unk.SerializeData", file="StateMachine.cs"];
m7_115 [label="Entry lambda expression", span="108-108", cluster="lambda expression", file="StateMachine.cs"];
m7_116 [label="x.SetJobState(jobId, state.Object)", span="108-108", cluster="lambda expression", file="StateMachine.cs"];
m7_281 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="305-305", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="StateMachine.cs"];
m7_229 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="244-244", cluster="lambda expression", file="StateMachine.cs"];
m7_173 [label="Entry lambda expression", span="240-240", cluster="lambda expression", file="StateMachine.cs"];
m7_12 [label="Entry lambda expression", span="47-48", cluster="lambda expression", file="StateMachine.cs"];
m7_13 [label="Entry Unk.>", span="", cluster="Unk.>", file="StateMachine.cs"];
m7_14 [label="Entry Unk.GetJobQueue", span="", cluster="Unk.GetJobQueue", file="StateMachine.cs"];
m7_37 [label="Entry lambda expression", span="75-76", cluster="lambda expression", file="StateMachine.cs"];
m7_38 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="53-53", cluster="lambda expression", file="StateMachine.cs"];
m7_39 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="54-54", cluster="lambda expression", file="StateMachine.cs"];
m7_44 [label="Assert.Null(anotherJob.ExpireAt)", span="62-62", cluster="lambda expression", file="StateMachine.cs"];
m7_43 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="61-61", cluster="lambda expression", file="StateMachine.cs"];
m7_45 [label="Exit lambda expression", span="51-63", cluster="lambda expression", file="StateMachine.cs"];
m7_47 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="StateMachine.cs"];
m7_58 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)", file="StateMachine.cs"];
m7_57 [label="Exit lambda expression", span="56-56", cluster="lambda expression", file="StateMachine.cs"];
m7_59 [label="Entry Unk.ExpireJob", span="", cluster="Unk.ExpireJob", file="StateMachine.cs"];
m7_67 [label="Commit(sql, x => x.PersistJob(jobId))", span="79-79", cluster="lambda expression", file="StateMachine.cs"];
m7_68 [label="var job = GetTestJob(sql, jobId)", span="81-81", cluster="lambda expression", file="StateMachine.cs"];
m7_69 [label="Assert.Null(job.ExpireAt)", span="82-82", cluster="lambda expression", file="StateMachine.cs"];
m7_74 [label="Entry lambda expression", span="79-79", cluster="lambda expression", file="StateMachine.cs"];
m7_75 [label="x.PersistJob(jobId)", span="79-79", cluster="lambda expression", file="StateMachine.cs"];
m7_76 [label="Exit lambda expression", span="79-79", cluster="lambda expression", file="StateMachine.cs"];
m7_81 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="90-90", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="StateMachine.cs"];
m7_82 [label="Entry lambda expression", span="97-124", cluster="lambda expression", color=red, community=0, file="StateMachine.cs"];
m7_83 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="99-99", cluster="lambda expression", file="StateMachine.cs"];
m7_84 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="100-100", cluster="lambda expression", file="StateMachine.cs"];
m7_86 [label="state.Setup(x => x.Name).Returns(''State'')", span="103-103", cluster="lambda expression", color=red, community=0, file="StateMachine.cs"];
m7_87 [label="state.Setup(x => x.Reason).Returns(''Reason'')", span="104-104", cluster="lambda expression", file="StateMachine.cs"];
m7_85 [label="var state = new Mock<IState>()", span="102-102", cluster="lambda expression", color=red, community=0, file="StateMachine.cs"];
m7_88 [label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="105-106", cluster="lambda expression", file="StateMachine.cs"];
m7_97 [label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="119-119", cluster="lambda expression", color=red, community=0, file="StateMachine.cs"];
m7_96 [label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="118-118", cluster="lambda expression", file="StateMachine.cs"];
m7_98 [label="Assert.Equal(''State'', jobState.Name)", span="120-120", cluster="lambda expression", file="StateMachine.cs"];
m7_99 [label="Assert.Equal(''Reason'', jobState.Reason)", span="121-121", cluster="lambda expression", file="StateMachine.cs"];
m7_100 [label="Assert.NotNull(jobState.CreatedAt)", span="122-122", cluster="lambda expression", color=red, community=0, file="StateMachine.cs"];
m7_101 [label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="123-123", cluster="lambda expression", file="StateMachine.cs"];
m7_107 [label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    InSucceededState = SucceededState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Result = stateData[''Result''],\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                })", span="170-184", cluster="lambda expression", color=red, community=0, file="StateMachine.cs"];
m7_106 [label="Entry lambda expression", span="170-184", cluster="lambda expression", file="StateMachine.cs"];
m7_108 [label="Entry lambda expression", span="104-104", cluster="lambda expression", file="StateMachine.cs"];
m7_109 [label="x.Reason", span="104-104", cluster="lambda expression", file="StateMachine.cs"];
m7_110 [label="Exit lambda expression", span="104-104", cluster="lambda expression", file="StateMachine.cs"];
m7_111 [label="Entry lambda expression", span="105-105", cluster="lambda expression", file="StateMachine.cs"];
m7_118 [label="Entry Unk.SetJobState", span="", cluster="Unk.SetJobState", file="StateMachine.cs"];
m7_117 [label="Exit lambda expression", span="108-108", cluster="lambda expression", file="StateMachine.cs"];
m7_143 [label="Entry lambda expression", span="205-205", cluster="lambda expression", file="StateMachine.cs"];
m7_147 [label="x.SerializeData()", span="142-142", cluster="lambda expression", file="StateMachine.cs"];
m7_151 [label="Exit lambda expression", span="145-145", cluster="lambda expression", file="StateMachine.cs"];
m7_158 [label="var correctProvider = new Mock<IPersistentJobQueueProvider>()", span="166-166", cluster="lambda expression", file="StateMachine.cs"];
m7_157 [label="var correctJobQueue = new Mock<IPersistentJobQueue>()", span="165-165", cluster="lambda expression", file="StateMachine.cs"];
m7_144 [label="x.Reason", span="141-141", cluster="lambda expression", file="StateMachine.cs", color=green, community=0];
m7_145 [label="Exit lambda expression", span="205-205", cluster="lambda expression", file="StateMachine.cs"];
m7_148 [label="Exit lambda expression", span="142-142", cluster="lambda expression", file="StateMachine.cs"];
m7_149 [label="Entry lambda expression", span="145-145", cluster="lambda expression", file="StateMachine.cs"];
m7_156 [label="Entry lambda expression", span="163-175", cluster="lambda expression", file="StateMachine.cs"];
m7_159 [label="correctProvider.Setup(x => x.GetJobQueue(It.IsNotNull<IDbConnection>()))\r\n                    .Returns(correctJobQueue.Object)", span="167-168", cluster="lambda expression", file="StateMachine.cs"];
m7_161 [label="Commit(sql, x => x.AddToQueue(''default'', ''1''))", span="172-172", cluster="lambda expression", file="StateMachine.cs"];
m7_162 [label="correctJobQueue.Verify(x => x.Enqueue(''default'', ''1''))", span="174-174", cluster="lambda expression", file="StateMachine.cs"];
m7_163 [label="Exit lambda expression", span="163-175", cluster="lambda expression", file="StateMachine.cs"];
m7_171 [label="Exit lambda expression", span="172-172", cluster="lambda expression", file="StateMachine.cs"];
m7_170 [label="x.AddToQueue(''default'', ''1'')", span="172-172", cluster="lambda expression", file="StateMachine.cs"];
m7_172 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="119-119", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="StateMachine.cs"];
m7_174 [label="x.Enqueue(''default'', ''1'')", span="174-174", cluster="lambda expression", file="StateMachine.cs"];
m7_175 [label="Exit lambda expression", span="174-174", cluster="lambda expression", file="StateMachine.cs"];
m7_183 [label="Entry lambda expression", span="188-197", cluster="lambda expression", file="StateMachine.cs"];
m7_182 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="186-186", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="StateMachine.cs"];
m7_184 [label="Commit(sql, x => x.IncrementCounter(''my-key''))", span="190-190", cluster="lambda expression", file="StateMachine.cs"];
m7_186 [label="Assert.Equal(''my-key'', record.Key)", span="194-194", cluster="lambda expression", file="StateMachine.cs"];
m7_187 [label="Assert.Equal(1, record.Value)", span="195-195", cluster="lambda expression", file="StateMachine.cs"];
m7_188 [label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="196-196", cluster="lambda expression", file="StateMachine.cs"];
m7_192 [label="Exit lambda expression", span="190-190", cluster="lambda expression", file="StateMachine.cs"];
m7_193 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="127-127", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="StateMachine.cs"];
m7_194 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="201-201", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="StateMachine.cs"];
m7_199 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="207-207", cluster="lambda expression", file="StateMachine.cs"];
m7_200 [label="Assert.Equal(''my-key'', record.Key)", span="209-209", cluster="lambda expression", file="StateMachine.cs"];
m7_201 [label="Assert.Equal(1, record.Value)", span="210-210", cluster="lambda expression", file="StateMachine.cs"];
m7_207 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="StateMachine.cs"];
m7_205 [label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="216-216", cluster="lambda expression", file="StateMachine.cs"];
m7_206 [label="Exit lambda expression", span="203-217", cluster="lambda expression", file="StateMachine.cs"];
m7_208 [label="Entry lambda expression", span="205-205", cluster="lambda expression", file="StateMachine.cs"];
m7_211 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="134-134", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="StateMachine.cs"];
m7_209 [label="x.IncrementCounter(''my-key'', TimeSpan.FromDays(1))", span="205-205", cluster="lambda expression", file="StateMachine.cs"];
m7_210 [label="Exit lambda expression", span="205-205", cluster="lambda expression", file="StateMachine.cs"];
m7_220 [label="Entry lambda expression", span="225-229", cluster="lambda expression", file="StateMachine.cs"];
m7_223 [label="Exit lambda expression", span="225-229", cluster="lambda expression", file="StateMachine.cs"];
m7_221 [label="x.IncrementCounter(''my-key'')", span="227-227", cluster="lambda expression", file="StateMachine.cs"];
m7_222 [label="x.IncrementCounter(''my-key'')", span="228-228", cluster="lambda expression", file="StateMachine.cs"];
m7_227 [label="Entry lambda expression", span="240-249", cluster="lambda expression", file="StateMachine.cs"];
m7_228 [label="Commit(sql, x => x.DecrementCounter(''my-key''))", span="242-242", cluster="lambda expression", file="StateMachine.cs"];
m7_234 [label="Entry lambda expression", span="242-242", cluster="lambda expression", file="StateMachine.cs"];
m7_235 [label="x.DecrementCounter(''my-key'')", span="242-242", cluster="lambda expression", file="StateMachine.cs"];
m7_236 [label="Exit lambda expression", span="242-242", cluster="lambda expression", file="StateMachine.cs"];
m7_240 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="253-253", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="StateMachine.cs"];
m7_241 [label="Entry lambda expression", span="255-269", cluster="lambda expression", file="StateMachine.cs"];
m7_242 [label="Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="257-257", cluster="lambda expression", file="StateMachine.cs"];
m7_254 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="148-148", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="StateMachine.cs"];
m7_252 [label="x.DecrementCounter(''my-key'', TimeSpan.FromDays(1))", span="257-257", cluster="lambda expression", file="StateMachine.cs"];
m7_266 [label="Exit lambda expression", span="277-281", cluster="lambda expression", file="StateMachine.cs"];
m7_253 [label="Exit lambda expression", span="257-257", cluster="lambda expression", file="StateMachine.cs"];
m7_258 [label="Entry lambda expression", span="275-286", cluster="lambda expression", file="StateMachine.cs"];
m7_259 [label="Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                })", span="277-281", cluster="lambda expression", file="StateMachine.cs"];
m7_260 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="283-283", cluster="lambda expression", file="StateMachine.cs"];
m7_261 [label="Assert.Equal(2, recordCount)", span="285-285", cluster="lambda expression", file="StateMachine.cs"];
m7_262 [label="Exit lambda expression", span="275-286", cluster="lambda expression", file="StateMachine.cs"];
m7_263 [label="Entry lambda expression", span="277-281", cluster="lambda expression", file="StateMachine.cs"];
m7_264 [label="x.DecrementCounter(''my-key'')", span="279-279", cluster="lambda expression", file="StateMachine.cs"];
m7_283 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="305-305", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="StateMachine.cs"];
m7_282 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="307-318", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="StateMachine.cs"];
m7_286 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="315-315", cluster="lambda expression", file="StateMachine.cs"];
m7_284 [label="Entry lambda expression", span="307-318", cluster="lambda expression", file="StateMachine.cs"];
m7_287 [label="Assert.Equal(2, recordCount)", span="317-317", cluster="lambda expression", file="StateMachine.cs"];
m7_288 [label="Exit lambda expression", span="307-318", cluster="lambda expression", file="StateMachine.cs"];
m7_301 [label="Entry lambda expression", span="326-330", cluster="lambda expression", file="StateMachine.cs"];
m7_300 [label="Exit lambda expression", span="324-335", cluster="lambda expression", file="StateMachine.cs"];
m7_303 [label="x.AddToSet(''my-key'', ''my-value'')", span="329-329", cluster="lambda expression", file="StateMachine.cs"];
m7_302 [label="x.AddToSet(''my-key'', ''my-value'')", span="328-328", cluster="lambda expression", file="StateMachine.cs"];
m7_304 [label="Exit lambda expression", span="326-330", cluster="lambda expression", file="StateMachine.cs"];
m7_325 [label="Assert.Equal(3.2, record.Score, 3)", span="366-366", cluster="lambda expression", file="StateMachine.cs"];
m7_328 [label="x.AddToSet(''my-key'', ''my-value'')", span="360-360", cluster="lambda expression", file="StateMachine.cs"];
m7_326 [label="Exit lambda expression", span="356-367", cluster="lambda expression", file="StateMachine.cs"];
m7_327 [label="Entry lambda expression", span="358-362", cluster="lambda expression", file="StateMachine.cs"];
m7_329 [label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="361-361", cluster="lambda expression", file="StateMachine.cs"];
m7_330 [label="Exit lambda expression", span="358-362", cluster="lambda expression", file="StateMachine.cs"];
m7_349 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="398-398", cluster="lambda expression", file="StateMachine.cs"];
m7_353 [label="x.AddToSet(''my-key'', ''my-value'')", span="394-394", cluster="lambda expression", file="StateMachine.cs"];
m7_352 [label="Entry lambda expression", span="392-396", cluster="lambda expression", file="StateMachine.cs"];
m7_347 [label="Entry lambda expression", span="390-401", cluster="lambda expression", file="StateMachine.cs"];
m7_348 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                })", span="392-396", cluster="lambda expression", file="StateMachine.cs"];
m7_350 [label="Assert.Equal(1, recordCount)", span="400-400", cluster="lambda expression", file="StateMachine.cs"];
m7_351 [label="Exit lambda expression", span="390-401", cluster="lambda expression", file="StateMachine.cs"];
m7_354 [label="x.RemoveFromSet(''my-key'', ''different-value'')", span="395-395", cluster="lambda expression", file="StateMachine.cs"];
m7_123 [label="Entry Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7", cluster="Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", file="StateMachine.cs"];
m7_150 [label="Entry Unk.GetQueues", span="", cluster="Unk.GetQueues", file="StateMachine.cs"];
m7_134 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="StateMachine.cs"];
m7_21 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="426-426", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="StateMachine.cs"];
m7_40 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="79-79", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="StateMachine.cs"];
m7_41 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    InProcessingState = ProcessingState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeNullableDateTime(stateData[''StartedAt'']),\r\n                }));", span="81-91", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="StateMachine.cs"];
m7_70 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", span="382-382", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_89 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="StateMachine.cs"];
m7_93 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="149-149", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="StateMachine.cs"];
m7_216 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="StateMachine.cs"];
m7_271 [label="var dates = new List<DateTime>()", span="370-370", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_285 [label="Entry System.DateTime.ToString(string)", span="0-0", cluster="System.DateTime.ToString(string)", file="StateMachine.cs"];
m7_297 [label="return GetTimelineStats(connection, keyMaps);", span="394-394", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_309 [label="keyMaps.Keys", span="411-411", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m7_323 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="StateMachine.cs"];
m7_335 [label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53", cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="StateMachine.cs"];
m7_360 [label="var sqlQuery = _jobListLimit.HasValue\r\n                ? $@''select count(j.Id) from (select top (@limit) Id from [{_storage.SchemaName}].Job with (nolock) where StateName = @state) as j''\r\n                : $@''select count(Id) from [{_storage.SchemaName}].Job with (nolock) where StateName = @state''", span="472-474", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="StateMachine.cs"];
m7_397 [label="var result = new List<KeyValuePair<string, FetchedJobDto>>(jobs.Count)", span="571-571", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="StateMachine.cs"];
m7_411 [label=int, span="", cluster="lambda expression", file="StateMachine.cs"];
m7_423 [label=string, span="", cluster="lambda expression", file="StateMachine.cs"];
m7_435 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                })", span="509-516", cluster="lambda expression", file="StateMachine.cs"];
m7_454 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="531-537", cluster="lambda expression", file="StateMachine.cs"];
m7_468 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="550-554", cluster="lambda expression", file="StateMachine.cs"];
m7_480 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                })", span="567-571", cluster="lambda expression", file="StateMachine.cs"];
m7_492 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                })", span="584-588", cluster="lambda expression", file="StateMachine.cs"];
m7_504 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())))", span="601-602", cluster="lambda expression", file="StateMachine.cs"];
m7_508 [label="Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()))", span="602-602", cluster="lambda expression", file="StateMachine.cs"];
m7_518 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)))", span="613-614", cluster="lambda expression", file="StateMachine.cs"];
m7_522 [label="Commit(sql, x => x.SetRangeInHash(''some-hash'', null))", span="614-614", cluster="lambda expression", file="StateMachine.cs"];
m7_531 [label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }))", span="625-629", cluster="lambda expression", file="StateMachine.cs"];
m7_139 [label="Entry Unk.GetEnqueuedJobIds", span="", cluster="Unk.GetEnqueuedJobIds", file="StateMachine.cs"];
m7_65 [label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''succeeded''));", span="111-112", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="StateMachine.cs"];
m7_66 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="109-109", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="StateMachine.cs"];
m7_272 [label="var i = 0", span="371-371", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_310 [label="!valuesMap.ContainsKey(key)", span="413-413", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m7_324 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", file="StateMachine.cs"];
m7_373 [label="string jobsSql = \r\n$@'';with cte as \r\n(\r\n  select j.Id, row_number() over (order by j.Id desc) as row_num\r\n  from [{_storage.SchemaName}].Job j with (nolock, forceseek)\r\n  where j.StateName = @stateName\r\n)\r\nselect j.*, s.Reason as StateReason, s.Data as StateData\r\nfrom [{_storage.SchemaName}].Job j with (nolock)\r\ninner join cte on cte.Id = j.Id \r\nleft join [{_storage.SchemaName}].State s with (nolock) on j.StateId = s.Id\r\nwhere cte.row_num between @start and @end\r\norder by j.Id desc''", span="506-518", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs"];
m7_436 [label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="518-518", cluster="lambda expression", file="StateMachine.cs"];
m7_532 [label="var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="631-634", cluster="lambda expression", file="StateMachine.cs"];
m7_217 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="StateMachine.cs"];
m7_298 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", span="382-382", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_336 [label="return _storage.UseConnection(action);", span="436-436", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", file="StateMachine.cs"];
m7_361 [label="var count = connection.ExecuteScalar<int>(\r\n                 sqlQuery,\r\n                 new { state = stateName, limit = _jobListLimit },\r\n                 commandTimeout: _storage.CommandTimeout)", span="476-479", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="StateMachine.cs"];
m7_398 [label=jobs, span="574-574", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="StateMachine.cs"];
m7_412 [label=int, span="", cluster="lambda expression", file="StateMachine.cs"];
m7_424 [label=jobs, span="", cluster="lambda expression", file="StateMachine.cs"];
m7_455 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="539-539", cluster="lambda expression", file="StateMachine.cs"];
m7_469 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="556-556", cluster="lambda expression", file="StateMachine.cs"];
m7_481 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="573-573", cluster="lambda expression", file="StateMachine.cs"];
m7_493 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="590-590", cluster="lambda expression", file="StateMachine.cs"];
m7_135 [label="Entry Unk.SelectMany", span="", cluster="Unk.SelectMany", file="StateMachine.cs"];
m7_140 [label="Entry Unk.GetEnqueuedAndFetchedCount", span="", cluster="Unk.GetEnqueuedAndFetchedCount", file="StateMachine.cs"];
m7_94 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    InFailedState = FailedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }));", span="151-165", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="StateMachine.cs", color=red, community=0];
m7_95 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="149-149", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="StateMachine.cs"];
m7_55 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    InScheduledState = ScheduledState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueueAt = JobHelper.DeserializeNullableDateTime(stateData[''EnqueueAt'']) ?? DateTime.MinValue,\r\n                    ScheduledAt = JobHelper.DeserializeNullableDateTime(stateData[''ScheduledAt''])\r\n                }));", span="96-106", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="StateMachine.cs"];
m7_42 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="79-79", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="StateMachine.cs"];
m7_64 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="109-109", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="StateMachine.cs"];
m7_71 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="115-115", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="StateMachine.cs"];
m7_92 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="StateMachine.cs"];
m7_190 [label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''succeeded''));", span="254-255", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="StateMachine.cs"];
m7_215 [label="Entry Unk.QueryMultiple", span="", cluster="Unk.QueryMultiple", file="StateMachine.cs"];
m7_251 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="StateMachine.cs"];
m7_270 [label="var endDate = DateTime.UtcNow", span="369-369", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_277 [label="var keyMaps = dates.ToDictionary(x => $''stats:{type}:{x.ToString(''yyyy-MM-dd-HH'')}'', x => x)", span="377-377", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_289 [label="var endDate = DateTime.UtcNow.Date", span="384-384", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_296 [label="var keyMaps = dates.ToDictionary(x => $''stats:{type}:{x.ToString(''yyyy-MM-dd'')}'', x => x)", span="392-392", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_308 [label="var valuesMap = connection.Query(\r\n                sqlQuery,\r\n                new { keys = keyMaps.Keys },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="405-409", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m7_315 [label="var value = valuesMap[keyMaps.ElementAt(i).Key]", span="419-419", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m7_322 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="StateMachine.cs"];
m7_334 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="426-426", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="StateMachine.cs"];
m7_339 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", span="439-439", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="StateMachine.cs"];
m7_359 [label="Entry Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", file="StateMachine.cs"];
m7_364 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="484-484", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs"];
m7_396 [label="var jobs = connection.Query<SqlJob>(\r\n                fetchedJobsSql,\r\n                new { jobIds = jobIds },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToList()", span="565-569", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="StateMachine.cs"];
m7_401 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", span="557-557", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="StateMachine.cs"];
m7_410 [label=int, span="", cluster="lambda expression", file="StateMachine.cs"];
m7_415 [label=int, span="", cluster="lambda expression", file="StateMachine.cs"];
m7_422 [label=string, span="", cluster="lambda expression", file="StateMachine.cs"];
m7_427 [label="Entry lambda expression", span="492-496", cluster="lambda expression", file="StateMachine.cs"];
m7_434 [label="Entry lambda expression", span="507-523", cluster="lambda expression", file="StateMachine.cs"];
m7_442 [label="Entry lambda expression", span="509-516", cluster="lambda expression", file="StateMachine.cs"];
m7_453 [label="Entry lambda expression", span="529-542", cluster="lambda expression", file="StateMachine.cs"];
m7_458 [label="Entry lambda expression", span="531-537", cluster="lambda expression", file="StateMachine.cs"];
m7_467 [label="Entry lambda expression", span="548-559", cluster="lambda expression", file="StateMachine.cs"];
m7_472 [label="Entry lambda expression", span="550-554", cluster="lambda expression", file="StateMachine.cs"];
m7_479 [label="Entry lambda expression", span="565-576", cluster="lambda expression", file="StateMachine.cs"];
m7_484 [label="Entry lambda expression", span="567-571", cluster="lambda expression", file="StateMachine.cs"];
m7_491 [label="Entry lambda expression", span="582-593", cluster="lambda expression", file="StateMachine.cs"];
m7_496 [label="Entry lambda expression", span="584-588", cluster="lambda expression", file="StateMachine.cs"];
m7_503 [label="Entry lambda expression", span="599-605", cluster="lambda expression", file="StateMachine.cs"];
m7_505 [label="Assert.Equal(''key'', exception.ParamName)", span="604-604", cluster="lambda expression", file="StateMachine.cs"];
m7_507 [label="Entry lambda expression", span="602-602", cluster="lambda expression", file="StateMachine.cs"];
m7_509 [label="Exit lambda expression", span="602-602", cluster="lambda expression", file="StateMachine.cs"];
m7_510 [label="Entry lambda expression", span="602-602", cluster="lambda expression", file="StateMachine.cs"];
m7_517 [label="Entry lambda expression", span="611-617", cluster="lambda expression", file="StateMachine.cs"];
m7_519 [label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="616-616", cluster="lambda expression", file="StateMachine.cs"];
m7_521 [label="Entry lambda expression", span="614-614", cluster="lambda expression", file="StateMachine.cs"];
m7_523 [label="Exit lambda expression", span="614-614", cluster="lambda expression", file="StateMachine.cs"];
m7_524 [label="Entry lambda expression", span="614-614", cluster="lambda expression", file="StateMachine.cs"];
m7_530 [label="Entry lambda expression", span="623-638", cluster="lambda expression", file="StateMachine.cs"];
m7_537 [label="Entry lambda expression", span="625-629", cluster="lambda expression", file="StateMachine.cs"];
m7_138 [label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span="", cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="StateMachine.cs"];
m7_136 [label="Entry Unk.OrderBy", span="", cluster="Unk.OrderBy", file="StateMachine.cs"];
m7_56 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="94-94", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="StateMachine.cs"];
m7_202 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="264-264", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="StateMachine.cs"];
m7_203 [label="return UseConnection(connection =>\r\n            {\r\n                string sql = $@''\r\nselect * from [{_storage.SchemaName}].Job with (nolock) where Id = @id\r\nselect * from [{_storage.SchemaName}].JobParameter with (nolock) where JobId = @id\r\nselect * from [{_storage.SchemaName}].State with (nolock) where JobId = @id order by Id desc'';\r\n\r\n                using (var multi = connection.QueryMultiple(sql, new { id = jobId }, commandTimeout: _storage.CommandTimeout))\r\n                {\r\n                    var job = multi.Read<SqlJob>().SingleOrDefault();\r\n                    if (job == null) return null;\r\n\r\n                    var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value);\r\n                    var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new SafeDictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList();\r\n\r\n                    return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };\r\n                }\r\n            });", span="266-302", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="StateMachine.cs"];
m7_231 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="305-305", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="StateMachine.cs"];
m7_232 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, SucceededState.StateName));", span="307-308", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="StateMachine.cs"];
m7_273 [label="i < 24", span="371-371", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_274 [label="dates.Add(endDate)", span="373-373", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_275 [label="endDate = endDate.AddHours(-1)", span="374-374", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_311 [label="valuesMap.Add(key, 0)", span="413-413", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m7_312 [label="var result = new Dictionary<DateTime, long>()", span="416-416", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m7_313 [label="var i = 0", span="417-417", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m7_374 [label="var jobs = connection.Query<SqlJob>(\r\n                        jobsSql,\r\n                        new { stateName = stateName, start = @from + 1, end = @from + count },\r\n                        commandTimeout: _storage.CommandTimeout)\r\n                        .ToList()", span="520-524", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs"];
m7_375 [label="return DeserializeJobs(jobs, selector);", span="526-526", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs"];
m7_437 [label="Assert.Equal(2, records.Length)", span="520-520", cluster="lambda expression", file="StateMachine.cs"];
m7_438 [label="Assert.Equal(''1'', records[0].Value)", span="521-521", cluster="lambda expression", file="StateMachine.cs"];
m7_439 [label="Assert.Equal(''2'', records[1].Value)", span="522-522", cluster="lambda expression", file="StateMachine.cs"];
m7_533 [label="Assert.Equal(''Value1'', result[''Key1''])", span="636-636", cluster="lambda expression", file="StateMachine.cs"];
m7_540 [label="Entry lambda expression", span="634-634", cluster="lambda expression", file="StateMachine.cs"];
m7_543 [label="Entry lambda expression", span="634-634", cluster="lambda expression", file="StateMachine.cs"];
m7_534 [label="Assert.Equal(''Value2'', result[''Key2''])", span="637-637", cluster="lambda expression", file="StateMachine.cs"];
m7_218 [label="Entry Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22", cluster="Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", file="StateMachine.cs"];
m7_337 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", span="434-434", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", file="StateMachine.cs"];
m7_362 [label="return count;", span="481-481", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="StateMachine.cs"];
m7_399 [label="result.Add(new KeyValuePair<string, FetchedJobDto>(\r\n                    job.Id.ToString(),\r\n                    new FetchedJobDto\r\n                    {\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        State = job.StateName,\r\n                    }))", span="576-582", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="StateMachine.cs"];
m7_413 [label=int, span="", cluster="lambda expression", file="StateMachine.cs"];
m7_425 [label="Assert.Equal(1, recordCount)", span="500-500", cluster="lambda expression", file="StateMachine.cs"];
m7_456 [label="Assert.Equal(2, recordCount)", span="541-541", cluster="lambda expression", file="StateMachine.cs"];
m7_470 [label="Assert.Equal(0, recordCount)", span="558-558", cluster="lambda expression", file="StateMachine.cs"];
m7_482 [label="Assert.Equal(0, recordCount)", span="575-575", cluster="lambda expression", file="StateMachine.cs"];
m7_494 [label="Assert.Equal(1, recordCount)", span="592-592", cluster="lambda expression", file="StateMachine.cs"];
m7_141 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection", file="StateMachine.cs"];
m7_511 [label="x.SetRangeInHash(null, new Dictionary<string, string>())", span="602-602", cluster="lambda expression", file="StateMachine.cs"];
m7_538 [label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="625-629", cluster="lambda expression", file="StateMachine.cs"];
m7_105 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="168-168", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="StateMachine.cs"];
m7_166 [label="var enqueuedJobIds = queueApi.GetEnqueuedJobIds(queue, from, perPage)", span="237-237", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="StateMachine.cs"];
m7_11 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", span="434-434", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", file="StateMachine.cs"];
m7_167 [label="return UseConnection(connection => EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray()));", span="240-240", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="StateMachine.cs"];
m7_72 [label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''failed''));", span="117-118", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="StateMachine.cs"];
m7_189 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="252-252", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="StateMachine.cs"];
m7_191 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="252-252", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="StateMachine.cs"];
m7_219 [label="Entry Unk.DeserializeJob", span="", cluster="Unk.DeserializeJob", file="StateMachine.cs"];
m7_233 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="305-305", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="StateMachine.cs"];
m7_265 [label="Entry Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18", cluster="Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", file="StateMachine.cs"];
m7_276 [label="i++", span="371-371", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_279 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", span="367-367", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_278 [label="return GetTimelineStats(connection, keyMaps);", span="379-379", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_292 [label="i < 7", span="386-386", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_290 [label="var dates = new List<DateTime>()", span="385-385", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_291 [label="var i = 0", span="386-386", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="StateMachine.cs"];
m7_314 [label="i < keyMaps.Count", span="417-417", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m7_317 [label="i++", span="417-417", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m7_316 [label="result.Add(keyMaps.ElementAt(i).Value, value)", span="420-420", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m7_342 [label="var sortedSqlJobs = jobIds\r\n                .Select(jobId => jobs.ContainsKey(jobId) ? jobs[jobId] : new SqlJob { Id = jobId })\r\n                .ToList()", span="453-455", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="StateMachine.cs"];
m7_340 [label="string enqueuedJobsSql = \r\n$@''select j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom [{_storage.SchemaName}].Job j with (nolock)\r\nleft join [{_storage.SchemaName}].State s with (nolock) on s.Id = j.StateId\r\nwhere j.Id in @jobIds''", span="441-445", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="StateMachine.cs"];
m7_341 [label="var jobs = connection.Query<SqlJob>(\r\n                enqueuedJobsSql,\r\n                new { jobIds = jobIds },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToDictionary(x => x.Id, x => x)", span="447-451", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="StateMachine.cs"];
m7_363 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", span="470-470", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="StateMachine.cs"];
m7_367 [label="return data.Deserialize();", span="491-491", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs"];
m7_365 [label="var data = JobHelper.FromJson<InvocationData>(invocationData)", span="486-486", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs"];
m7_366 [label="data.Arguments = arguments", span="487-487", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="StateMachine.cs"];
m7_376 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="499-499", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="StateMachine.cs"];
m7_388 [label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0", cluster="System.Collections.Generic.List<T>.List(int)", file="StateMachine.cs"];
m7_392 [label="Entry long.ToString()", span="0-0", cluster="long.ToString()", file="StateMachine.cs"];
m7_400 [label="return new JobList<FetchedJobDto>(result);", span="585-585", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="StateMachine.cs"];
m7_402 [label="Entry List<KeyValuePair<string, FetchedJobDto>>.cstr", span="", cluster="List<KeyValuePair<string, FetchedJobDto>>.cstr", file="StateMachine.cs"];
m7_403 [label="Entry KeyValuePair<string, FetchedJobDto>.cstr", span="", cluster="KeyValuePair<string, FetchedJobDto>.cstr", file="StateMachine.cs"];
m7_414 [label=int, span="", cluster="lambda expression", file="StateMachine.cs"];
m7_418 [label=enqueuedJobIds, span="", cluster="lambda expression", file="StateMachine.cs"];
m7_416 [label=int, span="", cluster="lambda expression", file="StateMachine.cs"];
m7_417 [label=enqueuedJobIds, span="", cluster="lambda expression", file="StateMachine.cs"];
m7_426 [label="Exit lambda expression", span="490-501", cluster="lambda expression", file="StateMachine.cs"];
m7_430 [label="Exit lambda expression", span="492-496", cluster="lambda expression", file="StateMachine.cs"];
m7_428 [label="x.InsertToList(''my-key'', ''my-value'')", span="494-494", cluster="lambda expression", file="StateMachine.cs"];
m7_429 [label="x.RemoveFromList(''different-key'', ''my-value'')", span="495-495", cluster="lambda expression", file="StateMachine.cs"];
m7_440 [label="Exit lambda expression", span="507-523", cluster="lambda expression", file="StateMachine.cs"];
m7_448 [label="Exit lambda expression", span="509-516", cluster="lambda expression", file="StateMachine.cs"];
m7_443 [label="x.InsertToList(''my-key'', ''0'')", span="511-511", cluster="lambda expression", file="StateMachine.cs"];
m7_444 [label="x.InsertToList(''my-key'', ''1'')", span="512-512", cluster="lambda expression", file="StateMachine.cs"];
m7_445 [label="x.InsertToList(''my-key'', ''2'')", span="513-513", cluster="lambda expression", file="StateMachine.cs"];
m7_446 [label="x.InsertToList(''my-key'', ''3'')", span="514-514", cluster="lambda expression", file="StateMachine.cs"];
m7_447 [label="x.TrimList(''my-key'', 1, 2)", span="515-515", cluster="lambda expression", file="StateMachine.cs"];
m7_457 [label="Exit lambda expression", span="529-542", cluster="lambda expression", file="StateMachine.cs"];
m7_463 [label="Exit lambda expression", span="531-537", cluster="lambda expression", file="StateMachine.cs"];
m7_459 [label="x.InsertToList(''my-key'', ''0'')", span="533-533", cluster="lambda expression", file="StateMachine.cs"];
m7_460 [label="x.InsertToList(''my-key'', ''1'')", span="534-534", cluster="lambda expression", file="StateMachine.cs"];
m7_461 [label="x.InsertToList(''my-key'', ''2'')", span="535-535", cluster="lambda expression", file="StateMachine.cs"];
m7_462 [label="x.TrimList(''my-key'', 1, 100)", span="536-536", cluster="lambda expression", file="StateMachine.cs"];
m7_471 [label="Exit lambda expression", span="548-559", cluster="lambda expression", file="StateMachine.cs"];
m7_475 [label="Exit lambda expression", span="550-554", cluster="lambda expression", file="StateMachine.cs"];
m7_473 [label="x.InsertToList(''my-key'', ''0'')", span="552-552", cluster="lambda expression", file="StateMachine.cs"];
m7_474 [label="x.TrimList(''my-key'', 1, 100)", span="553-553", cluster="lambda expression", file="StateMachine.cs"];
m7_483 [label="Exit lambda expression", span="565-576", cluster="lambda expression", file="StateMachine.cs"];
m7_487 [label="Exit lambda expression", span="567-571", cluster="lambda expression", file="StateMachine.cs"];
m7_485 [label="x.InsertToList(''my-key'', ''0'')", span="569-569", cluster="lambda expression", file="StateMachine.cs"];
m7_486 [label="x.TrimList(''my-key'', 1, 0)", span="570-570", cluster="lambda expression", file="StateMachine.cs"];
m7_495 [label="Exit lambda expression", span="582-593", cluster="lambda expression", file="StateMachine.cs"];
m7_499 [label="Exit lambda expression", span="584-588", cluster="lambda expression", file="StateMachine.cs"];
m7_497 [label="x.InsertToList(''my-key'', ''0'')", span="586-586", cluster="lambda expression", file="StateMachine.cs"];
m7_498 [label="x.TrimList(''another-key'', 1, 0)", span="587-587", cluster="lambda expression", file="StateMachine.cs"];
m7_506 [label="Exit lambda expression", span="599-605", cluster="lambda expression", file="StateMachine.cs"];
m7_512 [label="Exit lambda expression", span="602-602", cluster="lambda expression", file="StateMachine.cs"];
m7_520 [label="Exit lambda expression", span="611-617", cluster="lambda expression", file="StateMachine.cs"];
m7_526 [label="Exit lambda expression", span="614-614", cluster="lambda expression", file="StateMachine.cs"];
m7_525 [label="x.SetRangeInHash(''some-hash'', null)", span="614-614", cluster="lambda expression", file="StateMachine.cs"];
m7_535 [label="Exit lambda expression", span="623-638", cluster="lambda expression", file="StateMachine.cs"];
m7_539 [label="Exit lambda expression", span="625-629", cluster="lambda expression", file="StateMachine.cs"];
m7_204 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="264-264", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="StateMachine.cs"];
m7_249 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="StateMachine.cs"];
m7_542 [label="Exit lambda expression", span="634-634", cluster="lambda expression", file="StateMachine.cs"];
m7_541 [label="(string)x.Field", span="634-634", cluster="lambda expression", file="StateMachine.cs"];
m7_545 [label="Exit lambda expression", span="634-634", cluster="lambda expression", file="StateMachine.cs"];
m7_544 [label="(string)x.Value", span="634-634", cluster="lambda expression", file="StateMachine.cs"];
m7_168 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="234-234", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="StateMachine.cs"];
m7_8 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="45-45", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="StateMachine.cs"];
m7_23 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="StateMachine.cs"];
m7_24 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", span="35-35", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="StateMachine.cs"];
m7_25 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerWriteOnlyTransaction(ConnectionUtils.CreateConnection(), null))", span="37-38", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="StateMachine.cs"];
m7_26 [label="Assert.Equal(''queueProviders'', exception.ParamName)", span="40-40", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="StateMachine.cs"];
m7_27 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", span="35-35", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="StateMachine.cs"];
m7_393 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="453-453", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="StateMachine.cs"];
m7_394 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="455-467", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="StateMachine.cs"];
m7_395 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="453-453", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="StateMachine.cs"];
m7_103 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="168-168", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="StateMachine.cs"];
m7_51 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="StateMachine.cs"];
m7_104 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", color=red, community=0, file="StateMachine.cs"];
m7_36 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="73-73", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="StateMachine.cs"];
m7_19 [label="return counters.EnqueuedCount ?? 0;", span="56-56", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="StateMachine.cs"];
m7_318 [label="return result;", span="423-423", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="StateMachine.cs"];
m7_22 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="30-30", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", file="StateMachine.cs"];
m7_195 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime) record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="203-217", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="StateMachine.cs"];
m7_46 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="StateMachine.cs"];
m7_464 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="546-546", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="StateMachine.cs"];
m7_465 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="548-559", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="StateMachine.cs"];
m7_466 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="546-546", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="StateMachine.cs"];
m7_476 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="563-563", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="StateMachine.cs"];
m7_477 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="565-576", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="StateMachine.cs"];
m7_478 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="563-563", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="StateMachine.cs"];
m7_9 [label="Entry PersistentJobQueueProviderCollection.cstr", span="", cluster="PersistentJobQueueProviderCollection.cstr", file="StateMachine.cs"];
m7_10 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="45-45", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="StateMachine.cs"];
m7_550 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="StateMachine.cs"];
m7_164 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="234-234", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="StateMachine.cs"];
m7_73 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="115-115", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="StateMachine.cs"];
m7_54 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="94-94", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="StateMachine.cs"];
m7_77 [label="Entry Unk.PersistJob", span="", cluster="Unk.PersistJob", file="StateMachine.cs"];
m7_78 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="90-90", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", color=red, community=0, file="StateMachine.cs"];
m7_79 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="92-95", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="StateMachine.cs"];
m7_488 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="580-580", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="StateMachine.cs"];
m7_489 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="582-593", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="StateMachine.cs"];
m7_490 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="580-580", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="StateMachine.cs"];
m7_165 [label="var queueApi = GetQueueApi(queue)", span="236-236", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="StateMachine.cs"];
m7_536 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="StateMachine.cs"];
m7_513 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="207-207", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="StateMachine.cs"];
m7_80 [label="Entry Unk.>", span="", cluster="Unk.>", color=green, community=0, file="StateMachine.cs"];
m7_53 [label="Entry Unk.True", span="", cluster="Unk.True", file="StateMachine.cs"];
m7_546 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="641-641", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="StateMachine.cs"];
m7_548 [label="action(connection)", span="645-645", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="StateMachine.cs"];
m7_547 [label="var connection = ConnectionUtils.CreateConnection()", span="643-643", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="StateMachine.cs"];
m7_549 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="641-641", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="StateMachine.cs"];
m7_514 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="609-609", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="StateMachine.cs"];
m7_515 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="611-617", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="StateMachine.cs"];
m7_516 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="609-609", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="StateMachine.cs"];
m7_20 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="51-51", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="StateMachine.cs"];
m7_450 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="527-527", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="StateMachine.cs"];
m7_451 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="529-542", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="StateMachine.cs"];
m7_452 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="527-527", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="StateMachine.cs"];
m7_556 [label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", span="", file="StateMachine.cs"];
m7_564 [label=arrangeSql, span="", file="StateMachine.cs"];
m7_565 [label=jobId, span="", file="StateMachine.cs"];
m7_566 [label=state, span="", file="StateMachine.cs"];
m7_567 [label=SqlConnection, span="", file="StateMachine.cs"];
m7_568 [label=SqlConnection, span="", file="StateMachine.cs"];
m7_561 [label=arrangeSql, span="", file="StateMachine.cs"];
m7_557 [label=arrangeSql, span="", file="StateMachine.cs"];
m7_559 [label=arrangeSql, span="", file="StateMachine.cs"];
m7_562 [label=jobId, span="", file="StateMachine.cs"];
m7_563 [label=state, span="", file="StateMachine.cs"];
m7_558 [label=jobId, span="", file="StateMachine.cs"];
m7_560 [label=jobId, span="", file="StateMachine.cs"];
n0 -> n1  [key=0, style=solid];
n1 -> n0  [key=0, style=bold, color=blue];
d7 -> d8  [key=0, style=solid, color=green];
d18 -> d7  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisAtomicWriteTransaction"];
d18 -> d1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisAtomicWriteTransaction"];
d18 -> d2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisAtomicWriteTransaction"];
d18 -> d3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisAtomicWriteTransaction"];
d18 -> d4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisAtomicWriteTransaction"];
d18 -> d5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisAtomicWriteTransaction"];
d18 -> d6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisAtomicWriteTransaction"];
d18 -> d11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisAtomicWriteTransaction"];
d18 -> d15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisAtomicWriteTransaction"];
d2 -> d7  [key=1, style=dashed, color=green, label=storage];
d2 -> d3  [key=0, style=solid];
d2 -> d9  [key=2, style=dotted];
d2 -> d4  [key=1, style=dashed, color=darkseagreen4, label=storage];
d2 -> d5  [key=1, style=dashed, color=darkseagreen4, label=storage];
d2 -> d6  [key=1, style=dashed, color=darkseagreen4, label=storage];
d6 -> d7  [key=0, style=solid, color=green];
d8 -> d0  [key=0, style=bold, color=blue];
d1 -> d2  [key=0, style=solid];
d3 -> d4  [key=0, style=solid];
d4 -> d5  [key=0, style=solid];
d5 -> d6  [key=0, style=solid];
d11 -> d12  [key=0, style=solid];
d11 -> d13  [key=2, style=dotted];
d15 -> d16  [key=0, style=solid];
d15 -> d17  [key=2, style=dotted];
d0 -> d1  [key=0, style=solid];
d10 -> d11  [key=0, style=solid];
d12 -> d10  [key=0, style=bold, color=blue];
d14 -> d15  [key=0, style=solid];
d16 -> d14  [key=0, style=bold, color=blue];
m0_8 -> m0_9  [key=0, style=solid];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_11  [key=2, style=dotted];
m0_10 -> m0_8  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_5  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_6  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_7  [key=2, style=dotted];
m0_4 -> m0_0  [key=0, style=bold, color=blue];
m1_2 -> m1_3  [key=0, style=solid];
m1_3 -> m1_2  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_0  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_2 -> m2_0  [key=0, style=bold, color=blue];
m2_3 -> m2_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.JobPerformingContext"];
m3_123 -> m3_124  [key=0, style=solid];
m3_123 -> m3_126  [key=1, style=dashed, color=darkseagreen4, label=double];
m3_123 -> m3_128  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_124 -> m3_125  [key=0, style=solid];
m3_124 -> m3_126  [key=0, style=solid];
m3_126 -> m3_127  [key=0, style=solid];
m3_126 -> m3_128  [key=0, style=solid];
m3_128 -> m3_129  [key=0, style=solid];
m3_128 -> m3_67  [key=2, style=dotted];
m3_128 -> m3_87  [key=2, style=dotted];
m3_125 -> m3_129  [key=0, style=solid];
m3_125 -> m3_12  [key=2, style=dotted];
m3_127 -> m3_129  [key=0, style=solid];
m3_127 -> m3_130  [key=2, style=dotted];
m3_129 -> m3_123  [key=0, style=bold, color=blue];
m3_2 -> m3_3  [key=0, style=solid];
m3_2 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.PersistentJobQueueProviderCollection"];
m3_2 -> m3_7  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m3_2 -> m3_8  [key=1, style=dashed, color=darkseagreen4, label=IsolationLevel];
m3_2 -> m3_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.PersistentJobQueueProviderCollection"];
m3_2 -> m3_10  [key=1, style=dashed, color=darkseagreen4, label=bool];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_5  [key=0, style=solid];
m3_5 -> m3_6  [key=0, style=solid];
m3_5 -> m3_7  [key=0, style=solid];
m3_7 -> m3_8  [key=0, style=solid];
m3_8 -> m3_9  [key=0, style=solid];
m3_9 -> m3_10  [key=0, style=solid];
m3_10 -> m3_11  [key=0, style=solid];
m3_4 -> m3_11  [key=0, style=solid];
m3_4 -> m3_12  [key=2, style=dotted];
m3_6 -> m3_11  [key=0, style=solid];
m3_6 -> m3_12  [key=2, style=dotted];
m3_11 -> m3_2  [key=0, style=bold, color=blue];
m3_219 -> m3_220  [key=0, style=solid];
m3_219 -> m3_223  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_220 -> m3_221  [key=0, style=solid];
m3_220 -> m3_222  [key=0, style=solid];
m3_223 -> m3_224  [key=0, style=solid];
m3_223 -> m3_67  [key=2, style=dotted];
m3_223 -> m3_68  [key=2, style=dotted];
m3_223 -> m3_226  [key=1, style=dashed, color=darkseagreen4, label=result];
m3_221 -> m3_227  [key=0, style=solid];
m3_221 -> m3_12  [key=2, style=dotted];
m3_222 -> m3_223  [key=0, style=solid];
m3_222 -> m3_222  [key=3, color=darkorchid, style=bold, label="Local variable string query"];
m3_224 -> m3_225  [key=0, style=solid];
m3_224 -> m3_226  [key=0, style=solid];
m3_226 -> m3_227  [key=0, style=solid];
m3_225 -> m3_227  [key=0, style=solid];
m3_225 -> m3_206  [key=2, style=dotted];
m3_227 -> m3_219  [key=0, style=bold, color=blue];
m3_157 -> m3_158  [key=0, style=solid];
m3_157 -> m3_160  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerContext"];
m3_157 -> m3_162  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerContext"];
m3_157 -> m3_163  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_158 -> m3_159  [key=0, style=solid];
m3_158 -> m3_160  [key=0, style=solid];
m3_160 -> m3_161  [key=0, style=solid];
m3_160 -> m3_162  [key=0, style=solid];
m3_162 -> m3_163  [key=0, style=solid];
m3_162 -> m3_165  [key=2, style=dotted];
m3_163 -> m3_164  [key=0, style=solid];
m3_163 -> m3_65  [key=2, style=dotted];
m3_163 -> m3_70  [key=2, style=dotted];
m3_159 -> m3_164  [key=0, style=solid];
m3_159 -> m3_12  [key=2, style=dotted];
m3_161 -> m3_164  [key=0, style=solid];
m3_161 -> m3_12  [key=2, style=dotted];
m3_164 -> m3_157  [key=0, style=bold, color=blue];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_30  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m3_27 -> m3_32  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m3_27 -> m3_34  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m3_28 -> m3_29  [key=0, style=solid];
m3_28 -> m3_30  [key=0, style=solid];
m3_30 -> m3_31  [key=0, style=solid];
m3_30 -> m3_36  [key=2, style=dotted];
m3_30 -> m3_37  [key=2, style=dotted];
m3_30 -> m3_38  [key=2, style=dotted];
m3_30 -> m3_43  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_30 -> m3_33  [key=1, style=dashed, color=darkseagreen4, label=providers];
m3_32 -> m3_35  [key=0, style=solid];
m3_32 -> m3_39  [key=2, style=dotted];
m3_32 -> m3_40  [key=2, style=dotted];
m3_32 -> m3_26  [key=2, style=dotted];
m3_34 -> m3_35  [key=0, style=solid];
m3_34 -> m3_42  [key=2, style=dotted];
m3_29 -> m3_35  [key=0, style=solid];
m3_29 -> m3_12  [key=2, style=dotted];
m3_31 -> m3_32  [key=0, style=solid];
m3_31 -> m3_33  [key=0, style=solid];
m3_33 -> m3_34  [key=0, style=solid];
m3_33 -> m3_41  [key=2, style=dotted];
m3_35 -> m3_27  [key=0, style=bold, color=blue];
m3_13 -> m3_14  [key=0, style=solid];
m3_14 -> m3_15  [key=0, style=solid];
m3_14 -> m3_16  [key=0, style=solid];
m3_15 -> m3_16  [key=0, style=solid];
m3_15 -> d17  [key=2, style=dotted];
m3_16 -> m3_13  [key=0, style=bold, color=blue];
m3_171 -> m3_172  [key=0, style=solid];
m3_171 -> m3_174  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_172 -> m3_173  [key=0, style=solid];
m3_172 -> m3_174  [key=0, style=solid];
m3_174 -> m3_175  [key=0, style=solid];
m3_174 -> m3_70  [key=2, style=dotted];
m3_173 -> m3_175  [key=0, style=solid];
m3_173 -> m3_12  [key=2, style=dotted];
m3_175 -> m3_171  [key=0, style=bold, color=blue];
m3_190 -> m3_191  [key=0, style=solid];
m3_190 -> m3_194  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_191 -> m3_192  [key=0, style=solid];
m3_191 -> m3_193  [key=0, style=solid];
m3_194 -> m3_195  [key=0, style=solid];
m3_194 -> m3_67  [key=2, style=dotted];
m3_194 -> m3_196  [key=2, style=dotted];
m3_192 -> m3_195  [key=0, style=solid];
m3_192 -> m3_12  [key=2, style=dotted];
m3_193 -> m3_194  [key=0, style=solid];
m3_193 -> m3_193  [key=3, color=darkorchid, style=bold, label="Local variable string query"];
m3_195 -> m3_190  [key=0, style=bold, color=blue];
m3_242 -> m3_243  [key=0, style=solid];
m3_242 -> m3_246  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_243 -> m3_244  [key=0, style=solid];
m3_243 -> m3_245  [key=0, style=solid];
m3_246 -> m3_247  [key=0, style=solid];
m3_246 -> m3_67  [key=2, style=dotted];
m3_246 -> m3_68  [key=2, style=dotted];
m3_246 -> m3_249  [key=1, style=dashed, color=darkseagreen4, label=result];
m3_244 -> m3_250  [key=0, style=solid];
m3_244 -> m3_12  [key=2, style=dotted];
m3_245 -> m3_246  [key=0, style=solid];
m3_245 -> m3_245  [key=3, color=darkorchid, style=bold, label="Local variable string query"];
m3_247 -> m3_248  [key=0, style=solid];
m3_247 -> m3_249  [key=0, style=solid];
m3_249 -> m3_250  [key=0, style=solid];
m3_248 -> m3_250  [key=0, style=solid];
m3_248 -> m3_206  [key=2, style=dotted];
m3_250 -> m3_242  [key=0, style=bold, color=blue];
m3_213 -> m3_214  [key=0, style=solid];
m3_213 -> m3_217  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_214 -> m3_215  [key=0, style=solid];
m3_214 -> m3_216  [key=0, style=solid];
m3_217 -> m3_218  [key=0, style=solid];
m3_217 -> m3_67  [key=2, style=dotted];
m3_217 -> m3_68  [key=2, style=dotted];
m3_215 -> m3_218  [key=0, style=solid];
m3_215 -> m3_12  [key=2, style=dotted];
m3_216 -> m3_217  [key=0, style=solid];
m3_216 -> m3_216  [key=3, color=darkorchid, style=bold, label="Local variable string query"];
m3_218 -> m3_213  [key=0, style=bold, color=blue];
m3_257 -> m3_258  [key=0, style=solid];
m3_257 -> m3_261  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_258 -> m3_259  [key=0, style=solid];
m3_258 -> m3_260  [key=0, style=solid];
m3_261 -> m3_262  [key=0, style=solid];
m3_261 -> m3_67  [key=2, style=dotted];
m3_261 -> m3_196  [key=2, style=dotted];
m3_259 -> m3_262  [key=0, style=solid];
m3_259 -> m3_12  [key=2, style=dotted];
m3_260 -> m3_261  [key=0, style=solid];
m3_260 -> m3_260  [key=3, color=darkorchid, style=bold, label="Local variable string query"];
m3_262 -> m3_257  [key=0, style=bold, color=blue];
m3_71 -> m3_72  [key=0, style=solid];
m3_71 -> m3_75  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_71 -> m3_76  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.JobData GetJobData"];
m3_72 -> m3_73  [key=0, style=solid];
m3_72 -> m3_74  [key=0, style=solid];
m3_75 -> m3_76  [key=0, style=solid];
m3_75 -> m3_67  [key=2, style=dotted];
m3_75 -> m3_87  [key=2, style=dotted];
m3_75 -> m3_78  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m3_75 -> m3_79  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m3_75 -> m3_85  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m3_73 -> m3_86  [key=0, style=solid];
m3_73 -> m3_12  [key=2, style=dotted];
m3_74 -> m3_75  [key=0, style=solid];
m3_74 -> m3_74  [key=3, color=darkorchid, style=bold, label="Local variable string sql"];
m3_76 -> m3_77  [key=0, style=solid];
m3_76 -> m3_78  [key=0, style=solid];
m3_78 -> m3_79  [key=0, style=solid];
m3_78 -> m3_67  [key=2, style=dotted];
m3_78 -> m3_82  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
m3_79 -> m3_80  [key=0, style=solid];
m3_85 -> m3_86  [key=0, style=solid];
m3_85 -> m3_89  [key=2, style=dotted];
m3_77 -> m3_86  [key=0, style=solid];
m3_82 -> m3_83  [key=0, style=solid];
m3_82 -> m3_85  [key=0, style=solid];
m3_82 -> m3_88  [key=2, style=dotted];
m3_80 -> m3_81  [key=0, style=solid];
m3_80 -> m3_76  [key=3, color=darkorchid, style=bold, label="Local variable Hangfire.Common.Job job"];
m3_81 -> m3_82  [key=0, style=solid];
m3_81 -> m3_76  [key=3, color=darkorchid, style=bold, label="Local variable Hangfire.Common.JobLoadException loadException"];
m3_81 -> m3_83  [key=3, color=darkorchid, style=bold, label="Local variable Hangfire.Common.JobLoadException loadException"];
m3_83 -> m3_84  [key=0, style=solid];
m3_84 -> m3_85  [key=0, style=solid];
m3_86 -> m3_71  [key=0, style=bold, color=blue];
m3_144 -> m3_145  [key=0, style=solid];
m3_144 -> m3_147  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_145 -> m3_146  [key=0, style=solid];
m3_145 -> m3_147  [key=0, style=solid];
m3_147 -> m3_148  [key=0, style=solid];
m3_147 -> m3_67  [key=2, style=dotted];
m3_147 -> m3_150  [key=2, style=dotted];
m3_147 -> m3_151  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_147 -> m3_154  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_146 -> m3_149  [key=0, style=solid];
m3_146 -> m3_12  [key=2, style=dotted];
m3_148 -> m3_149  [key=0, style=solid];
m3_149 -> m3_144  [key=0, style=bold, color=blue];
m3_22 -> m3_23  [key=0, style=solid];
m3_23 -> m3_24  [key=0, style=solid];
m3_23 -> m3_25  [key=2, style=dotted];
m3_23 -> m3_26  [key=2, style=dotted];
m3_24 -> m3_22  [key=0, style=bold, color=blue];
m3_102 -> m3_103  [key=0, style=solid];
m3_102 -> m3_105  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_102 -> m3_107  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_103 -> m3_104  [key=0, style=solid];
m3_103 -> m3_105  [key=0, style=solid];
m3_105 -> m3_106  [key=0, style=solid];
m3_105 -> m3_107  [key=0, style=solid];
m3_107 -> m3_108  [key=0, style=solid];
m3_107 -> m3_70  [key=2, style=dotted];
m3_104 -> m3_108  [key=0, style=solid];
m3_104 -> m3_12  [key=2, style=dotted];
m3_106 -> m3_108  [key=0, style=solid];
m3_106 -> m3_12  [key=2, style=dotted];
m3_108 -> m3_102  [key=0, style=bold, color=blue];
m3_197 -> m3_198  [key=0, style=solid];
m3_197 -> m3_201  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_198 -> m3_199  [key=0, style=solid];
m3_198 -> m3_200  [key=0, style=solid];
m3_201 -> m3_202  [key=0, style=solid];
m3_201 -> m3_67  [key=2, style=dotted];
m3_201 -> m3_68  [key=2, style=dotted];
m3_201 -> m3_204  [key=1, style=dashed, color=darkseagreen4, label=result];
m3_199 -> m3_205  [key=0, style=solid];
m3_199 -> m3_12  [key=2, style=dotted];
m3_200 -> m3_201  [key=0, style=solid];
m3_200 -> m3_200  [key=3, color=darkorchid, style=bold, label="Local variable string query"];
m3_202 -> m3_203  [key=0, style=solid];
m3_202 -> m3_204  [key=0, style=solid];
m3_204 -> m3_205  [key=0, style=solid];
m3_203 -> m3_205  [key=0, style=solid];
m3_203 -> m3_206  [key=2, style=dotted];
m3_205 -> m3_197  [key=0, style=bold, color=blue];
m3_207 -> m3_208  [key=0, style=solid];
m3_207 -> m3_211  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_208 -> m3_209  [key=0, style=solid];
m3_208 -> m3_210  [key=0, style=solid];
m3_211 -> m3_212  [key=0, style=solid];
m3_211 -> m3_67  [key=2, style=dotted];
m3_211 -> m3_68  [key=2, style=dotted];
m3_209 -> m3_212  [key=0, style=solid];
m3_209 -> m3_12  [key=2, style=dotted];
m3_210 -> m3_211  [key=0, style=solid];
m3_210 -> m3_210  [key=3, color=darkorchid, style=bold, label="Local variable string query"];
m3_212 -> m3_207  [key=0, style=bold, color=blue];
m3_109 -> m3_110  [key=0, style=solid];
m3_109 -> m3_112  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_109 -> m3_114  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_110 -> m3_111  [key=0, style=solid];
m3_110 -> m3_112  [key=0, style=solid];
m3_112 -> m3_113  [key=0, style=solid];
m3_112 -> m3_114  [key=0, style=solid];
m3_114 -> m3_115  [key=0, style=solid];
m3_114 -> m3_67  [key=2, style=dotted];
m3_114 -> m3_87  [key=2, style=dotted];
m3_111 -> m3_115  [key=0, style=solid];
m3_111 -> m3_12  [key=2, style=dotted];
m3_113 -> m3_115  [key=0, style=solid];
m3_113 -> m3_12  [key=2, style=dotted];
m3_115 -> m3_109  [key=0, style=bold, color=blue];
m3_166 -> m3_167  [key=0, style=solid];
m3_166 -> m3_169  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_167 -> m3_168  [key=0, style=solid];
m3_167 -> m3_169  [key=0, style=solid];
m3_169 -> m3_170  [key=0, style=solid];
m3_169 -> m3_70  [key=2, style=dotted];
m3_168 -> m3_170  [key=0, style=solid];
m3_168 -> m3_12  [key=2, style=dotted];
m3_170 -> m3_166  [key=0, style=bold, color=blue];
m3_90 -> m3_91  [key=0, style=solid];
m3_90 -> m3_94  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_90 -> m3_76  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.StateData GetStateData"];
m3_91 -> m3_92  [key=0, style=solid];
m3_91 -> m3_93  [key=0, style=solid];
m3_94 -> m3_95  [key=0, style=solid];
m3_94 -> m3_67  [key=2, style=dotted];
m3_94 -> m3_87  [key=2, style=dotted];
m3_94 -> m3_97  [key=1, style=dashed, color=darkseagreen4, label=sqlState];
m3_94 -> m3_98  [key=1, style=dashed, color=darkseagreen4, label=sqlState];
m3_92 -> m3_99  [key=0, style=solid];
m3_92 -> m3_12  [key=2, style=dotted];
m3_93 -> m3_94  [key=0, style=solid];
m3_93 -> m3_93  [key=3, color=darkorchid, style=bold, label="Local variable string sql"];
m3_95 -> m3_96  [key=0, style=solid];
m3_95 -> m3_97  [key=0, style=solid];
m3_97 -> m3_98  [key=0, style=solid];
m3_97 -> m3_100  [key=2, style=dotted];
m3_97 -> m3_67  [key=2, style=dotted];
m3_98 -> m3_99  [key=0, style=solid];
m3_98 -> m3_101  [key=2, style=dotted];
m3_96 -> m3_99  [key=0, style=solid];
m3_99 -> m3_90  [key=0, style=bold, color=blue];
m3_251 -> m3_252  [key=0, style=solid];
m3_251 -> m3_255  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_252 -> m3_253  [key=0, style=solid];
m3_252 -> m3_254  [key=0, style=solid];
m3_255 -> m3_256  [key=0, style=solid];
m3_255 -> m3_67  [key=2, style=dotted];
m3_255 -> m3_196  [key=2, style=dotted];
m3_253 -> m3_256  [key=0, style=solid];
m3_253 -> m3_12  [key=2, style=dotted];
m3_254 -> m3_255  [key=0, style=solid];
m3_254 -> m3_254  [key=3, color=darkorchid, style=bold, label="Local variable string query"];
m3_256 -> m3_251  [key=0, style=bold, color=blue];
m3_47 -> m3_48  [key=0, style=solid];
m3_47 -> m3_50  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m3_47 -> m3_53  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m3_47 -> m3_54  [key=1, style=dashed, color=darkseagreen4, label="System.DateTime"];
m3_47 -> m3_55  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m3_47 -> m3_56  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m3_47 -> m3_58  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m3_48 -> m3_49  [key=0, style=solid];
m3_48 -> m3_50  [key=0, style=solid];
m3_50 -> m3_51  [key=0, style=solid];
m3_50 -> m3_52  [key=0, style=solid];
m3_53 -> m3_54  [key=0, style=solid];
m3_53 -> m3_64  [key=2, style=dotted];
m3_54 -> m3_55  [key=0, style=solid];
m3_54 -> m3_65  [key=2, style=dotted];
m3_54 -> m3_66  [key=2, style=dotted];
m3_54 -> m3_67  [key=2, style=dotted];
m3_54 -> m3_68  [key=2, style=dotted];
m3_54 -> m3_69  [key=2, style=dotted];
m3_54 -> m3_59  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m3_54 -> m3_62  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m3_55 -> m3_56  [key=0, style=solid];
m3_55 -> m3_62  [key=0, style=solid];
m3_56 -> m3_57  [key=0, style=solid];
m3_56 -> m3_59  [key=1, style=dashed, color=darkseagreen4, label=parameterArray];
m3_56 -> m3_61  [key=1, style=dashed, color=darkseagreen4, label=parameterArray];
m3_58 -> m3_59  [key=0, style=solid];
m3_58 -> m3_60  [key=0, style=solid];
m3_49 -> m3_63  [key=0, style=solid];
m3_49 -> m3_12  [key=2, style=dotted];
m3_51 -> m3_63  [key=0, style=solid];
m3_51 -> m3_12  [key=2, style=dotted];
m3_52 -> m3_53  [key=0, style=solid];
m3_52 -> m3_54  [key=1, style=dashed, color=darkseagreen4, label=createJobSql];
m3_52 -> m3_52  [key=3, color=darkorchid, style=bold, label="Local variable string createJobSql"];
m3_59 -> m3_58  [key=0, style=solid];
m3_59 -> m3_59  [key=1, style=dashed, color=darkseagreen4, label=parameterIndex];
m3_62 -> m3_63  [key=0, style=solid];
m3_57 -> m3_58  [key=0, style=solid];
m3_57 -> m3_59  [key=1, style=dashed, color=darkseagreen4, label=parameterIndex];
m3_57 -> m3_57  [key=3, color=darkorchid, style=bold, label="Local variable int parameterIndex"];
m3_61 -> m3_62  [key=0, style=solid];
m3_61 -> m3_70  [key=2, style=dotted];
m3_60 -> m3_61  [key=0, style=solid];
m3_60 -> m3_60  [key=3, color=darkorchid, style=bold, label="Local variable string insertParameterSql"];
m3_63 -> m3_47  [key=0, style=bold, color=blue];
m3_154 -> m3_155  [key=0, style=solid];
m3_43 -> m3_44  [key=0, style=solid];
m3_44 -> m3_45  [key=0, style=solid];
m3_44 -> m3_46  [key=2, style=dotted];
m3_45 -> m3_43  [key=0, style=bold, color=blue];
m3_151 -> m3_152  [key=0, style=solid];
m3_152 -> m3_153  [key=0, style=solid];
m3_153 -> m3_151  [key=0, style=bold, color=blue];
m3_155 -> m3_156  [key=0, style=solid];
m3_156 -> m3_154  [key=0, style=bold, color=blue];
m3_131 -> m3_132  [key=0, style=solid];
m3_131 -> m3_134  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>"];
m3_131 -> m3_138  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>"];
m3_131 -> m3_139  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_132 -> m3_133  [key=0, style=solid];
m3_132 -> m3_134  [key=0, style=solid];
m3_134 -> m3_135  [key=0, style=solid];
m3_134 -> m3_136  [key=0, style=solid];
m3_138 -> m3_139  [key=0, style=solid];
m3_138 -> m3_140  [key=0, style=solid];
m3_139 -> m3_138  [key=0, style=solid];
m3_139 -> m3_70  [key=2, style=dotted];
m3_139 -> m3_139  [key=1, style=dashed, color=darkseagreen4, label=keyValuePair];
m3_133 -> m3_141  [key=0, style=solid];
m3_133 -> m3_12  [key=2, style=dotted];
m3_135 -> m3_141  [key=0, style=solid];
m3_135 -> m3_12  [key=2, style=dotted];
m3_136 -> m3_137  [key=0, style=solid];
m3_136 -> m3_139  [key=1, style=dashed, color=darkseagreen4, label=sql];
m3_136 -> m3_136  [key=3, color=darkorchid, style=bold, label="Local variable string sql"];
m3_137 -> m3_138  [key=0, style=solid];
m3_137 -> m3_142  [key=2, style=dotted];
m3_137 -> m3_140  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m3_140 -> m3_141  [key=0, style=solid];
m3_140 -> m3_143  [key=2, style=dotted];
m3_141 -> m3_131  [key=0, style=bold, color=blue];
m3_18 -> m3_19  [key=0, style=solid];
m3_19 -> m3_20  [key=0, style=solid];
m3_19 -> m3_21  [key=2, style=dotted];
m3_20 -> m3_18  [key=0, style=bold, color=blue];
m3_228 -> m3_229  [key=0, style=solid];
m3_228 -> m3_231  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_228 -> m3_234  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_229 -> m3_230  [key=0, style=solid];
m3_229 -> m3_231  [key=0, style=solid];
m3_231 -> m3_232  [key=0, style=solid];
m3_231 -> m3_233  [key=0, style=solid];
m3_234 -> m3_235  [key=0, style=solid];
m3_234 -> m3_67  [key=2, style=dotted];
m3_234 -> m3_87  [key=2, style=dotted];
m3_230 -> m3_235  [key=0, style=solid];
m3_230 -> m3_12  [key=2, style=dotted];
m3_232 -> m3_235  [key=0, style=solid];
m3_232 -> m3_12  [key=2, style=dotted];
m3_233 -> m3_234  [key=0, style=solid];
m3_233 -> m3_233  [key=3, color=darkorchid, style=bold, label="Local variable string query"];
m3_235 -> m3_228  [key=0, style=bold, color=blue];
m3_184 -> m3_185  [key=0, style=solid];
m3_184 -> m3_187  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_185 -> m3_186  [key=0, style=solid];
m3_185 -> m3_187  [key=0, style=solid];
m3_187 -> m3_188  [key=0, style=solid];
m3_187 -> m3_67  [key=2, style=dotted];
m3_187 -> m3_189  [key=2, style=dotted];
m3_186 -> m3_188  [key=0, style=solid];
m3_186 -> m3_12  [key=2, style=dotted];
m3_188 -> m3_184  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_0  [key=0, style=bold, color=blue];
m3_116 -> m3_117  [key=0, style=solid];
m3_116 -> m3_119  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_117 -> m3_118  [key=0, style=solid];
m3_117 -> m3_119  [key=0, style=solid];
m3_119 -> m3_120  [key=0, style=solid];
m3_119 -> m3_67  [key=2, style=dotted];
m3_118 -> m3_121  [key=0, style=solid];
m3_118 -> m3_12  [key=2, style=dotted];
m3_120 -> m3_121  [key=0, style=solid];
m3_120 -> m3_122  [key=2, style=dotted];
m3_121 -> m3_116  [key=0, style=bold, color=blue];
m3_236 -> m3_237  [key=0, style=solid];
m3_236 -> m3_240  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_237 -> m3_238  [key=0, style=solid];
m3_237 -> m3_239  [key=0, style=solid];
m3_240 -> m3_241  [key=0, style=solid];
m3_240 -> m3_67  [key=2, style=dotted];
m3_240 -> m3_68  [key=2, style=dotted];
m3_238 -> m3_241  [key=0, style=solid];
m3_238 -> m3_12  [key=2, style=dotted];
m3_239 -> m3_240  [key=0, style=solid];
m3_239 -> m3_239  [key=3, color=darkorchid, style=bold, label="Local variable string query"];
m3_241 -> m3_236  [key=0, style=bold, color=blue];
m3_176 -> m3_177  [key=0, style=solid];
m3_177 -> m3_178  [key=0, style=solid];
m3_177 -> m3_179  [key=0, style=solid];
m3_177 -> m3_181  [key=2, style=dotted];
m3_177 -> m3_177  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m3_178 -> m3_180  [key=0, style=solid];
m3_178 -> m3_182  [key=2, style=dotted];
m3_179 -> m3_180  [key=0, style=solid];
m3_179 -> m3_183  [key=2, style=dotted];
m3_179 -> m3_66  [key=2, style=dotted];
m3_179 -> m3_70  [key=2, style=dotted];
m3_179 -> m3_179  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m3_180 -> m3_176  [key=0, style=bold, color=blue];
m3_263 -> m3_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_15  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_23  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_30  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_44  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_33  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_54  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_61  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_75  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_94  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_107  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_114  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_119  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_128  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_139  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_147  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_163  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_169  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_174  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_179  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_187  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_194  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_201  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_211  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_217  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_223  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_234  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_240  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_246  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_255  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m3_263 -> m3_261  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m4_0 -> m4_1  [key=0, style=solid, color=red];
m4_1 -> m4_2  [key=0, style=solid, color=red];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_8  [key=2, style=dotted];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_9  [key=2, style=dotted];
m4_4 -> m4_5  [key=0, style=solid];
m4_4 -> m4_10  [key=2, style=dotted];
m4_5 -> m4_6  [key=0, style=solid];
m4_5 -> m4_9  [key=2, style=dotted];
m4_6 -> m4_7  [key=0, style=solid];
m4_7 -> m4_0  [key=0, style=bold, color=blue];
m4_11 -> m4_1  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m4_11 -> m4_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m4_11 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m4_11 -> m4_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m4_11 -> m4_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m4_11 -> m4_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m5_22 -> m5_23  [key=0, style=solid];
m5_23 -> m5_18  [key=2, style=dotted];
m5_23 -> m5_24  [key=0, style=solid];
m5_23 -> m5_28  [key=1, style=dashed, color=darkseagreen4, label=context];
m5_24 -> m5_25  [key=0, style=solid];
m5_24 -> m5_7  [key=2, style=dotted];
m5_24 -> m5_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_25 -> m5_21  [key=2, style=dotted];
m5_25 -> m5_26  [key=0, style=solid];
m5_26 -> m5_22  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_3  [key=2, style=dotted];
m5_2 -> m5_0  [key=0, style=bold, color=blue];
m5_38 -> m5_39  [key=0, style=solid];
m5_39 -> m5_38  [key=0, style=bold, color=blue];
m5_4 -> m5_5  [key=0, style=solid];
m5_5 -> m5_7  [key=2, style=dotted];
m5_5 -> m5_6  [key=0, style=solid];
m5_5 -> m5_8  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_6 -> m5_4  [key=0, style=bold, color=blue];
m5_12 -> m5_13  [key=0, style=solid];
m5_13 -> m5_18  [key=2, style=dotted];
m5_13 -> m5_14  [key=0, style=solid];
m5_13 -> m5_15  [key=1, style=dashed, color=darkseagreen4, label=context];
m5_13 -> m5_16  [key=1, style=dashed, color=darkseagreen4, label=context];
m5_14 -> m5_15  [key=0, style=solid];
m5_14 -> m5_19  [key=2, style=dotted];
m5_15 -> m5_16  [key=0, style=solid];
m5_15 -> m5_20  [key=2, style=dotted];
m5_16 -> m5_17  [key=0, style=solid];
m5_16 -> m5_21  [key=2, style=dotted];
m5_17 -> m5_12  [key=0, style=bold, color=blue];
m5_8 -> m5_9  [key=0, style=solid];
m5_52 -> m5_53  [key=0, style=solid];
m5_28 -> m5_29  [key=0, style=solid];
m5_28 -> m5_30  [key=2, style=dotted];
m5_36 -> m5_37  [key=0, style=solid];
m5_36 -> m5_30  [key=2, style=dotted];
m5_54 -> m5_52  [key=0, style=bold, color=blue];
m5_53 -> m5_54  [key=0, style=solid];
m5_53 -> m5_38  [key=2, style=dotted];
m5_27 -> m5_28  [key=0, style=solid];
m5_29 -> m5_27  [key=0, style=bold, color=blue];
m5_35 -> m5_36  [key=0, style=solid];
m5_37 -> m5_35  [key=0, style=bold, color=blue];
m5_9 -> m5_11  [key=2, style=dotted];
m5_9 -> m5_10  [key=0, style=solid];
m5_10 -> m5_8  [key=0, style=bold, color=blue];
m5_31 -> m5_32  [key=0, style=solid];
m5_32 -> m5_18  [key=2, style=dotted];
m5_32 -> m5_33  [key=0, style=solid];
m5_32 -> m5_36  [key=1, style=dashed, color=darkseagreen4, label=context];
m5_33 -> m5_34  [key=0, style=solid];
m5_33 -> m5_7  [key=2, style=dotted];
m5_33 -> m5_35  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_34 -> m5_31  [key=0, style=bold, color=blue];
m5_18 -> m5_40  [key=0, style=solid, color=green];
m5_40 -> m5_41  [key=0, style=solid, color=green];
m5_40 -> m5_47  [key=2, style=dotted, color=green];
m5_40 -> m5_44  [key=1, style=dashed, color=green, label=storage];
m5_41 -> m5_42  [key=0, style=solid, color=green];
m5_41 -> m5_48  [key=2, style=dotted, color=green];
m5_41 -> m5_44  [key=1, style=dashed, color=green, label=connection];
m5_44 -> m5_45  [key=0, style=solid];
m5_44 -> m5_51  [key=2, style=dotted];
m5_42 -> m5_44  [key=1, style=dashed, color=darkseagreen4, label=job];
m5_42 -> m5_43  [key=0, style=solid];
m5_42 -> m5_49  [key=2, style=dotted];
m5_42 -> m5_52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_43 -> m5_44  [key=0, style=solid];
m5_43 -> m5_50  [key=2, style=dotted];
m5_45 -> m5_46  [key=0, style=solid];
m5_45 -> m5_11  [key=2, style=dotted];
m5_46 -> m5_18  [key=0, style=bold, color=blue];
m5_55 -> m5_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.CreatedContextFacts"];
m5_55 -> m5_23  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.CreatedContextFacts"];
m5_55 -> m5_32  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.CreatedContextFacts"];
m5_55 -> m5_45  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.CreatedContextFacts"];
m5_55 -> m5_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.CreatedContextFacts"];
m5_55 -> m5_15  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.CreatedContextFacts"];
m5_56 -> m5_28  [key=1, style=dashed, color=darkseagreen4, label=context];
m5_57 -> m5_36  [key=1, style=dashed, color=darkseagreen4, label=context];
m6_21 -> m6_22  [key=0, style=solid, color=green];
m6_21 -> m6_23  [key=2, style=dotted, color=green];
m6_153 -> m6_154  [key=0, style=solid];
m6_154 -> m6_155  [key=0, style=solid];
m6_154 -> m6_36  [key=2, style=dotted];
m6_154 -> m6_156  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_155 -> m6_153  [key=0, style=bold, color=blue];
m6_627 -> m6_628  [key=0, style=solid];
m6_629 -> m6_630  [key=0, style=solid];
m6_629 -> m6_36  [key=2, style=dotted];
m6_629 -> m6_631  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_628 -> m6_629  [key=0, style=solid];
m6_628 -> m6_628  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m6_628 -> m6_632  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_630 -> m6_627  [key=0, style=bold, color=blue];
m6_119 -> m6_120  [key=0, style=solid];
m6_121 -> m6_122  [key=0, style=solid];
m6_121 -> m6_36  [key=2, style=dotted];
m6_121 -> m6_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_120 -> m6_121  [key=0, style=solid];
m6_120 -> m6_33  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m6_120 -> m6_124  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_122 -> m6_119  [key=0, style=bold, color=blue];
m6_393 -> m6_394  [key=0, style=solid];
m6_394 -> m6_395  [key=0, style=solid];
m6_394 -> m6_36  [key=2, style=dotted];
m6_394 -> m6_396  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_395 -> m6_393  [key=0, style=bold, color=blue];
m6_614 -> m6_615  [key=0, style=solid];
m6_615 -> m6_616  [key=0, style=solid];
m6_615 -> m6_36  [key=2, style=dotted];
m6_615 -> m6_617  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_616 -> m6_614  [key=0, style=bold, color=blue];
m6_419 -> m6_420  [key=0, style=solid];
m6_420 -> m6_421  [key=0, style=solid];
m6_420 -> m6_36  [key=2, style=dotted];
m6_420 -> m6_422  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_421 -> m6_419  [key=0, style=bold, color=blue];
m6_476 -> m6_477  [key=0, style=solid];
m6_477 -> m6_478  [key=0, style=solid];
m6_477 -> m6_36  [key=2, style=dotted];
m6_477 -> m6_479  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_478 -> m6_476  [key=0, style=bold, color=blue];
m6_22 -> m6_23  [key=0, style=solid];
m6_22 -> m6_20  [key=0, style=bold, color=blue];
m6_23 -> m6_24  [key=0, style=solid];
m6_23 -> m6_14  [key=2, style=dotted];
m6_24 -> m6_22  [key=0, style=bold, color=blue];
m6_24 -> m6_25  [key=0, style=solid, color=green];
m6_782 -> m6_783  [key=0, style=solid];
m6_783 -> m6_784  [key=0, style=solid];
m6_783 -> m6_36  [key=2, style=dotted];
m6_783 -> m6_785  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_784 -> m6_782  [key=0, style=bold, color=blue];
m6_319 -> m6_320  [key=0, style=solid];
m6_320 -> m6_321  [key=0, style=solid];
m6_320 -> m6_36  [key=2, style=dotted];
m6_320 -> m6_322  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_321 -> m6_319  [key=0, style=bold, color=blue];
m6_559 -> m6_560  [key=0, style=solid];
m6_560 -> m6_561  [key=0, style=solid];
m6_560 -> m6_36  [key=2, style=dotted];
m6_560 -> m6_562  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_561 -> m6_559  [key=0, style=bold, color=blue];
m6_589 -> m6_590  [key=0, style=solid];
m6_590 -> m6_591  [key=0, style=solid];
m6_590 -> m6_36  [key=2, style=dotted];
m6_590 -> m6_592  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_591 -> m6_589  [key=0, style=bold, color=blue];
m6_407 -> m6_408  [key=0, style=solid];
m6_408 -> m6_409  [key=0, style=solid];
m6_408 -> m6_36  [key=2, style=dotted];
m6_408 -> m6_410  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_409 -> m6_407  [key=0, style=bold, color=blue];
m6_177 -> m6_178  [key=0, style=solid];
m6_178 -> m6_47  [key=2, style=dotted];
m6_178 -> m6_46  [key=2, style=dotted];
m6_178 -> m6_179  [key=0, style=solid];
m6_179 -> m6_177  [key=0, style=bold, color=blue];
m6_816 -> m6_817  [key=0, style=solid];
m6_817 -> m6_818  [key=0, style=solid];
m6_817 -> m6_36  [key=2, style=dotted];
m6_817 -> m6_819  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_818 -> m6_816  [key=0, style=bold, color=blue];
m6_7 -> m6_8  [key=0, style=solid];
m6_267 -> m6_268  [key=0, style=solid];
m6_268 -> m6_269  [key=0, style=solid];
m6_268 -> m6_36  [key=2, style=dotted];
m6_268 -> m6_270  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_269 -> m6_267  [key=0, style=bold, color=blue];
m6_514 -> m6_515  [key=0, style=solid];
m6_515 -> m6_516  [key=0, style=solid];
m6_515 -> m6_36  [key=2, style=dotted];
m6_515 -> m6_517  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_516 -> m6_514  [key=0, style=bold, color=blue];
m6_194 -> m6_195  [key=0, style=solid];
m6_195 -> m6_196  [key=0, style=solid];
m6_195 -> m6_36  [key=2, style=dotted];
m6_195 -> m6_197  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_196 -> m6_194  [key=0, style=bold, color=blue];
m6_293 -> m6_294  [key=0, style=solid];
m6_294 -> m6_295  [key=0, style=solid];
m6_294 -> m6_36  [key=2, style=dotted];
m6_294 -> m6_296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_295 -> m6_293  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_9  [key=2, style=dotted];
m6_1 -> m6_3  [key=1, style=dashed, color=darkseagreen4, label=defaultProvider];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_5  [key=2, style=dotted];
m6_2 -> m6_3  [key=0, style=solid];
m6_2 -> m6_6  [key=2, style=dotted];
m6_2 -> m6_7  [key=2, style=dotted];
m6_2 -> m6_8  [key=2, style=dotted];
m6_2 -> m6_10  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_4 -> m6_0  [key=0, style=bold, color=blue];
m6_4 -> m6_5  [key=0, style=solid];
m6_4 -> m6_6  [key=2, style=dotted];
m6_5 -> m6_0  [key=0, style=bold, color=blue];
m6_830 -> m6_831  [key=0, style=solid];
m6_832 -> m6_833  [key=0, style=solid];
m6_832 -> m6_36  [key=2, style=dotted];
m6_832 -> m6_834  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_831 -> m6_832  [key=0, style=solid];
m6_831 -> m6_831  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m6_831 -> m6_835  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_833 -> m6_830  [key=0, style=bold, color=blue];
m6_692 -> m6_693  [key=0, style=solid];
m6_694 -> m6_695  [key=0, style=solid];
m6_694 -> m6_36  [key=2, style=dotted];
m6_694 -> m6_696  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_693 -> m6_694  [key=0, style=solid];
m6_693 -> m6_693  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m6_693 -> m6_697  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_695 -> m6_692  [key=0, style=bold, color=blue];
m6_143 -> m6_144  [key=0, style=solid];
m6_20 -> m6_21  [key=0, style=solid, color=green];
m6_20 -> m6_14  [key=0, style=bold, color=blue];
m6_28 -> m6_29  [key=0, style=solid, color=green];
m6_29 -> m6_30  [key=0, style=solid, color=green];
m6_29 -> m6_23  [key=2, style=dotted, color=green];
m6_29 -> m6_31  [key=2, style=dotted, color=green];
m6_30 -> m6_28  [key=0, style=bold, color=blue];
m6_40 -> m6_49  [key=2, style=dotted];
m6_40 -> m6_41  [key=0, style=solid];
m6_40 -> m6_55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_41 -> m6_42  [key=0, style=solid];
m6_41 -> m6_50  [key=2, style=dotted];
m6_43 -> m6_44  [key=0, style=solid];
m6_43 -> m6_50  [key=2, style=dotted];
m6_67 -> m6_49  [key=2, style=dotted];
m6_67 -> m6_68  [key=0, style=solid];
m6_67 -> m6_74  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_68 -> m6_69  [key=0, style=solid];
m6_68 -> m6_50  [key=2, style=dotted];
m6_70 -> m6_71  [key=0, style=solid];
m6_70 -> m6_50  [key=2, style=dotted];
m6_89 -> m6_49  [key=2, style=dotted];
m6_89 -> m6_90  [key=0, style=solid];
m6_89 -> m6_115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_90 -> m6_91  [key=0, style=solid];
m6_90 -> m6_50  [key=2, style=dotted];
m6_90 -> m6_92  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_93 -> m6_94  [key=0, style=solid];
m6_93 -> m6_50  [key=2, style=dotted];
m6_93 -> m6_95  [key=1, style=dashed, color=darkseagreen4, label=anotherJob];
m6_129 -> m6_49  [key=2, style=dotted];
m6_129 -> m6_130  [key=0, style=solid];
m6_129 -> m6_149  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_130 -> m6_131  [key=0, style=solid];
m6_130 -> m6_50  [key=2, style=dotted];
m6_130 -> m6_132  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_160 -> m6_161  [key=0, style=solid];
m6_160 -> m6_164  [key=2, style=dotted];
m6_161 -> m6_49  [key=2, style=dotted];
m6_161 -> m6_162  [key=0, style=solid];
m6_161 -> m6_169  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_184 -> m6_49  [key=2, style=dotted];
m6_184 -> m6_185  [key=0, style=solid];
m6_184 -> m6_190  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_198 -> m6_49  [key=2, style=dotted];
m6_198 -> m6_199  [key=0, style=solid];
m6_198 -> m6_208  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_216 -> m6_49  [key=2, style=dotted];
m6_216 -> m6_217  [key=0, style=solid];
m6_216 -> m6_220  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_228 -> m6_49  [key=2, style=dotted];
m6_228 -> m6_229  [key=0, style=solid];
m6_228 -> m6_234  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_242 -> m6_49  [key=2, style=dotted];
m6_242 -> m6_243  [key=0, style=solid];
m6_242 -> m6_251  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_259 -> m6_49  [key=2, style=dotted];
m6_259 -> m6_260  [key=0, style=solid];
m6_259 -> m6_263  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_271 -> m6_49  [key=2, style=dotted];
m6_271 -> m6_272  [key=0, style=solid];
m6_271 -> m6_277  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_285 -> m6_49  [key=2, style=dotted];
m6_285 -> m6_286  [key=0, style=solid];
m6_285 -> m6_289  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_297 -> m6_49  [key=2, style=dotted];
m6_297 -> m6_298  [key=0, style=solid];
m6_297 -> m6_301  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_309 -> m6_49  [key=2, style=dotted];
m6_309 -> m6_310  [key=0, style=solid];
m6_309 -> m6_315  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_323 -> m6_49  [key=2, style=dotted];
m6_323 -> m6_324  [key=0, style=solid];
m6_323 -> m6_327  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_335 -> m6_49  [key=2, style=dotted];
m6_335 -> m6_336  [key=0, style=solid];
m6_335 -> m6_339  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_348 -> m6_49  [key=2, style=dotted];
m6_348 -> m6_349  [key=0, style=solid];
m6_348 -> m6_352  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_360 -> m6_49  [key=2, style=dotted];
m6_360 -> m6_361  [key=0, style=solid];
m6_360 -> m6_364  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_372 -> m6_49  [key=2, style=dotted];
m6_372 -> m6_373  [key=0, style=solid];
m6_372 -> m6_377  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_385 -> m6_49  [key=2, style=dotted];
m6_385 -> m6_386  [key=0, style=solid];
m6_385 -> m6_389  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_397 -> m6_49  [key=2, style=dotted];
m6_397 -> m6_398  [key=0, style=solid];
m6_397 -> m6_401  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_411 -> m6_49  [key=2, style=dotted];
m6_411 -> m6_412  [key=0, style=solid];
m6_411 -> m6_415  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_423 -> m6_49  [key=2, style=dotted];
m6_423 -> m6_424  [key=0, style=solid];
m6_423 -> m6_427  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_435 -> m6_49  [key=2, style=dotted];
m6_435 -> m6_436  [key=0, style=solid];
m6_435 -> m6_442  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_454 -> m6_49  [key=2, style=dotted];
m6_454 -> m6_455  [key=0, style=solid];
m6_454 -> m6_458  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_468 -> m6_49  [key=2, style=dotted];
m6_468 -> m6_469  [key=0, style=solid];
m6_468 -> m6_472  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_480 -> m6_49  [key=2, style=dotted];
m6_480 -> m6_481  [key=0, style=solid];
m6_480 -> m6_484  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_492 -> m6_49  [key=2, style=dotted];
m6_492 -> m6_493  [key=0, style=solid];
m6_492 -> m6_496  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_504 -> m6_13  [key=2, style=dotted];
m6_504 -> m6_505  [key=0, style=solid];
m6_504 -> m6_507  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_508 -> m6_49  [key=2, style=dotted];
m6_508 -> m6_509  [key=0, style=solid];
m6_508 -> m6_510  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_518 -> m6_13  [key=2, style=dotted];
m6_518 -> m6_519  [key=0, style=solid];
m6_518 -> m6_521  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_522 -> m6_49  [key=2, style=dotted];
m6_522 -> m6_523  [key=0, style=solid];
m6_522 -> m6_524  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_531 -> m6_49  [key=2, style=dotted];
m6_531 -> m6_532  [key=0, style=solid];
m6_531 -> m6_537  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_550 -> m6_13  [key=2, style=dotted];
m6_550 -> m6_551  [key=0, style=solid];
m6_550 -> m6_552  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_553 -> m6_49  [key=2, style=dotted];
m6_553 -> m6_554  [key=0, style=solid];
m6_553 -> m6_555  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_563 -> m6_49  [key=2, style=dotted];
m6_563 -> m6_564  [key=0, style=solid];
m6_563 -> m6_568  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_564 -> m6_49  [key=2, style=dotted];
m6_564 -> m6_565  [key=0, style=solid];
m6_564 -> m6_571  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_578 -> m6_13  [key=2, style=dotted];
m6_578 -> m6_579  [key=0, style=solid];
m6_578 -> m6_581  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_582 -> m6_49  [key=2, style=dotted];
m6_582 -> m6_583  [key=0, style=solid];
m6_582 -> m6_584  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_593 -> m6_13  [key=2, style=dotted];
m6_593 -> m6_594  [key=0, style=solid];
m6_593 -> m6_596  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_597 -> m6_49  [key=2, style=dotted];
m6_597 -> m6_598  [key=0, style=solid];
m6_597 -> m6_599  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_607 -> m6_49  [key=2, style=dotted];
m6_607 -> m6_608  [key=0, style=solid];
m6_607 -> m6_611  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_618 -> m6_13  [key=2, style=dotted];
m6_618 -> m6_619  [key=0, style=solid];
m6_618 -> m6_620  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_621 -> m6_49  [key=2, style=dotted];
m6_621 -> m6_622  [key=0, style=solid];
m6_621 -> m6_623  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_633 -> m6_49  [key=2, style=dotted];
m6_633 -> m6_634  [key=0, style=solid];
m6_633 -> m6_638  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_645 -> m6_13  [key=2, style=dotted];
m6_645 -> m6_646  [key=0, style=solid];
m6_645 -> m6_648  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_649 -> m6_49  [key=2, style=dotted];
m6_649 -> m6_650  [key=0, style=solid];
m6_649 -> m6_651  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_662 -> m6_49  [key=2, style=dotted];
m6_662 -> m6_663  [key=0, style=solid];
m6_662 -> m6_668  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_681 -> m6_13  [key=2, style=dotted];
m6_681 -> m6_682  [key=0, style=solid];
m6_681 -> m6_684  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_685 -> m6_49  [key=2, style=dotted];
m6_685 -> m6_686  [key=0, style=solid];
m6_685 -> m6_687  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_698 -> m6_49  [key=2, style=dotted];
m6_698 -> m6_699  [key=0, style=solid];
m6_698 -> m6_704  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_717 -> m6_13  [key=2, style=dotted];
m6_717 -> m6_718  [key=0, style=solid];
m6_717 -> m6_720  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_721 -> m6_49  [key=2, style=dotted];
m6_721 -> m6_722  [key=0, style=solid];
m6_721 -> m6_723  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_733 -> m6_49  [key=2, style=dotted];
m6_733 -> m6_734  [key=0, style=solid];
m6_733 -> m6_739  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_752 -> m6_13  [key=2, style=dotted];
m6_752 -> m6_753  [key=0, style=solid];
m6_752 -> m6_755  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_756 -> m6_49  [key=2, style=dotted];
m6_756 -> m6_757  [key=0, style=solid];
m6_756 -> m6_758  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_768 -> m6_49  [key=2, style=dotted];
m6_768 -> m6_769  [key=0, style=solid];
m6_768 -> m6_773  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_786 -> m6_13  [key=2, style=dotted];
m6_786 -> m6_787  [key=0, style=solid];
m6_786 -> m6_789  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_790 -> m6_49  [key=2, style=dotted];
m6_790 -> m6_791  [key=0, style=solid];
m6_790 -> m6_792  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_802 -> m6_49  [key=2, style=dotted];
m6_802 -> m6_803  [key=0, style=solid];
m6_802 -> m6_807  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_820 -> m6_13  [key=2, style=dotted];
m6_820 -> m6_821  [key=0, style=solid];
m6_820 -> m6_823  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_824 -> m6_49  [key=2, style=dotted];
m6_824 -> m6_825  [key=0, style=solid];
m6_824 -> m6_826  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_836 -> m6_49  [key=2, style=dotted];
m6_836 -> m6_837  [key=0, style=solid];
m6_836 -> m6_841  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_11 -> m6_13  [key=2, style=dotted];
m6_11 -> m6_12  [key=0, style=solid];
m6_11 -> m6_14  [key=2, style=dotted];
m6_11 -> m6_7  [key=0, style=bold, color=blue];
m6_167 -> m6_13  [key=2, style=dotted];
m6_167 -> m6_168  [key=0, style=solid];
m6_167 -> m6_14  [key=2, style=dotted];
m6_217 -> m6_13  [key=2, style=dotted];
m6_217 -> m6_218  [key=0, style=solid];
m6_217 -> m6_47  [key=2, style=dotted];
m6_260 -> m6_13  [key=2, style=dotted];
m6_260 -> m6_261  [key=0, style=solid];
m6_260 -> m6_47  [key=2, style=dotted];
m6_286 -> m6_13  [key=2, style=dotted];
m6_286 -> m6_287  [key=0, style=solid];
m6_286 -> m6_47  [key=2, style=dotted];
m6_298 -> m6_13  [key=2, style=dotted];
m6_298 -> m6_299  [key=0, style=solid];
m6_298 -> m6_47  [key=2, style=dotted];
m6_336 -> m6_13  [key=2, style=dotted];
m6_336 -> m6_337  [key=0, style=solid];
m6_336 -> m6_47  [key=2, style=dotted];
m6_349 -> m6_13  [key=2, style=dotted];
m6_349 -> m6_350  [key=0, style=solid];
m6_349 -> m6_47  [key=2, style=dotted];
m6_361 -> m6_13  [key=2, style=dotted];
m6_361 -> m6_362  [key=0, style=solid];
m6_361 -> m6_47  [key=2, style=dotted];
m6_386 -> m6_13  [key=2, style=dotted];
m6_386 -> m6_387  [key=0, style=solid];
m6_386 -> m6_47  [key=2, style=dotted];
m6_398 -> m6_13  [key=2, style=dotted];
m6_398 -> m6_399  [key=0, style=solid];
m6_398 -> m6_47  [key=2, style=dotted];
m6_412 -> m6_13  [key=2, style=dotted];
m6_412 -> m6_413  [key=0, style=solid];
m6_412 -> m6_47  [key=2, style=dotted];
m6_424 -> m6_13  [key=2, style=dotted];
m6_424 -> m6_425  [key=0, style=solid];
m6_424 -> m6_47  [key=2, style=dotted];
m6_455 -> m6_13  [key=2, style=dotted];
m6_455 -> m6_456  [key=0, style=solid];
m6_455 -> m6_47  [key=2, style=dotted];
m6_469 -> m6_13  [key=2, style=dotted];
m6_469 -> m6_470  [key=0, style=solid];
m6_469 -> m6_47  [key=2, style=dotted];
m6_481 -> m6_13  [key=2, style=dotted];
m6_481 -> m6_482  [key=0, style=solid];
m6_481 -> m6_47  [key=2, style=dotted];
m6_493 -> m6_13  [key=2, style=dotted];
m6_493 -> m6_494  [key=0, style=solid];
m6_493 -> m6_47  [key=2, style=dotted];
m6_565 -> m6_13  [key=2, style=dotted];
m6_565 -> m6_566  [key=0, style=solid];
m6_565 -> m6_47  [key=2, style=dotted];
m6_608 -> m6_13  [key=2, style=dotted];
m6_608 -> m6_609  [key=0, style=solid];
m6_37 -> m6_40  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_37 -> m6_41  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_37 -> m6_43  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_37 -> m6_38  [key=0, style=solid];
m6_37 -> m6_39  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_38 -> m6_40  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m6_38 -> m6_41  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m6_38 -> m6_39  [key=0, style=solid];
m6_38 -> m6_46  [key=2, style=dotted];
m6_38 -> m6_47  [key=2, style=dotted];
m6_38 -> m6_48  [key=2, style=dotted];
m6_38 -> m6_56  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m6_39 -> m6_40  [key=0, style=solid];
m6_39 -> m6_43  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
m6_39 -> m6_46  [key=2, style=dotted];
m6_39 -> m6_47  [key=2, style=dotted];
m6_39 -> m6_48  [key=2, style=dotted];
m6_55 -> m6_56  [key=0, style=solid];
m6_42 -> m6_43  [key=0, style=solid];
m6_42 -> m6_51  [key=2, style=dotted];
m6_42 -> m6_52  [key=2, style=dotted];
m6_42 -> m6_53  [key=2, style=dotted];
m6_44 -> m6_45  [key=0, style=solid];
m6_44 -> m6_54  [key=2, style=dotted];
m6_64 -> m6_67  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_64 -> m6_68  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_64 -> m6_70  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_64 -> m6_65  [key=0, style=solid];
m6_64 -> m6_66  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_65 -> m6_67  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m6_65 -> m6_68  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m6_65 -> m6_66  [key=0, style=solid];
m6_65 -> m6_46  [key=2, style=dotted];
m6_65 -> m6_47  [key=2, style=dotted];
m6_65 -> m6_48  [key=2, style=dotted];
m6_65 -> m6_75  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m6_66 -> m6_67  [key=0, style=solid];
m6_66 -> m6_70  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
m6_66 -> m6_46  [key=2, style=dotted];
m6_66 -> m6_47  [key=2, style=dotted];
m6_66 -> m6_48  [key=2, style=dotted];
m6_74 -> m6_75  [key=0, style=solid];
m6_69 -> m6_70  [key=0, style=solid];
m6_69 -> m6_54  [key=2, style=dotted];
m6_71 -> m6_72  [key=0, style=solid];
m6_71 -> m6_73  [key=2, style=dotted];
m6_82 -> m6_89  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_82 -> m6_90  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_82 -> m6_93  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_82 -> m6_83  [key=0, style=solid];
m6_82 -> m6_84  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_82 -> m6_96  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_83 -> m6_89  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m6_83 -> m6_90  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m6_83 -> m6_84  [key=0, style=solid];
m6_83 -> m6_46  [key=2, style=dotted];
m6_83 -> m6_47  [key=2, style=dotted];
m6_83 -> m6_48  [key=2, style=dotted];
m6_83 -> m6_116  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m6_83 -> m6_97  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m6_85 -> m6_89  [key=1, style=dashed, color=darkseagreen4, label=state];
m6_85 -> m6_86  [key=0, style=solid];
m6_85 -> m6_103  [key=2, style=dotted];
m6_85 -> m6_87  [key=1, style=dashed, color=darkseagreen4, label=state];
m6_85 -> m6_88  [key=1, style=dashed, color=darkseagreen4, label=state];
m6_85 -> m6_116  [key=1, style=dashed, color=darkseagreen4, label=state];
m6_88 -> m6_89  [key=0, style=solid];
m6_88 -> m6_6  [key=2, style=dotted];
m6_88 -> m6_104  [key=2, style=dotted];
m6_88 -> m6_8  [key=2, style=dotted];
m6_88 -> m6_111  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_115 -> m6_116  [key=0, style=solid];
m6_91 -> m6_19  [key=2, style=dotted];
m6_91 -> m6_92  [key=0, style=solid];
m6_92 -> m6_93  [key=0, style=solid];
m6_92 -> m6_73  [key=2, style=dotted];
m6_84 -> m6_93  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
m6_84 -> m6_85  [key=0, style=solid];
m6_84 -> m6_46  [key=2, style=dotted];
m6_84 -> m6_47  [key=2, style=dotted];
m6_84 -> m6_48  [key=2, style=dotted];
m6_94 -> m6_95  [key=0, style=solid];
m6_94 -> m6_54  [key=2, style=dotted];
m6_95 -> m6_96  [key=0, style=solid];
m6_95 -> m6_54  [key=2, style=dotted];
m6_123 -> m6_129  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_123 -> m6_130  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_123 -> m6_124  [key=0, style=solid];
m6_123 -> m6_133  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_124 -> m6_129  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m6_124 -> m6_130  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m6_124 -> m6_125  [key=0, style=solid];
m6_124 -> m6_46  [key=2, style=dotted];
m6_124 -> m6_47  [key=2, style=dotted];
m6_124 -> m6_48  [key=2, style=dotted];
m6_124 -> m6_150  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m6_124 -> m6_134  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m6_125 -> m6_129  [key=1, style=dashed, color=darkseagreen4, label=state];
m6_125 -> m6_126  [key=0, style=solid];
m6_125 -> m6_103  [key=2, style=dotted];
m6_125 -> m6_127  [key=1, style=dashed, color=darkseagreen4, label=state];
m6_125 -> m6_128  [key=1, style=dashed, color=darkseagreen4, label=state];
m6_125 -> m6_150  [key=1, style=dashed, color=darkseagreen4, label=state];
m6_128 -> m6_129  [key=0, style=solid];
m6_128 -> m6_6  [key=2, style=dotted];
m6_128 -> m6_104  [key=2, style=dotted];
m6_128 -> m6_8  [key=2, style=dotted];
m6_128 -> m6_146  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_149 -> m6_150  [key=0, style=solid];
m6_131 -> m6_132  [key=0, style=solid];
m6_131 -> m6_54  [key=2, style=dotted];
m6_132 -> m6_133  [key=0, style=solid];
m6_132 -> m6_54  [key=2, style=dotted];
m6_156 -> m6_161  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_156 -> m6_157  [key=0, style=solid];
m6_158 -> m6_160  [key=1, style=dashed, color=darkseagreen4, label=correctProvider];
m6_158 -> m6_159  [key=0, style=solid];
m6_158 -> m6_5  [key=2, style=dotted];
m6_159 -> m6_160  [key=0, style=solid];
m6_159 -> m6_6  [key=2, style=dotted];
m6_159 -> m6_8  [key=2, style=dotted];
m6_159 -> m6_166  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_162 -> m6_163  [key=0, style=solid];
m6_162 -> m6_165  [key=2, style=dotted];
m6_162 -> m6_173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_169 -> m6_170  [key=0, style=solid];
m6_183 -> m6_184  [key=0, style=solid];
m6_183 -> m6_185  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_185 -> m6_186  [key=0, style=solid];
m6_185 -> m6_46  [key=2, style=dotted];
m6_185 -> m6_47  [key=2, style=dotted];
m6_185 -> m6_187  [key=1, style=dashed, color=darkseagreen4, label=record];
m6_185 -> m6_188  [key=1, style=dashed, color=darkseagreen4, label=record];
m6_190 -> m6_191  [key=0, style=solid];
m6_197 -> m6_198  [key=0, style=solid];
m6_197 -> m6_199  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_199 -> m6_200  [key=0, style=solid];
m6_199 -> m6_46  [key=2, style=dotted];
m6_199 -> m6_47  [key=2, style=dotted];
m6_199 -> m6_201  [key=1, style=dashed, color=darkseagreen4, label=record];
m6_199 -> m6_202  [key=1, style=dashed, color=darkseagreen4, label=record];
m6_199 -> m6_203  [key=1, style=dashed, color=darkseagreen4, label=record];
m6_208 -> m6_209  [key=0, style=solid];
m6_215 -> m6_216  [key=0, style=solid];
m6_215 -> m6_217  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_220 -> m6_221  [key=0, style=solid];
m6_220 -> m6_222  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_227 -> m6_228  [key=0, style=solid];
m6_227 -> m6_229  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_229 -> m6_230  [key=0, style=solid];
m6_229 -> m6_46  [key=2, style=dotted];
m6_229 -> m6_47  [key=2, style=dotted];
m6_229 -> m6_231  [key=1, style=dashed, color=darkseagreen4, label=record];
m6_229 -> m6_232  [key=1, style=dashed, color=darkseagreen4, label=record];
m6_234 -> m6_235  [key=0, style=solid];
m6_241 -> m6_242  [key=0, style=solid];
m6_241 -> m6_243  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_243 -> m6_244  [key=0, style=solid];
m6_243 -> m6_46  [key=2, style=dotted];
m6_243 -> m6_47  [key=2, style=dotted];
m6_243 -> m6_245  [key=1, style=dashed, color=darkseagreen4, label=record];
m6_243 -> m6_246  [key=1, style=dashed, color=darkseagreen4, label=record];
m6_243 -> m6_247  [key=1, style=dashed, color=darkseagreen4, label=record];
m6_251 -> m6_252  [key=0, style=solid];
m6_258 -> m6_259  [key=0, style=solid];
m6_258 -> m6_260  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_263 -> m6_264  [key=0, style=solid];
m6_263 -> m6_265  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_270 -> m6_271  [key=0, style=solid];
m6_270 -> m6_272  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_272 -> m6_273  [key=0, style=solid];
m6_272 -> m6_46  [key=2, style=dotted];
m6_272 -> m6_47  [key=2, style=dotted];
m6_272 -> m6_274  [key=1, style=dashed, color=darkseagreen4, label=record];
m6_272 -> m6_275  [key=1, style=dashed, color=darkseagreen4, label=record];
m6_277 -> m6_278  [key=0, style=solid];
m6_284 -> m6_285  [key=0, style=solid];
m6_284 -> m6_286  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_289 -> m6_290  [key=0, style=solid];
m6_289 -> m6_291  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_296 -> m6_297  [key=0, style=solid];
m6_296 -> m6_298  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_301 -> m6_302  [key=0, style=solid];
m6_301 -> m6_303  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_308 -> m6_309  [key=0, style=solid];
m6_308 -> m6_310  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_310 -> m6_311  [key=0, style=solid];
m6_310 -> m6_46  [key=2, style=dotted];
m6_310 -> m6_47  [key=2, style=dotted];
m6_310 -> m6_312  [key=1, style=dashed, color=darkseagreen4, label=record];
m6_310 -> m6_313  [key=1, style=dashed, color=darkseagreen4, label=record];
m6_315 -> m6_316  [key=0, style=solid];
m6_322 -> m6_323  [key=0, style=solid];
m6_322 -> m6_324  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_324 -> m6_325  [key=0, style=solid];
m6_324 -> m6_46  [key=2, style=dotted];
m6_324 -> m6_47  [key=2, style=dotted];
m6_327 -> m6_328  [key=0, style=solid];
m6_327 -> m6_329  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_334 -> m6_335  [key=0, style=solid];
m6_334 -> m6_336  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_339 -> m6_340  [key=0, style=solid];
m6_339 -> m6_341  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_347 -> m6_348  [key=0, style=solid];
m6_347 -> m6_349  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_352 -> m6_353  [key=0, style=solid];
m6_352 -> m6_354  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_359 -> m6_360  [key=0, style=solid];
m6_359 -> m6_361  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_364 -> m6_365  [key=0, style=solid];
m6_364 -> m6_366  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_371 -> m6_372  [key=0, style=solid];
m6_371 -> m6_373  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_373 -> m6_374  [key=0, style=solid];
m6_373 -> m6_46  [key=2, style=dotted];
m6_373 -> m6_47  [key=2, style=dotted];
m6_373 -> m6_375  [key=1, style=dashed, color=darkseagreen4, label=record];
m6_377 -> m6_378  [key=0, style=solid];
m6_384 -> m6_385  [key=0, style=solid];
m6_384 -> m6_386  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_389 -> m6_390  [key=0, style=solid];
m6_389 -> m6_391  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_396 -> m6_397  [key=0, style=solid];
m6_396 -> m6_398  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_401 -> m6_402  [key=0, style=solid];
m6_401 -> m6_403  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_401 -> m6_404  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_410 -> m6_411  [key=0, style=solid];
m6_410 -> m6_412  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_415 -> m6_416  [key=0, style=solid];
m6_415 -> m6_417  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_422 -> m6_423  [key=0, style=solid];
m6_422 -> m6_424  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_427 -> m6_428  [key=0, style=solid];
m6_427 -> m6_429  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_434 -> m6_435  [key=0, style=solid];
m6_434 -> m6_436  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_436 -> m6_437  [key=0, style=solid];
m6_436 -> m6_46  [key=2, style=dotted];
m6_436 -> m6_441  [key=2, style=dotted];
m6_436 -> m6_438  [key=1, style=dashed, color=darkseagreen4, label=records];
m6_436 -> m6_439  [key=1, style=dashed, color=darkseagreen4, label=records];
m6_442 -> m6_443  [key=0, style=solid];
m6_442 -> m6_444  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_442 -> m6_445  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_442 -> m6_446  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_442 -> m6_447  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_453 -> m6_454  [key=0, style=solid];
m6_453 -> m6_455  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_458 -> m6_459  [key=0, style=solid];
m6_458 -> m6_460  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_458 -> m6_461  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_458 -> m6_462  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_467 -> m6_468  [key=0, style=solid];
m6_467 -> m6_469  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_472 -> m6_473  [key=0, style=solid];
m6_472 -> m6_474  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_479 -> m6_480  [key=0, style=solid];
m6_479 -> m6_481  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_484 -> m6_485  [key=0, style=solid];
m6_484 -> m6_486  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_491 -> m6_492  [key=0, style=solid];
m6_491 -> m6_493  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_496 -> m6_497  [key=0, style=solid];
m6_496 -> m6_498  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m6_503 -> m6_504  [key=0, style=solid];
m6_503 -> m6_508  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_505 -> m6_19  [key=2, style=dotted];
m6_505 -> m6_506  [key=0, style=solid];
m6_507 -> m6_508  [key=0, style=solid];
m6_509 -> m6_507  [key=0, style=bold, color=blue];
m6_510 -> m6_511  [key=0, style=solid];
m6_517 -> m6_518  [key=0, style=solid];
m6_517 -> m6_522  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_519 -> m6_19  [key=2, style=dotted];
m6_519 -> m6_520  [key=0, style=solid];
m6_521 -> m6_522  [key=0, style=solid];
m6_523 -> m6_521  [key=0, style=bold, color=blue];
m6_524 -> m6_525  [key=0, style=solid];
m6_530 -> m6_531  [key=0, style=solid];
m6_530 -> m6_532  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_532 -> m6_533  [key=0, style=solid];
m6_532 -> m6_46  [key=2, style=dotted];
m6_532 -> m6_536  [key=2, style=dotted];
m6_532 -> m6_540  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_532 -> m6_543  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_532 -> m6_534  [key=1, style=dashed, color=darkseagreen4, label=result];
m6_537 -> m6_538  [key=0, style=solid];
m6_549 -> m6_550  [key=0, style=solid];
m6_549 -> m6_553  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_551 -> m6_549  [key=0, style=bold, color=blue];
m6_552 -> m6_553  [key=0, style=solid];
m6_554 -> m6_552  [key=0, style=bold, color=blue];
m6_555 -> m6_556  [key=0, style=solid];
m6_562 -> m6_563  [key=0, style=solid];
m6_562 -> m6_564  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_562 -> m6_565  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_568 -> m6_569  [key=0, style=solid];
m6_571 -> m6_572  [key=0, style=solid];
m6_577 -> m6_578  [key=0, style=solid];
m6_577 -> m6_582  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_579 -> m6_19  [key=2, style=dotted];
m6_579 -> m6_580  [key=0, style=solid];
m6_581 -> m6_582  [key=0, style=solid];
m6_583 -> m6_581  [key=0, style=bold, color=blue];
m6_584 -> m6_585  [key=0, style=solid];
m6_592 -> m6_593  [key=0, style=solid];
m6_592 -> m6_597  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_594 -> m6_19  [key=2, style=dotted];
m6_594 -> m6_595  [key=0, style=solid];
m6_596 -> m6_597  [key=0, style=solid];
m6_598 -> m6_596  [key=0, style=bold, color=blue];
m6_599 -> m6_600  [key=0, style=solid];
m6_605 -> m6_607  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_605 -> m6_608  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_605 -> m6_606  [key=0, style=solid];
m6_606 -> m6_607  [key=0, style=solid];
m6_606 -> m6_587  [key=2, style=dotted];
m6_606 -> m6_612  [key=1, style=dashed, color=darkseagreen4, label=items];
m6_606 -> m6_609  [key=1, style=dashed, color=darkseagreen4, label=items];
m6_611 -> m6_612  [key=0, style=solid];
m6_617 -> m6_618  [key=0, style=solid];
m6_617 -> m6_621  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_619 -> m6_617  [key=0, style=bold, color=blue];
m6_620 -> m6_621  [key=0, style=solid];
m6_622 -> m6_620  [key=0, style=bold, color=blue];
m6_623 -> m6_624  [key=0, style=solid];
m6_631 -> m6_633  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_631 -> m6_632  [key=0, style=solid];
m6_631 -> m6_634  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_632 -> m6_633  [key=0, style=solid];
m6_632 -> m6_637  [key=2, style=dotted];
m6_634 -> m6_635  [key=0, style=solid];
m6_634 -> m6_46  [key=2, style=dotted];
m6_634 -> m6_47  [key=2, style=dotted];
m6_638 -> m6_639  [key=0, style=solid];
m6_644 -> m6_645  [key=0, style=solid];
m6_644 -> m6_649  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_646 -> m6_19  [key=2, style=dotted];
m6_646 -> m6_647  [key=0, style=solid];
m6_648 -> m6_649  [key=0, style=solid];
m6_650 -> m6_648  [key=0, style=bold, color=blue];
m6_651 -> m6_652  [key=0, style=solid];
m6_660 -> m6_662  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_660 -> m6_661  [key=0, style=solid];
m6_660 -> m6_663  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_661 -> m6_662  [key=0, style=solid];
m6_661 -> m6_637  [key=2, style=dotted];
m6_663 -> m6_664  [key=0, style=solid];
m6_663 -> m6_46  [key=2, style=dotted];
m6_663 -> m6_536  [key=2, style=dotted];
m6_663 -> m6_671  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_663 -> m6_674  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_663 -> m6_665  [key=1, style=dashed, color=darkseagreen4, label=records];
m6_663 -> m6_666  [key=1, style=dashed, color=darkseagreen4, label=records];
m6_668 -> m6_669  [key=0, style=solid];
m6_680 -> m6_681  [key=0, style=solid];
m6_680 -> m6_685  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_682 -> m6_19  [key=2, style=dotted];
m6_682 -> m6_683  [key=0, style=solid];
m6_684 -> m6_685  [key=0, style=solid];
m6_686 -> m6_684  [key=0, style=bold, color=blue];
m6_687 -> m6_688  [key=0, style=solid];
m6_696 -> m6_698  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_696 -> m6_697  [key=0, style=solid];
m6_696 -> m6_699  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_697 -> m6_698  [key=0, style=solid];
m6_697 -> m6_637  [key=2, style=dotted];
m6_699 -> m6_700  [key=0, style=solid];
m6_699 -> m6_46  [key=2, style=dotted];
m6_699 -> m6_536  [key=2, style=dotted];
m6_699 -> m6_707  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_699 -> m6_710  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_699 -> m6_701  [key=1, style=dashed, color=darkseagreen4, label=records];
m6_699 -> m6_702  [key=1, style=dashed, color=darkseagreen4, label=records];
m6_704 -> m6_705  [key=0, style=solid];
m6_716 -> m6_717  [key=0, style=solid];
m6_716 -> m6_721  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_718 -> m6_19  [key=2, style=dotted];
m6_718 -> m6_719  [key=0, style=solid];
m6_720 -> m6_721  [key=0, style=solid];
m6_722 -> m6_720  [key=0, style=bold, color=blue];
m6_723 -> m6_724  [key=0, style=solid];
m6_731 -> m6_733  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_731 -> m6_732  [key=0, style=solid];
m6_731 -> m6_734  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_732 -> m6_733  [key=0, style=solid];
m6_732 -> m6_637  [key=2, style=dotted];
m6_734 -> m6_735  [key=0, style=solid];
m6_734 -> m6_46  [key=2, style=dotted];
m6_734 -> m6_536  [key=2, style=dotted];
m6_734 -> m6_742  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_734 -> m6_745  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_734 -> m6_736  [key=1, style=dashed, color=darkseagreen4, label=records];
m6_734 -> m6_737  [key=1, style=dashed, color=darkseagreen4, label=records];
m6_739 -> m6_740  [key=0, style=solid];
m6_751 -> m6_752  [key=0, style=solid];
m6_751 -> m6_756  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_753 -> m6_19  [key=2, style=dotted];
m6_753 -> m6_754  [key=0, style=solid];
m6_755 -> m6_756  [key=0, style=solid];
m6_757 -> m6_755  [key=0, style=bold, color=blue];
m6_758 -> m6_759  [key=0, style=solid];
m6_766 -> m6_768  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_766 -> m6_767  [key=0, style=solid];
m6_766 -> m6_769  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_767 -> m6_768  [key=0, style=solid];
m6_767 -> m6_52  [key=2, style=dotted];
m6_767 -> m6_637  [key=2, style=dotted];
m6_769 -> m6_770  [key=0, style=solid];
m6_769 -> m6_46  [key=2, style=dotted];
m6_769 -> m6_536  [key=2, style=dotted];
m6_769 -> m6_776  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_769 -> m6_779  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_769 -> m6_771  [key=1, style=dashed, color=darkseagreen4, label=records];
m6_773 -> m6_774  [key=0, style=solid];
m6_785 -> m6_786  [key=0, style=solid];
m6_785 -> m6_790  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_787 -> m6_19  [key=2, style=dotted];
m6_787 -> m6_788  [key=0, style=solid];
m6_789 -> m6_790  [key=0, style=solid];
m6_791 -> m6_789  [key=0, style=bold, color=blue];
m6_792 -> m6_793  [key=0, style=solid];
m6_800 -> m6_802  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_800 -> m6_801  [key=0, style=solid];
m6_800 -> m6_803  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_801 -> m6_802  [key=0, style=solid];
m6_801 -> m6_52  [key=2, style=dotted];
m6_801 -> m6_637  [key=2, style=dotted];
m6_803 -> m6_804  [key=0, style=solid];
m6_803 -> m6_46  [key=2, style=dotted];
m6_803 -> m6_536  [key=2, style=dotted];
m6_803 -> m6_810  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_803 -> m6_813  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_803 -> m6_805  [key=1, style=dashed, color=darkseagreen4, label=records];
m6_807 -> m6_808  [key=0, style=solid];
m6_819 -> m6_820  [key=0, style=solid];
m6_819 -> m6_824  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_821 -> m6_19  [key=2, style=dotted];
m6_821 -> m6_822  [key=0, style=solid];
m6_823 -> m6_824  [key=0, style=solid];
m6_825 -> m6_823  [key=0, style=bold, color=blue];
m6_826 -> m6_827  [key=0, style=solid];
m6_834 -> m6_836  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_834 -> m6_835  [key=0, style=solid];
m6_834 -> m6_837  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_835 -> m6_836  [key=0, style=solid];
m6_835 -> m6_52  [key=2, style=dotted];
m6_835 -> m6_637  [key=2, style=dotted];
m6_837 -> m6_838  [key=0, style=solid];
m6_837 -> m6_46  [key=2, style=dotted];
m6_837 -> m6_536  [key=2, style=dotted];
m6_837 -> m6_844  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_837 -> m6_847  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_837 -> m6_839  [key=1, style=dashed, color=darkseagreen4, label=records];
m6_841 -> m6_842  [key=0, style=solid];
m6_97 -> m6_19  [key=2, style=dotted];
m6_97 -> m6_98  [key=0, style=solid];
m6_97 -> m6_48  [key=2, style=dotted];
m6_98 -> m6_19  [key=2, style=dotted];
m6_98 -> m6_99  [key=0, style=solid];
m6_99 -> m6_19  [key=2, style=dotted];
m6_99 -> m6_100  [key=0, style=solid];
m6_101 -> m6_19  [key=2, style=dotted];
m6_101 -> m6_102  [key=0, style=solid];
m6_134 -> m6_19  [key=2, style=dotted];
m6_134 -> m6_135  [key=0, style=solid];
m6_134 -> m6_48  [key=2, style=dotted];
m6_135 -> m6_19  [key=2, style=dotted];
m6_135 -> m6_136  [key=0, style=solid];
m6_136 -> m6_19  [key=2, style=dotted];
m6_136 -> m6_137  [key=0, style=solid];
m6_138 -> m6_19  [key=2, style=dotted];
m6_138 -> m6_139  [key=0, style=solid];
m6_186 -> m6_19  [key=2, style=dotted];
m6_186 -> m6_187  [key=0, style=solid];
m6_187 -> m6_19  [key=2, style=dotted];
m6_187 -> m6_188  [key=0, style=solid];
m6_188 -> m6_19  [key=2, style=dotted];
m6_188 -> m6_189  [key=0, style=solid];
m6_200 -> m6_19  [key=2, style=dotted];
m6_200 -> m6_201  [key=0, style=solid];
m6_201 -> m6_19  [key=2, style=dotted];
m6_201 -> m6_202  [key=0, style=solid];
m6_218 -> m6_19  [key=2, style=dotted];
m6_218 -> m6_219  [key=0, style=solid];
m6_230 -> m6_19  [key=2, style=dotted];
m6_230 -> m6_231  [key=0, style=solid];
m6_231 -> m6_19  [key=2, style=dotted];
m6_231 -> m6_232  [key=0, style=solid];
m6_232 -> m6_19  [key=2, style=dotted];
m6_232 -> m6_233  [key=0, style=solid];
m6_244 -> m6_19  [key=2, style=dotted];
m6_244 -> m6_245  [key=0, style=solid];
m6_245 -> m6_19  [key=2, style=dotted];
m6_245 -> m6_246  [key=0, style=solid];
m6_261 -> m6_19  [key=2, style=dotted];
m6_261 -> m6_262  [key=0, style=solid];
m6_273 -> m6_19  [key=2, style=dotted];
m6_273 -> m6_274  [key=0, style=solid];
m6_274 -> m6_19  [key=2, style=dotted];
m6_274 -> m6_275  [key=0, style=solid];
m6_275 -> m6_19  [key=2, style=dotted];
m6_275 -> m6_276  [key=0, style=solid];
m6_287 -> m6_19  [key=2, style=dotted];
m6_287 -> m6_288  [key=0, style=solid];
m6_299 -> m6_19  [key=2, style=dotted];
m6_299 -> m6_300  [key=0, style=solid];
m6_311 -> m6_19  [key=2, style=dotted];
m6_311 -> m6_312  [key=0, style=solid];
m6_312 -> m6_19  [key=2, style=dotted];
m6_312 -> m6_313  [key=0, style=solid];
m6_313 -> m6_19  [key=2, style=dotted];
m6_313 -> m6_314  [key=0, style=solid];
m6_325 -> m6_19  [key=2, style=dotted];
m6_325 -> m6_326  [key=0, style=solid];
m6_337 -> m6_19  [key=2, style=dotted];
m6_337 -> m6_338  [key=0, style=solid];
m6_350 -> m6_19  [key=2, style=dotted];
m6_350 -> m6_351  [key=0, style=solid];
m6_362 -> m6_19  [key=2, style=dotted];
m6_362 -> m6_363  [key=0, style=solid];
m6_374 -> m6_19  [key=2, style=dotted];
m6_374 -> m6_375  [key=0, style=solid];
m6_375 -> m6_19  [key=2, style=dotted];
m6_375 -> m6_376  [key=0, style=solid];
m6_387 -> m6_19  [key=2, style=dotted];
m6_387 -> m6_388  [key=0, style=solid];
m6_399 -> m6_19  [key=2, style=dotted];
m6_399 -> m6_400  [key=0, style=solid];
m6_413 -> m6_19  [key=2, style=dotted];
m6_413 -> m6_414  [key=0, style=solid];
m6_425 -> m6_19  [key=2, style=dotted];
m6_425 -> m6_426  [key=0, style=solid];
m6_437 -> m6_19  [key=2, style=dotted];
m6_437 -> m6_438  [key=0, style=solid];
m6_438 -> m6_19  [key=2, style=dotted];
m6_438 -> m6_439  [key=0, style=solid];
m6_439 -> m6_19  [key=2, style=dotted];
m6_439 -> m6_440  [key=0, style=solid];
m6_456 -> m6_19  [key=2, style=dotted];
m6_456 -> m6_457  [key=0, style=solid];
m6_470 -> m6_19  [key=2, style=dotted];
m6_470 -> m6_471  [key=0, style=solid];
m6_482 -> m6_19  [key=2, style=dotted];
m6_482 -> m6_483  [key=0, style=solid];
m6_494 -> m6_19  [key=2, style=dotted];
m6_494 -> m6_495  [key=0, style=solid];
m6_533 -> m6_19  [key=2, style=dotted];
m6_533 -> m6_534  [key=0, style=solid];
m6_534 -> m6_19  [key=2, style=dotted];
m6_534 -> m6_535  [key=0, style=solid];
m6_566 -> m6_19  [key=2, style=dotted];
m6_566 -> m6_567  [key=0, style=solid];
m6_609 -> m6_19  [key=2, style=dotted];
m6_609 -> m6_610  [key=0, style=solid];
m6_635 -> m6_19  [key=2, style=dotted];
m6_635 -> m6_636  [key=0, style=solid];
m6_10 -> m6_11  [key=0, style=solid];
m6_10 -> m6_13  [key=2, style=dotted];
m6_12 -> m6_10  [key=0, style=bold, color=blue];
m6_166 -> m6_167  [key=0, style=solid];
m6_168 -> m6_166  [key=0, style=bold, color=blue];
m6_45 -> m6_37  [key=0, style=bold, color=blue];
m6_56 -> m6_57  [key=0, style=solid];
m6_56 -> m6_58  [key=2, style=dotted];
m6_56 -> m6_59  [key=2, style=dotted];
m6_57 -> m6_55  [key=0, style=bold, color=blue];
m6_72 -> m6_64  [key=0, style=bold, color=blue];
m6_75 -> m6_76  [key=0, style=solid];
m6_75 -> m6_77  [key=2, style=dotted];
m6_76 -> m6_74  [key=0, style=bold, color=blue];
m6_102 -> m6_82  [key=0, style=bold, color=blue];
m6_96 -> m6_97  [key=0, style=solid];
m6_96 -> m6_98  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m6_96 -> m6_99  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m6_96 -> m6_101  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m6_96 -> m6_47  [key=2, style=dotted];
m6_96 -> m6_46  [key=2, style=dotted];
m6_96 -> m6_100  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m6_116 -> m6_117  [key=0, style=solid];
m6_116 -> m6_118  [key=2, style=dotted];
m6_86 -> m6_6  [key=2, style=dotted];
m6_86 -> m6_8  [key=2, style=dotted];
m6_86 -> m6_87  [key=0, style=solid];
m6_86 -> m6_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_87 -> m6_88  [key=0, style=solid];
m6_87 -> m6_6  [key=2, style=dotted];
m6_87 -> m6_8  [key=2, style=dotted];
m6_87 -> m6_108  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_111 -> m6_112  [key=0, style=solid];
m6_117 -> m6_115  [key=0, style=bold, color=blue];
m6_139 -> m6_123  [key=0, style=bold, color=blue];
m6_133 -> m6_134  [key=0, style=solid];
m6_133 -> m6_135  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m6_133 -> m6_136  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m6_133 -> m6_138  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m6_133 -> m6_47  [key=2, style=dotted];
m6_133 -> m6_46  [key=2, style=dotted];
m6_133 -> m6_137  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m6_150 -> m6_151  [key=0, style=solid];
m6_150 -> m6_152  [key=2, style=dotted];
m6_126 -> m6_6  [key=2, style=dotted];
m6_126 -> m6_8  [key=2, style=dotted];
m6_126 -> m6_127  [key=0, style=solid];
m6_126 -> m6_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_127 -> m6_128  [key=0, style=solid];
m6_127 -> m6_6  [key=2, style=dotted];
m6_127 -> m6_8  [key=2, style=dotted];
m6_127 -> m6_143  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_146 -> m6_147  [key=0, style=solid];
m6_151 -> m6_149  [key=0, style=bold, color=blue];
m6_163 -> m6_156  [key=0, style=bold, color=blue];
m6_157 -> m6_158  [key=0, style=solid];
m6_157 -> m6_159  [key=1, style=dashed, color=darkseagreen4, label=correctJobQueue];
m6_157 -> m6_162  [key=1, style=dashed, color=darkseagreen4, label=correctJobQueue];
m6_157 -> m6_7  [key=2, style=dotted];
m6_173 -> m6_174  [key=0, style=solid];
m6_171 -> m6_169  [key=0, style=bold, color=blue];
m6_170 -> m6_171  [key=0, style=solid];
m6_170 -> m6_172  [key=2, style=dotted];
m6_189 -> m6_183  [key=0, style=bold, color=blue];
m6_192 -> m6_190  [key=0, style=bold, color=blue];
m6_191 -> m6_192  [key=0, style=solid];
m6_191 -> m6_193  [key=2, style=dotted];
m6_206 -> m6_197  [key=0, style=bold, color=blue];
m6_202 -> m6_73  [key=2, style=dotted];
m6_202 -> m6_203  [key=0, style=solid];
m6_203 -> m6_204  [key=0, style=solid];
m6_203 -> m6_205  [key=1, style=dashed, color=darkseagreen4, label=expireAt];
m6_210 -> m6_208  [key=0, style=bold, color=blue];
m6_209 -> m6_210  [key=0, style=solid];
m6_209 -> m6_58  [key=2, style=dotted];
m6_209 -> m6_211  [key=2, style=dotted];
m6_219 -> m6_215  [key=0, style=bold, color=blue];
m6_223 -> m6_220  [key=0, style=bold, color=blue];
m6_221 -> m6_222  [key=0, style=solid];
m6_221 -> m6_193  [key=2, style=dotted];
m6_222 -> m6_223  [key=0, style=solid];
m6_222 -> m6_193  [key=2, style=dotted];
m6_233 -> m6_227  [key=0, style=bold, color=blue];
m6_236 -> m6_234  [key=0, style=bold, color=blue];
m6_235 -> m6_236  [key=0, style=solid];
m6_235 -> m6_237  [key=2, style=dotted];
m6_250 -> m6_241  [key=0, style=bold, color=blue];
m6_246 -> m6_73  [key=2, style=dotted];
m6_246 -> m6_247  [key=0, style=solid];
m6_247 -> m6_248  [key=0, style=solid];
m6_247 -> m6_249  [key=1, style=dashed, color=darkseagreen4, label=expireAt];
m6_253 -> m6_251  [key=0, style=bold, color=blue];
m6_252 -> m6_253  [key=0, style=solid];
m6_252 -> m6_58  [key=2, style=dotted];
m6_252 -> m6_254  [key=2, style=dotted];
m6_262 -> m6_258  [key=0, style=bold, color=blue];
m6_266 -> m6_263  [key=0, style=bold, color=blue];
m6_264 -> m6_265  [key=0, style=solid];
m6_264 -> m6_237  [key=2, style=dotted];
m6_265 -> m6_266  [key=0, style=solid];
m6_265 -> m6_237  [key=2, style=dotted];
m6_276 -> m6_270  [key=0, style=bold, color=blue];
m6_279 -> m6_277  [key=0, style=bold, color=blue];
m6_278 -> m6_279  [key=0, style=solid];
m6_278 -> m6_280  [key=2, style=dotted];
m6_288 -> m6_284  [key=0, style=bold, color=blue];
m6_292 -> m6_289  [key=0, style=bold, color=blue];
m6_290 -> m6_291  [key=0, style=solid];
m6_290 -> m6_280  [key=2, style=dotted];
m6_291 -> m6_292  [key=0, style=solid];
m6_291 -> m6_280  [key=2, style=dotted];
m6_300 -> m6_296  [key=0, style=bold, color=blue];
m6_304 -> m6_301  [key=0, style=bold, color=blue];
m6_302 -> m6_303  [key=0, style=solid];
m6_302 -> m6_280  [key=2, style=dotted];
m6_303 -> m6_304  [key=0, style=solid];
m6_303 -> m6_280  [key=2, style=dotted];
m6_314 -> m6_308  [key=0, style=bold, color=blue];
m6_317 -> m6_315  [key=0, style=bold, color=blue];
m6_316 -> m6_317  [key=0, style=solid];
m6_316 -> m6_318  [key=2, style=dotted];
m6_326 -> m6_322  [key=0, style=bold, color=blue];
m6_330 -> m6_327  [key=0, style=bold, color=blue];
m6_328 -> m6_329  [key=0, style=solid];
m6_328 -> m6_280  [key=2, style=dotted];
m6_329 -> m6_330  [key=0, style=solid];
m6_329 -> m6_318  [key=2, style=dotted];
m6_338 -> m6_334  [key=0, style=bold, color=blue];
m6_342 -> m6_339  [key=0, style=bold, color=blue];
m6_340 -> m6_341  [key=0, style=solid];
m6_340 -> m6_280  [key=2, style=dotted];
m6_341 -> m6_342  [key=0, style=solid];
m6_341 -> m6_343  [key=2, style=dotted];
m6_351 -> m6_347  [key=0, style=bold, color=blue];
m6_355 -> m6_352  [key=0, style=bold, color=blue];
m6_353 -> m6_354  [key=0, style=solid];
m6_353 -> m6_280  [key=2, style=dotted];
m6_354 -> m6_355  [key=0, style=solid];
m6_354 -> m6_343  [key=2, style=dotted];
m6_363 -> m6_359  [key=0, style=bold, color=blue];
m6_367 -> m6_364  [key=0, style=bold, color=blue];
m6_365 -> m6_366  [key=0, style=solid];
m6_365 -> m6_280  [key=2, style=dotted];
m6_366 -> m6_367  [key=0, style=solid];
m6_366 -> m6_343  [key=2, style=dotted];
m6_376 -> m6_371  [key=0, style=bold, color=blue];
m6_379 -> m6_377  [key=0, style=bold, color=blue];
m6_378 -> m6_379  [key=0, style=solid];
m6_378 -> m6_380  [key=2, style=dotted];
m6_388 -> m6_384  [key=0, style=bold, color=blue];
m6_392 -> m6_389  [key=0, style=bold, color=blue];
m6_390 -> m6_391  [key=0, style=solid];
m6_390 -> m6_380  [key=2, style=dotted];
m6_391 -> m6_392  [key=0, style=solid];
m6_391 -> m6_380  [key=2, style=dotted];
m6_400 -> m6_396  [key=0, style=bold, color=blue];
m6_405 -> m6_401  [key=0, style=bold, color=blue];
m6_402 -> m6_403  [key=0, style=solid];
m6_402 -> m6_380  [key=2, style=dotted];
m6_403 -> m6_404  [key=0, style=solid];
m6_403 -> m6_380  [key=2, style=dotted];
m6_404 -> m6_405  [key=0, style=solid];
m6_404 -> m6_406  [key=2, style=dotted];
m6_414 -> m6_410  [key=0, style=bold, color=blue];
m6_418 -> m6_415  [key=0, style=bold, color=blue];
m6_416 -> m6_417  [key=0, style=solid];
m6_416 -> m6_380  [key=2, style=dotted];
m6_417 -> m6_418  [key=0, style=solid];
m6_417 -> m6_406  [key=2, style=dotted];
m6_426 -> m6_422  [key=0, style=bold, color=blue];
m6_430 -> m6_427  [key=0, style=bold, color=blue];
m6_428 -> m6_429  [key=0, style=solid];
m6_428 -> m6_380  [key=2, style=dotted];
m6_429 -> m6_430  [key=0, style=solid];
m6_429 -> m6_406  [key=2, style=dotted];
m6_440 -> m6_434  [key=0, style=bold, color=blue];
m6_448 -> m6_442  [key=0, style=bold, color=blue];
m6_443 -> m6_444  [key=0, style=solid];
m6_443 -> m6_380  [key=2, style=dotted];
m6_444 -> m6_445  [key=0, style=solid];
m6_444 -> m6_380  [key=2, style=dotted];
m6_445 -> m6_446  [key=0, style=solid];
m6_445 -> m6_380  [key=2, style=dotted];
m6_446 -> m6_447  [key=0, style=solid];
m6_446 -> m6_380  [key=2, style=dotted];
m6_447 -> m6_448  [key=0, style=solid];
m6_447 -> m6_449  [key=2, style=dotted];
m6_457 -> m6_453  [key=0, style=bold, color=blue];
m6_463 -> m6_458  [key=0, style=bold, color=blue];
m6_459 -> m6_460  [key=0, style=solid];
m6_459 -> m6_380  [key=2, style=dotted];
m6_460 -> m6_461  [key=0, style=solid];
m6_460 -> m6_380  [key=2, style=dotted];
m6_461 -> m6_462  [key=0, style=solid];
m6_461 -> m6_380  [key=2, style=dotted];
m6_462 -> m6_463  [key=0, style=solid];
m6_462 -> m6_449  [key=2, style=dotted];
m6_471 -> m6_467  [key=0, style=bold, color=blue];
m6_475 -> m6_472  [key=0, style=bold, color=blue];
m6_473 -> m6_474  [key=0, style=solid];
m6_473 -> m6_380  [key=2, style=dotted];
m6_474 -> m6_475  [key=0, style=solid];
m6_474 -> m6_449  [key=2, style=dotted];
m6_483 -> m6_479  [key=0, style=bold, color=blue];
m6_487 -> m6_484  [key=0, style=bold, color=blue];
m6_485 -> m6_486  [key=0, style=solid];
m6_485 -> m6_380  [key=2, style=dotted];
m6_486 -> m6_487  [key=0, style=solid];
m6_486 -> m6_449  [key=2, style=dotted];
m6_495 -> m6_491  [key=0, style=bold, color=blue];
m6_499 -> m6_496  [key=0, style=bold, color=blue];
m6_497 -> m6_498  [key=0, style=solid];
m6_497 -> m6_380  [key=2, style=dotted];
m6_498 -> m6_499  [key=0, style=solid];
m6_498 -> m6_449  [key=2, style=dotted];
m6_506 -> m6_503  [key=0, style=bold, color=blue];
m6_512 -> m6_510  [key=0, style=bold, color=blue];
m6_511 -> m6_104  [key=2, style=dotted];
m6_511 -> m6_512  [key=0, style=solid];
m6_511 -> m6_513  [key=2, style=dotted];
m6_520 -> m6_517  [key=0, style=bold, color=blue];
m6_526 -> m6_524  [key=0, style=bold, color=blue];
m6_525 -> m6_526  [key=0, style=solid];
m6_525 -> m6_513  [key=2, style=dotted];
m6_535 -> m6_530  [key=0, style=bold, color=blue];
m6_540 -> m6_541  [key=0, style=solid];
m6_543 -> m6_544  [key=0, style=solid];
m6_539 -> m6_537  [key=0, style=bold, color=blue];
m6_538 -> m6_104  [key=2, style=dotted];
m6_538 -> m6_539  [key=0, style=solid];
m6_538 -> m6_513  [key=2, style=dotted];
m6_557 -> m6_555  [key=0, style=bold, color=blue];
m6_556 -> m6_557  [key=0, style=solid];
m6_556 -> m6_558  [key=2, style=dotted];
m6_567 -> m6_562  [key=0, style=bold, color=blue];
m6_570 -> m6_568  [key=0, style=bold, color=blue];
m6_569 -> m6_104  [key=2, style=dotted];
m6_569 -> m6_570  [key=0, style=solid];
m6_569 -> m6_513  [key=2, style=dotted];
m6_573 -> m6_571  [key=0, style=bold, color=blue];
m6_572 -> m6_573  [key=0, style=solid];
m6_572 -> m6_558  [key=2, style=dotted];
m6_580 -> m6_577  [key=0, style=bold, color=blue];
m6_586 -> m6_584  [key=0, style=bold, color=blue];
m6_585 -> m6_586  [key=0, style=solid];
m6_585 -> m6_587  [key=2, style=dotted];
m6_585 -> m6_588  [key=2, style=dotted];
m6_595 -> m6_592  [key=0, style=bold, color=blue];
m6_601 -> m6_599  [key=0, style=bold, color=blue];
m6_600 -> m6_601  [key=0, style=solid];
m6_600 -> m6_588  [key=2, style=dotted];
m6_610 -> m6_605  [key=0, style=bold, color=blue];
m6_612 -> m6_613  [key=0, style=solid];
m6_612 -> m6_588  [key=2, style=dotted];
m6_613 -> m6_611  [key=0, style=bold, color=blue];
m6_625 -> m6_623  [key=0, style=bold, color=blue];
m6_624 -> m6_625  [key=0, style=solid];
m6_624 -> m6_626  [key=2, style=dotted];
m6_636 -> m6_631  [key=0, style=bold, color=blue];
m6_640 -> m6_638  [key=0, style=bold, color=blue];
m6_639 -> m6_640  [key=0, style=solid];
m6_639 -> m6_626  [key=2, style=dotted];
m6_647 -> m6_644  [key=0, style=bold, color=blue];
m6_653 -> m6_651  [key=0, style=bold, color=blue];
m6_652 -> m6_653  [key=0, style=solid];
m6_652 -> m6_654  [key=2, style=dotted];
m6_652 -> m6_655  [key=2, style=dotted];
m6_667 -> m6_660  [key=0, style=bold, color=blue];
m6_664 -> m6_51  [key=2, style=dotted];
m6_664 -> m6_53  [key=2, style=dotted];
m6_664 -> m6_665  [key=0, style=solid];
m6_671 -> m6_672  [key=0, style=solid];
m6_674 -> m6_675  [key=0, style=solid];
m6_665 -> m6_51  [key=2, style=dotted];
m6_665 -> m6_53  [key=2, style=dotted];
m6_665 -> m6_666  [key=0, style=solid];
m6_666 -> m6_54  [key=2, style=dotted];
m6_666 -> m6_667  [key=0, style=solid];
m6_670 -> m6_668  [key=0, style=bold, color=blue];
m6_669 -> m6_670  [key=0, style=solid];
m6_669 -> m6_654  [key=2, style=dotted];
m6_669 -> m6_655  [key=2, style=dotted];
m6_683 -> m6_680  [key=0, style=bold, color=blue];
m6_689 -> m6_687  [key=0, style=bold, color=blue];
m6_688 -> m6_689  [key=0, style=solid];
m6_688 -> m6_690  [key=2, style=dotted];
m6_688 -> m6_691  [key=2, style=dotted];
m6_703 -> m6_696  [key=0, style=bold, color=blue];
m6_700 -> m6_51  [key=2, style=dotted];
m6_700 -> m6_53  [key=2, style=dotted];
m6_700 -> m6_701  [key=0, style=solid];
m6_707 -> m6_708  [key=0, style=solid];
m6_710 -> m6_711  [key=0, style=solid];
m6_701 -> m6_51  [key=2, style=dotted];
m6_701 -> m6_53  [key=2, style=dotted];
m6_701 -> m6_702  [key=0, style=solid];
m6_702 -> m6_54  [key=2, style=dotted];
m6_702 -> m6_703  [key=0, style=solid];
m6_706 -> m6_704  [key=0, style=bold, color=blue];
m6_705 -> m6_706  [key=0, style=solid];
m6_705 -> m6_654  [key=2, style=dotted];
m6_705 -> m6_691  [key=2, style=dotted];
m6_719 -> m6_716  [key=0, style=bold, color=blue];
m6_725 -> m6_723  [key=0, style=bold, color=blue];
m6_724 -> m6_725  [key=0, style=solid];
m6_724 -> m6_690  [key=2, style=dotted];
m6_724 -> m6_726  [key=2, style=dotted];
m6_738 -> m6_731  [key=0, style=bold, color=blue];
m6_735 -> m6_51  [key=2, style=dotted];
m6_735 -> m6_53  [key=2, style=dotted];
m6_735 -> m6_736  [key=0, style=solid];
m6_742 -> m6_743  [key=0, style=solid];
m6_745 -> m6_746  [key=0, style=solid];
m6_736 -> m6_51  [key=2, style=dotted];
m6_736 -> m6_53  [key=2, style=dotted];
m6_736 -> m6_737  [key=0, style=solid];
m6_737 -> m6_54  [key=2, style=dotted];
m6_737 -> m6_738  [key=0, style=solid];
m6_741 -> m6_739  [key=0, style=bold, color=blue];
m6_740 -> m6_741  [key=0, style=solid];
m6_740 -> m6_654  [key=2, style=dotted];
m6_740 -> m6_726  [key=2, style=dotted];
m6_754 -> m6_751  [key=0, style=bold, color=blue];
m6_760 -> m6_758  [key=0, style=bold, color=blue];
m6_759 -> m6_760  [key=0, style=solid];
m6_759 -> m6_761  [key=2, style=dotted];
m6_772 -> m6_766  [key=0, style=bold, color=blue];
m6_770 -> m6_54  [key=2, style=dotted];
m6_770 -> m6_771  [key=0, style=solid];
m6_776 -> m6_777  [key=0, style=solid];
m6_779 -> m6_780  [key=0, style=solid];
m6_771 -> m6_73  [key=2, style=dotted];
m6_771 -> m6_772  [key=0, style=solid];
m6_775 -> m6_773  [key=0, style=bold, color=blue];
m6_774 -> m6_775  [key=0, style=solid];
m6_774 -> m6_761  [key=2, style=dotted];
m6_788 -> m6_785  [key=0, style=bold, color=blue];
m6_794 -> m6_792  [key=0, style=bold, color=blue];
m6_793 -> m6_794  [key=0, style=solid];
m6_793 -> m6_795  [key=2, style=dotted];
m6_806 -> m6_800  [key=0, style=bold, color=blue];
m6_804 -> m6_54  [key=2, style=dotted];
m6_804 -> m6_805  [key=0, style=solid];
m6_810 -> m6_811  [key=0, style=solid];
m6_813 -> m6_814  [key=0, style=solid];
m6_805 -> m6_73  [key=2, style=dotted];
m6_805 -> m6_806  [key=0, style=solid];
m6_809 -> m6_807  [key=0, style=bold, color=blue];
m6_808 -> m6_809  [key=0, style=solid];
m6_808 -> m6_795  [key=2, style=dotted];
m6_822 -> m6_819  [key=0, style=bold, color=blue];
m6_828 -> m6_826  [key=0, style=bold, color=blue];
m6_827 -> m6_828  [key=0, style=solid];
m6_827 -> m6_829  [key=2, style=dotted];
m6_840 -> m6_834  [key=0, style=bold, color=blue];
m6_838 -> m6_54  [key=2, style=dotted];
m6_838 -> m6_839  [key=0, style=solid];
m6_844 -> m6_845  [key=0, style=solid];
m6_847 -> m6_848  [key=0, style=solid];
m6_839 -> m6_73  [key=2, style=dotted];
m6_839 -> m6_840  [key=0, style=solid];
m6_843 -> m6_841  [key=0, style=bold, color=blue];
m6_842 -> m6_843  [key=0, style=solid];
m6_842 -> m6_829  [key=2, style=dotted];
m6_100 -> m6_101  [key=0, style=solid];
m6_100 -> m6_73  [key=2, style=dotted];
m6_137 -> m6_138  [key=0, style=solid];
m6_137 -> m6_73  [key=2, style=dotted];
m6_204 -> m6_53  [key=2, style=dotted];
m6_204 -> m6_205  [key=0, style=solid];
m6_204 -> m6_207  [key=2, style=dotted];
m6_205 -> m6_53  [key=2, style=dotted];
m6_205 -> m6_206  [key=0, style=solid];
m6_205 -> m6_207  [key=2, style=dotted];
m6_248 -> m6_53  [key=2, style=dotted];
m6_248 -> m6_249  [key=0, style=solid];
m6_248 -> m6_207  [key=2, style=dotted];
m6_249 -> m6_53  [key=2, style=dotted];
m6_249 -> m6_250  [key=0, style=solid];
m6_249 -> m6_207  [key=2, style=dotted];
m6_105 -> m6_106  [key=0, style=solid];
m6_108 -> m6_109  [key=0, style=solid];
m6_113 -> m6_111  [key=0, style=bold, color=blue];
m6_112 -> m6_113  [key=0, style=solid];
m6_112 -> m6_114  [key=2, style=dotted];
m6_140 -> m6_141  [key=0, style=solid];
m6_148 -> m6_146  [key=0, style=bold, color=blue];
m6_147 -> m6_148  [key=0, style=solid];
m6_147 -> m6_114  [key=2, style=dotted];
m6_175 -> m6_173  [key=0, style=bold, color=blue];
m6_174 -> m6_175  [key=0, style=solid];
m6_174 -> m6_176  [key=2, style=dotted];
m6_542 -> m6_540  [key=0, style=bold, color=blue];
m6_541 -> m6_542  [key=0, style=solid];
m6_545 -> m6_543  [key=0, style=bold, color=blue];
m6_544 -> m6_545  [key=0, style=solid];
m6_673 -> m6_671  [key=0, style=bold, color=blue];
m6_672 -> m6_673  [key=0, style=solid];
m6_676 -> m6_674  [key=0, style=bold, color=blue];
m6_675 -> m6_676  [key=0, style=solid];
m6_709 -> m6_707  [key=0, style=bold, color=blue];
m6_708 -> m6_709  [key=0, style=solid];
m6_712 -> m6_710  [key=0, style=bold, color=blue];
m6_711 -> m6_712  [key=0, style=solid];
m6_744 -> m6_742  [key=0, style=bold, color=blue];
m6_743 -> m6_744  [key=0, style=solid];
m6_747 -> m6_745  [key=0, style=bold, color=blue];
m6_746 -> m6_747  [key=0, style=solid];
m6_778 -> m6_776  [key=0, style=bold, color=blue];
m6_777 -> m6_778  [key=0, style=solid];
m6_781 -> m6_779  [key=0, style=bold, color=blue];
m6_780 -> m6_781  [key=0, style=solid];
m6_812 -> m6_810  [key=0, style=bold, color=blue];
m6_811 -> m6_812  [key=0, style=solid];
m6_815 -> m6_813  [key=0, style=bold, color=blue];
m6_814 -> m6_815  [key=0, style=solid];
m6_846 -> m6_844  [key=0, style=bold, color=blue];
m6_845 -> m6_846  [key=0, style=solid];
m6_849 -> m6_847  [key=0, style=bold, color=blue];
m6_848 -> m6_849  [key=0, style=solid];
m6_107 -> m6_105  [key=0, style=bold, color=blue];
m6_106 -> m6_107  [key=0, style=solid];
m6_110 -> m6_108  [key=0, style=bold, color=blue];
m6_109 -> m6_110  [key=0, style=solid];
m6_142 -> m6_140  [key=0, style=bold, color=blue];
m6_141 -> m6_142  [key=0, style=solid];
m6_144 -> m6_145  [key=0, style=solid];
m6_145 -> m6_143  [key=0, style=bold, color=blue];
m6_381 -> m6_382  [key=0, style=solid];
m6_382 -> m6_383  [key=0, style=solid];
m6_382 -> m6_36  [key=2, style=dotted];
m6_382 -> m6_384  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_383 -> m6_381  [key=0, style=bold, color=blue];
m6_368 -> m6_369  [key=0, style=solid];
m6_369 -> m6_370  [key=0, style=solid];
m6_369 -> m6_36  [key=2, style=dotted];
m6_369 -> m6_371  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_370 -> m6_368  [key=0, style=bold, color=blue];
m6_602 -> m6_603  [key=0, style=solid];
m6_603 -> m6_604  [key=0, style=solid];
m6_603 -> m6_36  [key=2, style=dotted];
m6_603 -> m6_605  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_604 -> m6_602  [key=0, style=bold, color=blue];
m6_8 -> m6_9  [key=0, style=solid];
m6_8 -> m6_10  [key=0, style=solid];
m6_796 -> m6_797  [key=0, style=solid];
m6_798 -> m6_799  [key=0, style=solid];
m6_798 -> m6_36  [key=2, style=dotted];
m6_798 -> m6_800  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_797 -> m6_798  [key=0, style=solid];
m6_797 -> m6_797  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m6_797 -> m6_801  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_799 -> m6_796  [key=0, style=bold, color=blue];
m6_356 -> m6_357  [key=0, style=solid];
m6_357 -> m6_358  [key=0, style=solid];
m6_357 -> m6_36  [key=2, style=dotted];
m6_357 -> m6_359  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_358 -> m6_356  [key=0, style=bold, color=blue];
m6_713 -> m6_714  [key=0, style=solid];
m6_714 -> m6_715  [key=0, style=solid];
m6_714 -> m6_36  [key=2, style=dotted];
m6_714 -> m6_716  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_715 -> m6_713  [key=0, style=bold, color=blue];
m6_224 -> m6_225  [key=0, style=solid];
m6_225 -> m6_226  [key=0, style=solid];
m6_225 -> m6_36  [key=2, style=dotted];
m6_225 -> m6_227  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_226 -> m6_224  [key=0, style=bold, color=blue];
m6_19 -> m6_20  [key=0, style=solid];
m6_488 -> m6_489  [key=0, style=solid];
m6_489 -> m6_490  [key=0, style=solid];
m6_489 -> m6_36  [key=2, style=dotted];
m6_489 -> m6_491  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_490 -> m6_488  [key=0, style=bold, color=blue];
m6_25 -> m6_26  [key=0, style=solid, color=green];
m6_25 -> m6_13  [key=2, style=dotted, color=green];
m6_25 -> m6_28  [key=1, style=dashed, color=green, label="lambda expression"];
m6_25 -> m6_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
m6_25 -> m6_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
m6_25 -> m6_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
m6_25 -> m6_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
m6_25 -> m6_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
m6_25 -> m6_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
m6_25 -> m6_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
m6_25 -> m6_16  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
m6_25 -> m6_17  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
m6_25 -> m6_23  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
m6_26 -> m6_27  [key=0, style=solid];
m6_26 -> m6_19  [key=2, style=dotted];
m6_27 -> m6_24  [key=0, style=bold, color=blue];
m6_331 -> m6_332  [key=0, style=solid];
m6_332 -> m6_333  [key=0, style=solid];
m6_332 -> m6_36  [key=2, style=dotted];
m6_332 -> m6_334  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_333 -> m6_331  [key=0, style=bold, color=blue];
m6_15 -> m6_16  [key=0, style=solid, color=green];
m6_15 -> m6_19  [key=0, style=solid];
m6_16 -> m6_17  [key=0, style=solid, color=green];
m6_16 -> m6_13  [key=2, style=dotted, color=green];
m6_16 -> m6_20  [key=1, style=dashed, color=green, label="lambda expression"];
m6_16 -> m6_21  [key=2, style=dotted];
m6_17 -> m6_18  [key=0, style=solid];
m6_17 -> m6_19  [key=2, style=dotted];
m6_18 -> m6_15  [key=0, style=bold, color=blue];
m6_18 -> m6_20  [key=0, style=solid];
m6_305 -> m6_306  [key=0, style=solid];
m6_306 -> m6_307  [key=0, style=solid];
m6_306 -> m6_36  [key=2, style=dotted];
m6_306 -> m6_308  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_307 -> m6_305  [key=0, style=bold, color=blue];
m6_238 -> m6_239  [key=0, style=solid];
m6_239 -> m6_240  [key=0, style=solid];
m6_239 -> m6_36  [key=2, style=dotted];
m6_239 -> m6_241  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_240 -> m6_238  [key=0, style=bold, color=blue];
m6_500 -> m6_501  [key=0, style=solid];
m6_501 -> m6_502  [key=0, style=solid];
m6_501 -> m6_36  [key=2, style=dotted];
m6_501 -> m6_503  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_502 -> m6_500  [key=0, style=bold, color=blue];
m6_727 -> m6_728  [key=0, style=solid];
m6_729 -> m6_730  [key=0, style=solid];
m6_729 -> m6_36  [key=2, style=dotted];
m6_729 -> m6_731  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_728 -> m6_729  [key=0, style=solid];
m6_728 -> m6_728  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m6_728 -> m6_732  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_730 -> m6_727  [key=0, style=bold, color=blue];
m6_32 -> m6_33  [key=0, style=solid];
m6_34 -> m6_35  [key=0, style=solid];
m6_34 -> m6_36  [key=2, style=dotted];
m6_34 -> m6_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_33 -> m6_34  [key=0, style=solid];
m6_33 -> m6_33  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m6_33 -> m6_38  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_33 -> m6_39  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_35 -> m6_32  [key=0, style=bold, color=blue];
m6_762 -> m6_763  [key=0, style=solid];
m6_764 -> m6_765  [key=0, style=solid];
m6_764 -> m6_36  [key=2, style=dotted];
m6_764 -> m6_766  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_763 -> m6_764  [key=0, style=solid];
m6_763 -> m6_763  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m6_763 -> m6_767  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_765 -> m6_762  [key=0, style=bold, color=blue];
m6_49 -> m6_855  [key=0, style=solid, color=green];
m6_49 -> m6_856  [key=1, style=dashed, color=darkseagreen4, label="System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>"];
m6_855 -> m6_856  [key=0, style=solid, color=green];
m6_855 -> m6_23  [key=2, style=dotted, color=green];
m6_855 -> m6_857  [key=1, style=dashed, color=green, label=transaction];
m6_856 -> m6_857  [key=0, style=solid];
m6_856 -> m6_854  [key=2, style=dotted];
m6_857 -> m6_858  [key=0, style=solid];
m6_857 -> m6_859  [key=2, style=dotted];
m6_858 -> m6_49  [key=0, style=bold, color=blue];
m6_180 -> m6_181  [key=0, style=solid];
m6_181 -> m6_182  [key=0, style=solid];
m6_181 -> m6_36  [key=2, style=dotted];
m6_181 -> m6_183  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_182 -> m6_180  [key=0, style=bold, color=blue];
m6_14 -> m6_15  [key=0, style=solid];
m6_9 -> m6_11  [key=0, style=solid];
m6_9 -> m6_12  [key=2, style=dotted];
m6_850 -> m6_851  [key=0, style=solid];
m6_850 -> m6_852  [key=1, style=dashed, color=darkseagreen4, label="System.Action<SqlConnection>"];
m6_851 -> m6_31  [key=2, style=dotted];
m6_851 -> m6_852  [key=0, style=solid];
m6_852 -> m6_854  [key=2, style=dotted];
m6_852 -> m6_853  [key=0, style=solid];
m6_853 -> m6_850  [key=0, style=bold, color=blue];
m6_656 -> m6_657  [key=0, style=solid];
m6_658 -> m6_659  [key=0, style=solid];
m6_658 -> m6_36  [key=2, style=dotted];
m6_658 -> m6_660  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_657 -> m6_658  [key=0, style=solid];
m6_657 -> m6_657  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m6_657 -> m6_661  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_659 -> m6_656  [key=0, style=bold, color=blue];
m6_464 -> m6_465  [key=0, style=solid];
m6_465 -> m6_466  [key=0, style=solid];
m6_465 -> m6_36  [key=2, style=dotted];
m6_465 -> m6_467  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_466 -> m6_464  [key=0, style=bold, color=blue];
m6_212 -> m6_213  [key=0, style=solid];
m6_213 -> m6_214  [key=0, style=solid];
m6_213 -> m6_36  [key=2, style=dotted];
m6_213 -> m6_215  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_214 -> m6_212  [key=0, style=bold, color=blue];
m6_748 -> m6_749  [key=0, style=solid];
m6_749 -> m6_750  [key=0, style=solid];
m6_749 -> m6_36  [key=2, style=dotted];
m6_749 -> m6_751  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_750 -> m6_748  [key=0, style=bold, color=blue];
m6_450 -> m6_451  [key=0, style=solid];
m6_451 -> m6_452  [key=0, style=solid];
m6_451 -> m6_36  [key=2, style=dotted];
m6_451 -> m6_453  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_452 -> m6_450  [key=0, style=bold, color=blue];
m6_431 -> m6_432  [key=0, style=solid];
m6_432 -> m6_433  [key=0, style=solid];
m6_432 -> m6_36  [key=2, style=dotted];
m6_432 -> m6_434  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_433 -> m6_431  [key=0, style=bold, color=blue];
m6_255 -> m6_256  [key=0, style=solid];
m6_256 -> m6_257  [key=0, style=solid];
m6_256 -> m6_36  [key=2, style=dotted];
m6_256 -> m6_258  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_257 -> m6_255  [key=0, style=bold, color=blue];
m6_281 -> m6_282  [key=0, style=solid];
m6_282 -> m6_283  [key=0, style=solid];
m6_282 -> m6_36  [key=2, style=dotted];
m6_282 -> m6_284  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_283 -> m6_281  [key=0, style=bold, color=blue];
m6_78 -> m6_79  [key=0, style=solid];
m6_80 -> m6_81  [key=0, style=solid];
m6_80 -> m6_36  [key=2, style=dotted];
m6_80 -> m6_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_79 -> m6_80  [key=0, style=solid];
m6_79 -> m6_33  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m6_79 -> m6_83  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_79 -> m6_84  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_81 -> m6_78  [key=0, style=bold, color=blue];
m6_60 -> m6_61  [key=0, style=solid];
m6_62 -> m6_63  [key=0, style=solid];
m6_62 -> m6_36  [key=2, style=dotted];
m6_62 -> m6_64  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_61 -> m6_62  [key=0, style=solid];
m6_61 -> m6_61  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m6_61 -> m6_65  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_61 -> m6_66  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_63 -> m6_60  [key=0, style=bold, color=blue];
m6_527 -> m6_528  [key=0, style=solid];
m6_528 -> m6_529  [key=0, style=solid];
m6_528 -> m6_36  [key=2, style=dotted];
m6_528 -> m6_530  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_529 -> m6_527  [key=0, style=bold, color=blue];
m6_574 -> m6_575  [key=0, style=solid];
m6_575 -> m6_576  [key=0, style=solid];
m6_575 -> m6_36  [key=2, style=dotted];
m6_575 -> m6_577  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_576 -> m6_574  [key=0, style=bold, color=blue];
m6_344 -> m6_345  [key=0, style=solid];
m6_345 -> m6_346  [key=0, style=solid];
m6_345 -> m6_36  [key=2, style=dotted];
m6_345 -> m6_347  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_346 -> m6_344  [key=0, style=bold, color=blue];
m6_641 -> m6_642  [key=0, style=solid];
m6_642 -> m6_643  [key=0, style=solid];
m6_642 -> m6_36  [key=2, style=dotted];
m6_642 -> m6_644  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_643 -> m6_641  [key=0, style=bold, color=blue];
m6_677 -> m6_678  [key=0, style=solid];
m6_678 -> m6_679  [key=0, style=solid];
m6_678 -> m6_36  [key=2, style=dotted];
m6_678 -> m6_680  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_679 -> m6_677  [key=0, style=bold, color=blue];
m6_546 -> m6_547  [key=0, style=solid];
m6_547 -> m6_548  [key=0, style=solid];
m6_547 -> m6_36  [key=2, style=dotted];
m6_547 -> m6_549  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_548 -> m6_546  [key=0, style=bold, color=blue];
m6_860 -> m6_16  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_21  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_855  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_34  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_40  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_41  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_43  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_62  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_67  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_68  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_70  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_80  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_89  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_90  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_93  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_121  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_129  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_130  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_154  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_160  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_161  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_181  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_184  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_195  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_198  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_213  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_216  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_225  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_228  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_239  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_242  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_256  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_259  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_268  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_271  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_282  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_285  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_294  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_297  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_306  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_309  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_320  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_323  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_332  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_335  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_345  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_348  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_357  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_360  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_369  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_372  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_382  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_385  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_394  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_397  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_408  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_411  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_420  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_423  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_432  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_435  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_451  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_454  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_465  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_468  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_477  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_480  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_489  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_492  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_501  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_504  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_508  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_515  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_518  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_522  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_528  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_531  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_547  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_550  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_553  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_560  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_563  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_564  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_575  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_578  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_582  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_590  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_593  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_597  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_603  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_607  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_615  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_618  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_621  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_629  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_633  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_642  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_645  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_649  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_658  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_662  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_678  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_681  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_685  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_694  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_698  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_714  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_717  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_721  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_729  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_733  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_749  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_752  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_756  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_764  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_768  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_783  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_786  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_790  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_798  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_802  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_817  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_820  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_824  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_832  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_860 -> m6_836  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m6_871 -> m6_508  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_872 -> m6_522  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_873 -> m6_553  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_874 -> m6_582  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_875 -> m6_597  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_877 -> m6_621  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_879 -> m6_649  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_881 -> m6_685  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_883 -> m6_721  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_885 -> m6_756  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_887 -> m6_790  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_889 -> m6_824  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m6_861 -> m6_38  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_861 -> m6_39  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_863 -> m6_65  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_863 -> m6_66  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_865 -> m6_83  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_865 -> m6_84  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_868 -> m6_124  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_878 -> m6_632  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_880 -> m6_661  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_882 -> m6_697  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_884 -> m6_732  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_886 -> m6_767  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_888 -> m6_801  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_890 -> m6_835  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m6_862 -> m6_56  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m6_864 -> m6_75  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m6_866 -> m6_116  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m6_867 -> m6_116  [key=1, style=dashed, color=darkseagreen4, label=state];
m6_869 -> m6_150  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m6_870 -> m6_150  [key=1, style=dashed, color=darkseagreen4, label=state];
m6_876 -> m6_612  [key=1, style=dashed, color=darkseagreen4, label=items];
m7_230 -> m7_19  [key=2, style=dotted];
m7_230 -> m7_231  [key=0, style=solid];
m7_90 -> m7_91  [key=0, style=solid];
m7_90 -> m7_50  [key=2, style=dotted];
m7_90 -> m7_92  [key=1, style=dashed, color=darkseagreen4, label=job];
m7_372 -> m7_373  [key=0, style=solid];
m7_372 -> m7_49  [key=2, style=dotted];
m7_372 -> m7_377  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_113 -> m7_111  [key=0, style=bold, color=blue];
m7_390 -> m7_391  [key=0, style=solid];
m7_390 -> m7_380  [key=2, style=dotted];
m7_60 -> m7_61  [key=0, style=solid];
m7_62 -> m7_36  [key=2, style=dotted];
m7_62 -> m7_63  [key=0, style=solid];
m7_62 -> m7_64  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_62 -> m7_60  [key=0, style=bold, color=blue];
m7_61 -> m7_62  [key=0, style=solid];
m7_61 -> m7_65  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_61 -> m7_66  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_61 -> m7_63  [key=2, style=dotted];
m7_61 -> m7_51  [key=2, style=dotted];
m7_61 -> m7_53  [key=2, style=dotted];
m7_63 -> m7_60  [key=0, style=bold, color=blue];
m7_153 -> m7_154  [key=0, style=solid];
m7_153 -> m7_151  [key=0, style=bold, color=blue];
m7_154 -> m7_36  [key=2, style=dotted];
m7_154 -> m7_155  [key=0, style=solid];
m7_154 -> m7_156  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_155 -> m7_153  [key=0, style=bold, color=blue];
m7_155 -> m7_156  [key=0, style=solid];
m7_91 -> m7_19  [key=2, style=dotted];
m7_91 -> m7_92  [key=0, style=solid];
m7_212 -> m7_213  [key=0, style=solid];
m7_212 -> m7_80  [key=2, style=dotted];
m7_212 -> m7_89  [key=2, style=dotted];
m7_212 -> m7_134  [key=2, style=dotted];
m7_212 -> m7_226  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_213 -> m7_36  [key=2, style=dotted];
m7_213 -> m7_214  [key=0, style=solid];
m7_213 -> m7_215  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_213 -> m7_218  [key=2, style=dotted];
m7_213 -> m7_219  [key=2, style=dotted];
m7_214 -> m7_212  [key=0, style=bold, color=blue];
m7_214 -> m7_205  [key=0, style=bold, color=blue];
m7_419 -> m7_420  [key=0, style=solid];
m7_419 -> m7_183  [key=1, style=dashed, color=darkseagreen4, label=fetchedJobIds];
m7_420 -> m7_36  [key=2, style=dotted];
m7_420 -> m7_421  [key=0, style=solid];
m7_420 -> m7_422  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_420 -> m7_207  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_421 -> m7_419  [key=0, style=bold, color=blue];
m7_421 -> m7_254  [key=1, style=dashed, color=darkseagreen4, label=sql];
m7_391 -> m7_392  [key=0, style=solid];
m7_391 -> m7_380  [key=2, style=dotted];
m7_28 -> m7_29  [key=0, style=solid];
m7_28 -> m7_11  [key=3, color=darkorchid, style=bold, label="method methodReturn long FailedCount"];
m7_29 -> m7_30  [key=0, style=solid];
m7_29 -> m7_11  [key=2, style=dotted];
m7_29 -> m7_31  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_29 -> m7_23  [key=2, style=dotted];
m7_29 -> m7_108  [key=0, style=solid];
m7_30 -> m7_28  [key=0, style=bold, color=blue];
m7_142 -> m7_140  [key=0, style=bold, color=blue];
m7_102 -> m7_82  [key=0, style=bold, color=blue];
m7_377 -> m7_378  [key=0, style=solid];
m7_377 -> m7_379  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>"];
m7_377 -> m7_384  [key=1, style=dashed, color=darkseagreen4, label="System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>"];
m7_378 -> m7_379  [key=0, style=solid];
m7_378 -> m7_388  [key=2, style=dotted];
m7_378 -> m7_385  [key=1, style=dashed, color=darkseagreen4, label=result];
m7_378 -> m7_386  [key=1, style=dashed, color=darkseagreen4, label=result];
m7_378 -> m7_380  [key=2, style=dotted];
m7_379 -> m7_380  [key=0, style=solid];
m7_379 -> m7_386  [key=0, style=solid];
m7_379 -> m7_381  [key=1, style=dashed, color=darkseagreen4, label=job];
m7_379 -> m7_382  [key=1, style=dashed, color=darkseagreen4, label=job];
m7_379 -> m7_384  [key=1, style=dashed, color=darkseagreen4, label=job];
m7_379 -> m7_385  [key=1, style=dashed, color=darkseagreen4, label=job];
m7_379 -> m7_377  [key=0, style=bold, color=blue];
m7_384 -> m7_385  [key=0, style=solid];
m7_384 -> m7_364  [key=2, style=dotted];
m7_384 -> m7_390  [key=2, style=dotted];
m7_384 -> m7_386  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_385 -> m7_379  [key=0, style=solid];
m7_385 -> m7_391  [key=2, style=dotted];
m7_385 -> m7_392  [key=2, style=dotted];
m7_385 -> m7_92  [key=2, style=dotted];
m7_385 -> m7_386  [key=0, style=solid];
m7_385 -> m7_49  [key=2, style=dotted];
m7_385 -> m7_389  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_386 -> m7_387  [key=0, style=solid];
m7_386 -> m7_393  [key=2, style=dotted];
m7_386 -> m7_47  [key=2, style=dotted];
m7_386 -> m7_13  [key=2, style=dotted];
m7_380 -> m7_381  [key=0, style=solid];
m7_380 -> m7_385  [key=1, style=dashed, color=darkseagreen4, label=dto];
m7_381 -> m7_382  [key=0, style=solid];
m7_381 -> m7_385  [key=0, style=solid];
m7_382 -> m7_383  [key=0, style=solid];
m7_382 -> m7_371  [key=2, style=dotted];
m7_382 -> m7_36  [key=2, style=dotted];
m7_382 -> m7_384  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_383 -> m7_384  [key=0, style=solid];
m7_383 -> m7_389  [key=2, style=dotted];
m7_383 -> m7_381  [key=0, style=bold, color=blue];
m7_387 -> m7_377  [key=0, style=bold, color=blue];
m7_387 -> m7_19  [key=2, style=dotted];
m7_387 -> m7_388  [key=0, style=solid];
m7_237 -> m7_238  [key=0, style=solid];
m7_237 -> m7_11  [key=3, color=darkorchid, style=bold, label="method methodReturn long DeletedListCount"];
m7_238 -> m7_239  [key=0, style=solid];
m7_238 -> m7_11  [key=2, style=dotted];
m7_238 -> m7_240  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_239 -> m7_237  [key=0, style=bold, color=blue];
m7_239 -> m7_36  [key=2, style=dotted];
m7_239 -> m7_240  [key=0, style=solid];
m7_239 -> m7_241  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_527 -> m7_528  [key=0, style=solid];
m7_528 -> m7_36  [key=2, style=dotted];
m7_528 -> m7_529  [key=0, style=solid];
m7_528 -> m7_530  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_529 -> m7_527  [key=0, style=bold, color=blue];
m7_267 -> m7_268  [key=0, style=solid];
m7_267 -> m7_146  [key=2, style=dotted];
m7_267 -> m7_269  [key=2, style=dotted];
m7_268 -> m7_36  [key=2, style=dotted];
m7_268 -> m7_269  [key=0, style=solid];
m7_268 -> m7_270  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_268 -> m7_266  [key=0, style=bold, color=blue];
m7_269 -> m7_267  [key=0, style=bold, color=blue];
m7_368 -> m7_369  [key=0, style=solid];
m7_369 -> m7_36  [key=2, style=dotted];
m7_369 -> m7_370  [key=0, style=solid];
m7_369 -> m7_371  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_370 -> m7_368  [key=0, style=bold, color=blue];
m7_370 -> m7_364  [key=0, style=bold, color=blue];
m7_48 -> m7_49  [key=0, style=solid];
m7_48 -> m7_50  [key=2, style=dotted];
m7_48 -> m7_51  [key=2, style=dotted];
m7_48 -> m7_52  [key=2, style=dotted];
m7_48 -> m7_53  [key=2, style=dotted];
m7_404 -> m7_405  [key=0, style=solid];
m7_404 -> m7_406  [key=2, style=dotted];
m7_331 -> m7_332  [key=0, style=solid];
m7_331 -> m7_335  [key=2, style=dotted];
m7_332 -> m7_36  [key=2, style=dotted];
m7_332 -> m7_333  [key=0, style=solid];
m7_332 -> m7_334  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_332 -> m7_146  [key=2, style=dotted];
m7_333 -> m7_331  [key=0, style=bold, color=blue];
m7_333 -> m7_334  [key=0, style=solid];
m7_152 -> m7_153  [key=0, style=solid];
m7_250 -> m7_241  [key=0, style=bold, color=blue];
m7_343 -> m7_344  [key=0, style=solid];
m7_343 -> m7_345  [key=2, style=dotted];
m7_343 -> m7_356  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_305 -> m7_306  [key=0, style=solid];
m7_305 -> m7_303  [key=0, style=bold, color=blue];
m7_306 -> m7_36  [key=2, style=dotted];
m7_306 -> m7_307  [key=0, style=solid];
m7_306 -> m7_308  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
m7_306 -> m7_309  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, System.DateTime>"];
m7_306 -> m7_314  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, System.DateTime>"];
m7_306 -> m7_315  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, System.DateTime>"];
m7_306 -> m7_316  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, System.DateTime>"];
m7_306 -> m7_312  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.Dictionary<System.DateTime, long> GetTimelineStats"];
m7_307 -> m7_305  [key=0, style=bold, color=blue];
m7_307 -> m7_308  [key=0, style=solid];
m7_431 -> m7_432  [key=0, style=solid];
m7_432 -> m7_36  [key=2, style=dotted];
m7_432 -> m7_433  [key=0, style=solid];
m7_432 -> m7_434  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_433 -> m7_431  [key=0, style=bold, color=blue];
m7_196 -> m7_197  [key=0, style=solid];
m7_196 -> m7_11  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IDictionary<System.DateTime, long> HourlyFailedJobs"];
m7_196 -> m7_194  [key=0, style=bold, color=blue];
m7_197 -> m7_198  [key=0, style=solid];
m7_197 -> m7_11  [key=2, style=dotted];
m7_197 -> m7_199  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_198 -> m7_196  [key=0, style=bold, color=blue];
m7_198 -> m7_199  [key=0, style=solid];
m7_198 -> m7_49  [key=2, style=dotted];
m7_198 -> m7_208  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_406 -> m7_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_17  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_29  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_32  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_35  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_38  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_41  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_44  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_55  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_58  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_65  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_68  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_72  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_75  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_78  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_82  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_94  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_97  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_104  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_107  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_115  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_118  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_125  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_130  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_158  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_165  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_167  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_171  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_177  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_179  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_183  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_190  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_193  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_197  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_200  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_203  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_206  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_207  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_213  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_232  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_235  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_238  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_241  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_244  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_245  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_254  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_246  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_278  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_297  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_307  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_308  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_331  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_336  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_340  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_341  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_343  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_360  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_361  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_373  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_374  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_375  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_395  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_396  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_406 -> m7_399  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m7_49 -> m7_551  [key=0, style=solid];
m7_49 -> m7_552  [key=1, style=dashed, color=darkseagreen4, label="System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>"];
m7_49 -> m7_47  [key=0, style=bold, color=blue];
m7_551 -> m7_552  [key=0, style=solid];
m7_551 -> m7_23  [key=2, style=dotted];
m7_551 -> m7_553  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m7_552 -> m7_553  [key=0, style=solid];
m7_552 -> m7_550  [key=2, style=dotted];
m7_553 -> m7_554  [key=0, style=solid];
m7_553 -> m7_555  [key=2, style=dotted];
m7_554 -> m7_49  [key=0, style=bold, color=blue];
m7_345 -> m7_36  [key=2, style=dotted];
m7_345 -> m7_346  [key=0, style=solid];
m7_345 -> m7_347  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_243 -> m7_244  [key=0, style=solid];
m7_243 -> m7_245  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.Monitoring.StatisticsDto GetStatistics"];
m7_243 -> m7_46  [key=2, style=dotted];
m7_243 -> m7_47  [key=2, style=dotted];
m7_243 -> m7_246  [key=1, style=dashed, color=darkseagreen4, label=record];
m7_243 -> m7_247  [key=1, style=dashed, color=darkseagreen4, label=record];
m7_244 -> m7_245  [key=0, style=solid];
m7_244 -> m7_249  [key=2, style=dotted];
m7_244 -> m7_254  [key=1, style=dashed, color=darkseagreen4, label=sql];
m7_244 -> m7_19  [key=2, style=dotted];
m7_245 -> m7_246  [key=0, style=solid];
m7_245 -> m7_11  [key=2, style=dotted];
m7_245 -> m7_252  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_245 -> m7_247  [key=1, style=dashed, color=darkseagreen4, label=statistics];
m7_245 -> m7_245  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.Monitoring.StatisticsDto "];
m7_245 -> m7_19  [key=2, style=dotted];
m7_246 -> m7_247  [key=0, style=solid];
m7_246 -> m7_250  [key=2, style=dotted];
m7_246 -> m7_251  [key=2, style=dotted];
m7_246 -> m7_266  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_246 -> m7_73  [key=2, style=dotted];
m7_247 -> m7_248  [key=0, style=solid];
m7_247 -> m7_249  [key=1, style=dashed, color=darkseagreen4, label=expireAt];
m7_248 -> m7_243  [key=0, style=bold, color=blue];
m7_248 -> m7_53  [key=2, style=dotted];
m7_248 -> m7_249  [key=0, style=solid];
m7_248 -> m7_207  [key=2, style=dotted];
m7_407 -> m7_408  [key=0, style=solid];
m7_407 -> m7_44  [key=1, style=dashed, color=darkseagreen4, label=int];
m7_408 -> m7_36  [key=2, style=dotted];
m7_408 -> m7_409  [key=0, style=solid];
m7_408 -> m7_410  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_408 -> m7_44  [key=1, style=dashed, color=darkseagreen4, label=int];
m7_409 -> m7_407  [key=0, style=bold, color=blue];
m7_409 -> m7_58  [key=1, style=dashed, color=darkseagreen4, label=int];
m7_181 -> m7_36  [key=2, style=dotted];
m7_181 -> m7_182  [key=0, style=solid];
m7_181 -> m7_183  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_176 -> m7_177  [key=0, style=solid];
m7_176 -> m7_178  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_177 -> m7_178  [key=0, style=solid];
m7_177 -> m7_21  [key=2, style=dotted];
m7_178 -> m7_179  [key=0, style=solid];
m7_178 -> m7_181  [key=2, style=dotted];
m7_178 -> m7_183  [key=1, style=dashed, color=darkseagreen4, label=fetchedJobIds];
m7_178 -> m7_46  [key=2, style=dotted];
m7_178 -> m7_47  [key=2, style=dotted];
m7_179 -> m7_180  [key=0, style=solid];
m7_179 -> m7_141  [key=2, style=dotted];
m7_179 -> m7_182  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_179 -> m7_177  [key=0, style=bold, color=blue];
m7_180 -> m7_176  [key=0, style=bold, color=blue];
m7_180 -> m7_181  [key=0, style=solid];
m7_31 -> m7_32  [key=0, style=solid];
m7_338 -> m7_334  [key=0, style=bold, color=blue];
m7_355 -> m7_352  [key=0, style=bold, color=blue];
m7_321 -> m7_319  [key=0, style=bold, color=blue];
m7_255 -> m7_256  [key=0, style=solid];
m7_255 -> m7_80  [key=2, style=dotted];
m7_256 -> m7_36  [key=2, style=dotted];
m7_256 -> m7_257  [key=0, style=solid];
m7_256 -> m7_258  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_256 -> m7_80  [key=2, style=dotted];
m7_257 -> m7_255  [key=0, style=bold, color=blue];
m7_257 -> m7_258  [key=0, style=solid];
m7_257 -> m7_80  [key=2, style=dotted];
m7_119 -> m7_120  [key=0, style=solid, color=green];
m7_119 -> m7_117  [key=0, style=bold, color=blue];
m7_120 -> m7_121  [key=0, style=solid, color=green];
m7_120 -> m7_124  [key=1, style=dashed, color=green, label=arrangeSql];
m7_121 -> m7_122  [key=0, style=solid, color=green];
m7_121 -> m7_36  [key=2, style=dotted, color=green];
m7_121 -> m7_123  [key=1, style=dashed, color=green, label="lambda expression"];
m7_121 -> m7_51  [key=2, style=dotted];
m7_121 -> m7_53  [key=2, style=dotted];
m7_122 -> m7_119  [key=0, style=bold, color=blue];
m7_122 -> m7_120  [key=0, style=bold, color=blue];
m7_112 -> m7_114  [key=2, style=dotted];
m7_112 -> m7_113  [key=0, style=solid];
m7_15 -> m7_16  [key=0, style=solid];
m7_15 -> m7_360  [key=0, style=solid];
m7_15 -> m7_361  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
m7_15 -> m7_9  [key=3, color=darkorchid, style=bold, label="Parameter variable DbConnection connection"];
m7_15 -> m7_29  [key=3, color=darkorchid, style=bold, label="Parameter variable DbConnection connection"];
m7_15 -> m7_35  [key=3, color=darkorchid, style=bold, label="Parameter variable DbConnection connection"];
m7_15 -> m7_232  [key=3, color=darkorchid, style=bold, label="Parameter variable DbConnection connection"];
m7_15 -> m7_238  [key=3, color=darkorchid, style=bold, label="Parameter variable DbConnection connection"];
m7_16 -> m7_17  [key=0, style=solid];
m7_16 -> m7_13  [key=2, style=dotted];
m7_16 -> m7_96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_16 -> m7_18  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_17 -> m7_34  [key=3, color=darkorchid, style=bold, label="Local variable Hangfire.BackgroundJobServerOptions options"];
m7_17 -> m7_19  [key=2, style=dotted];
m7_17 -> m7_18  [key=0, style=solid];
m7_17 -> m7_21  [key=2, style=dotted];
m7_18 -> m7_15  [key=0, style=bold, color=blue];
m7_18 -> m7_19  [key=0, style=solid];
m7_18 -> m7_22  [key=2, style=dotted];
m7_293 -> m7_294  [key=0, style=solid];
m7_293 -> m7_92  [key=2, style=dotted];
m7_294 -> m7_36  [key=2, style=dotted];
m7_294 -> m7_295  [key=0, style=solid];
m7_294 -> m7_296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_294 -> m7_299  [key=2, style=dotted];
m7_294 -> m7_294  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m7_295 -> m7_293  [key=0, style=bold, color=blue];
m7_295 -> m7_292  [key=0, style=solid];
m7_295 -> m7_295  [key=1, style=dashed, color=darkseagreen4, label=i];
m7_160 -> m7_161  [key=0, style=solid];
m7_160 -> m7_164  [key=2, style=dotted];
m7_405 -> m7_401  [key=0, style=bold, color=blue];
m7_32 -> m7_33  [key=0, style=solid];
m7_32 -> m7_15  [key=2, style=dotted];
m7_34 -> m7_36  [key=2, style=dotted];
m7_34 -> m7_34  [key=3, color=darkorchid, style=bold, label="Local variable Hangfire.BackgroundJobServerOptions options"];
m7_34 -> m7_35  [key=0, style=solid];
m7_34 -> m7_106  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_34 -> m7_11  [key=3, color=darkorchid, style=bold, label="method methodReturn long ProcessingCount"];
m7_33 -> m7_34  [key=0, style=solid];
m7_33 -> m7_38  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_33 -> m7_39  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_33 -> m7_31  [key=0, style=bold, color=blue];
m7_35 -> m7_32  [key=0, style=bold, color=blue];
m7_35 -> m7_36  [key=0, style=solid];
m7_35 -> m7_11  [key=2, style=dotted];
m7_35 -> m7_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_169 -> m7_170  [key=0, style=solid];
m7_185 -> m7_46  [key=2, style=dotted];
m7_185 -> m7_47  [key=2, style=dotted];
m7_185 -> m7_186  [key=0, style=solid];
m7_185 -> m7_187  [key=1, style=dashed, color=darkseagreen4, label=record];
m7_185 -> m7_188  [key=1, style=dashed, color=darkseagreen4, label=record];
m7_500 -> m7_501  [key=0, style=solid];
m7_501 -> m7_36  [key=2, style=dotted];
m7_501 -> m7_502  [key=0, style=solid];
m7_501 -> m7_503  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_502 -> m7_500  [key=0, style=bold, color=blue];
m7_146 -> m7_147  [key=0, style=solid];
m7_344 -> m7_345  [key=0, style=solid];
m7_344 -> m7_339  [key=0, style=bold, color=blue];
m7_346 -> m7_344  [key=0, style=bold, color=blue];
m7_346 -> m7_347  [key=0, style=solid];
m7_224 -> m7_225  [key=0, style=solid];
m7_225 -> m7_36  [key=2, style=dotted];
m7_225 -> m7_226  [key=0, style=solid];
m7_225 -> m7_227  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_225 -> m7_223  [key=0, style=bold, color=blue];
m7_226 -> m7_224  [key=0, style=bold, color=blue];
m7_226 -> m7_227  [key=0, style=solid];
m7_356 -> m7_357  [key=0, style=solid];
m7_357 -> m7_36  [key=2, style=dotted];
m7_357 -> m7_358  [key=0, style=solid];
m7_357 -> m7_359  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_357 -> m7_51  [key=2, style=dotted];
m7_357 -> m7_53  [key=2, style=dotted];
m7_358 -> m7_356  [key=0, style=bold, color=blue];
m7_124 -> m7_125  [key=0, style=solid, color=green];
m7_124 -> m7_126  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IList<Hangfire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto> Queues"];
m7_124 -> m7_46  [key=2, style=dotted, color=green];
m7_124 -> m7_47  [key=2, style=dotted, color=green];
m7_124 -> m7_48  [key=2, style=dotted, color=green];
m7_124 -> m7_129  [key=1, style=dashed, color=green, label=jobId];
m7_124 -> m7_150  [key=1, style=dashed, color=green, label=jobId];
m7_124 -> m7_130  [key=1, style=dashed, color=green, label=jobId];
m7_124 -> m7_134  [key=1, style=dashed, color=green, label=jobId];
m7_125 -> m7_126  [key=0, style=solid, color=green];
m7_125 -> m7_134  [key=2, style=dotted];
m7_125 -> m7_135  [key=2, style=dotted];
m7_125 -> m7_136  [key=2, style=dotted];
m7_125 -> m7_137  [key=2, style=dotted];
m7_125 -> m7_143  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_125 -> m7_147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_125 -> m7_151  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_125 -> m7_154  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_125 -> m7_127  [key=1, style=dashed, color=green, label=state];
m7_125 -> m7_103  [key=2, style=dotted, color=green];
m7_125 -> m7_128  [key=1, style=dashed, color=green, label=state];
m7_125 -> m7_129  [key=1, style=dashed, color=green, label=state];
m7_125 -> m7_150  [key=1, style=dashed, color=green, label=state];
m7_126 -> m7_127  [key=0, style=solid, color=green];
m7_126 -> m7_138  [key=2, style=dotted];
m7_126 -> m7_131  [key=1, style=dashed, color=darkseagreen4, label=result];
m7_126 -> m7_132  [key=1, style=dashed, color=darkseagreen4, label=result];
m7_126 -> m7_6  [key=2, style=dotted];
m7_126 -> m7_8  [key=2, style=dotted];
m7_126 -> m7_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_127 -> m7_128  [key=0, style=solid, color=green];
m7_127 -> m7_132  [key=0, style=solid];
m7_127 -> m7_129  [key=1, style=dashed, color=darkseagreen4, label=tuple];
m7_127 -> m7_131  [key=1, style=dashed, color=darkseagreen4, label=tuple];
m7_127 -> m7_6  [key=2, style=dotted, color=green];
m7_127 -> m7_8  [key=2, style=dotted, color=green];
m7_127 -> m7_43  [key=1, style=dashed, color=green, label="lambda expression"];
m7_131 -> m7_127  [key=0, style=solid];
m7_131 -> m7_142  [key=2, style=dotted];
m7_131 -> m7_92  [key=2, style=dotted];
m7_131 -> m7_132  [key=0, style=solid, color=green];
m7_131 -> m7_54  [key=2, style=dotted, color=green];
m7_132 -> m7_133  [key=0, style=solid];
m7_132 -> m7_54  [key=2, style=dotted];
m7_128 -> m7_129  [key=0, style=solid];
m7_128 -> m7_139  [key=2, style=dotted];
m7_128 -> m7_130  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
m7_128 -> m7_158  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
m7_128 -> m7_6  [key=2, style=dotted];
m7_128 -> m7_104  [key=2, style=dotted];
m7_128 -> m7_8  [key=2, style=dotted];
m7_128 -> m7_146  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_129 -> m7_130  [key=0, style=solid];
m7_129 -> m7_140  [key=2, style=dotted];
m7_129 -> m7_131  [key=1, style=dashed, color=darkseagreen4, label=counters];
m7_129 -> m7_49  [key=2, style=dotted];
m7_129 -> m7_149  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_130 -> m7_131  [key=0, style=solid, color=green];
m7_130 -> m7_141  [key=2, style=dotted];
m7_130 -> m7_157  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_130 -> m7_50  [key=2, style=dotted];
m7_130 -> m7_132  [key=1, style=dashed, color=darkseagreen4, label=job];
m7_133 -> m7_124  [key=0, style=bold, color=blue];
m7_133 -> m7_46  [key=2, style=dotted];
m7_133 -> m7_47  [key=2, style=dotted];
m7_133 -> m7_134  [key=0, style=solid];
m7_133 -> m7_135  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m7_133 -> m7_136  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m7_133 -> m7_137  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m7_133 -> m7_138  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m7_137 -> m7_138  [key=0, style=solid];
m7_137 -> m7_73  [key=2, style=dotted];
m7_299 -> m7_19  [key=2, style=dotted];
m7_299 -> m7_300  [key=0, style=solid];
m7_319 -> m7_320  [key=0, style=solid];
m7_319 -> m7_306  [key=0, style=bold, color=blue];
m7_320 -> m7_36  [key=2, style=dotted];
m7_320 -> m7_321  [key=0, style=solid];
m7_320 -> m7_322  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_389 -> m7_390  [key=0, style=solid];
m7_389 -> m7_391  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_5 -> m7_0  [key=0, style=bold, color=blue];
m7_371 -> m7_372  [key=0, style=solid];
m7_371 -> m7_373  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_0 -> m7_1  [key=0, style=solid];
m7_0 -> m7_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorage"];
m7_0 -> m7_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorage"];
m7_0 -> m7_4  [key=1, style=dashed, color=darkseagreen4, label="int?"];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_3  [key=0, style=solid];
m7_1 -> m7_5  [key=2, style=dotted];
m7_2 -> m7_5  [key=0, style=solid];
m7_2 -> m7_6  [key=2, style=dotted];
m7_2 -> m7_7  [key=2, style=dotted];
m7_2 -> m7_8  [key=2, style=dotted];
m7_2 -> m7_3  [key=0, style=solid];
m7_2 -> m7_81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_3 -> m7_4  [key=0, style=solid];
m7_3 -> m7_9  [key=2, style=dotted];
m7_3 -> m7_34  [key=3, color=darkorchid, style=bold, label="Local variable Hangfire.BackgroundJobServerOptions options"];
m7_4 -> m7_5  [key=0, style=solid];
m7_4 -> m7_0  [key=0, style=bold, color=blue];
m7_114 -> m7_115  [key=0, style=solid];
m7_114 -> m7_118  [key=1, style=dashed, color=darkseagreen4, label=int];
m7_114 -> m7_11  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.Monitoring.JobList<Hangfire.Storage.Monitoring.DeletedJobDto> DeletedJobs"];
m7_115 -> m7_116  [key=0, style=solid];
m7_115 -> m7_11  [key=2, style=dotted];
m7_115 -> m7_117  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_116 -> m7_114  [key=0, style=bold, color=blue];
m7_116 -> m7_117  [key=0, style=solid];
m7_116 -> m7_118  [key=2, style=dotted];
m7_281 -> m7_282  [key=0, style=solid];
m7_229 -> m7_46  [key=2, style=dotted];
m7_229 -> m7_47  [key=2, style=dotted];
m7_229 -> m7_230  [key=0, style=solid];
m7_229 -> m7_231  [key=1, style=dashed, color=darkseagreen4, label=record];
m7_229 -> m7_232  [key=1, style=dashed, color=darkseagreen4, label=record];
m7_173 -> m7_174  [key=0, style=solid];
m7_12 -> m7_13  [key=0, style=solid];
m7_13 -> m7_14  [key=0, style=solid];
m7_13 -> m7_15  [key=2, style=dotted];
m7_14 -> m7_12  [key=0, style=bold, color=blue];
m7_37 -> m7_38  [key=0, style=solid];
m7_38 -> m7_39  [key=0, style=solid];
m7_38 -> m7_15  [key=2, style=dotted];
m7_38 -> m7_46  [key=2, style=dotted];
m7_38 -> m7_47  [key=2, style=dotted];
m7_38 -> m7_48  [key=2, style=dotted];
m7_38 -> m7_40  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m7_38 -> m7_41  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m7_38 -> m7_56  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m7_39 -> m7_37  [key=0, style=bold, color=blue];
m7_39 -> m7_43  [key=0, style=bold, color=green];
m7_39 -> m7_46  [key=2, style=dotted];
m7_39 -> m7_47  [key=2, style=dotted];
m7_39 -> m7_48  [key=2, style=dotted];
m7_39 -> m7_40  [key=0, style=solid];
m7_44 -> m7_45  [key=0, style=solid];
m7_44 -> m7_46  [key=2, style=dotted];
m7_44 -> m7_47  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_44 -> m7_54  [key=2, style=dotted];
m7_43 -> m7_44  [key=0, style=solid];
m7_43 -> m7_144  [key=0, style=solid, color=green];
m7_43 -> m7_50  [key=2, style=dotted];
m7_45 -> m7_43  [key=0, style=bold, color=blue];
m7_45 -> m7_106  [key=0, style=bold, color=blue];
m7_47 -> m7_48  [key=0, style=solid];
m7_58 -> m7_59  [key=0, style=solid];
m7_58 -> m7_46  [key=2, style=dotted];
m7_58 -> m7_60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_57 -> m7_58  [key=0, style=solid];
m7_57 -> m7_55  [key=0, style=bold, color=blue];
m7_59 -> m7_57  [key=0, style=bold, color=blue];
m7_67 -> m7_68  [key=0, style=solid];
m7_67 -> m7_49  [key=2, style=dotted];
m7_67 -> m7_74  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_68 -> m7_69  [key=0, style=solid];
m7_68 -> m7_70  [key=2, style=dotted];
m7_68 -> m7_50  [key=2, style=dotted];
m7_69 -> m7_67  [key=0, style=bold, color=blue];
m7_69 -> m7_54  [key=2, style=dotted];
m7_69 -> m7_70  [key=0, style=solid];
m7_74 -> m7_75  [key=0, style=solid];
m7_75 -> m7_76  [key=0, style=solid];
m7_75 -> m7_70  [key=2, style=dotted];
m7_75 -> m7_77  [key=2, style=dotted];
m7_76 -> m7_74  [key=0, style=bold, color=blue];
m7_81 -> m7_82  [key=0, style=solid, color=red];
m7_81 -> m7_11  [key=0, style=solid];
m7_81 -> m7_78  [key=0, style=bold, color=blue];
m7_82 -> m7_83  [key=0, style=solid, color=red];
m7_82 -> m7_80  [key=2, style=dotted, color=red];
m7_82 -> m7_89  [key=2, style=dotted, color=red];
m7_82 -> m7_84  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_82 -> m7_90  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_82 -> m7_93  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_82 -> m7_96  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_83 -> m7_84  [key=0, style=solid];
m7_83 -> m7_90  [key=2, style=dotted];
m7_83 -> m7_86  [key=1, style=dashed, color=red, label=result];
m7_83 -> m7_87  [key=1, style=dashed, color=darkseagreen4, label=result];
m7_83 -> m7_46  [key=2, style=dotted];
m7_83 -> m7_47  [key=2, style=dotted];
m7_83 -> m7_48  [key=2, style=dotted];
m7_83 -> m7_89  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m7_83 -> m7_116  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m7_83 -> m7_97  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m7_84 -> m7_85  [key=0, style=solid, color=red];
m7_84 -> m7_87  [key=0, style=solid];
m7_84 -> m7_86  [key=1, style=dashed, color=red, label=server];
m7_84 -> m7_46  [key=2, style=dotted];
m7_84 -> m7_47  [key=2, style=dotted];
m7_84 -> m7_48  [key=2, style=dotted];
m7_84 -> m7_93  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
m7_86 -> m7_84  [key=0, style=solid, color=red];
m7_86 -> m7_91  [key=2, style=dotted, color=red];
m7_86 -> m7_92  [key=2, style=dotted, color=red];
m7_86 -> m7_6  [key=2, style=dotted];
m7_86 -> m7_8  [key=2, style=dotted];
m7_86 -> m7_87  [key=0, style=solid];
m7_86 -> m7_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_87 -> m7_88  [key=0, style=solid];
m7_87 -> m7_6  [key=2, style=dotted];
m7_87 -> m7_8  [key=2, style=dotted];
m7_87 -> m7_108  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_85 -> m7_86  [key=0, style=solid, color=red];
m7_85 -> m7_80  [key=2, style=dotted, color=red];
m7_85 -> m7_103  [key=2, style=dotted];
m7_85 -> m7_89  [key=1, style=dashed, color=darkseagreen4, label=state];
m7_85 -> m7_87  [key=1, style=dashed, color=darkseagreen4, label=state];
m7_85 -> m7_88  [key=1, style=dashed, color=darkseagreen4, label=state];
m7_85 -> m7_116  [key=1, style=dashed, color=darkseagreen4, label=state];
m7_88 -> m7_81  [key=0, style=bold, color=blue];
m7_88 -> m7_6  [key=2, style=dotted];
m7_88 -> m7_8  [key=2, style=dotted];
m7_88 -> m7_89  [key=0, style=solid];
m7_88 -> m7_104  [key=2, style=dotted];
m7_88 -> m7_111  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_97 -> m7_98  [key=0, style=solid, color=red];
m7_97 -> m7_46  [key=2, style=dotted, color=red];
m7_97 -> m7_99  [key=1, style=dashed, color=red, label="lambda expression"];
m7_97 -> m7_48  [key=2, style=dotted];
m7_97 -> m7_19  [key=2, style=dotted];
m7_96 -> m7_97  [key=0, style=solid, color=red];
m7_96 -> m7_21  [key=0, style=solid];
m7_96 -> m7_46  [key=2, style=dotted];
m7_96 -> m7_47  [key=2, style=dotted];
m7_96 -> m7_98  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m7_96 -> m7_99  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m7_96 -> m7_100  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m7_96 -> m7_101  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m7_98 -> m7_96  [key=0, style=bold, color=blue];
m7_98 -> m7_81  [key=0, style=bold, color=green];
m7_98 -> m7_19  [key=2, style=dotted];
m7_98 -> m7_99  [key=0, style=solid];
m7_99 -> m7_100  [key=0, style=solid, color=red];
m7_99 -> m7_29  [key=0, style=solid];
m7_99 -> m7_19  [key=2, style=dotted];
m7_100 -> m7_101  [key=0, style=solid, color=red];
m7_100 -> m7_102  [key=2, style=dotted, color=red];
m7_100 -> m7_51  [key=2, style=dotted, color=red];
m7_100 -> m7_53  [key=2, style=dotted, color=red];
m7_100 -> m7_73  [key=2, style=dotted];
m7_101 -> m7_99  [key=0, style=bold, color=blue];
m7_101 -> m7_96  [key=0, style=bold, color=green];
m7_101 -> m7_102  [key=0, style=solid];
m7_101 -> m7_19  [key=2, style=dotted];
m7_107 -> m7_108  [key=0, style=solid, color=red];
m7_107 -> m7_46  [key=2, style=dotted, color=red];
m7_107 -> m7_109  [key=1, style=dashed, color=red, label="lambda expression"];
m7_106 -> m7_107  [key=0, style=solid, color=red];
m7_106 -> m7_40  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_106 -> m7_41  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_106 -> m7_43  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_106 -> m7_38  [key=0, style=solid];
m7_106 -> m7_39  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_108 -> m7_106  [key=0, style=bold, color=blue];
m7_108 -> m7_99  [key=0, style=bold, color=green];
m7_108 -> m7_109  [key=0, style=solid];
m7_109 -> m7_110  [key=0, style=solid];
m7_110 -> m7_111  [key=0, style=solid];
m7_110 -> m7_112  [key=2, style=dotted];
m7_110 -> m7_51  [key=2, style=dotted];
m7_110 -> m7_52  [key=2, style=dotted];
m7_110 -> m7_113  [key=2, style=dotted];
m7_110 -> m7_53  [key=2, style=dotted];
m7_110 -> m7_108  [key=0, style=bold, color=blue];
m7_111 -> m7_109  [key=0, style=bold, color=blue];
m7_111 -> m7_112  [key=0, style=solid];
m7_118 -> m7_119  [key=0, style=solid];
m7_118 -> m7_46  [key=2, style=dotted];
m7_118 -> m7_120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_117 -> m7_118  [key=0, style=solid];
m7_117 -> m7_115  [key=0, style=bold, color=blue];
m7_143 -> m7_144  [key=0, style=solid];
m7_147 -> m7_148  [key=0, style=solid];
m7_147 -> m7_114  [key=2, style=dotted];
m7_151 -> m7_152  [key=0, style=solid];
m7_151 -> m7_149  [key=0, style=bold, color=blue];
m7_158 -> m7_159  [key=0, style=solid];
m7_158 -> m7_134  [key=2, style=dotted];
m7_158 -> m7_137  [key=2, style=dotted];
m7_158 -> m7_160  [key=2, style=dotted];
m7_158 -> m7_161  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_158 -> m7_5  [key=2, style=dotted];
m7_157 -> m7_158  [key=0, style=solid];
m7_157 -> m7_159  [key=1, style=dashed, color=darkseagreen4, label=correctJobQueue];
m7_157 -> m7_162  [key=1, style=dashed, color=darkseagreen4, label=correctJobQueue];
m7_157 -> m7_7  [key=2, style=dotted];
m7_144 -> m7_145  [key=0, style=solid];
m7_144 -> m7_146  [key=2, style=dotted];
m7_144 -> m7_39  [key=0, style=solid, color=green];
m7_145 -> m7_143  [key=0, style=bold, color=blue];
m7_148 -> m7_149  [key=0, style=solid];
m7_148 -> m7_150  [key=2, style=dotted];
m7_148 -> m7_146  [key=0, style=bold, color=blue];
m7_149 -> m7_147  [key=0, style=bold, color=blue];
m7_149 -> m7_150  [key=0, style=solid];
m7_156 -> m7_154  [key=0, style=bold, color=blue];
m7_156 -> m7_161  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_156 -> m7_157  [key=0, style=solid];
m7_159 -> m7_157  [key=0, style=bold, color=blue];
m7_159 -> m7_6  [key=2, style=dotted];
m7_159 -> m7_8  [key=2, style=dotted];
m7_159 -> m7_160  [key=0, style=solid];
m7_159 -> m7_166  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_161 -> m7_162  [key=0, style=solid];
m7_161 -> m7_49  [key=2, style=dotted];
m7_161 -> m7_169  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_162 -> m7_163  [key=0, style=solid];
m7_162 -> m7_165  [key=2, style=dotted];
m7_162 -> m7_173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_163 -> m7_161  [key=0, style=bold, color=blue];
m7_163 -> m7_156  [key=0, style=bold, color=blue];
m7_171 -> m7_172  [key=0, style=solid];
m7_171 -> m7_134  [key=2, style=dotted];
m7_171 -> m7_137  [key=2, style=dotted];
m7_171 -> m7_160  [key=2, style=dotted];
m7_171 -> m7_173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_171 -> m7_169  [key=0, style=bold, color=blue];
m7_170 -> m7_171  [key=0, style=solid];
m7_170 -> m7_172  [key=2, style=dotted];
m7_172 -> m7_170  [key=0, style=bold, color=blue];
m7_174 -> m7_175  [key=0, style=solid];
m7_174 -> m7_176  [key=2, style=dotted];
m7_175 -> m7_173  [key=0, style=bold, color=blue];
m7_183 -> m7_184  [key=0, style=solid];
m7_183 -> m7_134  [key=2, style=dotted];
m7_183 -> m7_137  [key=2, style=dotted];
m7_183 -> m7_185  [key=2, style=dotted];
m7_183 -> m7_186  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_182 -> m7_183  [key=0, style=solid];
m7_182 -> m7_180  [key=0, style=bold, color=blue];
m7_184 -> m7_182  [key=0, style=bold, color=blue];
m7_184 -> m7_185  [key=0, style=solid];
m7_184 -> m7_49  [key=2, style=dotted];
m7_184 -> m7_190  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_186 -> m7_187  [key=0, style=solid];
m7_186 -> m7_19  [key=2, style=dotted];
m7_187 -> m7_188  [key=0, style=solid];
m7_187 -> m7_19  [key=2, style=dotted];
m7_188 -> m7_186  [key=0, style=bold, color=blue];
m7_188 -> m7_19  [key=2, style=dotted];
m7_188 -> m7_189  [key=0, style=solid];
m7_192 -> m7_193  [key=0, style=solid];
m7_192 -> m7_190  [key=0, style=bold, color=blue];
m7_193 -> m7_194  [key=0, style=solid];
m7_193 -> m7_195  [key=2, style=dotted];
m7_194 -> m7_192  [key=0, style=bold, color=blue];
m7_194 -> m7_195  [key=0, style=solid];
m7_199 -> m7_200  [key=0, style=solid];
m7_199 -> m7_46  [key=2, style=dotted];
m7_199 -> m7_47  [key=2, style=dotted];
m7_199 -> m7_201  [key=1, style=dashed, color=darkseagreen4, label=record];
m7_199 -> m7_202  [key=1, style=dashed, color=darkseagreen4, label=record];
m7_199 -> m7_203  [key=1, style=dashed, color=darkseagreen4, label=record];
m7_200 -> m7_201  [key=0, style=solid];
m7_200 -> m7_195  [key=2, style=dotted];
m7_200 -> m7_19  [key=2, style=dotted];
m7_201 -> m7_199  [key=0, style=bold, color=blue];
m7_201 -> m7_19  [key=2, style=dotted];
m7_201 -> m7_202  [key=0, style=solid];
m7_207 -> m7_208  [key=0, style=solid];
m7_207 -> m7_215  [key=2, style=dotted];
m7_207 -> m7_211  [key=1, style=dashed, color=darkseagreen4, label=multi];
m7_207 -> m7_212  [key=1, style=dashed, color=darkseagreen4, label=multi];
m7_205 -> m7_206  [key=0, style=solid];
m7_205 -> m7_207  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
m7_205 -> m7_53  [key=2, style=dotted];
m7_206 -> m7_207  [key=0, style=solid];
m7_206 -> m7_197  [key=0, style=bold, color=blue];
m7_208 -> m7_209  [key=0, style=solid];
m7_208 -> m7_80  [key=2, style=dotted];
m7_208 -> m7_216  [key=2, style=dotted];
m7_208 -> m7_213  [key=1, style=dashed, color=darkseagreen4, label=job];
m7_211 -> m7_212  [key=0, style=solid];
m7_211 -> m7_80  [key=2, style=dotted];
m7_211 -> m7_217  [key=2, style=dotted];
m7_211 -> m7_220  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_211 -> m7_223  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_211 -> m7_213  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m7_209 -> m7_210  [key=0, style=solid];
m7_209 -> m7_211  [key=0, style=solid];
m7_209 -> m7_58  [key=2, style=dotted];
m7_210 -> m7_214  [key=0, style=solid];
m7_210 -> m7_208  [key=0, style=bold, color=blue];
m7_220 -> m7_221  [key=0, style=solid];
m7_220 -> m7_222  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_223 -> m7_224  [key=0, style=solid];
m7_223 -> m7_220  [key=0, style=bold, color=blue];
m7_221 -> m7_222  [key=0, style=solid];
m7_221 -> m7_193  [key=2, style=dotted];
m7_222 -> m7_220  [key=0, style=bold, color=blue];
m7_222 -> m7_105  [key=0, style=bold, color=blue];
m7_222 -> m7_223  [key=0, style=solid];
m7_222 -> m7_193  [key=2, style=dotted];
m7_227 -> m7_228  [key=0, style=solid];
m7_227 -> m7_229  [key=2, style=dotted];
m7_227 -> m7_230  [key=2, style=dotted];
m7_227 -> m7_80  [key=2, style=dotted];
m7_228 -> m7_226  [key=0, style=bold, color=blue];
m7_228 -> m7_229  [key=0, style=solid];
m7_228 -> m7_49  [key=2, style=dotted];
m7_228 -> m7_234  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_234 -> m7_235  [key=0, style=solid];
m7_235 -> m7_236  [key=0, style=solid];
m7_235 -> m7_15  [key=2, style=dotted];
m7_235 -> m7_237  [key=2, style=dotted];
m7_236 -> m7_234  [key=0, style=bold, color=blue];
m7_240 -> m7_241  [key=0, style=solid];
m7_240 -> m7_238  [key=0, style=bold, color=blue];
m7_241 -> m7_242  [key=0, style=solid];
m7_241 -> m7_15  [key=2, style=dotted];
m7_241 -> m7_243  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_242 -> m7_240  [key=0, style=bold, color=blue];
m7_242 -> m7_243  [key=0, style=solid];
m7_242 -> m7_49  [key=2, style=dotted];
m7_242 -> m7_251  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_254 -> m7_255  [key=0, style=solid];
m7_254 -> m7_215  [key=2, style=dotted];
m7_254 -> m7_256  [key=1, style=dashed, color=darkseagreen4, label=multi];
m7_254 -> m7_257  [key=1, style=dashed, color=darkseagreen4, label=multi];
m7_254 -> m7_258  [key=1, style=dashed, color=darkseagreen4, label=multi];
m7_254 -> m7_259  [key=1, style=dashed, color=darkseagreen4, label=multi];
m7_254 -> m7_260  [key=1, style=dashed, color=darkseagreen4, label=multi];
m7_254 -> m7_261  [key=1, style=dashed, color=darkseagreen4, label=multi];
m7_254 -> m7_262  [key=1, style=dashed, color=darkseagreen4, label=multi];
m7_252 -> m7_253  [key=0, style=solid];
m7_252 -> m7_254  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
m7_252 -> m7_58  [key=2, style=dotted];
m7_266 -> m7_267  [key=0, style=solid];
m7_266 -> m7_263  [key=0, style=bold, color=blue];
m7_253 -> m7_254  [key=0, style=solid];
m7_253 -> m7_265  [key=2, style=dotted];
m7_253 -> m7_255  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_253 -> m7_256  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_253 -> m7_257  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_253 -> m7_258  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_253 -> m7_259  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_253 -> m7_260  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_253 -> m7_261  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_253 -> m7_262  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_253 -> m7_263  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_253 -> m7_251  [key=0, style=bold, color=blue];
m7_258 -> m7_259  [key=0, style=solid];
m7_258 -> m7_80  [key=2, style=dotted];
m7_258 -> m7_260  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_259 -> m7_260  [key=0, style=solid];
m7_259 -> m7_80  [key=2, style=dotted];
m7_259 -> m7_49  [key=2, style=dotted];
m7_259 -> m7_263  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_260 -> m7_261  [key=0, style=solid];
m7_260 -> m7_80  [key=2, style=dotted];
m7_260 -> m7_47  [key=2, style=dotted];
m7_260 -> m7_13  [key=2, style=dotted];
m7_261 -> m7_262  [key=0, style=solid];
m7_261 -> m7_80  [key=2, style=dotted];
m7_261 -> m7_19  [key=2, style=dotted];
m7_262 -> m7_263  [key=0, style=solid];
m7_262 -> m7_80  [key=2, style=dotted];
m7_262 -> m7_258  [key=0, style=bold, color=blue];
m7_263 -> m7_264  [key=0, style=solid];
m7_263 -> m7_265  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_264 -> m7_252  [key=0, style=bold, color=blue];
m7_264 -> m7_265  [key=0, style=solid];
m7_264 -> m7_237  [key=2, style=dotted];
m7_283 -> m7_284  [key=0, style=solid];
m7_283 -> m7_285  [key=2, style=dotted];
m7_283 -> m7_281  [key=0, style=bold, color=blue];
m7_282 -> m7_283  [key=0, style=solid];
m7_282 -> m7_36  [key=2, style=dotted];
m7_282 -> m7_284  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_286 -> m7_287  [key=0, style=solid];
m7_286 -> m7_47  [key=2, style=dotted];
m7_286 -> m7_13  [key=2, style=dotted];
m7_284 -> m7_282  [key=0, style=bold, color=blue];
m7_284 -> m7_285  [key=0, style=solid];
m7_284 -> m7_286  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_287 -> m7_288  [key=0, style=solid];
m7_287 -> m7_19  [key=2, style=dotted];
m7_288 -> m7_286  [key=0, style=bold, color=blue];
m7_288 -> m7_284  [key=0, style=bold, color=blue];
m7_301 -> m7_302  [key=0, style=solid];
m7_301 -> m7_285  [key=2, style=dotted];
m7_301 -> m7_303  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_300 -> m7_301  [key=0, style=solid];
m7_300 -> m7_296  [key=0, style=bold, color=blue];
m7_303 -> m7_304  [key=0, style=solid];
m7_303 -> m7_280  [key=2, style=dotted];
m7_302 -> m7_300  [key=0, style=bold, color=blue];
m7_302 -> m7_303  [key=0, style=solid];
m7_302 -> m7_280  [key=2, style=dotted];
m7_304 -> m7_305  [key=0, style=solid];
m7_304 -> m7_301  [key=0, style=bold, color=blue];
m7_325 -> m7_326  [key=0, style=solid];
m7_325 -> m7_19  [key=2, style=dotted];
m7_328 -> m7_329  [key=0, style=solid];
m7_328 -> m7_280  [key=2, style=dotted];
m7_326 -> m7_327  [key=0, style=solid];
m7_326 -> m7_322  [key=0, style=bold, color=blue];
m7_327 -> m7_325  [key=0, style=bold, color=blue];
m7_327 -> m7_328  [key=0, style=solid];
m7_327 -> m7_329  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_329 -> m7_330  [key=0, style=solid];
m7_329 -> m7_318  [key=2, style=dotted];
m7_330 -> m7_328  [key=0, style=bold, color=blue];
m7_330 -> m7_327  [key=0, style=bold, color=blue];
m7_349 -> m7_350  [key=0, style=solid];
m7_349 -> m7_47  [key=2, style=dotted];
m7_349 -> m7_13  [key=2, style=dotted];
m7_353 -> m7_354  [key=0, style=solid];
m7_353 -> m7_321  [key=2, style=dotted];
m7_353 -> m7_355  [key=2, style=dotted];
m7_353 -> m7_280  [key=2, style=dotted];
m7_352 -> m7_353  [key=0, style=solid];
m7_352 -> m7_354  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_347 -> m7_348  [key=0, style=solid];
m7_347 -> m7_349  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_348 -> m7_346  [key=0, style=bold, color=blue];
m7_348 -> m7_349  [key=0, style=solid];
m7_348 -> m7_49  [key=2, style=dotted];
m7_348 -> m7_352  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_350 -> m7_351  [key=0, style=solid];
m7_350 -> m7_19  [key=2, style=dotted];
m7_351 -> m7_349  [key=0, style=bold, color=blue];
m7_351 -> m7_347  [key=0, style=bold, color=blue];
m7_354 -> m7_352  [key=0, style=bold, color=blue];
m7_354 -> m7_355  [key=0, style=solid];
m7_354 -> m7_343  [key=2, style=dotted];
m7_123 -> m7_124  [key=0, style=solid, color=green];
m7_123 -> m7_129  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_123 -> m7_130  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_123 -> m7_133  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_150 -> m7_151  [key=0, style=solid];
m7_150 -> m7_152  [key=2, style=dotted];
m7_134 -> m7_48  [key=2, style=dotted];
m7_134 -> m7_135  [key=0, style=solid];
m7_134 -> m7_19  [key=2, style=dotted];
m7_21 -> m7_101  [key=0, style=solid];
m7_21 -> m7_23  [key=2, style=dotted];
m7_21 -> m7_331  [key=0, style=solid];
m7_21 -> m7_16  [key=3, color=darkorchid, style=bold, label="Parameter variable string queueName"];
m7_21 -> m7_164  [key=3, color=darkorchid, style=bold, label="Parameter variable string queueName"];
m7_21 -> m7_176  [key=3, color=darkorchid, style=bold, label="Parameter variable string queueName"];
m7_21 -> m7_332  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.SqlServer.IPersistentJobQueueMonitoringApi GetQueueApi"];
m7_40 -> m7_41  [key=0, style=solid];
m7_40 -> m7_49  [key=2, style=dotted];
m7_40 -> m7_55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_40 -> m7_44  [key=1, style=dashed, color=darkseagreen4, label=int];
m7_40 -> m7_11  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.Monitoring.JobList<Hangfire.Storage.Monitoring.ProcessingJobDto> ProcessingJobs"];
m7_41 -> m7_42  [key=0, style=solid];
m7_41 -> m7_50  [key=2, style=dotted];
m7_41 -> m7_11  [key=2, style=dotted];
m7_41 -> m7_43  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_70 -> m7_71  [key=0, style=solid];
m7_70 -> m7_50  [key=2, style=dotted];
m7_70 -> m7_289  [key=0, style=solid];
m7_70 -> m7_296  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_70 -> m7_301  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_70 -> m7_297  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
m7_70 -> m7_65  [key=3, color=darkorchid, style=bold, label="Parameter variable string type"];
m7_70 -> m7_72  [key=3, color=darkorchid, style=bold, label="Parameter variable string type"];
m7_89 -> m7_90  [key=0, style=solid];
m7_89 -> m7_49  [key=2, style=dotted];
m7_89 -> m7_115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_93 -> m7_94  [key=0, style=solid, color=red];
m7_93 -> m7_50  [key=2, style=dotted];
m7_93 -> m7_95  [key=1, style=dashed, color=darkseagreen4, label=anotherJob];
m7_93 -> m7_97  [key=1, style=dashed, color=red, label=int];
m7_93 -> m7_11  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.Monitoring.JobList<Hangfire.Storage.Monitoring.FailedJobDto> FailedJobs"];
m7_216 -> m7_217  [key=0, style=solid];
m7_216 -> m7_49  [key=2, style=dotted];
m7_216 -> m7_220  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_271 -> m7_272  [key=0, style=solid];
m7_271 -> m7_49  [key=2, style=dotted];
m7_271 -> m7_277  [key=1, style=dashed, color=darkseagreen4, label=dates];
m7_271 -> m7_90  [key=2, style=dotted];
m7_271 -> m7_274  [key=1, style=dashed, color=darkseagreen4, label=dates];
m7_285 -> m7_286  [key=0, style=solid];
m7_285 -> m7_49  [key=2, style=dotted];
m7_285 -> m7_289  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_297 -> m7_298  [key=0, style=solid];
m7_297 -> m7_49  [key=2, style=dotted];
m7_297 -> m7_301  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_297 -> m7_281  [key=2, style=dotted];
m7_309 -> m7_310  [key=0, style=solid];
m7_309 -> m7_49  [key=2, style=dotted];
m7_309 -> m7_315  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_309 -> m7_312  [key=0, style=solid];
m7_309 -> m7_311  [key=1, style=dashed, color=darkseagreen4, label=key];
m7_323 -> m7_324  [key=0, style=solid];
m7_323 -> m7_49  [key=2, style=dotted];
m7_323 -> m7_327  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_335 -> m7_336  [key=0, style=solid];
m7_335 -> m7_49  [key=2, style=dotted];
m7_335 -> m7_339  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_360 -> m7_361  [key=0, style=solid];
m7_360 -> m7_49  [key=2, style=dotted];
m7_360 -> m7_364  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_397 -> m7_398  [key=0, style=solid];
m7_397 -> m7_49  [key=2, style=dotted];
m7_397 -> m7_401  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_397 -> m7_402  [key=2, style=dotted];
m7_397 -> m7_399  [key=1, style=dashed, color=darkseagreen4, label=result];
m7_397 -> m7_400  [key=1, style=dashed, color=darkseagreen4, label=result];
m7_411 -> m7_412  [key=0, style=solid];
m7_411 -> m7_49  [key=2, style=dotted];
m7_411 -> m7_415  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_411 -> m7_97  [key=1, style=dashed, color=red, label=int];
m7_423 -> m7_424  [key=0, style=solid];
m7_423 -> m7_49  [key=2, style=dotted];
m7_423 -> m7_427  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_423 -> m7_301  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_435 -> m7_436  [key=0, style=solid];
m7_435 -> m7_49  [key=2, style=dotted];
m7_435 -> m7_442  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_454 -> m7_455  [key=0, style=solid];
m7_454 -> m7_49  [key=2, style=dotted];
m7_454 -> m7_458  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_468 -> m7_469  [key=0, style=solid];
m7_468 -> m7_49  [key=2, style=dotted];
m7_468 -> m7_472  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_480 -> m7_481  [key=0, style=solid];
m7_480 -> m7_49  [key=2, style=dotted];
m7_480 -> m7_484  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_492 -> m7_493  [key=0, style=solid];
m7_492 -> m7_49  [key=2, style=dotted];
m7_492 -> m7_496  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_504 -> m7_505  [key=0, style=solid];
m7_504 -> m7_13  [key=2, style=dotted];
m7_504 -> m7_507  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_508 -> m7_509  [key=0, style=solid];
m7_508 -> m7_49  [key=2, style=dotted];
m7_508 -> m7_510  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_518 -> m7_519  [key=0, style=solid];
m7_518 -> m7_13  [key=2, style=dotted];
m7_518 -> m7_521  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_522 -> m7_523  [key=0, style=solid];
m7_522 -> m7_49  [key=2, style=dotted];
m7_522 -> m7_524  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_531 -> m7_532  [key=0, style=solid];
m7_531 -> m7_49  [key=2, style=dotted];
m7_531 -> m7_537  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_139 -> m7_123  [key=0, style=bold, color=blue];
m7_65 -> m7_46  [key=2, style=dotted];
m7_65 -> m7_47  [key=2, style=dotted];
m7_65 -> m7_48  [key=2, style=dotted];
m7_65 -> m7_67  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_65 -> m7_68  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m7_65 -> m7_66  [key=0, style=solid];
m7_65 -> m7_75  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m7_65 -> m7_11  [key=2, style=dotted];
m7_66 -> m7_46  [key=2, style=dotted];
m7_66 -> m7_47  [key=2, style=dotted];
m7_66 -> m7_48  [key=2, style=dotted];
m7_66 -> m7_67  [key=0, style=solid];
m7_66 -> m7_70  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
m7_66 -> m7_64  [key=0, style=bold, color=blue];
m7_272 -> m7_46  [key=2, style=dotted];
m7_272 -> m7_47  [key=2, style=dotted];
m7_272 -> m7_273  [key=0, style=solid];
m7_272 -> m7_274  [key=1, style=dashed, color=darkseagreen4, label=record];
m7_272 -> m7_275  [key=1, style=dashed, color=darkseagreen4, label=record];
m7_272 -> m7_276  [key=1, style=dashed, color=darkseagreen4, label=i];
m7_272 -> m7_272  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m7_310 -> m7_46  [key=2, style=dotted];
m7_310 -> m7_47  [key=2, style=dotted];
m7_310 -> m7_311  [key=0, style=solid];
m7_310 -> m7_312  [key=1, style=dashed, color=darkseagreen4, label=record];
m7_310 -> m7_313  [key=1, style=dashed, color=darkseagreen4, label=record];
m7_310 -> m7_309  [key=0, style=solid];
m7_310 -> m7_321  [key=2, style=dotted];
m7_324 -> m7_46  [key=2, style=dotted];
m7_324 -> m7_47  [key=2, style=dotted];
m7_324 -> m7_325  [key=0, style=solid];
m7_373 -> m7_46  [key=2, style=dotted];
m7_373 -> m7_47  [key=2, style=dotted];
m7_373 -> m7_374  [key=0, style=solid];
m7_373 -> m7_375  [key=1, style=dashed, color=darkseagreen4, label=record];
m7_436 -> m7_46  [key=2, style=dotted];
m7_436 -> m7_437  [key=0, style=solid];
m7_436 -> m7_441  [key=2, style=dotted];
m7_436 -> m7_438  [key=1, style=dashed, color=darkseagreen4, label=records];
m7_436 -> m7_439  [key=1, style=dashed, color=darkseagreen4, label=records];
m7_532 -> m7_46  [key=2, style=dotted];
m7_532 -> m7_533  [key=0, style=solid];
m7_532 -> m7_536  [key=2, style=dotted];
m7_532 -> m7_540  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_532 -> m7_543  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_532 -> m7_534  [key=1, style=dashed, color=darkseagreen4, label=result];
m7_217 -> m7_47  [key=2, style=dotted];
m7_217 -> m7_218  [key=0, style=solid];
m7_217 -> m7_13  [key=2, style=dotted];
m7_298 -> m7_47  [key=2, style=dotted];
m7_298 -> m7_299  [key=0, style=solid];
m7_298 -> m7_13  [key=2, style=dotted];
m7_298 -> m7_70  [key=0, style=bold, color=blue];
m7_336 -> m7_47  [key=2, style=dotted];
m7_336 -> m7_337  [key=0, style=solid];
m7_336 -> m7_13  [key=2, style=dotted];
m7_336 -> m7_338  [key=2, style=dotted];
m7_361 -> m7_47  [key=2, style=dotted];
m7_361 -> m7_362  [key=0, style=solid];
m7_361 -> m7_13  [key=2, style=dotted];
m7_361 -> m7_80  [key=2, style=dotted];
m7_398 -> m7_47  [key=2, style=dotted];
m7_398 -> m7_399  [key=0, style=solid];
m7_398 -> m7_13  [key=2, style=dotted];
m7_398 -> m7_400  [key=0, style=solid];
m7_412 -> m7_47  [key=2, style=dotted];
m7_412 -> m7_413  [key=0, style=solid];
m7_412 -> m7_13  [key=2, style=dotted];
m7_412 -> m7_97  [key=1, style=dashed, color=red, label=int];
m7_424 -> m7_47  [key=2, style=dotted];
m7_424 -> m7_425  [key=0, style=solid];
m7_424 -> m7_13  [key=2, style=dotted];
m7_424 -> m7_353  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m7_455 -> m7_47  [key=2, style=dotted];
m7_455 -> m7_456  [key=0, style=solid];
m7_455 -> m7_13  [key=2, style=dotted];
m7_469 -> m7_47  [key=2, style=dotted];
m7_469 -> m7_470  [key=0, style=solid];
m7_469 -> m7_13  [key=2, style=dotted];
m7_481 -> m7_47  [key=2, style=dotted];
m7_481 -> m7_482  [key=0, style=solid];
m7_481 -> m7_13  [key=2, style=dotted];
m7_493 -> m7_47  [key=2, style=dotted];
m7_493 -> m7_494  [key=0, style=solid];
m7_493 -> m7_13  [key=2, style=dotted];
m7_135 -> m7_136  [key=0, style=solid];
m7_135 -> m7_19  [key=2, style=dotted];
m7_140 -> m7_141  [key=0, style=solid];
m7_94 -> m7_54  [key=2, style=dotted];
m7_94 -> m7_95  [key=0, style=solid, color=red];
m7_94 -> m7_11  [key=2, style=dotted, color=red];
m7_94 -> m7_96  [key=1, style=dashed, color=red, label="lambda expression"];
m7_95 -> m7_54  [key=2, style=dotted];
m7_95 -> m7_96  [key=0, style=solid];
m7_95 -> m7_93  [key=0, style=bold, color=blue];
m7_55 -> m7_56  [key=0, style=solid];
m7_55 -> m7_11  [key=2, style=dotted];
m7_55 -> m7_57  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_42 -> m7_43  [key=0, style=solid];
m7_42 -> m7_51  [key=2, style=dotted];
m7_42 -> m7_52  [key=2, style=dotted];
m7_42 -> m7_53  [key=2, style=dotted];
m7_42 -> m7_40  [key=0, style=bold, color=blue];
m7_64 -> m7_67  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_64 -> m7_68  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_64 -> m7_70  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_64 -> m7_65  [key=0, style=solid];
m7_64 -> m7_66  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_64 -> m7_11  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IDictionary<System.DateTime, long> SucceededByDatesCount"];
m7_71 -> m7_72  [key=0, style=solid];
m7_71 -> m7_73  [key=2, style=dotted];
m7_71 -> m7_11  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IDictionary<System.DateTime, long> FailedByDatesCount"];
m7_92 -> m7_93  [key=0, style=solid];
m7_92 -> m7_73  [key=2, style=dotted];
m7_190 -> m7_191  [key=0, style=solid];
m7_190 -> m7_11  [key=2, style=dotted];
m7_190 -> m7_192  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_215 -> m7_216  [key=0, style=solid];
m7_215 -> m7_217  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_251 -> m7_252  [key=0, style=solid];
m7_270 -> m7_271  [key=0, style=solid];
m7_270 -> m7_272  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_270 -> m7_274  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m7_270 -> m7_275  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m7_277 -> m7_278  [key=0, style=solid];
m7_277 -> m7_217  [key=2, style=dotted];
m7_277 -> m7_282  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_277 -> m7_286  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_289 -> m7_290  [key=0, style=solid];
m7_289 -> m7_291  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_289 -> m7_293  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m7_289 -> m7_294  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m7_296 -> m7_297  [key=0, style=solid];
m7_296 -> m7_298  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_296 -> m7_217  [key=2, style=dotted];
m7_296 -> m7_300  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_296 -> m7_303  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_308 -> m7_309  [key=0, style=solid];
m7_308 -> m7_310  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m7_308 -> m7_320  [key=2, style=dotted];
m7_308 -> m7_217  [key=2, style=dotted];
m7_308 -> m7_325  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_308 -> m7_328  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_308 -> m7_311  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m7_308 -> m7_315  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m7_315 -> m7_316  [key=0, style=solid];
m7_315 -> m7_324  [key=2, style=dotted];
m7_322 -> m7_323  [key=0, style=solid];
m7_322 -> m7_324  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_334 -> m7_335  [key=0, style=solid];
m7_334 -> m7_336  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_334 -> m7_21  [key=0, style=bold, color=blue];
m7_339 -> m7_340  [key=0, style=solid];
m7_339 -> m7_341  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
m7_339 -> m7_342  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m7_359 -> m7_360  [key=0, style=solid];
m7_359 -> m7_361  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_364 -> m7_365  [key=0, style=solid];
m7_364 -> m7_366  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_364 -> m7_203  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Common.Job DeserializeJob"];
m7_396 -> m7_397  [key=0, style=solid];
m7_396 -> m7_398  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m7_396 -> m7_80  [key=2, style=dotted];
m7_396 -> m7_89  [key=2, style=dotted];
m7_401 -> m7_402  [key=0, style=solid];
m7_401 -> m7_403  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_401 -> m7_404  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_401 -> m7_394  [key=0, style=bold, color=blue];
m7_410 -> m7_411  [key=0, style=solid];
m7_410 -> m7_412  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_410 -> m7_58  [key=1, style=dashed, color=darkseagreen4, label=int];
m7_415 -> m7_416  [key=0, style=solid];
m7_415 -> m7_417  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_415 -> m7_118  [key=1, style=dashed, color=darkseagreen4, label=int];
m7_422 -> m7_423  [key=0, style=solid];
m7_422 -> m7_424  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_422 -> m7_283  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_427 -> m7_428  [key=0, style=solid];
m7_427 -> m7_429  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_434 -> m7_435  [key=0, style=solid];
m7_434 -> m7_436  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_442 -> m7_443  [key=0, style=solid];
m7_442 -> m7_444  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_442 -> m7_445  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_442 -> m7_446  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_442 -> m7_447  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_453 -> m7_454  [key=0, style=solid];
m7_453 -> m7_455  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_458 -> m7_459  [key=0, style=solid];
m7_458 -> m7_460  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_458 -> m7_461  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_458 -> m7_462  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_467 -> m7_468  [key=0, style=solid];
m7_467 -> m7_469  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_472 -> m7_473  [key=0, style=solid];
m7_472 -> m7_474  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_479 -> m7_480  [key=0, style=solid];
m7_479 -> m7_481  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_484 -> m7_485  [key=0, style=solid];
m7_484 -> m7_486  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_491 -> m7_492  [key=0, style=solid];
m7_491 -> m7_493  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_496 -> m7_497  [key=0, style=solid];
m7_496 -> m7_498  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m7_503 -> m7_504  [key=0, style=solid];
m7_503 -> m7_508  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_505 -> m7_19  [key=2, style=dotted];
m7_505 -> m7_506  [key=0, style=solid];
m7_507 -> m7_508  [key=0, style=solid];
m7_509 -> m7_507  [key=0, style=bold, color=blue];
m7_510 -> m7_511  [key=0, style=solid];
m7_517 -> m7_518  [key=0, style=solid];
m7_517 -> m7_522  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_519 -> m7_19  [key=2, style=dotted];
m7_519 -> m7_520  [key=0, style=solid];
m7_521 -> m7_522  [key=0, style=solid];
m7_523 -> m7_521  [key=0, style=bold, color=blue];
m7_524 -> m7_525  [key=0, style=solid];
m7_530 -> m7_531  [key=0, style=solid];
m7_530 -> m7_532  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_537 -> m7_538  [key=0, style=solid];
m7_138 -> m7_139  [key=0, style=solid];
m7_138 -> m7_19  [key=2, style=dotted];
m7_136 -> m7_19  [key=2, style=dotted];
m7_136 -> m7_137  [key=0, style=solid];
m7_56 -> m7_57  [key=0, style=solid];
m7_56 -> m7_58  [key=2, style=dotted];
m7_56 -> m7_59  [key=2, style=dotted];
m7_56 -> m7_54  [key=0, style=bold, color=blue];
m7_202 -> m7_203  [key=0, style=solid];
m7_202 -> m7_73  [key=2, style=dotted];
m7_202 -> m7_207  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_202 -> m7_11  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.Monitoring.JobDetailsDto JobDetails"];
m7_203 -> m7_204  [key=0, style=solid];
m7_203 -> m7_205  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_203 -> m7_11  [key=2, style=dotted];
m7_203 -> m7_203  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.Monitoring.JobDetailsDto "];
m7_231 -> m7_19  [key=2, style=dotted];
m7_231 -> m7_232  [key=0, style=solid];
m7_231 -> m7_11  [key=3, color=darkorchid, style=bold, label="method methodReturn long SucceededListCount"];
m7_232 -> m7_19  [key=2, style=dotted];
m7_232 -> m7_233  [key=0, style=solid];
m7_232 -> m7_11  [key=2, style=dotted];
m7_232 -> m7_234  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_273 -> m7_19  [key=2, style=dotted];
m7_273 -> m7_274  [key=0, style=solid];
m7_273 -> m7_277  [key=0, style=solid];
m7_274 -> m7_19  [key=2, style=dotted];
m7_274 -> m7_275  [key=0, style=solid];
m7_274 -> m7_92  [key=2, style=dotted];
m7_275 -> m7_19  [key=2, style=dotted];
m7_275 -> m7_276  [key=0, style=solid];
m7_275 -> m7_280  [key=2, style=dotted];
m7_275 -> m7_275  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m7_311 -> m7_19  [key=2, style=dotted];
m7_311 -> m7_312  [key=0, style=solid];
m7_311 -> m7_309  [key=0, style=solid];
m7_311 -> m7_322  [key=2, style=dotted];
m7_312 -> m7_19  [key=2, style=dotted];
m7_312 -> m7_313  [key=0, style=solid];
m7_312 -> m7_323  [key=2, style=dotted];
m7_312 -> m7_316  [key=1, style=dashed, color=darkseagreen4, label=result];
m7_312 -> m7_318  [key=1, style=dashed, color=darkseagreen4, label=result];
m7_313 -> m7_19  [key=2, style=dotted];
m7_313 -> m7_314  [key=0, style=solid];
m7_313 -> m7_315  [key=1, style=dashed, color=darkseagreen4, label=i];
m7_313 -> m7_316  [key=1, style=dashed, color=darkseagreen4, label=i];
m7_313 -> m7_317  [key=1, style=dashed, color=darkseagreen4, label=i];
m7_374 -> m7_19  [key=2, style=dotted];
m7_374 -> m7_375  [key=0, style=solid];
m7_374 -> m7_80  [key=2, style=dotted];
m7_374 -> m7_89  [key=2, style=dotted];
m7_375 -> m7_19  [key=2, style=dotted];
m7_375 -> m7_376  [key=0, style=solid];
m7_375 -> m7_345  [key=2, style=dotted];
m7_437 -> m7_19  [key=2, style=dotted];
m7_437 -> m7_438  [key=0, style=solid];
m7_438 -> m7_19  [key=2, style=dotted];
m7_438 -> m7_439  [key=0, style=solid];
m7_439 -> m7_19  [key=2, style=dotted];
m7_439 -> m7_440  [key=0, style=solid];
m7_533 -> m7_19  [key=2, style=dotted];
m7_533 -> m7_534  [key=0, style=solid];
m7_540 -> m7_541  [key=0, style=solid];
m7_543 -> m7_544  [key=0, style=solid];
m7_534 -> m7_19  [key=2, style=dotted];
m7_534 -> m7_535  [key=0, style=solid];
m7_218 -> m7_19  [key=2, style=dotted];
m7_218 -> m7_219  [key=0, style=solid];
m7_337 -> m7_19  [key=2, style=dotted];
m7_337 -> m7_338  [key=0, style=solid];
m7_337 -> m7_11  [key=0, style=bold, color=blue];
m7_362 -> m7_19  [key=2, style=dotted];
m7_362 -> m7_363  [key=0, style=solid];
m7_399 -> m7_19  [key=2, style=dotted];
m7_399 -> m7_400  [key=0, style=solid];
m7_399 -> m7_398  [key=0, style=solid];
m7_399 -> m7_403  [key=2, style=dotted];
m7_399 -> m7_404  [key=2, style=dotted];
m7_399 -> m7_405  [key=2, style=dotted];
m7_399 -> m7_219  [key=2, style=dotted];
m7_399 -> m7_92  [key=2, style=dotted];
m7_413 -> m7_19  [key=2, style=dotted];
m7_413 -> m7_414  [key=0, style=solid];
m7_413 -> m7_107  [key=1, style=dashed, color=red, label=int];
m7_425 -> m7_19  [key=2, style=dotted];
m7_425 -> m7_426  [key=0, style=solid];
m7_456 -> m7_19  [key=2, style=dotted];
m7_456 -> m7_457  [key=0, style=solid];
m7_470 -> m7_19  [key=2, style=dotted];
m7_470 -> m7_471  [key=0, style=solid];
m7_482 -> m7_19  [key=2, style=dotted];
m7_482 -> m7_483  [key=0, style=solid];
m7_494 -> m7_19  [key=2, style=dotted];
m7_494 -> m7_495  [key=0, style=solid];
m7_141 -> m7_142  [key=0, style=solid];
m7_511 -> m7_104  [key=2, style=dotted];
m7_511 -> m7_512  [key=0, style=solid];
m7_511 -> m7_513  [key=2, style=dotted];
m7_538 -> m7_104  [key=2, style=dotted];
m7_538 -> m7_539  [key=0, style=solid];
m7_538 -> m7_513  [key=2, style=dotted];
m7_105 -> m7_221  [key=0, style=solid];
m7_105 -> m7_103  [key=0, style=bold, color=blue];
m7_166 -> m7_167  [key=0, style=solid];
m7_166 -> m7_169  [key=2, style=dotted];
m7_166 -> m7_171  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
m7_11 -> m7_13  [key=2, style=dotted];
m7_11 -> m7_98  [key=0, style=solid];
m7_11 -> m7_14  [key=2, style=dotted];
m7_11 -> m7_336  [key=0, style=solid];
m7_11 -> m7_9  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<DbConnection, T> action"];
m7_11 -> m7_29  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<DbConnection, T> action"];
m7_11 -> m7_35  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<DbConnection, T> action"];
m7_11 -> m7_41  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<DbConnection, T> action"];
m7_11 -> m7_55  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<DbConnection, T> action"];
m7_11 -> m7_65  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<DbConnection, T> action"];
m7_11 -> m7_72  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<DbConnection, T> action"];
m7_11 -> m7_94  [key=3, color=red, style=bold, label="Parameter variable System.Func<DbConnection, T> action"];
m7_11 -> m7_104  [key=3, color=red, style=bold, label="Parameter variable System.Func<DbConnection, T> action"];
m7_11 -> m7_115  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<DbConnection, T> action"];
m7_11 -> m7_190  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<DbConnection, T> action"];
m7_11 -> m7_197  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<DbConnection, T> action"];
m7_11 -> m7_203  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<DbConnection, T> action"];
m7_11 -> m7_232  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<DbConnection, T> action"];
m7_11 -> m7_238  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<DbConnection, T> action"];
m7_11 -> m7_245  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<DbConnection, T> action"];
m7_167 -> m7_13  [key=2, style=dotted];
m7_167 -> m7_168  [key=0, style=solid];
m7_167 -> m7_14  [key=2, style=dotted];
m7_167 -> m7_141  [key=2, style=dotted];
m7_167 -> m7_170  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_72 -> m7_64  [key=0, style=bold, color=blue];
m7_72 -> m7_73  [key=0, style=solid];
m7_72 -> m7_11  [key=2, style=dotted];
m7_72 -> m7_74  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_189 -> m7_183  [key=0, style=bold, color=blue];
m7_189 -> m7_190  [key=0, style=solid];
m7_189 -> m7_11  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IDictionary<System.DateTime, long> HourlySucceededJobs"];
m7_191 -> m7_192  [key=0, style=solid];
m7_191 -> m7_193  [key=2, style=dotted];
m7_191 -> m7_189  [key=0, style=bold, color=blue];
m7_219 -> m7_215  [key=0, style=bold, color=blue];
m7_233 -> m7_227  [key=0, style=bold, color=blue];
m7_233 -> m7_231  [key=0, style=bold, color=blue];
m7_265 -> m7_266  [key=0, style=solid];
m7_265 -> m7_237  [key=2, style=dotted];
m7_276 -> m7_270  [key=0, style=bold, color=blue];
m7_276 -> m7_273  [key=0, style=solid];
m7_276 -> m7_276  [key=1, style=dashed, color=darkseagreen4, label=i];
m7_279 -> m7_277  [key=0, style=bold, color=blue];
m7_279 -> m7_195  [key=0, style=bold, color=blue];
m7_278 -> m7_279  [key=0, style=solid];
m7_278 -> m7_280  [key=2, style=dotted];
m7_278 -> m7_281  [key=2, style=dotted];
m7_292 -> m7_289  [key=0, style=bold, color=blue];
m7_292 -> m7_293  [key=0, style=solid];
m7_292 -> m7_296  [key=0, style=solid];
m7_290 -> m7_291  [key=0, style=solid];
m7_290 -> m7_280  [key=2, style=dotted];
m7_290 -> m7_90  [key=2, style=dotted];
m7_290 -> m7_293  [key=1, style=dashed, color=darkseagreen4, label=dates];
m7_290 -> m7_296  [key=1, style=dashed, color=darkseagreen4, label=dates];
m7_291 -> m7_292  [key=0, style=solid];
m7_291 -> m7_280  [key=2, style=dotted];
m7_291 -> m7_295  [key=1, style=dashed, color=darkseagreen4, label=i];
m7_291 -> m7_272  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m7_314 -> m7_308  [key=0, style=bold, color=blue];
m7_314 -> m7_315  [key=0, style=solid];
m7_314 -> m7_318  [key=0, style=solid];
m7_314 -> m7_272  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m7_317 -> m7_315  [key=0, style=bold, color=blue];
m7_317 -> m7_314  [key=0, style=solid];
m7_317 -> m7_317  [key=1, style=dashed, color=darkseagreen4, label=i];
m7_316 -> m7_317  [key=0, style=solid];
m7_316 -> m7_318  [key=2, style=dotted];
m7_316 -> m7_324  [key=2, style=dotted];
m7_316 -> m7_322  [key=2, style=dotted];
m7_342 -> m7_339  [key=0, style=bold, color=blue];
m7_342 -> m7_343  [key=0, style=solid];
m7_342 -> m7_134  [key=2, style=dotted];
m7_342 -> m7_89  [key=2, style=dotted];
m7_342 -> m7_352  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_340 -> m7_341  [key=0, style=solid];
m7_340 -> m7_280  [key=2, style=dotted];
m7_341 -> m7_342  [key=0, style=solid];
m7_341 -> m7_343  [key=2, style=dotted];
m7_341 -> m7_80  [key=2, style=dotted];
m7_341 -> m7_217  [key=2, style=dotted];
m7_341 -> m7_346  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_341 -> m7_349  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_341 -> m7_353  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m7_363 -> m7_359  [key=0, style=bold, color=blue];
m7_363 -> m7_15  [key=0, style=bold, color=blue];
m7_367 -> m7_364  [key=0, style=bold, color=blue];
m7_367 -> m7_370  [key=0, style=solid];
m7_367 -> m7_372  [key=2, style=dotted];
m7_365 -> m7_366  [key=0, style=solid];
m7_365 -> m7_280  [key=2, style=dotted];
m7_365 -> m7_371  [key=2, style=dotted];
m7_365 -> m7_367  [key=1, style=dashed, color=darkseagreen4, label=data];
m7_366 -> m7_367  [key=0, style=solid];
m7_366 -> m7_343  [key=2, style=dotted];
m7_376 -> m7_371  [key=0, style=bold, color=blue];
m7_376 -> m7_46  [key=0, style=bold, color=blue];
m7_388 -> m7_384  [key=0, style=bold, color=blue];
m7_392 -> m7_389  [key=0, style=bold, color=blue];
m7_400 -> m7_396  [key=0, style=bold, color=blue];
m7_400 -> m7_401  [key=0, style=solid];
m7_400 -> m7_393  [key=2, style=dotted];
m7_402 -> m7_403  [key=0, style=solid];
m7_402 -> m7_380  [key=2, style=dotted];
m7_403 -> m7_404  [key=0, style=solid];
m7_403 -> m7_380  [key=2, style=dotted];
m7_414 -> m7_410  [key=0, style=bold, color=blue];
m7_414 -> m7_107  [key=1, style=dashed, color=red, label=int];
m7_418 -> m7_415  [key=0, style=bold, color=blue];
m7_418 -> m7_171  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
m7_416 -> m7_417  [key=0, style=solid];
m7_416 -> m7_380  [key=2, style=dotted];
m7_416 -> m7_118  [key=1, style=dashed, color=darkseagreen4, label=int];
m7_417 -> m7_418  [key=0, style=solid];
m7_417 -> m7_406  [key=2, style=dotted];
m7_417 -> m7_158  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
m7_426 -> m7_422  [key=0, style=bold, color=blue];
m7_430 -> m7_427  [key=0, style=bold, color=blue];
m7_428 -> m7_429  [key=0, style=solid];
m7_428 -> m7_380  [key=2, style=dotted];
m7_429 -> m7_430  [key=0, style=solid];
m7_429 -> m7_406  [key=2, style=dotted];
m7_440 -> m7_434  [key=0, style=bold, color=blue];
m7_448 -> m7_442  [key=0, style=bold, color=blue];
m7_443 -> m7_444  [key=0, style=solid];
m7_443 -> m7_380  [key=2, style=dotted];
m7_444 -> m7_445  [key=0, style=solid];
m7_444 -> m7_380  [key=2, style=dotted];
m7_445 -> m7_446  [key=0, style=solid];
m7_445 -> m7_380  [key=2, style=dotted];
m7_446 -> m7_447  [key=0, style=solid];
m7_446 -> m7_380  [key=2, style=dotted];
m7_447 -> m7_448  [key=0, style=solid];
m7_447 -> m7_449  [key=2, style=dotted];
m7_457 -> m7_453  [key=0, style=bold, color=blue];
m7_463 -> m7_458  [key=0, style=bold, color=blue];
m7_459 -> m7_460  [key=0, style=solid];
m7_459 -> m7_380  [key=2, style=dotted];
m7_460 -> m7_461  [key=0, style=solid];
m7_460 -> m7_380  [key=2, style=dotted];
m7_461 -> m7_462  [key=0, style=solid];
m7_461 -> m7_380  [key=2, style=dotted];
m7_462 -> m7_463  [key=0, style=solid];
m7_462 -> m7_449  [key=2, style=dotted];
m7_471 -> m7_467  [key=0, style=bold, color=blue];
m7_475 -> m7_472  [key=0, style=bold, color=blue];
m7_473 -> m7_474  [key=0, style=solid];
m7_473 -> m7_380  [key=2, style=dotted];
m7_474 -> m7_475  [key=0, style=solid];
m7_474 -> m7_449  [key=2, style=dotted];
m7_483 -> m7_479  [key=0, style=bold, color=blue];
m7_487 -> m7_484  [key=0, style=bold, color=blue];
m7_485 -> m7_486  [key=0, style=solid];
m7_485 -> m7_380  [key=2, style=dotted];
m7_486 -> m7_487  [key=0, style=solid];
m7_486 -> m7_449  [key=2, style=dotted];
m7_495 -> m7_491  [key=0, style=bold, color=blue];
m7_499 -> m7_496  [key=0, style=bold, color=blue];
m7_497 -> m7_498  [key=0, style=solid];
m7_497 -> m7_380  [key=2, style=dotted];
m7_498 -> m7_499  [key=0, style=solid];
m7_498 -> m7_449  [key=2, style=dotted];
m7_506 -> m7_503  [key=0, style=bold, color=blue];
m7_512 -> m7_510  [key=0, style=bold, color=blue];
m7_520 -> m7_517  [key=0, style=bold, color=blue];
m7_526 -> m7_524  [key=0, style=bold, color=blue];
m7_525 -> m7_526  [key=0, style=solid];
m7_525 -> m7_513  [key=2, style=dotted];
m7_535 -> m7_530  [key=0, style=bold, color=blue];
m7_539 -> m7_537  [key=0, style=bold, color=blue];
m7_204 -> m7_53  [key=2, style=dotted];
m7_204 -> m7_205  [key=0, style=solid];
m7_204 -> m7_207  [key=2, style=dotted];
m7_204 -> m7_202  [key=0, style=bold, color=blue];
m7_249 -> m7_53  [key=2, style=dotted];
m7_249 -> m7_250  [key=0, style=solid];
m7_249 -> m7_207  [key=2, style=dotted];
m7_542 -> m7_540  [key=0, style=bold, color=blue];
m7_541 -> m7_542  [key=0, style=solid];
m7_545 -> m7_543  [key=0, style=bold, color=blue];
m7_544 -> m7_545  [key=0, style=solid];
m7_168 -> m7_166  [key=0, style=bold, color=blue];
m7_168 -> m7_164  [key=0, style=bold, color=blue];
m7_8 -> m7_9  [key=0, style=solid];
m7_8 -> m7_11  [key=3, color=darkorchid, style=bold, label="method methodReturn long ScheduledCount"];
m7_23 -> m7_24  [key=0, style=solid];
m7_23 -> m7_25  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_24 -> m7_25  [key=0, style=solid];
m7_24 -> m7_21  [key=2, style=dotted];
m7_25 -> m7_26  [key=0, style=solid];
m7_25 -> m7_22  [key=2, style=dotted];
m7_25 -> m7_13  [key=2, style=dotted];
m7_25 -> m7_99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_26 -> m7_27  [key=0, style=solid];
m7_26 -> m7_34  [key=3, color=darkorchid, style=bold, label="Local variable Hangfire.BackgroundJobServerOptions options"];
m7_26 -> m7_19  [key=2, style=dotted];
m7_27 -> m7_23  [key=0, style=bold, color=blue];
m7_27 -> m7_24  [key=0, style=bold, color=blue];
m7_393 -> m7_394  [key=0, style=solid];
m7_394 -> m7_395  [key=0, style=solid];
m7_394 -> m7_396  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_394 -> m7_36  [key=2, style=dotted];
m7_395 -> m7_396  [key=0, style=solid];
m7_395 -> m7_393  [key=0, style=bold, color=blue];
m7_103 -> m7_104  [key=0, style=solid, color=red];
m7_103 -> m7_107  [key=1, style=dashed, color=red, label=int];
m7_103 -> m7_11  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.Monitoring.JobList<Hangfire.Storage.Monitoring.SucceededJobDto> SucceededJobs"];
m7_104 -> m7_105  [key=0, style=solid, color=red];
m7_104 -> m7_11  [key=2, style=dotted, color=red];
m7_104 -> m7_106  [key=1, style=dashed, color=red, label="lambda expression"];
m7_36 -> m7_34  [key=0, style=bold, color=blue];
m7_19 -> m7_20  [key=0, style=solid];
m7_318 -> m7_319  [key=0, style=solid];
m7_195 -> m7_270  [key=0, style=solid];
m7_195 -> m7_277  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_195 -> m7_283  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_195 -> m7_278  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
m7_195 -> m7_190  [key=3, color=darkorchid, style=bold, label="Parameter variable DbConnection connection"];
m7_195 -> m7_197  [key=3, color=darkorchid, style=bold, label="Parameter variable DbConnection connection"];
m7_195 -> m7_65  [key=3, color=darkorchid, style=bold, label="Parameter variable string type"];
m7_195 -> m7_72  [key=3, color=darkorchid, style=bold, label="Parameter variable string type"];
m7_195 -> m7_36  [key=2, style=dotted];
m7_195 -> m7_196  [key=0, style=solid];
m7_46 -> m7_373  [key=0, style=solid];
m7_46 -> m7_374  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
m7_46 -> m7_375  [key=1, style=dashed, color=darkseagreen4, label="System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>"];
m7_464 -> m7_465  [key=0, style=solid];
m7_465 -> m7_36  [key=2, style=dotted];
m7_465 -> m7_466  [key=0, style=solid];
m7_465 -> m7_467  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_466 -> m7_464  [key=0, style=bold, color=blue];
m7_476 -> m7_477  [key=0, style=solid];
m7_477 -> m7_36  [key=2, style=dotted];
m7_477 -> m7_478  [key=0, style=solid];
m7_477 -> m7_479  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_478 -> m7_476  [key=0, style=bold, color=blue];
m7_9 -> m7_10  [key=0, style=solid];
m7_9 -> m7_11  [key=2, style=dotted];
m7_9 -> m7_12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_10 -> m7_8  [key=0, style=bold, color=blue];
m7_164 -> m7_165  [key=0, style=solid];
m7_164 -> m7_166  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_73 -> m7_71  [key=0, style=bold, color=blue];
m7_54 -> m7_55  [key=0, style=solid];
m7_54 -> m7_58  [key=1, style=dashed, color=darkseagreen4, label=int];
m7_54 -> m7_11  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.Monitoring.JobList<Hangfire.Storage.Monitoring.ScheduledJobDto> ScheduledJobs"];
m7_77 -> m7_78  [key=0, style=solid, color=red];
m7_78 -> m7_79  [key=0, style=solid, color=red];
m7_78 -> m7_80  [key=2, style=dotted, color=red];
m7_78 -> m7_81  [key=1, style=dashed, color=red, label="lambda expression"];
m7_78 -> m7_78  [key=3, color=red, style=bold, label="method methodReturn System.Collections.Generic.IList<Hangfire.Storage.Monitoring.ServerDto> "];
m7_79 -> m7_77  [key=0, style=bold, color=blue];
m7_79 -> m7_80  [key=0, style=solid, color=green];
m7_79 -> m7_83  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_79 -> m7_84  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_488 -> m7_489  [key=0, style=solid];
m7_489 -> m7_36  [key=2, style=dotted];
m7_489 -> m7_490  [key=0, style=solid];
m7_489 -> m7_491  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_490 -> m7_488  [key=0, style=bold, color=blue];
m7_165 -> m7_166  [key=0, style=solid];
m7_165 -> m7_21  [key=2, style=dotted];
m7_80 -> m7_81  [key=0, style=solid, color=green];
m7_80 -> m7_36  [key=2, style=dotted, color=green];
m7_80 -> m7_82  [key=1, style=dashed, color=green, label="lambda expression"];
m7_546 -> m7_548  [key=1, style=dashed, color=darkseagreen4, label="System.Action<SqlConnection>"];
m7_546 -> m7_547  [key=0, style=solid];
m7_548 -> m7_550  [key=2, style=dotted];
m7_548 -> m7_549  [key=0, style=solid];
m7_547 -> m7_31  [key=2, style=dotted];
m7_547 -> m7_548  [key=0, style=solid];
m7_549 -> m7_546  [key=0, style=bold, color=blue];
m7_514 -> m7_515  [key=0, style=solid];
m7_515 -> m7_36  [key=2, style=dotted];
m7_515 -> m7_516  [key=0, style=solid];
m7_515 -> m7_517  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_516 -> m7_514  [key=0, style=bold, color=blue];
m7_20 -> m7_16  [key=0, style=bold, color=blue];
m7_450 -> m7_451  [key=0, style=solid];
m7_451 -> m7_36  [key=2, style=dotted];
m7_451 -> m7_452  [key=0, style=solid];
m7_451 -> m7_453  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_452 -> m7_450  [key=0, style=bold, color=blue];
m7_556 -> m7_80  [key=1, style=dashed, color=green, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_121  [key=1, style=dashed, color=green, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_16  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_21  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_34  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_40  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_43  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_62  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_67  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_68  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_70  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_89  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_90  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_93  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_129  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_130  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_154  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_160  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_161  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_181  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_184  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_195  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_198  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_213  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_216  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_225  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_228  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_239  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_242  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_256  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_259  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_268  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_271  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_282  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_285  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_294  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_297  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_306  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_309  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_320  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_323  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_332  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_335  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_345  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_348  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_357  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_360  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_369  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_372  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_382  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_385  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_394  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_397  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_408  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_411  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_420  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_423  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_432  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_435  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_451  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_454  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_465  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_468  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_477  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_480  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_489  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_492  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_501  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_504  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_508  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_515  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_518  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_522  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_528  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_531  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_556 -> m7_551  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m7_564 -> m7_124  [key=1, style=dashed, color=green, label=arrangeSql];
m7_565 -> m7_150  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m7_566 -> m7_150  [key=1, style=dashed, color=darkseagreen4, label=state];
m7_567 -> m7_508  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_568 -> m7_522  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_561 -> m7_83  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_561 -> m7_84  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_557 -> m7_38  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_557 -> m7_39  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_559 -> m7_65  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_559 -> m7_66  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_562 -> m7_116  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m7_563 -> m7_116  [key=1, style=dashed, color=darkseagreen4, label=state];
m7_558 -> m7_56  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m7_560 -> m7_75  [key=1, style=dashed, color=darkseagreen4, label=jobId];
}
