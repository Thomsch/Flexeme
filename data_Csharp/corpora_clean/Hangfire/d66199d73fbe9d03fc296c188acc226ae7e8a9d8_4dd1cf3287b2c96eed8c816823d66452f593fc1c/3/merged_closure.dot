digraph  {
d21 [cluster="HangFire.BackgroundJobServer.Start()", color=green, community=0, label="Logger.InfoFormat(''Using job storage: '{0}'.'', _storage)", prediction=0, span="63-63"];
d84 [label="HangFire.BackgroundJobServer", span=""];
d20 [cluster="HangFire.BackgroundJobServer.Start()", label="Logger.Info(''Starting HangFire Server...'')", span="62-62"];
d22 [cluster="HangFire.BackgroundJobServer.Start()", color=green, community=0, label="_storage.WriteOptionsToLog(Logger)", prediction=0, span="65-65"];
d27 [cluster="Unk.InfoFormat", label="Entry Unk.InfoFormat", span=""];
d23 [cluster="HangFire.BackgroundJobServer.Start()", color=green, community=0, label="_options.WriteToLog(Logger)", prediction=0, span="66-66"];
d28 [cluster="HangFire.JobStorage.WriteOptionsToLog(ILog)", label="Entry HangFire.JobStorage.WriteOptionsToLog(ILog)", span="68-68"];
d24 [cluster="HangFire.BackgroundJobServer.Start()", label="_serverRunner.Start()", span="68-68"];
d29 [cluster="HangFire.BackgroundJobServerOptions.WriteToLog(ILog)", label="Entry HangFire.BackgroundJobServerOptions.WriteToLog(ILog)", span="59-59"];
d62 [cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()", color=green, community=0, label="yield return new ServerComponentRunner(new WorkerManager(sharedWorkerContext, _options.WorkerCount));", prediction=0, span="125-125"];
d56 [cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()", label="Entry HangFire.BackgroundJobServer.GetCommonComponentRunners()", span="114-114"];
d61 [cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()", label="var sharedWorkerContext = new SharedWorkerContext(\r\n                _serverId,\r\n                _options.Queues,\r\n                _storage,\r\n                new JobPerformanceProcess(),\r\n                JobActivator.Current,\r\n                stateMachineFactory)", span="117-123"];
d63 [cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()", label="yield return new ServerComponentRunner(new ServerHeartbeat(_storage, _serverId));", span="126-126"];
d70 [cluster="HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent)", label="Entry HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent)", span="36-36"];
d71 [cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", label="Entry HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", span="29-29"];
d9 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", label="_options = options", span="51-51"];
d10 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", label="_storage = storage", span="52-52"];
d11 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", label="_serverId = String.Format(''{0}:{1}'', _options.ServerName.ToLowerInvariant(), Process.GetCurrentProcess().Id)", span="54-54"];
d12 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", label="_serverRunner = GetServerRunner()", span="57-57"];
d32 [cluster="HangFire.BackgroundJobServer.Stop()", label="_serverRunner.Stop()", span="73-73"];
d36 [cluster="HangFire.BackgroundJobServer.Dispose()", label="_serverRunner.Dispose()", span="78-78"];
d40 [cluster="HangFire.BackgroundJobServer.GetServerRunner()", label="var context = new ServerContext\r\n            {\r\n                Queues = _options.Queues,\r\n                WorkerCount = _options.WorkerCount\r\n            }", span="84-88"];
d41 [cluster="HangFire.BackgroundJobServer.GetServerRunner()", label="var server = new ServerCore(\r\n                _serverId, \r\n                context, \r\n                _storage, \r\n                new Lazy<IServerComponentRunner>(GetServerComponentsRunner))", span="90-94"];
d42 [cluster="HangFire.BackgroundJobServer.GetServerRunner()", label="return new ServerComponentRunner(\r\n                server, \r\n                new ServerComponentRunnerOptions\r\n                {\r\n                    ShutdownTimeout = _options.ShutdownTimeout\r\n                });", span="96-101"];
d51 [cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", label="componentRunners.AddRange(GetCommonComponentRunners())", span="108-108"];
d52 [cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", label="componentRunners.AddRange(GetStorageComponentRunners())", span="109-109"];
d60 [cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()", label="var stateMachineFactory = new StateMachineFactory(_storage)", span="116-116"];
d64 [cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()", label="yield return new ServerComponentRunner(new ServerWatchdog(_storage));", span="127-127"];
d65 [cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()", label="yield return new ServerComponentRunner(\r\n                new SchedulePoller(_storage, stateMachineFactory, _options.SchedulePollingInterval));", span="129-130"];
d75 [cluster="HangFire.BackgroundJobServer.GetStorageComponentRunners()", label="var components = _storage.GetComponents()", span="135-135"];
d19 [cluster="HangFire.BackgroundJobServer.Start()", label="Entry HangFire.BackgroundJobServer.Start()", span="60-60"];
d26 [cluster="Unk.Info", label="Entry Unk.Info", span=""];
d25 [cluster="HangFire.BackgroundJobServer.Start()", label="Exit HangFire.BackgroundJobServer.Start()", span="60-60"];
d30 [cluster="HangFire.Server.IServerComponentRunner.Start()", label="Entry HangFire.Server.IServerComponentRunner.Start()", span="22-22"];
d66 [cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()", label="Exit HangFire.BackgroundJobServer.GetCommonComponentRunners()", span="114-114"];
d68 [cluster="HangFire.Server.SharedWorkerContext.SharedWorkerContext(string, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.JobActivator, HangFire.States.IStateMachineFactory)", label="Entry HangFire.Server.SharedWorkerContext.SharedWorkerContext(string, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.JobActivator, HangFire.States.IStateMachineFactory)", span="23-23"];
d69 [cluster="HangFire.Server.JobPerformanceProcess.JobPerformanceProcess()", label="Entry HangFire.Server.JobPerformanceProcess.JobPerformanceProcess()", span="28-28"];
d72 [cluster="HangFire.Server.ServerHeartbeat.ServerHeartbeat(HangFire.JobStorage, string)", label="Entry HangFire.Server.ServerHeartbeat.ServerHeartbeat(HangFire.JobStorage, string)", span="28-28"];
d82 [cluster="lambda expression", label="new ServerComponentRunner(component)", span="138-138"];
d4 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", label="Entry HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", span="46-46"];
d7 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", label="storage == null", span="49-49"];
d15 [cluster="string.ToLowerInvariant()", label="Entry string.ToLowerInvariant()", span="0-0"];
d16 [cluster="System.Diagnostics.Process.GetCurrentProcess()", label="Entry System.Diagnostics.Process.GetCurrentProcess()", span="0-0"];
d17 [cluster="string.Format(string, object, object)", label="Entry string.Format(string, object, object)", span="0-0"];
d13 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", label="Exit HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", span="46-46"];
d18 [cluster="HangFire.BackgroundJobServer.GetServerRunner()", label="Entry HangFire.BackgroundJobServer.GetServerRunner()", span="82-82"];
d31 [cluster="HangFire.BackgroundJobServer.Stop()", label="Entry HangFire.BackgroundJobServer.Stop()", span="71-71"];
d33 [cluster="HangFire.BackgroundJobServer.Stop()", label="Exit HangFire.BackgroundJobServer.Stop()", span="71-71"];
d34 [cluster="HangFire.Server.IServerComponentRunner.Stop()", label="Entry HangFire.Server.IServerComponentRunner.Stop()", span="23-23"];
d35 [cluster="HangFire.BackgroundJobServer.Dispose()", label="Entry HangFire.BackgroundJobServer.Dispose()", span="76-76"];
d37 [cluster="HangFire.BackgroundJobServer.Dispose()", label="Logger.Info(''HangFire Server stopped.'')", span="79-79"];
d39 [cluster="System.IDisposable.Dispose()", label="Entry System.IDisposable.Dispose()", span="0-0"];
d44 [cluster="HangFire.Server.ServerContext.ServerContext()", label="Entry HangFire.Server.ServerContext.ServerContext()", span="18-18"];
d45 [cluster="HangFire.Server.ServerCore.ServerCore(string, HangFire.Server.ServerContext, HangFire.JobStorage, System.Lazy<HangFire.Server.IServerComponentRunner>)", label="Entry HangFire.Server.ServerCore.ServerCore(string, HangFire.Server.ServerContext, HangFire.JobStorage, System.Lazy<HangFire.Server.IServerComponentRunner>)", span="31-31"];
d46 [cluster="System.Lazy<T>.Lazy(System.Func<T>)", label="Entry System.Lazy<T>.Lazy(System.Func<T>)", span="0-0"];
d43 [cluster="HangFire.BackgroundJobServer.GetServerRunner()", label="Exit HangFire.BackgroundJobServer.GetServerRunner()", span="82-82"];
d47 [cluster="HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent, HangFire.Server.ServerComponentRunnerOptions)", label="Entry HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent, HangFire.Server.ServerComponentRunnerOptions)", span="41-41"];
d48 [cluster="HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", label="Entry HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", span="24-24"];
d50 [cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", label="var componentRunners = new List<IServerComponentRunner>()", span="106-106"];
d57 [cluster="System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", label="Entry System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", span="0-0"];
d53 [cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", label="return new ServerComponentRunnerCollection(componentRunners);", span="111-111"];
d58 [cluster="HangFire.BackgroundJobServer.GetStorageComponentRunners()", label="Entry HangFire.BackgroundJobServer.GetStorageComponentRunners()", span="133-133"];
d67 [cluster="HangFire.States.StateMachineFactory.StateMachineFactory(HangFire.JobStorage)", label="Entry HangFire.States.StateMachineFactory.StateMachineFactory(HangFire.JobStorage)", span="16-16"];
d73 [cluster="HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", label="Entry HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", span="29-29"];
d74 [cluster="HangFire.Server.SchedulePoller.SchedulePoller(HangFire.JobStorage, HangFire.States.IStateMachineFactory, System.TimeSpan)", label="Entry HangFire.Server.SchedulePoller.SchedulePoller(HangFire.JobStorage, HangFire.States.IStateMachineFactory, System.TimeSpan)", span="34-34"];
d76 [cluster="HangFire.BackgroundJobServer.GetStorageComponentRunners()", label="return components\r\n                .Select(component => new ServerComponentRunner(component))\r\n                .ToArray();", span="137-139"];
d78 [cluster="HangFire.JobStorage.GetComponents()", label="Entry HangFire.JobStorage.GetComponents()", span="58-58"];
d81 [cluster="lambda expression", label="Entry lambda expression", span="138-138"];
d83 [cluster="lambda expression", label="Exit lambda expression", span="138-138"];
d5 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", label="options == null", span="48-48"];
d8 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", label="throw new ArgumentNullException(''storage'');", span="49-49"];
d6 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", label="throw new ArgumentNullException(''options'');", span="48-48"];
d38 [cluster="HangFire.BackgroundJobServer.Dispose()", label="Exit HangFire.BackgroundJobServer.Dispose()", span="76-76"];
d49 [cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", label="Entry HangFire.BackgroundJobServer.GetServerComponentsRunner()", span="104-104"];
d55 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
d54 [cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", label="Exit HangFire.BackgroundJobServer.GetServerComponentsRunner()", span="104-104"];
d59 [cluster="HangFire.Server.ServerComponentRunnerCollection.ServerComponentRunnerCollection(System.Collections.Generic.IEnumerable<HangFire.Server.IServerComponentRunner>)", label="Entry HangFire.Server.ServerComponentRunnerCollection.ServerComponentRunnerCollection(System.Collections.Generic.IEnumerable<HangFire.Server.IServerComponentRunner>)", span="26-26"];
d77 [cluster="HangFire.BackgroundJobServer.GetStorageComponentRunners()", label="Exit HangFire.BackgroundJobServer.GetStorageComponentRunners()", span="133-133"];
d79 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
d80 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
d14 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m0_12 [cluster="HangFire.Web.RazorPage.Write(object)", file="BackgroundJobServerFacts.cs", label="Entry HangFire.Web.RazorPage.Write(object)", span="60-60"];
m0_10 [cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="BackgroundJobServerFacts.cs", label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="53-53"];
m0_14 [cluster="HangFire.Web.HtmlHelper.MarkupStackTrace(string)", file="BackgroundJobServerFacts.cs", label="Entry HangFire.Web.HtmlHelper.MarkupStackTrace(string)", span="54-54"];
m0_13 [cluster="System.Exception.ToString()", file="BackgroundJobServerFacts.cs", label="Entry System.Exception.ToString()", span="0-0"];
m0_11 [cluster="HttpRequestBase.LinkTo(string)", file="BackgroundJobServerFacts.cs", label="Entry HttpRequestBase.LinkTo(string)", span="8-8"];
m0_0 [cluster="HangFire.Web.Pages.ErrorPage.Execute()", file="BackgroundJobServerFacts.cs", label="Entry HangFire.Web.Pages.ErrorPage.Execute()", span="34-34"];
m0_1 [cluster="HangFire.Web.Pages.ErrorPage.Execute()", file="BackgroundJobServerFacts.cs", label="WriteLiteral(''\r\n'')", span="38-38"];
m0_2 [cluster="HangFire.Web.Pages.ErrorPage.Execute()", file="BackgroundJobServerFacts.cs", label="WriteLiteral(''<!DOCTYPE html>\r\n\r\n<html lang=\''ru\''>\r\n<head>\r\n    <title>Error - HangFire</title>\r'' +\r\n''\n    <meta charset=\''utf-8\'' />\r\n    <meta name=\''viewport\'' content=\''width=device-w'' +\r\n''idth, initial-scale=1.0\''>\r\n    <link rel=\''stylesheet\'' href=\'''')", span="43-45"];
m0_3 [cluster="HangFire.Web.Pages.ErrorPage.Execute()", file="BackgroundJobServerFacts.cs", label="Write(Request.LinkTo(''/css/styles.css''))", span="50-50"];
m0_4 [cluster="HangFire.Web.Pages.ErrorPage.Execute()", file="BackgroundJobServerFacts.cs", label="WriteLiteral(''\'' />\r\n</head>\r\n<body>\r\n    <div class=\''container\''>\r\n        <div class=\''jumbotron'' +\r\n''\'' style=\''margin-top: 40px;\''>\r\n\r\n            <h1>HangFire <small>An exception occ'' +\r\n''ured</small></h1>\r\n            <p class=\''lead\''>'')", span="55-57"];
m0_5 [cluster="HangFire.Web.Pages.ErrorPage.Execute()", file="BackgroundJobServerFacts.cs", label="Write(Exception.Message)", span="62-62"];
m0_6 [cluster="HangFire.Web.Pages.ErrorPage.Execute()", file="BackgroundJobServerFacts.cs", label="WriteLiteral(''</p>\r\n\r\n            <pre>'')", span="67-67"];
m0_7 [cluster="HangFire.Web.Pages.ErrorPage.Execute()", file="BackgroundJobServerFacts.cs", label="Write(HtmlHelper.MarkupStackTrace(Exception.ToString()))", span="72-72"];
m0_8 [cluster="HangFire.Web.Pages.ErrorPage.Execute()", file="BackgroundJobServerFacts.cs", label="WriteLiteral(''</pre>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\r\n'')", span="77-77"];
m0_9 [cluster="HangFire.Web.Pages.ErrorPage.Execute()", file="BackgroundJobServerFacts.cs", label="Exit HangFire.Web.Pages.ErrorPage.Execute()", span="34-34"];
m0_15 [cluster="Unk.Write", file="BackgroundJobServerFacts.cs", label="Entry Unk.Write", span=""];
m0_16 [file="BackgroundJobServerFacts.cs", label="HangFire.Web.Pages.ErrorPage", span=""];
m1_12 [cluster="HangFire.BackgroundJobServerOptions.WriteToLog(ILog)", color=green, community=0, file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''    Shutdown timeout: {0}.'', ShutdownTimeout)", prediction=4, span="64-64"];
m1_24 [cluster="HangFire.JobDispatcherPool.NotifyCompleted(string, System.Exception)", file="BackgroundJobServerOptions.cs", label="Entry HangFire.JobDispatcherPool.NotifyCompleted(string, System.Exception)", span="37-37"];
m1_25 [cluster="HangFire.JobDispatcherPool.NotifyCompleted(string, System.Exception)", file="BackgroundJobServerOptions.cs", label="var onJobCompleted = JobCompleted", span="39-39"];
m1_27 [cluster="HangFire.JobDispatcherPool.NotifyCompleted(string, System.Exception)", file="BackgroundJobServerOptions.cs", label="onJobCompleted(this, new Tuple<string, Exception>(job, ex))", span="42-42"];
m1_26 [cluster="HangFire.JobDispatcherPool.NotifyCompleted(string, System.Exception)", file="BackgroundJobServerOptions.cs", label="onJobCompleted != null", span="40-40"];
m1_28 [cluster="HangFire.JobDispatcherPool.NotifyCompleted(string, System.Exception)", file="BackgroundJobServerOptions.cs", label="Exit HangFire.JobDispatcherPool.NotifyCompleted(string, System.Exception)", span="37-37"];
m1_14 [cluster="HangFire.BackgroundJobServerOptions.WriteToLog(ILog)", file="BackgroundJobServerOptions.cs", label="Exit HangFire.BackgroundJobServerOptions.WriteToLog(ILog)", span="59-59"];
m1_15 [cluster="HangFire.JobDispatcherPool.Process(string)", file="BackgroundJobServerOptions.cs", label="var freeDispatcher = _freeDispatchers.Take()", span="28-28"];
m1_16 [cluster="Unk.Select", file="BackgroundJobServerOptions.cs", label="Entry Unk.Select", span=""];
m1_17 [cluster="Unk.Join", file="BackgroundJobServerOptions.cs", label="Entry Unk.Join", span=""];
m1_30 [cluster="System.EventHandler<TEventArgs>.Invoke(object, TEventArgs)", file="BackgroundJobServerOptions.cs", label="Entry System.EventHandler<TEventArgs>.Invoke(object, TEventArgs)", span="0-0"];
m1_0 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Entry HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="13-13"];
m1_1 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="WorkerCount = Environment.ProcessorCount * 5", span="15-15"];
m1_4 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="ShutdownTimeout = TimeSpan.FromSeconds(15)", span="18-18"];
m1_2 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="ServerName = Environment.MachineName", span="16-16"];
m1_3 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Queues = new[] { EnqueuedState.DefaultQueue }", span="17-17"];
m1_7 [cluster="System.TimeSpan.FromSeconds(double)", file="BackgroundJobServerOptions.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m1_5 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="SchedulePollingInterval = TimeSpan.FromSeconds(15)", span="19-19"];
m1_6 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Exit HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="13-13"];
m1_8 [cluster="HangFire.BackgroundJobServerOptions.WriteToLog(ILog)", file="BackgroundJobServerOptions.cs", label="Entry HangFire.BackgroundJobServerOptions.WriteToLog(ILog)", span="59-59"];
m1_11 [cluster="HangFire.BackgroundJobServerOptions.WriteToLog(ILog)", color=green, community=0, file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''    Listening queues: {0}.'', String.Join('', '', Queues.Select(x => ''''' + x + ''''')))", prediction=4, span="63-63"];
m1_9 [cluster="System.Collections.Generic.List<T>.List(int)", color=green, community=0, file="BackgroundJobServerOptions.cs", label="Entry System.Collections.Generic.List<T>.List(int)", prediction=6, span="0-0"];
m1_10 [cluster="System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection<T>)", color=green, community=0, file="BackgroundJobServerOptions.cs", label="Entry System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection<T>)", prediction=4, span="0-0"];
m1_13 [cluster="System.Collections.Generic.List<T>.Add(T)", color=green, community=0, file="BackgroundJobServerOptions.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", prediction=4, span="0-0"];
m1_20 [cluster="lambda expression", file="BackgroundJobServerOptions.cs", label="Exit lambda expression", span="63-63"];
m1_21 [cluster="HangFire.JobDispatcherPool.NotifyReady(HangFire.JobDispatcher)", file="BackgroundJobServerOptions.cs", label="HangFire.BackgroundJobServerOptions", span=""];
m1_22 [cluster="HangFire.JobDispatcherPool.NotifyReady(HangFire.JobDispatcher)", file="BackgroundJobServerOptions.cs", label="Exit HangFire.JobDispatcherPool.NotifyReady(HangFire.JobDispatcher)", span="32-32"];
m1_29 [cluster="System.Tuple<T1, T2>.Tuple(T1, T2)", file="BackgroundJobServerOptions.cs", label="Entry System.Tuple<T1, T2>.Tuple(T1, T2)", span="0-0"];
m1_23 [cluster="System.Collections.Concurrent.BlockingCollection<T>.Add(T)", file="BackgroundJobServerOptions.cs", label="Entry System.Collections.Concurrent.BlockingCollection<T>.Add(T)", span="0-0"];
m1_18 [cluster="System.Collections.Concurrent.BlockingCollection<T>.Take()", file="BackgroundJobServerOptions.cs", label="Entry System.Collections.Concurrent.BlockingCollection<T>.Take()", span="0-0"];
m1_19 [cluster="HangFire.JobDispatcher.Process(string)", color=green, community=0, file="BackgroundJobServerOptions.cs", label="Entry HangFire.JobDispatcher.Process(string)", prediction=9, span="26-26"];
m1_31 [file="BackgroundJobServerOptions.cs", label="HangFire.JobDispatcherPool", span=""];
m2_5 [cluster="HangFire.JobStorage.GetComponents()", file="JobStorage.cs", label="return Enumerable.Empty<IServerComponent>();", span="59-59"];
m2_6 [cluster="HangFire.JobStorage.GetComponents()", file="JobStorage.cs", label="Exit HangFire.JobStorage.GetComponents()", span="57-57"];
m2_0 [cluster="HangFire.JobStorage.GetMonitoringApi()", file="JobStorage.cs", label="Entry HangFire.JobStorage.GetMonitoringApi()", span="53-53"];
m2_1 [cluster="HangFire.JobStorage.GetMonitoringApi()", file="JobStorage.cs", label="Exit HangFire.JobStorage.GetMonitoringApi()", span="53-53"];
m2_8 [cluster="HangFire.JobStorage.GetStateHandlers()", file="JobStorage.cs", label="Entry HangFire.JobStorage.GetStateHandlers()", span="62-62"];
m2_9 [cluster="HangFire.JobStorage.GetStateHandlers()", file="JobStorage.cs", label="return Enumerable.Empty<IStateHandler>();", span="64-64"];
m2_10 [cluster="HangFire.JobStorage.GetStateHandlers()", file="JobStorage.cs", label="Exit HangFire.JobStorage.GetStateHandlers()", span="62-62"];
m2_7 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="JobStorage.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m2_2 [cluster="HangFire.JobStorage.GetConnection()", file="JobStorage.cs", label="Entry HangFire.JobStorage.GetConnection()", span="55-55"];
m2_3 [cluster="HangFire.JobStorage.GetConnection()", file="JobStorage.cs", label="Exit HangFire.JobStorage.GetConnection()", span="55-55"];
m3_59 [cluster="System.Threading.Thread.Join()", file="RedisStorage.cs", label="Entry System.Threading.Thread.Join()", span="0-0"];
m3_38 [cluster="HangFire.States.FailedState.FailedState(string, System.Exception)", file="RedisStorage.cs", label="Entry HangFire.States.FailedState.FailedState(string, System.Exception)", span="10-10"];
m3_20 [cluster="HangFire.Server.SchedulePoller.Dispose()", file="RedisStorage.cs", label="Entry HangFire.Server.SchedulePoller.Dispose()", span="47-47"];
m3_21 [cluster="HangFire.Server.SchedulePoller.Dispose()", file="RedisStorage.cs", label="_redis.Dispose()", span="49-49"];
m3_22 [cluster="HangFire.Server.SchedulePoller.Dispose()", file="RedisStorage.cs", label="Exit HangFire.Server.SchedulePoller.Dispose()", span="47-47"];
m3_42 [cluster="HangFire.Server.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", file="RedisStorage.cs", label="Entry HangFire.Server.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", span="73-73"];
m3_43 [cluster="HangFire.Server.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", file="RedisStorage.cs", label=true, span="77-77"];
m3_44 [cluster="HangFire.Server.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", file="RedisStorage.cs", label="var wasEnqueued = EnqueueNextScheduledJob()", span="79-79"];
m3_47 [cluster="HangFire.Server.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", file="RedisStorage.cs", label=Exception, span="90-90"];
m3_45 [cluster="HangFire.Server.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", file="RedisStorage.cs", label="wasEnqueued && !_cts.IsCancellationRequested", span="81-81"];
m3_46 [cluster="HangFire.Server.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", file="RedisStorage.cs", label="_stopped.WaitOne(_pollInterval)", span="84-84"];
m3_48 [cluster="HangFire.Server.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", file="RedisStorage.cs", label="_logger.Fatal(\r\n                    ''Scheduled jobs will not be added to their queues by this server instance: ''\r\n                    + ''unexpected exception caught in the SchedulePoller thread.'',\r\n                    ex)", span="92-95"];
m3_49 [cluster="HangFire.Server.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", file="RedisStorage.cs", label="Exit HangFire.Server.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", span="73-73"];
m3_41 [cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", file="RedisStorage.cs", label="Entry HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", span="57-57"];
m3_19 [cluster="Unk.EnqueueScheduledJob", file="RedisStorage.cs", label="Entry Unk.EnqueueScheduledJob", span=""];
m3_33 [cluster="string.Format(string, object)", file="RedisStorage.cs", label="Entry string.Format(string, object)", span="0-0"];
m3_24 [cluster="HangFire.Server.SchedulePoller.EnqueueScheduledJob(string)", file="RedisStorage.cs", label="Entry HangFire.Server.SchedulePoller.EnqueueScheduledJob(string)", span="52-52"];
m3_25 [cluster="HangFire.Server.SchedulePoller.EnqueueScheduledJob(string)", file="RedisStorage.cs", label="var jobType = _redis.GetValueFromHash(String.Format(''hangfire:job:{0}'', jobId), ''Type'')", span="54-54"];
m3_31 [cluster="HangFire.Server.SchedulePoller.EnqueueScheduledJob(string)", file="RedisStorage.cs", label="_stateMachine.ChangeState(jobId, state, ScheduledState.Name)", span="69-69"];
m3_26 [cluster="HangFire.Server.SchedulePoller.EnqueueScheduledJob(string)", file="RedisStorage.cs", label="var queue = JobHelper.TryToGetQueue(jobType)", span="55-55"];
m3_30 [cluster="HangFire.Server.SchedulePoller.EnqueueScheduledJob(string)", file="RedisStorage.cs", label="state = new FailedState(''Could not enqueue the schedule job.'',\r\n                    new InvalidOperationException(String.Format(''Could not find the type '{0}'.'', jobType)))", span="65-66"];
m3_27 [cluster="HangFire.Server.SchedulePoller.EnqueueScheduledJob(string)", file="RedisStorage.cs", label="JobState state", span="57-57"];
m3_28 [cluster="HangFire.Server.SchedulePoller.EnqueueScheduledJob(string)", file="RedisStorage.cs", label="!String.IsNullOrEmpty(queue)", span="59-59"];
m3_29 [cluster="HangFire.Server.SchedulePoller.EnqueueScheduledJob(string)", file="RedisStorage.cs", label="state = new EnqueuedState(''Enqueued by schedule poller.'', queue)", span="61-61"];
m3_32 [cluster="HangFire.Server.SchedulePoller.EnqueueScheduledJob(string)", file="RedisStorage.cs", label="Exit HangFire.Server.SchedulePoller.EnqueueScheduledJob(string)", span="52-52"];
m3_6 [cluster="HangFire.States.StateMachine.StateMachine(IRedisClient)", file="RedisStorage.cs", label="Entry HangFire.States.StateMachine.StateMachine(IRedisClient)", span="31-31"];
m3_0 [cluster="HangFire.Server.SchedulePoller.SchedulePoller(IRedisClientsManager, System.TimeSpan)", file="RedisStorage.cs", label="Entry HangFire.Server.SchedulePoller.SchedulePoller(IRedisClientsManager, System.TimeSpan)", span="21-21"];
m3_1 [cluster="HangFire.Server.SchedulePoller.SchedulePoller(IRedisClientsManager, System.TimeSpan)", file="RedisStorage.cs", label="_redis = redisManager.GetClient()", span="23-23"];
m3_3 [cluster="HangFire.Server.SchedulePoller.SchedulePoller(IRedisClientsManager, System.TimeSpan)", file="RedisStorage.cs", label="_pollInterval = pollInterval", span="26-26"];
m3_2 [cluster="HangFire.Server.SchedulePoller.SchedulePoller(IRedisClientsManager, System.TimeSpan)", file="RedisStorage.cs", label="_stateMachine = new StateMachine(_redis)", span="24-24"];
m3_4 [cluster="HangFire.Server.SchedulePoller.SchedulePoller(IRedisClientsManager, System.TimeSpan)", file="RedisStorage.cs", label="Exit HangFire.Server.SchedulePoller.SchedulePoller(IRedisClientsManager, System.TimeSpan)", span="21-21"];
m3_57 [cluster="System.Threading.CancellationTokenSource.Cancel()", file="RedisStorage.cs", label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0"];
m3_15 [cluster="HangFire.JobHelper.ToTimestamp(System.DateTime)", file="RedisStorage.cs", label="Entry HangFire.JobHelper.ToTimestamp(System.DateTime)", span="52-52"];
m3_35 [cluster="Unk.TryToGetQueue", file="RedisStorage.cs", label="Entry Unk.TryToGetQueue", span=""];
m3_58 [cluster="System.Threading.EventWaitHandle.Set()", file="RedisStorage.cs", label="Entry System.Threading.EventWaitHandle.Set()", span="0-0"];
m3_37 [cluster="HangFire.States.EnqueuedState.EnqueuedState(string, string)", file="RedisStorage.cs", label="Entry HangFire.States.EnqueuedState.EnqueuedState(string, string)", span="10-10"];
m3_39 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="RedisStorage.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m3_5 [cluster="Unk.GetClient", file="RedisStorage.cs", label="Entry Unk.GetClient", span=""];
m3_36 [cluster="string.IsNullOrEmpty(string)", file="RedisStorage.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m3_23 [cluster="Unk.Dispose", file="RedisStorage.cs", label="Entry Unk.Dispose", span=""];
m3_52 [cluster="HangFire.Server.SchedulePoller.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="RedisStorage.cs", label="Entry HangFire.Server.SchedulePoller.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", span="99-99"];
m3_53 [cluster="HangFire.Server.SchedulePoller.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="RedisStorage.cs", label="_cts.Cancel()", span="101-101"];
m3_55 [cluster="HangFire.Server.SchedulePoller.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="RedisStorage.cs", label="thread.Join()", span="103-103"];
m3_54 [cluster="HangFire.Server.SchedulePoller.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="RedisStorage.cs", label="_stopped.Set()", span="102-102"];
m3_56 [cluster="HangFire.Server.SchedulePoller.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="RedisStorage.cs", label="Exit HangFire.Server.SchedulePoller.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", span="99-99"];
m3_51 [cluster="Unk.Fatal", file="RedisStorage.cs", label="Entry Unk.Fatal", span=""];
m3_17 [cluster="Unk.FirstOrDefault", file="RedisStorage.cs", label="Entry Unk.FirstOrDefault", span=""];
m3_34 [cluster="Unk.GetValueFromHash", file="RedisStorage.cs", label="Entry Unk.GetValueFromHash", span=""];
m3_50 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="RedisStorage.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m3_18 [cluster="Unk.IsNullOrEmpty", file="RedisStorage.cs", label="Entry Unk.IsNullOrEmpty", span=""];
m3_40 [cluster="Unk.Format", file="RedisStorage.cs", label="Entry Unk.Format", span=""];
m3_16 [cluster="Unk.GetRangeFromSortedSetByLowestScore", file="RedisStorage.cs", label="Entry Unk.GetRangeFromSortedSetByLowestScore", span=""];
m3_7 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="RedisStorage.cs", label="Entry HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", span="29-29"];
m3_8 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="RedisStorage.cs", label="var timestamp = JobHelper.ToTimestamp(DateTime.UtcNow)", span="31-31"];
m3_9 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="RedisStorage.cs", label="var jobId = _redis\r\n                .GetRangeFromSortedSetByLowestScore(\r\n                    ''hangfire:schedule'', Double.NegativeInfinity, timestamp, 0, 1)\r\n                .FirstOrDefault()", span="33-36"];
m3_10 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="RedisStorage.cs", label="String.IsNullOrEmpty(jobId)", span="38-38"];
m3_12 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="RedisStorage.cs", label="EnqueueScheduledJob(jobId)", span="43-43"];
m3_11 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="RedisStorage.cs", label="return false;", span="40-40"];
m3_13 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="RedisStorage.cs", label="return true;", span="44-44"];
m3_14 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="RedisStorage.cs", label="Exit HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", span="29-29"];
m3_60 [file="RedisStorage.cs", label="HangFire.Server.SchedulePoller", span=""];
m5_1 [cluster="HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", file="ServerComponentRunnerOptions.cs", label="MaxRetryAttempts = 10", span="26-26"];
m5_2 [cluster="HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", file="ServerComponentRunnerOptions.cs", label="ShutdownTimeout = TimeSpan.FromSeconds(5)", span="27-27"];
m5_3 [cluster="HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", color=green, community=0, file="ServerComponentRunnerOptions.cs", label="Exit HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", prediction=10, span="24-24"];
m5_4 [cluster="System.TimeSpan.FromSeconds(double)", file="ServerComponentRunnerOptions.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m5_5 [file="ServerComponentRunnerOptions.cs", label="HangFire.Server.ServerComponentRunnerOptions", span=""];
m6_434 [cluster="Mock<T>.cstr", file="SqlServerConnection.cs", label="Entry Mock<T>.cstr", span=""];
m6_31 [cluster="Hangfire.Server.DefaultJobPerformanceProcess.DefaultJobPerformanceProcess(Hangfire.JobActivator)", file="SqlServerConnection.cs", label="Entry Hangfire.Server.DefaultJobPerformanceProcess.DefaultJobPerformanceProcess(Hangfire.JobActivator)", span="36-36"];
m6_10 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob.Dispose()", file="SqlServerConnection.cs", label="Disposed = true", span="204-204"];
m6_81 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ReturnsValueReturnedByJob()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ReturnsValueReturnedByJob()", span="97-97"];
m6_82 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ReturnsValueReturnedByJob()", file="SqlServerConnection.cs", label="var filter = CreateFilter<IServerFilter>()", span="100-100"];
m6_83 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ReturnsValueReturnedByJob()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="101-101"];
m6_84 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ReturnsValueReturnedByJob()", file="SqlServerConnection.cs", label="_performer\r\n                .Setup(x => x.Perform(It.IsNotNull<JobActivator>(), It.IsNotNull<IJobCancellationToken>()))\r\n                .Returns(''Returned value'')", span="103-105"];
m6_85 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ReturnsValueReturnedByJob()", file="SqlServerConnection.cs", label="var result = process.Run(_context, _performer.Object)", span="108-108"];
m6_86 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ReturnsValueReturnedByJob()", file="SqlServerConnection.cs", label="Assert.Equal(''Returned value'', result)", span="111-111"];
m6_87 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ReturnsValueReturnedByJob()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ReturnsValueReturnedByJob()", span="97-97"];
m6_27 [cluster="Unk.Equal", file="SqlServerConnection.cs", label="Entry Unk.Equal", span=""];
m6_22 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Ctor_ThrowsAnException_WhenActivator_IsNull()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Ctor_ThrowsAnException_WhenActivator_IsNull()", span="35-35"];
m6_23 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Ctor_ThrowsAnException_WhenActivator_IsNull()", file="SqlServerConnection.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new DefaultJobPerformanceProcess(null))", span="37-38"];
m6_24 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Ctor_ThrowsAnException_WhenActivator_IsNull()", file="SqlServerConnection.cs", label="Assert.Equal(''activator'', exception.ParamName)", span="40-40"];
m6_25 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Ctor_ThrowsAnException_WhenActivator_IsNull()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Ctor_ThrowsAnException_WhenActivator_IsNull()", span="35-35"];
m6_11 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob.Dispose()", file="SqlServerConnection.cs", label="Exit HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob.Dispose()", span="202-202"];
m6_37 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateProcess()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateProcess()", span="478-478"];
m6_427 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateProcess()", file="SqlServerConnection.cs", label="return new DefaultJobPerformanceProcess(_activator.Object, _filters);", span="480-480"];
m6_428 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateProcess()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateProcess()", span="478-478"];
m6_149 [cluster="Unk.DoesNotThrow", file="SqlServerConnection.cs", label="Entry Unk.DoesNotThrow", span=""];
m6_41 [cluster="Unk.Run", file="SqlServerConnection.cs", label="Entry Unk.Run", span=""];
m6_386 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ServerFiltersAreNotInvoked_OnOperationCanceledException()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ServerFiltersAreNotInvoked_OnOperationCanceledException()", span="424-424"];
m6_387 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ServerFiltersAreNotInvoked_OnOperationCanceledException()", file="SqlServerConnection.cs", label="_performer\r\n                .Setup(x => x.Perform(It.IsAny<JobActivator>(), It.IsAny<IJobCancellationToken>()))\r\n                .Throws<OperationCanceledException>()", span="427-429"];
m6_388 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ServerFiltersAreNotInvoked_OnOperationCanceledException()", file="SqlServerConnection.cs", label="var filter = CreateFilter<IServerExceptionFilter>()", span="431-431"];
m6_389 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ServerFiltersAreNotInvoked_OnOperationCanceledException()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="432-432"];
m6_390 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ServerFiltersAreNotInvoked_OnOperationCanceledException()", file="SqlServerConnection.cs", label="Assert.Throws<OperationCanceledException>(\r\n                () => process.Run(_context, _performer.Object))", span="435-436"];
m6_391 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ServerFiltersAreNotInvoked_OnOperationCanceledException()", file="SqlServerConnection.cs", label="filter.Verify(\r\n                x => x.OnServerException(It.IsAny<ServerExceptionContext>()),\r\n                Times.Never)", span="439-441"];
m6_392 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ServerFiltersAreNotInvoked_OnOperationCanceledException()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ServerFiltersAreNotInvoked_OnOperationCanceledException()", span="424-424"];
m6_77 [cluster="Unk.OnPerformed", file="SqlServerConnection.cs", label="Entry Unk.OnPerformed", span=""];
m6_271 [cluster="System.InvalidOperationException.InvalidOperationException()", file="SqlServerConnection.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m6_42 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsAnException_WhenPerformPerformerIsNull()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsAnException_WhenPerformPerformerIsNull()", span="55-55"];
m6_43 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsAnException_WhenPerformPerformerIsNull()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="57-57"];
m6_44 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsAnException_WhenPerformPerformerIsNull()", file="SqlServerConnection.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => process.Run(_context, null))", span="59-60"];
m6_45 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsAnException_WhenPerformPerformerIsNull()", file="SqlServerConnection.cs", label="Assert.Equal(''performer'', exception.ParamName)", span="62-62"];
m6_46 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsAnException_WhenPerformPerformerIsNull()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsAnException_WhenPerformPerformerIsNull()", span="55-55"];
m6_180 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", span="214-214"];
m6_181 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerConnection.cs", label="var outerFilter = CreateFilter<IServerFilter>()", span="217-217"];
m6_182 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerConnection.cs", label="var innerFilter = CreateFilter<IServerFilter>()", span="218-218"];
m6_187 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="225-225"];
m6_188 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerConnection.cs", label="process.Run(_context, _performer.Object)", span="228-228"];
m6_183 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerConnection.cs", label="outerFilter.Setup(x => x.OnPerforming(It.IsAny<PerformingContext>())).InSequence()", span="220-220"];
m6_186 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerConnection.cs", label="outerFilter.Setup(x => x.OnPerformed(It.IsAny<PerformedContext>())).InSequence()", span="223-223"];
m6_184 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerConnection.cs", label="innerFilter.Setup(x => x.OnPerforming(It.IsAny<PerformingContext>())).InSequence()", span="221-221"];
m6_185 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerConnection.cs", label="innerFilter.Setup(x => x.OnPerformed(It.IsAny<PerformedContext>())).InSequence()", span="222-222"];
m6_189 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", span="214-214"];
m6_0 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.CorrectJob.Perform()", file="SqlServerConnection.cs", label="Entry HangFire.Tests.UnitTests.JobInvokerTests.CorrectJob.Perform()", span="176-176"];
m6_5 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.ArgumentsJob.Perform(int, string)", file="SqlServerConnection.cs", label="B = b", span="190-190"];
m6_6 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.ArgumentsJob.Perform(int, string)", file="SqlServerConnection.cs", label="Exit HangFire.Tests.UnitTests.JobInvokerTests.ArgumentsJob.Perform(int, string)", span="187-187"];
m6_7 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob.Perform()", file="SqlServerConnection.cs", label="Entry HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob.Perform()", span="198-198"];
m6_8 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob.Perform()", file="SqlServerConnection.cs", label="Exit HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob.Perform()", span="198-198"];
m6_1 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.CorrectJob.Perform()", file="SqlServerConnection.cs", label="Performed = true", span="178-178"];
m6_2 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.CorrectJob.Perform()", file="SqlServerConnection.cs", label="Exit HangFire.Tests.UnitTests.JobInvokerTests.CorrectJob.Perform()", span="176-176"];
m6_3 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.ArgumentsJob.Perform(int, string)", file="SqlServerConnection.cs", label="Entry HangFire.Tests.UnitTests.JobInvokerTests.ArgumentsJob.Perform(int, string)", span="187-187"];
m6_4 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.ArgumentsJob.Perform(int, string)", file="SqlServerConnection.cs", label="A = a", span="189-189"];
m6_9 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob.Dispose()", file="SqlServerConnection.cs", label="Entry HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob.Dispose()", span="202-202"];
m6_119 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", span="150-150"];
m6_120 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerConnection.cs", label="var filter1 = CreateFilter<IServerExceptionFilter>()", span="153-153"];
m6_121 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerConnection.cs", label="var filter2 = CreateFilter<IServerExceptionFilter>()", span="154-154"];
m6_124 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerConnection.cs", label="_performer\r\n                .Setup(x => x.Perform(It.IsNotNull<JobActivator>(), It.IsAny<IJobCancellationToken>()))\r\n                .Throws<InvalidOperationException>()", span="159-161"];
m6_125 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="163-163"];
m6_126 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerConnection.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context, _performer.Object))", span="166-167"];
m6_123 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerConnection.cs", label="filter1.Setup(x => x.OnServerException(It.IsAny<ServerExceptionContext>())).InSequence()", span="157-157"];
m6_122 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerConnection.cs", label="filter2.Setup(x => x.OnServerException(It.IsAny<ServerExceptionContext>())).InSequence()", span="156-156"];
m6_127 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", span="150-150"];
m6_306 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotThrow_HandledExceptions()", span="343-343"];
m6_307 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerConnection.cs", label="var filter = CreateFilter<IServerFilter>()", span="346-346"];
m6_309 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerConnection.cs", label="_performer\r\n                .Setup(x => x.Perform(It.IsNotNull<JobActivator>(), It.IsAny<IJobCancellationToken>()))\r\n                .Throws(exception)", span="349-351"];
m6_311 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="356-356"];
m6_312 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerConnection.cs", label="Assert.DoesNotThrow(() => process.Run(_context, _performer.Object))", span="359-359"];
m6_310 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerConnection.cs", label="filter.Setup(x => x.OnPerformed(It.Is<PerformedContext>(context => context.Exception == exception)))\r\n                .Callback((PerformedContext x) => x.ExceptionHandled = true)", span="353-354"];
m6_308 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerConnection.cs", label="var exception = new InvalidOperationException()", span="348-348"];
m6_313 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotThrow_HandledExceptions()", span="343-343"];
m6_26 [cluster="Unk.>", file="SqlServerConnection.cs", label="Entry Unk.>", span=""];
m6_402 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPreFilterMethods()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPreFilterMethods()", span="445-445"];
m6_403 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPreFilterMethods()", file="SqlServerConnection.cs", label="var filter = CreateFilter<IServerFilter>()", span="448-448"];
m6_405 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPreFilterMethods()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="452-452"];
m6_406 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPreFilterMethods()", file="SqlServerConnection.cs", label="Assert.Throws<OperationCanceledException>(\r\n                () => process.Run(_context, _performer.Object))", span="455-456"];
m6_404 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPreFilterMethods()", file="SqlServerConnection.cs", label="filter.Setup(x => x.OnPerforming(It.IsAny<PerformingContext>()))\r\n                .Throws<OperationCanceledException>()", span="449-450"];
m6_407 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPreFilterMethods()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPreFilterMethods()", span="445-445"];
m6_414 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPostFilterMethods()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPostFilterMethods()", span="460-460"];
m6_415 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPostFilterMethods()", file="SqlServerConnection.cs", label="var filter = CreateFilter<IServerFilter>()", span="463-463"];
m6_417 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPostFilterMethods()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="467-467"];
m6_418 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPostFilterMethods()", file="SqlServerConnection.cs", label="Assert.Throws<OperationCanceledException>(\r\n                () => process.Run(_context, _performer.Object))", span="470-471"];
m6_416 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPostFilterMethods()", file="SqlServerConnection.cs", label="filter.Setup(x => x.OnPerformed(It.IsAny<PerformedContext>()))\r\n                .Throws<OperationCanceledException>()", span="464-465"];
m6_419 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPostFilterMethods()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPostFilterMethods()", span="460-460"];
m6_68 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateFilter<T>()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateFilter<T>()", span="483-483"];
m6_431 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateFilter<T>()", file="SqlServerConnection.cs", label="_filters.Add(filter.Object)", span="487-487"];
m6_430 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateFilter<T>()", file="SqlServerConnection.cs", label="var filter = new Mock<T>()", span="486-486"];
m6_432 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateFilter<T>()", file="SqlServerConnection.cs", label="return filter;", span="489-489"];
m6_433 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateFilter<T>()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateFilter<T>()", span="483-483"];
m6_51 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsPerformStrategy()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsPerformStrategy()", span="66-66"];
m6_52 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsPerformStrategy()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="68-68"];
m6_53 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsPerformStrategy()", file="SqlServerConnection.cs", label="process.Run(_context, _performer.Object)", span="70-70"];
m6_54 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsPerformStrategy()", file="SqlServerConnection.cs", label="_performer.Verify(\r\n                x => x.Perform(It.IsNotNull<JobActivator>(), It.IsNotNull<IJobCancellationToken>()), \r\n                Times.Once)", span="72-74"];
m6_55 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsPerformStrategy()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsPerformStrategy()", span="66-66"];
m6_102 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilter_OnException()", span="130-130"];
m6_103 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerConnection.cs", label="var filter = CreateFilter<IServerExceptionFilter>()", span="133-133"];
m6_104 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerConnection.cs", label="_performer\r\n                .Setup(x => x.Perform(It.IsNotNull<JobActivator>(), It.IsAny<IJobCancellationToken>()))\r\n                .Throws<InvalidOperationException>()", span="135-137"];
m6_105 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="139-139"];
m6_106 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerConnection.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context, _performer.Object))", span="142-143"];
m6_107 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerConnection.cs", label="filter.Verify(x => x.OnServerException(\r\n                It.IsNotNull<ServerExceptionContext>()))", span="145-146"];
m6_108 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilter_OnException()", span="130-130"];
m6_162 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsServerFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsServerFilters_BeforeAndAfterTheCreationOfAJob()", span="191-191"];
m6_163 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsServerFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerConnection.cs", label="var filter = CreateFilter<IServerFilter>()", span="194-194"];
m6_165 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsServerFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerConnection.cs", label="_performer.Setup(x => x.Perform(It.IsNotNull<JobActivator>(), It.IsAny<IJobCancellationToken>()))\r\n                .InSequence()", span="199-200"];
m6_167 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsServerFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="205-205"];
m6_168 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsServerFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerConnection.cs", label="process.Run(_context, _performer.Object)", span="208-208"];
m6_164 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsServerFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerConnection.cs", label="filter.Setup(x => x.OnPerforming(It.IsNotNull<PerformingContext>()))\r\n                .InSequence()", span="196-197"];
m6_166 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsServerFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerConnection.cs", label="filter.Setup(x => x.OnPerformed(It.IsNotNull<PerformedContext>()))\r\n                .InSequence()", span="202-203"];
m6_169 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsServerFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsServerFilters_BeforeAndAfterTheCreationOfAJob()", span="191-191"];
m6_263 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringThePerformanceOfAJob()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringThePerformanceOfAJob()", span="300-300"];
m6_264 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringThePerformanceOfAJob()", file="SqlServerConnection.cs", label="var filter = CreateFilter<IServerFilter>()", span="303-303"];
m6_266 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringThePerformanceOfAJob()", file="SqlServerConnection.cs", label="_performer\r\n                .Setup(x => x.Perform(It.IsNotNull<JobActivator>(), It.IsAny<IJobCancellationToken>()))\r\n                .Throws(exception)", span="306-308"];
m6_267 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringThePerformanceOfAJob()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="310-310"];
m6_268 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringThePerformanceOfAJob()", file="SqlServerConnection.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context, _performer.Object))", span="313-314"];
m6_265 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringThePerformanceOfAJob()", file="SqlServerConnection.cs", label="var exception = new InvalidOperationException()", span="305-305"];
m6_269 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringThePerformanceOfAJob()", file="SqlServerConnection.cs", label="filter.Verify(x => x.OnPerformed(It.Is<PerformedContext>(\r\n                context => context.Exception == exception)))", span="317-318"];
m6_270 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringThePerformanceOfAJob()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringThePerformanceOfAJob()", span="300-300"];
m6_118 [cluster="Unk.OnServerException", file="SqlServerConnection.cs", label="Entry Unk.OnServerException", span=""];
m6_141 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", span="173-173"];
m6_142 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="SqlServerConnection.cs", label="_performer\r\n                .Setup(x => x.Perform(It.IsNotNull<JobActivator>(), It.IsAny<IJobCancellationToken>()))\r\n                .Throws<InvalidOperationException>()", span="176-178"];
m6_143 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="SqlServerConnection.cs", label="var filter = CreateFilter<IServerExceptionFilter>()", span="180-180"];
m6_145 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="184-184"];
m6_146 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="SqlServerConnection.cs", label="Assert.DoesNotThrow(() => process.Run(_context, _performer.Object))", span="187-187"];
m6_144 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="SqlServerConnection.cs", label="filter.Setup(x => x.OnServerException(It.IsAny<ServerExceptionContext>()))\r\n                .Callback((ServerExceptionContext x) => x.ExceptionHandled = true)", span="181-182"];
m6_147 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", span="173-173"];
m6_429 [cluster="DefaultJobPerformanceProcess.cstr", file="SqlServerConnection.cs", label="Entry DefaultJobPerformanceProcess.cstr", span=""];
m6_91 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCatchExceptions()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCatchExceptions()", span="115-115"];
m6_92 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCatchExceptions()", file="SqlServerConnection.cs", label="_performer\r\n                .Setup(x => x.Perform(It.IsNotNull<JobActivator>(), It.IsAny<IJobCancellationToken>()))\r\n                .Throws<InvalidOperationException>()", span="118-120"];
m6_93 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCatchExceptions()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="122-122"];
m6_94 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCatchExceptions()", file="SqlServerConnection.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context, _performer.Object))", span="125-126"];
m6_95 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCatchExceptions()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCatchExceptions()", span="115-115"];
m6_61 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_StoresJobReturnValueInPerformedContext()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_StoresJobReturnValueInPerformedContext()", span="78-78"];
m6_64 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_StoresJobReturnValueInPerformedContext()", color=green, community=0, file="SqlServerConnection.cs", label="_performer\r\n                .Setup(x => x.Perform(It.IsNotNull<JobActivator>(), It.IsNotNull<IJobCancellationToken>()))\r\n                .Returns(''Returned value'')", prediction=11, span="84-86"];
m6_63 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_StoresJobReturnValueInPerformedContext()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="82-82"];
m6_65 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_StoresJobReturnValueInPerformedContext()", file="SqlServerConnection.cs", label="process.Run(_context, _performer.Object)", span="89-89"];
m6_62 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_StoresJobReturnValueInPerformedContext()", file="SqlServerConnection.cs", label="var filter = CreateFilter<IServerFilter>()", span="81-81"];
m6_66 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_StoresJobReturnValueInPerformedContext()", file="SqlServerConnection.cs", label="filter.Verify(\r\n                x => x.OnPerformed(It.Is<PerformedContext>(context => (string)context.Result == ''Returned value'')))", span="92-93"];
m6_67 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_StoresJobReturnValueInPerformedContext()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_StoresJobReturnValueInPerformedContext()", span="78-78"];
m6_329 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", span="363-363"];
m6_330 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerConnection.cs", label="var outerFilter = CreateFilter<IServerFilter>()", span="366-366"];
m6_331 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerConnection.cs", label="var innerFilter = CreateFilter<IServerFilter>()", span="367-367"];
m6_332 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerConnection.cs", label="_performer\r\n                .Setup(x => x.Perform(It.IsNotNull<JobActivator>(), It.IsAny<IJobCancellationToken>()))\r\n                .Throws<InvalidOperationException>()", span="369-371"];
m6_334 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="376-376"];
m6_335 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerConnection.cs", label="Assert.DoesNotThrow(() => process.Run(_context, _performer.Object))", span="379-379"];
m6_333 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerConnection.cs", label="innerFilter.Setup(x => x.OnPerformed(It.IsAny<PerformedContext>()))\r\n                .Callback((PerformedContext x) => x.ExceptionHandled = true)", span="373-374"];
m6_336 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerConnection.cs", label="outerFilter.Verify(x => x.OnPerformed(It.Is<PerformedContext>(context => context.Exception != null)))", span="382-382"];
m6_337 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", span="363-363"];
m6_173 [cluster="Unk.OnPerforming", file="SqlServerConnection.cs", label="Entry Unk.OnPerforming", span=""];
m6_128 [cluster="Unk.InSequence", file="SqlServerConnection.cs", label="Entry Unk.InSequence", span=""];
m6_435 [cluster="Unk.Add", file="SqlServerConnection.cs", label="Entry Unk.Add", span=""];
m6_15 [cluster="Mock<IJobPerformer>.cstr", file="SqlServerConnection.cs", label="Entry Mock<IJobPerformer>.cstr", span=""];
m6_222 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", span="256-256"];
m6_223 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerConnection.cs", label="var outerFilter = CreateFilter<IServerFilter>()", span="259-259"];
m6_224 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerConnection.cs", label="var innerFilter = CreateFilter<IServerFilter>()", span="260-260"];
m6_226 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="265-265"];
m6_227 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerConnection.cs", label="process.Run(_context, _performer.Object)", span="268-268"];
m6_225 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerConnection.cs", label="innerFilter.Setup(x => x.OnPerforming(It.IsAny<PerformingContext>()))\r\n                .Callback((PerformingContext context) => context.Canceled = true)", span="262-263"];
m6_228 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerConnection.cs", label="outerFilter.Verify(x => x.OnPerformed(It.Is<PerformedContext>(context => context.Canceled)))", span="271-271"];
m6_229 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", span="256-256"];
m6_69 [cluster="Unk.Setup", file="SqlServerConnection.cs", label="Entry Unk.Setup", span=""];
m6_21 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Method()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Method()", span="474-474"];
m6_426 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Method()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Method()", span="474-474"];
m6_272 [cluster="Unk.Throws", file="SqlServerConnection.cs", label="Entry Unk.Throws", span=""];
m6_60 [cluster="Unk.Perform", file="SqlServerConnection.cs", label="Entry Unk.Perform", span=""];
m6_32 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", span="44-44"];
m6_33 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="46-46"];
m6_34 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerConnection.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => process.Run(null, _performer.Object))", span="48-49"];
m6_35 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerConnection.cs", label="Assert.Equal(''context'', exception.ParamName)", span="51-51"];
m6_36 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", span="44-44"];
m6_202 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCallBoth_Perform_And_OnPerforming_WhenFilterCancelsThis()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCallBoth_Perform_And_OnPerforming_WhenFilterCancelsThis()", span="234-234"];
m6_203 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCallBoth_Perform_And_OnPerforming_WhenFilterCancelsThis()", file="SqlServerConnection.cs", label="var filter = CreateFilter<IServerFilter>()", span="237-237"];
m6_205 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCallBoth_Perform_And_OnPerforming_WhenFilterCancelsThis()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="242-242"];
m6_206 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCallBoth_Perform_And_OnPerforming_WhenFilterCancelsThis()", file="SqlServerConnection.cs", label="process.Run(_context, _performer.Object)", span="245-245"];
m6_207 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCallBoth_Perform_And_OnPerforming_WhenFilterCancelsThis()", file="SqlServerConnection.cs", label="_performer.Verify(\r\n                x => x.Perform(It.IsAny<JobActivator>(), It.IsAny<IJobCancellationToken>()), \r\n                Times.Never)", span="248-250"];
m6_204 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCallBoth_Perform_And_OnPerforming_WhenFilterCancelsThis()", file="SqlServerConnection.cs", label="filter.Setup(x => x.OnPerforming(It.IsAny<PerformingContext>()))\r\n                .Callback((PerformingContext x) => x.Canceled = true)", span="239-240"];
m6_208 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCallBoth_Perform_And_OnPerforming_WhenFilterCancelsThis()", file="SqlServerConnection.cs", label="filter.Verify(x => x.OnPerformed(It.IsAny<PerformedContext>()), Times.Never)", span="252-252"];
m6_209 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCallBoth_Perform_And_OnPerforming_WhenFilterCancelsThis()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCallBoth_Perform_And_OnPerforming_WhenFilterCancelsThis()", span="234-234"];
m6_353 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="382-382"];
m6_71 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="85-85"];
m6_39 [cluster="lambda expression", file="SqlServerConnection.cs", label="process.Run(null, _performer.Object)", span="49-49"];
m6_48 [cluster="lambda expression", file="SqlServerConnection.cs", label="process.Run(_context, null)", span="60-60"];
m6_100 [cluster="lambda expression", file="SqlServerConnection.cs", label="process.Run(_context, _performer.Object)", span="126-126"];
m6_113 [cluster="lambda expression", file="SqlServerConnection.cs", label="process.Run(_context, _performer.Object)", span="143-143"];
m6_139 [cluster="lambda expression", file="SqlServerConnection.cs", label="process.Run(_context, _performer.Object)", span="167-167"];
m6_160 [cluster="lambda expression", file="SqlServerConnection.cs", label="process.Run(_context, _performer.Object)", span="187-187"];
m6_255 [cluster="lambda expression", file="SqlServerConnection.cs", label="process.Run(_context, _performer.Object)", span="287-287"];
m6_277 [cluster="lambda expression", file="SqlServerConnection.cs", label="process.Run(_context, _performer.Object)", span="314-314"];
m6_298 [cluster="lambda expression", file="SqlServerConnection.cs", label="process.Run(_context, _performer.Object)", span="337-337"];
m6_327 [cluster="lambda expression", file="SqlServerConnection.cs", label="process.Run(_context, _performer.Object)", span="359-359"];
m6_348 [cluster="lambda expression", file="SqlServerConnection.cs", label="process.Run(_context, _performer.Object)", span="379-379"];
m6_367 [cluster="lambda expression", file="SqlServerConnection.cs", label="process.Run(_context, _performer.Object)", span="397-397"];
m6_384 [cluster="lambda expression", file="SqlServerConnection.cs", label="process.Run(_context, _performer.Object)", span="418-418"];
m6_397 [cluster="lambda expression", file="SqlServerConnection.cs", label="process.Run(_context, _performer.Object)", span="436-436"];
m6_412 [cluster="lambda expression", file="SqlServerConnection.cs", label="process.Run(_context, _performer.Object)", span="456-456"];
m6_424 [cluster="lambda expression", file="SqlServerConnection.cs", label="process.Run(_context, _performer.Object)", span="471-471"];
m6_73 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="85-85"];
m6_72 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Perform(It.IsNotNull<JobActivator>(), It.IsNotNull<IJobCancellationToken>())", span="85-85"];
m6_38 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="49-49"];
m6_40 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="49-49"];
m6_47 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="60-60"];
m6_49 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="60-60"];
m6_57 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="73-73"];
m6_88 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="104-104"];
m6_96 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="119-119"];
m6_99 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="126-126"];
m6_101 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="126-126"];
m6_109 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="136-136"];
m6_112 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="143-143"];
m6_114 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="143-143"];
m6_135 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="160-160"];
m6_138 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="167-167"];
m6_140 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="167-167"];
m6_150 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="177-177"];
m6_159 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="187-187"];
m6_161 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="187-187"];
m6_174 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="199-199"];
m6_216 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="249-249"];
m6_254 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="287-287"];
m6_256 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="287-287"];
m6_257 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="293-293"];
m6_273 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="307-307"];
m6_276 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="314-314"];
m6_278 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="314-314"];
m6_294 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="330-330"];
m6_297 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="337-337"];
m6_299 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="337-337"];
m6_314 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="350-350"];
m6_326 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="359-359"];
m6_328 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="359-359"];
m6_338 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="370-370"];
m6_347 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="379-379"];
m6_349 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="379-379"];
m6_366 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="396-397"];
m6_368 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="396-397"];
m6_380 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="411-411"];
m6_383 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="417-418"];
m6_385 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="417-418"];
m6_393 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="428-428"];
m6_396 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="436-436"];
m6_398 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="436-436"];
m6_411 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="456-456"];
m6_413 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="456-456"];
m6_423 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="471-471"];
m6_425 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="471-471"];
m6_74 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="93-93"];
m6_132 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="157-157"];
m6_129 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="156-156"];
m6_153 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="181-181"];
m6_156 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="182-182"];
m6_170 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="196-196"];
m6_177 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="202-202"];
m6_190 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="220-220"];
m6_199 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="223-223"];
m6_193 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="221-221"];
m6_196 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="222-222"];
m6_210 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="239-239"];
m6_213 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="240-240"];
m6_230 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="262-262"];
m6_233 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="263-263"];
m6_251 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="280-280"];
m6_317 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="353-353"];
m6_323 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="354-354"];
m6_341 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="373-373"];
m6_344 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="374-374"];
m6_363 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="390-390"];
m6_377 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="407-407"];
m6_408 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="449-449"];
m6_420 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="464-464"];
m6_18 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="24-24"];
m6_58 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Perform(It.IsNotNull<JobActivator>(), It.IsNotNull<IJobCancellationToken>())", span="73-73"];
m6_75 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerformed(It.Is<PerformedContext>(context => (string)context.Result == ''Returned value''))", span="93-93"];
m6_89 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Perform(It.IsNotNull<JobActivator>(), It.IsNotNull<IJobCancellationToken>())", span="104-104"];
m6_97 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Perform(It.IsNotNull<JobActivator>(), It.IsAny<IJobCancellationToken>())", span="119-119"];
m6_110 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Perform(It.IsNotNull<JobActivator>(), It.IsAny<IJobCancellationToken>())", span="136-136"];
m6_116 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnServerException(\r\n                It.IsNotNull<ServerExceptionContext>())", span="145-146"];
m6_130 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnServerException(It.IsAny<ServerExceptionContext>())", span="156-156"];
m6_133 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnServerException(It.IsAny<ServerExceptionContext>())", span="157-157"];
m6_136 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Perform(It.IsNotNull<JobActivator>(), It.IsAny<IJobCancellationToken>())", span="160-160"];
m6_151 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Perform(It.IsNotNull<JobActivator>(), It.IsAny<IJobCancellationToken>())", span="177-177"];
m6_154 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnServerException(It.IsAny<ServerExceptionContext>())", span="181-181"];
m6_171 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerforming(It.IsNotNull<PerformingContext>())", span="196-196"];
m6_175 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Perform(It.IsNotNull<JobActivator>(), It.IsAny<IJobCancellationToken>())", span="199-199"];
m6_178 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerformed(It.IsNotNull<PerformedContext>())", span="202-202"];
m6_191 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerforming(It.IsAny<PerformingContext>())", span="220-220"];
m6_194 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerforming(It.IsAny<PerformingContext>())", span="221-221"];
m6_197 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerformed(It.IsAny<PerformedContext>())", span="222-222"];
m6_200 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerformed(It.IsAny<PerformedContext>())", span="223-223"];
m6_211 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerforming(It.IsAny<PerformingContext>())", span="239-239"];
m6_217 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Perform(It.IsAny<JobActivator>(), It.IsAny<IJobCancellationToken>())", span="249-249"];
m6_220 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerformed(It.IsAny<PerformedContext>())", span="252-252"];
m6_231 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerforming(It.IsAny<PerformingContext>())", span="262-262"];
m6_237 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerformed(It.Is<PerformedContext>(context => context.Canceled))", span="271-271"];
m6_252 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerforming(It.IsAny<PerformingContext>())", span="280-280"];
m6_258 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Perform(It.IsAny<JobActivator>(), It.IsAny<IJobCancellationToken>())", span="293-293"];
m6_261 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerformed(It.IsAny<PerformedContext>())", span="296-296"];
m6_280 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerformed(It.Is<PerformedContext>(\r\n                context => context.Exception == exception))", span="317-318"];
m6_274 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Perform(It.IsNotNull<JobActivator>(), It.IsAny<IJobCancellationToken>())", span="307-307"];
m6_301 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerformed(It.Is<PerformedContext>(context => context.Exception == exception))", span="339-339"];
m6_295 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Perform(It.IsNotNull<JobActivator>(), It.IsAny<IJobCancellationToken>())", span="330-330"];
m6_318 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerformed(It.Is<PerformedContext>(context => context.Exception == exception))", span="353-353"];
m6_315 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Perform(It.IsNotNull<JobActivator>(), It.IsAny<IJobCancellationToken>())", span="350-350"];
m6_339 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Perform(It.IsNotNull<JobActivator>(), It.IsAny<IJobCancellationToken>())", span="370-370"];
m6_342 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerformed(It.IsAny<PerformedContext>())", span="373-373"];
m6_351 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerformed(It.Is<PerformedContext>(context => context.Exception != null))", span="382-382"];
m6_364 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerformed(It.IsAny<PerformedContext>())", span="390-390"];
m6_378 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerformed(It.IsAny<PerformedContext>())", span="407-407"];
m6_381 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Perform(It.IsNotNull<JobActivator>(), It.IsAny<IJobCancellationToken>())", span="411-411"];
m6_394 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Perform(It.IsAny<JobActivator>(), It.IsAny<IJobCancellationToken>())", span="428-428"];
m6_400 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnServerException(It.IsAny<ServerExceptionContext>())", span="440-440"];
m6_409 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerforming(It.IsAny<PerformingContext>())", span="449-449"];
m6_421 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.OnPerformed(It.IsAny<PerformedContext>())", span="464-464"];
m6_59 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="73-73"];
m6_90 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="104-104"];
m6_98 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="119-119"];
m6_115 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="145-146"];
m6_111 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="136-136"];
m6_137 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="160-160"];
m6_152 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="177-177"];
m6_176 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="199-199"];
m6_219 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="252-252"];
m6_218 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="249-249"];
m6_236 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="271-271"];
m6_260 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="296-296"];
m6_259 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="293-293"];
m6_283 [cluster="lambda expression", file="SqlServerConnection.cs", label="context.Exception == exception", span="318-318"];
m6_279 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="317-318"];
m6_275 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="307-307"];
m6_300 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="339-339"];
m6_304 [cluster="lambda expression", file="SqlServerConnection.cs", label="context.Exception == exception", span="339-339"];
m6_296 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="330-330"];
m6_321 [cluster="lambda expression", file="SqlServerConnection.cs", label="context.Exception == exception", span="353-353"];
m6_316 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="350-350"];
m6_350 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="382-382"];
m6_340 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="370-370"];
m6_382 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="411-411"];
m6_395 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="428-428"];
m6_399 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="440-440"];
m6_76 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="93-93"];
m6_134 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="157-157"];
m6_131 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="156-156"];
m6_155 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="181-181"];
m6_158 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="182-182"];
m6_157 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.ExceptionHandled = true", span="182-182"];
m6_172 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="196-196"];
m6_179 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="202-202"];
m6_192 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="220-220"];
m6_201 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="223-223"];
m6_195 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="221-221"];
m6_198 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="222-222"];
m6_212 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="239-239"];
m6_215 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="240-240"];
m6_214 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Canceled = true", span="240-240"];
m6_232 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="262-262"];
m6_235 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="263-263"];
m6_234 [cluster="lambda expression", file="SqlServerConnection.cs", label="context.Canceled = true", span="263-263"];
m6_253 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="280-280"];
m6_319 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="353-353"];
m6_325 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="354-354"];
m6_324 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.ExceptionHandled = true", span="354-354"];
m6_343 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="373-373"];
m6_346 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="374-374"];
m6_345 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.ExceptionHandled = true", span="374-374"];
m6_365 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="390-390"];
m6_379 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="407-407"];
m6_410 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="449-449"];
m6_422 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="464-464"];
m6_20 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="24-24"];
m6_19 [cluster="lambda expression", file="SqlServerConnection.cs", label="Method()", span="24-24"];
m6_28 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="38-38"];
m6_78 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="93-93"];
m6_117 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="145-146"];
m6_221 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="252-252"];
m6_238 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="271-271"];
m6_239 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="271-271"];
m6_262 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="296-296"];
m6_281 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="317-318"];
m6_282 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="318-318"];
m6_302 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="339-339"];
m6_303 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="339-339"];
m6_320 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="353-353"];
m6_352 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="382-382"];
m6_401 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="440-440"];
m6_284 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="318-318"];
m6_305 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="339-339"];
m6_322 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="353-353"];
m6_30 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="38-38"];
m6_29 [cluster="lambda expression", file="SqlServerConnection.cs", label="new DefaultJobPerformanceProcess(null)", span="38-38"];
m6_80 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="93-93"];
m6_79 [cluster="lambda expression", file="SqlServerConnection.cs", label="(string)context.Result == ''Returned value''", span="93-93"];
m6_241 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="271-271"];
m6_240 [cluster="lambda expression", file="SqlServerConnection.cs", label="context.Canceled", span="271-271"];
m6_354 [cluster="lambda expression", file="SqlServerConnection.cs", label="context.Exception != null", span="382-382"];
m6_355 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="382-382"];
m6_16 [cluster="Mock<JobActivator>.cstr", file="SqlServerConnection.cs", label="Entry Mock<JobActivator>.cstr", span=""];
m6_369 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_OccuredAfterAnotherException_IntoJobPerformanceException()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_OccuredAfterAnotherException_IntoJobPerformanceException()", span="403-403"];
m6_370 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_OccuredAfterAnotherException_IntoJobPerformanceException()", file="SqlServerConnection.cs", label="var filter = CreateFilter<IServerFilter>()", span="406-406"];
m6_372 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_OccuredAfterAnotherException_IntoJobPerformanceException()", file="SqlServerConnection.cs", label="_performer\r\n                .Setup(x => x.Perform(It.IsNotNull<JobActivator>(), It.IsAny<IJobCancellationToken>()))\r\n                .Throws<ArgumentNullException>()", span="410-412"];
m6_373 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_OccuredAfterAnotherException_IntoJobPerformanceException()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="414-414"];
m6_374 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_OccuredAfterAnotherException_IntoJobPerformanceException()", file="SqlServerConnection.cs", label="var exception = Assert.Throws<JobPerformanceException>(() =>\r\n                process.Run(_context, _performer.Object))", span="417-418"];
m6_371 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_OccuredAfterAnotherException_IntoJobPerformanceException()", file="SqlServerConnection.cs", label="filter.Setup(x => x.OnPerformed(It.IsAny<PerformedContext>()))\r\n                .Throws<InvalidOperationException>()", span="407-408"];
m6_375 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_OccuredAfterAnotherException_IntoJobPerformanceException()", file="SqlServerConnection.cs", label="Assert.IsType<InvalidOperationException>(exception.InnerException)", span="420-420"];
m6_376 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_OccuredAfterAnotherException_IntoJobPerformanceException()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_OccuredAfterAnotherException_IntoJobPerformanceException()", span="403-403"];
m6_356 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_IntoJobPerformanceException()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_IntoJobPerformanceException()", span="386-386"];
m6_357 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_IntoJobPerformanceException()", file="SqlServerConnection.cs", label="var filter = CreateFilter<IServerFilter>()", span="389-389"];
m6_359 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_IntoJobPerformanceException()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="393-393"];
m6_360 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_IntoJobPerformanceException()", file="SqlServerConnection.cs", label="var exception = Assert.Throws<JobPerformanceException>(() => \r\n                process.Run(_context, _performer.Object))", span="396-397"];
m6_358 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_IntoJobPerformanceException()", file="SqlServerConnection.cs", label="filter.Setup(x => x.OnPerformed(It.IsAny<PerformedContext>()))\r\n                .Throws<InvalidOperationException>()", span="390-391"];
m6_361 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_IntoJobPerformanceException()", file="SqlServerConnection.cs", label="Assert.IsType<InvalidOperationException>(exception.InnerException)", span="399-399"];
m6_362 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_IntoJobPerformanceException()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_IntoJobPerformanceException()", span="386-386"];
m6_56 [cluster="Unk.Verify", file="SqlServerConnection.cs", label="Entry Unk.Verify", span=""];
m6_14 [cluster="Mock<IJobCancellationToken>.cstr", file="SqlServerConnection.cs", label="HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob", span=""];
m6_148 [cluster="Unk.Callback", file="SqlServerConnection.cs", label="Entry Unk.Callback", span=""];
m6_242 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", span="275-275"];
m6_243 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", file="SqlServerConnection.cs", label="var filter = CreateFilter<IServerFilter>()", span="278-278"];
m6_245 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="283-283"];
m6_246 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", file="SqlServerConnection.cs", label="var exception = Assert.Throws<JobPerformanceException>(\r\n                () => process.Run(_context, _performer.Object))", span="286-287"];
m6_248 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", file="SqlServerConnection.cs", label="_performer.Verify(\r\n                x => x.Perform(It.IsAny<JobActivator>(), It.IsAny<IJobCancellationToken>()), \r\n                Times.Never)", span="292-294"];
m6_244 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", file="SqlServerConnection.cs", label="filter.Setup(x => x.OnPerforming(It.IsAny<PerformingContext>()))\r\n                .Throws<InvalidOperationException>()", span="280-281"];
m6_249 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", file="SqlServerConnection.cs", label="filter.Verify(x => x.OnPerformed(It.IsAny<PerformedContext>()), Times.Never)", span="296-296"];
m6_247 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", file="SqlServerConnection.cs", label="Assert.IsType<InvalidOperationException>(exception.InnerException)", span="290-290"];
m6_250 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", span="275-275"];
m6_70 [cluster="Unk.Returns", file="SqlServerConnection.cs", label="Entry Unk.Returns", span=""];
m6_50 [cluster="Hangfire.Server.DefaultJobPerformanceProcess.Run(Hangfire.Server.PerformContext, Hangfire.Server.IJobPerformer)", file="SqlServerConnection.cs", label="Entry Hangfire.Server.DefaultJobPerformanceProcess.Run(Hangfire.Server.PerformContext, Hangfire.Server.IJobPerformer)", span="51-51"];
m6_285 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerConnection.cs", label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", span="322-322"];
m6_286 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerConnection.cs", label="var outerFilter = CreateFilter<IServerFilter>()", span="325-325"];
m6_287 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerConnection.cs", label="var innerFilter = CreateFilter<IServerFilter>()", span="326-326"];
m6_289 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerConnection.cs", label="_performer\r\n                .Setup(x => x.Perform(It.IsNotNull<JobActivator>(), It.IsAny<IJobCancellationToken>()))\r\n                .Throws(exception)", span="329-331"];
m6_290 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerConnection.cs", label="var process = CreateProcess()", span="333-333"];
m6_291 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerConnection.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context, _performer.Object))", span="336-337"];
m6_292 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerConnection.cs", label="outerFilter.Verify(x => x.OnPerformed(It.Is<PerformedContext>(context => context.Exception == exception)))", span="339-339"];
m6_288 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerConnection.cs", label="var exception = new InvalidOperationException()", span="328-328"];
m6_293 [cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerConnection.cs", label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", span="322-322"];
m6_12 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerConnection.cs", label="HangFire.Tests.UnitTests.JobInvokerTests.CorrectJob", span=""];
m6_13 [cluster="PerformContext.cstr", file="SqlServerConnection.cs", label="HangFire.Tests.UnitTests.JobInvokerTests.ArgumentsJob", span=""];
m6_436 [file="SqlServerConnection.cs", label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", span=""];
m6_437 [file="SqlServerConnection.cs", label=process, span=""];
m6_438 [file="SqlServerConnection.cs", label=process, span=""];
m6_439 [file="SqlServerConnection.cs", label=process, span=""];
m6_440 [file="SqlServerConnection.cs", label=process, span=""];
m6_441 [file="SqlServerConnection.cs", label=process, span=""];
m6_442 [file="SqlServerConnection.cs", label=process, span=""];
m6_443 [file="SqlServerConnection.cs", label=process, span=""];
m6_444 [file="SqlServerConnection.cs", label=process, span=""];
m6_446 [file="SqlServerConnection.cs", label=process, span=""];
m6_449 [file="SqlServerConnection.cs", label=process, span=""];
m6_450 [file="SqlServerConnection.cs", label=process, span=""];
m6_451 [file="SqlServerConnection.cs", label=process, span=""];
m6_452 [file="SqlServerConnection.cs", label=process, span=""];
m6_453 [file="SqlServerConnection.cs", label=process, span=""];
m6_454 [file="SqlServerConnection.cs", label=process, span=""];
m6_455 [file="SqlServerConnection.cs", label=process, span=""];
m6_445 [file="SqlServerConnection.cs", label=exception, span=""];
m6_447 [file="SqlServerConnection.cs", label=exception, span=""];
m6_448 [file="SqlServerConnection.cs", label=exception, span=""];
m7_18 [cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="54-54"];
m7_33 [cluster="Unk.Info", file="SqlServerStorage.cs", label="Entry Unk.Info", span=""];
m7_34 [cluster="Unk.InfoFormat", file="SqlServerStorage.cs", label="Entry Unk.InfoFormat", span=""];
m7_35 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerStorage.ToString()", span="76-76"];
m7_36 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", color=green, community=0, file="SqlServerStorage.cs", label="string canNotParseMessage = ''<Connection string can not be parsed>''", prediction=12, span="78-78"];
m7_37 [cluster="HangFire.Storage.IWriteOnlyTransaction.AddToQueue(string, string)", color=green, community=2, file="SqlServerStorage.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToQueue(string, string)", prediction=12, span="16-16"];
m7_47 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", color=green, community=0, file="SqlServerStorage.cs", label="return builder.Length != 0 \r\n                    ? String.Format(''SQL Server: {0}'', builder) \r\n                    : canNotParseMessage;", prediction=12, span="109-111"];
m7_49 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", color=green, community=0, file="SqlServerStorage.cs", label="return canNotParseMessage;", prediction=12, span="115-115"];
m7_38 [cluster="HangFire.States.EnqueuedStateExtensions.GetQueue(HangFire.Common.JobMethod)", color=green, community=0, file="SqlServerStorage.cs", label="Entry HangFire.States.EnqueuedStateExtensions.GetQueue(HangFire.Common.JobMethod)", prediction=12, span="105-105"];
m7_40 [cluster="HangFire.States.EnqueuedStateExtensions.GetQueue(HangFire.Common.JobMethod)", color=green, community=0, file="SqlServerStorage.cs", label="return null;", prediction=12, span="107-107"];
m7_41 [cluster="HangFire.States.EnqueuedStateExtensions.GetQueue(HangFire.Common.JobMethod)", color=green, community=0, file="SqlServerStorage.cs", label="return EnqueuedState.GetQueue(method);", prediction=12, span="108-108"];
m7_45 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", color=green, community=0, file="SqlServerStorage.cs", label="parts.ContainsKey(alias)", prediction=12, span="102-102"];
m7_46 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", color=green, community=0, file="SqlServerStorage.cs", label="builder.AppendFormat(''{1}'', alias, parts[alias])", prediction=12, span="104-104"];
m7_44 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", color=green, community=0, file="SqlServerStorage.cs", label="new[] { ''Database'', ''Initial Catalog'' }", prediction=12, span="100-100"];
m7_48 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", color=green, community=0, file="SqlServerStorage.cs", label=Exception, prediction=22, span="113-113"];
m7_39 [cluster="HangFire.States.EnqueuedStateExtensions.GetQueue(HangFire.Common.JobMethod)", color=green, community=0, file="SqlServerStorage.cs", label="method == null", prediction=12, span="107-107"];
m7_42 [cluster="HangFire.States.EnqueuedStateExtensions.GetQueue(HangFire.Common.JobMethod)", color=green, community=0, file="SqlServerStorage.cs", label="Exit HangFire.States.EnqueuedStateExtensions.GetQueue(HangFire.Common.JobMethod)", prediction=12, span="105-105"];
m7_43 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", color=green, community=0, file="SqlServerStorage.cs", label="builder.Append(''@'')", prediction=12, span="98-98"];
m7_50 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.ToString()", span="76-76"];
m7_20 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="SqlServerStorage.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m7_21 [cluster="System.Collections.Generic.IEnumerable<TSource>.FirstOrDefault<TSource>()", file="SqlServerStorage.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.FirstOrDefault<TSource>()", span="0-0"];
m7_22 [cluster="string.IsNullOrEmpty(string)", file="SqlServerStorage.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m7_19 [cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="SqlServerStorage.cs", label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0"];
m7_29 [cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", color=green, community=0, file="SqlServerStorage.cs", label="logger.Info(''Using the following options for SQL Server job storage:'')", prediction=26, span="71-71"];
m7_53 [cluster="Unk.ToDictionary", file="SqlServerStorage.cs", label="Entry Unk.ToDictionary", span=""];
m7_57 [cluster="System.Text.StringBuilder.Append(string)", file="SqlServerStorage.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m7_32 [cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", span="69-69"];
m7_23 [cluster="HangFire.States.EnqueuedState.ValidateQueueName(string)", file="SqlServerStorage.cs", label="Entry HangFire.States.EnqueuedState.ValidateQueueName(string)", span="73-73"];
m7_28 [cluster="HangFire.States.EnqueuedState.ValidateQueueName(string)", file="SqlServerStorage.cs", label="Exit HangFire.States.EnqueuedState.ValidateQueueName(string)", span="73-73"];
m7_30 [cluster="System.Text.RegularExpressions.Regex.IsMatch(string, string)", color=green, community=0, file="SqlServerStorage.cs", label="Entry System.Text.RegularExpressions.Regex.IsMatch(string, string)", prediction=12, span="0-0"];
m7_31 [cluster="System.InvalidOperationException.InvalidOperationException(string)", color=green, community=0, file="SqlServerStorage.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", prediction=12, span="0-0"];
m7_54 [cluster="System.Text.StringBuilder.StringBuilder()", file="SqlServerStorage.cs", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
m7_0 [cluster="HangFire.States.EnqueuedState.GetData(HangFire.Common.JobMethod)", file="SqlServerStorage.cs", label="Entry HangFire.States.EnqueuedState.GetData(HangFire.Common.JobMethod)", span="32-32"];
m7_1 [cluster="HangFire.States.EnqueuedState.GetData(HangFire.Common.JobMethod)", file="SqlServerStorage.cs", label="var queue = GetQueue(data)", span="34-34"];
m7_2 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="37-37"];
m7_3 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="connectionString == null", span="39-39"];
m7_24 [cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerStorage.GetComponents()", span="64-64"];
m7_26 [cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.GetComponents()", span="64-64"];
m7_27 [cluster="HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", span="38-38"];
m7_25 [cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerStorage.cs", label="yield return new ExpirationManager(this);", span="66-66"];
m7_77 [cluster="Unk.Open", file="SqlServerStorage.cs", label="Entry Unk.Open", span=""];
m7_65 [cluster="Unk.Trim", file="SqlServerStorage.cs", label="Entry Unk.Trim", span=""];
m7_76 [cluster="SqlConnection.cstr", file="SqlServerStorage.cs", label="Entry SqlConnection.cstr", span=""];
m7_56 [cluster="Unk.AppendFormat", file="SqlServerStorage.cs", label="Entry Unk.AppendFormat", span=""];
m7_5 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="options == null", span="40-40"];
m7_16 [cluster="HangFire.States.EnqueuedState.GetQueue(HangFire.Common.JobMethod)", file="SqlServerStorage.cs", label="return queueName;", span="70-70"];
m7_17 [cluster="HangFire.States.EnqueuedState.GetQueue(HangFire.Common.JobMethod)", file="SqlServerStorage.cs", label="Exit HangFire.States.EnqueuedState.GetQueue(HangFire.Common.JobMethod)", span="43-43"];
m7_7 [cluster="HangFire.States.EnqueuedState.GetQueue(HangFire.Common.JobMethod)", file="SqlServerStorage.cs", label="method == null", span="45-45"];
m7_8 [cluster="HangFire.States.EnqueuedState.GetQueue(HangFire.Common.JobMethod)", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''method'');", span="45-45"];
m7_10 [cluster="HangFire.States.EnqueuedState.GetQueue(HangFire.Common.JobMethod)", file="SqlServerStorage.cs", label="!method.OldFormat", span="49-49"];
m7_9 [cluster="HangFire.States.EnqueuedState.GetQueue(HangFire.Common.JobMethod)", file="SqlServerStorage.cs", label="QueueAttribute attribute = null", span="47-47"];
m7_11 [cluster="HangFire.States.EnqueuedState.GetQueue(HangFire.Common.JobMethod)", file="SqlServerStorage.cs", label="attribute = method.Method\r\n                    .GetCustomAttributes(true)\r\n                    .OfType<QueueAttribute>()\r\n                    .FirstOrDefault()", span="51-54"];
m7_6 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="SqlServerStorage.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46"];
m7_4 [cluster="HangFire.States.EnqueuedState.GetQueue(HangFire.Common.JobMethod)", file="SqlServerStorage.cs", label="Entry HangFire.States.EnqueuedState.GetQueue(HangFire.Common.JobMethod)", span="43-43"];
m7_12 [cluster="HangFire.States.EnqueuedState.GetQueue(HangFire.Common.JobMethod)", file="SqlServerStorage.cs", label="attribute == null", span="57-57"];
m7_51 [cluster="string.Split(char[], System.StringSplitOptions)", file="SqlServerStorage.cs", label="Entry string.Split(char[], System.StringSplitOptions)", span="0-0"];
m7_69 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="85-85"];
m7_59 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="83-83"];
m7_62 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="84-84"];
m7_66 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="85-85"];
m7_60 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries)", prediction=29, span="83-83"];
m7_61 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="83-83"];
m7_63 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="new { Key = x[0].Trim(), Value = x[1].Trim() }", prediction=30, span="84-84"];
m7_64 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="84-84"];
m7_67 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="x.Key", prediction=31, span="85-85"];
m7_68 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="85-85"];
m7_70 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="x.Value", prediction=32, span="85-85"];
m7_71 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="85-85"];
m7_52 [cluster="Unk.Select", file="SqlServerStorage.cs", label="Entry Unk.Select", span=""];
m7_15 [cluster="HangFire.States.EnqueuedState.GetQueue(HangFire.Common.JobMethod)", file="SqlServerStorage.cs", label="ValidateQueueName(queueName)", span="68-68"];
m7_72 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="var connection = new SqlConnection(_connectionString)", span="121-121"];
m7_73 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="connection.Open()", span="122-122"];
m7_74 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="return connection;", span="124-124"];
m7_75 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="119-119"];
m7_13 [cluster="HangFire.States.EnqueuedState.GetQueue(HangFire.Common.JobMethod)", file="SqlServerStorage.cs", label="attribute = method.Type\r\n                    .GetCustomAttributes(true)\r\n                    .OfType<QueueAttribute>()\r\n                    .FirstOrDefault()", span="59-62"];
m7_55 [cluster="Unk.ContainsKey", file="SqlServerStorage.cs", label="Entry Unk.ContainsKey", span=""];
m7_78 [file="SqlServerStorage.cs", label="HangFire.SqlServer.SqlServerStorage", span=""];
m8_64 [cluster="HangFire.Storage.IMonitoringApi.ScheduledJobs(int, int)", file="SqlServerStorageOptions.cs", label="Entry HangFire.Storage.IMonitoringApi.ScheduledJobs(int, int)", span="33-33"];
m8_59 [cluster="Unk.TryParse", file="SqlServerStorageOptions.cs", label="Entry Unk.TryParse", span=""];
m8_57 [cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="SqlServerStorageOptions.cs", label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="69-69"];
m8_65 [cluster="HangFire.Web.RazorPage.Write(object)", file="SqlServerStorageOptions.cs", label="Entry HangFire.Web.RazorPage.Write(object)", span="76-76"];
m8_60 [cluster="HangFire.JobStorage.GetMonitoringApi()", file="SqlServerStorageOptions.cs", label="Entry HangFire.JobStorage.GetMonitoringApi()", span="54-54"];
m8_58 [cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="SqlServerStorageOptions.cs", label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4"];
m8_0 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
m8_1 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="QueuePollInterval = TimeSpan.FromSeconds(15)", span="26-26"];
m8_2 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="SqlServerStorageOptions.cs", label="InvisibilityTimeout = TimeSpan.FromMinutes(30)", prediction=33, span="27-27"];
m8_3 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="PrepareSchemaIfNecessary = true", span="29-29"];
m8_4 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="Exit HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
m8_5 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerStorageOptions.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m8_9 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="pager = new Pager(from, perPage, monitor.ScheduledCount())\r\n        {\r\n            BasePageUrl = Request.LinkTo(''/scheduled'')\r\n        }", span="74-77"];
m8_6 [cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerStorageOptions.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m8_7 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="HangFire.SqlServer.SqlServerStorageOptions", span=""];
m8_8 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="var monitor = JobStorage.Current.GetMonitoringApi()", span="72-72"];
m8_10 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="scheduledJobs = monitor.ScheduledJobs(pager.FromRecord, pager.RecordsPerPage)", span="79-79"];
m8_12 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="pager.TotalPageCount == 0", span="91-91"];
m8_19 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="Write(RenderPartial(new PerPageSelector(pager)))", span="151-151"];
m8_55 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="Write(RenderPartial(new Paginator(pager)))", span="383-383"];
m8_11 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''\r\n'')", span="86-86"];
m8_21 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label=scheduledJobs, span="176-176"];
m8_13 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''    <div class=\''alert alert-info\''>\r\n        There are no scheduled jobs.\r\n    </d'' +\r\n''iv>\r\n'')", span="97-98"];
m8_14 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''    <div class=\''js-jobs-list\''>\r\n        <div class=\''btn-toolbar btn-toolbar-top\''>'' +\r\n''\r\n            <button class=\''js-jobs-list-command btn btn-sm btn-primary\''\r\n     '' +\r\n''               data-url=\'''')", span="110-112"];
m8_15 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="Write(Request.LinkTo(''/scheduled/enqueue''))", span="117-117"];
m8_16 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(@''''''\r\n                    data-loading-text=''''Enqueueing...''''>\r\n                <span class=''''glyphicon glyphicon-play''''></span>\r\n                Enqueue now\r\n            </button>\r\n\r\n            <button class=''''js-jobs-list-command btn btn-sm btn-default''''\r\n                    data-url='''''')", span="122-129"];
m8_17 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="Write(Request.LinkTo(''/scheduled/delete''))", span="134-134"];
m8_18 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(@''''''\r\n                    data-loading-text=''''Deleting...''''\r\n                    data-confirm=''''Do you really want to DELETE ALL selected jobs?''''>\r\n                <span class=''''glyphicon glyphicon-remove''''></span>\r\n                Delete selected\r\n            </button>\r\n\r\n            '')", span="139-146"];
m8_20 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(@''\r\n        </div>\r\n\r\n        <table class=''''table''''>\r\n            <thead>\r\n                <tr>\r\n                    <th class=''''min-width''''>\r\n                        <input type=''''checkbox'''' class=''''js-jobs-list-select-all'''' />\r\n                    </th>\r\n                    <th class=''''min-width''''>Id</th>\r\n                    <th>Enqueue</th>\r\n                    <th>Job</th>\r\n                    <th class=''''align-right''''>Scheduled</th>\r\n                </tr>\r\n            </thead>\r\n'')", span="156-171"];
m8_22 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''                <tr class=\''js-jobs-list-row '')", span="182-182"];
m8_54 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''        </table>\r\n    </div>\r\n'')", span="371-371"];
m8_23 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="Write(!job.Value.InScheduledState ? ''obsolete-data'' : null)", span="187-187"];
m8_24 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral('' '')", span="192-192"];
m8_25 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="Write(job.Value.InScheduledState ? ''hover'' : null)", span="197-197"];
m8_26 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''\''>\r\n                    <td>\r\n'')", span="202-202"];
m8_27 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="job.Value.InScheduledState", span="207-207"];
m8_28 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''                            <input type=\''checkbox\'' class=\''js-jobs-list-checkbox\'' '' +\r\n''name=\''jobs[]\'' value=\'''')", span="213-214"];
m8_31 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''                    </td>\r\n                    <td class=\''min-width\''>\r\n          '' +\r\n''              <a href=\'''')", span="234-235"];
m8_29 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="Write(job.Key)", span="219-219"];
m8_32 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="Write(Request.LinkTo(''/job/'' + job.Key))", span="240-240"];
m8_30 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''\'' />\r\n'')", span="224-224"];
m8_33 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''\''>\r\n                            '')", span="245-245"];
m8_34 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="Write(HtmlHelper.JobId(job.Key))", span="250-250"];
m8_35 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''\r\n                        </a>\r\n'')", span="255-255"];
m8_36 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="!job.Value.InScheduledState", span="260-260"];
m8_37 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''                            <span title=\''Job\'s state has been changed while fetch'' +\r\n''ing data.\'' class=\''glyphicon glyphicon-question-sign\''></span>\r\n'')", span="266-267"];
m8_38 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''                    </td>\r\n                    <td class=\''min-width\''>\r\n          '' +\r\n''              <span data-moment=\'''')", span="277-278"];
m8_39 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="Write(JobHelper.ToStringTimestamp(job.Value.EnqueueAt))", span="283-283"];
m8_40 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''\''>\r\n                            '')", span="288-288"];
m8_41 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="Write(job.Value.EnqueueAt)", span="293-293"];
m8_42 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''\r\n                        </span>\r\n                    </td>\r\n                   '' +\r\n'' <td>\r\n                        <a class=\''job-method\'' href=\'''')", span="298-299"];
m8_43 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="Write(Request.LinkTo(''/job/'' + job.Key))", span="304-304"];
m8_44 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''\''>\r\n                            '')", span="309-309"];
m8_45 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="Write(HtmlHelper.DisplayMethod(job.Value.Job))", span="314-314"];
m8_46 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''\r\n                        </a>\r\n                    </td>\r\n                    <t'' +\r\n''d class=\''align-right\''>\r\n'')", span="319-320"];
m8_47 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="job.Value.ScheduledAt != null", span="325-325"];
m8_48 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''                            <span data-moment=\'''')", span="331-331"];
m8_53 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''                    </td>\r\n                </tr>\r\n'')", span="361-361"];
m8_49 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="Write(JobHelper.ToStringTimestamp(job.Value.ScheduledAt.Value))", span="336-336"];
m8_50 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''\''>\r\n                                '')", span="341-341"];
m8_51 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="Write(job.Value.ScheduledAt)", span="346-346"];
m8_52 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="WriteLiteral(''\r\n                            </span>\r\n'')", span="351-351"];
m8_56 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="SqlServerStorageOptions.cs", label="Exit HangFire.Web.Pages.ScheduledJobsPage.Execute()", span="47-47"];
m8_66 [cluster="HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", file="SqlServerStorageOptions.cs", label="Entry HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", span="6-6"];
m8_68 [cluster="Unk.Write", file="SqlServerStorageOptions.cs", label="Entry Unk.Write", span=""];
m8_63 [cluster="HttpRequestBase.LinkTo(string)", file="SqlServerStorageOptions.cs", label="Entry HttpRequestBase.LinkTo(string)", span="24-24"];
m8_71 [cluster="HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", file="SqlServerStorageOptions.cs", label="Entry HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", span="30-30"];
m8_72 [cluster="HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", file="SqlServerStorageOptions.cs", label="Entry HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", span="6-6"];
m8_62 [cluster="HangFire.Storage.IMonitoringApi.ScheduledCount()", file="SqlServerStorageOptions.cs", label="Entry HangFire.Storage.IMonitoringApi.ScheduledCount()", span="38-38"];
m8_67 [cluster="HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", file="SqlServerStorageOptions.cs", label="Entry HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", span="89-89"];
m8_70 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="SqlServerStorageOptions.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
m8_61 [cluster="HangFire.Web.Pager.Pager(int, int, long)", file="SqlServerStorageOptions.cs", label="Entry HangFire.Web.Pager.Pager(int, int, long)", span="29-29"];
m8_69 [cluster="HangFire.Web.HtmlHelper.JobId(string, bool)", file="SqlServerStorageOptions.cs", label="Entry HangFire.Web.HtmlHelper.JobId(string, bool)", span="45-45"];
m8_73 [file="SqlServerStorageOptions.cs", label="HangFire.Web.Pages.ScheduledJobsPage", span=""];
m9_239 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", span="448-448"];
m9_240 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StorageFacts.cs", label="var serializedHistory = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="450-451"];
m9_243 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StorageFacts.cs", label="i < table.RowCount", span="454-454"];
m9_244 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StorageFacts.cs", label="Assert.Equal(table.Rows[i][''State''], history[i][''State''])", span="456-456"];
m9_241 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StorageFacts.cs", label="var history = serializedHistory.Select(JobHelper.FromJson<Dictionary<string, string>>).ToList()", span="452-452"];
m9_242 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StorageFacts.cs", label="var i = 0", span="454-454"];
m9_245 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StorageFacts.cs", label="i++", span="454-454"];
m9_246 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", span="448-448"];
m9_135 [cluster="HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", file="StorageFacts.cs", label="Entry HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", span="26-26"];
m9_153 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="307-307"];
m9_154 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="StorageFacts.cs", label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:processing'', JobSteps.DefaultJobId)", span="309-309"];
m9_155 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="StorageFacts.cs", label="var timestamp = JobHelper.FromTimestamp((long)score)", span="310-310"];
m9_156 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="StorageFacts.cs", label="Assert.True(timestamp > DateTime.UtcNow.AddSeconds(-1))", span="312-312"];
m9_157 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="StorageFacts.cs", label="Assert.True(timestamp < DateTime.UtcNow.AddSeconds(1))", span="313-313"];
m9_158 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="307-307"];
m9_137 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="282-282"];
m9_138 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="StorageFacts.cs", label="Assert.Equal(1, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="284-284"];
m9_139 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="StorageFacts.cs", label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:failed'', JobSteps.DefaultJobId))", span="285-285"];
m9_140 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="282-282"];
m9_90 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", span="198-198"];
m9_91 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", file="StorageFacts.cs", label="var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="201-202"];
m9_92 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", file="StorageFacts.cs", label="stateMachine.ChangeState(JobSteps.DefaultJobId, _stateMocks[state].Object, allowedState)", span="203-203"];
m9_93 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", span="198-198"];
m9_152 [cluster="Unk.False", file="StorageFacts.cs", label="Entry Unk.False", span=""];
m9_19 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", span="76-76"];
m9_20 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", color=green, community=0, file="StorageFacts.cs", label="_state = new EnqueuedState\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", prediction=34, span="78-81"];
m9_21 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", span="76-76"];
m9_162 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="317-317"];
m9_163 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StorageFacts.cs", label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="319-319"];
m9_164 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StorageFacts.cs", label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:schedule'', JobSteps.DefaultJobId)", span="320-320"];
m9_165 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StorageFacts.cs", label="var timestamp = JobHelper.FromTimestamp((long) score)", span="321-321"];
m9_166 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StorageFacts.cs", label="Assert.True(timestamp >= DateTime.UtcNow.Date.AddDays(1))", span="323-323"];
m9_167 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StorageFacts.cs", label="Assert.True(timestamp < DateTime.UtcNow.Date.AddDays(2))", span="324-324"];
m9_168 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="317-317"];
m9_64 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", span="122-122"];
m9_65 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="StorageFacts.cs", label="Given(String.Format(''a '{0}' state'', state))", span="124-124"];
m9_66 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="StorageFacts.cs", label="_filters.Add(\r\n                new TestStateChangingFilter(name, _stateChangingResults, _stateMocks[state].Object))", span="126-127"];
m9_67 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", span="122-122"];
m9_89 [cluster="Unk.ChangeState", file="StorageFacts.cs", label="Entry Unk.ChangeState", span=""];
m9_202 [cluster="Unk.Unapply", file="StorageFacts.cs", label="Entry Unk.Unapply", span=""];
m9_102 [cluster="Unk.ForEach", file="StorageFacts.cs", label="Entry Unk.ForEach", span=""];
m9_48 [cluster="Unk.Given", file="StorageFacts.cs", label="Entry Unk.Given", span=""];
m9_169 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="328-328"];
m9_170 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="StorageFacts.cs", label="Assert.False(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="330-330"];
m9_171 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="328-328"];
m9_136 [cluster="HangFire.Tests.TableAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", file="StorageFacts.cs", label="Entry HangFire.Tests.TableAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", span="8-8"];
m9_228 [cluster="Unk.ContainsKey", file="StorageFacts.cs", label="Entry Unk.ContainsKey", span=""];
m9_212 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", span="401-401"];
m9_213 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StorageFacts.cs", label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="403-404"];
m9_214 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StorageFacts.cs", label="Assert.NotNull(entry)", span="405-405"];
m9_215 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StorageFacts.cs", label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="407-407"];
m9_216 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StorageFacts.cs", label="Assert.NotNull(history)", span="408-408"];
m9_218 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StorageFacts.cs", label="Assert.True(history.ContainsKey(property.Key))", span="412-412"];
m9_219 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StorageFacts.cs", label="Assert.Equal(property.Value, history[property.Key])", span="413-413"];
m9_217 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StorageFacts.cs", label=_stateProperties, span="410-410"];
m9_220 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", span="401-401"];
m9_121 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="249-249"];
m9_122 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="StorageFacts.cs", label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="251-256"];
m9_123 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="StorageFacts.cs", label="keys.ForEach(x =>\r\n            {\r\n                var ttl = Redis.Client.GetTimeToLive(x);\r\n                Assert.True(\r\n                    ttl.Seconds == -1,\r\n                    String.Format(''TTL for the '{0}' key is '{1}''', x, ttl));\r\n            })", span="258-264"];
m9_124 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="249-249"];
m9_120 [cluster="Unk.PopItemFromList", file="StorageFacts.cs", label="Entry Unk.PopItemFromList", span=""];
m9_68 [cluster="TestStateChangingFilter.cstr", file="StorageFacts.cs", label="Entry TestStateChangingFilter.cstr", span=""];
m9_13 [cluster="HangFire.States.ProcessingState.ProcessingState(string)", file="StorageFacts.cs", label="Entry HangFire.States.ProcessingState.ProcessingState(string)", span="28-28"];
m9_29 [cluster="Mock<JobState>.cstr", file="StorageFacts.cs", label="Entry Mock<JobState>.cstr", span=""];
m9_221 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="StorageFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m9_22 [cluster="HangFire.States.EnqueuedState.EnqueuedState()", file="StorageFacts.cs", label="Entry HangFire.States.EnqueuedState.EnqueuedState()", span="25-25"];
m9_94 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="207-207"];
m9_95 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="StorageFacts.cs", label="Assert.Equal(name, _state.StateName)", span="209-209"];
m9_96 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="207-207"];
m9_59 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", span="116-116"];
m9_60 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", file="StorageFacts.cs", label="_filters.Add(new TestStateChangingFilter(name, _stateChangingResults))", span="118-118"];
m9_61 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", span="116-116"];
m9_10 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="58-58"];
m9_11 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", color=green, community=0, file="StorageFacts.cs", label="_state = new ProcessingState(''TestServer'')\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", prediction=35, span="60-63"];
m9_12 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="58-58"];
m9_18 [cluster="System.DateTime.AddDays(double)", file="StorageFacts.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m9_195 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", span="386-386"];
m9_196 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", file="StorageFacts.cs", label="_oldStateDescriptorMock.Verify(\r\n                x => x.Unapply(It.Is<StateApplyingContext>(y => y.JobId == JobSteps.DefaultJobId)))", span="388-389"];
m9_197 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", span="386-386"];
m9_227 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", span="418-418"];
m9_222 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", span="418-418"];
m9_223 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="StorageFacts.cs", label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="420-421"];
m9_224 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="StorageFacts.cs", label=_stateProperties, span="423-423"];
m9_225 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="StorageFacts.cs", label="Assert.True(stateEntry.ContainsKey(property.Key))", span="425-425"];
m9_226 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="StorageFacts.cs", label="Assert.Equal(property.Value, stateEntry[property.Key])", span="426-426"];
m9_229 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", span="431-431"];
m9_230 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StorageFacts.cs", label="Assert.Equal(table.RowCount, _stateChangingResults.Count)", span="433-433"];
m9_232 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StorageFacts.cs", label="i < table.RowCount", span="435-435"];
m9_233 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StorageFacts.cs", label="Assert.Equal(table.Rows[i][''Filter''], _stateChangingResults[i])", span="437-437"];
m9_231 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StorageFacts.cs", label="var i = 0", span="435-435"];
m9_234 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StorageFacts.cs", label="i++", span="435-435"];
m9_235 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", span="431-431"];
m9_209 [cluster="lambda expression", file="StorageFacts.cs", label="Entry lambda expression", span="396-396"];
m9_34 [cluster="lambda expression", file="StorageFacts.cs", label="Entry lambda expression", span="88-88"];
m9_37 [cluster="lambda expression", file="StorageFacts.cs", label="Entry lambda expression", span="89-89"];
m9_35 [cluster="lambda expression", file="StorageFacts.cs", label="x.StateName", span="88-88"];
m9_36 [cluster="lambda expression", file="StorageFacts.cs", label="Exit lambda expression", span="88-88"];
m9_38 [cluster="lambda expression", file="StorageFacts.cs", label="x.GetData(It.IsAny<JobMethod>())", span="89-89"];
m9_39 [cluster="lambda expression", file="StorageFacts.cs", label="Exit lambda expression", span="89-89"];
m9_50 [cluster="lambda expression", file="StorageFacts.cs", label="Entry lambda expression", span="100-100"];
m9_53 [cluster="lambda expression", file="StorageFacts.cs", label="Entry lambda expression", span="100-100"];
m9_56 [cluster="lambda expression", file="StorageFacts.cs", label="Entry lambda expression", span="101-101"];
m9_51 [cluster="lambda expression", file="StorageFacts.cs", label="x[''Name'']", span="100-100"];
m9_52 [cluster="lambda expression", file="StorageFacts.cs", label="Exit lambda expression", span="100-100"];
m9_54 [cluster="lambda expression", file="StorageFacts.cs", label="x[''Value'']", span="100-100"];
m9_55 [cluster="lambda expression", file="StorageFacts.cs", label="Exit lambda expression", span="100-100"];
m9_57 [cluster="lambda expression", file="StorageFacts.cs", label="x.GetData(It.IsAny<JobMethod>())", span="101-101"];
m9_58 [cluster="lambda expression", file="StorageFacts.cs", label="Exit lambda expression", span="101-101"];
m9_103 [cluster="lambda expression", file="StorageFacts.cs", label="Entry lambda expression", span="222-229"];
m9_104 [cluster="lambda expression", file="StorageFacts.cs", label="var ttl = Redis.Client.GetTimeToLive(x)", span="224-224"];
m9_105 [cluster="lambda expression", file="StorageFacts.cs", label="Assert.True(\r\n                        ttl.TotalSeconds > 0,\r\n                        String.Format(\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl))", span="225-228"];
m9_106 [cluster="lambda expression", file="StorageFacts.cs", label="Exit lambda expression", span="222-229"];
m9_125 [cluster="lambda expression", file="StorageFacts.cs", label="Entry lambda expression", span="258-264"];
m9_126 [cluster="lambda expression", file="StorageFacts.cs", label="var ttl = Redis.Client.GetTimeToLive(x)", span="260-260"];
m9_127 [cluster="lambda expression", file="StorageFacts.cs", label="Assert.True(\r\n                    ttl.Seconds == -1,\r\n                    String.Format(''TTL for the '{0}' key is '{1}''', x, ttl))", span="261-263"];
m9_128 [cluster="lambda expression", file="StorageFacts.cs", label="Exit lambda expression", span="258-264"];
m9_199 [cluster="lambda expression", file="StorageFacts.cs", label="Entry lambda expression", span="389-389"];
m9_200 [cluster="lambda expression", file="StorageFacts.cs", label="x.Unapply(It.Is<StateApplyingContext>(y => y.JobId == JobSteps.DefaultJobId))", span="389-389"];
m9_201 [cluster="lambda expression", file="StorageFacts.cs", label="Exit lambda expression", span="389-389"];
m9_203 [cluster="lambda expression", file="StorageFacts.cs", label="Entry lambda expression", span="389-389"];
m9_204 [cluster="lambda expression", file="StorageFacts.cs", label="y.JobId == JobSteps.DefaultJobId", span="389-389"];
m9_205 [cluster="lambda expression", file="StorageFacts.cs", label="Exit lambda expression", span="389-389"];
m9_210 [cluster="lambda expression", file="StorageFacts.cs", label="x.Unapply(It.IsAny<StateApplyingContext>())", span="396-396"];
m9_211 [cluster="lambda expression", file="StorageFacts.cs", label="Exit lambda expression", span="396-396"];
m9_175 [cluster="Unk.SetContainsItem", file="StorageFacts.cs", label="Entry Unk.SetContainsItem", span=""];
m9_62 [cluster="HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", file="StorageFacts.cs", label="Entry HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", span="14-14"];
m9_249 [cluster="Unk.ToList", file="StorageFacts.cs", label="Entry Unk.ToList", span=""];
m9_108 [cluster="Unk.Format", file="StorageFacts.cs", label="Entry Unk.Format", span=""];
m9_149 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="301-301"];
m9_150 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="StorageFacts.cs", label="Assert.False(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="303-303"];
m9_151 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="301-301"];
m9_31 [cluster="Unk.Returns", file="StorageFacts.cs", label="Entry Unk.Returns", span=""];
m9_33 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="StorageFacts.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m9_77 [cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="StorageFacts.cs", label="Entry HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", span="41-41"];
m9_80 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", span="181-181"];
m9_81 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", file="StorageFacts.cs", label="When(String.Format(\r\n                ''I change the state of the '{0}' job to the '{1}''',\r\n                JobSteps.DefaultJobId,\r\n                state))", span="183-186"];
m9_82 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", span="181-181"];
m9_107 [cluster="Unk.GetTimeToLive", file="StorageFacts.cs", label="Entry Unk.GetTimeToLive", span=""];
m9_63 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="StorageFacts.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m9_69 [cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", span="131-131"];
m9_70 [cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="StorageFacts.cs", label="_filters.Add(new TestStateChangedFilter(name, _stateAppliedResults))", span="133-133"];
m9_71 [cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", span="131-131"];
m9_42 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", span="96-96"];
m9_43 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="StorageFacts.cs", label="Given(String.Format(''a '{0}' state'', state))", span="98-98"];
m9_44 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="StorageFacts.cs", label="_stateProperties = table.Rows.ToDictionary(x => x[''Name''], x => x[''Value''])", span="100-100"];
m9_45 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="StorageFacts.cs", label="_stateMocks[state].Setup(x => x.GetData(It.IsAny<JobMethod>()))\r\n                .Returns(_stateProperties)", span="101-102"];
m9_46 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", span="96-96"];
m9_97 [cluster="Unk.Equal", file="StorageFacts.cs", label="Entry Unk.Equal", span=""];
m9_206 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", span="393-393"];
m9_207 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", file="StorageFacts.cs", label="_oldStateDescriptorMock.Verify(\r\n                x => x.Unapply(It.IsAny<StateApplyingContext>()),\r\n                Times.Never)", span="395-397"];
m9_208 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", span="393-393"];
m9_193 [cluster="Unk.RemoveStartFromList", file="StorageFacts.cs", label="Entry Unk.RemoveStartFromList", span=""];
m9_176 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="340-340"];
m9_177 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="StorageFacts.cs", label="var job = Redis.Client.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId))", span="342-342"];
m9_178 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="StorageFacts.cs", label="Assert.Equal(state, job[''State''])", span="343-343"];
m9_179 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="340-340"];
m9_110 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="233-233"];
m9_111 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="StorageFacts.cs", label="Assert.Equal(\r\n                changeType == ''increase'' ? ''1'' : ''0'',\r\n                Redis.Client.GetValue(String.Format(''hangfire:stats:succeeded'')))", span="235-237"];
m9_112 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="233-233"];
m9_72 [cluster="HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", file="StorageFacts.cs", label="Entry HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", span="14-14"];
m9_236 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", span="442-442"];
m9_237 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="StorageFacts.cs", label="Assert.Equal(0, _stateChangingResults.Count)", span="444-444"];
m9_238 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", span="442-442"];
m9_8 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="StorageFacts.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m9_23 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAState(string)", span="85-85"];
m9_24 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="StorageFacts.cs", label="var mock = new Mock<JobState>()", span="87-87"];
m9_25 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="StorageFacts.cs", label="mock.Setup(x => x.StateName).Returns(state)", span="88-88"];
m9_27 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="StorageFacts.cs", label="_stateMocks.Add(state, mock)", span="92-92"];
m9_26 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="StorageFacts.cs", label="mock.Setup(x => x.GetData(It.IsAny<JobMethod>()))\r\n                .Returns(new Dictionary<string, string>())", span="89-90"];
m9_28 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.GivenAState(string)", span="85-85"];
m9_194 [cluster="Unk.NotNull", file="StorageFacts.cs", label="Entry Unk.NotNull", span=""];
m9_30 [cluster="Unk.Setup", file="StorageFacts.cs", label="Entry Unk.Setup", span=""];
m9_14 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="67-67"];
m9_15 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", color=green, community=0, file="StorageFacts.cs", label="_state = new ScheduledState(DateTime.UtcNow.AddDays(1))\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", prediction=36, span="69-72"];
m9_16 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="67-67"];
m9_172 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="334-334"];
m9_173 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="StorageFacts.cs", label="Assert.True(Redis.Client.SetContainsItem(''hangfire:queues'', queue))", span="336-336"];
m9_174 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="334-334"];
m9_17 [cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)", file="StorageFacts.cs", label="Entry HangFire.States.ScheduledState.ScheduledState(System.DateTime)", span="27-27"];
m9_146 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="295-295"];
m9_147 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="StorageFacts.cs", label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="297-297"];
m9_148 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="295-295"];
m9_141 [cluster="Unk.GetSortedSetCount", file="StorageFacts.cs", label="Entry Unk.GetSortedSetCount", span=""];
m9_198 [cluster="Unk.Verify", file="StorageFacts.cs", label="Entry Unk.Verify", span=""];
m9_115 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="241-241"];
m9_116 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="StorageFacts.cs", label="Assert.Equal(1, Redis.Client.GetListCount(''hangfire:succeeded''))", span="243-243"];
m9_117 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="StorageFacts.cs", label="Assert.Equal(JobSteps.DefaultJobId, Redis.Client.PopItemFromList(\r\n                ''hangfire:succeeded''))", span="244-245"];
m9_118 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="241-241"];
m9_143 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="289-289"];
m9_144 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="StorageFacts.cs", label="Assert.Equal(0, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="291-291"];
m9_145 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="289-289"];
m9_184 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="347-347"];
m9_181 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="347-347"];
m9_182 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="StorageFacts.cs", label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="349-350"];
m9_183 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="StorageFacts.cs", label="TableAssert.ContainsFollowingItems(table, stateEntry)", span="351-351"];
m9_9 [cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="StorageFacts.cs", label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="28-28"];
m9_142 [cluster="Unk.SortedSetContainsItem", file="StorageFacts.cs", label="Entry Unk.SortedSetContainsItem", span=""];
m9_161 [cluster="System.DateTime.AddSeconds(double)", file="StorageFacts.cs", label="Entry System.DateTime.AddSeconds(double)", span="0-0"];
m9_113 [cluster="string.Format(string, params object[])", file="StorageFacts.cs", label="Entry string.Format(string, params object[])", span="0-0"];
m9_98 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="213-213"];
m9_99 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="StorageFacts.cs", label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="215-220"];
m9_100 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="StorageFacts.cs", label="keys.ForEach(x =>\r\n                {\r\n                    var ttl = Redis.Client.GetTimeToLive(x);\r\n                    Assert.True(\r\n                        ttl.TotalSeconds > 0,\r\n                        String.Format(\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl));\r\n                })", span="222-229"];
m9_101 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="213-213"];
m9_49 [cluster="Unk.ToDictionary", file="StorageFacts.cs", label="Entry Unk.ToDictionary", span=""];
m9_180 [cluster="Unk.GetAllEntriesFromHash", file="StorageFacts.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m9_4 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheFailedState()", span="48-48"];
m9_5 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="StorageFacts.cs", label="_failedException = new InvalidOperationException(''Hello'')", span="50-50"];
m9_6 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="StorageFacts.cs", label="_state = new FailedState(_failedException)\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="51-54"];
m9_7 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheFailedState()", span="48-48"];
m9_160 [cluster="HangFire.Common.JobHelper.FromTimestamp(long)", file="StorageFacts.cs", label="Entry HangFire.Common.JobHelper.FromTimestamp(long)", span="41-41"];
m9_47 [cluster="string.Format(string, object)", file="StorageFacts.cs", label="Entry string.Format(string, object)", span="0-0"];
m9_192 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="355-355"];
m9_186 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="355-355"];
m9_187 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StorageFacts.cs", label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="357-358"];
m9_191 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StorageFacts.cs", label="TableAssert.ContainsFollowingItems(table, history)", span="364-364"];
m9_188 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StorageFacts.cs", label="Assert.NotNull(entry)", span="359-359"];
m9_189 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StorageFacts.cs", label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="361-361"];
m9_190 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StorageFacts.cs", label="Assert.NotNull(history)", span="362-362"];
m9_40 [cluster="Unk.>", file="StorageFacts.cs", label="Entry Unk.>", span=""];
m9_159 [cluster="Unk.GetItemScoreInSortedSet", file="StorageFacts.cs", label="Entry Unk.GetItemScoreInSortedSet", span=""];
m9_78 [cluster="HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", file="StorageFacts.cs", label="Entry HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", span="15-15"];
m9_119 [cluster="Unk.GetListCount", file="StorageFacts.cs", label="Entry Unk.GetListCount", span=""];
m9_41 [cluster="Unk.GetData", file="StorageFacts.cs", label="Entry Unk.GetData", span=""];
m9_3 [cluster="HangFire.States.SucceededState.SucceededState()", file="StorageFacts.cs", label="Entry HangFire.States.SucceededState.SucceededState()", span="23-23"];
m9_0 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="42-42"];
m9_1 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="StorageFacts.cs", label="_state = new SucceededState { Reason = ''SomeReason'' }", span="44-44"];
m9_2 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="42-42"];
m9_32 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="StorageFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m9_84 [cluster="Unk.When", file="StorageFacts.cs", label="Entry Unk.When", span=""];
m9_129 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="268-268"];
m9_130 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="StorageFacts.cs", label="Assert.Equal(0, Redis.Client.GetListCount(''hangfire:succeeded''))", span="270-270"];
m9_131 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="268-268"];
m9_132 [cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="274-274"];
m9_133 [cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="StorageFacts.cs", label="TableAssert.ContainsFollowingItems(\r\n                table,\r\n                _state.GetData(_defaultData))", span="276-278"];
m9_134 [cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="274-274"];
m9_247 [cluster="Unk.GetAllItemsFromList", file="StorageFacts.cs", label="Entry Unk.GetAllItemsFromList", span=""];
m9_85 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", span="190-190"];
m9_86 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", file="StorageFacts.cs", label="var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="192-193"];
m9_87 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", file="StorageFacts.cs", label="stateMachine.ChangeState(jobId, _stateMocks[state].Object)", span="194-194"];
m9_88 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", span="190-190"];
m9_248 [cluster="Unk.Select", file="StorageFacts.cs", label="Entry Unk.Select", span=""];
m9_79 [cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="StorageFacts.cs", label="Entry HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", span="113-113"];
m9_73 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.WhenIApplyTheState()", span="173-173"];
m9_74 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="StorageFacts.cs", label="var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="175-176"];
m9_75 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="StorageFacts.cs", label="stateMachine.ChangeState(JobSteps.DefaultJobId, _state)", span="177-177"];
m9_76 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.WhenIApplyTheState()", span="173-173"];
m9_114 [cluster="Unk.GetValue", file="StorageFacts.cs", label="Entry Unk.GetValue", span=""];
m9_109 [cluster="Unk.True", file="StorageFacts.cs", label="Entry Unk.True", span=""];
m9_185 [cluster="Unk.ContainsFollowingItems", file="StorageFacts.cs", label="Entry Unk.ContainsFollowingItems", span=""];
m9_250 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StorageFacts.cs", label="Entry HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", span="461-461"];
m9_251 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StorageFacts.cs", label="Assert.Equal(table.RowCount, _stateAppliedResults.Count)", span="463-463"];
m9_253 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StorageFacts.cs", label="i < table.RowCount", span="465-465"];
m9_254 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StorageFacts.cs", label="Assert.Equal(table.Rows[i][''Method''], _stateAppliedResults[i])", span="467-467"];
m9_252 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StorageFacts.cs", label="var i = 0", span="465-465"];
m9_255 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StorageFacts.cs", label="i++", span="465-465"];
m9_256 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StorageFacts.cs", label="Exit HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", span="461-461"];
m9_257 [file="StorageFacts.cs", label="HangFire.Tests.States.StateSteps", span=""];
m10_12 [cluster="Unk.>", file="StorageOptionsFacts.cs", label="Entry Unk.>", span=""];
m10_7 [cluster="Unk.True", file="StorageOptionsFacts.cs", label="Entry Unk.True", span=""];
m10_6 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="StorageOptionsFacts.cs", label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
m10_23 [cluster="System.TimeSpan.FromSeconds(double)", file="StorageOptionsFacts.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m10_29 [cluster="Unk.Equal", file="StorageOptionsFacts.cs", label="Entry Unk.Equal", span=""];
m10_16 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="StorageOptionsFacts.cs", label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", span="26-26"];
m10_17 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="StorageOptionsFacts.cs", label="var options = new SqlServerStorageOptions()", span="28-28"];
m10_18 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="StorageOptionsFacts.cs", label="Assert.Throws<ArgumentException>(\r\n                () => options.QueuePollInterval = TimeSpan.FromSeconds(-1))", span="29-30"];
m10_19 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="StorageOptionsFacts.cs", label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", span="26-26"];
m10_24 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="StorageOptionsFacts.cs", label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", span="34-34"];
m10_25 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="StorageOptionsFacts.cs", label="var options = new SqlServerStorageOptions()", span="36-36"];
m10_26 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="StorageOptionsFacts.cs", label="options.QueuePollInterval = TimeSpan.FromSeconds(1)", span="37-37"];
m10_27 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="StorageOptionsFacts.cs", label="Assert.Equal(TimeSpan.FromSeconds(1), options.QueuePollInterval)", span="38-38"];
m10_28 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="StorageOptionsFacts.cs", label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", span="34-34"];
m10_8 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="StorageOptionsFacts.cs", label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", span="18-18"];
m10_9 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="StorageOptionsFacts.cs", label="var options = new SqlServerStorageOptions()", span="20-20"];
m10_10 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="StorageOptionsFacts.cs", label="Assert.Throws<ArgumentException>(\r\n                () => options.QueuePollInterval = TimeSpan.Zero)", span="21-22"];
m10_11 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="StorageOptionsFacts.cs", label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", span="18-18"];
m10_20 [cluster="lambda expression", file="StorageOptionsFacts.cs", label="Entry lambda expression", span="30-30"];
m10_14 [cluster="lambda expression", file="StorageOptionsFacts.cs", label="options.QueuePollInterval = TimeSpan.Zero", span="22-22"];
m10_13 [cluster="lambda expression", file="StorageOptionsFacts.cs", label="Entry lambda expression", span="22-22"];
m10_15 [cluster="lambda expression", file="StorageOptionsFacts.cs", label="Exit lambda expression", span="22-22"];
m10_21 [cluster="lambda expression", file="StorageOptionsFacts.cs", label="options.QueuePollInterval = TimeSpan.FromSeconds(-1)", span="30-30"];
m10_22 [cluster="lambda expression", file="StorageOptionsFacts.cs", label="Exit lambda expression", span="30-30"];
m10_0 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="StorageOptionsFacts.cs", label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", span="8-8"];
m10_1 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="StorageOptionsFacts.cs", label="var options = new SqlServerStorageOptions()", span="10-10"];
m10_2 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="StorageOptionsFacts.cs", label="Assert.True(options.QueuePollInterval > TimeSpan.Zero)", span="12-12"];
m10_4 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="StorageOptionsFacts.cs", label="Assert.True(options.PrepareSchemaIfNecessary)", span="14-14"];
m10_5 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="StorageOptionsFacts.cs", label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", span="8-8"];
m10_30 [file="StorageOptionsFacts.cs", label=options, span=""];
m10_31 [file="StorageOptionsFacts.cs", label=options, span=""];
m11_25 [cluster="System.Threading.WaitHandle.WaitOne()", file="WorkerManager.cs", label="Entry System.Threading.WaitHandle.WaitOne()", span="0-0"];
m11_29 [cluster="HangFire.Server.ServerComponentRunnerCollection.Dispose()", file="WorkerManager.cs", label="Entry HangFire.Server.ServerComponentRunnerCollection.Dispose()", span="52-52"];
m11_21 [cluster="HangFire.Server.WorkerManager.Execute(System.Threading.CancellationToken)", color=green, community=0, file="WorkerManager.cs", label="_workerRunners.Start()", prediction=37, span="51-51"];
m11_20 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioTearDown()", file="WorkerManager.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioTearDown()", span="56-56"];
m11_22 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", color=green, community=0, file="WorkerManager.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", prediction=38, span="61-61"];
m11_9 [cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", file="WorkerManager.cs", label="workerRunners.Add(CreateWorkerRunner(workerContext))", span="41-41"];
m11_10 [cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", file="WorkerManager.cs", label="i++", span="36-36"];
m11_11 [cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", file="WorkerManager.cs", label="_workerRunners = new ServerComponentRunnerCollection(workerRunners)", span="44-44"];
m11_12 [cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", file="WorkerManager.cs", label="Exit HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", span="29-29"];
m11_65 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerManager.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", span="152-152"];
m11_66 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerManager.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out job by the \'checked\' flag in the \'Fetched\' state should not be re-queue'' +\r\n                    ''d'', new string[] {\r\n                        ''checkpoint-2''})", span="154-156"];
m11_67 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerManager.cs", label="this.ScenarioSetup(scenarioInfo)", span="158-158"];
m11_68 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerManager.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="160-160"];
m11_69 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerManager.cs", label="testRunner.And(''it was checked a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="162-162"];
m11_70 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerManager.cs", label="testRunner.And(''it was fetched a millisecond ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="164-164"];
m11_71 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerManager.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="166-166"];
m11_72 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerManager.cs", label="testRunner.Then(''the dequeued jobs list still contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="168-168"];
m11_73 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerManager.cs", label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="170-170"];
m11_74 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerManager.cs", label="testRunner.And(''the job has the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="172-172"];
m11_75 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerManager.cs", label="testRunner.And(''the job has the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="174-174"];
m11_76 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerManager.cs", label="this.ScenarioCleanup()", span="176-176"];
m11_77 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="WorkerManager.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", span="152-152"];
m11_53 [cluster="Unk.And", file="WorkerManager.cs", label="Entry Unk.And", span=""];
m11_112 [cluster="Unk.But", file="WorkerManager.cs", label="Entry Unk.But", span=""];
m11_5 [cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", file="WorkerManager.cs", label="var workerRunners = new List<IServerComponentRunner>(workerCount)", span="35-35"];
m11_78 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerManager.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", span="184-184"];
m11_79 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerManager.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out jobs in the \'Fetched\' state should be re-queued'', new string[] {\r\n                        ''checkpoint-2''})", span="186-187"];
m11_80 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerManager.cs", label="this.ScenarioSetup(scenarioInfo)", span="189-189"];
m11_81 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerManager.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="191-191"];
m11_82 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerManager.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="193-193"];
m11_83 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerManager.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="195-195"];
m11_84 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerManager.cs", label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="197-197"];
m11_85 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerManager.cs", label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="199-199"];
m11_86 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerManager.cs", label="testRunner.And(''the job does not have the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="201-201"];
m11_87 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerManager.cs", label="testRunner.And(''the job does not have the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="203-203"];
m11_88 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerManager.cs", label="this.ScenarioCleanup()", span="205-205"];
m11_89 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="WorkerManager.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", span="184-184"];
m11_26 [cluster="HangFire.Server.WorkerManager.Dispose()", file="WorkerManager.cs", label="Entry HangFire.Server.WorkerManager.Dispose()", span="61-61"];
m11_27 [cluster="HangFire.Server.WorkerManager.Dispose()", file="WorkerManager.cs", label="_workerRunners.Dispose()", span="63-63"];
m11_28 [cluster="HangFire.Server.WorkerManager.Dispose()", file="WorkerManager.cs", label="Exit HangFire.Server.WorkerManager.Dispose()", span="61-61"];
m11_30 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerManager.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", span="76-76"];
m11_31 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", color=green, community=0, file="WorkerManager.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''A job in the implicit \'Dequeued\' state moved to the \'Checked\' state'', new string[] {\r\n                        ''checkpoint-1-1''})", prediction=39, span="78-79"];
m11_32 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerManager.cs", label="this.ScenarioSetup(scenarioInfo)", span="81-81"];
m11_24 [cluster="HangFire.Server.ServerComponentRunnerCollection.Start()", file="WorkerManager.cs", label="Entry HangFire.Server.ServerComponentRunnerCollection.Start()", span="36-36"];
m11_14 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="WorkerManager.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", span="46-46"];
m11_0 [cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", file="WorkerManager.cs", label="Entry HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", span="29-29"];
m11_1 [cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", file="WorkerManager.cs", label="sharedContext == null", span="31-31"];
m11_2 [cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", file="WorkerManager.cs", label="throw new ArgumentNullException(''sharedContext'');", span="31-31"];
m11_3 [cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", file="WorkerManager.cs", label="workerCount <= 0", span="33-33"];
m11_4 [cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", file="WorkerManager.cs", label="throw new ArgumentOutOfRangeException(''workerCount'', ''Worker count value must be more than zero.'');", span="33-33"];
m11_17 [cluster="HangFire.Server.WorkerManager.CreateWorkerRunner(HangFire.Server.WorkerContext)", file="WorkerManager.cs", label="Entry HangFire.Server.WorkerManager.CreateWorkerRunner(HangFire.Server.WorkerContext)", span="71-71"];
m11_90 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerManager.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", span="214-214"];
m11_91 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerManager.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Job\'s state is changed to the Enqueued when the job is being timed out after proc'' +\r\n                    ''eeding to the Processing state'', new string[] {\r\n                        ''checkpoint-3''})", span="216-218"];
m11_92 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerManager.cs", label="this.ScenarioSetup(scenarioInfo)", span="220-220"];
m11_93 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerManager.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="222-222"];
m11_94 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerManager.cs", label="testRunner.And(''its state is Processing'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="224-224"];
m11_95 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerManager.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="226-226"];
m11_96 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerManager.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="228-228"];
m11_97 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerManager.cs", label="testRunner.Then(''the job moved to the Enqueued state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="230-230"];
m11_98 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerManager.cs", label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="232-232"];
m11_99 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerManager.cs", label="this.ScenarioCleanup()", span="234-234"];
m11_100 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="WorkerManager.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", span="214-214"];
m11_13 [cluster="Unk.OnFeatureEnd", file="WorkerManager.cs", label="Entry Unk.OnFeatureEnd", span=""];
m11_7 [cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", file="WorkerManager.cs", label="i <= workerCount", span="36-36"];
m11_40 [cluster="Unk.When", file="WorkerManager.cs", label="Entry Unk.When", span=""];
m11_122 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerManager.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", span="290-290"];
m11_123 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerManager.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''When the server could not find the job\'s type, the job is moved to the Failed sta'' +\r\n                    ''te'', ((string[])(null)))", span="292-293"];
m11_124 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerManager.cs", label="this.ScenarioSetup(scenarioInfo)", span="295-295"];
m11_125 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerManager.cs", label="testRunner.Given(''a dequeued job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="297-297"];
m11_126 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerManager.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="299-299"];
m11_127 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerManager.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="301-301"];
m11_128 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerManager.cs", label="testRunner.Then(''the job moved to the Failed state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="303-303"];
m11_129 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerManager.cs", label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="305-305"];
m11_130 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerManager.cs", label="this.ScenarioCleanup()", span="307-307"];
m11_131 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="WorkerManager.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", span="290-290"];
m11_33 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", color=green, community=1, file="WorkerManager.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", prediction=40, span="83-83"];
m11_34 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerManager.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85"];
m11_35 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerManager.cs", label="testRunner.Then(''it marks the job as \'checked\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="87-87"];
m11_101 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerManager.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", span="242-242"];
m11_102 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerManager.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out job in the Succeeded state does not move to the Enqueued state'', new string[] {\r\n                        ''checkpoint-4''})", span="244-245"];
m11_103 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerManager.cs", label="this.ScenarioSetup(scenarioInfo)", span="247-247"];
m11_104 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerManager.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="249-249"];
m11_105 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerManager.cs", label="testRunner.And(''its state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="251-251"];
m11_106 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerManager.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="253-253"];
m11_107 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerManager.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="255-255"];
m11_108 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerManager.cs", label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="257-257"];
m11_109 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerManager.cs", label="testRunner.But(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="259-259"];
m11_110 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerManager.cs", label="this.ScenarioCleanup()", span="261-261"];
m11_111 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="WorkerManager.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", span="242-242"];
m11_42 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerManager.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", span="97-97"];
m11_43 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerManager.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Non-timed out job in the \'Checked\' state should not be requeued'', new string[] {\r\n                        ''checkpoint-1-2''})", span="99-100"];
m11_44 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerManager.cs", label="this.ScenarioSetup(scenarioInfo)", span="102-102"];
m11_45 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerManager.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="104-104"];
m11_46 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerManager.cs", label="testRunner.And(''it was checked a millisecond ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="106-106"];
m11_47 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerManager.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="108-108"];
m11_48 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerManager.cs", label="testRunner.Then(''the dequeued jobs list still contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="110-110"];
m11_49 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerManager.cs", label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="112-112"];
m11_50 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerManager.cs", label="testRunner.And(''the job has the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="114-114"];
m11_51 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerManager.cs", label="this.ScenarioCleanup()", span="116-116"];
m11_52 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="WorkerManager.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", span="97-97"];
m11_54 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerManager.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", span="124-124"];
m11_55 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerManager.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed job in the \'Checked\' state should be requeued'', new string[] {\r\n                        ''checkpoint-1-2''})", span="126-127"];
m11_56 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerManager.cs", label="this.ScenarioSetup(scenarioInfo)", span="129-129"];
m11_57 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerManager.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="131-131"];
m11_58 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerManager.cs", label="testRunner.And(''it was checked a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="133-133"];
m11_59 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerManager.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="135-135"];
m11_60 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerManager.cs", label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="137-137"];
m11_61 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerManager.cs", label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="139-139"];
m11_62 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerManager.cs", label="testRunner.And(''the job does not have the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="141-141"];
m11_63 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerManager.cs", label="this.ScenarioCleanup()", span="143-143"];
m11_64 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="WorkerManager.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", span="124-124"];
m11_36 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="WorkerManager.cs", label="this.ScenarioCleanup()", span="89-89"];
m11_38 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="WorkerManager.cs", label="HangFire.Server.WorkerManager", span=""];
m11_19 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioTearDown()", file="WorkerManager.cs", label="testRunner.OnScenarioEnd()", span="58-58"];
m11_37 [cluster="HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", file="WorkerManager.cs", label="Entry HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", span="24-24"];
m11_41 [cluster="Unk.Then", file="WorkerManager.cs", label="Entry Unk.Then", span=""];
m11_39 [cluster="Unk.Given", file="WorkerManager.cs", label="Entry Unk.Given", span=""];
m11_6 [cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", file="WorkerManager.cs", label="var i = 1", span="36-36"];
m11_18 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioTearDown()", file="WorkerManager.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioTearDown()", span="56-56"];
m11_132 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerManager.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", span="314-314"];
m11_133 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerManager.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Succeeded job of non-existing type will not be moved to the failed state'', ((string[])(null)))", span="316-316"];
m11_134 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerManager.cs", label="this.ScenarioSetup(scenarioInfo)", span="318-318"];
m11_135 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerManager.cs", label="testRunner.Given(''a dequeued job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="320-320"];
m11_136 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerManager.cs", label="testRunner.And(''its state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="322-322"];
m11_137 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerManager.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="324-324"];
m11_138 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerManager.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="326-326"];
m11_139 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerManager.cs", label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="328-328"];
m11_140 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerManager.cs", label="testRunner.But(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="330-330"];
m11_141 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerManager.cs", label="this.ScenarioCleanup()", span="332-332"];
m11_142 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="WorkerManager.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", span="314-314"];
m11_8 [cluster="Unk.OnFeatureStart", file="WorkerManager.cs", label="Entry Unk.OnFeatureStart", span=""];
m11_113 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerManager.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", span="268-268"];
m11_114 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerManager.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Job is being enqueued on its actual queue after timing out'', ((string[])(null)))", span="270-270"];
m11_115 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerManager.cs", label="this.ScenarioSetup(scenarioInfo)", span="272-272"];
m11_116 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerManager.cs", label="testRunner.And(''a dequeued job from the \'test\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="274-274"];
m11_117 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerManager.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="276-276"];
m11_118 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerManager.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="278-278"];
m11_119 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerManager.cs", label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="280-280"];
m11_120 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerManager.cs", label="this.ScenarioCleanup()", span="282-282"];
m11_121 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", file="WorkerManager.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItsActualQueueAfterTimingOut()", span="268-268"];
m11_143 [file="WorkerManager.cs", label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", span=""];
m12_47 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Start_CallsStartMethodOnAllWorkers()", file="WorkerManagerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerManagerFacts.Start_CallsStartMethodOnAllWorkers()", span="69-69"];
m12_49 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Start_CallsStartMethodOnAllWorkers()", file="WorkerManagerFacts.cs", label="_workerRunners[0].Verify(x => x.Start())", span="73-73"];
m12_50 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Start_CallsStartMethodOnAllWorkers()", file="WorkerManagerFacts.cs", label="_workerRunners[1].Verify(x => x.Start())", span="74-74"];
m12_51 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Start_CallsStartMethodOnAllWorkers()", file="WorkerManagerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerManagerFacts.Start_CallsStartMethodOnAllWorkers()", span="69-69"];
m12_10 [cluster="Mock<IStateMachineFactory>.cstr", file="WorkerManagerFacts.cs", label="Entry Mock<IStateMachineFactory>.cstr", span=""];
m12_34 [cluster="Unk.Equal", file="WorkerManagerFacts.cs", label="Entry Unk.Equal", span=""];
m12_60 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Stop_CallsStopMethodOnAllWorkers()", file="WorkerManagerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerManagerFacts.Stop_CallsStopMethodOnAllWorkers()", span="78-78"];
m12_62 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Stop_CallsStopMethodOnAllWorkers()", file="WorkerManagerFacts.cs", label="_workerRunners[0].Verify(x => x.Stop())", span="82-82"];
m12_63 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Stop_CallsStopMethodOnAllWorkers()", file="WorkerManagerFacts.cs", label="_workerRunners[1].Verify(x => x.Stop())", span="83-83"];
m12_64 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Stop_CallsStopMethodOnAllWorkers()", file="WorkerManagerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerManagerFacts.Stop_CallsStopMethodOnAllWorkers()", span="78-78"];
m12_65 [cluster="Unk.Stop", file="WorkerManagerFacts.cs", label="Entry Unk.Stop", span=""];
m12_72 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Dispose_CallsDisposeMethodOnAllWorkers()", file="WorkerManagerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerManagerFacts.Dispose_CallsDisposeMethodOnAllWorkers()", span="87-87"];
m12_73 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Dispose_CallsDisposeMethodOnAllWorkers()", file="WorkerManagerFacts.cs", label="_manager.Object.Dispose()", span="89-89"];
m12_74 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Dispose_CallsDisposeMethodOnAllWorkers()", file="WorkerManagerFacts.cs", label="_workerRunners[0].Verify(x => x.Dispose())", span="91-91"];
m12_75 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Dispose_CallsDisposeMethodOnAllWorkers()", file="WorkerManagerFacts.cs", label="_workerRunners[1].Verify(x => x.Dispose())", span="92-92"];
m12_76 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Dispose_CallsDisposeMethodOnAllWorkers()", file="WorkerManagerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerManagerFacts.Dispose_CallsDisposeMethodOnAllWorkers()", span="87-87"];
m12_11 [cluster="Mock<IServerComponentRunner>.cstr", file="WorkerManagerFacts.cs", label="Entry Mock<IServerComponentRunner>.cstr", span=""];
m12_12 [cluster="Mock<WorkerManager>.cstr", file="WorkerManagerFacts.cs", label="Entry Mock<WorkerManager>.cstr", span=""];
m12_0 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.WorkerManagerFacts()", file="WorkerManagerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerManagerFacts.WorkerManagerFacts()", span="17-17"];
m12_1 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.WorkerManagerFacts()", file="WorkerManagerFacts.cs", label="_sharedContext = new SharedWorkerContext(\r\n                ''server'',\r\n                new[] { ''default'' },\r\n                new Mock<JobStorage>().Object,\r\n                new Mock<IJobPerformanceProcess>().Object,\r\n                new Mock<JobActivator>().Object,\r\n                new Mock<IStateMachineFactory>().Object)", span="19-25"];
m12_2 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.WorkerManagerFacts()", file="WorkerManagerFacts.cs", label="_workerRunners = new[]\r\n            {\r\n                new Mock<IServerComponentRunner>(), \r\n                new Mock<IServerComponentRunner>()\r\n            }", span="27-31"];
m12_3 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.WorkerManagerFacts()", file="WorkerManagerFacts.cs", label="_manager = new Mock<WorkerManager>(\r\n                _sharedContext, WorkerCount)", span="33-34"];
m12_4 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.WorkerManagerFacts()", file="WorkerManagerFacts.cs", label="_manager.Setup(x => x.CreateWorkerRunner(It.IsNotNull<WorkerContext>()))\r\n                .Returns((WorkerContext context) => _workerRunners[context.WorkerNumber - 1].Object)", span="36-37"];
m12_5 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.WorkerManagerFacts()", file="WorkerManagerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerManagerFacts.WorkerManagerFacts()", span="17-17"];
m12_18 [cluster="Unk.>", file="WorkerManagerFacts.cs", label="Entry Unk.>", span=""];
m12_23 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Ctor_ThrowsAnException_WhenSharedContextIsNull()", file="WorkerManagerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerManagerFacts.Ctor_ThrowsAnException_WhenSharedContextIsNull()", span="41-41"];
m12_24 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Ctor_ThrowsAnException_WhenSharedContextIsNull()", file="WorkerManagerFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => new WorkerManager(null, WorkerCount))", span="43-44"];
m12_25 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Ctor_ThrowsAnException_WhenSharedContextIsNull()", file="WorkerManagerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerManagerFacts.Ctor_ThrowsAnException_WhenSharedContextIsNull()", span="41-41"];
m12_30 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Ctor_ThrowsAnException_WhenWorkerCountLessOrEqualToZero()", file="WorkerManagerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerManagerFacts.Ctor_ThrowsAnException_WhenWorkerCountLessOrEqualToZero()", span="48-48"];
m12_31 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Ctor_ThrowsAnException_WhenWorkerCountLessOrEqualToZero()", file="WorkerManagerFacts.cs", label="var exception = Assert.Throws<ArgumentOutOfRangeException>(\r\n                () => new WorkerManager(\r\n                    _sharedContext, 0))", span="50-52"];
m12_32 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Ctor_ThrowsAnException_WhenWorkerCountLessOrEqualToZero()", file="WorkerManagerFacts.cs", label="Assert.Equal(''workerCount'', exception.ParamName)", span="54-54"];
m12_33 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Ctor_ThrowsAnException_WhenWorkerCountLessOrEqualToZero()", file="WorkerManagerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerManagerFacts.Ctor_ThrowsAnException_WhenWorkerCountLessOrEqualToZero()", span="48-48"];
m12_46 [cluster="Unk.NotNull", file="WorkerManagerFacts.cs", label="Entry Unk.NotNull", span=""];
m12_44 [cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.SharedWorkerContext, int)", file="WorkerManagerFacts.cs", label="Entry HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.SharedWorkerContext, int)", span="27-27"];
m12_13 [cluster="Unk.Setup", file="WorkerManagerFacts.cs", label="Entry Unk.Setup", span=""];
m12_77 [cluster="Unk.Dispose", file="WorkerManagerFacts.cs", label="Entry Unk.Dispose", span=""];
m12_45 [cluster="HangFire.Server.WorkerManager.CreateWorkerRunner(HangFire.Server.WorkerContext)", file="WorkerManagerFacts.cs", label="Entry HangFire.Server.WorkerManager.CreateWorkerRunner(HangFire.Server.WorkerContext)", span="61-61"];
m12_8 [cluster="Mock<IJobPerformanceProcess>.cstr", file="WorkerManagerFacts.cs", label="Entry Mock<IJobPerformanceProcess>.cstr", span=""];
m12_81 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Entry lambda expression", span="92-92"];
m12_15 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Entry lambda expression", span="36-36"];
m12_20 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Entry lambda expression", span="37-37"];
m12_16 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="x.CreateWorkerRunner(It.IsNotNull<WorkerContext>())", span="36-36"];
m12_17 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Exit lambda expression", span="36-36"];
m12_21 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="_workerRunners[context.WorkerNumber - 1].Object", span="37-37"];
m12_22 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Exit lambda expression", span="37-37"];
m12_26 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Entry lambda expression", span="44-44"];
m12_27 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="new WorkerManager(null, WorkerCount)", span="44-44"];
m12_28 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Exit lambda expression", span="44-44"];
m12_35 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Entry lambda expression", span="51-52"];
m12_36 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="new WorkerManager(\r\n                    _sharedContext, 0)", span="51-52"];
m12_37 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Exit lambda expression", span="51-52"];
m12_54 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Entry lambda expression", span="73-73"];
m12_57 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Entry lambda expression", span="74-74"];
m12_55 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="x.Start()", span="73-73"];
m12_56 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Exit lambda expression", span="73-73"];
m12_58 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="x.Start()", span="74-74"];
m12_59 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Exit lambda expression", span="74-74"];
m12_66 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Entry lambda expression", span="82-82"];
m12_69 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Entry lambda expression", span="83-83"];
m12_67 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="x.Stop()", span="82-82"];
m12_68 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Exit lambda expression", span="82-82"];
m12_70 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="x.Stop()", span="83-83"];
m12_71 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Exit lambda expression", span="83-83"];
m12_78 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Entry lambda expression", span="91-91"];
m12_79 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="x.Dispose()", span="91-91"];
m12_80 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Exit lambda expression", span="91-91"];
m12_82 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="x.Dispose()", span="92-92"];
m12_83 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Exit lambda expression", span="92-92"];
m12_52 [cluster="Unk.Start", file="WorkerManagerFacts.cs", label="Entry Unk.Start", span=""];
m12_9 [cluster="Mock<JobActivator>.cstr", file="WorkerManagerFacts.cs", label="Entry Mock<JobActivator>.cstr", span=""];
m12_19 [cluster="Unk.CreateWorkerRunner", file="WorkerManagerFacts.cs", label="Entry Unk.CreateWorkerRunner", span=""];
m12_6 [cluster="SharedWorkerContext.cstr", file="WorkerManagerFacts.cs", label="Entry SharedWorkerContext.cstr", span=""];
m12_14 [cluster="Unk.Returns", file="WorkerManagerFacts.cs", label="Entry Unk.Returns", span=""];
m12_53 [cluster="Unk.Verify", file="WorkerManagerFacts.cs", label="Entry Unk.Verify", span=""];
m12_7 [cluster="Mock<JobStorage>.cstr", file="WorkerManagerFacts.cs", label="Entry Mock<JobStorage>.cstr", span=""];
m12_38 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.CreateWorkerRunner_CreatesAWorkerRunnerWithGivenParameters()", file="WorkerManagerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerManagerFacts.CreateWorkerRunner_CreatesAWorkerRunnerWithGivenParameters()", span="58-58"];
m12_39 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.CreateWorkerRunner_CreatesAWorkerRunnerWithGivenParameters()", file="WorkerManagerFacts.cs", label="var manager = new WorkerManager(_sharedContext, WorkerCount)", span="60-60"];
m12_40 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.CreateWorkerRunner_CreatesAWorkerRunnerWithGivenParameters()", file="WorkerManagerFacts.cs", label="var context = new WorkerContext(_sharedContext, 1)", span="61-61"];
m12_41 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.CreateWorkerRunner_CreatesAWorkerRunnerWithGivenParameters()", file="WorkerManagerFacts.cs", label="var worker = manager.CreateWorkerRunner(context)", span="63-63"];
m12_42 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.CreateWorkerRunner_CreatesAWorkerRunnerWithGivenParameters()", file="WorkerManagerFacts.cs", label="Assert.NotNull(worker)", span="65-65"];
m12_43 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.CreateWorkerRunner_CreatesAWorkerRunnerWithGivenParameters()", file="WorkerManagerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerManagerFacts.CreateWorkerRunner_CreatesAWorkerRunnerWithGivenParameters()", span="58-58"];
m12_84 [file="WorkerManagerFacts.cs", label="HangFire.Core.Tests.Server.WorkerManagerFacts", span=""];
d84 -> d21  [color=green, key=1, label="HangFire.BackgroundJobServer", style=dashed];
d84 -> d22  [color=green, key=1, label="HangFire.BackgroundJobServer", style=dashed];
d84 -> d23  [color=green, key=1, label="HangFire.BackgroundJobServer", style=dashed];
d84 -> d62  [color=green, key=1, label="HangFire.BackgroundJobServer", style=dashed];
d84 -> d24  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
d84 -> d32  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
d84 -> d36  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
d84 -> d51  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
d84 -> d52  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
d84 -> d63  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
d84 -> d64  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
d84 -> d65  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
d60 -> d65  [color=darkseagreen4, key=1, label=stateMachineFactory, style=dashed];
d4 -> d7  [color=darkseagreen4, key=1, label="HangFire.JobStorage", style=dashed];
d50 -> d52  [color=darkseagreen4, key=1, label=componentRunners, style=dashed];
d50 -> d53  [color=darkseagreen4, key=1, label=componentRunners, style=dashed];
d76 -> d81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_16 -> m0_1  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ErrorPage", style=dashed];
m0_16 -> m0_2  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ErrorPage", style=dashed];
m0_16 -> m0_3  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ErrorPage", style=dashed];
m0_16 -> m0_4  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ErrorPage", style=dashed];
m0_16 -> m0_5  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ErrorPage", style=dashed];
m0_16 -> m0_6  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ErrorPage", style=dashed];
m0_16 -> m0_7  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ErrorPage", style=dashed];
m0_16 -> m0_8  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ErrorPage", style=dashed];
m1_24 -> m1_27  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_25 -> m1_27  [color=darkseagreen4, key=1, label=onJobCompleted, style=dashed];
m1_14 -> m1_16  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_3 -> m1_7  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_7 -> m1_7  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_8 -> m1_10  [color=green, key=1, label=ILog, style=dashed];
m1_8 -> m1_11  [color=green, key=1, label=ILog, style=dashed];
m1_8 -> m1_12  [color=green, key=1, label=ILog, style=dashed];
m1_8 -> m1_13  [color=green, key=1, label=ILog, style=dashed];
m1_11 -> m1_18  [color=green, key=1, label="lambda expression", style=dashed];
m1_21 -> m1_10  [color=green, key=1, label="HangFire.BackgroundJobServerOptions", style=dashed];
m1_21 -> m1_11  [color=green, key=1, label="HangFire.BackgroundJobServerOptions", style=dashed];
m1_21 -> m1_12  [color=green, key=1, label="HangFire.BackgroundJobServerOptions", style=dashed];
m1_21 -> m1_13  [color=green, key=1, label="HangFire.BackgroundJobServerOptions", style=dashed];
m1_31 -> m1_6  [color=darkseagreen4, key=1, label="HangFire.JobDispatcherPool", style=dashed];
m1_31 -> m1_21  [color=darkseagreen4, key=1, label="HangFire.JobDispatcherPool", style=dashed];
m1_31 -> m1_27  [color=darkseagreen4, key=1, label="HangFire.JobDispatcherPool", style=dashed];
m3_24 -> m3_31  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_26 -> m3_28  [color=darkseagreen4, key=1, label=queue, style=dashed];
m3_52 -> m3_55  [color=darkseagreen4, key=1, label="System.Threading.Thread", style=dashed];
m3_9 -> m3_12  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m3_60 -> m3_12  [color=darkseagreen4, key=1, label="HangFire.Server.SchedulePoller", style=dashed];
m3_60 -> m3_21  [color=darkseagreen4, key=1, label="HangFire.Server.SchedulePoller", style=dashed];
m3_60 -> m3_31  [color=darkseagreen4, key=1, label="HangFire.Server.SchedulePoller", style=dashed];
m3_60 -> m3_45  [color=darkseagreen4, key=1, label="HangFire.Server.SchedulePoller", style=dashed];
m3_60 -> m3_46  [color=darkseagreen4, key=1, label="HangFire.Server.SchedulePoller", style=dashed];
m3_60 -> m3_48  [color=darkseagreen4, key=1, label="HangFire.Server.SchedulePoller", style=dashed];
m3_60 -> m3_53  [color=darkseagreen4, key=1, label="HangFire.Server.SchedulePoller", style=dashed];
m3_60 -> m3_54  [color=darkseagreen4, key=1, label="HangFire.Server.SchedulePoller", style=dashed];
m5_5 -> m5_3  [color=green, key=1, label="HangFire.Server.ServerComponentRunnerOptions", style=dashed];
m6_84 -> m6_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_23 -> m6_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_387 -> m6_393  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_388 -> m6_391  [color=darkseagreen4, key=1, label=filter, style=dashed];
m6_389 -> m6_397  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_390 -> m6_396  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_391 -> m6_399  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_43 -> m6_48  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_44 -> m6_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_181 -> m6_183  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_181 -> m6_186  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_182 -> m6_184  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m6_182 -> m6_185  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m6_183 -> m6_190  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_186 -> m6_199  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_184 -> m6_193  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_185 -> m6_196  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_4 -> m6_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_120 -> m6_123  [color=darkseagreen4, key=1, label=filter1, style=dashed];
m6_124 -> m6_135  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_125 -> m6_139  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_126 -> m6_138  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_123 -> m6_132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_122 -> m6_129  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_309 -> m6_314  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_311 -> m6_327  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_312 -> m6_326  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_310 -> m6_317  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_310 -> m6_323  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_308 -> m6_318  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_308 -> m6_321  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_405 -> m6_412  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_406 -> m6_411  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_404 -> m6_408  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_417 -> m6_424  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_418 -> m6_423  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_416 -> m6_420  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_430 -> m6_432  [color=darkseagreen4, key=1, label=filter, style=dashed];
m6_54 -> m6_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_103 -> m6_107  [color=darkseagreen4, key=1, label=filter, style=dashed];
m6_104 -> m6_109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_105 -> m6_113  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_106 -> m6_112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_107 -> m6_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_163 -> m6_166  [color=darkseagreen4, key=1, label=filter, style=dashed];
m6_165 -> m6_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_164 -> m6_170  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_166 -> m6_177  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_264 -> m6_269  [color=darkseagreen4, key=1, label=filter, style=dashed];
m6_266 -> m6_273  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_267 -> m6_277  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_268 -> m6_276  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_265 -> m6_269  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_265 -> m6_280  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_265 -> m6_283  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_269 -> m6_279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_142 -> m6_150  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_145 -> m6_160  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_146 -> m6_159  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_144 -> m6_153  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_144 -> m6_156  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_92 -> m6_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_93 -> m6_100  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_94 -> m6_99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_64 -> m6_71  [color=green, key=1, label="lambda expression", style=dashed];
m6_63 -> m6_65  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_62 -> m6_66  [color=darkseagreen4, key=1, label=filter, style=dashed];
m6_66 -> m6_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_330 -> m6_336  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_332 -> m6_338  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_334 -> m6_348  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_335 -> m6_347  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_333 -> m6_341  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_333 -> m6_344  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_336 -> m6_350  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_223 -> m6_228  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_225 -> m6_230  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_225 -> m6_233  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_228 -> m6_236  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_33 -> m6_39  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_34 -> m6_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_203 -> m6_208  [color=darkseagreen4, key=1, label=filter, style=dashed];
m6_207 -> m6_216  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_204 -> m6_210  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_204 -> m6_213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_208 -> m6_219  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_75 -> m6_78  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_237 -> m6_239  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_280 -> m6_282  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_301 -> m6_303  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_318 -> m6_320  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_351 -> m6_353  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_372 -> m6_380  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_373 -> m6_384  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_374 -> m6_383  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_371 -> m6_377  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_359 -> m6_367  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_360 -> m6_366  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_358 -> m6_363  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_243 -> m6_249  [color=darkseagreen4, key=1, label=filter, style=dashed];
m6_245 -> m6_255  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_246 -> m6_254  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_248 -> m6_257  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_244 -> m6_251  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_249 -> m6_260  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_286 -> m6_292  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_289 -> m6_294  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_290 -> m6_298  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_291 -> m6_297  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_292 -> m6_300  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_288 -> m6_292  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_288 -> m6_301  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_288 -> m6_304  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_436 -> m6_64  [color=green, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_6  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_7  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_8  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_39  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_48  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_53  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_54  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_65  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_84  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_92  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_94  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_100  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_104  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_106  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_113  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_124  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_126  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_139  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_142  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_146  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_160  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_165  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_168  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_188  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_206  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_207  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_227  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_255  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_248  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_266  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_268  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_277  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_289  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_291  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_298  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_309  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_312  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_327  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_332  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_335  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_348  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_367  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_372  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_384  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_387  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_390  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_397  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_406  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_412  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_418  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_424  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_427  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_436 -> m6_431  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", style=dashed];
m6_437 -> m6_39  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_438 -> m6_48  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_439 -> m6_100  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_440 -> m6_113  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_441 -> m6_139  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_442 -> m6_160  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_443 -> m6_255  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_444 -> m6_277  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_446 -> m6_298  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_449 -> m6_327  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_450 -> m6_348  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_451 -> m6_367  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_452 -> m6_384  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_453 -> m6_397  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_454 -> m6_412  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_455 -> m6_424  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_445 -> m6_280  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_445 -> m6_283  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_447 -> m6_301  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_447 -> m6_304  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_448 -> m6_318  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_448 -> m6_321  [color=darkseagreen4, key=1, label=exception, style=dashed];
m7_33 -> m7_35  [color=darkseagreen4, key=1, label="HangFire.Common.States.StateApplyingContext", style=dashed];
m7_36 -> m7_47  [color=green, key=1, label=canNotParseMessage, style=dashed];
m7_36 -> m7_49  [color=green, key=1, label=canNotParseMessage, style=dashed];
m7_37 -> m7_59  [color=green, key=1, label="lambda expression", style=dashed];
m7_37 -> m7_62  [color=green, key=1, label="lambda expression", style=dashed];
m7_37 -> m7_66  [color=green, key=1, label="lambda expression", style=dashed];
m7_37 -> m7_69  [color=green, key=1, label="lambda expression", style=dashed];
m7_37 -> m7_40  [color=green, key=1, label=parts, style=dashed];
m7_37 -> m7_41  [color=green, key=1, label=parts, style=dashed];
m7_37 -> m7_45  [color=green, key=1, label=parts, style=dashed];
m7_37 -> m7_46  [color=green, key=1, label=parts, style=dashed];
m7_38 -> m7_47  [color=green, key=1, label=builder, style=dashed];
m7_38 -> m7_41  [color=darkseagreen4, key=1, label="HangFire.Common.JobMethod", style=dashed];
m7_38 -> m7_42  [color=green, key=1, label=builder, style=dashed];
m7_38 -> m7_43  [color=green, key=1, label=builder, style=dashed];
m7_38 -> m7_46  [color=green, key=1, label=builder, style=dashed];
m7_44 -> m7_46  [color=green, key=1, label=alias, style=dashed];
m7_39 -> m7_41  [color=green, key=1, label=alias, style=dashed];
m7_23 -> m7_26  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_23 -> m7_27  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_28 -> m7_30  [color=green, key=1, label=ILog, style=dashed];
m7_28 -> m7_31  [color=green, key=1, label=ILog, style=dashed];
m7_2 -> m7_7  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorageOptions", style=dashed];
m7_2 -> m7_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_4 -> m7_10  [color=darkseagreen4, key=1, label="HangFire.Common.JobMethod", style=dashed];
m7_72 -> m7_74  [color=darkseagreen4, key=1, label=connection, style=dashed];
m7_78 -> m7_30  [color=green, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m7_78 -> m7_31  [color=green, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m7_78 -> m7_37  [color=green, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m7_78 -> m7_7  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m7_78 -> m7_8  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m7_78 -> m7_10  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m7_78 -> m7_17  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m7_78 -> m7_21  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m7_78 -> m7_25  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m8_9 -> m8_12  [color=darkseagreen4, key=1, label=pager, style=dashed];
m8_9 -> m8_19  [color=darkseagreen4, key=1, label=pager, style=dashed];
m8_9 -> m8_55  [color=darkseagreen4, key=1, label=pager, style=dashed];
m8_10 -> m8_21  [color=darkseagreen4, key=1, label=scheduledJobs, style=dashed];
m8_21 -> m8_23  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_23 -> m8_23  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_23 -> m8_25  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_25 -> m8_25  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_25 -> m8_27  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_27 -> m8_27  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_27 -> m8_29  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_27 -> m8_32  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_29 -> m8_29  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_29 -> m8_32  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_32 -> m8_32  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_32 -> m8_34  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_34 -> m8_34  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_34 -> m8_36  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_36 -> m8_36  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_36 -> m8_39  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_39 -> m8_39  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_39 -> m8_41  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_41 -> m8_41  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_41 -> m8_43  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_43 -> m8_43  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_43 -> m8_45  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_45 -> m8_45  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_45 -> m8_47  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_47 -> m8_47  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_47 -> m8_49  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_49 -> m8_49  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_49 -> m8_51  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_51 -> m8_51  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_73 -> m8_4  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_5  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_11  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_13  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_14  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_15  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_16  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_17  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_18  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_19  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_20  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_22  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_23  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_24  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_25  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_26  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_28  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_29  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_30  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_31  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_32  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_33  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_34  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_35  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_37  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_38  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_39  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_40  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_41  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_42  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_43  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_44  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_45  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_46  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_48  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_49  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_50  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_51  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_52  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_53  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_54  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m8_73 -> m8_55  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m9_239 -> m9_243  [color=darkseagreen4, key=1, label=Table, style=dashed];
m9_239 -> m9_244  [color=darkseagreen4, key=1, label=Table, style=dashed];
m9_241 -> m9_244  [color=darkseagreen4, key=1, label=history, style=dashed];
m9_242 -> m9_244  [color=darkseagreen4, key=1, label=i, style=dashed];
m9_242 -> m9_245  [color=darkseagreen4, key=1, label=i, style=dashed];
m9_245 -> m9_245  [color=darkseagreen4, key=1, label=i, style=dashed];
m9_155 -> m9_157  [color=darkseagreen4, key=1, label=timestamp, style=dashed];
m9_90 -> m9_92  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_165 -> m9_167  [color=darkseagreen4, key=1, label=timestamp, style=dashed];
m9_64 -> m9_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_215 -> m9_218  [color=darkseagreen4, key=1, label=history, style=dashed];
m9_215 -> m9_219  [color=darkseagreen4, key=1, label=history, style=dashed];
m9_218 -> m9_218  [color=darkseagreen4, key=1, label=property, style=dashed];
m9_219 -> m9_219  [color=darkseagreen4, key=1, label=property, style=dashed];
m9_123 -> m9_125  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_196 -> m9_199  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_223 -> m9_225  [color=darkseagreen4, key=1, label=stateEntry, style=dashed];
m9_223 -> m9_226  [color=darkseagreen4, key=1, label=stateEntry, style=dashed];
m9_225 -> m9_225  [color=darkseagreen4, key=1, label=property, style=dashed];
m9_226 -> m9_226  [color=darkseagreen4, key=1, label=property, style=dashed];
m9_229 -> m9_232  [color=darkseagreen4, key=1, label=Table, style=dashed];
m9_229 -> m9_233  [color=darkseagreen4, key=1, label=Table, style=dashed];
m9_231 -> m9_233  [color=darkseagreen4, key=1, label=i, style=dashed];
m9_231 -> m9_234  [color=darkseagreen4, key=1, label=i, style=dashed];
m9_234 -> m9_234  [color=darkseagreen4, key=1, label=i, style=dashed];
m9_103 -> m9_105  [color=darkseagreen4, key=1, label="?", style=dashed];
m9_125 -> m9_127  [color=darkseagreen4, key=1, label="?", style=dashed];
m9_200 -> m9_203  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_42 -> m9_45  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_44 -> m9_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_44 -> m9_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_45 -> m9_56  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_207 -> m9_209  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_176 -> m9_178  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_23 -> m9_25  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_23 -> m9_27  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_24 -> m9_26  [color=darkseagreen4, key=1, label=mock, style=dashed];
m9_24 -> m9_27  [color=darkseagreen4, key=1, label=mock, style=dashed];
m9_25 -> m9_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_26 -> m9_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_181 -> m9_183  [color=darkseagreen4, key=1, label=Table, style=dashed];
m9_100 -> m9_103  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_186 -> m9_191  [color=darkseagreen4, key=1, label=Table, style=dashed];
m9_189 -> m9_191  [color=darkseagreen4, key=1, label=history, style=dashed];
m9_85 -> m9_87  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_250 -> m9_253  [color=darkseagreen4, key=1, label=Table, style=dashed];
m9_250 -> m9_254  [color=darkseagreen4, key=1, label=Table, style=dashed];
m9_252 -> m9_254  [color=darkseagreen4, key=1, label=i, style=dashed];
m9_252 -> m9_255  [color=darkseagreen4, key=1, label=i, style=dashed];
m9_255 -> m9_255  [color=darkseagreen4, key=1, label=i, style=dashed];
m9_257 -> m9_27  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_45  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_60  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_66  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_70  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_75  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_87  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_92  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_95  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_133  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_196  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_207  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_217  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_224  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_230  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_233  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_237  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_251  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_254  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m10_18 -> m10_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_25 -> m10_27  [color=darkseagreen4, key=1, label=options, style=dashed];
m10_10 -> m10_13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_1 -> m10_4  [color=darkseagreen4, key=1, label=options, style=dashed];
m11_20 -> m11_22  [color=green, key=1, label="System.Threading.CancellationToken", style=dashed];
m11_22 -> m11_22  [color=green, key=1, label="System.Threading.CancellationToken", style=dashed];
m11_10 -> m11_10  [color=darkseagreen4, key=1, label=i, style=dashed];
m11_5 -> m11_9  [color=darkseagreen4, key=1, label=workerRunners, style=dashed];
m11_0 -> m11_8  [color=darkseagreen4, key=1, label="HangFire.Server.SharedWorkerContext", style=dashed];
m11_0 -> m11_7  [color=darkseagreen4, key=1, label=int, style=dashed];
m11_0 -> m11_3  [color=darkseagreen4, key=1, label=int, style=dashed];
m11_38 -> m11_21  [color=green, key=1, label="HangFire.Server.WorkerManager", style=dashed];
m11_38 -> m11_9  [color=darkseagreen4, key=1, label="HangFire.Server.WorkerManager", style=dashed];
m11_38 -> m11_27  [color=darkseagreen4, key=1, label="HangFire.Server.WorkerManager", style=dashed];
m11_6 -> m11_8  [color=darkseagreen4, key=1, label=i, style=dashed];
m11_6 -> m11_10  [color=darkseagreen4, key=1, label=i, style=dashed];
m11_143 -> m11_32  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_36  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_44  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_51  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_56  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_63  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_67  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_76  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_80  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_88  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_92  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_99  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_103  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_110  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_115  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_120  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_124  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_130  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_134  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m11_143 -> m11_141  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m12_49 -> m12_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_50 -> m12_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_62 -> m12_66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_63 -> m12_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
}
