digraph  {
n860 [label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", span=""];
n861 [label=arrangeSql, span=""];
n862 [label=jobId, span=""];
n863 [label=arrangeSql, span=""];
n864 [label=jobId, span=""];
n865 [label=arrangeSql, span=""];
n866 [label=jobId, span=""];
n867 [label=state, span=""];
n868 [label=arrangeSql, span=""];
n869 [label=jobId, span=""];
n870 [label=state, span=""];
n871 [label=SqlConnection, span=""];
n872 [label=SqlConnection, span=""];
n873 [label=SqlConnection, span=""];
n874 [label=SqlConnection, span=""];
n875 [label=SqlConnection, span=""];
n876 [label=items, span=""];
n877 [label=SqlConnection, span=""];
n878 [label=arrangeSql, span=""];
n879 [label=SqlConnection, span=""];
n880 [label=arrangeSql, span=""];
n881 [label=SqlConnection, span=""];
n882 [label=arrangeSql, span=""];
n883 [label=SqlConnection, span=""];
n884 [label=arrangeSql, span=""];
n885 [label=SqlConnection, span=""];
n886 [label=arrangeSql, span=""];
n887 [label=SqlConnection, span=""];
n888 [label=arrangeSql, span=""];
n889 [label=SqlConnection, span=""];
n890 [label=arrangeSql, span=""];
n0 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="17-17"];
n1 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", label="var defaultProvider = new Mock<IPersistentJobQueueProvider>()", span="19-19"];
n2 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", label="defaultProvider.Setup(x => x.GetJobQueue(It.IsNotNull<IDbConnection>()))\r\n                .Returns(new Mock<IPersistentJobQueue>().Object)", span="20-21"];
n5 [cluster="Mock<IPersistentJobQueueProvider>.cstr", label="Entry Mock<IPersistentJobQueueProvider>.cstr", span=""];
n3 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", label="_queueProviders = new PersistentJobQueueProviderCollection(defaultProvider.Object)", span="23-23"];
n6 [cluster="Unk.Setup", label="Entry Unk.Setup", span=""];
n7 [cluster="Mock<IPersistentJobQueue>.cstr", label="Entry Mock<IPersistentJobQueue>.cstr", span=""];
n8 [cluster="Unk.Returns", label="Entry Unk.Returns", span=""];
n10 [cluster="lambda expression", label="Entry lambda expression", span="20-20"];
n4 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="17-17"];
n9 [cluster="PersistentJobQueueProviderCollection.cstr", label="Entry PersistentJobQueueProviderCollection.cstr", span=""];
n11 [cluster="lambda expression", label="x.GetJobQueue(It.IsNotNull<IDbConnection>())", span="20-20"];
n12 [cluster="lambda expression", label="Exit lambda expression", span="20-20"];
n13 [cluster="Unk.>", label="Entry Unk.>", span=""];
n14 [cluster="Unk.GetJobQueue", label="Entry Unk.GetJobQueue", span=""];
n15 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", span="27-27"];
n16 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerWriteOnlyTransaction(null, null, _queueProviders))", span="29-30"];
n17 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", label="Assert.Equal(''connection'', exception.ParamName)", span="32-32"];
n20 [cluster="lambda expression", label="Entry lambda expression", span="30-30"];
n18 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", span="27-27"];
n19 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n21 [cluster="lambda expression", label="new SqlServerWriteOnlyTransaction(null, null, _queueProviders)", span="30-30"];
n22 [cluster="lambda expression", label="Exit lambda expression", span="30-30"];
n23 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", span="39-39"];
n24 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", span="36-36"];
n25 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerWriteOnlyTransaction(ConnectionUtils.CreateConnection(), null, null))", span="38-39"];
n26 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", label="Assert.Equal(''queueProviders'', exception.ParamName)", span="41-41"];
n28 [cluster="lambda expression", label="Entry lambda expression", span="39-39"];
n27 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", span="36-36"];
n29 [cluster="lambda expression", label="new SqlServerWriteOnlyTransaction(ConnectionUtils.CreateConnection(), null, null)", span="39-39"];
n30 [cluster="lambda expression", label="Exit lambda expression", span="39-39"];
n31 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
n32 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", span="45-45"];
n33 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="47-50"];
n34 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1));\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.ExpireAt);\r\n            })", span="52-64"];
n38 [cluster="lambda expression", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="54-54"];
n39 [cluster="lambda expression", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="55-55"];
n35 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", span="45-45"];
n36 [cluster="Unk.UseConnection", label="Entry Unk.UseConnection", span=""];
n37 [cluster="lambda expression", label="Entry lambda expression", span="52-64"];
n40 [cluster="lambda expression", label="Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)))", span="57-57"];
n41 [cluster="lambda expression", label="var job = GetTestJob(sql, jobId)", span="59-59"];
n43 [cluster="lambda expression", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="62-62"];
n46 [cluster="Unk.Query", label="Entry Unk.Query", span=""];
n47 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n48 [cluster="Unk.ToString", label="Entry Unk.ToString", span=""];
n56 [cluster="lambda expression", label="x.ExpireJob(jobId, TimeSpan.FromDays(1))", span="57-57"];
n49 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", span="980-980"];
n55 [cluster="lambda expression", label="Entry lambda expression", span="57-57"];
n42 [cluster="lambda expression", label="Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1))", span="60-60"];
n50 [cluster="Unk.GetTestJob", label="Entry Unk.GetTestJob", span=""];
n51 [cluster="System.DateTime.AddMinutes(double)", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
n52 [cluster="System.DateTime.AddDays(double)", label="Entry System.DateTime.AddDays(double)", span="0-0"];
n53 [cluster="Unk.True", label="Entry Unk.True", span=""];
n44 [cluster="lambda expression", label="Assert.Null(anotherJob.ExpireAt)", span="63-63"];
n45 [cluster="lambda expression", label="Exit lambda expression", span="52-64"];
n54 [cluster="Unk.Null", label="Entry Unk.Null", span=""];
n57 [cluster="lambda expression", label="Exit lambda expression", span="57-57"];
n58 [cluster="System.TimeSpan.FromDays(double)", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
n59 [cluster="Unk.ExpireJob", label="Entry Unk.ExpireJob", span=""];
n60 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="68-68"];
n61 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues ('', '', getutcdate(), getutcdate())\r\nselect scope_identity() as Id''", span="70-73"];
n62 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.PersistJob(jobId));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.ExpireAt);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.NotNull(anotherJob.ExpireAt);\r\n            })", span="75-87"];
n65 [cluster="lambda expression", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="77-77"];
n66 [cluster="lambda expression", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="78-78"];
n63 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="68-68"];
n64 [cluster="lambda expression", label="Entry lambda expression", span="75-87"];
n67 [cluster="lambda expression", label="Commit(sql, x => x.PersistJob(jobId))", span="80-80"];
n68 [cluster="lambda expression", label="var job = GetTestJob(sql, jobId)", span="82-82"];
n70 [cluster="lambda expression", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="85-85"];
n75 [cluster="lambda expression", label="x.PersistJob(jobId)", span="80-80"];
n74 [cluster="lambda expression", label="Entry lambda expression", span="80-80"];
n69 [cluster="lambda expression", label="Assert.Null(job.ExpireAt)", span="83-83"];
n71 [cluster="lambda expression", label="Assert.NotNull(anotherJob.ExpireAt)", span="86-86"];
n72 [cluster="lambda expression", label="Exit lambda expression", span="75-87"];
n73 [cluster="Unk.NotNull", label="Entry Unk.NotNull", span=""];
n76 [cluster="lambda expression", label="Exit lambda expression", span="80-80"];
n77 [cluster="Unk.PersistJob", label="Entry Unk.PersistJob", span=""];
n78 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="91-91"];
n79 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="93-96"];
n80 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.StateName);\r\n                Assert.Null(anotherJob.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="98-125"];
n83 [cluster="lambda expression", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="100-100"];
n84 [cluster="lambda expression", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="101-101"];
n81 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="91-91"];
n82 [cluster="lambda expression", label="Entry lambda expression", span="98-125"];
n89 [cluster="lambda expression", label="Commit(sql, x => x.SetJobState(jobId, state.Object))", span="109-109"];
n90 [cluster="lambda expression", label="var job = GetTestJob(sql, jobId)", span="111-111"];
n93 [cluster="lambda expression", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="115-115"];
n96 [cluster="lambda expression", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="119-119"];
n116 [cluster="lambda expression", label="x.SetJobState(jobId, state.Object)", span="109-109"];
n97 [cluster="lambda expression", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="120-120"];
n85 [cluster="lambda expression", label="var state = new Mock<IState>()", span="103-103"];
n86 [cluster="lambda expression", label="state.Setup(x => x.Name).Returns(''State'')", span="104-104"];
n103 [cluster="Mock<IState>.cstr", label="Entry Mock<IState>.cstr", span=""];
n87 [cluster="lambda expression", label="state.Setup(x => x.Reason).Returns(''Reason'')", span="105-105"];
n88 [cluster="lambda expression", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="106-107"];
n105 [cluster="lambda expression", label="Entry lambda expression", span="104-104"];
n108 [cluster="lambda expression", label="Entry lambda expression", span="105-105"];
n104 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
n111 [cluster="lambda expression", label="Entry lambda expression", span="106-106"];
n115 [cluster="lambda expression", label="Entry lambda expression", span="109-109"];
n91 [cluster="lambda expression", label="Assert.Equal(''State'', job.StateName)", span="112-112"];
n92 [cluster="lambda expression", label="Assert.NotNull(job.StateId)", span="113-113"];
n94 [cluster="lambda expression", label="Assert.Null(anotherJob.StateName)", span="116-116"];
n95 [cluster="lambda expression", label="Assert.Null(anotherJob.StateId)", span="117-117"];
n98 [cluster="lambda expression", label="Assert.Equal(''State'', jobState.Name)", span="121-121"];
n99 [cluster="lambda expression", label="Assert.Equal(''Reason'', jobState.Reason)", span="122-122"];
n100 [cluster="lambda expression", label="Assert.NotNull(jobState.CreatedAt)", span="123-123"];
n101 [cluster="lambda expression", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="124-124"];
n102 [cluster="lambda expression", label="Exit lambda expression", span="98-125"];
n106 [cluster="lambda expression", label="x.Name", span="104-104"];
n107 [cluster="lambda expression", label="Exit lambda expression", span="104-104"];
n109 [cluster="lambda expression", label="x.Reason", span="105-105"];
n110 [cluster="lambda expression", label="Exit lambda expression", span="105-105"];
n112 [cluster="lambda expression", label="x.SerializeData()", span="106-106"];
n113 [cluster="lambda expression", label="Exit lambda expression", span="106-106"];
n114 [cluster="Unk.SerializeData", label="Entry Unk.SerializeData", span=""];
n117 [cluster="lambda expression", label="Exit lambda expression", span="109-109"];
n118 [cluster="Unk.SetJobState", label="Entry Unk.SetJobState", span=""];
n119 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="129-129"];
n120 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="131-134"];
n121 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="136-158"];
n124 [cluster="lambda expression", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="138-138"];
n122 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="129-129"];
n123 [cluster="lambda expression", label="Entry lambda expression", span="136-158"];
n129 [cluster="lambda expression", label="Commit(sql, x => x.AddJobState(jobId, state.Object))", span="146-146"];
n130 [cluster="lambda expression", label="var job = GetTestJob(sql, jobId)", span="148-148"];
n133 [cluster="lambda expression", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="152-152"];
n125 [cluster="lambda expression", label="var state = new Mock<IState>()", span="140-140"];
n150 [cluster="lambda expression", label="x.AddJobState(jobId, state.Object)", span="146-146"];
n134 [cluster="lambda expression", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="153-153"];
n126 [cluster="lambda expression", label="state.Setup(x => x.Name).Returns(''State'')", span="141-141"];
n127 [cluster="lambda expression", label="state.Setup(x => x.Reason).Returns(''Reason'')", span="142-142"];
n128 [cluster="lambda expression", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="143-144"];
n140 [cluster="lambda expression", label="Entry lambda expression", span="141-141"];
n143 [cluster="lambda expression", label="Entry lambda expression", span="142-142"];
n146 [cluster="lambda expression", label="Entry lambda expression", span="143-143"];
n149 [cluster="lambda expression", label="Entry lambda expression", span="146-146"];
n131 [cluster="lambda expression", label="Assert.Null(job.StateName)", span="149-149"];
n132 [cluster="lambda expression", label="Assert.Null(job.StateId)", span="150-150"];
n135 [cluster="lambda expression", label="Assert.Equal(''State'', jobState.Name)", span="154-154"];
n136 [cluster="lambda expression", label="Assert.Equal(''Reason'', jobState.Reason)", span="155-155"];
n137 [cluster="lambda expression", label="Assert.NotNull(jobState.CreatedAt)", span="156-156"];
n138 [cluster="lambda expression", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="157-157"];
n139 [cluster="lambda expression", label="Exit lambda expression", span="136-158"];
n141 [cluster="lambda expression", label="x.Name", span="141-141"];
n142 [cluster="lambda expression", label="Exit lambda expression", span="141-141"];
n144 [cluster="lambda expression", label="x.Reason", span="142-142"];
n145 [cluster="lambda expression", label="Exit lambda expression", span="142-142"];
n147 [cluster="lambda expression", label="x.SerializeData()", span="143-143"];
n148 [cluster="lambda expression", label="Exit lambda expression", span="143-143"];
n151 [cluster="lambda expression", label="Exit lambda expression", span="146-146"];
n152 [cluster="Unk.AddJobState", label="Entry Unk.AddJobState", span=""];
n153 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", span="162-162"];
n154 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", label="UseConnection(sql =>\r\n            {\r\n                var correctJobQueue = new Mock<IPersistentJobQueue>();\r\n                var correctProvider = new Mock<IPersistentJobQueueProvider>();\r\n                correctProvider.Setup(x => x.GetJobQueue(It.IsNotNull<IDbConnection>()))\r\n                    .Returns(correctJobQueue.Object);\r\n\r\n                _queueProviders.Add(correctProvider.Object, new [] { ''default'' });\r\n\r\n                Commit(sql, x => x.AddToQueue(''default'', ''1''));\r\n\r\n                correctJobQueue.Verify(x => x.Enqueue(''default'', ''1''));\r\n            })", span="164-176"];
n155 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", span="162-162"];
n156 [cluster="lambda expression", label="Entry lambda expression", span="164-176"];
n157 [cluster="lambda expression", label="var correctJobQueue = new Mock<IPersistentJobQueue>()", span="166-166"];
n161 [cluster="lambda expression", label="Commit(sql, x => x.AddToQueue(''default'', ''1''))", span="173-173"];
n158 [cluster="lambda expression", label="var correctProvider = new Mock<IPersistentJobQueueProvider>()", span="167-167"];
n159 [cluster="lambda expression", label="correctProvider.Setup(x => x.GetJobQueue(It.IsNotNull<IDbConnection>()))\r\n                    .Returns(correctJobQueue.Object)", span="168-169"];
n162 [cluster="lambda expression", label="correctJobQueue.Verify(x => x.Enqueue(''default'', ''1''))", span="175-175"];
n160 [cluster="lambda expression", label="_queueProviders.Add(correctProvider.Object, new [] { ''default'' })", span="171-171"];
n166 [cluster="lambda expression", label="Entry lambda expression", span="168-168"];
n164 [cluster="Unk.Add", label="Entry Unk.Add", span=""];
n169 [cluster="lambda expression", label="Entry lambda expression", span="173-173"];
n163 [cluster="lambda expression", label="Exit lambda expression", span="164-176"];
n165 [cluster="Unk.Verify", label="Entry Unk.Verify", span=""];
n173 [cluster="lambda expression", label="Entry lambda expression", span="175-175"];
n167 [cluster="lambda expression", label="x.GetJobQueue(It.IsNotNull<IDbConnection>())", span="168-168"];
n168 [cluster="lambda expression", label="Exit lambda expression", span="168-168"];
n170 [cluster="lambda expression", label="x.AddToQueue(''default'', ''1'')", span="173-173"];
n171 [cluster="lambda expression", label="Exit lambda expression", span="173-173"];
n172 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="127-127"];
n174 [cluster="lambda expression", label="x.Enqueue(''default'', ''1'')", span="175-175"];
n175 [cluster="lambda expression", label="Exit lambda expression", span="175-175"];
n176 [cluster="Unk.Enqueue", label="Entry Unk.Enqueue", span=""];
n177 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="179-179"];
n178 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", label="return connection\r\n                .Query(''select * from HangFire.Job where id = @id'', new { id = jobId })\r\n                .Single();", span="181-183"];
n179 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="179-179"];
n180 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="187-187"];
n181 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="189-198"];
n182 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="187-187"];
n183 [cluster="lambda expression", label="Entry lambda expression", span="189-198"];
n184 [cluster="lambda expression", label="Commit(sql, x => x.IncrementCounter(''my-key''))", span="191-191"];
n185 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="193-193"];
n190 [cluster="lambda expression", label="Entry lambda expression", span="191-191"];
n186 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="195-195"];
n187 [cluster="lambda expression", label="Assert.Equal(1, record.Value)", span="196-196"];
n188 [cluster="lambda expression", label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="197-197"];
n189 [cluster="lambda expression", label="Exit lambda expression", span="189-198"];
n191 [cluster="lambda expression", label="x.IncrementCounter(''my-key'')", span="191-191"];
n192 [cluster="lambda expression", label="Exit lambda expression", span="191-191"];
n193 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="135-135"];
n194 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="202-202"];
n195 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime) record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="204-218"];
n196 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="202-202"];
n197 [cluster="lambda expression", label="Entry lambda expression", span="204-218"];
n198 [cluster="lambda expression", label="Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="206-206"];
n199 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="208-208"];
n208 [cluster="lambda expression", label="Entry lambda expression", span="206-206"];
n200 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="210-210"];
n201 [cluster="lambda expression", label="Assert.Equal(1, record.Value)", span="211-211"];
n202 [cluster="lambda expression", label="Assert.NotNull(record.ExpireAt)", span="212-212"];
n203 [cluster="lambda expression", label="var expireAt = (DateTime) record.ExpireAt", span="214-214"];
n204 [cluster="lambda expression", label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="216-216"];
n205 [cluster="lambda expression", label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="217-217"];
n207 [cluster="System.DateTime.AddHours(double)", label="Entry System.DateTime.AddHours(double)", span="0-0"];
n206 [cluster="lambda expression", label="Exit lambda expression", span="204-218"];
n209 [cluster="lambda expression", label="x.IncrementCounter(''my-key'', TimeSpan.FromDays(1))", span="206-206"];
n210 [cluster="lambda expression", label="Exit lambda expression", span="206-206"];
n211 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="142-142"];
n212 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="222-222"];
n213 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", color=red, community=0, label="-1: UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(2, recordCount);\r\n            })", span="224-235"];
n214 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="222-222"];
n215 [cluster="lambda expression", label="Entry lambda expression", span="224-235"];
n216 [cluster="lambda expression", color=red, community=0, label="-1: Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                })", span="226-230"];
n217 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="232-232"];
n220 [cluster="lambda expression", label="Entry lambda expression", span="226-230"];
n218 [cluster="lambda expression", label="Assert.Equal(2, recordCount)", span="234-234"];
n219 [cluster="lambda expression", label="Exit lambda expression", span="224-235"];
n221 [cluster="lambda expression", color=red, community=0, label="-1: x.IncrementCounter(''my-key'')", span="228-228"];
n222 [cluster="lambda expression", color=red, community=0, label="-1: x.IncrementCounter(''my-key'')", span="229-229"];
n223 [cluster="lambda expression", label="Exit lambda expression", span="226-230"];
n224 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="239-239"];
n225 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="241-250"];
n226 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="239-239"];
n227 [cluster="lambda expression", label="Entry lambda expression", span="241-250"];
n228 [cluster="lambda expression", label="Commit(sql, x => x.DecrementCounter(''my-key''))", span="243-243"];
n229 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="245-245"];
n234 [cluster="lambda expression", label="Entry lambda expression", span="243-243"];
n230 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="247-247"];
n231 [cluster="lambda expression", label="Assert.Equal(-1, record.Value)", span="248-248"];
n232 [cluster="lambda expression", label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="249-249"];
n233 [cluster="lambda expression", label="Exit lambda expression", span="241-250"];
n235 [cluster="lambda expression", label="x.DecrementCounter(''my-key'')", span="243-243"];
n236 [cluster="lambda expression", label="Exit lambda expression", span="243-243"];
n237 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="149-149"];
n238 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="254-254"];
n239 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime)record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="256-270"];
n240 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="254-254"];
n241 [cluster="lambda expression", label="Entry lambda expression", span="256-270"];
n242 [cluster="lambda expression", label="Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="258-258"];
n243 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="260-260"];
n251 [cluster="lambda expression", label="Entry lambda expression", span="258-258"];
n244 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="262-262"];
n245 [cluster="lambda expression", label="Assert.Equal(-1, record.Value)", span="263-263"];
n246 [cluster="lambda expression", label="Assert.NotNull(record.ExpireAt)", span="264-264"];
n247 [cluster="lambda expression", label="var expireAt = (DateTime)record.ExpireAt", span="266-266"];
n248 [cluster="lambda expression", label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="268-268"];
n249 [cluster="lambda expression", label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="269-269"];
n250 [cluster="lambda expression", label="Exit lambda expression", span="256-270"];
n252 [cluster="lambda expression", label="x.DecrementCounter(''my-key'', TimeSpan.FromDays(1))", span="258-258"];
n253 [cluster="lambda expression", label="Exit lambda expression", span="258-258"];
n254 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="156-156"];
n255 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="274-274"];
n256 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="276-287"];
n257 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="274-274"];
n258 [cluster="lambda expression", label="Entry lambda expression", span="276-287"];
n259 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                })", span="278-282"];
n260 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="284-284"];
n263 [cluster="lambda expression", label="Entry lambda expression", span="278-282"];
n261 [cluster="lambda expression", label="Assert.Equal(2, recordCount)", span="286-286"];
n262 [cluster="lambda expression", label="Exit lambda expression", span="276-287"];
n264 [cluster="lambda expression", label="x.DecrementCounter(''my-key'')", span="280-280"];
n265 [cluster="lambda expression", label="x.DecrementCounter(''my-key'')", span="281-281"];
n266 [cluster="lambda expression", label="Exit lambda expression", span="278-282"];
n267 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="291-291"];
n268 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(0.0, record.Score, 2);\r\n            })", span="293-302"];
n269 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="291-291"];
n270 [cluster="lambda expression", label="Entry lambda expression", span="293-302"];
n271 [cluster="lambda expression", label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value''))", span="295-295"];
n272 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="297-297"];
n277 [cluster="lambda expression", label="Entry lambda expression", span="295-295"];
n273 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="299-299"];
n274 [cluster="lambda expression", label="Assert.Equal(''my-value'', record.Value)", span="300-300"];
n275 [cluster="lambda expression", label="Assert.Equal(0.0, record.Score, 2)", span="301-301"];
n276 [cluster="lambda expression", label="Exit lambda expression", span="293-302"];
n278 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="295-295"];
n279 [cluster="lambda expression", label="Exit lambda expression", span="295-295"];
n280 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="163-163"];
n281 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="306-306"];
n282 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="308-319"];
n283 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="306-306"];
n284 [cluster="lambda expression", label="Entry lambda expression", span="308-319"];
n285 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                })", span="310-314"];
n286 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="316-316"];
n289 [cluster="lambda expression", label="Entry lambda expression", span="310-314"];
n287 [cluster="lambda expression", label="Assert.Equal(2, recordCount)", span="318-318"];
n288 [cluster="lambda expression", label="Exit lambda expression", span="308-319"];
n290 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="312-312"];
n291 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''another-value'')", span="313-313"];
n292 [cluster="lambda expression", label="Exit lambda expression", span="310-314"];
n293 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="323-323"];
n294 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n                \r\n                Assert.Equal(1, recordCount);\r\n            })", span="325-336"];
n295 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="323-323"];
n296 [cluster="lambda expression", label="Entry lambda expression", span="325-336"];
n297 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                })", span="327-331"];
n298 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="333-333"];
n301 [cluster="lambda expression", label="Entry lambda expression", span="327-331"];
n299 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="335-335"];
n300 [cluster="lambda expression", label="Exit lambda expression", span="325-336"];
n302 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="329-329"];
n303 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="330-330"];
n304 [cluster="lambda expression", label="Exit lambda expression", span="327-331"];
n305 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="340-340"];
n306 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="342-351"];
n307 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="340-340"];
n308 [cluster="lambda expression", label="Entry lambda expression", span="342-351"];
n309 [cluster="lambda expression", label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2))", span="344-344"];
n310 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="346-346"];
n315 [cluster="lambda expression", label="Entry lambda expression", span="344-344"];
n311 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="348-348"];
n312 [cluster="lambda expression", label="Assert.Equal(''my-value'', record.Value)", span="349-349"];
n313 [cluster="lambda expression", label="Assert.Equal(3.2, record.Score, 3)", span="350-350"];
n314 [cluster="lambda expression", label="Exit lambda expression", span="342-351"];
n316 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="344-344"];
n317 [cluster="lambda expression", label="Exit lambda expression", span="344-344"];
n318 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="168-168"];
n319 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="355-355"];
n320 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                });\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="357-368"];
n321 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="355-355"];
n322 [cluster="lambda expression", label="Entry lambda expression", span="357-368"];
n323 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                })", span="359-363"];
n324 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="365-365"];
n327 [cluster="lambda expression", label="Entry lambda expression", span="359-363"];
n325 [cluster="lambda expression", label="Assert.Equal(3.2, record.Score, 3)", span="367-367"];
n326 [cluster="lambda expression", label="Exit lambda expression", span="357-368"];
n328 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="361-361"];
n329 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="362-362"];
n330 [cluster="lambda expression", label="Exit lambda expression", span="359-363"];
n331 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="372-372"];
n332 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="374-385"];
n333 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="372-372"];
n334 [cluster="lambda expression", label="Entry lambda expression", span="374-385"];
n335 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                })", span="376-380"];
n336 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="382-382"];
n339 [cluster="lambda expression", label="Entry lambda expression", span="376-380"];
n337 [cluster="lambda expression", label="Assert.Equal(0, recordCount)", span="384-384"];
n338 [cluster="lambda expression", label="Exit lambda expression", span="374-385"];
n340 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="378-378"];
n341 [cluster="lambda expression", label="x.RemoveFromSet(''my-key'', ''my-value'')", span="379-379"];
n342 [cluster="lambda expression", label="Exit lambda expression", span="376-380"];
n343 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="183-183"];
n344 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="389-389"];
n345 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="391-402"];
n346 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="389-389"];
n347 [cluster="lambda expression", label="Entry lambda expression", span="391-402"];
n348 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                })", span="393-397"];
n349 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="399-399"];
n352 [cluster="lambda expression", label="Entry lambda expression", span="393-397"];
n350 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="401-401"];
n351 [cluster="lambda expression", label="Exit lambda expression", span="391-402"];
n353 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="395-395"];
n354 [cluster="lambda expression", label="x.RemoveFromSet(''my-key'', ''different-value'')", span="396-396"];
n355 [cluster="lambda expression", label="Exit lambda expression", span="393-397"];
n356 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="406-406"];
n357 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="408-419"];
n358 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="406-406"];
n359 [cluster="lambda expression", label="Entry lambda expression", span="408-419"];
n360 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                })", span="410-414"];
n361 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="416-416"];
n364 [cluster="lambda expression", label="Entry lambda expression", span="410-414"];
n362 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="418-418"];
n363 [cluster="lambda expression", label="Exit lambda expression", span="408-419"];
n365 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="412-412"];
n366 [cluster="lambda expression", label="x.RemoveFromSet(''different-key'', ''my-value'')", span="413-413"];
n367 [cluster="lambda expression", label="Exit lambda expression", span="410-414"];
n368 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="423-423"];
n369 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.InsertToList(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.List'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n            })", span="425-433"];
n370 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="423-423"];
n371 [cluster="lambda expression", label="Entry lambda expression", span="425-433"];
n372 [cluster="lambda expression", label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''))", span="427-427"];
n373 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.List'').Single()", span="429-429"];
n377 [cluster="lambda expression", label="Entry lambda expression", span="427-427"];
n374 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="431-431"];
n375 [cluster="lambda expression", label="Assert.Equal(''my-value'', record.Value)", span="432-432"];
n376 [cluster="lambda expression", label="Exit lambda expression", span="425-433"];
n378 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="427-427"];
n379 [cluster="lambda expression", label="Exit lambda expression", span="427-427"];
n380 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="193-193"];
n381 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="437-437"];
n382 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="439-450"];
n383 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="437-437"];
n384 [cluster="lambda expression", label="Entry lambda expression", span="439-450"];
n385 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                })", span="441-445"];
n386 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="447-447"];
n389 [cluster="lambda expression", label="Entry lambda expression", span="441-445"];
n387 [cluster="lambda expression", label="Assert.Equal(2, recordCount)", span="449-449"];
n388 [cluster="lambda expression", label="Exit lambda expression", span="439-450"];
n390 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="443-443"];
n391 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="444-444"];
n392 [cluster="lambda expression", label="Exit lambda expression", span="441-445"];
n393 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="454-454"];
n394 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="456-468"];
n395 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="454-454"];
n396 [cluster="lambda expression", label="Entry lambda expression", span="456-468"];
n397 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                })", span="458-463"];
n398 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="465-465"];
n401 [cluster="lambda expression", label="Entry lambda expression", span="458-463"];
n399 [cluster="lambda expression", label="Assert.Equal(0, recordCount)", span="467-467"];
n400 [cluster="lambda expression", label="Exit lambda expression", span="456-468"];
n402 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="460-460"];
n403 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="461-461"];
n404 [cluster="lambda expression", label="x.RemoveFromList(''my-key'', ''my-value'')", span="462-462"];
n405 [cluster="lambda expression", label="Exit lambda expression", span="458-463"];
n406 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="201-201"];
n407 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="472-472"];
n408 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="474-485"];
n409 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="472-472"];
n410 [cluster="lambda expression", label="Entry lambda expression", span="474-485"];
n411 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                })", span="476-480"];
n412 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="482-482"];
n415 [cluster="lambda expression", label="Entry lambda expression", span="476-480"];
n413 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="484-484"];
n414 [cluster="lambda expression", label="Exit lambda expression", span="474-485"];
n416 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="478-478"];
n417 [cluster="lambda expression", label="x.RemoveFromList(''my-key'', ''different-value'')", span="479-479"];
n418 [cluster="lambda expression", label="Exit lambda expression", span="476-480"];
n419 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="489-489"];
n420 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="491-502"];
n421 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="489-489"];
n422 [cluster="lambda expression", label="Entry lambda expression", span="491-502"];
n423 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                })", span="493-497"];
n424 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="499-499"];
n427 [cluster="lambda expression", label="Entry lambda expression", span="493-497"];
n425 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="501-501"];
n426 [cluster="lambda expression", label="Exit lambda expression", span="491-502"];
n428 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="495-495"];
n429 [cluster="lambda expression", label="x.RemoveFromList(''different-key'', ''my-value'')", span="496-496"];
n430 [cluster="lambda expression", label="Exit lambda expression", span="493-497"];
n431 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="506-506"];
n432 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                });\r\n\r\n                var records = sql.Query(''select * from HangFire.List'').ToArray();\r\n\r\n                Assert.Equal(2, records.Length);\r\n                Assert.Equal(''1'', records[0].Value);\r\n                Assert.Equal(''2'', records[1].Value);\r\n            })", span="508-524"];
n433 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="506-506"];
n434 [cluster="lambda expression", label="Entry lambda expression", span="508-524"];
n435 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                })", span="510-517"];
n436 [cluster="lambda expression", label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="519-519"];
n442 [cluster="lambda expression", label="Entry lambda expression", span="510-517"];
n437 [cluster="lambda expression", label="Assert.Equal(2, records.Length)", span="521-521"];
n441 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
n438 [cluster="lambda expression", label="Assert.Equal(''1'', records[0].Value)", span="522-522"];
n439 [cluster="lambda expression", label="Assert.Equal(''2'', records[1].Value)", span="523-523"];
n440 [cluster="lambda expression", label="Exit lambda expression", span="508-524"];
n443 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''0'')", span="512-512"];
n444 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''1'')", span="513-513"];
n445 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''2'')", span="514-514"];
n446 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''3'')", span="515-515"];
n447 [cluster="lambda expression", label="x.TrimList(''my-key'', 1, 2)", span="516-516"];
n448 [cluster="lambda expression", label="Exit lambda expression", span="510-517"];
n449 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="209-209"];
n450 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="528-528"];
n451 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="530-543"];
n452 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="528-528"];
n453 [cluster="lambda expression", label="Entry lambda expression", span="530-543"];
n454 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="532-538"];
n455 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="540-540"];
n458 [cluster="lambda expression", label="Entry lambda expression", span="532-538"];
n456 [cluster="lambda expression", label="Assert.Equal(2, recordCount)", span="542-542"];
n457 [cluster="lambda expression", label="Exit lambda expression", span="530-543"];
n459 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''0'')", span="534-534"];
n460 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''1'')", span="535-535"];
n461 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''2'')", span="536-536"];
n462 [cluster="lambda expression", label="x.TrimList(''my-key'', 1, 100)", span="537-537"];
n463 [cluster="lambda expression", label="Exit lambda expression", span="532-538"];
n464 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="547-547"];
n465 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="549-560"];
n466 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="547-547"];
n467 [cluster="lambda expression", label="Entry lambda expression", span="549-560"];
n468 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="551-555"];
n469 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="557-557"];
n472 [cluster="lambda expression", label="Entry lambda expression", span="551-555"];
n470 [cluster="lambda expression", label="Assert.Equal(0, recordCount)", span="559-559"];
n471 [cluster="lambda expression", label="Exit lambda expression", span="549-560"];
n473 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''0'')", span="553-553"];
n474 [cluster="lambda expression", label="x.TrimList(''my-key'', 1, 100)", span="554-554"];
n475 [cluster="lambda expression", label="Exit lambda expression", span="551-555"];
n476 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="564-564"];
n477 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="566-577"];
n478 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="564-564"];
n479 [cluster="lambda expression", label="Entry lambda expression", span="566-577"];
n480 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                })", span="568-572"];
n481 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="574-574"];
n484 [cluster="lambda expression", label="Entry lambda expression", span="568-572"];
n482 [cluster="lambda expression", label="Assert.Equal(0, recordCount)", span="576-576"];
n483 [cluster="lambda expression", label="Exit lambda expression", span="566-577"];
n485 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''0'')", span="570-570"];
n486 [cluster="lambda expression", label="x.TrimList(''my-key'', 1, 0)", span="571-571"];
n487 [cluster="lambda expression", label="Exit lambda expression", span="568-572"];
n488 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="581-581"];
n489 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="583-594"];
n490 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="581-581"];
n491 [cluster="lambda expression", label="Entry lambda expression", span="583-594"];
n492 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                })", span="585-589"];
n493 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="591-591"];
n496 [cluster="lambda expression", label="Entry lambda expression", span="585-589"];
n494 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="593-593"];
n495 [cluster="lambda expression", label="Exit lambda expression", span="583-594"];
n497 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''0'')", span="587-587"];
n498 [cluster="lambda expression", label="x.TrimList(''another-key'', 1, 0)", span="588-588"];
n499 [cluster="lambda expression", label="Exit lambda expression", span="585-589"];
n500 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="598-598"];
n501 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="600-606"];
n502 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="598-598"];
n503 [cluster="lambda expression", label="Entry lambda expression", span="600-606"];
n504 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())))", span="602-603"];
n508 [cluster="lambda expression", label="Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()))", span="603-603"];
n505 [cluster="lambda expression", label="Assert.Equal(''key'', exception.ParamName)", span="605-605"];
n507 [cluster="lambda expression", label="Entry lambda expression", span="603-603"];
n506 [cluster="lambda expression", label="Exit lambda expression", span="600-606"];
n509 [cluster="lambda expression", label="Exit lambda expression", span="603-603"];
n510 [cluster="lambda expression", label="Entry lambda expression", span="603-603"];
n511 [cluster="lambda expression", label="x.SetRangeInHash(null, new Dictionary<string, string>())", span="603-603"];
n512 [cluster="lambda expression", label="Exit lambda expression", span="603-603"];
n513 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="224-224"];
n514 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="610-610"];
n515 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="612-618"];
n516 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="610-610"];
n517 [cluster="lambda expression", label="Entry lambda expression", span="612-618"];
n518 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)))", span="614-615"];
n522 [cluster="lambda expression", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', null))", span="615-615"];
n519 [cluster="lambda expression", label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="617-617"];
n521 [cluster="lambda expression", label="Entry lambda expression", span="615-615"];
n520 [cluster="lambda expression", label="Exit lambda expression", span="612-618"];
n523 [cluster="lambda expression", label="Exit lambda expression", span="615-615"];
n524 [cluster="lambda expression", label="Entry lambda expression", span="615-615"];
n525 [cluster="lambda expression", label="x.SetRangeInHash(''some-hash'', null)", span="615-615"];
n526 [cluster="lambda expression", label="Exit lambda expression", span="615-615"];
n527 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="622-622"];
n528 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }));\r\n\r\n                var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="624-639"];
n529 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="622-622"];
n530 [cluster="lambda expression", label="Entry lambda expression", span="624-639"];
n531 [cluster="lambda expression", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }))", span="626-630"];
n532 [cluster="lambda expression", label="var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="632-635"];
n537 [cluster="lambda expression", label="Entry lambda expression", span="626-630"];
n533 [cluster="lambda expression", label="Assert.Equal(''Value1'', result[''Key1''])", span="637-637"];
n536 [cluster="Unk.ToDictionary", label="Entry Unk.ToDictionary", span=""];
n540 [cluster="lambda expression", label="Entry lambda expression", span="635-635"];
n543 [cluster="lambda expression", label="Entry lambda expression", span="635-635"];
n534 [cluster="lambda expression", label="Assert.Equal(''Value2'', result[''Key2''])", span="638-638"];
n535 [cluster="lambda expression", label="Exit lambda expression", span="624-639"];
n538 [cluster="lambda expression", label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="626-630"];
n539 [cluster="lambda expression", label="Exit lambda expression", span="626-630"];
n541 [cluster="lambda expression", label="(string)x.Field", span="635-635"];
n542 [cluster="lambda expression", label="Exit lambda expression", span="635-635"];
n544 [cluster="lambda expression", label="(string)x.Value", span="635-635"];
n545 [cluster="lambda expression", label="Exit lambda expression", span="635-635"];
n546 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", span="643-643"];
n547 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null)));\r\n            })", span="645-649"];
n548 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", span="643-643"];
n549 [cluster="lambda expression", label="Entry lambda expression", span="645-649"];
n550 [cluster="lambda expression", label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null)))", span="647-648"];
n553 [cluster="lambda expression", label="Commit(sql, x => x.RemoveHash(null))", span="648-648"];
n551 [cluster="lambda expression", label="Exit lambda expression", span="645-649"];
n552 [cluster="lambda expression", label="Entry lambda expression", span="648-648"];
n554 [cluster="lambda expression", label="Exit lambda expression", span="648-648"];
n555 [cluster="lambda expression", label="Entry lambda expression", span="648-648"];
n556 [cluster="lambda expression", label="x.RemoveHash(null)", span="648-648"];
n557 [cluster="lambda expression", label="Exit lambda expression", span="648-648"];
n558 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", span="242-242"];
n559 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", span="653-653"];
n560 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }));\r\n\r\n                // Act\r\n                Commit(sql, x => x.RemoveHash(''some-hash''));\r\n\r\n                // Assert\r\n                var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single();\r\n                Assert.Equal(0, count);\r\n            })", span="655-670"];
n561 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", span="653-653"];
n562 [cluster="lambda expression", label="Entry lambda expression", span="655-670"];
n563 [cluster="lambda expression", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }))", span="658-662"];
n564 [cluster="lambda expression", label="Commit(sql, x => x.RemoveHash(''some-hash''))", span="665-665"];
n565 [cluster="lambda expression", label="var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single()", span="668-668"];
n568 [cluster="lambda expression", label="Entry lambda expression", span="658-662"];
n571 [cluster="lambda expression", label="Entry lambda expression", span="665-665"];
n566 [cluster="lambda expression", label="Assert.Equal(0, count)", span="669-669"];
n567 [cluster="lambda expression", label="Exit lambda expression", span="655-670"];
n569 [cluster="lambda expression", label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="658-662"];
n570 [cluster="lambda expression", label="Exit lambda expression", span="658-662"];
n572 [cluster="lambda expression", label="x.RemoveHash(''some-hash'')", span="665-665"];
n573 [cluster="lambda expression", label="Exit lambda expression", span="665-665"];
n574 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", span="674-674"];
n575 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>())));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="676-682"];
n576 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", span="674-674"];
n577 [cluster="lambda expression", label="Entry lambda expression", span="676-682"];
n578 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>())))", span="678-679"];
n582 [cluster="lambda expression", label="Commit(sql, x => x.AddRangeToSet(null, new List<string>()))", span="679-679"];
n579 [cluster="lambda expression", label="Assert.Equal(''key'', exception.ParamName)", span="681-681"];
n581 [cluster="lambda expression", label="Entry lambda expression", span="679-679"];
n580 [cluster="lambda expression", label="Exit lambda expression", span="676-682"];
n583 [cluster="lambda expression", label="Exit lambda expression", span="679-679"];
n584 [cluster="lambda expression", label="Entry lambda expression", span="679-679"];
n585 [cluster="lambda expression", label="x.AddRangeToSet(null, new List<string>())", span="679-679"];
n586 [cluster="lambda expression", label="Exit lambda expression", span="679-679"];
n587 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n588 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", span="252-252"];
n589 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", span="686-686"];
n590 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null)));\r\n\r\n                Assert.Equal(''items'', exception.ParamName);\r\n            })", span="688-694"];
n591 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", span="686-686"];
n592 [cluster="lambda expression", label="Entry lambda expression", span="688-694"];
n593 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null)))", span="690-691"];
n597 [cluster="lambda expression", label="Commit(sql, x => x.AddRangeToSet(''my-set'', null))", span="691-691"];
n594 [cluster="lambda expression", label="Assert.Equal(''items'', exception.ParamName)", span="693-693"];
n596 [cluster="lambda expression", label="Entry lambda expression", span="691-691"];
n595 [cluster="lambda expression", label="Exit lambda expression", span="688-694"];
n598 [cluster="lambda expression", label="Exit lambda expression", span="691-691"];
n599 [cluster="lambda expression", label="Entry lambda expression", span="691-691"];
n600 [cluster="lambda expression", label="x.AddRangeToSet(''my-set'', null)", span="691-691"];
n601 [cluster="lambda expression", label="Exit lambda expression", span="691-691"];
n602 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", span="698-698"];
n603 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", label="UseConnection(sql =>\r\n            {\r\n                var items = new List<string> { ''1'', ''2'', ''3'' };\r\n\r\n                Commit(sql, x => x.AddRangeToSet(''my-set'', items));\r\n\r\n                var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''');\r\n                Assert.Equal(items, records);\r\n            })", span="700-708"];
n604 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", span="698-698"];
n605 [cluster="lambda expression", label="Entry lambda expression", span="700-708"];
n606 [cluster="lambda expression", label="var items = new List<string> { ''1'', ''2'', ''3'' }", span="702-702"];
n607 [cluster="lambda expression", label="Commit(sql, x => x.AddRangeToSet(''my-set'', items))", span="704-704"];
n608 [cluster="lambda expression", label="var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''')", span="706-706"];
n612 [cluster="lambda expression", label="x.AddRangeToSet(''my-set'', items)", span="704-704"];
n609 [cluster="lambda expression", label="Assert.Equal(items, records)", span="707-707"];
n611 [cluster="lambda expression", label="Entry lambda expression", span="704-704"];
n610 [cluster="lambda expression", label="Exit lambda expression", span="700-708"];
n613 [cluster="lambda expression", label="Exit lambda expression", span="704-704"];
n614 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", span="712-712"];
n615 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null)));\r\n            })", span="714-718"];
n616 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", span="712-712"];
n617 [cluster="lambda expression", label="Entry lambda expression", span="714-718"];
n618 [cluster="lambda expression", label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null)))", span="716-717"];
n621 [cluster="lambda expression", label="Commit(sql, x => x.RemoveSet(null))", span="717-717"];
n619 [cluster="lambda expression", label="Exit lambda expression", span="714-718"];
n620 [cluster="lambda expression", label="Entry lambda expression", span="717-717"];
n622 [cluster="lambda expression", label="Exit lambda expression", span="717-717"];
n623 [cluster="lambda expression", label="Entry lambda expression", span="717-717"];
n624 [cluster="lambda expression", label="x.RemoveSet(null)", span="717-717"];
n625 [cluster="lambda expression", label="Exit lambda expression", span="717-717"];
n626 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", span="265-265"];
n627 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", span="722-722"];
n628 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score]) values (@key, @value, 0.0)''", span="724-725"];
n629 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", label="UseConnection(sql =>\r\n            {\r\n                sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                Commit(sql, x => x.RemoveSet(''set-1''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n                Assert.Equal(''set-2'', record.Key);\r\n            })", span="727-739"];
n632 [cluster="lambda expression", label="sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="729-733"];
n630 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", span="722-722"];
n631 [cluster="lambda expression", label="Entry lambda expression", span="727-739"];
n633 [cluster="lambda expression", label="Commit(sql, x => x.RemoveSet(''set-1''))", span="735-735"];
n634 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="737-737"];
n637 [cluster="Unk.Execute", label="Entry Unk.Execute", span=""];
n638 [cluster="lambda expression", label="Entry lambda expression", span="735-735"];
n635 [cluster="lambda expression", label="Assert.Equal(''set-2'', record.Key)", span="738-738"];
n636 [cluster="lambda expression", label="Exit lambda expression", span="727-739"];
n639 [cluster="lambda expression", label="x.RemoveSet(''set-1'')", span="735-735"];
n640 [cluster="lambda expression", label="Exit lambda expression", span="735-735"];
n641 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", span="743-743"];
n642 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="745-751"];
n643 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", span="743-743"];
n644 [cluster="lambda expression", label="Entry lambda expression", span="745-751"];
n645 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5))))", span="747-748"];
n649 [cluster="lambda expression", label="Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5)))", span="748-748"];
n646 [cluster="lambda expression", label="Assert.Equal(''key'', exception.ParamName)", span="750-750"];
n648 [cluster="lambda expression", label="Entry lambda expression", span="748-748"];
n647 [cluster="lambda expression", label="Exit lambda expression", span="745-751"];
n650 [cluster="lambda expression", label="Exit lambda expression", span="748-748"];
n651 [cluster="lambda expression", label="Entry lambda expression", span="748-748"];
n652 [cluster="lambda expression", label="x.ExpireHash(null, TimeSpan.FromMinutes(5))", span="748-748"];
n653 [cluster="lambda expression", label="Exit lambda expression", span="748-748"];
n654 [cluster="System.TimeSpan.FromMinutes(double)", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
n655 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", span="275-275"];
n656 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", span="755-755"];
n657 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field])\r\nvalues (@key, @field)''", span="757-759"];
n658 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1'']);\r\n                Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''hash-2'']);\r\n            })", span="761-778"];
n661 [cluster="lambda expression", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                })", span="764-768"];
n659 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", span="755-755"];
n660 [cluster="lambda expression", label="Entry lambda expression", span="761-778"];
n662 [cluster="lambda expression", label="Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)))", span="771-771"];
n663 [cluster="lambda expression", label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="774-774"];
n668 [cluster="lambda expression", label="Entry lambda expression", span="771-771"];
n664 [cluster="lambda expression", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1''])", span="775-775"];
n671 [cluster="lambda expression", label="Entry lambda expression", span="774-774"];
n674 [cluster="lambda expression", label="Entry lambda expression", span="774-774"];
n665 [cluster="lambda expression", label="Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61))", span="776-776"];
n666 [cluster="lambda expression", label="Assert.Null(records[''hash-2''])", span="777-777"];
n667 [cluster="lambda expression", label="Exit lambda expression", span="761-778"];
n669 [cluster="lambda expression", label="x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60))", span="771-771"];
n670 [cluster="lambda expression", label="Exit lambda expression", span="771-771"];
n672 [cluster="lambda expression", label="(string)x.Key", span="774-774"];
n673 [cluster="lambda expression", label="Exit lambda expression", span="774-774"];
n675 [cluster="lambda expression", label="(DateTime?)x.ExpireAt", span="774-774"];
n676 [cluster="lambda expression", label="Exit lambda expression", span="774-774"];
n677 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", span="782-782"];
n678 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="784-790"];
n679 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", span="782-782"];
n680 [cluster="lambda expression", label="Entry lambda expression", span="784-790"];
n681 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45))))", span="786-787"];
n685 [cluster="lambda expression", label="Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45)))", span="787-787"];
n682 [cluster="lambda expression", label="Assert.Equal(''key'', exception.ParamName)", span="789-789"];
n684 [cluster="lambda expression", label="Entry lambda expression", span="787-787"];
n683 [cluster="lambda expression", label="Exit lambda expression", span="784-790"];
n686 [cluster="lambda expression", label="Exit lambda expression", span="787-787"];
n687 [cluster="lambda expression", label="Entry lambda expression", span="787-787"];
n688 [cluster="lambda expression", label="x.ExpireSet(null, TimeSpan.FromSeconds(45))", span="787-787"];
n689 [cluster="lambda expression", label="Exit lambda expression", span="787-787"];
n690 [cluster="System.TimeSpan.FromSeconds(double)", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
n691 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="286-286"];
n692 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", span="794-794"];
n693 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@key, @value, 0.0)''", span="796-798"];
n694 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1'']);\r\n                Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''set-2'']);\r\n            })", span="800-817"];
n697 [cluster="lambda expression", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="803-807"];
n695 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", span="794-794"];
n696 [cluster="lambda expression", label="Entry lambda expression", span="800-817"];
n698 [cluster="lambda expression", label="Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)))", span="810-810"];
n699 [cluster="lambda expression", label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="813-813"];
n704 [cluster="lambda expression", label="Entry lambda expression", span="810-810"];
n700 [cluster="lambda expression", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1''])", span="814-814"];
n707 [cluster="lambda expression", label="Entry lambda expression", span="813-813"];
n710 [cluster="lambda expression", label="Entry lambda expression", span="813-813"];
n701 [cluster="lambda expression", label="Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61))", span="815-815"];
n702 [cluster="lambda expression", label="Assert.Null(records[''set-2''])", span="816-816"];
n703 [cluster="lambda expression", label="Exit lambda expression", span="800-817"];
n705 [cluster="lambda expression", label="x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60))", span="810-810"];
n706 [cluster="lambda expression", label="Exit lambda expression", span="810-810"];
n708 [cluster="lambda expression", label="(string)x.Key", span="813-813"];
n709 [cluster="lambda expression", label="Exit lambda expression", span="813-813"];
n711 [cluster="lambda expression", label="(DateTime?)x.ExpireAt", span="813-813"];
n712 [cluster="lambda expression", label="Exit lambda expression", span="813-813"];
n713 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", span="821-821"];
n714 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="823-829"];
n715 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", span="821-821"];
n716 [cluster="lambda expression", label="Entry lambda expression", span="823-829"];
n717 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45))))", span="825-826"];
n721 [cluster="lambda expression", label="Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45)))", span="826-826"];
n718 [cluster="lambda expression", label="Assert.Equal(''key'', exception.ParamName)", span="828-828"];
n720 [cluster="lambda expression", label="Entry lambda expression", span="826-826"];
n719 [cluster="lambda expression", label="Exit lambda expression", span="823-829"];
n722 [cluster="lambda expression", label="Exit lambda expression", span="826-826"];
n723 [cluster="lambda expression", label="Entry lambda expression", span="826-826"];
n724 [cluster="lambda expression", label="x.ExpireList(null, TimeSpan.FromSeconds(45))", span="826-826"];
n725 [cluster="lambda expression", label="Exit lambda expression", span="826-826"];
n726 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", span="297-297"];
n727 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", span="833-833"];
n728 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key]) values (@key)''", span="835-836"];
n729 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1'']);\r\n                Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''list-2'']);\r\n            })", span="838-855"];
n732 [cluster="lambda expression", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                })", span="841-845"];
n730 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", span="833-833"];
n731 [cluster="lambda expression", label="Entry lambda expression", span="838-855"];
n733 [cluster="lambda expression", label="Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)))", span="848-848"];
n734 [cluster="lambda expression", label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="851-851"];
n739 [cluster="lambda expression", label="Entry lambda expression", span="848-848"];
n735 [cluster="lambda expression", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1''])", span="852-852"];
n742 [cluster="lambda expression", label="Entry lambda expression", span="851-851"];
n745 [cluster="lambda expression", label="Entry lambda expression", span="851-851"];
n736 [cluster="lambda expression", label="Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61))", span="853-853"];
n737 [cluster="lambda expression", label="Assert.Null(records[''list-2''])", span="854-854"];
n738 [cluster="lambda expression", label="Exit lambda expression", span="838-855"];
n740 [cluster="lambda expression", label="x.ExpireList(''list-1'', TimeSpan.FromMinutes(60))", span="848-848"];
n741 [cluster="lambda expression", label="Exit lambda expression", span="848-848"];
n743 [cluster="lambda expression", label="(string)x.Key", span="851-851"];
n744 [cluster="lambda expression", label="Exit lambda expression", span="851-851"];
n746 [cluster="lambda expression", label="(DateTime?)x.ExpireAt", span="851-851"];
n747 [cluster="lambda expression", label="Exit lambda expression", span="851-851"];
n748 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", span="859-859"];
n749 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="861-867"];
n750 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", span="859-859"];
n751 [cluster="lambda expression", label="Entry lambda expression", span="861-867"];
n752 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null)))", span="863-864"];
n756 [cluster="lambda expression", label="Commit(sql, x => x.PersistHash(null))", span="864-864"];
n753 [cluster="lambda expression", label="Assert.Equal(''key'', exception.ParamName)", span="866-866"];
n755 [cluster="lambda expression", label="Entry lambda expression", span="864-864"];
n754 [cluster="lambda expression", label="Exit lambda expression", span="861-867"];
n757 [cluster="lambda expression", label="Exit lambda expression", span="864-864"];
n758 [cluster="lambda expression", label="Entry lambda expression", span="864-864"];
n759 [cluster="lambda expression", label="x.PersistHash(null)", span="864-864"];
n760 [cluster="lambda expression", label="Exit lambda expression", span="864-864"];
n761 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", span="308-308"];
n762 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", span="871-871"];
n763 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [ExpireAt])\r\nvalues (@key, @field, @expireAt)''", span="873-875"];
n764 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistHash(''hash-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''hash-1'']);\r\n                Assert.NotNull(records[''hash-2'']);\r\n            })", span="877-893"];
n767 [cluster="lambda expression", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="880-884"];
n765 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", span="871-871"];
n766 [cluster="lambda expression", label="Entry lambda expression", span="877-893"];
n768 [cluster="lambda expression", label="Commit(sql, x => x.PersistHash(''hash-1''))", span="887-887"];
n769 [cluster="lambda expression", label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="890-890"];
n773 [cluster="lambda expression", label="Entry lambda expression", span="887-887"];
n770 [cluster="lambda expression", label="Assert.Null(records[''hash-1''])", span="891-891"];
n776 [cluster="lambda expression", label="Entry lambda expression", span="890-890"];
n779 [cluster="lambda expression", label="Entry lambda expression", span="890-890"];
n771 [cluster="lambda expression", label="Assert.NotNull(records[''hash-2''])", span="892-892"];
n772 [cluster="lambda expression", label="Exit lambda expression", span="877-893"];
n774 [cluster="lambda expression", label="x.PersistHash(''hash-1'')", span="887-887"];
n775 [cluster="lambda expression", label="Exit lambda expression", span="887-887"];
n777 [cluster="lambda expression", label="(string)x.Key", span="890-890"];
n778 [cluster="lambda expression", label="Exit lambda expression", span="890-890"];
n780 [cluster="lambda expression", label="(DateTime?)x.ExpireAt", span="890-890"];
n781 [cluster="lambda expression", label="Exit lambda expression", span="890-890"];
n782 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", span="897-897"];
n783 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="899-905"];
n784 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", span="897-897"];
n785 [cluster="lambda expression", label="Entry lambda expression", span="899-905"];
n786 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null)))", span="901-902"];
n790 [cluster="lambda expression", label="Commit(sql, x => x.PersistSet(null))", span="902-902"];
n787 [cluster="lambda expression", label="Assert.Equal(''key'', exception.ParamName)", span="904-904"];
n789 [cluster="lambda expression", label="Entry lambda expression", span="902-902"];
n788 [cluster="lambda expression", label="Exit lambda expression", span="899-905"];
n791 [cluster="lambda expression", label="Exit lambda expression", span="902-902"];
n792 [cluster="lambda expression", label="Entry lambda expression", span="902-902"];
n793 [cluster="lambda expression", label="x.PersistSet(null)", span="902-902"];
n794 [cluster="lambda expression", label="Exit lambda expression", span="902-902"];
n795 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", span="319-319"];
n796 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", span="909-909"];
n797 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [ExpireAt], [Score])\r\nvalues (@key, @value, @expireAt, 0.0)''", span="911-913"];
n798 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistSet(''set-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''set-1'']);\r\n                Assert.NotNull(records[''set-2'']);\r\n            })", span="915-931"];
n801 [cluster="lambda expression", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="918-922"];
n799 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", span="909-909"];
n800 [cluster="lambda expression", label="Entry lambda expression", span="915-931"];
n802 [cluster="lambda expression", label="Commit(sql, x => x.PersistSet(''set-1''))", span="925-925"];
n803 [cluster="lambda expression", label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="928-928"];
n807 [cluster="lambda expression", label="Entry lambda expression", span="925-925"];
n804 [cluster="lambda expression", label="Assert.Null(records[''set-1''])", span="929-929"];
n810 [cluster="lambda expression", label="Entry lambda expression", span="928-928"];
n813 [cluster="lambda expression", label="Entry lambda expression", span="928-928"];
n805 [cluster="lambda expression", label="Assert.NotNull(records[''set-2''])", span="930-930"];
n806 [cluster="lambda expression", label="Exit lambda expression", span="915-931"];
n808 [cluster="lambda expression", label="x.PersistSet(''set-1'')", span="925-925"];
n809 [cluster="lambda expression", label="Exit lambda expression", span="925-925"];
n811 [cluster="lambda expression", label="(string)x.Key", span="928-928"];
n812 [cluster="lambda expression", label="Exit lambda expression", span="928-928"];
n814 [cluster="lambda expression", label="(DateTime?)x.ExpireAt", span="928-928"];
n815 [cluster="lambda expression", label="Exit lambda expression", span="928-928"];
n816 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", span="935-935"];
n817 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="937-943"];
n818 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", span="935-935"];
n819 [cluster="lambda expression", label="Entry lambda expression", span="937-943"];
n820 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null)))", span="939-940"];
n824 [cluster="lambda expression", label="Commit(sql, x => x.PersistList(null))", span="940-940"];
n821 [cluster="lambda expression", label="Assert.Equal(''key'', exception.ParamName)", span="942-942"];
n823 [cluster="lambda expression", label="Entry lambda expression", span="940-940"];
n822 [cluster="lambda expression", label="Exit lambda expression", span="937-943"];
n825 [cluster="lambda expression", label="Exit lambda expression", span="940-940"];
n826 [cluster="lambda expression", label="Entry lambda expression", span="940-940"];
n827 [cluster="lambda expression", label="x.PersistList(null)", span="940-940"];
n828 [cluster="lambda expression", label="Exit lambda expression", span="940-940"];
n829 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", span="330-330"];
n830 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", span="947-947"];
n831 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key], [ExpireAt])\r\nvalues (@key, @expireAt)''", span="949-951"];
n832 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistList(''list-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''list-1'']);\r\n                Assert.NotNull(records[''list-2'']);\r\n            })", span="953-969"];
n835 [cluster="lambda expression", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="956-960"];
n833 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", span="947-947"];
n834 [cluster="lambda expression", label="Entry lambda expression", span="953-969"];
n836 [cluster="lambda expression", label="Commit(sql, x => x.PersistList(''list-1''))", span="963-963"];
n837 [cluster="lambda expression", label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="966-966"];
n841 [cluster="lambda expression", label="Entry lambda expression", span="963-963"];
n838 [cluster="lambda expression", label="Assert.Null(records[''list-1''])", span="967-967"];
n844 [cluster="lambda expression", label="Entry lambda expression", span="966-966"];
n847 [cluster="lambda expression", label="Entry lambda expression", span="966-966"];
n839 [cluster="lambda expression", label="Assert.NotNull(records[''list-2''])", span="968-968"];
n840 [cluster="lambda expression", label="Exit lambda expression", span="953-969"];
n842 [cluster="lambda expression", label="x.PersistList(''list-1'')", span="963-963"];
n843 [cluster="lambda expression", label="Exit lambda expression", span="963-963"];
n845 [cluster="lambda expression", label="(string)x.Key", span="966-966"];
n846 [cluster="lambda expression", label="Exit lambda expression", span="966-966"];
n848 [cluster="lambda expression", label="(DateTime?)x.ExpireAt", span="966-966"];
n849 [cluster="lambda expression", label="Exit lambda expression", span="966-966"];
n850 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="972-972"];
n851 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", label="var connection = ConnectionUtils.CreateConnection()", span="974-974"];
n852 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", label="action(connection)", span="976-976"];
n853 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="972-972"];
n854 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
n855 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", label="var transaction = new SqlServerWriteOnlyTransaction(connection, null, _queueProviders)", span="984-984"];
n856 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", label="action(transaction)", span="986-986"];
n857 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", label="transaction.Commit()", span="987-987"];
n858 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", span="980-980"];
n859 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="52-52"];
m0_453 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue(bool)", span="556-556"];
m0_454 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="558-570"];
m0_455 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue(bool)", span="556-556"];
m0_769 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", span="959-959"];
m0_770 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@key, @value, 0.0)''", span="961-963"];
m0_771 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1'']);\r\n                Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''set-2'']);\r\n            })", span="965-982"];
m0_772 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", span="959-959"];
m0_536 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt(bool)", span="678-678"];
m0_537 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="680-691"];
m0_538 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt(bool)", span="678-678"];
m0_441 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist(bool)", span="537-537"];
m0_442 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="539-550"];
m0_443 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist(bool)", span="537-537"];
m0_803 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", span="345-345"];
m0_636 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords(bool)", span="800-800"];
m0_637 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }), useBatching);\r\n\r\n                // Act\r\n                Commit(sql, x => x.RemoveHash(''some-hash''), useBatching);\r\n\r\n                // Assert\r\n                var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single();\r\n                Assert.Equal(0, count);\r\n            })", span="802-817"];
m0_638 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords(bool)", span="800-800"];
m0_839 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", span="1044-1044"];
m0_840 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [ExpireAt])\r\nvalues (@key, @field, @expireAt)''", span="1046-1048"];
m0_841 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistHash(''hash-1''), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''hash-1'']);\r\n                Assert.NotNull(records[''hash-2'']);\r\n            })", span="1050-1066"];
m0_842 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", span="1044-1044"];
m0_271 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="167-167"];
m0_378 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="198-198"];
m0_43 [cluster="Unk.ToString", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ToString", span=""];
m0_178 [cluster="Unk.AddJobState", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.AddJobState", span=""];
m0_907 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", span="1128-1128"];
m0_908 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key], [ExpireAt])\r\nvalues (@key, @expireAt)''", span="1130-1132"];
m0_909 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistList(''list-1''), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''list-1'']);\r\n                Assert.NotNull(records[''list-2'']);\r\n            })", span="1134-1150"];
m0_910 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", span="1128-1128"];
m0_479 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey(bool)", span="595-595"];
m0_480 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="597-608"];
m0_481 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey(bool)", span="595-595"];
m0_732 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", span="319-319"];
m0_548 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey(bool)", span="697-697"];
m0_549 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="699-710"];
m0_550 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey(bool)", span="697-697"];
m0_679 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet(bool)", span="851-851"];
m0_680 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var items = new List<string> { ''1'', ''2'', ''3'' };\r\n\r\n                Commit(sql, x => x.AddRangeToSet(''my-set'', items), useBatching);\r\n\r\n                var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''');\r\n                Assert.Equal(items, records);\r\n            })", span="853-861"];
m0_681 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet(bool)", span="851-851"];
m0_27 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", span="39-39"];
m0_28 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="41-44"];
m0_29 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="-1: UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1));\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.ExpireAt);\r\n            })", span="46-58"];
m0_30 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", span="39-39"];
m0_714 [cluster="Unk.Execute", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Execute", span=""];
m0_825 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull(bool)", span="1030-1030"];
m0_826 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="1032-1038"];
m0_827 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull(bool)", span="1030-1030"];
m0_237 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="247-247"];
m0_238 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="return connection\r\n                .Query(''select * from HangFire.Job where Id = @id'', new { id = jobId })\r\n                .Single();", span="249-251"];
m0_239 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="247-247"];
m0_838 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", span="358-358"];
m0_403 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="214-214"];
m0_45 [cluster="Unk.GetTestJob", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.GetTestJob", span=""];
m0_7 [cluster="Mock<IPersistentJobQueue>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Mock<IPersistentJobQueue>.cstr", span=""];
m0_906 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", span="380-380"];
m0_253 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="159-159"];
m0_872 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", span="369-369"];
m0_768 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="332-332"];
m0_940 [cluster="SqlServerWriteOnlyTransaction.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry SqlServerWriteOnlyTransaction.cstr", span=""];
m0_510 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex(bool)", span="638-638"];
m0_511 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="640-653"];
m0_512 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex(bool)", span="638-638"];
m0_340 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="193-193"];
m0_327 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue(bool)", span="373-373"];
m0_328 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value''), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(0.0, record.Score, 2);\r\n            })", span="375-384"];
m0_329 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue(bool)", span="373-373"];
m0_379 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist(bool)", span="445-445"];
m0_380 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                }, useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="447-458"];
m0_381 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist(bool)", span="445-445"];
m0_691 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull(bool)", span="867-867"];
m0_692 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null), useBatching));\r\n            })", span="869-873"];
m0_693 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull(bool)", span="867-867"];
m0_212 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", span="230-230"];
m0_213 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="var correctJobQueue = new Mock<IPersistentJobQueue>()", span="232-232"];
m0_217 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToQueue(''default'', ''1''), useBatching);\r\n\r\n                correctJobQueue.Verify(x => x.Enqueue(It.IsNotNull<IDbConnection>(), ''default'', ''1''));\r\n            })", span="239-244"];
m0_214 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="var correctProvider = new Mock<IPersistentJobQueueProvider>()", span="233-233"];
m0_215 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="correctProvider.Setup(x => x.GetJobQueue())\r\n                .Returns(correctJobQueue.Object)", span="234-235"];
m0_216 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="_queueProviders.Add(correctProvider.Object, new[] { ''default'' })", span="237-237"];
m0_218 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", span="230-230"];
m0_573 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="258-258"];
m0_501 [cluster="Unk.ToArray", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ToArray", span=""];
m0_47 [cluster="System.DateTime.AddDays(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m0_5 [cluster="Mock<IPersistentJobQueueProvider>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Mock<IPersistentJobQueueProvider>.cstr", span=""];
m0_0 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="18-18"];
m0_1 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs", label="var defaultProvider = new Mock<IPersistentJobQueueProvider>()", span="20-20"];
m0_2 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs", label="defaultProvider.Setup(x => x.GetJobQueue())\r\n                .Returns(new Mock<IPersistentJobQueue>().Object)", span="21-22"];
m0_3 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs", label="_queueProviders = new PersistentJobQueueProviderCollection(defaultProvider.Object)", span="24-24"];
m0_4 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="18-18"];
m0_44 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", span="1161-1161"];
m0_932 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="var storage = new Mock<SqlServerStorage>(connection, new SqlServerStorageOptions { CommandBatchMaxTimeout = useBatching ? TimeSpan.FromMinutes(1) : (TimeSpan?)null })", span="1166-1166"];
m0_935 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="action(transaction)", span="1171-1171"];
m0_933 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="storage.Setup(x => x.QueueProviders).Returns(_queueProviders)", span="1167-1167"];
m0_934 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="var transaction = new SqlServerWriteOnlyTransaction(storage.Object, () => null)", span="1169-1169"];
m0_936 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="transaction.Commit()", span="1172-1172"];
m0_937 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", span="1161-1161"];
m0_606 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_CanSetANullValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_CanSetANullValue(bool)", span="767-767"];
m0_607 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_CanSetANullValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', null }\r\n                }), useBatching);\r\n\r\n                var result = sql.Query(\r\n                        ''select * from HangFire.Hash where [Key] = @key'',\r\n                        new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(null, result[''Key1'']);\r\n            })", span="769-782"];
m0_608 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_CanSetANullValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_CanSetANullValue(bool)", span="767-767"];
m0_179 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", span="196-196"];
m0_180 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="198-201"];
m0_181 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns((string)null);\r\n                state.Setup(x => x.SerializeData()).Returns((Dictionary<string, string>)null);\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(null, jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(null, jobState.Data);\r\n            })", span="203-224"];
m0_182 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", span="196-196"];
m0_524 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex(bool)", span="659-659"];
m0_525 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="661-672"];
m0_526 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex(bool)", span="659-659"];
m0_704 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", span="879-879"];
m0_705 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score]) values (@key, @value, 0.0)''", span="881-882"];
m0_706 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                Commit(sql, x => x.RemoveSet(''set-1''), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n                Assert.Equal(''set-2'', record.Key);\r\n            })", span="884-896"];
m0_707 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", span="879-879"];
m0_945 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1169-1169"];
m0_10 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="21-21"];
m0_11 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.GetJobQueue()", span="21-21"];
m0_12 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="21-21"];
m0_20 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="31-31"];
m0_21 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="new SqlServerWriteOnlyTransaction(null, () => null)", span="31-31"];
m0_22 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="31-31"];
m0_24 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="31-31"];
m0_25 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label=null, span="31-31"];
m0_26 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="31-31"];
m0_35 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)), useBatching)", span="51-51"];
m0_33 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="48-48"];
m0_34 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="49-49"];
m0_32 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="46-58"];
m0_36 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="53-53"];
m0_38 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="56-56"];
m0_51 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireJob(jobId, TimeSpan.FromDays(1))", span="51-51"];
m0_50 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="51-51"];
m0_37 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="-1: Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1))", span="54-54"];
m0_39 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(anotherJob.ExpireAt)", span="57-57"];
m0_40 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="46-58"];
m0_52 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="51-51"];
m0_62 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistJob(jobId), useBatching)", span="76-76"];
m0_60 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="73-73"];
m0_61 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="74-74"];
m0_59 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="71-83"];
m0_63 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="78-78"];
m0_65 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="81-81"];
m0_70 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistJob(jobId)", span="76-76"];
m0_69 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="76-76"];
m0_64 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.ExpireAt)", span="79-79"];
m0_66 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(anotherJob.ExpireAt)", span="82-82"];
m0_67 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="71-83"];
m0_71 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="76-76"];
m0_84 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetJobState(jobId, state.Object), useBatching)", span="107-107"];
m0_78 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="98-98"];
m0_79 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="99-99"];
m0_77 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="96-123"];
m0_85 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="109-109"];
m0_88 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="113-113"];
m0_91 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="117-117"];
m0_111 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetJobState(jobId, state.Object)", span="107-107"];
m0_92 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="118-118"];
m0_80 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var state = new Mock<IState>()", span="101-101"];
m0_81 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Name).Returns(''State'')", span="102-102"];
m0_82 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Reason).Returns(''Reason'')", span="103-103"];
m0_83 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="104-105"];
m0_100 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="102-102"];
m0_103 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="103-103"];
m0_106 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="104-104"];
m0_110 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="107-107"];
m0_86 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', job.StateName)", span="110-110"];
m0_87 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(job.StateId)", span="111-111"];
m0_89 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(anotherJob.StateName)", span="114-114"];
m0_90 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(anotherJob.StateId)", span="115-115"];
m0_93 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', jobState.Name)", span="119-119"];
m0_94 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Reason'', jobState.Reason)", span="120-120"];
m0_95 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(jobState.CreatedAt)", span="121-121"];
m0_96 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="122-122"];
m0_97 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="96-123"];
m0_101 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Name", span="102-102"];
m0_102 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="102-102"];
m0_104 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Reason", span="103-103"];
m0_105 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="103-103"];
m0_107 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SerializeData()", span="104-104"];
m0_108 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="104-104"];
m0_112 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="107-107"];
m0_124 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetJobState(jobId, state.Object), useBatching)", span="145-145"];
m0_119 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="138-138"];
m0_118 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="136-155"];
m0_125 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="147-147"];
m0_128 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="151-151"];
m0_120 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var state = new Mock<IState>()", span="140-140"];
m0_143 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetJobState(jobId, state.Object)", span="145-145"];
m0_121 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Name).Returns(''State'')", span="141-141"];
m0_122 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Reason).Returns((string)null)", span="142-142"];
m0_123 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.SerializeData()).Returns((Dictionary<string, string>)null)", span="143-143"];
m0_133 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="141-141"];
m0_136 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="142-142"];
m0_139 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="143-143"];
m0_142 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="145-145"];
m0_126 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', job.StateName)", span="148-148"];
m0_127 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(job.StateId)", span="149-149"];
m0_129 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', jobState.Name)", span="152-152"];
m0_130 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(null, jobState.Reason)", span="153-153"];
m0_131 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(null, jobState.Data)", span="154-154"];
m0_132 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="136-155"];
m0_134 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Name", span="141-141"];
m0_135 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="141-141"];
m0_137 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Reason", span="142-142"];
m0_138 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="142-142"];
m0_140 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SerializeData()", span="143-143"];
m0_141 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="143-143"];
m0_144 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="145-145"];
m0_155 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddJobState(jobId, state.Object), useBatching)", span="178-178"];
m0_150 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="170-170"];
m0_149 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="168-190"];
m0_156 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="180-180"];
m0_159 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="184-184"];
m0_151 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var state = new Mock<IState>()", span="172-172"];
m0_176 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddJobState(jobId, state.Object)", span="178-178"];
m0_160 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="185-185"];
m0_152 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Name).Returns(''State'')", span="173-173"];
m0_153 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Reason).Returns(''Reason'')", span="174-174"];
m0_154 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="175-176"];
m0_166 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="173-173"];
m0_169 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="174-174"];
m0_172 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="175-175"];
m0_175 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="178-178"];
m0_157 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.StateName)", span="181-181"];
m0_158 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.StateId)", span="182-182"];
m0_161 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', jobState.Name)", span="186-186"];
m0_162 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Reason'', jobState.Reason)", span="187-187"];
m0_163 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(jobState.CreatedAt)", span="188-188"];
m0_164 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="189-189"];
m0_165 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="168-190"];
m0_167 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Name", span="173-173"];
m0_168 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="173-173"];
m0_170 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Reason", span="174-174"];
m0_171 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="174-174"];
m0_173 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SerializeData()", span="175-175"];
m0_174 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="175-175"];
m0_177 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="178-178"];
m0_189 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddJobState(jobId, state.Object), useBatching)", span="212-212"];
m0_184 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="205-205"];
m0_183 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="203-224"];
m0_190 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="214-214"];
m0_193 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="218-218"];
m0_185 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var state = new Mock<IState>()", span="207-207"];
m0_210 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddJobState(jobId, state.Object)", span="212-212"];
m0_194 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="219-219"];
m0_186 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Name).Returns(''State'')", span="208-208"];
m0_187 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Reason).Returns((string)null)", span="209-209"];
m0_188 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.SerializeData()).Returns((Dictionary<string, string>)null)", span="210-210"];
m0_200 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="208-208"];
m0_203 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="209-209"];
m0_206 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="210-210"];
m0_209 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="212-212"];
m0_191 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.StateName)", span="215-215"];
m0_192 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.StateId)", span="216-216"];
m0_195 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', jobState.Name)", span="220-220"];
m0_196 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(null, jobState.Reason)", span="221-221"];
m0_197 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(jobState.CreatedAt)", span="222-222"];
m0_198 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(null, jobState.Data)", span="223-223"];
m0_199 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="203-224"];
m0_201 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Name", span="208-208"];
m0_202 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="208-208"];
m0_204 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Reason", span="209-209"];
m0_205 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="209-209"];
m0_207 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SerializeData()", span="210-210"];
m0_208 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="210-210"];
m0_211 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="212-212"];
m0_225 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddToQueue(''default'', ''1''), useBatching)", span="241-241"];
m0_226 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="correctJobQueue.Verify(x => x.Enqueue(It.IsNotNull<IDbConnection>(), ''default'', ''1''))", span="243-243"];
m0_221 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="234-234"];
m0_224 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="239-244"];
m0_222 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.GetJobQueue()", span="234-234"];
m0_223 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="234-234"];
m0_229 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="241-241"];
m0_227 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="239-244"];
m0_233 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="243-243"];
m0_230 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToQueue(''default'', ''1'')", span="241-241"];
m0_231 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="241-241"];
m0_234 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Enqueue(It.IsNotNull<IDbConnection>(), ''default'', ''1'')", span="243-243"];
m0_235 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="243-243"];
m0_244 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.IncrementCounter(''my-key''), useBatching)", span="261-261"];
m0_243 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="259-268"];
m0_245 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="263-263"];
m0_250 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="261-261"];
m0_246 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="265-265"];
m0_247 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, record.Value)", span="266-266"];
m0_248 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="267-267"];
m0_249 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="259-268"];
m0_251 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'')", span="261-261"];
m0_252 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="261-261"];
m0_258 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)), useBatching)", span="278-278"];
m0_257 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="276-290"];
m0_259 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="280-280"];
m0_268 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="278-278"];
m0_260 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="282-282"];
m0_261 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, record.Value)", span="283-283"];
m0_262 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(record.ExpireAt)", span="284-284"];
m0_263 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var expireAt = (DateTime) record.ExpireAt", span="286-286"];
m0_264 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="288-288"];
m0_265 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="289-289"];
m0_266 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="276-290"];
m0_269 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'', TimeSpan.FromDays(1))", span="278-278"];
m0_270 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="278-278"];
m0_276 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                }, useBatching)", span="300-304"];
m0_275 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="298-309"];
m0_277 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="306-306"];
m0_280 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="300-304"];
m0_278 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="308-308"];
m0_279 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="298-309"];
m0_281 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'')", span="302-302"];
m0_282 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'')", span="303-303"];
m0_283 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="300-304"];
m0_288 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.DecrementCounter(''my-key''), useBatching)", span="319-319"];
m0_287 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="317-326"];
m0_289 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="321-321"];
m0_294 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="319-319"];
m0_290 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="323-323"];
m0_291 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(-1, record.Value)", span="324-324"];
m0_292 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="325-325"];
m0_293 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="317-326"];
m0_295 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'')", span="319-319"];
m0_296 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="319-319"];
m0_302 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)), useBatching)", span="336-336"];
m0_301 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="334-348"];
m0_303 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="338-338"];
m0_311 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="336-336"];
m0_304 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="340-340"];
m0_305 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(-1, record.Value)", span="341-341"];
m0_306 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(record.ExpireAt)", span="342-342"];
m0_307 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var expireAt = (DateTime)record.ExpireAt", span="344-344"];
m0_308 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="346-346"];
m0_309 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="347-347"];
m0_310 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="334-348"];
m0_312 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'', TimeSpan.FromDays(1))", span="336-336"];
m0_313 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="336-336"];
m0_319 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                }, useBatching)", span="358-362"];
m0_318 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="356-367"];
m0_320 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="364-364"];
m0_323 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="358-362"];
m0_321 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="366-366"];
m0_322 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="356-367"];
m0_324 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'')", span="360-360"];
m0_325 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'')", span="361-361"];
m0_326 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="358-362"];
m0_331 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value''), useBatching)", span="377-377"];
m0_330 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="375-384"];
m0_332 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="379-379"];
m0_337 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="377-377"];
m0_333 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="381-381"];
m0_334 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="382-382"];
m0_335 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0.0, record.Score, 2)", span="383-383"];
m0_336 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="375-384"];
m0_338 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="377-377"];
m0_339 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="377-377"];
m0_345 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                }, useBatching)", span="394-398"];
m0_344 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="392-403"];
m0_346 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="400-400"];
m0_349 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="394-398"];
m0_347 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="402-402"];
m0_348 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="392-403"];
m0_350 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="396-396"];
m0_351 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''another-value'')", span="397-397"];
m0_352 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="394-398"];
m0_357 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                }, useBatching)", span="413-417"];
m0_356 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="411-422"];
m0_358 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="419-419"];
m0_361 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="413-417"];
m0_359 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="421-421"];
m0_360 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="411-422"];
m0_362 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="415-415"];
m0_363 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="416-416"];
m0_364 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="413-417"];
m0_369 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2), useBatching)", span="432-432"];
m0_368 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="430-439"];
m0_370 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="434-434"];
m0_375 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="432-432"];
m0_371 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="436-436"];
m0_372 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="437-437"];
m0_373 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(3.2, record.Score, 3)", span="438-438"];
m0_374 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="430-439"];
m0_376 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="432-432"];
m0_377 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="432-432"];
m0_383 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                }, useBatching)", span="449-453"];
m0_382 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="447-458"];
m0_384 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="455-455"];
m0_387 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="449-453"];
m0_385 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(3.2, record.Score, 3)", span="457-457"];
m0_386 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="447-458"];
m0_388 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="451-451"];
m0_389 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="452-452"];
m0_390 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="449-453"];
m0_395 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                }, useBatching)", span="468-472"];
m0_394 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="466-477"];
m0_396 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="474-474"];
m0_399 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="468-472"];
m0_397 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="476-476"];
m0_398 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="466-477"];
m0_400 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="470-470"];
m0_401 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromSet(''my-key'', ''my-value'')", span="471-471"];
m0_402 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="468-472"];
m0_408 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                }, useBatching)", span="487-491"];
m0_407 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="485-496"];
m0_409 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="493-493"];
m0_412 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="487-491"];
m0_410 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="495-495"];
m0_411 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="485-496"];
m0_413 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="489-489"];
m0_414 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromSet(''my-key'', ''different-value'')", span="490-490"];
m0_415 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="487-491"];
m0_420 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                }, useBatching)", span="506-510"];
m0_419 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="504-515"];
m0_421 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="512-512"];
m0_424 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="506-510"];
m0_422 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="514-514"];
m0_423 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="504-515"];
m0_425 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="508-508"];
m0_426 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromSet(''different-key'', ''my-value'')", span="509-509"];
m0_427 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="506-510"];
m0_432 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''), useBatching)", span="525-525"];
m0_431 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="523-531"];
m0_433 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.List'').Single()", span="527-527"];
m0_437 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="525-525"];
m0_434 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="529-529"];
m0_435 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="530-530"];
m0_436 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="523-531"];
m0_438 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="525-525"];
m0_439 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="525-525"];
m0_445 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                }, useBatching)", span="541-545"];
m0_444 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="539-550"];
m0_446 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="547-547"];
m0_449 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="541-545"];
m0_447 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="549-549"];
m0_448 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="539-550"];
m0_450 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="543-543"];
m0_451 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="544-544"];
m0_452 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="541-545"];
m0_457 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                }, useBatching)", span="560-565"];
m0_456 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="558-570"];
m0_458 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="567-567"];
m0_461 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="560-565"];
m0_459 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="569-569"];
m0_460 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="558-570"];
m0_462 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="562-562"];
m0_463 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="563-563"];
m0_464 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromList(''my-key'', ''my-value'')", span="564-564"];
m0_465 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="560-565"];
m0_471 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                }, useBatching)", span="580-584"];
m0_470 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="578-589"];
m0_472 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="586-586"];
m0_475 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="580-584"];
m0_473 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="588-588"];
m0_474 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="578-589"];
m0_476 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="582-582"];
m0_477 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromList(''my-key'', ''different-value'')", span="583-583"];
m0_478 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="580-584"];
m0_483 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                }, useBatching)", span="599-603"];
m0_482 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="597-608"];
m0_484 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="605-605"];
m0_487 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="599-603"];
m0_485 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="607-607"];
m0_486 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="597-608"];
m0_488 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="601-601"];
m0_489 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromList(''different-key'', ''my-value'')", span="602-602"];
m0_490 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="599-603"];
m0_495 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                }, useBatching)", span="618-625"];
m0_494 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="616-632"];
m0_496 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="627-627"];
m0_502 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="618-625"];
m0_497 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, records.Length)", span="629-629"];
m0_498 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''1'', records[0].Value)", span="630-630"];
m0_499 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''2'', records[1].Value)", span="631-631"];
m0_500 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="616-632"];
m0_503 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="620-620"];
m0_504 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''1'')", span="621-621"];
m0_505 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''2'')", span="622-622"];
m0_506 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''3'')", span="623-623"];
m0_507 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 2)", span="624-624"];
m0_508 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="618-625"];
m0_514 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                }, useBatching)", span="642-648"];
m0_513 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="640-653"];
m0_515 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="650-650"];
m0_518 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="642-648"];
m0_516 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="652-652"];
m0_517 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="640-653"];
m0_519 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="644-644"];
m0_520 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''1'')", span="645-645"];
m0_521 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''2'')", span="646-646"];
m0_522 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 100)", span="647-647"];
m0_523 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="642-648"];
m0_528 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                }, useBatching)", span="663-667"];
m0_527 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="661-672"];
m0_529 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="669-669"];
m0_532 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="663-667"];
m0_530 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="671-671"];
m0_531 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="661-672"];
m0_533 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="665-665"];
m0_534 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 100)", span="666-666"];
m0_535 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="663-667"];
m0_540 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                }, useBatching)", span="682-686"];
m0_539 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="680-691"];
m0_541 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="688-688"];
m0_544 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="682-686"];
m0_542 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="690-690"];
m0_543 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="680-691"];
m0_545 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="684-684"];
m0_546 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 0)", span="685-685"];
m0_547 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="682-686"];
m0_552 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                }, useBatching)", span="701-705"];
m0_551 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="699-710"];
m0_553 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="707-707"];
m0_556 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="701-705"];
m0_554 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="709-709"];
m0_555 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="699-710"];
m0_557 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="703-703"];
m0_558 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''another-key'', 1, 0)", span="704-704"];
m0_559 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="701-705"];
m0_564 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()), useBatching))", span="720-721"];
m0_568 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()), useBatching)", span="721-721"];
m0_563 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="718-724"];
m0_565 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="723-723"];
m0_567 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="721-721"];
m0_566 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="718-724"];
m0_569 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="721-721"];
m0_570 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="721-721"];
m0_571 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(null, new Dictionary<string, string>())", span="721-721"];
m0_572 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="721-721"];
m0_578 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null), useBatching))", span="734-735"];
m0_582 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', null), useBatching)", span="735-735"];
m0_577 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="732-738"];
m0_579 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="737-737"];
m0_581 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="735-735"];
m0_580 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="732-738"];
m0_583 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="735-735"];
m0_584 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="735-735"];
m0_585 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(''some-hash'', null)", span="735-735"];
m0_586 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="735-735"];
m0_591 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }), useBatching)", span="748-752"];
m0_590 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="746-761"];
m0_592 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="754-757"];
m0_597 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="748-752"];
m0_593 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Value1'', result[''Key1''])", span="759-759"];
m0_600 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="757-757"];
m0_603 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="757-757"];
m0_594 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Value2'', result[''Key2''])", span="760-760"];
m0_595 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="746-761"];
m0_598 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="748-752"];
m0_599 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="748-752"];
m0_601 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Field", span="757-757"];
m0_602 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="757-757"];
m0_604 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Value", span="757-757"];
m0_605 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="757-757"];
m0_610 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', null }\r\n                }), useBatching)", span="771-774"];
m0_609 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="769-782"];
m0_611 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var result = sql.Query(\r\n                        ''select * from HangFire.Hash where [Key] = @key'',\r\n                        new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="776-779"];
m0_614 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="771-774"];
m0_612 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(null, result[''Key1''])", span="781-781"];
m0_617 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="779-779"];
m0_620 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="779-779"];
m0_613 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="769-782"];
m0_615 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', null }\r\n                })", span="771-774"];
m0_616 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="771-774"];
m0_618 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Field", span="779-779"];
m0_619 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="779-779"];
m0_621 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Value", span="779-779"];
m0_622 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="779-779"];
m0_627 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null), useBatching))", span="792-793"];
m0_630 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.RemoveHash(null), useBatching)", span="793-793"];
m0_626 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="790-794"];
m0_628 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="790-794"];
m0_629 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="793-793"];
m0_631 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="793-793"];
m0_632 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="793-793"];
m0_633 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveHash(null)", span="793-793"];
m0_634 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="793-793"];
m0_640 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }), useBatching)", span="805-809"];
m0_641 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.RemoveHash(''some-hash''), useBatching)", span="812-812"];
m0_639 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="802-817"];
m0_642 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single()", span="815-815"];
m0_645 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="805-809"];
m0_648 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="812-812"];
m0_643 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, count)", span="816-816"];
m0_644 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="802-817"];
m0_646 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="805-809"];
m0_647 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="805-809"];
m0_649 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveHash(''some-hash'')", span="812-812"];
m0_650 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="812-812"];
m0_655 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>()), useBatching))", span="827-828"];
m0_659 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddRangeToSet(null, new List<string>()), useBatching)", span="828-828"];
m0_654 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="825-831"];
m0_656 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="830-830"];
m0_658 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="828-828"];
m0_657 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="825-831"];
m0_660 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="828-828"];
m0_661 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="828-828"];
m0_662 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddRangeToSet(null, new List<string>())", span="828-828"];
m0_663 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="828-828"];
m0_670 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null), useBatching))", span="841-842"];
m0_674 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddRangeToSet(''my-set'', null), useBatching)", span="842-842"];
m0_669 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="839-845"];
m0_671 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''items'', exception.ParamName)", span="844-844"];
m0_673 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="842-842"];
m0_672 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="839-845"];
m0_675 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="842-842"];
m0_676 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="842-842"];
m0_677 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddRangeToSet(''my-set'', null)", span="842-842"];
m0_678 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="842-842"];
m0_684 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddRangeToSet(''my-set'', items), useBatching)", span="857-857"];
m0_682 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="853-861"];
m0_683 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var items = new List<string> { ''1'', ''2'', ''3'' }", span="855-855"];
m0_685 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''')", span="859-859"];
m0_689 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddRangeToSet(''my-set'', items)", span="857-857"];
m0_686 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(items, records)", span="860-860"];
m0_688 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="857-857"];
m0_687 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="853-861"];
m0_690 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="857-857"];
m0_695 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null), useBatching))", span="871-872"];
m0_698 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.RemoveSet(null), useBatching)", span="872-872"];
m0_694 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="869-873"];
m0_696 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="869-873"];
m0_697 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="872-872"];
m0_699 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="872-872"];
m0_700 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="872-872"];
m0_701 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveSet(null)", span="872-872"];
m0_702 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="872-872"];
m0_710 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.RemoveSet(''set-1''), useBatching)", span="892-892"];
m0_709 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="886-890"];
m0_708 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="884-896"];
m0_711 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="894-894"];
m0_715 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="892-892"];
m0_712 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''set-2'', record.Key)", span="895-895"];
m0_713 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="884-896"];
m0_716 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveSet(''set-1'')", span="892-892"];
m0_717 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="892-892"];
m0_722 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5)), useBatching))", span="906-907"];
m0_726 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5)), useBatching)", span="907-907"];
m0_721 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="904-910"];
m0_723 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="909-909"];
m0_725 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="907-907"];
m0_724 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="904-910"];
m0_727 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="907-907"];
m0_728 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="907-907"];
m0_729 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireHash(null, TimeSpan.FromMinutes(5))", span="907-907"];
m0_730 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="907-907"];
m0_739 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)), useBatching)", span="932-932"];
m0_738 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                })", span="925-929"];
m0_737 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="922-939"];
m0_740 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="935-935"];
m0_745 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="932-932"];
m0_741 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1''])", span="936-936"];
m0_748 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="935-935"];
m0_751 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="935-935"];
m0_742 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61))", span="937-937"];
m0_743 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''hash-2''])", span="938-938"];
m0_744 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="922-939"];
m0_746 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60))", span="932-932"];
m0_747 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="932-932"];
m0_749 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="935-935"];
m0_750 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="935-935"];
m0_752 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="935-935"];
m0_753 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="935-935"];
m0_758 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45)), useBatching))", span="949-950"];
m0_762 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45)), useBatching)", span="950-950"];
m0_757 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="947-953"];
m0_759 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="952-952"];
m0_761 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="950-950"];
m0_760 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="947-953"];
m0_763 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="950-950"];
m0_764 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="950-950"];
m0_765 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireSet(null, TimeSpan.FromSeconds(45))", span="950-950"];
m0_766 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="950-950"];
m0_775 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)), useBatching)", span="975-975"];
m0_774 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="968-972"];
m0_773 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="965-982"];
m0_776 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="978-978"];
m0_781 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="975-975"];
m0_777 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1''])", span="979-979"];
m0_784 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="978-978"];
m0_787 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="978-978"];
m0_778 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61))", span="980-980"];
m0_779 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''set-2''])", span="981-981"];
m0_780 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="965-982"];
m0_782 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60))", span="975-975"];
m0_783 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="975-975"];
m0_785 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="978-978"];
m0_786 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="978-978"];
m0_788 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="978-978"];
m0_789 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="978-978"];
m0_794 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45)), useBatching))", span="992-993"];
m0_798 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45)), useBatching)", span="993-993"];
m0_793 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="990-996"];
m0_795 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="995-995"];
m0_797 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="993-993"];
m0_796 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="990-996"];
m0_799 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="993-993"];
m0_800 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="993-993"];
m0_801 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireList(null, TimeSpan.FromSeconds(45))", span="993-993"];
m0_802 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="993-993"];
m0_810 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)), useBatching)", span="1017-1017"];
m0_809 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                })", span="1010-1014"];
m0_808 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1007-1024"];
m0_811 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="1020-1020"];
m0_816 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1017-1017"];
m0_812 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1''])", span="1021-1021"];
m0_819 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1020-1020"];
m0_822 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1020-1020"];
m0_813 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61))", span="1022-1022"];
m0_814 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''list-2''])", span="1023-1023"];
m0_815 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1007-1024"];
m0_817 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireList(''list-1'', TimeSpan.FromMinutes(60))", span="1017-1017"];
m0_818 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1017-1017"];
m0_820 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="1020-1020"];
m0_821 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1020-1020"];
m0_823 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="1020-1020"];
m0_824 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1020-1020"];
m0_829 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null), useBatching))", span="1034-1035"];
m0_833 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistHash(null), useBatching)", span="1035-1035"];
m0_828 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1032-1038"];
m0_830 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="1037-1037"];
m0_832 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1035-1035"];
m0_831 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1032-1038"];
m0_834 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1035-1035"];
m0_835 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1035-1035"];
m0_836 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistHash(null)", span="1035-1035"];
m0_837 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1035-1035"];
m0_845 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistHash(''hash-1''), useBatching)", span="1060-1060"];
m0_844 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="1053-1057"];
m0_843 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1050-1066"];
m0_846 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="1063-1063"];
m0_850 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1060-1060"];
m0_847 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''hash-1''])", span="1064-1064"];
m0_853 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1063-1063"];
m0_856 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1063-1063"];
m0_848 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(records[''hash-2''])", span="1065-1065"];
m0_849 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1050-1066"];
m0_851 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistHash(''hash-1'')", span="1060-1060"];
m0_852 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1060-1060"];
m0_854 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="1063-1063"];
m0_855 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1063-1063"];
m0_857 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="1063-1063"];
m0_858 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1063-1063"];
m0_863 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null), useBatching))", span="1076-1077"];
m0_867 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistSet(null), useBatching)", span="1077-1077"];
m0_862 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1074-1080"];
m0_864 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="1079-1079"];
m0_866 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1077-1077"];
m0_865 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1074-1080"];
m0_868 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1077-1077"];
m0_869 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1077-1077"];
m0_870 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistSet(null)", span="1077-1077"];
m0_871 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1077-1077"];
m0_879 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistSet(''set-1''), useBatching)", span="1102-1102"];
m0_878 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="1095-1099"];
m0_877 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1092-1108"];
m0_880 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="1105-1105"];
m0_884 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1102-1102"];
m0_881 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''set-1''])", span="1106-1106"];
m0_887 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1105-1105"];
m0_890 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1105-1105"];
m0_882 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(records[''set-2''])", span="1107-1107"];
m0_883 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1092-1108"];
m0_885 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistSet(''set-1'')", span="1102-1102"];
m0_886 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1102-1102"];
m0_888 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="1105-1105"];
m0_889 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1105-1105"];
m0_891 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="1105-1105"];
m0_892 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1105-1105"];
m0_897 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null), useBatching))", span="1118-1119"];
m0_901 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistList(null), useBatching)", span="1119-1119"];
m0_896 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1116-1122"];
m0_898 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="1121-1121"];
m0_900 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1119-1119"];
m0_899 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1116-1122"];
m0_902 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1119-1119"];
m0_903 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1119-1119"];
m0_904 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistList(null)", span="1119-1119"];
m0_905 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1119-1119"];
m0_913 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistList(''list-1''), useBatching)", span="1144-1144"];
m0_912 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="1137-1141"];
m0_911 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1134-1150"];
m0_914 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="1147-1147"];
m0_918 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1144-1144"];
m0_915 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''list-1''])", span="1148-1148"];
m0_921 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1147-1147"];
m0_924 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1147-1147"];
m0_916 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(records[''list-2''])", span="1149-1149"];
m0_917 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1134-1150"];
m0_919 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistList(''list-1'')", span="1144-1144"];
m0_920 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1144-1144"];
m0_922 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="1147-1147"];
m0_923 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1147-1147"];
m0_925 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="1147-1147"];
m0_926 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1147-1147"];
m0_942 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1167-1167"];
m0_943 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.QueueProviders", span="1167-1167"];
m0_944 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1167-1167"];
m0_946 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label=null, span="1169-1169"];
m0_947 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1169-1169"];
m0_893 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull(bool)", span="1114-1114"];
m0_894 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="1116-1122"];
m0_895 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull(bool)", span="1114-1114"];
m0_665 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", span="291-291"];
m0_391 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue(bool)", span="464-464"];
m0_392 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="466-477"];
m0_393 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue(bool)", span="464-464"];
m0_754 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull(bool)", span="945-945"];
m0_755 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45)), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="947-953"];
m0_756 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull(bool)", span="945-945"];
m0_416 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey(bool)", span="502-502"];
m0_417 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="504-515"];
m0_418 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey(bool)", span="502-502"];
m0_859 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull(bool)", span="1072-1072"];
m0_860 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="1074-1080"];
m0_861 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull(bool)", span="1072-1072"];
m0_466 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="233-233"];
m0_8 [cluster="Unk.Returns", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Returns", span=""];
m0_718 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull(bool)", span="902-902"];
m0_719 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5)), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="904-910"];
m0_720 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull(bool)", span="902-902"];
m0_272 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord(bool)", span="296-296"];
m0_273 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(2, recordCount);\r\n            })", span="298-309"];
m0_274 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord(bool)", span="296-296"];
m0_98 [cluster="Mock<IState>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Mock<IState>.cstr", span=""];
m0_46 [cluster="System.DateTime.AddMinutes(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
m0_941 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="53-53"];
m0_31 [cluster="Unk.UseConnection", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.UseConnection", span=""];
m0_587 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords(bool)", span="744-744"];
m0_588 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }), useBatching);\r\n\r\n                var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="746-761"];
m0_589 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords(bool)", span="744-744"];
m0_19 [cluster="Unk.Equal", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Equal", span=""];
m0_297 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="176-176"];
m0_254 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", span="274-274"];
m0_255 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime) record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="276-290"];
m0_256 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", span="274-274"];
m0_939 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="31-31"];
m0_113 [cluster="Unk.SetJobState", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.SetJobState", span=""];
m0_930 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m0_560 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull(bool)", span="716-716"];
m0_561 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="718-724"];
m0_562 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull(bool)", span="716-716"];
m0_54 [cluster="Unk.ExpireJob", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ExpireJob", span=""];
m0_938 [cluster="Mock<SqlServerStorage>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Mock<SqlServerStorage>.cstr", span=""];
m0_404 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue(bool)", span="483-483"];
m0_405 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="485-496"];
m0_406 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue(bool)", span="483-483"];
m0_574 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull(bool)", span="730-730"];
m0_575 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null), useBatching));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="732-738"];
m0_576 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull(bool)", span="730-730"];
m0_41 [cluster="Unk.Query", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Query", span=""];
m0_931 [cluster="System.Action<T>.Invoke(T)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m0_353 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist(bool)", span="409-409"];
m0_354 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n                \r\n                Assert.Equal(1, recordCount);\r\n            })", span="411-422"];
m0_355 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist(bool)", span="409-409"];
m0_635 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", span="281-281"];
m0_219 [cluster="Unk.Add", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Add", span=""];
m0_68 [cluster="Unk.NotNull", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.NotNull", span=""];
m0_6 [cluster="Unk.Setup", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Setup", span=""];
m0_49 [cluster="Unk.Null", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Null", span=""];
m0_341 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent(bool)", span="390-390"];
m0_342 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="392-403"];
m0_343 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent(bool)", span="390-390"];
m0_9 [cluster="PersistentJobQueueProviderCollection.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry PersistentJobQueueProviderCollection.cstr", span=""];
m0_220 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="1153-1153"];
m0_927 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="var connection = ConnectionUtils.CreateConnection()", span="1155-1155"];
m0_928 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="action(connection)", span="1157-1157"];
m0_929 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="1153-1153"];
m0_267 [cluster="System.DateTime.AddHours(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m0_315 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord(bool)", span="354-354"];
m0_316 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="356-367"];
m0_317 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord(bool)", span="354-354"];
m0_804 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", span="1002-1002"];
m0_805 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key]) values (@key)''", span="1004-1005"];
m0_806 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1'']);\r\n                Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''list-2'']);\r\n            })", span="1007-1024"];
m0_807 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", span="1002-1002"];
m0_23 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage, System.Func<DbConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage, System.Func<DbConnection>)", span="45-45"];
m0_13 [cluster="Unk.GetJobQueue", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.GetJobQueue", span=""];
m0_55 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", span="64-64"];
m0_56 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues ('', '', getutcdate(), getutcdate())\r\nselect scope_identity() as Id''", span="66-69"];
m0_57 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.PersistJob(jobId), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.ExpireAt);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.NotNull(anotherJob.ExpireAt);\r\n            })", span="71-83"];
m0_58 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", span="64-64"];
m0_491 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange(bool)", span="614-614"];
m0_492 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                }, useBatching);\r\n\r\n                var records = sql.Query(''select * from HangFire.List'').ToArray();\r\n\r\n                Assert.Equal(2, records.Length);\r\n                Assert.Equal(''1'', records[0].Value);\r\n                Assert.Equal(''2'', records[1].Value);\r\n            })", span="616-632"];
m0_493 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange(bool)", span="614-614"];
m0_228 [cluster="Unk.Verify", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Verify", span=""];
m0_873 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", span="1086-1086"];
m0_874 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [ExpireAt], [Score])\r\nvalues (@key, @value, @expireAt, 0.0)''", span="1088-1090"];
m0_875 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistSet(''set-1''), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''set-1'']);\r\n                Assert.NotNull(records[''set-2'']);\r\n            })", span="1092-1108"];
m0_876 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", span="1086-1086"];
m0_509 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="242-242"];
m0_467 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue(bool)", span="576-576"];
m0_468 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="578-589"];
m0_469 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue(bool)", span="576-576"];
m0_731 [cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m0_596 [cluster="Unk.ToDictionary", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ToDictionary", span=""];
m0_314 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="184-184"];
m0_703 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", span="309-309"];
m0_18 [cluster="Unk.>", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.>", span=""];
m0_666 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull(bool)", span="837-837"];
m0_667 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null), useBatching));\r\n\r\n                Assert.Equal(''items'', exception.ParamName);\r\n            })", span="839-845"];
m0_668 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull(bool)", span="837-837"];
m0_298 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", span="332-332"];
m0_299 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime)record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="334-348"];
m0_300 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", span="332-332"];
m0_14 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", span="28-28"];
m0_15 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerWriteOnlyTransaction(null, () => null))", span="30-31"];
m0_16 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''storage'', exception.ParamName)", span="33-33"];
m0_17 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", span="28-28"];
m0_651 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull(bool)", span="823-823"];
m0_652 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>()), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="825-831"];
m0_653 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull(bool)", span="823-823"];
m0_284 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue(bool)", span="315-315"];
m0_285 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key''), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="317-326"];
m0_286 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue(bool)", span="315-315"];
m0_767 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m0_232 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="140-140"];
m0_53 [cluster="System.TimeSpan.FromDays(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m0_236 [cluster="Unk.Enqueue", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Enqueue", span=""];
m0_428 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues(bool)", span="521-521"];
m0_429 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.InsertToList(''my-key'', ''my-value''), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.List'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n            })", span="523-531"];
m0_430 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues(bool)", span="521-521"];
m0_623 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull(bool)", span="788-788"];
m0_624 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null), useBatching));\r\n            })", span="790-794"];
m0_625 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull(bool)", span="788-788"];
m0_790 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull(bool)", span="988-988"];
m0_791 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45)), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="990-996"];
m0_792 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull(bool)", span="988-988"];
m0_73 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", span="89-89"];
m0_74 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="91-94"];
m0_75 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.StateName);\r\n                Assert.Null(anotherJob.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="96-123"];
m0_76 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", span="89-89"];
m0_99 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m0_109 [cluster="Unk.SerializeData", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.SerializeData", span=""];
m0_240 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue(bool)", span="257-257"];
m0_241 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key''), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="259-268"];
m0_242 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue(bool)", span="257-257"];
m0_365 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist(bool)", span="428-428"];
m0_366 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="430-439"];
m0_367 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist(bool)", span="428-428"];
m0_42 [cluster="Unk.Single", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Single", span=""];
m0_48 [cluster="Unk.True", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.True", span=""];
m0_114 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", span="129-129"];
m0_115 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="131-134"];
m0_116 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns((string)null);\r\n                state.Setup(x => x.SerializeData()).Returns((Dictionary<string, string>)null);\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(null, jobState.Reason);\r\n                Assert.Equal(null, jobState.Data);\r\n            })", span="136-155"];
m0_117 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", span="129-129"];
m0_72 [cluster="Unk.PersistJob", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.PersistJob", span=""];
m0_145 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", span="161-161"];
m0_146 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="163-166"];
m0_147 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="168-190"];
m0_148 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", span="161-161"];
m0_440 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="224-224"];
m0_733 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", span="916-916"];
m0_734 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field])\r\nvalues (@key, @field)''", span="918-920"];
m0_735 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1'']);\r\n                Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''hash-2'']);\r\n            })", span="922-939"];
m0_736 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", span="916-916"];
m0_948 [file="SqlServerWriteOnlyTransactionFacts.cs", label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", span=""];
m0_949 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_950 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_951 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m0_952 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_953 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_954 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m0_955 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_956 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_957 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m0_958 [file="SqlServerWriteOnlyTransactionFacts.cs", label=state, span=""];
m0_959 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_960 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_961 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m0_962 [file="SqlServerWriteOnlyTransactionFacts.cs", label=state, span=""];
m0_963 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_964 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_965 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m0_966 [file="SqlServerWriteOnlyTransactionFacts.cs", label=state, span=""];
m0_967 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_968 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_969 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m0_970 [file="SqlServerWriteOnlyTransactionFacts.cs", label=state, span=""];
m0_971 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_972 [file="SqlServerWriteOnlyTransactionFacts.cs", label=correctJobQueue, span=""];
m0_973 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_974 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_975 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_976 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_977 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_978 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_979 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_980 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_981 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_982 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_983 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_984 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_985 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_986 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_987 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_988 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_989 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_990 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_991 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_992 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_993 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_994 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_995 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_996 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_997 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_998 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_999 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1000 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1001 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1002 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1003 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1004 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1005 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1006 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1007 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1008 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1009 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1010 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1011 [file="SqlServerWriteOnlyTransactionFacts.cs", label=items, span=""];
m0_1012 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1013 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1014 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_1015 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1016 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1017 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1018 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_1019 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1020 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1021 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1022 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_1023 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1024 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1025 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1026 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_1027 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1028 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1029 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1030 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_1031 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1032 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1033 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1034 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_1035 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1036 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1037 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1038 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_1039 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
n860 -> n3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n16  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n21  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n34  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n40  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n41  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n43  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n62  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n67  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n68  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n70  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n80  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n89  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n90  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n93  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n121  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n129  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n130  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n154  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n160  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n161  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n181  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n184  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n195  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n198  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n213  [color=red, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n216  [color=red, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n225  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n228  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n239  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n242  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n256  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n259  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n268  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n271  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n282  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n285  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n294  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n297  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n306  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n309  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n320  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n323  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n332  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n335  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n345  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n348  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n357  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n360  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n369  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n372  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n382  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n385  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n394  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n397  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n408  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n411  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n420  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n423  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n432  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n435  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n451  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n454  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n465  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n468  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n477  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n480  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n489  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n492  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n501  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n504  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n508  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n515  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n518  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n522  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n528  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n531  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n547  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n550  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n553  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n560  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n563  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n564  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n575  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n578  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n582  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n590  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n593  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n597  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n603  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n607  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n615  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n618  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n621  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n629  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n633  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n642  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n645  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n649  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n658  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n662  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n678  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n681  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n685  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n694  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n698  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n714  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n717  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n721  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n729  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n733  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n749  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n752  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n756  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n764  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n768  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n783  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n786  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n790  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n798  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n802  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n817  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n820  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n824  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n832  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n836  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n855  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n861 -> n38  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n861 -> n39  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n862 -> n56  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n863 -> n65  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n863 -> n66  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n864 -> n75  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n865 -> n83  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n865 -> n84  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n866 -> n116  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n867 -> n116  [color=darkseagreen4, key=1, label=state, style=dashed];
n868 -> n124  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n869 -> n150  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n870 -> n150  [color=darkseagreen4, key=1, label=state, style=dashed];
n871 -> n508  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n872 -> n522  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n873 -> n553  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n874 -> n582  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n875 -> n597  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n876 -> n612  [color=darkseagreen4, key=1, label=items, style=dashed];
n877 -> n621  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n878 -> n632  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n879 -> n649  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n880 -> n661  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n881 -> n685  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n882 -> n697  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n883 -> n721  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n884 -> n732  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n885 -> n756  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n886 -> n767  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n887 -> n790  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n888 -> n801  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n889 -> n824  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n890 -> n835  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n5  [key=2, style=dotted];
n1 -> n3  [color=darkseagreen4, key=1, label=defaultProvider, style=dashed];
n2 -> n3  [key=0, style=solid];
n2 -> n6  [key=2, style=dotted];
n2 -> n7  [key=2, style=dotted];
n2 -> n8  [key=2, style=dotted];
n2 -> n10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n3 -> n4  [key=0, style=solid];
n3 -> n9  [key=2, style=dotted];
n10 -> n11  [key=0, style=solid];
n4 -> n0  [color=blue, key=0, style=bold];
n11 -> n12  [key=0, style=solid];
n11 -> n13  [key=2, style=dotted];
n11 -> n14  [key=2, style=dotted];
n12 -> n10  [color=blue, key=0, style=bold];
n15 -> n16  [key=0, style=solid];
n16 -> n17  [key=0, style=solid];
n16 -> n13  [key=2, style=dotted];
n16 -> n20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n17 -> n18  [key=0, style=solid];
n17 -> n19  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n18 -> n15  [color=blue, key=0, style=bold];
n21 -> n22  [key=0, style=solid];
n21 -> n23  [key=2, style=dotted];
n22 -> n20  [color=blue, key=0, style=bold];
n24 -> n25  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n13  [key=2, style=dotted];
n25 -> n28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n26 -> n27  [key=0, style=solid];
n26 -> n19  [key=2, style=dotted];
n28 -> n29  [key=0, style=solid];
n27 -> n24  [color=blue, key=0, style=bold];
n29 -> n30  [key=0, style=solid];
n29 -> n23  [key=2, style=dotted];
n29 -> n31  [key=2, style=dotted];
n30 -> n28  [color=blue, key=0, style=bold];
n32 -> n33  [key=0, style=solid];
n33 -> n34  [key=0, style=solid];
n33 -> n38  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n33 -> n39  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n34 -> n35  [key=0, style=solid];
n34 -> n36  [key=2, style=dotted];
n34 -> n37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n38 -> n39  [key=0, style=solid];
n38 -> n46  [key=2, style=dotted];
n38 -> n47  [key=2, style=dotted];
n38 -> n48  [key=2, style=dotted];
n38 -> n40  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n38 -> n56  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n38 -> n41  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n39 -> n40  [key=0, style=solid];
n39 -> n46  [key=2, style=dotted];
n39 -> n47  [key=2, style=dotted];
n39 -> n48  [key=2, style=dotted];
n39 -> n43  [color=darkseagreen4, key=1, label=anotherJobId, style=dashed];
n35 -> n32  [color=blue, key=0, style=bold];
n37 -> n38  [key=0, style=solid];
n37 -> n39  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n37 -> n40  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n37 -> n41  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n37 -> n43  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n40 -> n41  [key=0, style=solid];
n40 -> n49  [key=2, style=dotted];
n40 -> n55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n41 -> n42  [key=0, style=solid];
n41 -> n50  [key=2, style=dotted];
n43 -> n44  [key=0, style=solid];
n43 -> n50  [key=2, style=dotted];
n56 -> n57  [key=0, style=solid];
n56 -> n58  [key=2, style=dotted];
n56 -> n59  [key=2, style=dotted];
n49 -> n855  [key=0, style=solid];
n49 -> n856  [color=darkseagreen4, key=1, label="System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>", style=dashed];
n55 -> n56  [key=0, style=solid];
n42 -> n43  [key=0, style=solid];
n42 -> n51  [key=2, style=dotted];
n42 -> n52  [key=2, style=dotted];
n42 -> n53  [key=2, style=dotted];
n44 -> n45  [key=0, style=solid];
n44 -> n54  [key=2, style=dotted];
n45 -> n37  [color=blue, key=0, style=bold];
n57 -> n55  [color=blue, key=0, style=bold];
n60 -> n61  [key=0, style=solid];
n61 -> n62  [key=0, style=solid];
n61 -> n65  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n61 -> n66  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n62 -> n63  [key=0, style=solid];
n62 -> n36  [key=2, style=dotted];
n62 -> n64  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n65 -> n66  [key=0, style=solid];
n65 -> n46  [key=2, style=dotted];
n65 -> n47  [key=2, style=dotted];
n65 -> n48  [key=2, style=dotted];
n65 -> n67  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n65 -> n75  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n65 -> n68  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n66 -> n67  [key=0, style=solid];
n66 -> n46  [key=2, style=dotted];
n66 -> n47  [key=2, style=dotted];
n66 -> n48  [key=2, style=dotted];
n66 -> n70  [color=darkseagreen4, key=1, label=anotherJobId, style=dashed];
n63 -> n60  [color=blue, key=0, style=bold];
n64 -> n65  [key=0, style=solid];
n64 -> n66  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n64 -> n67  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n64 -> n68  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n64 -> n70  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n67 -> n68  [key=0, style=solid];
n67 -> n49  [key=2, style=dotted];
n67 -> n74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n68 -> n69  [key=0, style=solid];
n68 -> n50  [key=2, style=dotted];
n70 -> n71  [key=0, style=solid];
n70 -> n50  [key=2, style=dotted];
n75 -> n76  [key=0, style=solid];
n75 -> n77  [key=2, style=dotted];
n74 -> n75  [key=0, style=solid];
n69 -> n70  [key=0, style=solid];
n69 -> n54  [key=2, style=dotted];
n71 -> n72  [key=0, style=solid];
n71 -> n73  [key=2, style=dotted];
n72 -> n64  [color=blue, key=0, style=bold];
n76 -> n74  [color=blue, key=0, style=bold];
n78 -> n79  [key=0, style=solid];
n79 -> n80  [key=0, style=solid];
n79 -> n83  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n79 -> n84  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n80 -> n81  [key=0, style=solid];
n80 -> n36  [key=2, style=dotted];
n80 -> n82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n83 -> n84  [key=0, style=solid];
n83 -> n46  [key=2, style=dotted];
n83 -> n47  [key=2, style=dotted];
n83 -> n48  [key=2, style=dotted];
n83 -> n89  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n83 -> n116  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n83 -> n90  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n83 -> n97  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n84 -> n85  [key=0, style=solid];
n84 -> n46  [key=2, style=dotted];
n84 -> n47  [key=2, style=dotted];
n84 -> n48  [key=2, style=dotted];
n84 -> n93  [color=darkseagreen4, key=1, label=anotherJobId, style=dashed];
n81 -> n78  [color=blue, key=0, style=bold];
n82 -> n83  [key=0, style=solid];
n82 -> n84  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n82 -> n89  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n82 -> n90  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n82 -> n93  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n82 -> n96  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n89 -> n90  [key=0, style=solid];
n89 -> n49  [key=2, style=dotted];
n89 -> n115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n90 -> n91  [key=0, style=solid];
n90 -> n50  [key=2, style=dotted];
n90 -> n92  [color=darkseagreen4, key=1, label=job, style=dashed];
n93 -> n94  [key=0, style=solid];
n93 -> n50  [key=2, style=dotted];
n93 -> n95  [color=darkseagreen4, key=1, label=anotherJob, style=dashed];
n96 -> n97  [key=0, style=solid];
n96 -> n46  [key=2, style=dotted];
n96 -> n47  [key=2, style=dotted];
n96 -> n98  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n96 -> n99  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n96 -> n100  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n96 -> n101  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n116 -> n117  [key=0, style=solid];
n116 -> n118  [key=2, style=dotted];
n97 -> n98  [key=0, style=solid];
n97 -> n48  [key=2, style=dotted];
n97 -> n19  [key=2, style=dotted];
n85 -> n86  [key=0, style=solid];
n85 -> n103  [key=2, style=dotted];
n85 -> n87  [color=darkseagreen4, key=1, label=state, style=dashed];
n85 -> n88  [color=darkseagreen4, key=1, label=state, style=dashed];
n85 -> n89  [color=darkseagreen4, key=1, label=state, style=dashed];
n85 -> n116  [color=darkseagreen4, key=1, label=state, style=dashed];
n86 -> n87  [key=0, style=solid];
n86 -> n6  [key=2, style=dotted];
n86 -> n8  [key=2, style=dotted];
n86 -> n105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n87 -> n88  [key=0, style=solid];
n87 -> n6  [key=2, style=dotted];
n87 -> n8  [key=2, style=dotted];
n87 -> n108  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n88 -> n89  [key=0, style=solid];
n88 -> n6  [key=2, style=dotted];
n88 -> n104  [key=2, style=dotted];
n88 -> n8  [key=2, style=dotted];
n88 -> n111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n105 -> n106  [key=0, style=solid];
n108 -> n109  [key=0, style=solid];
n111 -> n112  [key=0, style=solid];
n115 -> n116  [key=0, style=solid];
n91 -> n92  [key=0, style=solid];
n91 -> n19  [key=2, style=dotted];
n92 -> n93  [key=0, style=solid];
n92 -> n73  [key=2, style=dotted];
n94 -> n95  [key=0, style=solid];
n94 -> n54  [key=2, style=dotted];
n95 -> n96  [key=0, style=solid];
n95 -> n54  [key=2, style=dotted];
n98 -> n99  [key=0, style=solid];
n98 -> n19  [key=2, style=dotted];
n99 -> n100  [key=0, style=solid];
n99 -> n19  [key=2, style=dotted];
n100 -> n101  [key=0, style=solid];
n100 -> n73  [key=2, style=dotted];
n101 -> n102  [key=0, style=solid];
n101 -> n19  [key=2, style=dotted];
n102 -> n82  [color=blue, key=0, style=bold];
n106 -> n107  [key=0, style=solid];
n107 -> n105  [color=blue, key=0, style=bold];
n109 -> n110  [key=0, style=solid];
n110 -> n108  [color=blue, key=0, style=bold];
n112 -> n113  [key=0, style=solid];
n112 -> n114  [key=2, style=dotted];
n113 -> n111  [color=blue, key=0, style=bold];
n117 -> n115  [color=blue, key=0, style=bold];
n119 -> n120  [key=0, style=solid];
n120 -> n121  [key=0, style=solid];
n120 -> n124  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n121 -> n122  [key=0, style=solid];
n121 -> n36  [key=2, style=dotted];
n121 -> n123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n124 -> n125  [key=0, style=solid];
n124 -> n46  [key=2, style=dotted];
n124 -> n47  [key=2, style=dotted];
n124 -> n48  [key=2, style=dotted];
n124 -> n129  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n124 -> n150  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n124 -> n130  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n124 -> n134  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n122 -> n119  [color=blue, key=0, style=bold];
n123 -> n124  [key=0, style=solid];
n123 -> n129  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n123 -> n130  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n123 -> n133  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n129 -> n130  [key=0, style=solid];
n129 -> n49  [key=2, style=dotted];
n129 -> n149  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n130 -> n131  [key=0, style=solid];
n130 -> n50  [key=2, style=dotted];
n130 -> n132  [color=darkseagreen4, key=1, label=job, style=dashed];
n133 -> n134  [key=0, style=solid];
n133 -> n46  [key=2, style=dotted];
n133 -> n47  [key=2, style=dotted];
n133 -> n135  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n133 -> n136  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n133 -> n137  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n133 -> n138  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n125 -> n126  [key=0, style=solid];
n125 -> n103  [key=2, style=dotted];
n125 -> n127  [color=darkseagreen4, key=1, label=state, style=dashed];
n125 -> n128  [color=darkseagreen4, key=1, label=state, style=dashed];
n125 -> n129  [color=darkseagreen4, key=1, label=state, style=dashed];
n125 -> n150  [color=darkseagreen4, key=1, label=state, style=dashed];
n150 -> n151  [key=0, style=solid];
n150 -> n152  [key=2, style=dotted];
n134 -> n135  [key=0, style=solid];
n134 -> n48  [key=2, style=dotted];
n134 -> n19  [key=2, style=dotted];
n126 -> n127  [key=0, style=solid];
n126 -> n6  [key=2, style=dotted];
n126 -> n8  [key=2, style=dotted];
n126 -> n140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n127 -> n128  [key=0, style=solid];
n127 -> n6  [key=2, style=dotted];
n127 -> n8  [key=2, style=dotted];
n127 -> n143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n128 -> n129  [key=0, style=solid];
n128 -> n6  [key=2, style=dotted];
n128 -> n104  [key=2, style=dotted];
n128 -> n8  [key=2, style=dotted];
n128 -> n146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n140 -> n141  [key=0, style=solid];
n143 -> n144  [key=0, style=solid];
n146 -> n147  [key=0, style=solid];
n149 -> n150  [key=0, style=solid];
n131 -> n132  [key=0, style=solid];
n131 -> n54  [key=2, style=dotted];
n132 -> n133  [key=0, style=solid];
n132 -> n54  [key=2, style=dotted];
n135 -> n136  [key=0, style=solid];
n135 -> n19  [key=2, style=dotted];
n136 -> n137  [key=0, style=solid];
n136 -> n19  [key=2, style=dotted];
n137 -> n138  [key=0, style=solid];
n137 -> n73  [key=2, style=dotted];
n138 -> n139  [key=0, style=solid];
n138 -> n19  [key=2, style=dotted];
n139 -> n123  [color=blue, key=0, style=bold];
n141 -> n142  [key=0, style=solid];
n142 -> n140  [color=blue, key=0, style=bold];
n144 -> n145  [key=0, style=solid];
n145 -> n143  [color=blue, key=0, style=bold];
n147 -> n148  [key=0, style=solid];
n147 -> n114  [key=2, style=dotted];
n148 -> n146  [color=blue, key=0, style=bold];
n151 -> n149  [color=blue, key=0, style=bold];
n153 -> n154  [key=0, style=solid];
n154 -> n155  [key=0, style=solid];
n154 -> n36  [key=2, style=dotted];
n154 -> n156  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n155 -> n153  [color=blue, key=0, style=bold];
n156 -> n157  [key=0, style=solid];
n156 -> n161  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n157 -> n158  [key=0, style=solid];
n157 -> n7  [key=2, style=dotted];
n157 -> n159  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
n157 -> n162  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
n161 -> n162  [key=0, style=solid];
n161 -> n49  [key=2, style=dotted];
n161 -> n169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n158 -> n159  [key=0, style=solid];
n158 -> n5  [key=2, style=dotted];
n158 -> n160  [color=darkseagreen4, key=1, label=correctProvider, style=dashed];
n159 -> n160  [key=0, style=solid];
n159 -> n6  [key=2, style=dotted];
n159 -> n8  [key=2, style=dotted];
n159 -> n166  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n162 -> n163  [key=0, style=solid];
n162 -> n165  [key=2, style=dotted];
n162 -> n173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n160 -> n161  [key=0, style=solid];
n160 -> n164  [key=2, style=dotted];
n166 -> n167  [key=0, style=solid];
n169 -> n170  [key=0, style=solid];
n163 -> n156  [color=blue, key=0, style=bold];
n173 -> n174  [key=0, style=solid];
n167 -> n168  [key=0, style=solid];
n167 -> n13  [key=2, style=dotted];
n167 -> n14  [key=2, style=dotted];
n168 -> n166  [color=blue, key=0, style=bold];
n170 -> n171  [key=0, style=solid];
n170 -> n172  [key=2, style=dotted];
n171 -> n169  [color=blue, key=0, style=bold];
n174 -> n175  [key=0, style=solid];
n174 -> n176  [key=2, style=dotted];
n175 -> n173  [color=blue, key=0, style=bold];
n177 -> n178  [key=0, style=solid];
n178 -> n179  [key=0, style=solid];
n178 -> n46  [key=2, style=dotted];
n178 -> n47  [key=2, style=dotted];
n179 -> n177  [color=blue, key=0, style=bold];
n180 -> n181  [key=0, style=solid];
n181 -> n182  [key=0, style=solid];
n181 -> n36  [key=2, style=dotted];
n181 -> n183  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n182 -> n180  [color=blue, key=0, style=bold];
n183 -> n184  [key=0, style=solid];
n183 -> n185  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n184 -> n185  [key=0, style=solid];
n184 -> n49  [key=2, style=dotted];
n184 -> n190  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n185 -> n186  [key=0, style=solid];
n185 -> n46  [key=2, style=dotted];
n185 -> n47  [key=2, style=dotted];
n185 -> n187  [color=darkseagreen4, key=1, label=record, style=dashed];
n185 -> n188  [color=darkseagreen4, key=1, label=record, style=dashed];
n190 -> n191  [key=0, style=solid];
n186 -> n187  [key=0, style=solid];
n186 -> n19  [key=2, style=dotted];
n187 -> n188  [key=0, style=solid];
n187 -> n19  [key=2, style=dotted];
n188 -> n189  [key=0, style=solid];
n188 -> n19  [key=2, style=dotted];
n189 -> n183  [color=blue, key=0, style=bold];
n191 -> n192  [key=0, style=solid];
n191 -> n193  [key=2, style=dotted];
n192 -> n190  [color=blue, key=0, style=bold];
n194 -> n195  [key=0, style=solid];
n195 -> n196  [key=0, style=solid];
n195 -> n36  [key=2, style=dotted];
n195 -> n197  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n196 -> n194  [color=blue, key=0, style=bold];
n197 -> n198  [key=0, style=solid];
n197 -> n199  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n198 -> n199  [key=0, style=solid];
n198 -> n49  [key=2, style=dotted];
n198 -> n208  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n199 -> n200  [key=0, style=solid];
n199 -> n46  [key=2, style=dotted];
n199 -> n47  [key=2, style=dotted];
n199 -> n201  [color=darkseagreen4, key=1, label=record, style=dashed];
n199 -> n202  [color=darkseagreen4, key=1, label=record, style=dashed];
n199 -> n203  [color=darkseagreen4, key=1, label=record, style=dashed];
n208 -> n209  [key=0, style=solid];
n200 -> n201  [key=0, style=solid];
n200 -> n19  [key=2, style=dotted];
n201 -> n202  [key=0, style=solid];
n201 -> n19  [key=2, style=dotted];
n202 -> n203  [key=0, style=solid];
n202 -> n73  [key=2, style=dotted];
n203 -> n204  [key=0, style=solid];
n203 -> n205  [color=darkseagreen4, key=1, label=expireAt, style=dashed];
n204 -> n205  [key=0, style=solid];
n204 -> n207  [key=2, style=dotted];
n204 -> n53  [key=2, style=dotted];
n205 -> n206  [key=0, style=solid];
n205 -> n207  [key=2, style=dotted];
n205 -> n53  [key=2, style=dotted];
n206 -> n197  [color=blue, key=0, style=bold];
n209 -> n210  [key=0, style=solid];
n209 -> n58  [key=2, style=dotted];
n209 -> n211  [key=2, style=dotted];
n210 -> n208  [color=blue, key=0, style=bold];
n212 -> n213  [color=red, key=0, style=solid];
n213 -> n214  [color=red, key=0, style=solid];
n213 -> n36  [color=red, key=2, style=dotted];
n213 -> n215  [color=red, key=1, label="lambda expression", style=dashed];
n214 -> n212  [color=blue, key=0, style=bold];
n215 -> n216  [color=red, key=0, style=solid];
n215 -> n217  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n216 -> n217  [color=red, key=0, style=solid];
n216 -> n49  [color=red, key=2, style=dotted];
n216 -> n220  [color=red, key=1, label="lambda expression", style=dashed];
n217 -> n218  [key=0, style=solid];
n217 -> n13  [key=2, style=dotted];
n217 -> n47  [key=2, style=dotted];
n220 -> n221  [color=red, key=0, style=solid];
n220 -> n222  [color=red, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n218 -> n219  [key=0, style=solid];
n218 -> n19  [key=2, style=dotted];
n219 -> n215  [color=blue, key=0, style=bold];
n221 -> n222  [color=red, key=0, style=solid];
n221 -> n193  [color=red, key=2, style=dotted];
n222 -> n223  [color=red, key=0, style=solid];
n222 -> n193  [color=red, key=2, style=dotted];
n223 -> n220  [color=blue, key=0, style=bold];
n224 -> n225  [key=0, style=solid];
n225 -> n226  [key=0, style=solid];
n225 -> n36  [key=2, style=dotted];
n225 -> n227  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n226 -> n224  [color=blue, key=0, style=bold];
n227 -> n228  [key=0, style=solid];
n227 -> n229  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n228 -> n229  [key=0, style=solid];
n228 -> n49  [key=2, style=dotted];
n228 -> n234  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n229 -> n230  [key=0, style=solid];
n229 -> n46  [key=2, style=dotted];
n229 -> n47  [key=2, style=dotted];
n229 -> n231  [color=darkseagreen4, key=1, label=record, style=dashed];
n229 -> n232  [color=darkseagreen4, key=1, label=record, style=dashed];
n234 -> n235  [key=0, style=solid];
n230 -> n231  [key=0, style=solid];
n230 -> n19  [key=2, style=dotted];
n231 -> n232  [key=0, style=solid];
n231 -> n19  [key=2, style=dotted];
n232 -> n233  [key=0, style=solid];
n232 -> n19  [key=2, style=dotted];
n233 -> n227  [color=blue, key=0, style=bold];
n235 -> n236  [key=0, style=solid];
n235 -> n237  [key=2, style=dotted];
n236 -> n234  [color=blue, key=0, style=bold];
n238 -> n239  [key=0, style=solid];
n239 -> n240  [key=0, style=solid];
n239 -> n36  [key=2, style=dotted];
n239 -> n241  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n240 -> n238  [color=blue, key=0, style=bold];
n241 -> n242  [key=0, style=solid];
n241 -> n243  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n242 -> n243  [key=0, style=solid];
n242 -> n49  [key=2, style=dotted];
n242 -> n251  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n243 -> n244  [key=0, style=solid];
n243 -> n46  [key=2, style=dotted];
n243 -> n47  [key=2, style=dotted];
n243 -> n245  [color=darkseagreen4, key=1, label=record, style=dashed];
n243 -> n246  [color=darkseagreen4, key=1, label=record, style=dashed];
n243 -> n247  [color=darkseagreen4, key=1, label=record, style=dashed];
n251 -> n252  [key=0, style=solid];
n244 -> n245  [key=0, style=solid];
n244 -> n19  [key=2, style=dotted];
n245 -> n246  [key=0, style=solid];
n245 -> n19  [key=2, style=dotted];
n246 -> n247  [key=0, style=solid];
n246 -> n73  [key=2, style=dotted];
n247 -> n248  [key=0, style=solid];
n247 -> n249  [color=darkseagreen4, key=1, label=expireAt, style=dashed];
n248 -> n249  [key=0, style=solid];
n248 -> n207  [key=2, style=dotted];
n248 -> n53  [key=2, style=dotted];
n249 -> n250  [key=0, style=solid];
n249 -> n207  [key=2, style=dotted];
n249 -> n53  [key=2, style=dotted];
n250 -> n241  [color=blue, key=0, style=bold];
n252 -> n253  [key=0, style=solid];
n252 -> n58  [key=2, style=dotted];
n252 -> n254  [key=2, style=dotted];
n253 -> n251  [color=blue, key=0, style=bold];
n255 -> n256  [key=0, style=solid];
n256 -> n257  [key=0, style=solid];
n256 -> n36  [key=2, style=dotted];
n256 -> n258  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n257 -> n255  [color=blue, key=0, style=bold];
n258 -> n259  [key=0, style=solid];
n258 -> n260  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n259 -> n260  [key=0, style=solid];
n259 -> n49  [key=2, style=dotted];
n259 -> n263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n260 -> n261  [key=0, style=solid];
n260 -> n13  [key=2, style=dotted];
n260 -> n47  [key=2, style=dotted];
n263 -> n264  [key=0, style=solid];
n263 -> n265  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n261 -> n262  [key=0, style=solid];
n261 -> n19  [key=2, style=dotted];
n262 -> n258  [color=blue, key=0, style=bold];
n264 -> n265  [key=0, style=solid];
n264 -> n237  [key=2, style=dotted];
n265 -> n266  [key=0, style=solid];
n265 -> n237  [key=2, style=dotted];
n266 -> n263  [color=blue, key=0, style=bold];
n267 -> n268  [key=0, style=solid];
n268 -> n269  [key=0, style=solid];
n268 -> n36  [key=2, style=dotted];
n268 -> n270  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n269 -> n267  [color=blue, key=0, style=bold];
n270 -> n271  [key=0, style=solid];
n270 -> n272  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n271 -> n272  [key=0, style=solid];
n271 -> n49  [key=2, style=dotted];
n271 -> n277  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n272 -> n273  [key=0, style=solid];
n272 -> n46  [key=2, style=dotted];
n272 -> n47  [key=2, style=dotted];
n272 -> n274  [color=darkseagreen4, key=1, label=record, style=dashed];
n272 -> n275  [color=darkseagreen4, key=1, label=record, style=dashed];
n277 -> n278  [key=0, style=solid];
n273 -> n274  [key=0, style=solid];
n273 -> n19  [key=2, style=dotted];
n274 -> n275  [key=0, style=solid];
n274 -> n19  [key=2, style=dotted];
n275 -> n276  [key=0, style=solid];
n275 -> n19  [key=2, style=dotted];
n276 -> n270  [color=blue, key=0, style=bold];
n278 -> n279  [key=0, style=solid];
n278 -> n280  [key=2, style=dotted];
n279 -> n277  [color=blue, key=0, style=bold];
n281 -> n282  [key=0, style=solid];
n282 -> n283  [key=0, style=solid];
n282 -> n36  [key=2, style=dotted];
n282 -> n284  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n283 -> n281  [color=blue, key=0, style=bold];
n284 -> n285  [key=0, style=solid];
n284 -> n286  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n285 -> n286  [key=0, style=solid];
n285 -> n49  [key=2, style=dotted];
n285 -> n289  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n286 -> n287  [key=0, style=solid];
n286 -> n13  [key=2, style=dotted];
n286 -> n47  [key=2, style=dotted];
n289 -> n290  [key=0, style=solid];
n289 -> n291  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n287 -> n288  [key=0, style=solid];
n287 -> n19  [key=2, style=dotted];
n288 -> n284  [color=blue, key=0, style=bold];
n290 -> n291  [key=0, style=solid];
n290 -> n280  [key=2, style=dotted];
n291 -> n292  [key=0, style=solid];
n291 -> n280  [key=2, style=dotted];
n292 -> n289  [color=blue, key=0, style=bold];
n293 -> n294  [key=0, style=solid];
n294 -> n295  [key=0, style=solid];
n294 -> n36  [key=2, style=dotted];
n294 -> n296  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n295 -> n293  [color=blue, key=0, style=bold];
n296 -> n297  [key=0, style=solid];
n296 -> n298  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n297 -> n298  [key=0, style=solid];
n297 -> n49  [key=2, style=dotted];
n297 -> n301  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n298 -> n299  [key=0, style=solid];
n298 -> n13  [key=2, style=dotted];
n298 -> n47  [key=2, style=dotted];
n301 -> n302  [key=0, style=solid];
n301 -> n303  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n299 -> n300  [key=0, style=solid];
n299 -> n19  [key=2, style=dotted];
n300 -> n296  [color=blue, key=0, style=bold];
n302 -> n303  [key=0, style=solid];
n302 -> n280  [key=2, style=dotted];
n303 -> n304  [key=0, style=solid];
n303 -> n280  [key=2, style=dotted];
n304 -> n301  [color=blue, key=0, style=bold];
n305 -> n306  [key=0, style=solid];
n306 -> n307  [key=0, style=solid];
n306 -> n36  [key=2, style=dotted];
n306 -> n308  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n307 -> n305  [color=blue, key=0, style=bold];
n308 -> n309  [key=0, style=solid];
n308 -> n310  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n309 -> n310  [key=0, style=solid];
n309 -> n49  [key=2, style=dotted];
n309 -> n315  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n310 -> n311  [key=0, style=solid];
n310 -> n46  [key=2, style=dotted];
n310 -> n47  [key=2, style=dotted];
n310 -> n312  [color=darkseagreen4, key=1, label=record, style=dashed];
n310 -> n313  [color=darkseagreen4, key=1, label=record, style=dashed];
n315 -> n316  [key=0, style=solid];
n311 -> n312  [key=0, style=solid];
n311 -> n19  [key=2, style=dotted];
n312 -> n313  [key=0, style=solid];
n312 -> n19  [key=2, style=dotted];
n313 -> n314  [key=0, style=solid];
n313 -> n19  [key=2, style=dotted];
n314 -> n308  [color=blue, key=0, style=bold];
n316 -> n317  [key=0, style=solid];
n316 -> n318  [key=2, style=dotted];
n317 -> n315  [color=blue, key=0, style=bold];
n319 -> n320  [key=0, style=solid];
n320 -> n321  [key=0, style=solid];
n320 -> n36  [key=2, style=dotted];
n320 -> n322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n321 -> n319  [color=blue, key=0, style=bold];
n322 -> n323  [key=0, style=solid];
n322 -> n324  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n323 -> n324  [key=0, style=solid];
n323 -> n49  [key=2, style=dotted];
n323 -> n327  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n324 -> n325  [key=0, style=solid];
n324 -> n46  [key=2, style=dotted];
n324 -> n47  [key=2, style=dotted];
n327 -> n328  [key=0, style=solid];
n327 -> n329  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n325 -> n326  [key=0, style=solid];
n325 -> n19  [key=2, style=dotted];
n326 -> n322  [color=blue, key=0, style=bold];
n328 -> n329  [key=0, style=solid];
n328 -> n280  [key=2, style=dotted];
n329 -> n330  [key=0, style=solid];
n329 -> n318  [key=2, style=dotted];
n330 -> n327  [color=blue, key=0, style=bold];
n331 -> n332  [key=0, style=solid];
n332 -> n333  [key=0, style=solid];
n332 -> n36  [key=2, style=dotted];
n332 -> n334  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n333 -> n331  [color=blue, key=0, style=bold];
n334 -> n335  [key=0, style=solid];
n334 -> n336  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n335 -> n336  [key=0, style=solid];
n335 -> n49  [key=2, style=dotted];
n335 -> n339  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n336 -> n337  [key=0, style=solid];
n336 -> n13  [key=2, style=dotted];
n336 -> n47  [key=2, style=dotted];
n339 -> n340  [key=0, style=solid];
n339 -> n341  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n337 -> n338  [key=0, style=solid];
n337 -> n19  [key=2, style=dotted];
n338 -> n334  [color=blue, key=0, style=bold];
n340 -> n341  [key=0, style=solid];
n340 -> n280  [key=2, style=dotted];
n341 -> n342  [key=0, style=solid];
n341 -> n343  [key=2, style=dotted];
n342 -> n339  [color=blue, key=0, style=bold];
n344 -> n345  [key=0, style=solid];
n345 -> n346  [key=0, style=solid];
n345 -> n36  [key=2, style=dotted];
n345 -> n347  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n346 -> n344  [color=blue, key=0, style=bold];
n347 -> n348  [key=0, style=solid];
n347 -> n349  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n348 -> n349  [key=0, style=solid];
n348 -> n49  [key=2, style=dotted];
n348 -> n352  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n349 -> n350  [key=0, style=solid];
n349 -> n13  [key=2, style=dotted];
n349 -> n47  [key=2, style=dotted];
n352 -> n353  [key=0, style=solid];
n352 -> n354  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n350 -> n351  [key=0, style=solid];
n350 -> n19  [key=2, style=dotted];
n351 -> n347  [color=blue, key=0, style=bold];
n353 -> n354  [key=0, style=solid];
n353 -> n280  [key=2, style=dotted];
n354 -> n355  [key=0, style=solid];
n354 -> n343  [key=2, style=dotted];
n355 -> n352  [color=blue, key=0, style=bold];
n356 -> n357  [key=0, style=solid];
n357 -> n358  [key=0, style=solid];
n357 -> n36  [key=2, style=dotted];
n357 -> n359  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n358 -> n356  [color=blue, key=0, style=bold];
n359 -> n360  [key=0, style=solid];
n359 -> n361  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n360 -> n361  [key=0, style=solid];
n360 -> n49  [key=2, style=dotted];
n360 -> n364  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n361 -> n362  [key=0, style=solid];
n361 -> n13  [key=2, style=dotted];
n361 -> n47  [key=2, style=dotted];
n364 -> n365  [key=0, style=solid];
n364 -> n366  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n362 -> n363  [key=0, style=solid];
n362 -> n19  [key=2, style=dotted];
n363 -> n359  [color=blue, key=0, style=bold];
n365 -> n366  [key=0, style=solid];
n365 -> n280  [key=2, style=dotted];
n366 -> n367  [key=0, style=solid];
n366 -> n343  [key=2, style=dotted];
n367 -> n364  [color=blue, key=0, style=bold];
n368 -> n369  [key=0, style=solid];
n369 -> n370  [key=0, style=solid];
n369 -> n36  [key=2, style=dotted];
n369 -> n371  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n370 -> n368  [color=blue, key=0, style=bold];
n371 -> n372  [key=0, style=solid];
n371 -> n373  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n372 -> n373  [key=0, style=solid];
n372 -> n49  [key=2, style=dotted];
n372 -> n377  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n373 -> n374  [key=0, style=solid];
n373 -> n46  [key=2, style=dotted];
n373 -> n47  [key=2, style=dotted];
n373 -> n375  [color=darkseagreen4, key=1, label=record, style=dashed];
n377 -> n378  [key=0, style=solid];
n374 -> n375  [key=0, style=solid];
n374 -> n19  [key=2, style=dotted];
n375 -> n376  [key=0, style=solid];
n375 -> n19  [key=2, style=dotted];
n376 -> n371  [color=blue, key=0, style=bold];
n378 -> n379  [key=0, style=solid];
n378 -> n380  [key=2, style=dotted];
n379 -> n377  [color=blue, key=0, style=bold];
n381 -> n382  [key=0, style=solid];
n382 -> n383  [key=0, style=solid];
n382 -> n36  [key=2, style=dotted];
n382 -> n384  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n383 -> n381  [color=blue, key=0, style=bold];
n384 -> n385  [key=0, style=solid];
n384 -> n386  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n385 -> n386  [key=0, style=solid];
n385 -> n49  [key=2, style=dotted];
n385 -> n389  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n386 -> n387  [key=0, style=solid];
n386 -> n13  [key=2, style=dotted];
n386 -> n47  [key=2, style=dotted];
n389 -> n390  [key=0, style=solid];
n389 -> n391  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n387 -> n388  [key=0, style=solid];
n387 -> n19  [key=2, style=dotted];
n388 -> n384  [color=blue, key=0, style=bold];
n390 -> n391  [key=0, style=solid];
n390 -> n380  [key=2, style=dotted];
n391 -> n392  [key=0, style=solid];
n391 -> n380  [key=2, style=dotted];
n392 -> n389  [color=blue, key=0, style=bold];
n393 -> n394  [key=0, style=solid];
n394 -> n395  [key=0, style=solid];
n394 -> n36  [key=2, style=dotted];
n394 -> n396  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n395 -> n393  [color=blue, key=0, style=bold];
n396 -> n397  [key=0, style=solid];
n396 -> n398  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n397 -> n398  [key=0, style=solid];
n397 -> n49  [key=2, style=dotted];
n397 -> n401  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n398 -> n399  [key=0, style=solid];
n398 -> n13  [key=2, style=dotted];
n398 -> n47  [key=2, style=dotted];
n401 -> n402  [key=0, style=solid];
n401 -> n403  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n401 -> n404  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n399 -> n400  [key=0, style=solid];
n399 -> n19  [key=2, style=dotted];
n400 -> n396  [color=blue, key=0, style=bold];
n402 -> n403  [key=0, style=solid];
n402 -> n380  [key=2, style=dotted];
n403 -> n404  [key=0, style=solid];
n403 -> n380  [key=2, style=dotted];
n404 -> n405  [key=0, style=solid];
n404 -> n406  [key=2, style=dotted];
n405 -> n401  [color=blue, key=0, style=bold];
n407 -> n408  [key=0, style=solid];
n408 -> n409  [key=0, style=solid];
n408 -> n36  [key=2, style=dotted];
n408 -> n410  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n409 -> n407  [color=blue, key=0, style=bold];
n410 -> n411  [key=0, style=solid];
n410 -> n412  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n411 -> n412  [key=0, style=solid];
n411 -> n49  [key=2, style=dotted];
n411 -> n415  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n412 -> n413  [key=0, style=solid];
n412 -> n13  [key=2, style=dotted];
n412 -> n47  [key=2, style=dotted];
n415 -> n416  [key=0, style=solid];
n415 -> n417  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n413 -> n414  [key=0, style=solid];
n413 -> n19  [key=2, style=dotted];
n414 -> n410  [color=blue, key=0, style=bold];
n416 -> n417  [key=0, style=solid];
n416 -> n380  [key=2, style=dotted];
n417 -> n418  [key=0, style=solid];
n417 -> n406  [key=2, style=dotted];
n418 -> n415  [color=blue, key=0, style=bold];
n419 -> n420  [key=0, style=solid];
n420 -> n421  [key=0, style=solid];
n420 -> n36  [key=2, style=dotted];
n420 -> n422  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n421 -> n419  [color=blue, key=0, style=bold];
n422 -> n423  [key=0, style=solid];
n422 -> n424  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n423 -> n424  [key=0, style=solid];
n423 -> n49  [key=2, style=dotted];
n423 -> n427  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n424 -> n425  [key=0, style=solid];
n424 -> n13  [key=2, style=dotted];
n424 -> n47  [key=2, style=dotted];
n427 -> n428  [key=0, style=solid];
n427 -> n429  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n425 -> n426  [key=0, style=solid];
n425 -> n19  [key=2, style=dotted];
n426 -> n422  [color=blue, key=0, style=bold];
n428 -> n429  [key=0, style=solid];
n428 -> n380  [key=2, style=dotted];
n429 -> n430  [key=0, style=solid];
n429 -> n406  [key=2, style=dotted];
n430 -> n427  [color=blue, key=0, style=bold];
n431 -> n432  [key=0, style=solid];
n432 -> n433  [key=0, style=solid];
n432 -> n36  [key=2, style=dotted];
n432 -> n434  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n433 -> n431  [color=blue, key=0, style=bold];
n434 -> n435  [key=0, style=solid];
n434 -> n436  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n435 -> n436  [key=0, style=solid];
n435 -> n49  [key=2, style=dotted];
n435 -> n442  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n436 -> n437  [key=0, style=solid];
n436 -> n46  [key=2, style=dotted];
n436 -> n441  [key=2, style=dotted];
n436 -> n438  [color=darkseagreen4, key=1, label=records, style=dashed];
n436 -> n439  [color=darkseagreen4, key=1, label=records, style=dashed];
n442 -> n443  [key=0, style=solid];
n442 -> n444  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n442 -> n445  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n442 -> n446  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n442 -> n447  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n437 -> n438  [key=0, style=solid];
n437 -> n19  [key=2, style=dotted];
n438 -> n439  [key=0, style=solid];
n438 -> n19  [key=2, style=dotted];
n439 -> n440  [key=0, style=solid];
n439 -> n19  [key=2, style=dotted];
n440 -> n434  [color=blue, key=0, style=bold];
n443 -> n444  [key=0, style=solid];
n443 -> n380  [key=2, style=dotted];
n444 -> n445  [key=0, style=solid];
n444 -> n380  [key=2, style=dotted];
n445 -> n446  [key=0, style=solid];
n445 -> n380  [key=2, style=dotted];
n446 -> n447  [key=0, style=solid];
n446 -> n380  [key=2, style=dotted];
n447 -> n448  [key=0, style=solid];
n447 -> n449  [key=2, style=dotted];
n448 -> n442  [color=blue, key=0, style=bold];
n450 -> n451  [key=0, style=solid];
n451 -> n452  [key=0, style=solid];
n451 -> n36  [key=2, style=dotted];
n451 -> n453  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n452 -> n450  [color=blue, key=0, style=bold];
n453 -> n454  [key=0, style=solid];
n453 -> n455  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n454 -> n455  [key=0, style=solid];
n454 -> n49  [key=2, style=dotted];
n454 -> n458  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n455 -> n456  [key=0, style=solid];
n455 -> n13  [key=2, style=dotted];
n455 -> n47  [key=2, style=dotted];
n458 -> n459  [key=0, style=solid];
n458 -> n460  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n458 -> n461  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n458 -> n462  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n456 -> n457  [key=0, style=solid];
n456 -> n19  [key=2, style=dotted];
n457 -> n453  [color=blue, key=0, style=bold];
n459 -> n460  [key=0, style=solid];
n459 -> n380  [key=2, style=dotted];
n460 -> n461  [key=0, style=solid];
n460 -> n380  [key=2, style=dotted];
n461 -> n462  [key=0, style=solid];
n461 -> n380  [key=2, style=dotted];
n462 -> n463  [key=0, style=solid];
n462 -> n449  [key=2, style=dotted];
n463 -> n458  [color=blue, key=0, style=bold];
n464 -> n465  [key=0, style=solid];
n465 -> n466  [key=0, style=solid];
n465 -> n36  [key=2, style=dotted];
n465 -> n467  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n466 -> n464  [color=blue, key=0, style=bold];
n467 -> n468  [key=0, style=solid];
n467 -> n469  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n468 -> n469  [key=0, style=solid];
n468 -> n49  [key=2, style=dotted];
n468 -> n472  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n469 -> n470  [key=0, style=solid];
n469 -> n13  [key=2, style=dotted];
n469 -> n47  [key=2, style=dotted];
n472 -> n473  [key=0, style=solid];
n472 -> n474  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n470 -> n471  [key=0, style=solid];
n470 -> n19  [key=2, style=dotted];
n471 -> n467  [color=blue, key=0, style=bold];
n473 -> n474  [key=0, style=solid];
n473 -> n380  [key=2, style=dotted];
n474 -> n475  [key=0, style=solid];
n474 -> n449  [key=2, style=dotted];
n475 -> n472  [color=blue, key=0, style=bold];
n476 -> n477  [key=0, style=solid];
n477 -> n478  [key=0, style=solid];
n477 -> n36  [key=2, style=dotted];
n477 -> n479  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n478 -> n476  [color=blue, key=0, style=bold];
n479 -> n480  [key=0, style=solid];
n479 -> n481  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n480 -> n481  [key=0, style=solid];
n480 -> n49  [key=2, style=dotted];
n480 -> n484  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n481 -> n482  [key=0, style=solid];
n481 -> n13  [key=2, style=dotted];
n481 -> n47  [key=2, style=dotted];
n484 -> n485  [key=0, style=solid];
n484 -> n486  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n482 -> n483  [key=0, style=solid];
n482 -> n19  [key=2, style=dotted];
n483 -> n479  [color=blue, key=0, style=bold];
n485 -> n486  [key=0, style=solid];
n485 -> n380  [key=2, style=dotted];
n486 -> n487  [key=0, style=solid];
n486 -> n449  [key=2, style=dotted];
n487 -> n484  [color=blue, key=0, style=bold];
n488 -> n489  [key=0, style=solid];
n489 -> n490  [key=0, style=solid];
n489 -> n36  [key=2, style=dotted];
n489 -> n491  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n490 -> n488  [color=blue, key=0, style=bold];
n491 -> n492  [key=0, style=solid];
n491 -> n493  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n492 -> n493  [key=0, style=solid];
n492 -> n49  [key=2, style=dotted];
n492 -> n496  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n493 -> n494  [key=0, style=solid];
n493 -> n13  [key=2, style=dotted];
n493 -> n47  [key=2, style=dotted];
n496 -> n497  [key=0, style=solid];
n496 -> n498  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n494 -> n495  [key=0, style=solid];
n494 -> n19  [key=2, style=dotted];
n495 -> n491  [color=blue, key=0, style=bold];
n497 -> n498  [key=0, style=solid];
n497 -> n380  [key=2, style=dotted];
n498 -> n499  [key=0, style=solid];
n498 -> n449  [key=2, style=dotted];
n499 -> n496  [color=blue, key=0, style=bold];
n500 -> n501  [key=0, style=solid];
n501 -> n502  [key=0, style=solid];
n501 -> n36  [key=2, style=dotted];
n501 -> n503  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n502 -> n500  [color=blue, key=0, style=bold];
n503 -> n504  [key=0, style=solid];
n503 -> n508  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n504 -> n505  [key=0, style=solid];
n504 -> n13  [key=2, style=dotted];
n504 -> n507  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n508 -> n509  [key=0, style=solid];
n508 -> n49  [key=2, style=dotted];
n508 -> n510  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n505 -> n506  [key=0, style=solid];
n505 -> n19  [key=2, style=dotted];
n507 -> n508  [key=0, style=solid];
n506 -> n503  [color=blue, key=0, style=bold];
n509 -> n507  [color=blue, key=0, style=bold];
n510 -> n511  [key=0, style=solid];
n511 -> n512  [key=0, style=solid];
n511 -> n104  [key=2, style=dotted];
n511 -> n513  [key=2, style=dotted];
n512 -> n510  [color=blue, key=0, style=bold];
n514 -> n515  [key=0, style=solid];
n515 -> n516  [key=0, style=solid];
n515 -> n36  [key=2, style=dotted];
n515 -> n517  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n516 -> n514  [color=blue, key=0, style=bold];
n517 -> n518  [key=0, style=solid];
n517 -> n522  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n518 -> n519  [key=0, style=solid];
n518 -> n13  [key=2, style=dotted];
n518 -> n521  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n522 -> n523  [key=0, style=solid];
n522 -> n49  [key=2, style=dotted];
n522 -> n524  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n519 -> n520  [key=0, style=solid];
n519 -> n19  [key=2, style=dotted];
n521 -> n522  [key=0, style=solid];
n520 -> n517  [color=blue, key=0, style=bold];
n523 -> n521  [color=blue, key=0, style=bold];
n524 -> n525  [key=0, style=solid];
n525 -> n526  [key=0, style=solid];
n525 -> n513  [key=2, style=dotted];
n526 -> n524  [color=blue, key=0, style=bold];
n527 -> n528  [key=0, style=solid];
n528 -> n529  [key=0, style=solid];
n528 -> n36  [key=2, style=dotted];
n528 -> n530  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n529 -> n527  [color=blue, key=0, style=bold];
n530 -> n531  [key=0, style=solid];
n530 -> n532  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n531 -> n532  [key=0, style=solid];
n531 -> n49  [key=2, style=dotted];
n531 -> n537  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n532 -> n533  [key=0, style=solid];
n532 -> n46  [key=2, style=dotted];
n532 -> n536  [key=2, style=dotted];
n532 -> n540  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n532 -> n543  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n532 -> n534  [color=darkseagreen4, key=1, label=result, style=dashed];
n537 -> n538  [key=0, style=solid];
n533 -> n534  [key=0, style=solid];
n533 -> n19  [key=2, style=dotted];
n540 -> n541  [key=0, style=solid];
n543 -> n544  [key=0, style=solid];
n534 -> n535  [key=0, style=solid];
n534 -> n19  [key=2, style=dotted];
n535 -> n530  [color=blue, key=0, style=bold];
n538 -> n539  [key=0, style=solid];
n538 -> n104  [key=2, style=dotted];
n538 -> n513  [key=2, style=dotted];
n539 -> n537  [color=blue, key=0, style=bold];
n541 -> n542  [key=0, style=solid];
n542 -> n540  [color=blue, key=0, style=bold];
n544 -> n545  [key=0, style=solid];
n545 -> n543  [color=blue, key=0, style=bold];
n546 -> n547  [key=0, style=solid];
n547 -> n548  [key=0, style=solid];
n547 -> n36  [key=2, style=dotted];
n547 -> n549  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n548 -> n546  [color=blue, key=0, style=bold];
n549 -> n550  [key=0, style=solid];
n549 -> n553  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n550 -> n551  [key=0, style=solid];
n550 -> n13  [key=2, style=dotted];
n550 -> n552  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n553 -> n554  [key=0, style=solid];
n553 -> n49  [key=2, style=dotted];
n553 -> n555  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n551 -> n549  [color=blue, key=0, style=bold];
n552 -> n553  [key=0, style=solid];
n554 -> n552  [color=blue, key=0, style=bold];
n555 -> n556  [key=0, style=solid];
n556 -> n557  [key=0, style=solid];
n556 -> n558  [key=2, style=dotted];
n557 -> n555  [color=blue, key=0, style=bold];
n559 -> n560  [key=0, style=solid];
n560 -> n561  [key=0, style=solid];
n560 -> n36  [key=2, style=dotted];
n560 -> n562  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n561 -> n559  [color=blue, key=0, style=bold];
n562 -> n563  [key=0, style=solid];
n562 -> n564  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n562 -> n565  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n563 -> n564  [key=0, style=solid];
n563 -> n49  [key=2, style=dotted];
n563 -> n568  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n564 -> n565  [key=0, style=solid];
n564 -> n49  [key=2, style=dotted];
n564 -> n571  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n565 -> n566  [key=0, style=solid];
n565 -> n13  [key=2, style=dotted];
n565 -> n47  [key=2, style=dotted];
n568 -> n569  [key=0, style=solid];
n571 -> n572  [key=0, style=solid];
n566 -> n567  [key=0, style=solid];
n566 -> n19  [key=2, style=dotted];
n567 -> n562  [color=blue, key=0, style=bold];
n569 -> n570  [key=0, style=solid];
n569 -> n104  [key=2, style=dotted];
n569 -> n513  [key=2, style=dotted];
n570 -> n568  [color=blue, key=0, style=bold];
n572 -> n573  [key=0, style=solid];
n572 -> n558  [key=2, style=dotted];
n573 -> n571  [color=blue, key=0, style=bold];
n574 -> n575  [key=0, style=solid];
n575 -> n576  [key=0, style=solid];
n575 -> n36  [key=2, style=dotted];
n575 -> n577  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n576 -> n574  [color=blue, key=0, style=bold];
n577 -> n578  [key=0, style=solid];
n577 -> n582  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n578 -> n579  [key=0, style=solid];
n578 -> n13  [key=2, style=dotted];
n578 -> n581  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n582 -> n583  [key=0, style=solid];
n582 -> n49  [key=2, style=dotted];
n582 -> n584  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n579 -> n580  [key=0, style=solid];
n579 -> n19  [key=2, style=dotted];
n581 -> n582  [key=0, style=solid];
n580 -> n577  [color=blue, key=0, style=bold];
n583 -> n581  [color=blue, key=0, style=bold];
n584 -> n585  [key=0, style=solid];
n585 -> n586  [key=0, style=solid];
n585 -> n587  [key=2, style=dotted];
n585 -> n588  [key=2, style=dotted];
n586 -> n584  [color=blue, key=0, style=bold];
n589 -> n590  [key=0, style=solid];
n590 -> n591  [key=0, style=solid];
n590 -> n36  [key=2, style=dotted];
n590 -> n592  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n591 -> n589  [color=blue, key=0, style=bold];
n592 -> n593  [key=0, style=solid];
n592 -> n597  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n593 -> n594  [key=0, style=solid];
n593 -> n13  [key=2, style=dotted];
n593 -> n596  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n597 -> n598  [key=0, style=solid];
n597 -> n49  [key=2, style=dotted];
n597 -> n599  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n594 -> n595  [key=0, style=solid];
n594 -> n19  [key=2, style=dotted];
n596 -> n597  [key=0, style=solid];
n595 -> n592  [color=blue, key=0, style=bold];
n598 -> n596  [color=blue, key=0, style=bold];
n599 -> n600  [key=0, style=solid];
n600 -> n601  [key=0, style=solid];
n600 -> n588  [key=2, style=dotted];
n601 -> n599  [color=blue, key=0, style=bold];
n602 -> n603  [key=0, style=solid];
n603 -> n604  [key=0, style=solid];
n603 -> n36  [key=2, style=dotted];
n603 -> n605  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n604 -> n602  [color=blue, key=0, style=bold];
n605 -> n606  [key=0, style=solid];
n605 -> n607  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n605 -> n608  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n606 -> n607  [key=0, style=solid];
n606 -> n587  [key=2, style=dotted];
n606 -> n612  [color=darkseagreen4, key=1, label=items, style=dashed];
n606 -> n609  [color=darkseagreen4, key=1, label=items, style=dashed];
n607 -> n608  [key=0, style=solid];
n607 -> n49  [key=2, style=dotted];
n607 -> n611  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n608 -> n609  [key=0, style=solid];
n608 -> n13  [key=2, style=dotted];
n612 -> n613  [key=0, style=solid];
n612 -> n588  [key=2, style=dotted];
n609 -> n610  [key=0, style=solid];
n609 -> n19  [key=2, style=dotted];
n611 -> n612  [key=0, style=solid];
n610 -> n605  [color=blue, key=0, style=bold];
n613 -> n611  [color=blue, key=0, style=bold];
n614 -> n615  [key=0, style=solid];
n615 -> n616  [key=0, style=solid];
n615 -> n36  [key=2, style=dotted];
n615 -> n617  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n616 -> n614  [color=blue, key=0, style=bold];
n617 -> n618  [key=0, style=solid];
n617 -> n621  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n618 -> n619  [key=0, style=solid];
n618 -> n13  [key=2, style=dotted];
n618 -> n620  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n621 -> n622  [key=0, style=solid];
n621 -> n49  [key=2, style=dotted];
n621 -> n623  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n619 -> n617  [color=blue, key=0, style=bold];
n620 -> n621  [key=0, style=solid];
n622 -> n620  [color=blue, key=0, style=bold];
n623 -> n624  [key=0, style=solid];
n624 -> n625  [key=0, style=solid];
n624 -> n626  [key=2, style=dotted];
n625 -> n623  [color=blue, key=0, style=bold];
n627 -> n628  [key=0, style=solid];
n628 -> n629  [key=0, style=solid];
n628 -> n632  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n629 -> n630  [key=0, style=solid];
n629 -> n36  [key=2, style=dotted];
n629 -> n631  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n632 -> n633  [key=0, style=solid];
n632 -> n637  [key=2, style=dotted];
n630 -> n627  [color=blue, key=0, style=bold];
n631 -> n632  [key=0, style=solid];
n631 -> n633  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n631 -> n634  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n633 -> n634  [key=0, style=solid];
n633 -> n49  [key=2, style=dotted];
n633 -> n638  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n634 -> n635  [key=0, style=solid];
n634 -> n46  [key=2, style=dotted];
n634 -> n47  [key=2, style=dotted];
n638 -> n639  [key=0, style=solid];
n635 -> n636  [key=0, style=solid];
n635 -> n19  [key=2, style=dotted];
n636 -> n631  [color=blue, key=0, style=bold];
n639 -> n640  [key=0, style=solid];
n639 -> n626  [key=2, style=dotted];
n640 -> n638  [color=blue, key=0, style=bold];
n641 -> n642  [key=0, style=solid];
n642 -> n643  [key=0, style=solid];
n642 -> n36  [key=2, style=dotted];
n642 -> n644  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n643 -> n641  [color=blue, key=0, style=bold];
n644 -> n645  [key=0, style=solid];
n644 -> n649  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n645 -> n646  [key=0, style=solid];
n645 -> n13  [key=2, style=dotted];
n645 -> n648  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n649 -> n650  [key=0, style=solid];
n649 -> n49  [key=2, style=dotted];
n649 -> n651  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n646 -> n647  [key=0, style=solid];
n646 -> n19  [key=2, style=dotted];
n648 -> n649  [key=0, style=solid];
n647 -> n644  [color=blue, key=0, style=bold];
n650 -> n648  [color=blue, key=0, style=bold];
n651 -> n652  [key=0, style=solid];
n652 -> n653  [key=0, style=solid];
n652 -> n654  [key=2, style=dotted];
n652 -> n655  [key=2, style=dotted];
n653 -> n651  [color=blue, key=0, style=bold];
n656 -> n657  [key=0, style=solid];
n657 -> n658  [key=0, style=solid];
n657 -> n661  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n658 -> n659  [key=0, style=solid];
n658 -> n36  [key=2, style=dotted];
n658 -> n660  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n661 -> n662  [key=0, style=solid];
n661 -> n637  [key=2, style=dotted];
n659 -> n656  [color=blue, key=0, style=bold];
n660 -> n661  [key=0, style=solid];
n660 -> n662  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n660 -> n663  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n662 -> n663  [key=0, style=solid];
n662 -> n49  [key=2, style=dotted];
n662 -> n668  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n663 -> n664  [key=0, style=solid];
n663 -> n46  [key=2, style=dotted];
n663 -> n536  [key=2, style=dotted];
n663 -> n671  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n663 -> n674  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n663 -> n665  [color=darkseagreen4, key=1, label=records, style=dashed];
n663 -> n666  [color=darkseagreen4, key=1, label=records, style=dashed];
n668 -> n669  [key=0, style=solid];
n664 -> n665  [key=0, style=solid];
n664 -> n51  [key=2, style=dotted];
n664 -> n53  [key=2, style=dotted];
n671 -> n672  [key=0, style=solid];
n674 -> n675  [key=0, style=solid];
n665 -> n666  [key=0, style=solid];
n665 -> n51  [key=2, style=dotted];
n665 -> n53  [key=2, style=dotted];
n666 -> n667  [key=0, style=solid];
n666 -> n54  [key=2, style=dotted];
n667 -> n660  [color=blue, key=0, style=bold];
n669 -> n670  [key=0, style=solid];
n669 -> n654  [key=2, style=dotted];
n669 -> n655  [key=2, style=dotted];
n670 -> n668  [color=blue, key=0, style=bold];
n672 -> n673  [key=0, style=solid];
n673 -> n671  [color=blue, key=0, style=bold];
n675 -> n676  [key=0, style=solid];
n676 -> n674  [color=blue, key=0, style=bold];
n677 -> n678  [key=0, style=solid];
n678 -> n679  [key=0, style=solid];
n678 -> n36  [key=2, style=dotted];
n678 -> n680  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n679 -> n677  [color=blue, key=0, style=bold];
n680 -> n681  [key=0, style=solid];
n680 -> n685  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n681 -> n682  [key=0, style=solid];
n681 -> n13  [key=2, style=dotted];
n681 -> n684  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n685 -> n686  [key=0, style=solid];
n685 -> n49  [key=2, style=dotted];
n685 -> n687  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n682 -> n683  [key=0, style=solid];
n682 -> n19  [key=2, style=dotted];
n684 -> n685  [key=0, style=solid];
n683 -> n680  [color=blue, key=0, style=bold];
n686 -> n684  [color=blue, key=0, style=bold];
n687 -> n688  [key=0, style=solid];
n688 -> n689  [key=0, style=solid];
n688 -> n690  [key=2, style=dotted];
n688 -> n691  [key=2, style=dotted];
n689 -> n687  [color=blue, key=0, style=bold];
n692 -> n693  [key=0, style=solid];
n693 -> n694  [key=0, style=solid];
n693 -> n697  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n694 -> n695  [key=0, style=solid];
n694 -> n36  [key=2, style=dotted];
n694 -> n696  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n697 -> n698  [key=0, style=solid];
n697 -> n637  [key=2, style=dotted];
n695 -> n692  [color=blue, key=0, style=bold];
n696 -> n697  [key=0, style=solid];
n696 -> n698  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n696 -> n699  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n698 -> n699  [key=0, style=solid];
n698 -> n49  [key=2, style=dotted];
n698 -> n704  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n699 -> n700  [key=0, style=solid];
n699 -> n46  [key=2, style=dotted];
n699 -> n536  [key=2, style=dotted];
n699 -> n707  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n699 -> n710  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n699 -> n701  [color=darkseagreen4, key=1, label=records, style=dashed];
n699 -> n702  [color=darkseagreen4, key=1, label=records, style=dashed];
n704 -> n705  [key=0, style=solid];
n700 -> n701  [key=0, style=solid];
n700 -> n51  [key=2, style=dotted];
n700 -> n53  [key=2, style=dotted];
n707 -> n708  [key=0, style=solid];
n710 -> n711  [key=0, style=solid];
n701 -> n702  [key=0, style=solid];
n701 -> n51  [key=2, style=dotted];
n701 -> n53  [key=2, style=dotted];
n702 -> n703  [key=0, style=solid];
n702 -> n54  [key=2, style=dotted];
n703 -> n696  [color=blue, key=0, style=bold];
n705 -> n706  [key=0, style=solid];
n705 -> n654  [key=2, style=dotted];
n705 -> n691  [key=2, style=dotted];
n706 -> n704  [color=blue, key=0, style=bold];
n708 -> n709  [key=0, style=solid];
n709 -> n707  [color=blue, key=0, style=bold];
n711 -> n712  [key=0, style=solid];
n712 -> n710  [color=blue, key=0, style=bold];
n713 -> n714  [key=0, style=solid];
n714 -> n715  [key=0, style=solid];
n714 -> n36  [key=2, style=dotted];
n714 -> n716  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n715 -> n713  [color=blue, key=0, style=bold];
n716 -> n717  [key=0, style=solid];
n716 -> n721  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n717 -> n718  [key=0, style=solid];
n717 -> n13  [key=2, style=dotted];
n717 -> n720  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n721 -> n722  [key=0, style=solid];
n721 -> n49  [key=2, style=dotted];
n721 -> n723  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n718 -> n719  [key=0, style=solid];
n718 -> n19  [key=2, style=dotted];
n720 -> n721  [key=0, style=solid];
n719 -> n716  [color=blue, key=0, style=bold];
n722 -> n720  [color=blue, key=0, style=bold];
n723 -> n724  [key=0, style=solid];
n724 -> n725  [key=0, style=solid];
n724 -> n690  [key=2, style=dotted];
n724 -> n726  [key=2, style=dotted];
n725 -> n723  [color=blue, key=0, style=bold];
n727 -> n728  [key=0, style=solid];
n728 -> n729  [key=0, style=solid];
n728 -> n732  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n729 -> n730  [key=0, style=solid];
n729 -> n36  [key=2, style=dotted];
n729 -> n731  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n732 -> n733  [key=0, style=solid];
n732 -> n637  [key=2, style=dotted];
n730 -> n727  [color=blue, key=0, style=bold];
n731 -> n732  [key=0, style=solid];
n731 -> n733  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n731 -> n734  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n733 -> n734  [key=0, style=solid];
n733 -> n49  [key=2, style=dotted];
n733 -> n739  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n734 -> n735  [key=0, style=solid];
n734 -> n46  [key=2, style=dotted];
n734 -> n536  [key=2, style=dotted];
n734 -> n742  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n734 -> n745  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n734 -> n736  [color=darkseagreen4, key=1, label=records, style=dashed];
n734 -> n737  [color=darkseagreen4, key=1, label=records, style=dashed];
n739 -> n740  [key=0, style=solid];
n735 -> n736  [key=0, style=solid];
n735 -> n51  [key=2, style=dotted];
n735 -> n53  [key=2, style=dotted];
n742 -> n743  [key=0, style=solid];
n745 -> n746  [key=0, style=solid];
n736 -> n737  [key=0, style=solid];
n736 -> n51  [key=2, style=dotted];
n736 -> n53  [key=2, style=dotted];
n737 -> n738  [key=0, style=solid];
n737 -> n54  [key=2, style=dotted];
n738 -> n731  [color=blue, key=0, style=bold];
n740 -> n741  [key=0, style=solid];
n740 -> n654  [key=2, style=dotted];
n740 -> n726  [key=2, style=dotted];
n741 -> n739  [color=blue, key=0, style=bold];
n743 -> n744  [key=0, style=solid];
n744 -> n742  [color=blue, key=0, style=bold];
n746 -> n747  [key=0, style=solid];
n747 -> n745  [color=blue, key=0, style=bold];
n748 -> n749  [key=0, style=solid];
n749 -> n750  [key=0, style=solid];
n749 -> n36  [key=2, style=dotted];
n749 -> n751  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n750 -> n748  [color=blue, key=0, style=bold];
n751 -> n752  [key=0, style=solid];
n751 -> n756  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n752 -> n753  [key=0, style=solid];
n752 -> n13  [key=2, style=dotted];
n752 -> n755  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n756 -> n757  [key=0, style=solid];
n756 -> n49  [key=2, style=dotted];
n756 -> n758  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n753 -> n754  [key=0, style=solid];
n753 -> n19  [key=2, style=dotted];
n755 -> n756  [key=0, style=solid];
n754 -> n751  [color=blue, key=0, style=bold];
n757 -> n755  [color=blue, key=0, style=bold];
n758 -> n759  [key=0, style=solid];
n759 -> n760  [key=0, style=solid];
n759 -> n761  [key=2, style=dotted];
n760 -> n758  [color=blue, key=0, style=bold];
n762 -> n763  [key=0, style=solid];
n763 -> n764  [key=0, style=solid];
n763 -> n767  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n764 -> n765  [key=0, style=solid];
n764 -> n36  [key=2, style=dotted];
n764 -> n766  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n767 -> n768  [key=0, style=solid];
n767 -> n52  [key=2, style=dotted];
n767 -> n637  [key=2, style=dotted];
n765 -> n762  [color=blue, key=0, style=bold];
n766 -> n767  [key=0, style=solid];
n766 -> n768  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n766 -> n769  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n768 -> n769  [key=0, style=solid];
n768 -> n49  [key=2, style=dotted];
n768 -> n773  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n769 -> n770  [key=0, style=solid];
n769 -> n46  [key=2, style=dotted];
n769 -> n536  [key=2, style=dotted];
n769 -> n776  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n769 -> n779  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n769 -> n771  [color=darkseagreen4, key=1, label=records, style=dashed];
n773 -> n774  [key=0, style=solid];
n770 -> n771  [key=0, style=solid];
n770 -> n54  [key=2, style=dotted];
n776 -> n777  [key=0, style=solid];
n779 -> n780  [key=0, style=solid];
n771 -> n772  [key=0, style=solid];
n771 -> n73  [key=2, style=dotted];
n772 -> n766  [color=blue, key=0, style=bold];
n774 -> n775  [key=0, style=solid];
n774 -> n761  [key=2, style=dotted];
n775 -> n773  [color=blue, key=0, style=bold];
n777 -> n778  [key=0, style=solid];
n778 -> n776  [color=blue, key=0, style=bold];
n780 -> n781  [key=0, style=solid];
n781 -> n779  [color=blue, key=0, style=bold];
n782 -> n783  [key=0, style=solid];
n783 -> n784  [key=0, style=solid];
n783 -> n36  [key=2, style=dotted];
n783 -> n785  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n784 -> n782  [color=blue, key=0, style=bold];
n785 -> n786  [key=0, style=solid];
n785 -> n790  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n786 -> n787  [key=0, style=solid];
n786 -> n13  [key=2, style=dotted];
n786 -> n789  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n790 -> n791  [key=0, style=solid];
n790 -> n49  [key=2, style=dotted];
n790 -> n792  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n787 -> n788  [key=0, style=solid];
n787 -> n19  [key=2, style=dotted];
n789 -> n790  [key=0, style=solid];
n788 -> n785  [color=blue, key=0, style=bold];
n791 -> n789  [color=blue, key=0, style=bold];
n792 -> n793  [key=0, style=solid];
n793 -> n794  [key=0, style=solid];
n793 -> n795  [key=2, style=dotted];
n794 -> n792  [color=blue, key=0, style=bold];
n796 -> n797  [key=0, style=solid];
n797 -> n798  [key=0, style=solid];
n797 -> n801  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n798 -> n799  [key=0, style=solid];
n798 -> n36  [key=2, style=dotted];
n798 -> n800  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n801 -> n802  [key=0, style=solid];
n801 -> n52  [key=2, style=dotted];
n801 -> n637  [key=2, style=dotted];
n799 -> n796  [color=blue, key=0, style=bold];
n800 -> n801  [key=0, style=solid];
n800 -> n802  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n800 -> n803  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n802 -> n803  [key=0, style=solid];
n802 -> n49  [key=2, style=dotted];
n802 -> n807  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n803 -> n804  [key=0, style=solid];
n803 -> n46  [key=2, style=dotted];
n803 -> n536  [key=2, style=dotted];
n803 -> n810  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n803 -> n813  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n803 -> n805  [color=darkseagreen4, key=1, label=records, style=dashed];
n807 -> n808  [key=0, style=solid];
n804 -> n805  [key=0, style=solid];
n804 -> n54  [key=2, style=dotted];
n810 -> n811  [key=0, style=solid];
n813 -> n814  [key=0, style=solid];
n805 -> n806  [key=0, style=solid];
n805 -> n73  [key=2, style=dotted];
n806 -> n800  [color=blue, key=0, style=bold];
n808 -> n809  [key=0, style=solid];
n808 -> n795  [key=2, style=dotted];
n809 -> n807  [color=blue, key=0, style=bold];
n811 -> n812  [key=0, style=solid];
n812 -> n810  [color=blue, key=0, style=bold];
n814 -> n815  [key=0, style=solid];
n815 -> n813  [color=blue, key=0, style=bold];
n816 -> n817  [key=0, style=solid];
n817 -> n818  [key=0, style=solid];
n817 -> n36  [key=2, style=dotted];
n817 -> n819  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n818 -> n816  [color=blue, key=0, style=bold];
n819 -> n820  [key=0, style=solid];
n819 -> n824  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n820 -> n821  [key=0, style=solid];
n820 -> n13  [key=2, style=dotted];
n820 -> n823  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n824 -> n825  [key=0, style=solid];
n824 -> n49  [key=2, style=dotted];
n824 -> n826  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n821 -> n822  [key=0, style=solid];
n821 -> n19  [key=2, style=dotted];
n823 -> n824  [key=0, style=solid];
n822 -> n819  [color=blue, key=0, style=bold];
n825 -> n823  [color=blue, key=0, style=bold];
n826 -> n827  [key=0, style=solid];
n827 -> n828  [key=0, style=solid];
n827 -> n829  [key=2, style=dotted];
n828 -> n826  [color=blue, key=0, style=bold];
n830 -> n831  [key=0, style=solid];
n831 -> n832  [key=0, style=solid];
n831 -> n835  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n832 -> n833  [key=0, style=solid];
n832 -> n36  [key=2, style=dotted];
n832 -> n834  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n835 -> n836  [key=0, style=solid];
n835 -> n52  [key=2, style=dotted];
n835 -> n637  [key=2, style=dotted];
n833 -> n830  [color=blue, key=0, style=bold];
n834 -> n835  [key=0, style=solid];
n834 -> n836  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n834 -> n837  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n836 -> n837  [key=0, style=solid];
n836 -> n49  [key=2, style=dotted];
n836 -> n841  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n837 -> n838  [key=0, style=solid];
n837 -> n46  [key=2, style=dotted];
n837 -> n536  [key=2, style=dotted];
n837 -> n844  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n837 -> n847  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n837 -> n839  [color=darkseagreen4, key=1, label=records, style=dashed];
n841 -> n842  [key=0, style=solid];
n838 -> n839  [key=0, style=solid];
n838 -> n54  [key=2, style=dotted];
n844 -> n845  [key=0, style=solid];
n847 -> n848  [key=0, style=solid];
n839 -> n840  [key=0, style=solid];
n839 -> n73  [key=2, style=dotted];
n840 -> n834  [color=blue, key=0, style=bold];
n842 -> n843  [key=0, style=solid];
n842 -> n829  [key=2, style=dotted];
n843 -> n841  [color=blue, key=0, style=bold];
n845 -> n846  [key=0, style=solid];
n846 -> n844  [color=blue, key=0, style=bold];
n848 -> n849  [key=0, style=solid];
n849 -> n847  [color=blue, key=0, style=bold];
n850 -> n851  [key=0, style=solid];
n850 -> n852  [color=darkseagreen4, key=1, label="System.Action<SqlConnection>", style=dashed];
n851 -> n852  [key=0, style=solid];
n851 -> n31  [key=2, style=dotted];
n852 -> n853  [key=0, style=solid];
n852 -> n854  [key=2, style=dotted];
n853 -> n850  [color=blue, key=0, style=bold];
n855 -> n856  [key=0, style=solid];
n855 -> n23  [key=2, style=dotted];
n855 -> n857  [color=darkseagreen4, key=1, label=transaction, style=dashed];
n856 -> n857  [key=0, style=solid];
n856 -> n854  [key=2, style=dotted];
n857 -> n858  [key=0, style=solid];
n857 -> n859  [key=2, style=dotted];
n858 -> n49  [color=blue, key=0, style=bold];
m0_453 -> m0_454  [key=0, style=solid];
m0_453 -> m0_457  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_454 -> m0_455  [key=0, style=solid];
m0_454 -> m0_31  [key=2, style=dotted];
m0_454 -> m0_456  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_455 -> m0_453  [color=blue, key=0, style=bold];
m0_769 -> m0_770  [key=0, style=solid];
m0_769 -> m0_771  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_769 -> m0_775  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_770 -> m0_771  [key=0, style=solid];
m0_770 -> m0_774  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_770 -> m0_770  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
m0_771 -> m0_772  [key=0, style=solid];
m0_771 -> m0_31  [key=2, style=dotted];
m0_771 -> m0_773  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_772 -> m0_769  [color=blue, key=0, style=bold];
m0_536 -> m0_537  [key=0, style=solid];
m0_536 -> m0_540  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_537 -> m0_538  [key=0, style=solid];
m0_537 -> m0_31  [key=2, style=dotted];
m0_537 -> m0_539  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_538 -> m0_536  [color=blue, key=0, style=bold];
m0_441 -> m0_442  [key=0, style=solid];
m0_441 -> m0_445  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_442 -> m0_443  [key=0, style=solid];
m0_442 -> m0_31  [key=2, style=dotted];
m0_442 -> m0_444  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_443 -> m0_441  [color=blue, key=0, style=bold];
m0_636 -> m0_637  [key=0, style=solid];
m0_636 -> m0_640  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_636 -> m0_641  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_637 -> m0_638  [key=0, style=solid];
m0_637 -> m0_31  [key=2, style=dotted];
m0_637 -> m0_639  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_638 -> m0_636  [color=blue, key=0, style=bold];
m0_839 -> m0_840  [key=0, style=solid];
m0_839 -> m0_841  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_839 -> m0_845  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_840 -> m0_841  [key=0, style=solid];
m0_840 -> m0_844  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_840 -> m0_840  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
m0_841 -> m0_842  [key=0, style=solid];
m0_841 -> m0_31  [key=2, style=dotted];
m0_841 -> m0_843  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_842 -> m0_839  [color=blue, key=0, style=bold];
m0_907 -> m0_908  [key=0, style=solid];
m0_907 -> m0_909  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_907 -> m0_913  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_908 -> m0_909  [key=0, style=solid];
m0_908 -> m0_912  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_908 -> m0_908  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
m0_909 -> m0_910  [key=0, style=solid];
m0_909 -> m0_31  [key=2, style=dotted];
m0_909 -> m0_911  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_910 -> m0_907  [color=blue, key=0, style=bold];
m0_479 -> m0_480  [key=0, style=solid];
m0_479 -> m0_483  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_480 -> m0_481  [key=0, style=solid];
m0_480 -> m0_31  [key=2, style=dotted];
m0_480 -> m0_482  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_481 -> m0_479  [color=blue, key=0, style=bold];
m0_548 -> m0_549  [key=0, style=solid];
m0_548 -> m0_552  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_549 -> m0_550  [key=0, style=solid];
m0_549 -> m0_31  [key=2, style=dotted];
m0_549 -> m0_551  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_550 -> m0_548  [color=blue, key=0, style=bold];
m0_679 -> m0_680  [key=0, style=solid];
m0_679 -> m0_684  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_680 -> m0_681  [key=0, style=solid];
m0_680 -> m0_31  [key=2, style=dotted];
m0_680 -> m0_682  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_681 -> m0_679  [color=blue, key=0, style=bold];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_29  [color=green, key=1, label=bool, style=dashed];
m0_27 -> m0_35  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_28 -> m0_29  [color=green, key=0, style=solid];
m0_28 -> m0_33  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_28 -> m0_34  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_28 -> m0_28  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
m0_29 -> m0_30  [color=green, key=0, style=solid];
m0_29 -> m0_31  [color=green, key=2, style=dotted];
m0_29 -> m0_32  [color=green, key=1, label="lambda expression", style=dashed];
m0_30 -> m0_27  [color=blue, key=0, style=bold];
m0_825 -> m0_826  [key=0, style=solid];
m0_825 -> m0_829  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_825 -> m0_833  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_826 -> m0_827  [key=0, style=solid];
m0_826 -> m0_31  [key=2, style=dotted];
m0_826 -> m0_828  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_827 -> m0_825  [color=blue, key=0, style=bold];
m0_237 -> m0_238  [key=0, style=solid];
m0_238 -> m0_239  [key=0, style=solid];
m0_238 -> m0_41  [key=2, style=dotted];
m0_238 -> m0_42  [key=2, style=dotted];
m0_239 -> m0_237  [color=blue, key=0, style=bold];
m0_510 -> m0_511  [key=0, style=solid];
m0_510 -> m0_514  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_511 -> m0_512  [key=0, style=solid];
m0_511 -> m0_31  [key=2, style=dotted];
m0_511 -> m0_513  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_512 -> m0_510  [color=blue, key=0, style=bold];
m0_327 -> m0_328  [key=0, style=solid];
m0_327 -> m0_331  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_328 -> m0_329  [key=0, style=solid];
m0_328 -> m0_31  [key=2, style=dotted];
m0_328 -> m0_330  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_329 -> m0_327  [color=blue, key=0, style=bold];
m0_379 -> m0_380  [key=0, style=solid];
m0_379 -> m0_383  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_380 -> m0_381  [key=0, style=solid];
m0_380 -> m0_31  [key=2, style=dotted];
m0_380 -> m0_382  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_381 -> m0_379  [color=blue, key=0, style=bold];
m0_691 -> m0_692  [key=0, style=solid];
m0_691 -> m0_695  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_691 -> m0_698  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_692 -> m0_693  [key=0, style=solid];
m0_692 -> m0_31  [key=2, style=dotted];
m0_692 -> m0_694  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_693 -> m0_691  [color=blue, key=0, style=bold];
m0_212 -> m0_213  [key=0, style=solid];
m0_212 -> m0_217  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_212 -> m0_225  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_213 -> m0_214  [key=0, style=solid];
m0_213 -> m0_7  [key=2, style=dotted];
m0_213 -> m0_215  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
m0_213 -> m0_217  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
m0_213 -> m0_226  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
m0_217 -> m0_218  [key=0, style=solid];
m0_217 -> m0_220  [key=2, style=dotted];
m0_217 -> m0_224  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_214 -> m0_215  [key=0, style=solid];
m0_214 -> m0_5  [key=2, style=dotted];
m0_214 -> m0_216  [color=darkseagreen4, key=1, label=correctProvider, style=dashed];
m0_215 -> m0_216  [key=0, style=solid];
m0_215 -> m0_6  [key=2, style=dotted];
m0_215 -> m0_8  [key=2, style=dotted];
m0_215 -> m0_221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_216 -> m0_217  [key=0, style=solid];
m0_216 -> m0_219  [key=2, style=dotted];
m0_218 -> m0_212  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_5  [key=2, style=dotted];
m0_1 -> m0_3  [color=darkseagreen4, key=1, label=defaultProvider, style=dashed];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_6  [key=2, style=dotted];
m0_2 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_9  [key=2, style=dotted];
m0_4 -> m0_0  [color=blue, key=0, style=bold];
m0_44 -> m0_932  [key=0, style=solid];
m0_44 -> m0_935  [color=darkseagreen4, key=1, label="System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>", style=dashed];
m0_932 -> m0_933  [key=0, style=solid];
m0_932 -> m0_938  [key=2, style=dotted];
m0_932 -> m0_939  [key=2, style=dotted];
m0_932 -> m0_731  [key=2, style=dotted];
m0_932 -> m0_934  [color=darkseagreen4, key=1, label=storage, style=dashed];
m0_935 -> m0_936  [key=0, style=solid];
m0_935 -> m0_931  [key=2, style=dotted];
m0_933 -> m0_934  [key=0, style=solid];
m0_933 -> m0_6  [key=2, style=dotted];
m0_933 -> m0_8  [key=2, style=dotted];
m0_933 -> m0_942  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_934 -> m0_935  [key=0, style=solid];
m0_934 -> m0_940  [key=2, style=dotted];
m0_934 -> m0_936  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m0_936 -> m0_937  [key=0, style=solid];
m0_936 -> m0_941  [key=2, style=dotted];
m0_937 -> m0_44  [color=blue, key=0, style=bold];
m0_606 -> m0_607  [key=0, style=solid];
m0_606 -> m0_610  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_607 -> m0_608  [key=0, style=solid];
m0_607 -> m0_31  [key=2, style=dotted];
m0_607 -> m0_609  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_608 -> m0_606  [color=blue, key=0, style=bold];
m0_179 -> m0_180  [key=0, style=solid];
m0_179 -> m0_181  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_179 -> m0_189  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_180 -> m0_181  [key=0, style=solid];
m0_180 -> m0_184  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_180 -> m0_28  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
m0_181 -> m0_182  [key=0, style=solid];
m0_181 -> m0_31  [key=2, style=dotted];
m0_181 -> m0_183  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_182 -> m0_179  [color=blue, key=0, style=bold];
m0_524 -> m0_525  [key=0, style=solid];
m0_524 -> m0_528  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_525 -> m0_526  [key=0, style=solid];
m0_525 -> m0_31  [key=2, style=dotted];
m0_525 -> m0_527  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_526 -> m0_524  [color=blue, key=0, style=bold];
m0_704 -> m0_705  [key=0, style=solid];
m0_704 -> m0_706  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_704 -> m0_710  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_705 -> m0_706  [key=0, style=solid];
m0_705 -> m0_709  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_705 -> m0_705  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
m0_706 -> m0_707  [key=0, style=solid];
m0_706 -> m0_31  [key=2, style=dotted];
m0_706 -> m0_708  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_707 -> m0_704  [color=blue, key=0, style=bold];
m0_945 -> m0_946  [key=0, style=solid];
m0_10 -> m0_11  [key=0, style=solid];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_13  [key=2, style=dotted];
m0_12 -> m0_10  [color=blue, key=0, style=bold];
m0_20 -> m0_21  [key=0, style=solid];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_23  [key=2, style=dotted];
m0_22 -> m0_20  [color=blue, key=0, style=bold];
m0_24 -> m0_25  [key=0, style=solid];
m0_25 -> m0_26  [key=0, style=solid];
m0_26 -> m0_24  [color=blue, key=0, style=bold];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_44  [key=2, style=dotted];
m0_35 -> m0_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_41  [key=2, style=dotted];
m0_33 -> m0_42  [key=2, style=dotted];
m0_33 -> m0_43  [key=2, style=dotted];
m0_33 -> m0_35  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_33 -> m0_51  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_33 -> m0_36  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_41  [key=2, style=dotted];
m0_34 -> m0_42  [key=2, style=dotted];
m0_34 -> m0_43  [key=2, style=dotted];
m0_34 -> m0_38  [color=darkseagreen4, key=1, label=anotherJobId, style=dashed];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_34  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_32 -> m0_35  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_32 -> m0_36  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_32 -> m0_38  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_36 -> m0_37  [color=green, key=0, style=solid];
m0_36 -> m0_45  [key=2, style=dotted];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_45  [key=2, style=dotted];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_53  [key=2, style=dotted];
m0_51 -> m0_54  [key=2, style=dotted];
m0_50 -> m0_51  [key=0, style=solid];
m0_37 -> m0_38  [color=green, key=0, style=solid];
m0_37 -> m0_46  [color=green, key=2, style=dotted];
m0_37 -> m0_47  [color=green, key=2, style=dotted];
m0_37 -> m0_48  [color=green, key=2, style=dotted];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_49  [key=2, style=dotted];
m0_40 -> m0_32  [color=blue, key=0, style=bold];
m0_52 -> m0_50  [color=blue, key=0, style=bold];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_44  [key=2, style=dotted];
m0_62 -> m0_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_41  [key=2, style=dotted];
m0_60 -> m0_42  [key=2, style=dotted];
m0_60 -> m0_43  [key=2, style=dotted];
m0_60 -> m0_62  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_60 -> m0_70  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_60 -> m0_63  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_41  [key=2, style=dotted];
m0_61 -> m0_42  [key=2, style=dotted];
m0_61 -> m0_43  [key=2, style=dotted];
m0_61 -> m0_65  [color=darkseagreen4, key=1, label=anotherJobId, style=dashed];
m0_59 -> m0_60  [key=0, style=solid];
m0_59 -> m0_61  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_59 -> m0_62  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_59 -> m0_63  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_59 -> m0_65  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_45  [key=2, style=dotted];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_45  [key=2, style=dotted];
m0_70 -> m0_71  [key=0, style=solid];
m0_70 -> m0_72  [key=2, style=dotted];
m0_69 -> m0_70  [key=0, style=solid];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_49  [key=2, style=dotted];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_68  [key=2, style=dotted];
m0_67 -> m0_59  [color=blue, key=0, style=bold];
m0_71 -> m0_69  [color=blue, key=0, style=bold];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_44  [key=2, style=dotted];
m0_84 -> m0_110  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_78 -> m0_79  [key=0, style=solid];
m0_78 -> m0_41  [key=2, style=dotted];
m0_78 -> m0_42  [key=2, style=dotted];
m0_78 -> m0_43  [key=2, style=dotted];
m0_78 -> m0_84  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_78 -> m0_111  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_78 -> m0_85  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_78 -> m0_92  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_79 -> m0_80  [key=0, style=solid];
m0_79 -> m0_41  [key=2, style=dotted];
m0_79 -> m0_42  [key=2, style=dotted];
m0_79 -> m0_43  [key=2, style=dotted];
m0_79 -> m0_88  [color=darkseagreen4, key=1, label=anotherJobId, style=dashed];
m0_77 -> m0_78  [key=0, style=solid];
m0_77 -> m0_79  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_77 -> m0_84  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_77 -> m0_85  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_77 -> m0_88  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_77 -> m0_91  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_45  [key=2, style=dotted];
m0_85 -> m0_87  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_88 -> m0_89  [key=0, style=solid];
m0_88 -> m0_45  [key=2, style=dotted];
m0_88 -> m0_90  [color=darkseagreen4, key=1, label=anotherJob, style=dashed];
m0_91 -> m0_92  [key=0, style=solid];
m0_91 -> m0_41  [key=2, style=dotted];
m0_91 -> m0_42  [key=2, style=dotted];
m0_91 -> m0_93  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_91 -> m0_94  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_91 -> m0_95  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_91 -> m0_96  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_111 -> m0_112  [key=0, style=solid];
m0_111 -> m0_113  [key=2, style=dotted];
m0_92 -> m0_93  [key=0, style=solid];
m0_92 -> m0_43  [key=2, style=dotted];
m0_92 -> m0_19  [key=2, style=dotted];
m0_80 -> m0_81  [key=0, style=solid];
m0_80 -> m0_98  [key=2, style=dotted];
m0_80 -> m0_82  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_80 -> m0_83  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_80 -> m0_84  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_80 -> m0_111  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_81 -> m0_82  [key=0, style=solid];
m0_81 -> m0_6  [key=2, style=dotted];
m0_81 -> m0_8  [key=2, style=dotted];
m0_81 -> m0_100  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_82 -> m0_83  [key=0, style=solid];
m0_82 -> m0_6  [key=2, style=dotted];
m0_82 -> m0_8  [key=2, style=dotted];
m0_82 -> m0_103  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_83 -> m0_84  [key=0, style=solid];
m0_83 -> m0_6  [key=2, style=dotted];
m0_83 -> m0_99  [key=2, style=dotted];
m0_83 -> m0_8  [key=2, style=dotted];
m0_83 -> m0_106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_100 -> m0_101  [key=0, style=solid];
m0_103 -> m0_104  [key=0, style=solid];
m0_106 -> m0_107  [key=0, style=solid];
m0_110 -> m0_111  [key=0, style=solid];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_19  [key=2, style=dotted];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_68  [key=2, style=dotted];
m0_89 -> m0_90  [key=0, style=solid];
m0_89 -> m0_49  [key=2, style=dotted];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_49  [key=2, style=dotted];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_19  [key=2, style=dotted];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_19  [key=2, style=dotted];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_68  [key=2, style=dotted];
m0_96 -> m0_97  [key=0, style=solid];
m0_96 -> m0_19  [key=2, style=dotted];
m0_97 -> m0_77  [color=blue, key=0, style=bold];
m0_101 -> m0_102  [key=0, style=solid];
m0_102 -> m0_100  [color=blue, key=0, style=bold];
m0_104 -> m0_105  [key=0, style=solid];
m0_105 -> m0_103  [color=blue, key=0, style=bold];
m0_107 -> m0_108  [key=0, style=solid];
m0_107 -> m0_109  [key=2, style=dotted];
m0_108 -> m0_106  [color=blue, key=0, style=bold];
m0_112 -> m0_110  [color=blue, key=0, style=bold];
m0_124 -> m0_125  [key=0, style=solid];
m0_124 -> m0_44  [key=2, style=dotted];
m0_124 -> m0_142  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_119 -> m0_120  [key=0, style=solid];
m0_119 -> m0_41  [key=2, style=dotted];
m0_119 -> m0_42  [key=2, style=dotted];
m0_119 -> m0_43  [key=2, style=dotted];
m0_119 -> m0_124  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_119 -> m0_143  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_119 -> m0_125  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_118 -> m0_119  [key=0, style=solid];
m0_118 -> m0_124  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_118 -> m0_125  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_118 -> m0_128  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_125 -> m0_126  [key=0, style=solid];
m0_125 -> m0_45  [key=2, style=dotted];
m0_125 -> m0_127  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_128 -> m0_129  [key=0, style=solid];
m0_128 -> m0_41  [key=2, style=dotted];
m0_128 -> m0_42  [key=2, style=dotted];
m0_128 -> m0_130  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_128 -> m0_131  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_120 -> m0_121  [key=0, style=solid];
m0_120 -> m0_98  [key=2, style=dotted];
m0_120 -> m0_122  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_120 -> m0_123  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_120 -> m0_124  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_120 -> m0_143  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_143 -> m0_144  [key=0, style=solid];
m0_143 -> m0_113  [key=2, style=dotted];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_6  [key=2, style=dotted];
m0_121 -> m0_8  [key=2, style=dotted];
m0_121 -> m0_133  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_122 -> m0_123  [key=0, style=solid];
m0_122 -> m0_6  [key=2, style=dotted];
m0_122 -> m0_8  [key=2, style=dotted];
m0_122 -> m0_136  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_123 -> m0_124  [key=0, style=solid];
m0_123 -> m0_6  [key=2, style=dotted];
m0_123 -> m0_8  [key=2, style=dotted];
m0_123 -> m0_139  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_133 -> m0_134  [key=0, style=solid];
m0_136 -> m0_137  [key=0, style=solid];
m0_139 -> m0_140  [key=0, style=solid];
m0_142 -> m0_143  [key=0, style=solid];
m0_126 -> m0_127  [key=0, style=solid];
m0_126 -> m0_19  [key=2, style=dotted];
m0_127 -> m0_128  [key=0, style=solid];
m0_127 -> m0_68  [key=2, style=dotted];
m0_129 -> m0_130  [key=0, style=solid];
m0_129 -> m0_19  [key=2, style=dotted];
m0_130 -> m0_131  [key=0, style=solid];
m0_130 -> m0_19  [key=2, style=dotted];
m0_131 -> m0_132  [key=0, style=solid];
m0_131 -> m0_19  [key=2, style=dotted];
m0_132 -> m0_118  [color=blue, key=0, style=bold];
m0_134 -> m0_135  [key=0, style=solid];
m0_135 -> m0_133  [color=blue, key=0, style=bold];
m0_137 -> m0_138  [key=0, style=solid];
m0_138 -> m0_136  [color=blue, key=0, style=bold];
m0_140 -> m0_141  [key=0, style=solid];
m0_140 -> m0_109  [key=2, style=dotted];
m0_141 -> m0_139  [color=blue, key=0, style=bold];
m0_144 -> m0_142  [color=blue, key=0, style=bold];
m0_155 -> m0_156  [key=0, style=solid];
m0_155 -> m0_44  [key=2, style=dotted];
m0_155 -> m0_175  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_150 -> m0_151  [key=0, style=solid];
m0_150 -> m0_41  [key=2, style=dotted];
m0_150 -> m0_42  [key=2, style=dotted];
m0_150 -> m0_43  [key=2, style=dotted];
m0_150 -> m0_155  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_150 -> m0_176  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_150 -> m0_156  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_150 -> m0_160  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_149 -> m0_150  [key=0, style=solid];
m0_149 -> m0_155  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_149 -> m0_156  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_149 -> m0_159  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_156 -> m0_157  [key=0, style=solid];
m0_156 -> m0_45  [key=2, style=dotted];
m0_156 -> m0_158  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_159 -> m0_160  [key=0, style=solid];
m0_159 -> m0_41  [key=2, style=dotted];
m0_159 -> m0_42  [key=2, style=dotted];
m0_159 -> m0_161  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_159 -> m0_162  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_159 -> m0_163  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_159 -> m0_164  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_151 -> m0_152  [key=0, style=solid];
m0_151 -> m0_98  [key=2, style=dotted];
m0_151 -> m0_153  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_151 -> m0_154  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_151 -> m0_155  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_151 -> m0_176  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_176 -> m0_177  [key=0, style=solid];
m0_176 -> m0_178  [key=2, style=dotted];
m0_160 -> m0_161  [key=0, style=solid];
m0_160 -> m0_43  [key=2, style=dotted];
m0_160 -> m0_19  [key=2, style=dotted];
m0_152 -> m0_153  [key=0, style=solid];
m0_152 -> m0_6  [key=2, style=dotted];
m0_152 -> m0_8  [key=2, style=dotted];
m0_152 -> m0_166  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_153 -> m0_154  [key=0, style=solid];
m0_153 -> m0_6  [key=2, style=dotted];
m0_153 -> m0_8  [key=2, style=dotted];
m0_153 -> m0_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_154 -> m0_155  [key=0, style=solid];
m0_154 -> m0_6  [key=2, style=dotted];
m0_154 -> m0_99  [key=2, style=dotted];
m0_154 -> m0_8  [key=2, style=dotted];
m0_154 -> m0_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_166 -> m0_167  [key=0, style=solid];
m0_169 -> m0_170  [key=0, style=solid];
m0_172 -> m0_173  [key=0, style=solid];
m0_175 -> m0_176  [key=0, style=solid];
m0_157 -> m0_158  [key=0, style=solid];
m0_157 -> m0_49  [key=2, style=dotted];
m0_158 -> m0_159  [key=0, style=solid];
m0_158 -> m0_49  [key=2, style=dotted];
m0_161 -> m0_162  [key=0, style=solid];
m0_161 -> m0_19  [key=2, style=dotted];
m0_162 -> m0_163  [key=0, style=solid];
m0_162 -> m0_19  [key=2, style=dotted];
m0_163 -> m0_164  [key=0, style=solid];
m0_163 -> m0_68  [key=2, style=dotted];
m0_164 -> m0_165  [key=0, style=solid];
m0_164 -> m0_19  [key=2, style=dotted];
m0_165 -> m0_149  [color=blue, key=0, style=bold];
m0_167 -> m0_168  [key=0, style=solid];
m0_168 -> m0_166  [color=blue, key=0, style=bold];
m0_170 -> m0_171  [key=0, style=solid];
m0_171 -> m0_169  [color=blue, key=0, style=bold];
m0_173 -> m0_174  [key=0, style=solid];
m0_173 -> m0_109  [key=2, style=dotted];
m0_174 -> m0_172  [color=blue, key=0, style=bold];
m0_177 -> m0_175  [color=blue, key=0, style=bold];
m0_189 -> m0_190  [key=0, style=solid];
m0_189 -> m0_44  [key=2, style=dotted];
m0_189 -> m0_209  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_184 -> m0_185  [key=0, style=solid];
m0_184 -> m0_41  [key=2, style=dotted];
m0_184 -> m0_42  [key=2, style=dotted];
m0_184 -> m0_43  [key=2, style=dotted];
m0_184 -> m0_189  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_184 -> m0_210  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_184 -> m0_190  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_184 -> m0_194  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_183 -> m0_184  [key=0, style=solid];
m0_183 -> m0_189  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_183 -> m0_190  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_183 -> m0_193  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_190 -> m0_191  [key=0, style=solid];
m0_190 -> m0_45  [key=2, style=dotted];
m0_190 -> m0_192  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_193 -> m0_194  [key=0, style=solid];
m0_193 -> m0_41  [key=2, style=dotted];
m0_193 -> m0_42  [key=2, style=dotted];
m0_193 -> m0_195  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_193 -> m0_196  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_193 -> m0_197  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_193 -> m0_198  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_185 -> m0_186  [key=0, style=solid];
m0_185 -> m0_98  [key=2, style=dotted];
m0_185 -> m0_187  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_185 -> m0_188  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_185 -> m0_189  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_185 -> m0_210  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_210 -> m0_211  [key=0, style=solid];
m0_210 -> m0_178  [key=2, style=dotted];
m0_194 -> m0_195  [key=0, style=solid];
m0_194 -> m0_43  [key=2, style=dotted];
m0_194 -> m0_19  [key=2, style=dotted];
m0_186 -> m0_187  [key=0, style=solid];
m0_186 -> m0_6  [key=2, style=dotted];
m0_186 -> m0_8  [key=2, style=dotted];
m0_186 -> m0_200  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_187 -> m0_188  [key=0, style=solid];
m0_187 -> m0_6  [key=2, style=dotted];
m0_187 -> m0_8  [key=2, style=dotted];
m0_187 -> m0_203  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_188 -> m0_189  [key=0, style=solid];
m0_188 -> m0_6  [key=2, style=dotted];
m0_188 -> m0_8  [key=2, style=dotted];
m0_188 -> m0_206  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_200 -> m0_201  [key=0, style=solid];
m0_203 -> m0_204  [key=0, style=solid];
m0_206 -> m0_207  [key=0, style=solid];
m0_209 -> m0_210  [key=0, style=solid];
m0_191 -> m0_192  [key=0, style=solid];
m0_191 -> m0_49  [key=2, style=dotted];
m0_192 -> m0_193  [key=0, style=solid];
m0_192 -> m0_49  [key=2, style=dotted];
m0_195 -> m0_196  [key=0, style=solid];
m0_195 -> m0_19  [key=2, style=dotted];
m0_196 -> m0_197  [key=0, style=solid];
m0_196 -> m0_19  [key=2, style=dotted];
m0_197 -> m0_198  [key=0, style=solid];
m0_197 -> m0_68  [key=2, style=dotted];
m0_198 -> m0_199  [key=0, style=solid];
m0_198 -> m0_19  [key=2, style=dotted];
m0_199 -> m0_183  [color=blue, key=0, style=bold];
m0_201 -> m0_202  [key=0, style=solid];
m0_202 -> m0_200  [color=blue, key=0, style=bold];
m0_204 -> m0_205  [key=0, style=solid];
m0_205 -> m0_203  [color=blue, key=0, style=bold];
m0_207 -> m0_208  [key=0, style=solid];
m0_207 -> m0_109  [key=2, style=dotted];
m0_208 -> m0_206  [color=blue, key=0, style=bold];
m0_211 -> m0_209  [color=blue, key=0, style=bold];
m0_225 -> m0_226  [key=0, style=solid];
m0_225 -> m0_44  [key=2, style=dotted];
m0_225 -> m0_229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_226 -> m0_227  [key=0, style=solid];
m0_226 -> m0_228  [key=2, style=dotted];
m0_226 -> m0_233  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_221 -> m0_222  [key=0, style=solid];
m0_224 -> m0_225  [key=0, style=solid];
m0_222 -> m0_223  [key=0, style=solid];
m0_222 -> m0_13  [key=2, style=dotted];
m0_223 -> m0_221  [color=blue, key=0, style=bold];
m0_229 -> m0_230  [key=0, style=solid];
m0_227 -> m0_224  [color=blue, key=0, style=bold];
m0_233 -> m0_234  [key=0, style=solid];
m0_230 -> m0_231  [key=0, style=solid];
m0_230 -> m0_232  [key=2, style=dotted];
m0_231 -> m0_229  [color=blue, key=0, style=bold];
m0_234 -> m0_235  [key=0, style=solid];
m0_234 -> m0_18  [key=2, style=dotted];
m0_234 -> m0_236  [key=2, style=dotted];
m0_235 -> m0_233  [color=blue, key=0, style=bold];
m0_244 -> m0_245  [key=0, style=solid];
m0_244 -> m0_44  [key=2, style=dotted];
m0_244 -> m0_250  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_243 -> m0_244  [key=0, style=solid];
m0_243 -> m0_245  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_245 -> m0_246  [key=0, style=solid];
m0_245 -> m0_41  [key=2, style=dotted];
m0_245 -> m0_42  [key=2, style=dotted];
m0_245 -> m0_247  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_245 -> m0_248  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_250 -> m0_251  [key=0, style=solid];
m0_246 -> m0_247  [key=0, style=solid];
m0_246 -> m0_19  [key=2, style=dotted];
m0_247 -> m0_248  [key=0, style=solid];
m0_247 -> m0_19  [key=2, style=dotted];
m0_248 -> m0_249  [key=0, style=solid];
m0_248 -> m0_19  [key=2, style=dotted];
m0_249 -> m0_243  [color=blue, key=0, style=bold];
m0_251 -> m0_252  [key=0, style=solid];
m0_251 -> m0_253  [key=2, style=dotted];
m0_252 -> m0_250  [color=blue, key=0, style=bold];
m0_258 -> m0_259  [key=0, style=solid];
m0_258 -> m0_44  [key=2, style=dotted];
m0_258 -> m0_268  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_257 -> m0_258  [key=0, style=solid];
m0_257 -> m0_259  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_259 -> m0_260  [key=0, style=solid];
m0_259 -> m0_41  [key=2, style=dotted];
m0_259 -> m0_42  [key=2, style=dotted];
m0_259 -> m0_261  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_259 -> m0_262  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_259 -> m0_263  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_268 -> m0_269  [key=0, style=solid];
m0_260 -> m0_261  [key=0, style=solid];
m0_260 -> m0_19  [key=2, style=dotted];
m0_261 -> m0_262  [key=0, style=solid];
m0_261 -> m0_19  [key=2, style=dotted];
m0_262 -> m0_263  [key=0, style=solid];
m0_262 -> m0_68  [key=2, style=dotted];
m0_263 -> m0_264  [key=0, style=solid];
m0_263 -> m0_265  [color=darkseagreen4, key=1, label=expireAt, style=dashed];
m0_264 -> m0_265  [key=0, style=solid];
m0_264 -> m0_267  [key=2, style=dotted];
m0_264 -> m0_48  [key=2, style=dotted];
m0_265 -> m0_266  [key=0, style=solid];
m0_265 -> m0_267  [key=2, style=dotted];
m0_265 -> m0_48  [key=2, style=dotted];
m0_266 -> m0_257  [color=blue, key=0, style=bold];
m0_269 -> m0_270  [key=0, style=solid];
m0_269 -> m0_53  [key=2, style=dotted];
m0_269 -> m0_271  [key=2, style=dotted];
m0_270 -> m0_268  [color=blue, key=0, style=bold];
m0_276 -> m0_277  [key=0, style=solid];
m0_276 -> m0_44  [key=2, style=dotted];
m0_276 -> m0_280  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_275 -> m0_276  [key=0, style=solid];
m0_275 -> m0_277  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_277 -> m0_278  [key=0, style=solid];
m0_277 -> m0_18  [key=2, style=dotted];
m0_277 -> m0_42  [key=2, style=dotted];
m0_280 -> m0_281  [key=0, style=solid];
m0_280 -> m0_282  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_278 -> m0_279  [key=0, style=solid];
m0_278 -> m0_19  [key=2, style=dotted];
m0_279 -> m0_275  [color=blue, key=0, style=bold];
m0_281 -> m0_282  [key=0, style=solid];
m0_281 -> m0_253  [key=2, style=dotted];
m0_282 -> m0_283  [key=0, style=solid];
m0_282 -> m0_253  [key=2, style=dotted];
m0_283 -> m0_280  [color=blue, key=0, style=bold];
m0_288 -> m0_289  [key=0, style=solid];
m0_288 -> m0_44  [key=2, style=dotted];
m0_288 -> m0_294  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_287 -> m0_288  [key=0, style=solid];
m0_287 -> m0_289  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_289 -> m0_290  [key=0, style=solid];
m0_289 -> m0_41  [key=2, style=dotted];
m0_289 -> m0_42  [key=2, style=dotted];
m0_289 -> m0_291  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_289 -> m0_292  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_294 -> m0_295  [key=0, style=solid];
m0_290 -> m0_291  [key=0, style=solid];
m0_290 -> m0_19  [key=2, style=dotted];
m0_291 -> m0_292  [key=0, style=solid];
m0_291 -> m0_19  [key=2, style=dotted];
m0_292 -> m0_293  [key=0, style=solid];
m0_292 -> m0_19  [key=2, style=dotted];
m0_293 -> m0_287  [color=blue, key=0, style=bold];
m0_295 -> m0_296  [key=0, style=solid];
m0_295 -> m0_297  [key=2, style=dotted];
m0_296 -> m0_294  [color=blue, key=0, style=bold];
m0_302 -> m0_303  [key=0, style=solid];
m0_302 -> m0_44  [key=2, style=dotted];
m0_302 -> m0_311  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_301 -> m0_302  [key=0, style=solid];
m0_301 -> m0_303  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_303 -> m0_304  [key=0, style=solid];
m0_303 -> m0_41  [key=2, style=dotted];
m0_303 -> m0_42  [key=2, style=dotted];
m0_303 -> m0_305  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_303 -> m0_306  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_303 -> m0_307  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_311 -> m0_312  [key=0, style=solid];
m0_304 -> m0_305  [key=0, style=solid];
m0_304 -> m0_19  [key=2, style=dotted];
m0_305 -> m0_306  [key=0, style=solid];
m0_305 -> m0_19  [key=2, style=dotted];
m0_306 -> m0_307  [key=0, style=solid];
m0_306 -> m0_68  [key=2, style=dotted];
m0_307 -> m0_308  [key=0, style=solid];
m0_307 -> m0_309  [color=darkseagreen4, key=1, label=expireAt, style=dashed];
m0_308 -> m0_309  [key=0, style=solid];
m0_308 -> m0_267  [key=2, style=dotted];
m0_308 -> m0_48  [key=2, style=dotted];
m0_309 -> m0_310  [key=0, style=solid];
m0_309 -> m0_267  [key=2, style=dotted];
m0_309 -> m0_48  [key=2, style=dotted];
m0_310 -> m0_301  [color=blue, key=0, style=bold];
m0_312 -> m0_313  [key=0, style=solid];
m0_312 -> m0_53  [key=2, style=dotted];
m0_312 -> m0_314  [key=2, style=dotted];
m0_313 -> m0_311  [color=blue, key=0, style=bold];
m0_319 -> m0_320  [key=0, style=solid];
m0_319 -> m0_44  [key=2, style=dotted];
m0_319 -> m0_323  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_318 -> m0_319  [key=0, style=solid];
m0_318 -> m0_320  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_320 -> m0_321  [key=0, style=solid];
m0_320 -> m0_18  [key=2, style=dotted];
m0_320 -> m0_42  [key=2, style=dotted];
m0_323 -> m0_324  [key=0, style=solid];
m0_323 -> m0_325  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_321 -> m0_322  [key=0, style=solid];
m0_321 -> m0_19  [key=2, style=dotted];
m0_322 -> m0_318  [color=blue, key=0, style=bold];
m0_324 -> m0_325  [key=0, style=solid];
m0_324 -> m0_297  [key=2, style=dotted];
m0_325 -> m0_326  [key=0, style=solid];
m0_325 -> m0_297  [key=2, style=dotted];
m0_326 -> m0_323  [color=blue, key=0, style=bold];
m0_331 -> m0_332  [key=0, style=solid];
m0_331 -> m0_44  [key=2, style=dotted];
m0_331 -> m0_337  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_330 -> m0_331  [key=0, style=solid];
m0_330 -> m0_332  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_332 -> m0_333  [key=0, style=solid];
m0_332 -> m0_41  [key=2, style=dotted];
m0_332 -> m0_42  [key=2, style=dotted];
m0_332 -> m0_334  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_332 -> m0_335  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_337 -> m0_338  [key=0, style=solid];
m0_333 -> m0_334  [key=0, style=solid];
m0_333 -> m0_19  [key=2, style=dotted];
m0_334 -> m0_335  [key=0, style=solid];
m0_334 -> m0_19  [key=2, style=dotted];
m0_335 -> m0_336  [key=0, style=solid];
m0_335 -> m0_19  [key=2, style=dotted];
m0_336 -> m0_330  [color=blue, key=0, style=bold];
m0_338 -> m0_339  [key=0, style=solid];
m0_338 -> m0_340  [key=2, style=dotted];
m0_339 -> m0_337  [color=blue, key=0, style=bold];
m0_345 -> m0_346  [key=0, style=solid];
m0_345 -> m0_44  [key=2, style=dotted];
m0_345 -> m0_349  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_344 -> m0_345  [key=0, style=solid];
m0_344 -> m0_346  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_346 -> m0_347  [key=0, style=solid];
m0_346 -> m0_18  [key=2, style=dotted];
m0_346 -> m0_42  [key=2, style=dotted];
m0_349 -> m0_350  [key=0, style=solid];
m0_349 -> m0_351  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_347 -> m0_348  [key=0, style=solid];
m0_347 -> m0_19  [key=2, style=dotted];
m0_348 -> m0_344  [color=blue, key=0, style=bold];
m0_350 -> m0_351  [key=0, style=solid];
m0_350 -> m0_340  [key=2, style=dotted];
m0_351 -> m0_352  [key=0, style=solid];
m0_351 -> m0_340  [key=2, style=dotted];
m0_352 -> m0_349  [color=blue, key=0, style=bold];
m0_357 -> m0_358  [key=0, style=solid];
m0_357 -> m0_44  [key=2, style=dotted];
m0_357 -> m0_361  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_356 -> m0_357  [key=0, style=solid];
m0_356 -> m0_358  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_358 -> m0_359  [key=0, style=solid];
m0_358 -> m0_18  [key=2, style=dotted];
m0_358 -> m0_42  [key=2, style=dotted];
m0_361 -> m0_362  [key=0, style=solid];
m0_361 -> m0_363  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_359 -> m0_360  [key=0, style=solid];
m0_359 -> m0_19  [key=2, style=dotted];
m0_360 -> m0_356  [color=blue, key=0, style=bold];
m0_362 -> m0_363  [key=0, style=solid];
m0_362 -> m0_340  [key=2, style=dotted];
m0_363 -> m0_364  [key=0, style=solid];
m0_363 -> m0_340  [key=2, style=dotted];
m0_364 -> m0_361  [color=blue, key=0, style=bold];
m0_369 -> m0_370  [key=0, style=solid];
m0_369 -> m0_44  [key=2, style=dotted];
m0_369 -> m0_375  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_368 -> m0_369  [key=0, style=solid];
m0_368 -> m0_370  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_370 -> m0_371  [key=0, style=solid];
m0_370 -> m0_41  [key=2, style=dotted];
m0_370 -> m0_42  [key=2, style=dotted];
m0_370 -> m0_372  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_370 -> m0_373  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_375 -> m0_376  [key=0, style=solid];
m0_371 -> m0_372  [key=0, style=solid];
m0_371 -> m0_19  [key=2, style=dotted];
m0_372 -> m0_373  [key=0, style=solid];
m0_372 -> m0_19  [key=2, style=dotted];
m0_373 -> m0_374  [key=0, style=solid];
m0_373 -> m0_19  [key=2, style=dotted];
m0_374 -> m0_368  [color=blue, key=0, style=bold];
m0_376 -> m0_377  [key=0, style=solid];
m0_376 -> m0_378  [key=2, style=dotted];
m0_377 -> m0_375  [color=blue, key=0, style=bold];
m0_383 -> m0_384  [key=0, style=solid];
m0_383 -> m0_44  [key=2, style=dotted];
m0_383 -> m0_387  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_382 -> m0_383  [key=0, style=solid];
m0_382 -> m0_384  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_384 -> m0_385  [key=0, style=solid];
m0_384 -> m0_41  [key=2, style=dotted];
m0_384 -> m0_42  [key=2, style=dotted];
m0_387 -> m0_388  [key=0, style=solid];
m0_387 -> m0_389  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_385 -> m0_386  [key=0, style=solid];
m0_385 -> m0_19  [key=2, style=dotted];
m0_386 -> m0_382  [color=blue, key=0, style=bold];
m0_388 -> m0_389  [key=0, style=solid];
m0_388 -> m0_340  [key=2, style=dotted];
m0_389 -> m0_390  [key=0, style=solid];
m0_389 -> m0_378  [key=2, style=dotted];
m0_390 -> m0_387  [color=blue, key=0, style=bold];
m0_395 -> m0_396  [key=0, style=solid];
m0_395 -> m0_44  [key=2, style=dotted];
m0_395 -> m0_399  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_394 -> m0_395  [key=0, style=solid];
m0_394 -> m0_396  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_396 -> m0_397  [key=0, style=solid];
m0_396 -> m0_18  [key=2, style=dotted];
m0_396 -> m0_42  [key=2, style=dotted];
m0_399 -> m0_400  [key=0, style=solid];
m0_399 -> m0_401  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_397 -> m0_398  [key=0, style=solid];
m0_397 -> m0_19  [key=2, style=dotted];
m0_398 -> m0_394  [color=blue, key=0, style=bold];
m0_400 -> m0_401  [key=0, style=solid];
m0_400 -> m0_340  [key=2, style=dotted];
m0_401 -> m0_402  [key=0, style=solid];
m0_401 -> m0_403  [key=2, style=dotted];
m0_402 -> m0_399  [color=blue, key=0, style=bold];
m0_408 -> m0_409  [key=0, style=solid];
m0_408 -> m0_44  [key=2, style=dotted];
m0_408 -> m0_412  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_407 -> m0_408  [key=0, style=solid];
m0_407 -> m0_409  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_409 -> m0_410  [key=0, style=solid];
m0_409 -> m0_18  [key=2, style=dotted];
m0_409 -> m0_42  [key=2, style=dotted];
m0_412 -> m0_413  [key=0, style=solid];
m0_412 -> m0_414  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_410 -> m0_411  [key=0, style=solid];
m0_410 -> m0_19  [key=2, style=dotted];
m0_411 -> m0_407  [color=blue, key=0, style=bold];
m0_413 -> m0_414  [key=0, style=solid];
m0_413 -> m0_340  [key=2, style=dotted];
m0_414 -> m0_415  [key=0, style=solid];
m0_414 -> m0_403  [key=2, style=dotted];
m0_415 -> m0_412  [color=blue, key=0, style=bold];
m0_420 -> m0_421  [key=0, style=solid];
m0_420 -> m0_44  [key=2, style=dotted];
m0_420 -> m0_424  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_419 -> m0_420  [key=0, style=solid];
m0_419 -> m0_421  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_421 -> m0_422  [key=0, style=solid];
m0_421 -> m0_18  [key=2, style=dotted];
m0_421 -> m0_42  [key=2, style=dotted];
m0_424 -> m0_425  [key=0, style=solid];
m0_424 -> m0_426  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_422 -> m0_423  [key=0, style=solid];
m0_422 -> m0_19  [key=2, style=dotted];
m0_423 -> m0_419  [color=blue, key=0, style=bold];
m0_425 -> m0_426  [key=0, style=solid];
m0_425 -> m0_340  [key=2, style=dotted];
m0_426 -> m0_427  [key=0, style=solid];
m0_426 -> m0_403  [key=2, style=dotted];
m0_427 -> m0_424  [color=blue, key=0, style=bold];
m0_432 -> m0_433  [key=0, style=solid];
m0_432 -> m0_44  [key=2, style=dotted];
m0_432 -> m0_437  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_431 -> m0_432  [key=0, style=solid];
m0_431 -> m0_433  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_433 -> m0_434  [key=0, style=solid];
m0_433 -> m0_41  [key=2, style=dotted];
m0_433 -> m0_42  [key=2, style=dotted];
m0_433 -> m0_435  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_437 -> m0_438  [key=0, style=solid];
m0_434 -> m0_435  [key=0, style=solid];
m0_434 -> m0_19  [key=2, style=dotted];
m0_435 -> m0_436  [key=0, style=solid];
m0_435 -> m0_19  [key=2, style=dotted];
m0_436 -> m0_431  [color=blue, key=0, style=bold];
m0_438 -> m0_439  [key=0, style=solid];
m0_438 -> m0_440  [key=2, style=dotted];
m0_439 -> m0_437  [color=blue, key=0, style=bold];
m0_445 -> m0_446  [key=0, style=solid];
m0_445 -> m0_44  [key=2, style=dotted];
m0_445 -> m0_449  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_444 -> m0_445  [key=0, style=solid];
m0_444 -> m0_446  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_446 -> m0_447  [key=0, style=solid];
m0_446 -> m0_18  [key=2, style=dotted];
m0_446 -> m0_42  [key=2, style=dotted];
m0_449 -> m0_450  [key=0, style=solid];
m0_449 -> m0_451  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_447 -> m0_448  [key=0, style=solid];
m0_447 -> m0_19  [key=2, style=dotted];
m0_448 -> m0_444  [color=blue, key=0, style=bold];
m0_450 -> m0_451  [key=0, style=solid];
m0_450 -> m0_440  [key=2, style=dotted];
m0_451 -> m0_452  [key=0, style=solid];
m0_451 -> m0_440  [key=2, style=dotted];
m0_452 -> m0_449  [color=blue, key=0, style=bold];
m0_457 -> m0_458  [key=0, style=solid];
m0_457 -> m0_44  [key=2, style=dotted];
m0_457 -> m0_461  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_456 -> m0_457  [key=0, style=solid];
m0_456 -> m0_458  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_458 -> m0_459  [key=0, style=solid];
m0_458 -> m0_18  [key=2, style=dotted];
m0_458 -> m0_42  [key=2, style=dotted];
m0_461 -> m0_462  [key=0, style=solid];
m0_461 -> m0_463  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_461 -> m0_464  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_459 -> m0_460  [key=0, style=solid];
m0_459 -> m0_19  [key=2, style=dotted];
m0_460 -> m0_456  [color=blue, key=0, style=bold];
m0_462 -> m0_463  [key=0, style=solid];
m0_462 -> m0_440  [key=2, style=dotted];
m0_463 -> m0_464  [key=0, style=solid];
m0_463 -> m0_440  [key=2, style=dotted];
m0_464 -> m0_465  [key=0, style=solid];
m0_464 -> m0_466  [key=2, style=dotted];
m0_465 -> m0_461  [color=blue, key=0, style=bold];
m0_471 -> m0_472  [key=0, style=solid];
m0_471 -> m0_44  [key=2, style=dotted];
m0_471 -> m0_475  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_470 -> m0_471  [key=0, style=solid];
m0_470 -> m0_472  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_472 -> m0_473  [key=0, style=solid];
m0_472 -> m0_18  [key=2, style=dotted];
m0_472 -> m0_42  [key=2, style=dotted];
m0_475 -> m0_476  [key=0, style=solid];
m0_475 -> m0_477  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_473 -> m0_474  [key=0, style=solid];
m0_473 -> m0_19  [key=2, style=dotted];
m0_474 -> m0_470  [color=blue, key=0, style=bold];
m0_476 -> m0_477  [key=0, style=solid];
m0_476 -> m0_440  [key=2, style=dotted];
m0_477 -> m0_478  [key=0, style=solid];
m0_477 -> m0_466  [key=2, style=dotted];
m0_478 -> m0_475  [color=blue, key=0, style=bold];
m0_483 -> m0_484  [key=0, style=solid];
m0_483 -> m0_44  [key=2, style=dotted];
m0_483 -> m0_487  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_482 -> m0_483  [key=0, style=solid];
m0_482 -> m0_484  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_484 -> m0_485  [key=0, style=solid];
m0_484 -> m0_18  [key=2, style=dotted];
m0_484 -> m0_42  [key=2, style=dotted];
m0_487 -> m0_488  [key=0, style=solid];
m0_487 -> m0_489  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_485 -> m0_486  [key=0, style=solid];
m0_485 -> m0_19  [key=2, style=dotted];
m0_486 -> m0_482  [color=blue, key=0, style=bold];
m0_488 -> m0_489  [key=0, style=solid];
m0_488 -> m0_440  [key=2, style=dotted];
m0_489 -> m0_490  [key=0, style=solid];
m0_489 -> m0_466  [key=2, style=dotted];
m0_490 -> m0_487  [color=blue, key=0, style=bold];
m0_495 -> m0_496  [key=0, style=solid];
m0_495 -> m0_44  [key=2, style=dotted];
m0_495 -> m0_502  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_494 -> m0_495  [key=0, style=solid];
m0_494 -> m0_496  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_496 -> m0_497  [key=0, style=solid];
m0_496 -> m0_41  [key=2, style=dotted];
m0_496 -> m0_501  [key=2, style=dotted];
m0_496 -> m0_498  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_496 -> m0_499  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_502 -> m0_503  [key=0, style=solid];
m0_502 -> m0_504  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_502 -> m0_505  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_502 -> m0_506  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_502 -> m0_507  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_497 -> m0_498  [key=0, style=solid];
m0_497 -> m0_19  [key=2, style=dotted];
m0_498 -> m0_499  [key=0, style=solid];
m0_498 -> m0_19  [key=2, style=dotted];
m0_499 -> m0_500  [key=0, style=solid];
m0_499 -> m0_19  [key=2, style=dotted];
m0_500 -> m0_494  [color=blue, key=0, style=bold];
m0_503 -> m0_504  [key=0, style=solid];
m0_503 -> m0_440  [key=2, style=dotted];
m0_504 -> m0_505  [key=0, style=solid];
m0_504 -> m0_440  [key=2, style=dotted];
m0_505 -> m0_506  [key=0, style=solid];
m0_505 -> m0_440  [key=2, style=dotted];
m0_506 -> m0_507  [key=0, style=solid];
m0_506 -> m0_440  [key=2, style=dotted];
m0_507 -> m0_508  [key=0, style=solid];
m0_507 -> m0_509  [key=2, style=dotted];
m0_508 -> m0_502  [color=blue, key=0, style=bold];
m0_514 -> m0_515  [key=0, style=solid];
m0_514 -> m0_44  [key=2, style=dotted];
m0_514 -> m0_518  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_513 -> m0_514  [key=0, style=solid];
m0_513 -> m0_515  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_515 -> m0_516  [key=0, style=solid];
m0_515 -> m0_18  [key=2, style=dotted];
m0_515 -> m0_42  [key=2, style=dotted];
m0_518 -> m0_519  [key=0, style=solid];
m0_518 -> m0_520  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_518 -> m0_521  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_518 -> m0_522  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_516 -> m0_517  [key=0, style=solid];
m0_516 -> m0_19  [key=2, style=dotted];
m0_517 -> m0_513  [color=blue, key=0, style=bold];
m0_519 -> m0_520  [key=0, style=solid];
m0_519 -> m0_440  [key=2, style=dotted];
m0_520 -> m0_521  [key=0, style=solid];
m0_520 -> m0_440  [key=2, style=dotted];
m0_521 -> m0_522  [key=0, style=solid];
m0_521 -> m0_440  [key=2, style=dotted];
m0_522 -> m0_523  [key=0, style=solid];
m0_522 -> m0_509  [key=2, style=dotted];
m0_523 -> m0_518  [color=blue, key=0, style=bold];
m0_528 -> m0_529  [key=0, style=solid];
m0_528 -> m0_44  [key=2, style=dotted];
m0_528 -> m0_532  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_527 -> m0_528  [key=0, style=solid];
m0_527 -> m0_529  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_529 -> m0_530  [key=0, style=solid];
m0_529 -> m0_18  [key=2, style=dotted];
m0_529 -> m0_42  [key=2, style=dotted];
m0_532 -> m0_533  [key=0, style=solid];
m0_532 -> m0_534  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_530 -> m0_531  [key=0, style=solid];
m0_530 -> m0_19  [key=2, style=dotted];
m0_531 -> m0_527  [color=blue, key=0, style=bold];
m0_533 -> m0_534  [key=0, style=solid];
m0_533 -> m0_440  [key=2, style=dotted];
m0_534 -> m0_535  [key=0, style=solid];
m0_534 -> m0_509  [key=2, style=dotted];
m0_535 -> m0_532  [color=blue, key=0, style=bold];
m0_540 -> m0_541  [key=0, style=solid];
m0_540 -> m0_44  [key=2, style=dotted];
m0_540 -> m0_544  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_539 -> m0_540  [key=0, style=solid];
m0_539 -> m0_541  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_541 -> m0_542  [key=0, style=solid];
m0_541 -> m0_18  [key=2, style=dotted];
m0_541 -> m0_42  [key=2, style=dotted];
m0_544 -> m0_545  [key=0, style=solid];
m0_544 -> m0_546  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_542 -> m0_543  [key=0, style=solid];
m0_542 -> m0_19  [key=2, style=dotted];
m0_543 -> m0_539  [color=blue, key=0, style=bold];
m0_545 -> m0_546  [key=0, style=solid];
m0_545 -> m0_440  [key=2, style=dotted];
m0_546 -> m0_547  [key=0, style=solid];
m0_546 -> m0_509  [key=2, style=dotted];
m0_547 -> m0_544  [color=blue, key=0, style=bold];
m0_552 -> m0_553  [key=0, style=solid];
m0_552 -> m0_44  [key=2, style=dotted];
m0_552 -> m0_556  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_551 -> m0_552  [key=0, style=solid];
m0_551 -> m0_553  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_553 -> m0_554  [key=0, style=solid];
m0_553 -> m0_18  [key=2, style=dotted];
m0_553 -> m0_42  [key=2, style=dotted];
m0_556 -> m0_557  [key=0, style=solid];
m0_556 -> m0_558  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_554 -> m0_555  [key=0, style=solid];
m0_554 -> m0_19  [key=2, style=dotted];
m0_555 -> m0_551  [color=blue, key=0, style=bold];
m0_557 -> m0_558  [key=0, style=solid];
m0_557 -> m0_440  [key=2, style=dotted];
m0_558 -> m0_559  [key=0, style=solid];
m0_558 -> m0_509  [key=2, style=dotted];
m0_559 -> m0_556  [color=blue, key=0, style=bold];
m0_564 -> m0_565  [key=0, style=solid];
m0_564 -> m0_18  [key=2, style=dotted];
m0_564 -> m0_567  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_568 -> m0_569  [key=0, style=solid];
m0_568 -> m0_44  [key=2, style=dotted];
m0_568 -> m0_570  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_563 -> m0_564  [key=0, style=solid];
m0_563 -> m0_568  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_565 -> m0_566  [key=0, style=solid];
m0_565 -> m0_19  [key=2, style=dotted];
m0_567 -> m0_568  [key=0, style=solid];
m0_566 -> m0_563  [color=blue, key=0, style=bold];
m0_569 -> m0_567  [color=blue, key=0, style=bold];
m0_570 -> m0_571  [key=0, style=solid];
m0_571 -> m0_572  [key=0, style=solid];
m0_571 -> m0_99  [key=2, style=dotted];
m0_571 -> m0_573  [key=2, style=dotted];
m0_572 -> m0_570  [color=blue, key=0, style=bold];
m0_578 -> m0_579  [key=0, style=solid];
m0_578 -> m0_18  [key=2, style=dotted];
m0_578 -> m0_581  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_582 -> m0_583  [key=0, style=solid];
m0_582 -> m0_44  [key=2, style=dotted];
m0_582 -> m0_584  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_577 -> m0_578  [key=0, style=solid];
m0_577 -> m0_582  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_579 -> m0_580  [key=0, style=solid];
m0_579 -> m0_19  [key=2, style=dotted];
m0_581 -> m0_582  [key=0, style=solid];
m0_580 -> m0_577  [color=blue, key=0, style=bold];
m0_583 -> m0_581  [color=blue, key=0, style=bold];
m0_584 -> m0_585  [key=0, style=solid];
m0_585 -> m0_586  [key=0, style=solid];
m0_585 -> m0_573  [key=2, style=dotted];
m0_586 -> m0_584  [color=blue, key=0, style=bold];
m0_591 -> m0_592  [key=0, style=solid];
m0_591 -> m0_44  [key=2, style=dotted];
m0_591 -> m0_597  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_590 -> m0_591  [key=0, style=solid];
m0_590 -> m0_592  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_592 -> m0_593  [key=0, style=solid];
m0_592 -> m0_41  [key=2, style=dotted];
m0_592 -> m0_596  [key=2, style=dotted];
m0_592 -> m0_600  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_592 -> m0_603  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_592 -> m0_594  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_597 -> m0_598  [key=0, style=solid];
m0_593 -> m0_594  [key=0, style=solid];
m0_593 -> m0_19  [key=2, style=dotted];
m0_600 -> m0_601  [key=0, style=solid];
m0_603 -> m0_604  [key=0, style=solid];
m0_594 -> m0_595  [key=0, style=solid];
m0_594 -> m0_19  [key=2, style=dotted];
m0_595 -> m0_590  [color=blue, key=0, style=bold];
m0_598 -> m0_599  [key=0, style=solid];
m0_598 -> m0_99  [key=2, style=dotted];
m0_598 -> m0_573  [key=2, style=dotted];
m0_599 -> m0_597  [color=blue, key=0, style=bold];
m0_601 -> m0_602  [key=0, style=solid];
m0_602 -> m0_600  [color=blue, key=0, style=bold];
m0_604 -> m0_605  [key=0, style=solid];
m0_605 -> m0_603  [color=blue, key=0, style=bold];
m0_610 -> m0_611  [key=0, style=solid];
m0_610 -> m0_44  [key=2, style=dotted];
m0_610 -> m0_614  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_609 -> m0_610  [key=0, style=solid];
m0_609 -> m0_611  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_611 -> m0_612  [key=0, style=solid];
m0_611 -> m0_41  [key=2, style=dotted];
m0_611 -> m0_596  [key=2, style=dotted];
m0_611 -> m0_617  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_611 -> m0_620  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_614 -> m0_615  [key=0, style=solid];
m0_612 -> m0_613  [key=0, style=solid];
m0_612 -> m0_19  [key=2, style=dotted];
m0_617 -> m0_618  [key=0, style=solid];
m0_620 -> m0_621  [key=0, style=solid];
m0_613 -> m0_609  [color=blue, key=0, style=bold];
m0_615 -> m0_616  [key=0, style=solid];
m0_615 -> m0_99  [key=2, style=dotted];
m0_615 -> m0_573  [key=2, style=dotted];
m0_616 -> m0_614  [color=blue, key=0, style=bold];
m0_618 -> m0_619  [key=0, style=solid];
m0_619 -> m0_617  [color=blue, key=0, style=bold];
m0_621 -> m0_622  [key=0, style=solid];
m0_622 -> m0_620  [color=blue, key=0, style=bold];
m0_627 -> m0_628  [key=0, style=solid];
m0_627 -> m0_18  [key=2, style=dotted];
m0_627 -> m0_629  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_630 -> m0_631  [key=0, style=solid];
m0_630 -> m0_44  [key=2, style=dotted];
m0_630 -> m0_632  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_626 -> m0_627  [key=0, style=solid];
m0_626 -> m0_630  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_628 -> m0_626  [color=blue, key=0, style=bold];
m0_629 -> m0_630  [key=0, style=solid];
m0_631 -> m0_629  [color=blue, key=0, style=bold];
m0_632 -> m0_633  [key=0, style=solid];
m0_633 -> m0_634  [key=0, style=solid];
m0_633 -> m0_635  [key=2, style=dotted];
m0_634 -> m0_632  [color=blue, key=0, style=bold];
m0_640 -> m0_641  [key=0, style=solid];
m0_640 -> m0_44  [key=2, style=dotted];
m0_640 -> m0_645  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_641 -> m0_642  [key=0, style=solid];
m0_641 -> m0_44  [key=2, style=dotted];
m0_641 -> m0_648  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_639 -> m0_640  [key=0, style=solid];
m0_639 -> m0_641  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_639 -> m0_642  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_642 -> m0_643  [key=0, style=solid];
m0_642 -> m0_18  [key=2, style=dotted];
m0_642 -> m0_42  [key=2, style=dotted];
m0_645 -> m0_646  [key=0, style=solid];
m0_648 -> m0_649  [key=0, style=solid];
m0_643 -> m0_644  [key=0, style=solid];
m0_643 -> m0_19  [key=2, style=dotted];
m0_644 -> m0_639  [color=blue, key=0, style=bold];
m0_646 -> m0_647  [key=0, style=solid];
m0_646 -> m0_99  [key=2, style=dotted];
m0_646 -> m0_573  [key=2, style=dotted];
m0_647 -> m0_645  [color=blue, key=0, style=bold];
m0_649 -> m0_650  [key=0, style=solid];
m0_649 -> m0_635  [key=2, style=dotted];
m0_650 -> m0_648  [color=blue, key=0, style=bold];
m0_655 -> m0_656  [key=0, style=solid];
m0_655 -> m0_18  [key=2, style=dotted];
m0_655 -> m0_658  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_659 -> m0_660  [key=0, style=solid];
m0_659 -> m0_44  [key=2, style=dotted];
m0_659 -> m0_661  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_654 -> m0_655  [key=0, style=solid];
m0_654 -> m0_659  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_656 -> m0_657  [key=0, style=solid];
m0_656 -> m0_19  [key=2, style=dotted];
m0_658 -> m0_659  [key=0, style=solid];
m0_657 -> m0_654  [color=blue, key=0, style=bold];
m0_660 -> m0_658  [color=blue, key=0, style=bold];
m0_661 -> m0_662  [key=0, style=solid];
m0_662 -> m0_663  [key=0, style=solid];
m0_662 -> n587  [key=2, style=dotted];
m0_662 -> m0_665  [key=2, style=dotted];
m0_663 -> m0_661  [color=blue, key=0, style=bold];
m0_670 -> m0_671  [key=0, style=solid];
m0_670 -> m0_18  [key=2, style=dotted];
m0_670 -> m0_673  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_674 -> m0_675  [key=0, style=solid];
m0_674 -> m0_44  [key=2, style=dotted];
m0_674 -> m0_676  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_669 -> m0_670  [key=0, style=solid];
m0_669 -> m0_674  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_671 -> m0_672  [key=0, style=solid];
m0_671 -> m0_19  [key=2, style=dotted];
m0_673 -> m0_674  [key=0, style=solid];
m0_672 -> m0_669  [color=blue, key=0, style=bold];
m0_675 -> m0_673  [color=blue, key=0, style=bold];
m0_676 -> m0_677  [key=0, style=solid];
m0_677 -> m0_678  [key=0, style=solid];
m0_677 -> m0_665  [key=2, style=dotted];
m0_678 -> m0_676  [color=blue, key=0, style=bold];
m0_684 -> m0_685  [key=0, style=solid];
m0_684 -> m0_44  [key=2, style=dotted];
m0_684 -> m0_688  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_682 -> m0_683  [key=0, style=solid];
m0_682 -> m0_684  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_682 -> m0_685  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_683 -> m0_684  [key=0, style=solid];
m0_683 -> n587  [key=2, style=dotted];
m0_683 -> m0_689  [color=darkseagreen4, key=1, label=items, style=dashed];
m0_683 -> m0_686  [color=darkseagreen4, key=1, label=items, style=dashed];
m0_685 -> m0_686  [key=0, style=solid];
m0_685 -> m0_18  [key=2, style=dotted];
m0_689 -> m0_690  [key=0, style=solid];
m0_689 -> m0_665  [key=2, style=dotted];
m0_686 -> m0_687  [key=0, style=solid];
m0_686 -> m0_19  [key=2, style=dotted];
m0_688 -> m0_689  [key=0, style=solid];
m0_687 -> m0_682  [color=blue, key=0, style=bold];
m0_690 -> m0_688  [color=blue, key=0, style=bold];
m0_695 -> m0_696  [key=0, style=solid];
m0_695 -> m0_18  [key=2, style=dotted];
m0_695 -> m0_697  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_698 -> m0_699  [key=0, style=solid];
m0_698 -> m0_44  [key=2, style=dotted];
m0_698 -> m0_700  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_694 -> m0_695  [key=0, style=solid];
m0_694 -> m0_698  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_696 -> m0_694  [color=blue, key=0, style=bold];
m0_697 -> m0_698  [key=0, style=solid];
m0_699 -> m0_697  [color=blue, key=0, style=bold];
m0_700 -> m0_701  [key=0, style=solid];
m0_701 -> m0_702  [key=0, style=solid];
m0_701 -> m0_703  [key=2, style=dotted];
m0_702 -> m0_700  [color=blue, key=0, style=bold];
m0_710 -> m0_711  [key=0, style=solid];
m0_710 -> m0_44  [key=2, style=dotted];
m0_710 -> m0_715  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_709 -> m0_710  [key=0, style=solid];
m0_709 -> m0_714  [key=2, style=dotted];
m0_708 -> m0_709  [key=0, style=solid];
m0_708 -> m0_710  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_708 -> m0_711  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_711 -> m0_712  [key=0, style=solid];
m0_711 -> m0_41  [key=2, style=dotted];
m0_711 -> m0_42  [key=2, style=dotted];
m0_715 -> m0_716  [key=0, style=solid];
m0_712 -> m0_713  [key=0, style=solid];
m0_712 -> m0_19  [key=2, style=dotted];
m0_713 -> m0_708  [color=blue, key=0, style=bold];
m0_716 -> m0_717  [key=0, style=solid];
m0_716 -> m0_703  [key=2, style=dotted];
m0_717 -> m0_715  [color=blue, key=0, style=bold];
m0_722 -> m0_723  [key=0, style=solid];
m0_722 -> m0_18  [key=2, style=dotted];
m0_722 -> m0_725  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_726 -> m0_727  [key=0, style=solid];
m0_726 -> m0_44  [key=2, style=dotted];
m0_726 -> m0_728  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_721 -> m0_722  [key=0, style=solid];
m0_721 -> m0_726  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_723 -> m0_724  [key=0, style=solid];
m0_723 -> m0_19  [key=2, style=dotted];
m0_725 -> m0_726  [key=0, style=solid];
m0_724 -> m0_721  [color=blue, key=0, style=bold];
m0_727 -> m0_725  [color=blue, key=0, style=bold];
m0_728 -> m0_729  [key=0, style=solid];
m0_729 -> m0_730  [key=0, style=solid];
m0_729 -> m0_731  [key=2, style=dotted];
m0_729 -> m0_732  [key=2, style=dotted];
m0_730 -> m0_728  [color=blue, key=0, style=bold];
m0_739 -> m0_740  [key=0, style=solid];
m0_739 -> m0_44  [key=2, style=dotted];
m0_739 -> m0_745  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_738 -> m0_739  [key=0, style=solid];
m0_738 -> m0_714  [key=2, style=dotted];
m0_737 -> m0_738  [key=0, style=solid];
m0_737 -> m0_739  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_737 -> m0_740  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_740 -> m0_741  [key=0, style=solid];
m0_740 -> m0_41  [key=2, style=dotted];
m0_740 -> m0_596  [key=2, style=dotted];
m0_740 -> m0_748  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_740 -> m0_751  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_740 -> m0_742  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_740 -> m0_743  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_745 -> m0_746  [key=0, style=solid];
m0_741 -> m0_742  [key=0, style=solid];
m0_741 -> m0_46  [key=2, style=dotted];
m0_741 -> m0_48  [key=2, style=dotted];
m0_748 -> m0_749  [key=0, style=solid];
m0_751 -> m0_752  [key=0, style=solid];
m0_742 -> m0_743  [key=0, style=solid];
m0_742 -> m0_46  [key=2, style=dotted];
m0_742 -> m0_48  [key=2, style=dotted];
m0_743 -> m0_744  [key=0, style=solid];
m0_743 -> m0_49  [key=2, style=dotted];
m0_744 -> m0_737  [color=blue, key=0, style=bold];
m0_746 -> m0_747  [key=0, style=solid];
m0_746 -> m0_731  [key=2, style=dotted];
m0_746 -> m0_732  [key=2, style=dotted];
m0_747 -> m0_745  [color=blue, key=0, style=bold];
m0_749 -> m0_750  [key=0, style=solid];
m0_750 -> m0_748  [color=blue, key=0, style=bold];
m0_752 -> m0_753  [key=0, style=solid];
m0_753 -> m0_751  [color=blue, key=0, style=bold];
m0_758 -> m0_759  [key=0, style=solid];
m0_758 -> m0_18  [key=2, style=dotted];
m0_758 -> m0_761  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_762 -> m0_763  [key=0, style=solid];
m0_762 -> m0_44  [key=2, style=dotted];
m0_762 -> m0_764  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_757 -> m0_758  [key=0, style=solid];
m0_757 -> m0_762  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_759 -> m0_760  [key=0, style=solid];
m0_759 -> m0_19  [key=2, style=dotted];
m0_761 -> m0_762  [key=0, style=solid];
m0_760 -> m0_757  [color=blue, key=0, style=bold];
m0_763 -> m0_761  [color=blue, key=0, style=bold];
m0_764 -> m0_765  [key=0, style=solid];
m0_765 -> m0_766  [key=0, style=solid];
m0_765 -> m0_767  [key=2, style=dotted];
m0_765 -> m0_768  [key=2, style=dotted];
m0_766 -> m0_764  [color=blue, key=0, style=bold];
m0_775 -> m0_776  [key=0, style=solid];
m0_775 -> m0_44  [key=2, style=dotted];
m0_775 -> m0_781  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_774 -> m0_775  [key=0, style=solid];
m0_774 -> m0_714  [key=2, style=dotted];
m0_773 -> m0_774  [key=0, style=solid];
m0_773 -> m0_775  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_773 -> m0_776  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_776 -> m0_777  [key=0, style=solid];
m0_776 -> m0_41  [key=2, style=dotted];
m0_776 -> m0_596  [key=2, style=dotted];
m0_776 -> m0_784  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_776 -> m0_787  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_776 -> m0_778  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_776 -> m0_779  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_781 -> m0_782  [key=0, style=solid];
m0_777 -> m0_778  [key=0, style=solid];
m0_777 -> m0_46  [key=2, style=dotted];
m0_777 -> m0_48  [key=2, style=dotted];
m0_784 -> m0_785  [key=0, style=solid];
m0_787 -> m0_788  [key=0, style=solid];
m0_778 -> m0_779  [key=0, style=solid];
m0_778 -> m0_46  [key=2, style=dotted];
m0_778 -> m0_48  [key=2, style=dotted];
m0_779 -> m0_780  [key=0, style=solid];
m0_779 -> m0_49  [key=2, style=dotted];
m0_780 -> m0_773  [color=blue, key=0, style=bold];
m0_782 -> m0_783  [key=0, style=solid];
m0_782 -> m0_731  [key=2, style=dotted];
m0_782 -> m0_768  [key=2, style=dotted];
m0_783 -> m0_781  [color=blue, key=0, style=bold];
m0_785 -> m0_786  [key=0, style=solid];
m0_786 -> m0_784  [color=blue, key=0, style=bold];
m0_788 -> m0_789  [key=0, style=solid];
m0_789 -> m0_787  [color=blue, key=0, style=bold];
m0_794 -> m0_795  [key=0, style=solid];
m0_794 -> m0_18  [key=2, style=dotted];
m0_794 -> m0_797  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_798 -> m0_799  [key=0, style=solid];
m0_798 -> m0_44  [key=2, style=dotted];
m0_798 -> m0_800  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_793 -> m0_794  [key=0, style=solid];
m0_793 -> m0_798  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_795 -> m0_796  [key=0, style=solid];
m0_795 -> m0_19  [key=2, style=dotted];
m0_797 -> m0_798  [key=0, style=solid];
m0_796 -> m0_793  [color=blue, key=0, style=bold];
m0_799 -> m0_797  [color=blue, key=0, style=bold];
m0_800 -> m0_801  [key=0, style=solid];
m0_801 -> m0_802  [key=0, style=solid];
m0_801 -> m0_767  [key=2, style=dotted];
m0_801 -> m0_803  [key=2, style=dotted];
m0_802 -> m0_800  [color=blue, key=0, style=bold];
m0_810 -> m0_811  [key=0, style=solid];
m0_810 -> m0_44  [key=2, style=dotted];
m0_810 -> m0_816  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_809 -> m0_810  [key=0, style=solid];
m0_809 -> m0_714  [key=2, style=dotted];
m0_808 -> m0_809  [key=0, style=solid];
m0_808 -> m0_810  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_808 -> m0_811  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_811 -> m0_812  [key=0, style=solid];
m0_811 -> m0_41  [key=2, style=dotted];
m0_811 -> m0_596  [key=2, style=dotted];
m0_811 -> m0_819  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_811 -> m0_822  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_811 -> m0_813  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_811 -> m0_814  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_816 -> m0_817  [key=0, style=solid];
m0_812 -> m0_813  [key=0, style=solid];
m0_812 -> m0_46  [key=2, style=dotted];
m0_812 -> m0_48  [key=2, style=dotted];
m0_819 -> m0_820  [key=0, style=solid];
m0_822 -> m0_823  [key=0, style=solid];
m0_813 -> m0_814  [key=0, style=solid];
m0_813 -> m0_46  [key=2, style=dotted];
m0_813 -> m0_48  [key=2, style=dotted];
m0_814 -> m0_815  [key=0, style=solid];
m0_814 -> m0_49  [key=2, style=dotted];
m0_815 -> m0_808  [color=blue, key=0, style=bold];
m0_817 -> m0_818  [key=0, style=solid];
m0_817 -> m0_731  [key=2, style=dotted];
m0_817 -> m0_803  [key=2, style=dotted];
m0_818 -> m0_816  [color=blue, key=0, style=bold];
m0_820 -> m0_821  [key=0, style=solid];
m0_821 -> m0_819  [color=blue, key=0, style=bold];
m0_823 -> m0_824  [key=0, style=solid];
m0_824 -> m0_822  [color=blue, key=0, style=bold];
m0_829 -> m0_830  [key=0, style=solid];
m0_829 -> m0_18  [key=2, style=dotted];
m0_829 -> m0_832  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_833 -> m0_834  [key=0, style=solid];
m0_833 -> m0_44  [key=2, style=dotted];
m0_833 -> m0_835  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_828 -> m0_829  [key=0, style=solid];
m0_828 -> m0_833  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_830 -> m0_831  [key=0, style=solid];
m0_830 -> m0_19  [key=2, style=dotted];
m0_832 -> m0_833  [key=0, style=solid];
m0_831 -> m0_828  [color=blue, key=0, style=bold];
m0_834 -> m0_832  [color=blue, key=0, style=bold];
m0_835 -> m0_836  [key=0, style=solid];
m0_836 -> m0_837  [key=0, style=solid];
m0_836 -> m0_838  [key=2, style=dotted];
m0_837 -> m0_835  [color=blue, key=0, style=bold];
m0_845 -> m0_846  [key=0, style=solid];
m0_845 -> m0_44  [key=2, style=dotted];
m0_845 -> m0_850  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_844 -> m0_845  [key=0, style=solid];
m0_844 -> m0_47  [key=2, style=dotted];
m0_844 -> m0_714  [key=2, style=dotted];
m0_843 -> m0_844  [key=0, style=solid];
m0_843 -> m0_845  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_843 -> m0_846  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_846 -> m0_847  [key=0, style=solid];
m0_846 -> m0_41  [key=2, style=dotted];
m0_846 -> m0_596  [key=2, style=dotted];
m0_846 -> m0_853  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_846 -> m0_856  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_846 -> m0_848  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_850 -> m0_851  [key=0, style=solid];
m0_847 -> m0_848  [key=0, style=solid];
m0_847 -> m0_49  [key=2, style=dotted];
m0_853 -> m0_854  [key=0, style=solid];
m0_856 -> m0_857  [key=0, style=solid];
m0_848 -> m0_849  [key=0, style=solid];
m0_848 -> m0_68  [key=2, style=dotted];
m0_849 -> m0_843  [color=blue, key=0, style=bold];
m0_851 -> m0_852  [key=0, style=solid];
m0_851 -> m0_838  [key=2, style=dotted];
m0_852 -> m0_850  [color=blue, key=0, style=bold];
m0_854 -> m0_855  [key=0, style=solid];
m0_855 -> m0_853  [color=blue, key=0, style=bold];
m0_857 -> m0_858  [key=0, style=solid];
m0_858 -> m0_856  [color=blue, key=0, style=bold];
m0_863 -> m0_864  [key=0, style=solid];
m0_863 -> m0_18  [key=2, style=dotted];
m0_863 -> m0_866  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_867 -> m0_868  [key=0, style=solid];
m0_867 -> m0_44  [key=2, style=dotted];
m0_867 -> m0_869  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_862 -> m0_863  [key=0, style=solid];
m0_862 -> m0_867  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_864 -> m0_865  [key=0, style=solid];
m0_864 -> m0_19  [key=2, style=dotted];
m0_866 -> m0_867  [key=0, style=solid];
m0_865 -> m0_862  [color=blue, key=0, style=bold];
m0_868 -> m0_866  [color=blue, key=0, style=bold];
m0_869 -> m0_870  [key=0, style=solid];
m0_870 -> m0_871  [key=0, style=solid];
m0_870 -> m0_872  [key=2, style=dotted];
m0_871 -> m0_869  [color=blue, key=0, style=bold];
m0_879 -> m0_880  [key=0, style=solid];
m0_879 -> m0_44  [key=2, style=dotted];
m0_879 -> m0_884  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_878 -> m0_879  [key=0, style=solid];
m0_878 -> m0_47  [key=2, style=dotted];
m0_878 -> m0_714  [key=2, style=dotted];
m0_877 -> m0_878  [key=0, style=solid];
m0_877 -> m0_879  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_877 -> m0_880  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_880 -> m0_881  [key=0, style=solid];
m0_880 -> m0_41  [key=2, style=dotted];
m0_880 -> m0_596  [key=2, style=dotted];
m0_880 -> m0_887  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_880 -> m0_890  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_880 -> m0_882  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_884 -> m0_885  [key=0, style=solid];
m0_881 -> m0_882  [key=0, style=solid];
m0_881 -> m0_49  [key=2, style=dotted];
m0_887 -> m0_888  [key=0, style=solid];
m0_890 -> m0_891  [key=0, style=solid];
m0_882 -> m0_883  [key=0, style=solid];
m0_882 -> m0_68  [key=2, style=dotted];
m0_883 -> m0_877  [color=blue, key=0, style=bold];
m0_885 -> m0_886  [key=0, style=solid];
m0_885 -> m0_872  [key=2, style=dotted];
m0_886 -> m0_884  [color=blue, key=0, style=bold];
m0_888 -> m0_889  [key=0, style=solid];
m0_889 -> m0_887  [color=blue, key=0, style=bold];
m0_891 -> m0_892  [key=0, style=solid];
m0_892 -> m0_890  [color=blue, key=0, style=bold];
m0_897 -> m0_898  [key=0, style=solid];
m0_897 -> m0_18  [key=2, style=dotted];
m0_897 -> m0_900  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_901 -> m0_902  [key=0, style=solid];
m0_901 -> m0_44  [key=2, style=dotted];
m0_901 -> m0_903  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_896 -> m0_897  [key=0, style=solid];
m0_896 -> m0_901  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_898 -> m0_899  [key=0, style=solid];
m0_898 -> m0_19  [key=2, style=dotted];
m0_900 -> m0_901  [key=0, style=solid];
m0_899 -> m0_896  [color=blue, key=0, style=bold];
m0_902 -> m0_900  [color=blue, key=0, style=bold];
m0_903 -> m0_904  [key=0, style=solid];
m0_904 -> m0_905  [key=0, style=solid];
m0_904 -> m0_906  [key=2, style=dotted];
m0_905 -> m0_903  [color=blue, key=0, style=bold];
m0_913 -> m0_914  [key=0, style=solid];
m0_913 -> m0_44  [key=2, style=dotted];
m0_913 -> m0_918  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_912 -> m0_913  [key=0, style=solid];
m0_912 -> m0_47  [key=2, style=dotted];
m0_912 -> m0_714  [key=2, style=dotted];
m0_911 -> m0_912  [key=0, style=solid];
m0_911 -> m0_913  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_911 -> m0_914  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_914 -> m0_915  [key=0, style=solid];
m0_914 -> m0_41  [key=2, style=dotted];
m0_914 -> m0_596  [key=2, style=dotted];
m0_914 -> m0_921  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_914 -> m0_924  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_914 -> m0_916  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_918 -> m0_919  [key=0, style=solid];
m0_915 -> m0_916  [key=0, style=solid];
m0_915 -> m0_49  [key=2, style=dotted];
m0_921 -> m0_922  [key=0, style=solid];
m0_924 -> m0_925  [key=0, style=solid];
m0_916 -> m0_917  [key=0, style=solid];
m0_916 -> m0_68  [key=2, style=dotted];
m0_917 -> m0_911  [color=blue, key=0, style=bold];
m0_919 -> m0_920  [key=0, style=solid];
m0_919 -> m0_906  [key=2, style=dotted];
m0_920 -> m0_918  [color=blue, key=0, style=bold];
m0_922 -> m0_923  [key=0, style=solid];
m0_923 -> m0_921  [color=blue, key=0, style=bold];
m0_925 -> m0_926  [key=0, style=solid];
m0_926 -> m0_924  [color=blue, key=0, style=bold];
m0_942 -> m0_943  [key=0, style=solid];
m0_943 -> m0_944  [key=0, style=solid];
m0_944 -> m0_942  [color=blue, key=0, style=bold];
m0_946 -> m0_947  [key=0, style=solid];
m0_947 -> m0_945  [color=blue, key=0, style=bold];
m0_893 -> m0_894  [key=0, style=solid];
m0_893 -> m0_897  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_893 -> m0_901  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_894 -> m0_895  [key=0, style=solid];
m0_894 -> m0_31  [key=2, style=dotted];
m0_894 -> m0_896  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_895 -> m0_893  [color=blue, key=0, style=bold];
m0_391 -> m0_392  [key=0, style=solid];
m0_391 -> m0_395  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_392 -> m0_393  [key=0, style=solid];
m0_392 -> m0_31  [key=2, style=dotted];
m0_392 -> m0_394  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_393 -> m0_391  [color=blue, key=0, style=bold];
m0_754 -> m0_755  [key=0, style=solid];
m0_754 -> m0_758  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_754 -> m0_762  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_755 -> m0_756  [key=0, style=solid];
m0_755 -> m0_31  [key=2, style=dotted];
m0_755 -> m0_757  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_756 -> m0_754  [color=blue, key=0, style=bold];
m0_416 -> m0_417  [key=0, style=solid];
m0_416 -> m0_420  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_417 -> m0_418  [key=0, style=solid];
m0_417 -> m0_31  [key=2, style=dotted];
m0_417 -> m0_419  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_418 -> m0_416  [color=blue, key=0, style=bold];
m0_859 -> m0_860  [key=0, style=solid];
m0_859 -> m0_863  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_859 -> m0_867  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_860 -> m0_861  [key=0, style=solid];
m0_860 -> m0_31  [key=2, style=dotted];
m0_860 -> m0_862  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_861 -> m0_859  [color=blue, key=0, style=bold];
m0_718 -> m0_719  [key=0, style=solid];
m0_718 -> m0_722  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_718 -> m0_726  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_719 -> m0_720  [key=0, style=solid];
m0_719 -> m0_31  [key=2, style=dotted];
m0_719 -> m0_721  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_720 -> m0_718  [color=blue, key=0, style=bold];
m0_272 -> m0_273  [key=0, style=solid];
m0_272 -> m0_276  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_273 -> m0_274  [key=0, style=solid];
m0_273 -> m0_31  [key=2, style=dotted];
m0_273 -> m0_275  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_274 -> m0_272  [color=blue, key=0, style=bold];
m0_587 -> m0_588  [key=0, style=solid];
m0_587 -> m0_591  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_588 -> m0_589  [key=0, style=solid];
m0_588 -> m0_31  [key=2, style=dotted];
m0_588 -> m0_590  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_589 -> m0_587  [color=blue, key=0, style=bold];
m0_254 -> m0_255  [key=0, style=solid];
m0_254 -> m0_258  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_255 -> m0_256  [key=0, style=solid];
m0_255 -> m0_31  [key=2, style=dotted];
m0_255 -> m0_257  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_256 -> m0_254  [color=blue, key=0, style=bold];
m0_560 -> m0_561  [key=0, style=solid];
m0_560 -> m0_564  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_560 -> m0_568  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_561 -> m0_562  [key=0, style=solid];
m0_561 -> m0_31  [key=2, style=dotted];
m0_561 -> m0_563  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_562 -> m0_560  [color=blue, key=0, style=bold];
m0_404 -> m0_405  [key=0, style=solid];
m0_404 -> m0_408  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_405 -> m0_406  [key=0, style=solid];
m0_405 -> m0_31  [key=2, style=dotted];
m0_405 -> m0_407  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_406 -> m0_404  [color=blue, key=0, style=bold];
m0_574 -> m0_575  [key=0, style=solid];
m0_574 -> m0_578  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_574 -> m0_582  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_575 -> m0_576  [key=0, style=solid];
m0_575 -> m0_31  [key=2, style=dotted];
m0_575 -> m0_577  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_576 -> m0_574  [color=blue, key=0, style=bold];
m0_353 -> m0_354  [key=0, style=solid];
m0_353 -> m0_357  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_354 -> m0_355  [key=0, style=solid];
m0_354 -> m0_31  [key=2, style=dotted];
m0_354 -> m0_356  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_355 -> m0_353  [color=blue, key=0, style=bold];
m0_341 -> m0_342  [key=0, style=solid];
m0_341 -> m0_345  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_342 -> m0_343  [key=0, style=solid];
m0_342 -> m0_31  [key=2, style=dotted];
m0_342 -> m0_344  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_343 -> m0_341  [color=blue, key=0, style=bold];
m0_220 -> m0_927  [key=0, style=solid];
m0_220 -> m0_928  [color=darkseagreen4, key=1, label="System.Action<SqlConnection>", style=dashed];
m0_220 -> m0_217  [color=darkorchid, key=3, label="Parameter variable System.Action<SqlConnection> action", style=bold];
m0_927 -> m0_928  [key=0, style=solid];
m0_927 -> m0_930  [key=2, style=dotted];
m0_928 -> m0_929  [key=0, style=solid];
m0_928 -> m0_931  [key=2, style=dotted];
m0_929 -> m0_220  [color=blue, key=0, style=bold];
m0_315 -> m0_316  [key=0, style=solid];
m0_315 -> m0_319  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_316 -> m0_317  [key=0, style=solid];
m0_316 -> m0_31  [key=2, style=dotted];
m0_316 -> m0_318  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_317 -> m0_315  [color=blue, key=0, style=bold];
m0_804 -> m0_805  [key=0, style=solid];
m0_804 -> m0_806  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_804 -> m0_810  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_805 -> m0_806  [key=0, style=solid];
m0_805 -> m0_809  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_805 -> m0_805  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
m0_806 -> m0_807  [key=0, style=solid];
m0_806 -> m0_31  [key=2, style=dotted];
m0_806 -> m0_808  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_807 -> m0_804  [color=blue, key=0, style=bold];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_57  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_55 -> m0_62  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_60  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_56 -> m0_61  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_56 -> m0_56  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_31  [key=2, style=dotted];
m0_57 -> m0_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_58 -> m0_55  [color=blue, key=0, style=bold];
m0_491 -> m0_492  [key=0, style=solid];
m0_491 -> m0_495  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_492 -> m0_493  [key=0, style=solid];
m0_492 -> m0_31  [key=2, style=dotted];
m0_492 -> m0_494  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_493 -> m0_491  [color=blue, key=0, style=bold];
m0_873 -> m0_874  [key=0, style=solid];
m0_873 -> m0_875  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_873 -> m0_879  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_874 -> m0_875  [key=0, style=solid];
m0_874 -> m0_878  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_874 -> m0_874  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
m0_875 -> m0_876  [key=0, style=solid];
m0_875 -> m0_31  [key=2, style=dotted];
m0_875 -> m0_877  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_876 -> m0_873  [color=blue, key=0, style=bold];
m0_467 -> m0_468  [key=0, style=solid];
m0_467 -> m0_471  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_468 -> m0_469  [key=0, style=solid];
m0_468 -> m0_31  [key=2, style=dotted];
m0_468 -> m0_470  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_469 -> m0_467  [color=blue, key=0, style=bold];
m0_666 -> m0_667  [key=0, style=solid];
m0_666 -> m0_670  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_666 -> m0_674  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_667 -> m0_668  [key=0, style=solid];
m0_667 -> m0_31  [key=2, style=dotted];
m0_667 -> m0_669  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_668 -> m0_666  [color=blue, key=0, style=bold];
m0_298 -> m0_299  [key=0, style=solid];
m0_298 -> m0_302  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_299 -> m0_300  [key=0, style=solid];
m0_299 -> m0_31  [key=2, style=dotted];
m0_299 -> m0_301  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_300 -> m0_298  [color=blue, key=0, style=bold];
m0_14 -> m0_15  [key=0, style=solid];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_18  [key=2, style=dotted];
m0_15 -> m0_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_19  [key=2, style=dotted];
m0_17 -> m0_14  [color=blue, key=0, style=bold];
m0_651 -> m0_652  [key=0, style=solid];
m0_651 -> m0_655  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_651 -> m0_659  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_652 -> m0_653  [key=0, style=solid];
m0_652 -> m0_31  [key=2, style=dotted];
m0_652 -> m0_654  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_653 -> m0_651  [color=blue, key=0, style=bold];
m0_284 -> m0_285  [key=0, style=solid];
m0_284 -> m0_288  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_285 -> m0_286  [key=0, style=solid];
m0_285 -> m0_31  [key=2, style=dotted];
m0_285 -> m0_287  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_286 -> m0_284  [color=blue, key=0, style=bold];
m0_428 -> m0_429  [key=0, style=solid];
m0_428 -> m0_432  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_429 -> m0_430  [key=0, style=solid];
m0_429 -> m0_31  [key=2, style=dotted];
m0_429 -> m0_431  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_430 -> m0_428  [color=blue, key=0, style=bold];
m0_623 -> m0_624  [key=0, style=solid];
m0_623 -> m0_627  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_623 -> m0_630  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_624 -> m0_625  [key=0, style=solid];
m0_624 -> m0_31  [key=2, style=dotted];
m0_624 -> m0_626  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_625 -> m0_623  [color=blue, key=0, style=bold];
m0_790 -> m0_791  [key=0, style=solid];
m0_790 -> m0_794  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_790 -> m0_798  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_791 -> m0_792  [key=0, style=solid];
m0_791 -> m0_31  [key=2, style=dotted];
m0_791 -> m0_793  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_792 -> m0_790  [color=blue, key=0, style=bold];
m0_73 -> m0_74  [key=0, style=solid];
m0_73 -> m0_75  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_73 -> m0_84  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_78  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_74 -> m0_79  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_74 -> m0_28  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_31  [key=2, style=dotted];
m0_75 -> m0_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_76 -> m0_73  [color=blue, key=0, style=bold];
m0_240 -> m0_241  [key=0, style=solid];
m0_240 -> m0_244  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_241 -> m0_242  [key=0, style=solid];
m0_241 -> m0_31  [key=2, style=dotted];
m0_241 -> m0_243  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_242 -> m0_240  [color=blue, key=0, style=bold];
m0_365 -> m0_366  [key=0, style=solid];
m0_365 -> m0_369  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_366 -> m0_367  [key=0, style=solid];
m0_366 -> m0_31  [key=2, style=dotted];
m0_366 -> m0_368  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_367 -> m0_365  [color=blue, key=0, style=bold];
m0_114 -> m0_115  [key=0, style=solid];
m0_114 -> m0_116  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_114 -> m0_124  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_115 -> m0_116  [key=0, style=solid];
m0_115 -> m0_119  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_115 -> m0_28  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
m0_116 -> m0_117  [key=0, style=solid];
m0_116 -> m0_31  [key=2, style=dotted];
m0_116 -> m0_118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_117 -> m0_114  [color=blue, key=0, style=bold];
m0_145 -> m0_146  [key=0, style=solid];
m0_145 -> m0_147  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_145 -> m0_155  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_146 -> m0_147  [key=0, style=solid];
m0_146 -> m0_150  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_146 -> m0_28  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
m0_147 -> m0_148  [key=0, style=solid];
m0_147 -> m0_31  [key=2, style=dotted];
m0_147 -> m0_149  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_148 -> m0_145  [color=blue, key=0, style=bold];
m0_733 -> m0_734  [key=0, style=solid];
m0_733 -> m0_735  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_733 -> m0_739  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_734 -> m0_735  [key=0, style=solid];
m0_734 -> m0_738  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_734 -> m0_734  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
m0_735 -> m0_736  [key=0, style=solid];
m0_735 -> m0_31  [key=2, style=dotted];
m0_735 -> m0_737  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_736 -> m0_733  [color=blue, key=0, style=bold];
m0_948 -> m0_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_29  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_35  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_36  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_38  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_57  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_62  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_63  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_65  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_75  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_84  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_85  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_88  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_116  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_124  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_125  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_147  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_155  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_156  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_181  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_189  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_190  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_216  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_217  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_225  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_241  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_244  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_255  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_258  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_273  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_276  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_285  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_288  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_299  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_302  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_316  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_319  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_328  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_331  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_342  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_345  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_354  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_357  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_366  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_369  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_380  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_383  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_392  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_395  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_405  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_408  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_417  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_420  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_429  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_432  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_442  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_445  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_454  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_457  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_468  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_471  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_480  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_483  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_492  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_495  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_511  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_514  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_525  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_528  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_537  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_540  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_549  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_552  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_561  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_564  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_568  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_575  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_578  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_582  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_588  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_591  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_607  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_610  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_624  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_627  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_630  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_637  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_640  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_641  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_652  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_655  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_659  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_667  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_670  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_674  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_680  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_684  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_692  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_695  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_698  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_706  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_710  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_719  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_722  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_726  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_735  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_739  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_755  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_758  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_762  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_771  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_775  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_791  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_794  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_798  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_806  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_810  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_826  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_829  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_833  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_841  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_845  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_860  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_863  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_867  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_875  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_879  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_894  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_897  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_901  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_909  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_913  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_948 -> m0_933  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_33  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_949 -> m0_34  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_950 -> m0_35  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_951 -> m0_51  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_952 -> m0_60  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_952 -> m0_61  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_953 -> m0_62  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_954 -> m0_70  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_955 -> m0_78  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_955 -> m0_79  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_956 -> m0_84  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_957 -> m0_111  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_958 -> m0_111  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_959 -> m0_119  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_960 -> m0_124  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_961 -> m0_143  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_962 -> m0_143  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_963 -> m0_150  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_964 -> m0_155  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_965 -> m0_176  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_966 -> m0_176  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_967 -> m0_184  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_968 -> m0_189  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_969 -> m0_210  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_970 -> m0_210  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_971 -> m0_225  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_972 -> m0_226  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
m0_973 -> m0_244  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_974 -> m0_258  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_975 -> m0_276  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_976 -> m0_288  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_977 -> m0_302  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_978 -> m0_319  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_979 -> m0_331  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_980 -> m0_345  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_981 -> m0_357  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_982 -> m0_369  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_983 -> m0_383  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_984 -> m0_395  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_985 -> m0_408  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_986 -> m0_420  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_987 -> m0_432  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_988 -> m0_445  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_989 -> m0_457  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_990 -> m0_471  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_991 -> m0_483  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_992 -> m0_495  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_993 -> m0_514  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_994 -> m0_528  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_995 -> m0_540  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_996 -> m0_552  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_997 -> m0_564  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_997 -> m0_568  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_998 -> m0_568  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_999 -> m0_578  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_999 -> m0_582  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1000 -> m0_582  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1001 -> m0_591  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1002 -> m0_610  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1003 -> m0_627  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1003 -> m0_630  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1004 -> m0_630  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1005 -> m0_640  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1005 -> m0_641  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1006 -> m0_655  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1006 -> m0_659  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1007 -> m0_659  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1008 -> m0_670  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1008 -> m0_674  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1009 -> m0_674  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1010 -> m0_684  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1011 -> m0_689  [color=darkseagreen4, key=1, label=items, style=dashed];
m0_1012 -> m0_695  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1012 -> m0_698  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1013 -> m0_698  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1014 -> m0_709  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_1015 -> m0_710  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1016 -> m0_722  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1016 -> m0_726  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1017 -> m0_726  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1018 -> m0_738  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_1019 -> m0_739  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1020 -> m0_758  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1020 -> m0_762  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1021 -> m0_762  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1022 -> m0_774  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_1023 -> m0_775  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1024 -> m0_794  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1024 -> m0_798  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1025 -> m0_798  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1026 -> m0_809  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_1027 -> m0_810  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1028 -> m0_829  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1028 -> m0_833  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1029 -> m0_833  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1030 -> m0_844  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_1031 -> m0_845  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1032 -> m0_863  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1032 -> m0_867  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1033 -> m0_867  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1034 -> m0_878  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_1035 -> m0_879  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1036 -> m0_897  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1036 -> m0_901  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1037 -> m0_901  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1038 -> m0_912  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_1039 -> m0_913  [color=darkseagreen4, key=1, label=bool, style=dashed];
}
