digraph  {
n0 [cluster="Hangfire.SqlServer.Tests.CountersAggregatorFacts.CountersAggregatorExecutesProperly()", label="Entry Hangfire.SqlServer.Tests.CountersAggregatorFacts.CountersAggregatorExecutesProperly()", span="12-12"];
n1 [cluster="Hangfire.SqlServer.Tests.CountersAggregatorFacts.CountersAggregatorExecutesProperly()", label="string createSql = @''\r\ninsert into HangFire.Counter ([Key], [Value], ExpireAt) \r\nvalues ('key', 1, @expireAt)''", span="14-16"];
n2 [cluster="Hangfire.SqlServer.Tests.CountersAggregatorFacts.CountersAggregatorExecutesProperly()", label="var connection = CreateConnection()", span="18-18"];
n3 [cluster="Hangfire.SqlServer.Tests.CountersAggregatorFacts.CountersAggregatorExecutesProperly()", label="connection.Execute(createSql, new { expireAt = DateTime.UtcNow.AddHours(1) })", span="21-21"];
n10 [cluster="Hangfire.SqlServer.Tests.CountersAggregatorFacts.CreateConnection()", label="Entry Hangfire.SqlServer.Tests.CountersAggregatorFacts.CreateConnection()", span="35-35"];
n4 [cluster="Hangfire.SqlServer.Tests.CountersAggregatorFacts.CountersAggregatorExecutesProperly()", label="var aggregator = CreateAggregator(connection)", span="23-23"];
n8 [cluster="Hangfire.SqlServer.Tests.CountersAggregatorFacts.CountersAggregatorExecutesProperly()", label="Assert.Equal(1, connection.Query<int>(@''select count(*) from HangFire.AggregatedCounter'').Single())", span="31-31"];
n11 [cluster="System.DateTime.AddHours(double)", label="Entry System.DateTime.AddHours(double)", span="0-0"];
n12 [cluster="Unk.Execute", label="Entry Unk.Execute", span=""];
n5 [cluster="Hangfire.SqlServer.Tests.CountersAggregatorFacts.CountersAggregatorExecutesProperly()", label="var cts = new CancellationTokenSource()", span="24-24"];
n13 [cluster="Hangfire.SqlServer.Tests.CountersAggregatorFacts.CreateAggregator(SqlConnection)", label="Entry Hangfire.SqlServer.Tests.CountersAggregatorFacts.CreateAggregator(SqlConnection)", span="40-40"];
n7 [cluster="Hangfire.SqlServer.Tests.CountersAggregatorFacts.CountersAggregatorExecutesProperly()", label="aggregator.Execute(cts.Token)", span="28-28"];
n6 [cluster="Hangfire.SqlServer.Tests.CountersAggregatorFacts.CountersAggregatorExecutesProperly()", label="cts.Cancel()", span="25-25"];
n14 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0"];
n15 [cluster="System.Threading.CancellationTokenSource.Cancel()", label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0"];
n16 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", label="Entry Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", span="42-42"];
n9 [cluster="Hangfire.SqlServer.Tests.CountersAggregatorFacts.CountersAggregatorExecutesProperly()", label="Exit Hangfire.SqlServer.Tests.CountersAggregatorFacts.CountersAggregatorExecutesProperly()", span="12-12"];
n17 [cluster="Unk.>", label="Entry Unk.>", span=""];
n18 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n19 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n20 [cluster="Hangfire.SqlServer.Tests.CountersAggregatorFacts.CreateConnection()", label="return ConnectionUtils.CreateConnection();", span="37-37"];
n21 [cluster="Hangfire.SqlServer.Tests.CountersAggregatorFacts.CreateConnection()", label="Exit Hangfire.SqlServer.Tests.CountersAggregatorFacts.CreateConnection()", span="35-35"];
n22 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
n23 [cluster="Hangfire.SqlServer.Tests.CountersAggregatorFacts.CreateAggregator(SqlConnection)", label="var storage = new SqlServerStorage(connection)", span="42-42"];
n24 [cluster="Hangfire.SqlServer.Tests.CountersAggregatorFacts.CreateAggregator(SqlConnection)", label="return new CountersAggregator(storage, TimeSpan.Zero);", span="43-43"];
n26 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", span="93-93"];
n25 [cluster="Hangfire.SqlServer.Tests.CountersAggregatorFacts.CreateAggregator(SqlConnection)", label="Exit Hangfire.SqlServer.Tests.CountersAggregatorFacts.CreateAggregator(SqlConnection)", span="40-40"];
n27 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", label="Entry Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="34-34"];
m1_23 [cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="IWriteOnlyTransaction.cs", label="_redis.SetEntryInHash(\r\n                    String.Format(''hangfire:job:{0}'', jobId),\r\n                    ''Checked'',\r\n                    JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="74-77"];
m1_18 [cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", span="44-44"];
m1_25 [cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="IWriteOnlyTransaction.cs", label="TryToRequeueTheJob(jobId)", span="86-86"];
m1_26 [cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="IWriteOnlyTransaction.cs", label="JobFetcher.RemoveFromFetchedQueue(_redis, jobId, queue)", span="87-87"];
m1_22 [cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="IWriteOnlyTransaction.cs", label="String.IsNullOrEmpty(fetched) && String.IsNullOrEmpty(@checked)", span="54-54"];
m1_24 [cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="IWriteOnlyTransaction.cs", label="TimedOutByFetchedTime(fetched) || TimedOutByCheckedTime(fetched, @checked)", span="84-84"];
m1_27 [cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", span="44-44"];
m1_75 [cluster="System.Threading.Thread.Join()", file="IWriteOnlyTransaction.cs", label="Entry System.Threading.Thread.Join()", span="0-0"];
m1_47 [cluster="HangFire.States.EnqueuedState.EnqueuedState(string, string, string)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.States.EnqueuedState.EnqueuedState(string, string, string)", span="10-10"];
m1_14 [cluster="System.TimeSpan.FromMinutes(double)", file="IWriteOnlyTransaction.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m1_32 [cluster="Unk.SetEntryInHash", file="IWriteOnlyTransaction.cs", label="Entry Unk.SetEntryInHash", span=""];
m1_28 [cluster="string.Format(string, object)", file="IWriteOnlyTransaction.cs", label="Entry string.Format(string, object)", span="0-0"];
m1_31 [cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="55-55"];
m1_55 [cluster="HangFire.Server.DequeuedJobsWatcher.TimedOutByCheckedTime(string, string)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Server.DequeuedJobsWatcher.TimedOutByCheckedTime(string, string)", span="127-127"];
m1_56 [cluster="HangFire.Server.DequeuedJobsWatcher.TimedOutByCheckedTime(string, string)", file="IWriteOnlyTransaction.cs", label="!String.IsNullOrEmpty(fetchedTimestamp)", span="132-132"];
m1_58 [cluster="HangFire.Server.DequeuedJobsWatcher.TimedOutByCheckedTime(string, string)", file="IWriteOnlyTransaction.cs", label="return !String.IsNullOrEmpty(checkedTimestamp) &&\r\n                   (DateTime.UtcNow - JobHelper.FromStringTimestamp(checkedTimestamp) > CheckedTimeout);", span="137-138"];
m1_57 [cluster="HangFire.Server.DequeuedJobsWatcher.TimedOutByCheckedTime(string, string)", file="IWriteOnlyTransaction.cs", label="return false;", span="134-134"];
m1_59 [cluster="HangFire.Server.DequeuedJobsWatcher.TimedOutByCheckedTime(string, string)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Server.DequeuedJobsWatcher.TimedOutByCheckedTime(string, string)", span="127-127"];
m1_4 [cluster="HangFire.Server.DequeuedJobsWatcher.FindAndRequeueTimedOutJobs()", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Server.DequeuedJobsWatcher.FindAndRequeueTimedOutJobs()", span="23-23"];
m1_5 [cluster="HangFire.Server.DequeuedJobsWatcher.FindAndRequeueTimedOutJobs()", file="IWriteOnlyTransaction.cs", label="var queues = _redis.GetAllItemsFromSet(''hangfire:queues'')", span="25-25"];
m1_6 [cluster="HangFire.Server.DequeuedJobsWatcher.FindAndRequeueTimedOutJobs()", file="IWriteOnlyTransaction.cs", label=queues, span="27-27"];
m1_7 [cluster="HangFire.Server.DequeuedJobsWatcher.FindAndRequeueTimedOutJobs()", file="IWriteOnlyTransaction.cs", label="_redis.AcquireLock(\r\n                    String.Format(''hangfire:queue:{0}:dequeued:lock'', queue),\r\n                    TimeSpan.FromMinutes(1))", span="29-31"];
m1_8 [cluster="HangFire.Server.DequeuedJobsWatcher.FindAndRequeueTimedOutJobs()", file="IWriteOnlyTransaction.cs", label="var jobIds = _redis.GetAllItemsFromList(\r\n                        String.Format(''hangfire:queue:{0}:dequeued'', queue))", span="33-34"];
m1_10 [cluster="HangFire.Server.DequeuedJobsWatcher.FindAndRequeueTimedOutJobs()", file="IWriteOnlyTransaction.cs", label="RequeueJobIfTimedOut(jobId, queue)", span="38-38"];
m1_9 [cluster="HangFire.Server.DequeuedJobsWatcher.FindAndRequeueTimedOutJobs()", file="IWriteOnlyTransaction.cs", label=jobIds, span="36-36"];
m1_11 [cluster="HangFire.Server.DequeuedJobsWatcher.FindAndRequeueTimedOutJobs()", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Server.DequeuedJobsWatcher.FindAndRequeueTimedOutJobs()", span="23-23"];
m1_45 [cluster="Unk.TryToGetQueue", file="IWriteOnlyTransaction.cs", label="Entry Unk.TryToGetQueue", span=""];
m1_49 [cluster="HangFire.States.FailedState.FailedState(string, string, System.Exception)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.States.FailedState.FailedState(string, string, System.Exception)", span="10-10"];
m1_68 [cluster="System.Threading.Thread.Sleep(System.TimeSpan)", file="IWriteOnlyTransaction.cs", label="Entry System.Threading.Thread.Sleep(System.TimeSpan)", span="0-0"];
m1_74 [cluster="System.Threading.Thread.Interrupt()", file="IWriteOnlyTransaction.cs", label="Entry System.Threading.Thread.Interrupt()", span="0-0"];
m1_36 [cluster="HangFire.Server.JobFetcher.RemoveFromFetchedQueue(IRedisClient, string, string)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Server.JobFetcher.RemoveFromFetchedQueue(IRedisClient, string, string)", span="84-84"];
m1_0 [cluster="HangFire.Server.DequeuedJobsWatcher.Dispose()", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Server.DequeuedJobsWatcher.Dispose()", span="18-18"];
m1_1 [cluster="HangFire.Server.DequeuedJobsWatcher.Dispose()", file="IWriteOnlyTransaction.cs", label="_redis.Dispose()", span="20-20"];
m1_2 [cluster="HangFire.Server.DequeuedJobsWatcher.Dispose()", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Server.DequeuedJobsWatcher.Dispose()", span="18-18"];
m1_50 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="IWriteOnlyTransaction.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m1_33 [cluster="Unk.TimedOutByFetchedTime", file="IWriteOnlyTransaction.cs", label="Entry Unk.TimedOutByFetchedTime", span=""];
m1_34 [cluster="Unk.TimedOutByCheckedTime", file="IWriteOnlyTransaction.cs", label="Entry Unk.TimedOutByCheckedTime", span=""];
m1_60 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", span="141-141"];
m1_61 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="IWriteOnlyTransaction.cs", label=true, span="145-145"];
m1_62 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="IWriteOnlyTransaction.cs", label="FindAndRequeueTimedOutJobs()", span="147-147"];
m1_64 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="IWriteOnlyTransaction.cs", label=ThreadInterruptedException, span="151-151"];
m1_65 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="IWriteOnlyTransaction.cs", label=Exception, span="154-154"];
m1_63 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="IWriteOnlyTransaction.cs", label="Thread.Sleep(SleepTimeout)", span="148-148"];
m1_66 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="IWriteOnlyTransaction.cs", label="_logger.Fatal(\r\n                    ''Unexpected exception caught in the timed out jobs thread. Timed out jobs will not be re-queued.'',\r\n                    ex)", span="156-158"];
m1_67 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", span="141-141"];
m1_46 [cluster="string.IsNullOrEmpty(string)", file="IWriteOnlyTransaction.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m1_3 [cluster="Unk.Dispose", file="IWriteOnlyTransaction.cs", label="Entry Unk.Dispose", span=""];
m1_35 [cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", span="92-92"];
m1_37 [cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="IWriteOnlyTransaction.cs", label="var jobType = _redis.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', jobId),\r\n                ''Type'')", span="94-96"];
m1_41 [cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="IWriteOnlyTransaction.cs", label="JobState.Apply(\r\n                    _redis,\r\n                    new EnqueuedState(jobId, ''Requeued due to time out'', queue),\r\n                    recoverFromStates)", span="104-107"];
m1_42 [cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="IWriteOnlyTransaction.cs", label="JobState.Apply(\r\n                    _redis,\r\n                    new FailedState(\r\n                        jobId,\r\n                        ''Failed to re-queue the job.'',\r\n                        new InvalidOperationException(String.Format(''Could not find type '{0}'.'', jobType))),\r\n                    recoverFromStates)", span="111-117"];
m1_38 [cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="IWriteOnlyTransaction.cs", label="var queue = JobHelper.TryToGetQueue(jobType)", span="98-98"];
m1_39 [cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="IWriteOnlyTransaction.cs", label="var recoverFromStates = new[] { EnqueuedState.Name, ProcessingState.Name }", span="100-100"];
m1_40 [cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="IWriteOnlyTransaction.cs", label="!String.IsNullOrEmpty(queue)", span="102-102"];
m1_43 [cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", span="92-92"];
m1_69 [cluster="Unk.Fatal", file="IWriteOnlyTransaction.cs", label="Entry Unk.Fatal", span=""];
m1_16 [cluster="Unk.GetAllItemsFromList", file="IWriteOnlyTransaction.cs", label="Entry Unk.GetAllItemsFromList", span=""];
m1_48 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="IWriteOnlyTransaction.cs", label="Entry HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", span="47-47"];
m1_51 [cluster="HangFire.Server.DequeuedJobsWatcher.TimedOutByFetchedTime(string)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Server.DequeuedJobsWatcher.TimedOutByFetchedTime(string)", span="121-121"];
m1_52 [cluster="HangFire.Server.DequeuedJobsWatcher.TimedOutByFetchedTime(string)", file="IWriteOnlyTransaction.cs", label="return !String.IsNullOrEmpty(fetchedTimestamp) &&\r\n                   (DateTime.UtcNow - JobHelper.FromStringTimestamp(fetchedTimestamp) > JobTimeout);", span="123-124"];
m1_53 [cluster="HangFire.Server.DequeuedJobsWatcher.TimedOutByFetchedTime(string)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Server.DequeuedJobsWatcher.TimedOutByFetchedTime(string)", span="121-121"];
m1_44 [cluster="Unk.GetValueFromHash", file="IWriteOnlyTransaction.cs", label="Entry Unk.GetValueFromHash", span=""];
m1_12 [cluster="Unk.GetAllItemsFromSet", file="IWriteOnlyTransaction.cs", label="Entry Unk.GetAllItemsFromSet", span=""];
m1_30 [cluster="Unk.IsNullOrEmpty", file="IWriteOnlyTransaction.cs", label="Entry Unk.IsNullOrEmpty", span=""];
m1_17 [cluster="Unk.RequeueJobIfTimedOut", file="IWriteOnlyTransaction.cs", label="Entry Unk.RequeueJobIfTimedOut", span=""];
m1_13 [cluster="Unk.Format", file="IWriteOnlyTransaction.cs", label="Entry Unk.Format", span=""];
m1_29 [cluster="Unk.GetValuesFromHash", file="IWriteOnlyTransaction.cs", label="Entry Unk.GetValuesFromHash", span=""];
m1_54 [cluster="HangFire.JobHelper.FromStringTimestamp(string)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.JobHelper.FromStringTimestamp(string)", span="60-60"];
m1_70 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", span="162-162"];
m1_71 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="IWriteOnlyTransaction.cs", label="thread.Interrupt()", span="164-164"];
m1_72 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="IWriteOnlyTransaction.cs", label="thread.Join()", span="165-165"];
m1_73 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", span="162-162"];
m1_15 [cluster="Unk.AcquireLock", file="IWriteOnlyTransaction.cs", label="Entry Unk.AcquireLock", span=""];
m1_76 [file="IWriteOnlyTransaction.cs", label="HangFire.Server.DequeuedJobsWatcher", span=""];
m2_6 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Dispose()", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.Dispose()", span="36-36"];
m2_7 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Dispose()", file="RedisWriteOnlyTransaction.cs", label="_transaction.Dispose()", span="38-38"];
m2_8 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Dispose()", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.Dispose()", span="36-36"];
m2_128 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.ExpireEntryIn(RedisStorage.Prefix + key, expireIn))", span="158-158"];
m2_126 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="155-155"];
m2_127 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.DecrementValue(RedisStorage.Prefix + key))", span="157-157"];
m2_129 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="155-155"];
m2_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="RedisWriteOnlyTransaction.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m2_90 [cluster="Unk.EnqueueItemOnList", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.EnqueueItemOnList", span=""];
m2_65 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="RedisWriteOnlyTransaction.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m2_156 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", span="179-179"];
m2_157 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.EnqueueItemOnList(\r\n                RedisStorage.Prefix + key, value))", span="181-182"];
m2_158 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", span="179-179"];
m2_78 [cluster="Unk.SetRangeInHash", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.SetRangeInHash", span=""];
m2_111 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.ExpireEntryIn(RedisStorage.Prefix + key, expireIn))", span="147-147"];
m2_109 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="144-144"];
m2_110 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.IncrementValue(RedisStorage.Prefix + key))", span="146-146"];
m2_112 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="144-144"];
m2_169 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", span="191-191"];
m2_170 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.TrimList(\r\n                RedisStorage.Prefix + key, keepStartingFrom, keepEndingAt))", span="194-195"];
m2_171 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", span="191-191"];
m2_55 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.RemoveEntry(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId)))", span="94-95"];
m2_53 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", span="87-87"];
m2_54 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                ''State'',\r\n                state.Name))", span="89-92"];
m2_56 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="var storedData = new Dictionary<string, string>(state.SerializeData())", span="101-101"];
m2_57 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="storedData.Add(''State'', state.Name)", span="102-102"];
m2_58 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="state.Reason != null", span="104-104"];
m2_59 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="storedData.Add(''Reason'', state.Reason)", span="106-106"];
m2_60 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.SetRangeInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId),\r\n                storedData))", span="109-111"];
m2_61 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="AddJobState(jobId, state)", span="113-113"];
m2_62 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", span="87-87"];
m2_70 [cluster="Unk.SetEntryInHash", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.SetEntryInHash", span=""];
m2_98 [cluster="Unk.AddItemToSet", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.AddItemToSet", span=""];
m2_30 [cluster="string.Format(string, object)", file="RedisWriteOnlyTransaction.cs", label="Entry string.Format(string, object)", span="0-0"];
m2_188 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", span="209-209"];
m2_190 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", span="209-209"];
m2_74 [cluster="Unk.RemoveEntry", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.RemoveEntry", span=""];
m2_108 [cluster="Unk.IncrementValue", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.IncrementValue", span=""];
m2_38 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", span="77-77"];
m2_39 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId)))", span="79-80"];
m2_40 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId)))", span="81-82"];
m2_41 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId)))", span="83-84"];
m2_42 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", span="77-77"];
m2_31 [cluster="Unk.ExpireEntryIn", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.ExpireEntryIn", span=""];
m2_142 [cluster="Unk.AddItemToSortedSet", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.AddItemToSortedSet", span=""];
m2_119 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", span="150-150"];
m2_120 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.DecrementValue(RedisStorage.Prefix + key))", span="152-152"];
m2_121 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", span="150-150"];
m2_136 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", span="161-161"];
m2_137 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.AddItemToSortedSet(\r\n                RedisStorage.Prefix + key, value))", span="163-164"];
m2_138 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", span="161-161"];
m2_149 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", span="173-173"];
m2_150 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.RemoveItemFromSortedSet(\r\n                RedisStorage.Prefix + key, value))", span="175-176"];
m2_151 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", span="173-173"];
m2_63 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="RedisWriteOnlyTransaction.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="0-0"];
m2_9 [cluster="Unk.Dispose", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.Dispose", span=""];
m2_10 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.Commit()", span="41-41"];
m2_11 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RedisWriteOnlyTransaction.cs", label="!_transaction.Commit()", span="43-43"];
m2_12 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RedisWriteOnlyTransaction.cs", label="int replayCount = 1", span="49-49"];
m2_13 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RedisWriteOnlyTransaction.cs", label="int maxReplayCount = 3", span="50-50"];
m2_15 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RedisWriteOnlyTransaction.cs", label="replayCount++ >= maxReplayCount", span="54-54"];
m2_14 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RedisWriteOnlyTransaction.cs", label="!_transaction.Replay()", span="52-52"];
m2_16 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RedisWriteOnlyTransaction.cs", label="throw new RedisException(''Transaction commit was failed due to WATCH condition failure. Retry attempts exceeded.'');", span="56-56"];
m2_17 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.Commit()", span="41-41"];
m2_176 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementValue(string)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.IncrementValue(string)", span="198-198"];
m2_178 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementValue(string)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.IncrementValue(string)", span="198-198"];
m2_64 [cluster="HangFire.States.State.SerializeData()", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.States.State.SerializeData()", span="27-27"];
m2_191 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="211-212"];
m2_28 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                expireIn)", span="64-66"];
m2_33 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId),\r\n                expireIn)", span="68-70"];
m2_36 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId),\r\n                expireIn)", span="72-74"];
m2_27 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="64-66"];
m2_32 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="68-70"];
m2_35 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="72-74"];
m2_29 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="64-66"];
m2_34 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="68-70"];
m2_37 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="72-74"];
m2_44 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId))", span="79-80"];
m2_48 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId))", span="81-82"];
m2_51 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId))", span="83-84"];
m2_43 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="79-80"];
m2_47 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="81-82"];
m2_50 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="83-84"];
m2_45 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="79-80"];
m2_49 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="81-82"];
m2_52 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="83-84"];
m2_68 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                ''State'',\r\n                state.Name)", span="89-92"];
m2_72 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.RemoveEntry(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId))", span="94-95"];
m2_76 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.SetRangeInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId),\r\n                storedData)", span="109-111"];
m2_67 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="89-92"];
m2_71 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="94-95"];
m2_75 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="109-111"];
m2_69 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="89-92"];
m2_73 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="94-95"];
m2_77 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="109-111"];
m2_87 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.EnqueueItemOnList(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId),\r\n                JobHelper.ToJson(storedData))", span="125-127"];
m2_86 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="125-127"];
m2_88 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="125-127"];
m2_96 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.AddItemToSet(\r\n                RedisStorage.Prefix + ''queues'', queue)", span="132-133"];
m2_100 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.EnqueueItemOnList(\r\n                String.Format(RedisStorage.Prefix + ''queue:{0}'', queue), jobId)", span="135-136"];
m2_95 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="132-133"];
m2_99 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="135-136"];
m2_97 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="132-133"];
m2_101 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="135-136"];
m2_106 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.IncrementValue(RedisStorage.Prefix + key)", span="141-141"];
m2_105 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="141-141"];
m2_107 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="141-141"];
m2_114 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.IncrementValue(RedisStorage.Prefix + key)", span="146-146"];
m2_117 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.ExpireEntryIn(RedisStorage.Prefix + key, expireIn)", span="147-147"];
m2_113 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="146-146"];
m2_116 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="147-147"];
m2_115 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="146-146"];
m2_118 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="147-147"];
m2_123 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.DecrementValue(RedisStorage.Prefix + key)", span="152-152"];
m2_122 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="152-152"];
m2_124 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="152-152"];
m2_131 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.DecrementValue(RedisStorage.Prefix + key)", span="157-157"];
m2_134 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.ExpireEntryIn(RedisStorage.Prefix + key, expireIn)", span="158-158"];
m2_130 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="157-157"];
m2_133 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="158-158"];
m2_132 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="157-157"];
m2_135 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="158-158"];
m2_140 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.AddItemToSortedSet(\r\n                RedisStorage.Prefix + key, value)", span="163-164"];
m2_139 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="163-164"];
m2_141 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="163-164"];
m2_147 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.AddItemToSortedSet(\r\n                RedisStorage.Prefix + key, value, score)", span="169-170"];
m2_146 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="169-170"];
m2_148 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="169-170"];
m2_153 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.RemoveItemFromSortedSet(\r\n                RedisStorage.Prefix + key, value)", span="175-176"];
m2_152 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="175-176"];
m2_154 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="175-176"];
m2_160 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.EnqueueItemOnList(\r\n                RedisStorage.Prefix + key, value)", span="181-182"];
m2_159 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="181-182"];
m2_161 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="181-182"];
m2_166 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.RemoveItemFromList(\r\n                RedisStorage.Prefix + key, value)", span="187-188"];
m2_165 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="187-188"];
m2_167 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="187-188"];
m2_173 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.TrimList(\r\n                RedisStorage.Prefix + key, keepStartingFrom, keepEndingAt)", span="194-195"];
m2_172 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="194-195"];
m2_174 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="194-195"];
m2_179 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="200-201"];
m2_181 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="200-201"];
m2_185 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="206-206"];
m2_187 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="206-206"];
m2_193 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="211-212"];
m2_85 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
m2_143 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", span="167-167"];
m2_144 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.AddItemToSortedSet(\r\n                RedisStorage.Prefix + key, value, score))", span="169-170"];
m2_145 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", span="167-167"];
m2_182 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementValue(string)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.DecrementValue(string)", span="204-204"];
m2_184 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementValue(string)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.DecrementValue(string)", span="204-204"];
m2_102 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", span="139-139"];
m2_103 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.IncrementValue(RedisStorage.Prefix + key))", span="141-141"];
m2_104 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", span="139-139"];
m2_168 [cluster="Unk.RemoveItemFromList", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.RemoveItemFromList", span=""];
m2_24 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId),\r\n                expireIn))", span="72-74"];
m2_21 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="62-62"];
m2_22 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                expireIn))", span="64-66"];
m2_23 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId),\r\n                expireIn))", span="68-70"];
m2_25 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="62-62"];
m2_91 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", span="130-130"];
m2_92 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.AddItemToSet(\r\n                RedisStorage.Prefix + ''queues'', queue))", span="132-133"];
m2_93 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.EnqueueItemOnList(\r\n                String.Format(RedisStorage.Prefix + ''queue:{0}'', queue), jobId))", span="135-136"];
m2_94 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", span="130-130"];
m2_89 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m2_46 [cluster="Unk.Persist", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.Persist", span=""];
m2_18 [cluster="Unk.Commit", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.Commit", span=""];
m2_66 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", span="116-116"];
m2_79 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="var storedData = new Dictionary<string, string>(state.SerializeData())", span="120-120"];
m2_80 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="storedData.Add(''State'', state.Name)", span="121-121"];
m2_81 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="storedData.Add(''Reason'', state.Reason)", span="122-122"];
m2_83 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.EnqueueItemOnList(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId),\r\n                JobHelper.ToJson(storedData)))", span="125-127"];
m2_82 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="storedData.Add(''CreatedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="123-123"];
m2_84 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", span="116-116"];
m2_19 [cluster="Unk.Replay", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.Replay", span=""];
m2_20 [cluster="RedisException.cstr", file="RedisWriteOnlyTransaction.cs", label="Entry RedisException.cstr", span=""];
m2_26 [cluster="Unk.QueueCommand", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.QueueCommand", span=""];
m2_125 [cluster="Unk.DecrementValue", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.DecrementValue", span=""];
m2_175 [cluster="Unk.TrimList", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.TrimList", span=""];
m2_162 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", span="185-185"];
m2_163 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.RemoveItemFromList(\r\n                RedisStorage.Prefix + key, value))", span="187-188"];
m2_164 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", span="185-185"];
m2_155 [cluster="Unk.RemoveItemFromSortedSet", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.RemoveItemFromSortedSet", span=""];
m2_0 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", span="29-29"];
m2_1 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RedisWriteOnlyTransaction.cs", label="transaction == null", span="31-31"];
m2_3 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RedisWriteOnlyTransaction.cs", label="_transaction = transaction", span="33-33"];
m2_2 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RedisWriteOnlyTransaction.cs", label="throw new ArgumentNullException(''transaction'');", span="31-31"];
m2_4 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", span="29-29"];
m2_194 [file="RedisWriteOnlyTransaction.cs", label="HangFire.Redis.RedisWriteOnlyTransaction", span=""];
m2_195 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_196 [file="RedisWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m2_197 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_198 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_199 [file="RedisWriteOnlyTransaction.cs", label="HangFire.States.State", span=""];
m2_200 [file="RedisWriteOnlyTransaction.cs", label=storedData, span=""];
m2_201 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_202 [file="RedisWriteOnlyTransaction.cs", label=storedData, span=""];
m2_203 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_204 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_205 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_206 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_207 [file="RedisWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m2_208 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_209 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_210 [file="RedisWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m2_211 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_212 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_213 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_214 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_215 [file="RedisWriteOnlyTransaction.cs", label=double, span=""];
m2_216 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_217 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_218 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_219 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_220 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_221 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_222 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_223 [file="RedisWriteOnlyTransaction.cs", label=int, span=""];
m2_224 [file="RedisWriteOnlyTransaction.cs", label=int, span=""];
m2_225 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_226 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_227 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_228 [file="RedisWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m3_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerConnection.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m3_117 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="236-236"];
m3_118 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="serverId == null", span="238-238"];
m3_120 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="context == null", span="239-239"];
m3_122 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="241-246"];
m3_123 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="_connection.Execute(\r\n                @''merge HangFire.Server as Target ''\r\n                + @''using (VALUES (@id, @data)) as Source (Id, Data) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = null ''\r\n                + @''when not matched then insert (Id, Data) values (Source.Id, Source.Data);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data) })", span="250-256"];
m3_119 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''serverId'');", span="238-238"];
m3_121 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''context'');", span="239-239"];
m3_124 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="236-236"];
m3_95 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="205-205"];
m3_96 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="id == null", span="207-207"];
m3_98 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="name == null", span="208-208"];
m3_100 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="return _connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault();", span="210-213"];
m3_97 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''id'');", span="207-207"];
m3_99 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''name'');", span="208-208"];
m3_101 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="205-205"];
m3_125 [cluster="HangFire.SqlServer.Entities.ServerData.ServerData()", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.Entities.ServerData.ServerData()", span="20-20"];
m3_47 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="106-106"];
m3_48 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="job == null", span="111-111"];
m3_50 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="parameters == null", span="112-112"];
m3_53 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="var invocationData = InvocationData.Serialize(job)", span="119-119"];
m3_54 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="var jobId = _connection.Query<int>(\r\n                createJobSql,\r\n                new\r\n                {\r\n                    invocationData = JobHelper.ToJson(invocationData),\r\n                    arguments = invocationData.Arguments,\r\n                    createdAt = DateTime.UtcNow,\r\n                    expireAt = DateTime.UtcNow.Add(expireIn)\r\n                }).Single().ToString()", span="121-129"];
m3_55 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="parameters.Count > 0", span="131-131"];
m3_56 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="var parameterArray = new object[parameters.Count]", span="133-133"];
m3_58 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label=parameters, span="135-135"];
m3_49 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''job'');", span="111-111"];
m3_51 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''parameters'');", span="112-112"];
m3_52 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="string createJobSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues (@invocationData, @arguments, @createdAt, @expireAt);\r\nSELECT CAST(SCOPE_IDENTITY() as int)''", span="114-117"];
m3_59 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="parameterArray[parameterIndex++] = new\r\n                    {\r\n                        jobId = jobId,\r\n                        name = parameter.Key,\r\n                        value = parameter.Value\r\n                    }", span="137-142"];
m3_62 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="return jobId;", span="152-152"];
m3_57 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="int parameterIndex = 0", span="134-134"];
m3_61 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="_connection.Execute(insertParameterSql, parameterArray)", span="149-149"];
m3_60 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="string insertParameterSql = @''\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@jobId, @name, @value)''", span="145-147"];
m3_63 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="106-106"];
m3_18 [cluster="string.Format(string, object)", file="SqlServerConnection.cs", label="Entry string.Format(string, object)", span="0-0"];
m3_40 [cluster="System.TimeSpan.Negate()", file="SqlServerConnection.cs", label="Entry System.TimeSpan.Negate()", span="0-0"];
m3_45 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="SqlServerConnection.cs", label="Entry HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", span="22-22"];
m3_70 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="155-155"];
m3_71 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="id == null", span="157-157"];
m3_74 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="var jobData = _connection.Query<SqlJob>(sql, new { id = id })\r\n                .SingleOrDefault()", span="162-163"];
m3_72 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''id'');", span="157-157"];
m3_73 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="string sql = \r\n                @''select InvocationData, StateName, Arguments from HangFire.Job where id = @id''", span="159-160"];
m3_75 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="jobData == null", span="165-165"];
m3_77 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="var invocationData = JobHelper.FromJson<InvocationData>(jobData.InvocationData)", span="168-168"];
m3_78 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="invocationData.Arguments = jobData.Arguments", span="169-169"];
m3_84 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="return new JobData\r\n            {\r\n                Job = job,\r\n                State = jobData.StateName,\r\n                LoadException = loadException\r\n            };", span="183-188"];
m3_76 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="return null;", span="165-165"];
m3_81 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="job = invocationData.Deserialize()", span="176-176"];
m3_79 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="Job job = null", span="171-171"];
m3_80 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="JobLoadException loadException = null", span="172-172"];
m3_82 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label=JobLoadException, span="178-178"];
m3_83 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="loadException = ex", span="180-180"];
m3_85 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="155-155"];
m3_10 [cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="47-47"];
m3_11 [cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnection.cs", label="return new SqlServerWriteOnlyTransaction(_connection);", span="49-49"];
m3_12 [cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="47-47"];
m3_116 [cluster="System.ArgumentException.ArgumentException(string)", file="SqlServerConnection.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m3_43 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerConnection.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m3_41 [cluster="Unk.Query", file="SqlServerConnection.cs", label="Entry Unk.Query", span=""];
m3_46 [cluster="Unk.ToString", file="SqlServerConnection.cs", label="Entry Unk.ToString", span=""];
m3_39 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="SqlServerConnection.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m3_66 [cluster="System.DateTime.Add(System.TimeSpan)", file="SqlServerConnection.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m3_19 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="59-59"];
m3_20 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="queues == null", span="61-61"];
m3_22 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="queues.Length == 0", span="62-62"];
m3_28 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="80-80"];
m3_29 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="idAndQueue = _connection.Query(\r\n                    String.Format(fetchJobSqlTemplate, fetchConditions[currentQueryIndex]),\r\n                    new { queues = queues, timeout = JobInvisibilityTimeOut.Negate().TotalSeconds })\r\n                    .SingleOrDefault()", span="82-85"];
m3_21 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''queues'');", span="61-61"];
m3_23 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="throw new ArgumentException(''Queue array must be non-empty.'', ''queues'');", span="62-62"];
m3_24 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="dynamic idAndQueue", span="64-64"];
m3_25 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="string fetchJobSqlTemplate = @''\r\nset transaction isolation level read committed\r\nupdate top (1) HangFire.JobQueue set FetchedAt = GETUTCDATE()\r\noutput INSERTED.JobId, INSERTED.Queue\r\nwhere FetchedAt {0}\r\nand Queue in @queues''", span="66-71"];
m3_26 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="var fetchConditions = new[] { ''is null'', ''< DATEADD(second, @timeout, GETUTCDATE())'' }", span="75-75"];
m3_27 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="var currentQueryIndex = 0", span="76-76"];
m3_31 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="currentQueryIndex == fetchConditions.Length - 1", span="89-89"];
m3_34 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="currentQueryIndex = (currentQueryIndex + 1) % fetchConditions.Length", span="98-98"];
m3_30 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="idAndQueue == null", span="87-87"];
m3_35 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="idAndQueue == null", span="99-99"];
m3_36 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="return new ProcessingJob(\r\n                idAndQueue.JobId.ToString(CultureInfo.InvariantCulture),\r\n                idAndQueue.Queue);", span="101-103"];
m3_37 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="59-59"];
m3_136 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="277-277"];
m3_137 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="timeOut.Duration() != timeOut", span="279-279"];
m3_138 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="throw new ArgumentException(''The `timeOut` value must be positive.'', ''timeOut'');", span="281-281"];
m3_139 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="return _connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) });", span="284-286"];
m3_140 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="277-277"];
m3_0 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", span="35-35"];
m3_1 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", file="SqlServerConnection.cs", label="connection == null", span="37-37"];
m3_3 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", file="SqlServerConnection.cs", label="_connection = connection", span="39-39"];
m3_2 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''connection'');", span="37-37"];
m3_4 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", span="35-35"];
m3_9 [cluster="Unk.Dispose", file="SqlServerConnection.cs", label="Entry Unk.Dispose", span=""];
m3_141 [cluster="System.TimeSpan.Duration()", file="SqlServerConnection.cs", label="Entry System.TimeSpan.Duration()", span="0-0"];
m3_6 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Dispose()", span="42-42"];
m3_7 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs", label="_connection.Dispose()", span="44-44"];
m3_8 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.Dispose()", span="42-42"];
m3_17 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", span="44-44"];
m3_102 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="216-216"];
m3_103 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerConnection.cs", label="id == null", span="218-218"];
m3_105 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerConnection.cs", label="queue == null", span="219-219"];
m3_107 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerConnection.cs", label="_connection.Execute(''delete from HangFire.JobQueue where JobId = @id and Queue = @queueName'',\r\n                new { id = id, queueName = queue })", span="221-222"];
m3_104 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''id'');", span="218-218"];
m3_106 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''queue'');", span="219-219"];
m3_108 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="216-216"];
m3_88 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="191-191"];
m3_89 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="id == null", span="193-193"];
m3_91 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="name == null", span="194-194"];
m3_93 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="_connection.Execute(\r\n                @''merge HangFire.JobParameter as Target ''\r\n                + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                + @''when matched then update set Value = Source.Value ''\r\n                + @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                new { jobId = id, name, value })", span="196-202"];
m3_90 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''id'');", span="193-193"];
m3_92 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''name'');", span="194-194"];
m3_94 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="191-191"];
m3_13 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", span="34-34"];
m3_109 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="225-225"];
m3_110 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="key == null", span="227-227"];
m3_112 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="toScore < fromScore", span="228-228"];
m3_114 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="230-233"];
m3_111 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="227-227"];
m3_113 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", span="228-228"];
m3_115 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="225-225"];
m3_65 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="SqlServerConnection.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m3_14 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="52-52"];
m3_15 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerConnection.cs", label="return new SqlServerDistributedLock(\r\n                String.Format(''HangFire:Job:{0}'', jobId), \r\n                _connection);", span="54-56"];
m3_16 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="52-52"];
m3_38 [cluster="System.ArgumentException.ArgumentException(string, string)", file="SqlServerConnection.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m3_68 [cluster="Unk.Single", file="SqlServerConnection.cs", label="Entry Unk.Single", span=""];
m3_44 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="SqlServerConnection.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m3_87 [cluster="HangFire.Storage.JobData.JobData()", file="SqlServerConnection.cs", label="Entry HangFire.Storage.JobData.JobData()", span="20-20"];
m3_69 [cluster="Unk.Execute", file="SqlServerConnection.cs", label="Entry Unk.Execute", span=""];
m3_86 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="SqlServerConnection.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m3_126 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="259-259"];
m3_127 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="serverId == null", span="261-261"];
m3_129 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="263-265"];
m3_128 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''serverId'');", span="261-261"];
m3_130 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="259-259"];
m3_131 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="268-268"];
m3_132 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="serverId == null", span="270-270"];
m3_134 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="272-274"];
m3_133 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''serverId'');", span="270-270"];
m3_135 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="268-268"];
m3_42 [cluster="Unk.SingleOrDefault", file="SqlServerConnection.cs", label="Entry Unk.SingleOrDefault", span=""];
m3_64 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="SqlServerConnection.cs", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
m3_142 [file="SqlServerConnection.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m5_60 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", span="76-76"];
m5_61 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", color=green, community=1, file="SqlServerDistributedLockFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var distributedLock = new SqlServerDistributedLock(''hello'', sql);\r\n                distributedLock.Dispose();\r\n\r\n                var lockMode = sql.Query<string>(\r\n                    ''select applock_mode('public', 'hello', 'session')'').Single();\r\n\r\n                Assert.Equal(''NoLock'', lockMode);\r\n            })", prediction=0, span="78-87"];
m5_62 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", span="76-76"];
m5_44 [cluster="System.Threading.Thread.Join()", file="SqlServerDistributedLockFacts.cs", label="Entry System.Threading.Thread.Join()", span="0-0"];
m5_22 [cluster="Unk.UseConnection", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.UseConnection", span=""];
m5_41 [cluster="System.Threading.Thread.Start()", file="SqlServerDistributedLockFacts.cs", label="Entry System.Threading.Thread.Start()", span="0-0"];
m5_43 [cluster="System.Threading.ManualResetEventSlim.Set()", file="SqlServerDistributedLockFacts.cs", label="Entry System.Threading.ManualResetEventSlim.Set()", span="0-0"];
m5_10 [cluster="Mock<IDbConnection>.cstr", file="SqlServerDistributedLockFacts.cs", label="Entry Mock<IDbConnection>.cstr", span=""];
m5_4 [cluster="Unk.>", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.>", span=""];
m5_48 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", span="90-90"];
m5_70 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="var connection = ConnectionUtils.CreateConnection()", prediction=1, span="92-92"];
m5_71 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="action(connection)", prediction=2, span="94-94"];
m5_72 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", span="90-90"];
m5_74 [cluster="System.Action<T>.Invoke(T)", file="SqlServerDistributedLockFacts.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m5_9 [cluster="SqlServerDistributedLock.cstr", file="SqlServerDistributedLockFacts.cs", label="Entry SqlServerDistributedLock.cstr", span=""];
m5_18 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, IDbConnection)", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, IDbConnection)", span="44-44"];
m5_29 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", span="49-49"];
m5_30 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="var releaseLock = new ManualResetEventSlim(false)", prediction=3, span="51-51"];
m5_31 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="var lockAcquired = new ManualResetEventSlim(false)", prediction=3, span="52-52"];
m5_32 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", color=green, community=1, file="SqlServerDistributedLockFacts.cs", label="var thread = new Thread(\r\n                () => UseConnection(connection1 =>\r\n                {\r\n                    using (new SqlServerDistributedLock(''exclusive'', connection1))\r\n                    {\r\n                        lockAcquired.Set();\r\n                        releaseLock.Wait();\r\n                    }\r\n                }))", prediction=5, span="54-62"];
m5_36 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="releaseLock.Set()", prediction=3, span="71-71"];
m5_34 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="lockAcquired.Wait()", prediction=3, span="65-65"];
m5_33 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="thread.Start()", prediction=8, span="63-63"];
m5_37 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="thread.Join()", prediction=5, span="72-72"];
m5_35 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="UseConnection(connection2 => \r\n                Assert.Throws<SqlServerDistributedLockException>(\r\n                    () => new SqlServerDistributedLock(''exclusive'', connection2)))", prediction=3, span="67-69"];
m5_38 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", span="49-49"];
m5_42 [cluster="System.Threading.ManualResetEventSlim.Wait()", file="SqlServerDistributedLockFacts.cs", label="Entry System.Threading.ManualResetEventSlim.Wait()", span="0-0"];
m5_39 [cluster="System.Threading.ManualResetEventSlim.ManualResetEventSlim(bool)", file="SqlServerDistributedLockFacts.cs", label="Entry System.Threading.ManualResetEventSlim.ManualResetEventSlim(bool)", span="0-0"];
m5_63 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="78-87"];
m5_6 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="17-17"];
m5_7 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="new SqlServerDistributedLock('''', new Mock<IDbConnection>().Object)", prediction=11, span="17-17"];
m5_8 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="17-17"];
m5_15 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="26-26"];
m5_16 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="new SqlServerDistributedLock(''hello'', null)", prediction=12, span="26-26"];
m5_17 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="26-26"];
m5_23 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="34-43"];
m5_24 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="var distributedLock = new SqlServerDistributedLock(''hello'', sql)", prediction=13, span="37-37"];
m5_25 [cluster="lambda expression", color=green, community=1, file="SqlServerDistributedLockFacts.cs", label="var lockMode = sql.Query<string>(\r\n                    ''select applock_mode('public', 'hello', 'session')'').Single()", prediction=14, span="39-40"];
m5_26 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="Assert.Equal(''Exclusive'', lockMode)", prediction=15, span="42-42"];
m5_27 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="34-43"];
m5_46 [cluster="lambda expression", color=green, community=1, file="SqlServerDistributedLockFacts.cs", label="UseConnection(connection1 =>\r\n                {\r\n                    using (new SqlServerDistributedLock(''exclusive'', connection1))\r\n                    {\r\n                        lockAcquired.Set();\r\n                        releaseLock.Wait();\r\n                    }\r\n                })", prediction=3, span="55-62"];
m5_52 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="releaseLock.Wait()", prediction=3, span="60-60"];
m5_51 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="lockAcquired.Set()", prediction=3, span="59-59"];
m5_45 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="55-62"];
m5_47 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="55-62"];
m5_49 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="55-62"];
m5_53 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="55-62"];
m5_50 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="new SqlServerDistributedLock(''exclusive'', connection1)", prediction=19, span="57-57"];
m5_54 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="67-69"];
m5_55 [cluster="lambda expression", color=green, community=1, file="SqlServerDistributedLockFacts.cs", label="Assert.Throws<SqlServerDistributedLockException>(\r\n                    () => new SqlServerDistributedLock(''exclusive'', connection2))", prediction=20, span="68-69"];
m5_56 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="67-69"];
m5_57 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="69-69"];
m5_58 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="new SqlServerDistributedLock(''exclusive'', connection2)", prediction=21, span="69-69"];
m5_59 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="69-69"];
m5_64 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="var distributedLock = new SqlServerDistributedLock(''hello'', sql)", prediction=22, span="80-80"];
m5_65 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="distributedLock.Dispose()", prediction=23, span="81-81"];
m5_66 [cluster="lambda expression", color=green, community=1, file="SqlServerDistributedLockFacts.cs", label="var lockMode = sql.Query<string>(\r\n                    ''select applock_mode('public', 'hello', 'session')'').Single()", prediction=24, span="83-84"];
m5_67 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="Assert.Equal(''NoLock'', lockMode)", prediction=25, span="86-86"];
m5_68 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="78-87"];
m5_11 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="23-23"];
m5_12 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", color=green, community=1, file="SqlServerDistributedLockFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerDistributedLock(''hello'', null))", prediction=26, span="25-26"];
m5_13 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="Assert.Equal(''connection'', exception.ParamName)", prediction=27, span="28-28"];
m5_14 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="23-23"];
m5_19 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_AcquiresExclusiveApplicationLock_OnSession()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_AcquiresExclusiveApplicationLock_OnSession()", span="32-32"];
m5_20 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_AcquiresExclusiveApplicationLock_OnSession()", color=green, community=1, file="SqlServerDistributedLockFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // ReSharper disable once UnusedVariable\r\n                var distributedLock = new SqlServerDistributedLock(''hello'', sql);\r\n\r\n                var lockMode = sql.Query<string>(\r\n                    ''select applock_mode('public', 'hello', 'session')'').Single();\r\n\r\n                Assert.Equal(''Exclusive'', lockMode);\r\n            })", prediction=28, span="34-43"];
m5_21 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_AcquiresExclusiveApplicationLock_OnSession()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_AcquiresExclusiveApplicationLock_OnSession()", span="32-32"];
m5_28 [cluster="Unk.Single", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.Single", span=""];
m5_69 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.SqlServer.SqlServerDistributedLock.Dispose()", span="79-79"];
m5_73 [cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m5_0 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", span="14-14"];
m5_1 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", color=green, community=1, file="SqlServerDistributedLockFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerDistributedLock('''', new Mock<IDbConnection>().Object))", prediction=29, span="16-17"];
m5_2 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="Assert.Equal(''resource'', exception.ParamName)", prediction=30, span="19-19"];
m5_3 [cluster="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", span="14-14"];
m5_40 [cluster="System.Threading.Thread.Thread(System.Threading.ThreadStart)", file="SqlServerDistributedLockFacts.cs", label="Entry System.Threading.Thread.Thread(System.Threading.ThreadStart)", span="0-0"];
m5_75 [file="SqlServerDistributedLockFacts.cs", label="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts", span=""];
m5_76 [file="SqlServerDistributedLockFacts.cs", label=releaseLock, span=""];
m5_77 [file="SqlServerDistributedLockFacts.cs", label=lockAcquired, span=""];
m5_78 [file="SqlServerDistributedLockFacts.cs", label=SqlConnection, span=""];
m6_16 [cluster="string.Replace(string, string)", file="SqlServerObjectsInstaller.cs", label="Entry string.Replace(string, string)", span="0-0"];
m6_11 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerObjectsInstaller.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m6_0 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", span="32-32"];
m6_1 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="SqlServerObjectsInstaller.cs", label="connection == null", span="34-34"];
m6_4 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="SqlServerObjectsInstaller.cs", label="!IsSqlEditionSupported(connection)", span="38-38"];
m6_8 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="SqlServerObjectsInstaller.cs", label="connection.Execute(script)", span="49-49"];
m6_2 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''connection'');", span="34-34"];
m6_3 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="SqlServerObjectsInstaller.cs", label="Log.Debug(''Start installing HangFire SQL objects...'')", span="36-36"];
m6_5 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="SqlServerObjectsInstaller.cs", label="throw new PlatformNotSupportedException(''The SQL Server edition of the target server is unsupported, e.g. SQL Azure.'');", span="40-40"];
m6_6 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="SqlServerObjectsInstaller.cs", label="var script = GetStringResource(\r\n                typeof(SqlServerObjectsInstaller).Assembly, \r\n                ''HangFire.SqlServer.Install.sql'')", span="43-45"];
m6_7 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="SqlServerObjectsInstaller.cs", label="script = script.Replace(''SET @TARGET_SCHEMA_VERSION = 2;'', ''SET @TARGET_SCHEMA_VERSION = '' + RequiredSchemaVersion + '';'')", span="47-47"];
m6_9 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="SqlServerObjectsInstaller.cs", label="Log.Debug(''HangFire SQL objects installed.'')", span="51-51"];
m6_10 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="SqlServerObjectsInstaller.cs", label="Exit HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", span="32-32"];
m6_32 [cluster="System.IO.StreamReader.StreamReader(System.IO.Stream)", file="SqlServerObjectsInstaller.cs", label="Entry System.IO.StreamReader.StreamReader(System.IO.Stream)", span="0-0"];
m6_22 [cluster="Unk.Single", file="SqlServerObjectsInstaller.cs", label="Entry Unk.Single", span=""];
m6_30 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="SqlServerObjectsInstaller.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m6_17 [cluster="Unk.Execute", file="SqlServerObjectsInstaller.cs", label="Entry Unk.Execute", span=""];
m6_31 [cluster="string.Format(string, object, object)", file="SqlServerObjectsInstaller.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m6_33 [cluster="System.IO.StreamReader.ReadToEnd()", file="SqlServerObjectsInstaller.cs", label="Entry System.IO.StreamReader.ReadToEnd()", span="0-0"];
m6_12 [cluster="Unk.Debug", file="SqlServerObjectsInstaller.cs", label="Entry Unk.Debug", span=""];
m6_15 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.GetStringResource(System.Reflection.Assembly, string)", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.SqlServer.SqlServerObjectsInstaller.GetStringResource(System.Reflection.Assembly, string)", span="60-60"];
m6_23 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.GetStringResource(System.Reflection.Assembly, string)", file="SqlServerObjectsInstaller.cs", label="var stream = assembly.GetManifestResourceStream(resourceName)", span="62-62"];
m6_25 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.GetStringResource(System.Reflection.Assembly, string)", file="SqlServerObjectsInstaller.cs", label="throw new InvalidOperationException(String.Format(\r\n                        ''Requested resource `{0}` was not found in the assembly `{1}`.'',\r\n                        resourceName,\r\n                        assembly));", span="66-69"];
m6_24 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.GetStringResource(System.Reflection.Assembly, string)", file="SqlServerObjectsInstaller.cs", label="stream == null", span="64-64"];
m6_26 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.GetStringResource(System.Reflection.Assembly, string)", file="SqlServerObjectsInstaller.cs", label="var reader = new StreamReader(stream)", span="72-72"];
m6_27 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.GetStringResource(System.Reflection.Assembly, string)", file="SqlServerObjectsInstaller.cs", label="return reader.ReadToEnd();", span="74-74"];
m6_28 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.GetStringResource(System.Reflection.Assembly, string)", file="SqlServerObjectsInstaller.cs", label="Exit HangFire.SqlServer.SqlServerObjectsInstaller.GetStringResource(System.Reflection.Assembly, string)", span="60-60"];
m6_13 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.IsSqlEditionSupported(SqlConnection)", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.SqlServer.SqlServerObjectsInstaller.IsSqlEditionSupported(SqlConnection)", span="54-54"];
m6_18 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.IsSqlEditionSupported(SqlConnection)", file="SqlServerObjectsInstaller.cs", label="var edition = connection.Query<int>(''SELECT SERVERPROPERTY ( 'EngineEdition' )'').Single()", span="56-56"];
m6_19 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.IsSqlEditionSupported(SqlConnection)", file="SqlServerObjectsInstaller.cs", label="return edition >= SqlEngineEdition.Standard && edition <= SqlEngineEdition.Express;", span="57-57"];
m6_20 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.IsSqlEditionSupported(SqlConnection)", file="SqlServerObjectsInstaller.cs", label="Exit HangFire.SqlServer.SqlServerObjectsInstaller.IsSqlEditionSupported(SqlConnection)", span="54-54"];
m6_29 [cluster="System.Reflection.Assembly.GetManifestResourceStream(string)", file="SqlServerObjectsInstaller.cs", label="Entry System.Reflection.Assembly.GetManifestResourceStream(string)", span="0-0"];
m6_14 [cluster="System.PlatformNotSupportedException.PlatformNotSupportedException(string)", file="SqlServerObjectsInstaller.cs", label="Entry System.PlatformNotSupportedException.PlatformNotSupportedException(string)", span="0-0"];
m7_12 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m7_0 [cluster="Hangfire.Dashboard.RequestDispatcherContext.RequestDispatcherContext(string, Hangfire.JobStorage, System.Collections.Generic.IDictionary<string, object>, System.Text.RegularExpressions.Match)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.Dashboard.RequestDispatcherContext.RequestDispatcherContext(string, Hangfire.JobStorage, System.Collections.Generic.IDictionary<string, object>, System.Text.RegularExpressions.Match)", span="25-25"];
m7_1 [cluster="Hangfire.Dashboard.RequestDispatcherContext.RequestDispatcherContext(string, Hangfire.JobStorage, System.Collections.Generic.IDictionary<string, object>, System.Text.RegularExpressions.Match)", file="SqlServerWriteOnlyTransaction.cs", label="jobStorage == null", span="31-31"];
m7_3 [cluster="Hangfire.Dashboard.RequestDispatcherContext.RequestDispatcherContext(string, Hangfire.JobStorage, System.Collections.Generic.IDictionary<string, object>, System.Text.RegularExpressions.Match)", file="SqlServerWriteOnlyTransaction.cs", label="owinEnvironment == null", span="32-32"];
m7_5 [cluster="Hangfire.Dashboard.RequestDispatcherContext.RequestDispatcherContext(string, Hangfire.JobStorage, System.Collections.Generic.IDictionary<string, object>, System.Text.RegularExpressions.Match)", file="SqlServerWriteOnlyTransaction.cs", label="uriMatch == null", span="33-33"];
m7_7 [cluster="Hangfire.Dashboard.RequestDispatcherContext.RequestDispatcherContext(string, Hangfire.JobStorage, System.Collections.Generic.IDictionary<string, object>, System.Text.RegularExpressions.Match)", file="SqlServerWriteOnlyTransaction.cs", label="AppPath = appPath", span="35-35"];
m7_8 [cluster="Hangfire.Dashboard.RequestDispatcherContext.RequestDispatcherContext(string, Hangfire.JobStorage, System.Collections.Generic.IDictionary<string, object>, System.Text.RegularExpressions.Match)", file="SqlServerWriteOnlyTransaction.cs", label="JobStorage = jobStorage", span="36-36"];
m7_9 [cluster="Hangfire.Dashboard.RequestDispatcherContext.RequestDispatcherContext(string, Hangfire.JobStorage, System.Collections.Generic.IDictionary<string, object>, System.Text.RegularExpressions.Match)", file="SqlServerWriteOnlyTransaction.cs", label="OwinEnvironment = owinEnvironment", span="37-37"];
m7_10 [cluster="Hangfire.Dashboard.RequestDispatcherContext.RequestDispatcherContext(string, Hangfire.JobStorage, System.Collections.Generic.IDictionary<string, object>, System.Text.RegularExpressions.Match)", file="SqlServerWriteOnlyTransaction.cs", label="UriMatch = uriMatch", span="38-38"];
m7_2 [cluster="Hangfire.Dashboard.RequestDispatcherContext.RequestDispatcherContext(string, Hangfire.JobStorage, System.Collections.Generic.IDictionary<string, object>, System.Text.RegularExpressions.Match)", file="SqlServerWriteOnlyTransaction.cs", label="throw new ArgumentNullException(''jobStorage'');", span="31-31"];
m7_4 [cluster="Hangfire.Dashboard.RequestDispatcherContext.RequestDispatcherContext(string, Hangfire.JobStorage, System.Collections.Generic.IDictionary<string, object>, System.Text.RegularExpressions.Match)", file="SqlServerWriteOnlyTransaction.cs", label="throw new ArgumentNullException(''owinEnvironment'');", span="32-32"];
m7_6 [cluster="Hangfire.Dashboard.RequestDispatcherContext.RequestDispatcherContext(string, Hangfire.JobStorage, System.Collections.Generic.IDictionary<string, object>, System.Text.RegularExpressions.Match)", file="SqlServerWriteOnlyTransaction.cs", label="throw new ArgumentNullException(''uriMatch'');", span="33-33"];
m7_11 [cluster="Hangfire.Dashboard.RequestDispatcherContext.RequestDispatcherContext(string, Hangfire.JobStorage, System.Collections.Generic.IDictionary<string, object>, System.Text.RegularExpressions.Match)", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.Dashboard.RequestDispatcherContext.RequestDispatcherContext(string, Hangfire.JobStorage, System.Collections.Generic.IDictionary<string, object>, System.Text.RegularExpressions.Match)", span="25-25"];
m7_13 [file="SqlServerWriteOnlyTransaction.cs", label="Hangfire.Dashboard.RequestDispatcherContext", span=""];
n2 -> n8  [color=darkseagreen4, key=1, label=connection, style=dashed];
n4 -> n7  [color=darkseagreen4, key=1, label=aggregator, style=dashed];
n5 -> n7  [color=darkseagreen4, key=1, label=cts, style=dashed];
m1_18 -> m1_23  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_18 -> m1_25  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_18 -> m1_26  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_55 -> m1_58  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_6 -> m1_10  [color=darkseagreen4, key=1, label=queue, style=dashed];
m1_35 -> m1_41  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_35 -> m1_42  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_37 -> m1_42  [color=darkseagreen4, key=1, label=jobType, style=dashed];
m1_38 -> m1_40  [color=darkseagreen4, key=1, label=queue, style=dashed];
m1_38 -> m1_41  [color=darkseagreen4, key=1, label=queue, style=dashed];
m1_39 -> m1_41  [color=darkseagreen4, key=1, label=recoverFromStates, style=dashed];
m1_39 -> m1_42  [color=darkseagreen4, key=1, label=recoverFromStates, style=dashed];
m1_70 -> m1_72  [color=darkseagreen4, key=1, label="System.Threading.Thread", style=dashed];
m1_76 -> m1_1  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m1_76 -> m1_7  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m1_76 -> m1_10  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m1_76 -> m1_23  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m1_76 -> m1_24  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m1_76 -> m1_25  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m1_76 -> m1_26  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m1_76 -> m1_41  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m1_76 -> m1_42  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m1_76 -> m1_62  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m1_76 -> m1_66  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m2_128 -> m2_133  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_126 -> m2_131  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_126 -> m2_128  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_126 -> m2_134  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_127 -> m2_130  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_156 -> m2_160  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_157 -> m2_159  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_111 -> m2_116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_109 -> m2_114  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_109 -> m2_111  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_109 -> m2_117  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_110 -> m2_113  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_169 -> m2_173  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_170 -> m2_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_55 -> m2_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_53 -> m2_68  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_53 -> m2_55  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_53 -> m2_72  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_53 -> m2_57  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m2_53 -> m2_58  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m2_53 -> m2_59  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m2_53 -> m2_60  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_53 -> m2_76  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_53 -> m2_61  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_54 -> m2_67  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_56 -> m2_59  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_56 -> m2_60  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_56 -> m2_76  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_60 -> m2_75  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_38 -> m2_44  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_38 -> m2_40  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_38 -> m2_48  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_38 -> m2_41  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_38 -> m2_51  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_39 -> m2_43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_40 -> m2_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_41 -> m2_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_119 -> m2_123  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_120 -> m2_122  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_136 -> m2_140  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_137 -> m2_139  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_149 -> m2_153  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_150 -> m2_152  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_12 -> m2_15  [color=darkseagreen4, key=1, label=replayCount, style=dashed];
m2_13 -> m2_15  [color=darkseagreen4, key=1, label=maxReplayCount, style=dashed];
m2_15 -> m2_15  [color=darkseagreen4, key=1, label=replayCount, style=dashed];
m2_143 -> m2_147  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_144 -> m2_146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_102 -> m2_106  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_103 -> m2_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_24 -> m2_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_21 -> m2_28  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_21 -> m2_23  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_21 -> m2_33  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_21 -> m2_24  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_21 -> m2_36  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_22 -> m2_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_23 -> m2_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_91 -> m2_96  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_91 -> m2_93  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_91 -> m2_100  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_92 -> m2_95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_93 -> m2_99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_66 -> m2_80  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m2_66 -> m2_81  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m2_66 -> m2_83  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_66 -> m2_87  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_79 -> m2_81  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_79 -> m2_82  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_79 -> m2_83  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_79 -> m2_87  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_83 -> m2_86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_162 -> m2_166  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_163 -> m2_165  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_194 -> m2_7  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_11  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_14  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_22  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_23  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_24  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_39  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_40  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_41  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_54  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_55  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_60  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_61  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_83  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_92  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_93  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_103  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_110  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_111  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_120  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_127  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_128  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_137  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_144  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_150  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_157  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_163  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_170  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_195 -> m2_28  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_195 -> m2_33  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_195 -> m2_36  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_196 -> m2_28  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m2_196 -> m2_33  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m2_196 -> m2_36  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m2_197 -> m2_44  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_197 -> m2_48  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_197 -> m2_51  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_198 -> m2_68  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_198 -> m2_72  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_198 -> m2_76  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_199 -> m2_68  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m2_200 -> m2_76  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_201 -> m2_87  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_202 -> m2_87  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_203 -> m2_96  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_203 -> m2_100  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_204 -> m2_100  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_205 -> m2_106  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_206 -> m2_114  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_206 -> m2_117  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_207 -> m2_117  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m2_208 -> m2_123  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_209 -> m2_131  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_209 -> m2_134  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_210 -> m2_134  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m2_211 -> m2_140  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_212 -> m2_140  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_213 -> m2_147  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_214 -> m2_147  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_215 -> m2_147  [color=darkseagreen4, key=1, label=double, style=dashed];
m2_216 -> m2_153  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_217 -> m2_153  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_218 -> m2_160  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_219 -> m2_160  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_220 -> m2_166  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_221 -> m2_166  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_222 -> m2_173  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_223 -> m2_173  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_224 -> m2_173  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_117 -> m3_120  [color=darkseagreen4, key=1, label="HangFire.Server.ServerContext", style=dashed];
m3_95 -> m3_98  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_47 -> m3_50  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m3_47 -> m3_55  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m3_47 -> m3_58  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m3_54 -> m3_62  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m3_56 -> m3_61  [color=darkseagreen4, key=1, label=parameterArray, style=dashed];
m3_19 -> m3_22  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m3_19 -> m3_28  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m3_28 -> m3_28  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m3_29 -> m3_35  [color=darkseagreen4, key=1, label=idAndQueue, style=dashed];
m3_29 -> m3_36  [color=darkseagreen4, key=1, label=idAndQueue, style=dashed];
m3_26 -> m3_31  [color=darkseagreen4, key=1, label=fetchConditions, style=dashed];
m3_27 -> m3_31  [color=darkseagreen4, key=1, label=currentQueryIndex, style=dashed];
m3_137 -> m3_137  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m3_102 -> m3_105  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_88 -> m3_91  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_109 -> m3_112  [color=darkseagreen4, key=1, label=double, style=dashed];
m3_142 -> m3_7  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_142 -> m3_11  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_142 -> m3_15  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_142 -> m3_61  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m5_61 -> m5_63  [color=green, key=1, label="lambda expression", style=dashed];
m5_48 -> m5_71  [color=green, key=1, label="System.Action<SqlConnection>", style=dashed];
m5_30 -> m5_46  [color=green, key=1, label=releaseLock, style=dashed];
m5_30 -> m5_52  [color=green, key=1, label=releaseLock, style=dashed];
m5_30 -> m5_36  [color=green, key=1, label=releaseLock, style=dashed];
m5_31 -> m5_46  [color=green, key=1, label=lockAcquired, style=dashed];
m5_31 -> m5_51  [color=green, key=1, label=lockAcquired, style=dashed];
m5_31 -> m5_34  [color=green, key=1, label=lockAcquired, style=dashed];
m5_32 -> m5_37  [color=green, key=1, label=thread, style=dashed];
m5_35 -> m5_54  [color=green, key=1, label="lambda expression", style=dashed];
m5_46 -> m5_49  [color=green, key=1, label="lambda expression", style=dashed];
m5_54 -> m5_58  [color=green, key=1, label=SqlConnection, style=dashed];
m5_55 -> m5_57  [color=green, key=1, label="lambda expression", style=dashed];
m5_12 -> m5_15  [color=green, key=1, label="lambda expression", style=dashed];
m5_20 -> m5_23  [color=green, key=1, label="lambda expression", style=dashed];
m5_1 -> m5_6  [color=green, key=1, label="lambda expression", style=dashed];
m5_75 -> m5_46  [color=green, key=1, label="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts", style=dashed];
m5_75 -> m5_35  [color=green, key=1, label="HangFire.SqlServer.Tests.SqlServerDistributedLockFacts", style=dashed];
m5_76 -> m5_46  [color=green, key=1, label=releaseLock, style=dashed];
m5_76 -> m5_52  [color=green, key=1, label=releaseLock, style=dashed];
m5_77 -> m5_46  [color=green, key=1, label=lockAcquired, style=dashed];
m5_77 -> m5_51  [color=green, key=1, label=lockAcquired, style=dashed];
m5_78 -> m5_58  [color=green, key=1, label=SqlConnection, style=dashed];
m6_0 -> m6_4  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_0 -> m6_8  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m6_15 -> m6_25  [color=darkseagreen4, key=1, label="System.Reflection.Assembly", style=dashed];
m7_0 -> m7_3  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, object>", style=dashed];
m7_0 -> m7_5  [color=darkseagreen4, key=1, label="System.Text.RegularExpressions.Match", style=dashed];
}
