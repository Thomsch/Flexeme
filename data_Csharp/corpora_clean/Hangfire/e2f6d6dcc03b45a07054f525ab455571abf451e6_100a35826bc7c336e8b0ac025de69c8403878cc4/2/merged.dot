digraph  {
d1 [label="LogManager.Adapter = new ConsoleOutLoggerFactoryAdapter(\r\n                LogLevel.Trace, false, false, true, '''')", span="13-14", cluster="ConsoleSample.Program.Main()", color=green, community=0];
d0 [label="Entry ConsoleSample.Program.Main()", span="11-11", cluster="ConsoleSample.Program.Main()"];
d2 [label="JobStorage.Current = \r\n                new SqlServerStorage(@''Server=.\sqlexpress;Database=HangFire.Sample;Trusted_Connection=True;'')", span="16-17", cluster="ConsoleSample.Program.Main()", color=green, community=0];
d54 [label="Entry ConsoleOutLoggerFactoryAdapter.cstr", span="", cluster="ConsoleOutLoggerFactoryAdapter.cstr"];
d3 [label="var server = new BackgroundJobServer(''critical'', ''default'')", span="20-20", cluster="ConsoleSample.Program.Main()", color=green, community=0];
d55 [label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="30-30", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)"];
d4 [label="var count = 1", span="22-22", cluster="ConsoleSample.Program.Main()", color=green, community=0];
d56 [label="Entry HangFire.BackgroundJobServer.BackgroundJobServer(params string[])", span="36-36", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(params string[])"];
d9 [label="server.Start()", span="35-35", cluster="ConsoleSample.Program.Main()", color=green, community=0];
d5 [label=true, span="24-24", cluster="ConsoleSample.Program.Main()", color=green, community=0];
d43 [label="var number = count++", span="94-94", cluster="ConsoleSample.Program.Main()"];
d8 [label="command.Equals(''start'', StringComparison.OrdinalIgnoreCase)", span="33-33", cluster="ConsoleSample.Program.Main()", color=green, community=0];
d10 [label="command.StartsWith(''add'', StringComparison.OrdinalIgnoreCase)", span="38-38", cluster="ConsoleSample.Program.Main()", color=green, community=0];
d59 [label="Entry HangFire.BackgroundJobServer.Start()", span="63-63", cluster="HangFire.BackgroundJobServer.Start()"];
d45 [label="command.StartsWith(''fast'', StringComparison.OrdinalIgnoreCase)", span="98-98", cluster="ConsoleSample.Program.Main()"];
d48 [label="Console.WriteLine(''Jobs enqueued.'')", span="114-114", cluster="ConsoleSample.Program.Main()"];
d50 [label="Console.WriteLine(ex.Message)", span="118-118", cluster="ConsoleSample.Program.Main()"];
d6 [label="var command = Console.ReadLine()", span="26-26", cluster="ConsoleSample.Program.Main()", color=green, community=0];
d51 [label="Console.WriteLine(''Press Enter to exit...'')", span="124-124", cluster="ConsoleSample.Program.Main()"];
d7 [label="command == null || command.Equals(''stop'', StringComparison.OrdinalIgnoreCase)", span="28-28", cluster="ConsoleSample.Program.Main()", color=green, community=0];
d57 [label="Entry System.Console.ReadLine()", span="0-0", cluster="System.Console.ReadLine()"];
d11 [label="var workCount = int.Parse(command.Substring(4))", span="42-42", cluster="ConsoleSample.Program.Main()", color=green, community=0];
d20 [label="command.StartsWith(''static'', StringComparison.OrdinalIgnoreCase)", span="56-56", cluster="ConsoleSample.Program.Main()"];
d21 [label="var workCount = int.Parse(command.Substring(7))", span="60-60", cluster="ConsoleSample.Program.Main()"];
d29 [label="command.StartsWith(''error'', StringComparison.OrdinalIgnoreCase)", span="73-73", cluster="ConsoleSample.Program.Main()"];
d30 [label="var workCount = int.Parse(command.Substring(6))", span="75-75", cluster="ConsoleSample.Program.Main()"];
d35 [label="command.StartsWith(''args'', StringComparison.OrdinalIgnoreCase)", span="82-82", cluster="ConsoleSample.Program.Main()"];
d36 [label="var workCount = int.Parse(command.Substring(5))", span="84-84", cluster="ConsoleSample.Program.Main()"];
d41 [label="command.StartsWith(''in'', StringComparison.OrdinalIgnoreCase)", span="91-91", cluster="ConsoleSample.Program.Main()"];
d42 [label="var seconds = int.Parse(command.Substring(2))", span="93-93", cluster="ConsoleSample.Program.Main()"];
d46 [label="var workCount = int.Parse(command.Substring(5))", span="102-102", cluster="ConsoleSample.Program.Main()"];
d58 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)"];
d60 [label="Entry string.StartsWith(string, System.StringComparison)", span="0-0", cluster="string.StartsWith(string, System.StringComparison)"];
d12 [label="var i = 0", span="43-43", cluster="ConsoleSample.Program.Main()", color=green, community=0];
d61 [label="Entry string.Substring(int)", span="0-0", cluster="string.Substring(int)"];
d62 [label="Entry int.Parse(string)", span="0-0", cluster="int.Parse(string)"];
d13 [label="i < workCount", span="43-43", cluster="ConsoleSample.Program.Main()", color=green, community=0];
d14 [label="var number = i", span="45-45", cluster="ConsoleSample.Program.Main()"];
d16 [label="i++", span="43-43", cluster="ConsoleSample.Program.Main()", color=green, community=0];
d17 [label="Console.WriteLine(''Jobs enqueued.'')", span="48-48", cluster="ConsoleSample.Program.Main()"];
d15 [label="BackgroundJob.Enqueue<Services>(x => x.Random(number))", span="46-46", cluster="ConsoleSample.Program.Main()"];
d53 [label="Exit ConsoleSample.Program.Main()", span="11-11", cluster="ConsoleSample.Program.Main()"];
d44 [label="BackgroundJob.Schedule<Services>(x => x.Random(number), TimeSpan.FromSeconds(seconds))", span="95-95", cluster="ConsoleSample.Program.Main()"];
d88 [label="x.Random(number)", span="95-95", cluster="lambda expression"];
d47 [label="Parallel.For(0, workCount, i =>\r\n                            {\r\n                                if (i % 2 == 0)\r\n                                {\r\n                                    BackgroundJob.Enqueue<Services>(x => x.EmptyCritical());\r\n                                }\r\n                                else\r\n                                {\r\n                                    BackgroundJob.Enqueue<Services>(x => x.EmptyDefault());\r\n                                }\r\n                            })", span="103-113", cluster="ConsoleSample.Program.Main()"];
d49 [label=Exception, span="116-116", cluster="ConsoleSample.Program.Main()"];
d64 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)"];
d52 [label="Console.ReadLine()", span="125-125", cluster="ConsoleSample.Program.Main()"];
d19 [label="Console.WriteLine(ex.Message)", span="52-52", cluster="ConsoleSample.Program.Main()"];
d22 [label="var i = 0", span="61-61", cluster="ConsoleSample.Program.Main()"];
d23 [label="i < workCount", span="61-61", cluster="ConsoleSample.Program.Main()"];
d26 [label="Console.WriteLine(''Jobs enqueued.'')", span="65-65", cluster="ConsoleSample.Program.Main()"];
d28 [label="Console.WriteLine(ex.Message)", span="69-69", cluster="ConsoleSample.Program.Main()"];
d31 [label="var i = 0", span="76-76", cluster="ConsoleSample.Program.Main()"];
d32 [label="i < workCount", span="76-76", cluster="ConsoleSample.Program.Main()"];
d37 [label="var i = 0", span="85-85", cluster="ConsoleSample.Program.Main()"];
d38 [label="i < workCount", span="85-85", cluster="ConsoleSample.Program.Main()"];
d70 [label="x.Random(number)", span="46-46", cluster="lambda expression"];
d18 [label=Exception, span="50-50", cluster="ConsoleSample.Program.Main()"];
d63 [label="Entry HangFire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)", span="77-77", cluster="HangFire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)"];
d69 [label="Entry lambda expression", span="46-46", cluster="lambda expression"];
d66 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)"];
d67 [label="Entry HangFire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", span="147-147", cluster="HangFire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)"];
d87 [label="Entry lambda expression", span="95-95", cluster="lambda expression"];
d104 [label=number, span=""];
d89 [label="Exit lambda expression", span="95-95", cluster="lambda expression"];
d72 [label="Entry ConsoleSample.Services.Random(int)", span="28-28", cluster="ConsoleSample.Services.Random(int)"];
d68 [label="Entry System.Threading.Tasks.Parallel.For(int, int, System.Action<int>)", span="0-0", cluster="System.Threading.Tasks.Parallel.For(int, int, System.Action<int>)"];
d90 [label="Entry lambda expression", span="103-113", cluster="lambda expression"];
d25 [label="i++", span="61-61", cluster="ConsoleSample.Program.Main()"];
d24 [label="BackgroundJob.Enqueue(() => Console.WriteLine(''Hello, {0}!'', ''world''))", span="63-63", cluster="ConsoleSample.Program.Main()"];
d27 [label=Exception, span="67-67", cluster="ConsoleSample.Program.Main()"];
d34 [label="i++", span="76-76", cluster="ConsoleSample.Program.Main()"];
d33 [label="BackgroundJob.Enqueue<Services>(x => x.Error())", span="78-78", cluster="ConsoleSample.Program.Main()"];
d40 [label="i++", span="85-85", cluster="ConsoleSample.Program.Main()"];
d39 [label="BackgroundJob.Enqueue<Services>(x => x.Args(Guid.NewGuid().ToString(), 14442, DateTime.UtcNow))", span="87-87", cluster="ConsoleSample.Program.Main()"];
d103 [label=number, span=""];
d71 [label="Exit lambda expression", span="46-46", cluster="lambda expression"];
d92 [label="BackgroundJob.Enqueue<Services>(x => x.EmptyCritical())", span="107-107", cluster="lambda expression"];
d93 [label="BackgroundJob.Enqueue<Services>(x => x.EmptyDefault())", span="111-111", cluster="lambda expression"];
d94 [label="Exit lambda expression", span="103-113", cluster="lambda expression"];
d91 [label="i % 2 == 0", span="105-105", cluster="lambda expression"];
d65 [label="Entry HangFire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", span="59-59", cluster="HangFire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)"];
d73 [label="Entry lambda expression", span="63-63", cluster="lambda expression"];
d77 [label="Entry lambda expression", span="78-78", cluster="lambda expression"];
d81 [label="Entry lambda expression", span="87-87", cluster="lambda expression"];
d95 [label="Entry lambda expression", span="107-107", cluster="lambda expression"];
d99 [label="Entry lambda expression", span="111-111", cluster="lambda expression"];
d75 [label="Exit lambda expression", span="63-63", cluster="lambda expression"];
d74 [label="Console.WriteLine(''Hello, {0}!'', ''world'')", span="63-63", cluster="lambda expression"];
d79 [label="Exit lambda expression", span="78-78", cluster="lambda expression"];
d78 [label="x.Error()", span="78-78", cluster="lambda expression"];
d83 [label="Exit lambda expression", span="87-87", cluster="lambda expression"];
d82 [label="x.Args(Guid.NewGuid().ToString(), 14442, DateTime.UtcNow)", span="87-87", cluster="lambda expression"];
d97 [label="Exit lambda expression", span="107-107", cluster="lambda expression"];
d96 [label="x.EmptyCritical()", span="107-107", cluster="lambda expression"];
d101 [label="Exit lambda expression", span="111-111", cluster="lambda expression"];
d100 [label="x.EmptyDefault()", span="111-111", cluster="lambda expression"];
d76 [label="Entry System.Console.WriteLine(string, object)", span="0-0", cluster="System.Console.WriteLine(string, object)"];
d80 [label="Entry ConsoleSample.Services.Error()", span="21-21", cluster="ConsoleSample.Services.Error()"];
d84 [label="Entry System.Guid.NewGuid()", span="0-0", cluster="System.Guid.NewGuid()"];
d85 [label="Entry System.Guid.ToString()", span="0-0", cluster="System.Guid.ToString()"];
d86 [label="Entry ConsoleSample.Services.Args(string, int, System.DateTime)", span="45-45", cluster="ConsoleSample.Services.Args(string, int, System.DateTime)"];
d98 [label="Entry ConsoleSample.Services.EmptyCritical()", span="16-16", cluster="ConsoleSample.Services.EmptyCritical()"];
d102 [label="Entry ConsoleSample.Services.EmptyDefault()", span="11-11", cluster="ConsoleSample.Services.EmptyDefault()"];
m1_25 [label="Entry Unk.ErrorFormat", span="", cluster="Unk.ErrorFormat", file="FailedState.feature.cs"];
m1_4 [label="Entry HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", span="35-35", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="FailedState.feature.cs"];
m1_5 [label="var failedState = context.CandidateState as FailedState", span="37-37", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs"];
m1_6 [label="failedState == null", span="38-38", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs"];
m1_14 [label="Logger.WarnFormat(\r\n                        ''Failed to process the job '{0}': an exception occurred. Retry attempt {1} of {2} will be performed in {3}.'',\r\n                        failedState.Exception,\r\n                        context.JobId,\r\n                        retryAttempt,\r\n                        Attempts,\r\n                        delay)", span="61-67", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs"];
m1_16 [label="Logger.ErrorFormat(\r\n                        ''Failed to process the job '{0}': an exception occurred.'',\r\n                        failedState.Exception,\r\n                        context.JobId)", span="74-77", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs"];
m1_8 [label="var retryAttempt = context.GetJobParameter<int>(''RetryCount'') + 1", span="44-44", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs"];
m1_9 [label="retryAttempt <= Attempts", span="46-46", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs"];
m1_10 [label="var delay = TimeSpan.FromSeconds(SecondsToDelay(retryAttempt))", span="48-48", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs"];
m1_11 [label="context.SetJobParameter(''RetryCount'', retryAttempt)", span="50-50", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs"];
m1_12 [label="context.CandidateState = new ScheduledState(delay)\r\n                {\r\n                    Reason = String.Format(''Retry attempt {0} of {1}'', retryAttempt, Attempts)\r\n                }", span="54-57", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs"];
m1_13 [label=LogEvents, span="59-59", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs"];
m1_15 [label=LogEvents, span="72-72", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs"];
m1_7 [label="return;", span="41-41", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs"];
m1_17 [label="Exit HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", span="35-35", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="FailedState.feature.cs"];
m1_23 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="FailedState.feature.cs"];
m1_0 [label="Entry HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", span="14-14", cluster="HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", file="FailedState.feature.cs"];
m1_1 [label="Attempts = DefaultRetryAttempts", span="16-16", cluster="HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", color=green, community=0, file="FailedState.feature.cs"];
m1_2 [label="LogEvents = true", span="17-17", cluster="HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", color=green, community=0, file="FailedState.feature.cs"];
m1_3 [label="Exit HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", span="14-14", cluster="HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", file="FailedState.feature.cs"];
m1_22 [label="Entry HangFire.States.ScheduledState.ScheduledState(System.TimeSpan)", span="27-27", cluster="HangFire.States.ScheduledState.ScheduledState(System.TimeSpan)", file="FailedState.feature.cs"];
m1_18 [label="Entry HangFire.States.ElectStateContext.GetJobParameter<T>(string)", span="54-54", cluster="HangFire.States.ElectStateContext.GetJobParameter<T>(string)", file="FailedState.feature.cs"];
m1_29 [label="Entry System.Random.Random()", span="0-0", cluster="System.Random.Random()", file="FailedState.feature.cs"];
m1_19 [label="Entry HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", span="83-83", cluster="HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", file="FailedState.feature.cs"];
m1_26 [label="var random = new Random()", span="85-85", cluster="HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", color=green, community=0, file="FailedState.feature.cs"];
m1_27 [label="return (int)Math.Round(\r\n                Math.Pow(retryCount - 1, 4) + 15 + (random.Next(30) * (retryCount)));", span="86-87", cluster="HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", color=green, community=0, file="FailedState.feature.cs"];
m1_28 [label="Exit HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", span="83-83", cluster="HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", file="FailedState.feature.cs"];
m1_24 [label="Entry Unk.WarnFormat", span="", cluster="Unk.WarnFormat", file="FailedState.feature.cs"];
m1_31 [label="Entry System.Random.Next(int)", span="0-0", cluster="System.Random.Next(int)", file="FailedState.feature.cs"];
m1_32 [label="Entry System.Math.Round(double)", span="0-0", cluster="System.Math.Round(double)", file="FailedState.feature.cs"];
m1_30 [label="Entry System.Math.Pow(double, double)", span="0-0", cluster="System.Math.Pow(double, double)", file="FailedState.feature.cs"];
m1_21 [label="Entry HangFire.States.ElectStateContext.SetJobParameter<T>(string, T)", span="49-49", cluster="HangFire.States.ElectStateContext.SetJobParameter<T>(string, T)", file="FailedState.feature.cs"];
m1_33 [label="HangFire.AutomaticRetryAttribute", span="", file="FailedState.feature.cs"];
m2_25 [label="Entry Unk.OnScenarioStart", span="", cluster="Unk.OnScenarioStart", file="JobFetcher.feature.cs"];
m2_29 [label="Entry Unk.CollectScenarioErrors", span="", cluster="Unk.CollectScenarioErrors", file="JobFetcher.feature.cs"];
m2_21 [label="Entry Unk.OnScenarioEnd", span="", cluster="Unk.OnScenarioEnd", file="JobFetcher.feature.cs"];
m2_55 [label="Entry HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="119-119", cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs"];
m2_56 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher returns null when it tries to dequeue a job from an empty queue'', ((string[])(null)))", span="121-121", cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs"];
m2_57 [label="this.ScenarioSetup(scenarioInfo)", span="123-123", cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs"];
m2_58 [label="testRunner.Given(''an empty queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="125-125", cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs"];
m2_59 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="127-127", cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_60 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="129-129", cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_61 [label="testRunner.Then(''the fetcher returns null'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="131-131", cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_62 [label="this.ScenarioCleanup()", span="133-133", cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs"];
m2_63 [label="Exit HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="119-119", cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs"];
m2_41 [label="Entry Unk.And", span="", cluster="Unk.And", file="JobFetcher.feature.cs"];
m2_54 [label="Entry Unk.But", span="", cluster="Unk.But", file="JobFetcher.feature.cs"];
m2_5 [label="Entry Unk.GetTestRunner", span="", cluster="Unk.GetTestRunner", file="JobFetcher.feature.cs"];
m2_26 [label="Entry HangFire.Tests.JobFetcherFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.JobFetcherFeature.ScenarioCleanup()", file="JobFetcher.feature.cs"];
m2_27 [label="testRunner.CollectScenarioErrors()", span="68-68", cluster="HangFire.Tests.JobFetcherFeature.ScenarioCleanup()", file="JobFetcher.feature.cs"];
m2_28 [label="Exit HangFire.Tests.JobFetcherFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.JobFetcherFeature.ScenarioCleanup()", file="JobFetcher.feature.cs"];
m2_0 [label="Entry HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs"];
m2_1 [label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32", cluster="HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs"];
m2_2 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''JobFetcher'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34", cluster="HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs"];
m2_3 [label="testRunner.OnFeatureStart(featureInfo)", span="35-35", cluster="HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs"];
m2_4 [label="Exit HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs"];
m2_76 [label="Entry HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", span="167-167", cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs"];
m2_77 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher listens only specified queue'', ((string[])(null)))", span="169-169", cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs"];
m2_78 [label="this.ScenarioSetup(scenarioInfo)", span="171-171", cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs"];
m2_79 [label="testRunner.Given(''a job in the \'another\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="173-173", cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs"];
m2_80 [label="testRunner.And(''the fetcher listening the \'default\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="175-175", cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_81 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="177-177", cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_82 [label="testRunner.Then(''the fetcher returns null'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="179-179", cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_83 [label="this.ScenarioCleanup()", span="181-181", cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs"];
m2_84 [label="Exit HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", span="167-167", cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs"];
m2_9 [label="Entry HangFire.Tests.JobFetcherFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.JobFetcherFeature.FeatureTearDown()", file="JobFetcher.feature.cs"];
m2_10 [label="testRunner.OnFeatureEnd()", span="41-41", cluster="HangFire.Tests.JobFetcherFeature.FeatureTearDown()", file="JobFetcher.feature.cs"];
m2_11 [label="testRunner = null", span="42-42", cluster="HangFire.Tests.JobFetcherFeature.FeatureTearDown()", file="JobFetcher.feature.cs"];
m2_12 [label="Exit HangFire.Tests.JobFetcherFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.JobFetcherFeature.FeatureTearDown()", file="JobFetcher.feature.cs"];
m2_13 [label="Entry Unk.OnFeatureEnd", span="", cluster="Unk.OnFeatureEnd", file="JobFetcher.feature.cs"];
m2_7 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="JobFetcher.feature.cs"];
m2_42 [label="Entry Unk.When", span="", cluster="Unk.When", file="JobFetcher.feature.cs"];
m2_30 [label="Entry HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", span="75-75", cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m2_31 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher returns job id when it dequeues a job'', ((string[])(null)))", span="77-77", cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m2_32 [label="this.ScenarioSetup(scenarioInfo)", span="79-79", cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m2_33 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81", cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m2_34 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83", cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_35 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85", cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_36 [label="testRunner.Then(''the fetcher returns the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="87-87", cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_37 [label="this.ScenarioCleanup()", span="89-89", cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m2_38 [label="Exit HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", span="75-75", cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m2_44 [label="Entry HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="96-96", cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs"];
m2_45 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher removes the dequeued job from the queue and adds it to the dequeued list'', ((string[])(null)))", span="98-98", cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs"];
m2_46 [label="this.ScenarioSetup(scenarioInfo)", span="100-100", cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs"];
m2_47 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="102-102", cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs"];
m2_48 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="104-104", cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_49 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="106-106", cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_50 [label="testRunner.Then(''the queue does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="108-108", cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_51 [label="testRunner.But(''the dequeued jobs list contains it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="110-110", cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_52 [label="this.ScenarioCleanup()", span="112-112", cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs"];
m2_53 [label="Exit HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="96-96", cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs"];
m2_64 [label="Entry HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", span="140-140", cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs"];
m2_65 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher dequeues jobs in the FIFO order'', ((string[])(null)))", span="142-142", cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs"];
m2_66 [label="this.ScenarioSetup(scenarioInfo)", span="144-144", cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs"];
m2_67 [label="testRunner.Given(''the \'first\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="146-146", cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs"];
m2_68 [label="testRunner.And(''the \'second\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="148-148", cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_69 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="150-150", cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_70 [label="testRunner.When(''it dequeues a job for the first time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="152-152", cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_71 [label="testRunner.Then(''the fetcher returns the \'first\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="154-154", cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_72 [label="testRunner.When(''it dequeues a job for the second time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="156-156", cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_73 [label="testRunner.Then(''the fetcher returns the \'second\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="158-158", cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_74 [label="this.ScenarioCleanup()", span="160-160", cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs"];
m2_75 [label="Exit HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", span="140-140", cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs"];
m2_39 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="JobFetcher.feature.cs"];
m2_43 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="JobFetcher.feature.cs"];
m2_40 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="JobFetcher.feature.cs"];
m2_85 [label="Entry HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", span="188-188", cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m2_86 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher sets the \'fetched\' flag when it dequeues a job'', ((string[])(null)))", span="190-190", cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m2_87 [label="this.ScenarioSetup(scenarioInfo)", span="192-192", cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m2_88 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="194-194", cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m2_89 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="196-196", cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_90 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="198-198", cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_91 [label="testRunner.Then(''the job has the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="200-200", cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", color=red, community=0, file="JobFetcher.feature.cs"];
m2_92 [label="this.ScenarioCleanup()", span="202-202", cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m2_93 [label="Exit HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", span="188-188", cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m2_6 [label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span="", cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="JobFetcher.feature.cs"];
m2_14 [label="Entry HangFire.Tests.JobFetcherFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs"];
m2_15 [label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''JobFetcher''))", span="48-49", cluster="HangFire.Tests.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs"];
m2_16 [label="HangFire.Tests.JobFetcherFeature.FeatureSetup(null)", span="51-51", cluster="HangFire.Tests.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs"];
m2_17 [label="Exit HangFire.Tests.JobFetcherFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs"];
m2_18 [label="Entry HangFire.Tests.JobFetcherFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.JobFetcherFeature.ScenarioTearDown()", file="JobFetcher.feature.cs"];
m2_19 [label="testRunner.OnScenarioEnd()", span="58-58", cluster="HangFire.Tests.JobFetcherFeature.ScenarioTearDown()", file="JobFetcher.feature.cs"];
m2_20 [label="Exit HangFire.Tests.JobFetcherFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.JobFetcherFeature.ScenarioTearDown()", file="JobFetcher.feature.cs"];
m2_22 [label="Entry HangFire.Tests.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobFetcher.feature.cs"];
m2_23 [label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63", cluster="HangFire.Tests.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobFetcher.feature.cs"];
m2_24 [label="Exit HangFire.Tests.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobFetcher.feature.cs"];
m2_8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", file="JobFetcher.feature.cs"];
m2_94 [label="HangFire.Tests.JobFetcherFeature", span="", file="JobFetcher.feature.cs"];
m3_6 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="JobFetcherSteps.cs"];
m3_24 [label="Entry Hangfire.SqlServer.CountersAggregator.GetAggregationQuery()", span="72-72", cluster="Hangfire.SqlServer.CountersAggregator.GetAggregationQuery()", file="JobFetcherSteps.cs"];
m3_31 [label="return @''\r\nDECLARE @RecordsToAggregate TABLE\r\n(\r\n	[Key] NVARCHAR(100) NOT NULL,\r\n	[Value] SMALLINT NOT NULL,\r\n	[ExpireAt] DATETIME NULL\r\n)\r\n\r\nSET TRANSACTION ISOLATION LEVEL READ COMMITTED\r\nBEGIN TRAN\r\n\r\nDELETE TOP (@count) [HangFire].[Counter] with (readpast)\r\nOUTPUT DELETED.[Key], DELETED.[Value], DELETED.[ExpireAt] INTO @RecordsToAggregate\r\n\r\nSET NOCOUNT ON\r\n\r\n;MERGE [HangFire].[AggregatedCounter] AS [Target]\r\nUSING (\r\n	SELECT [Key], SUM([Value]) as [Value], MAX([ExpireAt]) AS [ExpireAt] FROM @RecordsToAggregate\r\n	GROUP BY [Key]) AS [Source] ([Key], [Value], [ExpireAt])\r\nON [Target].[Key] = [Source].[Key]\r\nWHEN MATCHED THEN UPDATE SET \r\n	[Target].[Value] = [Target].[Value] + [Source].[Value],\r\n	[Target].[ExpireAt] = (SELECT MAX([ExpireAt]) FROM (VALUES ([Source].ExpireAt), ([Target].[ExpireAt])) AS MaxExpireAt([ExpireAt]))\r\nWHEN NOT MATCHED THEN INSERT ([Key], [Value], [ExpireAt]) VALUES ([Source].[Key], [Source].[Value], [Source].[ExpireAt]);\r\n\r\nCOMMIT TRAN'';", span="74-100", cluster="Hangfire.SqlServer.CountersAggregator.GetAggregationQuery()", color=green, community=0, file="JobFetcherSteps.cs"];
m3_32 [label="Exit Hangfire.SqlServer.CountersAggregator.GetAggregationQuery()", span="72-72", cluster="Hangfire.SqlServer.CountersAggregator.GetAggregationQuery()", file="JobFetcherSteps.cs"];
m3_0 [label="Entry Hangfire.DashboardOptions.DashboardOptions()", span="23-23", cluster="Hangfire.DashboardOptions.DashboardOptions()", file="JobFetcherSteps.cs"];
m3_3 [label="Exit Hangfire.DashboardOptions.DashboardOptions()", span="23-23", cluster="Hangfire.DashboardOptions.DashboardOptions()", file="JobFetcherSteps.cs"];
m3_4 [label="Entry Hangfire.Dashboard.LocalRequestsOnlyAuthorizationFilter.LocalRequestsOnlyAuthorizationFilter()", span="22-22", cluster="Hangfire.Dashboard.LocalRequestsOnlyAuthorizationFilter.LocalRequestsOnlyAuthorizationFilter()", file="JobFetcherSteps.cs"];
m3_1 [label="AppPath = ''/''", span="25-25", cluster="Hangfire.DashboardOptions.DashboardOptions()", file="JobFetcherSteps.cs"];
m3_2 [label="AuthorizationFilters = new[] { new LocalRequestsOnlyAuthorizationFilter() }", span="26-26", cluster="Hangfire.DashboardOptions.DashboardOptions()", file="JobFetcherSteps.cs"];
m3_5 [label="Hangfire.DashboardOptions", span="", cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="JobFetcherSteps.cs"];
m3_19 [label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0", cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="JobFetcherSteps.cs"];
m3_30 [label="Entry System.Type.ToString()", span="0-0", cluster="System.Type.ToString()", file="JobFetcherSteps.cs"];
m3_25 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="JobFetcherSteps.cs"];
m3_7 [label="Entry Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", span="42-42", cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="JobFetcherSteps.cs"];
m3_12 [label="cancellationToken.WaitHandle.WaitOne(DelayBetweenPasses)", span="59-59", cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", color=green, community=0, file="JobFetcherSteps.cs"];
m3_11 [label="removedCount >= NumberOfRecordsInSinglePass", span="57-57", cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", color=green, community=0, file="JobFetcherSteps.cs"];
m3_13 [label="cancellationToken.ThrowIfCancellationRequested()", span="60-60", cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", color=green, community=0, file="JobFetcherSteps.cs"];
m3_15 [label="cancellationToken.WaitHandle.WaitOne(_interval)", span="64-64", cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", color=green, community=0, file="JobFetcherSteps.cs"];
m3_14 [label="removedCount >= NumberOfRecordsInSinglePass", span="62-62", cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", color=green, community=0, file="JobFetcherSteps.cs"];
m3_10 [label="_storage.UseConnection(connection =>\r\n                {\r\n                    removedCount = connection.Execute(\r\n                        GetAggregationQuery(),\r\n                        new { now = DateTime.UtcNow, count = NumberOfRecordsInSinglePass });\r\n                })", span="50-55", cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", color=green, community=0, file="JobFetcherSteps.cs"];
m3_9 [label="int removedCount = 0", span="46-46", cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="JobFetcherSteps.cs"];
m3_8 [label="Logger.DebugFormat(''Aggregating records in 'Counter' table...'')", span="44-44", cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="JobFetcherSteps.cs"];
m3_16 [label="Exit Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", span="42-42", cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="JobFetcherSteps.cs"];
m3_26 [label="Entry Hangfire.SqlServer.CountersAggregator.ToString()", span="67-67", cluster="Hangfire.SqlServer.CountersAggregator.ToString()", file="JobFetcherSteps.cs"];
m3_27 [label="return GetType().ToString();", span="69-69", cluster="Hangfire.SqlServer.CountersAggregator.ToString()", file="JobFetcherSteps.cs"];
m3_28 [label="Exit Hangfire.SqlServer.CountersAggregator.ToString()", span="67-67", cluster="Hangfire.SqlServer.CountersAggregator.ToString()", file="JobFetcherSteps.cs"];
m3_17 [label="Entry Hangfire.Logging.ILog.DebugFormat(string, params object[])", span="122-122", cluster="Hangfire.Logging.ILog.DebugFormat(string, params object[])", file="JobFetcherSteps.cs"];
m3_18 [label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", span="173-173", cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", file="JobFetcherSteps.cs"];
m3_29 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="JobFetcherSteps.cs"];
m3_21 [label="Entry lambda expression", span="50-55", cluster="lambda expression", file="JobFetcherSteps.cs"];
m3_22 [label="removedCount = connection.Execute(\r\n                        GetAggregationQuery(),\r\n                        new { now = DateTime.UtcNow, count = NumberOfRecordsInSinglePass })", span="52-54", cluster="lambda expression", color=green, community=0, file="JobFetcherSteps.cs"];
m3_23 [label="Exit lambda expression", span="50-55", cluster="lambda expression", file="JobFetcherSteps.cs"];
m3_20 [label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0", cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="JobFetcherSteps.cs"];
m3_33 [label="Hangfire.SqlServer.CountersAggregator", span="", file="JobFetcherSteps.cs"];
m4_15 [label="Entry Unk.>", span="", cluster="Unk.>", file="JobState.cs"];
m4_40 [label="Entry HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", span="57-57", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="JobState.cs"];
m4_41 [label="var options = CreateOptions()", span="59-59", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="JobState.cs"];
m4_42 [label="Assert.Throws<ArgumentException>(\r\n                () => options.Queues = new string[0])", span="61-62", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="JobState.cs"];
m4_43 [label="Exit HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", span="57-57", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="JobState.cs"];
m4_0 [label="Entry HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", span="9-9", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="JobState.cs"];
m4_1 [label="var options = CreateOptions()", span="11-11", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="JobState.cs"];
m4_10 [label="Entry Unk.True", span="", cluster="Unk.True", file="JobState.cs"];
m4_33 [label="Entry HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", span="48-48", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", file="JobState.cs"];
m4_34 [label="var options = CreateOptions()", span="50-50", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", color=green, community=0, file="JobState.cs"];
m4_35 [label="Assert.Throws<ArgumentNullException>(\r\n                () => options.Queues = null)", span="52-53", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", color=green, community=0, file="JobState.cs"];
m4_36 [label="Exit HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", span="48-48", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", file="JobState.cs"];
m4_49 [label="Entry HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="11-11", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobState.cs"];
m4_2 [label="Entry HangFire.RetryAttribute.RetryAttribute(int)", span="27-27", cluster="HangFire.RetryAttribute.RetryAttribute(int)", file="JobState.cs"];
m4_3 [label="Attempts = attempts", span="29-29", cluster="HangFire.RetryAttribute.RetryAttribute(int)", file="JobState.cs"];
m4_4 [label="Exit HangFire.RetryAttribute.RetryAttribute(int)", span="27-27", cluster="HangFire.RetryAttribute.RetryAttribute(int)", file="JobState.cs"];
m4_5 [label="HangFire.RetryAttribute", span="", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="JobState.cs"];
m4_6 [label="Assert.True(options.SchedulePollingInterval > TimeSpan.Zero)", span="17-17", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="JobState.cs"];
m4_7 [label="Exit HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", span="9-9", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="JobState.cs"];
m4_8 [label="Entry HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.CreateOptions()", span="65-65", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.CreateOptions()", file="JobState.cs"];
m4_47 [label="return new BackgroundJobServerOptions();", span="67-67", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.CreateOptions()", file="JobState.cs"];
m4_48 [label="Exit HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.CreateOptions()", span="65-65", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.CreateOptions()", file="JobState.cs"];
m4_9 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="JobState.cs"];
m4_19 [label="Entry HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", span="30-30", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", file="JobState.cs"];
m4_20 [label="var options = CreateOptions()", span="32-32", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", file="JobState.cs"];
m4_21 [label="Assert.Throws<ArgumentOutOfRangeException>(\r\n                () => options.WorkerCount = 0)", span="34-35", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", file="JobState.cs"];
m4_22 [label="Exit HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", span="30-30", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", file="JobState.cs"];
m4_11 [label="Entry HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.ServerName_ThrowsAnException_WhenValueIsNull()", span="21-21", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.ServerName_ThrowsAnException_WhenValueIsNull()", file="JobState.cs"];
m4_12 [label="var options = CreateOptions()", span="23-23", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.ServerName_ThrowsAnException_WhenValueIsNull()", file="JobState.cs"];
m4_13 [label="Assert.Throws<ArgumentNullException>(\r\n                () => options.ServerName = null)", span="25-26", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.ServerName_ThrowsAnException_WhenValueIsNull()", file="JobState.cs"];
m4_14 [label="Exit HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.ServerName_ThrowsAnException_WhenValueIsNull()", span="21-21", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.ServerName_ThrowsAnException_WhenValueIsNull()", file="JobState.cs"];
m4_30 [label="Entry lambda expression", span="44-44", cluster="lambda expression", file="JobState.cs"];
m4_38 [label="options.Queues = null", span="53-53", cluster="lambda expression", file="JobState.cs"];
m4_37 [label="Entry lambda expression", span="53-53", cluster="lambda expression", file="JobState.cs"];
m4_39 [label="Exit lambda expression", span="53-53", cluster="lambda expression", file="JobState.cs"];
m4_17 [label="options.ServerName = null", span="26-26", cluster="lambda expression", file="JobState.cs"];
m4_24 [label="options.WorkerCount = 0", span="35-35", cluster="lambda expression", file="JobState.cs"];
m4_31 [label="options.WorkerCount = -1", span="44-44", cluster="lambda expression", file="JobState.cs"];
m4_45 [label="options.Queues = new string[0]", span="62-62", cluster="lambda expression", file="JobState.cs"];
m4_44 [label="Entry lambda expression", span="62-62", cluster="lambda expression", file="JobState.cs"];
m4_16 [label="Entry lambda expression", span="26-26", cluster="lambda expression", file="JobState.cs"];
m4_23 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="JobState.cs"];
m4_18 [label="Exit lambda expression", span="26-26", cluster="lambda expression", file="JobState.cs"];
m4_25 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="JobState.cs"];
m4_32 [label="Exit lambda expression", span="44-44", cluster="lambda expression", file="JobState.cs"];
m4_46 [label="Exit lambda expression", span="62-62", cluster="lambda expression", file="JobState.cs"];
m4_26 [label="Entry HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", span="39-39", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", file="JobState.cs"];
m4_27 [label="var options = CreateOptions()", span="41-41", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", file="JobState.cs"];
m4_28 [label="Assert.Throws<ArgumentOutOfRangeException>(\r\n                () => options.WorkerCount = -1)", span="43-44", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", file="JobState.cs"];
m4_29 [label="Exit HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", span="39-39", cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", file="JobState.cs"];
m4_50 [label="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts", span="", file="JobState.cs"];
m4_54 [label=options, span="", file="JobState.cs"];
m4_51 [label=options, span="", file="JobState.cs"];
m4_52 [label=options, span="", file="JobState.cs"];
m4_53 [label=options, span="", file="JobState.cs"];
m4_55 [label=options, span="", file="JobState.cs"];
m5_4 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="JobSteps.cs"];
m5_5 [label="Entry HangFire.Tests.JobSteps.GivenTheJob(string)", span="21-21", cluster="HangFire.Tests.JobSteps.GivenTheJob(string)", file="JobSteps.cs"];
m5_6 [label="Given(String.Format(''the '{0}' job of the '{1}' type'', jobId, DefaultJobType))", span="23-23", cluster="HangFire.Tests.JobSteps.GivenTheJob(string)", file="JobSteps.cs"];
m5_7 [label="Exit HangFire.Tests.JobSteps.GivenTheJob(string)", span="21-21", cluster="HangFire.Tests.JobSteps.GivenTheJob(string)", file="JobSteps.cs"];
m5_0 [label="Entry HangFire.Tests.JobSteps.GivenAJob()", span="15-15", cluster="HangFire.Tests.JobSteps.GivenAJob()", file="JobSteps.cs"];
m5_1 [label="Given(String.Format(''a job of the '{0}' type'', DefaultJobType.AssemblyQualifiedName))", span="17-17", cluster="HangFire.Tests.JobSteps.GivenAJob()", file="JobSteps.cs"];
m5_2 [label="Exit HangFire.Tests.JobSteps.GivenAJob()", span="15-15", cluster="HangFire.Tests.JobSteps.GivenAJob()", file="JobSteps.cs"];
m5_15 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="JobSteps.cs"];
m5_26 [label="Entry Unk.GetValueFromHash", span="", cluster="Unk.GetValueFromHash", file="JobSteps.cs"];
m5_17 [label="Entry Unk.SetRangeInHash", span="", cluster="Unk.SetRangeInHash", file="JobSteps.cs"];
m5_8 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="JobSteps.cs"];
m5_12 [label="Entry HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", span="33-33", cluster="HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", file="JobSteps.cs"];
m5_13 [label="Redis.Client.SetRangeInHash(\r\n                String.Format(''hangfire:job:{0}'', jobId),\r\n                new Dictionary<string, string>\r\n                    {\r\n                        { ''Type'', type },\r\n                        { ''Args'', JobHelper.ToJson(new Dictionary<string, string>()) },\r\n                        { ''State'', EnqueuedState.Name },\r\n                    })", span="35-42", cluster="HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", file="JobSteps.cs"];
m5_14 [label="Exit HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", span="33-33", cluster="HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", file="JobSteps.cs"];
m5_27 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="JobSteps.cs"];
m5_16 [label="Entry HangFire.JobHelper.ToJson(object)", span="32-32", cluster="HangFire.JobHelper.ToJson(object)", file="JobSteps.cs"];
m5_19 [label="Redis.Client.SetEntryInHash(\r\n                String.Format(''hangfire:job:{0}'', DefaultJobId),\r\n                ''State'',\r\n                state)", span="48-51", cluster="HangFire.Tests.JobSteps.GivenItsStateIs(string)", file="JobSteps.cs"];
m5_18 [label="Entry HangFire.Tests.JobSteps.GivenItsStateIs(string)", span="46-46", cluster="HangFire.Tests.JobSteps.GivenItsStateIs(string)", file="JobSteps.cs"];
m5_20 [label="Exit HangFire.Tests.JobSteps.GivenItsStateIs(string)", span="46-46", cluster="HangFire.Tests.JobSteps.GivenItsStateIs(string)", file="JobSteps.cs"];
m5_21 [label="Entry Unk.SetEntryInHash", span="", cluster="Unk.SetEntryInHash", file="JobSteps.cs"];
m5_3 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="JobSteps.cs"];
m5_9 [label="Entry HangFire.Tests.JobSteps.GivenAJobOfTheType(string)", span="27-27", cluster="HangFire.Tests.JobSteps.GivenAJobOfTheType(string)", file="JobSteps.cs"];
m5_10 [label="Given(String.Format(''the '{0}' job of the '{1}' type'', DefaultJobId, type))", span="29-29", cluster="HangFire.Tests.JobSteps.GivenAJobOfTheType(string)", file="JobSteps.cs"];
m5_11 [label="Exit HangFire.Tests.JobSteps.GivenAJobOfTheType(string)", span="27-27", cluster="HangFire.Tests.JobSteps.GivenAJobOfTheType(string)", file="JobSteps.cs"];
m5_22 [label="Entry HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", span="57-57", cluster="HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", file="JobSteps.cs"];
m5_23 [label="var jobState = Redis.Client.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', DefaultJobId),\r\n                ''State'')", span="59-61", cluster="HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", file="JobSteps.cs"];
m5_24 [label="Assert.AreEqual(state, jobState)", span="63-63", cluster="HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", file="JobSteps.cs"];
m5_25 [label="Exit HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", span="57-57", cluster="HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", file="JobSteps.cs"];
m6_45 [label="Entry HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", span="102-102", cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="ProcessingState.feature.cs"];
m6_46 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It has the correct properties set'', ((string[])(null)))", span="104-104", cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_47 [label="this.ScenarioSetup(scenarioInfo)", span="106-106", cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_48 [label="this.FeatureBackground()", span="108-108", cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_49 [label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="110-112", cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", color=green, community=1, file="ProcessingState.feature.cs"];
m6_50 [label="table1.AddRow(new string[] {\r\n                        ''StartedAt'',\r\n                        ''<UtcNow timestamp>''})", span="113-115", cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", color=green, community=1, file="ProcessingState.feature.cs"];
m6_51 [label="table1.AddRow(new string[] {\r\n                        ''ServerName'',\r\n                        ''TestServer''})", span="116-118", cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", color=green, community=1, file="ProcessingState.feature.cs"];
m6_52 [label="testRunner.Then(''properties table contains the following items:'', ((string)(null)), table1, ''Then '')", span="120-120", cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_53 [label="this.ScenarioCleanup()", span="122-122", cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_54 [label="Exit HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", span="102-102", cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="ProcessingState.feature.cs"];
m6_25 [label="Entry Unk.OnScenarioStart", span="", cluster="Unk.OnScenarioStart", file="ProcessingState.feature.cs"];
m6_29 [label="Entry Unk.CollectScenarioErrors", span="", cluster="Unk.CollectScenarioErrors", file="ProcessingState.feature.cs"];
m6_21 [label="Entry Unk.OnScenarioEnd", span="", cluster="Unk.OnScenarioEnd", file="ProcessingState.feature.cs"];
m6_67 [label="Entry HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", span="150-150", cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs"];
m6_68 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying, it should remove the job from the processing set'', ((string[])(null)))", span="152-152", cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_69 [label="this.ScenarioSetup(scenarioInfo)", span="154-154", cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_70 [label="this.FeatureBackground()", span="156-156", cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_71 [label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="158-158", cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_72 [label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="160-160", cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_73 [label="testRunner.Then(''the processing set does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="162-162", cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_74 [label="this.ScenarioCleanup()", span="164-164", cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_75 [label="Exit HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", span="150-150", cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs"];
m6_35 [label="Entry Unk.And", span="", cluster="Unk.And", file="ProcessingState.feature.cs"];
m6_5 [label="Entry Unk.GetTestRunner", span="", cluster="Unk.GetTestRunner", file="ProcessingState.feature.cs"];
m6_36 [label="Entry HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", span="85-85", cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", file="ProcessingState.feature.cs"];
m6_37 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State name is \'Processing\''', ((string[])(null)))", span="87-87", cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_38 [label="this.ScenarioSetup(scenarioInfo)", span="89-89", cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_39 [label="this.FeatureBackground()", span="91-91", cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_40 [label="testRunner.Then(''the state name is equal to \'Processing\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="93-93", cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_41 [label="this.ScenarioCleanup()", span="95-95", cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_42 [label="Exit HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", span="85-85", cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", file="ProcessingState.feature.cs"];
m6_14 [label="Entry HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", file="ProcessingState.feature.cs"];
m6_15 [label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Processing state''))", span="48-49", cluster="HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_16 [label="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(null)", span="51-51", cluster="HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_17 [label="Exit HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", file="ProcessingState.feature.cs"];
m6_18 [label="Entry HangFire.Tests.States.ProcessingStateFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioTearDown()", file="ProcessingState.feature.cs"];
m6_19 [label="testRunner.OnScenarioEnd()", span="58-58", cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioTearDown()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_20 [label="Exit HangFire.Tests.States.ProcessingStateFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioTearDown()", file="ProcessingState.feature.cs"];
m6_0 [label="Entry HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ProcessingState.feature.cs"];
m6_1 [label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=0, file="ProcessingState.feature.cs"];
m6_2 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Processing state'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=1, file="ProcessingState.feature.cs"];
m6_3 [label="testRunner.OnFeatureStart(featureInfo)", span="35-35", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=0, file="ProcessingState.feature.cs"];
m6_4 [label="Exit HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ProcessingState.feature.cs"];
m6_13 [label="Entry Unk.OnFeatureEnd", span="", cluster="Unk.OnFeatureEnd", file="ProcessingState.feature.cs"];
m6_7 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="ProcessingState.feature.cs"];
m6_66 [label="Entry Unk.When", span="", cluster="Unk.When", file="ProcessingState.feature.cs"];
m6_57 [label="Entry HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", span="129-129", cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs"];
m6_58 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After applying, it should add the job to the processing set'', ((string[])(null)))", span="131-131", cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_59 [label="this.ScenarioSetup(scenarioInfo)", span="133-133", cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_60 [label="this.FeatureBackground()", span="135-135", cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_61 [label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="137-137", cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_62 [label="testRunner.Then(''the processing set contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="139-139", cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_63 [label="testRunner.And(''processing timestamp is set to UtcNow'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="141-141", cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_64 [label="this.ScenarioCleanup()", span="143-143", cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_65 [label="Exit HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", span="129-129", cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs"];
m6_56 [label="Entry Unk.AddRow", span="", cluster="Unk.AddRow", file="ProcessingState.feature.cs"];
m6_43 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="ProcessingState.feature.cs"];
m6_26 [label="Entry HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", file="ProcessingState.feature.cs"];
m6_27 [label="testRunner.CollectScenarioErrors()", span="68-68", cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_28 [label="Exit HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", file="ProcessingState.feature.cs"];
m6_44 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="ProcessingState.feature.cs"];
m6_34 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="ProcessingState.feature.cs"];
m6_6 [label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span="", cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="ProcessingState.feature.cs"];
m6_55 [label="Entry TechTalk.SpecFlow.Table.cstr", span="", cluster="TechTalk.SpecFlow.Table.cstr", file="ProcessingState.feature.cs"];
m6_22 [label="Entry HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ProcessingState.feature.cs"];
m6_23 [label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63", cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", color=green, community=0, file="ProcessingState.feature.cs"];
m6_24 [label="Exit HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ProcessingState.feature.cs"];
m6_30 [label="Entry HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", span="71-71", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="ProcessingState.feature.cs"];
m6_31 [label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="75-75", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_32 [label="testRunner.And(''the Processing state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="77-77", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_33 [label="Exit HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", span="71-71", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="ProcessingState.feature.cs"];
m6_8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", file="ProcessingState.feature.cs"];
m6_9 [label="Entry HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", file="ProcessingState.feature.cs"];
m6_10 [label="testRunner.OnFeatureEnd()", span="41-41", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_11 [label="testRunner = null", span="42-42", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", color=green, community=0, file="ProcessingState.feature.cs"];
m6_12 [label="Exit HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", file="ProcessingState.feature.cs"];
m6_76 [label="HangFire.Tests.States.ProcessingStateFeature", span="", file="ProcessingState.feature.cs"];
m7_31 [label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="QueueSteps.cs"];
m7_32 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RecurringJobManager(null, _factory.Object))", span="39-40", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="QueueSteps.cs"];
m7_33 [label="Assert.Equal(''storage'', exception.ParamName)", span="42-42", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="QueueSteps.cs"];
m7_34 [label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="QueueSteps.cs"];
m7_67 [label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", span="77-77", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", file="QueueSteps.cs"];
m7_68 [label="var manager = CreateManager()", span="79-79", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", file="QueueSteps.cs"];
m7_69 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => manager.AddOrUpdate(_id, _job, null))", span="81-82", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", file="QueueSteps.cs"];
m7_70 [label="Assert.Equal(''cronExpression'', exception.ParamName)", span="84-84", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", file="QueueSteps.cs"];
m7_71 [label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", span="77-77", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", file="QueueSteps.cs"];
m7_40 [label="Entry RecurringJobManager.cstr", span="", cluster="RecurringJobManager.cstr", file="QueueSteps.cs"];
m7_110 [label="Entry Unk.SetRangeInHash", span="", cluster="Unk.SetRangeInHash", file="QueueSteps.cs"];
m7_57 [label="Entry Hangfire.Cron.Daily()", span="54-54", cluster="Hangfire.Cron.Daily()", file="QueueSteps.cs"];
m7_18 [label="Entry Mock<IWriteOnlyTransaction>.cstr", span="", cluster="Mock<IWriteOnlyTransaction>.cstr", file="QueueSteps.cs"];
m7_156 [label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", span="170-170", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", file="QueueSteps.cs"];
m7_157 [label="_connection.Setup(x => x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', _id)))\r\n                .Returns(new Dictionary<string, string>\r\n                {\r\n                    { ''Job'', JobHelper.ToJson(InvocationData.Serialize(Job.FromExpression(() => Console.WriteLine()))) },\r\n                    { ''Queue'', ''my_queue'' }\r\n                })", span="173-178", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", file="QueueSteps.cs"];
m7_158 [label="var manager = CreateManager()", span="180-180", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", file="QueueSteps.cs"];
m7_159 [label="manager.Trigger(_id)", span="183-183", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", file="QueueSteps.cs"];
m7_160 [label="_factory.Verify(x => x.Create(It.Is<CreateContext>(context =>\r\n                ((EnqueuedState)context.InitialState).Queue == ''my_queue'')))", span="186-187", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", file="QueueSteps.cs"];
m7_161 [label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", span="170-170", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", file="QueueSteps.cs"];
m7_144 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash", file="QueueSteps.cs"];
m7_36 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="QueueSteps.cs"];
m7_131 [label="Entry Hangfire.RecurringJobManager.Trigger(string)", span="109-109", cluster="Hangfire.RecurringJobManager.Trigger(string)", file="QueueSteps.cs"];
m7_193 [label="Entry Hangfire.RecurringJobManager.RemoveIfExists(string)", span="133-133", cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)", file="QueueSteps.cs"];
m7_109 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="QueueSteps.cs"];
m7_179 [label="Entry Unk.DoesNotThrow", span="", cluster="Unk.DoesNotThrow", file="QueueSteps.cs"];
m7_194 [label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", span="209-209", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="QueueSteps.cs"];
m7_195 [label="var manager = CreateManager()", span="211-211", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="QueueSteps.cs"];
m7_196 [label="manager.RemoveIfExists(_id)", span="213-213", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="QueueSteps.cs"];
m7_197 [label="_transaction.Verify(x => x.RemoveFromSet(''recurring-jobs'', _id))", span="215-215", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="QueueSteps.cs"];
m7_198 [label="_transaction.Verify(x => x.RemoveHash(String.Format(''recurring-job:{0}'', _id)))", span="216-216", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="QueueSteps.cs"];
m7_199 [label="_transaction.Verify(x => x.Commit())", span="217-217", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="QueueSteps.cs"];
m7_200 [label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", span="209-209", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="QueueSteps.cs"];
m7_75 [label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", span="88-88", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", file="QueueSteps.cs"];
m7_76 [label="var manager = CreateManager()", span="90-90", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", file="QueueSteps.cs"];
m7_77 [label="var exception = Assert.Throws<ArgumentException>(\r\n                () => manager.AddOrUpdate(_id, _job, ''* * *''))", span="92-93", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", file="QueueSteps.cs"];
m7_78 [label="Assert.Equal(''cronExpression'', exception.ParamName)", span="95-95", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", file="QueueSteps.cs"];
m7_79 [label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", span="88-88", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", file="QueueSteps.cs"];
m7_91 [label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", span="110-110", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", file="QueueSteps.cs"];
m7_92 [label="var manager = CreateManager()", span="112-112", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", file="QueueSteps.cs"];
m7_93 [label="manager.AddOrUpdate(_id, _job, _cronExpression)", span="114-114", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", file="QueueSteps.cs"];
m7_94 [label="_transaction.Verify(x => x.AddToSet(''recurring-jobs'', _id))", span="116-116", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", file="QueueSteps.cs"];
m7_95 [label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", span="110-110", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", file="QueueSteps.cs"];
m7_35 [label="Entry Unk.>", span="", cluster="Unk.>", file="QueueSteps.cs"];
m7_58 [label="Entry Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string)", span="55-55", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string)", file="QueueSteps.cs"];
m7_100 [label="Entry Unk.AddToSet", span="", cluster="Unk.AddToSet", file="QueueSteps.cs"];
m7_186 [label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_ThrowsAnException_WhenIdIsNull()", span="200-200", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs"];
m7_187 [label="var manager = CreateManager()", span="202-202", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs"];
m7_188 [label="Assert.Throws<ArgumentNullException>(\r\n                () => manager.RemoveIfExists(null))", span="204-205", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs"];
m7_189 [label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_ThrowsAnException_WhenIdIsNull()", span="200-200", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs"];
m7_174 [label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", span="191-191", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", file="QueueSteps.cs"];
m7_175 [label="var manager = CreateManager()", span="193-193", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", file="QueueSteps.cs"];
m7_176 [label="Assert.DoesNotThrow(() => manager.Trigger(_id))", span="195-195", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", file="QueueSteps.cs"];
m7_177 [label="_factory.Verify(x => x.Create(It.IsAny<CreateContext>()), Times.Never)", span="196-196", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", file="QueueSteps.cs"];
m7_178 [label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", span="191-191", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", file="QueueSteps.cs"];
m7_139 [label="Entry Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="72-72", cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", file="QueueSteps.cs"];
m7_208 [label="Entry Unk.RemoveHash", span="", cluster="Unk.RemoveHash", file="QueueSteps.cs"];
m7_26 [label="Entry Unk.GetConnection", span="", cluster="Unk.GetConnection", file="QueueSteps.cs"];
m7_148 [label="Entry System.Console.WriteLine()", span="0-0", cluster="System.Console.WriteLine()", file="QueueSteps.cs"];
m7_132 [label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", span="151-151", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", file="QueueSteps.cs"];
m7_133 [label="_connection.Setup(x => x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', _id)))\r\n                .Returns(new Dictionary<string, string>\r\n                {\r\n                    { ''Job'', JobHelper.ToJson(InvocationData.Serialize(Job.FromExpression(() => Console.WriteLine()))) }\r\n                })", span="154-158", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", file="QueueSteps.cs"];
m7_134 [label="var manager = CreateManager()", span="160-160", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", file="QueueSteps.cs"];
m7_135 [label="manager.Trigger(_id)", span="163-163", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", file="QueueSteps.cs"];
m7_136 [label="_factory.Verify(x => x.Create(It.Is<CreateContext>(context => context.InitialState is EnqueuedState)))", span="166-166", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", file="QueueSteps.cs"];
m7_137 [label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", span="151-151", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", file="QueueSteps.cs"];
m7_138 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="QueueSteps.cs"];
m7_53 [label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.CreateManager()", span="220-220", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.CreateManager()", file="QueueSteps.cs"];
m7_212 [label="return new RecurringJobManager(_storage.Object, _factory.Object);", span="222-222", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.CreateManager()", file="QueueSteps.cs"];
m7_213 [label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.CreateManager()", span="220-220", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.CreateManager()", file="QueueSteps.cs"];
m7_16 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="QueueSteps.cs"];
m7_41 [label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", span="46-46", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", file="QueueSteps.cs"];
m7_42 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RecurringJobManager(_storage.Object, null))", span="48-49", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", file="QueueSteps.cs"];
m7_43 [label="Assert.Equal(''factory'', exception.ParamName)", span="51-51", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", file="QueueSteps.cs"];
m7_44 [label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", span="46-46", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", file="QueueSteps.cs"];
m7_105 [label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", span="120-120", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", file="QueueSteps.cs"];
m7_102 [label="var manager = CreateManager()", span="122-122", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", file="QueueSteps.cs"];
m7_103 [label="manager.AddOrUpdate(_id, _job, _cronExpression)", span="124-124", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", file="QueueSteps.cs"];
m7_104 [label="_transaction.Verify(x => x.SetRangeInHash(\r\n                String.Format(''recurring-job:{0}'', _id),\r\n                It.Is<Dictionary<string, string>>(rj => \r\n                    rj[''Cron''] == ''* * * * *'' && !String.IsNullOrEmpty(rj[''Job'']))))", span="126-129", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", file="QueueSteps.cs"];
m7_101 [label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", span="120-120", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", file="QueueSteps.cs"];
m7_140 [label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32", cluster="Hangfire.Common.JobHelper.ToJson(object)", file="QueueSteps.cs"];
m7_12 [label="Entry Hangfire.Cron.Minutely()", span="29-29", cluster="Hangfire.Cron.Minutely()", file="QueueSteps.cs"];
m7_115 [label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", span="133-133", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", file="QueueSteps.cs"];
m7_116 [label="var manager = CreateManager()", span="135-135", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", file="QueueSteps.cs"];
m7_117 [label="manager.AddOrUpdate(_id, _job, _cronExpression)", span="137-137", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", file="QueueSteps.cs"];
m7_118 [label="_transaction.Verify(x => x.Commit())", span="139-139", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", file="QueueSteps.cs"];
m7_119 [label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", span="133-133", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", file="QueueSteps.cs"];
m7_171 [label="Entry lambda expression", span="186-187", cluster="lambda expression", file="QueueSteps.cs"];
m7_55 [label="manager.AddOrUpdate(null, _job, Cron.Daily())", span="60-60", cluster="lambda expression", file="QueueSteps.cs"];
m7_38 [label="new RecurringJobManager(null, _factory.Object)", span="40-40", cluster="lambda expression", file="QueueSteps.cs"];
m7_46 [label="new RecurringJobManager(_storage.Object, null)", span="49-49", cluster="lambda expression", file="QueueSteps.cs"];
m7_65 [label="manager.AddOrUpdate(_id, null, Cron.Daily())", span="71-71", cluster="lambda expression", file="QueueSteps.cs"];
m7_73 [label="manager.AddOrUpdate(_id, _job, null)", span="82-82", cluster="lambda expression", file="QueueSteps.cs"];
m7_81 [label="manager.AddOrUpdate(_id, _job, ''* * *'')", span="93-93", cluster="lambda expression", file="QueueSteps.cs"];
m7_89 [label="manager.AddOrUpdate(_id, _job, ''* * * * 9999'')", span="104-104", cluster="lambda expression", file="QueueSteps.cs"];
m7_98 [label="x.AddToSet(''recurring-jobs'', _id)", span="116-116", cluster="lambda expression", file="QueueSteps.cs"];
m7_107 [label="x.SetRangeInHash(\r\n                String.Format(''recurring-job:{0}'', _id),\r\n                It.Is<Dictionary<string, string>>(rj => \r\n                    rj[''Cron''] == ''* * * * *'' && !String.IsNullOrEmpty(rj[''Job''])))", span="126-129", cluster="lambda expression", file="QueueSteps.cs"];
m7_142 [label="x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', _id))", span="154-154", cluster="lambda expression", file="QueueSteps.cs"];
m7_163 [label="x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', _id))", span="173-173", cluster="lambda expression", file="QueueSteps.cs"];
m7_181 [label="manager.Trigger(_id)", span="195-195", cluster="lambda expression", file="QueueSteps.cs"];
m7_202 [label="x.RemoveFromSet(''recurring-jobs'', _id)", span="215-215", cluster="lambda expression", file="QueueSteps.cs"];
m7_206 [label="x.RemoveHash(String.Format(''recurring-job:{0}'', _id))", span="216-216", cluster="lambda expression", file="QueueSteps.cs"];
m7_54 [label="Entry lambda expression", span="60-60", cluster="lambda expression", file="QueueSteps.cs"];
m7_56 [label="Exit lambda expression", span="60-60", cluster="lambda expression", file="QueueSteps.cs"];
m7_19 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="QueueSteps.cs"];
m7_23 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="QueueSteps.cs"];
m7_27 [label="Entry lambda expression", span="33-33", cluster="lambda expression", file="QueueSteps.cs"];
m7_37 [label="Entry lambda expression", span="40-40", cluster="lambda expression", file="QueueSteps.cs"];
m7_39 [label="Exit lambda expression", span="40-40", cluster="lambda expression", file="QueueSteps.cs"];
m7_45 [label="Entry lambda expression", span="49-49", cluster="lambda expression", file="QueueSteps.cs"];
m7_47 [label="Exit lambda expression", span="49-49", cluster="lambda expression", file="QueueSteps.cs"];
m7_64 [label="Entry lambda expression", span="71-71", cluster="lambda expression", file="QueueSteps.cs"];
m7_66 [label="Exit lambda expression", span="71-71", cluster="lambda expression", file="QueueSteps.cs"];
m7_72 [label="Entry lambda expression", span="82-82", cluster="lambda expression", file="QueueSteps.cs"];
m7_74 [label="Exit lambda expression", span="82-82", cluster="lambda expression", file="QueueSteps.cs"];
m7_80 [label="Entry lambda expression", span="93-93", cluster="lambda expression", file="QueueSteps.cs"];
m7_82 [label="Exit lambda expression", span="93-93", cluster="lambda expression", file="QueueSteps.cs"];
m7_88 [label="Entry lambda expression", span="104-104", cluster="lambda expression", file="QueueSteps.cs"];
m7_90 [label="Exit lambda expression", span="104-104", cluster="lambda expression", file="QueueSteps.cs"];
m7_97 [label="Entry lambda expression", span="116-116", cluster="lambda expression", file="QueueSteps.cs"];
m7_99 [label="Exit lambda expression", span="116-116", cluster="lambda expression", file="QueueSteps.cs"];
m7_106 [label="Entry lambda expression", span="126-129", cluster="lambda expression", file="QueueSteps.cs"];
m7_108 [label="Exit lambda expression", span="126-129", cluster="lambda expression", file="QueueSteps.cs"];
m7_111 [label="Entry lambda expression", span="128-129", cluster="lambda expression", file="QueueSteps.cs"];
m7_120 [label="Entry lambda expression", span="139-139", cluster="lambda expression", file="QueueSteps.cs"];
m7_129 [label="manager.Trigger(null)", span="147-147", cluster="lambda expression", file="QueueSteps.cs"];
m7_141 [label="Entry lambda expression", span="154-154", cluster="lambda expression", file="QueueSteps.cs"];
m7_145 [label="Entry lambda expression", span="157-157", cluster="lambda expression", file="QueueSteps.cs"];
m7_143 [label="Exit lambda expression", span="154-154", cluster="lambda expression", file="QueueSteps.cs"];
m7_149 [label="Entry lambda expression", span="166-166", cluster="lambda expression", file="QueueSteps.cs"];
m7_162 [label="Entry lambda expression", span="173-173", cluster="lambda expression", file="QueueSteps.cs"];
m7_165 [label="Entry lambda expression", span="176-176", cluster="lambda expression", file="QueueSteps.cs"];
m7_164 [label="Exit lambda expression", span="173-173", cluster="lambda expression", file="QueueSteps.cs"];
m7_168 [label="Entry lambda expression", span="186-187", cluster="lambda expression", file="QueueSteps.cs"];
m7_180 [label="Entry lambda expression", span="195-195", cluster="lambda expression", file="QueueSteps.cs"];
m7_182 [label="Exit lambda expression", span="195-195", cluster="lambda expression", file="QueueSteps.cs"];
m7_183 [label="Entry lambda expression", span="196-196", cluster="lambda expression", file="QueueSteps.cs"];
m7_191 [label="manager.RemoveIfExists(null)", span="205-205", cluster="lambda expression", file="QueueSteps.cs"];
m7_201 [label="Entry lambda expression", span="215-215", cluster="lambda expression", file="QueueSteps.cs"];
m7_203 [label="Exit lambda expression", span="215-215", cluster="lambda expression", file="QueueSteps.cs"];
m7_205 [label="Entry lambda expression", span="216-216", cluster="lambda expression", file="QueueSteps.cs"];
m7_207 [label="Exit lambda expression", span="216-216", cluster="lambda expression", file="QueueSteps.cs"];
m7_209 [label="Entry lambda expression", span="217-217", cluster="lambda expression", file="QueueSteps.cs"];
m7_150 [label="x.Create(It.Is<CreateContext>(context => context.InitialState is EnqueuedState))", span="166-166", cluster="lambda expression", file="QueueSteps.cs"];
m7_169 [label="x.Create(It.Is<CreateContext>(context =>\r\n                ((EnqueuedState)context.InitialState).Queue == ''my_queue''))", span="186-187", cluster="lambda expression", file="QueueSteps.cs"];
m7_184 [label="x.Create(It.IsAny<CreateContext>())", span="196-196", cluster="lambda expression", file="QueueSteps.cs"];
m7_21 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="QueueSteps.cs"];
m7_20 [label="Method()", span="24-24", cluster="lambda expression", file="QueueSteps.cs"];
m7_25 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="QueueSteps.cs"];
m7_24 [label="x.GetConnection()", span="30-30", cluster="lambda expression", file="QueueSteps.cs"];
m7_29 [label="Exit lambda expression", span="33-33", cluster="lambda expression", file="QueueSteps.cs"];
m7_28 [label="x.CreateWriteTransaction()", span="33-33", cluster="lambda expression", file="QueueSteps.cs"];
m7_113 [label="Exit lambda expression", span="128-129", cluster="lambda expression", file="QueueSteps.cs"];
m7_112 [label="rj[''Cron''] == ''* * * * *'' && !String.IsNullOrEmpty(rj[''Job''])", span="129-129", cluster="lambda expression", file="QueueSteps.cs"];
m7_122 [label="Exit lambda expression", span="139-139", cluster="lambda expression", file="QueueSteps.cs"];
m7_121 [label="x.Commit()", span="139-139", cluster="lambda expression", file="QueueSteps.cs"];
m7_128 [label="Entry lambda expression", span="147-147", cluster="lambda expression", file="QueueSteps.cs"];
m7_130 [label="Exit lambda expression", span="147-147", cluster="lambda expression", file="QueueSteps.cs"];
m7_147 [label="Exit lambda expression", span="157-157", cluster="lambda expression", file="QueueSteps.cs"];
m7_146 [label="Console.WriteLine()", span="157-157", cluster="lambda expression", file="QueueSteps.cs"];
m7_151 [label="Exit lambda expression", span="166-166", cluster="lambda expression", file="QueueSteps.cs"];
m7_167 [label="Exit lambda expression", span="176-176", cluster="lambda expression", file="QueueSteps.cs"];
m7_166 [label="Console.WriteLine()", span="176-176", cluster="lambda expression", file="QueueSteps.cs"];
m7_170 [label="Exit lambda expression", span="186-187", cluster="lambda expression", file="QueueSteps.cs"];
m7_185 [label="Exit lambda expression", span="196-196", cluster="lambda expression", file="QueueSteps.cs"];
m7_190 [label="Entry lambda expression", span="205-205", cluster="lambda expression", file="QueueSteps.cs"];
m7_192 [label="Exit lambda expression", span="205-205", cluster="lambda expression", file="QueueSteps.cs"];
m7_211 [label="Exit lambda expression", span="217-217", cluster="lambda expression", file="QueueSteps.cs"];
m7_210 [label="x.Commit()", span="217-217", cluster="lambda expression", file="QueueSteps.cs"];
m7_153 [label="Entry lambda expression", span="166-166", cluster="lambda expression", file="QueueSteps.cs"];
m7_155 [label="Exit lambda expression", span="166-166", cluster="lambda expression", file="QueueSteps.cs"];
m7_154 [label="context.InitialState is EnqueuedState", span="166-166", cluster="lambda expression", file="QueueSteps.cs"];
m7_172 [label="((EnqueuedState)context.InitialState).Queue == ''my_queue''", span="187-187", cluster="lambda expression", file="QueueSteps.cs"];
m7_173 [label="Exit lambda expression", span="186-187", cluster="lambda expression", file="QueueSteps.cs"];
m7_59 [label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", span="66-66", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", file="QueueSteps.cs"];
m7_60 [label="var manager = CreateManager()", span="68-68", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", file="QueueSteps.cs"];
m7_61 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => manager.AddOrUpdate(_id, null, Cron.Daily()))", span="70-71", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", file="QueueSteps.cs"];
m7_62 [label="Assert.Equal(''job'', exception.ParamName)", span="73-73", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", file="QueueSteps.cs"];
m7_63 [label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", span="66-66", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", file="QueueSteps.cs"];
m7_83 [label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", span="99-99", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", file="QueueSteps.cs"];
m7_84 [label="var manager = CreateManager()", span="101-101", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", file="QueueSteps.cs"];
m7_85 [label="var exception = Assert.Throws<ArgumentException>(\r\n                () => manager.AddOrUpdate(_id, _job, ''* * * * 9999''))", span="103-104", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", file="QueueSteps.cs"];
m7_86 [label="Assert.Equal(''cronExpression'', exception.ParamName)", span="106-106", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", file="QueueSteps.cs"];
m7_87 [label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", span="99-99", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", file="QueueSteps.cs"];
m7_96 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="QueueSteps.cs"];
m7_48 [label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", span="55-55", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs"];
m7_49 [label="var manager = CreateManager()", span="57-57", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", color=green, community=0, file="QueueSteps.cs"];
m7_50 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => manager.AddOrUpdate(null, _job, Cron.Daily()))", span="59-60", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs"];
m7_51 [label="Assert.Equal(''recurringJobId'', exception.ParamName)", span="62-62", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs"];
m7_52 [label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", span="55-55", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs"];
m7_123 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="QueueSteps.cs"];
m7_30 [label="Entry Unk.CreateWriteTransaction", span="", cluster="Unk.CreateWriteTransaction", file="QueueSteps.cs"];
m7_114 [label="Entry Unk.IsNullOrEmpty", span="", cluster="Unk.IsNullOrEmpty", file="QueueSteps.cs"];
m7_22 [label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.Method()", span="225-225", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Method()", file="QueueSteps.cs"];
m7_214 [label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.Method()", span="225-225", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Method()", file="QueueSteps.cs"];
m7_0 [label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", span="21-21", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs"];
m7_1 [label="_id = ''recurring-job-id''", span="23-23", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs"];
m7_2 [label="_job = Job.FromExpression(() => Method())", span="24-24", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs"];
m7_3 [label="_cronExpression = Cron.Minutely()", span="25-25", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs"];
m7_4 [label="_storage = new Mock<JobStorage>()", span="26-26", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs"];
m7_5 [label="_factory = new Mock<IBackgroundJobFactory>()", span="27-27", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs"];
m7_6 [label="_connection = new Mock<IStorageConnection>()", span="29-29", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs"];
m7_7 [label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="30-30", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs"];
m7_8 [label="_transaction = new Mock<IWriteOnlyTransaction>()", span="32-32", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs"];
m7_9 [label="_connection.Setup(x => x.CreateWriteTransaction()).Returns(_transaction.Object)", span="33-33", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs"];
m7_10 [label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", span="21-21", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs"];
m7_204 [label="Entry Unk.RemoveFromSet", span="", cluster="Unk.RemoveFromSet", file="QueueSteps.cs"];
m7_152 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="QueueSteps.cs"];
m7_14 [label="Entry Mock<IBackgroundJobFactory>.cstr", span="", cluster="Mock<IBackgroundJobFactory>.cstr", file="QueueSteps.cs"];
m7_17 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="QueueSteps.cs"];
m7_15 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="QueueSteps.cs"];
m7_13 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr", file="QueueSteps.cs"];
m7_124 [label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_ThrowsAnException_WhenIdIsNull()", span="143-143", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs"];
m7_125 [label="var manager = CreateManager()", span="145-145", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs"];
m7_126 [label="Assert.Throws<ArgumentNullException>(() => manager.Trigger(null))", span="147-147", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs"];
m7_127 [label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_ThrowsAnException_WhenIdIsNull()", span="143-143", cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs"];
m7_11 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="232-232", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="QueueSteps.cs"];
m7_215 [label="Hangfire.Core.Tests.RecurringJobManagerFacts", span="", file="QueueSteps.cs"];
m7_216 [label=manager, span="", file="QueueSteps.cs"];
m7_217 [label=manager, span="", file="QueueSteps.cs"];
m7_218 [label=manager, span="", file="QueueSteps.cs"];
m7_219 [label=manager, span="", file="QueueSteps.cs"];
m7_220 [label=manager, span="", file="QueueSteps.cs"];
m7_222 [label=manager, span="", file="QueueSteps.cs"];
m7_221 [label=manager, span="", file="QueueSteps.cs"];
m7_223 [label=manager, span="", file="QueueSteps.cs"];
m9_44 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="SchedulePoller.feature.cs"];
m9_58 [label="Entry HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", span="125-125", cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs"];
m9_62 [label="testRunner.And(''it\'s state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="133-133", cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", color=green, community=0, file="SchedulePoller.feature.cs"];
m9_61 [label="testRunner.Given(''a scheduled job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="131-131", cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs"];
m9_63 [label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="135-135", cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", color=green, community=0, file="SchedulePoller.feature.cs"];
m9_64 [label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="137-137", cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", color=green, community=0, file="SchedulePoller.feature.cs"];
m9_65 [label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="139-139", cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", color=green, community=0, file="SchedulePoller.feature.cs"];
m9_66 [label="this.ScenarioCleanup()", span="141-141", cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs"];
m9_60 [label="this.ScenarioSetup(scenarioInfo)", span="129-129", cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs"];
m9_59 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Poller will enqueue only jobs in the Scheduled state'', ((string[])(null)))", span="127-127", cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs"];
m9_67 [label="Exit HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", span="125-125", cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs"];
m9_12 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="SchedulePoller.feature.cs"];
m9_43 [label="Entry Unk.When", span="", cluster="Unk.When", file="SchedulePoller.feature.cs"];
m9_47 [label="Entry HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", span="100-100", cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SchedulePoller.feature.cs"];
m9_51 [label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="108-108", cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", color=green, community=0, file="SchedulePoller.feature.cs"];
m9_50 [label="testRunner.Given(''a future job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="106-106", cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SchedulePoller.feature.cs"];
m9_52 [label="testRunner.Then(''the job remains to be in the Scheduled state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="110-110", cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", color=green, community=0, file="SchedulePoller.feature.cs"];
m9_53 [label="testRunner.And(''the schedule contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="112-112", cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", color=green, community=0, file="SchedulePoller.feature.cs"];
m9_54 [label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="114-114", cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", color=green, community=0, file="SchedulePoller.feature.cs"];
m9_55 [label="testRunner.And(''schedule poller returns \'false\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="116-116", cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", color=green, community=0, file="SchedulePoller.feature.cs"];
m9_56 [label="this.ScenarioCleanup()", span="118-118", cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SchedulePoller.feature.cs"];
m9_49 [label="this.ScenarioSetup(scenarioInfo)", span="104-104", cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SchedulePoller.feature.cs"];
m9_48 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Future jobs are not being enqueued'', ((string[])(null)))", span="102-102", cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SchedulePoller.feature.cs"];
m9_57 [label="Exit HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", span="100-100", cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SchedulePoller.feature.cs"];
m9_68 [label="Entry HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", span="148-148", cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs"];
m9_72 [label="testRunner.Then(''schedule poller returns \'false\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="156-156", cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", color=green, community=0, file="SchedulePoller.feature.cs"];
m9_71 [label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="154-154", cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs"];
m9_73 [label="this.ScenarioCleanup()", span="158-158", cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs"];
m9_70 [label="this.ScenarioSetup(scenarioInfo)", span="152-152", cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs"];
m9_69 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Returns false when there are no jobs in the schedule'', ((string[])(null)))", span="150-150", cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs"];
m9_74 [label="Exit HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", span="148-148", cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs"];
m9_42 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="SchedulePoller.feature.cs"];
m9_29 [label="Entry Unk.CollectScenarioErrors", span="", cluster="Unk.CollectScenarioErrors", file="SchedulePoller.feature.cs"];
m9_83 [label="Entry HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", span="184-184", cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs"];
m9_87 [label="testRunner.And(''it\'s state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="192-192", cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", color=green, community=0, file="SchedulePoller.feature.cs"];
m9_86 [label="testRunner.Given(''a scheduled job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="190-190", cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs"];
m9_88 [label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="194-194", cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", color=green, community=0, file="SchedulePoller.feature.cs"];
m9_89 [label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="196-196", cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", color=green, community=0, file="SchedulePoller.feature.cs"];
m9_90 [label="this.ScenarioCleanup()", span="198-198", cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs"];
m9_85 [label="this.ScenarioSetup(scenarioInfo)", span="188-188", cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs"];
m9_84 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Poller will fail only jobs in the Scheduled state'', ((string[])(null)))", span="186-186", cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs"];
m9_91 [label="Exit HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", span="184-184", cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs"];
m9_25 [label="Entry Unk.OnScenarioStart", span="", cluster="Unk.OnScenarioStart", file="SchedulePoller.feature.cs"];
m9_26 [label="Entry HangFire.Tests.SchedulePollerFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.SchedulePollerFeature.ScenarioCleanup()", file="SchedulePoller.feature.cs"];
m9_27 [label="testRunner.CollectScenarioErrors()", span="68-68", cluster="HangFire.Tests.SchedulePollerFeature.ScenarioCleanup()", file="SchedulePoller.feature.cs"];
m9_28 [label="Exit HangFire.Tests.SchedulePollerFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.SchedulePollerFeature.ScenarioCleanup()", file="SchedulePoller.feature.cs"];
m9_45 [label="Entry Unk.And", span="", cluster="Unk.And", file="SchedulePoller.feature.cs"];
m9_41 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SchedulePoller.feature.cs"];
m9_5 [label="Entry HangFire.Tests.TestStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", span="21-21", cluster="HangFire.Tests.TestStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="SchedulePoller.feature.cs"];
m9_6 [label="Assert.IsNotNull(context)", span="23-23", cluster="HangFire.Tests.TestStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="SchedulePoller.feature.cs"];
m9_9 [label="context.CandidateState = _changeState", span="29-29", cluster="HangFire.Tests.TestStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="SchedulePoller.feature.cs"];
m9_7 [label="_results.Add(_name)", span="25-25", cluster="HangFire.Tests.TestStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="SchedulePoller.feature.cs"];
m9_8 [label="_changeState != null", span="27-27", cluster="HangFire.Tests.TestStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="SchedulePoller.feature.cs"];
m9_10 [label="Exit HangFire.Tests.TestStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", span="21-21", cluster="HangFire.Tests.TestStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="SchedulePoller.feature.cs"];
m9_22 [label="Entry HangFire.Tests.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SchedulePoller.feature.cs"];
m9_23 [label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63", cluster="HangFire.Tests.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SchedulePoller.feature.cs"];
m9_24 [label="Exit HangFire.Tests.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SchedulePoller.feature.cs"];
m9_75 [label="Entry HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", span="165-165", cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SchedulePoller.feature.cs"];
m9_79 [label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="173-173", cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", color=green, community=0, file="SchedulePoller.feature.cs"];
m9_78 [label="testRunner.Given(''a scheduled job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="171-171", cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SchedulePoller.feature.cs"];
m9_80 [label="testRunner.Then(''the job moved to the Failed state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="175-175", cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", color=green, community=0, file="SchedulePoller.feature.cs"];
m9_81 [label="this.ScenarioCleanup()", span="177-177", cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SchedulePoller.feature.cs"];
m9_77 [label="this.ScenarioSetup(scenarioInfo)", span="169-169", cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SchedulePoller.feature.cs"];
m9_76 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Poller move the job to the Failed state when it could not find it\'s type'', ((string[])(null)))", span="167-167", cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SchedulePoller.feature.cs"];
m9_82 [label="Exit HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", span="165-165", cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SchedulePoller.feature.cs"];
m9_11 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="SchedulePoller.feature.cs"];
m9_0 [label="Entry HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", span="14-14", cluster="HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", file="SchedulePoller.feature.cs"];
m9_1 [label="_name = name", span="16-16", cluster="HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", file="SchedulePoller.feature.cs"];
m9_2 [label="_results = results", span="17-17", cluster="HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", file="SchedulePoller.feature.cs"];
m9_3 [label="_changeState = changeState", span="18-18", cluster="HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", file="SchedulePoller.feature.cs"];
m9_4 [label="Exit HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", span="14-14", cluster="HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", file="SchedulePoller.feature.cs"];
m9_46 [label="Entry Unk.But", span="", cluster="Unk.But", file="SchedulePoller.feature.cs"];
m9_30 [label="Entry HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", span="75-75", cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs"];
m9_34 [label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="83-83", cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", color=green, community=0, file="SchedulePoller.feature.cs"];
m9_33 [label="testRunner.Given(''a scheduled job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81", cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs"];
m9_35 [label="testRunner.Then(''the job becomes Enqueued'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="85-85", cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", color=green, community=0, file="SchedulePoller.feature.cs"];
m9_36 [label="testRunner.And(''the schedule does not contain it anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="87-87", cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", color=green, community=0, file="SchedulePoller.feature.cs"];
m9_37 [label="testRunner.But(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="89-89", cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", color=green, community=0, file="SchedulePoller.feature.cs"];
m9_38 [label="testRunner.And(''schedule poller returns \'true\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="91-91", cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", color=green, community=0, file="SchedulePoller.feature.cs"];
m9_39 [label="this.ScenarioCleanup()", span="93-93", cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs"];
m9_32 [label="this.ScenarioSetup(scenarioInfo)", span="79-79", cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs"];
m9_31 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Scheduled jobs are being enqueued on their actual queues'', ((string[])(null)))", span="77-77", cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs"];
m9_40 [label="Exit HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", span="75-75", cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs"];
m9_13 [label="HangFire.Tests.TestStateChangingFilter", span="", file="SchedulePoller.feature.cs"];
m9_92 [label="HangFire.Tests.SchedulePollerFeature", span="", file="SchedulePoller.feature.cs"];
m10_0 [label="Entry Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", span="46-46", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="States.feature.cs"];
m10_1 [label="storage == null", span="48-48", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_2 [label="throw new ArgumentNullException(''storage'');", span="48-48", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_3 [label="String.IsNullOrEmpty(resource)", span="49-49", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_4 [label="throw new ArgumentNullException(''resource'');", span="49-49", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_5 [label="(timeout.TotalSeconds + CommandTimeoutAdditionSeconds) > Int32.MaxValue", span="50-50", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_6 [label="throw new ArgumentException(string.Format(''The timeout specified is too large. Please supply a timeout equal to or less than {0} seconds'', Int32.MaxValue - CommandTimeoutAdditionSeconds), ''timeout'');", span="50-50", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_7 [label="_storage = storage", span="52-52", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_10 [label="Acquire(_connection, _resource, timeout)", span="56-56", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_8 [label="_resource = resource", span="53-53", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_9 [label="_connection = storage.CreateAndOpenConnection()", span="54-54", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_11 [label="Exit Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", span="46-46", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="States.feature.cs"];
m10_12 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="States.feature.cs"];
m10_43 [label="Entry Unk.>", span="", cluster="Unk.>", file="States.feature.cs"];
m10_14 [label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, string)", file="States.feature.cs"];
m10_16 [label="Entry Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="217-217", cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="States.feature.cs"];
m10_13 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="States.feature.cs"];
m10_42 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="States.feature.cs"];
m10_45 [label="Entry Hangfire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", span="22-22", cluster="Hangfire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", file="States.feature.cs"];
m10_47 [label="Entry Unk.Format", span="", cluster="Unk.Format", file="States.feature.cs"];
m10_48 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="States.feature.cs"];
m10_24 [label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", span="113-113", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="States.feature.cs"];
m10_52 [label="parameters.Add(''@Result'', dbType: DbType.Int32, direction: ParameterDirection.ReturnValue)", span="118-118", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", color=green, community=0, file="States.feature.cs"];
m10_49 [label="var parameters = new DynamicParameters()", span="115-115", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", color=green, community=0, file="States.feature.cs"];
m10_50 [label="parameters.Add(''@Resource'', resource)", span="116-116", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", color=green, community=0, file="States.feature.cs"];
m10_51 [label="parameters.Add(''@LockOwner'', LockOwner)", span="117-117", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", color=green, community=0, file="States.feature.cs"];
m10_53 [label="connection.Execute(\r\n                @''sp_releaseapplock'',\r\n                parameters,\r\n                commandType: CommandType.StoredProcedure)", span="120-123", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", color=green, community=0, file="States.feature.cs"];
m10_54 [label="var releaseResult = parameters.Get<int>(''@Result'')", span="125-125", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", color=green, community=0, file="States.feature.cs"];
m10_56 [label="throw new SqlServerDistributedLockException(\r\n                    String.Format(\r\n                        ''Could not release a lock on the resource '{0}': Server returned the '{1}' error.'',\r\n                        resource,\r\n                        releaseResult));", span="129-133", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", color=green, community=0, file="States.feature.cs"];
m10_55 [label="releaseResult < 0", span="127-127", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", color=green, community=0, file="States.feature.cs"];
m10_57 [label="Exit Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", span="113-113", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="States.feature.cs"];
m10_46 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="States.feature.cs"];
m10_17 [label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", span="75-75", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="States.feature.cs"];
m10_25 [label="var parameters = new DynamicParameters()", span="77-77", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_36 [label="lockResult == -1", span="98-98", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_26 [label="parameters.Add(''@Resource'', resource)", span="78-78", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_27 [label="parameters.Add(''@DbPrincipal'', ''public'')", span="79-79", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_28 [label="parameters.Add(''@LockMode'', LockMode)", span="80-80", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_29 [label="parameters.Add(''@LockOwner'', LockOwner)", span="81-81", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_30 [label="parameters.Add(''@LockTimeout'', timeout.TotalMilliseconds)", span="82-82", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_31 [label="parameters.Add(''@Result'', dbType: DbType.Int32, direction: ParameterDirection.ReturnValue)", span="83-83", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_33 [label="connection.Execute(\r\n                @''sp_getapplock'',\r\n                parameters,\r\n                commandTimeout: commandTimeout,\r\n                commandType: CommandType.StoredProcedure)", span="88-92", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_34 [label="var lockResult = parameters.Get<int>(''@Result'')", span="94-94", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_32 [label="var commandTimeout = (int)(timeout.TotalSeconds + CommandTimeoutAdditionSeconds)", span="86-86", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_37 [label="throw new DistributedLockTimeoutException(resource);", span="100-100", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_38 [label="throw new SqlServerDistributedLockException(\r\n                    String.Format(\r\n                    ''Could not place a lock on the resource '{0}': {1}.'',\r\n                    resource,\r\n                    LockErrorMessages.ContainsKey(lockResult)\r\n                        ? LockErrorMessages[lockResult]\r\n                        : String.Format(''Server returned the '{0}' error.'', lockResult)));", span="103-109", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_35 [label="lockResult < 0", span="96-96", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs"];
m10_39 [label="Exit Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", span="75-75", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="States.feature.cs"];
m10_15 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="States.feature.cs"];
m10_44 [label="Entry Hangfire.Storage.DistributedLockTimeoutException.DistributedLockTimeoutException(string)", span="6-6", cluster="Hangfire.Storage.DistributedLockTimeoutException.DistributedLockTimeoutException(string)", file="States.feature.cs"];
m10_18 [label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", span="59-59", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="States.feature.cs"];
m10_19 [label=_completed, span="61-61", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="States.feature.cs"];
m10_20 [label="return;", span="61-61", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="States.feature.cs"];
m10_21 [label="_completed = true", span="63-63", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="States.feature.cs"];
m10_22 [label="Release(_connection, _resource)", span="67-67", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="States.feature.cs"];
m10_23 [label="Exit Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", span="59-59", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="States.feature.cs"];
m10_40 [label="Entry DynamicParameters.cstr", span="", cluster="DynamicParameters.cstr", file="States.feature.cs"];
m10_41 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="States.feature.cs"];
m10_58 [label="Hangfire.SqlServer.SqlServerDistributedLock", span="", file="States.feature.cs"];
m13_27 [label="Logger.Info(''Starting HangFire Server...'')", span="68-68", cluster="HangFire.BackgroundJobServer.Start()", color=green, community=0, file="SucceededState.feature.cs"];
m13_28 [label="_serverRunner.Start()", span="69-69", cluster="HangFire.BackgroundJobServer.Start()", color=green, community=0, file="SucceededState.feature.cs"];
m13_29 [label="Exit HangFire.BackgroundJobServer.Start()", span="66-66", cluster="HangFire.BackgroundJobServer.Start()", file="SucceededState.feature.cs"];
m13_20 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SucceededState.feature.cs"];
m13_56 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="SucceededState.feature.cs"];
m13_59 [label="Entry HangFire.BackgroundJobServer.GetStorageComponentRunners()", span="130-130", cluster="HangFire.BackgroundJobServer.GetStorageComponentRunners()", file="SucceededState.feature.cs"];
m13_73 [label="var components = _storage.GetComponents()", span="132-132", cluster="HangFire.BackgroundJobServer.GetStorageComponentRunners()", color=green, community=0, file="SucceededState.feature.cs"];
m13_74 [label="return components\r\n                .Select(component => new ServerComponentRunner(component))\r\n                .ToArray();", span="134-136", cluster="HangFire.BackgroundJobServer.GetStorageComponentRunners()", color=green, community=0, file="SucceededState.feature.cs"];
m13_75 [label="Exit HangFire.BackgroundJobServer.GetStorageComponentRunners()", span="130-130", cluster="HangFire.BackgroundJobServer.GetStorageComponentRunners()", file="SucceededState.feature.cs"];
m13_24 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="SucceededState.feature.cs"];
m13_4 [label="Entry HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", span="49-49", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", file="SucceededState.feature.cs"];
m13_5 [label="workerCount <= 0", span="51-51", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs"];
m13_6 [label="throw new ArgumentOutOfRangeException(''workerCount'', ''Worker count value must be more than zero.'');", span="51-51", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs"];
m13_7 [label="queues == null", span="52-52", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs"];
m13_8 [label="throw new ArgumentNullException(''queues'');", span="52-52", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs"];
m13_9 [label="queues.Length == 0", span="53-53", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs"];
m13_10 [label="throw new ArgumentException(''You should specify at least one queue to listen.'', ''queues'');", span="53-53", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs"];
m13_11 [label="storage == null", span="54-54", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs"];
m13_12 [label="throw new ArgumentNullException(''storage'');", span="54-54", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs"];
m13_13 [label="_storage = storage", span="56-56", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs"];
m13_14 [label="_workerCount = workerCount", span="57-57", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs"];
m13_15 [label="_queues = queues", span="58-58", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs"];
m13_16 [label="_serverId = String.Format(''{0}:{1}'', Environment.MachineName.ToLowerInvariant(), Process.GetCurrentProcess().Id)", span="60-60", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs"];
m13_17 [label="_serverRunner = GetServerRunner()", span="63-63", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs"];
m13_18 [label="Exit HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", span="49-49", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", file="SucceededState.feature.cs"];
m13_30 [label="Entry Unk.Info", span="", cluster="Unk.Info", file="SucceededState.feature.cs"];
m13_76 [label="Entry HangFire.JobStorage.GetComponents()", span="57-57", cluster="HangFire.JobStorage.GetComponents()", file="SucceededState.feature.cs"];
m13_19 [label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", span="0-0", cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", file="SucceededState.feature.cs"];
m13_47 [label="Entry System.Lazy<T>.Lazy(System.Func<T>)", span="0-0", cluster="System.Lazy<T>.Lazy(System.Func<T>)", file="SucceededState.feature.cs"];
m13_23 [label="Entry System.Diagnostics.Process.GetCurrentProcess()", span="0-0", cluster="System.Diagnostics.Process.GetCurrentProcess()", file="SucceededState.feature.cs"];
m13_31 [label="Entry HangFire.Server.IServerComponentRunner.Start()", span="22-22", cluster="HangFire.Server.IServerComponentRunner.Start()", file="SucceededState.feature.cs"];
m13_72 [label="Entry SchedulePoller.cstr", span="", cluster="SchedulePoller.cstr", file="SucceededState.feature.cs"];
m13_78 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="SucceededState.feature.cs"];
m13_57 [label="Entry HangFire.BackgroundJobServer.GetCommonComponentRunners()", span="115-115", cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()", file="SucceededState.feature.cs"];
m13_61 [label="yield return new ServerComponentRunner(\r\n                new ServerHeartbeat(_storage, _serverId));", span="117-118", cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()", color=green, community=0, file="SucceededState.feature.cs"];
m13_62 [label="yield return new WorkerManager(\r\n                _serverId, _workerCount, _queues, _storage, new JobPerformanceProcess(), new StateMachineFactory(_storage));", span="120-121", cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()", color=green, community=0, file="SucceededState.feature.cs"];
m13_63 [label="yield return new ServerComponentRunner(\r\n                new ServerWatchdog(_storage));", span="123-124", cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()", color=green, community=0, file="SucceededState.feature.cs"];
m13_64 [label="yield return new ServerComponentRunner(\r\n                new SchedulePoller(_storage, new StateMachineFactory(_storage), _options.SchedulePollingInterval));", span="126-127", cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()", color=green, community=0, file="SucceededState.feature.cs"];
m13_65 [label="Exit HangFire.BackgroundJobServer.GetCommonComponentRunners()", span="115-115", cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()", file="SucceededState.feature.cs"];
m13_67 [label="Entry HangFire.Server.ServerHeartbeat.ServerHeartbeat(HangFire.JobStorage, string)", span="28-28", cluster="HangFire.Server.ServerHeartbeat.ServerHeartbeat(HangFire.JobStorage, string)", file="SucceededState.feature.cs"];
m13_35 [label="Entry HangFire.Server.IServerComponentRunner.Stop()", span="23-23", cluster="HangFire.Server.IServerComponentRunner.Stop()", file="SucceededState.feature.cs"];
m13_69 [label="Entry HangFire.Server.JobPerformanceProcess.JobPerformanceProcess()", span="28-28", cluster="HangFire.Server.JobPerformanceProcess.JobPerformanceProcess()", file="SucceededState.feature.cs"];
m13_32 [label="Entry HangFire.BackgroundJobServer.Stop()", span="72-72", cluster="HangFire.BackgroundJobServer.Stop()", file="SucceededState.feature.cs"];
m13_33 [label="_serverRunner.Stop()", span="74-74", cluster="HangFire.BackgroundJobServer.Stop()", color=green, community=0, file="SucceededState.feature.cs"];
m13_34 [label="Exit HangFire.BackgroundJobServer.Stop()", span="72-72", cluster="HangFire.BackgroundJobServer.Stop()", file="SucceededState.feature.cs"];
m13_45 [label="Entry HangFire.Server.ServerContext.ServerContext()", span="18-18", cluster="HangFire.Server.ServerContext.ServerContext()", file="SucceededState.feature.cs"];
m13_48 [label="Entry HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent, HangFire.Server.ServerComponentRunnerOptions)", span="41-41", cluster="HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent, HangFire.Server.ServerComponentRunnerOptions)", file="SucceededState.feature.cs"];
m13_50 [label="Entry HangFire.BackgroundJobServer.GetServerComponentsRunner()", span="105-105", cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", file="SucceededState.feature.cs"];
m13_51 [label="var componentRunners = new List<IServerComponentRunner>()", span="107-107", cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", color=green, community=0, file="SucceededState.feature.cs"];
m13_52 [label="componentRunners.AddRange(GetCommonComponentRunners())", span="109-109", cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", color=green, community=0, file="SucceededState.feature.cs"];
m13_53 [label="componentRunners.AddRange(GetStorageComponentRunners())", span="110-110", cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", color=green, community=0, file="SucceededState.feature.cs"];
m13_54 [label="return new ServerComponentRunnerCollection(componentRunners);", span="112-112", cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", color=green, community=0, file="SucceededState.feature.cs"];
m13_55 [label="Exit HangFire.BackgroundJobServer.GetServerComponentsRunner()", span="105-105", cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", file="SucceededState.feature.cs"];
m13_22 [label="Entry string.ToLowerInvariant()", span="0-0", cluster="string.ToLowerInvariant()", file="SucceededState.feature.cs"];
m13_79 [label="Entry lambda expression", span="135-135", cluster="lambda expression", file="SucceededState.feature.cs"];
m13_80 [label="new ServerComponentRunner(component)", span="135-135", cluster="lambda expression", color=green, community=0, file="SucceededState.feature.cs"];
m13_81 [label="Exit lambda expression", span="135-135", cluster="lambda expression", file="SucceededState.feature.cs"];
m13_60 [label="Entry HangFire.Server.ServerComponentRunnerCollection.ServerComponentRunnerCollection(System.Collections.Generic.IEnumerable<HangFire.Server.IServerComponentRunner>)", span="26-26", cluster="HangFire.Server.ServerComponentRunnerCollection.ServerComponentRunnerCollection(System.Collections.Generic.IEnumerable<HangFire.Server.IServerComponentRunner>)", file="SucceededState.feature.cs"];
m13_58 [label="Entry System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", span="0-0", cluster="System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", file="SucceededState.feature.cs"];
m13_77 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="SucceededState.feature.cs"];
m13_68 [label="Entry HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", span="32-32", cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SucceededState.feature.cs"];
m13_21 [label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, string)", file="SucceededState.feature.cs"];
m13_25 [label="Entry HangFire.BackgroundJobServer.GetServerRunner()", span="83-83", cluster="HangFire.BackgroundJobServer.GetServerRunner()", file="SucceededState.feature.cs"];
m13_41 [label="var context = new ServerContext\r\n            {\r\n                Queues = _queues,\r\n                WorkerCount = _workerCount\r\n            }", span="85-89", cluster="HangFire.BackgroundJobServer.GetServerRunner()", color=green, community=0, file="SucceededState.feature.cs"];
m13_42 [label="var server = new ServerCore(\r\n                _serverId, \r\n                context, \r\n                _storage, \r\n                new Lazy<IServerComponentRunner>(GetServerComponentsRunner))", span="91-95", cluster="HangFire.BackgroundJobServer.GetServerRunner()", color=green, community=0, file="SucceededState.feature.cs"];
m13_43 [label="return new ServerComponentRunner(\r\n                server, \r\n                new ServerComponentRunnerOptions\r\n                {\r\n                    ShutdownTimeout = ServerShutdownTimeout\r\n                });", span="97-102", cluster="HangFire.BackgroundJobServer.GetServerRunner()", color=green, community=0, file="SucceededState.feature.cs"];
m13_44 [label="Exit HangFire.BackgroundJobServer.GetServerRunner()", span="83-83", cluster="HangFire.BackgroundJobServer.GetServerRunner()", file="SucceededState.feature.cs"];
m13_49 [label="Entry HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", span="24-24", cluster="HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", file="SucceededState.feature.cs"];
m13_36 [label="Entry HangFire.BackgroundJobServer.Dispose()", span="77-77", cluster="HangFire.BackgroundJobServer.Dispose()", file="SucceededState.feature.cs"];
m13_37 [label="_serverRunner.Dispose()", span="79-79", cluster="HangFire.BackgroundJobServer.Dispose()", color=green, community=0, file="SucceededState.feature.cs"];
m13_38 [label="Logger.Info(''HangFire Server stopped.'')", span="80-80", cluster="HangFire.BackgroundJobServer.Dispose()", color=green, community=0, file="SucceededState.feature.cs"];
m13_39 [label="Exit HangFire.BackgroundJobServer.Dispose()", span="77-77", cluster="HangFire.BackgroundJobServer.Dispose()", file="SucceededState.feature.cs"];
m13_66 [label="Entry HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent)", span="36-36", cluster="HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent)", file="SucceededState.feature.cs"];
m13_40 [label="Entry System.IDisposable.Dispose()", span="0-0", cluster="System.IDisposable.Dispose()", file="SucceededState.feature.cs"];
m13_71 [label="Entry HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", span="29-29", cluster="HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", file="SucceededState.feature.cs"];
m13_70 [label="Entry HangFire.States.StateMachineFactory.StateMachineFactory(HangFire.JobStorage)", span="16-16", cluster="HangFire.States.StateMachineFactory.StateMachineFactory(HangFire.JobStorage)", file="SucceededState.feature.cs"];
m13_46 [label="Entry HangFire.Server.ServerCore.ServerCore(string, HangFire.Server.ServerContext, HangFire.JobStorage, System.Lazy<HangFire.Server.IServerComponentRunner>)", span="31-31", cluster="HangFire.Server.ServerCore.ServerCore(string, HangFire.Server.ServerContext, HangFire.JobStorage, System.Lazy<HangFire.Server.IServerComponentRunner>)", file="SucceededState.feature.cs"];
m13_82 [label="HangFire.BackgroundJobServer", span="", file="SucceededState.feature.cs"];
d1 -> d2  [key=0, style=solid, color=green];
d1 -> d54  [key=2, style=dotted, color=green];
d0 -> d1  [key=0, style=solid, color=green];
d2 -> d3  [key=0, style=solid, color=green];
d2 -> d55  [key=2, style=dotted, color=green];
d3 -> d4  [key=0, style=solid, color=green];
d3 -> d56  [key=2, style=dotted, color=green];
d3 -> d9  [key=1, style=dashed, color=green, label=server];
d4 -> d5  [key=0, style=solid, color=green];
d4 -> d43  [key=1, style=dashed, color=green, label=count];
d9 -> d10  [key=0, style=solid, color=green];
d9 -> d59  [key=2, style=dotted, color=green];
d5 -> d6  [key=0, style=solid, color=green];
d5 -> d51  [key=0, style=solid, color=green];
d43 -> d43  [key=1, style=dashed, color=darkseagreen4, label=count];
d43 -> d44  [key=0, style=solid];
d43 -> d88  [key=1, style=dashed, color=darkseagreen4, label=number];
d8 -> d9  [key=0, style=solid, color=green];
d8 -> d10  [key=0, style=solid, color=green];
d8 -> d58  [key=2, style=dotted, color=green];
d10 -> d11  [key=0, style=solid, color=green];
d10 -> d20  [key=0, style=solid, color=green];
d10 -> d60  [key=2, style=dotted, color=green];
d45 -> d5  [key=0, style=solid, color=green];
d45 -> d46  [key=0, style=solid];
d45 -> d60  [key=2, style=dotted];
d48 -> d5  [key=0, style=solid, color=green];
d48 -> d49  [key=0, style=solid];
d48 -> d64  [key=2, style=dotted];
d50 -> d5  [key=0, style=solid, color=green];
d50 -> d64  [key=2, style=dotted];
d6 -> d7  [key=0, style=solid, color=green];
d6 -> d57  [key=2, style=dotted, color=green];
d6 -> d8  [key=1, style=dashed, color=green, label=command];
d6 -> d10  [key=1, style=dashed, color=green, label=command];
d6 -> d11  [key=1, style=dashed, color=green, label=command];
d6 -> d20  [key=1, style=dashed, color=green, label=command];
d6 -> d21  [key=1, style=dashed, color=green, label=command];
d6 -> d29  [key=1, style=dashed, color=green, label=command];
d6 -> d30  [key=1, style=dashed, color=green, label=command];
d6 -> d35  [key=1, style=dashed, color=green, label=command];
d6 -> d36  [key=1, style=dashed, color=green, label=command];
d6 -> d41  [key=1, style=dashed, color=green, label=command];
d6 -> d42  [key=1, style=dashed, color=green, label=command];
d6 -> d45  [key=1, style=dashed, color=green, label=command];
d6 -> d46  [key=1, style=dashed, color=green, label=command];
d51 -> d52  [key=0, style=solid];
d51 -> d64  [key=2, style=dotted];
d7 -> d8  [key=0, style=solid, color=green];
d7 -> d51  [key=0, style=solid, color=green];
d7 -> d58  [key=2, style=dotted, color=green];
d11 -> d12  [key=0, style=solid, color=green];
d11 -> d61  [key=2, style=dotted, color=green];
d11 -> d62  [key=2, style=dotted, color=green];
d11 -> d13  [key=1, style=dashed, color=green, label=workCount];
d20 -> d21  [key=0, style=solid];
d20 -> d29  [key=0, style=solid];
d20 -> d60  [key=2, style=dotted];
d21 -> d22  [key=0, style=solid];
d21 -> d61  [key=2, style=dotted];
d21 -> d62  [key=2, style=dotted];
d21 -> d23  [key=1, style=dashed, color=darkseagreen4, label=workCount];
d29 -> d30  [key=0, style=solid];
d29 -> d35  [key=0, style=solid];
d29 -> d60  [key=2, style=dotted];
d30 -> d31  [key=0, style=solid];
d30 -> d61  [key=2, style=dotted];
d30 -> d62  [key=2, style=dotted];
d30 -> d32  [key=1, style=dashed, color=darkseagreen4, label=workCount];
d35 -> d36  [key=0, style=solid];
d35 -> d41  [key=0, style=solid];
d35 -> d60  [key=2, style=dotted];
d36 -> d37  [key=0, style=solid];
d36 -> d61  [key=2, style=dotted];
d36 -> d62  [key=2, style=dotted];
d36 -> d38  [key=1, style=dashed, color=darkseagreen4, label=workCount];
d41 -> d45  [key=0, style=solid];
d41 -> d42  [key=0, style=solid];
d41 -> d60  [key=2, style=dotted];
d42 -> d43  [key=0, style=solid];
d42 -> d61  [key=2, style=dotted];
d42 -> d62  [key=2, style=dotted];
d42 -> d44  [key=1, style=dashed, color=darkseagreen4, label=seconds];
d46 -> d47  [key=0, style=solid];
d46 -> d61  [key=2, style=dotted];
d46 -> d62  [key=2, style=dotted];
d12 -> d13  [key=0, style=solid, color=green];
d12 -> d14  [key=1, style=dashed, color=green, label=i];
d12 -> d16  [key=1, style=dashed, color=green, label=i];
d13 -> d14  [key=0, style=solid, color=green];
d13 -> d17  [key=0, style=solid, color=green];
d14 -> d15  [key=0, style=solid];
d14 -> d70  [key=1, style=dashed, color=darkseagreen4, label=number];
d16 -> d13  [key=0, style=solid, color=green];
d16 -> d16  [key=1, style=dashed, color=green, label=i];
d17 -> d20  [key=0, style=solid];
d17 -> d18  [key=0, style=solid];
d17 -> d64  [key=2, style=dotted];
d15 -> d16  [key=0, style=solid, color=green];
d15 -> d63  [key=2, style=dotted];
d15 -> d69  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d53 -> d0  [key=0, style=bold, color=blue];
d44 -> d45  [key=0, style=solid];
d44 -> d66  [key=2, style=dotted];
d44 -> d67  [key=2, style=dotted];
d44 -> d87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d88 -> d89  [key=0, style=solid];
d88 -> d72  [key=2, style=dotted];
d47 -> d48  [key=0, style=solid];
d47 -> d68  [key=2, style=dotted];
d47 -> d90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d49 -> d50  [key=0, style=solid];
d52 -> d57  [key=2, style=dotted];
d52 -> d53  [key=0, style=solid];
d19 -> d20  [key=0, style=solid];
d19 -> d64  [key=2, style=dotted];
d22 -> d23  [key=0, style=solid];
d22 -> d25  [key=1, style=dashed, color=darkseagreen4, label=i];
d23 -> d24  [key=0, style=solid];
d23 -> d26  [key=0, style=solid];
d26 -> d29  [key=0, style=solid];
d26 -> d64  [key=2, style=dotted];
d26 -> d27  [key=0, style=solid];
d28 -> d29  [key=0, style=solid];
d28 -> d64  [key=2, style=dotted];
d31 -> d32  [key=0, style=solid];
d31 -> d34  [key=1, style=dashed, color=darkseagreen4, label=i];
d32 -> d35  [key=0, style=solid];
d32 -> d33  [key=0, style=solid];
d37 -> d38  [key=0, style=solid];
d37 -> d40  [key=1, style=dashed, color=darkseagreen4, label=i];
d38 -> d41  [key=0, style=solid];
d38 -> d39  [key=0, style=solid];
d70 -> d71  [key=0, style=solid];
d70 -> d72  [key=2, style=dotted];
d18 -> d19  [key=0, style=solid];
d69 -> d70  [key=0, style=solid];
d87 -> d88  [key=0, style=solid];
d104 -> d88  [key=1, style=dashed, color=darkseagreen4, label=number];
d89 -> d87  [key=0, style=bold, color=blue];
d90 -> d91  [key=0, style=solid];
d25 -> d23  [key=0, style=solid];
d25 -> d25  [key=1, style=dashed, color=darkseagreen4, label=i];
d24 -> d25  [key=0, style=solid];
d24 -> d65  [key=2, style=dotted];
d24 -> d73  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d27 -> d28  [key=0, style=solid];
d34 -> d32  [key=0, style=solid];
d34 -> d34  [key=1, style=dashed, color=darkseagreen4, label=i];
d33 -> d63  [key=2, style=dotted];
d33 -> d34  [key=0, style=solid];
d33 -> d77  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d40 -> d38  [key=0, style=solid];
d40 -> d40  [key=1, style=dashed, color=darkseagreen4, label=i];
d39 -> d63  [key=2, style=dotted];
d39 -> d40  [key=0, style=solid];
d39 -> d81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d103 -> d70  [key=1, style=dashed, color=darkseagreen4, label=number];
d71 -> d69  [key=0, style=bold, color=blue];
d92 -> d63  [key=2, style=dotted];
d92 -> d94  [key=0, style=solid];
d92 -> d95  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d93 -> d63  [key=2, style=dotted];
d93 -> d94  [key=0, style=solid];
d93 -> d99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d94 -> d90  [key=0, style=bold, color=blue];
d91 -> d92  [key=0, style=solid];
d91 -> d93  [key=0, style=solid];
d73 -> d74  [key=0, style=solid];
d77 -> d78  [key=0, style=solid];
d81 -> d82  [key=0, style=solid];
d95 -> d96  [key=0, style=solid];
d99 -> d100  [key=0, style=solid];
d75 -> d73  [key=0, style=bold, color=blue];
d74 -> d75  [key=0, style=solid];
d74 -> d76  [key=2, style=dotted];
d79 -> d77  [key=0, style=bold, color=blue];
d78 -> d79  [key=0, style=solid];
d78 -> d80  [key=2, style=dotted];
d83 -> d81  [key=0, style=bold, color=blue];
d82 -> d83  [key=0, style=solid];
d82 -> d84  [key=2, style=dotted];
d82 -> d85  [key=2, style=dotted];
d82 -> d86  [key=2, style=dotted];
d97 -> d95  [key=0, style=bold, color=blue];
d96 -> d97  [key=0, style=solid];
d96 -> d98  [key=2, style=dotted];
d101 -> d99  [key=0, style=bold, color=blue];
d100 -> d101  [key=0, style=solid];
d100 -> d102  [key=2, style=dotted];
m1_4 -> m1_5  [key=0, style=solid, color=green];
m1_4 -> m1_8  [key=1, style=dashed, color=green, label="HangFire.States.ElectStateContext"];
m1_4 -> m1_11  [key=1, style=dashed, color=green, label="HangFire.States.ElectStateContext"];
m1_4 -> m1_12  [key=1, style=dashed, color=green, label="HangFire.States.ElectStateContext"];
m1_4 -> m1_14  [key=1, style=dashed, color=green, label="HangFire.States.ElectStateContext"];
m1_4 -> m1_16  [key=1, style=dashed, color=green, label="HangFire.States.ElectStateContext"];
m1_5 -> m1_6  [key=0, style=solid, color=green];
m1_5 -> m1_14  [key=1, style=dashed, color=green, label=failedState];
m1_5 -> m1_16  [key=1, style=dashed, color=green, label=failedState];
m1_6 -> m1_8  [key=0, style=solid, color=green];
m1_6 -> m1_7  [key=0, style=solid, color=green];
m1_14 -> m1_17  [key=0, style=solid, color=green];
m1_14 -> m1_24  [key=2, style=dotted, color=green];
m1_16 -> m1_17  [key=0, style=solid, color=green];
m1_16 -> m1_25  [key=2, style=dotted, color=green];
m1_8 -> m1_9  [key=0, style=solid, color=green];
m1_8 -> m1_18  [key=2, style=dotted, color=green];
m1_8 -> m1_10  [key=1, style=dashed, color=green, label=retryAttempt];
m1_8 -> m1_11  [key=1, style=dashed, color=green, label=retryAttempt];
m1_8 -> m1_12  [key=1, style=dashed, color=green, label=retryAttempt];
m1_8 -> m1_14  [key=1, style=dashed, color=green, label=retryAttempt];
m1_9 -> m1_10  [key=0, style=solid, color=green];
m1_9 -> m1_15  [key=0, style=solid, color=green];
m1_10 -> m1_11  [key=0, style=solid, color=green];
m1_10 -> m1_12  [key=1, style=dashed, color=green, label=delay];
m1_10 -> m1_14  [key=1, style=dashed, color=green, label=delay];
m1_10 -> m1_19  [key=2, style=dotted, color=green];
m1_10 -> d66  [key=2, style=dotted, color=green];
m1_11 -> m1_12  [key=0, style=solid, color=green];
m1_11 -> m1_21  [key=2, style=dotted, color=green];
m1_12 -> m1_13  [key=0, style=solid, color=green];
m1_12 -> m1_22  [key=2, style=dotted, color=green];
m1_12 -> m1_23  [key=2, style=dotted, color=green];
m1_13 -> m1_14  [key=0, style=solid, color=green];
m1_13 -> m1_17  [key=0, style=solid, color=green];
m1_15 -> m1_16  [key=0, style=solid, color=green];
m1_15 -> m1_17  [key=0, style=solid, color=green];
m1_7 -> m1_17  [key=0, style=solid, color=green];
m1_17 -> m1_4  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid, color=green];
m1_1 -> m1_2  [key=0, style=solid, color=green];
m1_2 -> m1_3  [key=0, style=solid, color=green];
m1_3 -> m1_0  [key=0, style=bold, color=blue];
m1_19 -> m1_8  [key=3, color=green, style=bold, label="Parameter variable long retryCount"];
m1_19 -> m1_26  [key=0, style=solid, color=green];
m1_19 -> m1_27  [key=1, style=dashed, color=green, label=long];
m1_26 -> m1_27  [key=0, style=solid, color=green];
m1_26 -> m1_29  [key=2, style=dotted, color=green];
m1_27 -> m1_28  [key=0, style=solid, color=green];
m1_27 -> m1_30  [key=2, style=dotted, color=green];
m1_27 -> m1_31  [key=2, style=dotted, color=green];
m1_27 -> m1_32  [key=2, style=dotted, color=green];
m1_28 -> m1_19  [key=0, style=bold, color=blue];
m1_33 -> m1_1  [key=1, style=dashed, color=green, label="HangFire.AutomaticRetryAttribute"];
m1_33 -> m1_2  [key=1, style=dashed, color=green, label="HangFire.AutomaticRetryAttribute"];
m1_33 -> m1_12  [key=1, style=dashed, color=green, label="HangFire.AutomaticRetryAttribute"];
m1_33 -> m1_14  [key=1, style=dashed, color=green, label="HangFire.AutomaticRetryAttribute"];
m1_33 -> m1_9  [key=1, style=dashed, color=green, label="HangFire.AutomaticRetryAttribute"];
m1_33 -> m1_15  [key=1, style=dashed, color=green, label="HangFire.AutomaticRetryAttribute"];
m1_33 -> m1_13  [key=1, style=dashed, color=green, label="HangFire.AutomaticRetryAttribute"];
m2_55 -> m2_56  [key=0, style=solid];
m2_56 -> m2_57  [key=0, style=solid];
m2_56 -> m2_39  [key=2, style=dotted];
m2_57 -> m2_58  [key=0, style=solid];
m2_57 -> m2_22  [key=2, style=dotted];
m2_58 -> m2_59  [key=0, style=solid, color=red];
m2_58 -> m2_40  [key=2, style=dotted];
m2_59 -> m2_60  [key=0, style=solid, color=red];
m2_59 -> m2_41  [key=2, style=dotted, color=red];
m2_60 -> m2_61  [key=0, style=solid, color=red];
m2_60 -> m2_42  [key=2, style=dotted, color=red];
m2_61 -> m2_62  [key=0, style=solid, color=red];
m2_61 -> m2_43  [key=2, style=dotted, color=red];
m2_62 -> m2_63  [key=0, style=solid];
m2_62 -> m2_26  [key=2, style=dotted];
m2_63 -> m2_55  [key=0, style=bold, color=blue];
m2_26 -> m2_27  [key=0, style=solid];
m2_27 -> m2_28  [key=0, style=solid];
m2_27 -> m2_29  [key=2, style=dotted];
m2_28 -> m2_26  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_16  [key=3, color=darkorchid, style=bold, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext"];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_5  [key=2, style=dotted];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_6  [key=2, style=dotted];
m2_2 -> m2_7  [key=2, style=dotted];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_8  [key=2, style=dotted];
m2_4 -> m2_0  [key=0, style=bold, color=blue];
m2_76 -> m2_77  [key=0, style=solid];
m2_77 -> m2_78  [key=0, style=solid];
m2_77 -> m2_39  [key=2, style=dotted];
m2_78 -> m2_79  [key=0, style=solid];
m2_78 -> m2_22  [key=2, style=dotted];
m2_79 -> m2_80  [key=0, style=solid, color=red];
m2_79 -> m2_40  [key=2, style=dotted];
m2_80 -> m2_81  [key=0, style=solid, color=red];
m2_80 -> m2_41  [key=2, style=dotted, color=red];
m2_81 -> m2_82  [key=0, style=solid, color=red];
m2_81 -> m2_42  [key=2, style=dotted, color=red];
m2_82 -> m2_83  [key=0, style=solid, color=red];
m2_82 -> m2_43  [key=2, style=dotted, color=red];
m2_83 -> m2_84  [key=0, style=solid];
m2_83 -> m2_26  [key=2, style=dotted];
m2_84 -> m2_76  [key=0, style=bold, color=blue];
m2_9 -> m2_10  [key=0, style=solid];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_13  [key=2, style=dotted];
m2_11 -> m2_12  [key=0, style=solid];
m2_12 -> m2_9  [key=0, style=bold, color=blue];
m2_30 -> m2_31  [key=0, style=solid];
m2_31 -> m2_32  [key=0, style=solid];
m2_31 -> m2_39  [key=2, style=dotted];
m2_32 -> m2_33  [key=0, style=solid];
m2_32 -> m2_22  [key=2, style=dotted];
m2_33 -> m2_34  [key=0, style=solid, color=red];
m2_33 -> m2_40  [key=2, style=dotted];
m2_34 -> m2_35  [key=0, style=solid, color=red];
m2_34 -> m2_41  [key=2, style=dotted, color=red];
m2_35 -> m2_36  [key=0, style=solid, color=red];
m2_35 -> m2_42  [key=2, style=dotted, color=red];
m2_36 -> m2_37  [key=0, style=solid, color=red];
m2_36 -> m2_43  [key=2, style=dotted, color=red];
m2_37 -> m2_38  [key=0, style=solid];
m2_37 -> m2_26  [key=2, style=dotted];
m2_38 -> m2_30  [key=0, style=bold, color=blue];
m2_44 -> m2_45  [key=0, style=solid];
m2_45 -> m2_46  [key=0, style=solid];
m2_45 -> m2_39  [key=2, style=dotted];
m2_46 -> m2_47  [key=0, style=solid];
m2_46 -> m2_22  [key=2, style=dotted];
m2_47 -> m2_48  [key=0, style=solid, color=red];
m2_47 -> m2_40  [key=2, style=dotted];
m2_48 -> m2_49  [key=0, style=solid, color=red];
m2_48 -> m2_41  [key=2, style=dotted, color=red];
m2_49 -> m2_50  [key=0, style=solid, color=red];
m2_49 -> m2_42  [key=2, style=dotted, color=red];
m2_50 -> m2_51  [key=0, style=solid, color=red];
m2_50 -> m2_43  [key=2, style=dotted, color=red];
m2_51 -> m2_52  [key=0, style=solid, color=red];
m2_51 -> m2_54  [key=2, style=dotted, color=red];
m2_52 -> m2_53  [key=0, style=solid];
m2_52 -> m2_26  [key=2, style=dotted];
m2_53 -> m2_44  [key=0, style=bold, color=blue];
m2_64 -> m2_65  [key=0, style=solid];
m2_65 -> m2_66  [key=0, style=solid];
m2_65 -> m2_39  [key=2, style=dotted];
m2_66 -> m2_67  [key=0, style=solid];
m2_66 -> m2_22  [key=2, style=dotted];
m2_67 -> m2_68  [key=0, style=solid, color=red];
m2_67 -> m2_40  [key=2, style=dotted];
m2_68 -> m2_69  [key=0, style=solid, color=red];
m2_68 -> m2_41  [key=2, style=dotted, color=red];
m2_69 -> m2_70  [key=0, style=solid, color=red];
m2_69 -> m2_41  [key=2, style=dotted, color=red];
m2_70 -> m2_71  [key=0, style=solid, color=red];
m2_70 -> m2_42  [key=2, style=dotted, color=red];
m2_71 -> m2_72  [key=0, style=solid, color=red];
m2_71 -> m2_43  [key=2, style=dotted, color=red];
m2_72 -> m2_73  [key=0, style=solid, color=red];
m2_72 -> m2_42  [key=2, style=dotted, color=red];
m2_73 -> m2_74  [key=0, style=solid, color=red];
m2_73 -> m2_43  [key=2, style=dotted, color=red];
m2_74 -> m2_75  [key=0, style=solid];
m2_74 -> m2_26  [key=2, style=dotted];
m2_75 -> m2_64  [key=0, style=bold, color=blue];
m2_85 -> m2_86  [key=0, style=solid];
m2_86 -> m2_87  [key=0, style=solid];
m2_86 -> m2_39  [key=2, style=dotted];
m2_87 -> m2_88  [key=0, style=solid];
m2_87 -> m2_22  [key=2, style=dotted];
m2_88 -> m2_89  [key=0, style=solid, color=red];
m2_88 -> m2_40  [key=2, style=dotted];
m2_89 -> m2_90  [key=0, style=solid, color=red];
m2_89 -> m2_41  [key=2, style=dotted, color=red];
m2_90 -> m2_91  [key=0, style=solid, color=red];
m2_90 -> m2_42  [key=2, style=dotted, color=red];
m2_91 -> m2_92  [key=0, style=solid, color=red];
m2_91 -> m2_43  [key=2, style=dotted, color=red];
m2_92 -> m2_93  [key=0, style=solid];
m2_92 -> m2_26  [key=2, style=dotted];
m2_93 -> m2_85  [key=0, style=bold, color=blue];
m2_14 -> m2_15  [key=0, style=solid];
m2_15 -> m2_16  [key=0, style=solid];
m2_15 -> m2_17  [key=0, style=solid];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> m2_0  [key=2, style=dotted];
m2_17 -> m2_14  [key=0, style=bold, color=blue];
m2_18 -> m2_19  [key=0, style=solid];
m2_19 -> m2_20  [key=0, style=solid];
m2_19 -> m2_21  [key=2, style=dotted];
m2_20 -> m2_18  [key=0, style=bold, color=blue];
m2_22 -> m2_23  [key=0, style=solid];
m2_22 -> m2_31  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m2_22 -> m2_45  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m2_22 -> m2_56  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m2_22 -> m2_65  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m2_22 -> m2_77  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m2_22 -> m2_86  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m2_23 -> m2_24  [key=0, style=solid];
m2_23 -> m2_25  [key=2, style=dotted];
m2_24 -> m2_22  [key=0, style=bold, color=blue];
m2_94 -> m2_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobFetcherFeature"];
m2_94 -> m2_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobFetcherFeature"];
m2_94 -> m2_46  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobFetcherFeature"];
m2_94 -> m2_52  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobFetcherFeature"];
m2_94 -> m2_57  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobFetcherFeature"];
m2_94 -> m2_62  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobFetcherFeature"];
m2_94 -> m2_66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobFetcherFeature"];
m2_94 -> m2_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobFetcherFeature"];
m2_94 -> m2_78  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobFetcherFeature"];
m2_94 -> m2_83  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobFetcherFeature"];
m2_94 -> m2_87  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobFetcherFeature"];
m2_94 -> m2_92  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobFetcherFeature"];
m3_24 -> m3_31  [key=0, style=solid, color=green];
m3_31 -> m3_32  [key=0, style=solid, color=green];
m3_32 -> m3_24  [key=0, style=bold, color=blue];
m3_0 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorage"];
m3_0 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m3_0 -> m3_1  [key=0, style=solid];
m3_3 -> m3_3  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_0  [key=0, style=bold, color=blue];
m3_4 -> m3_5  [key=0, style=solid];
m3_1 -> m3_3  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_2 -> m3_5  [key=0, style=solid];
m3_2 -> m3_6  [key=2, style=dotted];
m3_2 -> m3_3  [key=0, style=solid];
m3_2 -> m3_4  [key=2, style=dotted];
m3_5 -> m3_0  [key=0, style=bold, color=blue];
m3_5 -> m3_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.DashboardOptions"];
m3_5 -> m3_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.DashboardOptions"];
m3_7 -> m3_12  [key=1, style=dashed, color=green, label="System.Threading.CancellationToken"];
m3_7 -> m3_15  [key=1, style=dashed, color=green, label="System.Threading.CancellationToken"];
m3_7 -> m3_8  [key=0, style=solid];
m3_12 -> m3_12  [key=1, style=dashed, color=green, label="System.Threading.CancellationToken"];
m3_12 -> m3_13  [key=0, style=solid, color=green];
m3_12 -> m3_19  [key=2, style=dotted, color=green];
m3_11 -> m3_12  [key=0, style=solid, color=green];
m3_11 -> m3_14  [key=0, style=solid, color=green];
m3_13 -> m3_15  [key=1, style=dashed, color=green, label="System.Threading.CancellationToken"];
m3_13 -> m3_14  [key=0, style=solid, color=green];
m3_13 -> m3_13  [key=1, style=dashed, color=green, label="System.Threading.CancellationToken"];
m3_13 -> m3_20  [key=2, style=dotted, color=green];
m3_15 -> m3_15  [key=1, style=dashed, color=green, label="System.Threading.CancellationToken"];
m3_15 -> m3_16  [key=0, style=solid, color=green];
m3_15 -> m3_19  [key=2, style=dotted, color=green];
m3_14 -> m3_15  [key=0, style=solid, color=green];
m3_14 -> m3_9  [key=0, style=solid, color=green];
m3_10 -> m3_11  [key=0, style=solid, color=green];
m3_10 -> m3_18  [key=2, style=dotted, color=green];
m3_10 -> m3_21  [key=1, style=dashed, color=green, label="lambda expression"];
m3_10 -> m3_14  [key=1, style=dashed, color=green, label=removedCount];
m3_9 -> m3_10  [key=0, style=solid, color=green];
m3_8 -> m3_9  [key=0, style=solid];
m3_8 -> m3_17  [key=2, style=dotted];
m3_16 -> m3_7  [key=0, style=bold, color=blue];
m3_26 -> m3_27  [key=0, style=solid];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_29  [key=2, style=dotted];
m3_27 -> m3_30  [key=2, style=dotted];
m3_28 -> m3_26  [key=0, style=bold, color=blue];
m3_21 -> m3_22  [key=0, style=solid, color=green];
m3_22 -> m3_23  [key=0, style=solid, color=green];
m3_22 -> m3_24  [key=2, style=dotted, color=green];
m3_22 -> m3_25  [key=2, style=dotted, color=green];
m3_23 -> m3_21  [key=0, style=bold, color=blue];
m3_33 -> m3_15  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.CountersAggregator"];
m3_33 -> m3_10  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.CountersAggregator"];
m3_33 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.CountersAggregator"];
m3_33 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.CountersAggregator"];
m3_33 -> m3_27  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.CountersAggregator"];
m4_40 -> m4_41  [key=0, style=solid];
m4_41 -> m4_8  [key=2, style=dotted];
m4_41 -> m4_42  [key=0, style=solid];
m4_41 -> m4_45  [key=1, style=dashed, color=darkseagreen4, label=options];
m4_42 -> m4_33  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.States.JobState oldState"];
m4_42 -> m4_15  [key=2, style=dotted];
m4_42 -> m4_43  [key=0, style=solid];
m4_42 -> m4_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_43 -> m4_40  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_0  [key=0, style=bold, color=blue];
m4_1 -> m4_8  [key=2, style=dotted];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label=options];
m4_1 -> m4_4  [key=1, style=dashed, color=darkseagreen4, label=options];
m4_1 -> m4_5  [key=1, style=dashed, color=darkseagreen4, label=options];
m4_1 -> m4_6  [key=1, style=dashed, color=darkseagreen4, label=options];
m4_33 -> m4_34  [key=0, style=solid, color=green];
m4_34 -> m4_35  [key=0, style=solid, color=green];
m4_34 -> m4_8  [key=2, style=dotted, color=green];
m4_34 -> m4_38  [key=1, style=dashed, color=green, label=options];
m4_35 -> m4_36  [key=0, style=solid, color=green];
m4_35 -> m4_15  [key=2, style=dotted, color=green];
m4_35 -> m4_37  [key=1, style=dashed, color=green, label="lambda expression"];
m4_36 -> m4_33  [key=0, style=bold, color=blue];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_9  [key=2, style=dotted];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_9  [key=2, style=dotted];
m4_4 -> m4_5  [key=0, style=solid];
m4_4 -> m4_9  [key=2, style=dotted];
m4_4 -> m4_2  [key=0, style=bold, color=blue];
m4_5 -> m4_6  [key=0, style=solid];
m4_5 -> m4_10  [key=2, style=dotted];
m4_5 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.RetryAttribute"];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_10  [key=2, style=dotted];
m4_7 -> m4_0  [key=0, style=bold, color=blue];
m4_8 -> m4_47  [key=0, style=solid];
m4_47 -> m4_48  [key=0, style=solid];
m4_47 -> m4_49  [key=2, style=dotted];
m4_48 -> m4_8  [key=0, style=bold, color=blue];
m4_19 -> m4_20  [key=0, style=solid];
m4_20 -> m4_8  [key=2, style=dotted];
m4_20 -> m4_21  [key=0, style=solid];
m4_20 -> m4_24  [key=1, style=dashed, color=darkseagreen4, label=options];
m4_21 -> m4_15  [key=2, style=dotted];
m4_21 -> m4_22  [key=0, style=solid];
m4_21 -> m4_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_22 -> m4_19  [key=0, style=bold, color=blue];
m4_11 -> m4_12  [key=0, style=solid];
m4_12 -> m4_8  [key=2, style=dotted];
m4_12 -> m4_13  [key=0, style=solid];
m4_12 -> m4_17  [key=1, style=dashed, color=darkseagreen4, label=options];
m4_13 -> m4_15  [key=2, style=dotted];
m4_13 -> m4_14  [key=0, style=solid];
m4_13 -> m4_16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_14 -> m4_11  [key=0, style=bold, color=blue];
m4_30 -> m4_31  [key=0, style=solid];
m4_38 -> m4_39  [key=0, style=solid];
m4_37 -> m4_38  [key=0, style=solid];
m4_39 -> m4_37  [key=0, style=bold, color=blue];
m4_17 -> m4_18  [key=0, style=solid];
m4_24 -> m4_25  [key=0, style=solid];
m4_31 -> m4_32  [key=0, style=solid];
m4_45 -> m4_46  [key=0, style=solid];
m4_44 -> m4_45  [key=0, style=solid];
m4_16 -> m4_17  [key=0, style=solid];
m4_23 -> m4_24  [key=0, style=solid];
m4_18 -> m4_16  [key=0, style=bold, color=blue];
m4_25 -> m4_23  [key=0, style=bold, color=blue];
m4_32 -> m4_30  [key=0, style=bold, color=blue];
m4_46 -> m4_44  [key=0, style=bold, color=blue];
m4_26 -> m4_27  [key=0, style=solid];
m4_27 -> m4_8  [key=2, style=dotted];
m4_27 -> m4_28  [key=0, style=solid];
m4_27 -> m4_31  [key=1, style=dashed, color=darkseagreen4, label=options];
m4_28 -> m4_15  [key=2, style=dotted];
m4_28 -> m4_29  [key=0, style=solid];
m4_28 -> m4_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_29 -> m4_26  [key=0, style=bold, color=blue];
m4_50 -> m4_34  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts"];
m4_50 -> m4_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts"];
m4_50 -> m4_12  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts"];
m4_50 -> m4_20  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts"];
m4_50 -> m4_27  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts"];
m4_50 -> m4_41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts"];
m4_54 -> m4_38  [key=1, style=dashed, color=darkseagreen4, label=options];
m4_51 -> m4_17  [key=1, style=dashed, color=darkseagreen4, label=options];
m4_52 -> m4_24  [key=1, style=dashed, color=darkseagreen4, label=options];
m4_53 -> m4_31  [key=1, style=dashed, color=darkseagreen4, label=options];
m4_55 -> m4_45  [key=1, style=dashed, color=darkseagreen4, label=options];
m5_5 -> m5_6  [key=0, style=solid];
m5_6 -> m5_7  [key=0, style=solid];
m5_6 -> m5_8  [key=2, style=dotted];
m5_6 -> m5_4  [key=2, style=dotted];
m5_7 -> m5_5  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_3  [key=2, style=dotted];
m5_1 -> m5_4  [key=2, style=dotted];
m5_2 -> m5_0  [key=0, style=bold, color=blue];
m5_12 -> m5_13  [key=0, style=solid];
m5_13 -> m5_14  [key=0, style=solid];
m5_13 -> m5_3  [key=2, style=dotted];
m5_13 -> m5_15  [key=2, style=dotted];
m5_13 -> m5_16  [key=2, style=dotted];
m5_13 -> m5_17  [key=2, style=dotted];
m5_14 -> m5_12  [key=0, style=bold, color=blue];
m5_19 -> m5_20  [key=0, style=solid];
m5_19 -> m5_3  [key=2, style=dotted];
m5_19 -> m5_21  [key=2, style=dotted];
m5_18 -> m5_19  [key=0, style=solid];
m5_20 -> m5_18  [key=0, style=bold, color=blue];
m5_9 -> m5_10  [key=0, style=solid];
m5_10 -> m5_11  [key=0, style=solid];
m5_10 -> m5_8  [key=2, style=dotted];
m5_10 -> m5_4  [key=2, style=dotted];
m5_11 -> m5_9  [key=0, style=bold, color=blue];
m5_22 -> m5_23  [key=0, style=solid];
m5_22 -> m5_24  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_23 -> m5_24  [key=0, style=solid];
m5_23 -> m5_3  [key=2, style=dotted];
m5_23 -> m5_26  [key=2, style=dotted];
m5_24 -> m5_25  [key=0, style=solid];
m5_24 -> m5_27  [key=2, style=dotted];
m5_25 -> m5_22  [key=0, style=bold, color=blue];
m6_45 -> m6_46  [key=0, style=solid, color=green];
m6_46 -> m6_47  [key=0, style=solid, color=green];
m6_46 -> m6_43  [key=2, style=dotted, color=green];
m6_47 -> m6_48  [key=0, style=solid, color=green];
m6_47 -> m6_22  [key=2, style=dotted, color=green];
m6_48 -> m6_49  [key=0, style=solid, color=green];
m6_48 -> m6_30  [key=2, style=dotted, color=green];
m6_49 -> m6_50  [key=0, style=solid, color=green];
m6_49 -> m6_55  [key=2, style=dotted, color=green];
m6_49 -> m6_51  [key=1, style=dashed, color=green, label=table1];
m6_49 -> m6_52  [key=1, style=dashed, color=green, label=table1];
m6_50 -> m6_51  [key=0, style=solid, color=green];
m6_50 -> m6_56  [key=2, style=dotted, color=green];
m6_51 -> m6_52  [key=0, style=solid, color=green];
m6_51 -> m6_56  [key=2, style=dotted, color=green];
m6_52 -> m6_53  [key=0, style=solid, color=green];
m6_52 -> m6_44  [key=2, style=dotted, color=green];
m6_53 -> m6_54  [key=0, style=solid, color=green];
m6_53 -> m6_26  [key=2, style=dotted, color=green];
m6_54 -> m6_45  [key=0, style=bold, color=blue];
m6_67 -> m6_68  [key=0, style=solid, color=green];
m6_68 -> m6_69  [key=0, style=solid, color=green];
m6_68 -> m6_43  [key=2, style=dotted, color=green];
m6_69 -> m6_70  [key=0, style=solid, color=green];
m6_69 -> m6_22  [key=2, style=dotted, color=green];
m6_70 -> m6_71  [key=0, style=solid, color=green];
m6_70 -> m6_30  [key=2, style=dotted, color=green];
m6_71 -> m6_72  [key=0, style=solid, color=green];
m6_71 -> m6_66  [key=2, style=dotted, color=green];
m6_72 -> m6_73  [key=0, style=solid, color=green];
m6_72 -> m6_35  [key=2, style=dotted, color=green];
m6_73 -> m6_74  [key=0, style=solid, color=green];
m6_73 -> m6_44  [key=2, style=dotted, color=green];
m6_74 -> m6_75  [key=0, style=solid, color=green];
m6_74 -> m6_26  [key=2, style=dotted, color=green];
m6_75 -> m6_67  [key=0, style=bold, color=blue];
m6_36 -> m6_37  [key=0, style=solid, color=green];
m6_37 -> m6_38  [key=0, style=solid, color=green];
m6_37 -> m6_43  [key=2, style=dotted, color=green];
m6_38 -> m6_39  [key=0, style=solid, color=green];
m6_38 -> m6_22  [key=2, style=dotted, color=green];
m6_39 -> m6_40  [key=0, style=solid, color=green];
m6_39 -> m6_30  [key=2, style=dotted, color=green];
m6_40 -> m6_41  [key=0, style=solid, color=green];
m6_40 -> m6_44  [key=2, style=dotted, color=green];
m6_41 -> m6_42  [key=0, style=solid, color=green];
m6_41 -> m6_26  [key=2, style=dotted, color=green];
m6_42 -> m6_36  [key=0, style=bold, color=blue];
m6_14 -> m6_15  [key=0, style=solid, color=green];
m6_15 -> m6_16  [key=0, style=solid, color=green];
m6_15 -> m6_17  [key=0, style=solid, color=green];
m6_16 -> m6_17  [key=0, style=solid, color=green];
m6_16 -> m6_0  [key=2, style=dotted, color=green];
m6_17 -> m6_14  [key=0, style=bold, color=blue];
m6_18 -> m6_19  [key=0, style=solid, color=green];
m6_19 -> m6_20  [key=0, style=solid, color=green];
m6_19 -> m6_21  [key=2, style=dotted, color=green];
m6_20 -> m6_18  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid, color=green];
m6_0 -> m6_16  [key=3, color=green, style=bold, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext"];
m6_1 -> m6_2  [key=0, style=solid, color=green];
m6_1 -> m6_5  [key=2, style=dotted, color=green];
m6_2 -> m6_3  [key=0, style=solid, color=green];
m6_2 -> m6_6  [key=2, style=dotted, color=green];
m6_2 -> m6_7  [key=2, style=dotted, color=green];
m6_3 -> m6_4  [key=0, style=solid, color=green];
m6_3 -> m6_8  [key=2, style=dotted, color=green];
m6_4 -> m6_0  [key=0, style=bold, color=blue];
m6_57 -> m6_58  [key=0, style=solid, color=green];
m6_58 -> m6_59  [key=0, style=solid, color=green];
m6_58 -> m6_43  [key=2, style=dotted, color=green];
m6_59 -> m6_60  [key=0, style=solid, color=green];
m6_59 -> m6_22  [key=2, style=dotted, color=green];
m6_60 -> m6_61  [key=0, style=solid, color=green];
m6_60 -> m6_30  [key=2, style=dotted, color=green];
m6_61 -> m6_62  [key=0, style=solid, color=green];
m6_61 -> m6_66  [key=2, style=dotted, color=green];
m6_62 -> m6_63  [key=0, style=solid, color=green];
m6_62 -> m6_44  [key=2, style=dotted, color=green];
m6_63 -> m6_64  [key=0, style=solid, color=green];
m6_63 -> m6_35  [key=2, style=dotted, color=green];
m6_64 -> m6_65  [key=0, style=solid, color=green];
m6_64 -> m6_26  [key=2, style=dotted, color=green];
m6_65 -> m6_57  [key=0, style=bold, color=blue];
m6_26 -> m6_27  [key=0, style=solid, color=green];
m6_27 -> m6_28  [key=0, style=solid, color=green];
m6_27 -> m6_29  [key=2, style=dotted, color=green];
m6_28 -> m6_26  [key=0, style=bold, color=blue];
m6_22 -> m6_23  [key=0, style=solid, color=green];
m6_22 -> m6_37  [key=3, color=green, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m6_22 -> m6_46  [key=3, color=green, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m6_22 -> m6_58  [key=3, color=green, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m6_22 -> m6_68  [key=3, color=green, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m6_23 -> m6_24  [key=0, style=solid, color=green];
m6_23 -> m6_25  [key=2, style=dotted, color=green];
m6_24 -> m6_22  [key=0, style=bold, color=blue];
m6_30 -> m6_31  [key=0, style=solid, color=green];
m6_31 -> m6_32  [key=0, style=solid, color=green];
m6_31 -> m6_34  [key=2, style=dotted, color=green];
m6_32 -> m6_33  [key=0, style=solid, color=green];
m6_32 -> m6_35  [key=2, style=dotted, color=green];
m6_33 -> m6_30  [key=0, style=bold, color=blue];
m6_9 -> m6_10  [key=0, style=solid, color=green];
m6_10 -> m6_11  [key=0, style=solid, color=green];
m6_10 -> m6_13  [key=2, style=dotted, color=green];
m6_11 -> m6_12  [key=0, style=solid, color=green];
m6_12 -> m6_9  [key=0, style=bold, color=blue];
m6_76 -> m6_38  [key=1, style=dashed, color=green, label="HangFire.Tests.States.ProcessingStateFeature"];
m6_76 -> m6_39  [key=1, style=dashed, color=green, label="HangFire.Tests.States.ProcessingStateFeature"];
m6_76 -> m6_41  [key=1, style=dashed, color=green, label="HangFire.Tests.States.ProcessingStateFeature"];
m6_76 -> m6_47  [key=1, style=dashed, color=green, label="HangFire.Tests.States.ProcessingStateFeature"];
m6_76 -> m6_48  [key=1, style=dashed, color=green, label="HangFire.Tests.States.ProcessingStateFeature"];
m6_76 -> m6_53  [key=1, style=dashed, color=green, label="HangFire.Tests.States.ProcessingStateFeature"];
m6_76 -> m6_59  [key=1, style=dashed, color=green, label="HangFire.Tests.States.ProcessingStateFeature"];
m6_76 -> m6_60  [key=1, style=dashed, color=green, label="HangFire.Tests.States.ProcessingStateFeature"];
m6_76 -> m6_64  [key=1, style=dashed, color=green, label="HangFire.Tests.States.ProcessingStateFeature"];
m6_76 -> m6_69  [key=1, style=dashed, color=green, label="HangFire.Tests.States.ProcessingStateFeature"];
m6_76 -> m6_70  [key=1, style=dashed, color=green, label="HangFire.Tests.States.ProcessingStateFeature"];
m6_76 -> m6_74  [key=1, style=dashed, color=green, label="HangFire.Tests.States.ProcessingStateFeature"];
m7_31 -> m7_32  [key=0, style=solid];
m7_32 -> m7_33  [key=0, style=solid];
m7_32 -> m7_35  [key=2, style=dotted];
m7_32 -> m7_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_33 -> m7_34  [key=0, style=solid];
m7_33 -> m7_36  [key=2, style=dotted];
m7_34 -> m7_31  [key=0, style=bold, color=blue];
m7_67 -> m7_68  [key=0, style=solid];
m7_68 -> m7_53  [key=2, style=dotted];
m7_68 -> m7_69  [key=0, style=solid];
m7_68 -> m7_73  [key=1, style=dashed, color=darkseagreen4, label=manager];
m7_69 -> m7_70  [key=0, style=solid];
m7_69 -> m7_35  [key=2, style=dotted];
m7_69 -> m7_72  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_70 -> m7_71  [key=0, style=solid];
m7_70 -> m7_36  [key=2, style=dotted];
m7_71 -> m7_67  [key=0, style=bold, color=blue];
m7_156 -> m7_157  [key=0, style=solid];
m7_157 -> m7_158  [key=0, style=solid];
m7_157 -> m7_16  [key=2, style=dotted];
m7_157 -> m7_138  [key=2, style=dotted];
m7_157 -> m7_11  [key=2, style=dotted];
m7_157 -> m7_139  [key=2, style=dotted];
m7_157 -> m7_140  [key=2, style=dotted];
m7_157 -> m7_17  [key=2, style=dotted];
m7_157 -> m7_162  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_157 -> m7_165  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_158 -> m7_53  [key=2, style=dotted];
m7_158 -> m7_159  [key=0, style=solid];
m7_159 -> m7_160  [key=0, style=solid];
m7_159 -> m7_131  [key=2, style=dotted];
m7_160 -> m7_161  [key=0, style=solid];
m7_160 -> m7_96  [key=2, style=dotted];
m7_160 -> m7_168  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_161 -> m7_156  [key=0, style=bold, color=blue];
m7_194 -> m7_195  [key=0, style=solid];
m7_195 -> m7_53  [key=2, style=dotted];
m7_195 -> m7_196  [key=0, style=solid];
m7_196 -> m7_197  [key=0, style=solid];
m7_196 -> m7_193  [key=2, style=dotted];
m7_197 -> m7_198  [key=0, style=solid];
m7_197 -> m7_96  [key=2, style=dotted];
m7_197 -> m7_201  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_198 -> m7_199  [key=0, style=solid];
m7_198 -> m7_96  [key=2, style=dotted];
m7_198 -> m7_205  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_199 -> m7_200  [key=0, style=solid];
m7_199 -> m7_96  [key=2, style=dotted];
m7_199 -> m7_209  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_200 -> m7_194  [key=0, style=bold, color=blue];
m7_75 -> m7_76  [key=0, style=solid];
m7_76 -> m7_53  [key=2, style=dotted];
m7_76 -> m7_77  [key=0, style=solid];
m7_76 -> m7_81  [key=1, style=dashed, color=darkseagreen4, label=manager];
m7_77 -> m7_78  [key=0, style=solid];
m7_77 -> m7_35  [key=2, style=dotted];
m7_77 -> m7_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_78 -> m7_79  [key=0, style=solid];
m7_78 -> m7_36  [key=2, style=dotted];
m7_79 -> m7_75  [key=0, style=bold, color=blue];
m7_91 -> m7_92  [key=0, style=solid];
m7_92 -> m7_53  [key=2, style=dotted];
m7_92 -> m7_93  [key=0, style=solid];
m7_93 -> m7_94  [key=0, style=solid];
m7_93 -> m7_58  [key=2, style=dotted];
m7_94 -> m7_95  [key=0, style=solid];
m7_94 -> m7_96  [key=2, style=dotted];
m7_94 -> m7_97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_95 -> m7_91  [key=0, style=bold, color=blue];
m7_186 -> m7_187  [key=0, style=solid];
m7_187 -> m7_53  [key=2, style=dotted];
m7_187 -> m7_188  [key=0, style=solid];
m7_187 -> m7_191  [key=1, style=dashed, color=darkseagreen4, label=manager];
m7_188 -> m7_35  [key=2, style=dotted];
m7_188 -> m7_189  [key=0, style=solid];
m7_188 -> m7_190  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_189 -> m7_186  [key=0, style=bold, color=blue];
m7_174 -> m7_175  [key=0, style=solid];
m7_175 -> m7_53  [key=2, style=dotted];
m7_175 -> m7_176  [key=0, style=solid];
m7_175 -> m7_181  [key=1, style=dashed, color=darkseagreen4, label=manager];
m7_176 -> m7_177  [key=0, style=solid];
m7_176 -> m7_179  [key=2, style=dotted];
m7_176 -> m7_180  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_177 -> m7_178  [key=0, style=solid];
m7_177 -> m7_96  [key=2, style=dotted];
m7_177 -> m7_183  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_178 -> m7_174  [key=0, style=bold, color=blue];
m7_132 -> m7_133  [key=0, style=solid];
m7_133 -> m7_134  [key=0, style=solid];
m7_133 -> m7_16  [key=2, style=dotted];
m7_133 -> m7_138  [key=2, style=dotted];
m7_133 -> m7_11  [key=2, style=dotted];
m7_133 -> m7_139  [key=2, style=dotted];
m7_133 -> m7_140  [key=2, style=dotted];
m7_133 -> m7_17  [key=2, style=dotted];
m7_133 -> m7_141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_133 -> m7_145  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_134 -> m7_53  [key=2, style=dotted];
m7_134 -> m7_135  [key=0, style=solid];
m7_135 -> m7_136  [key=0, style=solid];
m7_135 -> m7_131  [key=2, style=dotted];
m7_136 -> m7_137  [key=0, style=solid];
m7_136 -> m7_96  [key=2, style=dotted];
m7_136 -> m7_149  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_137 -> m7_132  [key=0, style=bold, color=blue];
m7_53 -> m7_212  [key=0, style=solid];
m7_212 -> m7_213  [key=0, style=solid];
m7_212 -> m7_40  [key=2, style=dotted];
m7_213 -> m7_53  [key=0, style=bold, color=blue];
m7_41 -> m7_42  [key=0, style=solid];
m7_42 -> m7_43  [key=0, style=solid];
m7_42 -> m7_35  [key=2, style=dotted];
m7_42 -> m7_45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_43 -> m7_44  [key=0, style=solid];
m7_43 -> m7_36  [key=2, style=dotted];
m7_44 -> m7_41  [key=0, style=bold, color=blue];
m7_105 -> m7_101  [key=0, style=bold, color=blue];
m7_102 -> m7_53  [key=2, style=dotted];
m7_102 -> m7_103  [key=0, style=solid];
m7_103 -> m7_104  [key=0, style=solid];
m7_103 -> m7_58  [key=2, style=dotted];
m7_104 -> m7_105  [key=0, style=solid];
m7_104 -> m7_96  [key=2, style=dotted];
m7_104 -> m7_106  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_101 -> m7_102  [key=0, style=solid];
m7_115 -> m7_116  [key=0, style=solid];
m7_116 -> m7_53  [key=2, style=dotted];
m7_116 -> m7_117  [key=0, style=solid];
m7_117 -> m7_118  [key=0, style=solid];
m7_117 -> m7_58  [key=2, style=dotted];
m7_118 -> m7_119  [key=0, style=solid];
m7_118 -> m7_96  [key=2, style=dotted];
m7_118 -> m7_120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_119 -> m7_115  [key=0, style=bold, color=blue];
m7_171 -> m7_172  [key=0, style=solid];
m7_55 -> m7_56  [key=0, style=solid];
m7_55 -> m7_57  [key=2, style=dotted];
m7_55 -> m7_58  [key=2, style=dotted];
m7_38 -> m7_39  [key=0, style=solid];
m7_38 -> m7_40  [key=2, style=dotted];
m7_46 -> m7_47  [key=0, style=solid];
m7_46 -> m7_40  [key=2, style=dotted];
m7_65 -> m7_66  [key=0, style=solid];
m7_65 -> m7_57  [key=2, style=dotted];
m7_65 -> m7_58  [key=2, style=dotted];
m7_73 -> m7_74  [key=0, style=solid];
m7_73 -> m7_58  [key=2, style=dotted];
m7_81 -> m7_82  [key=0, style=solid];
m7_81 -> m7_58  [key=2, style=dotted];
m7_89 -> m7_90  [key=0, style=solid];
m7_89 -> m7_58  [key=2, style=dotted];
m7_98 -> m7_99  [key=0, style=solid];
m7_98 -> m7_100  [key=2, style=dotted];
m7_107 -> m7_108  [key=0, style=solid];
m7_107 -> m7_109  [key=2, style=dotted];
m7_107 -> m7_35  [key=2, style=dotted];
m7_107 -> m7_110  [key=2, style=dotted];
m7_107 -> m7_111  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_142 -> m7_143  [key=0, style=solid];
m7_142 -> m7_109  [key=2, style=dotted];
m7_142 -> m7_144  [key=2, style=dotted];
m7_163 -> m7_164  [key=0, style=solid];
m7_163 -> m7_109  [key=2, style=dotted];
m7_163 -> m7_144  [key=2, style=dotted];
m7_181 -> m7_182  [key=0, style=solid];
m7_181 -> m7_131  [key=2, style=dotted];
m7_202 -> m7_203  [key=0, style=solid];
m7_202 -> m7_204  [key=2, style=dotted];
m7_206 -> m7_207  [key=0, style=solid];
m7_206 -> m7_109  [key=2, style=dotted];
m7_206 -> m7_208  [key=2, style=dotted];
m7_54 -> m7_55  [key=0, style=solid];
m7_56 -> m7_54  [key=0, style=bold, color=blue];
m7_19 -> m7_20  [key=0, style=solid];
m7_23 -> m7_24  [key=0, style=solid];
m7_27 -> m7_28  [key=0, style=solid];
m7_37 -> m7_38  [key=0, style=solid];
m7_39 -> m7_37  [key=0, style=bold, color=blue];
m7_45 -> m7_46  [key=0, style=solid];
m7_47 -> m7_45  [key=0, style=bold, color=blue];
m7_64 -> m7_65  [key=0, style=solid];
m7_66 -> m7_64  [key=0, style=bold, color=blue];
m7_72 -> m7_73  [key=0, style=solid];
m7_74 -> m7_72  [key=0, style=bold, color=blue];
m7_80 -> m7_81  [key=0, style=solid];
m7_82 -> m7_80  [key=0, style=bold, color=blue];
m7_88 -> m7_89  [key=0, style=solid];
m7_90 -> m7_88  [key=0, style=bold, color=blue];
m7_97 -> m7_98  [key=0, style=solid];
m7_99 -> m7_97  [key=0, style=bold, color=blue];
m7_106 -> m7_107  [key=0, style=solid];
m7_108 -> m7_106  [key=0, style=bold, color=blue];
m7_111 -> m7_112  [key=0, style=solid];
m7_120 -> m7_121  [key=0, style=solid];
m7_129 -> m7_130  [key=0, style=solid];
m7_129 -> m7_131  [key=2, style=dotted];
m7_141 -> m7_142  [key=0, style=solid];
m7_145 -> m7_146  [key=0, style=solid];
m7_143 -> m7_141  [key=0, style=bold, color=blue];
m7_149 -> m7_150  [key=0, style=solid];
m7_162 -> m7_163  [key=0, style=solid];
m7_165 -> m7_166  [key=0, style=solid];
m7_164 -> m7_162  [key=0, style=bold, color=blue];
m7_168 -> m7_169  [key=0, style=solid];
m7_180 -> m7_181  [key=0, style=solid];
m7_182 -> m7_180  [key=0, style=bold, color=blue];
m7_183 -> m7_184  [key=0, style=solid];
m7_191 -> m7_192  [key=0, style=solid];
m7_191 -> m7_193  [key=2, style=dotted];
m7_201 -> m7_202  [key=0, style=solid];
m7_203 -> m7_201  [key=0, style=bold, color=blue];
m7_205 -> m7_206  [key=0, style=solid];
m7_207 -> m7_205  [key=0, style=bold, color=blue];
m7_209 -> m7_210  [key=0, style=solid];
m7_150 -> m7_35  [key=2, style=dotted];
m7_150 -> m7_151  [key=0, style=solid];
m7_150 -> m7_152  [key=2, style=dotted];
m7_150 -> m7_153  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_169 -> m7_35  [key=2, style=dotted];
m7_169 -> m7_170  [key=0, style=solid];
m7_169 -> m7_152  [key=2, style=dotted];
m7_169 -> m7_171  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_184 -> m7_35  [key=2, style=dotted];
m7_184 -> m7_185  [key=0, style=solid];
m7_184 -> m7_152  [key=2, style=dotted];
m7_21 -> m7_19  [key=0, style=bold, color=blue];
m7_20 -> m7_21  [key=0, style=solid];
m7_20 -> m7_22  [key=2, style=dotted];
m7_25 -> m7_23  [key=0, style=bold, color=blue];
m7_24 -> m7_25  [key=0, style=solid];
m7_24 -> m7_26  [key=2, style=dotted];
m7_29 -> m7_27  [key=0, style=bold, color=blue];
m7_28 -> m7_29  [key=0, style=solid];
m7_28 -> m7_30  [key=2, style=dotted];
m7_113 -> m7_111  [key=0, style=bold, color=blue];
m7_112 -> m7_113  [key=0, style=solid];
m7_112 -> m7_114  [key=2, style=dotted];
m7_122 -> m7_120  [key=0, style=bold, color=blue];
m7_121 -> m7_122  [key=0, style=solid];
m7_121 -> m7_123  [key=2, style=dotted];
m7_128 -> m7_129  [key=0, style=solid];
m7_130 -> m7_128  [key=0, style=bold, color=blue];
m7_147 -> m7_145  [key=0, style=bold, color=blue];
m7_146 -> m7_147  [key=0, style=solid];
m7_146 -> m7_148  [key=2, style=dotted];
m7_151 -> m7_149  [key=0, style=bold, color=blue];
m7_167 -> m7_165  [key=0, style=bold, color=blue];
m7_166 -> m7_167  [key=0, style=solid];
m7_166 -> m7_148  [key=2, style=dotted];
m7_170 -> m7_168  [key=0, style=bold, color=blue];
m7_185 -> m7_183  [key=0, style=bold, color=blue];
m7_190 -> m7_191  [key=0, style=solid];
m7_192 -> m7_190  [key=0, style=bold, color=blue];
m7_211 -> m7_209  [key=0, style=bold, color=blue];
m7_210 -> m7_211  [key=0, style=solid];
m7_210 -> m7_123  [key=2, style=dotted];
m7_153 -> m7_154  [key=0, style=solid];
m7_155 -> m7_153  [key=0, style=bold, color=blue];
m7_154 -> m7_155  [key=0, style=solid];
m7_172 -> m7_173  [key=0, style=solid];
m7_173 -> m7_171  [key=0, style=bold, color=blue];
m7_59 -> m7_60  [key=0, style=solid];
m7_60 -> m7_53  [key=2, style=dotted];
m7_60 -> m7_61  [key=0, style=solid];
m7_60 -> m7_65  [key=1, style=dashed, color=darkseagreen4, label=manager];
m7_61 -> m7_62  [key=0, style=solid];
m7_61 -> m7_35  [key=2, style=dotted];
m7_61 -> m7_64  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_62 -> m7_63  [key=0, style=solid];
m7_62 -> m7_36  [key=2, style=dotted];
m7_63 -> m7_59  [key=0, style=bold, color=blue];
m7_83 -> m7_84  [key=0, style=solid];
m7_84 -> m7_53  [key=2, style=dotted];
m7_84 -> m7_85  [key=0, style=solid];
m7_84 -> m7_89  [key=1, style=dashed, color=darkseagreen4, label=manager];
m7_85 -> m7_86  [key=0, style=solid];
m7_85 -> m7_35  [key=2, style=dotted];
m7_85 -> m7_88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_86 -> m7_87  [key=0, style=solid];
m7_86 -> m7_36  [key=2, style=dotted];
m7_87 -> m7_83  [key=0, style=bold, color=blue];
m7_48 -> m7_49  [key=0, style=solid, color=green];
m7_49 -> m7_50  [key=0, style=solid, color=green];
m7_49 -> m7_53  [key=2, style=dotted, color=green];
m7_49 -> m7_55  [key=1, style=dashed, color=green, label=manager];
m7_50 -> m7_51  [key=0, style=solid];
m7_50 -> m7_35  [key=2, style=dotted];
m7_50 -> m7_54  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_51 -> m7_52  [key=0, style=solid];
m7_51 -> m7_36  [key=2, style=dotted];
m7_52 -> m7_48  [key=0, style=bold, color=blue];
m7_22 -> m7_214  [key=0, style=solid];
m7_214 -> m7_22  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid];
m7_1 -> m7_2  [key=0, style=solid];
m7_2 -> m7_3  [key=0, style=solid];
m7_2 -> m7_11  [key=2, style=dotted];
m7_2 -> m7_19  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_3 -> m7_4  [key=0, style=solid];
m7_3 -> m7_12  [key=2, style=dotted];
m7_4 -> m7_5  [key=0, style=solid];
m7_4 -> m7_13  [key=2, style=dotted];
m7_5 -> m7_6  [key=0, style=solid];
m7_5 -> m7_14  [key=2, style=dotted];
m7_6 -> m7_7  [key=0, style=solid];
m7_6 -> m7_15  [key=2, style=dotted];
m7_7 -> m7_8  [key=0, style=solid];
m7_7 -> m7_16  [key=2, style=dotted];
m7_7 -> m7_17  [key=2, style=dotted];
m7_7 -> m7_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_8 -> m7_9  [key=0, style=solid];
m7_8 -> m7_18  [key=2, style=dotted];
m7_9 -> m7_10  [key=0, style=solid];
m7_9 -> m7_16  [key=2, style=dotted];
m7_9 -> m7_17  [key=2, style=dotted];
m7_9 -> m7_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_10 -> m7_0  [key=0, style=bold, color=blue];
m7_124 -> m7_125  [key=0, style=solid];
m7_125 -> m7_53  [key=2, style=dotted];
m7_125 -> m7_126  [key=0, style=solid];
m7_125 -> m7_129  [key=1, style=dashed, color=darkseagreen4, label=manager];
m7_126 -> m7_35  [key=2, style=dotted];
m7_126 -> m7_127  [key=0, style=solid];
m7_126 -> m7_128  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_127 -> m7_124  [key=0, style=bold, color=blue];
m7_215 -> m7_49  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_32  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_38  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_42  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_46  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_50  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_55  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_60  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_61  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_65  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_68  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_69  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_73  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_76  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_77  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_81  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_84  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_85  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_89  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_92  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_93  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_94  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_98  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_102  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_103  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_104  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_107  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_116  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_117  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_118  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_125  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_133  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_142  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_134  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_135  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_136  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_157  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_163  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_158  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_159  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_160  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_175  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_176  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_181  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_177  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_187  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_195  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_196  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_197  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_202  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_198  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_206  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_199  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_215 -> m7_212  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.RecurringJobManagerFacts"];
m7_216 -> m7_55  [key=1, style=dashed, color=darkseagreen4, label=manager];
m7_217 -> m7_65  [key=1, style=dashed, color=darkseagreen4, label=manager];
m7_218 -> m7_73  [key=1, style=dashed, color=darkseagreen4, label=manager];
m7_219 -> m7_81  [key=1, style=dashed, color=darkseagreen4, label=manager];
m7_220 -> m7_89  [key=1, style=dashed, color=darkseagreen4, label=manager];
m7_222 -> m7_181  [key=1, style=dashed, color=darkseagreen4, label=manager];
m7_221 -> m7_129  [key=1, style=dashed, color=darkseagreen4, label=manager];
m7_223 -> m7_191  [key=1, style=dashed, color=darkseagreen4, label=manager];
m9_58 -> m9_59  [key=0, style=solid];
m9_62 -> m9_63  [key=0, style=solid, color=green];
m9_62 -> m9_45  [key=2, style=dotted, color=green];
m9_61 -> m9_62  [key=0, style=solid, color=green];
m9_61 -> m9_42  [key=2, style=dotted];
m9_63 -> m9_64  [key=0, style=solid, color=green];
m9_63 -> m9_43  [key=2, style=dotted, color=green];
m9_64 -> m9_65  [key=0, style=solid, color=green];
m9_64 -> m9_44  [key=2, style=dotted, color=green];
m9_65 -> m9_66  [key=0, style=solid, color=green];
m9_65 -> m9_45  [key=2, style=dotted, color=green];
m9_66 -> m9_67  [key=0, style=solid];
m9_66 -> m9_26  [key=2, style=dotted];
m9_60 -> m9_61  [key=0, style=solid];
m9_60 -> m9_22  [key=2, style=dotted];
m9_59 -> m9_60  [key=0, style=solid];
m9_59 -> m9_41  [key=2, style=dotted];
m9_67 -> m9_58  [key=0, style=bold, color=blue];
m9_47 -> m9_48  [key=0, style=solid];
m9_51 -> m9_52  [key=0, style=solid, color=green];
m9_51 -> m9_43  [key=2, style=dotted, color=green];
m9_50 -> m9_51  [key=0, style=solid, color=green];
m9_50 -> m9_42  [key=2, style=dotted];
m9_52 -> m9_53  [key=0, style=solid, color=green];
m9_52 -> m9_44  [key=2, style=dotted, color=green];
m9_53 -> m9_54  [key=0, style=solid, color=green];
m9_53 -> m9_45  [key=2, style=dotted, color=green];
m9_54 -> m9_55  [key=0, style=solid, color=green];
m9_54 -> m9_45  [key=2, style=dotted, color=green];
m9_55 -> m9_56  [key=0, style=solid, color=green];
m9_55 -> m9_45  [key=2, style=dotted, color=green];
m9_56 -> m9_57  [key=0, style=solid];
m9_56 -> m9_26  [key=2, style=dotted];
m9_49 -> m9_50  [key=0, style=solid];
m9_49 -> m9_22  [key=2, style=dotted];
m9_48 -> m9_49  [key=0, style=solid];
m9_48 -> m9_41  [key=2, style=dotted];
m9_57 -> m9_47  [key=0, style=bold, color=blue];
m9_68 -> m9_69  [key=0, style=solid];
m9_72 -> m9_73  [key=0, style=solid, color=green];
m9_72 -> m9_44  [key=2, style=dotted, color=green];
m9_71 -> m9_72  [key=0, style=solid, color=green];
m9_71 -> m9_43  [key=2, style=dotted];
m9_73 -> m9_74  [key=0, style=solid];
m9_73 -> m9_26  [key=2, style=dotted];
m9_70 -> m9_71  [key=0, style=solid];
m9_70 -> m9_22  [key=2, style=dotted];
m9_69 -> m9_70  [key=0, style=solid];
m9_69 -> m9_41  [key=2, style=dotted];
m9_74 -> m9_68  [key=0, style=bold, color=blue];
m9_83 -> m9_84  [key=0, style=solid];
m9_87 -> m9_88  [key=0, style=solid, color=green];
m9_87 -> m9_45  [key=2, style=dotted, color=green];
m9_86 -> m9_87  [key=0, style=solid, color=green];
m9_86 -> m9_42  [key=2, style=dotted];
m9_88 -> m9_89  [key=0, style=solid, color=green];
m9_88 -> m9_43  [key=2, style=dotted, color=green];
m9_89 -> m9_90  [key=0, style=solid, color=green];
m9_89 -> m9_44  [key=2, style=dotted, color=green];
m9_90 -> m9_91  [key=0, style=solid];
m9_90 -> m9_26  [key=2, style=dotted];
m9_85 -> m9_86  [key=0, style=solid];
m9_85 -> m9_22  [key=2, style=dotted];
m9_84 -> m9_85  [key=0, style=solid];
m9_84 -> m9_41  [key=2, style=dotted];
m9_91 -> m9_83  [key=0, style=bold, color=blue];
m9_26 -> m9_27  [key=0, style=solid];
m9_27 -> m9_28  [key=0, style=solid];
m9_27 -> m9_29  [key=2, style=dotted];
m9_28 -> m9_26  [key=0, style=bold, color=blue];
m9_5 -> m9_6  [key=0, style=solid];
m9_5 -> m9_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateChangingContext"];
m9_6 -> m9_7  [key=0, style=solid];
m9_6 -> m9_11  [key=2, style=dotted];
m9_9 -> m9_10  [key=0, style=solid];
m9_7 -> m9_8  [key=0, style=solid];
m9_7 -> m9_12  [key=2, style=dotted];
m9_8 -> m9_9  [key=0, style=solid];
m9_8 -> m9_10  [key=0, style=solid];
m9_10 -> m9_5  [key=0, style=bold, color=blue];
m9_22 -> m9_31  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m9_22 -> m9_23  [key=0, style=solid];
m9_22 -> m9_48  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m9_22 -> m9_59  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m9_22 -> m9_69  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m9_22 -> m9_76  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m9_22 -> m9_84  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m9_23 -> m9_24  [key=0, style=solid];
m9_23 -> m9_25  [key=2, style=dotted];
m9_24 -> m9_22  [key=0, style=bold, color=blue];
m9_75 -> m9_76  [key=0, style=solid];
m9_79 -> m9_80  [key=0, style=solid, color=green];
m9_79 -> m9_43  [key=2, style=dotted, color=green];
m9_78 -> m9_79  [key=0, style=solid, color=green];
m9_78 -> m9_42  [key=2, style=dotted];
m9_80 -> m9_81  [key=0, style=solid, color=green];
m9_80 -> m9_44  [key=2, style=dotted, color=green];
m9_81 -> m9_82  [key=0, style=solid];
m9_81 -> m9_26  [key=2, style=dotted];
m9_77 -> m9_78  [key=0, style=solid];
m9_77 -> m9_22  [key=2, style=dotted];
m9_76 -> m9_77  [key=0, style=solid];
m9_76 -> m9_41  [key=2, style=dotted];
m9_82 -> m9_75  [key=0, style=bold, color=blue];
m9_0 -> m9_1  [key=0, style=solid];
m9_0 -> m9_2  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<string>"];
m9_0 -> m9_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobState"];
m9_1 -> m9_2  [key=0, style=solid];
m9_2 -> m9_3  [key=0, style=solid];
m9_3 -> m9_4  [key=0, style=solid];
m9_4 -> m9_0  [key=0, style=bold, color=blue];
m9_30 -> m9_31  [key=0, style=solid];
m9_34 -> m9_35  [key=0, style=solid, color=green];
m9_34 -> m9_43  [key=2, style=dotted, color=green];
m9_33 -> m9_34  [key=0, style=solid, color=green];
m9_33 -> m9_42  [key=2, style=dotted];
m9_35 -> m9_36  [key=0, style=solid, color=green];
m9_35 -> m9_44  [key=2, style=dotted, color=green];
m9_36 -> m9_37  [key=0, style=solid, color=green];
m9_36 -> m9_45  [key=2, style=dotted, color=green];
m9_37 -> m9_38  [key=0, style=solid, color=green];
m9_37 -> m9_46  [key=2, style=dotted, color=green];
m9_38 -> m9_39  [key=0, style=solid, color=green];
m9_38 -> m9_45  [key=2, style=dotted, color=green];
m9_39 -> m9_40  [key=0, style=solid];
m9_39 -> m9_26  [key=2, style=dotted];
m9_32 -> m9_33  [key=0, style=solid];
m9_32 -> m9_22  [key=2, style=dotted];
m9_31 -> m9_32  [key=0, style=solid];
m9_31 -> m9_41  [key=2, style=dotted];
m9_40 -> m9_30  [key=0, style=bold, color=blue];
m9_13 -> m9_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestStateChangingFilter"];
m9_13 -> m9_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestStateChangingFilter"];
m9_13 -> m9_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestStateChangingFilter"];
m9_13 -> m9_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestStateChangingFilter"];
m9_13 -> m9_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestStateChangingFilter"];
m9_13 -> m9_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestStateChangingFilter"];
m9_92 -> m9_39  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.SchedulePollerFeature"];
m9_92 -> m9_56  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.SchedulePollerFeature"];
m9_92 -> m9_66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.SchedulePollerFeature"];
m9_92 -> m9_73  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.SchedulePollerFeature"];
m9_92 -> m9_81  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.SchedulePollerFeature"];
m9_92 -> m9_90  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.SchedulePollerFeature"];
m9_92 -> m9_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.SchedulePollerFeature"];
m9_92 -> m9_49  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.SchedulePollerFeature"];
m9_92 -> m9_60  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.SchedulePollerFeature"];
m9_92 -> m9_70  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.SchedulePollerFeature"];
m9_92 -> m9_77  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.SchedulePollerFeature"];
m9_92 -> m9_85  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.SchedulePollerFeature"];
m10_0 -> m10_1  [key=0, style=solid, color=green];
m10_0 -> m10_3  [key=1, style=dashed, color=green, label=string];
m10_0 -> m10_5  [key=1, style=dashed, color=green, label="System.TimeSpan"];
m10_0 -> m10_7  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerStorage"];
m10_0 -> m10_8  [key=1, style=dashed, color=green, label=string];
m10_0 -> m10_9  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerStorage"];
m10_1 -> m10_2  [key=0, style=solid, color=green];
m10_1 -> m10_3  [key=0, style=solid, color=green];
m10_2 -> m10_11  [key=0, style=solid, color=green];
m10_2 -> m10_12  [key=2, style=dotted, color=green];
m10_3 -> m10_4  [key=0, style=solid, color=green];
m10_3 -> m10_5  [key=0, style=solid, color=green];
m10_3 -> m10_13  [key=2, style=dotted, color=green];
m10_4 -> m10_11  [key=0, style=solid, color=green];
m10_4 -> m10_12  [key=2, style=dotted, color=green];
m10_5 -> m10_5  [key=1, style=dashed, color=green, label="System.TimeSpan"];
m10_5 -> m10_6  [key=0, style=solid, color=green];
m10_5 -> m10_7  [key=0, style=solid, color=green];
m10_5 -> m10_10  [key=1, style=dashed, color=green, label="System.TimeSpan"];
m10_6 -> m10_11  [key=0, style=solid, color=green];
m10_6 -> m10_14  [key=2, style=dotted, color=green];
m10_6 -> m10_15  [key=2, style=dotted, color=green];
m10_7 -> m10_8  [key=0, style=solid, color=green];
m10_10 -> m10_11  [key=0, style=solid, color=green];
m10_10 -> m10_17  [key=2, style=dotted, color=green];
m10_8 -> m10_9  [key=0, style=solid, color=green];
m10_9 -> m10_10  [key=0, style=solid, color=green];
m10_9 -> m10_16  [key=2, style=dotted, color=green];
m10_11 -> m10_0  [key=0, style=bold, color=blue];
m10_24 -> m10_49  [key=0, style=solid, color=green];
m10_24 -> m10_50  [key=1, style=dashed, color=green, label=string];
m10_24 -> m10_53  [key=1, style=dashed, color=green, label=IDbConnection];
m10_24 -> m10_56  [key=1, style=dashed, color=green, label=string];
m10_52 -> m10_53  [key=0, style=solid, color=green];
m10_52 -> m10_41  [key=2, style=dotted, color=green];
m10_49 -> m10_50  [key=0, style=solid, color=green];
m10_49 -> m10_40  [key=2, style=dotted, color=green];
m10_49 -> m10_51  [key=1, style=dashed, color=green, label=parameters];
m10_49 -> m10_52  [key=1, style=dashed, color=green, label=parameters];
m10_49 -> m10_53  [key=1, style=dashed, color=green, label=parameters];
m10_49 -> m10_54  [key=1, style=dashed, color=green, label=parameters];
m10_50 -> m10_51  [key=0, style=solid, color=green];
m10_50 -> m10_41  [key=2, style=dotted, color=green];
m10_51 -> m10_52  [key=0, style=solid, color=green];
m10_51 -> m10_41  [key=2, style=dotted, color=green];
m10_53 -> m10_54  [key=0, style=solid, color=green];
m10_53 -> m10_42  [key=2, style=dotted, color=green];
m10_54 -> m10_56  [key=1, style=dashed, color=green, label=releaseResult];
m10_54 -> m10_55  [key=0, style=solid, color=green];
m10_54 -> m10_43  [key=2, style=dotted, color=green];
m10_56 -> m10_57  [key=0, style=solid, color=green];
m10_56 -> m10_45  [key=2, style=dotted, color=green];
m10_56 -> m10_47  [key=2, style=dotted, color=green];
m10_55 -> m10_56  [key=0, style=solid, color=green];
m10_55 -> m10_57  [key=0, style=solid, color=green];
m10_57 -> m10_24  [key=0, style=bold, color=blue];
m10_17 -> m10_25  [key=0, style=solid, color=green];
m10_17 -> m10_26  [key=1, style=dashed, color=green, label=string];
m10_17 -> m10_30  [key=1, style=dashed, color=green, label="System.TimeSpan"];
m10_17 -> m10_33  [key=1, style=dashed, color=green, label=IDbConnection];
m10_17 -> m10_37  [key=1, style=dashed, color=green, label=string];
m10_17 -> m10_38  [key=1, style=dashed, color=green, label=string];
m10_25 -> m10_26  [key=0, style=solid, color=green];
m10_25 -> m10_40  [key=2, style=dotted, color=green];
m10_25 -> m10_27  [key=1, style=dashed, color=green, label=parameters];
m10_25 -> m10_28  [key=1, style=dashed, color=green, label=parameters];
m10_25 -> m10_29  [key=1, style=dashed, color=green, label=parameters];
m10_25 -> m10_30  [key=1, style=dashed, color=green, label=parameters];
m10_25 -> m10_31  [key=1, style=dashed, color=green, label=parameters];
m10_25 -> m10_33  [key=1, style=dashed, color=green, label=parameters];
m10_25 -> m10_34  [key=1, style=dashed, color=green, label=parameters];
m10_36 -> m10_37  [key=0, style=solid, color=green];
m10_36 -> m10_38  [key=0, style=solid, color=green];
m10_26 -> m10_27  [key=0, style=solid, color=green];
m10_26 -> m10_41  [key=2, style=dotted, color=green];
m10_27 -> m10_28  [key=0, style=solid, color=green];
m10_27 -> m10_41  [key=2, style=dotted, color=green];
m10_28 -> m10_29  [key=0, style=solid, color=green];
m10_28 -> m10_41  [key=2, style=dotted, color=green];
m10_29 -> m10_30  [key=0, style=solid, color=green];
m10_29 -> m10_41  [key=2, style=dotted, color=green];
m10_30 -> m10_30  [key=1, style=dashed, color=green, label="System.TimeSpan"];
m10_30 -> m10_31  [key=0, style=solid, color=green];
m10_30 -> m10_41  [key=2, style=dotted, color=green];
m10_30 -> m10_32  [key=1, style=dashed, color=green, label="System.TimeSpan"];
m10_31 -> m10_32  [key=0, style=solid, color=green];
m10_31 -> m10_41  [key=2, style=dotted, color=green];
m10_33 -> m10_34  [key=0, style=solid, color=green];
m10_33 -> m10_42  [key=2, style=dotted, color=green];
m10_34 -> m10_38  [key=1, style=dashed, color=green, label=lockResult];
m10_34 -> m10_35  [key=0, style=solid, color=green];
m10_34 -> m10_43  [key=2, style=dotted, color=green];
m10_34 -> m10_36  [key=1, style=dashed, color=green, label=lockResult];
m10_32 -> m10_33  [key=0, style=solid, color=green];
m10_32 -> m10_32  [key=1, style=dashed, color=green, label="System.TimeSpan"];
m10_37 -> m10_39  [key=0, style=solid, color=green];
m10_37 -> m10_44  [key=2, style=dotted, color=green];
m10_38 -> m10_39  [key=0, style=solid, color=green];
m10_38 -> m10_45  [key=2, style=dotted, color=green];
m10_38 -> m10_46  [key=2, style=dotted, color=green];
m10_38 -> m10_47  [key=2, style=dotted, color=green];
m10_38 -> m10_48  [key=2, style=dotted, color=green];
m10_35 -> m10_36  [key=0, style=solid, color=green];
m10_35 -> m10_39  [key=0, style=solid, color=green];
m10_39 -> m10_17  [key=0, style=bold, color=blue];
m10_18 -> m10_19  [key=0, style=solid, color=green];
m10_19 -> m10_20  [key=0, style=solid, color=green];
m10_19 -> m10_21  [key=0, style=solid, color=green];
m10_19 -> m10_25  [key=3, color=green, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m10_19 -> m10_36  [key=3, color=green, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m10_19 -> m10_52  [key=3, color=green, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m10_20 -> m10_23  [key=0, style=solid, color=green];
m10_21 -> m10_22  [key=0, style=solid, color=green];
m10_22 -> m10_23  [key=0, style=solid, color=green];
m10_22 -> m10_24  [key=2, style=dotted, color=green];
m10_23 -> m10_18  [key=0, style=bold, color=blue];
m10_58 -> m10_7  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerDistributedLock"];
m10_58 -> m10_8  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerDistributedLock"];
m10_58 -> m10_9  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerDistributedLock"];
m10_58 -> m10_10  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerDistributedLock"];
m10_58 -> m10_19  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerDistributedLock"];
m10_58 -> m10_21  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerDistributedLock"];
m10_58 -> m10_22  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerDistributedLock"];
m13_27 -> m13_28  [key=0, style=solid, color=green];
m13_27 -> m13_30  [key=2, style=dotted, color=green];
m13_28 -> m13_29  [key=0, style=solid, color=green];
m13_28 -> m13_31  [key=2, style=dotted, color=green];
m13_29 -> d59  [key=0, style=bold, color=blue];
m13_59 -> m13_73  [key=0, style=solid, color=green];
m13_73 -> m13_74  [key=0, style=solid, color=green];
m13_73 -> m13_76  [key=2, style=dotted, color=green];
m13_74 -> m13_75  [key=0, style=solid, color=green];
m13_74 -> m13_77  [key=2, style=dotted, color=green];
m13_74 -> m13_78  [key=2, style=dotted, color=green];
m13_74 -> m13_79  [key=1, style=dashed, color=green, label="lambda expression"];
m13_75 -> m13_59  [key=0, style=bold, color=blue];
m13_4 -> m13_5  [key=0, style=solid, color=green];
m13_4 -> m13_7  [key=1, style=dashed, color=green, label="string[]"];
m13_4 -> m13_9  [key=1, style=dashed, color=green, label="string[]"];
m13_4 -> m13_11  [key=1, style=dashed, color=green, label="HangFire.JobStorage"];
m13_4 -> m13_13  [key=1, style=dashed, color=green, label="HangFire.JobStorage"];
m13_4 -> m13_14  [key=1, style=dashed, color=green, label=int];
m13_4 -> m13_15  [key=1, style=dashed, color=green, label="string[]"];
m13_5 -> m13_6  [key=0, style=solid, color=green];
m13_5 -> m13_7  [key=0, style=solid, color=green];
m13_6 -> m13_18  [key=0, style=solid, color=green];
m13_6 -> m13_19  [key=2, style=dotted, color=green];
m13_7 -> m13_8  [key=0, style=solid, color=green];
m13_7 -> m13_9  [key=0, style=solid, color=green];
m13_8 -> m13_18  [key=0, style=solid, color=green];
m13_8 -> m13_20  [key=2, style=dotted, color=green];
m13_9 -> m13_10  [key=0, style=solid, color=green];
m13_9 -> m13_11  [key=0, style=solid, color=green];
m13_10 -> m13_18  [key=0, style=solid, color=green];
m13_10 -> m13_21  [key=2, style=dotted, color=green];
m13_11 -> m13_12  [key=0, style=solid, color=green];
m13_11 -> m13_13  [key=0, style=solid, color=green];
m13_12 -> m13_18  [key=0, style=solid, color=green];
m13_12 -> m13_20  [key=2, style=dotted, color=green];
m13_13 -> m13_14  [key=0, style=solid, color=green];
m13_14 -> m13_15  [key=0, style=solid, color=green];
m13_15 -> m13_16  [key=0, style=solid, color=green];
m13_16 -> m13_17  [key=0, style=solid, color=green];
m13_16 -> m13_22  [key=2, style=dotted, color=green];
m13_16 -> m13_23  [key=2, style=dotted, color=green];
m13_16 -> m13_24  [key=2, style=dotted, color=green];
m13_17 -> m13_18  [key=0, style=solid, color=green];
m13_17 -> m13_25  [key=2, style=dotted, color=green];
m13_18 -> m13_4  [key=0, style=bold, color=blue];
m13_57 -> m13_61  [key=0, style=solid, color=green];
m13_57 -> m13_62  [key=0, style=bold, color=green];
m13_57 -> m13_63  [key=0, style=bold, color=green];
m13_57 -> m13_64  [key=0, style=bold, color=green];
m13_61 -> m13_62  [key=0, style=solid, color=green];
m13_61 -> m13_66  [key=2, style=dotted, color=green];
m13_61 -> m13_67  [key=2, style=dotted, color=green];
m13_62 -> m13_63  [key=0, style=solid, color=green];
m13_62 -> m13_68  [key=2, style=dotted, color=green];
m13_62 -> m13_69  [key=2, style=dotted, color=green];
m13_62 -> m13_70  [key=2, style=dotted, color=green];
m13_63 -> m13_64  [key=0, style=solid, color=green];
m13_63 -> m13_66  [key=2, style=dotted, color=green];
m13_63 -> m13_71  [key=2, style=dotted, color=green];
m13_64 -> m13_65  [key=0, style=solid, color=green];
m13_64 -> m13_66  [key=2, style=dotted, color=green];
m13_64 -> m13_72  [key=2, style=dotted, color=green];
m13_64 -> m13_70  [key=2, style=dotted, color=green];
m13_65 -> m13_57  [key=0, style=bold, color=blue];
m13_32 -> m13_33  [key=0, style=solid, color=green];
m13_33 -> m13_34  [key=0, style=solid, color=green];
m13_33 -> m13_35  [key=2, style=dotted, color=green];
m13_34 -> m13_32  [key=0, style=bold, color=blue];
m13_50 -> m13_51  [key=0, style=solid, color=green];
m13_51 -> m13_52  [key=0, style=solid, color=green];
m13_51 -> m13_56  [key=2, style=dotted, color=green];
m13_51 -> m13_53  [key=1, style=dashed, color=green, label=componentRunners];
m13_51 -> m13_54  [key=1, style=dashed, color=green, label=componentRunners];
m13_52 -> m13_53  [key=0, style=solid, color=green];
m13_52 -> m13_57  [key=2, style=dotted, color=green];
m13_52 -> m13_58  [key=2, style=dotted, color=green];
m13_53 -> m13_54  [key=0, style=solid, color=green];
m13_53 -> m13_59  [key=2, style=dotted, color=green];
m13_53 -> m13_58  [key=2, style=dotted, color=green];
m13_54 -> m13_55  [key=0, style=solid, color=green];
m13_54 -> m13_60  [key=2, style=dotted, color=green];
m13_55 -> m13_50  [key=0, style=bold, color=blue];
m13_79 -> m13_80  [key=0, style=solid, color=green];
m13_80 -> m13_81  [key=0, style=solid, color=green];
m13_80 -> m13_66  [key=2, style=dotted, color=green];
m13_81 -> m13_79  [key=0, style=bold, color=blue];
m13_25 -> m13_41  [key=0, style=solid, color=green];
m13_41 -> m13_42  [key=0, style=solid, color=green];
m13_41 -> m13_45  [key=2, style=dotted, color=green];
m13_42 -> m13_43  [key=0, style=solid, color=green];
m13_42 -> m13_46  [key=2, style=dotted, color=green];
m13_42 -> m13_47  [key=2, style=dotted, color=green];
m13_43 -> m13_44  [key=0, style=solid, color=green];
m13_43 -> m13_48  [key=2, style=dotted, color=green];
m13_43 -> m13_49  [key=2, style=dotted, color=green];
m13_44 -> m13_25  [key=0, style=bold, color=blue];
m13_36 -> m13_37  [key=0, style=solid, color=green];
m13_37 -> m13_38  [key=0, style=solid, color=green];
m13_37 -> m13_40  [key=2, style=dotted, color=green];
m13_38 -> m13_39  [key=0, style=solid, color=green];
m13_38 -> m13_30  [key=2, style=dotted, color=green];
m13_39 -> m13_36  [key=0, style=bold, color=blue];
m13_66 -> m13_4  [key=3, color=darkorchid, style=bold, label="Field variable string[] _queues"];
m13_82 -> m13_13  [key=1, style=dashed, color=green, label="HangFire.BackgroundJobServer"];
m13_82 -> m13_14  [key=1, style=dashed, color=green, label="HangFire.BackgroundJobServer"];
m13_82 -> m13_15  [key=1, style=dashed, color=green, label="HangFire.BackgroundJobServer"];
m13_82 -> m13_16  [key=1, style=dashed, color=green, label="HangFire.BackgroundJobServer"];
m13_82 -> m13_17  [key=1, style=dashed, color=green, label="HangFire.BackgroundJobServer"];
m13_82 -> m13_28  [key=1, style=dashed, color=green, label="HangFire.BackgroundJobServer"];
m13_82 -> m13_33  [key=1, style=dashed, color=green, label="HangFire.BackgroundJobServer"];
m13_82 -> m13_37  [key=1, style=dashed, color=green, label="HangFire.BackgroundJobServer"];
m13_82 -> m13_41  [key=1, style=dashed, color=green, label="HangFire.BackgroundJobServer"];
m13_82 -> m13_42  [key=1, style=dashed, color=green, label="HangFire.BackgroundJobServer"];
m13_82 -> m13_52  [key=1, style=dashed, color=green, label="HangFire.BackgroundJobServer"];
m13_82 -> m13_53  [key=1, style=dashed, color=green, label="HangFire.BackgroundJobServer"];
m13_82 -> m13_61  [key=1, style=dashed, color=green, label="HangFire.BackgroundJobServer"];
m13_82 -> m13_62  [key=1, style=dashed, color=green, label="HangFire.BackgroundJobServer"];
m13_82 -> m13_63  [key=1, style=dashed, color=green, label="HangFire.BackgroundJobServer"];
m13_82 -> m13_64  [key=1, style=dashed, color=green, label="HangFire.BackgroundJobServer"];
m13_82 -> m13_73  [key=1, style=dashed, color=green, label="HangFire.BackgroundJobServer"];
}
