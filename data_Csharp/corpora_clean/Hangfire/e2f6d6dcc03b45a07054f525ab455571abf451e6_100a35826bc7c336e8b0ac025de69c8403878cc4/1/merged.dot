digraph  {
n154 [label="HangFire.Tests.ServerFiltersFeature", span=""];
n0 [label="Entry HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)"];
n1 [label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32", cluster="HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)"];
n2 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Server filters'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34", cluster="HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)"];
n5 [label="Entry Unk.GetTestRunner", span="", cluster="Unk.GetTestRunner"];
n3 [label="testRunner.OnFeatureStart(featureInfo)", span="35-35", cluster="HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)"];
n6 [label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span="", cluster="TechTalk.SpecFlow.FeatureInfo.cstr"];
n7 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)"];
n4 [label="Exit HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)"];
n8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart"];
n9 [label="Entry HangFire.Tests.ServerFiltersFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.ServerFiltersFeature.FeatureTearDown()"];
n10 [label="testRunner.OnFeatureEnd()", span="41-41", cluster="HangFire.Tests.ServerFiltersFeature.FeatureTearDown()"];
n11 [label="testRunner = null", span="42-42", cluster="HangFire.Tests.ServerFiltersFeature.FeatureTearDown()"];
n13 [label="Entry Unk.OnFeatureEnd", span="", cluster="Unk.OnFeatureEnd"];
n12 [label="Exit HangFire.Tests.ServerFiltersFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.ServerFiltersFeature.FeatureTearDown()"];
n14 [label="Entry HangFire.Tests.ServerFiltersFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.ServerFiltersFeature.TestInitialize()"];
n15 [label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Server filters''))", span="48-49", cluster="HangFire.Tests.ServerFiltersFeature.TestInitialize()"];
n16 [label="HangFire.Tests.ServerFiltersFeature.FeatureSetup(null)", span="51-51", cluster="HangFire.Tests.ServerFiltersFeature.TestInitialize()"];
n17 [label="Exit HangFire.Tests.ServerFiltersFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.ServerFiltersFeature.TestInitialize()"];
n18 [label="Entry HangFire.Tests.ServerFiltersFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.ServerFiltersFeature.ScenarioTearDown()"];
n19 [label="testRunner.OnScenarioEnd()", span="58-58", cluster="HangFire.Tests.ServerFiltersFeature.ScenarioTearDown()"];
n20 [label="Exit HangFire.Tests.ServerFiltersFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.ServerFiltersFeature.ScenarioTearDown()"];
n21 [label="Entry Unk.OnScenarioEnd", span="", cluster="Unk.OnScenarioEnd"];
n22 [label="Entry HangFire.Tests.ServerFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.ServerFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)"];
n23 [label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63", cluster="HangFire.Tests.ServerFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)"];
n24 [label="Exit HangFire.Tests.ServerFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.ServerFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)"];
n25 [label="Entry Unk.OnScenarioStart", span="", cluster="Unk.OnScenarioStart"];
n26 [label="Entry HangFire.Tests.ServerFiltersFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.ServerFiltersFeature.ScenarioCleanup()"];
n27 [label="testRunner.CollectScenarioErrors()", span="68-68", cluster="HangFire.Tests.ServerFiltersFeature.ScenarioCleanup()"];
n28 [label="Exit HangFire.Tests.ServerFiltersFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.ServerFiltersFeature.ScenarioCleanup()"];
n29 [label="Entry Unk.CollectScenarioErrors", span="", cluster="Unk.CollectScenarioErrors"];
n30 [label="Entry HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", span="75-75", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()"];
n31 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server filters should be executed when the worker performs the job'', ((string[])(null)))", span="77-77", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()"];
n32 [label="this.ScenarioSetup(scenarioInfo)", span="79-79", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()"];
n43 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr"];
n33 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()"];
n34 [label="testRunner.And(''a server filter \'test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()"];
n44 [label="Entry Unk.Given", span="", cluster="Unk.Given"];
n35 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()"];
n45 [label="Entry Unk.And", span="", cluster="Unk.And"];
n36 [label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="87-88", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()"];
n46 [label="Entry Unk.When", span="", cluster="Unk.When"];
n37 [label="table1.AddRow(new string[] {\r\n                        ''test::OnPerforming''})", span="89-90", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()"];
n47 [label="Entry TechTalk.SpecFlow.Table.cstr", span="", cluster="TechTalk.SpecFlow.Table.cstr"];
n38 [label="table1.AddRow(new string[] {\r\n                        ''test::OnPerformed''})", span="91-92", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()"];
n39 [label="testRunner.Then(''the server filter methods should be executed in the following order:'', ((string)(null)), table1, ''Then '')", span="94-94", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()"];
n48 [label="Entry Unk.AddRow", span="", cluster="Unk.AddRow"];
n40 [label="testRunner.And(''the job should be performed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="96-96", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()"];
n49 [label="Entry Unk.Then", span="", cluster="Unk.Then"];
n41 [label="this.ScenarioCleanup()", span="98-98", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()"];
n42 [label="Exit HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", span="75-75", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()"];
n50 [label="Entry HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", span="105-105", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()"];
n51 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Multiple server filters should be executed depending on their order'', ((string[])(null)))", span="107-107", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()"];
n52 [label="this.ScenarioSetup(scenarioInfo)", span="109-109", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()"];
n53 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="111-111", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()"];
n54 [label="testRunner.And(''a server filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="113-113", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()"];
n55 [label="testRunner.And(''a server filter \'second\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="115-115", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()"];
n56 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="117-117", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()"];
n57 [label="TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="119-120", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()"];
n58 [label="table2.AddRow(new string[] {\r\n                        ''first::OnPerforming''})", span="121-122", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()"];
n59 [label="table2.AddRow(new string[] {\r\n                        ''second::OnPerforming''})", span="123-124", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()"];
n60 [label="table2.AddRow(new string[] {\r\n                        ''second::OnPerformed''})", span="125-126", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()"];
n61 [label="table2.AddRow(new string[] {\r\n                        ''first::OnPerformed''})", span="127-128", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()"];
n62 [label="testRunner.Then(''the server filter methods should be executed in the following order:'', ((string)(null)), table2, ''Then '')", span="130-130", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()"];
n63 [label="this.ScenarioCleanup()", span="132-132", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()"];
n64 [label="Exit HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", span="105-105", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()"];
n65 [label="Entry HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", span="139-139", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()"];
n66 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server filter should be able to cancel the performing of a job'', ((string[])(null)))", span="141-141", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()"];
n67 [label="this.ScenarioSetup(scenarioInfo)", span="143-143", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()"];
n68 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="145-145", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()"];
n69 [label="testRunner.And(''a server filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="147-147", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()"];
n70 [label="testRunner.And(''a server filter \'second\' that cancels the performing'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="149-149", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()"];
n71 [label="testRunner.And(''a server filter \'third\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="151-151", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()"];
n72 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="153-153", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()"];
n73 [label="testRunner.Then(''the job should not be performed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="155-155", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()"];
n74 [label="TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="157-158", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()"];
n75 [label="table3.AddRow(new string[] {\r\n                        ''first::OnPerforming''})", span="159-160", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()"];
n76 [label="table3.AddRow(new string[] {\r\n                        ''second::OnPerforming''})", span="161-162", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()"];
n77 [label="table3.AddRow(new string[] {\r\n                        ''first::OnPerformed (with the canceled flag set)''})", span="163-164", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()"];
n78 [label="testRunner.And(''only the following server filter methods were executed:'', ((string)(null)), table3, ''And '')", span="166-166", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()"];
n79 [label="this.ScenarioCleanup()", span="168-168", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()"];
n80 [label="Exit HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", span="139-139", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()"];
n81 [label="Entry HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", span="175-175", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()"];
n82 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server filter\'s OnPerformed could be skipped if there was an exception'', ((string[])(null)))", span="177-177", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()"];
n83 [label="this.ScenarioSetup(scenarioInfo)", span="179-179", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()"];
n84 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="181-181", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()"];
n85 [label="testRunner.And(''a server filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="183-183", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()"];
n86 [label="testRunner.And(''a server filter \'second\' that throws an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="185-185", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()"];
n87 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="187-187", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()"];
n88 [label="TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="189-190", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()"];
n89 [label="table4.AddRow(new string[] {\r\n                        ''first::OnPerforming''})", span="191-192", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()"];
n90 [label="table4.AddRow(new string[] {\r\n                        ''second::OnPerforming''})", span="193-194", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()"];
n91 [label="table4.AddRow(new string[] {\r\n                        ''first::OnPerformed''})", span="195-196", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()"];
n92 [label="testRunner.Then(''only the following server filter methods were executed:'', ((string)(null)), table4, ''Then '')", span="198-198", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()"];
n93 [label="testRunner.And(''the state of the job should be Failed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="200-200", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()"];
n94 [label="this.ScenarioCleanup()", span="202-202", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()"];
n95 [label="Exit HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", span="175-175", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()"];
n96 [label="Entry HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", span="209-209", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()"];
n97 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server filter can handle the exception'', ((string[])(null)))", span="211-211", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()"];
n98 [label="this.ScenarioSetup(scenarioInfo)", span="213-213", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()"];
n99 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="215-215", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()"];
n100 [label="testRunner.And(''a server filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="217-217", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()"];
n101 [label="testRunner.And(''a server filter \'second\' that handles an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="219-219", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()"];
n102 [label="testRunner.And(''a server filter \'third\' that throws an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="221-221", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()"];
n103 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="223-223", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()"];
n104 [label="TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="225-226", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()"];
n105 [label="table5.AddRow(new string[] {\r\n                        ''first::OnPerforming''})", span="227-228", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()"];
n106 [label="table5.AddRow(new string[] {\r\n                        ''second::OnPerforming''})", span="229-230", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()"];
n107 [label="table5.AddRow(new string[] {\r\n                        ''third::OnPerforming''})", span="231-232", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()"];
n108 [label="table5.AddRow(new string[] {\r\n                        ''second::OnPerformed''})", span="233-234", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()"];
n109 [label="table5.AddRow(new string[] {\r\n                        ''first::OnPerformed''})", span="235-236", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()"];
n110 [label="testRunner.Then(''the server filter methods should be executed in the following order:'', ((string)(null)), table5, ''Then '')", span="238-238", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()"];
n111 [label="testRunner.And(''the state of the job should be Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="240-240", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()"];
n112 [label="this.ScenarioCleanup()", span="242-242", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()"];
n113 [label="Exit HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", span="209-209", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()"];
n114 [label="Entry HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", span="250-250", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()"];
n115 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server exception filters are executed when there was an exception while performin'' +\r\n                    ''g a job'', ((string[])(null)))", span="252-253", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()"];
n116 [label="this.ScenarioSetup(scenarioInfo)", span="255-255", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()"];
n117 [label="testRunner.Given(''an enqueued broken job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="257-257", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()"];
n118 [label="testRunner.And(''a server exception filter \'test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="259-259", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()"];
n119 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="261-261", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()"];
n120 [label="testRunner.Then(''the server exception filter should be executed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="263-263", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()"];
n121 [label="testRunner.And(''the state of the job should be Failed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="265-265", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()"];
n122 [label="this.ScenarioCleanup()", span="267-267", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()"];
n123 [label="Exit HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", span="250-250", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()"];
n124 [label="Entry HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", span="274-274", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()"];
n125 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Multiple server exception filters are executed depending on their order'', ((string[])(null)))", span="276-276", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()"];
n126 [label="this.ScenarioSetup(scenarioInfo)", span="278-278", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()"];
n127 [label="testRunner.Given(''an enqueued broken job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="280-280", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()"];
n128 [label="testRunner.And(''a server exception filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="282-282", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()"];
n129 [label="testRunner.And(''a server exception filter \'second\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="284-284", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()"];
n130 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="286-286", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()"];
n131 [label="TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Filter''})", span="288-289", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()"];
n132 [label="table6.AddRow(new string[] {\r\n                        ''first''})", span="290-291", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()"];
n133 [label="table6.AddRow(new string[] {\r\n                        ''second''})", span="292-293", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()"];
n134 [label="testRunner.Then(''the server exception filters should be executed in the following order:'', ((string)(null)), table6, ''Then '')", span="295-295", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()"];
n135 [label="testRunner.And(''the state of the job should be Failed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="297-297", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()"];
n136 [label="this.ScenarioCleanup()", span="299-299", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()"];
n137 [label="Exit HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", span="274-274", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()"];
n138 [label="Entry HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", span="306-306", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()"];
n139 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server exception filter can handle the exception'', ((string[])(null)))", span="308-308", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()"];
n140 [label="this.ScenarioSetup(scenarioInfo)", span="310-310", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()"];
n141 [label="testRunner.Given(''an enqueued broken job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="312-312", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()"];
n142 [label="testRunner.And(''a server exception filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="314-314", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()"];
n143 [label="testRunner.And(''a server exception filter \'second\' that handles an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="316-316", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()"];
n144 [label="testRunner.And(''a server exception filter \'third\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="318-318", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()"];
n145 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="320-320", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()"];
n146 [label="TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Filter''})", span="322-323", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()"];
n147 [label="table7.AddRow(new string[] {\r\n                        ''first''})", span="324-325", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()"];
n148 [label="table7.AddRow(new string[] {\r\n                        ''second''})", span="326-327", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()"];
n149 [label="table7.AddRow(new string[] {\r\n                        ''third''})", span="328-329", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()"];
n150 [label="testRunner.Then(''the following server exception filters should be executed:'', ((string)(null)), table7, ''Then '')", span="331-331", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()"];
n151 [label="testRunner.And(''the state of the job should be Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="333-333", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()"];
n152 [label="this.ScenarioCleanup()", span="335-335", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()"];
n153 [label="Exit HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", span="306-306", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()"];
m1_68 [label="Entry HangFire.Web.JobMethodCallRenderer.Encode(string)", span="181-181", cluster="HangFire.Web.JobMethodCallRenderer.Encode(string)", file="IStorageConnection.cs"];
m1_100 [label="return HttpUtility.HtmlEncode(value);", span="183-183", cluster="HangFire.Web.JobMethodCallRenderer.Encode(string)", file="IStorageConnection.cs"];
m1_101 [label="Exit HangFire.Web.JobMethodCallRenderer.Encode(string)", span="181-181", cluster="HangFire.Web.JobMethodCallRenderer.Encode(string)", file="IStorageConnection.cs"];
m1_67 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)", file="IStorageConnection.cs"];
m1_102 [label="Entry Unk.HtmlEncode", span="", cluster="Unk.HtmlEncode", file="IStorageConnection.cs"];
m1_134 [label="Entry Unk.IsNumericType", span="", cluster="Unk.IsNumericType", file="IStorageConnection.cs"];
m1_73 [label="Entry System.Text.StringBuilder.AppendFormat(string, object, object, object)", span="0-0", cluster="System.Text.StringBuilder.AppendFormat(string, object, object, object)", file="IStorageConnection.cs"];
m1_122 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="IStorageConnection.cs"];
m1_88 [label="Entry HangFire.Web.JobMethodCallRenderer.Span(string, string)", span="173-173", cluster="HangFire.Web.JobMethodCallRenderer.Span(string, string)", file="IStorageConnection.cs"];
m1_96 [label="return String.Format(\r\n                ''<span class=\''{0}\''>{1}</span>'', \r\n                HttpUtility.HtmlAttributeEncode(@class), \r\n                value);", span="175-178", cluster="HangFire.Web.JobMethodCallRenderer.Span(string, string)", file="IStorageConnection.cs"];
m1_97 [label="Exit HangFire.Web.JobMethodCallRenderer.Span(string, string)", span="173-173", cluster="HangFire.Web.JobMethodCallRenderer.Span(string, string)", file="IStorageConnection.cs"];
m1_65 [label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0", cluster="System.Text.StringBuilder.StringBuilder()", file="IStorageConnection.cs"];
m1_69 [label="Entry System.Text.StringBuilder.AppendLine()", span="0-0", cluster="System.Text.StringBuilder.AppendLine()", file="IStorageConnection.cs"];
m1_123 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="IStorageConnection.cs"];
m1_98 [label="Entry Unk.HtmlAttributeEncode", span="", cluster="Unk.HtmlAttributeEncode", file="IStorageConnection.cs"];
m1_82 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()", file="IStorageConnection.cs"];
m1_81 [label="Entry HtmlString.cstr", span="", cluster="HtmlString.cstr", file="IStorageConnection.cs"];
m1_74 [label="Entry System.Type.GetProperty(string)", span="0-0", cluster="System.Type.GetProperty(string)", file="IStorageConnection.cs"];
m1_77 [label="Entry HangFire.Web.JobMethodCallRenderer.WrapComment(string)", span="168-168", cluster="HangFire.Web.JobMethodCallRenderer.WrapComment(string)", file="IStorageConnection.cs"];
m1_94 [label="return Span(''comment'', value);", span="170-170", cluster="HangFire.Web.JobMethodCallRenderer.WrapComment(string)", file="IStorageConnection.cs"];
m1_95 [label="Exit HangFire.Web.JobMethodCallRenderer.WrapComment(string)", span="168-168", cluster="HangFire.Web.JobMethodCallRenderer.WrapComment(string)", file="IStorageConnection.cs"];
m1_72 [label="Entry HangFire.Web.JobMethodCallRenderer.WrapType(string)", span="158-158", cluster="HangFire.Web.JobMethodCallRenderer.WrapType(string)", file="IStorageConnection.cs"];
m1_89 [label="return Span(''type'', value);", span="160-160", cluster="HangFire.Web.JobMethodCallRenderer.WrapType(string)", file="IStorageConnection.cs"];
m1_90 [label="Exit HangFire.Web.JobMethodCallRenderer.WrapType(string)", span="158-158", cluster="HangFire.Web.JobMethodCallRenderer.WrapType(string)", file="IStorageConnection.cs"];
m1_121 [label="Entry Unk.AppendFormat", span="", cluster="Unk.AppendFormat", file="IStorageConnection.cs"];
m1_103 [label="Entry HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.ArgumentRenderer()", span="192-192", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.ArgumentRenderer()", file="IStorageConnection.cs"];
m1_104 [label="_enclosingString = ''\''''", span="194-194", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.ArgumentRenderer()", file="IStorageConnection.cs"];
m1_105 [label="_valueRenderer = WrapString", span="195-195", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.ArgumentRenderer()", file="IStorageConnection.cs"];
m1_106 [label="Exit HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.ArgumentRenderer()", span="192-192", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.ArgumentRenderer()", file="IStorageConnection.cs"];
m1_66 [label="Entry HangFire.Web.JobMethodCallRenderer.WrapKeyword(string)", span="153-153", cluster="HangFire.Web.JobMethodCallRenderer.WrapKeyword(string)", file="IStorageConnection.cs"];
m1_86 [label="return Span(''keyword'', value);", span="155-155", cluster="HangFire.Web.JobMethodCallRenderer.WrapKeyword(string)", file="IStorageConnection.cs"];
m1_87 [label="Exit HangFire.Web.JobMethodCallRenderer.WrapKeyword(string)", span="153-153", cluster="HangFire.Web.JobMethodCallRenderer.WrapKeyword(string)", file="IStorageConnection.cs"];
m1_91 [label="Entry HangFire.Web.JobMethodCallRenderer.WrapString(string)", span="163-163", cluster="HangFire.Web.JobMethodCallRenderer.WrapString(string)", file="IStorageConnection.cs"];
m1_92 [label="return Span(''string'', value);", span="165-165", cluster="HangFire.Web.JobMethodCallRenderer.WrapString(string)", file="IStorageConnection.cs"];
m1_93 [label="Exit HangFire.Web.JobMethodCallRenderer.WrapString(string)", span="163-163", cluster="HangFire.Web.JobMethodCallRenderer.WrapString(string)", file="IStorageConnection.cs"];
m1_83 [label="Entry HangFire.Web.JobMethodCallRenderer.WrapIdentifier(string)", span="148-148", cluster="HangFire.Web.JobMethodCallRenderer.WrapIdentifier(string)", file="IStorageConnection.cs"];
m1_84 [label="return value;", span="150-150", cluster="HangFire.Web.JobMethodCallRenderer.WrapIdentifier(string)", file="IStorageConnection.cs"];
m1_85 [label="Exit HangFire.Web.JobMethodCallRenderer.WrapIdentifier(string)", span="148-148", cluster="HangFire.Web.JobMethodCallRenderer.WrapIdentifier(string)", file="IStorageConnection.cs"];
m1_0 [label="Entry HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", span="28-28", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_1 [label="var builder = new StringBuilder()", span="31-31", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_4 [label="builder.Append(Encode(method.Type.Namespace))", span="35-35", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_8 [label="!method.MethodInfo.IsStatic", span="40-40", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_9 [label="var serviceName = Char.ToLower(method.Type.Name[0]) + method.Type.Name.Substring(1)", span="42-42", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_11 [label="builder.AppendFormat(\r\n                    '' {0} = {1}.Current.Activate<{2}>();'',\r\n                    Encode(serviceName),\r\n                    WrapType(''JobActivator''),\r\n                    WrapType(Encode(method.Type.Name)))", span="45-49", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_13 [label="method.OldFormat && oldArguments.Count != 0", span="53-53", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_14 [label=oldArguments, span="55-55", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_19 [label="var propertyInfo = method.Type.GetProperty(argument.Key)", span="62-62", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_30 [label="builder.Append(WrapType(Encode(method.Type.Name)))", span="85-85", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_32 [label="builder.Append(Encode(method.MethodInfo.Name))", span="89-89", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_34 [label="var parameters = method.MethodInfo.GetParameters()", span="92-92", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_35 [label="!method.OldFormat", span="94-94", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_42 [label="i < arguments.Length", span="105-105", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_43 [label="var argument = arguments[i]", span="107-107", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_2 [label="builder.Append(WrapKeyword(''using''))", span="33-33", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_3 [label="builder.Append('' '')", span="34-34", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_5 [label="builder.Append('';'')", span="36-36", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_6 [label="builder.AppendLine()", span="37-37", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_7 [label="builder.AppendLine()", span="38-38", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_10 [label="builder.Append(WrapKeyword(''var''))", span="44-44", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_12 [label="builder.AppendLine()", span="51-51", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_15 [label="builder.Append(Encode(serviceName))", span="57-57", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_16 [label="builder.Append(''.'')", span="58-58", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_17 [label="builder.Append(Encode(argument.Key))", span="59-59", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_18 [label="builder.Append('' = '')", span="60-60", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_22 [label="builder.Append(argumentRenderer.Render(null, argument.Value))", span="66-66", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_23 [label="builder.Append('';'')", span="67-67", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_25 [label="builder.Append('' '')", span="71-71", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_26 [label="builder.Append(WrapComment(''// Warning: property is missing''))", span="72-72", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_27 [label="builder.AppendLine()", span="75-75", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_28 [label="builder.AppendLine()", span="78-78", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_29 [label="builder.Append(Encode(serviceName))", span="81-81", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_31 [label="builder.Append(''.'')", span="88-88", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_33 [label="builder.Append(''('')", span="90-90", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_54 [label="builder.AppendLine()", span="126-126", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_55 [label="builder.Append(''    '')", span="127-127", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_57 [label="builder.Append('' '')", span="131-131", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_58 [label="builder.Append(renderedArgument)", span="134-134", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_60 [label="builder.Append('','')", span="138-138", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_62 [label="builder.Append('');'')", span="143-143", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_63 [label="return new HtmlString(builder.ToString());", span="145-145", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_20 [label="var propertyType = propertyInfo != null ? propertyInfo.PropertyType : null", span="63-63", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_24 [label="propertyInfo == null", span="69-69", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_21 [label="var argumentRenderer = ArgumentRenderer.GetRenderer(propertyType)", span="65-65", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_36 [label="var renderedArguments = new List<string>(parameters.Length)", span="96-96", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_40 [label="i < parameters.Length", span="101-101", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_41 [label="var parameter = parameters[i]", span="103-103", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_37 [label="var renderedArgumentsTotalLength = 0", span="97-97", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_46 [label="renderedArguments.Add(renderedArgument)", span="112-112", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_48 [label="renderedArguments.Add(Encode(''<NO VALUE>''))", span="117-117", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_51 [label="i < renderedArguments.Count", span="121-121", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_52 [label="var renderedArgument = renderedArguments[i]", span="123-123", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_59 [label="i < renderedArguments.Count - 1", span="136-136", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_38 [label="int splitStringMinLength = 200", span="99-99", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_47 [label="renderedArgumentsTotalLength += renderedArgument.Length", span="113-113", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_53 [label="renderedArgumentsTotalLength > splitStringMinLength", span="124-124", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_39 [label="var i = 0", span="101-101", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_49 [label="i++", span="101-101", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_50 [label="int i = 0", span="121-121", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_44 [label="var argumentRenderer = ArgumentRenderer.GetRenderer(parameter.ParameterType)", span="109-109", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_45 [label="var renderedArgument = argumentRenderer.Render(parameter.Name, argument)", span="111-111", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_56 [label="i > 0", span="129-129", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_61 [label="i++", span="121-121", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_64 [label="Exit HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", span="28-28", cluster="HangFire.Web.JobMethodCallRenderer.Render(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>)", file="IStorageConnection.cs"];
m1_70 [label="Entry char.ToLower(char)", span="0-0", cluster="char.ToLower(char)", file="IStorageConnection.cs"];
m1_79 [label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0", cluster="System.Collections.Generic.List<T>.List(int)", file="IStorageConnection.cs"];
m1_80 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="IStorageConnection.cs"];
m1_75 [label="Entry HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.GetRenderer(System.Type)", span="235-235", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.GetRenderer(System.Type)", file="IStorageConnection.cs"];
m1_124 [label="type.IsNumericType()", span="237-237", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.GetRenderer(System.Type)", file="IStorageConnection.cs"];
m1_126 [label="type == typeof(bool)", span="246-246", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.GetRenderer(System.Type)", file="IStorageConnection.cs"];
m1_128 [label="type == typeof(char)", span="255-255", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.GetRenderer(System.Type)", file="IStorageConnection.cs"];
m1_130 [label="type == typeof(string) || type == typeof(object)", span="263-263", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.GetRenderer(System.Type)", file="IStorageConnection.cs"];
m1_132 [label="return new ArgumentRenderer\r\n                {\r\n                    _deserializationType = type,\r\n                };", span="271-274", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.GetRenderer(System.Type)", file="IStorageConnection.cs"];
m1_125 [label="return new ArgumentRenderer\r\n                    {\r\n                        _enclosingString = String.Empty,\r\n                        _valueRenderer = WrapIdentifier\r\n                    };", span="239-243", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.GetRenderer(System.Type)", file="IStorageConnection.cs"];
m1_127 [label="return new ArgumentRenderer\r\n                    {\r\n                        _valueRenderer = WrapKeyword,\r\n                        _enclosingString = String.Empty,\r\n                    };", span="248-252", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.GetRenderer(System.Type)", file="IStorageConnection.cs"];
m1_129 [label="return new ArgumentRenderer\r\n                    {\r\n                        _enclosingString = ''''',\r\n                    };", span="257-260", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.GetRenderer(System.Type)", file="IStorageConnection.cs"];
m1_131 [label="return new ArgumentRenderer\r\n                    {\r\n                        _enclosingString = ''\'''',\r\n                    };", span="265-268", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.GetRenderer(System.Type)", file="IStorageConnection.cs"];
m1_133 [label="Exit HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.GetRenderer(System.Type)", span="235-235", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.GetRenderer(System.Type)", file="IStorageConnection.cs"];
m1_99 [label="Entry Unk.Format", span="", cluster="Unk.Format", file="IStorageConnection.cs"];
m1_76 [label="Entry HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.Render(string, string)", span="198-198", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.Render(string, string)", file="IStorageConnection.cs"];
m1_107 [label="value == null", span="200-200", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.Render(string, string)", file="IStorageConnection.cs"];
m1_110 [label="name != null", span="207-207", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.Render(string, string)", file="IStorageConnection.cs"];
m1_111 [label="builder.AppendFormat(\r\n                        ''<span title=\''{0}:\'' data-placement=\''left\''>'', \r\n                        HttpUtility.HtmlAttributeEncode(name))", span="209-211", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.Render(string, string)", file="IStorageConnection.cs"];
m1_114 [label="builder.Append(_valueRenderer(Encode(_enclosingString + value + _enclosingString)))", span="220-220", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.Render(string, string)", file="IStorageConnection.cs"];
m1_117 [label="name != null", span="227-227", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.Render(string, string)", file="IStorageConnection.cs"];
m1_108 [label="return WrapKeyword(''null'');", span="202-202", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.Render(string, string)", file="IStorageConnection.cs"];
m1_109 [label="var builder = new StringBuilder()", span="205-205", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.Render(string, string)", file="IStorageConnection.cs"];
m1_113 [label="builder.Append(WrapIdentifier(\r\n                        String.Format(''Deserialize<{0}>('', WrapType(_deserializationType.Name))))", span="216-217", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.Render(string, string)", file="IStorageConnection.cs"];
m1_116 [label="builder.Append('')'')", span="224-224", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.Render(string, string)", file="IStorageConnection.cs"];
m1_118 [label="builder.Append(''</span>'')", span="229-229", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.Render(string, string)", file="IStorageConnection.cs"];
m1_119 [label="return builder.ToString();", span="232-232", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.Render(string, string)", file="IStorageConnection.cs"];
m1_112 [label="_deserializationType != null", span="214-214", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.Render(string, string)", file="IStorageConnection.cs"];
m1_115 [label="_deserializationType != null", span="222-222", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.Render(string, string)", file="IStorageConnection.cs"];
m1_120 [label="Exit HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.Render(string, string)", span="198-198", cluster="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer.Render(string, string)", file="IStorageConnection.cs"];
m1_78 [label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0", cluster="System.Reflection.MethodBase.GetParameters()", file="IStorageConnection.cs"];
m1_71 [label="Entry string.Substring(int)", span="0-0", cluster="string.Substring(int)", file="IStorageConnection.cs"];
m1_135 [label="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer", span="", file="IStorageConnection.cs"];
m2_3 [label="Entry HangFire.Redis.RedisConnection.Dispose()", span="40-40", cluster="HangFire.Redis.RedisConnection.Dispose()", file="RedisConnection.cs"];
m2_4 [label="Redis.Dispose()", span="42-42", cluster="HangFire.Redis.RedisConnection.Dispose()", file="RedisConnection.cs"];
m2_5 [label="Exit HangFire.Redis.RedisConnection.Dispose()", span="40-40", cluster="HangFire.Redis.RedisConnection.Dispose()", file="RedisConnection.cs"];
m2_146 [label="Entry int.ToString(System.IFormatProvider)", span="0-0", cluster="int.ToString(System.IFormatProvider)", file="RedisConnection.cs"];
m2_25 [label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                ''Fetched'',\r\n                JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="96-99", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m2_12 [label="Entry HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="50-50", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m2_13 [label="string jobId", span="52-52", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m2_16 [label="cancellationToken.ThrowIfCancellationRequested()", span="58-58", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m2_17 [label="queueIndex = (queueIndex + 1) % queues.Length", span="60-60", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m2_18 [label="queueName = queues[queueIndex]", span="61-61", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m2_14 [label="string queueName", span="53-53", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m2_15 [label="var queueIndex = 0", span="54-54", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m2_21 [label="queueIndex == 0", span="66-66", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m2_19 [label="var queueKey = RedisStorage.Prefix + String.Format(''queue:{0}'', queueName)", span="63-63", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m2_20 [label="var fetchedKey = RedisStorage.Prefix + String.Format(''queue:{0}:dequeued'', queueName)", span="64-64", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m2_26 [label="return new RedisProcessingJob(this, jobId, queueName);", span="105-105", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", color=red, community=0, file="RedisConnection.cs"];
m2_22 [label="jobId = Redis.BlockingPopAndPushItemBetweenLists(\r\n                        queueKey,\r\n                        fetchedKey,\r\n                        FetchTimeout)", span="68-71", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m2_23 [label="jobId = Redis.PopAndPushItemBetweenLists(\r\n                        queueKey, fetchedKey)", span="75-76", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m2_24 [label="jobId == null", span="79-79", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m2_27 [label="Exit HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="50-50", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m2_59 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="RedisConnection.cs"];
m2_96 [label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", span="24-24", cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", file="RedisConnection.cs"];
m2_204 [label="Entry Unk.FromNullableStringTimestamp", span="", cluster="Unk.FromNullableStringTimestamp", file="RedisConnection.cs"];
m2_124 [label="Entry HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="235-235", cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RedisConnection.cs"];
m2_125 [label="return Redis.GetRangeFromSortedSetByLowestScore(\r\n                RedisStorage.Prefix + key, fromScore, toScore, 0, 1)\r\n                .FirstOrDefault();", span="237-239", cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RedisConnection.cs"];
m2_126 [label="Exit HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="235-235", cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RedisConnection.cs"];
m2_65 [label="Entry Unk.SetRangeInHash", span="", cluster="Unk.SetRangeInHash", file="RedisConnection.cs"];
m2_38 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="RedisConnection.cs"];
m2_94 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash", file="RedisConnection.cs"];
m2_203 [label="Entry Unk.FromStringTimestamp", span="", cluster="Unk.FromStringTimestamp", file="RedisConnection.cs"];
m2_171 [label="Entry HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", span="298-298", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m2_172 [label="var serverNames = Redis.GetAllItemsFromSet(RedisStorage.Prefix + ''servers'')", span="300-300", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m2_183 [label="utcNow > maxTime.Add(timeOut)", span="331-331", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m2_173 [label="var heartbeats = new Dictionary<string, Tuple<DateTime, DateTime?>>()", span="301-301", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m2_176 [label=serverNames, span="307-307", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m2_174 [label="var utcNow = DateTime.UtcNow", span="303-303", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m2_178 [label="pipeline.QueueCommand(\r\n                        x => x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat''),\r\n                        x => heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1]))))", span="311-319", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m2_181 [label=heartbeats, span="326-326", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m2_175 [label="var pipeline = Redis.CreatePipeline()", span="305-305", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m2_179 [label="pipeline.Flush()", span="322-322", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m2_177 [label="var name = serverName", span="309-309", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m2_180 [label="var removedServerCount = 0", span="325-325", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m2_185 [label="removedServerCount++", span="334-334", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m2_186 [label="return removedServerCount;", span="338-338", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m2_182 [label="var maxTime = new DateTime(\r\n                    Math.Max(heartbeat.Value.Item1.Ticks, (heartbeat.Value.Item2 ?? DateTime.MinValue).Ticks))", span="328-329", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m2_184 [label="RemoveServer(Redis, heartbeat.Key)", span="333-333", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m2_187 [label="Exit HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", span="298-298", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m2_33 [label="Entry Unk.SetEntryInHash", span="", cluster="Unk.SetEntryInHash", file="RedisConnection.cs"];
m2_141 [label="Entry Unk.AddItemToSet", span="", cluster="Unk.AddItemToSet", file="RedisConnection.cs"];
m2_29 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="RedisConnection.cs"];
m2_120 [label="Entry Unk.RemoveEntryFromHash", span="", cluster="Unk.RemoveEntryFromHash", file="RedisConnection.cs"];
m2_30 [label="Entry Unk.BlockingPopAndPushItemBetweenLists", span="", cluster="Unk.BlockingPopAndPushItemBetweenLists", file="RedisConnection.cs"];
m2_169 [label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                ''Heartbeat'',\r\n                JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="292-295", cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="RedisConnection.cs"];
m2_168 [label="Entry HangFire.Redis.RedisConnection.Heartbeat(string)", span="290-290", cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="RedisConnection.cs"];
m2_170 [label="Exit HangFire.Redis.RedisConnection.Heartbeat(string)", span="290-290", cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="RedisConnection.cs"];
m2_167 [label="Entry Unk.RemoveEntry", span="", cluster="Unk.RemoveEntry", file="RedisConnection.cs"];
m2_157 [label="transaction.QueueCommand(x => x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId)))", span="282-284", cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs"];
m2_154 [label="Entry HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", span="274-274", cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs"];
m2_155 [label="var transaction = redis.CreateTransaction()", span="276-276", cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs"];
m2_156 [label="transaction.QueueCommand(x => x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId))", span="278-280", cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs"];
m2_158 [label="transaction.Commit()", span="286-286", cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs"];
m2_159 [label="Exit HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", span="274-274", cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs"];
m2_7 [label="Entry HangFire.Redis.RedisConnection.CreateWriteTransaction()", span="45-45", cluster="HangFire.Redis.RedisConnection.CreateWriteTransaction()", file="RedisConnection.cs"];
m2_8 [label="return new RedisWriteOnlyTransaction(Redis.CreateTransaction());", span="47-47", cluster="HangFire.Redis.RedisConnection.CreateWriteTransaction()", file="RedisConnection.cs"];
m2_9 [label="Exit HangFire.Redis.RedisConnection.CreateWriteTransaction()", span="45-45", cluster="HangFire.Redis.RedisConnection.CreateWriteTransaction()", file="RedisConnection.cs"];
m2_102 [label="Entry HangFire.Redis.RedisConnection.GetJobParameter(string, string)", span="208-208", cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="RedisConnection.cs"];
m2_103 [label="return Redis.GetValueFromHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                name);", span="210-212", cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="RedisConnection.cs"];
m2_104 [label="Exit HangFire.Redis.RedisConnection.GetJobParameter(string, string)", span="208-208", cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="RedisConnection.cs"];
m2_69 [label="Entry Unk.ExpireEntryIn", span="", cluster="Unk.ExpireEntryIn", file="RedisConnection.cs"];
m2_56 [label="Entry System.Guid.ToString()", span="0-0", cluster="System.Guid.ToString()", file="RedisConnection.cs"];
m2_190 [label="Entry Unk.Flush", span="", cluster="Unk.Flush", file="RedisConnection.cs"];
m2_28 [label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0", cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="RedisConnection.cs"];
m2_10 [label="Entry RedisWriteOnlyTransaction.cstr", span="", cluster="RedisWriteOnlyTransaction.cstr", file="RedisConnection.cs"];
m2_205 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="RedisConnection.cs"];
m2_193 [label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0", cluster="System.DateTime.Add(System.TimeSpan)", file="RedisConnection.cs"];
m2_129 [label="Entry HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="242-242", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs"];
m2_130 [label="var transaction = Redis.CreateTransaction()", span="244-244", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs"];
m2_131 [label="transaction.QueueCommand(x => x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId))", span="246-247", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs"];
m2_132 [label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', context.WorkerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        }))", span="249-255", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs"];
m2_133 [label="context.Queues", span="257-257", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs"];
m2_135 [label="transaction.QueueCommand(x => x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1))", span="260-262", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs"];
m2_136 [label="transaction.Commit()", span="265-265", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs"];
m2_134 [label="var queue1 = queue", span="259-259", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs"];
m2_137 [label="Exit HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="242-242", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs"];
m2_145 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RedisConnection.cs"];
m2_202 [label="Entry System.Tuple<T1, T2>.Tuple(T1, T2)", span="0-0", cluster="System.Tuple<T1, T2>.Tuple(T1, T2)", file="RedisConnection.cs"];
m2_58 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="RedisConnection.cs"];
m2_150 [label="Entry Unk.AddItemToList", span="", cluster="Unk.AddItemToList", file="RedisConnection.cs"];
m2_110 [label="transaction.QueueCommand(x => x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                    ''Checked''))", span="227-229", cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs"];
m2_106 [label="Entry HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", span="215-215", cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs"];
m2_107 [label="var transaction = Redis.CreateTransaction()", span="217-217", cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs"];
m2_108 [label="transaction.QueueCommand(x => x.RemoveItemFromList(\r\n                    String.Format(RedisStorage.Prefix + ''queue:{0}:dequeued'', queue),\r\n                    id,\r\n                    -1))", span="219-222", cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs"];
m2_109 [label="transaction.QueueCommand(x => x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                    ''Fetched''))", span="224-226", cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs"];
m2_111 [label="transaction.Commit()", span="231-231", cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs"];
m2_112 [label="Exit HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", span="215-215", cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs"];
m2_6 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="RedisConnection.cs"];
m2_163 [label="Entry Unk.RemoveItemFromSet", span="", cluster="Unk.RemoveItemFromSet", file="RedisConnection.cs"];
m2_191 [label="Entry System.DateTime.DateTime(long)", span="0-0", cluster="System.DateTime.DateTime(long)", file="RedisConnection.cs"];
m2_151 [label="Entry HangFire.Redis.RedisConnection.RemoveServer(string)", span="269-269", cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="RedisConnection.cs"];
m2_152 [label="RemoveServer(Redis, serverId)", span="271-271", cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="RedisConnection.cs"];
m2_153 [label="Exit HangFire.Redis.RedisConnection.RemoveServer(string)", span="269-269", cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="RedisConnection.cs"];
m2_192 [label="Entry System.Math.Max(long, long)", span="0-0", cluster="System.Math.Max(long, long)", file="RedisConnection.cs"];
m2_70 [label="Entry HangFire.Redis.RedisConnection.GetJobData(string)", span="149-149", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_71 [label="var storedData = Redis.GetAllEntriesFromHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id))", span="151-152", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_72 [label="storedData.Count == 0", span="154-154", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_78 [label="storedData.ContainsKey(''Type'')", span="161-161", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_79 [label="type = storedData[''Type'']", span="163-163", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_80 [label="storedData.ContainsKey(''Method'')", span="165-165", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_81 [label="method = storedData[''Method'']", span="167-167", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_82 [label="storedData.ContainsKey(''ParameterTypes'')", span="169-169", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_83 [label="parameterTypes = storedData[''ParameterTypes'']", span="171-171", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_84 [label="storedData.ContainsKey(''Arguments'')", span="173-173", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_85 [label="arguments = storedData[''Arguments'']", span="175-175", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_92 [label="return new JobData\r\n            {\r\n                Job = job,\r\n                State = storedData.ContainsKey(''State'') ? storedData[''State''] : null,\r\n                LoadException = loadException\r\n            };", span="192-197", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_73 [label="return null;", span="154-154", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_74 [label="string type = null", span="156-156", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_75 [label="string method = null", span="157-157", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_88 [label="var invocationData = new InvocationData(type, method, parameterTypes, arguments)", span="181-181", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_76 [label="string parameterTypes = null", span="158-158", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_77 [label="string arguments = null", span="159-159", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_86 [label="Job job = null", span="178-178", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_87 [label="JobLoadException loadException = null", span="179-179", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_89 [label="job = invocationData.Deserialize()", span="185-185", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_90 [label=JobLoadException, span="187-187", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_91 [label="loadException = ex", span="189-189", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_93 [label="Exit HangFire.Redis.RedisConnection.GetJobData(string)", span="149-149", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m2_57 [label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65", cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="RedisConnection.cs"];
m2_199 [label="Entry lambda expression", span="315-319", cluster="lambda expression", file="RedisConnection.cs"];
m2_67 [label="x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn)", span="138-140", cluster="lambda expression", file="RedisConnection.cs"];
m2_63 [label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    storedParameters)", span="134-136", cluster="lambda expression", file="RedisConnection.cs"];
m2_62 [label="Entry lambda expression", span="134-136", cluster="lambda expression", file="RedisConnection.cs"];
m2_66 [label="Entry lambda expression", span="138-140", cluster="lambda expression", file="RedisConnection.cs"];
m2_64 [label="Exit lambda expression", span="134-136", cluster="lambda expression", file="RedisConnection.cs"];
m2_68 [label="Exit lambda expression", span="138-140", cluster="lambda expression", file="RedisConnection.cs"];
m2_114 [label="x.RemoveItemFromList(\r\n                    String.Format(RedisStorage.Prefix + ''queue:{0}:dequeued'', queue),\r\n                    id,\r\n                    -1)", span="219-222", cluster="lambda expression", file="RedisConnection.cs"];
m2_118 [label="x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                    ''Fetched'')", span="224-226", cluster="lambda expression", file="RedisConnection.cs"];
m2_122 [label="x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                    ''Checked'')", span="227-229", cluster="lambda expression", file="RedisConnection.cs"];
m2_113 [label="Entry lambda expression", span="219-222", cluster="lambda expression", file="RedisConnection.cs"];
m2_117 [label="Entry lambda expression", span="224-226", cluster="lambda expression", file="RedisConnection.cs"];
m2_121 [label="Entry lambda expression", span="227-229", cluster="lambda expression", file="RedisConnection.cs"];
m2_115 [label="Exit lambda expression", span="219-222", cluster="lambda expression", file="RedisConnection.cs"];
m2_119 [label="Exit lambda expression", span="224-226", cluster="lambda expression", file="RedisConnection.cs"];
m2_123 [label="Exit lambda expression", span="227-229", cluster="lambda expression", file="RedisConnection.cs"];
m2_139 [label="x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId)", span="246-247", cluster="lambda expression", file="RedisConnection.cs"];
m2_143 [label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', context.WorkerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        })", span="249-255", cluster="lambda expression", file="RedisConnection.cs"];
m2_148 [label="x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1)", span="260-262", cluster="lambda expression", file="RedisConnection.cs"];
m2_138 [label="Entry lambda expression", span="246-247", cluster="lambda expression", file="RedisConnection.cs"];
m2_142 [label="Entry lambda expression", span="249-255", cluster="lambda expression", file="RedisConnection.cs"];
m2_147 [label="Entry lambda expression", span="260-262", cluster="lambda expression", file="RedisConnection.cs"];
m2_140 [label="Exit lambda expression", span="246-247", cluster="lambda expression", file="RedisConnection.cs"];
m2_144 [label="Exit lambda expression", span="249-255", cluster="lambda expression", file="RedisConnection.cs"];
m2_149 [label="Exit lambda expression", span="260-262", cluster="lambda expression", file="RedisConnection.cs"];
m2_161 [label="x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId)", span="278-280", cluster="lambda expression", file="RedisConnection.cs"];
m2_165 [label="x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId))", span="282-284", cluster="lambda expression", file="RedisConnection.cs"];
m2_160 [label="Entry lambda expression", span="278-280", cluster="lambda expression", file="RedisConnection.cs"];
m2_164 [label="Entry lambda expression", span="282-284", cluster="lambda expression", file="RedisConnection.cs"];
m2_162 [label="Exit lambda expression", span="278-280", cluster="lambda expression", file="RedisConnection.cs"];
m2_166 [label="Exit lambda expression", span="282-284", cluster="lambda expression", file="RedisConnection.cs"];
m2_200 [label="heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1])))", span="315-319", cluster="lambda expression", file="RedisConnection.cs"];
m2_195 [label="x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat'')", span="312-314", cluster="lambda expression", file="RedisConnection.cs"];
m2_194 [label="Entry lambda expression", span="312-314", cluster="lambda expression", file="RedisConnection.cs"];
m2_196 [label="Exit lambda expression", span="312-314", cluster="lambda expression", file="RedisConnection.cs"];
m2_201 [label="Exit lambda expression", span="315-319", cluster="lambda expression", file="RedisConnection.cs"];
m2_0 [label="Entry HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", span="33-33", cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="RedisConnection.cs"];
m2_1 [label="Redis = redis", span="35-35", cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="RedisConnection.cs"];
m2_2 [label="Exit HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", span="33-33", cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="RedisConnection.cs"];
m2_32 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="RedisConnection.cs"];
m2_128 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault", file="RedisConnection.cs"];
m2_51 [label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn))", span="138-140", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m2_40 [label="Entry HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="115-115", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m2_41 [label="var jobId = Guid.NewGuid().ToString()", span="120-120", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m2_42 [label="var invocationData = InvocationData.Serialize(job)", span="122-122", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m2_43 [label="var storedParameters = new Dictionary<string, string>(parameters)", span="125-125", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m2_50 [label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    storedParameters))", span="134-136", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m2_53 [label="return jobId;", span="146-146", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m2_44 [label="storedParameters.Add(''Type'', invocationData.Type)", span="126-126", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m2_45 [label="storedParameters.Add(''Method'', invocationData.Method)", span="127-127", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m2_46 [label="storedParameters.Add(''ParameterTypes'', invocationData.ParameterTypes)", span="128-128", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m2_47 [label="storedParameters.Add(''Arguments'', invocationData.Arguments)", span="129-129", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m2_48 [label="storedParameters.Add(''CreatedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="130-130", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m2_49 [label="var transaction = Redis.CreateTransaction()", span="132-132", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m2_52 [label="transaction.Commit()", span="143-143", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m2_54 [label="Exit HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="115-115", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m2_35 [label="Entry HangFire.Redis.RedisConnection.AcquireJobLock(string)", span="108-108", cluster="HangFire.Redis.RedisConnection.AcquireJobLock(string)", file="RedisConnection.cs"];
m2_36 [label="return Redis.AcquireLock(\r\n                RedisStorage.Prefix + String.Format(''job:{0}:state-lock'', jobId),\r\n                TimeSpan.FromMinutes(1));", span="110-112", cluster="HangFire.Redis.RedisConnection.AcquireJobLock(string)", file="RedisConnection.cs"];
m2_37 [label="Exit HangFire.Redis.RedisConnection.AcquireJobLock(string)", span="108-108", cluster="HangFire.Redis.RedisConnection.AcquireJobLock(string)", file="RedisConnection.cs"];
m2_116 [label="Entry Unk.RemoveItemFromList", span="", cluster="Unk.RemoveItemFromList", file="RedisConnection.cs"];
m2_100 [label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                name,\r\n                value)", span="202-205", cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="RedisConnection.cs"];
m2_99 [label="Entry HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", span="200-200", cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="RedisConnection.cs"];
m2_101 [label="Exit HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", span="200-200", cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="RedisConnection.cs"];
m2_189 [label="Entry Unk.CreatePipeline", span="", cluster="Unk.CreatePipeline", file="RedisConnection.cs"];
m2_55 [label="Entry System.Guid.NewGuid()", span="0-0", cluster="System.Guid.NewGuid()", file="RedisConnection.cs"];
m2_105 [label="Entry Unk.GetValueFromHash", span="", cluster="Unk.GetValueFromHash", file="RedisConnection.cs"];
m2_61 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="RedisConnection.cs"];
m2_188 [label="Entry Unk.GetAllItemsFromSet", span="", cluster="Unk.GetAllItemsFromSet", file="RedisConnection.cs"];
m2_98 [label="Entry HangFire.Storage.JobData.JobData()", span="20-20", cluster="HangFire.Storage.JobData.JobData()", file="RedisConnection.cs"];
m2_97 [label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38", cluster="HangFire.Storage.InvocationData.Deserialize()", file="RedisConnection.cs"];
m2_197 [label="Entry Unk.Format", span="", cluster="Unk.Format", file="RedisConnection.cs"];
m2_198 [label="Entry Unk.GetValuesFromHash", span="", cluster="Unk.GetValuesFromHash", file="RedisConnection.cs"];
m2_60 [label="Entry Unk.QueueCommand", span="", cluster="Unk.QueueCommand", file="RedisConnection.cs"];
m2_127 [label="Entry Unk.GetRangeFromSortedSetByLowestScore", span="", cluster="Unk.GetRangeFromSortedSetByLowestScore", file="RedisConnection.cs"];
m2_31 [label="Entry Unk.PopAndPushItemBetweenLists", span="", cluster="Unk.PopAndPushItemBetweenLists", file="RedisConnection.cs"];
m2_34 [label="Entry HangFire.Redis.RedisProcessingJob.RedisProcessingJob(HangFire.Redis.RedisConnection, string, string)", span="25-25", cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(HangFire.Redis.RedisConnection, string, string)", file="RedisConnection.cs"];
m2_39 [label="Entry Unk.AcquireLock", span="", cluster="Unk.AcquireLock", file="RedisConnection.cs"];
m2_11 [label="Entry Unk.CreateTransaction", span="", cluster="Unk.CreateTransaction", file="RedisConnection.cs"];
m2_95 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="RedisConnection.cs"];
m2_206 [label="HangFire.Redis.RedisConnection", span="", file="RedisConnection.cs"];
m2_207 [label=jobId, span="", file="RedisConnection.cs"];
m2_208 [label=storedParameters, span="", file="RedisConnection.cs"];
m2_209 [label="System.TimeSpan", span="", file="RedisConnection.cs"];
m2_210 [label=string, span="", file="RedisConnection.cs"];
m2_211 [label=string, span="", file="RedisConnection.cs"];
m2_212 [label=string, span="", file="RedisConnection.cs"];
m2_213 [label="HangFire.Server.ServerContext", span="", file="RedisConnection.cs"];
m2_214 [label=queue1, span="", file="RedisConnection.cs"];
m2_215 [label=string, span="", file="RedisConnection.cs"];
m2_216 [label=name, span="", file="RedisConnection.cs"];
m2_217 [label=heartbeats, span="", file="RedisConnection.cs"];
m3_7 [label="Entry HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", span="53-53", cluster="HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", file="RedisProcessingJob.cs"];
m3_8 [label="HostingEnvironment.RegisterObject(this)", span="56-56", cluster="HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", file="RedisProcessingJob.cs"];
m3_9 [label="Exit HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", span="53-53", cluster="HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", file="RedisProcessingJob.cs"];
m3_16 [label="Entry HangFire.Web.AspNetBackgroundJobServer.Stop(bool)", span="69-69", cluster="HangFire.Web.AspNetBackgroundJobServer.Stop(bool)", file="RedisProcessingJob.cs"];
m3_17 [label="Dispose()", span="71-71", cluster="HangFire.Web.AspNetBackgroundJobServer.Stop(bool)", file="RedisProcessingJob.cs"];
m3_18 [label="Exit HangFire.Web.AspNetBackgroundJobServer.Stop(bool)", span="69-69", cluster="HangFire.Web.AspNetBackgroundJobServer.Stop(bool)", file="RedisProcessingJob.cs"];
m3_4 [label="Entry HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer(HangFire.BackgroundJobServerOptions)", span="41-41", cluster="HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer(HangFire.BackgroundJobServerOptions)", file="RedisProcessingJob.cs"];
m3_5 [label="HostingEnvironment.RegisterObject(this)", span="44-44", cluster="HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer(HangFire.BackgroundJobServerOptions)", file="RedisProcessingJob.cs"];
m3_6 [label="Exit HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer(HangFire.BackgroundJobServerOptions)", span="41-41", cluster="HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer(HangFire.BackgroundJobServerOptions)", file="RedisProcessingJob.cs"];
m3_10 [label="Entry HangFire.Web.AspNetBackgroundJobServer.Dispose()", span="63-63", cluster="HangFire.Web.AspNetBackgroundJobServer.Dispose()", file="RedisProcessingJob.cs"];
m3_11 [label="base.Dispose()", span="65-65", cluster="HangFire.Web.AspNetBackgroundJobServer.Dispose()", file="RedisProcessingJob.cs"];
m3_12 [label="HostingEnvironment.UnregisterObject(this)", span="66-66", cluster="HangFire.Web.AspNetBackgroundJobServer.Dispose()", file="RedisProcessingJob.cs"];
m3_13 [label="Exit HangFire.Web.AspNetBackgroundJobServer.Dispose()", span="63-63", cluster="HangFire.Web.AspNetBackgroundJobServer.Dispose()", file="RedisProcessingJob.cs"];
m3_3 [label="Entry Unk.RegisterObject", span="", cluster="Unk.RegisterObject", file="RedisProcessingJob.cs"];
m3_0 [label="Entry HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer()", span="31-31", cluster="HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer()", file="RedisProcessingJob.cs"];
m3_1 [label="HostingEnvironment.RegisterObject(this)", span="33-33", cluster="HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer()", file="RedisProcessingJob.cs"];
m3_2 [label="Exit HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer()", span="31-31", cluster="HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer()", file="RedisProcessingJob.cs"];
m3_14 [label="Entry HangFire.BackgroundJobServer.Dispose()", span="76-76", cluster="HangFire.BackgroundJobServer.Dispose()", file="RedisProcessingJob.cs"];
m3_15 [label="Entry Unk.UnregisterObject", span="", cluster="Unk.UnregisterObject", file="RedisProcessingJob.cs"];
m3_19 [label="HangFire.Web.AspNetBackgroundJobServer", span="", file="RedisProcessingJob.cs"];
m4_9 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="RedisProcessingJobFacts.cs"];
m4_10 [label="Entry RedisConnection.cstr", span="", cluster="RedisConnection.cstr", file="RedisProcessingJobFacts.cs"];
m4_12 [label="x.CreateTransaction()", span="21-21", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m4_14 [label="Entry Unk.CreateTransaction", span="", cluster="Unk.CreateTransaction", file="RedisProcessingJobFacts.cs"];
m4_17 [label="Assert.Equal(''connection'', exception.ParamName)", span="32-32", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="RedisProcessingJobFacts.cs"];
m4_18 [label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="27-27", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m4_19 [label="Entry Unk.>", span="", cluster="Unk.>", file="RedisProcessingJobFacts.cs"];
m4_11 [label="Entry lambda expression", span="21-21", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m4_13 [label="Exit lambda expression", span="21-21", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m4_15 [label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="27-27", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="RedisProcessingJobFacts.cs"];
m4_16 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RedisProcessingJob(null, JobId, Queue))", span="29-30", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="RedisProcessingJobFacts.cs"];
m4_20 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="RedisProcessingJobFacts.cs"];
m4_21 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m4_8 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="RedisProcessingJobFacts.cs"];
m4_54 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m4_32 [label="throw new ArgumentException(''From states array should be null or non-empty.'', ''fromStates'');", span="69-69", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="RedisProcessingJobFacts.cs", color=red, community=0];
m4_33 [label="_connection.AcquireDistributedJobLock(jobId, JobLockTimeout)", span="78-78", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="RedisProcessingJobFacts.cs"];
m4_34 [label="var jobData = _connection.GetJobData(jobId)", span="80-80", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="RedisProcessingJobFacts.cs"];
m4_35 [label="jobData == null", span="82-82", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="RedisProcessingJobFacts.cs"];
m4_25 [label="Entry Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", span="127-127", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="RedisProcessingJobFacts.cs"];
m4_26 [label="Entry Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="62-62", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="RedisProcessingJobFacts.cs"];
m4_27 [label="jobId == null", span="65-65", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="RedisProcessingJobFacts.cs", color=red, community=0];
m4_28 [label="throw new ArgumentNullException(''jobId'');", span="65-65", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="RedisProcessingJobFacts.cs", color=red, community=0];
m4_52 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m4_67 [label="Entry Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", span="30-30", cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", file="RedisProcessingJobFacts.cs"];
m4_68 [label="Entry Hangfire.States.IStateChangeProcess.ElectState(Hangfire.Storage.IStorageConnection, Hangfire.States.ElectStateContext)", span="22-22", cluster="Hangfire.States.IStateChangeProcess.ElectState(Hangfire.Storage.IStorageConnection, Hangfire.States.ElectStateContext)", file="RedisProcessingJobFacts.cs"];
m4_45 [label="var context = new StateContext(jobId, jobData.Job, jobData.CreatedAt)", span="120-120", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="RedisProcessingJobFacts.cs"];
m4_46 [label="var stateChanged = ChangeState(context, toState, jobData.State)", span="121-121", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="RedisProcessingJobFacts.cs"];
m4_48 [label="Exit Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="62-62", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="RedisProcessingJobFacts.cs"];
m4_47 [label="return loadSucceeded && stateChanged;", span="123-123", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="RedisProcessingJobFacts.cs"];
m4_49 [label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, string)", file="RedisProcessingJobFacts.cs"];
m4_22 [label="new RedisProcessingJob(null, JobId, Queue)", span="30-30", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m4_24 [label="Entry HangFire.Redis.RedisProcessingJob.RedisProcessingJob(HangFire.Redis.RedisConnection, string, string)", span="25-25", cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(HangFire.Redis.RedisConnection, string, string)", file="RedisProcessingJobFacts.cs"];
m4_55 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="RedisProcessingJobFacts.cs"];
m4_23 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m4_6 [label="_stateChangeProcess = stateChangeProcess", span="37-37", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="RedisProcessingJobFacts.cs"];
m4_50 [label="Entry HangFire.Redis.RedisProcessingJob.Dispose()", span="40-40", cluster="HangFire.Redis.RedisProcessingJob.Dispose()", file="RedisProcessingJobFacts.cs"];
m4_69 [label="Entry Hangfire.States.ApplyStateContext.ApplyStateContext(Hangfire.States.StateContext, Hangfire.States.IState, string, System.Collections.Generic.IEnumerable<Hangfire.States.IState>)", span="24-24", cluster="Hangfire.States.ApplyStateContext.ApplyStateContext(Hangfire.States.StateContext, Hangfire.States.IState, string, System.Collections.Generic.IEnumerable<Hangfire.States.IState>)", file="RedisProcessingJobFacts.cs"];
m4_44 [label="loadSucceeded = false", span="116-116", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="RedisProcessingJobFacts.cs"];
m4_56 [label="var electStateContext = new ElectStateContext(context, _connection, this, toState, oldStateName)", span="131-131", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="RedisProcessingJobFacts.cs"];
m4_57 [label="_stateChangeProcess.ElectState(_connection, electStateContext)", span="132-132", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="RedisProcessingJobFacts.cs"];
m4_77 [label="Entry Hangfire.States.IStateChangeProcess.ApplyState(Hangfire.Storage.IWriteOnlyTransaction, Hangfire.States.ApplyStateContext, bool)", span="23-23", cluster="Hangfire.States.IStateChangeProcess.ApplyState(Hangfire.Storage.IWriteOnlyTransaction, Hangfire.States.ApplyStateContext, bool)", file="RedisProcessingJobFacts.cs"];
m4_76 [label="Entry Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", span="27-27", cluster="Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", file="RedisProcessingJobFacts.cs"];
m4_51 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="RedisProcessingJobFacts.cs"];
m4_29 [label="Entry lambda expression", span="39-39", cluster="lambda expression", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m4_31 [label="Exit lambda expression", span="39-39", cluster="lambda expression", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m4_37 [label="new RedisProcessingJob(_redisConnection, JobId, null)", span="48-48", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m4_42 [label="Assert.Equal(Queue, processingJob.Queue)", span="59-59", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RedisProcessingJobFacts.cs"];
m4_43 [label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="54-54", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RedisProcessingJobFacts.cs"];
m4_30 [label="new RedisProcessingJob(_redisConnection, null, Queue)", span="39-39", cluster="lambda expression", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m4_40 [label="var processingJob = CreateProcessingJob()", span="56-56", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RedisProcessingJobFacts.cs"];
m4_36 [label="Entry lambda expression", span="48-48", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m4_38 [label="Exit lambda expression", span="48-48", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m4_39 [label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="54-54", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RedisProcessingJobFacts.cs"];
m4_41 [label="Assert.Equal(JobId, processingJob.JobId)", span="58-58", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RedisProcessingJobFacts.cs"];
m4_7 [label="Exit Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", span="31-31", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="RedisProcessingJobFacts.cs"];
m4_0 [label="Entry Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", span="31-31", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="RedisProcessingJobFacts.cs"];
m4_4 [label="throw new ArgumentNullException(''stateChangeProcess'');", span="34-34", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m4_3 [label="stateChangeProcess == null", span="34-34", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="RedisProcessingJobFacts.cs", color=red, community=0];
m4_1 [label="connection == null", span="33-33", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="RedisProcessingJobFacts.cs", color=red, community=0];
m4_2 [label="throw new ArgumentNullException(''connection'');", span="33-33", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="RedisProcessingJobFacts.cs", color=red, community=0];
m4_5 [label="_connection = connection", span="36-36", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="RedisProcessingJobFacts.cs"];
m4_78 [label="Entry Hangfire.Storage.IWriteOnlyTransaction.Commit()", span="54-54", cluster="Hangfire.Storage.IWriteOnlyTransaction.Commit()", file="RedisProcessingJobFacts.cs"];
m4_53 [label="Entry Hangfire.Storage.JobData.EnsureLoaded()", span="29-29", cluster="Hangfire.Storage.JobData.EnsureLoaded()", file="RedisProcessingJobFacts.cs"];
m4_58 [label="HangFire.Redis.Tests.RedisProcessingJobFacts", span="", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="RedisProcessingJobFacts.cs"];
m4_63 [label="var applyStateContext = new ApplyStateContext(context, failedState, oldStateName, Enumerable.Empty<IState>())", span="152-152", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="RedisProcessingJobFacts.cs"];
m4_59 [label="ApplyState(applyStateContext, true)", span="140-140", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="RedisProcessingJobFacts.cs"];
m4_60 [label="return true;", span="143-143", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="RedisProcessingJobFacts.cs"];
m4_61 [label=Exception, span="145-145", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="RedisProcessingJobFacts.cs"];
m4_62 [label="var failedState = new FailedState(ex)\r\n                {\r\n                    Reason = ''An exception occurred during the transition of job's state''\r\n                }", span="147-150", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="RedisProcessingJobFacts.cs"];
m4_64 [label="ApplyState(applyStateContext, false)", span="156-156", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="RedisProcessingJobFacts.cs"];
m4_65 [label="return false;", span="159-159", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="RedisProcessingJobFacts.cs"];
m4_66 [label="Exit Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", span="127-127", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="RedisProcessingJobFacts.cs"];
m4_70 [label="Entry Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", span="163-163", cluster="Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", file="RedisProcessingJobFacts.cs"];
m4_72 [label="var transaction = _connection.CreateWriteTransaction()", span="165-165", cluster="Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", file="RedisProcessingJobFacts.cs"];
m4_73 [label="_stateChangeProcess.ApplyState(transaction, context, useFilters)", span="167-167", cluster="Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", file="RedisProcessingJobFacts.cs"];
m4_74 [label="transaction.Commit()", span="169-169", cluster="Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", file="RedisProcessingJobFacts.cs"];
m4_75 [label="Exit Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", span="163-163", cluster="Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", file="RedisProcessingJobFacts.cs"];
m4_71 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="RedisProcessingJobFacts.cs"];
m4_79 [label="Hangfire.States.StateMachine", span="", file="RedisProcessingJobFacts.cs"];
m5_57 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.CreateFetchedJob(string, string)", span="119-119", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.CreateFetchedJob(string, string)", file="SqlServerConnection.cs"];
m5_88 [label="return new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, jobId, queue);", span="121-121", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.CreateFetchedJob(string, string)", file="SqlServerConnection.cs"];
m5_89 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.CreateFetchedJob(string, string)", span="119-119", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.CreateFetchedJob(string, string)", file="SqlServerConnection.cs"];
m5_14 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="SqlServerConnection.cs"];
m5_7 [label="Entry Mock<SqlServerStorage>.cstr", span="", cluster="Mock<SqlServerStorage>.cstr", file="SqlServerConnection.cs"];
m5_19 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="36-36", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerConnection.cs"];
m5_20 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerFetchedJob(_storage.Object, null, _transaction.Object, JobId, Queue))", span="38-39", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerConnection.cs"];
m5_21 [label="Assert.Equal(''connection'', exception.ParamName)", span="41-41", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerConnection.cs"];
m5_22 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="36-36", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerConnection.cs"];
m5_5 [label="Entry Mock<IDbConnection>.cstr", span="", cluster="Mock<IDbConnection>.cstr", file="SqlServerConnection.cs"];
m5_13 [label="Entry Unk.>", span="", cluster="Unk.>", file="SqlServerConnection.cs"];
m5_0 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.SqlServerFetchedJobFacts()", span="19-19", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.SqlServerFetchedJobFacts()", file="SqlServerConnection.cs"];
m5_1 [label="_connection = new Mock<IDbConnection>()", span="21-21", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.SqlServerFetchedJobFacts()", file="SqlServerConnection.cs"];
m5_2 [label="_transaction = new Mock<IDbTransaction>()", span="22-22", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.SqlServerFetchedJobFacts()", file="SqlServerConnection.cs"];
m5_3 [label="_storage = new Mock<SqlServerStorage>(ConnectionUtils.GetConnectionString())", span="23-23", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.SqlServerFetchedJobFacts()", file="SqlServerConnection.cs"];
m5_4 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.SqlServerFetchedJobFacts()", span="19-19", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.SqlServerFetchedJobFacts()", file="SqlServerConnection.cs"];
m5_9 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="27-27", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerConnection.cs"];
m5_10 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerFetchedJob(null, _connection.Object, _transaction.Object, JobId, Queue))", span="29-30", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerConnection.cs"];
m5_11 [label="Assert.Equal(''storage'', exception.ParamName)", span="32-32", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerConnection.cs"];
m5_12 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="27-27", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerConnection.cs"];
m5_18 [label="Entry SqlServerFetchedJob.cstr", span="", cluster="SqlServerFetchedJob.cstr", file="SqlServerConnection.cs"];
m5_47 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="72-72", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerConnection.cs"];
m5_48 [label="var fetchedJob = new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, JobId, Queue)", span="74-74", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerConnection.cs"];
m5_49 [label="Assert.Equal(JobId, fetchedJob.JobId)", span="76-76", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerConnection.cs"];
m5_50 [label="Assert.Equal(Queue, fetchedJob.Queue)", span="77-77", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerConnection.cs"];
m5_51 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="72-72", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerConnection.cs"];
m5_73 [label="Entry Unk.Rollback", span="", cluster="Unk.Rollback", file="SqlServerConnection.cs"];
m5_26 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", span="45-45", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", file="SqlServerConnection.cs"];
m5_27 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerFetchedJob(_storage.Object, _connection.Object, null, JobId, Queue))", span="47-48", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", file="SqlServerConnection.cs"];
m5_28 [label="Assert.Equal(''transaction'', exception.ParamName)", span="50-50", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", file="SqlServerConnection.cs"];
m5_29 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", span="45-45", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", file="SqlServerConnection.cs"];
m5_74 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", span="107-107", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerConnection.cs"];
m5_75 [label="var processingJob = CreateFetchedJob(''1'', ''queue'')", span="109-109", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerConnection.cs"];
m5_76 [label="processingJob.Dispose()", span="112-112", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerConnection.cs"];
m5_77 [label="_transaction.Verify(x => x.Dispose())", span="115-115", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerConnection.cs"];
m5_78 [label="_connection.Verify(x => x.Dispose())", span="116-116", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerConnection.cs"];
m5_79 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", span="107-107", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerConnection.cs"];
m5_33 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", span="54-54", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnection.cs"];
m5_34 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, null, Queue))", span="56-57", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnection.cs"];
m5_35 [label="Assert.Equal(''jobId'', exception.ParamName)", span="59-59", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnection.cs"];
m5_36 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", span="54-54", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnection.cs"];
m5_6 [label="Entry Mock<IDbTransaction>.cstr", span="", cluster="Mock<IDbTransaction>.cstr", file="SqlServerConnection.cs"];
m5_84 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="SqlServerConnection.cs"];
m5_58 [label="Entry Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", span="53-53", cluster="Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", file="SqlServerConnection.cs"];
m5_85 [label="Entry lambda expression", span="116-116", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_15 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_16 [label="new SqlServerFetchedJob(null, _connection.Object, _transaction.Object, JobId, Queue)", span="30-30", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_17 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_23 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_24 [label="new SqlServerFetchedJob(_storage.Object, null, _transaction.Object, JobId, Queue)", span="39-39", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_25 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_30 [label="Entry lambda expression", span="48-48", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_31 [label="new SqlServerFetchedJob(_storage.Object, _connection.Object, null, JobId, Queue)", span="48-48", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_32 [label="Exit lambda expression", span="48-48", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_37 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_38 [label="new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, null, Queue)", span="57-57", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_39 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_44 [label="Entry lambda expression", span="66-66", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_45 [label="new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, JobId, null)", span="66-66", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_46 [label="Exit lambda expression", span="66-66", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_60 [label="Entry lambda expression", span="90-90", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_61 [label="x.Commit()", span="90-90", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_62 [label="Exit lambda expression", span="90-90", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_70 [label="Entry lambda expression", span="103-103", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_71 [label="x.Rollback()", span="103-103", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_72 [label="Exit lambda expression", span="103-103", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_81 [label="Entry lambda expression", span="115-115", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_82 [label="x.Dispose()", span="115-115", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_83 [label="Exit lambda expression", span="115-115", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_86 [label="x.Dispose()", span="116-116", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_87 [label="Exit lambda expression", span="116-116", cluster="lambda expression", file="SqlServerConnection.cs"];
m5_64 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", span="94-94", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", file="SqlServerConnection.cs"];
m5_65 [label="var processingJob = CreateFetchedJob(''1'', ''default'')", span="97-97", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", file="SqlServerConnection.cs"];
m5_66 [label="processingJob.Requeue()", span="100-100", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", file="SqlServerConnection.cs"];
m5_67 [label="_transaction.Verify(x => x.Rollback())", span="103-103", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", file="SqlServerConnection.cs"];
m5_68 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", span="94-94", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", file="SqlServerConnection.cs"];
m5_63 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="SqlServerConnection.cs"];
m5_69 [label="Entry Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", span="58-58", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", file="SqlServerConnection.cs"];
m5_8 [label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", span="26-26", cluster="Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", file="SqlServerConnection.cs"];
m5_80 [label="Entry Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", span="63-63", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerConnection.cs"];
m5_59 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="SqlServerConnection.cs"];
m5_52 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", span="81-81", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", file="SqlServerConnection.cs"];
m5_53 [label="var processingJob = CreateFetchedJob(''1'', ''default'')", span="84-84", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", file="SqlServerConnection.cs"];
m5_54 [label="processingJob.RemoveFromQueue()", span="87-87", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", file="SqlServerConnection.cs"];
m5_55 [label="_transaction.Verify(x => x.Commit())", span="90-90", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", file="SqlServerConnection.cs"];
m5_56 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", span="81-81", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", file="SqlServerConnection.cs"];
m5_40 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="63-63", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerConnection.cs"];
m5_41 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, JobId, null))", span="65-66", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerConnection.cs"];
m5_42 [label="Assert.Equal(''queue'', exception.ParamName)", span="68-68", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerConnection.cs"];
m5_43 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="63-63", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerConnection.cs"];
m5_90 [label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts", span="", file="SqlServerConnection.cs"];
m6_0 [label="Entry Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="24-24", cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SqlServerProcessingJob.cs"];
m6_1 [label="Exit Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="24-24", cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SqlServerProcessingJob.cs"];
m7_57 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.CreateFetchedJob(string, string)", span="119-119", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.CreateFetchedJob(string, string)", file="SqlServerProcessingJobFacts.cs"];
m7_88 [label="return new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, jobId, queue);", span="121-121", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.CreateFetchedJob(string, string)", file="SqlServerProcessingJobFacts.cs"];
m7_89 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.CreateFetchedJob(string, string)", span="119-119", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.CreateFetchedJob(string, string)", file="SqlServerProcessingJobFacts.cs"];
m7_14 [label="Exit lambda expression", span="17-17", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_15 [label="Entry Hangfire.States.StateContext.StateContext(string, Hangfire.Common.Job, System.DateTime)", span="24-24", cluster="Hangfire.States.StateContext.StateContext(string, Hangfire.Common.Job, System.DateTime)", file="SqlServerProcessingJobFacts.cs"];
m7_7 [label="Entry System.Lazy<T>.Lazy(System.Func<T>)", span="0-0", cluster="System.Lazy<T>.Lazy(System.Func<T>)", file="SqlServerProcessingJobFacts.cs"];
m7_19 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="36-36", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerProcessingJobFacts.cs"];
m7_20 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerFetchedJob(_storage.Object, null, _transaction.Object, JobId, Queue))", span="38-39", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerProcessingJobFacts.cs"];
m7_21 [label="Assert.Equal(''connection'', exception.ParamName)", span="41-41", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerProcessingJobFacts.cs"];
m7_22 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="36-36", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerProcessingJobFacts.cs"];
m7_5 [label="Exit Hangfire.Core.Tests.StateContextMock.StateContextMock()", span="10-10", cluster="Hangfire.Core.Tests.StateContextMock.StateContextMock()", file="SqlServerProcessingJobFacts.cs"];
m7_13 [label="new StateContext(JobIdValue, JobValue, CreatedAtValue)", span="17-17", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", color=red, community=0];
m7_0 [label="Entry Hangfire.Core.Tests.StateContextMock.StateContextMock()", span="10-10", cluster="Hangfire.Core.Tests.StateContextMock.StateContextMock()", file="SqlServerProcessingJobFacts.cs"];
m7_3 [label="CreatedAtValue = DateTime.UtcNow", span="14-14", cluster="Hangfire.Core.Tests.StateContextMock.StateContextMock()", color=red, community=0, file="SqlServerProcessingJobFacts.cs"];
m7_2 [label="JobValue = Job.FromExpression(() => Console.WriteLine())", span="13-13", cluster="Hangfire.Core.Tests.StateContextMock.StateContextMock()", file="SqlServerProcessingJobFacts.cs"];
m7_1 [label="JobIdValue = ''job-id''", span="12-12", cluster="Hangfire.Core.Tests.StateContextMock.StateContextMock()", file="SqlServerProcessingJobFacts.cs"];
m7_4 [label="_context = new Lazy<StateContext>(\r\n                () => new StateContext(JobIdValue, JobValue, CreatedAtValue))", span="16-17", cluster="Hangfire.Core.Tests.StateContextMock.StateContextMock()", file="SqlServerProcessingJobFacts.cs", color=red, community=0];
m7_9 [label="Console.WriteLine()", span="13-13", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_10 [label="Exit lambda expression", span="13-13", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_11 [label="Entry System.Console.WriteLine()", span="0-0", cluster="System.Console.WriteLine()", file="SqlServerProcessingJobFacts.cs"];
m7_12 [label="Entry lambda expression", span="17-17", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_47 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="72-72", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerProcessingJobFacts.cs"];
m7_48 [label="var fetchedJob = new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, JobId, Queue)", span="74-74", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerProcessingJobFacts.cs"];
m7_49 [label="Assert.Equal(JobId, fetchedJob.JobId)", span="76-76", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerProcessingJobFacts.cs"];
m7_50 [label="Assert.Equal(Queue, fetchedJob.Queue)", span="77-77", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerProcessingJobFacts.cs"];
m7_51 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="72-72", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerProcessingJobFacts.cs"];
m7_18 [label="Entry SqlServerFetchedJob.cstr", span="", cluster="SqlServerFetchedJob.cstr", file="SqlServerProcessingJobFacts.cs"];
m7_73 [label="Entry Unk.Rollback", span="", cluster="Unk.Rollback", file="SqlServerProcessingJobFacts.cs"];
m7_26 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", span="45-45", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", file="SqlServerProcessingJobFacts.cs"];
m7_27 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerFetchedJob(_storage.Object, _connection.Object, null, JobId, Queue))", span="47-48", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", file="SqlServerProcessingJobFacts.cs"];
m7_28 [label="Assert.Equal(''transaction'', exception.ParamName)", span="50-50", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", file="SqlServerProcessingJobFacts.cs"];
m7_29 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", span="45-45", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", file="SqlServerProcessingJobFacts.cs"];
m7_74 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", span="107-107", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerProcessingJobFacts.cs"];
m7_75 [label="var processingJob = CreateFetchedJob(''1'', ''queue'')", span="109-109", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerProcessingJobFacts.cs"];
m7_77 [label="_transaction.Verify(x => x.Dispose())", span="115-115", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerProcessingJobFacts.cs"];
m7_78 [label="_connection.Verify(x => x.Dispose())", span="116-116", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerProcessingJobFacts.cs"];
m7_76 [label="processingJob.Dispose()", span="112-112", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerProcessingJobFacts.cs"];
m7_79 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", span="107-107", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerProcessingJobFacts.cs"];
m7_33 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", span="54-54", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerProcessingJobFacts.cs"];
m7_34 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, null, Queue))", span="56-57", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerProcessingJobFacts.cs"];
m7_35 [label="Assert.Equal(''jobId'', exception.ParamName)", span="59-59", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerProcessingJobFacts.cs"];
m7_36 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", span="54-54", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerProcessingJobFacts.cs"];
m7_6 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="148-148", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerProcessingJobFacts.cs"];
m7_84 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="SqlServerProcessingJobFacts.cs"];
m7_58 [label="Entry Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", span="53-53", cluster="Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", file="SqlServerProcessingJobFacts.cs"];
m7_85 [label="Entry lambda expression", span="116-116", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_8 [label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", span="26-26", cluster="Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", file="SqlServerProcessingJobFacts.cs"];
m7_16 [label="Hangfire.Core.Tests.StateContextMock", span="", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_24 [label="new SqlServerFetchedJob(_storage.Object, null, _transaction.Object, JobId, Queue)", span="39-39", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_31 [label="new SqlServerFetchedJob(_storage.Object, _connection.Object, null, JobId, Queue)", span="48-48", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_38 [label="new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, null, Queue)", span="57-57", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_45 [label="new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, JobId, null)", span="66-66", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_23 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_25 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_30 [label="Entry lambda expression", span="48-48", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_32 [label="Exit lambda expression", span="48-48", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_37 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_39 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_44 [label="Entry lambda expression", span="66-66", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_46 [label="Exit lambda expression", span="66-66", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_60 [label="Entry lambda expression", span="90-90", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_70 [label="Entry lambda expression", span="103-103", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_81 [label="Entry lambda expression", span="115-115", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_62 [label="Exit lambda expression", span="90-90", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_61 [label="x.Commit()", span="90-90", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_72 [label="Exit lambda expression", span="103-103", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_71 [label="x.Rollback()", span="103-103", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_83 [label="Exit lambda expression", span="115-115", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_82 [label="x.Dispose()", span="115-115", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_86 [label="x.Dispose()", span="116-116", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_87 [label="Exit lambda expression", span="116-116", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m7_64 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", span="94-94", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", file="SqlServerProcessingJobFacts.cs"];
m7_65 [label="var processingJob = CreateFetchedJob(''1'', ''default'')", span="97-97", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", file="SqlServerProcessingJobFacts.cs"];
m7_67 [label="_transaction.Verify(x => x.Rollback())", span="103-103", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", file="SqlServerProcessingJobFacts.cs"];
m7_66 [label="processingJob.Requeue()", span="100-100", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", file="SqlServerProcessingJobFacts.cs"];
m7_68 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", span="94-94", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", file="SqlServerProcessingJobFacts.cs"];
m7_63 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="SqlServerProcessingJobFacts.cs"];
m7_69 [label="Entry Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", span="58-58", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", file="SqlServerProcessingJobFacts.cs"];
m7_80 [label="Entry Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", span="63-63", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerProcessingJobFacts.cs"];
m7_59 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="SqlServerProcessingJobFacts.cs"];
m7_52 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", span="81-81", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", file="SqlServerProcessingJobFacts.cs"];
m7_53 [label="var processingJob = CreateFetchedJob(''1'', ''default'')", span="84-84", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", file="SqlServerProcessingJobFacts.cs"];
m7_55 [label="_transaction.Verify(x => x.Commit())", span="90-90", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", file="SqlServerProcessingJobFacts.cs"];
m7_54 [label="processingJob.RemoveFromQueue()", span="87-87", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", file="SqlServerProcessingJobFacts.cs"];
m7_56 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", span="81-81", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", file="SqlServerProcessingJobFacts.cs"];
m7_40 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="63-63", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerProcessingJobFacts.cs"];
m7_41 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, JobId, null))", span="65-66", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerProcessingJobFacts.cs"];
m7_42 [label="Assert.Equal(''queue'', exception.ParamName)", span="68-68", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerProcessingJobFacts.cs"];
m7_43 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="63-63", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerProcessingJobFacts.cs"];
m7_90 [label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts", span="", file="SqlServerProcessingJobFacts.cs"];
m8_97 [label="Entry Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", span="42-42", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="Worker.cs"];
m8_129 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ReturnsNewJobId()", span="151-151", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ReturnsNewJobId()", file="Worker.cs"];
m8_130 [label="var stateMachine = CreateStateMachine()", span="153-153", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ReturnsNewJobId()", file="Worker.cs"];
m8_131 [label="Assert.Equal(JobId, stateMachine.CreateJob(_job, _parameters, _state.Object))", span="154-154", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ReturnsNewJobId()", file="Worker.cs"];
m8_132 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ReturnsNewJobId()", span="151-151", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ReturnsNewJobId()", file="Worker.cs"];
m8_220 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenApplyStateThrowsException()", span="275-275", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenApplyStateThrowsException()", file="Worker.cs"];
m8_221 [label="_process.Setup(x => x.ApplyState(It.IsAny<IWriteOnlyTransaction>(), It.IsAny<ApplyStateContext>(), true))\r\n                .Throws(new Exception())", span="278-279", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenApplyStateThrowsException()", file="Worker.cs"];
m8_222 [label="var stateMachine = CreateStateMachine()", span="281-281", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenApplyStateThrowsException()", file="Worker.cs"];
m8_223 [label="var result = stateMachine.ChangeState(JobId, _state.Object, FromOldState)", span="284-284", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenApplyStateThrowsException()", file="Worker.cs"];
m8_224 [label="_process.Verify(x => x.ApplyState(_transaction.Object, It.IsNotNull<ApplyStateContext>(), false))", span="287-287", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenApplyStateThrowsException()", file="Worker.cs"];
m8_225 [label="Assert.False(result)", span="289-289", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenApplyStateThrowsException()", file="Worker.cs"];
m8_226 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenApplyStateThrowsException()", span="275-275", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenApplyStateThrowsException()", file="Worker.cs"];
m8_105 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="Worker.cs"];
m8_17 [label="Entry Mock<IState>.cstr", span="", cluster="Mock<IState>.cstr", file="Worker.cs"];
m8_58 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenStateChangeProcessIsNull()", span="68-68", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenStateChangeProcessIsNull()", file="Worker.cs"];
m8_59 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new StateMachine(_connection.Object, null))", span="70-71", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenStateChangeProcessIsNull()", file="Worker.cs"];
m8_60 [label="Assert.Equal(''stateChangeProcess'', exception.ParamName)", span="73-73", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenStateChangeProcessIsNull()", file="Worker.cs"];
m8_61 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenStateChangeProcessIsNull()", span="68-68", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenStateChangeProcessIsNull()", file="Worker.cs"];
m8_253 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheGivenState_IfStateIgnoresThisException_AndMethodDataCouldNotBeResolved()", span="319-319", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheGivenState_IfStateIgnoresThisException_AndMethodDataCouldNotBeResolved()", file="Worker.cs"];
m8_254 [label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData\r\n                {\r\n                    State = OldStateName,\r\n                    Job = null,\r\n                    LoadException = new JobLoadException(''asd'', new Exception())\r\n                })", span="322-328", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheGivenState_IfStateIgnoresThisException_AndMethodDataCouldNotBeResolved()", file="Worker.cs"];
m8_255 [label="_state.Setup(x => x.IgnoreJobLoadException).Returns(true)", span="330-330", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheGivenState_IfStateIgnoresThisException_AndMethodDataCouldNotBeResolved()", file="Worker.cs"];
m8_256 [label="var stateMachine = CreateStateMachine()", span="332-332", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheGivenState_IfStateIgnoresThisException_AndMethodDataCouldNotBeResolved()", file="Worker.cs"];
m8_257 [label="var result = stateMachine.ChangeState(JobId, _state.Object, FromOldState)", span="335-335", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheGivenState_IfStateIgnoresThisException_AndMethodDataCouldNotBeResolved()", file="Worker.cs"];
m8_258 [label="_process.Verify(x => x.ApplyState(\r\n                _transaction.Object, \r\n                It.Is<ApplyStateContext>(ctx => ctx.NewState == _state.Object),\r\n                true))", span="338-341", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheGivenState_IfStateIgnoresThisException_AndMethodDataCouldNotBeResolved()", file="Worker.cs"];
m8_259 [label="Assert.True(result)", span="343-343", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheGivenState_IfStateIgnoresThisException_AndMethodDataCouldNotBeResolved()", file="Worker.cs"];
m8_260 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheGivenState_IfStateIgnoresThisException_AndMethodDataCouldNotBeResolved()", span="319-319", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheGivenState_IfStateIgnoresThisException_AndMethodDataCouldNotBeResolved()", file="Worker.cs"];
m8_71 [label="Entry Unk.Same", span="", cluster="Unk.Same", file="Worker.cs"];
m8_21 [label="Entry Mock<IWriteOnlyTransaction>.cstr", span="", cluster="Mock<IWriteOnlyTransaction>.cstr", file="Worker.cs"];
m8_43 [label="Entry Unk.GetJobData", span="", cluster="Unk.GetJobData", file="Worker.cs"];
m8_53 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="Worker.cs"];
m8_227 [label="Entry System.Exception.Exception()", span="0-0", cluster="System.Exception.Exception()", file="Worker.cs"];
m8_0 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", span="25-25", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="Worker.cs"];
m8_9 [label="_connection.Setup(x => x.CreateExpiredJob(\r\n                It.IsAny<Job>(),\r\n                It.IsAny<IDictionary<string, string>>(),\r\n                It.IsAny<DateTime>(),\r\n                It.IsAny<TimeSpan>())).Returns(JobId)", span="39-43", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", color=green, community=0, file="Worker.cs"];
m8_8 [label="_connection.Setup(x => x.CreateWriteTransaction()).Returns(_transaction.Object)", span="37-37", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="Worker.cs"];
m8_10 [label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData\r\n                {\r\n                    State = OldStateName,\r\n                    Job = _job\r\n                })", span="45-50", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", color=green, community=0, file="Worker.cs"];
m8_11 [label="_distributedLock = new Mock<IDisposable>()", span="52-52", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="Worker.cs"];
m8_12 [label="_connection\r\n                .Setup(x => x.AcquireDistributedLock(String.Format(''job:{0}:state-lock'', JobId), It.IsAny<TimeSpan>()))\r\n                .Returns(_distributedLock.Object)", span="53-55", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", color=green, community=0, file="Worker.cs"];
m8_1 [label="_process = new Mock<IStateChangeProcess>()", span="27-27", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="Worker.cs"];
m8_2 [label="_job = Job.FromExpression(() => Console.WriteLine())", span="29-29", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="Worker.cs"];
m8_3 [label="_parameters = new Dictionary<string, string>()", span="30-30", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="Worker.cs"];
m8_4 [label="_state = new Mock<IState>()", span="31-31", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="Worker.cs"];
m8_5 [label="_state.Setup(x => x.Name).Returns(StateName)", span="32-32", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="Worker.cs"];
m8_6 [label="_connection = new Mock<IStorageConnection>()", span="34-34", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="Worker.cs"];
m8_7 [label="_transaction = new Mock<IWriteOnlyTransaction>()", span="35-35", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="Worker.cs"];
m8_13 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", span="25-25", cluster="Hangfire.Core.Tests.States.StateMachineFacts.StateMachineFacts()", file="Worker.cs"];
m8_301 [label="Entry Unk.ElectState", span="", cluster="Unk.ElectState", file="Worker.cs"];
m8_47 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="Worker.cs"];
m8_243 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()", file="Worker.cs"];
m8_151 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenFromStatesIsEmpty()", span="180-180", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenFromStatesIsEmpty()", file="Worker.cs"];
m8_152 [label="var stateMachine = CreateStateMachine()", span="182-182", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenFromStatesIsEmpty()", file="Worker.cs"];
m8_153 [label="var exception = Assert.Throws<ArgumentException>(\r\n                () => stateMachine.ChangeState(JobId, _state.Object, new string[0]))", span="184-185", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenFromStatesIsEmpty()", file="Worker.cs"];
m8_154 [label="Assert.Equal(''fromStates'', exception.ParamName)", span="187-187", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenFromStatesIsEmpty()", file="Worker.cs"];
m8_155 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenFromStatesIsEmpty()", span="180-180", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenFromStatesIsEmpty()", file="Worker.cs"];
m8_38 [label="Entry Unk.>", span="", cluster="Unk.>", file="Worker.cs"];
m8_39 [label="Entry Unk.CreateExpiredJob", span="", cluster="Unk.CreateExpiredJob", file="Worker.cs"];
m8_273 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_CommitsTheNewState_AndReturnsTrue()", span="347-347", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_CommitsTheNewState_AndReturnsTrue()", file="Worker.cs"];
m8_274 [label="var machine = CreateStateMachine()", span="350-350", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_CommitsTheNewState_AndReturnsTrue()", file="Worker.cs"];
m8_275 [label="var result = machine.ChangeState(JobId, _state.Object, new[] { OldStateName })", span="353-353", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_CommitsTheNewState_AndReturnsTrue()", file="Worker.cs"];
m8_276 [label="_process.Verify(x => x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(ctx => ctx.NewState == _state.Object && ctx.OldStateName == OldStateName\r\n                    && ctx.Job == _job && ctx.JobId == JobId),\r\n                true))", span="356-360", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_CommitsTheNewState_AndReturnsTrue()", file="Worker.cs"];
m8_277 [label="_transaction.Verify(x => x.Commit())", span="362-362", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_CommitsTheNewState_AndReturnsTrue()", file="Worker.cs"];
m8_278 [label="Assert.True(result)", span="364-364", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_CommitsTheNewState_AndReturnsTrue()", file="Worker.cs"];
m8_279 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_CommitsTheNewState_AndReturnsTrue()", span="347-347", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_CommitsTheNewState_AndReturnsTrue()", file="Worker.cs"];
m8_182 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ChangesTheStateOfTheJob_WhenFromStatesIsNull()", span="220-220", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ChangesTheStateOfTheJob_WhenFromStatesIsNull()", file="Worker.cs"];
m8_183 [label="var stateMachine = CreateStateMachine()", span="223-223", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ChangesTheStateOfTheJob_WhenFromStatesIsNull()", file="Worker.cs"];
m8_184 [label="stateMachine.ChangeState(JobId, _state.Object, null)", span="226-226", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ChangesTheStateOfTheJob_WhenFromStatesIsNull()", file="Worker.cs"];
m8_185 [label="_process.Verify(x => x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(ctx => ctx.NewState == _state.Object && ctx.OldStateName == OldStateName),\r\n                true))", span="229-232", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ChangesTheStateOfTheJob_WhenFromStatesIsNull()", file="Worker.cs"];
m8_186 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ChangesTheStateOfTheJob_WhenFromStatesIsNull()", span="220-220", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ChangesTheStateOfTheJob_WhenFromStatesIsNull()", file="Worker.cs"];
m8_57 [label="Entry StateMachine.cstr", span="", cluster="StateMachine.cstr", file="Worker.cs"];
m8_201 [label="Entry Unk.False", span="", cluster="Unk.False", file="Worker.cs"];
m8_89 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", span="109-109", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", file="Worker.cs"];
m8_90 [label="var stateMachine = CreateStateMachine()", span="111-111", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", file="Worker.cs"];
m8_91 [label="var exception = Assert.Throws<ArgumentNullException> (\r\n                () => stateMachine.CreateJob(_job, _parameters, null))", span="113-114", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", file="Worker.cs"];
m8_92 [label="Assert.Equal(''state'', exception.ParamName)", span="116-116", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", file="Worker.cs"];
m8_93 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", span="109-109", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", file="Worker.cs"];
m8_49 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="59-59", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="Worker.cs"];
m8_50 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new StateMachine(null, _process.Object))", span="61-62", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="Worker.cs"];
m8_51 [label="Assert.Equal(''connection'', exception.ParamName)", span="64-64", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="Worker.cs"];
m8_52 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="59-59", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="Worker.cs"];
m8_117 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ChangesTheStateOfACreatedJob()", span="137-137", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ChangesTheStateOfACreatedJob()", file="Worker.cs"];
m8_118 [label="var stateMachine = CreateStateMachine()", span="139-139", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ChangesTheStateOfACreatedJob()", file="Worker.cs"];
m8_119 [label="stateMachine.CreateJob(_job, _parameters, _state.Object)", span="141-141", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ChangesTheStateOfACreatedJob()", file="Worker.cs"];
m8_120 [label="_process.Verify(x => x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(sc => sc.JobId == JobId && sc.Job == _job\r\n                    && sc.NewState == _state.Object && sc.OldStateName == null),\r\n                true))", span="143-147", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ChangesTheStateOfACreatedJob()", file="Worker.cs"];
m8_121 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ChangesTheStateOfACreatedJob()", span="137-137", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ChangesTheStateOfACreatedJob()", file="Worker.cs"];
m8_65 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.Process_ReturnsTheGiven_StateChangingProcess()", span="77-77", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Process_ReturnsTheGiven_StateChangingProcess()", file="Worker.cs"];
m8_66 [label="var stateMachine = CreateStateMachine()", span="79-79", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Process_ReturnsTheGiven_StateChangingProcess()", file="Worker.cs"];
m8_68 [label="Assert.Same(_process.Object, result)", span="83-83", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Process_ReturnsTheGiven_StateChangingProcess()", file="Worker.cs"];
m8_67 [label="var result = stateMachine.Process", span="81-81", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Process_ReturnsTheGiven_StateChangingProcess()", file="Worker.cs"];
m8_69 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.Process_ReturnsTheGiven_StateChangingProcess()", span="77-77", cluster="Hangfire.Core.Tests.States.StateMachineFacts.Process_ReturnsTheGiven_StateChangingProcess()", file="Worker.cs"];
m8_27 [label="Entry System.Console.WriteLine()", span="0-0", cluster="System.Console.WriteLine()", file="Worker.cs"];
m8_159 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_WorksWithinAJobLock()", span="191-191", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_WorksWithinAJobLock()", file="Worker.cs"];
m8_160 [label="var stateMachine = CreateStateMachine()", span="193-193", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_WorksWithinAJobLock()", file="Worker.cs"];
m8_161 [label="stateMachine.ChangeState(JobId, _state.Object, FromOldState)", span="195-195", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_WorksWithinAJobLock()", file="Worker.cs"];
m8_162 [label="_distributedLock.Verify(x => x.Dispose())", span="197-197", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_WorksWithinAJobLock()", file="Worker.cs"];
m8_163 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_WorksWithinAJobLock()", span="191-191", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_WorksWithinAJobLock()", file="Worker.cs"];
m8_14 [label="Entry Mock<IStateChangeProcess>.cstr", span="", cluster="Mock<IStateChangeProcess>.cstr", file="Worker.cs"];
m8_141 [label="Entry Unk.ChangeState", span="", cluster="Unk.ChangeState", file="Worker.cs"];
m8_150 [label="Entry Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="64-64", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="Worker.cs"];
m8_319 [label="Entry System.NotSupportedException.NotSupportedException()", span="0-0", cluster="System.NotSupportedException.NotSupportedException()", file="Worker.cs"];
m8_70 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.CreateStateMachine()", span="412-412", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateStateMachine()", file="Worker.cs"];
m8_329 [label="return new StateMachine(\r\n                _connection.Object,\r\n                _process.Object);", span="414-416", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateStateMachine()", file="Worker.cs"];
m8_330 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.CreateStateMachine()", span="412-412", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateStateMachine()", file="Worker.cs"];
m8_16 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="Worker.cs"];
m8_142 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenToStateIsNull()", span="169-169", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenToStateIsNull()", file="Worker.cs"];
m8_143 [label="var stateMachine = CreateStateMachine()", span="171-171", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenToStateIsNull()", file="Worker.cs"];
m8_144 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => stateMachine.ChangeState(JobId, null, FromOldState))", span="173-174", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenToStateIsNull()", file="Worker.cs"];
m8_145 [label="Assert.Equal(''toState'', exception.ParamName)", span="176-176", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenToStateIsNull()", file="Worker.cs"];
m8_146 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenToStateIsNull()", span="169-169", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenToStateIsNull()", file="Worker.cs"];
m8_18 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="Worker.cs"];
m8_311 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_AppliesFailedState_WhenThereIsAnException_AndReturnsFalse()", span="389-389", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_AppliesFailedState_WhenThereIsAnException_AndReturnsFalse()", file="Worker.cs"];
m8_313 [label="_process.Setup(\r\n                x => x.ApplyState(It.IsAny<IWriteOnlyTransaction>(), It.IsAny<ApplyStateContext>(), true))\r\n                .Throws(exception)", span="394-396", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_AppliesFailedState_WhenThereIsAnException_AndReturnsFalse()", file="Worker.cs"];
m8_314 [label="var machine = CreateStateMachine()", span="398-398", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_AppliesFailedState_WhenThereIsAnException_AndReturnsFalse()", file="Worker.cs"];
m8_315 [label="var result = machine.ChangeState(JobId, _state.Object, new[] { OldStateName })", span="401-401", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_AppliesFailedState_WhenThereIsAnException_AndReturnsFalse()", file="Worker.cs"];
m8_316 [label="_process.Verify(x => x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(ctx => ctx.NewState is FailedState && ((FailedState)ctx.NewState).Exception == exception),\r\n                false))", span="404-407", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_AppliesFailedState_WhenThereIsAnException_AndReturnsFalse()", file="Worker.cs"];
m8_312 [label="var exception = new NotSupportedException()", span="392-392", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_AppliesFailedState_WhenThereIsAnException_AndReturnsFalse()", file="Worker.cs"];
m8_317 [label="Assert.False(result)", span="409-409", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_AppliesFailedState_WhenThereIsAnException_AndReturnsFalse()", file="Worker.cs"];
m8_318 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_AppliesFailedState_WhenThereIsAnException_AndReturnsFalse()", span="389-389", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_AppliesFailedState_WhenThereIsAnException_AndReturnsFalse()", file="Worker.cs"];
m8_228 [label="Entry Unk.Throws", span="", cluster="Unk.Throws", file="Worker.cs"];
m8_167 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="Worker.cs"];
m8_98 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_CreatesExpiredJob()", span="120-120", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_CreatesExpiredJob()", file="Worker.cs"];
m8_100 [label="_parameters.Add(''Name'', ''Value'')", span="123-123", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_CreatesExpiredJob()", file="Worker.cs"];
m8_101 [label="var stateMachine = CreateStateMachine()", span="125-125", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_CreatesExpiredJob()", file="Worker.cs"];
m8_102 [label="stateMachine.CreateJob(job, _parameters, _state.Object)", span="127-127", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_CreatesExpiredJob()", file="Worker.cs"];
m8_103 [label="_connection.Verify(x => x.CreateExpiredJob(\r\n				job,\r\n                It.Is<Dictionary<string, string>>(d => d[''Name''] == ''Value''),\r\n                It.IsAny<DateTime>(),\r\n                It.IsAny<TimeSpan>()))", span="129-133", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_CreatesExpiredJob()", file="Worker.cs"];
m8_99 [label="var job = Job.FromExpression(() => Console.WriteLine(''SomeString''))", span="122-122", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_CreatesExpiredJob()", file="Worker.cs"];
m8_104 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_CreatesExpiredJob()", span="120-120", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_CreatesExpiredJob()", file="Worker.cs"];
m8_211 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenFromStatesArgumentDoesNotContainCurrentState()", span="257-257", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenFromStatesArgumentDoesNotContainCurrentState()", file="Worker.cs"];
m8_212 [label="var stateMachine = CreateStateMachine()", span="260-260", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenFromStatesArgumentDoesNotContainCurrentState()", file="Worker.cs"];
m8_213 [label="var result = stateMachine.ChangeState(\r\n                JobId, _state.Object, new [] { ''AnotherState'' })", span="263-264", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenFromStatesArgumentDoesNotContainCurrentState()", file="Worker.cs"];
m8_215 [label="_process.Verify(\r\n                x => x.ApplyState(It.IsAny<IWriteOnlyTransaction>(), It.IsAny<ApplyStateContext>(), It.IsAny<bool>()),\r\n                Times.Never)", span="269-271", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenFromStatesArgumentDoesNotContainCurrentState()", file="Worker.cs"];
m8_214 [label="Assert.False(result)", span="267-267", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenFromStatesArgumentDoesNotContainCurrentState()", file="Worker.cs"];
m8_216 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenFromStatesArgumentDoesNotContainCurrentState()", span="257-257", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenFromStatesArgumentDoesNotContainCurrentState()", file="Worker.cs"];
m8_81 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenParametersIsNull()", span="98-98", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenParametersIsNull()", file="Worker.cs"];
m8_82 [label="var stateMachine = CreateStateMachine()", span="100-100", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenParametersIsNull()", file="Worker.cs"];
m8_83 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => stateMachine.CreateJob(_job, null, _state.Object))", span="102-103", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenParametersIsNull()", file="Worker.cs"];
m8_84 [label="Assert.Equal(''parameters'', exception.ParamName)", span="105-105", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenParametersIsNull()", file="Worker.cs"];
m8_85 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenParametersIsNull()", span="98-98", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenParametersIsNull()", file="Worker.cs"];
m8_48 [label="Entry Unk.AcquireDistributedLock", span="", cluster="Unk.AcquireDistributedLock", file="Worker.cs"];
m8_72 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", span="87-87", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="Worker.cs"];
m8_73 [label="var stateMachine = CreateStateMachine()", span="89-89", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="Worker.cs"];
m8_74 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => stateMachine.CreateJob(null, _parameters, _state.Object))", span="91-92", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="Worker.cs"];
m8_75 [label="Assert.Equal(''job'', exception.ParamName)", span="94-94", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="Worker.cs"];
m8_76 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", span="87-87", cluster="Hangfire.Core.Tests.States.StateMachineFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="Worker.cs"];
m8_23 [label="Entry Mock<IDisposable>.cstr", span="", cluster="Mock<IDisposable>.cstr", file="Worker.cs"];
m8_168 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.TryToChangeState_ChangesTheStateOfTheJob()", span="201-201", cluster="Hangfire.Core.Tests.States.StateMachineFacts.TryToChangeState_ChangesTheStateOfTheJob()", file="Worker.cs"];
m8_169 [label="var stateMachine = CreateStateMachine()", span="204-204", cluster="Hangfire.Core.Tests.States.StateMachineFacts.TryToChangeState_ChangesTheStateOfTheJob()", file="Worker.cs"];
m8_170 [label="var result = stateMachine.ChangeState(JobId, _state.Object, FromOldState)", span="207-207", cluster="Hangfire.Core.Tests.States.StateMachineFacts.TryToChangeState_ChangesTheStateOfTheJob()", file="Worker.cs"];
m8_171 [label="_process.Verify(x => x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(sc => sc.JobId == JobId && sc.Job.Type.Name.Equals(''Console'')\r\n                    && sc.NewState == _state.Object && sc.OldStateName == OldStateName),\r\n                true))", span="210-214", cluster="Hangfire.Core.Tests.States.StateMachineFacts.TryToChangeState_ChangesTheStateOfTheJob()", file="Worker.cs"];
m8_172 [label="Assert.True(result)", span="216-216", cluster="Hangfire.Core.Tests.States.StateMachineFacts.TryToChangeState_ChangesTheStateOfTheJob()", file="Worker.cs"];
m8_173 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.TryToChangeState_ChangesTheStateOfTheJob()", span="201-201", cluster="Hangfire.Core.Tests.States.StateMachineFacts.TryToChangeState_ChangesTheStateOfTheJob()", file="Worker.cs"];
m8_107 [label="Entry lambda expression", span="122-122", cluster="lambda expression", file="Worker.cs"];
m8_35 [label="Entry lambda expression", span="39-43", cluster="lambda expression", file="Worker.cs"];
m8_40 [label="Entry lambda expression", span="45-45", cluster="lambda expression", file="Worker.cs"];
m8_44 [label="Entry lambda expression", span="54-54", cluster="lambda expression", file="Worker.cs"];
m8_36 [label="x.CreateExpiredJob(\r\n                It.IsAny<Job>(),\r\n                It.IsAny<IDictionary<string, string>>(),\r\n                It.IsAny<DateTime>(),\r\n                It.IsAny<TimeSpan>())", span="39-43", cluster="lambda expression", color=green, community=0, file="Worker.cs"];
m8_37 [label="Exit lambda expression", span="39-43", cluster="lambda expression", file="Worker.cs"];
m8_41 [label="x.GetJobData(JobId)", span="45-45", cluster="lambda expression", color=green, community=0, file="Worker.cs"];
m8_42 [label="Exit lambda expression", span="45-45", cluster="lambda expression", file="Worker.cs"];
m8_45 [label="x.AcquireDistributedLock(String.Format(''job:{0}:state-lock'', JobId), It.IsAny<TimeSpan>())", span="54-54", cluster="lambda expression", color=green, community=0, file="Worker.cs"];
m8_46 [label="Exit lambda expression", span="54-54", cluster="lambda expression", file="Worker.cs"];
m8_55 [label="new StateMachine(null, _process.Object)", span="62-62", cluster="lambda expression", file="Worker.cs"];
m8_63 [label="new StateMachine(_connection.Object, null)", span="71-71", cluster="lambda expression", file="Worker.cs"];
m8_78 [label="stateMachine.CreateJob(null, _parameters, _state.Object)", span="92-92", cluster="lambda expression", file="Worker.cs"];
m8_87 [label="stateMachine.CreateJob(_job, null, _state.Object)", span="103-103", cluster="lambda expression", file="Worker.cs"];
m8_95 [label="stateMachine.CreateJob(_job, _parameters, null)", span="114-114", cluster="lambda expression", file="Worker.cs"];
m8_123 [label="x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(sc => sc.JobId == JobId && sc.Job == _job\r\n                    && sc.NewState == _state.Object && sc.OldStateName == null),\r\n                true)", span="143-147", cluster="lambda expression", file="Worker.cs"];
m8_127 [label="sc.JobId == JobId && sc.Job == _job\r\n                    && sc.NewState == _state.Object && sc.OldStateName == null", span="145-146", cluster="lambda expression", file="Worker.cs"];
m8_139 [label="stateMachine.ChangeState(null, _state.Object, FromOldState)", span="163-163", cluster="lambda expression", file="Worker.cs"];
m8_157 [label="stateMachine.ChangeState(JobId, _state.Object, new string[0])", span="185-185", cluster="lambda expression", file="Worker.cs"];
m8_176 [label="x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(sc => sc.JobId == JobId && sc.Job.Type.Name.Equals(''Console'')\r\n                    && sc.NewState == _state.Object && sc.OldStateName == OldStateName),\r\n                true)", span="210-214", cluster="lambda expression", file="Worker.cs"];
m8_179 [label="sc.JobId == JobId && sc.Job.Type.Name.Equals(''Console'')\r\n                    && sc.NewState == _state.Object && sc.OldStateName == OldStateName", span="212-213", cluster="lambda expression", file="Worker.cs"];
m8_188 [label="x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(ctx => ctx.NewState == _state.Object && ctx.OldStateName == OldStateName),\r\n                true)", span="229-232", cluster="lambda expression", file="Worker.cs"];
m8_191 [label="ctx.NewState == _state.Object && ctx.OldStateName == OldStateName", span="231-231", cluster="lambda expression", file="Worker.cs"];
m8_233 [label="x.ApplyState(_transaction.Object, It.IsNotNull<ApplyStateContext>(), false)", span="287-287", cluster="lambda expression", file="Worker.cs"];
m8_248 [label="x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(ctx => ctx.JobId == JobId && ctx.Job == null && ctx.NewState is FailedState),\r\n                true)", span="310-313", cluster="lambda expression", file="Worker.cs"];
m8_268 [label="x.ApplyState(\r\n                _transaction.Object, \r\n                It.Is<ApplyStateContext>(ctx => ctx.NewState == _state.Object),\r\n                true)", span="338-341", cluster="lambda expression", file="Worker.cs"];
m8_271 [label="ctx.NewState == _state.Object", span="340-340", cluster="lambda expression", file="Worker.cs"];
m8_281 [label="x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(ctx => ctx.NewState == _state.Object && ctx.OldStateName == OldStateName\r\n                    && ctx.Job == _job && ctx.JobId == JobId),\r\n                true)", span="356-360", cluster="lambda expression", file="Worker.cs"];
m8_284 [label="ctx.NewState == _state.Object && ctx.OldStateName == OldStateName\r\n                    && ctx.Job == _job && ctx.JobId == JobId", span="358-359", cluster="lambda expression", file="Worker.cs"];
m8_299 [label="x.ElectState(_connection.Object, It.IsAny<ElectStateContext>())", span="373-373", cluster="lambda expression", file="Worker.cs"];
m8_306 [label="x.ApplyState(\r\n                _transaction.Object, \r\n                It.Is<ApplyStateContext>(ctx => ctx.NewState == anotherState.Object),\r\n                true)", span="382-385", cluster="lambda expression", file="Worker.cs"];
m8_324 [label="x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(ctx => ctx.NewState is FailedState && ((FailedState)ctx.NewState).Exception == exception),\r\n                false)", span="404-407", cluster="lambda expression", file="Worker.cs"];
m8_31 [label="Entry lambda expression", span="37-37", cluster="lambda expression", file="Worker.cs"];
m8_112 [label="x.CreateExpiredJob(\r\n				job,\r\n                It.Is<Dictionary<string, string>>(d => d[''Name''] == ''Value''),\r\n                It.IsAny<DateTime>(),\r\n                It.IsAny<TimeSpan>())", span="129-133", cluster="lambda expression", file="Worker.cs"];
m8_203 [label="x.GetJobData(It.IsAny<string>())", span="239-239", cluster="lambda expression", file="Worker.cs"];
m8_209 [label="x.ApplyState(It.IsAny<IWriteOnlyTransaction>(), It.IsAny<ApplyStateContext>(), It.IsAny<bool>())", span="252-252", cluster="lambda expression", file="Worker.cs"];
m8_218 [label="x.ApplyState(It.IsAny<IWriteOnlyTransaction>(), It.IsAny<ApplyStateContext>(), It.IsAny<bool>())", span="270-270", cluster="lambda expression", file="Worker.cs"];
m8_230 [label="x.ApplyState(It.IsAny<IWriteOnlyTransaction>(), It.IsAny<ApplyStateContext>(), true)", span="278-278", cluster="lambda expression", file="Worker.cs"];
m8_321 [label="x.ApplyState(It.IsAny<IWriteOnlyTransaction>(), It.IsAny<ApplyStateContext>(), true)", span="395-395", cluster="lambda expression", file="Worker.cs"];
m8_206 [label="x.GetJobData(JobId)", span="249-249", cluster="lambda expression", file="Worker.cs"];
m8_245 [label="x.GetJobData(JobId)", span="296-296", cluster="lambda expression", file="Worker.cs"];
m8_262 [label="x.GetJobData(JobId)", span="322-322", cluster="lambda expression", file="Worker.cs"];
m8_24 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="Worker.cs"];
m8_28 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="Worker.cs"];
m8_54 [label="Entry lambda expression", span="62-62", cluster="lambda expression", file="Worker.cs"];
m8_56 [label="Exit lambda expression", span="62-62", cluster="lambda expression", file="Worker.cs"];
m8_62 [label="Entry lambda expression", span="71-71", cluster="lambda expression", file="Worker.cs"];
m8_64 [label="Exit lambda expression", span="71-71", cluster="lambda expression", file="Worker.cs"];
m8_77 [label="Entry lambda expression", span="92-92", cluster="lambda expression", file="Worker.cs"];
m8_79 [label="Exit lambda expression", span="92-92", cluster="lambda expression", file="Worker.cs"];
m8_86 [label="Entry lambda expression", span="103-103", cluster="lambda expression", file="Worker.cs"];
m8_88 [label="Exit lambda expression", span="103-103", cluster="lambda expression", file="Worker.cs"];
m8_94 [label="Entry lambda expression", span="114-114", cluster="lambda expression", file="Worker.cs"];
m8_96 [label="Exit lambda expression", span="114-114", cluster="lambda expression", file="Worker.cs"];
m8_111 [label="Entry lambda expression", span="129-133", cluster="lambda expression", file="Worker.cs"];
m8_122 [label="Entry lambda expression", span="143-147", cluster="lambda expression", file="Worker.cs"];
m8_124 [label="Exit lambda expression", span="143-147", cluster="lambda expression", file="Worker.cs"];
m8_126 [label="Entry lambda expression", span="145-146", cluster="lambda expression", file="Worker.cs"];
m8_128 [label="Exit lambda expression", span="145-146", cluster="lambda expression", file="Worker.cs"];
m8_138 [label="Entry lambda expression", span="163-163", cluster="lambda expression", file="Worker.cs"];
m8_140 [label="Exit lambda expression", span="163-163", cluster="lambda expression", file="Worker.cs"];
m8_148 [label="stateMachine.ChangeState(JobId, null, FromOldState)", span="174-174", cluster="lambda expression", file="Worker.cs"];
m8_156 [label="Entry lambda expression", span="185-185", cluster="lambda expression", file="Worker.cs"];
m8_158 [label="Exit lambda expression", span="185-185", cluster="lambda expression", file="Worker.cs"];
m8_164 [label="Entry lambda expression", span="197-197", cluster="lambda expression", file="Worker.cs"];
m8_175 [label="Entry lambda expression", span="210-214", cluster="lambda expression", file="Worker.cs"];
m8_177 [label="Exit lambda expression", span="210-214", cluster="lambda expression", file="Worker.cs"];
m8_178 [label="Entry lambda expression", span="212-213", cluster="lambda expression", file="Worker.cs"];
m8_180 [label="Exit lambda expression", span="212-213", cluster="lambda expression", file="Worker.cs"];
m8_187 [label="Entry lambda expression", span="229-232", cluster="lambda expression", file="Worker.cs"];
m8_189 [label="Exit lambda expression", span="229-232", cluster="lambda expression", file="Worker.cs"];
m8_190 [label="Entry lambda expression", span="231-231", cluster="lambda expression", file="Worker.cs"];
m8_192 [label="Exit lambda expression", span="231-231", cluster="lambda expression", file="Worker.cs"];
m8_202 [label="Entry lambda expression", span="239-239", cluster="lambda expression", file="Worker.cs"];
m8_205 [label="Entry lambda expression", span="249-249", cluster="lambda expression", file="Worker.cs"];
m8_208 [label="Entry lambda expression", span="252-252", cluster="lambda expression", file="Worker.cs"];
m8_217 [label="Entry lambda expression", span="270-270", cluster="lambda expression", file="Worker.cs"];
m8_229 [label="Entry lambda expression", span="278-278", cluster="lambda expression", file="Worker.cs"];
m8_232 [label="Entry lambda expression", span="287-287", cluster="lambda expression", file="Worker.cs"];
m8_234 [label="Exit lambda expression", span="287-287", cluster="lambda expression", file="Worker.cs"];
m8_244 [label="Entry lambda expression", span="296-296", cluster="lambda expression", file="Worker.cs"];
m8_247 [label="Entry lambda expression", span="310-313", cluster="lambda expression", file="Worker.cs"];
m8_249 [label="Exit lambda expression", span="310-313", cluster="lambda expression", file="Worker.cs"];
m8_250 [label="Entry lambda expression", span="312-312", cluster="lambda expression", file="Worker.cs"];
m8_261 [label="Entry lambda expression", span="322-322", cluster="lambda expression", file="Worker.cs"];
m8_264 [label="Entry lambda expression", span="330-330", cluster="lambda expression", file="Worker.cs"];
m8_267 [label="Entry lambda expression", span="338-341", cluster="lambda expression", file="Worker.cs"];
m8_269 [label="Exit lambda expression", span="338-341", cluster="lambda expression", file="Worker.cs"];
m8_270 [label="Entry lambda expression", span="340-340", cluster="lambda expression", file="Worker.cs"];
m8_272 [label="Exit lambda expression", span="340-340", cluster="lambda expression", file="Worker.cs"];
m8_280 [label="Entry lambda expression", span="356-360", cluster="lambda expression", file="Worker.cs"];
m8_282 [label="Exit lambda expression", span="356-360", cluster="lambda expression", file="Worker.cs"];
m8_283 [label="Entry lambda expression", span="358-359", cluster="lambda expression", file="Worker.cs"];
m8_285 [label="Exit lambda expression", span="358-359", cluster="lambda expression", file="Worker.cs"];
m8_286 [label="Entry lambda expression", span="362-362", cluster="lambda expression", file="Worker.cs"];
m8_298 [label="Entry lambda expression", span="373-373", cluster="lambda expression", file="Worker.cs"];
m8_302 [label="Entry lambda expression", span="374-374", cluster="lambda expression", file="Worker.cs"];
m8_300 [label="Exit lambda expression", span="373-373", cluster="lambda expression", file="Worker.cs"];
m8_305 [label="Entry lambda expression", span="382-385", cluster="lambda expression", file="Worker.cs"];
m8_307 [label="Exit lambda expression", span="382-385", cluster="lambda expression", file="Worker.cs"];
m8_308 [label="Entry lambda expression", span="384-384", cluster="lambda expression", file="Worker.cs"];
m8_320 [label="Entry lambda expression", span="395-395", cluster="lambda expression", file="Worker.cs"];
m8_323 [label="Entry lambda expression", span="404-407", cluster="lambda expression", file="Worker.cs"];
m8_325 [label="Exit lambda expression", span="404-407", cluster="lambda expression", file="Worker.cs"];
m8_326 [label="Entry lambda expression", span="406-406", cluster="lambda expression", file="Worker.cs"];
m8_33 [label="Exit lambda expression", span="37-37", cluster="lambda expression", file="Worker.cs"];
m8_32 [label="x.CreateWriteTransaction()", span="37-37", cluster="lambda expression", file="Worker.cs"];
m8_113 [label="Exit lambda expression", span="129-133", cluster="lambda expression", file="Worker.cs"];
m8_114 [label="Entry lambda expression", span="131-131", cluster="lambda expression", file="Worker.cs"];
m8_147 [label="Entry lambda expression", span="174-174", cluster="lambda expression", file="Worker.cs"];
m8_204 [label="Exit lambda expression", span="239-239", cluster="lambda expression", file="Worker.cs"];
m8_210 [label="Exit lambda expression", span="252-252", cluster="lambda expression", file="Worker.cs"];
m8_219 [label="Exit lambda expression", span="270-270", cluster="lambda expression", file="Worker.cs"];
m8_231 [label="Exit lambda expression", span="278-278", cluster="lambda expression", file="Worker.cs"];
m8_322 [label="Exit lambda expression", span="395-395", cluster="lambda expression", file="Worker.cs"];
m8_207 [label="Exit lambda expression", span="249-249", cluster="lambda expression", file="Worker.cs"];
m8_246 [label="Exit lambda expression", span="296-296", cluster="lambda expression", file="Worker.cs"];
m8_263 [label="Exit lambda expression", span="322-322", cluster="lambda expression", file="Worker.cs"];
m8_26 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="Worker.cs"];
m8_25 [label="Console.WriteLine()", span="29-29", cluster="lambda expression", file="Worker.cs"];
m8_30 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="Worker.cs"];
m8_29 [label="x.Name", span="32-32", cluster="lambda expression", file="Worker.cs"];
m8_149 [label="Exit lambda expression", span="174-174", cluster="lambda expression", file="Worker.cs"];
m8_166 [label="Exit lambda expression", span="197-197", cluster="lambda expression", file="Worker.cs"];
m8_165 [label="x.Dispose()", span="197-197", cluster="lambda expression", file="Worker.cs"];
m8_252 [label="Exit lambda expression", span="312-312", cluster="lambda expression", file="Worker.cs"];
m8_251 [label="ctx.JobId == JobId && ctx.Job == null && ctx.NewState is FailedState", span="312-312", cluster="lambda expression", file="Worker.cs"];
m8_266 [label="Exit lambda expression", span="330-330", cluster="lambda expression", file="Worker.cs"];
m8_265 [label="x.IgnoreJobLoadException", span="330-330", cluster="lambda expression", file="Worker.cs"];
m8_288 [label="Exit lambda expression", span="362-362", cluster="lambda expression", file="Worker.cs"];
m8_287 [label="x.Commit()", span="362-362", cluster="lambda expression", file="Worker.cs"];
m8_303 [label="context.CandidateState = anotherState.Object", span="374-374", cluster="lambda expression", file="Worker.cs"];
m8_309 [label="ctx.NewState == anotherState.Object", span="384-384", cluster="lambda expression", file="Worker.cs"];
m8_304 [label="Exit lambda expression", span="374-374", cluster="lambda expression", file="Worker.cs"];
m8_310 [label="Exit lambda expression", span="384-384", cluster="lambda expression", file="Worker.cs"];
m8_327 [label="ctx.NewState is FailedState && ((FailedState)ctx.NewState).Exception == exception", span="406-406", cluster="lambda expression", file="Worker.cs"];
m8_328 [label="Exit lambda expression", span="406-406", cluster="lambda expression", file="Worker.cs"];
m8_116 [label="Exit lambda expression", span="131-131", cluster="lambda expression", file="Worker.cs"];
m8_115 [label="d[''Name''] == ''Value''", span="131-131", cluster="lambda expression", file="Worker.cs"];
m8_108 [label="Console.WriteLine(''SomeString'')", span="122-122", cluster="lambda expression", file="Worker.cs"];
m8_109 [label="Exit lambda expression", span="122-122", cluster="lambda expression", file="Worker.cs"];
m8_22 [label="Entry Hangfire.Storage.JobData.JobData()", span="21-21", cluster="Hangfire.Storage.JobData.JobData()", file="Worker.cs"];
m8_290 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_SetsAnotherState_WhenItWasElected()", span="368-368", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_SetsAnotherState_WhenItWasElected()", file="Worker.cs"];
m8_292 [label="_process.Setup(x => x.ElectState(_connection.Object, It.IsAny<ElectStateContext>()))\r\n                .Callback((IStorageConnection connection, ElectStateContext context) => context.CandidateState = anotherState.Object)", span="373-374", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_SetsAnotherState_WhenItWasElected()", file="Worker.cs"];
m8_293 [label="var machine = CreateStateMachine()", span="376-376", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_SetsAnotherState_WhenItWasElected()", file="Worker.cs"];
m8_294 [label="machine.ChangeState(JobId, _state.Object, new[] { OldStateName })", span="379-379", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_SetsAnotherState_WhenItWasElected()", file="Worker.cs"];
m8_295 [label="_process.Verify(x => x.ApplyState(\r\n                _transaction.Object, \r\n                It.Is<ApplyStateContext>(ctx => ctx.NewState == anotherState.Object),\r\n                true))", span="382-385", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_SetsAnotherState_WhenItWasElected()", file="Worker.cs"];
m8_291 [label="var anotherState = new Mock<IState>()", span="371-371", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_SetsAnotherState_WhenItWasElected()", file="Worker.cs"];
m8_296 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_SetsAnotherState_WhenItWasElected()", span="368-368", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_SetsAnotherState_WhenItWasElected()", file="Worker.cs"];
m8_106 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="Worker.cs"];
m8_235 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheFailedState_IfMethodDataCouldNotBeResolved()", span="293-293", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheFailedState_IfMethodDataCouldNotBeResolved()", file="Worker.cs"];
m8_236 [label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData\r\n                {\r\n                    State = OldStateName,\r\n                    Job = null,\r\n                    LoadException = new JobLoadException(''asd'', new InvalidOperationException())\r\n                })", span="296-302", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheFailedState_IfMethodDataCouldNotBeResolved()", file="Worker.cs"];
m8_237 [label="var stateMachine = CreateStateMachine()", span="304-304", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheFailedState_IfMethodDataCouldNotBeResolved()", file="Worker.cs"];
m8_238 [label="var result = stateMachine.ChangeState(JobId, _state.Object, FromOldState)", span="307-307", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheFailedState_IfMethodDataCouldNotBeResolved()", file="Worker.cs"];
m8_239 [label="_process.Verify(x => x.ApplyState(\r\n                _transaction.Object,\r\n                It.Is<ApplyStateContext>(ctx => ctx.JobId == JobId && ctx.Job == null && ctx.NewState is FailedState),\r\n                true))", span="310-313", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheFailedState_IfMethodDataCouldNotBeResolved()", file="Worker.cs"];
m8_240 [label="Assert.False(result)", span="315-315", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheFailedState_IfMethodDataCouldNotBeResolved()", file="Worker.cs"];
m8_241 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheFailedState_IfMethodDataCouldNotBeResolved()", span="293-293", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_MoveJobToTheFailedState_IfMethodDataCouldNotBeResolved()", file="Worker.cs"];
m8_289 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="Worker.cs"];
m8_242 [label="Entry Hangfire.Common.JobLoadException.JobLoadException(string, System.Exception)", span="33-33", cluster="Hangfire.Common.JobLoadException.JobLoadException(string, System.Exception)", file="Worker.cs"];
m8_181 [label="Entry Unk.Equals", span="", cluster="Unk.Equals", file="Worker.cs"];
m8_174 [label="Entry Unk.True", span="", cluster="Unk.True", file="Worker.cs"];
m8_193 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenJobIsNotFound()", span="236-236", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenJobIsNotFound()", file="Worker.cs"];
m8_194 [label="_connection.Setup(x => x.GetJobData(It.IsAny<string>()))\r\n                .Returns((JobData)null)", span="239-240", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenJobIsNotFound()", file="Worker.cs"];
m8_195 [label="var stateMachine = CreateStateMachine()", span="242-242", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenJobIsNotFound()", file="Worker.cs"];
m8_196 [label="var result = stateMachine.ChangeState(JobId, _state.Object, FromOldState)", span="245-245", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenJobIsNotFound()", file="Worker.cs"];
m8_198 [label="_connection.Verify(x => x.GetJobData(JobId))", span="249-249", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenJobIsNotFound()", file="Worker.cs"];
m8_199 [label="_process.Verify(\r\n                x => x.ApplyState(It.IsAny<IWriteOnlyTransaction>(), It.IsAny<ApplyStateContext>(), It.IsAny<bool>()),\r\n                Times.Never)", span="251-253", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenJobIsNotFound()", file="Worker.cs"];
m8_197 [label="Assert.False(result)", span="248-248", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenJobIsNotFound()", file="Worker.cs"];
m8_200 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenJobIsNotFound()", span="236-236", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ReturnsFalse_WhenJobIsNotFound()", file="Worker.cs"];
m8_297 [label="Entry Unk.Callback", span="", cluster="Unk.Callback", file="Worker.cs"];
m8_34 [label="Entry Unk.CreateWriteTransaction", span="", cluster="Unk.CreateWriteTransaction", file="Worker.cs"];
m8_19 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="Worker.cs"];
m8_80 [label="Entry Unk.CreateJob", span="", cluster="Unk.CreateJob", file="Worker.cs"];
m8_110 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="Worker.cs"];
m8_20 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="Worker.cs"];
m8_133 [label="Entry Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", span="158-158", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="Worker.cs"];
m8_134 [label="var stateMachine = CreateStateMachine()", span="160-160", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="Worker.cs"];
m8_135 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => stateMachine.ChangeState(null, _state.Object, FromOldState))", span="162-163", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="Worker.cs"];
m8_136 [label="Assert.Equal(''jobId'', exception.ParamName)", span="165-165", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="Worker.cs"];
m8_137 [label="Exit Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", span="158-158", cluster="Hangfire.Core.Tests.States.StateMachineFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="Worker.cs"];
m8_125 [label="Entry Unk.ApplyState", span="", cluster="Unk.ApplyState", file="Worker.cs"];
m8_15 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="148-148", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="Worker.cs"];
m8_331 [label="Hangfire.Core.Tests.States.StateMachineFacts", span="", file="Worker.cs"];
m8_332 [label=stateMachine, span="", file="Worker.cs"];
m8_333 [label=stateMachine, span="", file="Worker.cs"];
m8_334 [label=stateMachine, span="", file="Worker.cs"];
m8_336 [label=stateMachine, span="", file="Worker.cs"];
m8_338 [label=stateMachine, span="", file="Worker.cs"];
m8_339 [label=anotherState, span="", file="Worker.cs"];
m8_340 [label=exception, span="", file="Worker.cs"];
m8_335 [label=job, span="", file="Worker.cs"];
m8_337 [label=stateMachine, span="", file="Worker.cs"];
m9_29 [label="Entry Unk.CollectScenarioErrors", span="", cluster="Unk.CollectScenarioErrors", file="WorkerFacts.cs"];
m9_21 [label="Entry Unk.OnScenarioEnd", span="", cluster="Unk.OnScenarioEnd", file="WorkerFacts.cs"];
m9_0 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="WorkerFacts.cs"];
m9_1 [label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="WorkerFacts.cs"];
m9_2 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''JobFetcher'', ''\r\n  As a user, I expect that my enqueued jobs will be dequeued by the Server.'', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="WorkerFacts.cs"];
m9_3 [label="testRunner.OnFeatureStart(featureInfo)", span="35-35", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="WorkerFacts.cs"];
m9_4 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="WorkerFacts.cs"];
m9_41 [label="Entry Unk.And", span="", cluster="Unk.And", file="WorkerFacts.cs"];
m9_54 [label="Entry Unk.But", span="", cluster="Unk.But", file="WorkerFacts.cs"];
m9_5 [label="Entry Unk.GetTestRunner", span="", cluster="Unk.GetTestRunner", file="WorkerFacts.cs"];
m9_9 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="WorkerFacts.cs"];
m9_10 [label="testRunner.OnFeatureEnd()", span="41-41", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="WorkerFacts.cs"];
m9_11 [label="testRunner = null", span="42-42", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="WorkerFacts.cs"];
m9_12 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="WorkerFacts.cs"];
m9_22 [label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="WorkerFacts.cs"];
m9_23 [label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="WorkerFacts.cs"];
m9_24 [label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="WorkerFacts.cs"];
m9_30 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", span="75-75", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="WorkerFacts.cs"];
m9_31 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should return the job payload when it dequeues a job'', ((string[])(null)))", span="77-77", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="WorkerFacts.cs"];
m9_32 [label="this.ScenarioSetup(scenarioInfo)", span="79-79", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="WorkerFacts.cs"];
m9_33 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="WorkerFacts.cs"];
m9_34 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="WorkerFacts.cs"];
m9_35 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="WorkerFacts.cs"];
m9_36 [label="testRunner.Then(''the fetcher should return the payload'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="87-87", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="WorkerFacts.cs"];
m9_37 [label="this.ScenarioCleanup()", span="89-89", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="WorkerFacts.cs"];
m9_38 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", span="75-75", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="WorkerFacts.cs"];
m9_85 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", span="192-192", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="WorkerFacts.cs"];
m9_86 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should set the \'fetched\' flag when it dequeues a job'', ((string[])(null)))", span="194-194", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="WorkerFacts.cs"];
m9_87 [label="this.ScenarioSetup(scenarioInfo)", span="196-196", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="WorkerFacts.cs"];
m9_88 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="198-198", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="WorkerFacts.cs"];
m9_89 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="200-200", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="WorkerFacts.cs"];
m9_90 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="202-202", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="WorkerFacts.cs"];
m9_91 [label="testRunner.Then(''the job should have the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="204-204", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="WorkerFacts.cs"];
m9_92 [label="this.ScenarioCleanup()", span="206-206", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="WorkerFacts.cs"];
m9_93 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", span="192-192", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="WorkerFacts.cs"];
m9_13 [label="Entry Unk.OnFeatureEnd", span="", cluster="Unk.OnFeatureEnd", file="WorkerFacts.cs"];
m9_7 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="WorkerFacts.cs"];
m9_42 [label="Entry Unk.When", span="", cluster="Unk.When", file="WorkerFacts.cs"];
m9_76 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", span="171-171", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="WorkerFacts.cs"];
m9_77 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should listen only specified queue'', ((string[])(null)))", span="173-173", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="WorkerFacts.cs"];
m9_78 [label="this.ScenarioSetup(scenarioInfo)", span="175-175", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="WorkerFacts.cs"];
m9_79 [label="testRunner.Given(''a job in the \'another\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="177-177", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="WorkerFacts.cs"];
m9_80 [label="testRunner.And(''the fetcher listening the \'default\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="179-179", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="WorkerFacts.cs"];
m9_81 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="181-181", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="WorkerFacts.cs"];
m9_82 [label="testRunner.Then(''the fetcher should not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="183-183", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="WorkerFacts.cs"];
m9_83 [label="this.ScenarioCleanup()", span="185-185", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="WorkerFacts.cs"];
m9_84 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", span="171-171", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="WorkerFacts.cs"];
m9_14 [label="Entry HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="WorkerFacts.cs"];
m9_15 [label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''JobFetcher''))", span="48-49", cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="WorkerFacts.cs"];
m9_16 [label="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(null)", span="51-51", cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="WorkerFacts.cs"];
m9_17 [label="Exit HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="WorkerFacts.cs"];
m9_39 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="WorkerFacts.cs"];
m9_44 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="97-97", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="WorkerFacts.cs"];
m9_45 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should remove the dequeued job from the queue and adds it to the dequeued'' +\r\n                    '' list'', ((string[])(null)))", span="99-100", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="WorkerFacts.cs"];
m9_46 [label="this.ScenarioSetup(scenarioInfo)", span="102-102", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="WorkerFacts.cs"];
m9_47 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="104-104", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="WorkerFacts.cs"];
m9_48 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="106-106", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="WorkerFacts.cs"];
m9_49 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="108-108", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="WorkerFacts.cs"];
m9_50 [label="testRunner.Then(''the queue should not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="110-110", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="WorkerFacts.cs"];
m9_51 [label="testRunner.But(''the dequeued jobs list should contain it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="112-112", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="WorkerFacts.cs"];
m9_52 [label="this.ScenarioCleanup()", span="114-114", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="WorkerFacts.cs"];
m9_53 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="97-97", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="WorkerFacts.cs"];
m9_43 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="WorkerFacts.cs"];
m9_40 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="WorkerFacts.cs"];
m9_6 [label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span="", cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="WorkerFacts.cs"];
m9_26 [label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="WorkerFacts.cs"];
m9_27 [label="testRunner.CollectScenarioErrors()", span="68-68", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="WorkerFacts.cs"];
m9_28 [label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="WorkerFacts.cs"];
m9_64 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", span="144-144", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="WorkerFacts.cs"];
m9_65 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should dequeue jobs in the FIFO order'', ((string[])(null)))", span="146-146", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="WorkerFacts.cs"];
m9_66 [label="this.ScenarioSetup(scenarioInfo)", span="148-148", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="WorkerFacts.cs"];
m9_67 [label="testRunner.Given(''the \'first\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="150-150", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="WorkerFacts.cs"];
m9_68 [label="testRunner.And(''the \'second\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="152-152", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="WorkerFacts.cs"];
m9_69 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="154-154", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="WorkerFacts.cs"];
m9_70 [label="testRunner.When(''it dequeues a job for the first time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="156-156", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="WorkerFacts.cs"];
m9_71 [label="testRunner.Then(''the fetcher should return the \'first\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="158-158", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="WorkerFacts.cs"];
m9_72 [label="testRunner.When(''it dequeues a job for the second time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="160-160", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="WorkerFacts.cs"];
m9_73 [label="testRunner.Then(''the fetcher should return the \'second\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="162-162", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="WorkerFacts.cs"];
m9_74 [label="this.ScenarioCleanup()", span="164-164", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="WorkerFacts.cs"];
m9_75 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", span="144-144", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="WorkerFacts.cs"];
m9_55 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="122-122", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="WorkerFacts.cs"];
m9_56 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should not return any job when it tries to dequeue a job from an empty qu'' +\r\n                    ''eue'', ((string[])(null)))", span="124-125", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="WorkerFacts.cs"];
m9_57 [label="this.ScenarioSetup(scenarioInfo)", span="127-127", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="WorkerFacts.cs"];
m9_58 [label="testRunner.Given(''an empty queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="129-129", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="WorkerFacts.cs"];
m9_59 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="131-131", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="WorkerFacts.cs"];
m9_60 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="133-133", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="WorkerFacts.cs"];
m9_61 [label="testRunner.Then(''the fetcher should not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="135-135", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="WorkerFacts.cs"];
m9_62 [label="this.ScenarioCleanup()", span="137-137", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="WorkerFacts.cs"];
m9_63 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="122-122", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="WorkerFacts.cs"];
m9_8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", file="WorkerFacts.cs"];
m9_18 [label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="WorkerFacts.cs"];
m9_19 [label="testRunner.OnScenarioEnd()", span="58-58", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="WorkerFacts.cs"];
m9_20 [label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="WorkerFacts.cs"];
m9_94 [label="HangFire.Tests.Server.JobFetcherFeature", span="", file="WorkerFacts.cs"];
n154 -> n32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
n154 -> n41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
n154 -> n52  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
n154 -> n63  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
n154 -> n67  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
n154 -> n79  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
n154 -> n83  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
n154 -> n94  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
n154 -> n98  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
n154 -> n112  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
n154 -> n116  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
n154 -> n122  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
n154 -> n126  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
n154 -> n136  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
n154 -> n140  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
n154 -> n152  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n5  [key=2, style=dotted];
n2 -> n3  [key=0, style=solid];
n2 -> n6  [key=2, style=dotted];
n2 -> n7  [key=2, style=dotted];
n3 -> n4  [key=0, style=solid];
n3 -> n8  [key=2, style=dotted];
n4 -> n0  [key=0, style=bold, color=blue];
n9 -> n10  [key=0, style=solid];
n10 -> n11  [key=0, style=solid];
n10 -> n13  [key=2, style=dotted];
n11 -> n12  [key=0, style=solid];
n12 -> n9  [key=0, style=bold, color=blue];
n14 -> n15  [key=0, style=solid];
n15 -> n16  [key=0, style=solid];
n15 -> n17  [key=0, style=solid];
n16 -> n17  [key=0, style=solid];
n16 -> n0  [key=2, style=dotted];
n17 -> n14  [key=0, style=bold, color=blue];
n18 -> n19  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n21  [key=2, style=dotted];
n20 -> n18  [key=0, style=bold, color=blue];
n22 -> n23  [key=0, style=solid];
n23 -> n24  [key=0, style=solid];
n23 -> n25  [key=2, style=dotted];
n24 -> n22  [key=0, style=bold, color=blue];
n26 -> n27  [key=0, style=solid];
n27 -> n28  [key=0, style=solid];
n27 -> n29  [key=2, style=dotted];
n28 -> n26  [key=0, style=bold, color=blue];
n30 -> n31  [key=0, style=solid];
n31 -> n32  [key=0, style=solid];
n31 -> n43  [key=2, style=dotted];
n32 -> n33  [key=0, style=solid];
n32 -> n22  [key=2, style=dotted];
n33 -> n34  [key=0, style=solid];
n33 -> n44  [key=2, style=dotted];
n34 -> n35  [key=0, style=solid];
n34 -> n45  [key=2, style=dotted];
n35 -> n36  [key=0, style=solid];
n35 -> n46  [key=2, style=dotted];
n36 -> n37  [key=0, style=solid];
n36 -> n47  [key=2, style=dotted];
n36 -> n38  [key=1, style=dashed, color=darkseagreen4, label=table1];
n36 -> n39  [key=1, style=dashed, color=darkseagreen4, label=table1];
n37 -> n38  [key=0, style=solid];
n37 -> n48  [key=2, style=dotted];
n38 -> n39  [key=0, style=solid];
n38 -> n48  [key=2, style=dotted];
n39 -> n40  [key=0, style=solid];
n39 -> n49  [key=2, style=dotted];
n40 -> n41  [key=0, style=solid];
n40 -> n45  [key=2, style=dotted];
n41 -> n42  [key=0, style=solid];
n41 -> n26  [key=2, style=dotted];
n42 -> n30  [key=0, style=bold, color=blue];
n50 -> n51  [key=0, style=solid];
n51 -> n52  [key=0, style=solid];
n51 -> n43  [key=2, style=dotted];
n52 -> n53  [key=0, style=solid];
n52 -> n22  [key=2, style=dotted];
n53 -> n54  [key=0, style=solid];
n53 -> n44  [key=2, style=dotted];
n54 -> n55  [key=0, style=solid];
n54 -> n45  [key=2, style=dotted];
n55 -> n56  [key=0, style=solid];
n55 -> n45  [key=2, style=dotted];
n56 -> n57  [key=0, style=solid];
n56 -> n46  [key=2, style=dotted];
n57 -> n58  [key=0, style=solid];
n57 -> n47  [key=2, style=dotted];
n57 -> n59  [key=1, style=dashed, color=darkseagreen4, label=table2];
n57 -> n60  [key=1, style=dashed, color=darkseagreen4, label=table2];
n57 -> n61  [key=1, style=dashed, color=darkseagreen4, label=table2];
n57 -> n62  [key=1, style=dashed, color=darkseagreen4, label=table2];
n58 -> n59  [key=0, style=solid];
n58 -> n48  [key=2, style=dotted];
n59 -> n60  [key=0, style=solid];
n59 -> n48  [key=2, style=dotted];
n60 -> n61  [key=0, style=solid];
n60 -> n48  [key=2, style=dotted];
n61 -> n62  [key=0, style=solid];
n61 -> n48  [key=2, style=dotted];
n62 -> n63  [key=0, style=solid];
n62 -> n49  [key=2, style=dotted];
n63 -> n64  [key=0, style=solid];
n63 -> n26  [key=2, style=dotted];
n64 -> n50  [key=0, style=bold, color=blue];
n65 -> n66  [key=0, style=solid];
n66 -> n67  [key=0, style=solid];
n66 -> n43  [key=2, style=dotted];
n67 -> n68  [key=0, style=solid];
n67 -> n22  [key=2, style=dotted];
n68 -> n69  [key=0, style=solid];
n68 -> n44  [key=2, style=dotted];
n69 -> n70  [key=0, style=solid];
n69 -> n45  [key=2, style=dotted];
n70 -> n71  [key=0, style=solid];
n70 -> n45  [key=2, style=dotted];
n71 -> n72  [key=0, style=solid];
n71 -> n45  [key=2, style=dotted];
n72 -> n73  [key=0, style=solid];
n72 -> n46  [key=2, style=dotted];
n73 -> n74  [key=0, style=solid];
n73 -> n49  [key=2, style=dotted];
n74 -> n75  [key=0, style=solid];
n74 -> n47  [key=2, style=dotted];
n74 -> n76  [key=1, style=dashed, color=darkseagreen4, label=table3];
n74 -> n77  [key=1, style=dashed, color=darkseagreen4, label=table3];
n74 -> n78  [key=1, style=dashed, color=darkseagreen4, label=table3];
n75 -> n76  [key=0, style=solid];
n75 -> n48  [key=2, style=dotted];
n76 -> n77  [key=0, style=solid];
n76 -> n48  [key=2, style=dotted];
n77 -> n78  [key=0, style=solid];
n77 -> n48  [key=2, style=dotted];
n78 -> n79  [key=0, style=solid];
n78 -> n45  [key=2, style=dotted];
n79 -> n80  [key=0, style=solid];
n79 -> n26  [key=2, style=dotted];
n80 -> n65  [key=0, style=bold, color=blue];
n81 -> n82  [key=0, style=solid];
n82 -> n83  [key=0, style=solid];
n82 -> n43  [key=2, style=dotted];
n83 -> n84  [key=0, style=solid];
n83 -> n22  [key=2, style=dotted];
n84 -> n85  [key=0, style=solid];
n84 -> n44  [key=2, style=dotted];
n85 -> n86  [key=0, style=solid];
n85 -> n45  [key=2, style=dotted];
n86 -> n87  [key=0, style=solid];
n86 -> n45  [key=2, style=dotted];
n87 -> n88  [key=0, style=solid];
n87 -> n46  [key=2, style=dotted];
n88 -> n89  [key=0, style=solid];
n88 -> n47  [key=2, style=dotted];
n88 -> n90  [key=1, style=dashed, color=darkseagreen4, label=table4];
n88 -> n91  [key=1, style=dashed, color=darkseagreen4, label=table4];
n88 -> n92  [key=1, style=dashed, color=darkseagreen4, label=table4];
n89 -> n90  [key=0, style=solid];
n89 -> n48  [key=2, style=dotted];
n90 -> n91  [key=0, style=solid];
n90 -> n48  [key=2, style=dotted];
n91 -> n92  [key=0, style=solid];
n91 -> n48  [key=2, style=dotted];
n92 -> n93  [key=0, style=solid];
n92 -> n49  [key=2, style=dotted];
n93 -> n94  [key=0, style=solid];
n93 -> n45  [key=2, style=dotted];
n94 -> n95  [key=0, style=solid];
n94 -> n26  [key=2, style=dotted];
n95 -> n81  [key=0, style=bold, color=blue];
n96 -> n97  [key=0, style=solid];
n97 -> n98  [key=0, style=solid];
n97 -> n43  [key=2, style=dotted];
n98 -> n99  [key=0, style=solid];
n98 -> n22  [key=2, style=dotted];
n99 -> n100  [key=0, style=solid];
n99 -> n44  [key=2, style=dotted];
n100 -> n101  [key=0, style=solid];
n100 -> n45  [key=2, style=dotted];
n101 -> n102  [key=0, style=solid];
n101 -> n45  [key=2, style=dotted];
n102 -> n103  [key=0, style=solid];
n102 -> n45  [key=2, style=dotted];
n103 -> n104  [key=0, style=solid];
n103 -> n46  [key=2, style=dotted];
n104 -> n105  [key=0, style=solid];
n104 -> n47  [key=2, style=dotted];
n104 -> n106  [key=1, style=dashed, color=darkseagreen4, label=table5];
n104 -> n107  [key=1, style=dashed, color=darkseagreen4, label=table5];
n104 -> n108  [key=1, style=dashed, color=darkseagreen4, label=table5];
n104 -> n109  [key=1, style=dashed, color=darkseagreen4, label=table5];
n104 -> n110  [key=1, style=dashed, color=darkseagreen4, label=table5];
n105 -> n106  [key=0, style=solid];
n105 -> n48  [key=2, style=dotted];
n106 -> n107  [key=0, style=solid];
n106 -> n48  [key=2, style=dotted];
n107 -> n108  [key=0, style=solid];
n107 -> n48  [key=2, style=dotted];
n108 -> n109  [key=0, style=solid];
n108 -> n48  [key=2, style=dotted];
n109 -> n110  [key=0, style=solid];
n109 -> n48  [key=2, style=dotted];
n110 -> n111  [key=0, style=solid];
n110 -> n49  [key=2, style=dotted];
n111 -> n112  [key=0, style=solid];
n111 -> n45  [key=2, style=dotted];
n112 -> n113  [key=0, style=solid];
n112 -> n26  [key=2, style=dotted];
n113 -> n96  [key=0, style=bold, color=blue];
n114 -> n115  [key=0, style=solid];
n115 -> n116  [key=0, style=solid];
n115 -> n43  [key=2, style=dotted];
n116 -> n117  [key=0, style=solid];
n116 -> n22  [key=2, style=dotted];
n117 -> n118  [key=0, style=solid];
n117 -> n44  [key=2, style=dotted];
n118 -> n119  [key=0, style=solid];
n118 -> n45  [key=2, style=dotted];
n119 -> n120  [key=0, style=solid];
n119 -> n46  [key=2, style=dotted];
n120 -> n121  [key=0, style=solid];
n120 -> n49  [key=2, style=dotted];
n121 -> n122  [key=0, style=solid];
n121 -> n45  [key=2, style=dotted];
n122 -> n123  [key=0, style=solid];
n122 -> n26  [key=2, style=dotted];
n123 -> n114  [key=0, style=bold, color=blue];
n124 -> n125  [key=0, style=solid];
n125 -> n126  [key=0, style=solid];
n125 -> n43  [key=2, style=dotted];
n126 -> n127  [key=0, style=solid];
n126 -> n22  [key=2, style=dotted];
n127 -> n128  [key=0, style=solid];
n127 -> n44  [key=2, style=dotted];
n128 -> n129  [key=0, style=solid];
n128 -> n45  [key=2, style=dotted];
n129 -> n130  [key=0, style=solid];
n129 -> n45  [key=2, style=dotted];
n130 -> n131  [key=0, style=solid];
n130 -> n46  [key=2, style=dotted];
n131 -> n132  [key=0, style=solid];
n131 -> n47  [key=2, style=dotted];
n131 -> n133  [key=1, style=dashed, color=darkseagreen4, label=table6];
n131 -> n134  [key=1, style=dashed, color=darkseagreen4, label=table6];
n132 -> n133  [key=0, style=solid];
n132 -> n48  [key=2, style=dotted];
n133 -> n134  [key=0, style=solid];
n133 -> n48  [key=2, style=dotted];
n134 -> n135  [key=0, style=solid];
n134 -> n49  [key=2, style=dotted];
n135 -> n136  [key=0, style=solid];
n135 -> n45  [key=2, style=dotted];
n136 -> n137  [key=0, style=solid];
n136 -> n26  [key=2, style=dotted];
n137 -> n124  [key=0, style=bold, color=blue];
n138 -> n139  [key=0, style=solid];
n139 -> n140  [key=0, style=solid];
n139 -> n43  [key=2, style=dotted];
n140 -> n141  [key=0, style=solid];
n140 -> n22  [key=2, style=dotted];
n141 -> n142  [key=0, style=solid];
n141 -> n44  [key=2, style=dotted];
n142 -> n143  [key=0, style=solid];
n142 -> n45  [key=2, style=dotted];
n143 -> n144  [key=0, style=solid];
n143 -> n45  [key=2, style=dotted];
n144 -> n145  [key=0, style=solid];
n144 -> n45  [key=2, style=dotted];
n145 -> n146  [key=0, style=solid];
n145 -> n46  [key=2, style=dotted];
n146 -> n147  [key=0, style=solid];
n146 -> n47  [key=2, style=dotted];
n146 -> n148  [key=1, style=dashed, color=darkseagreen4, label=table7];
n146 -> n149  [key=1, style=dashed, color=darkseagreen4, label=table7];
n146 -> n150  [key=1, style=dashed, color=darkseagreen4, label=table7];
n147 -> n148  [key=0, style=solid];
n147 -> n48  [key=2, style=dotted];
n148 -> n149  [key=0, style=solid];
n148 -> n48  [key=2, style=dotted];
n149 -> n150  [key=0, style=solid];
n149 -> n48  [key=2, style=dotted];
n150 -> n151  [key=0, style=solid];
n150 -> n49  [key=2, style=dotted];
n151 -> n152  [key=0, style=solid];
n151 -> n45  [key=2, style=dotted];
n152 -> n153  [key=0, style=solid];
n152 -> n26  [key=2, style=dotted];
n153 -> n138  [key=0, style=bold, color=blue];
m1_68 -> m1_100  [key=0, style=solid];
m1_100 -> m1_101  [key=0, style=solid];
m1_100 -> m1_102  [key=2, style=dotted];
m1_101 -> m1_68  [key=0, style=bold, color=blue];
m1_88 -> m1_96  [key=0, style=solid];
m1_96 -> m1_97  [key=0, style=solid];
m1_96 -> m1_98  [key=2, style=dotted];
m1_96 -> m1_99  [key=2, style=dotted];
m1_97 -> m1_88  [key=0, style=bold, color=blue];
m1_77 -> m1_94  [key=0, style=solid];
m1_94 -> m1_95  [key=0, style=solid];
m1_94 -> m1_88  [key=2, style=dotted];
m1_95 -> m1_77  [key=0, style=bold, color=blue];
m1_72 -> m1_89  [key=0, style=solid];
m1_89 -> m1_90  [key=0, style=solid];
m1_89 -> m1_88  [key=2, style=dotted];
m1_90 -> m1_72  [key=0, style=bold, color=blue];
m1_103 -> m1_104  [key=0, style=solid];
m1_104 -> m1_105  [key=0, style=solid];
m1_105 -> m1_106  [key=0, style=solid];
m1_106 -> m1_103  [key=0, style=bold, color=blue];
m1_66 -> m1_86  [key=0, style=solid];
m1_86 -> m1_87  [key=0, style=solid];
m1_86 -> m1_88  [key=2, style=dotted];
m1_87 -> m1_66  [key=0, style=bold, color=blue];
m1_91 -> m1_92  [key=0, style=solid];
m1_92 -> m1_93  [key=0, style=solid];
m1_92 -> m1_88  [key=2, style=dotted];
m1_93 -> m1_91  [key=0, style=bold, color=blue];
m1_83 -> m1_84  [key=0, style=solid];
m1_84 -> m1_85  [key=0, style=solid];
m1_85 -> m1_83  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.JobMethod"];
m1_0 -> m1_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.JobMethod"];
m1_0 -> m1_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.JobMethod"];
m1_0 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.JobMethod"];
m1_0 -> m1_13  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.JobMethod"];
m1_0 -> m1_14  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m1_0 -> m1_19  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.JobMethod"];
m1_0 -> m1_30  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.JobMethod"];
m1_0 -> m1_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.JobMethod"];
m1_0 -> m1_34  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.JobMethod"];
m1_0 -> m1_35  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.JobMethod"];
m1_0 -> m1_42  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m1_0 -> m1_43  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_65  [key=2, style=dotted];
m1_1 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_7  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_10  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_15  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_17  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_18  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_22  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_23  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_29  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_30  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_31  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_32  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_33  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_54  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_55  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_57  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_58  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_60  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_62  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_1 -> m1_63  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_68  [key=2, style=dotted];
m1_4 -> m1_67  [key=2, style=dotted];
m1_8 -> m1_9  [key=0, style=solid];
m1_8 -> m1_30  [key=0, style=solid];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_70  [key=2, style=dotted];
m1_9 -> m1_71  [key=2, style=dotted];
m1_9 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label=serviceName];
m1_9 -> m1_15  [key=1, style=dashed, color=darkseagreen4, label=serviceName];
m1_9 -> m1_29  [key=1, style=dashed, color=darkseagreen4, label=serviceName];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_68  [key=2, style=dotted];
m1_11 -> m1_72  [key=2, style=dotted];
m1_11 -> m1_73  [key=2, style=dotted];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_29  [key=0, style=solid];
m1_14 -> m1_15  [key=0, style=solid];
m1_14 -> m1_28  [key=0, style=solid];
m1_14 -> m1_17  [key=1, style=dashed, color=darkseagreen4, label=argument];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_74  [key=2, style=dotted];
m1_19 -> m1_19  [key=1, style=dashed, color=darkseagreen4, label=argument];
m1_19 -> m1_22  [key=1, style=dashed, color=darkseagreen4, label=argument];
m1_19 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label=propertyInfo];
m1_30 -> m1_31  [key=0, style=solid];
m1_30 -> m1_68  [key=2, style=dotted];
m1_30 -> m1_72  [key=2, style=dotted];
m1_30 -> m1_67  [key=2, style=dotted];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_68  [key=2, style=dotted];
m1_32 -> m1_67  [key=2, style=dotted];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_78  [key=2, style=dotted];
m1_34 -> m1_36  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m1_34 -> m1_40  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m1_34 -> m1_41  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m1_35 -> m1_36  [key=0, style=solid];
m1_35 -> m1_62  [key=0, style=solid];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_48  [key=0, style=solid];
m1_43 -> m1_44  [key=0, style=solid];
m1_43 -> m1_45  [key=1, style=dashed, color=darkseagreen4, label=argument];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_66  [key=2, style=dotted];
m1_2 -> m1_67  [key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_67  [key=2, style=dotted];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_67  [key=2, style=dotted];
m1_6 -> m1_7  [key=0, style=solid];
m1_6 -> m1_69  [key=2, style=dotted];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_69  [key=2, style=dotted];
m1_10 -> m1_11  [key=0, style=solid];
m1_10 -> m1_66  [key=2, style=dotted];
m1_10 -> m1_67  [key=2, style=dotted];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_69  [key=2, style=dotted];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> m1_68  [key=2, style=dotted];
m1_15 -> m1_67  [key=2, style=dotted];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_67  [key=2, style=dotted];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_68  [key=2, style=dotted];
m1_17 -> m1_67  [key=2, style=dotted];
m1_17 -> m1_17  [key=1, style=dashed, color=darkseagreen4, label=argument];
m1_17 -> m1_19  [key=1, style=dashed, color=darkseagreen4, label=argument];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_67  [key=2, style=dotted];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_76  [key=2, style=dotted];
m1_22 -> m1_67  [key=2, style=dotted];
m1_22 -> m1_22  [key=1, style=dashed, color=darkseagreen4, label=argument];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_67  [key=2, style=dotted];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_67  [key=2, style=dotted];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_77  [key=2, style=dotted];
m1_26 -> m1_67  [key=2, style=dotted];
m1_27 -> m1_14  [key=0, style=solid];
m1_27 -> m1_69  [key=2, style=dotted];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_69  [key=2, style=dotted];
m1_29 -> m1_31  [key=0, style=solid];
m1_29 -> m1_68  [key=2, style=dotted];
m1_29 -> m1_67  [key=2, style=dotted];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_67  [key=2, style=dotted];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_67  [key=2, style=dotted];
m1_54 -> m1_55  [key=0, style=solid];
m1_54 -> m1_69  [key=2, style=dotted];
m1_55 -> m1_58  [key=0, style=solid];
m1_55 -> m1_67  [key=2, style=dotted];
m1_57 -> m1_58  [key=0, style=solid];
m1_57 -> m1_67  [key=2, style=dotted];
m1_58 -> m1_59  [key=0, style=solid];
m1_58 -> m1_67  [key=2, style=dotted];
m1_60 -> m1_61  [key=0, style=solid];
m1_60 -> m1_67  [key=2, style=dotted];
m1_62 -> m1_63  [key=0, style=solid];
m1_62 -> m1_67  [key=2, style=dotted];
m1_63 -> m1_64  [key=0, style=solid];
m1_63 -> m1_81  [key=2, style=dotted];
m1_63 -> m1_82  [key=2, style=dotted];
m1_20 -> m1_21  [key=0, style=solid];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_27  [key=0, style=solid];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_75  [key=2, style=dotted];
m1_36 -> m1_37  [key=0, style=solid];
m1_36 -> m1_79  [key=2, style=dotted];
m1_36 -> m1_46  [key=1, style=dashed, color=darkseagreen4, label=renderedArguments];
m1_36 -> m1_48  [key=1, style=dashed, color=darkseagreen4, label=renderedArguments];
m1_36 -> m1_51  [key=1, style=dashed, color=darkseagreen4, label=renderedArguments];
m1_36 -> m1_52  [key=1, style=dashed, color=darkseagreen4, label=renderedArguments];
m1_36 -> m1_59  [key=1, style=dashed, color=darkseagreen4, label=renderedArguments];
m1_40 -> m1_41  [key=0, style=solid];
m1_40 -> m1_50  [key=0, style=solid];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_44  [key=1, style=dashed, color=darkseagreen4, label=parameter];
m1_41 -> m1_45  [key=1, style=dashed, color=darkseagreen4, label=parameter];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_47  [key=1, style=dashed, color=darkseagreen4, label=renderedArgumentsTotalLength];
m1_37 -> m1_53  [key=1, style=dashed, color=darkseagreen4, label=renderedArgumentsTotalLength];
m1_46 -> m1_47  [key=0, style=solid];
m1_46 -> m1_80  [key=2, style=dotted];
m1_48 -> m1_49  [key=0, style=solid];
m1_48 -> m1_68  [key=2, style=dotted];
m1_48 -> m1_80  [key=2, style=dotted];
m1_51 -> m1_52  [key=0, style=solid];
m1_51 -> m1_62  [key=0, style=solid];
m1_52 -> m1_53  [key=0, style=solid];
m1_52 -> m1_58  [key=1, style=dashed, color=darkseagreen4, label=renderedArgument];
m1_59 -> m1_60  [key=0, style=solid];
m1_59 -> m1_61  [key=0, style=solid];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_53  [key=1, style=dashed, color=darkseagreen4, label=splitStringMinLength];
m1_47 -> m1_49  [key=0, style=solid];
m1_47 -> m1_47  [key=1, style=dashed, color=darkseagreen4, label=renderedArgumentsTotalLength];
m1_47 -> m1_53  [key=1, style=dashed, color=darkseagreen4, label=renderedArgumentsTotalLength];
m1_53 -> m1_54  [key=0, style=solid];
m1_53 -> m1_56  [key=0, style=solid];
m1_39 -> m1_40  [key=0, style=solid];
m1_39 -> m1_41  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_39 -> m1_42  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_39 -> m1_43  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_39 -> m1_49  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_49 -> m1_40  [key=0, style=solid];
m1_49 -> m1_49  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_50 -> m1_51  [key=0, style=solid];
m1_50 -> m1_52  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_50 -> m1_56  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_50 -> m1_59  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_50 -> m1_61  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_44 -> m1_45  [key=0, style=solid];
m1_44 -> m1_75  [key=2, style=dotted];
m1_45 -> m1_46  [key=0, style=solid];
m1_45 -> m1_76  [key=2, style=dotted];
m1_45 -> m1_47  [key=1, style=dashed, color=darkseagreen4, label=renderedArgument];
m1_56 -> m1_57  [key=0, style=solid];
m1_56 -> m1_58  [key=0, style=solid];
m1_61 -> m1_51  [key=0, style=solid];
m1_61 -> m1_61  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_64 -> m1_0  [key=0, style=bold, color=blue];
m1_75 -> m1_124  [key=0, style=solid];
m1_75 -> m1_126  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_75 -> m1_128  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_75 -> m1_130  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_75 -> m1_132  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_124 -> m1_125  [key=0, style=solid];
m1_124 -> m1_126  [key=0, style=solid];
m1_124 -> m1_134  [key=2, style=dotted];
m1_126 -> m1_127  [key=0, style=solid];
m1_126 -> m1_128  [key=0, style=solid];
m1_128 -> m1_129  [key=0, style=solid];
m1_128 -> m1_130  [key=0, style=solid];
m1_130 -> m1_131  [key=0, style=solid];
m1_130 -> m1_132  [key=0, style=solid];
m1_132 -> m1_133  [key=0, style=solid];
m1_132 -> m1_103  [key=2, style=dotted];
m1_125 -> m1_133  [key=0, style=solid];
m1_125 -> m1_103  [key=2, style=dotted];
m1_127 -> m1_133  [key=0, style=solid];
m1_127 -> m1_103  [key=2, style=dotted];
m1_129 -> m1_133  [key=0, style=solid];
m1_129 -> m1_103  [key=2, style=dotted];
m1_131 -> m1_133  [key=0, style=solid];
m1_131 -> m1_103  [key=2, style=dotted];
m1_133 -> m1_75  [key=0, style=bold, color=blue];
m1_76 -> m1_107  [key=0, style=solid];
m1_76 -> m1_110  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_76 -> m1_111  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_76 -> m1_114  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_76 -> m1_117  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_107 -> m1_108  [key=0, style=solid];
m1_107 -> m1_109  [key=0, style=solid];
m1_110 -> m1_111  [key=0, style=solid];
m1_110 -> m1_112  [key=0, style=solid];
m1_111 -> m1_112  [key=0, style=solid];
m1_111 -> m1_98  [key=2, style=dotted];
m1_111 -> m1_121  [key=2, style=dotted];
m1_114 -> m1_115  [key=0, style=solid];
m1_114 -> m1_68  [key=2, style=dotted];
m1_114 -> m1_123  [key=2, style=dotted];
m1_114 -> m1_67  [key=2, style=dotted];
m1_117 -> m1_118  [key=0, style=solid];
m1_117 -> m1_119  [key=0, style=solid];
m1_108 -> m1_120  [key=0, style=solid];
m1_108 -> m1_66  [key=2, style=dotted];
m1_109 -> m1_110  [key=0, style=solid];
m1_109 -> m1_65  [key=2, style=dotted];
m1_109 -> m1_111  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_109 -> m1_113  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_109 -> m1_114  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_109 -> m1_116  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_109 -> m1_118  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_109 -> m1_119  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_113 -> m1_114  [key=0, style=solid];
m1_113 -> m1_72  [key=2, style=dotted];
m1_113 -> m1_122  [key=2, style=dotted];
m1_113 -> m1_83  [key=2, style=dotted];
m1_113 -> m1_67  [key=2, style=dotted];
m1_116 -> m1_117  [key=0, style=solid];
m1_116 -> m1_67  [key=2, style=dotted];
m1_118 -> m1_119  [key=0, style=solid];
m1_118 -> m1_67  [key=2, style=dotted];
m1_119 -> m1_120  [key=0, style=solid];
m1_119 -> m1_82  [key=2, style=dotted];
m1_112 -> m1_113  [key=0, style=solid];
m1_112 -> m1_114  [key=0, style=solid];
m1_115 -> m1_116  [key=0, style=solid];
m1_115 -> m1_117  [key=0, style=solid];
m1_120 -> m1_76  [key=0, style=bold, color=blue];
m1_135 -> m1_104  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer"];
m1_135 -> m1_105  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer"];
m1_135 -> m1_112  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer"];
m1_135 -> m1_113  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer"];
m1_135 -> m1_114  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer"];
m1_135 -> m1_115  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.JobMethodCallRenderer.ArgumentRenderer"];
m2_3 -> m2_4  [key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_6  [key=2, style=dotted];
m2_5 -> m2_3  [key=0, style=bold, color=blue];
m2_25 -> m2_26  [key=0, style=solid, color=red];
m2_25 -> m2_29  [key=2, style=dotted];
m2_25 -> m2_32  [key=2, style=dotted];
m2_25 -> m2_33  [key=2, style=dotted];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m2_12 -> m2_17  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m2_12 -> m2_18  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m2_13 -> m2_14  [key=0, style=solid];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> m2_28  [key=2, style=dotted];
m2_16 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m2_17 -> m2_18  [key=0, style=solid];
m2_17 -> m2_17  [key=1, style=dashed, color=darkseagreen4, label=queueIndex];
m2_17 -> m2_21  [key=1, style=dashed, color=darkseagreen4, label=queueIndex];
m2_18 -> m2_19  [key=0, style=solid];
m2_18 -> m2_20  [key=1, style=dashed, color=darkseagreen4, label=queueName];
m2_18 -> m2_26  [key=1, style=dashed, color=red, label=queueName];
m2_14 -> m2_15  [key=0, style=solid];
m2_15 -> m2_16  [key=0, style=solid];
m2_15 -> m2_17  [key=1, style=dashed, color=darkseagreen4, label=queueIndex];
m2_15 -> m2_15  [key=3, color=darkorchid, style=bold, label="Local variable int queueIndex"];
m2_21 -> m2_22  [key=0, style=solid];
m2_21 -> m2_23  [key=0, style=solid];
m2_19 -> m2_20  [key=0, style=solid];
m2_19 -> m2_29  [key=2, style=dotted];
m2_19 -> m2_22  [key=1, style=dashed, color=darkseagreen4, label=queueKey];
m2_19 -> m2_23  [key=1, style=dashed, color=darkseagreen4, label=queueKey];
m2_20 -> m2_21  [key=0, style=solid];
m2_20 -> m2_29  [key=2, style=dotted];
m2_20 -> m2_22  [key=1, style=dashed, color=darkseagreen4, label=fetchedKey];
m2_20 -> m2_23  [key=1, style=dashed, color=darkseagreen4, label=fetchedKey];
m2_26 -> m2_27  [key=0, style=solid, color=red];
m2_26 -> m2_34  [key=2, style=dotted, color=red];
m2_22 -> m2_24  [key=0, style=solid];
m2_22 -> m2_30  [key=2, style=dotted];
m2_22 -> m2_25  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m2_22 -> m2_26  [key=1, style=dashed, color=red, label=jobId];
m2_23 -> m2_24  [key=0, style=solid];
m2_23 -> m2_31  [key=2, style=dotted];
m2_23 -> m2_25  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m2_23 -> m2_26  [key=1, style=dashed, color=red, label=jobId];
m2_24 -> m2_15  [key=0, style=solid];
m2_24 -> m2_25  [key=0, style=solid];
m2_27 -> m2_12  [key=0, style=bold, color=blue];
m2_124 -> m2_125  [key=0, style=solid];
m2_125 -> m2_126  [key=0, style=solid];
m2_125 -> m2_127  [key=2, style=dotted];
m2_125 -> m2_128  [key=2, style=dotted];
m2_126 -> m2_124  [key=0, style=bold, color=blue];
m2_171 -> m2_172  [key=0, style=solid];
m2_171 -> m2_183  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m2_171 -> m2_180  [key=3, color=darkorchid, style=bold, label="method methodReturn int RemoveTimedOutServers"];
m2_172 -> m2_173  [key=0, style=solid];
m2_172 -> m2_188  [key=2, style=dotted];
m2_172 -> m2_176  [key=1, style=dashed, color=darkseagreen4, label=serverNames];
m2_183 -> m2_184  [key=0, style=solid];
m2_183 -> m2_181  [key=0, style=solid];
m2_183 -> m2_193  [key=2, style=dotted];
m2_173 -> m2_174  [key=0, style=solid];
m2_173 -> m2_145  [key=2, style=dotted];
m2_173 -> m2_178  [key=1, style=dashed, color=darkseagreen4, label=heartbeats];
m2_173 -> m2_200  [key=1, style=dashed, color=darkseagreen4, label=heartbeats];
m2_173 -> m2_181  [key=1, style=dashed, color=darkseagreen4, label=heartbeats];
m2_176 -> m2_177  [key=0, style=solid];
m2_176 -> m2_179  [key=0, style=solid];
m2_174 -> m2_175  [key=0, style=solid];
m2_174 -> m2_183  [key=1, style=dashed, color=darkseagreen4, label=utcNow];
m2_178 -> m2_176  [key=0, style=solid];
m2_178 -> m2_60  [key=2, style=dotted];
m2_178 -> m2_194  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_178 -> m2_199  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_181 -> m2_182  [key=0, style=solid];
m2_181 -> m2_186  [key=0, style=solid];
m2_175 -> m2_176  [key=0, style=solid];
m2_175 -> m2_189  [key=2, style=dotted];
m2_175 -> m2_178  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m2_175 -> m2_179  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m2_179 -> m2_180  [key=0, style=solid];
m2_179 -> m2_190  [key=2, style=dotted];
m2_177 -> m2_178  [key=0, style=solid];
m2_177 -> m2_195  [key=1, style=dashed, color=darkseagreen4, label=name];
m2_177 -> m2_200  [key=1, style=dashed, color=darkseagreen4, label=name];
m2_177 -> m2_176  [key=3, color=darkorchid, style=bold, label="Local variable var name"];
m2_180 -> m2_181  [key=0, style=solid];
m2_180 -> m2_185  [key=1, style=dashed, color=darkseagreen4, label=removedServerCount];
m2_180 -> m2_186  [key=1, style=dashed, color=darkseagreen4, label=removedServerCount];
m2_180 -> m2_15  [key=3, color=darkorchid, style=bold, label="Local variable int removedServerCount"];
m2_185 -> m2_181  [key=0, style=solid];
m2_185 -> m2_185  [key=1, style=dashed, color=darkseagreen4, label=removedServerCount];
m2_185 -> m2_186  [key=1, style=dashed, color=darkseagreen4, label=removedServerCount];
m2_186 -> m2_187  [key=0, style=solid];
m2_182 -> m2_183  [key=0, style=solid];
m2_182 -> m2_191  [key=2, style=dotted];
m2_182 -> m2_192  [key=2, style=dotted];
m2_182 -> m2_182  [key=1, style=dashed, color=darkseagreen4, label=heartbeat];
m2_182 -> m2_184  [key=1, style=dashed, color=darkseagreen4, label=heartbeat];
m2_184 -> m2_185  [key=0, style=solid];
m2_184 -> m2_154  [key=2, style=dotted];
m2_184 -> m2_184  [key=1, style=dashed, color=darkseagreen4, label=heartbeat];
m2_187 -> m2_171  [key=0, style=bold, color=blue];
m2_169 -> m2_170  [key=0, style=solid];
m2_169 -> m2_29  [key=2, style=dotted];
m2_169 -> m2_32  [key=2, style=dotted];
m2_169 -> m2_33  [key=2, style=dotted];
m2_168 -> m2_169  [key=0, style=solid];
m2_170 -> m2_168  [key=0, style=bold, color=blue];
m2_157 -> m2_158  [key=0, style=solid];
m2_157 -> m2_60  [key=2, style=dotted];
m2_157 -> m2_164  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_154 -> m2_155  [key=0, style=solid];
m2_154 -> m2_156  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_154 -> m2_161  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_154 -> m2_157  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_154 -> m2_165  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_154 -> m2_97  [key=3, color=darkorchid, style=bold, label="Parameter variable IRedisClient redis"];
m2_154 -> m2_151  [key=3, color=darkorchid, style=bold, label="Parameter variable string serverId"];
m2_155 -> m2_156  [key=0, style=solid];
m2_155 -> m2_11  [key=2, style=dotted];
m2_155 -> m2_157  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_155 -> m2_158  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_156 -> m2_157  [key=0, style=solid];
m2_156 -> m2_60  [key=2, style=dotted];
m2_156 -> m2_160  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_158 -> m2_159  [key=0, style=solid];
m2_158 -> m2_61  [key=2, style=dotted];
m2_159 -> m2_154  [key=0, style=bold, color=blue];
m2_7 -> m2_8  [key=0, style=solid];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_10  [key=2, style=dotted];
m2_8 -> m2_11  [key=2, style=dotted];
m2_9 -> m2_7  [key=0, style=bold, color=blue];
m2_102 -> m2_103  [key=0, style=solid];
m2_103 -> m2_104  [key=0, style=solid];
m2_103 -> m2_29  [key=2, style=dotted];
m2_103 -> m2_105  [key=2, style=dotted];
m2_104 -> m2_102  [key=0, style=bold, color=blue];
m2_129 -> m2_130  [key=0, style=solid];
m2_129 -> m2_131  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_129 -> m2_139  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_129 -> m2_132  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_129 -> m2_143  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_129 -> m2_133  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.ServerContext"];
m2_129 -> m2_135  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_129 -> m2_148  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_130 -> m2_131  [key=0, style=solid];
m2_130 -> m2_11  [key=2, style=dotted];
m2_130 -> m2_132  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_130 -> m2_135  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_130 -> m2_136  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_131 -> m2_132  [key=0, style=solid];
m2_131 -> m2_60  [key=2, style=dotted];
m2_131 -> m2_138  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_132 -> m2_133  [key=0, style=solid];
m2_132 -> m2_60  [key=2, style=dotted];
m2_132 -> m2_142  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_133 -> m2_134  [key=0, style=solid];
m2_133 -> m2_136  [key=0, style=solid];
m2_135 -> m2_133  [key=0, style=solid];
m2_135 -> m2_60  [key=2, style=dotted];
m2_135 -> m2_147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_136 -> m2_137  [key=0, style=solid];
m2_136 -> m2_61  [key=2, style=dotted];
m2_134 -> m2_135  [key=0, style=solid];
m2_134 -> m2_148  [key=1, style=dashed, color=darkseagreen4, label=queue1];
m2_134 -> m2_133  [key=3, color=darkorchid, style=bold, label="Local variable string queue1"];
m2_137 -> m2_129  [key=0, style=bold, color=blue];
m2_110 -> m2_111  [key=0, style=solid];
m2_110 -> m2_60  [key=2, style=dotted];
m2_110 -> m2_121  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_106 -> m2_107  [key=0, style=solid];
m2_106 -> m2_108  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_106 -> m2_114  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_106 -> m2_109  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_106 -> m2_118  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_106 -> m2_110  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_106 -> m2_122  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_107 -> m2_108  [key=0, style=solid];
m2_107 -> m2_11  [key=2, style=dotted];
m2_107 -> m2_109  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_107 -> m2_110  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_107 -> m2_111  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_108 -> m2_109  [key=0, style=solid];
m2_108 -> m2_60  [key=2, style=dotted];
m2_108 -> m2_113  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_109 -> m2_110  [key=0, style=solid];
m2_109 -> m2_60  [key=2, style=dotted];
m2_109 -> m2_117  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_111 -> m2_112  [key=0, style=solid];
m2_111 -> m2_61  [key=2, style=dotted];
m2_112 -> m2_106  [key=0, style=bold, color=blue];
m2_151 -> m2_152  [key=0, style=solid];
m2_152 -> m2_153  [key=0, style=solid];
m2_152 -> m2_154  [key=2, style=dotted];
m2_153 -> m2_151  [key=0, style=bold, color=blue];
m2_70 -> m2_71  [key=0, style=solid];
m2_70 -> m2_72  [key=3, color=darkorchid, style=bold, label="method methodReturn HangFire.Storage.JobData GetJobData"];
m2_71 -> m2_72  [key=0, style=solid];
m2_71 -> m2_29  [key=2, style=dotted];
m2_71 -> m2_94  [key=2, style=dotted];
m2_71 -> m2_78  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m2_71 -> m2_79  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m2_71 -> m2_80  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m2_71 -> m2_81  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m2_71 -> m2_82  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m2_71 -> m2_83  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m2_71 -> m2_84  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m2_71 -> m2_85  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m2_71 -> m2_92  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m2_72 -> m2_73  [key=0, style=solid];
m2_72 -> m2_74  [key=0, style=solid];
m2_78 -> m2_79  [key=0, style=solid];
m2_78 -> m2_80  [key=0, style=solid];
m2_78 -> m2_95  [key=2, style=dotted];
m2_79 -> m2_80  [key=0, style=solid];
m2_79 -> m2_88  [key=1, style=dashed, color=darkseagreen4, label=type];
m2_80 -> m2_81  [key=0, style=solid];
m2_80 -> m2_82  [key=0, style=solid];
m2_80 -> m2_95  [key=2, style=dotted];
m2_81 -> m2_82  [key=0, style=solid];
m2_81 -> m2_88  [key=1, style=dashed, color=darkseagreen4, label=method];
m2_82 -> m2_83  [key=0, style=solid];
m2_82 -> m2_84  [key=0, style=solid];
m2_82 -> m2_95  [key=2, style=dotted];
m2_83 -> m2_84  [key=0, style=solid];
m2_83 -> m2_88  [key=1, style=dashed, color=darkseagreen4, label=parameterTypes];
m2_84 -> m2_85  [key=0, style=solid];
m2_84 -> m2_86  [key=0, style=solid];
m2_84 -> m2_95  [key=2, style=dotted];
m2_85 -> m2_86  [key=0, style=solid];
m2_85 -> m2_88  [key=1, style=dashed, color=darkseagreen4, label=arguments];
m2_92 -> m2_93  [key=0, style=solid];
m2_92 -> m2_98  [key=2, style=dotted];
m2_92 -> m2_95  [key=2, style=dotted];
m2_73 -> m2_93  [key=0, style=solid];
m2_74 -> m2_75  [key=0, style=solid];
m2_74 -> m2_88  [key=1, style=dashed, color=darkseagreen4, label=type];
m2_74 -> m2_72  [key=3, color=darkorchid, style=bold, label="Local variable string type"];
m2_75 -> m2_76  [key=0, style=solid];
m2_75 -> m2_88  [key=1, style=dashed, color=darkseagreen4, label=method];
m2_75 -> m2_72  [key=3, color=darkorchid, style=bold, label="Local variable string method"];
m2_88 -> m2_89  [key=0, style=solid];
m2_88 -> m2_96  [key=2, style=dotted];
m2_76 -> m2_77  [key=0, style=solid];
m2_76 -> m2_88  [key=1, style=dashed, color=darkseagreen4, label=parameterTypes];
m2_76 -> m2_72  [key=3, color=darkorchid, style=bold, label="Local variable string parameterTypes"];
m2_77 -> m2_78  [key=0, style=solid];
m2_77 -> m2_88  [key=1, style=dashed, color=darkseagreen4, label=arguments];
m2_77 -> m2_72  [key=3, color=darkorchid, style=bold, label="Local variable string arguments"];
m2_86 -> m2_87  [key=0, style=solid];
m2_86 -> m2_72  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.Common.Job job"];
m2_87 -> m2_88  [key=0, style=solid];
m2_87 -> m2_72  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.Common.JobLoadException loadException"];
m2_87 -> m2_90  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.Common.JobLoadException loadException"];
m2_89 -> m2_90  [key=0, style=solid];
m2_89 -> m2_92  [key=0, style=solid];
m2_89 -> m2_97  [key=2, style=dotted];
m2_90 -> m2_91  [key=0, style=solid];
m2_91 -> m2_92  [key=0, style=solid];
m2_93 -> m2_70  [key=0, style=bold, color=blue];
m2_199 -> m2_200  [key=0, style=solid];
m2_67 -> m2_68  [key=0, style=solid];
m2_67 -> m2_29  [key=2, style=dotted];
m2_67 -> m2_69  [key=2, style=dotted];
m2_63 -> m2_64  [key=0, style=solid];
m2_63 -> m2_29  [key=2, style=dotted];
m2_63 -> m2_65  [key=2, style=dotted];
m2_62 -> m2_63  [key=0, style=solid];
m2_66 -> m2_67  [key=0, style=solid];
m2_64 -> m2_62  [key=0, style=bold, color=blue];
m2_68 -> m2_66  [key=0, style=bold, color=blue];
m2_114 -> m2_115  [key=0, style=solid];
m2_114 -> m2_29  [key=2, style=dotted];
m2_114 -> m2_116  [key=2, style=dotted];
m2_118 -> m2_119  [key=0, style=solid];
m2_118 -> m2_29  [key=2, style=dotted];
m2_118 -> m2_120  [key=2, style=dotted];
m2_122 -> m2_123  [key=0, style=solid];
m2_122 -> m2_29  [key=2, style=dotted];
m2_122 -> m2_120  [key=2, style=dotted];
m2_113 -> m2_114  [key=0, style=solid];
m2_117 -> m2_118  [key=0, style=solid];
m2_121 -> m2_122  [key=0, style=solid];
m2_115 -> m2_113  [key=0, style=bold, color=blue];
m2_119 -> m2_117  [key=0, style=bold, color=blue];
m2_123 -> m2_121  [key=0, style=bold, color=blue];
m2_139 -> m2_140  [key=0, style=solid];
m2_139 -> m2_141  [key=2, style=dotted];
m2_143 -> m2_144  [key=0, style=solid];
m2_143 -> m2_29  [key=2, style=dotted];
m2_143 -> m2_145  [key=2, style=dotted];
m2_143 -> m2_146  [key=2, style=dotted];
m2_143 -> m2_32  [key=2, style=dotted];
m2_143 -> m2_65  [key=2, style=dotted];
m2_148 -> m2_149  [key=0, style=solid];
m2_148 -> m2_29  [key=2, style=dotted];
m2_148 -> m2_150  [key=2, style=dotted];
m2_138 -> m2_139  [key=0, style=solid];
m2_142 -> m2_143  [key=0, style=solid];
m2_147 -> m2_148  [key=0, style=solid];
m2_140 -> m2_138  [key=0, style=bold, color=blue];
m2_144 -> m2_142  [key=0, style=bold, color=blue];
m2_149 -> m2_147  [key=0, style=bold, color=blue];
m2_161 -> m2_162  [key=0, style=solid];
m2_161 -> m2_163  [key=2, style=dotted];
m2_165 -> m2_166  [key=0, style=solid];
m2_165 -> m2_29  [key=2, style=dotted];
m2_165 -> m2_167  [key=2, style=dotted];
m2_160 -> m2_161  [key=0, style=solid];
m2_164 -> m2_165  [key=0, style=solid];
m2_162 -> m2_160  [key=0, style=bold, color=blue];
m2_166 -> m2_164  [key=0, style=bold, color=blue];
m2_200 -> m2_201  [key=0, style=solid];
m2_200 -> m2_202  [key=2, style=dotted];
m2_200 -> m2_203  [key=2, style=dotted];
m2_200 -> m2_204  [key=2, style=dotted];
m2_200 -> m2_205  [key=2, style=dotted];
m2_195 -> m2_196  [key=0, style=solid];
m2_195 -> m2_197  [key=2, style=dotted];
m2_195 -> m2_198  [key=2, style=dotted];
m2_194 -> m2_195  [key=0, style=solid];
m2_196 -> m2_194  [key=0, style=bold, color=blue];
m2_201 -> m2_199  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_2 -> m2_0  [key=0, style=bold, color=blue];
m2_51 -> m2_52  [key=0, style=solid];
m2_51 -> m2_60  [key=2, style=dotted];
m2_51 -> m2_66  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_40 -> m2_41  [key=0, style=solid];
m2_40 -> m2_42  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.Job"];
m2_40 -> m2_43  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m2_40 -> m2_51  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m2_40 -> m2_67  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m2_41 -> m2_42  [key=0, style=solid];
m2_41 -> m2_55  [key=2, style=dotted];
m2_41 -> m2_56  [key=2, style=dotted];
m2_41 -> m2_50  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m2_41 -> m2_63  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m2_41 -> m2_51  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m2_41 -> m2_67  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m2_41 -> m2_53  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m2_42 -> m2_43  [key=0, style=solid];
m2_42 -> m2_57  [key=2, style=dotted];
m2_42 -> m2_44  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
m2_42 -> m2_45  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
m2_42 -> m2_46  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
m2_42 -> m2_47  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
m2_43 -> m2_44  [key=0, style=solid];
m2_43 -> m2_58  [key=2, style=dotted];
m2_43 -> m2_45  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m2_43 -> m2_46  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m2_43 -> m2_47  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m2_43 -> m2_48  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m2_43 -> m2_50  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m2_43 -> m2_63  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m2_50 -> m2_51  [key=0, style=solid];
m2_50 -> m2_60  [key=2, style=dotted];
m2_50 -> m2_62  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_53 -> m2_54  [key=0, style=solid];
m2_44 -> m2_45  [key=0, style=solid];
m2_44 -> m2_59  [key=2, style=dotted];
m2_45 -> m2_46  [key=0, style=solid];
m2_45 -> m2_59  [key=2, style=dotted];
m2_46 -> m2_47  [key=0, style=solid];
m2_46 -> m2_59  [key=2, style=dotted];
m2_47 -> m2_48  [key=0, style=solid];
m2_47 -> m2_59  [key=2, style=dotted];
m2_48 -> m2_49  [key=0, style=solid];
m2_48 -> m2_32  [key=2, style=dotted];
m2_48 -> m2_59  [key=2, style=dotted];
m2_49 -> m2_50  [key=0, style=solid];
m2_49 -> m2_11  [key=2, style=dotted];
m2_49 -> m2_51  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_49 -> m2_52  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_52 -> m2_53  [key=0, style=solid];
m2_52 -> m2_61  [key=2, style=dotted];
m2_54 -> m2_40  [key=0, style=bold, color=blue];
m2_35 -> m2_36  [key=0, style=solid];
m2_36 -> m2_37  [key=0, style=solid];
m2_36 -> m2_29  [key=2, style=dotted];
m2_36 -> m2_38  [key=2, style=dotted];
m2_36 -> m2_39  [key=2, style=dotted];
m2_37 -> m2_35  [key=0, style=bold, color=blue];
m2_100 -> m2_101  [key=0, style=solid];
m2_100 -> m2_29  [key=2, style=dotted];
m2_100 -> m2_33  [key=2, style=dotted];
m2_99 -> m2_100  [key=0, style=solid];
m2_101 -> m2_99  [key=0, style=bold, color=blue];
m2_97 -> m2_0  [key=3, color=darkorchid, style=bold, label="Property variable IRedisClient Redis"];
m2_206 -> m2_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m2_206 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m2_206 -> m2_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m2_206 -> m2_22  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m2_206 -> m2_23  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m2_206 -> m2_25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m2_206 -> m2_26  [key=1, style=dashed, color=red, label="HangFire.Redis.RedisConnection"];
m2_206 -> m2_36  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m2_206 -> m2_49  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m2_206 -> m2_71  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m2_206 -> m2_100  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m2_206 -> m2_103  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m2_206 -> m2_107  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m2_206 -> m2_125  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m2_206 -> m2_130  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m2_206 -> m2_152  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m2_206 -> m2_169  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m2_206 -> m2_172  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m2_206 -> m2_175  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m2_206 -> m2_184  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m2_207 -> m2_63  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m2_207 -> m2_67  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m2_208 -> m2_63  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m2_209 -> m2_67  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m2_210 -> m2_114  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_210 -> m2_118  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_210 -> m2_122  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_211 -> m2_114  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_212 -> m2_139  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_212 -> m2_143  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_212 -> m2_148  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_213 -> m2_143  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.ServerContext"];
m2_214 -> m2_148  [key=1, style=dashed, color=darkseagreen4, label=queue1];
m2_215 -> m2_161  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_215 -> m2_165  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_216 -> m2_195  [key=1, style=dashed, color=darkseagreen4, label=name];
m2_216 -> m2_200  [key=1, style=dashed, color=darkseagreen4, label=name];
m2_217 -> m2_200  [key=1, style=dashed, color=darkseagreen4, label=heartbeats];
m3_7 -> m3_8  [key=0, style=solid];
m3_8 -> m3_9  [key=0, style=solid];
m3_8 -> m3_3  [key=2, style=dotted];
m3_9 -> m3_7  [key=0, style=bold, color=blue];
m3_16 -> m3_17  [key=0, style=solid];
m3_17 -> m3_18  [key=0, style=solid];
m3_17 -> m3_10  [key=2, style=dotted];
m3_18 -> m3_16  [key=0, style=bold, color=blue];
m3_4 -> m3_5  [key=0, style=solid];
m3_5 -> m3_6  [key=0, style=solid];
m3_5 -> m3_3  [key=2, style=dotted];
m3_6 -> m3_4  [key=0, style=bold, color=blue];
m3_10 -> m3_11  [key=0, style=solid];
m3_11 -> m3_12  [key=0, style=solid];
m3_11 -> m3_14  [key=2, style=dotted];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_15  [key=2, style=dotted];
m3_13 -> m3_10  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=2, style=dotted];
m3_2 -> m3_0  [key=0, style=bold, color=blue];
m3_19 -> m3_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.AspNetBackgroundJobServer"];
m3_19 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.AspNetBackgroundJobServer"];
m3_19 -> m3_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.AspNetBackgroundJobServer"];
m3_19 -> m3_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.AspNetBackgroundJobServer"];
m3_19 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.AspNetBackgroundJobServer"];
m3_19 -> m3_17  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.AspNetBackgroundJobServer"];
m4_9 -> m4_10  [key=0, style=solid];
m4_9 -> m4_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m4_9 -> m4_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IState"];
m4_9 -> m4_17  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m4_9 -> m4_18  [key=1, style=dashed, color=red, label="Hangfire.Common.Job"];
m4_9 -> m4_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IState"];
m4_10 -> m4_11  [key=0, style=solid];
m4_10 -> m4_12  [key=0, style=solid];
m4_12 -> m4_13  [key=0, style=solid];
m4_12 -> m4_14  [key=0, style=solid];
m4_14 -> m4_15  [key=0, style=solid];
m4_14 -> m4_16  [key=0, style=solid];
m4_17 -> m4_18  [key=0, style=solid, color=red];
m4_17 -> m4_22  [key=2, style=dotted];
m4_17 -> m4_23  [key=2, style=dotted];
m4_17 -> m4_20  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m4_18 -> m4_19  [key=0, style=solid, color=red];
m4_18 -> m4_24  [key=2, style=dotted, color=red];
m4_18 -> m4_15  [key=0, style=bold, color=blue];
m4_19 -> m4_20  [key=0, style=solid];
m4_19 -> m4_25  [key=2, style=dotted];
m4_11 -> m4_21  [key=0, style=solid];
m4_11 -> m4_8  [key=2, style=dotted];
m4_11 -> m4_12  [key=0, style=solid];
m4_13 -> m4_21  [key=0, style=solid];
m4_13 -> m4_8  [key=2, style=dotted];
m4_13 -> m4_11  [key=0, style=bold, color=blue];
m4_15 -> m4_21  [key=0, style=solid];
m4_15 -> m4_8  [key=2, style=dotted];
m4_15 -> m4_16  [key=0, style=solid];
m4_16 -> m4_17  [key=0, style=solid];
m4_16 -> m4_18  [key=1, style=dashed, color=red, label=createdAt];
m4_16 -> m4_19  [key=2, style=dotted];
m4_16 -> m4_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_20 -> m4_21  [key=0, style=solid];
m4_21 -> m4_9  [key=0, style=bold, color=blue];
m4_21 -> m4_22  [key=0, style=solid];
m4_54 -> m4_52  [key=0, style=bold, color=blue];
m4_32 -> m4_33  [key=0, style=solid];
m4_32 -> m4_48  [key=0, style=solid, color=red];
m4_32 -> m4_49  [key=2, style=dotted, color=red];
m4_33 -> m4_34  [key=0, style=solid];
m4_33 -> m4_19  [key=2, style=dotted];
m4_33 -> m4_36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_33 -> m4_50  [key=2, style=dotted];
m4_34 -> m4_35  [key=0, style=solid];
m4_34 -> m4_20  [key=2, style=dotted];
m4_34 -> m4_51  [key=2, style=dotted];
m4_34 -> m4_37  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m4_34 -> m4_40  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m4_34 -> m4_45  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m4_34 -> m4_46  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m4_35 -> m4_32  [key=0, style=bold, color=blue];
m4_35 -> m4_36  [key=0, style=solid];
m4_35 -> m4_37  [key=0, style=solid];
m4_25 -> m4_26  [key=0, style=solid];
m4_25 -> m4_56  [key=0, style=solid];
m4_25 -> m4_58  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateContext"];
m4_25 -> m4_63  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateContext"];
m4_25 -> m4_18  [key=3, color=red, style=bold, label="Parameter variable Hangfire.States.StateContext context"];
m4_25 -> m4_45  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.States.StateContext context"];
m4_25 -> m4_19  [key=3, color=darkorchid, style=bold, label="Parameter variable string oldStateName"];
m4_25 -> m4_39  [key=3, color=darkorchid, style=bold, label="method methodReturn bool ChangeState"];
m4_25 -> m4_36  [key=3, color=darkorchid, style=bold, label="method methodReturn bool ChangeState"];
m4_26 -> m4_27  [key=0, style=solid, color=red];
m4_26 -> m4_19  [key=2, style=dotted];
m4_26 -> m4_29  [key=1, style=dashed, color=red, label="Hangfire.States.IState"];
m4_26 -> m4_31  [key=1, style=dashed, color=red, label="string[]"];
m4_26 -> m4_33  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_26 -> m4_34  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_26 -> m4_37  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m4_26 -> m4_42  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IState"];
m4_26 -> m4_43  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IState"];
m4_26 -> m4_45  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_26 -> m4_46  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IState"];
m4_26 -> m4_36  [key=3, color=darkorchid, style=bold, label="method methodReturn bool ChangeState"];
m4_27 -> m4_28  [key=0, style=solid, color=red];
m4_27 -> m4_20  [key=2, style=dotted];
m4_27 -> m4_29  [key=0, style=solid, color=red];
m4_28 -> m4_25  [key=0, style=bold, color=blue];
m4_28 -> m4_48  [key=0, style=solid, color=red];
m4_28 -> m4_8  [key=2, style=dotted, color=red];
m4_52 -> m4_53  [key=0, style=solid];
m4_45 -> m4_46  [key=0, style=solid];
m4_45 -> m4_24  [key=2, style=dotted];
m4_46 -> m4_47  [key=0, style=solid];
m4_46 -> m4_44  [key=2, style=dotted];
m4_46 -> m4_25  [key=2, style=dotted];
m4_48 -> m4_49  [key=0, style=solid];
m4_48 -> m4_51  [key=2, style=dotted];
m4_48 -> m4_52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_48 -> m4_26  [key=0, style=bold, color=blue];
m4_47 -> m4_48  [key=0, style=solid];
m4_47 -> m4_50  [key=2, style=dotted];
m4_49 -> m4_45  [key=0, style=bold, color=blue];
m4_22 -> m4_24  [key=2, style=dotted];
m4_22 -> m4_23  [key=0, style=solid];
m4_23 -> m4_21  [key=0, style=bold, color=blue];
m4_6 -> m4_7  [key=0, style=solid];
m4_44 -> m4_56  [key=0, style=solid];
m4_44 -> m4_45  [key=0, style=solid];
m4_44 -> m4_47  [key=1, style=dashed, color=darkseagreen4, label=loadSucceeded];
m4_56 -> m4_57  [key=0, style=solid];
m4_56 -> m4_24  [key=2, style=dotted];
m4_56 -> m4_67  [key=2, style=dotted];
m4_56 -> m4_58  [key=1, style=dashed, color=darkseagreen4, label=electStateContext];
m4_57 -> m4_44  [key=0, style=bold, color=blue];
m4_57 -> m4_58  [key=0, style=solid];
m4_57 -> m4_68  [key=2, style=dotted];
m4_29 -> m4_30  [key=0, style=solid, color=red];
m4_29 -> m4_31  [key=0, style=solid, color=red];
m4_31 -> m4_32  [key=0, style=solid, color=red];
m4_31 -> m4_33  [key=0, style=solid, color=red];
m4_31 -> m4_29  [key=0, style=bold, color=blue];
m4_37 -> m4_38  [key=0, style=solid];
m4_37 -> m4_39  [key=0, style=solid];
m4_37 -> m4_52  [key=2, style=dotted];
m4_37 -> m4_24  [key=2, style=dotted];
m4_42 -> m4_43  [key=0, style=solid];
m4_42 -> m4_45  [key=0, style=solid];
m4_42 -> m4_20  [key=2, style=dotted];
m4_43 -> m4_44  [key=0, style=solid];
m4_43 -> m4_54  [key=2, style=dotted];
m4_43 -> m4_55  [key=2, style=dotted];
m4_43 -> m4_43  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IState"];
m4_43 -> m4_46  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IState"];
m4_43 -> m4_39  [key=0, style=bold, color=blue];
m4_30 -> m4_48  [key=0, style=solid, color=red];
m4_30 -> m4_8  [key=2, style=dotted, color=red];
m4_30 -> m4_31  [key=0, style=solid];
m4_30 -> m4_24  [key=2, style=dotted];
m4_40 -> m4_41  [key=0, style=solid];
m4_40 -> m4_45  [key=0, style=solid];
m4_40 -> m4_53  [key=2, style=dotted];
m4_40 -> m4_44  [key=2, style=dotted];
m4_40 -> m4_42  [key=1, style=dashed, color=darkseagreen4, label=processingJob];
m4_36 -> m4_48  [key=0, style=solid];
m4_36 -> m4_37  [key=0, style=solid];
m4_38 -> m4_48  [key=0, style=solid];
m4_38 -> m4_36  [key=0, style=bold, color=blue];
m4_39 -> m4_40  [key=0, style=solid];
m4_39 -> m4_47  [key=1, style=dashed, color=darkseagreen4, label=loadSucceeded];
m4_39 -> m4_39  [key=3, color=darkorchid, style=bold, label="Local variable bool loadSucceeded"];
m4_41 -> m4_42  [key=0, style=solid];
m4_41 -> m4_20  [key=2, style=dotted];
m4_7 -> m4_0  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid, color=red];
m4_0 -> m4_3  [key=1, style=dashed, color=red, label="Hangfire.States.IStateChangeProcess"];
m4_0 -> m4_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Storage.IStorageConnection"];
m4_0 -> m4_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IStateChangeProcess"];
m4_4 -> m4_5  [key=0, style=solid, color=green];
m4_4 -> m4_10  [key=2, style=dotted, color=green];
m4_4 -> m4_7  [key=0, style=solid, color=red];
m4_4 -> m4_8  [key=2, style=dotted, color=red];
m4_3 -> m4_4  [key=0, style=solid, color=red];
m4_3 -> m4_8  [key=2, style=dotted];
m4_3 -> m4_9  [key=2, style=dotted];
m4_3 -> m4_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_3 -> m4_5  [key=0, style=solid, color=red];
m4_1 -> m4_2  [key=0, style=solid, color=red];
m4_1 -> m4_6  [key=2, style=dotted];
m4_1 -> m4_3  [key=0, style=solid, color=red];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_7  [key=2, style=dotted];
m4_2 -> m4_8  [key=2, style=dotted, color=red];
m4_5 -> m4_0  [key=0, style=bold, color=blue];
m4_5 -> m4_6  [key=0, style=solid];
m4_53 -> m4_54  [key=0, style=solid];
m4_53 -> m4_55  [key=2, style=dotted];
m4_53 -> m4_0  [key=3, color=darkorchid, style=bold, label="Field variable Hangfire.States.IStateChangeProcess _stateChangeProcess"];
m4_58 -> m4_59  [key=0, style=solid];
m4_58 -> m4_69  [key=2, style=dotted];
m4_58 -> m4_4  [key=1, style=dashed, color=green, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m4_58 -> m4_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m4_58 -> m4_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m4_58 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m4_58 -> m4_26  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m4_58 -> m4_30  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m4_58 -> m4_33  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m4_58 -> m4_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m4_58 -> m4_40  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m4_58 -> m4_46  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m4_58 -> m4_48  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m4_58 -> m4_56  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m4_63 -> m4_64  [key=0, style=solid];
m4_63 -> m4_69  [key=2, style=dotted];
m4_63 -> m4_71  [key=2, style=dotted];
m4_59 -> m4_60  [key=0, style=solid];
m4_59 -> m4_70  [key=2, style=dotted];
m4_60 -> m4_66  [key=0, style=solid];
m4_61 -> m4_62  [key=0, style=solid];
m4_62 -> m4_63  [key=0, style=solid];
m4_62 -> m4_54  [key=2, style=dotted];
m4_64 -> m4_65  [key=0, style=solid];
m4_64 -> m4_70  [key=2, style=dotted];
m4_65 -> m4_66  [key=0, style=solid];
m4_66 -> m4_25  [key=0, style=bold, color=blue];
m4_70 -> m4_72  [key=0, style=solid];
m4_70 -> m4_73  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ApplyStateContext"];
m4_70 -> m4_58  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.States.ApplyStateContext context"];
m4_70 -> m4_63  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.States.ApplyStateContext context"];
m4_70 -> m4_39  [key=3, color=darkorchid, style=bold, label="Parameter variable bool useFilters"];
m4_70 -> m4_36  [key=3, color=darkorchid, style=bold, label="Parameter variable bool useFilters"];
m4_72 -> m4_73  [key=0, style=solid];
m4_72 -> m4_76  [key=2, style=dotted];
m4_72 -> m4_74  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m4_73 -> m4_74  [key=0, style=solid];
m4_73 -> m4_77  [key=2, style=dotted];
m4_74 -> m4_75  [key=0, style=solid];
m4_74 -> m4_78  [key=2, style=dotted];
m4_75 -> m4_70  [key=0, style=bold, color=blue];
m4_79 -> m4_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
m4_79 -> m4_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
m4_79 -> m4_17  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
m4_79 -> m4_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
m4_79 -> m4_33  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
m4_79 -> m4_34  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
m4_79 -> m4_46  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
m4_79 -> m4_56  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
m4_79 -> m4_57  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
m4_79 -> m4_59  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
m4_79 -> m4_64  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
m4_79 -> m4_72  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
m4_79 -> m4_73  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
m5_57 -> m5_88  [key=0, style=solid];
m5_88 -> m5_89  [key=0, style=solid];
m5_88 -> m5_18  [key=2, style=dotted];
m5_89 -> m5_57  [key=0, style=bold, color=blue];
m5_19 -> m5_20  [key=0, style=solid];
m5_20 -> m5_21  [key=0, style=solid];
m5_20 -> m5_13  [key=2, style=dotted];
m5_20 -> m5_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_21 -> m5_22  [key=0, style=solid];
m5_21 -> m5_14  [key=2, style=dotted];
m5_22 -> m5_19  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_5  [key=2, style=dotted];
m5_2 -> m5_3  [key=0, style=solid];
m5_2 -> m5_6  [key=2, style=dotted];
m5_3 -> m5_4  [key=0, style=solid];
m5_3 -> m5_7  [key=2, style=dotted];
m5_3 -> m5_8  [key=2, style=dotted];
m5_4 -> m5_0  [key=0, style=bold, color=blue];
m5_9 -> m5_10  [key=0, style=solid];
m5_10 -> m5_11  [key=0, style=solid];
m5_10 -> m5_13  [key=2, style=dotted];
m5_10 -> m5_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_11 -> m5_12  [key=0, style=solid];
m5_11 -> m5_14  [key=2, style=dotted];
m5_12 -> m5_9  [key=0, style=bold, color=blue];
m5_47 -> m5_48  [key=0, style=solid];
m5_48 -> m5_49  [key=0, style=solid];
m5_48 -> m5_18  [key=2, style=dotted];
m5_48 -> m5_50  [key=1, style=dashed, color=darkseagreen4, label=fetchedJob];
m5_49 -> m5_50  [key=0, style=solid];
m5_49 -> m5_14  [key=2, style=dotted];
m5_50 -> m5_51  [key=0, style=solid];
m5_50 -> m5_14  [key=2, style=dotted];
m5_51 -> m5_47  [key=0, style=bold, color=blue];
m5_26 -> m5_27  [key=0, style=solid];
m5_27 -> m5_28  [key=0, style=solid];
m5_27 -> m5_13  [key=2, style=dotted];
m5_27 -> m5_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_28 -> m5_29  [key=0, style=solid];
m5_28 -> m5_14  [key=2, style=dotted];
m5_28 -> m5_47  [key=3, color=darkorchid, style=bold, label="Local variable Hangfire.Client.CreateContext context"];
m5_29 -> m5_26  [key=0, style=bold, color=blue];
m5_74 -> m5_75  [key=0, style=solid];
m5_75 -> m5_76  [key=0, style=solid];
m5_75 -> m5_57  [key=2, style=dotted];
m5_76 -> m5_77  [key=0, style=solid];
m5_76 -> m5_80  [key=2, style=dotted];
m5_77 -> m5_78  [key=0, style=solid];
m5_77 -> m5_59  [key=2, style=dotted];
m5_77 -> m5_81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_77 -> m5_77  [key=3, color=darkorchid, style=bold, label="Local variable string createJobSql"];
m5_78 -> m5_79  [key=0, style=solid];
m5_78 -> m5_59  [key=2, style=dotted];
m5_78 -> m5_85  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_79 -> m5_74  [key=0, style=bold, color=blue];
m5_33 -> m5_34  [key=0, style=solid];
m5_34 -> m5_35  [key=0, style=solid];
m5_34 -> m5_13  [key=2, style=dotted];
m5_34 -> m5_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_35 -> m5_36  [key=0, style=solid];
m5_35 -> m5_14  [key=2, style=dotted];
m5_36 -> m5_33  [key=0, style=bold, color=blue];
m5_85 -> m5_86  [key=0, style=solid];
m5_15 -> m5_16  [key=0, style=solid];
m5_16 -> m5_17  [key=0, style=solid];
m5_16 -> m5_18  [key=2, style=dotted];
m5_17 -> m5_15  [key=0, style=bold, color=blue];
m5_23 -> m5_24  [key=0, style=solid];
m5_24 -> m5_25  [key=0, style=solid];
m5_24 -> m5_18  [key=2, style=dotted];
m5_25 -> m5_23  [key=0, style=bold, color=blue];
m5_30 -> m5_31  [key=0, style=solid];
m5_31 -> m5_32  [key=0, style=solid];
m5_31 -> m5_18  [key=2, style=dotted];
m5_32 -> m5_30  [key=0, style=bold, color=blue];
m5_37 -> m5_38  [key=0, style=solid];
m5_38 -> m5_39  [key=0, style=solid];
m5_38 -> m5_18  [key=2, style=dotted];
m5_39 -> m5_37  [key=0, style=bold, color=blue];
m5_44 -> m5_45  [key=0, style=solid];
m5_45 -> m5_46  [key=0, style=solid];
m5_45 -> m5_18  [key=2, style=dotted];
m5_46 -> m5_44  [key=0, style=bold, color=blue];
m5_60 -> m5_61  [key=0, style=solid];
m5_61 -> m5_62  [key=0, style=solid];
m5_61 -> m5_63  [key=2, style=dotted];
m5_62 -> m5_60  [key=0, style=bold, color=blue];
m5_70 -> m5_71  [key=0, style=solid];
m5_71 -> m5_72  [key=0, style=solid];
m5_71 -> m5_73  [key=2, style=dotted];
m5_72 -> m5_70  [key=0, style=bold, color=blue];
m5_81 -> m5_82  [key=0, style=solid];
m5_82 -> m5_83  [key=0, style=solid];
m5_82 -> m5_84  [key=2, style=dotted];
m5_83 -> m5_81  [key=0, style=bold, color=blue];
m5_86 -> m5_87  [key=0, style=solid];
m5_86 -> m5_84  [key=2, style=dotted];
m5_87 -> m5_85  [key=0, style=bold, color=blue];
m5_64 -> m5_65  [key=0, style=solid];
m5_65 -> m5_66  [key=0, style=solid];
m5_65 -> m5_57  [key=2, style=dotted];
m5_66 -> m5_67  [key=0, style=solid];
m5_66 -> m5_69  [key=2, style=dotted];
m5_67 -> m5_68  [key=0, style=solid];
m5_67 -> m5_59  [key=2, style=dotted];
m5_67 -> m5_70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_68 -> m5_64  [key=0, style=bold, color=blue];
m5_52 -> m5_53  [key=0, style=solid];
m5_53 -> m5_54  [key=0, style=solid];
m5_53 -> m5_57  [key=2, style=dotted];
m5_54 -> m5_55  [key=0, style=solid];
m5_54 -> m5_58  [key=2, style=dotted];
m5_55 -> m5_56  [key=0, style=solid];
m5_55 -> m5_59  [key=2, style=dotted];
m5_55 -> m5_60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_56 -> m5_52  [key=0, style=bold, color=blue];
m5_40 -> m5_41  [key=0, style=solid];
m5_41 -> m5_42  [key=0, style=solid];
m5_41 -> m5_13  [key=2, style=dotted];
m5_41 -> m5_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_42 -> m5_43  [key=0, style=solid];
m5_42 -> m5_14  [key=2, style=dotted];
m5_42 -> m5_42  [key=3, color=darkorchid, style=bold, label="Local variable string fetchJobSqlTemplate"];
m5_43 -> m5_40  [key=0, style=bold, color=blue];
m5_90 -> m5_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_16  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_20  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_27  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_31  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_34  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_38  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_41  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_45  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_48  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_53  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_55  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_65  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_67  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_75  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_77  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_78  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m5_90 -> m5_88  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_0  [key=0, style=bold, color=blue];
m7_57 -> m7_88  [key=0, style=solid];
m7_88 -> m7_89  [key=0, style=solid];
m7_88 -> m7_18  [key=2, style=dotted];
m7_89 -> m7_57  [key=0, style=bold, color=blue];
m7_14 -> m7_12  [key=0, style=bold, color=blue];
m7_19 -> m7_20  [key=0, style=solid];
m7_20 -> m7_21  [key=0, style=solid];
m7_20 -> m7_13  [key=2, style=dotted];
m7_20 -> m7_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_21 -> m7_22  [key=0, style=solid];
m7_21 -> m7_14  [key=2, style=dotted];
m7_22 -> m7_19  [key=0, style=bold, color=blue];
m7_5 -> m7_0  [key=0, style=bold, color=blue];
m7_13 -> m7_14  [key=0, style=solid, color=red];
m7_13 -> m7_15  [key=2, style=dotted, color=red];
m7_0 -> m7_1  [key=0, style=solid];
m7_3 -> m7_4  [key=0, style=solid, color=red];
m7_3 -> m7_7  [key=2, style=dotted, color=green];
m7_3 -> m7_8  [key=2, style=dotted, color=green];
m7_2 -> m7_3  [key=0, style=solid, color=red];
m7_2 -> m7_6  [key=2, style=dotted];
m7_2 -> m7_8  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_5  [key=2, style=dotted];
m7_1 -> m7_1  [key=3, color=darkorchid, style=bold, label="Field variable string Queue"];
m7_4 -> m7_0  [key=0, style=bold, color=blue];
m7_4 -> m7_5  [key=0, style=solid, color=red];
m7_4 -> m7_7  [key=2, style=dotted, color=red];
m7_9 -> m7_10  [key=0, style=solid];
m7_9 -> m7_11  [key=2, style=dotted];
m7_10 -> m7_11  [key=0, style=solid];
m7_10 -> m7_13  [key=2, style=dotted];
m7_10 -> m7_12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_10 -> m7_8  [key=0, style=bold, color=blue];
m7_11 -> m7_12  [key=0, style=solid];
m7_11 -> m7_14  [key=2, style=dotted];
m7_12 -> m7_9  [key=0, style=bold, color=blue];
m7_12 -> m7_13  [key=0, style=solid, color=red];
m7_12 -> m7_16  [key=0, style=solid];
m7_47 -> m7_48  [key=0, style=solid];
m7_48 -> m7_49  [key=0, style=solid];
m7_48 -> m7_18  [key=2, style=dotted];
m7_48 -> m7_50  [key=1, style=dashed, color=darkseagreen4, label=fetchedJob];
m7_49 -> m7_50  [key=0, style=solid];
m7_49 -> m7_14  [key=2, style=dotted];
m7_50 -> m7_51  [key=0, style=solid];
m7_50 -> m7_14  [key=2, style=dotted];
m7_51 -> m7_47  [key=0, style=bold, color=blue];
m7_26 -> m7_27  [key=0, style=solid];
m7_27 -> m7_28  [key=0, style=solid];
m7_27 -> m7_13  [key=2, style=dotted];
m7_27 -> m7_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_28 -> m7_29  [key=0, style=solid];
m7_28 -> m7_14  [key=2, style=dotted];
m7_29 -> m7_26  [key=0, style=bold, color=blue];
m7_74 -> m7_75  [key=0, style=solid];
m7_75 -> m7_76  [key=0, style=solid];
m7_75 -> m7_57  [key=2, style=dotted];
m7_77 -> m7_78  [key=0, style=solid];
m7_77 -> m7_59  [key=2, style=dotted];
m7_77 -> m7_81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_78 -> m7_79  [key=0, style=solid];
m7_78 -> m7_59  [key=2, style=dotted];
m7_78 -> m7_85  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_76 -> m7_77  [key=0, style=solid];
m7_76 -> m7_80  [key=2, style=dotted];
m7_79 -> m7_74  [key=0, style=bold, color=blue];
m7_33 -> m7_34  [key=0, style=solid];
m7_34 -> m7_35  [key=0, style=solid];
m7_34 -> m7_13  [key=2, style=dotted];
m7_34 -> m7_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_35 -> m7_36  [key=0, style=solid];
m7_35 -> m7_14  [key=2, style=dotted];
m7_36 -> m7_33  [key=0, style=bold, color=blue];
m7_85 -> m7_86  [key=0, style=solid];
m7_8 -> m7_9  [key=0, style=solid];
m7_16 -> m7_14  [key=0, style=solid];
m7_16 -> m7_18  [key=2, style=dotted];
m7_16 -> m7_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.StateContextMock"];
m7_16 -> m7_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.StateContextMock"];
m7_16 -> m7_3  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.StateContextMock"];
m7_16 -> m7_4  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.StateContextMock"];
m7_16 -> m7_13  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.StateContextMock"];
m7_24 -> m7_25  [key=0, style=solid];
m7_24 -> m7_18  [key=2, style=dotted];
m7_31 -> m7_32  [key=0, style=solid];
m7_31 -> m7_18  [key=2, style=dotted];
m7_38 -> m7_39  [key=0, style=solid];
m7_38 -> m7_18  [key=2, style=dotted];
m7_45 -> m7_46  [key=0, style=solid];
m7_45 -> m7_18  [key=2, style=dotted];
m7_23 -> m7_24  [key=0, style=solid];
m7_25 -> m7_23  [key=0, style=bold, color=blue];
m7_30 -> m7_31  [key=0, style=solid];
m7_32 -> m7_30  [key=0, style=bold, color=blue];
m7_37 -> m7_38  [key=0, style=solid];
m7_39 -> m7_37  [key=0, style=bold, color=blue];
m7_44 -> m7_45  [key=0, style=solid];
m7_46 -> m7_44  [key=0, style=bold, color=blue];
m7_60 -> m7_61  [key=0, style=solid];
m7_70 -> m7_71  [key=0, style=solid];
m7_81 -> m7_82  [key=0, style=solid];
m7_62 -> m7_60  [key=0, style=bold, color=blue];
m7_61 -> m7_62  [key=0, style=solid];
m7_61 -> m7_63  [key=2, style=dotted];
m7_72 -> m7_70  [key=0, style=bold, color=blue];
m7_71 -> m7_72  [key=0, style=solid];
m7_71 -> m7_73  [key=2, style=dotted];
m7_83 -> m7_81  [key=0, style=bold, color=blue];
m7_82 -> m7_83  [key=0, style=solid];
m7_82 -> m7_84  [key=2, style=dotted];
m7_86 -> m7_87  [key=0, style=solid];
m7_86 -> m7_84  [key=2, style=dotted];
m7_87 -> m7_85  [key=0, style=bold, color=blue];
m7_64 -> m7_65  [key=0, style=solid];
m7_65 -> m7_66  [key=0, style=solid];
m7_65 -> m7_57  [key=2, style=dotted];
m7_67 -> m7_68  [key=0, style=solid];
m7_67 -> m7_59  [key=2, style=dotted];
m7_67 -> m7_70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_66 -> m7_67  [key=0, style=solid];
m7_66 -> m7_69  [key=2, style=dotted];
m7_68 -> m7_64  [key=0, style=bold, color=blue];
m7_52 -> m7_53  [key=0, style=solid];
m7_53 -> m7_54  [key=0, style=solid];
m7_53 -> m7_57  [key=2, style=dotted];
m7_55 -> m7_56  [key=0, style=solid];
m7_55 -> m7_59  [key=2, style=dotted];
m7_55 -> m7_60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_54 -> m7_55  [key=0, style=solid];
m7_54 -> m7_58  [key=2, style=dotted];
m7_56 -> m7_52  [key=0, style=bold, color=blue];
m7_40 -> m7_41  [key=0, style=solid];
m7_41 -> m7_42  [key=0, style=solid];
m7_41 -> m7_13  [key=2, style=dotted];
m7_41 -> m7_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_42 -> m7_43  [key=0, style=solid];
m7_42 -> m7_14  [key=2, style=dotted];
m7_43 -> m7_40  [key=0, style=bold, color=blue];
m7_90 -> m7_3  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_16  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_20  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_27  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_31  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_34  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_38  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_41  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_45  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_48  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_53  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_55  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_65  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_67  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_75  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_77  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_78  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m7_90 -> m7_88  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_129 -> m8_130  [key=0, style=solid];
m8_130 -> m8_131  [key=0, style=solid];
m8_130 -> m8_70  [key=2, style=dotted];
m8_131 -> m8_132  [key=0, style=solid];
m8_131 -> m8_80  [key=2, style=dotted];
m8_131 -> m8_53  [key=2, style=dotted];
m8_132 -> m8_129  [key=0, style=bold, color=blue];
m8_220 -> m8_221  [key=0, style=solid];
m8_221 -> m8_18  [key=2, style=dotted];
m8_221 -> m8_222  [key=0, style=solid];
m8_221 -> m8_227  [key=2, style=dotted];
m8_221 -> m8_228  [key=2, style=dotted];
m8_221 -> m8_229  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_222 -> m8_223  [key=0, style=solid];
m8_222 -> m8_70  [key=2, style=dotted];
m8_223 -> m8_224  [key=0, style=solid];
m8_223 -> m8_141  [key=2, style=dotted];
m8_223 -> m8_225  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_224 -> m8_225  [key=0, style=solid];
m8_224 -> m8_106  [key=2, style=dotted];
m8_224 -> m8_232  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_225 -> m8_226  [key=0, style=solid];
m8_225 -> m8_201  [key=2, style=dotted];
m8_226 -> m8_220  [key=0, style=bold, color=blue];
m8_58 -> m8_59  [key=0, style=solid];
m8_59 -> m8_38  [key=2, style=dotted];
m8_59 -> m8_60  [key=0, style=solid];
m8_59 -> m8_62  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_60 -> m8_61  [key=0, style=solid];
m8_60 -> m8_53  [key=2, style=dotted];
m8_61 -> m8_58  [key=0, style=bold, color=blue];
m8_253 -> m8_254  [key=0, style=solid];
m8_254 -> m8_18  [key=2, style=dotted];
m8_254 -> m8_19  [key=2, style=dotted];
m8_254 -> m8_22  [key=2, style=dotted];
m8_254 -> m8_255  [key=0, style=solid];
m8_254 -> m8_242  [key=2, style=dotted];
m8_254 -> m8_227  [key=2, style=dotted];
m8_254 -> m8_261  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_255 -> m8_18  [key=2, style=dotted];
m8_255 -> m8_19  [key=2, style=dotted];
m8_255 -> m8_256  [key=0, style=solid];
m8_255 -> m8_264  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_256 -> m8_257  [key=0, style=solid];
m8_256 -> m8_70  [key=2, style=dotted];
m8_257 -> m8_258  [key=0, style=solid];
m8_257 -> m8_141  [key=2, style=dotted];
m8_257 -> m8_259  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_258 -> m8_259  [key=0, style=solid];
m8_258 -> m8_106  [key=2, style=dotted];
m8_258 -> m8_267  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_259 -> m8_260  [key=0, style=solid];
m8_259 -> m8_174  [key=2, style=dotted];
m8_260 -> m8_253  [key=0, style=bold, color=blue];
m8_0 -> m8_1  [key=0, style=solid];
m8_9 -> m8_10  [key=0, style=solid, color=green];
m8_9 -> m8_18  [key=2, style=dotted, color=green];
m8_9 -> m8_19  [key=2, style=dotted, color=green];
m8_9 -> m8_35  [key=1, style=dashed, color=green, label="lambda expression"];
m8_8 -> m8_9  [key=0, style=solid, color=green];
m8_8 -> m8_18  [key=2, style=dotted];
m8_8 -> m8_19  [key=2, style=dotted];
m8_8 -> m8_31  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_10 -> m8_11  [key=0, style=solid, color=green];
m8_10 -> m8_18  [key=2, style=dotted, color=green];
m8_10 -> m8_22  [key=2, style=dotted, color=green];
m8_10 -> m8_19  [key=2, style=dotted, color=green];
m8_10 -> m8_40  [key=1, style=dashed, color=green, label="lambda expression"];
m8_11 -> m8_12  [key=0, style=solid, color=green];
m8_11 -> m8_23  [key=2, style=dotted];
m8_12 -> m8_13  [key=0, style=solid, color=green];
m8_12 -> m8_18  [key=2, style=dotted, color=green];
m8_12 -> m8_19  [key=2, style=dotted, color=green];
m8_12 -> m8_44  [key=1, style=dashed, color=green, label="lambda expression"];
m8_1 -> m8_2  [key=0, style=solid];
m8_1 -> m8_14  [key=2, style=dotted];
m8_2 -> m8_3  [key=0, style=solid];
m8_2 -> m8_15  [key=2, style=dotted];
m8_2 -> m8_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_3 -> m8_4  [key=0, style=solid];
m8_3 -> m8_16  [key=2, style=dotted];
m8_4 -> m8_5  [key=0, style=solid];
m8_4 -> m8_17  [key=2, style=dotted];
m8_5 -> m8_18  [key=2, style=dotted];
m8_5 -> m8_19  [key=2, style=dotted];
m8_5 -> m8_6  [key=0, style=solid];
m8_5 -> m8_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_6 -> m8_7  [key=0, style=solid];
m8_6 -> m8_20  [key=2, style=dotted];
m8_7 -> m8_8  [key=0, style=solid];
m8_7 -> m8_21  [key=2, style=dotted];
m8_13 -> m8_0  [key=0, style=bold, color=blue];
m8_151 -> m8_152  [key=0, style=solid];
m8_152 -> m8_153  [key=0, style=solid];
m8_152 -> m8_70  [key=2, style=dotted];
m8_152 -> m8_157  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m8_153 -> m8_38  [key=2, style=dotted];
m8_153 -> m8_154  [key=0, style=solid];
m8_153 -> m8_156  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_154 -> m8_53  [key=2, style=dotted];
m8_154 -> m8_155  [key=0, style=solid];
m8_155 -> m8_151  [key=0, style=bold, color=blue];
m8_273 -> m8_274  [key=0, style=solid];
m8_274 -> m8_275  [key=0, style=solid];
m8_274 -> m8_70  [key=2, style=dotted];
m8_275 -> m8_276  [key=0, style=solid];
m8_275 -> m8_141  [key=2, style=dotted];
m8_275 -> m8_278  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_276 -> m8_277  [key=0, style=solid];
m8_276 -> m8_106  [key=2, style=dotted];
m8_276 -> m8_280  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_277 -> m8_278  [key=0, style=solid];
m8_277 -> m8_106  [key=2, style=dotted];
m8_277 -> m8_286  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_278 -> m8_279  [key=0, style=solid];
m8_278 -> m8_174  [key=2, style=dotted];
m8_279 -> m8_273  [key=0, style=bold, color=blue];
m8_182 -> m8_183  [key=0, style=solid];
m8_183 -> m8_184  [key=0, style=solid];
m8_183 -> m8_70  [key=2, style=dotted];
m8_184 -> m8_185  [key=0, style=solid];
m8_184 -> m8_141  [key=2, style=dotted];
m8_185 -> m8_186  [key=0, style=solid];
m8_185 -> m8_106  [key=2, style=dotted];
m8_185 -> m8_187  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_186 -> m8_182  [key=0, style=bold, color=blue];
m8_89 -> m8_90  [key=0, style=solid];
m8_90 -> m8_91  [key=0, style=solid];
m8_90 -> m8_70  [key=2, style=dotted];
m8_90 -> m8_95  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m8_91 -> m8_38  [key=2, style=dotted];
m8_91 -> m8_92  [key=0, style=solid];
m8_91 -> m8_94  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_92 -> m8_93  [key=0, style=solid];
m8_92 -> m8_53  [key=2, style=dotted];
m8_93 -> m8_89  [key=0, style=bold, color=blue];
m8_49 -> m8_50  [key=0, style=solid];
m8_50 -> m8_38  [key=2, style=dotted];
m8_50 -> m8_51  [key=0, style=solid];
m8_50 -> m8_54  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_51 -> m8_52  [key=0, style=solid];
m8_51 -> m8_53  [key=2, style=dotted];
m8_52 -> m8_49  [key=0, style=bold, color=blue];
m8_117 -> m8_118  [key=0, style=solid];
m8_118 -> m8_119  [key=0, style=solid];
m8_118 -> m8_70  [key=2, style=dotted];
m8_119 -> m8_120  [key=0, style=solid];
m8_119 -> m8_80  [key=2, style=dotted];
m8_120 -> m8_121  [key=0, style=solid];
m8_120 -> m8_106  [key=2, style=dotted];
m8_120 -> m8_122  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_121 -> m8_117  [key=0, style=bold, color=blue];
m8_65 -> m8_66  [key=0, style=solid];
m8_66 -> m8_67  [key=0, style=solid];
m8_66 -> m8_70  [key=2, style=dotted];
m8_68 -> m8_69  [key=0, style=solid];
m8_68 -> m8_71  [key=2, style=dotted];
m8_67 -> m8_68  [key=0, style=solid];
m8_69 -> m8_65  [key=0, style=bold, color=blue];
m8_159 -> m8_160  [key=0, style=solid];
m8_160 -> m8_161  [key=0, style=solid];
m8_160 -> m8_70  [key=2, style=dotted];
m8_161 -> m8_162  [key=0, style=solid];
m8_161 -> m8_141  [key=2, style=dotted];
m8_162 -> m8_163  [key=0, style=solid];
m8_162 -> m8_106  [key=2, style=dotted];
m8_162 -> m8_164  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_163 -> m8_159  [key=0, style=bold, color=blue];
m8_70 -> m8_329  [key=0, style=solid];
m8_329 -> m8_330  [key=0, style=solid];
m8_329 -> m8_57  [key=2, style=dotted];
m8_330 -> m8_70  [key=0, style=bold, color=blue];
m8_142 -> m8_143  [key=0, style=solid];
m8_143 -> m8_144  [key=0, style=solid];
m8_143 -> m8_70  [key=2, style=dotted];
m8_143 -> m8_148  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m8_144 -> m8_38  [key=2, style=dotted];
m8_144 -> m8_145  [key=0, style=solid];
m8_144 -> m8_147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_145 -> m8_53  [key=2, style=dotted];
m8_145 -> m8_146  [key=0, style=solid];
m8_146 -> m8_142  [key=0, style=bold, color=blue];
m8_311 -> m8_312  [key=0, style=solid];
m8_313 -> m8_18  [key=2, style=dotted];
m8_313 -> m8_314  [key=0, style=solid];
m8_313 -> m8_228  [key=2, style=dotted];
m8_313 -> m8_320  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_314 -> m8_315  [key=0, style=solid];
m8_314 -> m8_70  [key=2, style=dotted];
m8_315 -> m8_316  [key=0, style=solid];
m8_315 -> m8_141  [key=2, style=dotted];
m8_315 -> m8_317  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_316 -> m8_317  [key=0, style=solid];
m8_316 -> m8_106  [key=2, style=dotted];
m8_316 -> m8_323  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_312 -> m8_313  [key=0, style=solid];
m8_312 -> m8_316  [key=1, style=dashed, color=darkseagreen4, label=exception];
m8_312 -> m8_324  [key=1, style=dashed, color=darkseagreen4, label=exception];
m8_312 -> m8_319  [key=2, style=dotted];
m8_312 -> m8_327  [key=1, style=dashed, color=darkseagreen4, label=exception];
m8_317 -> m8_318  [key=0, style=solid];
m8_317 -> m8_201  [key=2, style=dotted];
m8_318 -> m8_311  [key=0, style=bold, color=blue];
m8_98 -> m8_99  [key=0, style=solid];
m8_100 -> m8_101  [key=0, style=solid];
m8_100 -> m8_105  [key=2, style=dotted];
m8_101 -> m8_102  [key=0, style=solid];
m8_101 -> m8_70  [key=2, style=dotted];
m8_102 -> m8_103  [key=0, style=solid];
m8_102 -> m8_80  [key=2, style=dotted];
m8_103 -> m8_104  [key=0, style=solid];
m8_103 -> m8_106  [key=2, style=dotted];
m8_103 -> m8_111  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_99 -> m8_100  [key=0, style=solid];
m8_99 -> m8_102  [key=1, style=dashed, color=darkseagreen4, label=job];
m8_99 -> m8_103  [key=1, style=dashed, color=darkseagreen4, label=job];
m8_99 -> m8_112  [key=1, style=dashed, color=darkseagreen4, label=job];
m8_99 -> m8_15  [key=2, style=dotted];
m8_99 -> m8_107  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_104 -> m8_98  [key=0, style=bold, color=blue];
m8_211 -> m8_212  [key=0, style=solid];
m8_212 -> m8_213  [key=0, style=solid];
m8_212 -> m8_70  [key=2, style=dotted];
m8_213 -> m8_214  [key=0, style=solid];
m8_213 -> m8_141  [key=2, style=dotted];
m8_215 -> m8_216  [key=0, style=solid];
m8_215 -> m8_106  [key=2, style=dotted];
m8_215 -> m8_217  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_214 -> m8_215  [key=0, style=solid];
m8_214 -> m8_201  [key=2, style=dotted];
m8_216 -> m8_211  [key=0, style=bold, color=blue];
m8_81 -> m8_82  [key=0, style=solid];
m8_82 -> m8_83  [key=0, style=solid];
m8_82 -> m8_70  [key=2, style=dotted];
m8_82 -> m8_87  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m8_83 -> m8_38  [key=2, style=dotted];
m8_83 -> m8_84  [key=0, style=solid];
m8_83 -> m8_86  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_84 -> m8_85  [key=0, style=solid];
m8_84 -> m8_53  [key=2, style=dotted];
m8_85 -> m8_81  [key=0, style=bold, color=blue];
m8_72 -> m8_73  [key=0, style=solid];
m8_73 -> m8_74  [key=0, style=solid];
m8_73 -> m8_70  [key=2, style=dotted];
m8_73 -> m8_78  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m8_74 -> m8_38  [key=2, style=dotted];
m8_74 -> m8_75  [key=0, style=solid];
m8_74 -> m8_77  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_75 -> m8_76  [key=0, style=solid];
m8_75 -> m8_53  [key=2, style=dotted];
m8_76 -> m8_72  [key=0, style=bold, color=blue];
m8_168 -> m8_169  [key=0, style=solid];
m8_169 -> m8_170  [key=0, style=solid];
m8_169 -> m8_70  [key=2, style=dotted];
m8_170 -> m8_171  [key=0, style=solid];
m8_170 -> m8_141  [key=2, style=dotted];
m8_170 -> m8_172  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_171 -> m8_172  [key=0, style=solid];
m8_171 -> m8_106  [key=2, style=dotted];
m8_171 -> m8_175  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_172 -> m8_173  [key=0, style=solid];
m8_172 -> m8_174  [key=2, style=dotted];
m8_173 -> m8_168  [key=0, style=bold, color=blue];
m8_107 -> m8_108  [key=0, style=solid];
m8_35 -> m8_36  [key=0, style=solid, color=green];
m8_40 -> m8_41  [key=0, style=solid, color=green];
m8_44 -> m8_45  [key=0, style=solid, color=green];
m8_36 -> m8_37  [key=0, style=solid, color=green];
m8_36 -> m8_38  [key=2, style=dotted, color=green];
m8_36 -> m8_39  [key=2, style=dotted, color=green];
m8_37 -> m8_35  [key=0, style=bold, color=blue];
m8_41 -> m8_42  [key=0, style=solid, color=green];
m8_41 -> m8_43  [key=2, style=dotted, color=green];
m8_42 -> m8_40  [key=0, style=bold, color=blue];
m8_45 -> m8_46  [key=0, style=solid, color=green];
m8_45 -> m8_47  [key=2, style=dotted, color=green];
m8_45 -> m8_38  [key=2, style=dotted, color=green];
m8_45 -> m8_48  [key=2, style=dotted, color=green];
m8_46 -> m8_44  [key=0, style=bold, color=blue];
m8_55 -> m8_56  [key=0, style=solid];
m8_55 -> m8_57  [key=2, style=dotted];
m8_63 -> m8_64  [key=0, style=solid];
m8_63 -> m8_57  [key=2, style=dotted];
m8_78 -> m8_79  [key=0, style=solid];
m8_78 -> m8_80  [key=2, style=dotted];
m8_87 -> m8_88  [key=0, style=solid];
m8_87 -> m8_80  [key=2, style=dotted];
m8_95 -> m8_96  [key=0, style=solid];
m8_95 -> m8_97  [key=2, style=dotted];
m8_123 -> m8_38  [key=2, style=dotted];
m8_123 -> m8_124  [key=0, style=solid];
m8_123 -> m8_125  [key=2, style=dotted];
m8_123 -> m8_126  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_127 -> m8_128  [key=0, style=solid];
m8_139 -> m8_140  [key=0, style=solid];
m8_139 -> m8_141  [key=2, style=dotted];
m8_157 -> m8_158  [key=0, style=solid];
m8_157 -> m8_141  [key=2, style=dotted];
m8_176 -> m8_38  [key=2, style=dotted];
m8_176 -> m8_177  [key=0, style=solid];
m8_176 -> m8_125  [key=2, style=dotted];
m8_176 -> m8_178  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_179 -> m8_180  [key=0, style=solid];
m8_179 -> m8_181  [key=2, style=dotted];
m8_188 -> m8_38  [key=2, style=dotted];
m8_188 -> m8_189  [key=0, style=solid];
m8_188 -> m8_125  [key=2, style=dotted];
m8_188 -> m8_190  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_191 -> m8_192  [key=0, style=solid];
m8_233 -> m8_38  [key=2, style=dotted];
m8_233 -> m8_234  [key=0, style=solid];
m8_233 -> m8_125  [key=2, style=dotted];
m8_248 -> m8_38  [key=2, style=dotted];
m8_248 -> m8_249  [key=0, style=solid];
m8_248 -> m8_125  [key=2, style=dotted];
m8_248 -> m8_250  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_268 -> m8_38  [key=2, style=dotted];
m8_268 -> m8_269  [key=0, style=solid];
m8_268 -> m8_125  [key=2, style=dotted];
m8_268 -> m8_270  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_271 -> m8_272  [key=0, style=solid];
m8_281 -> m8_38  [key=2, style=dotted];
m8_281 -> m8_282  [key=0, style=solid];
m8_281 -> m8_125  [key=2, style=dotted];
m8_281 -> m8_283  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_284 -> m8_285  [key=0, style=solid];
m8_299 -> m8_38  [key=2, style=dotted];
m8_299 -> m8_300  [key=0, style=solid];
m8_299 -> m8_301  [key=2, style=dotted];
m8_306 -> m8_38  [key=2, style=dotted];
m8_306 -> m8_307  [key=0, style=solid];
m8_306 -> m8_125  [key=2, style=dotted];
m8_306 -> m8_308  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_324 -> m8_38  [key=2, style=dotted];
m8_324 -> m8_325  [key=0, style=solid];
m8_324 -> m8_125  [key=2, style=dotted];
m8_324 -> m8_326  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_31 -> m8_32  [key=0, style=solid];
m8_112 -> m8_38  [key=2, style=dotted];
m8_112 -> m8_39  [key=2, style=dotted];
m8_112 -> m8_113  [key=0, style=solid];
m8_112 -> m8_114  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_203 -> m8_38  [key=2, style=dotted];
m8_203 -> m8_43  [key=2, style=dotted];
m8_203 -> m8_204  [key=0, style=solid];
m8_209 -> m8_38  [key=2, style=dotted];
m8_209 -> m8_210  [key=0, style=solid];
m8_209 -> m8_125  [key=2, style=dotted];
m8_218 -> m8_38  [key=2, style=dotted];
m8_218 -> m8_219  [key=0, style=solid];
m8_218 -> m8_125  [key=2, style=dotted];
m8_230 -> m8_38  [key=2, style=dotted];
m8_230 -> m8_231  [key=0, style=solid];
m8_230 -> m8_125  [key=2, style=dotted];
m8_321 -> m8_38  [key=2, style=dotted];
m8_321 -> m8_322  [key=0, style=solid];
m8_321 -> m8_125  [key=2, style=dotted];
m8_206 -> m8_43  [key=2, style=dotted];
m8_206 -> m8_207  [key=0, style=solid];
m8_245 -> m8_43  [key=2, style=dotted];
m8_245 -> m8_246  [key=0, style=solid];
m8_262 -> m8_43  [key=2, style=dotted];
m8_262 -> m8_263  [key=0, style=solid];
m8_24 -> m8_25  [key=0, style=solid];
m8_28 -> m8_29  [key=0, style=solid];
m8_54 -> m8_55  [key=0, style=solid];
m8_56 -> m8_54  [key=0, style=bold, color=blue];
m8_62 -> m8_63  [key=0, style=solid];
m8_64 -> m8_62  [key=0, style=bold, color=blue];
m8_77 -> m8_78  [key=0, style=solid];
m8_79 -> m8_77  [key=0, style=bold, color=blue];
m8_86 -> m8_87  [key=0, style=solid];
m8_88 -> m8_86  [key=0, style=bold, color=blue];
m8_94 -> m8_95  [key=0, style=solid];
m8_96 -> m8_94  [key=0, style=bold, color=blue];
m8_111 -> m8_112  [key=0, style=solid];
m8_122 -> m8_123  [key=0, style=solid];
m8_124 -> m8_122  [key=0, style=bold, color=blue];
m8_126 -> m8_127  [key=0, style=solid];
m8_128 -> m8_126  [key=0, style=bold, color=blue];
m8_138 -> m8_139  [key=0, style=solid];
m8_140 -> m8_138  [key=0, style=bold, color=blue];
m8_148 -> m8_149  [key=0, style=solid];
m8_148 -> m8_150  [key=2, style=dotted];
m8_156 -> m8_157  [key=0, style=solid];
m8_158 -> m8_156  [key=0, style=bold, color=blue];
m8_164 -> m8_165  [key=0, style=solid];
m8_175 -> m8_176  [key=0, style=solid];
m8_177 -> m8_175  [key=0, style=bold, color=blue];
m8_178 -> m8_179  [key=0, style=solid];
m8_180 -> m8_178  [key=0, style=bold, color=blue];
m8_187 -> m8_188  [key=0, style=solid];
m8_189 -> m8_187  [key=0, style=bold, color=blue];
m8_190 -> m8_191  [key=0, style=solid];
m8_192 -> m8_190  [key=0, style=bold, color=blue];
m8_202 -> m8_203  [key=0, style=solid];
m8_205 -> m8_206  [key=0, style=solid];
m8_208 -> m8_209  [key=0, style=solid];
m8_217 -> m8_218  [key=0, style=solid];
m8_229 -> m8_230  [key=0, style=solid];
m8_232 -> m8_233  [key=0, style=solid];
m8_234 -> m8_232  [key=0, style=bold, color=blue];
m8_244 -> m8_245  [key=0, style=solid];
m8_247 -> m8_248  [key=0, style=solid];
m8_249 -> m8_247  [key=0, style=bold, color=blue];
m8_250 -> m8_251  [key=0, style=solid];
m8_261 -> m8_262  [key=0, style=solid];
m8_264 -> m8_265  [key=0, style=solid];
m8_267 -> m8_268  [key=0, style=solid];
m8_269 -> m8_267  [key=0, style=bold, color=blue];
m8_270 -> m8_271  [key=0, style=solid];
m8_272 -> m8_270  [key=0, style=bold, color=blue];
m8_280 -> m8_281  [key=0, style=solid];
m8_282 -> m8_280  [key=0, style=bold, color=blue];
m8_283 -> m8_284  [key=0, style=solid];
m8_285 -> m8_283  [key=0, style=bold, color=blue];
m8_286 -> m8_287  [key=0, style=solid];
m8_298 -> m8_299  [key=0, style=solid];
m8_302 -> m8_303  [key=0, style=solid];
m8_300 -> m8_298  [key=0, style=bold, color=blue];
m8_305 -> m8_306  [key=0, style=solid];
m8_307 -> m8_305  [key=0, style=bold, color=blue];
m8_308 -> m8_309  [key=0, style=solid];
m8_320 -> m8_321  [key=0, style=solid];
m8_323 -> m8_324  [key=0, style=solid];
m8_325 -> m8_323  [key=0, style=bold, color=blue];
m8_326 -> m8_327  [key=0, style=solid];
m8_33 -> m8_31  [key=0, style=bold, color=blue];
m8_32 -> m8_33  [key=0, style=solid];
m8_32 -> m8_34  [key=2, style=dotted];
m8_113 -> m8_111  [key=0, style=bold, color=blue];
m8_114 -> m8_115  [key=0, style=solid];
m8_147 -> m8_148  [key=0, style=solid];
m8_204 -> m8_202  [key=0, style=bold, color=blue];
m8_210 -> m8_208  [key=0, style=bold, color=blue];
m8_219 -> m8_217  [key=0, style=bold, color=blue];
m8_231 -> m8_229  [key=0, style=bold, color=blue];
m8_322 -> m8_320  [key=0, style=bold, color=blue];
m8_207 -> m8_205  [key=0, style=bold, color=blue];
m8_246 -> m8_244  [key=0, style=bold, color=blue];
m8_263 -> m8_261  [key=0, style=bold, color=blue];
m8_26 -> m8_24  [key=0, style=bold, color=blue];
m8_25 -> m8_26  [key=0, style=solid];
m8_25 -> m8_27  [key=2, style=dotted];
m8_30 -> m8_28  [key=0, style=bold, color=blue];
m8_29 -> m8_30  [key=0, style=solid];
m8_149 -> m8_147  [key=0, style=bold, color=blue];
m8_166 -> m8_164  [key=0, style=bold, color=blue];
m8_165 -> m8_166  [key=0, style=solid];
m8_165 -> m8_167  [key=2, style=dotted];
m8_252 -> m8_250  [key=0, style=bold, color=blue];
m8_251 -> m8_252  [key=0, style=solid];
m8_266 -> m8_264  [key=0, style=bold, color=blue];
m8_265 -> m8_266  [key=0, style=solid];
m8_288 -> m8_286  [key=0, style=bold, color=blue];
m8_287 -> m8_288  [key=0, style=solid];
m8_287 -> m8_289  [key=2, style=dotted];
m8_303 -> m8_304  [key=0, style=solid];
m8_309 -> m8_310  [key=0, style=solid];
m8_304 -> m8_302  [key=0, style=bold, color=blue];
m8_310 -> m8_308  [key=0, style=bold, color=blue];
m8_327 -> m8_328  [key=0, style=solid];
m8_328 -> m8_326  [key=0, style=bold, color=blue];
m8_116 -> m8_114  [key=0, style=bold, color=blue];
m8_115 -> m8_116  [key=0, style=solid];
m8_108 -> m8_109  [key=0, style=solid];
m8_108 -> m8_110  [key=2, style=dotted];
m8_109 -> m8_107  [key=0, style=bold, color=blue];
m8_290 -> m8_291  [key=0, style=solid];
m8_292 -> m8_18  [key=2, style=dotted];
m8_292 -> m8_293  [key=0, style=solid];
m8_292 -> m8_297  [key=2, style=dotted];
m8_292 -> m8_298  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_292 -> m8_302  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_293 -> m8_294  [key=0, style=solid];
m8_293 -> m8_70  [key=2, style=dotted];
m8_294 -> m8_295  [key=0, style=solid];
m8_294 -> m8_141  [key=2, style=dotted];
m8_295 -> m8_296  [key=0, style=solid];
m8_295 -> m8_106  [key=2, style=dotted];
m8_295 -> m8_305  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_291 -> m8_292  [key=0, style=solid];
m8_291 -> m8_295  [key=1, style=dashed, color=darkseagreen4, label=anotherState];
m8_291 -> m8_306  [key=1, style=dashed, color=darkseagreen4, label=anotherState];
m8_291 -> m8_17  [key=2, style=dotted];
m8_291 -> m8_303  [key=1, style=dashed, color=darkseagreen4, label=anotherState];
m8_291 -> m8_309  [key=1, style=dashed, color=darkseagreen4, label=anotherState];
m8_296 -> m8_290  [key=0, style=bold, color=blue];
m8_235 -> m8_236  [key=0, style=solid];
m8_236 -> m8_18  [key=2, style=dotted];
m8_236 -> m8_19  [key=2, style=dotted];
m8_236 -> m8_22  [key=2, style=dotted];
m8_236 -> m8_237  [key=0, style=solid];
m8_236 -> m8_242  [key=2, style=dotted];
m8_236 -> m8_243  [key=2, style=dotted];
m8_236 -> m8_244  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_237 -> m8_238  [key=0, style=solid];
m8_237 -> m8_70  [key=2, style=dotted];
m8_238 -> m8_239  [key=0, style=solid];
m8_238 -> m8_141  [key=2, style=dotted];
m8_238 -> m8_240  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_239 -> m8_240  [key=0, style=solid];
m8_239 -> m8_106  [key=2, style=dotted];
m8_239 -> m8_247  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_240 -> m8_241  [key=0, style=solid];
m8_240 -> m8_201  [key=2, style=dotted];
m8_241 -> m8_235  [key=0, style=bold, color=blue];
m8_193 -> m8_194  [key=0, style=solid];
m8_194 -> m8_18  [key=2, style=dotted];
m8_194 -> m8_19  [key=2, style=dotted];
m8_194 -> m8_195  [key=0, style=solid];
m8_194 -> m8_202  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_195 -> m8_196  [key=0, style=solid];
m8_195 -> m8_70  [key=2, style=dotted];
m8_196 -> m8_197  [key=0, style=solid];
m8_196 -> m8_141  [key=2, style=dotted];
m8_198 -> m8_199  [key=0, style=solid];
m8_198 -> m8_106  [key=2, style=dotted];
m8_198 -> m8_205  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_199 -> m8_200  [key=0, style=solid];
m8_199 -> m8_106  [key=2, style=dotted];
m8_199 -> m8_208  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_197 -> m8_198  [key=0, style=solid];
m8_197 -> m8_201  [key=2, style=dotted];
m8_200 -> m8_193  [key=0, style=bold, color=blue];
m8_133 -> m8_134  [key=0, style=solid];
m8_134 -> m8_135  [key=0, style=solid];
m8_134 -> m8_70  [key=2, style=dotted];
m8_134 -> m8_139  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m8_135 -> m8_38  [key=2, style=dotted];
m8_135 -> m8_136  [key=0, style=solid];
m8_135 -> m8_138  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_136 -> m8_53  [key=2, style=dotted];
m8_136 -> m8_137  [key=0, style=solid];
m8_137 -> m8_133  [key=0, style=bold, color=blue];
m8_331 -> m8_9  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_10  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_12  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_50  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_55  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_59  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_63  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_66  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_68  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_73  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_74  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_78  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_82  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_83  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_87  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_90  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_91  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_95  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_100  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_101  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_102  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_103  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_118  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_119  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_120  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_123  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_127  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_130  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_131  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_134  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_135  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_139  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_143  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_152  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_153  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_157  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_160  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_161  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_162  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_169  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_170  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_171  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_176  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_179  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_183  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_184  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_185  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_188  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_191  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_194  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_195  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_196  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_198  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_199  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_212  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_213  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_215  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_221  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_222  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_223  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_224  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_233  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_236  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_237  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_238  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_239  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_248  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_254  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_255  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_256  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_257  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_258  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_268  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_271  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_274  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_275  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_276  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_281  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_284  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_277  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_292  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_299  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_293  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_294  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_295  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_306  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_313  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_314  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_315  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_316  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_324  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_331 -> m8_329  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.StateMachineFacts"];
m8_332 -> m8_78  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m8_333 -> m8_87  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m8_334 -> m8_95  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m8_336 -> m8_139  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m8_338 -> m8_157  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m8_339 -> m8_306  [key=1, style=dashed, color=darkseagreen4, label=anotherState];
m8_339 -> m8_303  [key=1, style=dashed, color=darkseagreen4, label=anotherState];
m8_339 -> m8_309  [key=1, style=dashed, color=darkseagreen4, label=anotherState];
m8_340 -> m8_324  [key=1, style=dashed, color=darkseagreen4, label=exception];
m8_340 -> m8_327  [key=1, style=dashed, color=darkseagreen4, label=exception];
m8_335 -> m8_112  [key=1, style=dashed, color=darkseagreen4, label=job];
m8_337 -> m8_148  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_2  [key=0, style=solid];
m9_1 -> m9_5  [key=2, style=dotted];
m9_2 -> m9_3  [key=0, style=solid];
m9_2 -> m9_6  [key=2, style=dotted];
m9_2 -> m9_7  [key=2, style=dotted];
m9_3 -> m9_4  [key=0, style=solid];
m9_3 -> m9_8  [key=2, style=dotted];
m9_4 -> m9_0  [key=0, style=bold, color=blue];
m9_9 -> m9_10  [key=0, style=solid];
m9_10 -> m9_11  [key=0, style=solid];
m9_10 -> m9_13  [key=2, style=dotted];
m9_11 -> m9_12  [key=0, style=solid];
m9_12 -> m9_9  [key=0, style=bold, color=blue];
m9_22 -> m9_23  [key=0, style=solid];
m9_23 -> m9_24  [key=0, style=solid];
m9_23 -> n25  [key=2, style=dotted];
m9_24 -> m9_22  [key=0, style=bold, color=blue];
m9_30 -> m9_31  [key=0, style=solid];
m9_31 -> m9_32  [key=0, style=solid];
m9_31 -> m9_39  [key=2, style=dotted];
m9_32 -> m9_33  [key=0, style=solid];
m9_32 -> m9_22  [key=2, style=dotted];
m9_33 -> m9_34  [key=0, style=solid];
m9_33 -> m9_40  [key=2, style=dotted];
m9_34 -> m9_35  [key=0, style=solid];
m9_34 -> m9_41  [key=2, style=dotted];
m9_35 -> m9_36  [key=0, style=solid];
m9_35 -> m9_42  [key=2, style=dotted];
m9_36 -> m9_37  [key=0, style=solid];
m9_36 -> m9_43  [key=2, style=dotted];
m9_37 -> m9_38  [key=0, style=solid];
m9_37 -> m9_26  [key=2, style=dotted];
m9_38 -> m9_30  [key=0, style=bold, color=blue];
m9_85 -> m9_86  [key=0, style=solid];
m9_86 -> m9_87  [key=0, style=solid];
m9_86 -> m9_39  [key=2, style=dotted];
m9_87 -> m9_88  [key=0, style=solid];
m9_87 -> m9_22  [key=2, style=dotted];
m9_88 -> m9_89  [key=0, style=solid];
m9_88 -> m9_40  [key=2, style=dotted];
m9_89 -> m9_90  [key=0, style=solid];
m9_89 -> m9_41  [key=2, style=dotted];
m9_90 -> m9_91  [key=0, style=solid];
m9_90 -> m9_42  [key=2, style=dotted];
m9_91 -> m9_92  [key=0, style=solid];
m9_91 -> m9_43  [key=2, style=dotted];
m9_92 -> m9_93  [key=0, style=solid];
m9_92 -> m9_26  [key=2, style=dotted];
m9_93 -> m9_85  [key=0, style=bold, color=blue];
m9_76 -> m9_77  [key=0, style=solid];
m9_77 -> m9_78  [key=0, style=solid];
m9_77 -> m9_39  [key=2, style=dotted];
m9_78 -> m9_79  [key=0, style=solid];
m9_78 -> m9_22  [key=2, style=dotted];
m9_79 -> m9_80  [key=0, style=solid];
m9_79 -> m9_40  [key=2, style=dotted];
m9_80 -> m9_81  [key=0, style=solid];
m9_80 -> m9_41  [key=2, style=dotted];
m9_81 -> m9_82  [key=0, style=solid];
m9_81 -> m9_42  [key=2, style=dotted];
m9_82 -> m9_83  [key=0, style=solid];
m9_82 -> m9_43  [key=2, style=dotted];
m9_83 -> m9_84  [key=0, style=solid];
m9_83 -> m9_26  [key=2, style=dotted];
m9_84 -> m9_76  [key=0, style=bold, color=blue];
m9_14 -> m9_15  [key=0, style=solid];
m9_15 -> m9_16  [key=0, style=solid];
m9_15 -> m9_17  [key=0, style=solid];
m9_16 -> m9_17  [key=0, style=solid];
m9_16 -> m9_0  [key=2, style=dotted];
m9_17 -> m9_14  [key=0, style=bold, color=blue];
m9_44 -> m9_45  [key=0, style=solid];
m9_45 -> m9_46  [key=0, style=solid];
m9_45 -> m9_39  [key=2, style=dotted];
m9_46 -> m9_47  [key=0, style=solid];
m9_46 -> m9_22  [key=2, style=dotted];
m9_47 -> m9_48  [key=0, style=solid];
m9_47 -> m9_40  [key=2, style=dotted];
m9_48 -> m9_49  [key=0, style=solid];
m9_48 -> m9_41  [key=2, style=dotted];
m9_49 -> m9_50  [key=0, style=solid];
m9_49 -> m9_42  [key=2, style=dotted];
m9_50 -> m9_51  [key=0, style=solid];
m9_50 -> m9_43  [key=2, style=dotted];
m9_51 -> m9_52  [key=0, style=solid];
m9_51 -> m9_54  [key=2, style=dotted];
m9_52 -> m9_53  [key=0, style=solid];
m9_52 -> m9_26  [key=2, style=dotted];
m9_53 -> m9_44  [key=0, style=bold, color=blue];
m9_26 -> m9_27  [key=0, style=solid];
m9_27 -> m9_28  [key=0, style=solid];
m9_27 -> m9_29  [key=2, style=dotted];
m9_28 -> m9_26  [key=0, style=bold, color=blue];
m9_64 -> m9_65  [key=0, style=solid];
m9_65 -> m9_66  [key=0, style=solid];
m9_65 -> m9_39  [key=2, style=dotted];
m9_66 -> m9_67  [key=0, style=solid];
m9_66 -> m9_22  [key=2, style=dotted];
m9_67 -> m9_68  [key=0, style=solid];
m9_67 -> m9_40  [key=2, style=dotted];
m9_68 -> m9_69  [key=0, style=solid];
m9_68 -> m9_41  [key=2, style=dotted];
m9_69 -> m9_70  [key=0, style=solid];
m9_69 -> m9_41  [key=2, style=dotted];
m9_70 -> m9_71  [key=0, style=solid];
m9_70 -> m9_42  [key=2, style=dotted];
m9_71 -> m9_72  [key=0, style=solid];
m9_71 -> m9_43  [key=2, style=dotted];
m9_72 -> m9_73  [key=0, style=solid];
m9_72 -> m9_42  [key=2, style=dotted];
m9_73 -> m9_74  [key=0, style=solid];
m9_73 -> m9_43  [key=2, style=dotted];
m9_74 -> m9_75  [key=0, style=solid];
m9_74 -> m9_26  [key=2, style=dotted];
m9_75 -> m9_64  [key=0, style=bold, color=blue];
m9_55 -> m9_56  [key=0, style=solid];
m9_56 -> m9_57  [key=0, style=solid];
m9_56 -> m9_39  [key=2, style=dotted];
m9_57 -> m9_58  [key=0, style=solid];
m9_57 -> m9_22  [key=2, style=dotted];
m9_58 -> m9_59  [key=0, style=solid];
m9_58 -> m9_40  [key=2, style=dotted];
m9_59 -> m9_60  [key=0, style=solid];
m9_59 -> m9_41  [key=2, style=dotted];
m9_60 -> m9_61  [key=0, style=solid];
m9_60 -> m9_42  [key=2, style=dotted];
m9_61 -> m9_62  [key=0, style=solid];
m9_61 -> m9_43  [key=2, style=dotted];
m9_62 -> m9_63  [key=0, style=solid];
m9_62 -> m9_26  [key=2, style=dotted];
m9_63 -> m9_55  [key=0, style=bold, color=blue];
m9_18 -> m9_19  [key=0, style=solid];
m9_19 -> m9_20  [key=0, style=solid];
m9_19 -> m9_21  [key=2, style=dotted];
m9_20 -> m9_18  [key=0, style=bold, color=blue];
m9_94 -> m9_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m9_94 -> m9_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m9_94 -> m9_46  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m9_94 -> m9_52  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m9_94 -> m9_57  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m9_94 -> m9_62  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m9_94 -> m9_66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m9_94 -> m9_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m9_94 -> m9_78  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m9_94 -> m9_83  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m9_94 -> m9_87  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m9_94 -> m9_92  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
}
