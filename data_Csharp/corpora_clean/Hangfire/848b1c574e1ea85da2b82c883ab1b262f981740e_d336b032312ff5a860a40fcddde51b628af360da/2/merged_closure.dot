digraph  {
n56 [label="HangFire.Web.Pages.QueuesPage", span=""];
n0 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Entry HangFire.Web.Pages.QueuesPage.Execute()", span="39-39"];
n1 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''\r\n'')", span="43-43"];
n2 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Layout = new LayoutPage { Title = ''Queues'' }", span="53-53"];
n47 [cluster="HangFire.Web.RazorPage.WriteLiteral(string)", label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="33-33"];
n3 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="var queues = JobStorage.Queues()", span="54-54"];
n48 [cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4"];
n4 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''\r\n'')", span="60-60"];
n49 [cluster="HangFire.Web.JobStorage.Queues()", label="Entry HangFire.Web.JobStorage.Queues()", span="215-215"];
n5 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="queues.Count == 0", span="65-65"];
n8 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label=queues, span="99-99"];
n6 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''    <div class=\''alert alert-warning\''>\r\n        You have no queues yet. Try to enq'' +\r\n''ueue your first job.\r\n    </div>\r\n'')", span="71-72"];
n7 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(@''    <table class=''''table table-striped''''>\r\n        <thead>\r\n            <tr>\r\n                <th>Queue</th>\r\n                <th>Length</th>\r\n                <th>Dequeued</th>\r\n                <th>Next jobs</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n'')", span="84-94"];
n9 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''                <tr>\r\n                    <td>\r\n                        <a href=\'''' +\r\n'''')", span="105-106"];
n45 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''        </tbody>\r\n    </table>\r\n'')", span="343-343"];
n10 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(Request.LinkTo(''/queues/'' + queue.Name))", span="111-111"];
n12 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(queue.Name)", span="121-121"];
n14 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(queue.Length)", span="132-132"];
n16 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(Request.LinkTo(''/queues/dequeued/'' + queue.Name))", span="142-142"];
n18 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(queue.Dequeued)", span="152-152"];
n20 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="queue.FirstJobs.Count == 0", span="168-168"];
n23 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="queue.FirstJobs", span="200-200"];
n11 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''\''>\r\n                            '')", span="116-116"];
n50 [cluster="HttpRequestBase.LinkTo(string)", label="Entry HttpRequestBase.LinkTo(string)", span="8-8"];
n51 [cluster="HangFire.Web.RazorPage.Write(object)", label="Entry HangFire.Web.RazorPage.Write(object)", span="40-40"];
n13 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''\r\n                        </a>\r\n                    </td>\r\n                    <t'' +\r\n''d>'')", span="126-127"];
n15 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''</td>\r\n                    <td>\r\n                        <a href=\'''')", span="137-137"];
n17 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''\''>\r\n                            '')", span="147-147"];
n19 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''    \r\n                        </a>\r\n                    </td>\r\n                  '' +\r\n''  <td>'')", span="160-161"];
n21 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''                        <em>No jobs queued.</em>\r\n'')", span="174-174"];
n22 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(@''                        <table class=''''table table-condensed table-bordered table-inner''''>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Id</th>\r\n                                    <th>Job type</th>\r\n                                    <th>Enqueued</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n'')", span="186-195"];
n24 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''                                    <tr class=\'''')", span="206-206"];
n43 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''                            </tbody>\r\n                        </table>\r\n'')", span="323-323"];
n25 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(!job.Value.InEnqueuedState ? ''obsolete-data'' : null)", span="211-211"];
n26 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''\''>\r\n                                        <td>\r\n                               '' +\r\n''             <a href=\'''')", span="216-217"];
n27 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(Request.LinkTo(''/job/'' + job.Key))", span="222-222"];
n28 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''\''>'')", span="227-227"];
n29 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(HtmlHelper.JobId(job.Key))", span="232-232"];
n30 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''</a>\r\n'')", span="237-237"];
n52 [cluster="HangFire.Web.HtmlHelper.JobId(string)", label="Entry HangFire.Web.HtmlHelper.JobId(string)", span="17-17"];
n53 [cluster="Unk.Write", label="Entry Unk.Write", span=""];
n31 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="!job.Value.InEnqueuedState", span="242-242"];
n32 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''                                                <span title=\''Job\'s state has been'' +\r\n'' changed while fetching data.\'' class=\''glyphicon glyphicon-question-sign\''></span>'' +\r\n''\r\n'')", span="248-250"];
n33 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''                                        </td>\r\n                                  '' +\r\n''      <td>'')", span="260-261"];
n34 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(HtmlHelper.JobType(job.Value.Type))", span="266-266"];
n35 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''</td>\r\n                                        <td>\r\n'')", span="271-271"];
n54 [cluster="HangFire.Web.HtmlHelper.JobType(string)", label="Entry HangFire.Web.HtmlHelper.JobType(string)", span="22-22"];
n36 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="job.Value.EnqueuedAt.HasValue", span="276-276"];
n37 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''                                                <span data-moment=\'''')", span="282-282"];
n42 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''                                        </td>\r\n                                  '' +\r\n''  </tr>\r\n'')", span="312-313"];
n38 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(JobHelper.ToStringTimestamp(job.Value.EnqueuedAt.Value))", span="287-287"];
n39 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''\''>\r\n                                                    '')", span="292-292"];
n55 [cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="55-55"];
n40 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Write(job.Value.EnqueuedAt)", span="297-297"];
n41 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''\r\n                                                </span>\r\n'')", span="302-302"];
n44 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="WriteLiteral(''                    </td>\r\n                </tr>\r\n'')", span="333-333"];
n46 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", label="Exit HangFire.Web.Pages.QueuesPage.Execute()", span="39-39"];
m0_8 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="AspNetCoreDashboardContext.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m0_12 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="AspNetCoreDashboardContext.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m0_13 [cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="AspNetCoreDashboardContext.cs", label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68"];
m0_9 [cluster="Hangfire.States.ProcessingState.SerializeData()", file="AspNetCoreDashboardContext.cs", label="Entry Hangfire.States.ProcessingState.SerializeData()", span="125-125"];
m0_10 [cluster="Hangfire.States.ProcessingState.SerializeData()", file="AspNetCoreDashboardContext.cs", label="return new Dictionary<string, string>\r\n            {\r\n                { ''StartedAt'', JobHelper.SerializeDateTime(StartedAt) },\r\n                { ''ServerId'', ServerId },\r\n                { ''WorkerId'', WorkerId }\r\n            };", span="127-132"];
m0_11 [cluster="Hangfire.States.ProcessingState.SerializeData()", file="AspNetCoreDashboardContext.cs", label="Exit Hangfire.States.ProcessingState.SerializeData()", span="125-125"];
m0_7 [cluster="string.IsNullOrWhiteSpace(string)", file="AspNetCoreDashboardContext.cs", label="Entry string.IsNullOrWhiteSpace(string)", span="0-0"];
m0_0 [cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="AspNetCoreDashboardContext.cs", label="Entry Hangfire.States.ProcessingState.ProcessingState(string, string)", span="37-37"];
m0_1 [cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="AspNetCoreDashboardContext.cs", label="String.IsNullOrWhiteSpace(serverId)", span="39-39"];
m0_3 [cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="AspNetCoreDashboardContext.cs", label="ServerId = serverId", span="41-41"];
m0_5 [cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="AspNetCoreDashboardContext.cs", label="WorkerId = workerId", span="43-43"];
m0_2 [cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="AspNetCoreDashboardContext.cs", label="throw new ArgumentNullException(''serverId'');", span="39-39"];
m0_4 [cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="AspNetCoreDashboardContext.cs", label="StartedAt = DateTime.UtcNow", span="42-42"];
m0_6 [cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="AspNetCoreDashboardContext.cs", label="Exit Hangfire.States.ProcessingState.ProcessingState(string, string)", span="37-37"];
m0_14 [file="AspNetCoreDashboardContext.cs", label="Hangfire.States.ProcessingState", span=""];
m1_158 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="197-197"];
m1_159 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="AspNetCoreDashboardMiddleware.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="199-202"];
m1_160 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n                connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''AnotherValue'', parameter.Value);\r\n            })", span="204-217"];
m1_161 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="197-197"];
m1_309 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="432-432"];
m1_310 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null));\r\n\r\n                Assert.Equal(''context'', exception.ParamName);\r\n            })", span="434-440"];
m1_311 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="432-432"];
m1_308 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="236-236"];
m1_107 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="120-120"];
m1_108 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="AspNetCoreDashboardMiddleware.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="122-125"];
m1_109 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = Job.FromExpression(() => SampleMethod(''wrong''));\r\n\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result);\r\n                Assert.NotNull(result.Job);\r\n                Assert.Equal(''Succeeded'', result.State);\r\n                Assert.Equal(''Arguments'', result.Job.Arguments[0]);\r\n            })", span="127-146"];
m1_110 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="120-120"];
m1_191 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="205-205"];
m1_406 [cluster="System.DateTime.AddHours(double)", file="AspNetCoreDashboardMiddleware.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m1_75 [cluster="HangFire.Common.JobHelper.FromJson<T>(string)", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="30-30"];
m1_3 [cluster="Unk.UseConnection", file="AspNetCoreDashboardMiddleware.cs", label="Entry Unk.UseConnection", span=""];
m1_335 [cluster="string.StartsWith(string)", file="AspNetCoreDashboardMiddleware.cs", label="Entry string.StartsWith(string)", span="0-0"];
m1_368 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="509-509"];
m1_369 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="AspNetCoreDashboardMiddleware.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data)\r\nvalues\r\n('server1', ''),\r\n('server2', '')''", span="511-515"];
m1_370 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.Heartbeat(''server1'');\r\n\r\n                var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime?)x.LastHeartbeat);\r\n\r\n                Assert.NotNull(servers[''server1'']);\r\n                Assert.Null(servers[''server2'']);\r\n            })", span="517-528"];
m1_371 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="509-509"];
m1_394 [cluster="System.TimeSpan.FromMinutes(double)", file="AspNetCoreDashboardMiddleware.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m1_0 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="15-15"];
m1_1 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnection(connection =>\r\n            {\r\n                var transaction = connection.CreateWriteTransaction();\r\n                Assert.NotNull(transaction);\r\n            })", span="17-21"];
m1_2 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="15-15"];
m1_26 [cluster="Unk.Equal", file="AspNetCoreDashboardMiddleware.cs", label="Entry Unk.Equal", span=""];
m1_10 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", span="25-25"];
m1_11 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnection(connection =>\r\n            {\r\n                var @lock = connection.AcquireJobLock(''1'');\r\n                Assert.NotNull(@lock);\r\n            })", span="27-31"];
m1_12 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", span="25-25"];
m1_31 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="106-106"];
m1_79 [cluster="Unk.ToDictionary", file="AspNetCoreDashboardMiddleware.cs", label="Entry Unk.ToDictionary", span=""];
m1_219 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", span="302-302"];
m1_220 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(null, ''default''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="304-310"];
m1_221 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", span="302-302"];
m1_297 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="420-420"];
m1_298 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()));\r\n\r\n                Assert.Equal(''serverId'', exception.ParamName);\r\n            })", span="422-428"];
m1_299 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="420-420"];
m1_202 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="268-268"];
m1_203 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnection(connection =>\r\n            {\r\n                var value = connection.GetJobParameter(''1'', ''hello'');\r\n                Assert.Null(value);\r\n            })", span="270-274"];
m1_204 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="268-268"];
m1_407 [cluster="System.TimeSpan.FromHours(double)", file="AspNetCoreDashboardMiddleware.cs", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
m1_416 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", span="571-571"];
m1_417 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", file="AspNetCoreDashboardMiddleware.cs", label="var connection = new SqlServerConnection(ConnectionUtils.CreateConnection())", span="573-573"];
m1_418 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", file="AspNetCoreDashboardMiddleware.cs", label="action(connection)", span="575-575"];
m1_419 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", span="571-571"];
m1_181 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="244-244"];
m1_182 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="246-252"];
m1_183 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="244-244"];
m1_272 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="380-380"];
m1_273 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)))", span="382-383"];
m1_274 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="380-380"];
m1_408 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", span="562-562"];
m1_409 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="AspNetCoreDashboardMiddleware.cs", label="var sqlConnection = ConnectionUtils.CreateConnection()", span="564-564"];
m1_411 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="AspNetCoreDashboardMiddleware.cs", label="action(sqlConnection, connection)", span="567-567"];
m1_410 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="AspNetCoreDashboardMiddleware.cs", label="var connection = new SqlServerConnection(sqlConnection)", span="565-565"];
m1_412 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", span="562-562"];
m1_25 [cluster="Unk.>", file="AspNetCoreDashboardMiddleware.cs", label="Entry Unk.>", span=""];
m1_98 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="155-155"];
m1_126 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="150-150"];
m1_127 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="152-158"];
m1_128 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="150-150"];
m1_230 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", span="314-314"];
m1_231 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(''1'', null));\r\n\r\n                Assert.Equal(''queue'', exception.ParamName);\r\n            })", span="316-322"];
m1_232 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", span="314-314"];
m1_8 [cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="47-47"];
m1_122 [cluster="int.ToString()", file="AspNetCoreDashboardMiddleware.cs", label="Entry int.ToString()", span="0-0"];
m1_415 [cluster="System.Action<T1, T2>.Invoke(T1, T2)", file="AspNetCoreDashboardMiddleware.cs", label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0"];
m1_32 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", span="50-50"];
m1_34 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", span="50-50"];
m1_209 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="278-278"];
m1_210 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="AspNetCoreDashboardMiddleware.cs", label="string arrangeSql = @''\r\ndeclare @id int\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nset @id = scope_identity()\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@id, @name, @value)\r\nselect @id''", span="280-287"];
m1_211 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single();\r\n\r\n                var value = connection.GetJobParameter(id.ToString(), ''name'');\r\n\r\n                Assert.Equal(''value'', value);\r\n            })", span="289-298"];
m1_212 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="278-278"];
m1_261 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="368-368"];
m1_262 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="370-376"];
m1_263 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="368-368"];
m1_72 [cluster="Unk.Query", file="AspNetCoreDashboardMiddleware.cs", label="Entry Unk.Query", span=""];
m1_319 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="444-444"];
m1_320 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                };\r\n                connection.AnnounceServer(''server'', context1);\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', server.Id);\r\n                Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data);\r\n                Assert.Null(server.HeartBeat);\r\n\r\n                var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                };\r\n                connection.AnnounceServer(''server'', context2);\r\n                var sameServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', sameServer.Id);\r\n                Assert.Contains(''1000'', sameServer.Data);\r\n            })", span="446-471"];
m1_321 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="444-444"];
m1_70 [cluster="System.TimeSpan.FromDays(double)", file="AspNetCoreDashboardMiddleware.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m1_420 [cluster="System.Action<T>.Invoke(T)", file="AspNetCoreDashboardMiddleware.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m1_74 [cluster="Unk.ToString", file="AspNetCoreDashboardMiddleware.cs", label="Entry Unk.ToString", span=""];
m1_77 [cluster="System.DateTime.AddDays(double)", file="AspNetCoreDashboardMiddleware.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m1_9 [cluster="Unk.NotNull", file="AspNetCoreDashboardMiddleware.cs", label="Entry Unk.NotNull", span=""];
m1_30 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="AspNetCoreDashboardMiddleware.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m1_47 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="65-65"];
m1_49 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="65-65"];
m1_218 [cluster="Unk.GetJobParameter", file="AspNetCoreDashboardMiddleware.cs", label="Entry Unk.GetJobParameter", span=""];
m1_396 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="539-539"];
m1_397 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="AspNetCoreDashboardMiddleware.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues (@id, '', @heartbeat)''", span="541-543"];
m1_398 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    });\r\n\r\n                connection.RemoveTimedOutServers(TimeSpan.FromHours(15));\r\n\r\n                var liveServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server2'', liveServer.Id);\r\n            })", span="545-559"];
m1_399 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="539-539"];
m1_358 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="502-502"];
m1_359 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null)))", span="504-505"];
m1_360 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="502-502"];
m1_137 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="162-162"];
m1_138 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="164-170"];
m1_139 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="162-162"];
m1_357 [cluster="Unk.NotEqual", file="AspNetCoreDashboardMiddleware.cs", label="Entry Unk.NotEqual", span=""];
m1_385 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="532-532"];
m1_386 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))))", span="534-535"];
m1_387 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="532-532"];
m1_106 [cluster="Unk.Null", file="AspNetCoreDashboardMiddleware.cs", label="Entry Unk.Null", span=""];
m1_147 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="174-174"];
m1_148 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="AspNetCoreDashboardMiddleware.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="176-179"];
m1_149 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''Value'', parameter.Value);\r\n            })", span="181-193"];
m1_150 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="174-174"];
m1_395 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="277-277"];
m1_414 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", span="35-35"];
m1_307 [cluster="HangFire.Server.ServerContext.ServerContext()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.Server.ServerContext.ServerContext()", span="18-18"];
m1_99 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="110-110"];
m1_100 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetJobData(''1'');\r\n                Assert.Null(result);\r\n            })", span="112-116"];
m1_101 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="110-110"];
m1_50 [cluster="Unk.UseConnections", file="AspNetCoreDashboardMiddleware.cs", label="Entry Unk.UseConnections", span=""];
m1_400 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="545-559"];
m1_4 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="17-21"];
m1_5 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var transaction = connection.CreateWriteTransaction()", span="19-19"];
m1_6 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.NotNull(transaction)", span="20-20"];
m1_7 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="17-21"];
m1_13 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="27-31"];
m1_14 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var @lock = connection.AcquireJobLock(''1'')", span="29-29"];
m1_15 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.NotNull(@lock)", span="30-30"];
m1_16 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="27-31"];
m1_21 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="37-46"];
m1_22 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero))", span="39-43"];
m1_28 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero)", span="40-43"];
m1_23 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''job'', exception.ParamName)", span="45-45"];
m1_27 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="40-43"];
m1_24 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="37-46"];
m1_29 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="40-43"];
m1_35 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="52-61"];
m1_37 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''parameters'', exception.ParamName)", span="60-60"];
m1_39 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="55-58"];
m1_38 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="52-61"];
m1_41 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="55-58"];
m1_43 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="56-56"];
m1_44 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="SampleMethod(''hello'')", span="56-56"];
m1_45 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="56-56"];
m1_51 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="67-99"];
m1_55 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var sqlJob = sql.Query(''select * from HangFire.Job'').Single()", span="77-77"];
m1_66 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value)", span="92-95"];
m1_53 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.NotNull(jobId)", span="74-74"];
m1_80 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="70-70"];
m1_56 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(jobId, sqlJob.Id.ToString())", span="78-78"];
m1_57 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(null, (int?) sqlJob.StateId)", span="79-79"];
m1_58 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(null, (string) sqlJob.StateName)", span="80-80"];
m1_59 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData)", span="82-82"];
m1_60 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="invocationData.Arguments = sqlJob.Arguments", span="83-83"];
m1_65 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.True(DateTime.UtcNow < sqlJob.ExpireAt && sqlJob.ExpireAt < DateTime.UtcNow.AddDays(1))", span="90-90"];
m1_61 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var job = invocationData.Deserialize()", span="85-85"];
m1_62 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(typeof(ConnectionFacts), job.Type)", span="86-86"];
m1_63 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''SampleMethod'', job.Method.Name)", span="87-87"];
m1_64 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''Hello'', job.Arguments[0])", span="88-88"];
m1_67 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''Value1'', parameters[''Key1''])", span="97-97"];
m1_83 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="95-95"];
m1_86 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="95-95"];
m1_68 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''Value2'', parameters[''Key2''])", span="98-98"];
m1_69 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="67-99"];
m1_81 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="SampleMethod(''Hello'')", span="70-70"];
m1_82 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="70-70"];
m1_84 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="(string) x.Name", span="95-95"];
m1_85 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="95-95"];
m1_87 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="(string) x.Value", span="95-95"];
m1_88 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="95-95"];
m1_92 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="105-106"];
m1_93 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null))", span="105-106"];
m1_96 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.GetJobData(null)", span="106-106"];
m1_94 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="105-106"];
m1_95 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="106-106"];
m1_97 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="106-106"];
m1_102 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="112-116"];
m1_103 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var result = connection.GetJobData(''1'')", span="114-114"];
m1_104 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Null(result)", span="115-115"];
m1_105 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="112-116"];
m1_113 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="131-138"];
m1_111 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="127-146"];
m1_112 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var job = Job.FromExpression(() => SampleMethod(''wrong''))", span="129-129"];
m1_114 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="140-140"];
m1_123 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="129-129"];
m1_115 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.NotNull(result)", span="142-142"];
m1_116 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.NotNull(result.Job)", span="143-143"];
m1_117 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''Succeeded'', result.State)", span="144-144"];
m1_118 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''Arguments'', result.Job.Arguments[0])", span="145-145"];
m1_119 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="127-146"];
m1_124 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="SampleMethod(''wrong'')", span="129-129"];
m1_125 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="129-129"];
m1_129 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="152-158"];
m1_130 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''))", span="154-155"];
m1_134 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.SetJobParameter(null, ''name'', ''value'')", span="155-155"];
m1_131 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''id'', exception.ParamName)", span="157-157"];
m1_133 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="155-155"];
m1_132 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="152-158"];
m1_135 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="155-155"];
m1_140 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="164-170"];
m1_141 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''))", span="166-167"];
m1_145 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.SetJobParameter(''1'', null, ''value'')", span="167-167"];
m1_142 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''name'', exception.ParamName)", span="169-169"];
m1_144 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="167-167"];
m1_143 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="164-170"];
m1_146 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="167-167"];
m1_152 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var job = sql.Query(arrangeSql).Single()", span="183-183"];
m1_151 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="181-193"];
m1_154 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="186-186"];
m1_155 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="188-190"];
m1_153 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="string jobId = job.Id.ToString()", span="184-184"];
m1_156 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''Value'', parameter.Value)", span="192-192"];
m1_157 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="181-193"];
m1_163 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var job = sql.Query(arrangeSql).Single()", span="206-206"];
m1_162 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="204-217"];
m1_165 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="209-209"];
m1_166 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'')", span="210-210"];
m1_167 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="212-214"];
m1_164 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="string jobId = job.Id.ToString()", span="207-207"];
m1_168 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''AnotherValue'', parameter.Value)", span="216-216"];
m1_169 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="204-217"];
m1_175 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var job = sql.Query(arrangeSql).Single()", span="230-230"];
m1_174 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="228-240"];
m1_177 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.SetJobParameter(jobId, ''Name'', null)", span="233-233"];
m1_178 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="235-237"];
m1_176 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="string jobId = job.Id.ToString()", span="231-231"];
m1_179 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal((string) null, parameter.Value)", span="239-239"];
m1_180 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="228-240"];
m1_184 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="246-252"];
m1_185 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''))", span="248-249"];
m1_189 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.GetJobParameter(null, ''hello'')", span="249-249"];
m1_186 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''id'', exception.ParamName)", span="251-251"];
m1_188 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="249-249"];
m1_187 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="246-252"];
m1_190 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="249-249"];
m1_195 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="258-264"];
m1_196 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null))", span="260-261"];
m1_200 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.GetJobParameter(''1'', null)", span="261-261"];
m1_197 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''name'', exception.ParamName)", span="263-263"];
m1_199 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="261-261"];
m1_198 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="258-264"];
m1_201 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="261-261"];
m1_205 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="270-274"];
m1_206 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var value = connection.GetJobParameter(''1'', ''hello'')", span="272-272"];
m1_207 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Null(value)", span="273-273"];
m1_208 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="270-274"];
m1_214 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single()", span="291-293"];
m1_213 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="289-298"];
m1_215 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var value = connection.GetJobParameter(id.ToString(), ''name'')", span="295-295"];
m1_216 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''value'', value)", span="297-297"];
m1_217 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="289-298"];
m1_222 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="304-310"];
m1_223 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(null, ''default''))", span="306-307"];
m1_227 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.DeleteJobFromQueue(null, ''default'')", span="307-307"];
m1_224 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''id'', exception.ParamName)", span="309-309"];
m1_226 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="307-307"];
m1_225 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="304-310"];
m1_228 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="307-307"];
m1_233 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="316-322"];
m1_234 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(''1'', null))", span="318-319"];
m1_238 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.DeleteJobFromQueue(''1'', null)", span="319-319"];
m1_235 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''queue'', exception.ParamName)", span="321-321"];
m1_237 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="319-319"];
m1_236 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="316-322"];
m1_239 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="319-319"];
m1_245 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="sql.Execute(arrangeSql, new { id = ''1'', queue = ''default'' })", span="334-334"];
m1_244 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="332-340"];
m1_246 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.DeleteJobFromQueue(''1'', ''default'')", span="336-336"];
m1_247 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single()", span="338-338"];
m1_248 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(0, count)", span="339-339"];
m1_249 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="332-340"];
m1_256 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    { \r\n                        new { id = ''1'', queue = ''critical'' },\r\n                        new { id = ''2'', queue = ''default'' } \r\n                    })", span="352-358"];
m1_255 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="350-364"];
m1_257 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.DeleteJobFromQueue(''1'', ''default'')", span="360-360"];
m1_258 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single()", span="362-362"];
m1_259 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(2, count)", span="363-363"];
m1_260 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="350-364"];
m1_264 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="370-376"];
m1_265 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1))", span="372-373"];
m1_269 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.GetFirstByLowestScoreFromSet(null, 0, 1)", span="373-373"];
m1_266 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''key'', exception.ParamName)", span="375-375"];
m1_268 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="373-373"];
m1_267 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="370-376"];
m1_270 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="373-373"];
m1_275 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="382-383"];
m1_276 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1))", span="382-383"];
m1_279 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)", span="383-383"];
m1_277 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="382-383"];
m1_278 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="383-383"];
m1_280 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="383-383"];
m1_284 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="389-395"];
m1_285 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1)", span="391-392"];
m1_286 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Null(result)", span="394-394"];
m1_287 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="389-395"];
m1_293 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="sql.Execute(arrangeSql)", span="411-411"];
m1_292 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="409-416"];
m1_294 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0)", span="413-413"];
m1_295 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''-1.0'', result)", span="415-415"];
m1_296 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="409-416"];
m1_300 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="422-428"];
m1_301 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()))", span="424-425"];
m1_305 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.AnnounceServer(null, new ServerContext())", span="425-425"];
m1_302 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''serverId'', exception.ParamName)", span="427-427"];
m1_304 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="425-425"];
m1_303 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="422-428"];
m1_306 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="425-425"];
m1_312 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="434-440"];
m1_313 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null))", span="436-437"];
m1_317 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.AnnounceServer(''server'', null)", span="437-437"];
m1_314 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''context'', exception.ParamName)", span="439-439"];
m1_316 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="437-437"];
m1_315 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="434-440"];
m1_318 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="437-437"];
m1_322 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="446-471"];
m1_323 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                }", span="448-452"];
m1_324 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.AnnounceServer(''server'', context1)", span="453-453"];
m1_325 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="455-455"];
m1_330 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.AnnounceServer(''server'', context2)", span="467-467"];
m1_331 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var sameServer = sql.Query(''select * from HangFire.Server'').Single()", span="468-468"];
m1_326 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''server'', server.Id)", span="456-456"];
m1_327 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data)", span="457-459"];
m1_328 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Null(server.HeartBeat)", span="460-460"];
m1_329 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                }", span="462-466"];
m1_332 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''server'', sameServer.Id)", span="469-469"];
m1_333 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Contains(''1000'', sameServer.Data)", span="470-470"];
m1_334 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="446-471"];
m1_340 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="477-478"];
m1_341 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null))", span="477-478"];
m1_344 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.RemoveServer(null)", span="478-478"];
m1_342 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="477-478"];
m1_343 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="478-478"];
m1_345 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="478-478"];
m1_352 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="sql.Execute(arrangeSql)", span="492-492"];
m1_351 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="490-498"];
m1_353 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.RemoveServer(''Server1'')", span="494-494"];
m1_354 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="496-496"];
m1_355 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase)", span="497-497"];
m1_356 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="490-498"];
m1_361 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="504-505"];
m1_362 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null))", span="504-505"];
m1_365 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.Heartbeat(null)", span="505-505"];
m1_363 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="504-505"];
m1_364 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="505-505"];
m1_366 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="505-505"];
m1_373 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="sql.Execute(arrangeSql)", span="519-519"];
m1_372 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="517-528"];
m1_374 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.Heartbeat(''server1'')", span="521-521"];
m1_375 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime?)x.LastHeartbeat)", span="523-524"];
m1_376 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.NotNull(servers[''server1''])", span="526-526"];
m1_379 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="524-524"];
m1_382 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="524-524"];
m1_377 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Null(servers[''server2''])", span="527-527"];
m1_378 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="517-528"];
m1_380 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="(string)x.Id", span="524-524"];
m1_381 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="524-524"];
m1_383 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="(DateTime?)x.LastHeartbeat", span="524-524"];
m1_384 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="524-524"];
m1_388 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="534-535"];
m1_389 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5)))", span="534-535"];
m1_392 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))", span="535-535"];
m1_390 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="534-535"];
m1_391 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Entry lambda expression", span="535-535"];
m1_393 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="535-535"];
m1_401 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    })", span="547-553"];
m1_402 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="connection.RemoveTimedOutServers(TimeSpan.FromHours(15))", span="555-555"];
m1_403 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="var liveServer = sql.Query(''select * from HangFire.Server'').Single()", span="557-557"];
m1_404 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Assert.Equal(''server2'', liveServer.Id)", span="558-558"];
m1_405 [cluster="lambda expression", file="AspNetCoreDashboardMiddleware.cs", label="Exit lambda expression", span="545-559"];
m1_229 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="216-216"];
m1_46 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", span="579-579"];
m1_421 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", span="579-579"];
m1_170 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="221-221"];
m1_171 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="AspNetCoreDashboardMiddleware.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="223-226"];
m1_172 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', null);\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal((string) null, parameter.Value);\r\n            })", span="228-240"];
m1_173 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="221-221"];
m1_136 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="191-191"];
m1_192 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="256-256"];
m1_193 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="258-264"];
m1_194 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="256-256"];
m1_281 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="387-387"];
m1_282 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1);\r\n\r\n                Assert.Null(result);\r\n            })", span="389-395"];
m1_283 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="387-387"];
m1_271 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="225-225"];
m1_336 [cluster="Unk.Contains", file="AspNetCoreDashboardMiddleware.cs", label="Entry Unk.Contains", span=""];
m1_121 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m1_17 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="52-52"];
m1_18 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="35-35"];
m1_19 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''job'', exception.ParamName);\r\n            })", span="37-46"];
m1_20 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="35-35"];
m1_71 [cluster="Unk.NotEmpty", file="AspNetCoreDashboardMiddleware.cs", label="Entry Unk.NotEmpty", span=""];
m1_73 [cluster="Unk.Single", file="AspNetCoreDashboardMiddleware.cs", label="Entry Unk.Single", span=""];
m1_251 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", span="344-344"];
m1_252 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", file="AspNetCoreDashboardMiddleware.cs", label="string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@id, @queue)''", span="346-348"];
m1_253 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    { \r\n                        new { id = ''1'', queue = ''critical'' },\r\n                        new { id = ''2'', queue = ''default'' } \r\n                    }); \r\n\r\n                connection.DeleteJobFromQueue(''1'', ''default'');\r\n\r\n                var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single();\r\n                Assert.Equal(2, count);\r\n            })", span="350-364"];
m1_254 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", span="344-344"];
m1_347 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", span="482-482"];
m1_348 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", file="AspNetCoreDashboardMiddleware.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data)\r\nvalues \r\n('Server1', ''),\r\n('Server2', '')''", span="484-488"];
m1_349 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.RemoveServer(''Server1'');\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase);\r\n            })", span="490-498"];
m1_350 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", span="482-482"];
m1_78 [cluster="Unk.True", file="AspNetCoreDashboardMiddleware.cs", label="Entry Unk.True", span=""];
m1_250 [cluster="Unk.Execute", file="AspNetCoreDashboardMiddleware.cs", label="Entry Unk.Execute", span=""];
m1_76 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m1_346 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="259-259"];
m1_42 [cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="119-119"];
m1_413 [cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m1_367 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="268-268"];
m1_288 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="399-399"];
m1_289 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="AspNetCoreDashboardMiddleware.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], Score, Value)\r\nvalues \r\n('key', 1.0, '1.0'),\r\n('key', -1.0, '-1.0'),\r\n('key', -5.0, '-5.0'),\r\n('another-key', -2.0, '-2.0')''", span="401-407"];
m1_290 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0);\r\n                \r\n                Assert.Equal(''-1.0'', result);\r\n            })", span="409-416"];
m1_291 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="399-399"];
m1_89 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="103-103"];
m1_90 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null)))", span="105-106"];
m1_91 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="103-103"];
m1_120 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
m1_240 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", span="326-326"];
m1_241 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", file="AspNetCoreDashboardMiddleware.cs", label="string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@id, @queue)''", span="328-330"];
m1_242 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql, new { id = ''1'', queue = ''default'' });\r\n\r\n                connection.DeleteJobFromQueue(''1'', ''default'');\r\n\r\n                var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single();\r\n                Assert.Equal(0, count);\r\n            })", span="332-340"];
m1_243 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", span="326-326"];
m1_337 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="475-475"];
m1_338 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null)))", span="477-478"];
m1_339 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="AspNetCoreDashboardMiddleware.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="475-475"];
m1_422 [file="AspNetCoreDashboardMiddleware.cs", label="HangFire.SqlServer.Tests.ConnectionFacts", span=""];
m1_423 [file="AspNetCoreDashboardMiddleware.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m1_424 [file="AspNetCoreDashboardMiddleware.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m1_425 [file="AspNetCoreDashboardMiddleware.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m1_426 [file="AspNetCoreDashboardMiddleware.cs", label=arrangeSql, span=""];
m1_427 [file="AspNetCoreDashboardMiddleware.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m1_428 [file="AspNetCoreDashboardMiddleware.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m1_429 [file="AspNetCoreDashboardMiddleware.cs", label=arrangeSql, span=""];
m1_430 [file="AspNetCoreDashboardMiddleware.cs", label=arrangeSql, span=""];
m1_431 [file="AspNetCoreDashboardMiddleware.cs", label=arrangeSql, span=""];
m1_432 [file="AspNetCoreDashboardMiddleware.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m1_433 [file="AspNetCoreDashboardMiddleware.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m1_434 [file="AspNetCoreDashboardMiddleware.cs", label=arrangeSql, span=""];
m1_435 [file="AspNetCoreDashboardMiddleware.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m1_436 [file="AspNetCoreDashboardMiddleware.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m1_437 [file="AspNetCoreDashboardMiddleware.cs", label=arrangeSql, span=""];
m1_438 [file="AspNetCoreDashboardMiddleware.cs", label=arrangeSql, span=""];
m1_439 [file="AspNetCoreDashboardMiddleware.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m1_440 [file="AspNetCoreDashboardMiddleware.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m1_441 [file="AspNetCoreDashboardMiddleware.cs", label=arrangeSql, span=""];
m1_442 [file="AspNetCoreDashboardMiddleware.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m1_443 [file="AspNetCoreDashboardMiddleware.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m1_444 [file="AspNetCoreDashboardMiddleware.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m1_445 [file="AspNetCoreDashboardMiddleware.cs", label=arrangeSql, span=""];
m1_446 [file="AspNetCoreDashboardMiddleware.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m1_447 [file="AspNetCoreDashboardMiddleware.cs", label=arrangeSql, span=""];
m1_448 [file="AspNetCoreDashboardMiddleware.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m1_449 [file="AspNetCoreDashboardMiddleware.cs", label=arrangeSql, span=""];
m3_158 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="197-197"];
m3_159 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="BackgroundJobServer.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="199-202"];
m3_160 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="BackgroundJobServer.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n                connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''AnotherValue'', parameter.Value);\r\n            })", span="204-217"];
m3_161 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="197-197"];
m3_309 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="432-432"];
m3_310 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="BackgroundJobServer.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null));\r\n\r\n                Assert.Equal(''context'', exception.ParamName);\r\n            })", span="434-440"];
m3_311 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="432-432"];
m3_308 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="236-236"];
m3_107 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="120-120"];
m3_110 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="120-120"];
m3_191 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="205-205"];
m3_406 [cluster="System.DateTime.AddHours(double)", file="BackgroundJobServer.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m3_75 [cluster="HangFire.Common.JobHelper.FromJson<T>(string)", file="BackgroundJobServer.cs", label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="30-30"];
m3_3 [cluster="Unk.UseConnection", file="BackgroundJobServer.cs", label="Entry Unk.UseConnection", span=""];
m3_335 [cluster="string.StartsWith(string)", file="BackgroundJobServer.cs", label="Entry string.StartsWith(string)", span="0-0"];
m3_368 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="509-509"];
m3_369 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="BackgroundJobServer.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data)\r\nvalues\r\n('server1', ''),\r\n('server2', '')''", span="511-515"];
m3_370 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="BackgroundJobServer.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.Heartbeat(''server1'');\r\n\r\n                var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime?)x.LastHeartbeat);\r\n\r\n                Assert.NotNull(servers[''server1'']);\r\n                Assert.Null(servers[''server2'']);\r\n            })", span="517-528"];
m3_371 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="509-509"];
m3_394 [cluster="System.TimeSpan.FromMinutes(double)", file="BackgroundJobServer.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m3_0 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="15-15"];
m3_1 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="BackgroundJobServer.cs", label="UseConnection(connection =>\r\n            {\r\n                var transaction = connection.CreateWriteTransaction();\r\n                Assert.NotNull(transaction);\r\n            })", span="17-21"];
m3_2 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="15-15"];
m3_26 [cluster="Unk.Equal", file="BackgroundJobServer.cs", label="Entry Unk.Equal", span=""];
m3_10 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", span="25-25"];
m3_12 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", span="25-25"];
m3_31 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="106-106"];
m3_79 [cluster="Unk.ToDictionary", file="BackgroundJobServer.cs", label="Entry Unk.ToDictionary", span=""];
m3_219 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", span="302-302"];
m3_220 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", file="BackgroundJobServer.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(null, ''default''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="304-310"];
m3_221 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", span="302-302"];
m3_297 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="420-420"];
m3_298 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="BackgroundJobServer.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()));\r\n\r\n                Assert.Equal(''serverId'', exception.ParamName);\r\n            })", span="422-428"];
m3_299 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="420-420"];
m3_202 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="268-268"];
m3_203 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="BackgroundJobServer.cs", label="UseConnection(connection =>\r\n            {\r\n                var value = connection.GetJobParameter(''1'', ''hello'');\r\n                Assert.Null(value);\r\n            })", span="270-274"];
m3_204 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="268-268"];
m3_407 [cluster="System.TimeSpan.FromHours(double)", file="BackgroundJobServer.cs", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
m3_416 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", span="571-571"];
m3_417 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", file="BackgroundJobServer.cs", label="var connection = new SqlServerConnection(ConnectionUtils.CreateConnection())", span="573-573"];
m3_418 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", file="BackgroundJobServer.cs", label="action(connection)", span="575-575"];
m3_419 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", span="571-571"];
m3_181 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="244-244"];
m3_182 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="BackgroundJobServer.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="246-252"];
m3_183 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="244-244"];
m3_272 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="380-380"];
m3_273 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="BackgroundJobServer.cs", label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)))", span="382-383"];
m3_274 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="380-380"];
m3_408 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", span="562-562"];
m3_409 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="BackgroundJobServer.cs", label="var sqlConnection = ConnectionUtils.CreateConnection()", span="564-564"];
m3_411 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="BackgroundJobServer.cs", label="action(sqlConnection, connection)", span="567-567"];
m3_410 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="BackgroundJobServer.cs", label="var connection = new SqlServerConnection(sqlConnection)", span="565-565"];
m3_412 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", span="562-562"];
m3_25 [cluster="Unk.>", file="BackgroundJobServer.cs", label="Entry Unk.>", span=""];
m3_98 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="155-155"];
m3_126 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="150-150"];
m3_127 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="BackgroundJobServer.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="152-158"];
m3_128 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="150-150"];
m3_230 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", span="314-314"];
m3_231 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", file="BackgroundJobServer.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(''1'', null));\r\n\r\n                Assert.Equal(''queue'', exception.ParamName);\r\n            })", span="316-322"];
m3_232 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", span="314-314"];
m3_8 [cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="47-47"];
m3_122 [cluster="int.ToString()", file="BackgroundJobServer.cs", label="Entry int.ToString()", span="0-0"];
m3_415 [cluster="System.Action<T1, T2>.Invoke(T1, T2)", file="BackgroundJobServer.cs", label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0"];
m3_32 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", span="50-50"];
m3_33 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", file="BackgroundJobServer.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''parameters'', exception.ParamName);\r\n            })", span="52-61"];
m3_34 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", span="50-50"];
m3_209 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="278-278"];
m3_210 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="BackgroundJobServer.cs", label="string arrangeSql = @''\r\ndeclare @id int\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nset @id = scope_identity()\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@id, @name, @value)\r\nselect @id''", span="280-287"];
m3_211 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="BackgroundJobServer.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single();\r\n\r\n                var value = connection.GetJobParameter(id.ToString(), ''name'');\r\n\r\n                Assert.Equal(''value'', value);\r\n            })", span="289-298"];
m3_212 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="278-278"];
m3_261 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="368-368"];
m3_262 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="BackgroundJobServer.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="370-376"];
m3_263 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="368-368"];
m3_72 [cluster="Unk.Query", file="BackgroundJobServer.cs", label="Entry Unk.Query", span=""];
m3_319 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="444-444"];
m3_320 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="BackgroundJobServer.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                };\r\n                connection.AnnounceServer(''server'', context1);\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', server.Id);\r\n                Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data);\r\n                Assert.Null(server.HeartBeat);\r\n\r\n                var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                };\r\n                connection.AnnounceServer(''server'', context2);\r\n                var sameServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', sameServer.Id);\r\n                Assert.Contains(''1000'', sameServer.Data);\r\n            })", span="446-471"];
m3_321 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="444-444"];
m3_70 [cluster="System.TimeSpan.FromDays(double)", file="BackgroundJobServer.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m3_420 [cluster="System.Action<T>.Invoke(T)", file="BackgroundJobServer.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m3_74 [cluster="Unk.ToString", file="BackgroundJobServer.cs", label="Entry Unk.ToString", span=""];
m3_77 [cluster="System.DateTime.AddDays(double)", file="BackgroundJobServer.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m3_9 [cluster="Unk.NotNull", file="BackgroundJobServer.cs", label="Entry Unk.NotNull", span=""];
m3_30 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="BackgroundJobServer.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m3_47 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="65-65"];
m3_48 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", file="BackgroundJobServer.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    TimeSpan.FromDays(1));\r\n\r\n                Assert.NotNull(jobId);\r\n                Assert.NotEmpty(jobId);\r\n\r\n                var sqlJob = sql.Query(''select * from HangFire.Job'').Single();\r\n                Assert.Equal(jobId, sqlJob.Id.ToString());\r\n                Assert.Equal(null, (int?) sqlJob.StateId);\r\n                Assert.Equal(null, (string) sqlJob.StateName);\r\n\r\n                var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData);\r\n                invocationData.Arguments = sqlJob.Arguments;\r\n\r\n                var job = invocationData.Deserialize();\r\n                Assert.Equal(typeof(ConnectionFacts), job.Type);\r\n                Assert.Equal(''SampleMethod'', job.Method.Name);\r\n                Assert.Equal(''Hello'', job.Arguments[0]);\r\n\r\n                Assert.True(DateTime.UtcNow < sqlJob.ExpireAt && sqlJob.ExpireAt < DateTime.UtcNow.AddDays(1));\r\n\r\n                var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value);\r\n\r\n                Assert.Equal(''Value1'', parameters[''Key1'']);\r\n                Assert.Equal(''Value2'', parameters[''Key2'']);\r\n            })", span="67-99"];
m3_49 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="65-65"];
m3_218 [cluster="Unk.GetJobParameter", file="BackgroundJobServer.cs", label="Entry Unk.GetJobParameter", span=""];
m3_396 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="539-539"];
m3_397 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="BackgroundJobServer.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues (@id, '', @heartbeat)''", span="541-543"];
m3_398 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="BackgroundJobServer.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    });\r\n\r\n                connection.RemoveTimedOutServers(TimeSpan.FromHours(15));\r\n\r\n                var liveServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server2'', liveServer.Id);\r\n            })", span="545-559"];
m3_399 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="539-539"];
m3_358 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="502-502"];
m3_359 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="BackgroundJobServer.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null)))", span="504-505"];
m3_360 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="502-502"];
m3_137 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="162-162"];
m3_138 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="BackgroundJobServer.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="164-170"];
m3_139 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="162-162"];
m3_357 [cluster="Unk.NotEqual", file="BackgroundJobServer.cs", label="Entry Unk.NotEqual", span=""];
m3_385 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="532-532"];
m3_386 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="BackgroundJobServer.cs", label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))))", span="534-535"];
m3_387 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="532-532"];
m3_106 [cluster="Unk.Null", file="BackgroundJobServer.cs", label="Entry Unk.Null", span=""];
m3_147 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="174-174"];
m3_148 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="BackgroundJobServer.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="176-179"];
m3_149 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="BackgroundJobServer.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''Value'', parameter.Value);\r\n            })", span="181-193"];
m3_150 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="174-174"];
m3_395 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="277-277"];
m3_414 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", span="35-35"];
m3_307 [cluster="HangFire.Server.ServerContext.ServerContext()", file="BackgroundJobServer.cs", label="Entry HangFire.Server.ServerContext.ServerContext()", span="18-18"];
m3_99 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="110-110"];
m3_101 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="110-110"];
m3_50 [cluster="Unk.UseConnections", file="BackgroundJobServer.cs", label="Entry Unk.UseConnections", span=""];
m3_400 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="545-559"];
m3_4 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="17-21"];
m3_5 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var transaction = connection.CreateWriteTransaction()", span="19-19"];
m3_6 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.NotNull(transaction)", span="20-20"];
m3_7 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="17-21"];
m3_13 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="27-31"];
m3_14 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var @lock = connection.AcquireJobLock(''1'')", span="29-29"];
m3_15 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.NotNull(@lock)", span="30-30"];
m3_16 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="27-31"];
m3_21 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="37-46"];
m3_22 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero))", span="39-43"];
m3_28 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero)", span="40-43"];
m3_23 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''job'', exception.ParamName)", span="45-45"];
m3_27 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="40-43"];
m3_24 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="37-46"];
m3_29 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="40-43"];
m3_35 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="52-61"];
m3_36 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero))", span="54-58"];
m3_40 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero)", span="55-58"];
m3_37 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''parameters'', exception.ParamName)", span="60-60"];
m3_39 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="55-58"];
m3_38 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="52-61"];
m3_41 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="55-58"];
m3_43 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="56-56"];
m3_44 [cluster="lambda expression", file="BackgroundJobServer.cs", label="SampleMethod(''hello'')", span="56-56"];
m3_45 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="56-56"];
m3_51 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="67-99"];
m3_52 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    TimeSpan.FromDays(1))", span="69-72"];
m3_55 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var sqlJob = sql.Query(''select * from HangFire.Job'').Single()", span="77-77"];
m3_66 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value)", span="92-95"];
m3_53 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.NotNull(jobId)", span="74-74"];
m3_80 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="70-70"];
m3_54 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.NotEmpty(jobId)", span="75-75"];
m3_56 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(jobId, sqlJob.Id.ToString())", span="78-78"];
m3_57 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(null, (int?) sqlJob.StateId)", span="79-79"];
m3_58 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(null, (string) sqlJob.StateName)", span="80-80"];
m3_59 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData)", span="82-82"];
m3_60 [cluster="lambda expression", file="BackgroundJobServer.cs", label="invocationData.Arguments = sqlJob.Arguments", span="83-83"];
m3_65 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.True(DateTime.UtcNow < sqlJob.ExpireAt && sqlJob.ExpireAt < DateTime.UtcNow.AddDays(1))", span="90-90"];
m3_61 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var job = invocationData.Deserialize()", span="85-85"];
m3_62 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(typeof(ConnectionFacts), job.Type)", span="86-86"];
m3_63 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''SampleMethod'', job.Method.Name)", span="87-87"];
m3_64 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''Hello'', job.Arguments[0])", span="88-88"];
m3_67 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''Value1'', parameters[''Key1''])", span="97-97"];
m3_83 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="95-95"];
m3_86 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="95-95"];
m3_68 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''Value2'', parameters[''Key2''])", span="98-98"];
m3_69 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="67-99"];
m3_81 [cluster="lambda expression", file="BackgroundJobServer.cs", label="SampleMethod(''Hello'')", span="70-70"];
m3_82 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="70-70"];
m3_84 [cluster="lambda expression", file="BackgroundJobServer.cs", label="(string) x.Name", span="95-95"];
m3_85 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="95-95"];
m3_87 [cluster="lambda expression", file="BackgroundJobServer.cs", label="(string) x.Value", span="95-95"];
m3_88 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="95-95"];
m3_92 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="105-106"];
m3_93 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null))", span="105-106"];
m3_96 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.GetJobData(null)", span="106-106"];
m3_94 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="105-106"];
m3_95 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="106-106"];
m3_97 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="106-106"];
m3_102 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="112-116"];
m3_103 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var result = connection.GetJobData(''1'')", span="114-114"];
m3_104 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Null(result)", span="115-115"];
m3_105 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="112-116"];
m3_111 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="127-146"];
m3_112 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var job = Job.FromExpression(() => SampleMethod(''wrong''))", span="129-129"];
m3_114 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="140-140"];
m3_123 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="129-129"];
m3_115 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.NotNull(result)", span="142-142"];
m3_117 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''Succeeded'', result.State)", span="144-144"];
m3_118 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''Arguments'', result.Job.Arguments[0])", span="145-145"];
m3_119 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="127-146"];
m3_124 [cluster="lambda expression", file="BackgroundJobServer.cs", label="SampleMethod(''wrong'')", span="129-129"];
m3_125 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="129-129"];
m3_129 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="152-158"];
m3_130 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''))", span="154-155"];
m3_134 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.SetJobParameter(null, ''name'', ''value'')", span="155-155"];
m3_131 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''id'', exception.ParamName)", span="157-157"];
m3_133 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="155-155"];
m3_132 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="152-158"];
m3_135 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="155-155"];
m3_140 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="164-170"];
m3_141 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''))", span="166-167"];
m3_145 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.SetJobParameter(''1'', null, ''value'')", span="167-167"];
m3_142 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''name'', exception.ParamName)", span="169-169"];
m3_144 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="167-167"];
m3_143 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="164-170"];
m3_146 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="167-167"];
m3_152 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var job = sql.Query(arrangeSql).Single()", span="183-183"];
m3_151 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="181-193"];
m3_154 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="186-186"];
m3_155 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="188-190"];
m3_153 [cluster="lambda expression", file="BackgroundJobServer.cs", label="string jobId = job.Id.ToString()", span="184-184"];
m3_156 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''Value'', parameter.Value)", span="192-192"];
m3_157 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="181-193"];
m3_163 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var job = sql.Query(arrangeSql).Single()", span="206-206"];
m3_162 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="204-217"];
m3_165 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="209-209"];
m3_166 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'')", span="210-210"];
m3_167 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="212-214"];
m3_164 [cluster="lambda expression", file="BackgroundJobServer.cs", label="string jobId = job.Id.ToString()", span="207-207"];
m3_168 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''AnotherValue'', parameter.Value)", span="216-216"];
m3_169 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="204-217"];
m3_175 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var job = sql.Query(arrangeSql).Single()", span="230-230"];
m3_174 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="228-240"];
m3_177 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.SetJobParameter(jobId, ''Name'', null)", span="233-233"];
m3_178 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="235-237"];
m3_176 [cluster="lambda expression", file="BackgroundJobServer.cs", label="string jobId = job.Id.ToString()", span="231-231"];
m3_179 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal((string) null, parameter.Value)", span="239-239"];
m3_180 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="228-240"];
m3_184 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="246-252"];
m3_185 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''))", span="248-249"];
m3_189 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.GetJobParameter(null, ''hello'')", span="249-249"];
m3_186 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''id'', exception.ParamName)", span="251-251"];
m3_188 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="249-249"];
m3_187 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="246-252"];
m3_190 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="249-249"];
m3_195 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="258-264"];
m3_196 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null))", span="260-261"];
m3_200 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.GetJobParameter(''1'', null)", span="261-261"];
m3_197 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''name'', exception.ParamName)", span="263-263"];
m3_199 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="261-261"];
m3_198 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="258-264"];
m3_201 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="261-261"];
m3_205 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="270-274"];
m3_206 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var value = connection.GetJobParameter(''1'', ''hello'')", span="272-272"];
m3_207 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Null(value)", span="273-273"];
m3_208 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="270-274"];
m3_214 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single()", span="291-293"];
m3_213 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="289-298"];
m3_215 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var value = connection.GetJobParameter(id.ToString(), ''name'')", span="295-295"];
m3_216 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''value'', value)", span="297-297"];
m3_217 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="289-298"];
m3_222 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="304-310"];
m3_223 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(null, ''default''))", span="306-307"];
m3_227 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.DeleteJobFromQueue(null, ''default'')", span="307-307"];
m3_224 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''id'', exception.ParamName)", span="309-309"];
m3_226 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="307-307"];
m3_225 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="304-310"];
m3_228 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="307-307"];
m3_233 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="316-322"];
m3_234 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(''1'', null))", span="318-319"];
m3_238 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.DeleteJobFromQueue(''1'', null)", span="319-319"];
m3_235 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''queue'', exception.ParamName)", span="321-321"];
m3_237 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="319-319"];
m3_236 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="316-322"];
m3_239 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="319-319"];
m3_245 [cluster="lambda expression", file="BackgroundJobServer.cs", label="sql.Execute(arrangeSql, new { id = ''1'', queue = ''default'' })", span="334-334"];
m3_244 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="332-340"];
m3_246 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.DeleteJobFromQueue(''1'', ''default'')", span="336-336"];
m3_247 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single()", span="338-338"];
m3_248 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(0, count)", span="339-339"];
m3_249 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="332-340"];
m3_256 [cluster="lambda expression", file="BackgroundJobServer.cs", label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    { \r\n                        new { id = ''1'', queue = ''critical'' },\r\n                        new { id = ''2'', queue = ''default'' } \r\n                    })", span="352-358"];
m3_255 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="350-364"];
m3_257 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.DeleteJobFromQueue(''1'', ''default'')", span="360-360"];
m3_258 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single()", span="362-362"];
m3_259 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(2, count)", span="363-363"];
m3_260 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="350-364"];
m3_264 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="370-376"];
m3_265 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1))", span="372-373"];
m3_269 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.GetFirstByLowestScoreFromSet(null, 0, 1)", span="373-373"];
m3_266 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''key'', exception.ParamName)", span="375-375"];
m3_268 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="373-373"];
m3_267 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="370-376"];
m3_270 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="373-373"];
m3_275 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="382-383"];
m3_276 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1))", span="382-383"];
m3_279 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)", span="383-383"];
m3_277 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="382-383"];
m3_278 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="383-383"];
m3_280 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="383-383"];
m3_284 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="389-395"];
m3_285 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1)", span="391-392"];
m3_286 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Null(result)", span="394-394"];
m3_287 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="389-395"];
m3_293 [cluster="lambda expression", file="BackgroundJobServer.cs", label="sql.Execute(arrangeSql)", span="411-411"];
m3_292 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="409-416"];
m3_294 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0)", span="413-413"];
m3_295 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''-1.0'', result)", span="415-415"];
m3_296 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="409-416"];
m3_300 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="422-428"];
m3_301 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()))", span="424-425"];
m3_305 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.AnnounceServer(null, new ServerContext())", span="425-425"];
m3_302 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''serverId'', exception.ParamName)", span="427-427"];
m3_304 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="425-425"];
m3_303 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="422-428"];
m3_306 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="425-425"];
m3_312 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="434-440"];
m3_313 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null))", span="436-437"];
m3_317 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.AnnounceServer(''server'', null)", span="437-437"];
m3_314 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''context'', exception.ParamName)", span="439-439"];
m3_316 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="437-437"];
m3_315 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="434-440"];
m3_318 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="437-437"];
m3_322 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="446-471"];
m3_323 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                }", span="448-452"];
m3_324 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.AnnounceServer(''server'', context1)", span="453-453"];
m3_325 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="455-455"];
m3_330 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.AnnounceServer(''server'', context2)", span="467-467"];
m3_331 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var sameServer = sql.Query(''select * from HangFire.Server'').Single()", span="468-468"];
m3_326 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''server'', server.Id)", span="456-456"];
m3_327 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data)", span="457-459"];
m3_328 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Null(server.HeartBeat)", span="460-460"];
m3_329 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                }", span="462-466"];
m3_332 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''server'', sameServer.Id)", span="469-469"];
m3_333 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Contains(''1000'', sameServer.Data)", span="470-470"];
m3_334 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="446-471"];
m3_340 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="477-478"];
m3_341 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null))", span="477-478"];
m3_344 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.RemoveServer(null)", span="478-478"];
m3_342 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="477-478"];
m3_343 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="478-478"];
m3_345 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="478-478"];
m3_352 [cluster="lambda expression", file="BackgroundJobServer.cs", label="sql.Execute(arrangeSql)", span="492-492"];
m3_351 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="490-498"];
m3_353 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.RemoveServer(''Server1'')", span="494-494"];
m3_354 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="496-496"];
m3_355 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase)", span="497-497"];
m3_356 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="490-498"];
m3_361 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="504-505"];
m3_362 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null))", span="504-505"];
m3_365 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.Heartbeat(null)", span="505-505"];
m3_363 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="504-505"];
m3_364 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="505-505"];
m3_366 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="505-505"];
m3_373 [cluster="lambda expression", file="BackgroundJobServer.cs", label="sql.Execute(arrangeSql)", span="519-519"];
m3_372 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="517-528"];
m3_374 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.Heartbeat(''server1'')", span="521-521"];
m3_375 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime?)x.LastHeartbeat)", span="523-524"];
m3_376 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.NotNull(servers[''server1''])", span="526-526"];
m3_379 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="524-524"];
m3_382 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="524-524"];
m3_377 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Null(servers[''server2''])", span="527-527"];
m3_378 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="517-528"];
m3_380 [cluster="lambda expression", file="BackgroundJobServer.cs", label="(string)x.Id", span="524-524"];
m3_381 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="524-524"];
m3_383 [cluster="lambda expression", file="BackgroundJobServer.cs", label="(DateTime?)x.LastHeartbeat", span="524-524"];
m3_384 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="524-524"];
m3_388 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="534-535"];
m3_389 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5)))", span="534-535"];
m3_392 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))", span="535-535"];
m3_390 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="534-535"];
m3_391 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Entry lambda expression", span="535-535"];
m3_393 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="535-535"];
m3_401 [cluster="lambda expression", file="BackgroundJobServer.cs", label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    })", span="547-553"];
m3_402 [cluster="lambda expression", file="BackgroundJobServer.cs", label="connection.RemoveTimedOutServers(TimeSpan.FromHours(15))", span="555-555"];
m3_403 [cluster="lambda expression", file="BackgroundJobServer.cs", label="var liveServer = sql.Query(''select * from HangFire.Server'').Single()", span="557-557"];
m3_404 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Assert.Equal(''server2'', liveServer.Id)", span="558-558"];
m3_405 [cluster="lambda expression", file="BackgroundJobServer.cs", label="Exit lambda expression", span="545-559"];
m3_229 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="216-216"];
m3_46 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", span="579-579"];
m3_421 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", span="579-579"];
m3_170 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="221-221"];
m3_171 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="BackgroundJobServer.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="223-226"];
m3_172 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="BackgroundJobServer.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', null);\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal((string) null, parameter.Value);\r\n            })", span="228-240"];
m3_173 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="221-221"];
m3_136 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="191-191"];
m3_192 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="256-256"];
m3_193 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="BackgroundJobServer.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="258-264"];
m3_194 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="256-256"];
m3_281 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="387-387"];
m3_282 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="BackgroundJobServer.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1);\r\n\r\n                Assert.Null(result);\r\n            })", span="389-395"];
m3_283 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="387-387"];
m3_271 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="225-225"];
m3_336 [cluster="Unk.Contains", file="BackgroundJobServer.cs", label="Entry Unk.Contains", span=""];
m3_121 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="BackgroundJobServer.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m3_17 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="52-52"];
m3_18 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="35-35"];
m3_19 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="BackgroundJobServer.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''job'', exception.ParamName);\r\n            })", span="37-46"];
m3_20 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="35-35"];
m3_71 [cluster="Unk.NotEmpty", file="BackgroundJobServer.cs", label="Entry Unk.NotEmpty", span=""];
m3_73 [cluster="Unk.Single", file="BackgroundJobServer.cs", label="Entry Unk.Single", span=""];
m3_251 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", span="344-344"];
m3_252 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", file="BackgroundJobServer.cs", label="string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@id, @queue)''", span="346-348"];
m3_253 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", file="BackgroundJobServer.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    { \r\n                        new { id = ''1'', queue = ''critical'' },\r\n                        new { id = ''2'', queue = ''default'' } \r\n                    }); \r\n\r\n                connection.DeleteJobFromQueue(''1'', ''default'');\r\n\r\n                var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single();\r\n                Assert.Equal(2, count);\r\n            })", span="350-364"];
m3_254 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", span="344-344"];
m3_347 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", span="482-482"];
m3_348 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", file="BackgroundJobServer.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data)\r\nvalues \r\n('Server1', ''),\r\n('Server2', '')''", span="484-488"];
m3_349 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", file="BackgroundJobServer.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.RemoveServer(''Server1'');\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase);\r\n            })", span="490-498"];
m3_350 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", span="482-482"];
m3_78 [cluster="Unk.True", file="BackgroundJobServer.cs", label="Entry Unk.True", span=""];
m3_250 [cluster="Unk.Execute", file="BackgroundJobServer.cs", label="Entry Unk.Execute", span=""];
m3_76 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="BackgroundJobServer.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m3_346 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="259-259"];
m3_42 [cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="BackgroundJobServer.cs", label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="119-119"];
m3_413 [cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m3_367 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="268-268"];
m3_288 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="399-399"];
m3_289 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="BackgroundJobServer.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], Score, Value)\r\nvalues \r\n('key', 1.0, '1.0'),\r\n('key', -1.0, '-1.0'),\r\n('key', -5.0, '-5.0'),\r\n('another-key', -2.0, '-2.0')''", span="401-407"];
m3_290 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="BackgroundJobServer.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0);\r\n                \r\n                Assert.Equal(''-1.0'', result);\r\n            })", span="409-416"];
m3_291 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="399-399"];
m3_89 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="103-103"];
m3_90 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="BackgroundJobServer.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null)))", span="105-106"];
m3_91 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="103-103"];
m3_120 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="BackgroundJobServer.cs", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
m3_240 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", span="326-326"];
m3_241 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", file="BackgroundJobServer.cs", label="string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@id, @queue)''", span="328-330"];
m3_242 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", file="BackgroundJobServer.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql, new { id = ''1'', queue = ''default'' });\r\n\r\n                connection.DeleteJobFromQueue(''1'', ''default'');\r\n\r\n                var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single();\r\n                Assert.Equal(0, count);\r\n            })", span="332-340"];
m3_243 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", span="326-326"];
m3_337 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="BackgroundJobServer.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="475-475"];
m3_338 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="BackgroundJobServer.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null)))", span="477-478"];
m3_339 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="BackgroundJobServer.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="475-475"];
m3_422 [file="BackgroundJobServer.cs", label="HangFire.SqlServer.Tests.ConnectionFacts", span=""];
m3_423 [file="BackgroundJobServer.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m3_424 [file="BackgroundJobServer.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m3_425 [file="BackgroundJobServer.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m3_426 [file="BackgroundJobServer.cs", label=arrangeSql, span=""];
m3_427 [file="BackgroundJobServer.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m3_428 [file="BackgroundJobServer.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m3_429 [file="BackgroundJobServer.cs", label=arrangeSql, span=""];
m3_430 [file="BackgroundJobServer.cs", label=arrangeSql, span=""];
m3_431 [file="BackgroundJobServer.cs", label=arrangeSql, span=""];
m3_432 [file="BackgroundJobServer.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m3_433 [file="BackgroundJobServer.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m3_434 [file="BackgroundJobServer.cs", label=arrangeSql, span=""];
m3_435 [file="BackgroundJobServer.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m3_436 [file="BackgroundJobServer.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m3_437 [file="BackgroundJobServer.cs", label=arrangeSql, span=""];
m3_438 [file="BackgroundJobServer.cs", label=arrangeSql, span=""];
m3_439 [file="BackgroundJobServer.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m3_440 [file="BackgroundJobServer.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m3_441 [file="BackgroundJobServer.cs", label=arrangeSql, span=""];
m3_442 [file="BackgroundJobServer.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m3_443 [file="BackgroundJobServer.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m3_444 [file="BackgroundJobServer.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m3_445 [file="BackgroundJobServer.cs", label=arrangeSql, span=""];
m3_446 [file="BackgroundJobServer.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m3_447 [file="BackgroundJobServer.cs", label=arrangeSql, span=""];
m3_448 [file="BackgroundJobServer.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m3_449 [file="BackgroundJobServer.cs", label=arrangeSql, span=""];
m5_0 [cluster="HangFire.RedisFactory.Create()", file="ContinuationsSupportAttribute.cs", label="Entry HangFire.RedisFactory.Create()", span="42-42"];
m5_1 [cluster="HangFire.RedisFactory.Create()", file="ContinuationsSupportAttribute.cs", label="return new RedisClient(\r\n                Host, \r\n                Port,\r\n                Password,\r\n                Db);", span="44-48"];
m5_2 [cluster="HangFire.RedisFactory.Create()", file="ContinuationsSupportAttribute.cs", label="Exit HangFire.RedisFactory.Create()", span="42-42"];
m5_3 [cluster="RedisClient.cstr", file="ContinuationsSupportAttribute.cs", label="Entry RedisClient.cstr", span=""];
m6_6 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="CountersAggregator.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m6_0 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="CountersAggregator.cs", label="Entry Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="40-40"];
m6_1 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="CountersAggregator.cs", label="storage == null", span="42-42"];
m6_2 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="CountersAggregator.cs", label="throw new ArgumentNullException(nameof(storage));", span="42-42"];
m6_3 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="CountersAggregator.cs", label="_storage = storage", span="44-44"];
m6_4 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="CountersAggregator.cs", label="_interval = interval", span="45-45"];
m6_5 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="CountersAggregator.cs", label="Exit Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="40-40"];
m6_27 [cluster="Hangfire.SqlServer.CountersAggregator.GetAggregationQuery(Hangfire.SqlServer.SqlServerStorage)", file="CountersAggregator.cs", label="Entry Hangfire.SqlServer.CountersAggregator.GetAggregationQuery(Hangfire.SqlServer.SqlServerStorage)", span="82-82"];
m6_34 [cluster="Hangfire.SqlServer.CountersAggregator.GetAggregationQuery(Hangfire.SqlServer.SqlServerStorage)", file="CountersAggregator.cs", label="return \r\n$@''DECLARE @RecordsToAggregate TABLE\r\n(\r\n	[Key] NVARCHAR(100) NOT NULL,\r\n	[Value] SMALLINT NOT NULL,\r\n	[ExpireAt] DATETIME NULL\r\n)\r\n\r\nSET XACT_ABORT ON\r\nSET TRANSACTION ISOLATION LEVEL READ COMMITTED\r\nBEGIN TRAN\r\n\r\nDELETE TOP (@count) C\r\nOUTPUT DELETED.[Key], DELETED.[Value], DELETED.[ExpireAt] INTO @RecordsToAggregate\r\nFROM [{storage.SchemaName}].[Counter] C WITH (READPAST, XLOCK, INDEX(0))\r\n\r\nSET NOCOUNT ON\r\n\r\n;MERGE [{storage.SchemaName}].[AggregatedCounter] WITH (HOLDLOCK) AS [Target]\r\nUSING (\r\n	SELECT [Key], SUM([Value]) as [Value], MAX([ExpireAt]) AS [ExpireAt] FROM @RecordsToAggregate\r\n	GROUP BY [Key]) AS [Source] ([Key], [Value], [ExpireAt])\r\nON [Target].[Key] = [Source].[Key]\r\nWHEN MATCHED THEN UPDATE SET \r\n	[Target].[Value] = [Target].[Value] + [Source].[Value],\r\n	[Target].[ExpireAt] = (SELECT MAX([ExpireAt]) FROM (VALUES ([Source].ExpireAt), ([Target].[ExpireAt])) AS MaxExpireAt([ExpireAt]))\r\nWHEN NOT MATCHED THEN INSERT ([Key], [Value], [ExpireAt]) VALUES ([Source].[Key], [Source].[Value], [Source].[ExpireAt]);\r\n\r\nCOMMIT TRAN'';", span="84-112"];
m6_35 [cluster="Hangfire.SqlServer.CountersAggregator.GetAggregationQuery(Hangfire.SqlServer.SqlServerStorage)", file="CountersAggregator.cs", label="Exit Hangfire.SqlServer.CountersAggregator.GetAggregationQuery(Hangfire.SqlServer.SqlServerStorage)", span="82-82"];
m6_33 [cluster="System.Type.ToString()", file="CountersAggregator.cs", label="Entry System.Type.ToString()", span="0-0"];
m6_28 [cluster="Unk.Execute", file="CountersAggregator.cs", label="Entry Unk.Execute", span=""];
m6_23 [cluster="Hangfire.Logging.ILog.Trace(string)", file="CountersAggregator.cs", label="Entry Hangfire.Logging.ILog.Trace(string)", span="234-234"];
m6_8 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="CountersAggregator.cs", label="Entry Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", span="48-48"];
m6_13 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="CountersAggregator.cs", label="cancellationToken.Wait(DelayBetweenPasses)", span="66-66"];
m6_14 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="CountersAggregator.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="67-67"];
m6_17 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="CountersAggregator.cs", label="cancellationToken.Wait(_interval)", span="74-74"];
m6_10 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="CountersAggregator.cs", label="int removedCount = 0", span="52-52"];
m6_11 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="CountersAggregator.cs", label="_storage.UseConnection(null, connection =>\r\n                {\r\n                    removedCount = connection.Execute(\r\n                        GetAggregationQuery(_storage),\r\n                        new { now = DateTime.UtcNow, count = NumberOfRecordsInSinglePass },\r\n                        commandTimeout: 0);\r\n                })", span="56-62"];
m6_12 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="CountersAggregator.cs", label="removedCount >= NumberOfRecordsInSinglePass", span="64-64"];
m6_15 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="CountersAggregator.cs", label="removedCount >= NumberOfRecordsInSinglePass", span="70-70"];
m6_18 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="CountersAggregator.cs", label="Exit Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", span="48-48"];
m6_21 [cluster="System.Threading.CancellationToken.Wait(System.TimeSpan)", file="CountersAggregator.cs", label="Entry System.Threading.CancellationToken.Wait(System.TimeSpan)", span="40-40"];
m6_20 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection, System.Action<DbConnection>)", file="CountersAggregator.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection, System.Action<DbConnection>)", span="171-171"];
m6_29 [cluster="Hangfire.SqlServer.CountersAggregator.ToString()", file="CountersAggregator.cs", label="Entry Hangfire.SqlServer.CountersAggregator.ToString()", span="77-77"];
m6_30 [cluster="Hangfire.SqlServer.CountersAggregator.ToString()", file="CountersAggregator.cs", label="return GetType().ToString();", span="79-79"];
m6_31 [cluster="Hangfire.SqlServer.CountersAggregator.ToString()", file="CountersAggregator.cs", label="Exit Hangfire.SqlServer.CountersAggregator.ToString()", span="77-77"];
m6_7 [cluster="Unk.nameof", file="CountersAggregator.cs", label="Entry Unk.nameof", span=""];
m6_32 [cluster="object.GetType()", file="CountersAggregator.cs", label="Entry object.GetType()", span="0-0"];
m6_24 [cluster="lambda expression", file="CountersAggregator.cs", label="Entry lambda expression", span="56-62"];
m6_25 [cluster="lambda expression", file="CountersAggregator.cs", label="removedCount = connection.Execute(\r\n                        GetAggregationQuery(_storage),\r\n                        new { now = DateTime.UtcNow, count = NumberOfRecordsInSinglePass },\r\n                        commandTimeout: 0)", span="58-61"];
m6_26 [cluster="lambda expression", file="CountersAggregator.cs", label="Exit lambda expression", span="56-62"];
m6_22 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="CountersAggregator.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m6_19 [cluster="Hangfire.Logging.ILog.Debug(string)", file="CountersAggregator.cs", label="Entry Hangfire.Logging.ILog.Debug(string)", span="116-116"];
m6_36 [file="CountersAggregator.cs", label="Hangfire.SqlServer.CountersAggregator", span=""];
m7_8 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="DashboardContext.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m7_0 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs", label="Entry Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", span="24-24"];
m7_1 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs", label="storage == null", span="26-26"];
m7_2 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs", label="throw new ArgumentNullException(nameof(storage));", span="26-26"];
m7_3 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs", label="options == null", span="27-27"];
m7_4 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs", label="throw new ArgumentNullException(nameof(options));", span="27-27"];
m7_5 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs", label="Storage = storage", span="29-29"];
m7_6 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs", label="Options = options", span="30-30"];
m7_7 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs", label="Exit Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", span="24-24"];
m7_17 [cluster="Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage)", file="DashboardContext.cs", label="Entry Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage)", span="41-41"];
m7_9 [cluster="Unk.nameof", file="DashboardContext.cs", label="Entry Unk.nameof", span=""];
m7_10 [cluster="Hangfire.Dashboard.DashboardContext.GetBackgroundJobClient()", file="DashboardContext.cs", label="Entry Hangfire.Dashboard.DashboardContext.GetBackgroundJobClient()", span="41-41"];
m7_11 [cluster="Hangfire.Dashboard.DashboardContext.GetBackgroundJobClient()", file="DashboardContext.cs", label="return new BackgroundJobClient(Storage);", span="43-43"];
m7_12 [cluster="Hangfire.Dashboard.DashboardContext.GetBackgroundJobClient()", file="DashboardContext.cs", label="Exit Hangfire.Dashboard.DashboardContext.GetBackgroundJobClient()", span="41-41"];
m7_14 [cluster="Hangfire.Dashboard.DashboardContext.GetRecurringJobManager()", file="DashboardContext.cs", label="Entry Hangfire.Dashboard.DashboardContext.GetRecurringJobManager()", span="46-46"];
m7_15 [cluster="Hangfire.Dashboard.DashboardContext.GetRecurringJobManager()", file="DashboardContext.cs", label="return new RecurringJobManager(Storage);", span="48-48"];
m7_16 [cluster="Hangfire.Dashboard.DashboardContext.GetRecurringJobManager()", file="DashboardContext.cs", label="Exit Hangfire.Dashboard.DashboardContext.GetRecurringJobManager()", span="46-46"];
m7_13 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage)", file="DashboardContext.cs", label="Entry Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage)", span="74-74"];
m7_18 [file="DashboardContext.cs", label="Hangfire.Dashboard.DashboardContext", span=""];
m8_45 [cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="DelayedJobScheduler.cs", label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="33-33"];
m8_10 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="Write(Request.LinkTo(''/queues/'' + queue.Name))", span="111-111"];
m8_63 [cluster="Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", span="28-28"];
m8_62 [cluster="Hangfire.JobStorage.GetConnection()", file="DelayedJobScheduler.cs", label="Entry Hangfire.JobStorage.GetConnection()", span="56-56"];
m8_2 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="Layout = new LayoutPage { Title = ''Queues'' }", span="53-53"];
m8_3 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="var queues = JobStorage.Queues()", span="54-54"];
m8_47 [cluster="HangFire.Web.JobStorage.Queues()", file="DelayedJobScheduler.cs", label="Entry HangFire.Web.JobStorage.Queues()", span="207-207"];
m8_48 [cluster="HttpRequestBase.LinkTo(string)", file="DelayedJobScheduler.cs", label="Entry HttpRequestBase.LinkTo(string)", span="8-8"];
m8_65 [cluster="Hangfire.Logging.ILog.DebugException(string, System.Exception)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Logging.ILog.DebugException(string, System.Exception)", span="132-132"];
m8_23 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="Write(!job.Value.InEnqueuedState ? ''obsolete-data'' : null)", span="200-200"];
m8_30 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="WriteLiteral(''                                                <span title=\''Job\'s state has been'' +\r\n'' changed while fetching data.\'' class=\''glyphicon glyphicon-question-sign\''></span>'' +\r\n''\r\n'')", span="237-239"];
m8_31 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="WriteLiteral(''                                        </td>\r\n                                  '' +\r\n''      <td>'')", span="249-250"];
m8_29 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="!job.Value.InEnqueuedState", span="231-231"];
m8_53 [cluster="Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", file="DelayedJobScheduler.cs", label="var resource = ''locks:schedulepoller''", span="184-184"];
m8_51 [cluster="Unk.Write", file="DelayedJobScheduler.cs", label="Entry Unk.Write", span=""];
m8_64 [cluster="System.Func<T, TResult>.Invoke(T)", file="DelayedJobScheduler.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m8_50 [cluster="HangFire.Web.HtmlHelper.JobId(string)", file="DelayedJobScheduler.cs", label="Entry HangFire.Web.HtmlHelper.JobId(string)", span="17-17"];
m8_11 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="WriteLiteral(''\''>\r\n                            '')", span="116-116"];
m8_26 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="WriteLiteral(''\''>'')", span="216-216"];
m8_27 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="Write(HtmlHelper.JobId(job.Key))", span="221-221"];
m8_28 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="WriteLiteral(''</a>\r\n'')", span="226-226"];
m8_46 [cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="DelayedJobScheduler.cs", label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4"];
m8_52 [cluster="HangFire.Web.HtmlHelper.JobType(string)", file="DelayedJobScheduler.cs", label="Entry HangFire.Web.HtmlHelper.JobType(string)", span="22-22"];
m8_0 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="Entry HangFire.Web.Pages.QueuesPage.Execute()", span="39-39"];
m8_1 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="WriteLiteral(''\r\n'')", span="43-43"];
m8_33 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="WriteLiteral(''</td>\r\n                                        <td>\r\n'')", span="260-260"];
m8_38 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="Write(job.Value.EnqueuedAt)", span="286-286"];
m8_34 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="job.Value.EnqueuedAt.HasValue", span="265-265"];
m8_35 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="WriteLiteral(''                                                <span data-moment=\'''')", span="271-271"];
m8_40 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="WriteLiteral(''                                        </td>\r\n                                  '' +\r\n''  </tr>\r\n'')", span="301-302"];
m8_36 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="Write(JobHelper.ToStringTimestamp(job.Value.EnqueuedAt.Value))", span="276-276"];
m8_41 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="WriteLiteral(''                            </tbody>\r\n                        </table>\r\n'')", span="312-312"];
m8_37 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="WriteLiteral(''\''>\r\n                                                    '')", span="281-281"];
m8_39 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="WriteLiteral(''\r\n                                                </span>\r\n'')", span="291-291"];
m8_43 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="WriteLiteral(''        </tbody>\r\n    </table>\r\n'')", span="332-332"];
m8_42 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="WriteLiteral(''                    </td>\r\n                </tr>\r\n'')", span="322-322"];
m8_44 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="Exit HangFire.Web.Pages.QueuesPage.Execute()", span="39-39"];
m8_24 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DelayedJobScheduler.cs", label="WriteLiteral(''\''>\r\n                                        <td>\r\n                               '' +\r\n''             <a href=\'''')", span="205-206"];
m8_6 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", color=green, community=0, file="DelayedJobScheduler.cs", label="throw new ArgumentNullException(nameof(stateChanger));", prediction=0, span="107-107"];
m8_5 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="DelayedJobScheduler.cs", label="stateChanger == null", span="107-107"];
m8_14 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="throw new ArgumentNullException(nameof(context));", prediction=0, span="116-116"];
m8_8 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="DelayedJobScheduler.cs", label="_pollingDelay = pollingDelay", span="110-110"];
m8_13 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="context == null", span="116-116"];
m8_15 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="var jobsEnqueued = 0", span="118-118"];
m8_4 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", span="105-105"];
m8_7 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="DelayedJobScheduler.cs", label="_stateChanger = stateChanger", span="109-109"];
m8_9 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="DelayedJobScheduler.cs", label="Exit Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", span="105-105"];
m8_12 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="114-114"];
m8_16 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="EnqueueNextScheduledJob(context)", span="120-120"];
m8_17 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="jobsEnqueued++", span="122-122"];
m8_19 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="jobsEnqueued != 0", span="130-130"];
m8_22 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="Exit Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="114-114"];
m8_25 [cluster="Hangfire.Server.BackgroundProcessContext.Wait(System.TimeSpan)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Server.BackgroundProcessContext.Wait(System.TimeSpan)", span="55-55"];
m8_32 [cluster="Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", span="182-182"];
m8_18 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="context.IsShutdownRequested", span="124-124"];
m8_21 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="context.Wait(_pollingDelay)", span="135-135"];
m8_49 [cluster="Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", file="DelayedJobScheduler.cs", label="Entry Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", span="25-25"];
m8_54 [cluster="Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", file="DelayedJobScheduler.cs", label="HangFire.Web.Pages.QueuesPage", span=""];
m8_56 [cluster="Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", file="DelayedJobScheduler.cs", label="return action(connection);", span="190-190"];
m8_55 [cluster="Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", file="DelayedJobScheduler.cs", label="connection.AcquireDistributedLock(resource, DefaultLockTimeout)", span="188-188"];
m8_58 [cluster="Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", file="DelayedJobScheduler.cs", label="e.Resource == resource", span="193-193"];
m8_57 [cluster="Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", file="DelayedJobScheduler.cs", label=DistributedLockTimeoutException, span="193-193"];
m8_60 [cluster="Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", file="DelayedJobScheduler.cs", label="return default(T);", span="201-201"];
m8_61 [cluster="Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", file="DelayedJobScheduler.cs", label="Exit Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", span="182-182"];
m8_66 [file="DelayedJobScheduler.cs", label="Hangfire.Server.DelayedJobScheduler", span=""];
m8_67 [file="DelayedJobScheduler.cs", label="Hangfire.Server.BackgroundProcessContext", span=""];
m9_30 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Method()", file="ExpirationManager.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Method()", span="187-187"];
m9_165 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Method()", file="ExpirationManager.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Method()", span="187-187"];
m9_16 [cluster="Mock<IState>.cstr", file="ExpirationManager.cs", label="Entry Mock<IState>.cstr", span=""];
m9_40 [cluster="Unk.Equal", file="ExpirationManager.cs", label="Entry Unk.Equal", span=""];
m9_45 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", file="ExpirationManager.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", span="46-46"];
m9_46 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", file="ExpirationManager.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobClient(_storage.Object, null, _stateChanger.Object))", span="48-49"];
m9_47 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", file="ExpirationManager.cs", label="Assert.Equal(''factory'', exception.ParamName)", span="51-51"];
m9_48 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", file="ExpirationManager.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", span="46-46"];
m9_100 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsOccurringExceptions_IntoItsOwnException()", file="ExpirationManager.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsOccurringExceptions_IntoItsOwnException()", span="114-114"];
m9_101 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsOccurringExceptions_IntoItsOwnException()", file="ExpirationManager.cs", label="var client = CreateClient()", span="116-116"];
m9_103 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsOccurringExceptions_IntoItsOwnException()", file="ExpirationManager.cs", label="var exception = Assert.Throws<CreateJobFailedException>(\r\n                () => client.Create(_job, _state.Object))", span="120-121"];
m9_104 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsOccurringExceptions_IntoItsOwnException()", file="ExpirationManager.cs", label="Assert.NotNull(exception.InnerException)", span="123-123"];
m9_105 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsOccurringExceptions_IntoItsOwnException()", file="ExpirationManager.cs", label="Assert.IsType<InvalidOperationException>(exception.InnerException)", span="124-124"];
m9_106 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsOccurringExceptions_IntoItsOwnException()", file="ExpirationManager.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsOccurringExceptions_IntoItsOwnException()", span="114-114"];
m9_63 [cluster="Unk.DoesNotThrow", file="ExpirationManager.cs", label="Entry Unk.DoesNotThrow", span=""];
m9_86 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_DelegatesBackgroundJobCreation_ToFactory()", file="ExpirationManager.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_DelegatesBackgroundJobCreation_ToFactory()", span="94-94"];
m9_87 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_DelegatesBackgroundJobCreation_ToFactory()", file="ExpirationManager.cs", label="var client = CreateClient()", span="96-96"];
m9_88 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_DelegatesBackgroundJobCreation_ToFactory()", file="ExpirationManager.cs", label="client.Create(_job, _state.Object)", span="98-98"];
m9_89 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_DelegatesBackgroundJobCreation_ToFactory()", file="ExpirationManager.cs", label="_factory.Verify(x => x.Create(It.IsNotNull<CreateContext>()))", span="100-100"];
m9_90 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_DelegatesBackgroundJobCreation_ToFactory()", file="ExpirationManager.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_DelegatesBackgroundJobCreation_ToFactory()", span="94-94"];
m9_85 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="ExpirationManager.cs", label="Entry Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="106-106"];
m9_36 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="ExpirationManager.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37"];
m9_37 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="ExpirationManager.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobClient(null, _factory.Object, _stateChanger.Object))", span="39-40"];
m9_38 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="ExpirationManager.cs", label="Assert.Equal(''storage'', exception.ParamName)", span="42-42"];
m9_39 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="ExpirationManager.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37"];
m9_34 [cluster="Unk.>", file="ExpirationManager.cs", label="Entry Unk.>", span=""];
m9_68 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="ExpirationManager.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", span="72-72"];
m9_69 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="ExpirationManager.cs", label="var client = CreateClient()", span="74-74"];
m9_70 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="ExpirationManager.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => client.Create(null, _state.Object))", span="76-77"];
m9_71 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="ExpirationManager.cs", label="Assert.Equal(''job'', exception.ParamName)", span="79-79"];
m9_72 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="ExpirationManager.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", span="72-72"];
m9_59 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()", file="ExpirationManager.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()", span="64-64"];
m9_60 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()", file="ExpirationManager.cs", label="JobStorage.Current = new Mock<JobStorage>().Object", span="66-66"];
m9_61 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()", file="ExpirationManager.cs", label="Assert.DoesNotThrow(() => new BackgroundJobClient())", span="68-68"];
m9_62 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()", file="ExpirationManager.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_UsesCurrent_JobStorageInstance_ByDefault()", span="64-64"];
m9_23 [cluster="Unk.GetConnection", file="ExpirationManager.cs", label="Entry Unk.GetConnection", span=""];
m9_122 [cluster="Unk.ChangeState", file="ExpirationManager.cs", label="Entry Unk.ChangeState", span=""];
m9_155 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateChangerInvocation()", file="ExpirationManager.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateChangerInvocation()", span="176-176"];
m9_156 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateChangerInvocation()", file="ExpirationManager.cs", label="_stateChanger.Setup(x => x.ChangeState(It.IsAny<StateChangeContext>()))\r\n                .Returns(_state.Object)", span="178-179"];
m9_157 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateChangerInvocation()", file="ExpirationManager.cs", label="var client = CreateClient()", span="180-180"];
m9_158 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateChangerInvocation()", file="ExpirationManager.cs", label="var result = client.ChangeState(''job-id'', _state.Object, null)", span="182-182"];
m9_159 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateChangerInvocation()", file="ExpirationManager.cs", label="Assert.True(result)", span="184-184"];
m9_160 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateChangerInvocation()", file="ExpirationManager.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ReturnsTheResult_OfStateChangerInvocation()", span="176-176"];
m9_107 [cluster="Unk.NotNull", file="ExpirationManager.cs", label="Entry Unk.NotNull", span=""];
m9_154 [cluster="Unk.SequenceEqual", file="ExpirationManager.cs", label="Entry Unk.SequenceEqual", span=""];
m9_52 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateChangerIsNull()", file="ExpirationManager.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateChangerIsNull()", span="55-55"];
m9_53 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateChangerIsNull()", file="ExpirationManager.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobClient(_storage.Object, _factory.Object, null))", span="57-58"];
m9_54 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateChangerIsNull()", file="ExpirationManager.cs", label="Assert.Equal(''stateChanger'', exception.ParamName)", span="60-60"];
m9_55 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateChangerIsNull()", file="ExpirationManager.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateChangerIsNull()", span="55-55"];
m9_131 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="ExpirationManager.cs", label="Entry Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="128-128"];
m9_132 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", file="ExpirationManager.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", span="150-150"];
m9_133 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", file="ExpirationManager.cs", label="var client = CreateClient()", span="152-152"];
m9_134 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", file="ExpirationManager.cs", label="client.ChangeState(''job-id'', _state.Object, null)", span="154-154"];
m9_135 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", file="ExpirationManager.cs", label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == ''job-id'' &&\r\n                ctx.NewState == _state.Object &&\r\n                ctx.ExpectedStates == null)))", span="156-159"];
m9_136 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", file="ExpirationManager.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", span="150-150"];
m9_13 [cluster="Unk.Setup", file="ExpirationManager.cs", label="Entry Unk.Setup", span=""];
m9_67 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient()", file="ExpirationManager.cs", label="Entry Hangfire.BackgroundJobClient.BackgroundJobClient()", span="61-61"];
m9_162 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="178-178"];
m9_20 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="23-23"];
m9_24 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="28-28"];
m9_27 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="29-29"];
m9_31 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="32-32"];
m9_21 [cluster="lambda expression", file="ExpirationManager.cs", label="x.GetConnection()", span="23-23"];
m9_22 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="23-23"];
m9_25 [cluster="lambda expression", file="ExpirationManager.cs", label="x.Name", span="28-28"];
m9_26 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="28-28"];
m9_28 [cluster="lambda expression", file="ExpirationManager.cs", label="Method()", span="29-29"];
m9_29 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="29-29"];
m9_33 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="32-32"];
m9_41 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="40-40"];
m9_42 [cluster="lambda expression", file="ExpirationManager.cs", label="new BackgroundJobClient(null, _factory.Object, _stateChanger.Object)", span="40-40"];
m9_43 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="40-40"];
m9_49 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="49-49"];
m9_50 [cluster="lambda expression", file="ExpirationManager.cs", label="new BackgroundJobClient(_storage.Object, null, _stateChanger.Object)", span="49-49"];
m9_51 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="49-49"];
m9_56 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="58-58"];
m9_57 [cluster="lambda expression", file="ExpirationManager.cs", label="new BackgroundJobClient(_storage.Object, _factory.Object, null)", span="58-58"];
m9_58 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="58-58"];
m9_64 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="68-68"];
m9_65 [cluster="lambda expression", file="ExpirationManager.cs", label="new BackgroundJobClient()", span="68-68"];
m9_66 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="68-68"];
m9_75 [cluster="lambda expression", file="ExpirationManager.cs", label="client.Create(null, _state.Object)", span="77-77"];
m9_74 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="77-77"];
m9_76 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="77-77"];
m9_83 [cluster="lambda expression", file="ExpirationManager.cs", label="client.Create(_job, null)", span="88-88"];
m9_82 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="88-88"];
m9_84 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="88-88"];
m9_92 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="100-100"];
m9_93 [cluster="lambda expression", file="ExpirationManager.cs", label="x.Create(It.IsNotNull<CreateContext>())", span="100-100"];
m9_94 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="100-100"];
m9_112 [cluster="lambda expression", file="ExpirationManager.cs", label="client.Create(_job, _state.Object)", span="121-121"];
m9_108 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="117-117"];
m9_111 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="121-121"];
m9_109 [cluster="lambda expression", file="ExpirationManager.cs", label="x.Create(It.IsAny<CreateContext>())", span="117-117"];
m9_110 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="117-117"];
m9_113 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="121-121"];
m9_120 [cluster="lambda expression", file="ExpirationManager.cs", label="client.ChangeState(null, _state.Object, null)", span="133-133"];
m9_119 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="133-133"];
m9_121 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="133-133"];
m9_129 [cluster="lambda expression", file="ExpirationManager.cs", label="client.ChangeState(''jobId'', null, null)", span="144-144"];
m9_128 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="144-144"];
m9_130 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="144-144"];
m9_137 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="156-159"];
m9_138 [cluster="lambda expression", file="ExpirationManager.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == ''job-id'' &&\r\n                ctx.NewState == _state.Object &&\r\n                ctx.ExpectedStates == null))", span="156-159"];
m9_139 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="156-159"];
m9_140 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="156-159"];
m9_141 [cluster="lambda expression", file="ExpirationManager.cs", label="ctx.BackgroundJobId == ''job-id'' &&\r\n                ctx.NewState == _state.Object &&\r\n                ctx.ExpectedStates == null", span="157-159"];
m9_142 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="156-159"];
m9_148 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="169-172"];
m9_149 [cluster="lambda expression", file="ExpirationManager.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == ''job-id'' &&\r\n                ctx.NewState == _state.Object &&\r\n                ctx.ExpectedStates.SequenceEqual(new[] { ''State'' })))", span="169-172"];
m9_150 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="169-172"];
m9_151 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="169-172"];
m9_152 [cluster="lambda expression", file="ExpirationManager.cs", label="ctx.BackgroundJobId == ''job-id'' &&\r\n                ctx.NewState == _state.Object &&\r\n                ctx.ExpectedStates.SequenceEqual(new[] { ''State'' })", span="170-172"];
m9_153 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="169-172"];
m9_163 [cluster="lambda expression", file="ExpirationManager.cs", label="x.ChangeState(It.IsAny<StateChangeContext>())", span="178-178"];
m9_164 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="178-178"];
m9_15 [cluster="Mock<IBackgroundJobStateChanger>.cstr", file="ExpirationManager.cs", label="Entry Mock<IBackgroundJobStateChanger>.cstr", span=""];
m9_77 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", file="ExpirationManager.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", span="83-83"];
m9_79 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", file="ExpirationManager.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => client.Create(_job, null))", span="87-88"];
m9_80 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", file="ExpirationManager.cs", label="Assert.Equal(''state'', exception.ParamName)", span="90-90"];
m9_81 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", file="ExpirationManager.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", span="83-83"];
m9_95 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", file="ExpirationManager.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", span="104-104"];
m9_96 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", file="ExpirationManager.cs", label="var client = CreateClient()", span="106-106"];
m9_97 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", file="ExpirationManager.cs", label="var id = client.Create(_job, _state.Object)", span="108-108"];
m9_98 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", file="ExpirationManager.cs", label="Assert.Equal(''some-job'', id)", span="110-110"];
m9_99 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", file="ExpirationManager.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateJob_ReturnsJobIdentifier()", span="104-104"];
m9_73 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateClient()", file="ExpirationManager.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.CreateClient()", span="191-191"];
m9_166 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateClient()", file="ExpirationManager.cs", label="return new BackgroundJobClient(_storage.Object, _factory.Object, _stateChanger.Object);", span="193-193"];
m9_167 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.CreateClient()", file="ExpirationManager.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.CreateClient()", span="191-191"];
m9_91 [cluster="Unk.Verify", file="ExpirationManager.cs", label="Entry Unk.Verify", span=""];
m9_114 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="ExpirationManager.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", span="128-128"];
m9_115 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="ExpirationManager.cs", label="var client = CreateClient()", span="130-130"];
m9_116 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="ExpirationManager.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => client.ChangeState(null, _state.Object, null))", span="132-133"];
m9_117 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="ExpirationManager.cs", label="Assert.Equal(''jobId'', exception.ParamName)", span="135-135"];
m9_118 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="ExpirationManager.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", span="128-128"];
m9_0 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="ExpirationManager.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", span="19-19"];
m9_1 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="ExpirationManager.cs", label="var connection = new Mock<IStorageConnection>()", span="21-21"];
m9_2 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="ExpirationManager.cs", label="_storage = new Mock<JobStorage>()", span="22-22"];
m9_3 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="ExpirationManager.cs", label="_storage.Setup(x => x.GetConnection()).Returns(connection.Object)", span="23-23"];
m9_4 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="ExpirationManager.cs", label="_stateChanger = new Mock<IBackgroundJobStateChanger>()", span="25-25"];
m9_5 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="ExpirationManager.cs", label="_state = new Mock<IState>()", span="27-27"];
m9_6 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="ExpirationManager.cs", label="_state.Setup(x => x.Name).Returns(''Mock'')", span="28-28"];
m9_7 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="ExpirationManager.cs", label="_job = Job.FromExpression(() => Method())", span="29-29"];
m9_10 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="ExpirationManager.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", span="19-19"];
m9_143 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", file="ExpirationManager.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", span="163-163"];
m9_144 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", file="ExpirationManager.cs", label="var client = CreateClient()", span="165-165"];
m9_145 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", file="ExpirationManager.cs", label="client.ChangeState(''job-id'', _state.Object, ''State'')", span="167-167"];
m9_146 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", file="ExpirationManager.cs", label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == ''job-id'' &&\r\n                ctx.NewState == _state.Object &&\r\n                ctx.ExpectedStates.SequenceEqual(new[] { ''State'' }))))", span="169-172"];
m9_147 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", file="ExpirationManager.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_WithFromState_ChangesTheStateOfAJob_WithFromStateValue()", span="163-163"];
m9_161 [cluster="Unk.True", file="ExpirationManager.cs", label="Entry Unk.True", span=""];
m9_35 [cluster="Unk.Create", file="ExpirationManager.cs", label="Entry Unk.Create", span=""];
m9_18 [cluster="Mock<IBackgroundJobFactory>.cstr", file="ExpirationManager.cs", label="Entry Mock<IBackgroundJobFactory>.cstr", span=""];
m9_14 [cluster="Unk.Returns", file="ExpirationManager.cs", label="Entry Unk.Returns", span=""];
m9_44 [cluster="BackgroundJobClient.cstr", file="ExpirationManager.cs", label="Entry BackgroundJobClient.cstr", span=""];
m9_123 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", file="ExpirationManager.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", span="139-139"];
m9_124 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", file="ExpirationManager.cs", label="var client = CreateClient()", span="141-141"];
m9_125 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", file="ExpirationManager.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => client.ChangeState(''jobId'', null, null))", span="143-144"];
m9_126 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", file="ExpirationManager.cs", label="Assert.Equal(''state'', exception.ParamName)", span="146-146"];
m9_127 [cluster="Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", file="ExpirationManager.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", span="139-139"];
m9_11 [cluster="Mock<IStorageConnection>.cstr", file="ExpirationManager.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m9_12 [cluster="Mock<JobStorage>.cstr", file="ExpirationManager.cs", label="Entry Mock<JobStorage>.cstr", span=""];
m9_17 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="ExpirationManager.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="227-227"];
m9_19 [cluster="Hangfire.BackgroundJob.BackgroundJob(string, Hangfire.Common.Job, System.DateTime)", file="ExpirationManager.cs", label="Entry Hangfire.BackgroundJob.BackgroundJob(string, Hangfire.Common.Job, System.DateTime)", span="25-25"];
m9_168 [file="ExpirationManager.cs", label="Hangfire.Core.Tests.BackgroundJobClientFacts", span=""];
m9_169 [file="ExpirationManager.cs", label=client, span=""];
m9_170 [file="ExpirationManager.cs", label=client, span=""];
m9_171 [file="ExpirationManager.cs", label=client, span=""];
m9_172 [file="ExpirationManager.cs", label=client, span=""];
m9_173 [file="ExpirationManager.cs", label=client, span=""];
m11_18 [cluster="Hangfire.Logging.ILog.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LatencyTimeoutAttribute.cs", label="Entry Hangfire.Logging.ILog.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="56-56"];
m11_17 [cluster="Hangfire.States.DeletedState.DeletedState()", file="LatencyTimeoutAttribute.cs", label="Entry Hangfire.States.DeletedState.DeletedState()", span="65-65"];
m11_6 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", file="LatencyTimeoutAttribute.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", span="0-0"];
m11_0 [cluster="Hangfire.LatencyTimeoutAttribute.LatencyTimeoutAttribute(int)", file="LatencyTimeoutAttribute.cs", label="Entry Hangfire.LatencyTimeoutAttribute.LatencyTimeoutAttribute(int)", span="29-29"];
m11_1 [cluster="Hangfire.LatencyTimeoutAttribute.LatencyTimeoutAttribute(int)", file="LatencyTimeoutAttribute.cs", label="timeoutInSeconds < 0", span="31-31"];
m11_2 [cluster="Hangfire.LatencyTimeoutAttribute.LatencyTimeoutAttribute(int)", file="LatencyTimeoutAttribute.cs", label="throw new ArgumentOutOfRangeException(nameof(timeoutInSeconds), ''Timeout value must be equal or greater than zero.'');", span="33-33"];
m11_3 [cluster="Hangfire.LatencyTimeoutAttribute.LatencyTimeoutAttribute(int)", file="LatencyTimeoutAttribute.cs", label="_timeoutInSeconds = timeoutInSeconds", span="36-36"];
m11_4 [cluster="Hangfire.LatencyTimeoutAttribute.LatencyTimeoutAttribute(int)", file="LatencyTimeoutAttribute.cs", label="LogLevel = LogLevel.Debug", span="37-37"];
m11_5 [cluster="Hangfire.LatencyTimeoutAttribute.LatencyTimeoutAttribute(int)", file="LatencyTimeoutAttribute.cs", label="Exit Hangfire.LatencyTimeoutAttribute.LatencyTimeoutAttribute(int)", span="29-29"];
m11_7 [cluster="Unk.nameof", file="LatencyTimeoutAttribute.cs", label="Entry Unk.nameof", span=""];
m11_19 [cluster="lambda expression", file="LatencyTimeoutAttribute.cs", label="Entry lambda expression", span="67-67"];
m11_20 [cluster="lambda expression", file="LatencyTimeoutAttribute.cs", label="$''Background job '{context.BackgroundJob.Id}' has exceeded latency timeout of {_timeoutInSeconds} second(s) and will be deleted''", span="67-67"];
m11_21 [cluster="lambda expression", file="LatencyTimeoutAttribute.cs", label="Exit lambda expression", span="67-67"];
m11_8 [cluster="Hangfire.LatencyTimeoutAttribute.OnStateElection(Hangfire.States.ElectStateContext)", file="LatencyTimeoutAttribute.cs", label="Entry Hangfire.LatencyTimeoutAttribute.OnStateElection(Hangfire.States.ElectStateContext)", span="47-47"];
m11_9 [cluster="Hangfire.LatencyTimeoutAttribute.OnStateElection(Hangfire.States.ElectStateContext)", file="LatencyTimeoutAttribute.cs", label="var state = context.CandidateState as ProcessingState", span="49-49"];
m11_12 [cluster="Hangfire.LatencyTimeoutAttribute.OnStateElection(Hangfire.States.ElectStateContext)", file="LatencyTimeoutAttribute.cs", label="var elapsedTime = DateTime.UtcNow - context.BackgroundJob.CreatedAt", span="56-56"];
m11_14 [cluster="Hangfire.LatencyTimeoutAttribute.OnStateElection(Hangfire.States.ElectStateContext)", file="LatencyTimeoutAttribute.cs", label="context.CandidateState = new DeletedState\r\n                {\r\n                    Reason = $''Background job has exceeded latency timeout of {_timeoutInSeconds} second(s)''\r\n                }", span="60-63"];
m11_15 [cluster="Hangfire.LatencyTimeoutAttribute.OnStateElection(Hangfire.States.ElectStateContext)", color=green, community=0, file="LatencyTimeoutAttribute.cs", label="Logger.Log(\r\n                    LogLevel,\r\n                    () => $''Background job '{context.BackgroundJob.Id}' has exceeded latency timeout of {_timeoutInSeconds} second(s) and will be deleted'')", prediction=2, span="65-67"];
m11_10 [cluster="Hangfire.LatencyTimeoutAttribute.OnStateElection(Hangfire.States.ElectStateContext)", file="LatencyTimeoutAttribute.cs", label="state == null", span="50-50"];
m11_11 [cluster="Hangfire.LatencyTimeoutAttribute.OnStateElection(Hangfire.States.ElectStateContext)", file="LatencyTimeoutAttribute.cs", label="return;", span="53-53"];
m11_13 [cluster="Hangfire.LatencyTimeoutAttribute.OnStateElection(Hangfire.States.ElectStateContext)", file="LatencyTimeoutAttribute.cs", label="elapsedTime.TotalSeconds > _timeoutInSeconds", span="58-58"];
m11_16 [cluster="Hangfire.LatencyTimeoutAttribute.OnStateElection(Hangfire.States.ElectStateContext)", file="LatencyTimeoutAttribute.cs", label="Exit Hangfire.LatencyTimeoutAttribute.OnStateElection(Hangfire.States.ElectStateContext)", span="47-47"];
m11_22 [file="LatencyTimeoutAttribute.cs", label="Hangfire.LatencyTimeoutAttribute", span=""];
m11_23 [file="LatencyTimeoutAttribute.cs", label="Hangfire.States.ElectStateContext", span=""];
m12_0 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Entry Hangfire.Dashboard.Pages.LayoutPage.Execute()", span="58-58"];
m12_11 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", color=green, community=0, file="LayoutPage.generated.cs", label="Write(Url.Home())", prediction=3, span="133-133"];
m12_9 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(Url.To($''/css{version.Major}{version.Minor}{version.Build}''))", span="108-108"];
m12_12 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''\''>Hangfire Dashboard</a>\r\n                    </div>\r\n                    <div cl'' +\r\n''ass=\''collapse navbar-collapse\''>\r\n                        '')", span="138-139"];
m12_10 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", color=green, community=0, file="LayoutPage.generated.cs", label="WriteLiteral(@''''''>\r\n</head>\r\n    <body>\r\n        <!-- Wrap all page content here -->\r\n        <div id=''''wrap''''>\r\n\r\n            <!-- Fixed navbar -->\r\n            <div class=''''navbar navbar-default navbar-fixed-top''''>\r\n                <div class=''''container''''>\r\n                    <div class=''''navbar-header''''>\r\n                        <button type=''''button'''' class=''''navbar-toggle'''' data-toggle=''''collapse'''' data-target=''''.navbar-collapse''''>\r\n                            <span class=''''icon-bar''''></span>\r\n                            <span class=''''icon-bar''''></span>\r\n                            <span class=''''icon-bar''''></span>\r\n                        </button>\r\n                        <a class=''''navbar-brand'''' href='''''')", prediction=3, span="113-128"];
m12_35 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", color=green, community=0, file="LayoutPage.generated.cs", label="Write(String.Format(Strings.LayoutPage_Footer_Generatedms, GenerationTime.Elapsed.TotalMilliseconds.ToString(''N'')))", prediction=3, span="278-278"];
m12_13 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(Html.RenderPartial(new Navigation()))", span="144-144"];
m12_36 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        \r\n     '' +\r\n''   <div id=\''hangfireConfig\''\r\n             data-pollinterval=\'''')", span="283-284"];
m12_27 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", color=green, community=0, file="LayoutPage.generated.cs", label="WriteLiteral(''                    <li>'')", prediction=3, span="233-233"];
m12_26 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="DashboardOptions.DisplayStorageConnectionString", span="228-228"];
m12_28 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(Storage)", span="238-238"];
m12_34 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", color=green, community=0, file="LayoutPage.generated.cs", label="WriteLiteral(''</li>\r\n                    <li>'')", prediction=3, span="273-273"];
m12_33 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", color=green, community=0, file="LayoutPage.generated.cs", label="Write(Html.LocalTime(DateTime.UtcNow))", prediction=3, span="268-268"];
m12_32 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral('' '')", span="263-263"];
m12_1 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''\r\n'')", span="62-62"];
m12_2 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''<!DOCTYPE html>\r\n<html lang=\'''')", span="71-71"];
m12_4 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''\''>\r\n<head>\r\n    <title>'')", span="81-81"];
m12_5 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(Title)", span="86-86"];
m12_7 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="var version = GetType().GetTypeInfo().Assembly.GetName().Version", span="98-98"];
m12_8 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''    <link rel=\''stylesheet\'' href=\'''')", span="103-103"];
m12_14 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''\r\n'')", span="149-149"];
m12_15 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="@AppPath != null", span="154-154"];
m12_16 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''                            <ul class=\''nav navbar-nav navbar-right\''>\r\n           '' +\r\n''                     <li>\r\n                                    <a href=\'''')", span="159-160"];
m12_17 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(AppPath)", span="165-165"];
m12_18 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''\''>\r\n                                        <span class=\''glyphicon glyphicon-log-'' +\r\n''out\''></span>\r\n                                        '')", span="170-171"];
m12_19 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(Strings.LayoutPage_Back)", span="176-176"];
m12_20 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''\r\n                                    </a>\r\n                                </li>'' +\r\n''\r\n                            </ul>\r\n'')", span="181-182"];
m12_22 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(RenderBody())", span="200-200"];
m12_23 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(@''\r\n            </div>\r\n        </div>\r\n\r\n        <div id=''''footer''''>\r\n            <div class=''''container''''>\r\n                <ul class=''''list-inline credit''''>\r\n                    <li>\r\n                        <a href=''''https://www.hangfire.io/'''' target=''''_blank'''' rel=''''noopener noreferrer''''>Hangfire '')", span="205-213"];
m12_24 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write($''{version.Major}.{version.Minor}.{version.Build}'')", span="218-218"];
m12_25 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''\r\n                        </a>\r\n                    </li>\r\n'')", span="223-223"];
m12_29 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''</li>\r\n'')", span="243-243"];
m12_30 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''                    <li>'')", span="253-253"];
m12_31 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(Strings.LayoutPage_Footer_Time)", span="258-258"];
m12_3 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(CultureInfo.CurrentUICulture.TwoLetterISOLanguageName)", span="76-76"];
m12_21 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''                    </div>\r\n                    <!--/.nav-collapse -->\r\n         '' +\r\n''       </div>\r\n            </div>\r\n\r\n            <!-- Begin page content -->\r\n  '' +\r\n''          <div class=\''container\'' style=\''margin-bottom: 20px;\''>\r\n                '' +\r\n'''')", span="192-195"];
m12_37 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(DashboardOptions.StatsPollingInterval)", span="289-289"];
m12_44 [cluster="Hangfire.Dashboard.RazorPage.WriteLiteral(string)", file="LayoutPage.generated.cs", label="Entry Hangfire.Dashboard.RazorPage.WriteLiteral(string)", span="105-105"];
m12_41 [cluster="HttpRequestBase.LinkTo(string)", file="LayoutPage.generated.cs", label="Entry HttpRequestBase.LinkTo(string)", span="8-8"];
m12_38 [cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="LayoutPage.generated.cs", label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="33-33"];
m12_39 [cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="LayoutPage.generated.cs", label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4"];
m12_40 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="LayoutPage.generated.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m12_42 [cluster="Unk.TryParse", file="LayoutPage.generated.cs", label="Entry Unk.TryParse", span=""];
m12_43 [cluster="HangFire.Web.Pager.Pager(int, int, long)", file="LayoutPage.generated.cs", label="Entry HangFire.Web.Pager.Pager(int, int, long)", span="13-13"];
m12_46 [cluster="HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", file="LayoutPage.generated.cs", label="Entry HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", span="6-6"];
m12_56 [cluster="string.Format(string, object)", file="LayoutPage.generated.cs", label="Entry string.Format(string, object)", span="0-0"];
m12_53 [cluster="Hangfire.Dashboard.RazorPage.RenderBody()", file="LayoutPage.generated.cs", label="Entry Hangfire.Dashboard.RazorPage.RenderBody()", span="121-121"];
m12_49 [cluster="Hangfire.Dashboard.UrlHelper.To(string)", file="LayoutPage.generated.cs", label="Entry Hangfire.Dashboard.UrlHelper.To(string)", span="43-43"];
m12_47 [cluster="System.Type.GetTypeInfo()", file="LayoutPage.generated.cs", label="Entry System.Type.GetTypeInfo()", span="0-0"];
m12_52 [cluster="Hangfire.Dashboard.HtmlHelper.RenderPartial(Hangfire.Dashboard.RazorPage)", file="LayoutPage.generated.cs", label="Entry Hangfire.Dashboard.HtmlHelper.RenderPartial(Hangfire.Dashboard.RazorPage)", span="108-108"];
m12_54 [cluster="HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", file="LayoutPage.generated.cs", label="Entry HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", span="6-6"];
m12_51 [cluster="HangFire.Web.HtmlHelper.JobType(string)", file="LayoutPage.generated.cs", label="Entry HangFire.Web.HtmlHelper.JobType(string)", span="22-22"];
m12_50 [cluster="Hangfire.Dashboard.UrlHelper.Home()", file="LayoutPage.generated.cs", label="Entry Hangfire.Dashboard.UrlHelper.Home()", span="53-53"];
m12_48 [cluster="Unk.Write", file="LayoutPage.generated.cs", label="Entry Unk.Write", span=""];
m12_45 [cluster="Hangfire.Dashboard.RazorPage.Write(object)", file="LayoutPage.generated.cs", label="Entry Hangfire.Dashboard.RazorPage.Write(object)", span="113-113"];
m12_55 [cluster="double.ToString(string)", file="LayoutPage.generated.cs", label="HangFire.Web.Pages.EnqueuedJobsPage", span=""];
m12_57 [file="LayoutPage.generated.cs", label="Hangfire.Dashboard.Pages.LayoutPage", span=""];
m13_90 [cluster="Hangfire.Logging.LogExtensions.InfoFormat(Hangfire.Logging.ILog, string, params object[])", file="LibLog.cs", label="Exit Hangfire.Logging.LogExtensions.InfoFormat(Hangfire.Logging.ILog, string, params object[])", span="213-213"];
m13_439 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="LibLog.cs", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
m13_234 [cluster="System.Linq.Expressions.Expression.Parameter(System.Type, string)", file="LibLog.cs", label="Entry System.Linq.Expressions.Expression.Parameter(System.Type, string)", span="0-0"];
m13_54 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="LibLog.cs", label="_transaction.QueueCommand(x => x.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                ''State'',\r\n                state.Name))", span="89-92"];
m13_56 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="LibLog.cs", label="var storedData = new Dictionary<string, string>(state.SerializeData())", span="101-101"];
m13_55 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="LibLog.cs", label="_transaction.QueueCommand(x => x.RemoveEntry(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId)))", span="94-95"];
m13_57 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="LibLog.cs", label="storedData.Add(''State'', state.Name)", span="102-102"];
m13_333 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log4NetLogger(dynamic)", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log4NetLogger(dynamic)", span="710-710"];
m13_346 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log4NetLogger(dynamic)", file="LibLog.cs", label="_logger = logger", span="712-712"];
m13_347 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log4NetLogger(dynamic)", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log4NetLogger(dynamic)", span="710-710"];
m13_307 [cluster="Unk.WarnException", file="LibLog.cs", label="Entry Unk.WarnException", span=""];
m13_169 [cluster="lambda expression", file="LibLog.cs", label="Entry lambda expression", span="391-391"];
m13_170 [cluster="lambda expression", file="LibLog.cs", label="new NLogLogProvider()", span="391-391"];
m13_171 [cluster="lambda expression", file="LibLog.cs", label="Exit lambda expression", span="391-391"];
m13_6 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Dispose()", file="LibLog.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.Dispose()", span="36-36"];
m13_129 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="LibLog.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="155-155"];
m13_130 [cluster="lambda expression", file="LibLog.cs", label="Entry lambda expression", span="157-157"];
m13_131 [cluster="lambda expression", file="LibLog.cs", label="x.DecrementValue(RedisStorage.Prefix + key)", span="157-157"];
m13_189 [cluster="Hangfire.Logging.LogProvider.NoOpLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return false;", span="426-426"];
m13_188 [cluster="Hangfire.Logging.LogProvider.NoOpLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Entry Hangfire.Logging.LogProvider.NoOpLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="424-424"];
m13_190 [cluster="Hangfire.Logging.LogProvider.NoOpLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Exit Hangfire.Logging.LogProvider.NoOpLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="424-424"];
m13_274 [cluster="Unk.Info", file="LibLog.cs", label="Entry Unk.Info", span=""];
m13_541 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.ColouredConsoleLogger(string)", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.ColouredConsoleLogger(string)", span="1436-1436"];
m13_564 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.ColouredConsoleLogger(string)", file="LibLog.cs", label="_name = name", span="1438-1438"];
m13_565 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.ColouredConsoleLogger(string)", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.ColouredConsoleLogger(string)", span="1436-1436"];
m13_49 [cluster="lambda expression", file="LibLog.cs", label="Exit lambda expression", span="81-82"];
m13_51 [cluster="lambda expression", file="LibLog.cs", label="((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId))", span="83-84"];
m13_50 [cluster="lambda expression", file="LibLog.cs", label="Entry lambda expression", span="83-84"];
m13_52 [cluster="lambda expression", file="LibLog.cs", label="Exit lambda expression", span="83-84"];
m13_424 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetLogManagerType()", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.SerilogLogProvider.GetLogManagerType()", span="1019-1019"];
m13_425 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetLogManagerType()", file="LibLog.cs", label="return Type.GetType(''Serilog.Log, Serilog'');", span="1021-1021"];
m13_426 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetLogManagerType()", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.SerilogLogProvider.GetLogManagerType()", span="1019-1019"];
m13_236 [cluster="System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", file="LibLog.cs", label="Entry System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", span="0-0"];
m13_53 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="LibLog.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", span="87-87"];
m13_37 [cluster="lambda expression", file="LibLog.cs", label="Exit lambda expression", span="72-74"];
m13_39 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", file="LibLog.cs", label="_transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId)))", span="79-80"];
m13_38 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", file="LibLog.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", span="77-77"];
m13_40 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", file="LibLog.cs", label="_transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId)))", span="81-82"];
m13_136 [cluster="Hangfire.Logging.LogExtensions.LogFormat(Hangfire.Logging.ILog, Hangfire.Logging.LogLevel, string, params object[])", file="LibLog.cs", label="logger.Log(logLevel, result.AsFunc())", span="300-300"];
m13_137 [cluster="Hangfire.Logging.LogExtensions.LogFormat(Hangfire.Logging.ILog, Hangfire.Logging.LogLevel, string, params object[])", file="LibLog.cs", label="Exit Hangfire.Logging.LogExtensions.LogFormat(Hangfire.Logging.ILog, Hangfire.Logging.LogLevel, string, params object[])", span="297-297"];
m13_138 [cluster="string.Format(System.IFormatProvider, string, params object[])", file="LibLog.cs", label="Entry string.Format(System.IFormatProvider, string, params object[])", span="0-0"];
m13_23 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="LibLog.cs", label="_transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId),\r\n                expireIn))", span="68-70"];
m13_25 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="LibLog.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="62-62"];
m13_24 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="LibLog.cs", label="_transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId),\r\n                expireIn))", span="72-74"];
m13_26 [cluster="Unk.QueueCommand", file="LibLog.cs", label="Entry Unk.QueueCommand", span=""];
m13_78 [cluster="Unk.SetRangeInHash", file="LibLog.cs", label="Entry Unk.SetRangeInHash", span=""];
m13_80 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="LibLog.cs", label="storedData.Add(''State'', state.Name)", span="121-121"];
m13_79 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="LibLog.cs", label="var storedData = new Dictionary<string, string>(state.SerializeData())", span="120-120"];
m13_81 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="LibLog.cs", label="storedData.Add(''Reason'', state.Reason)", span="122-122"];
m13_157 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", file="LibLog.cs", label="_transaction.QueueCommand(x => x.EnqueueItemOnList(\r\n                RedisStorage.Prefix + key, value))", span="181-182"];
m13_468 [cluster="System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", file="LibLog.cs", label="Entry System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", span="0-0"];
m13_305 [cluster="Unk.DebugException", file="LibLog.cs", label="Entry Unk.DebugException", span=""];
m13_421 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger(object)", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger(object)", span="1122-1122"];
m13_470 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger(object)", color=green, community=0, file="LibLog.cs", label="_logger = logger", prediction=9, span="1124-1124"];
m13_471 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger(object)", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger(object)", span="1122-1122"];
m13_42 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", file="LibLog.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", span="77-77"];
m13_44 [cluster="lambda expression", file="LibLog.cs", label="((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId))", span="79-80"];
m13_43 [cluster="lambda expression", file="LibLog.cs", label="Entry lambda expression", span="79-80"];
m13_45 [cluster="lambda expression", file="LibLog.cs", label="Exit lambda expression", span="79-80"];
m13_147 [cluster="lambda expression", file="LibLog.cs", label="x.AddItemToSortedSet(\r\n                RedisStorage.Prefix + key, value, score)", span="169-170"];
m13_148 [cluster="lambda expression", file="LibLog.cs", label="Exit lambda expression", span="169-170"];
m13_149 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", file="LibLog.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", span="173-173"];
m13_11 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="LibLog.cs", label="!_transaction.Commit()", span="43-43"];
m13_13 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="LibLog.cs", label="int maxReplayCount = 3", span="50-50"];
m13_12 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="LibLog.cs", label="int replayCount = 1", span="49-49"];
m13_14 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="LibLog.cs", label="!_transaction.Replay()", span="52-52"];
m13_277 [cluster="Unk.Fatal", file="LibLog.cs", label="Entry Unk.Fatal", span=""];
m13_572 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", span="1452-1452"];
m13_573 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", file="LibLog.cs", label="var formattedMessage = MessageFormatter(_name, logLevel, message, e)", span="1454-1454"];
m13_575 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", file="LibLog.cs", label="Colors.TryGetValue(logLevel, out color)", span="1457-1457"];
m13_574 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", file="LibLog.cs", label="ConsoleColor color", span="1455-1455"];
m13_579 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", file="LibLog.cs", label="Console.Out.WriteLine(formattedMessage)", span="1465-1465"];
m13_580 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", file="LibLog.cs", label="Console.Out.WriteLine(formattedMessage)", span="1475-1475"];
m13_576 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", file="LibLog.cs", label=Lock, span="1459-1459"];
m13_578 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", file="LibLog.cs", label="Console.ForegroundColor = color", span="1464-1464"];
m13_577 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", file="LibLog.cs", label="var originalColor = Console.ForegroundColor", span="1461-1461"];
m13_581 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", span="1452-1452"];
m13_164 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", file="LibLog.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", span="185-185"];
m13_46 [cluster="Hangfire.Logging.LogExtensions.Error(Hangfire.Logging.ILog, System.Func<string>)", file="LibLog.cs", label="Entry Hangfire.Logging.LogExtensions.Error(Hangfire.Logging.ILog, System.Func<string>)", span="141-141"];
m13_91 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="LibLog.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", span="130-130"];
m13_93 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="LibLog.cs", label="_transaction.QueueCommand(x => x.EnqueueItemOnList(\r\n                String.Format(RedisStorage.Prefix + ''queue:{0}'', queue), jobId))", span="135-136"];
m13_92 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="LibLog.cs", label="_transaction.QueueCommand(x => x.AddItemToSet(\r\n                RedisStorage.Prefix + ''queues'', queue))", span="132-133"];
m13_94 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="LibLog.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", span="130-130"];
m13_532 [cluster="System.Action<T1, T2, T3, T4>.Invoke(T1, T2, T3, T4)", file="LibLog.cs", label="Entry System.Action<T1, T2, T3, T4>.Invoke(T1, T2, T3, T4)", span="0-0"];
m13_116 [cluster="lambda expression", file="LibLog.cs", label="Entry lambda expression", span="147-147"];
m13_118 [cluster="lambda expression", file="LibLog.cs", label="Exit lambda expression", span="147-147"];
m13_117 [cluster="lambda expression", file="LibLog.cs", label="x.ExpireEntryIn(RedisStorage.Prefix + key, expireIn)", span="147-147"];
m13_119 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", file="LibLog.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", span="150-150"];
m13_336 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetLogManagerType()", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.Log4NetLogProvider.GetLogManagerType()", span="692-692"];
m13_337 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetLogManagerType()", file="LibLog.cs", label="return Type.GetType(''log4net.LogManager, log4net'');", span="694-694"];
m13_338 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetLogManagerType()", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.Log4NetLogProvider.GetLogManagerType()", span="692-692"];
m13_273 [cluster="Unk.Debug", file="LibLog.cs", label="Entry Unk.Debug", span=""];
m13_125 [cluster="Hangfire.Logging.LogExtensions.WarnException(Hangfire.Logging.ILog, string, System.Exception)", file="LibLog.cs", label="Entry Hangfire.Logging.LogExtensions.WarnException(Hangfire.Logging.ILog, string, System.Exception)", span="281-281"];
m13_175 [cluster="lambda expression", file="LibLog.cs", label="Exit lambda expression", span="392-392"];
m13_223 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetLogManagerType()", file="LibLog.cs", label=int, span=""];
m13_224 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetLogManagerType()", file="LibLog.cs", label=int, span=""];
m13_225 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetLogManagerType()", file="LibLog.cs", label=string, span=""];
m13_7 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Dispose()", file="LibLog.cs", label="_transaction.Dispose()", span="38-38"];
m13_9 [cluster="Unk.Dispose", file="LibLog.cs", label="Entry Unk.Dispose", span=""];
m13_8 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Dispose()", file="LibLog.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.Dispose()", span="36-36"];
m13_10 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="LibLog.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.Commit()", span="41-41"];
m13_128 [cluster="Hangfire.Logging.LogExtensions.WarnException(Hangfire.Logging.ILog, string, System.Exception)", file="LibLog.cs", label="Exit Hangfire.Logging.LogExtensions.WarnException(Hangfire.Logging.ILog, string, System.Exception)", span="281-281"];
m13_126 [cluster="Hangfire.Logging.LogExtensions.WarnException(Hangfire.Logging.ILog, string, System.Exception)", file="LibLog.cs", label="logger.IsWarnEnabled()", span="283-283"];
m13_127 [cluster="Hangfire.Logging.LogExtensions.WarnException(Hangfire.Logging.ILog, string, System.Exception)", file="LibLog.cs", label="logger.Log(LogLevel.Warn, message.AsFunc(), exception)", span="285-285"];
m13_132 [cluster="lambda expression", file="LibLog.cs", label="Exit lambda expression", span="157-157"];
m13_5 [cluster="Hangfire.Logging.LogExtensions.IsDebugEnabled(Hangfire.Logging.ILog)", file="LibLog.cs", label="Exit Hangfire.Logging.LogExtensions.IsDebugEnabled(Hangfire.Logging.ILog)", span="75-75"];
m13_272 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="591-591"];
m13_282 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.DebugException(messageFunc(), exception)", span="598-598"];
m13_286 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.InfoException(messageFunc(), exception)", span="605-605"];
m13_290 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.WarnException(messageFunc(), exception)", span="612-612"];
m13_294 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.ErrorException(messageFunc(), exception)", span="619-619"];
m13_298 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.FatalException(messageFunc(), exception)", span="626-626"];
m13_301 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.TraceException(messageFunc(), exception)", span="633-633"];
m13_281 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsDebugEnabled", span="596-596"];
m13_283 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="599-599"];
m13_285 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsInfoEnabled", span="603-603"];
m13_287 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="606-606"];
m13_289 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsWarnEnabled", span="610-610"];
m13_291 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="613-613"];
m13_293 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsErrorEnabled", span="617-617"];
m13_295 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="620-620"];
m13_297 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsFatalEnabled", span="624-624"];
m13_299 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="627-627"];
m13_300 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsTraceEnabled", span="631-631"];
m13_302 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="634-634"];
m13_279 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label=logLevel, span="593-593"];
m13_280 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Debug", span="595-595"];
m13_303 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return false;", span="638-638"];
m13_284 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Info", span="602-602"];
m13_288 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Warn", span="609-609"];
m13_292 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Error", span="616-616"];
m13_296 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Fatal", span="623-623"];
m13_304 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="591-591"];
m13_87 [cluster="lambda expression", file="LibLog.cs", label="x.EnqueueItemOnList(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId),\r\n                JobHelper.ToJson(storedData))", span="125-127"];
m13_89 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="LibLog.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m13_88 [cluster="lambda expression", file="LibLog.cs", label="Exit lambda expression", span="125-127"];
m13_278 [cluster="Unk.Trace", file="LibLog.cs", label="Entry Unk.Trace", span=""];
m13_103 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", file="LibLog.cs", label="_transaction.QueueCommand(x => x.IncrementValue(RedisStorage.Prefix + key))", span="141-141"];
m13_440 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", span="1059-1059"];
m13_464 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", color=green, community=0, file="LibLog.cs", label="WriteException = Expression.Lambda<Action<object, object, Exception, string>>(writeMethodExp, new[]\r\n                {\r\n                    instanceParam,\r\n                    levelParam,\r\n                    exceptionParam,\r\n                    messageParam,\r\n                }).Compile()", prediction=10, span="1113-1119"];
m13_450 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="ParameterExpression instanceParam = Expression.Parameter(typeof(object))", span="1072-1072"];
m13_452 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="ParameterExpression levelParam = Expression.Parameter(typeof(object))", span="1074-1074"];
m13_463 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="writeMethodExp = Expression.Call(\r\n                    instanceCast,\r\n                    writeExceptionMethodInfo,\r\n                    levelCast,\r\n                    exceptionParam,\r\n                    messageParam,\r\n                    propertyValuesParam)", span="1106-1112"];
m13_457 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="ParameterExpression messageParam = Expression.Parameter(typeof(string))", span="1086-1086"];
m13_462 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="ParameterExpression exceptionParam = Expression.Parameter(typeof(Exception))", span="1105-1105"];
m13_449 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="MethodInfo isEnabledMethodInfo = loggerType.GetRuntimeMethod(''IsEnabled'', new Type[] { logEventTypeType })", span="1071-1071"];
m13_451 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="UnaryExpression instanceCast = Expression.Convert(instanceParam, loggerType)", span="1073-1073"];
m13_455 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="IsEnabled = Expression.Lambda<Func<object, object, bool>>(isEnabledMethodCall, new[]\r\n                {\r\n                    instanceParam,\r\n                    levelParam\r\n                }).Compile()", span="1077-1081"];
m13_460 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="Write = Expression.Lambda<Action<object, object, string>>(writeMethodExp, new[]\r\n                {\r\n                    instanceParam,\r\n                    levelParam,\r\n                    messageParam\r\n                }).Compile()", span="1089-1094"];
m13_453 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="UnaryExpression levelCast = Expression.Convert(levelParam, logEventTypeType)", span="1075-1075"];
m13_461 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="MethodInfo writeExceptionMethodInfo = loggerType.GetRuntimeMethod(''Write'', new[]\r\n                {\r\n                    logEventTypeType,\r\n                    typeof(Exception), \r\n                    typeof(string),\r\n                    typeof(object[])\r\n                })", span="1098-1104"];
m13_458 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="ConstantExpression propertyValuesParam = Expression.Constant(new object[0])", span="1087-1087"];
m13_456 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="MethodInfo writeMethodInfo = loggerType.GetRuntimeMethod(''Write'', new[] { logEventTypeType, typeof(string), typeof(object[]) })", span="1085-1085"];
m13_459 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="MethodCallExpression writeMethodExp = Expression.Call(instanceCast, writeMethodInfo, levelCast, messageParam, propertyValuesParam)", span="1088-1088"];
m13_441 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="var logEventTypeType = Type.GetType(''Serilog.Events.LogEventLevel, Serilog'')", span="1061-1061"];
m13_448 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="var loggerType = Type.GetType(''Serilog.ILogger, Serilog'')", span="1070-1070"];
m13_454 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="MethodCallExpression isEnabledMethodCall = Expression.Call(instanceCast, isEnabledMethodInfo, levelCast)", span="1076-1076"];
m13_442 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="DebugLevel = Enum.Parse(logEventTypeType, ''Debug'')", span="1062-1062"];
m13_443 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="ErrorLevel = Enum.Parse(logEventTypeType, ''Error'')", span="1063-1063"];
m13_444 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="FatalLevel = Enum.Parse(logEventTypeType, ''Fatal'')", span="1064-1064"];
m13_445 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="InformationLevel = Enum.Parse(logEventTypeType, ''Information'')", span="1065-1065"];
m13_446 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="VerboseLevel = Enum.Parse(logEventTypeType, ''Verbose'')", span="1066-1066"];
m13_447 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="WarningLevel = Enum.Parse(logEventTypeType, ''Warning'')", span="1067-1067"];
m13_465 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", span="1059-1059"];
m13_467 [cluster="System.Linq.Expressions.Expression.Parameter(System.Type)", file="LibLog.cs", label="Entry System.Linq.Expressions.Expression.Parameter(System.Type)", span="0-0"];
m13_328 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.IsLoggerAvailable()", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.Log4NetLogProvider.IsLoggerAvailable()", span="687-687"];
m13_334 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.IsLoggerAvailable()", file="LibLog.cs", label="return ProviderIsAvailableOverride && GetLogManagerType() != null;", span="689-689"];
m13_335 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.IsLoggerAvailable()", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.Log4NetLogProvider.IsLoggerAvailable()", span="687-687"];
m13_74 [cluster="Unk.RemoveEntry", file="LibLog.cs", label="Entry Unk.RemoveEntry", span=""];
m13_76 [cluster="lambda expression", file="LibLog.cs", label="x.SetRangeInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId),\r\n                storedData)", span="109-111"];
m13_75 [cluster="lambda expression", file="LibLog.cs", label="Entry lambda expression", span="109-111"];
m13_77 [cluster="lambda expression", file="LibLog.cs", label="Exit lambda expression", span="109-111"];
m13_153 [cluster="lambda expression", file="LibLog.cs", label="x.RemoveItemFromSortedSet(\r\n                RedisStorage.Prefix + key, value)", span="175-176"];
m13_154 [cluster="lambda expression", color=green, community=0, file="LibLog.cs", label="Exit lambda expression", prediction=11, span="175-176"];
m13_155 [cluster="Unk.RemoveItemFromSortedSet", file="LibLog.cs", label="Entry Unk.RemoveItemFromSortedSet", span=""];
m13_156 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", file="LibLog.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", span="179-179"];
m13_99 [cluster="lambda expression", file="LibLog.cs", label="Entry lambda expression", span="135-136"];
m13_101 [cluster="lambda expression", file="LibLog.cs", label="Exit lambda expression", span="135-136"];
m13_100 [cluster="lambda expression", file="LibLog.cs", label="x.EnqueueItemOnList(\r\n                String.Format(RedisStorage.Prefix + ''queue:{0}'', queue), jobId)", span="135-136"];
m13_102 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", file="LibLog.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", span="139-139"];
m13_505 [cluster="System.Action<T1, T2, T3>.Invoke(T1, T2, T3)", file="LibLog.cs", label="Entry System.Action<T1, T2, T3>.Invoke(T1, T2, T3)", span="0-0"];
m13_220 [cluster="System.Func<T, TResult>.Invoke(T)", file="LibLog.cs", label=string, span=""];
m13_237 [cluster="System.Linq.Expressions.Expression<TDelegate>.Compile()", file="LibLog.cs", label="Entry System.Linq.Expressions.Expression<TDelegate>.Compile()", span="0-0"];
m13_306 [cluster="Unk.InfoException", file="LibLog.cs", label="Entry Unk.InfoException", span=""];
m13_41 [cluster="Hangfire.Logging.ILog.LogFormat(Hangfire.Logging.LogLevel, string, params object[])", file="LibLog.cs", label="Entry Hangfire.Logging.ILog.LogFormat(Hangfire.Logging.LogLevel, string, params object[])", span="297-297"];
m13_31 [cluster="Unk.ExpireEntryIn", file="LibLog.cs", label="Entry Unk.ExpireEntryIn", span=""];
m13_33 [cluster="lambda expression", file="LibLog.cs", label="x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId),\r\n                expireIn)", span="68-70"];
m13_32 [cluster="lambda expression", file="LibLog.cs", label="Entry lambda expression", span="68-70"];
m13_34 [cluster="lambda expression", file="LibLog.cs", label="Exit lambda expression", span="68-70"];
m13_69 [cluster="lambda expression", file="LibLog.cs", label="Exit lambda expression", span="89-92"];
m13_161 [cluster="lambda expression", file="LibLog.cs", label="Exit lambda expression", span="181-182"];
m13_162 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", color=green, community=0, file="LibLog.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", prediction=12, span="185-185"];
m13_163 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", file="LibLog.cs", label="_transaction.QueueCommand(x => x.RemoveItemFromList(\r\n                RedisStorage.Prefix + key, value))", span="187-188"];
m13_142 [cluster="Hangfire.Logging.LogExtensions.Return<T>(T)", file="LibLog.cs", label="Entry Hangfire.Logging.LogExtensions.Return<T>(T)", span="309-309"];
m13_416 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.IsLoggerAvailable()", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.SerilogLogProvider.IsLoggerAvailable()", span="1014-1014"];
m13_422 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.IsLoggerAvailable()", file="LibLog.cs", label="return ProviderIsAvailableOverride && GetLogManagerType() != null;", span="1016-1016"];
m13_423 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.IsLoggerAvailable()", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.SerilogLogProvider.IsLoggerAvailable()", span="1014-1014"];
m13_376 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="766-766"];
m13_380 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.Info(messageFunc(), exception)", span="773-773"];
m13_384 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.Warn(messageFunc(), exception)", span="780-780"];
m13_388 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.Error(messageFunc(), exception)", span="787-787"];
m13_392 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.Fatal(messageFunc(), exception)", span="794-794"];
m13_395 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.Debug(messageFunc(), exception)", span="801-801"];
m13_379 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsDebugEnabled", span="771-771"];
m13_381 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="774-774"];
m13_383 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsWarnEnabled", span="778-778"];
m13_385 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="781-781"];
m13_387 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsErrorEnabled", span="785-785"];
m13_389 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="788-788"];
m13_391 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsFatalEnabled", span="792-792"];
m13_393 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="795-795"];
m13_394 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsDebugEnabled", span="799-799"];
m13_396 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="802-802"];
m13_377 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label=logLevel, span="768-768"];
m13_378 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Info", span="770-770"];
m13_397 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return false;", span="806-806"];
m13_382 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Warn", span="777-777"];
m13_386 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Error", span="784-784"];
m13_390 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Fatal", span="791-791"];
m13_398 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="766-766"];
m13_134 [cluster="lambda expression", file="LibLog.cs", label="x.ExpireEntryIn(RedisStorage.Prefix + key, expireIn)", span="158-158"];
m13_135 [cluster="lambda expression", file="LibLog.cs", label="Exit lambda expression", span="158-158"];
m13_150 [cluster="Hangfire.Logging.LogProvider.GetLogger(System.Type)", file="LibLog.cs", label="Entry Hangfire.Logging.LogProvider.GetLogger(System.Type)", span="358-358"];
m13_151 [cluster="Hangfire.Logging.LogProvider.GetLogger(System.Type)", file="LibLog.cs", label="return GetLogger(type.FullName);", span="360-360"];
m13_15 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="LibLog.cs", label="replayCount++ >= maxReplayCount", span="54-54"];
m13_17 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="LibLog.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.Commit()", span="41-41"];
m13_16 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="LibLog.cs", label="throw new RedisException(''Transaction commit was failed due to WATCH condition failure. Retry attempts exceeded.'');", span="56-56"];
m13_18 [cluster="Unk.Commit", file="LibLog.cs", label="Entry Unk.Commit", span=""];
m13_0 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="LibLog.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", span="29-29"];
m13_1 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="LibLog.cs", label="transaction == null", span="31-31"];
m13_176 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogProvider()", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogProvider()", span="667-667"];
m13_177 [cluster="Hangfire.Logging.LogProvider.ResolveLogProvider()", file="LibLog.cs", label=LogProviderResolvers, span="404-404"];
m13_178 [cluster="Hangfire.Logging.LogProvider.ResolveLogProvider()", file="LibLog.cs", label="providerResolver.Item1()", span="406-406"];
m13_173 [cluster="lambda expression", file="LibLog.cs", label="x.TrimList(\r\n                RedisStorage.Prefix + key, keepStartingFrom, keepEndingAt)", span="194-195"];
m13_28 [cluster="Hangfire.Logging.LogExtensions.Debug(Hangfire.Logging.ILog, System.Func<string>)", file="LibLog.cs", label="GuardAgainstNullLogger(logger)", span="113-113"];
m13_36 [cluster="T.AsFunc<T>()", file="LibLog.cs", label="Entry T.AsFunc<T>()", span="304-304"];
m13_27 [cluster="Hangfire.Logging.LogExtensions.Debug(Hangfire.Logging.ILog, System.Func<string>)", file="LibLog.cs", label="Entry Hangfire.Logging.LogExtensions.Debug(Hangfire.Logging.ILog, System.Func<string>)", span="111-111"];
m13_35 [cluster="Hangfire.Logging.ILog.IsDebugEnabled()", file="LibLog.cs", label="Entry Hangfire.Logging.ILog.IsDebugEnabled()", span="75-75"];
m13_29 [cluster="Hangfire.Logging.LogExtensions.Debug(Hangfire.Logging.ILog, System.Func<string>)", file="LibLog.cs", label="logger.Log(LogLevel.Debug, messageFunc)", span="114-114"];
m13_48 [cluster="Hangfire.Logging.LogExtensions.Error(Hangfire.Logging.ILog, System.Func<string>)", file="LibLog.cs", label="Exit Hangfire.Logging.LogExtensions.Error(Hangfire.Logging.ILog, System.Func<string>)", span="141-141"];
m13_47 [cluster="Hangfire.Logging.LogExtensions.Error(Hangfire.Logging.ILog, System.Func<string>)", file="LibLog.cs", label="logger.Log(LogLevel.Error, messageFunc)", span="143-143"];
m13_68 [cluster="Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, string)", file="LibLog.cs", label="Exit Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, string)", span="175-175"];
m13_72 [cluster="Hangfire.Logging.LogExtensions.FatalFormat(Hangfire.Logging.ILog, string, params object[])", file="LibLog.cs", label="logger.LogFormat(LogLevel.Fatal, message, args)", span="187-187"];
m13_67 [cluster="Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, string)", file="LibLog.cs", label="logger.Log(LogLevel.Fatal, message.AsFunc())", span="179-179"];
m13_71 [cluster="Hangfire.Logging.LogExtensions.FatalFormat(Hangfire.Logging.ILog, string, params object[])", file="LibLog.cs", label="logger.IsFatalEnabled()", span="185-185"];
m13_73 [cluster="Hangfire.Logging.LogExtensions.FatalFormat(Hangfire.Logging.ILog, string, params object[])", file="LibLog.cs", label="Exit Hangfire.Logging.LogExtensions.FatalFormat(Hangfire.Logging.ILog, string, params object[])", span="183-183"];
m13_86 [cluster="Hangfire.Logging.ILog.IsInfoEnabled()", file="LibLog.cs", label="Entry Hangfire.Logging.ILog.IsInfoEnabled()", span="93-93"];
m13_96 [cluster="Hangfire.Logging.LogExtensions.Trace(Hangfire.Logging.ILog, System.Func<string>)", file="LibLog.cs", label="GuardAgainstNullLogger(logger)", span="231-231"];
m13_95 [cluster="Hangfire.Logging.LogExtensions.Trace(Hangfire.Logging.ILog, System.Func<string>)", file="LibLog.cs", label="Entry Hangfire.Logging.LogExtensions.Trace(Hangfire.Logging.ILog, System.Func<string>)", span="229-229"];
m13_97 [cluster="Hangfire.Logging.LogExtensions.Trace(Hangfire.Logging.ILog, System.Func<string>)", file="LibLog.cs", label="logger.Log(LogLevel.Trace, messageFunc)", span="232-232"];
m13_106 [cluster="Hangfire.Logging.LogExtensions.TraceFormat(Hangfire.Logging.ILog, string, params object[])", file="LibLog.cs", label="logger.LogFormat(LogLevel.Trace, message, args)", span="247-247"];
m13_105 [cluster="Hangfire.Logging.LogExtensions.TraceFormat(Hangfire.Logging.ILog, string, params object[])", file="LibLog.cs", label="logger.IsTraceEnabled()", span="245-245"];
m13_107 [cluster="Hangfire.Logging.LogExtensions.TraceFormat(Hangfire.Logging.ILog, string, params object[])", file="LibLog.cs", label="Exit Hangfire.Logging.LogExtensions.TraceFormat(Hangfire.Logging.ILog, string, params object[])", span="243-243"];
m13_114 [cluster="Hangfire.Logging.LogExtensions.Warn(Hangfire.Logging.ILog, System.Func<string>)", file="LibLog.cs", label="logger.Log(LogLevel.Warn, messageFunc)", span="262-262"];
m13_113 [cluster="Hangfire.Logging.LogExtensions.Warn(Hangfire.Logging.ILog, System.Func<string>)", file="LibLog.cs", label="GuardAgainstNullLogger(logger)", span="261-261"];
m13_115 [cluster="Hangfire.Logging.LogExtensions.Warn(Hangfire.Logging.ILog, System.Func<string>)", file="LibLog.cs", label="Exit Hangfire.Logging.LogExtensions.Warn(Hangfire.Logging.ILog, System.Func<string>)", span="259-259"];
m13_123 [cluster="Hangfire.Logging.LogExtensions.WarnFormat(Hangfire.Logging.ILog, string, params object[])", file="LibLog.cs", label="logger.LogFormat(LogLevel.Warn, message, args)", span="277-277"];
m13_122 [cluster="Hangfire.Logging.LogExtensions.WarnFormat(Hangfire.Logging.ILog, string, params object[])", file="LibLog.cs", label="logger.IsWarnEnabled()", span="275-275"];
m13_124 [cluster="Hangfire.Logging.LogExtensions.WarnFormat(Hangfire.Logging.ILog, string, params object[])", file="LibLog.cs", label="Exit Hangfire.Logging.LogExtensions.WarnFormat(Hangfire.Logging.ILog, string, params object[])", span="273-273"];
m13_133 [cluster="Unk.nameof", file="LibLog.cs", label="Entry Unk.nameof", span=""];
m13_140 [cluster="lambda expression", file="LibLog.cs", label="x.AddItemToSortedSet(\r\n                RedisStorage.Prefix + key, value)", span="163-164"];
m13_139 [cluster="lambda expression", file="LibLog.cs", label="Entry lambda expression", span="163-164"];
m13_141 [cluster="lambda expression", file="LibLog.cs", label="Exit lambda expression", span="163-164"];
m13_146 [cluster="Hangfire.Logging.ILogProvider.GetLogger(string)", file="LibLog.cs", label="Exit Hangfire.Logging.ILogProvider.GetLogger(string)", span="320-320"];
m13_152 [cluster="Hangfire.Logging.LogProvider.GetLogger(System.Type)", file="LibLog.cs", label="Exit Hangfire.Logging.LogProvider.GetLogger(System.Type)", span="358-358"];
m13_160 [cluster="Hangfire.Logging.LoggerExecutionWrapper.LoggerExecutionWrapper(Hangfire.Logging.ILog)", file="LibLog.cs", label="Entry Hangfire.Logging.LoggerExecutionWrapper.LoggerExecutionWrapper(Hangfire.Logging.ILog)", span="441-441"];
m13_159 [cluster="Hangfire.Logging.LogProvider.NoOpLogger.NoOpLogger()", file="LibLog.cs", label="Entry Hangfire.Logging.LogProvider.NoOpLogger.NoOpLogger()", span="422-422"];
m13_166 [cluster="lambda expression", file="LibLog.cs", label="new SerilogLogProvider()", span="390-390"];
m13_165 [cluster="lambda expression", file="LibLog.cs", label="Entry lambda expression", span="390-390"];
m13_167 [cluster="lambda expression", file="LibLog.cs", label="Exit lambda expression", span="390-390"];
m13_172 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogProvider()", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogProvider()", span="485-485"];
m13_174 [cluster="lambda expression", file="LibLog.cs", label="new Log4NetLogProvider()", span="392-392"];
m13_180 [cluster="Hangfire.Logging.LogProvider.ResolveLogProvider()", file="LibLog.cs", label=Exception, span="412-412"];
m13_179 [cluster="Hangfire.Logging.LogProvider.ResolveLogProvider()", file="LibLog.cs", label="return providerResolver.Item2();", span="408-408"];
m13_181 [cluster="Hangfire.Logging.LogProvider.ResolveLogProvider()", file="LibLog.cs", label="Console.WriteLine(\r\n                    ''Exception occured resolving a log provider. Logging for this assembly {0} is disabled. {1}'',\r\n                    typeof(LogProvider).GetTypeInfo().Assembly.FullName,\r\n                    ex)", span="414-417"];
m13_186 [cluster="System.Type.GetTypeInfo()", file="LibLog.cs", label="Entry System.Type.GetTypeInfo()", span="0-0"];
m13_185 [cluster="Hangfire.Logging.LogProvider.CreateLogProvider.Invoke()", file="LibLog.cs", label="Entry Hangfire.Logging.LogProvider.CreateLogProvider.Invoke()", span="385-385"];
m13_187 [cluster="System.Console.WriteLine(string, object, object)", file="LibLog.cs", label="Entry System.Console.WriteLine(string, object, object)", span="0-0"];
m13_192 [cluster="Hangfire.Logging.LoggerExecutionWrapper.LoggerExecutionWrapper(Hangfire.Logging.ILog)", file="LibLog.cs", label="Exit Hangfire.Logging.LoggerExecutionWrapper.LoggerExecutionWrapper(Hangfire.Logging.ILog)", span="441-441"];
m13_191 [cluster="Hangfire.Logging.LoggerExecutionWrapper.LoggerExecutionWrapper(Hangfire.Logging.ILog)", file="LibLog.cs", label="_logger = logger", span="443-443"];
m13_193 [cluster="Hangfire.Logging.LoggerExecutionWrapper.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Entry Hangfire.Logging.LoggerExecutionWrapper.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="446-446"];
m13_437 [cluster="lambda expression", file="LibLog.cs", label="func(''Name'', name, false)", span="1043-1043"];
m13_200 [cluster="lambda expression", file="LibLog.cs", label=storedData, span=""];
m13_202 [cluster="lambda expression", file="LibLog.cs", label=storedData, span=""];
m13_436 [cluster="lambda expression", file="LibLog.cs", label="Entry lambda expression", span="1043-1043"];
m13_438 [cluster="lambda expression", file="LibLog.cs", label="Exit lambda expression", span="1043-1043"];
m13_199 [cluster="lambda expression", file="LibLog.cs", label="HangFire.States.State", span=""];
m13_204 [cluster="lambda expression", file="LibLog.cs", label=string, span=""];
m13_201 [cluster="lambda expression", file="LibLog.cs", label=string, span=""];
m13_203 [cluster="lambda expression", file="LibLog.cs", label=string, span=""];
m13_206 [cluster="lambda expression", file="LibLog.cs", label=string, span=""];
m13_208 [cluster="lambda expression", file="LibLog.cs", label=string, span=""];
m13_207 [cluster="lambda expression", file="LibLog.cs", label="System.TimeSpan", span=""];
m13_143 [cluster="Hangfire.Logging.LogExtensions.Return<T>(T)", file="LibLog.cs", label="return value;", span="311-311"];
m13_144 [cluster="Hangfire.Logging.LogExtensions.Return<T>(T)", file="LibLog.cs", label="Exit Hangfire.Logging.LogExtensions.Return<T>(T)", span="309-309"];
m13_145 [cluster="Hangfire.Logging.ILogProvider.GetLogger(string)", file="LibLog.cs", label="Entry Hangfire.Logging.ILogProvider.GetLogger(string)", span="320-320"];
m13_182 [cluster="Hangfire.Logging.LogProvider.ResolveLogProvider()", file="LibLog.cs", label="return null;", span="419-419"];
m13_183 [cluster="Hangfire.Logging.LogProvider.ResolveLogProvider()", file="LibLog.cs", label="Exit Hangfire.Logging.LogProvider.ResolveLogProvider()", span="400-400"];
m13_184 [cluster="Hangfire.Logging.LogProvider.IsLoggerAvailable.Invoke()", file="LibLog.cs", label="Entry Hangfire.Logging.LogProvider.IsLoggerAvailable.Invoke()", span="383-383"];
m13_104 [cluster="Hangfire.Logging.LogExtensions.TraceFormat(Hangfire.Logging.ILog, string, params object[])", file="LibLog.cs", label="Entry Hangfire.Logging.LogExtensions.TraceFormat(Hangfire.Logging.ILog, string, params object[])", span="243-243"];
m13_168 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogProvider()", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogProvider()", span="994-994"];
m13_310 [cluster="Unk.TraceException", file="LibLog.cs", label="Entry Unk.TraceException", span=""];
m13_503 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="LibLog.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m13_205 [cluster="System.Func<TResult>.Invoke()", file="LibLog.cs", label=string, span=""];
m13_235 [cluster="System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, params System.Linq.Expressions.Expression[])", file="LibLog.cs", label="Entry System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, params System.Linq.Expressions.Expression[])", span="0-0"];
m13_158 [cluster="Hangfire.Logging.LogProvider.ResolveLogProvider()", file="LibLog.cs", label="Entry Hangfire.Logging.LogProvider.ResolveLogProvider()", span="400-400"];
m13_240 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="533-533"];
m13_248 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.Debug(messageFunc())", span="548-548"];
m13_252 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.Info(messageFunc())", span="555-555"];
m13_256 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.Warn(messageFunc())", span="562-562"];
m13_260 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.Error(messageFunc())", span="569-569"];
m13_264 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.Fatal(messageFunc())", span="576-576"];
m13_267 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.Trace(messageFunc())", span="583-583"];
m13_247 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsDebugEnabled", span="546-546"];
m13_249 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="549-549"];
m13_251 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsInfoEnabled", span="553-553"];
m13_253 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="556-556"];
m13_255 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsWarnEnabled", span="560-560"];
m13_257 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="563-563"];
m13_259 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsErrorEnabled", span="567-567"];
m13_261 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="570-570"];
m13_263 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsFatalEnabled", span="574-574"];
m13_265 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="577-577"];
m13_266 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsTraceEnabled", span="581-581"];
m13_268 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="584-584"];
m13_241 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="messageFunc == null", span="535-535"];
m13_242 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return IsLogLevelEnable(logLevel);", span="537-537"];
m13_243 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="exception != null", span="539-539"];
m13_244 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return LogException(logLevel, messageFunc, exception);", span="541-541"];
m13_245 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label=logLevel, span="543-543"];
m13_246 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Debug", span="545-545"];
m13_269 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return false;", span="588-588"];
m13_250 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Info", span="552-552"];
m13_254 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Warn", span="559-559"];
m13_258 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Error", span="566-566"];
m13_262 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Fatal", span="573-573"];
m13_270 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="533-533"];
m13_582 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.MessageFormatterDelegate.Invoke(string, Hangfire.Logging.LogLevel, object, System.Exception)", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.MessageFormatterDelegate.Invoke(string, Hangfire.Logging.LogLevel, object, System.Exception)", span="1394-1394"];
m13_111 [cluster="Hangfire.Logging.LogExtensions.TraceException(Hangfire.Logging.ILog, string, System.Exception)", file="LibLog.cs", label="Exit Hangfire.Logging.LogExtensions.TraceException(Hangfire.Logging.ILog, string, System.Exception)", span="251-251"];
m13_109 [cluster="Hangfire.Logging.LogExtensions.TraceException(Hangfire.Logging.ILog, string, System.Exception)", file="LibLog.cs", label="logger.IsTraceEnabled()", span="253-253"];
m13_110 [cluster="Hangfire.Logging.LogExtensions.TraceException(Hangfire.Logging.ILog, string, System.Exception)", file="LibLog.cs", label="logger.Log(LogLevel.Trace, message.AsFunc(), exception)", span="255-255"];
m13_112 [cluster="Hangfire.Logging.LogExtensions.Warn(Hangfire.Logging.ILog, System.Func<string>)", file="LibLog.cs", label="Entry Hangfire.Logging.LogExtensions.Warn(Hangfire.Logging.ILog, System.Func<string>)", span="259-259"];
m13_466 [cluster="System.Enum.Parse(System.Type, string)", file="LibLog.cs", label="Entry System.Enum.Parse(System.Type, string)", span="0-0"];
m13_213 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.IsLoggerAvailable()", file="LibLog.cs", label=string, span=""];
m13_221 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.IsLoggerAvailable()", file="LibLog.cs", label=string, span=""];
m13_222 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.IsLoggerAvailable()", file="LibLog.cs", label=string, span=""];
m13_216 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetLogger(string)", file="LibLog.cs", label=string, span=""];
m13_217 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetLogger(string)", file="LibLog.cs", label=string, span=""];
m13_218 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetLogger(string)", file="LibLog.cs", label=string, span=""];
m13_58 [cluster="Hangfire.Logging.LogExtensions.ErrorException(Hangfire.Logging.ILog, string, System.Exception)", file="LibLog.cs", label="Entry Hangfire.Logging.LogExtensions.ErrorException(Hangfire.Logging.ILog, string, System.Exception)", span="162-162"];
m13_59 [cluster="Hangfire.Logging.LogExtensions.ErrorException(Hangfire.Logging.ILog, string, System.Exception)", file="LibLog.cs", label="logger.IsErrorEnabled()", span="164-164"];
m13_60 [cluster="Hangfire.Logging.LogExtensions.ErrorException(Hangfire.Logging.ILog, string, System.Exception)", file="LibLog.cs", label="logger.Log(LogLevel.Error, message.AsFunc(), exception)", span="166-166"];
m13_61 [cluster="Hangfire.Logging.LogExtensions.ErrorException(Hangfire.Logging.ILog, string, System.Exception)", file="LibLog.cs", label="Exit Hangfire.Logging.LogExtensions.ErrorException(Hangfire.Logging.ILog, string, System.Exception)", span="162-162"];
m13_62 [cluster="Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, System.Func<string>)", file="LibLog.cs", label="Entry Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, System.Func<string>)", span="170-170"];
m13_70 [cluster="Hangfire.Logging.LogExtensions.FatalFormat(Hangfire.Logging.ILog, string, params object[])", file="LibLog.cs", label="Entry Hangfire.Logging.LogExtensions.FatalFormat(Hangfire.Logging.ILog, string, params object[])", span="183-183"];
m13_98 [cluster="Hangfire.Logging.LogExtensions.Trace(Hangfire.Logging.ILog, System.Func<string>)", file="LibLog.cs", label="Exit Hangfire.Logging.LogExtensions.Trace(Hangfire.Logging.ILog, System.Func<string>)", span="229-229"];
m13_219 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.NLogLogger(dynamic)", file="LibLog.cs", label=string, span=""];
m13_238 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.NLogLogger(dynamic)", file="LibLog.cs", label="_logger = logger", span="530-530"];
m13_239 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.NLogLogger(dynamic)", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.NLogLogger(dynamic)", span="528-528"];
m13_345 [cluster="System.Linq.Expressions.Expression.Constant(object)", file="LibLog.cs", label="Entry System.Linq.Expressions.Expression.Constant(object)", span="0-0"];
m13_120 [cluster="Hangfire.Logging.ILog.IsWarnEnabled()", file="LibLog.cs", label="Entry Hangfire.Logging.ILog.IsWarnEnabled()", span="105-105"];
m13_121 [cluster="Hangfire.Logging.LogExtensions.WarnFormat(Hangfire.Logging.ILog, string, params object[])", file="LibLog.cs", label="Entry Hangfire.Logging.LogExtensions.WarnFormat(Hangfire.Logging.ILog, string, params object[])", span="273-273"];
m13_108 [cluster="Unk.IncrementValue", file="LibLog.cs", label="Entry Unk.IncrementValue", span=""];
m13_214 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="LibLog.cs", label=string, span=""];
m13_469 [cluster="System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)", file="LibLog.cs", label="Entry System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)", span="0-0"];
m13_504 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="1186-1186"];
m13_527 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", color=green, community=0, file="LibLog.cs", label="IsEnabled(_logger, VerboseLevel)", prediction=13, span="1226-1226"];
m13_506 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label=logLevel, span="1188-1188"];
m13_528 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="WriteException(_logger, VerboseLevel, exception, messageFunc())", span="1228-1228"];
m13_530 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", color=green, community=0, file="LibLog.cs", label="return false;", prediction=14, span="1233-1233"];
m13_508 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="IsEnabled(_logger, DebugLevel)", span="1191-1191"];
m13_512 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", color=green, community=0, file="LibLog.cs", label="IsEnabled(_logger, InformationLevel)", prediction=13, span="1198-1198"];
m13_516 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", color=green, community=0, file="LibLog.cs", label="IsEnabled(_logger, WarningLevel)", prediction=13, span="1205-1205"];
m13_520 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", color=green, community=0, file="LibLog.cs", label="IsEnabled(_logger, ErrorLevel)", prediction=13, span="1212-1212"];
m13_524 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", color=green, community=0, file="LibLog.cs", label="IsEnabled(_logger, FatalLevel)", prediction=13, span="1219-1219"];
m13_511 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Info", span="1197-1197"];
m13_513 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="WriteException(_logger, InformationLevel, exception, messageFunc())", span="1200-1200"];
m13_515 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Warn", span="1204-1204"];
m13_517 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="WriteException(_logger, WarningLevel, exception, messageFunc())", span="1207-1207"];
m13_519 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Error", span="1211-1211"];
m13_521 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="WriteException(_logger, ErrorLevel, exception, messageFunc())", span="1214-1214"];
m13_523 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Fatal", span="1218-1218"];
m13_525 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="WriteException(_logger, FatalLevel, exception, messageFunc())", span="1221-1221"];
m13_509 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="WriteException(_logger, DebugLevel, exception, messageFunc())", span="1193-1193"];
m13_507 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Debug", span="1190-1190"];
m13_529 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="1229-1229"];
m13_510 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="1194-1194"];
m13_514 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="1201-1201"];
m13_518 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="1208-1208"];
m13_522 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="1215-1215"];
m13_526 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="1222-1222"];
m13_531 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="1186-1186"];
m13_326 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogProvider()", file="LibLog.cs", label="_getLoggerByNameDelegate = GetGetLoggerMethodCall()", span="673-673"];
m13_324 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogProvider()", file="LibLog.cs", label="!IsLoggerAvailable()", span="669-669"];
m13_325 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogProvider()", file="LibLog.cs", label="throw new InvalidOperationException(''log4net.LogManager not found'');", span="671-671"];
m13_327 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogProvider()", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogProvider()", span="667-667"];
m13_275 [cluster="Unk.Warn", file="LibLog.cs", label="Entry Unk.Warn", span=""];
m13_583 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="LibLog.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0"];
m13_63 [cluster="Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, System.Func<string>)", file="LibLog.cs", label="logger.Log(LogLevel.Fatal, messageFunc)", span="172-172"];
m13_414 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogProvider()", file="LibLog.cs", label="_getLoggerByNameDelegate = GetForContextMethodCall()", span="1000-1000"];
m13_412 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogProvider()", file="LibLog.cs", label="!IsLoggerAvailable()", span="996-996"];
m13_413 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogProvider()", file="LibLog.cs", label="throw new InvalidOperationException(''Serilog.Log not found'');", span="998-998"];
m13_415 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogProvider()", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogProvider()", span="994-994"];
m13_584 [cluster="System.IO.TextWriter.WriteLine(string)", file="LibLog.cs", label="Entry System.IO.TextWriter.WriteLine(string)", span="0-0"];
m13_64 [cluster="Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, System.Func<string>)", file="LibLog.cs", label="Exit Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, System.Func<string>)", span="170-170"];
m13_329 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetGetLoggerMethodCall()", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.Log4NetLogProvider.GetGetLoggerMethodCall()", span="697-697"];
m13_343 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetGetLoggerMethodCall()", file="LibLog.cs", label="return Expression.Lambda<Func<string, object>>(methodCall, new[] { nameParam }).Compile();", span="703-703"];
m13_342 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetGetLoggerMethodCall()", file="LibLog.cs", label="MethodCallExpression methodCall = Expression.Call(null, method, new Expression[] { Expression.Constant(typeof(Log4NetLogProvider).GetTypeInfo().Assembly), nameParam })", span="702-702"];
m13_341 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetGetLoggerMethodCall()", file="LibLog.cs", label="ParameterExpression nameParam = Expression.Parameter(typeof(string), ''name'')", span="701-701"];
m13_340 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetGetLoggerMethodCall()", file="LibLog.cs", label="MethodInfo method = logManagerType.GetRuntimeMethod(''GetLogger'', new[] { typeof(Assembly), typeof(string) })", span="700-700"];
m13_339 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetGetLoggerMethodCall()", file="LibLog.cs", label="Type logManagerType = GetLogManagerType()", span="699-699"];
m13_344 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetGetLoggerMethodCall()", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.Log4NetLogProvider.GetGetLoggerMethodCall()", span="697-697"];
m13_85 [cluster="Hangfire.Logging.LogExtensions.Info(Hangfire.Logging.ILog, string)", file="LibLog.cs", label="Exit Hangfire.Logging.LogExtensions.Info(Hangfire.Logging.ILog, string)", span="205-205"];
m13_21 [cluster="Hangfire.Logging.LogExtensions.IsTraceEnabled(Hangfire.Logging.ILog)", file="LibLog.cs", label="return logger.Log(LogLevel.Trace, null);", span="102-102"];
m13_22 [cluster="Hangfire.Logging.LogExtensions.IsTraceEnabled(Hangfire.Logging.ILog)", file="LibLog.cs", label="Exit Hangfire.Logging.LogExtensions.IsTraceEnabled(Hangfire.Logging.ILog)", span="99-99"];
m13_66 [cluster="Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, string)", file="LibLog.cs", label="logger.IsFatalEnabled()", span="177-177"];
m13_83 [cluster="Hangfire.Logging.LogExtensions.Info(Hangfire.Logging.ILog, string)", file="LibLog.cs", label="logger.IsInfoEnabled()", span="207-207"];
m13_82 [cluster="Hangfire.Logging.LogExtensions.Info(Hangfire.Logging.ILog, string)", file="LibLog.cs", label="Entry Hangfire.Logging.LogExtensions.Info(Hangfire.Logging.ILog, string)", span="205-205"];
m13_84 [cluster="Hangfire.Logging.LogExtensions.Info(Hangfire.Logging.ILog, string)", file="LibLog.cs", label="logger.Log(LogLevel.Info, message.AsFunc())", span="209-209"];
m13_417 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", span="1024-1024"];
m13_433 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", file="LibLog.cs", label="var func = Expression.Lambda<Func<string, object, bool, object>>(methodCall, new[]\r\n            {\r\n                propertyNameParam,\r\n                valueParam,\r\n                destructureObjectsParam\r\n            }).Compile()", span="1037-1042"];
m13_432 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", file="LibLog.cs", label="MethodCallExpression methodCall = Expression.Call(null, method, new Expression[]\r\n            {\r\n                propertyNameParam, \r\n                valueParam,\r\n                destructureObjectsParam\r\n            })", span="1031-1036"];
m13_429 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", file="LibLog.cs", label="ParameterExpression propertyNameParam = Expression.Parameter(typeof(string), ''propertyName'')", span="1028-1028"];
m13_430 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", file="LibLog.cs", label="ParameterExpression valueParam = Expression.Parameter(typeof(object), ''value'')", span="1029-1029"];
m13_431 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", file="LibLog.cs", label="ParameterExpression destructureObjectsParam = Expression.Parameter(typeof(bool), ''destructureObjects'')", span="1030-1030"];
m13_434 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", file="LibLog.cs", label="return name => func(''Name'', name, false);", span="1043-1043"];
m13_428 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", file="LibLog.cs", label="MethodInfo method = logManagerType.GetRuntimeMethod(''ForContext'', new[] { typeof(string), typeof(object), typeof(bool) })", span="1027-1027"];
m13_427 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", file="LibLog.cs", label="Type logManagerType = GetLogManagerType()", span="1026-1026"];
m13_435 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", span="1024-1024"];
m13_271 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", span="641-641"];
m13_313 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="return _logger.IsDebugEnabled;", span="646-646"];
m13_315 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="return _logger.IsInfoEnabled;", span="648-648"];
m13_317 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="return _logger.IsWarnEnabled;", span="650-650"];
m13_319 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="return _logger.IsErrorEnabled;", span="652-652"];
m13_321 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="return _logger.IsFatalEnabled;", span="654-654"];
m13_322 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="return _logger.IsTraceEnabled;", span="656-656"];
m13_311 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label=logLevel, span="643-643"];
m13_312 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="LogLevel.Debug", span="645-645"];
m13_314 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="LogLevel.Info", span="647-647"];
m13_316 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="LogLevel.Warn", span="649-649"];
m13_318 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="LogLevel.Error", span="651-651"];
m13_320 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="LogLevel.Fatal", span="653-653"];
m13_323 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", span="641-641"];
m13_20 [cluster="Hangfire.Logging.LogExtensions.IsTraceEnabled(Hangfire.Logging.ILog)", file="LibLog.cs", label="GuardAgainstNullLogger(logger)", span="101-101"];
m13_472 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="1127-1127"];
m13_498 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", color=green, community=0, file="LibLog.cs", label="IsEnabled(_logger, VerboseLevel)", prediction=13, span="1176-1176"];
m13_477 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label=logLevel, span="1138-1138"];
m13_499 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Write(_logger, VerboseLevel, messageFunc())", span="1178-1178"];
m13_501 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", color=green, community=0, file="LibLog.cs", label="return false;", prediction=20, span="1183-1183"];
m13_479 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="IsEnabled(_logger, DebugLevel)", span="1141-1141"];
m13_483 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", color=green, community=0, file="LibLog.cs", label="IsEnabled(_logger, InformationLevel)", prediction=13, span="1148-1148"];
m13_487 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", color=green, community=0, file="LibLog.cs", label="IsEnabled(_logger, WarningLevel)", prediction=13, span="1155-1155"];
m13_491 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", color=green, community=0, file="LibLog.cs", label="IsEnabled(_logger, ErrorLevel)", prediction=13, span="1162-1162"];
m13_495 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", color=green, community=0, file="LibLog.cs", label="IsEnabled(_logger, FatalLevel)", prediction=13, span="1169-1169"];
m13_482 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Info", span="1147-1147"];
m13_484 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Write(_logger, InformationLevel, messageFunc())", span="1150-1150"];
m13_486 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Warn", span="1154-1154"];
m13_488 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Write(_logger, WarningLevel, messageFunc())", span="1157-1157"];
m13_490 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Error", span="1161-1161"];
m13_492 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Write(_logger, ErrorLevel, messageFunc())", span="1164-1164"];
m13_494 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Fatal", span="1168-1168"];
m13_496 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Write(_logger, FatalLevel, messageFunc())", span="1171-1171"];
m13_474 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return IsEnabled(_logger, logLevel);", span="1131-1131"];
m13_476 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return LogException(logLevel, messageFunc, exception);", span="1135-1135"];
m13_480 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Write(_logger, DebugLevel, messageFunc())", span="1143-1143"];
m13_475 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="exception != null", span="1133-1133"];
m13_478 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Debug", span="1140-1140"];
m13_500 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="1179-1179"];
m13_481 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="1144-1144"];
m13_485 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="1151-1151"];
m13_489 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="1158-1158"];
m13_493 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="1165-1165"];
m13_497 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="1172-1172"];
m13_473 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="messageFunc == null", span="1129-1129"];
m13_502 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="1127-1127"];
m13_276 [cluster="Unk.Error", file="LibLog.cs", label="Entry Unk.Error", span=""];
m13_19 [cluster="Unk.Replay", file="LibLog.cs", label="Entry Unk.Replay", span=""];
m13_65 [cluster="Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, string)", file="LibLog.cs", label="Entry Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, string)", span="175-175"];
m13_566 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="1441-1441"];
m13_569 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Write(logLevel, messageFunc(), exception)", span="1448-1448"];
m13_567 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="messageFunc == null", span="1443-1443"];
m13_570 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="1449-1449"];
m13_568 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="1445-1445"];
m13_571 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="1441-1441"];
m13_348 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="715-715"];
m13_356 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.Info(messageFunc())", span="730-730"];
m13_360 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.Warn(messageFunc())", span="737-737"];
m13_364 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.Error(messageFunc())", span="744-744"];
m13_368 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.Fatal(messageFunc())", span="751-751"];
m13_371 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.Debug(messageFunc())", span="758-758"];
m13_355 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsInfoEnabled", span="728-728"];
m13_357 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="731-731"];
m13_359 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsWarnEnabled", span="735-735"];
m13_361 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="738-738"];
m13_363 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsErrorEnabled", span="742-742"];
m13_365 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="745-745"];
m13_367 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsFatalEnabled", span="749-749"];
m13_369 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="752-752"];
m13_370 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="_logger.IsDebugEnabled", span="756-756"];
m13_372 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return true;", span="759-759"];
m13_349 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="messageFunc == null", span="717-717"];
m13_350 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return IsLogLevelEnable(logLevel);", span="719-719"];
m13_351 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="exception != null", span="721-721"];
m13_352 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return LogException(logLevel, messageFunc, exception);", span="723-723"];
m13_353 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label=logLevel, span="725-725"];
m13_354 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Info", span="727-727"];
m13_373 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="return false;", span="763-763"];
m13_358 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Warn", span="734-734"];
m13_362 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Error", span="741-741"];
m13_366 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="LogLevel.Fatal", span="748-748"];
m13_374 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="715-715"];
m13_215 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetGetLoggerMethodCall()", file="LibLog.cs", label=double, span=""];
m13_231 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetGetLoggerMethodCall()", file="LibLog.cs", label="return Expression.Lambda<Func<string, object>>(methodCall, new[] { nameParam }).Compile();", span="521-521"];
m13_230 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetGetLoggerMethodCall()", file="LibLog.cs", label="MethodCallExpression methodCall = Expression.Call(null, method, new Expression[] { nameParam })", span="520-520"];
m13_229 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetGetLoggerMethodCall()", file="LibLog.cs", label="ParameterExpression nameParam = Expression.Parameter(typeof(string), ''name'')", span="519-519"];
m13_228 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetGetLoggerMethodCall()", file="LibLog.cs", label="System.TimeSpan", span=""];
m13_227 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetGetLoggerMethodCall()", file="LibLog.cs", label=string, span=""];
m13_232 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetGetLoggerMethodCall()", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.NLogLogProvider.GetGetLoggerMethodCall()", span="515-515"];
m13_30 [cluster="Hangfire.Logging.LogExtensions.Debug(Hangfire.Logging.ILog, System.Func<string>)", file="LibLog.cs", label="Exit Hangfire.Logging.LogExtensions.Debug(Hangfire.Logging.ILog, System.Func<string>)", span="111-111"];
m13_211 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogProvider()", file="LibLog.cs", label=string, span=""];
m13_209 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogProvider()", file="LibLog.cs", label=string, span=""];
m13_210 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogProvider()", file="LibLog.cs", label="System.TimeSpan", span=""];
m13_212 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogProvider()", file="LibLog.cs", label=string, span=""];
m13_309 [cluster="Unk.FatalException", file="LibLog.cs", label="Entry Unk.FatalException", span=""];
m13_196 [cluster="Hangfire.Logging.LoggerExecutionWrapper.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="System.TimeSpan", span=""];
m13_195 [cluster="Hangfire.Logging.LoggerExecutionWrapper.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label=string, span=""];
m13_197 [cluster="Hangfire.Logging.LoggerExecutionWrapper.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label=string, span=""];
m13_194 [cluster="Hangfire.Logging.LoggerExecutionWrapper.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label="HangFire.Redis.RedisWriteOnlyTransaction", span=""];
m13_198 [cluster="Hangfire.Logging.LoggerExecutionWrapper.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="LibLog.cs", label=string, span=""];
m13_226 [cluster="System.Type.GetType(string)", file="LibLog.cs", label=string, span=""];
m13_233 [cluster="System.Type.GetRuntimeMethod(string, System.Type[])", file="LibLog.cs", label="Entry System.Type.GetRuntimeMethod(string, System.Type[])", span="0-0"];
m13_330 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetLogger(string)", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.Log4NetLogProvider.GetLogger(string)", span="682-682"];
m13_331 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetLogger(string)", file="LibLog.cs", label="return new Log4NetLogger(_getLoggerByNameDelegate(name));", span="684-684"];
m13_332 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetLogger(string)", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.Log4NetLogProvider.GetLogger(string)", span="682-682"];
m13_538 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.GetLogger(string)", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.GetLogger(string)", span="1381-1381"];
m13_539 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.GetLogger(string)", file="LibLog.cs", label="return new ColouredConsoleLogger(name);", span="1383-1383"];
m13_540 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.GetLogger(string)", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.GetLogger(string)", span="1381-1381"];
m13_308 [cluster="Unk.ErrorException", file="LibLog.cs", label="Entry Unk.ErrorException", span=""];
m13_418 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetLogger(string)", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.SerilogLogProvider.GetLogger(string)", span="1009-1009"];
m13_419 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetLogger(string)", file="LibLog.cs", label="return new SerilogLogger(_getLoggerByNameDelegate(name));", span="1011-1011"];
m13_420 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetLogger(string)", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.SerilogLogProvider.GetLogger(string)", span="1009-1009"];
m13_375 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="Entry Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", span="809-809"];
m13_401 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="return _logger.IsDebugEnabled;", span="814-814"];
m13_403 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="return _logger.IsInfoEnabled;", span="816-816"];
m13_405 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="return _logger.IsWarnEnabled;", span="818-818"];
m13_407 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="return _logger.IsErrorEnabled;", span="820-820"];
m13_409 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="return _logger.IsFatalEnabled;", span="822-822"];
m13_410 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="return _logger.IsDebugEnabled;", span="824-824"];
m13_399 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label=logLevel, span="811-811"];
m13_400 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="LogLevel.Debug", span="813-813"];
m13_402 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="LogLevel.Info", span="815-815"];
m13_404 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="LogLevel.Warn", span="817-817"];
m13_406 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="LogLevel.Error", span="819-819"];
m13_408 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="LogLevel.Fatal", span="821-821"];
m13_411 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="LibLog.cs", label="Exit Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", span="809-809"];
m13_2 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="LibLog.cs", label="throw new ArgumentNullException(''transaction'');", span="31-31"];
m13_4 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="LibLog.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", span="29-29"];
m13_3 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="LibLog.cs", label="_transaction = transaction", span="33-33"];
m13_593 [file="LibLog.cs", label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", span=""];
m13_591 [file="LibLog.cs", label="Hangfire.Logging.LogProviders.SerilogLogProvider", span=""];
m13_585 [file="LibLog.cs", label="Hangfire.Logging.LoggerExecutionWrapper", span=""];
m13_592 [file="LibLog.cs", label=func, span=""];
m13_586 [file="LibLog.cs", label="System.Func<string>", span=""];
m13_588 [file="LibLog.cs", label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", span=""];
m13_590 [file="LibLog.cs", label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", span=""];
m13_594 [file="LibLog.cs", label="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger", span=""];
m13_587 [file="LibLog.cs", label="Hangfire.Logging.LogProviders.NLogLogProvider", span=""];
m13_589 [file="LibLog.cs", label="Hangfire.Logging.LogProviders.Log4NetLogProvider", span=""];
m14_0 [cluster="HangFire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", file="MiddlewareExtensions.cs", label="Entry HangFire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", span="7-7"];
m14_1 [cluster="HangFire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", file="MiddlewareExtensions.cs", label="Exit HangFire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", span="7-7"];
m16_15 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="RecurringJobScheduler.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m16_74 [cluster="Hangfire.Storage.InvocationData.Deserialize()", file="RecurringJobScheduler.cs", label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="45-45"];
m16_89 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="RecurringJobScheduler.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m16_103 [cluster="Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", span="28-28"];
m16_102 [cluster="Hangfire.JobStorage.GetConnection()", file="RecurringJobScheduler.cs", label="Entry Hangfire.JobStorage.GetConnection()", span="56-56"];
m16_121 [cluster="System.DateTime.AddSeconds(double)", file="RecurringJobScheduler.cs", label="Entry System.DateTime.AddSeconds(double)", span="0-0"];
m16_40 [cluster="Hangfire.Server.RecurringJobScheduler.ToString()", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.RecurringJobScheduler.ToString()", span="149-149"];
m16_41 [cluster="Hangfire.Server.RecurringJobScheduler.ToString()", file="RecurringJobScheduler.cs", label="return GetType().Name;", span="151-151"];
m16_42 [cluster="Hangfire.Server.RecurringJobScheduler.ToString()", file="RecurringJobScheduler.cs", label="Exit Hangfire.Server.RecurringJobScheduler.ToString()", span="149-149"];
m16_83 [cluster="Hangfire.States.EnqueuedState.EnqueuedState()", file="RecurringJobScheduler.cs", label="Entry Hangfire.States.EnqueuedState.EnqueuedState()", span="87-87"];
m16_90 [cluster="Hangfire.Storage.IStorageConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Storage.IStorageConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="61-61"];
m16_43 [cluster="object.GetType()", file="RecurringJobScheduler.cs", label="Entry object.GetType()", span="0-0"];
m16_92 [cluster="string.Equals(string)", file="RecurringJobScheduler.cs", label="Entry string.Equals(string)", span="0-0"];
m16_0 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler()", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler()", span="78-78"];
m16_1 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler()", file="RecurringJobScheduler.cs", label="Exit Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler()", span="78-78"];
m16_39 [cluster="Hangfire.Logging.ILog.WarnException(string, System.Exception)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Logging.ILog.WarnException(string, System.Exception)", span="280-280"];
m16_25 [cluster="Hangfire.Server.RecurringJobScheduler.UseConnectionDistributedLock(Hangfire.JobStorage, System.Action<Hangfire.Storage.IStorageConnection>)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.RecurringJobScheduler.UseConnectionDistributedLock(Hangfire.JobStorage, System.Action<Hangfire.Storage.IStorageConnection>)", span="228-228"];
m16_94 [cluster="Hangfire.Server.RecurringJobScheduler.UseConnectionDistributedLock(Hangfire.JobStorage, System.Action<Hangfire.Storage.IStorageConnection>)", file="RecurringJobScheduler.cs", label="var resource = ''recurring-jobs:lock''", span="230-230"];
m16_95 [cluster="Hangfire.Server.RecurringJobScheduler.UseConnectionDistributedLock(Hangfire.JobStorage, System.Action<Hangfire.Storage.IStorageConnection>)", file="RecurringJobScheduler.cs", label="var connection = storage.GetConnection()", span="233-233"];
m16_97 [cluster="Hangfire.Server.RecurringJobScheduler.UseConnectionDistributedLock(Hangfire.JobStorage, System.Action<Hangfire.Storage.IStorageConnection>)", file="RecurringJobScheduler.cs", label="action(connection)", span="236-236"];
m16_96 [cluster="Hangfire.Server.RecurringJobScheduler.UseConnectionDistributedLock(Hangfire.JobStorage, System.Action<Hangfire.Storage.IStorageConnection>)", file="RecurringJobScheduler.cs", label="connection.AcquireDistributedLock(resource, LockTimeout)", span="234-234"];
m16_99 [cluster="Hangfire.Server.RecurringJobScheduler.UseConnectionDistributedLock(Hangfire.JobStorage, System.Action<Hangfire.Storage.IStorageConnection>)", file="RecurringJobScheduler.cs", label="e.Resource == resource", span="239-239"];
m16_98 [cluster="Hangfire.Server.RecurringJobScheduler.UseConnectionDistributedLock(Hangfire.JobStorage, System.Action<Hangfire.Storage.IStorageConnection>)", file="RecurringJobScheduler.cs", label=DistributedLockTimeoutException, span="239-239"];
m16_101 [cluster="Hangfire.Server.RecurringJobScheduler.UseConnectionDistributedLock(Hangfire.JobStorage, System.Action<Hangfire.Storage.IStorageConnection>)", file="RecurringJobScheduler.cs", label="Exit Hangfire.Server.RecurringJobScheduler.UseConnectionDistributedLock(Hangfire.JobStorage, System.Action<Hangfire.Storage.IStorageConnection>)", span="228-228"];
m16_77 [cluster="System.TimeZoneInfo.FindSystemTimeZoneById(string)", file="RecurringJobScheduler.cs", label="Entry System.TimeZoneInfo.FindSystemTimeZoneById(string)", span="0-0"];
m16_82 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="RecurringJobScheduler.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m16_85 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Client.CreateContext.CreateContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", span="37-37"];
m16_16 [cluster="Unk.nameof", file="RecurringJobScheduler.cs", label="Entry Unk.nameof", span=""];
m16_104 [cluster="System.Action<T>.Invoke(T)", file="RecurringJobScheduler.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m16_24 [cluster="Hangfire.Server.IThrottler.Throttle(System.Threading.CancellationToken)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.IThrottler.Throttle(System.Threading.CancellationToken)", span="22-22"];
m16_2 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", span="90-90"];
m16_3 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", file="RecurringJobScheduler.cs", label="Exit Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", span="90-90"];
m16_79 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RecurringJobScheduler.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m16_105 [cluster="Hangfire.Logging.ILog.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Logging.ILog.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="56-56"];
m16_88 [cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68"];
m16_81 [cluster="Hangfire.Server.IScheduleInstant.GetNextInstants(System.DateTime)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.IScheduleInstant.GetNextInstants(System.DateTime)", span="25-25"];
m16_73 [cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39"];
m16_38 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", span="154-154"];
m16_44 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="var serializedJob = JobHelper.FromJson<InvocationData>(recurringJob[''Job''])", span="160-160"];
m16_46 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="var cron = recurringJob[''Cron'']", span="162-162"];
m16_48 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="var timeZone = recurringJob.ContainsKey(''TimeZoneId'')\r\n                    ? TimeZoneInfo.FindSystemTimeZoneById(recurringJob[''TimeZoneId''])\r\n                    : TimeZoneInfo.Utc", span="167-169"];
m16_51 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="var lastInstant = GetLastInstant(recurringJob, nowInstant)", span="174-174"];
m16_54 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="recurringJob.ContainsKey(''Queue'') && !String.IsNullOrEmpty(recurringJob[''Queue''])", span="179-179"];
m16_55 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="state.Queue = recurringJob[''Queue'']", span="181-181"];
m16_56 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="var context = new CreateContext(storage, connection, job, state)", span="184-184"];
m16_57 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="context.Parameters[''RecurringJobId''] = recurringJobId", span="185-185"];
m16_64 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="!recurringJob.ContainsKey(''CreatedAt'')", span="200-200"];
m16_67 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="connection.SetRangeInHash(\r\n                    $''recurring-job:{recurringJobId}'',\r\n                    changedFields)", span="207-209"];
m16_45 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="var job = serializedJob.Deserialize()", span="161-161"];
m16_47 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="var cronSchedule = CrontabSchedule.Parse(cron)", span="163-163"];
m16_49 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="var nowInstant = _instantFactory(cronSchedule, timeZone)", span="171-171"];
m16_50 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="var changedFields = new Dictionary<string, string>()", span="172-172"];
m16_52 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="nowInstant.GetNextInstants(lastInstant).Any()", span="176-176"];
m16_62 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="changedFields.Add(''LastExecution'', JobHelper.SerializeDateTime(nowInstant.NowInstant))", span="195-195"];
m16_65 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="changedFields.Add(''CreatedAt'', JobHelper.SerializeDateTime(nowInstant.NowInstant))", span="202-202"];
m16_66 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="changedFields.Add(''NextExecution'', nowInstant.NextInstant.HasValue ? JobHelper.SerializeDateTime(nowInstant.NextInstant.Value) : null)", span="205-205"];
m16_63 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="changedFields.Add(''LastJobId'', jobId ?? String.Empty)", span="196-196"];
m16_53 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="var state = new EnqueuedState { Reason = ''Triggered by recurring job scheduler'' }", span="178-178"];
m16_58 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="var backgroundJob = _factory.Create(context)", span="187-187"];
m16_59 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="var jobId = backgroundJob?.Id", span="188-188"];
m16_60 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="String.IsNullOrEmpty(jobId)", span="190-190"];
m16_68 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label=Exception, span="215-215"];
m16_69 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="!ex.GetType().Name.Equals(''TimeZoneNotFoundException'')", span="218-218"];
m16_70 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="throw;", span="218-218"];
m16_72 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="RecurringJobScheduler.cs", label="Exit Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", span="154-154"];
m16_84 [cluster="string.IsNullOrEmpty(string)", file="RecurringJobScheduler.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m16_4 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", span="95-95"];
m16_5 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="factory == null", span="100-100"];
m16_6 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="throw new ArgumentNullException(nameof(factory));", span="100-100"];
m16_7 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="instantFactory == null", span="101-101"];
m16_8 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="throw new ArgumentNullException(nameof(instantFactory));", span="101-101"];
m16_9 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="throttler == null", span="102-102"];
m16_10 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="throw new ArgumentNullException(nameof(throttler));", span="102-102"];
m16_11 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="_factory = factory", span="104-104"];
m16_12 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="_instantFactory = instantFactory", span="105-105"];
m16_13 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="_throttler = throttler", span="106-106"];
m16_14 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="Exit Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", span="95-95"];
m16_120 [cluster="Hangfire.Common.JobHelper.DeserializeDateTime(string)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Common.JobHelper.DeserializeDateTime(string)", span="73-73"];
m16_17 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="110-110"];
m16_18 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="context == null", span="112-112"];
m16_19 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="throw new ArgumentNullException(nameof(context));", span="112-112"];
m16_20 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="_throttler.Throttle(context.CancellationToken)", span="114-114"];
m16_22 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="_throttler.Delay(context.CancellationToken)", span="145-145"];
m16_23 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="Exit Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="110-110"];
m16_26 [cluster="Hangfire.Server.IThrottler.Delay(System.Threading.CancellationToken)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.IThrottler.Delay(System.Threading.CancellationToken)", span="23-23"];
m16_106 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Entry lambda expression", span="245-245"];
m16_32 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="TryScheduleJob(context.Storage, connection, recurringJobId, recurringJob)", span="132-132"];
m16_27 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Entry lambda expression", span="116-141"];
m16_28 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="var recurringJobIds = connection.GetAllItemsFromSet(''recurring-jobs'')", span="118-118"];
m16_30 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="var recurringJob = connection.GetAllEntriesFromHash(\r\n                        $''recurring-job:{recurringJobId}'')", span="122-123"];
m16_29 [cluster="lambda expression", file="RecurringJobScheduler.cs", label=recurringJobIds, span="120-120"];
m16_35 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Exit lambda expression", span="116-141"];
m16_31 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="recurringJob == null", span="125-125"];
m16_33 [cluster="lambda expression", file="RecurringJobScheduler.cs", label=JobLoadException, span="134-134"];
m16_107 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="$@''An exception was thrown during acquiring distributed lock the {resource} resource within {LockTimeout.TotalSeconds} seconds. The recurring jobs have not been handled this time.''", span="245-245"];
m16_108 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Exit lambda expression", span="245-245"];
m16_91 [cluster="System.Exception.GetType()", file="RecurringJobScheduler.cs", label="Entry System.Exception.GetType()", span="0-0"];
m16_87 [cluster="Hangfire.Logging.ILog.Debug(string)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Logging.ILog.Debug(string)", span="116-116"];
m16_36 [cluster="Hangfire.Storage.IStorageConnection.GetAllItemsFromSet(string)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Storage.IStorageConnection.GetAllItemsFromSet(string)", span="55-55"];
m16_37 [cluster="Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", span="64-64"];
m16_93 [cluster="Hangfire.Logging.ILog.ErrorException(string, System.Exception)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Logging.ILog.ErrorException(string, System.Exception)", span="161-161"];
m16_76 [cluster="System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey)", file="RecurringJobScheduler.cs", label="Entry System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m16_75 [cluster="NCrontab.CrontabSchedule.Parse(string)", file="RecurringJobScheduler.cs", label="Entry NCrontab.CrontabSchedule.Parse(string)", span="93-93"];
m16_78 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="RecurringJobScheduler.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m16_80 [cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", span="250-250"];
m16_109 [cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="RecurringJobScheduler.cs", label="DateTime lastInstant", span="252-252"];
m16_110 [cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="RecurringJobScheduler.cs", label="recurringJob.ContainsKey(''LastExecution'')", span="254-254"];
m16_111 [cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="RecurringJobScheduler.cs", label="lastInstant = JobHelper.DeserializeDateTime(recurringJob[''LastExecution''])", span="256-256"];
m16_112 [cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="RecurringJobScheduler.cs", label="recurringJob.ContainsKey(''CreatedAt'')", span="258-258"];
m16_113 [cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="RecurringJobScheduler.cs", label="lastInstant = JobHelper.DeserializeDateTime(recurringJob[''CreatedAt''])", span="260-260"];
m16_114 [cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="RecurringJobScheduler.cs", label="recurringJob.ContainsKey(''NextExecution'')", span="262-262"];
m16_115 [cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="RecurringJobScheduler.cs", label="lastInstant = JobHelper.DeserializeDateTime(recurringJob[''NextExecution''])", span="264-264"];
m16_117 [cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="RecurringJobScheduler.cs", label="lastInstant = instant.NowInstant.AddSeconds(-1)", span="269-269"];
m16_116 [cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="RecurringJobScheduler.cs", label="lastInstant = lastInstant.AddSeconds(-1)", span="265-265"];
m16_118 [cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="RecurringJobScheduler.cs", label="return lastInstant;", span="272-272"];
m16_119 [cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="RecurringJobScheduler.cs", label="Exit Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", span="250-250"];
m16_86 [cluster="Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", span="31-31"];
m16_122 [file="RecurringJobScheduler.cs", label="Hangfire.Server.RecurringJobScheduler", span=""];
m16_123 [file="RecurringJobScheduler.cs", label="Hangfire.Server.BackgroundProcessContext", span=""];
m16_124 [file="RecurringJobScheduler.cs", label=resource, span=""];
m17_13 [cluster="Hangfire.Logging.ILog.Info(string)", file="ServerWatchdog.cs", label="Entry Hangfire.Logging.ILog.Info(string)", span="205-205"];
m17_11 [cluster="Hangfire.JobStorage.GetConnection()", file="ServerWatchdog.cs", label="Entry Hangfire.JobStorage.GetConnection()", span="56-56"];
m17_15 [cluster="Hangfire.Server.ServerWatchdog.ToString()", file="ServerWatchdog.cs", label="Entry Hangfire.Server.ServerWatchdog.ToString()", span="51-51"];
m17_16 [cluster="Hangfire.Server.ServerWatchdog.ToString()", file="ServerWatchdog.cs", label="return GetType().Name;", span="53-53"];
m17_17 [cluster="Hangfire.Server.ServerWatchdog.ToString()", file="ServerWatchdog.cs", label="Exit Hangfire.Server.ServerWatchdog.ToString()", span="51-51"];
m17_4 [cluster="Hangfire.Server.ServerWatchdog.Execute(Hangfire.Server.BackgroundProcessContext)", file="ServerWatchdog.cs", label="Entry Hangfire.Server.ServerWatchdog.Execute(Hangfire.Server.BackgroundProcessContext)", span="37-37"];
m17_8 [cluster="Hangfire.Server.ServerWatchdog.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="ServerWatchdog.cs", label="Logger.Info($''{serversRemoved} servers were removed due to timeout'')", prediction=25, span="44-44"];
m17_6 [cluster="Hangfire.Server.ServerWatchdog.Execute(Hangfire.Server.BackgroundProcessContext)", file="ServerWatchdog.cs", label="var serversRemoved = connection.RemoveTimedOutServers(_serverTimeout)", span="41-41"];
m17_7 [cluster="Hangfire.Server.ServerWatchdog.Execute(Hangfire.Server.BackgroundProcessContext)", file="ServerWatchdog.cs", label="serversRemoved != 0", span="42-42"];
m17_9 [cluster="Hangfire.Server.ServerWatchdog.Execute(Hangfire.Server.BackgroundProcessContext)", file="ServerWatchdog.cs", label="context.Wait(_checkInterval)", span="48-48"];
m17_5 [cluster="Hangfire.Server.ServerWatchdog.Execute(Hangfire.Server.BackgroundProcessContext)", file="ServerWatchdog.cs", label="var connection = context.Storage.GetConnection()", span="39-39"];
m17_10 [cluster="Hangfire.Server.ServerWatchdog.Execute(Hangfire.Server.BackgroundProcessContext)", file="ServerWatchdog.cs", label="Exit Hangfire.Server.ServerWatchdog.Execute(Hangfire.Server.BackgroundProcessContext)", span="37-37"];
m17_14 [cluster="Hangfire.Server.BackgroundProcessContext.Wait(System.TimeSpan)", file="ServerWatchdog.cs", label="Entry Hangfire.Server.BackgroundProcessContext.Wait(System.TimeSpan)", span="55-55"];
m17_12 [cluster="Hangfire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="ServerWatchdog.cs", label="Entry Hangfire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="50-50"];
m17_0 [cluster="Hangfire.Server.ServerWatchdog.ServerWatchdog(System.TimeSpan, System.TimeSpan)", file="ServerWatchdog.cs", label="Entry Hangfire.Server.ServerWatchdog.ServerWatchdog(System.TimeSpan, System.TimeSpan)", span="31-31"];
m17_1 [cluster="Hangfire.Server.ServerWatchdog.ServerWatchdog(System.TimeSpan, System.TimeSpan)", file="ServerWatchdog.cs", label="_checkInterval = checkInterval", span="33-33"];
m17_2 [cluster="Hangfire.Server.ServerWatchdog.ServerWatchdog(System.TimeSpan, System.TimeSpan)", file="ServerWatchdog.cs", label="_serverTimeout = serverTimeout", span="34-34"];
m17_3 [cluster="Hangfire.Server.ServerWatchdog.ServerWatchdog(System.TimeSpan, System.TimeSpan)", file="ServerWatchdog.cs", label="Exit Hangfire.Server.ServerWatchdog.ServerWatchdog(System.TimeSpan, System.TimeSpan)", span="31-31"];
m17_18 [cluster="object.GetType()", file="ServerWatchdog.cs", label="Entry object.GetType()", span="0-0"];
m17_19 [file="ServerWatchdog.cs", label="Hangfire.Server.ServerWatchdog", span=""];
m19_5 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="storage == null", span="70-70"];
m19_15 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerObjectsInstaller.cs", label="return new SqlServerDistributedLock(\r\n                String.Format(''HangFire:Job:{0}'', jobId), \r\n                _connection);", span="54-56"];
m19_117 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="236-236"];
m19_123 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerObjectsInstaller.cs", label="_connection.Execute(\r\n                @''merge HangFire.Server as Target ''\r\n                + @''using (VALUES (@id, @data)) as Source (Id, Data) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = null ''\r\n                + @''when not matched then insert (Id, Data) values (Source.Id, Source.Data);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data) })", span="250-256"];
m19_122 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerObjectsInstaller.cs", label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="241-246"];
m19_119 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''serverId'');", span="238-238"];
m19_121 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''context'');", span="239-239"];
m19_118 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerObjectsInstaller.cs", label="serverId == null", span="238-238"];
m19_120 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerObjectsInstaller.cs", label="context == null", span="239-239"];
m19_124 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerObjectsInstaller.cs", label="Exit HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="236-236"];
m19_28 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerObjectsInstaller.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="80-80"];
m19_41 [cluster="Unk.Query", file="SqlServerObjectsInstaller.cs", label="Entry Unk.Query", span=""];
m19_95 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="205-205"];
m19_100 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerObjectsInstaller.cs", label="return _connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault();", span="210-213"];
m19_98 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerObjectsInstaller.cs", label="name == null", span="208-208"];
m19_97 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''id'');", span="207-207"];
m19_99 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''name'');", span="208-208"];
m19_96 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerObjectsInstaller.cs", label="id == null", span="207-207"];
m19_101 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerObjectsInstaller.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="205-205"];
m19_125 [cluster="HangFire.SqlServer.Entities.ServerData.ServerData()", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.SqlServer.Entities.ServerData.ServerData()", span="20-20"];
m19_47 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="106-106"];
m19_54 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="var jobId = _connection.Query<int>(\r\n                createJobSql,\r\n                new\r\n                {\r\n                    invocationData = JobHelper.ToJson(invocationData),\r\n                    arguments = invocationData.Arguments,\r\n                    createdAt = DateTime.UtcNow,\r\n                    expireAt = DateTime.UtcNow.Add(expireIn)\r\n                }).Single().ToString()", span="121-129"];
m19_61 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="_connection.Execute(insertParameterSql, parameterArray)", span="149-149"];
m19_53 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="var invocationData = InvocationData.Serialize(job)", span="119-119"];
m19_52 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="string createJobSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues (@invocationData, @arguments, @createdAt, @expireAt);\r\nSELECT CAST(SCOPE_IDENTITY() as int)''", span="114-117"];
m19_55 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="parameters.Count > 0", span="131-131"];
m19_59 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="parameterArray[parameterIndex++] = new\r\n                    {\r\n                        jobId = jobId,\r\n                        name = parameter.Key,\r\n                        value = parameter.Value\r\n                    }", span="137-142"];
m19_62 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="return jobId;", span="152-152"];
m19_56 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="var parameterArray = new object[parameters.Count]", span="133-133"];
m19_60 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="string insertParameterSql = @''\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@jobId, @name, @value)''", span="145-147"];
m19_49 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''job'');", span="111-111"];
m19_51 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''parameters'');", span="112-112"];
m19_48 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="job == null", span="111-111"];
m19_50 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="parameters == null", span="112-112"];
m19_58 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label=parameters, span="135-135"];
m19_57 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="int parameterIndex = 0", span="134-134"];
m19_63 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="Exit HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="106-106"];
m19_31 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerObjectsInstaller.cs", label="currentQueryIndex == fetchConditions.Length - 1", span="89-89"];
m19_16 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerObjectsInstaller.cs", label="Exit HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="52-52"];
m19_22 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerObjectsInstaller.cs", label="queues.Length == 0", span="62-62"];
m19_23 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentException(''Queue array must be non-empty.'', ''queues'');", span="62-62"];
m19_24 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", color=green, community=0, file="SqlServerObjectsInstaller.cs", label="dynamic idAndQueue", prediction=26, span="64-64"];
m19_25 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerObjectsInstaller.cs", label="string fetchJobSqlTemplate = @''\r\nset transaction isolation level read committed\r\nupdate top (1) HangFire.JobQueue set FetchedAt = GETUTCDATE()\r\noutput INSERTED.JobId, INSERTED.Queue\r\nwhere FetchedAt {0}\r\nand Queue in @queues''", span="66-71"];
m19_26 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerObjectsInstaller.cs", label="var fetchConditions = new[] { ''is null'', ''< DATEADD(second, @timeout, GETUTCDATE())'' }", span="75-75"];
m19_27 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", color=green, community=0, file="SqlServerObjectsInstaller.cs", label="var currentQueryIndex = 0", prediction=27, span="76-76"];
m19_2 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''connection'');", span="37-37"];
m19_3 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", file="SqlServerObjectsInstaller.cs", label="_connection = connection", span="39-39"];
m19_40 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="SqlServerObjectsInstaller.cs", label="Exit Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="102-102"];
m19_45 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", span="22-22"];
m19_67 [cluster="Unk.>", file="SqlServerObjectsInstaller.cs", label="Entry Unk.>", span=""];
m19_70 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="155-155"];
m19_74 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerObjectsInstaller.cs", label="var jobData = _connection.Query<SqlJob>(sql, new { id = id })\r\n                .SingleOrDefault()", span="162-163"];
m19_81 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerObjectsInstaller.cs", label="job = invocationData.Deserialize()", span="176-176"];
m19_73 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerObjectsInstaller.cs", label="string sql = \r\n                @''select InvocationData, StateName, Arguments from HangFire.Job where id = @id''", span="159-160"];
m19_75 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerObjectsInstaller.cs", label="jobData == null", span="165-165"];
m19_77 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerObjectsInstaller.cs", label="var invocationData = JobHelper.FromJson<InvocationData>(jobData.InvocationData)", span="168-168"];
m19_78 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerObjectsInstaller.cs", label="invocationData.Arguments = jobData.Arguments", span="169-169"];
m19_84 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerObjectsInstaller.cs", label="return new JobData\r\n            {\r\n                Job = job,\r\n                State = jobData.StateName,\r\n                LoadException = loadException\r\n            };", span="183-188"];
m19_80 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerObjectsInstaller.cs", label="JobLoadException loadException = null", span="172-172"];
m19_82 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerObjectsInstaller.cs", label=JobLoadException, span="178-178"];
m19_72 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''id'');", span="157-157"];
m19_71 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerObjectsInstaller.cs", label="id == null", span="157-157"];
m19_76 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerObjectsInstaller.cs", label="return null;", span="165-165"];
m19_79 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerObjectsInstaller.cs", label="Job job = null", span="171-171"];
m19_83 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerObjectsInstaller.cs", label="loadException = ex", span="180-180"];
m19_85 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerObjectsInstaller.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="155-155"];
m19_10 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''stateChanger'');", span="72-72"];
m19_11 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="_storage = storage", span="74-74"];
m19_12 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="_stateChanger = stateChanger", span="75-75"];
m19_116 [cluster="System.ArgumentException.ArgumentException(string)", file="SqlServerObjectsInstaller.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m19_43 [cluster="string.Equals(string, System.StringComparison)", file="SqlServerObjectsInstaller.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m19_29 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerObjectsInstaller.cs", label="idAndQueue = _connection.Query(\r\n                    String.Format(fetchJobSqlTemplate, fetchConditions[currentQueryIndex]),\r\n                    new { queues = queues, timeout = JobInvisibilityTimeOut.Negate().TotalSeconds })\r\n                    .SingleOrDefault()", span="82-85"];
m19_46 [cluster="Unk.ToString", file="SqlServerObjectsInstaller.cs", label="Entry Unk.ToString", span=""];
m19_66 [cluster="System.DateTime.Add(System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m19_35 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="SqlServerObjectsInstaller.cs", label="state == null", span="105-105"];
m19_34 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''jobId'');", span="104-104"];
m19_36 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''state'');", span="105-105"];
m19_32 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="102-102"];
m19_30 [cluster="Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", span="31-31"];
m19_33 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="SqlServerObjectsInstaller.cs", label="jobId == null", span="104-104"];
m19_0 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", span="35-35"];
m19_1 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", file="SqlServerObjectsInstaller.cs", label="connection == null", span="37-37"];
m19_4 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", span="65-65"];
m19_136 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="277-277"];
m19_139 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="return _connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) });", span="284-286"];
m19_138 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentException(''The `timeOut` value must be positive.'', ''timeOut'');", span="281-281"];
m19_137 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="timeOut.Duration() != timeOut", span="279-279"];
m19_140 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="277-277"];
m19_9 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="stateChanger == null", span="72-72"];
m19_141 [cluster="System.TimeSpan.Duration()", file="SqlServerObjectsInstaller.cs", label="Entry System.TimeSpan.Duration()", span="0-0"];
m19_6 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''storage'');", span="70-70"];
m19_7 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="factory == null", span="71-71"];
m19_8 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''factory'');", span="71-71"];
m19_102 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="216-216"];
m19_107 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerObjectsInstaller.cs", label="_connection.Execute(''delete from HangFire.JobQueue where JobId = @id and Queue = @queueName'',\r\n                new { id = id, queueName = queue })", span="221-222"];
m19_105 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerObjectsInstaller.cs", label="queue == null", span="219-219"];
m19_104 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''id'');", span="218-218"];
m19_106 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''queue'');", span="219-219"];
m19_103 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerObjectsInstaller.cs", label="id == null", span="218-218"];
m19_108 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerObjectsInstaller.cs", label="Exit HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="216-216"];
m19_88 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="191-191"];
m19_93 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerObjectsInstaller.cs", label="_connection.Execute(\r\n                @''merge HangFire.JobParameter as Target ''\r\n                + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                + @''when matched then update set Value = Source.Value ''\r\n                + @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                new { jobId = id, name, value })", span="196-202"];
m19_91 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerObjectsInstaller.cs", label="name == null", span="194-194"];
m19_90 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''id'');", span="193-193"];
m19_92 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''name'');", span="194-194"];
m19_89 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerObjectsInstaller.cs", label="id == null", span="193-193"];
m19_94 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerObjectsInstaller.cs", label="Exit HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="191-191"];
m19_109 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="225-225"];
m19_114 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerObjectsInstaller.cs", label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="230-233"];
m19_112 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerObjectsInstaller.cs", label="toScore < fromScore", span="228-228"];
m19_111 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''key'');", span="227-227"];
m19_110 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerObjectsInstaller.cs", label="key == null", span="227-227"];
m19_113 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", span="228-228"];
m19_115 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerObjectsInstaller.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="225-225"];
m19_13 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="_factory = factory", span="76-76"];
m19_65 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m19_14 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="Exit Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", span="65-65"];
m19_68 [cluster="Unk.Single", file="SqlServerObjectsInstaller.cs", label="Entry Unk.Single", span=""];
m19_44 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="SqlServerObjectsInstaller.cs", label="Hangfire.BackgroundJobClient", span=""];
m19_126 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="259-259"];
m19_129 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerObjectsInstaller.cs", label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="263-265"];
m19_127 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerObjectsInstaller.cs", label="serverId == null", span="261-261"];
m19_128 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''serverId'');", span="261-261"];
m19_130 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerObjectsInstaller.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="259-259"];
m19_69 [cluster="Unk.Execute", file="SqlServerObjectsInstaller.cs", label="Entry Unk.Execute", span=""];
m19_86 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m19_87 [cluster="HangFire.Storage.JobData.JobData()", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.Storage.JobData.JobData()", span="20-20"];
m19_42 [cluster="Unk.SingleOrDefault", file="SqlServerObjectsInstaller.cs", label="Entry Unk.SingleOrDefault", span=""];
m19_131 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="268-268"];
m19_134 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerObjectsInstaller.cs", label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="272-274"];
m19_132 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerObjectsInstaller.cs", label="serverId == null", span="270-270"];
m19_133 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(''serverId'');", span="270-270"];
m19_135 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerObjectsInstaller.cs", label="Exit HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="268-268"];
m19_64 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="SqlServerObjectsInstaller.cs", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
m19_142 [file="SqlServerObjectsInstaller.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m20_2 [cluster="Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="SqlServerTimeoutJob.cs", label="Entry Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="96-96"];
m20_3 [cluster="Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="SqlServerTimeoutJob.cs", label="Exit Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="96-96"];
m20_0 [cluster="Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerTimeoutJob.cs", label="Entry Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="65-65"];
m20_1 [cluster="Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerTimeoutJob.cs", label="Exit Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="65-65"];
m21_60 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="Worker.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="125-125"];
m21_61 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="127-129"];
m21_62 [cluster="lambda expression", file="Worker.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = +1 })", span="127-129"];
m21_5 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="Worker.cs", label="queues == null", span="67-67"];
m21_16 [cluster="TransactionOptions.cstr", file="Worker.cs", label="Entry TransactionOptions.cstr", span=""];
m21_83 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="Worker.cs", label="AddToSet(key, value, 0.0)", span="155-155"];
m21_116 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="200-202"];
m21_59 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="Worker.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = +1 }))", span="127-129"];
m21_84 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="Worker.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="153-153"];
m21_85 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="Worker.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="158-158"];
m21_87 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="Worker.cs", label="QueueCommand(x => x.Execute(\r\n                addSql,\r\n                new { key, value, score }))", span="167-169"];
m21_46 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="Worker.cs", label="QueueCommand(x => x.Execute(\r\n                addStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId, \r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow, \r\n                    data = JobHelper.ToJson(state.SerializeData())\r\n                }))", span="102-111"];
m21_82 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="Worker.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m21_79 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="148-150"];
m21_98 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="Worker.cs", label="var duration = Stopwatch.StartNew()", span="244-244"];
m21_99 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="Worker.cs", label="var result = _performer.Perform(performContext)", span="246-246"];
m21_100 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="Worker.cs", label="duration.Stop()", span="247-247"];
m21_80 [cluster="lambda expression", file="Worker.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = -1, expireAt = DateTime.UtcNow.Add(expireIn) })", span="148-150"];
m21_88 [cluster="Hangfire.Storage.IFetchedJob.Requeue()", file="Worker.cs", label="Entry Hangfire.Storage.IFetchedJob.Requeue()", span="25-25"];
m21_64 [cluster="string.Substring(int, int)", file="Worker.cs", label="Entry string.Substring(int, int)", span="0-0"];
m21_65 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="Worker.cs", label="Exception exception = null", span="174-174"];
m21_66 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="Worker.cs", label="var retryAttempt = 0", span="176-176"];
m21_63 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="127-129"];
m21_44 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="throw;", span="155-155"];
m21_45 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="Exit Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", span="78-78"];
m21_47 [cluster="Hangfire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="Worker.cs", label="Entry Hangfire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="36-36"];
m21_56 [cluster="lambda expression", file="Worker.cs", label="x.Execute(\r\n                enqueueJobSql,\r\n                new { jobId = jobId, queue = queue })", span="120-122"];
m21_145 [cluster="System.Collections.Generic.Queue<T>.Enqueue(T)", file="Worker.cs", label="Entry System.Collections.Generic.Queue<T>.Enqueue(T)", span="0-0"];
m21_77 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="Worker.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = -1, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="148-150"];
m21_49 [cluster="lambda expression", file="Worker.cs", label="x.Execute(\r\n                addStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId, \r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow, \r\n                    data = JobHelper.ToJson(state.SerializeData())\r\n                })", span="102-111"];
m21_89 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="167-169"];
m21_35 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="var state = PerformJob(context, connection, fetchedJob.JobId)", span="123-123"];
m21_37 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="TryChangeState(context, connection, fetchedJob, state, new[] { ProcessingState.StateName }, CancellationToken.None)", span="128-128"];
m21_36 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="state != null", span="125-125"];
m21_38 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="fetchedJob.RemoveFromQueue()", span="136-136"];
m21_55 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="120-122"];
m21_90 [cluster="lambda expression", file="Worker.cs", label="x.Execute(\r\n                addSql,\r\n                new { key, value, score })", span="167-169"];
m21_94 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="Worker.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="172-172"];
m21_95 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="174-176"];
m21_96 [cluster="lambda expression", file="Worker.cs", label="x.Execute(\r\n                @''delete from HangFire.[Set] where [Key] = @key and Value = @value'',\r\n                new { key, value })", span="174-176"];
m21_107 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="188-190"];
m21_91 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="167-169"];
m21_93 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="Worker.cs", label="QueueCommand(x => x.Execute(\r\n                @''delete from HangFire.[Set] where [Key] = @key and Value = @value'',\r\n                new { key, value }))", span="174-176"];
m21_97 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="174-176"];
m21_92 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="Worker.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="172-172"];
m21_101 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="181-183"];
m21_102 [cluster="lambda expression", file="Worker.cs", label="x.Execute(\r\n                @''insert into HangFire.List ([Key], Value) values (@key, @value)'',\r\n                new { key, value })", span="181-183"];
m21_103 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="181-183"];
m21_104 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="Worker.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="186-186"];
m21_105 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", color=green, community=0, file="Worker.cs", label="QueueCommand(x => x.Execute(\r\n                @''delete from HangFire.List where [Key] = @key and Value = @value'',\r\n                new { key, value }))", prediction=28, span="188-190"];
m21_106 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="Worker.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="186-186"];
m21_108 [cluster="lambda expression", color=green, community=0, file="Worker.cs", label="x.Execute(\r\n                @''delete from HangFire.List where [Key] = @key and Value = @value'',\r\n                new { key, value })", prediction=29, span="188-190"];
m21_109 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="188-190"];
m21_110 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="Worker.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="193-193"];
m21_81 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="148-150"];
m21_23 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="throw new ArgumentNullException(nameof(context));", span="80-80"];
m21_143 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="Worker.cs", label="_commandQueue.Enqueue(action)", span="258-258"];
m21_144 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="Worker.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", span="256-256"];
m21_118 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementValue(string)", color=green, community=0, file="Worker.cs", label="string insertSql = @''\r\nbegin try \r\n    insert into HangFire.Value ([Key], IntValue) values (@key, 0)\r\nend try\r\nbegin catch\r\nend catch''", prediction=30, span="207-212"];
m21_119 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementValue(string)", file="Worker.cs", label="string updateSql = @''\r\nupdate HangFire.Value set IntValue = IntValue + 1 where [Key] = @key''", span="213-214"];
m21_112 [cluster="Hangfire.Storage.JobData.EnsureLoaded()", file="Worker.cs", label="Entry Hangfire.Storage.JobData.EnsureLoaded()", span="29-29"];
m21_111 [cluster="Hangfire.Storage.IStorageConnection.GetJobData(string)", file="Worker.cs", label="Entry Hangfire.Storage.IStorageConnection.GetJobData(string)", span="42-42"];
m21_113 [cluster="Hangfire.BackgroundJob.BackgroundJob(string, Hangfire.Common.Job, System.DateTime)", file="Worker.cs", label="Entry Hangfire.BackgroundJob.BackgroundJob(string, Hangfire.Common.Job, System.DateTime)", span="25-25"];
m21_17 [cluster="Unk.EnlistTransaction", file="Worker.cs", label="Entry Unk.EnlistTransaction", span=""];
m21_76 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="Worker.cs", label="Exit Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", span="166-166"];
m21_78 [cluster="Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", file="Worker.cs", label="Entry Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", span="25-25"];
m21_18 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="Worker.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m21_20 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="Worker.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="62-62"];
m21_71 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="Worker.cs", label="exception = ex", span="194-194"];
m21_72 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="Worker.cs", label="context.CancellationToken.WaitHandle.WaitOne(TimeSpan.FromSeconds(retryAttempt))", span="197-197"];
m21_48 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="102-111"];
m21_15 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="Worker.cs", label="Exit Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", span="62-62"];
m21_27 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="var timeoutCts = new CancellationTokenSource(JobInitializationWaitTimeout)", span="89-89"];
m21_19 [cluster="System.Guid.NewGuid()", file="Worker.cs", label="Entry System.Guid.NewGuid()", span="0-0"];
m21_54 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="Worker.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="114-114"];
m21_21 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="Entry Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", span="78-78"];
m21_22 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="context == null", span="80-80"];
m21_0 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", file="Worker.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", span="34-34"];
m21_1 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", file="Worker.cs", label="connection == null", span="36-36"];
m21_2 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", file="Worker.cs", label="throw new ArgumentNullException(''connection'');", span="36-36"];
m21_3 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", file="Worker.cs", label="_connection = connection", span="38-38"];
m21_8 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="Worker.cs", label="throw new ArgumentNullException(nameof(performer));", span="68-68"];
m21_10 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="Worker.cs", label="throw new ArgumentNullException(nameof(stateChanger));", span="69-69"];
m21_11 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="Worker.cs", label="_queues = queues.ToArray()", span="71-71"];
m21_12 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="Worker.cs", label="_performer = performer", span="72-72"];
m21_9 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="Worker.cs", label="stateChanger == null", span="69-69"];
m21_13 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="Worker.cs", label="_stateChanger = stateChanger", span="73-73"];
m21_14 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="Worker.cs", label="_workerId = Guid.NewGuid().ToString()", span="74-74"];
m21_51 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="Worker.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="114-114"];
m21_137 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", file="Worker.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", span="249-249"];
m21_138 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", file="Worker.cs", label="QueueCommand(x => x.Execute(\r\n                @''update HangFire.Value set ExpireAt = @expireAt where [Key] = @key'',\r\n                new { expireAt = DateTime.UtcNow.Add(expireIn), key = key }))", span="251-253"];
m21_139 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", file="Worker.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", span="249-249"];
m21_53 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="Worker.cs", label="QueueCommand(x => x.Execute(\r\n                enqueueJobSql,\r\n                new { jobId = jobId, queue = queue }))", span="120-122"];
m21_140 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="251-253"];
m21_125 [cluster="lambda expression", file="Worker.cs", label="x.Execute(insertSql + ''\n'' + updateSql, new { key })", span="222-222"];
m21_122 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="216-224"];
m21_123 [cluster="lambda expression", color=green, community=0, file="Worker.cs", label="var affectedRows = x.Execute(updateSql, new { key })", prediction=31, span="218-218"];
m21_124 [cluster="lambda expression", file="Worker.cs", label="affectedRows == 0", span="220-220"];
m21_25 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="var fetchedJob = connection.FetchNextJob(_queues, context.CancellationToken)", span="83-83"];
m21_33 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="fetchedJob.RemoveFromQueue()", span="113-113"];
m21_40 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="context.IsShutdownRequested", span="143-143"];
m21_68 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="Worker.cs", label="return _stateChanger.ChangeState(new StateChangeContext(\r\n                        context.Storage,\r\n                        connection,\r\n                        fetchedJob.JobId,\r\n                        state,\r\n                        expectedStates,\r\n                        cancellationToken));", span="180-186"];
m21_74 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="Worker.cs", label="retryAttempt++", span="176-176"];
m21_115 [cluster="Hangfire.Server.PerformContext.PerformContext(Hangfire.Storage.IStorageConnection, Hangfire.BackgroundJob, Hangfire.IJobCancellationToken)", file="Worker.cs", label="Entry Hangfire.Server.PerformContext.PerformContext(Hangfire.Storage.IStorageConnection, Hangfire.BackgroundJob, Hangfire.IJobCancellationToken)", span="36-36"];
m21_133 [cluster="lambda expression", file="Worker.cs", label="var affectedRows = x.Execute(updateSql, new { key })", span="240-240"];
m21_135 [cluster="lambda expression", file="Worker.cs", label="x.Execute(insertSql + ''\n'' + updateSql, new { key })", span="244-244"];
m21_141 [cluster="lambda expression", file="Worker.cs", label="x.Execute(\r\n                @''update HangFire.Value set ExpireAt = @expireAt where [Key] = @key'',\r\n                new { expireAt = DateTime.UtcNow.Add(expireIn), key = key })", span="251-253"];
m21_126 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="216-224"];
m21_24 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="var connection = context.Storage.GetConnection()", span="82-82"];
m21_32 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="context.CancellationToken.ThrowIfCancellationRequested()", span="110-110"];
m21_39 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label=Exception, span="141-141"];
m21_67 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="Worker.cs", label="retryAttempt < MaxStateChangeAttempts", span="176-176"];
m21_73 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="Worker.cs", label="context.CancellationToken.ThrowIfCancellationRequested()", span="198-198"];
m21_114 [cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(Hangfire.Storage.IStorageConnection, string, string, string, System.Threading.CancellationToken)", file="Worker.cs", label="Entry Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(Hangfire.Storage.IStorageConnection, string, string, string, System.Threading.CancellationToken)", span="32-32"];
m21_132 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="238-246"];
m21_26 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="context.CancellationToken.ThrowIfCancellationRequested()", span="85-85"];
m21_34 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="return;", span="114-114"];
m21_50 [cluster="System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken, System.Threading.CancellationToken)", file="Worker.cs", label="Entry System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken, System.Threading.CancellationToken)", span="0-0"];
m21_57 [cluster="Hangfire.Logging.ILog.Info(string)", file="Worker.cs", label="Entry Hangfire.Logging.ILog.Info(string)", span="204-204"];
m21_69 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="Worker.cs", label=Exception, span="188-188"];
m21_75 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="Worker.cs", label="return _stateChanger.ChangeState(new StateChangeContext(\r\n                context.Storage,\r\n                connection,\r\n                fetchedJob.JobId,\r\n                new FailedState(exception) { Reason = $''Failed to change state to a '{state.Name}' one due to an exception after {MaxStateChangeAttempts} retry attempts'' },\r\n                expectedStates,\r\n                cancellationToken));", span="201-207"];
m21_134 [cluster="lambda expression", file="Worker.cs", label="affectedRows == 0", span="242-242"];
m21_136 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="238-246"];
m21_142 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="251-253"];
m21_127 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementValue(string)", file="Worker.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementValue(string)", span="227-227"];
m21_130 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementValue(string)", file="Worker.cs", label="QueueCommand(x =>\r\n            {\r\n                var affectedRows = x.Execute(updateSql, new { key });\r\n\r\n                if (affectedRows == 0)\r\n                {\r\n                    x.Execute(insertSql + ''\n'' + updateSql, new { key });\r\n                }\r\n            })", span="238-246"];
m21_128 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementValue(string)", file="Worker.cs", label="string insertSql = @''\r\nbegin try \r\n    insert into HangFire.Value ([Key], IntValue) values (@key, 0)\r\nend try\r\nbegin catch\r\nend catch''", span="229-234"];
m21_129 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementValue(string)", file="Worker.cs", label="string updateSql = @''\r\nupdate HangFire.Value set IntValue = IntValue - 1 where [Key] = @key''", span="235-236"];
m21_131 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementValue(string)", file="Worker.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementValue(string)", span="227-227"];
m21_117 [cluster="Hangfire.Server.IBackgroundJobPerformer.Perform(Hangfire.Server.PerformContext)", file="Worker.cs", label="Entry Hangfire.Server.IBackgroundJobPerformer.Perform(Hangfire.Server.PerformContext)", span="20-20"];
m21_120 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementValue(string)", color=green, community=0, file="Worker.cs", label="Hangfire.Server.Worker", prediction=30, span=""];
m21_121 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementValue(string)", file="Worker.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementValue(string)", span="205-205"];
m21_4 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="Worker.cs", label="Entry Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", span="62-62"];
m21_43 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="Requeue(fetchedJob)", span="154-154"];
m21_6 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="Worker.cs", label="throw new ArgumentNullException(nameof(queues));", span="67-67"];
m21_7 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="Worker.cs", label="performer == null", span="68-68"];
m21_28 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(\r\n                        context.CancellationToken,\r\n                        timeoutCts.Token)", span="90-92"];
m21_52 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="Worker.cs", label="Entry Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", span="166-166"];
m21_58 [cluster="Hangfire.Logging.ILog.ErrorException(string, System.Exception)", file="Worker.cs", label="Entry Hangfire.Logging.ILog.ErrorException(string, System.Exception)", span="161-161"];
m21_29 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="var processingState = new ProcessingState(context.ServerId, _workerId)", span="94-94"];
m21_30 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="var appliedState = TryChangeState(\r\n                            context, \r\n                            connection, \r\n                            fetchedJob, \r\n                            processingState, \r\n                            new[] { EnqueuedState.StateName, ProcessingState.StateName },\r\n                            linkedCts.Token)", span="96-102"];
m21_31 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="appliedState == null || !appliedState.Name.Equals(ProcessingState.StateName, StringComparison.OrdinalIgnoreCase)", span="106-106"];
m21_146 [file="Worker.cs", label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", span=""];
m21_173 [file="Worker.cs", label=string, span=""];
m21_174 [file="Worker.cs", label=string, span=""];
m21_179 [file="Worker.cs", label=string, span=""];
m21_180 [file="Worker.cs", label=updateSql, span=""];
m21_181 [file="Worker.cs", label=insertSql, span=""];
m21_147 [file="Worker.cs", label=string, span=""];
m21_148 [file="Worker.cs", label="System.TimeSpan", span=""];
m21_149 [file="Worker.cs", label=string, span=""];
m21_150 [file="Worker.cs", label=string, span=""];
m21_151 [file="Worker.cs", label="HangFire.States.State", span=""];
m21_152 [file="Worker.cs", label=addAndSetStateSql, span=""];
m21_153 [file="Worker.cs", label=string, span=""];
m21_154 [file="Worker.cs", label="HangFire.States.State", span=""];
m21_155 [file="Worker.cs", label=addStateSql, span=""];
m21_156 [file="Worker.cs", label=string, span=""];
m21_157 [file="Worker.cs", label=string, span=""];
m21_158 [file="Worker.cs", label=enqueueJobSql, span=""];
m21_159 [file="Worker.cs", label=string, span=""];
m21_160 [file="Worker.cs", label=string, span=""];
m21_161 [file="Worker.cs", label="System.TimeSpan", span=""];
m21_162 [file="Worker.cs", label=string, span=""];
m21_163 [file="Worker.cs", label=string, span=""];
m21_164 [file="Worker.cs", label="System.TimeSpan", span=""];
m21_165 [file="Worker.cs", label=string, span=""];
m21_166 [file="Worker.cs", label=string, span=""];
m21_167 [file="Worker.cs", label=double, span=""];
m21_168 [file="Worker.cs", label=addSql, span=""];
m21_169 [file="Worker.cs", label=string, span=""];
m21_170 [file="Worker.cs", label=string, span=""];
m21_171 [file="Worker.cs", label=string, span=""];
m21_172 [file="Worker.cs", label=string, span=""];
m21_175 [file="Worker.cs", label=string, span=""];
m21_176 [file="Worker.cs", label=int, span=""];
m21_177 [file="Worker.cs", label=int, span=""];
m21_178 [file="Worker.cs", label=trimSql, span=""];
m21_182 [file="Worker.cs", label=string, span=""];
m21_183 [file="Worker.cs", label=updateSql, span=""];
m21_184 [file="Worker.cs", label=insertSql, span=""];
m21_185 [file="Worker.cs", label=string, span=""];
m21_186 [file="Worker.cs", label="System.TimeSpan", span=""];
n56 -> n1  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n4  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n6  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n7  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n9  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n10  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n11  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n12  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n13  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n14  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n15  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n16  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n17  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n18  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n19  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n21  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n22  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n24  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n25  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n26  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n27  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n28  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n29  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n30  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n32  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n33  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n34  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n35  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n37  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n38  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n39  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n40  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n41  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n42  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n43  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n44  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n56 -> n45  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
n3 -> n5  [color=darkseagreen4, key=1, label=queues, style=dashed];
n3 -> n8  [color=darkseagreen4, key=1, label=queues, style=dashed];
n8 -> n10  [color=darkseagreen4, key=1, label=queue, style=dashed];
n8 -> n12  [color=darkseagreen4, key=1, label=queue, style=dashed];
n8 -> n14  [color=darkseagreen4, key=1, label=queue, style=dashed];
n8 -> n16  [color=darkseagreen4, key=1, label=queue, style=dashed];
n8 -> n18  [color=darkseagreen4, key=1, label=queue, style=dashed];
n8 -> n20  [color=darkseagreen4, key=1, label=queue, style=dashed];
n8 -> n23  [color=darkseagreen4, key=1, label=queue, style=dashed];
n23 -> n25  [color=darkseagreen4, key=1, label=job, style=dashed];
n25 -> n25  [color=darkseagreen4, key=1, label=job, style=dashed];
n25 -> n27  [color=darkseagreen4, key=1, label=job, style=dashed];
n27 -> n27  [color=darkseagreen4, key=1, label=job, style=dashed];
n27 -> n29  [color=darkseagreen4, key=1, label=job, style=dashed];
n29 -> n29  [color=darkseagreen4, key=1, label=job, style=dashed];
n29 -> n31  [color=darkseagreen4, key=1, label=job, style=dashed];
n31 -> n31  [color=darkseagreen4, key=1, label=job, style=dashed];
n31 -> n34  [color=darkseagreen4, key=1, label=job, style=dashed];
n34 -> n34  [color=darkseagreen4, key=1, label=job, style=dashed];
n34 -> n36  [color=darkseagreen4, key=1, label=job, style=dashed];
n36 -> n36  [color=darkseagreen4, key=1, label=job, style=dashed];
n36 -> n38  [color=darkseagreen4, key=1, label=job, style=dashed];
n38 -> n38  [color=darkseagreen4, key=1, label=job, style=dashed];
n38 -> n40  [color=darkseagreen4, key=1, label=job, style=dashed];
n40 -> n40  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_14 -> m0_10  [color=darkseagreen4, key=1, label="Hangfire.States.ProcessingState", style=dashed];
m1_160 -> m1_162  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_310 -> m1_312  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_109 -> m1_111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_369 -> m1_373  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m1_370 -> m1_372  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_1 -> m1_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_11 -> m1_13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_220 -> m1_222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_298 -> m1_300  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_203 -> m1_205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_416 -> m1_418  [color=darkseagreen4, key=1, label="System.Action<HangFire.SqlServer.SqlServerConnection>", style=dashed];
m1_182 -> m1_184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_273 -> m1_275  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_408 -> m1_411  [color=darkseagreen4, key=1, label="System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>", style=dashed];
m1_409 -> m1_411  [color=darkseagreen4, key=1, label=sqlConnection, style=dashed];
m1_127 -> m1_129  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_231 -> m1_233  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_211 -> m1_213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_262 -> m1_264  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_320 -> m1_322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_398 -> m1_400  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_359 -> m1_361  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_138 -> m1_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_386 -> m1_388  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_149 -> m1_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_100 -> m1_102  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_400 -> m1_402  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_21 -> m1_28  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_22 -> m1_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_55 -> m1_57  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m1_55 -> m1_58  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m1_55 -> m1_65  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m1_66 -> m1_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_66 -> m1_86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_66 -> m1_68  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m1_61 -> m1_63  [color=darkseagreen4, key=1, label=job, style=dashed];
m1_61 -> m1_64  [color=darkseagreen4, key=1, label=job, style=dashed];
m1_92 -> m1_96  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_93 -> m1_95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_112 -> m1_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_114 -> m1_116  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_114 -> m1_117  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_114 -> m1_118  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_129 -> m1_134  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_130 -> m1_133  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_140 -> m1_145  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_141 -> m1_144  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_151 -> m1_154  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_162 -> m1_165  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_162 -> m1_166  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_164 -> m1_166  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m1_174 -> m1_177  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_184 -> m1_189  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_185 -> m1_188  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_195 -> m1_200  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_196 -> m1_199  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_222 -> m1_227  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_223 -> m1_226  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_233 -> m1_238  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_234 -> m1_237  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_244 -> m1_246  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_255 -> m1_257  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_264 -> m1_269  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_265 -> m1_268  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_275 -> m1_279  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_276 -> m1_278  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_300 -> m1_305  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_301 -> m1_304  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_312 -> m1_317  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_313 -> m1_316  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_322 -> m1_324  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_322 -> m1_330  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_325 -> m1_327  [color=darkseagreen4, key=1, label=server, style=dashed];
m1_325 -> m1_328  [color=darkseagreen4, key=1, label=server, style=dashed];
m1_331 -> m1_333  [color=darkseagreen4, key=1, label=sameServer, style=dashed];
m1_340 -> m1_344  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_341 -> m1_343  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_351 -> m1_353  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_361 -> m1_365  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_362 -> m1_364  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_372 -> m1_374  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_375 -> m1_379  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_375 -> m1_382  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_375 -> m1_377  [color=darkseagreen4, key=1, label=servers, style=dashed];
m1_388 -> m1_392  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_389 -> m1_391  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_172 -> m1_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_193 -> m1_195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_282 -> m1_284  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_19 -> m1_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_253 -> m1_255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_348 -> m1_352  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m1_349 -> m1_351  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_289 -> m1_293  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m1_290 -> m1_292  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_90 -> m1_92  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_242 -> m1_244  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_338 -> m1_340  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_422 -> m1_90  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m1_422 -> m1_273  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m1_422 -> m1_338  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m1_422 -> m1_359  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m1_422 -> m1_386  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m1_423 -> m1_28  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_425 -> m1_96  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_427 -> m1_134  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_428 -> m1_145  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_432 -> m1_189  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_433 -> m1_200  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_435 -> m1_227  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_436 -> m1_238  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_439 -> m1_269  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_440 -> m1_279  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_441 -> m1_293  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m1_442 -> m1_305  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_443 -> m1_317  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_444 -> m1_344  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_445 -> m1_352  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m1_446 -> m1_365  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_447 -> m1_373  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m1_448 -> m1_392  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_160 -> m3_162  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_310 -> m3_312  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_369 -> m3_373  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m3_370 -> m3_372  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_1 -> m3_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_220 -> m3_222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_298 -> m3_300  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_203 -> m3_205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_416 -> m3_418  [color=darkseagreen4, key=1, label="System.Action<HangFire.SqlServer.SqlServerConnection>", style=dashed];
m3_182 -> m3_184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_273 -> m3_275  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_408 -> m3_411  [color=darkseagreen4, key=1, label="System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>", style=dashed];
m3_409 -> m3_411  [color=darkseagreen4, key=1, label=sqlConnection, style=dashed];
m3_127 -> m3_129  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_231 -> m3_233  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_33 -> m3_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_211 -> m3_213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_262 -> m3_264  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_320 -> m3_322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_48 -> m3_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_398 -> m3_400  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_359 -> m3_361  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_138 -> m3_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_386 -> m3_388  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_149 -> m3_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_400 -> m3_402  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_21 -> m3_28  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_22 -> m3_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_35 -> m3_40  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_36 -> m3_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_40 -> m3_43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_52 -> m3_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_52 -> m3_54  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m3_52 -> m3_56  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m3_55 -> m3_57  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m3_55 -> m3_58  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m3_55 -> m3_65  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m3_66 -> m3_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_66 -> m3_86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_66 -> m3_68  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m3_61 -> m3_63  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_61 -> m3_64  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_92 -> m3_96  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_93 -> m3_95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_112 -> m3_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_114 -> m3_117  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_114 -> m3_118  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_129 -> m3_134  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_130 -> m3_133  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_140 -> m3_145  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_141 -> m3_144  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_151 -> m3_154  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_162 -> m3_165  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_162 -> m3_166  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_164 -> m3_166  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m3_174 -> m3_177  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_184 -> m3_189  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_185 -> m3_188  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_195 -> m3_200  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_196 -> m3_199  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_222 -> m3_227  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_223 -> m3_226  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_233 -> m3_238  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_234 -> m3_237  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_244 -> m3_246  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_255 -> m3_257  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_264 -> m3_269  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_265 -> m3_268  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_275 -> m3_279  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_276 -> m3_278  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_300 -> m3_305  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_301 -> m3_304  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_312 -> m3_317  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_313 -> m3_316  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_322 -> m3_324  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_322 -> m3_330  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_325 -> m3_327  [color=darkseagreen4, key=1, label=server, style=dashed];
m3_325 -> m3_328  [color=darkseagreen4, key=1, label=server, style=dashed];
m3_331 -> m3_333  [color=darkseagreen4, key=1, label=sameServer, style=dashed];
m3_340 -> m3_344  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_341 -> m3_343  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_351 -> m3_353  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_361 -> m3_365  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_362 -> m3_364  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_372 -> m3_374  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_375 -> m3_379  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_375 -> m3_382  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_375 -> m3_377  [color=darkseagreen4, key=1, label=servers, style=dashed];
m3_388 -> m3_392  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_389 -> m3_391  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_172 -> m3_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_193 -> m3_195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_282 -> m3_284  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_19 -> m3_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_253 -> m3_255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_348 -> m3_352  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m3_349 -> m3_351  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_289 -> m3_293  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m3_290 -> m3_292  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_90 -> m3_92  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_242 -> m3_244  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_338 -> m3_340  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_422 -> m3_90  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m3_422 -> m3_273  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m3_422 -> m3_338  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m3_422 -> m3_359  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m3_422 -> m3_386  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m3_423 -> m3_28  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_424 -> m3_40  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_425 -> m3_96  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_427 -> m3_134  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_428 -> m3_145  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_432 -> m3_189  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_433 -> m3_200  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_435 -> m3_227  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_436 -> m3_238  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_439 -> m3_269  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_440 -> m3_279  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_441 -> m3_293  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m3_442 -> m3_305  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_443 -> m3_317  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_444 -> m3_344  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_445 -> m3_352  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m3_446 -> m3_365  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_447 -> m3_373  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m3_448 -> m3_392  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m6_0 -> m6_2  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m6_8 -> m6_13  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m6_8 -> m6_14  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m6_8 -> m6_17  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m6_14 -> m6_14  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m6_14 -> m6_17  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m6_11 -> m6_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_11 -> m6_15  [color=darkseagreen4, key=1, label=removedCount, style=dashed];
m6_36 -> m6_17  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.CountersAggregator", style=dashed];
m6_36 -> m6_30  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.CountersAggregator", style=dashed];
m7_0 -> m7_2  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
m7_0 -> m7_3  [color=darkseagreen4, key=1, label="Hangfire.DashboardOptions", style=dashed];
m7_0 -> m7_4  [color=darkseagreen4, key=1, label="Hangfire.DashboardOptions", style=dashed];
m7_18 -> m7_11  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.DashboardContext", style=dashed];
m7_18 -> m7_15  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.DashboardContext", style=dashed];
m8_3 -> m8_5  [color=darkseagreen4, key=1, label=queues, style=dashed];
m8_23 -> m8_38  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m8_23 -> m8_23  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_23 -> m8_25  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_30 -> m8_33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_29 -> m8_32  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_29 -> m8_29  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_53 -> m8_55  [color=darkseagreen4, key=1, label=resource, style=dashed];
m8_53 -> m8_58  [color=darkseagreen4, key=1, label=resource, style=dashed];
m8_27 -> m8_27  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_33 -> m8_35  [color=darkseagreen4, key=1, label="Hangfire.Storage.IStorageConnection", style=dashed];
m8_33 -> m8_38  [color=darkseagreen4, key=1, label="Hangfire.Storage.IStorageConnection", style=dashed];
m8_33 -> m8_40  [color=darkseagreen4, key=1, label="Hangfire.Storage.IStorageConnection", style=dashed];
m8_38 -> m8_38  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_34 -> m8_36  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_34 -> m8_34  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_35 -> m8_38  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m8_35 -> m8_41  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m8_40 -> m8_42  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m8_36 -> m8_36  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_8 -> m8_14  [color=green, key=1, label=queue, style=dashed];
m8_8 -> m8_10  [color=darkseagreen4, key=1, label=queue, style=dashed];
m8_8 -> m8_12  [color=darkseagreen4, key=1, label=queue, style=dashed];
m8_8 -> m8_16  [color=darkseagreen4, key=1, label=queue, style=dashed];
m8_8 -> m8_18  [color=darkseagreen4, key=1, label=queue, style=dashed];
m8_8 -> m8_21  [color=darkseagreen4, key=1, label=queue, style=dashed];
m8_15 -> m8_17  [color=darkseagreen4, key=1, label=jobsEnqueued, style=dashed];
m8_15 -> m8_19  [color=darkseagreen4, key=1, label=jobsEnqueued, style=dashed];
m8_4 -> m8_6  [color=darkseagreen4, key=1, label="Hangfire.States.IBackgroundJobStateChanger", style=dashed];
m8_12 -> m8_14  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m8_12 -> m8_16  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m8_12 -> m8_18  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m8_12 -> m8_21  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m8_17 -> m8_17  [color=darkseagreen4, key=1, label=jobsEnqueued, style=dashed];
m8_17 -> m8_19  [color=darkseagreen4, key=1, label=jobsEnqueued, style=dashed];
m8_25 -> m8_25  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_25 -> m8_27  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_32 -> m8_32  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_32 -> m8_34  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_32 -> m8_54  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
m8_32 -> m8_56  [color=darkseagreen4, key=1, label="System.Func<Hangfire.Storage.IStorageConnection, T>", style=dashed];
m8_21 -> m8_23  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_54 -> m8_56  [color=darkseagreen4, key=1, label=connection, style=dashed];
m8_54 -> m8_6  [color=green, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_14  [color=green, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_1  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_4  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_9  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_10  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_11  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_12  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_13  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_16  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_17  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_19  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_22  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_23  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_24  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_25  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_26  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_27  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_28  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_30  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_31  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_32  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_33  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_35  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_36  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_37  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_38  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_39  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_40  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_41  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_42  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_43  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_66 -> m8_16  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m8_66 -> m8_21  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m8_66 -> m8_27  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m8_66 -> m8_30  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m8_66 -> m8_38  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m8_67 -> m8_38  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m9_46 -> m9_49  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_101 -> m9_112  [color=darkseagreen4, key=1, label=client, style=dashed];
m9_103 -> m9_111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_103 -> m9_105  [color=darkseagreen4, key=1, label=exception, style=dashed];
m9_89 -> m9_92  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_37 -> m9_41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_69 -> m9_75  [color=darkseagreen4, key=1, label=client, style=dashed];
m9_70 -> m9_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_61 -> m9_64  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_156 -> m9_162  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_53 -> m9_56  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_135 -> m9_137  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_138 -> m9_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_149 -> m9_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_79 -> m9_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_115 -> m9_120  [color=darkseagreen4, key=1, label=client, style=dashed];
m9_116 -> m9_119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_1 -> m9_3  [color=darkseagreen4, key=1, label=connection, style=dashed];
m9_3 -> m9_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_6 -> m9_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_7 -> m9_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_146 -> m9_148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_124 -> m9_129  [color=darkseagreen4, key=1, label=client, style=dashed];
m9_125 -> m9_128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_168 -> m9_3  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_168 -> m9_6  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_168 -> m9_42  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_168 -> m9_50  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_168 -> m9_57  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_168 -> m9_75  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_168 -> m9_83  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_168 -> m9_88  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_168 -> m9_89  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_168 -> m9_112  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_168 -> m9_120  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_168 -> m9_134  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_168 -> m9_135  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_168 -> m9_138  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_168 -> m9_141  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_168 -> m9_145  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_168 -> m9_146  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_168 -> m9_149  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_168 -> m9_152  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_168 -> m9_156  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_168 -> m9_166  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m9_169 -> m9_75  [color=darkseagreen4, key=1, label=client, style=dashed];
m9_170 -> m9_83  [color=darkseagreen4, key=1, label=client, style=dashed];
m9_171 -> m9_112  [color=darkseagreen4, key=1, label=client, style=dashed];
m9_172 -> m9_120  [color=darkseagreen4, key=1, label=client, style=dashed];
m9_173 -> m9_129  [color=darkseagreen4, key=1, label=client, style=dashed];
m11_0 -> m11_2  [color=darkseagreen4, key=1, label=int, style=dashed];
m11_8 -> m11_15  [color=green, key=1, label="Hangfire.States.ElectStateContext", style=dashed];
m11_8 -> m11_20  [color=darkseagreen4, key=1, label="Hangfire.States.ElectStateContext", style=dashed];
m11_15 -> m11_19  [color=green, key=1, label="lambda expression", style=dashed];
m11_13 -> m11_13  [color=darkseagreen4, key=1, label=elapsedTime, style=dashed];
m11_22 -> m11_13  [color=darkseagreen4, key=1, label="Hangfire.LatencyTimeoutAttribute", style=dashed];
m11_22 -> m11_15  [color=green, key=1, label="Hangfire.LatencyTimeoutAttribute", style=dashed];
m11_22 -> m11_20  [color=darkseagreen4, key=1, label="Hangfire.LatencyTimeoutAttribute", style=dashed];
m11_23 -> m11_20  [color=darkseagreen4, key=1, label="Hangfire.States.ElectStateContext", style=dashed];
m12_13 -> m12_15  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_26 -> m12_26  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_26 -> m12_28  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_28 -> m12_28  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_28 -> m12_30  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_32 -> m12_32  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_7 -> m12_13  [color=darkseagreen4, key=1, label=enqueuedJobs, style=dashed];
m12_7 -> m12_9  [color=darkseagreen4, key=1, label=version, style=dashed];
m12_7 -> m12_24  [color=darkseagreen4, key=1, label=version, style=dashed];
m12_7 -> m12_41  [color=darkseagreen4, key=1, label=version, style=dashed];
m12_15 -> m12_15  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_15 -> m12_17  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_17 -> m12_17  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_17 -> m12_19  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_19 -> m12_19  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_19 -> m12_21  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_24 -> m12_26  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_24 -> m12_24  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_30 -> m12_32  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_30 -> m12_30  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_21 -> m12_24  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_21 -> m12_21  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_55 -> m12_11  [color=green, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_10  [color=green, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_35  [color=green, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_27  [color=green, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_34  [color=green, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_33  [color=green, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_1  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_2  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_4  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_5  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_8  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_12  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_14  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_15  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_16  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_17  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_18  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_19  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_20  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_22  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_23  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_24  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_25  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_26  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_29  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_30  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_31  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_32  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_55 -> m12_36  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m12_57 -> m12_1  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_2  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_3  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_4  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_5  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_8  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_9  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_10  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_11  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_12  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_13  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_14  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_15  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_16  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_17  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_18  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_19  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_20  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_21  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_22  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_23  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_24  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_25  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_26  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_27  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_28  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_29  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_30  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_31  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_32  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_33  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_34  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_35  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_36  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_37  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_38  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_39  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_40  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_41  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m12_57 -> m12_42  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m13_54 -> m13_67  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_56 -> m13_59  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m13_56 -> m13_60  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m13_56 -> m13_76  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m13_55 -> m13_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_169 -> m13_173  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_170 -> m13_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_6 -> m13_130  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_188 -> m13_192  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_49 -> m13_51  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_53 -> m13_68  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_53 -> m13_55  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_53 -> m13_72  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_53 -> m13_57  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m13_53 -> m13_58  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m13_53 -> m13_59  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m13_53 -> m13_60  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_53 -> m13_76  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_53 -> m13_61  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_37 -> m13_39  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_39 -> m13_43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_38 -> m13_44  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_38 -> m13_48  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_38 -> m13_41  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_38 -> m13_51  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_40 -> m13_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_136 -> m13_140  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_137 -> m13_139  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_23 -> m13_25  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_23 -> m13_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_24 -> m13_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_78 -> m13_80  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_79 -> m13_81  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m13_79 -> m13_82  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m13_79 -> m13_83  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m13_79 -> m13_87  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m13_157 -> m13_159  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_42 -> m13_44  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_149 -> m13_153  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_13 -> m13_15  [color=darkseagreen4, key=1, label=maxReplayCount, style=dashed];
m13_12 -> m13_15  [color=darkseagreen4, key=1, label=replayCount, style=dashed];
m13_572 -> m13_575  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m13_573 -> m13_579  [color=darkseagreen4, key=1, label=formattedMessage, style=dashed];
m13_573 -> m13_580  [color=darkseagreen4, key=1, label=formattedMessage, style=dashed];
m13_91 -> m13_93  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_91 -> m13_96  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_91 -> m13_100  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_93 -> m13_99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_92 -> m13_95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_116 -> m13_118  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_119 -> m13_123  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_125 -> m13_127  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_223 -> m13_173  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_224 -> m13_173  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_225 -> m13_180  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_7 -> m13_9  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_128 -> m13_133  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_126 -> m13_131  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_126 -> m13_128  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_126 -> m13_134  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_127 -> m13_130  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_272 -> m13_282  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_272 -> m13_286  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_272 -> m13_290  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_272 -> m13_294  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_272 -> m13_298  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_272 -> m13_301  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_87 -> m13_89  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_103 -> m13_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_74 -> m13_76  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_153 -> m13_155  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_156 -> m13_160  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_99 -> m13_101  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_102 -> m13_106  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_220 -> m13_166  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_41 -> m13_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_31 -> m13_33  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_162 -> m13_166  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_163 -> m13_165  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_376 -> m13_380  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_376 -> m13_384  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_376 -> m13_388  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_376 -> m13_392  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_376 -> m13_395  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_134 -> m13_136  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_150 -> m13_152  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_15 -> m13_17  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_15 -> m13_15  [color=darkseagreen4, key=1, label=replayCount, style=dashed];
m13_176 -> m13_180  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_177 -> m13_179  [color=darkseagreen4, key=1, label=providerResolver, style=dashed];
m13_27 -> m13_29  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_95 -> m13_97  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_193 -> m13_196  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_193 -> m13_200  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_193 -> m13_195  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m13_193 -> m13_197  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m13_200 -> m13_76  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m13_202 -> m13_206  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_202 -> m13_87  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m13_199 -> m13_68  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m13_204 -> m13_100  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_201 -> m13_87  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_203 -> m13_96  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_203 -> m13_100  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_206 -> m13_114  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_206 -> m13_117  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_208 -> m13_123  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_207 -> m13_117  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m13_143 -> m13_147  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_144 -> m13_146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_182 -> m13_186  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_183 -> m13_185  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_104 -> m13_106  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_205 -> m13_106  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_240 -> m13_248  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_240 -> m13_252  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_240 -> m13_256  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_240 -> m13_260  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_240 -> m13_264  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_240 -> m13_267  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_240 -> m13_242  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m13_240 -> m13_243  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m13_240 -> m13_244  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m13_240 -> m13_245  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m13_111 -> m13_116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_109 -> m13_114  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_109 -> m13_111  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_109 -> m13_117  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_110 -> m13_113  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_112 -> m13_114  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_213 -> m13_147  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_221 -> m13_166  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_222 -> m13_173  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_216 -> m13_153  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_217 -> m13_153  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_218 -> m13_160  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_60 -> m13_75  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_70 -> m13_72  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_219 -> m13_160  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_120 -> m13_122  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_121 -> m13_123  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_108 -> m13_110  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_214 -> m13_147  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_504 -> m13_528  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_504 -> m13_513  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_504 -> m13_517  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_504 -> m13_521  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_504 -> m13_525  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_504 -> m13_509  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_341 -> m13_343  [color=darkseagreen4, key=1, label=nameParam, style=dashed];
m13_21 -> m13_28  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_21 -> m13_23  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_21 -> m13_33  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_21 -> m13_24  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_21 -> m13_36  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_22 -> m13_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_66 -> m13_80  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m13_66 -> m13_81  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m13_66 -> m13_83  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_66 -> m13_87  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_83 -> m13_86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_82 -> m13_84  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_433 -> m13_437  [color=darkseagreen4, key=1, label=func, style=dashed];
m13_434 -> m13_437  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_472 -> m13_477  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m13_472 -> m13_499  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_472 -> m13_484  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_472 -> m13_488  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_472 -> m13_492  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_472 -> m13_496  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_472 -> m13_474  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m13_472 -> m13_476  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m13_472 -> m13_480  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_472 -> m13_475  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m13_19 -> m13_21  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_65 -> m13_67  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_566 -> m13_569  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m13_348 -> m13_356  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_348 -> m13_360  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_348 -> m13_364  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_348 -> m13_368  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_348 -> m13_371  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_348 -> m13_350  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m13_348 -> m13_351  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m13_348 -> m13_352  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m13_348 -> m13_353  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m13_215 -> m13_147  [color=darkseagreen4, key=1, label=double, style=dashed];
m13_229 -> m13_231  [color=darkseagreen4, key=1, label=nameParam, style=dashed];
m13_228 -> m13_192  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m13_227 -> m13_192  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_211 -> m13_140  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_209 -> m13_131  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_209 -> m13_134  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_210 -> m13_134  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m13_212 -> m13_140  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_196 -> m13_202  [color=darkseagreen4, key=1, label=ex, style=dashed];
m13_196 -> m13_28  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m13_196 -> m13_33  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m13_196 -> m13_36  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m13_195 -> m13_28  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_195 -> m13_33  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_195 -> m13_36  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_197 -> m13_44  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_197 -> m13_48  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_197 -> m13_51  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_194 -> m13_7  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_11  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_14  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_22  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_23  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_24  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_39  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_40  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_41  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_54  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_55  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_60  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_61  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_83  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_92  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_93  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_103  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_110  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_111  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_120  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_127  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_128  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_137  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_144  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_150  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_157  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_163  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_170  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_177  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_183  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_194 -> m13_189  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m13_198 -> m13_68  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_198 -> m13_72  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_198 -> m13_76  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_226 -> m13_186  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_2 -> m13_4  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m13_593 -> m13_498  [color=green, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_483  [color=green, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_487  [color=green, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_491  [color=green, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_495  [color=green, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_527  [color=green, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_512  [color=green, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_516  [color=green, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_520  [color=green, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_524  [color=green, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_474  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_476  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_479  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_480  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_484  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_488  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_492  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_496  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_499  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_508  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_509  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_513  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_517  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_521  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_525  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_593 -> m13_528  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m13_591 -> m13_419  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider", style=dashed];
m13_585 -> m13_196  [color=darkseagreen4, key=1, label="Hangfire.Logging.LoggerExecutionWrapper", style=dashed];
m13_585 -> m13_195  [color=darkseagreen4, key=1, label="Hangfire.Logging.LoggerExecutionWrapper", style=dashed];
m13_585 -> m13_202  [color=darkseagreen4, key=1, label="Hangfire.Logging.LoggerExecutionWrapper", style=dashed];
m13_585 -> m13_197  [color=darkseagreen4, key=1, label="Hangfire.Logging.LoggerExecutionWrapper", style=dashed];
m13_592 -> m13_437  [color=darkseagreen4, key=1, label=func, style=dashed];
m13_586 -> m13_200  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m13_588 -> m13_248  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_252  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_256  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_260  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_264  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_267  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_282  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_286  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_290  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_294  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_298  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_301  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_242  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_244  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_247  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_251  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_255  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_259  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_263  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_266  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_281  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_285  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_289  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_293  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_297  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_300  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_313  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_315  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_317  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_319  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_321  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_588 -> m13_322  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m13_590 -> m13_356  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_360  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_364  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_368  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_371  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_380  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_384  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_388  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_392  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_395  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_350  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_352  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_355  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_359  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_363  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_367  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_370  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_379  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_383  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_387  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_391  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_394  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_401  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_403  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_405  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_407  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_409  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_590 -> m13_410  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m13_594 -> m13_569  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger", style=dashed];
m13_587 -> m13_217  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider", style=dashed];
m13_587 -> m13_211  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider", style=dashed];
m13_589 -> m13_331  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider", style=dashed];
m16_25 -> m16_97  [color=darkseagreen4, key=1, label="System.Action<Hangfire.Storage.IStorageConnection>", style=dashed];
m16_94 -> m16_96  [color=darkseagreen4, key=1, label=resource, style=dashed];
m16_94 -> m16_99  [color=darkseagreen4, key=1, label=resource, style=dashed];
m16_94 -> m16_107  [color=darkseagreen4, key=1, label=resource, style=dashed];
m16_95 -> m16_97  [color=darkseagreen4, key=1, label=connection, style=dashed];
m16_38 -> m16_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IReadOnlyDictionary<string, string>", style=dashed];
m16_38 -> m16_64  [color=darkseagreen4, key=1, label="System.Collections.Generic.IReadOnlyDictionary<string, string>", style=dashed];
m16_38 -> m16_67  [color=darkseagreen4, key=1, label="Hangfire.Storage.IStorageConnection", style=dashed];
m16_49 -> m16_52  [color=darkseagreen4, key=1, label=nowInstant, style=dashed];
m16_49 -> m16_62  [color=darkseagreen4, key=1, label=nowInstant, style=dashed];
m16_49 -> m16_65  [color=darkseagreen4, key=1, label=nowInstant, style=dashed];
m16_49 -> m16_66  [color=darkseagreen4, key=1, label=nowInstant, style=dashed];
m16_50 -> m16_62  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m16_50 -> m16_63  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m16_50 -> m16_65  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m16_50 -> m16_66  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m16_50 -> m16_67  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m16_59 -> m16_63  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m16_4 -> m16_6  [color=darkseagreen4, key=1, label="Hangfire.Client.IBackgroundJobFactory", style=dashed];
m16_4 -> m16_7  [color=darkseagreen4, key=1, label="System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>", style=dashed];
m16_4 -> m16_8  [color=darkseagreen4, key=1, label="System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>", style=dashed];
m16_4 -> m16_9  [color=darkseagreen4, key=1, label="Hangfire.Server.IThrottler", style=dashed];
m16_4 -> m16_10  [color=darkseagreen4, key=1, label="Hangfire.Server.IThrottler", style=dashed];
m16_17 -> m16_19  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m16_17 -> m16_20  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m16_17 -> m16_32  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m16_17 -> m16_22  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m16_27 -> m16_32  [color=darkseagreen4, key=1, label="Hangfire.Storage.IStorageConnection", style=dashed];
m16_30 -> m16_32  [color=darkseagreen4, key=1, label=recurringJob, style=dashed];
m16_29 -> m16_32  [color=darkseagreen4, key=1, label=recurringJobId, style=dashed];
m16_80 -> m16_110  [color=darkseagreen4, key=1, label="System.Collections.Generic.IReadOnlyDictionary<string, string>", style=dashed];
m16_80 -> m16_112  [color=darkseagreen4, key=1, label="System.Collections.Generic.IReadOnlyDictionary<string, string>", style=dashed];
m16_80 -> m16_114  [color=darkseagreen4, key=1, label="System.Collections.Generic.IReadOnlyDictionary<string, string>", style=dashed];
m16_122 -> m16_20  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m16_122 -> m16_32  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m16_122 -> m16_22  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m16_122 -> m16_41  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m16_123 -> m16_32  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m16_124 -> m16_107  [color=darkseagreen4, key=1, label=resource, style=dashed];
m17_4 -> m17_9  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m17_6 -> m17_8  [color=green, key=1, label=serversRemoved, style=dashed];
m17_19 -> m17_9  [color=darkseagreen4, key=1, label="Hangfire.Server.ServerWatchdog", style=dashed];
m17_19 -> m17_16  [color=darkseagreen4, key=1, label="Hangfire.Server.ServerWatchdog", style=dashed];
m19_117 -> m19_120  [color=darkseagreen4, key=1, label="HangFire.Server.ServerContext", style=dashed];
m19_28 -> m19_28  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m19_28 -> m19_32  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m19_95 -> m19_98  [color=darkseagreen4, key=1, label=string, style=dashed];
m19_47 -> m19_50  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m19_47 -> m19_55  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m19_47 -> m19_58  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m19_54 -> m19_62  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m19_56 -> m19_61  [color=darkseagreen4, key=1, label=parameterArray, style=dashed];
m19_16 -> m19_22  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m19_26 -> m19_34  [color=darkseagreen4, key=1, label=fetchConditions, style=dashed];
m19_27 -> m19_31  [color=green, key=1, label=currentQueryIndex, style=dashed];
m19_27 -> m19_34  [color=green, key=1, label=currentQueryIndex, style=dashed];
m19_29 -> m19_35  [color=darkseagreen4, key=1, label=idAndQueue, style=dashed];
m19_29 -> m19_36  [color=darkseagreen4, key=1, label=idAndQueue, style=dashed];
m19_34 -> m19_34  [color=darkseagreen4, key=1, label=currentQueryIndex, style=dashed];
m19_32 -> m19_32  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m19_32 -> m19_35  [color=darkseagreen4, key=1, label="Hangfire.States.IState", style=dashed];
m19_33 -> m19_33  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m19_4 -> m19_7  [color=darkseagreen4, key=1, label="Hangfire.Client.IBackgroundJobFactory", style=dashed];
m19_4 -> m19_9  [color=darkseagreen4, key=1, label="Hangfire.States.IBackgroundJobStateChanger", style=dashed];
m19_137 -> m19_137  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m19_102 -> m19_105  [color=darkseagreen4, key=1, label=string, style=dashed];
m19_88 -> m19_91  [color=darkseagreen4, key=1, label=string, style=dashed];
m19_109 -> m19_112  [color=darkseagreen4, key=1, label=double, style=dashed];
m19_44 -> m19_22  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobClient", style=dashed];
m19_44 -> m19_23  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobClient", style=dashed];
m19_142 -> m19_7  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m19_142 -> m19_15  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m19_142 -> m19_61  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_59 -> m21_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_85 -> m21_87  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_85 -> m21_90  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_87 -> m21_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_46 -> m21_48  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_98 -> m21_102  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_98 -> m21_100  [color=darkseagreen4, key=1, label=duration, style=dashed];
m21_98 -> m21_101  [color=darkseagreen4, key=1, label=duration, style=dashed];
m21_99 -> m21_101  [color=darkseagreen4, key=1, label=result, style=dashed];
m21_64 -> m21_68  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_65 -> m21_67  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_66 -> m21_72  [color=darkseagreen4, key=1, label=retryAttempt, style=dashed];
m21_66 -> m21_74  [color=darkseagreen4, key=1, label=retryAttempt, style=dashed];
m21_77 -> m21_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_35 -> m21_37  [color=darkseagreen4, key=1, label=state, style=dashed];
m21_35 -> m21_40  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_37 -> m21_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_36 -> m21_40  [color=darkseagreen4, key=1, label=addAndSetStateSql, style=dashed];
m21_55 -> m21_94  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_55 -> m21_95  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m21_55 -> m21_107  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m21_90 -> m21_94  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m21_90 -> m21_97  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m21_93 -> m21_95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_97 -> m21_101  [color=darkseagreen4, key=1, label=latency, style=dashed];
m21_105 -> m21_107  [color=green, key=1, label="lambda expression", style=dashed];
m21_110 -> m21_112  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_110 -> m21_115  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_118 -> m21_120  [color=green, key=1, label=insertSql, style=dashed];
m21_118 -> m21_125  [color=green, key=1, label=insertSql, style=dashed];
m21_119 -> m21_125  [color=darkseagreen4, key=1, label=updateSql, style=dashed];
m21_112 -> m21_114  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_111 -> m21_115  [color=darkseagreen4, key=1, label=trimSql, style=dashed];
m21_71 -> m21_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_21 -> m21_26  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m21_21 -> m21_32  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m21_21 -> m21_37  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m21_21 -> m21_40  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m21_138 -> m21_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_53 -> m21_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_122 -> m21_125  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m21_25 -> m21_33  [color=darkseagreen4, key=1, label=fetchedJob, style=dashed];
m21_25 -> m21_37  [color=darkseagreen4, key=1, label=fetchedJob, style=dashed];
m21_25 -> m21_38  [color=darkseagreen4, key=1, label=fetchedJob, style=dashed];
m21_25 -> m21_43  [color=darkseagreen4, key=1, label=fetchedJob, style=dashed];
m21_74 -> m21_74  [color=darkseagreen4, key=1, label=retryAttempt, style=dashed];
m21_24 -> m21_37  [color=darkseagreen4, key=1, label=connection, style=dashed];
m21_132 -> m21_135  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m21_127 -> m21_135  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_130 -> m21_132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_128 -> m21_135  [color=darkseagreen4, key=1, label=insertSql, style=dashed];
m21_129 -> m21_135  [color=darkseagreen4, key=1, label=updateSql, style=dashed];
m21_117 -> m21_120  [color=green, key=1, label=string, style=dashed];
m21_117 -> m21_125  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_120 -> m21_122  [color=green, key=1, label="lambda expression", style=dashed];
m21_120 -> m21_37  [color=darkseagreen4, key=1, label="Hangfire.Server.Worker", style=dashed];
m21_120 -> m21_61  [color=darkseagreen4, key=1, label="Hangfire.Server.Worker", style=dashed];
m21_120 -> m21_68  [color=darkseagreen4, key=1, label="Hangfire.Server.Worker", style=dashed];
m21_120 -> m21_95  [color=darkseagreen4, key=1, label="Hangfire.Server.Worker", style=dashed];
m21_4 -> m21_6  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m21_4 -> m21_7  [color=darkseagreen4, key=1, label="Hangfire.Server.IBackgroundJobPerformer", style=dashed];
m21_4 -> m21_8  [color=darkseagreen4, key=1, label="Hangfire.Server.IBackgroundJobPerformer", style=dashed];
m21_4 -> m21_9  [color=darkseagreen4, key=1, label="Hangfire.States.IBackgroundJobStateChanger", style=dashed];
m21_4 -> m21_10  [color=darkseagreen4, key=1, label="Hangfire.States.IBackgroundJobStateChanger", style=dashed];
m21_52 -> m21_68  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m21_52 -> m21_72  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m21_52 -> m21_73  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m21_29 -> m21_33  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_30 -> m21_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_146 -> m21_120  [color=green, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m21_146 -> m21_10  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m21_146 -> m21_21  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m21_146 -> m21_37  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m21_146 -> m21_83  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m21_146 -> m21_87  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m21_146 -> m21_112  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m21_146 -> m21_143  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m21_179 -> m21_125  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_180 -> m21_125  [color=darkseagreen4, key=1, label=updateSql, style=dashed];
m21_181 -> m21_125  [color=darkseagreen4, key=1, label=insertSql, style=dashed];
m21_149 -> m21_33  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_150 -> m21_40  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_151 -> m21_40  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m21_152 -> m21_40  [color=darkseagreen4, key=1, label=addAndSetStateSql, style=dashed];
m21_160 -> m21_68  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_161 -> m21_68  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m21_162 -> m21_74  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_165 -> m21_90  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_166 -> m21_90  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_167 -> m21_90  [color=darkseagreen4, key=1, label=double, style=dashed];
m21_168 -> m21_90  [color=darkseagreen4, key=1, label=addSql, style=dashed];
m21_171 -> m21_102  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_172 -> m21_102  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_175 -> m21_115  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_176 -> m21_115  [color=darkseagreen4, key=1, label=int, style=dashed];
m21_177 -> m21_115  [color=darkseagreen4, key=1, label=int, style=dashed];
m21_178 -> m21_115  [color=darkseagreen4, key=1, label=trimSql, style=dashed];
m21_182 -> m21_135  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_183 -> m21_135  [color=darkseagreen4, key=1, label=updateSql, style=dashed];
m21_184 -> m21_135  [color=darkseagreen4, key=1, label=insertSql, style=dashed];
}
