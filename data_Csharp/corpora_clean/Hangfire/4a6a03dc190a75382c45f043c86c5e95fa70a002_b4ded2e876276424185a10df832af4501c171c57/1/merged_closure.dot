digraph  {
n0 [cluster="Hangfire.IRecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="Entry Hangfire.IRecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", span="23-23"];
n1 [cluster="Hangfire.IRecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="Exit Hangfire.IRecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", span="23-23"];
n2 [cluster="Hangfire.IRecurringJobManager.Trigger(string)", label="Entry Hangfire.IRecurringJobManager.Trigger(string)", span="29-29"];
n3 [cluster="Hangfire.IRecurringJobManager.Trigger(string)", label="Exit Hangfire.IRecurringJobManager.Trigger(string)", span="29-29"];
n4 [cluster="Hangfire.IRecurringJobManager.RemoveIfExists(string)", label="Entry Hangfire.IRecurringJobManager.RemoveIfExists(string)", span="30-30"];
n5 [cluster="Hangfire.IRecurringJobManager.RemoveIfExists(string)", label="Exit Hangfire.IRecurringJobManager.RemoveIfExists(string)", span="30-30"];
m0_12 [cluster="HangFire.Server.ServerWatchdog.Execute(System.Threading.CancellationToken)", color=green, community=0, file="RecurringJobManager.cs", label="var connection = _storage.GetConnection()", prediction=0, span="45-45"];
m0_66 [cluster="Hangfire.Storage.InvocationData.Deserialize()", file="RecurringJobManager.cs", label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="44-44"];
m0_40 [cluster="Hangfire.JobStorage.GetConnection()", file="RecurringJobManager.cs", label="Entry Hangfire.JobStorage.GetConnection()", span="56-56"];
m0_14 [cluster="HangFire.Server.ServerWatchdog.Execute(System.Threading.CancellationToken)", color=green, community=0, file="RecurringJobManager.cs", label="serversRemoved != 0", prediction=1, span="48-48"];
m0_15 [cluster="HangFire.Server.ServerWatchdog.Execute(System.Threading.CancellationToken)", color=green, community=0, file="RecurringJobManager.cs", label="Logger.Info(String.Format(\r\n                        ''{0} servers were removed due to timeout'', \r\n                        serversRemoved))", prediction=2, span="50-52"];
m0_16 [cluster="HangFire.Server.ServerWatchdog.Execute(System.Threading.CancellationToken)", color=green, community=0, file="RecurringJobManager.cs", label="cancellationToken.WaitHandle.WaitOne(_options.CheckInterval)", prediction=3, span="56-56"];
m0_19 [cluster="HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="RecurringJobManager.cs", label="Entry HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="44-44"];
m0_20 [cluster="string.Format(string, object)", file="RecurringJobManager.cs", label="Entry string.Format(string, object)", span="0-0"];
m0_21 [cluster="Unk.Info", file="RecurringJobManager.cs", label="Entry Unk.Info", span=""];
m0_22 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="RecurringJobManager.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m0_38 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", file="RecurringJobManager.cs", label="Exit Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", span="55-55"];
m0_67 [cluster="Hangfire.States.EnqueuedState.EnqueuedState()", file="RecurringJobManager.cs", label="Entry Hangfire.States.EnqueuedState.EnqueuedState()", span="87-87"];
m0_50 [cluster="Hangfire.RecurringJobManager.Trigger(string)", file="RecurringJobManager.cs", label="Entry Hangfire.RecurringJobManager.Trigger(string)", span="93-93"];
m0_64 [cluster="Hangfire.RecurringJobManager.Trigger(string)", file="RecurringJobManager.cs", label="Exit Hangfire.RecurringJobManager.Trigger(string)", span="93-93"];
m0_71 [cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)", file="RecurringJobManager.cs", label="Entry Hangfire.RecurringJobManager.RemoveIfExists(string)", span="119-119"];
m0_79 [cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)", file="RecurringJobManager.cs", label="Exit Hangfire.RecurringJobManager.RemoveIfExists(string)", span="119-119"];
m0_0 [cluster="Hangfire.RecurringJobManager.RecurringJobManager()", file="RecurringJobManager.cs", label="Entry Hangfire.RecurringJobManager.RecurringJobManager()", span="36-36"];
m0_1 [cluster="Hangfire.RecurringJobManager.RecurringJobManager()", file="RecurringJobManager.cs", label="Exit Hangfire.RecurringJobManager.RecurringJobManager()", span="36-36"];
m0_89 [cluster="System.ArgumentException.ArgumentException(string, string, System.Exception)", file="RecurringJobManager.cs", label="Entry System.ArgumentException.ArgumentException(string, string, System.Exception)", span="0-0"];
m0_81 [cluster="Hangfire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="RecurringJobManager.cs", label="Entry Hangfire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="43-43"];
m0_68 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="RecurringJobManager.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m0_42 [cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", file="RecurringJobManager.cs", label="Entry Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="69-69"];
m0_69 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RecurringJobManager.cs", label="Entry Hangfire.Client.CreateContext.CreateContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", span="37-37"];
m0_2 [cluster="HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage, HangFire.Server.ServerWatchdogOptions)", file="RecurringJobManager.cs", label="Entry HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage, HangFire.Server.ServerWatchdogOptions)", span="34-34"];
m0_3 [cluster="HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage, HangFire.Server.ServerWatchdogOptions)", color=green, community=0, file="RecurringJobManager.cs", label="storage == null", prediction=4, span="36-36"];
m0_13 [cluster="HangFire.Server.ServerWatchdog.Execute(System.Threading.CancellationToken)", color=green, community=0, file="RecurringJobManager.cs", label="var serversRemoved = connection.RemoveTimedOutServers(_options.ServerTimeout)", prediction=2, span="47-47"];
m0_46 [cluster="Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", file="RecurringJobManager.cs", label="Entry Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", span="27-27"];
m0_48 [cluster="Hangfire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", file="RecurringJobManager.cs", label="Entry Hangfire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", span="41-41"];
m0_41 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RecurringJobManager.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m0_47 [cluster="Hangfire.Storage.IWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="RecurringJobManager.cs", label="Entry Hangfire.Storage.IWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="51-51"];
m0_45 [cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="RecurringJobManager.cs", label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68"];
m0_65 [cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="RecurringJobManager.cs", label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39"];
m0_39 [cluster="Hangfire.RecurringJobManager.ValidateCronExpression(string)", file="RecurringJobManager.cs", label="Entry Hangfire.RecurringJobManager.ValidateCronExpression(string)", span="133-133"];
m0_86 [cluster="Hangfire.RecurringJobManager.ValidateCronExpression(string)", file="RecurringJobManager.cs", label="Exit Hangfire.RecurringJobManager.ValidateCronExpression(string)", span="133-133"];
m0_49 [cluster="Hangfire.Storage.IWriteOnlyTransaction.Commit()", file="RecurringJobManager.cs", label="Entry Hangfire.Storage.IWriteOnlyTransaction.Commit()", span="54-54"];
m0_43 [cluster="Hangfire.Common.JobHelper.ToJson(object)", file="RecurringJobManager.cs", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
m0_4 [cluster="HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage, HangFire.Server.ServerWatchdogOptions)", color=green, community=0, file="RecurringJobManager.cs", label="throw new ArgumentNullException(''storage'');", prediction=6, span="36-36"];
m0_5 [cluster="HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage, HangFire.Server.ServerWatchdogOptions)", color=green, community=0, file="RecurringJobManager.cs", label="options == null", prediction=7, span="37-37"];
m0_6 [cluster="HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage, HangFire.Server.ServerWatchdogOptions)", color=green, community=0, file="RecurringJobManager.cs", label="throw new ArgumentNullException(''options'');", prediction=8, span="37-37"];
m0_7 [cluster="HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage, HangFire.Server.ServerWatchdogOptions)", color=green, community=0, file="RecurringJobManager.cs", label="_storage = storage", prediction=9, span="39-39"];
m0_8 [cluster="HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage, HangFire.Server.ServerWatchdogOptions)", color=green, community=0, file="RecurringJobManager.cs", label="_options = options", prediction=10, span="40-40"];
m0_11 [cluster="HangFire.Server.ServerWatchdog.Execute(System.Threading.CancellationToken)", file="RecurringJobManager.cs", label="Entry HangFire.Server.ServerWatchdog.Execute(System.Threading.CancellationToken)", span="43-43"];
m0_44 [cluster="Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", file="RecurringJobManager.cs", label="Entry Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", span="64-64"];
m0_80 [cluster="Hangfire.Storage.IWriteOnlyTransaction.RemoveHash(string)", file="RecurringJobManager.cs", label="Entry Hangfire.Storage.IWriteOnlyTransaction.RemoveHash(string)", span="52-52"];
m0_87 [cluster="NCrontab.CrontabSchedule.Parse(string)", file="RecurringJobManager.cs", label="Entry NCrontab.CrontabSchedule.Parse(string)", span="93-93"];
m0_88 [cluster="NCrontab.CrontabSchedule.GetNextOccurrence(System.DateTime)", file="RecurringJobManager.cs", label="Entry NCrontab.CrontabSchedule.GetNextOccurrence(System.DateTime)", span="193-193"];
m0_70 [cluster="Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", file="RecurringJobManager.cs", label="Entry Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", span="31-31"];
m0_90 [file="RecurringJobManager.cs", label="Hangfire.RecurringJobManager", span=""];
m1_13 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="RecurringJobManagerExtensions.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m1_16 [cluster="string.Format(string, object, object)", file="RecurringJobManagerExtensions.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m1_19 [cluster="HangFire.States.EnqueuedState.EnqueuedState(string, string, string)", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.States.EnqueuedState.EnqueuedState(string, string, string)", span="10-10"];
m1_42 [cluster="System.TimeSpan.Equals(System.TimeSpan)", file="RecurringJobManagerExtensions.cs", label="Entry System.TimeSpan.Equals(System.TimeSpan)", span="0-0"];
m1_18 [cluster="HangFire.Client.JobClient.GenerateId()", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.Client.JobClient.GenerateId()", span="92-92"];
m1_59 [cluster="HangFire.Client.JobClient.GenerateId()", file="RecurringJobManagerExtensions.cs", label="return Guid.NewGuid().ToString();", span="94-94"];
m1_60 [cluster="HangFire.Client.JobClient.GenerateId()", file="RecurringJobManagerExtensions.cs", label="Exit HangFire.Client.JobClient.GenerateId()", span="92-92"];
m1_45 [cluster="HangFire.Client.JobClient.Dispose()", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.Client.JobClient.Dispose()", span="76-76"];
m1_46 [cluster="HangFire.Client.JobClient.Dispose()", file="RecurringJobManagerExtensions.cs", label="_redis.Dispose()", span="78-78"];
m1_47 [cluster="HangFire.Client.JobClient.Dispose()", file="RecurringJobManagerExtensions.cs", label="Exit HangFire.Client.JobClient.Dispose()", span="76-76"];
m1_14 [cluster="System.Type.IsAssignableFrom(System.Type)", file="RecurringJobManagerExtensions.cs", label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0"];
m1_57 [cluster="HangFire.JobHelper.ToJson(object)", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.JobHelper.ToJson(object)", span="32-32"];
m1_56 [cluster="HangFire.Client.ClientJobDescriptor.SerializeProperties(object)", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.Client.ClientJobDescriptor.SerializeProperties(object)", span="49-49"];
m1_58 [cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="55-55"];
m1_22 [cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.Dictionary<string, string>, HangFire.States.JobState)", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.Dictionary<string, string>, HangFire.States.JobState)", span="13-13"];
m1_17 [cluster="HangFire.JobHelper.GetQueue(System.Type)", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.JobHelper.GetQueue(System.Type)", span="20-20"];
m1_41 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", file="RecurringJobManagerExtensions.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", span="0-0"];
m1_0 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.Client.JobClient.Async(System.Type, object)", span="12-12"];
m1_1 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="jobType == null", prediction=11, span="14-14"];
m1_2 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''jobType'');", prediction=12, span="16-16"];
m1_3 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="!typeof (BackgroundJob).IsAssignableFrom(jobType)", prediction=13, span="18-18"];
m1_4 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="throw new ArgumentException(\r\n                    String.Format(''The type '{0}' must inherit '{1}'.'', jobType, typeof(BackgroundJob)), \r\n                    ''jobType'');", prediction=13, span="20-22"];
m1_5 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="var queue = JobHelper.GetQueue(jobType)", prediction=15, span="25-25"];
m1_6 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="var jobId = GenerateId()", prediction=16, span="27-27"];
m1_7 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="var state = new EnqueuedState(jobId, ''Enqueued by the Сlient'', queue)", prediction=17, span="29-29"];
m1_8 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="var job = CreateJob(jobType, args)", prediction=18, span="30-30"];
m1_9 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="var context = new CreateContext(\r\n                new ClientJobDescriptor(_redis, jobId, job, state))", prediction=19, span="32-33"];
m1_11 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="return jobId;", prediction=16, span="37-37"];
m1_10 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="_jobCreator.CreateJob(context)", prediction=21, span="35-35"];
m1_12 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", file="RecurringJobManagerExtensions.cs", label="Exit HangFire.Client.JobClient.Async(System.Type, object)", span="12-12"];
m1_62 [cluster="System.Guid.ToString()", file="RecurringJobManagerExtensions.cs", label="Entry System.Guid.ToString()", span="0-0"];
m1_44 [cluster="System.DateTime.Add(System.TimeSpan)", file="RecurringJobManagerExtensions.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m1_55 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RecurringJobManagerExtensions.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m1_24 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", span="40-40"];
m1_25 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="jobType == null", prediction=22, span="42-42"];
m1_26 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''jobType'');", prediction=23, span="44-44"];
m1_27 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="!typeof(BackgroundJob).IsAssignableFrom(jobType)", prediction=21, span="46-46"];
m1_28 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="throw new ArgumentException(\r\n                    String.Format(''The type '{0}' must inherit '{1}'.'', jobType, typeof(BackgroundJob)),\r\n                    ''jobType'');", prediction=21, span="48-50"];
m1_29 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="interval != interval.Duration()", prediction=21, span="53-53"];
m1_30 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="throw new ArgumentOutOfRangeException(''interval'', ''Interval value can not be negative.'');", prediction=27, span="55-55"];
m1_31 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="interval.Equals(TimeSpan.Zero)", prediction=28, span="58-58"];
m1_32 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="return Async(jobType, args);", prediction=21, span="60-60"];
m1_33 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="RecurringJobManagerExtensions.cs", label="var jobId = GenerateId()", span="63-63"];
m1_34 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="RecurringJobManagerExtensions.cs", label="var state = new ScheduledState(jobId, ''Scheduled by the Client'', DateTime.UtcNow.Add(interval))", span="65-65"];
m1_35 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="RecurringJobManagerExtensions.cs", label="var job = CreateJob(jobType, args)", span="66-66"];
m1_36 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="RecurringJobManagerExtensions.cs", label="var context = new CreateContext(\r\n                new ClientJobDescriptor(_redis, jobId, job, state))", span="68-69"];
m1_37 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="RecurringJobManagerExtensions.cs", label="_jobCreator.CreateJob(context)", span="71-71"];
m1_38 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="RecurringJobManagerExtensions.cs", label="return jobId;", span="73-73"];
m1_39 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="RecurringJobManagerExtensions.cs", label="Exit HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", span="40-40"];
m1_48 [cluster="Unk.Dispose", file="RecurringJobManagerExtensions.cs", label="Entry Unk.Dispose", span=""];
m1_23 [cluster="HangFire.Client.JobCreator.CreateJob(HangFire.Client.CreateContext)", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.Client.JobCreator.CreateJob(HangFire.Client.CreateContext)", span="33-33"];
m1_20 [cluster="HangFire.Client.JobClient.CreateJob(System.Type, object)", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.Client.JobClient.CreateJob(System.Type, object)", span="81-81"];
m1_49 [cluster="HangFire.Client.JobClient.CreateJob(System.Type, object)", file="RecurringJobManagerExtensions.cs", label="var job = new Dictionary<string, string>()", span="84-84"];
m1_50 [cluster="HangFire.Client.JobClient.CreateJob(System.Type, object)", file="RecurringJobManagerExtensions.cs", label="job[''Type''] = jobType.AssemblyQualifiedName", span="85-85"];
m1_51 [cluster="HangFire.Client.JobClient.CreateJob(System.Type, object)", file="RecurringJobManagerExtensions.cs", label="job[''Args''] = JobHelper.ToJson(ClientJobDescriptor.SerializeProperties(jobArgs))", span="86-86"];
m1_53 [cluster="HangFire.Client.JobClient.CreateJob(System.Type, object)", file="RecurringJobManagerExtensions.cs", label="return job;", span="89-89"];
m1_52 [cluster="HangFire.Client.JobClient.CreateJob(System.Type, object)", file="RecurringJobManagerExtensions.cs", label="job[''CreatedAt''] = JobHelper.ToStringTimestamp(DateTime.UtcNow)", span="87-87"];
m1_54 [cluster="HangFire.Client.JobClient.CreateJob(System.Type, object)", file="RecurringJobManagerExtensions.cs", label="Exit HangFire.Client.JobClient.CreateJob(System.Type, object)", span="81-81"];
m1_40 [cluster="System.TimeSpan.Duration()", file="RecurringJobManagerExtensions.cs", label="Entry System.TimeSpan.Duration()", span="0-0"];
m1_61 [cluster="System.Guid.NewGuid()", file="RecurringJobManagerExtensions.cs", label="Entry System.Guid.NewGuid()", span="0-0"];
m1_43 [cluster="HangFire.States.ScheduledState.ScheduledState(string, string, System.DateTime)", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.States.ScheduledState.ScheduledState(string, string, System.DateTime)", span="10-10"];
m1_15 [cluster="System.ArgumentException.ArgumentException(string, string)", file="RecurringJobManagerExtensions.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m1_21 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.ClientJobDescriptor)", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.Client.CreateContext.CreateContext(HangFire.Client.ClientJobDescriptor)", span="12-12"];
m1_63 [file="RecurringJobManagerExtensions.cs", label="HangFire.Client.JobClient", span=""];
m2_90 [cluster="HangFire.Web.RazorPage.Write(object)", file="SqlServerDistributedLock.cs", label="Entry HangFire.Web.RazorPage.Write(object)", span="40-40"];
m2_9 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="var statistics = JobStorage.GetStatistics()", span="120-120"];
m2_10 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''\r\n                    <div id=\''stats\'' class=\''list-group\''>\r\n                      '' +\r\n''  <a class=\''list-group-item '')", span="125-126"];
m2_11 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(Request.PathInfo.Equals(''/'') ? ''active'' : null)", span="131-131"];
m2_15 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(Request.PathInfo.Equals(''/servers'') ? ''active'' : null)", span="153-153"];
m2_12 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''\''\r\n                           href=\'''')", span="136-136"];
m2_16 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''\''\r\n                           href=\'''')", span="158-158"];
m2_13 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(Request.LinkTo(''/''))", span="141-141"];
m2_14 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''\''>\r\n                            <span class=\''glyphicon glyphicon-dashboard\''></spa'' +\r\n''n>\r\n                            Dashboard\r\n                        </a>\r\n\r\n     '' +\r\n''                   <a class=\''list-group-item '')", span="146-148"];
m2_17 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(Request.LinkTo(''/servers''))", span="163-163"];
m2_94 [cluster="Unk.StartsWith", file="SqlServerDistributedLock.cs", label="Entry Unk.StartsWith", span=""];
m2_0 [cluster="HangFire.Server.SchedulePoller.SchedulePoller(HangFire.JobStorage, HangFire.States.IStateMachineFactory, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="Entry HangFire.Server.SchedulePoller.SchedulePoller(HangFire.JobStorage, HangFire.States.IStateMachineFactory, System.TimeSpan)", span="34-34"];
m2_5 [cluster="HangFire.Server.SchedulePoller.SchedulePoller(HangFire.JobStorage, HangFire.States.IStateMachineFactory, System.TimeSpan)", color=green, community=0, file="SqlServerDistributedLock.cs", label="_storage = storage", prediction=30, span="42-42"];
m2_4 [cluster="HangFire.Server.SchedulePoller.SchedulePoller(HangFire.JobStorage, HangFire.States.IStateMachineFactory, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="throw new ArgumentNullException(''stateMachineFactory'');", span="40-40"];
m2_6 [cluster="HangFire.Server.SchedulePoller.SchedulePoller(HangFire.JobStorage, HangFire.States.IStateMachineFactory, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="_stateMachineFactory = stateMachineFactory", span="43-43"];
m2_1 [cluster="HangFire.Server.SchedulePoller.SchedulePoller(HangFire.JobStorage, HangFire.States.IStateMachineFactory, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="storage == null", span="39-39"];
m2_2 [cluster="HangFire.Server.SchedulePoller.SchedulePoller(HangFire.JobStorage, HangFire.States.IStateMachineFactory, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="throw new ArgumentNullException(''storage'');", span="39-39"];
m2_3 [cluster="HangFire.Server.SchedulePoller.SchedulePoller(HangFire.JobStorage, HangFire.States.IStateMachineFactory, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="stateMachineFactory == null", span="40-40"];
m2_7 [cluster="HangFire.Server.SchedulePoller.SchedulePoller(HangFire.JobStorage, HangFire.States.IStateMachineFactory, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="_pollInterval = pollInterval", span="44-44"];
m2_8 [cluster="HangFire.Server.SchedulePoller.SchedulePoller(HangFire.JobStorage, HangFire.States.IStateMachineFactory, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="Exit HangFire.Server.SchedulePoller.SchedulePoller(HangFire.JobStorage, HangFire.States.IStateMachineFactory, System.TimeSpan)", span="34-34"];
m2_18 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="SqlServerDistributedLock.cs", label="Entry HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", span="71-71"];
m2_19 [cluster="Unk.InfoFormat", file="SqlServerDistributedLock.cs", label="Entry Unk.InfoFormat", span=""];
m2_20 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="SqlServerDistributedLock.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m2_21 [cluster="HangFire.Server.SchedulePoller.ToString()", file="SqlServerDistributedLock.cs", label="Entry HangFire.Server.SchedulePoller.ToString()", span="66-66"];
m2_22 [cluster="HangFire.Server.SchedulePoller.ToString()", file="SqlServerDistributedLock.cs", label="return ''Schedule Poller'';", span="68-68"];
m2_23 [cluster="HangFire.Server.SchedulePoller.ToString()", file="SqlServerDistributedLock.cs", label="Exit HangFire.Server.SchedulePoller.ToString()", span="66-66"];
m2_24 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="SqlServerDistributedLock.cs", label="var connection = _storage.GetConnection()", span="73-73"];
m2_25 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="SqlServerDistributedLock.cs", label="var timestamp = JobHelper.ToTimestamp(DateTime.UtcNow)", span="75-75"];
m2_26 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="SqlServerDistributedLock.cs", label="var jobId = connection\r\n                    .GetFirstByLowestScoreFromSet(''schedule'', 0, timestamp)", span="78-79"];
m2_27 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="SqlServerDistributedLock.cs", label="String.IsNullOrEmpty(jobId)", span="81-81"];
m2_28 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="SqlServerDistributedLock.cs", label="return false;", span="83-83"];
m2_29 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="SqlServerDistributedLock.cs", label="var stateMachine = _stateMachineFactory.Create(connection)", span="86-86"];
m2_30 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="SqlServerDistributedLock.cs", label="var enqueuedState = new EnqueuedState\r\n                {\r\n                    Reason = ''Enqueued as a scheduled job''\r\n                }", span="87-90"];
m2_31 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="SqlServerDistributedLock.cs", label="stateMachine.TryToChangeState(jobId, enqueuedState, new[] { ScheduledState.StateName })", span="92-92"];
m2_32 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="SqlServerDistributedLock.cs", label="return true;", span="94-94"];
m2_33 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="SqlServerDistributedLock.cs", label="Exit HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", span="71-71"];
m2_34 [cluster="HangFire.JobStorage.GetConnection()", file="SqlServerDistributedLock.cs", label="Entry HangFire.JobStorage.GetConnection()", span="55-55"];
m2_35 [cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", file="SqlServerDistributedLock.cs", label="Entry HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="39-39"];
m2_36 [cluster="HangFire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerDistributedLock.cs", label="Entry HangFire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="39-39"];
m2_37 [cluster="string.IsNullOrEmpty(string)", file="SqlServerDistributedLock.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m2_38 [cluster="HangFire.States.IStateMachineFactory.Create(HangFire.Storage.IStorageConnection)", file="SqlServerDistributedLock.cs", label="Entry HangFire.States.IStateMachineFactory.Create(HangFire.Storage.IStorageConnection)", span="8-8"];
m2_39 [cluster="HangFire.States.EnqueuedState.EnqueuedState()", file="SqlServerDistributedLock.cs", label="Entry HangFire.States.EnqueuedState.EnqueuedState()", span="31-31"];
m2_40 [cluster="HangFire.States.IStateMachine.TryToChangeState(string, HangFire.States.State, string[])", file="SqlServerDistributedLock.cs", label="Entry HangFire.States.IStateMachine.TryToChangeState(string, HangFire.States.State, string[])", span="24-24"];
m2_41 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="HangFire.Server.SchedulePoller", span=""];
m2_42 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''\'' \r\n                           href=\'''')", span="306-306"];
m2_43 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(Request.LinkTo(''/succeeded''))", span="311-311"];
m2_44 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''\''>\r\n                            <span id=\''stats-succeeded\'' class=\''label label-suc'' +\r\n''cess pull-right\''>\r\n                                '')", span="316-317"];
m2_45 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(statistics.Succeeded)", span="322-322"];
m2_46 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''\r\n                            </span>\r\n                            Succeeded\r\n   '' +\r\n''                     </a>\r\n                        <a class=\''list-group-item sta'' +\r\n''ts-indent '')", span="327-329"];
m2_47 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(Request.PathInfo.Equals(''/failed'') ? ''active'' : null)", span="334-334"];
m2_48 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''\'' \r\n                           href=\'''')", span="339-339"];
m2_49 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(Request.LinkTo(''/failed''))", span="344-344"];
m2_50 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''\''>\r\n                            <span id=\''stats-failed\'' class=\''label label-danger'' +\r\n'' pull-right\''>\r\n                                '')", span="349-350"];
m2_51 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(statistics.Failed)", span="355-355"];
m2_52 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''\r\n                            </span>\r\n                            Failed\r\n      '' +\r\n''                  </a>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n'' +\r\n''                <div class=\''col-md-9\''>\r\n'')", span="360-362"];
m2_53 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Breadcrumbs != null", span="367-367"];
m2_54 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''                        <ol class=\''breadcrumb\''>\r\n                            <li>'' +\r\n''<a href=\'''')", span="373-374"];
m2_55 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(Request.LinkTo(''/''))", span="379-379"];
m2_56 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''\''><span class=\''glyphicon glyphicon-home\''></span></a></li>\r\n'')", span="384-384"];
m2_57 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label=Breadcrumbs, span="389-389"];
m2_58 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''                                <li><a href=\'''')", span="395-395"];
m2_59 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(breadcrumb.Value)", span="400-400"];
m2_60 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''\''>'')", span="405-405"];
m2_61 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(breadcrumb.Key)", span="410-410"];
m2_62 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''</a></li>\r\n'')", span="415-415"];
m2_63 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''                            <li class=\''active\''>'')", span="425-425"];
m2_64 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(BreadcrumbsTitle ?? Title)", span="430-430"];
m2_65 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''</li>\r\n                        </ol>\r\n'')", span="435-435"];
m2_66 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''\r\n                    <h1 class=\''page-header\''>\r\n                        '')", span="445-445"];
m2_67 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(Title)", span="450-450"];
m2_68 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''\r\n'')", span="455-455"];
m2_69 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="!String.IsNullOrEmpty(Subtitle)", span="460-460"];
m2_70 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''                            <small>'')", span="466-466"];
m2_71 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(Subtitle)", span="471-471"];
m2_72 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''</small>\r\n'')", span="476-476"];
m2_73 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''                    </h1>\r\n                    '')", span="486-486"];
m2_74 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(RenderBody())", span="491-491"];
m2_75 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(@''\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div id=''''footer''''>\r\n            <div class=''''container''''>\r\n                <ul class=''''list-inline credit''''>\r\n                    <li>\r\n                        <a href=''''http://github.io/odinserj/hangfire'''' target=''''_blank''''>HangFire \r\n                            '')", span="496-506"];
m2_76 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(FileVersionInfo.GetVersionInfo(GetType().Assembly.Location).ProductVersion)", span="511-511"];
m2_77 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''\r\n                        </a>\r\n                    </li>\r\n                    <l'' +\r\n''i>\r\n                        '')", span="516-517"];
m2_78 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(String.Format(''redis://{0}:{1}/{2}'', RedisFactory.Host, RedisFactory.Port, RedisFactory.Db))", span="522-522"];
m2_79 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''\r\n                    </li>\r\n                    <li>Time: '')", span="527-527"];
m2_80 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(DateTime.UtcNow)", span="532-532"];
m2_81 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral('' UTC\r\n                    </li>\r\n                    <li>Generated in ['')", span="537-537"];
m2_82 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write((DateTime.UtcNow - (DateTime)Context.Items[''GenerationStartedAt'']).Milliseconds)", span="542-542"];
m2_83 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(@'' ms]\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        \r\n        <script>\r\n            (function (hangFire) {\r\n                hangFire.config = {\r\n                    pollInterval: 2000,\r\n                    pollUrl: ''')", span="547-557"];
m2_84 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(Request.LinkTo(''/stats''))", span="562-562"];
m2_85 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''\'\r\n                };\r\n            })(window.HangFire = window.HangFire || {});\r\n'' +\r\n''        </script>\r\n        <script src=\'''')", span="567-568"];
m2_86 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Write(Request.LinkTo(''/js/scripts.js''))", span="573-573"];
m2_87 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="WriteLiteral(''\''></script>\r\n    </body>\r\n</html>\r\n'')", span="578-578"];
m2_88 [cluster="HangFire.Web.Pages.LayoutPage.Execute()", file="SqlServerDistributedLock.cs", label="Exit HangFire.Web.Pages.LayoutPage.Execute()", span="39-39"];
m2_97 [cluster="object.GetType()", file="SqlServerDistributedLock.cs", label="Entry object.GetType()", span="0-0"];
m2_98 [cluster="System.Diagnostics.FileVersionInfo.GetVersionInfo(string)", file="SqlServerDistributedLock.cs", label="Entry System.Diagnostics.FileVersionInfo.GetVersionInfo(string)", span="0-0"];
m2_89 [cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="SqlServerDistributedLock.cs", label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="33-33"];
m2_96 [cluster="HangFire.Web.RazorPage.RenderBody()", file="SqlServerDistributedLock.cs", label="Entry HangFire.Web.RazorPage.RenderBody()", span="48-48"];
m2_99 [cluster="string.Format(string, object, object, object)", file="SqlServerDistributedLock.cs", label="Entry string.Format(string, object, object, object)", span="0-0"];
m2_92 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="SqlServerDistributedLock.cs", label="Entry HangFire.Web.JobStorage.GetStatistics()", span="553-553"];
m2_95 [cluster="string.IsNullOrEmpty(string)", file="SqlServerDistributedLock.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m2_100 [cluster="Unk.Write", file="SqlServerDistributedLock.cs", label="Entry Unk.Write", span=""];
m2_91 [cluster="HttpRequestBase.LinkTo(string)", file="SqlServerDistributedLock.cs", label="Entry HttpRequestBase.LinkTo(string)", span="8-8"];
m2_93 [cluster="Unk.Equals", file="SqlServerDistributedLock.cs", label="Entry Unk.Equals", span=""];
m2_101 [file="SqlServerDistributedLock.cs", label="HangFire.Web.Pages.LayoutPage", span=""];
m3_61 [cluster="System.Threading.Thread.Join()", file="SqlServerDistributedLockFacts.cs", label="Entry System.Threading.Thread.Join()", span="0-0"];
m3_13 [cluster="Unk.OnFeatureEnd", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.OnFeatureEnd", span=""];
m3_98 [cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerDistributedLockFacts.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m3_58 [cluster="System.Threading.Thread.Start()", file="SqlServerDistributedLockFacts.cs", label="Entry System.Threading.Thread.Start()", span="0-0"];
m3_5 [cluster="Unk.GetTestRunner", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.GetTestRunner", span=""];
m3_25 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", span="42-42"];
m3_26 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", file="SqlServerDistributedLockFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var storage = CreateStorage(connection);\r\n\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerDistributedLock(storage, '''', _timeout));\r\n\r\n                Assert.Equal(''resource'', exception.ParamName);\r\n            })", span="44-52"];
m3_27 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", file="SqlServerDistributedLockFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", span="42-42"];
m3_109 [cluster="System.Type.GetField(string, System.Reflection.BindingFlags)", file="SqlServerDistributedLockFacts.cs", label="Entry System.Type.GetField(string, System.Reflection.BindingFlags)", span="0-0"];
m3_111 [cluster="System.Reflection.FieldInfo.GetValue(object)", file="SqlServerDistributedLockFacts.cs", label="Entry System.Reflection.FieldInfo.GetValue(object)", span="0-0"];
m3_20 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.CreateStorage(DbConnection)", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.CreateStorage(DbConnection)", span="156-156"];
m3_113 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.CreateStorage(DbConnection)", file="SqlServerDistributedLockFacts.cs", label="return new SqlServerStorage(connection);", span="158-158"];
m3_114 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.CreateStorage(DbConnection)", file="SqlServerDistributedLockFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.CreateStorage(DbConnection)", span="156-156"];
m3_60 [cluster="System.Threading.ManualResetEventSlim.Set()", file="SqlServerDistributedLockFacts.cs", label="Entry System.Threading.ManualResetEventSlim.Set()", span="0-0"];
m3_119 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m3_4 [cluster="HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m3_79 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", span="109-109"];
m3_80 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", file="SqlServerDistributedLockFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var storage = CreateStorage(sql);\r\n                var distributedLock = new SqlServerDistributedLock(storage, ''hello'', _timeout);\r\n                distributedLock.Dispose();\r\n\r\n                var lockMode = sql.Query<string>(\r\n                    ''select applock_mode('public', 'hello', 'session')'').Single();\r\n\r\n                Assert.Equal(''NoLock'', lockMode);\r\n            })", span="111-121"];
m3_81 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", file="SqlServerDistributedLockFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", span="109-109"];
m3_89 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", span="87-87"];
m3_21 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerDistributedLockFacts.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m3_65 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<DbConnection>)", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<DbConnection>)", span="161-161"];
m3_116 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<DbConnection>)", file="SqlServerDistributedLockFacts.cs", label="var connection = ConnectionUtils.CreateConnection()", span="163-163"];
m3_117 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<DbConnection>)", file="SqlServerDistributedLockFacts.cs", label="action(connection)", span="165-165"];
m3_118 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<DbConnection>)", file="SqlServerDistributedLockFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<DbConnection>)", span="161-161"];
m3_0 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="20-20"];
m3_1 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerDistributedLockFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerDistributedLock(null, ''hello'', _timeout))", span="22-23"];
m3_3 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerDistributedLockFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="20-20"];
m3_2 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerDistributedLockFacts.cs", label="Assert.Equal(''storage'', exception.ParamName)", span="25-25"];
m3_96 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string)", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="43-43"];
m3_9 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", span="58-58"];
m3_10 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenTimeoutTooLarge()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenTimeoutTooLarge()", prediction=31, span="29-29"];
m3_11 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenTimeoutTooLarge()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var storage = CreateStorage(connection);\r\n                var tooLargeTimeout = TimeSpan.FromSeconds(Int32.MaxValue);\r\n                var exception = Assert.Throws<ArgumentException>(() => new SqlServerDistributedLock(storage, ''hello'', tooLargeTimeout));\r\n\r\n                Assert.Equal(''timeout'', exception.ParamName);\r\n            })", prediction=32, span="31-38"];
m3_12 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenTimeoutTooLarge()", file="SqlServerDistributedLockFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenTimeoutTooLarge()", span="29-29"];
m3_7 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="new SqlServerDistributedLock(null, ''hello'', _timeout)", span="23-23"];
m3_36 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_AcquiresExclusiveApplicationLock_OnSession()", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_AcquiresExclusiveApplicationLock_OnSession()", span="56-56"];
m3_37 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_AcquiresExclusiveApplicationLock_OnSession()", file="SqlServerDistributedLockFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // ReSharper disable once UnusedVariable\r\n                var storage = CreateStorage(sql);\r\n                using (new SqlServerDistributedLock(storage, ''hello'', _timeout))\r\n                {\r\n                    var lockMode = sql.Query<string>(\r\n                        ''select applock_mode('public', 'hello', 'session')'').Single();\r\n\r\n                    Assert.Equal(''Exclusive'', lockMode);\r\n                }\r\n            })", span="58-69"];
m3_38 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_AcquiresExclusiveApplicationLock_OnSession()", file="SqlServerDistributedLockFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_AcquiresExclusiveApplicationLock_OnSession()", span="56-56"];
m3_110 [cluster="Unk.NotNull", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.NotNull", span=""];
m3_59 [cluster="System.Threading.ManualResetEventSlim.Wait()", file="SqlServerDistributedLockFacts.cs", label="Entry System.Threading.ManualResetEventSlim.Wait()", span="0-0"];
m3_112 [cluster="Unk.Null", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.Null", span=""];
m3_56 [cluster="System.Threading.ManualResetEventSlim.ManualResetEventSlim(bool)", file="SqlServerDistributedLockFacts.cs", label="Entry System.Threading.ManualResetEventSlim.ManualResetEventSlim(bool)", span="0-0"];
m3_82 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="111-121"];
m3_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SqlServerDistributedLockFacts.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m3_8 [cluster="Unk.OnFeatureStart", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.OnFeatureStart", span=""];
m3_14 [cluster="HangFire.Tests.JobFetcherFeature.TestInitialize()", file="SqlServerDistributedLockFacts.cs", label="Entry HangFire.Tests.JobFetcherFeature.TestInitialize()", span="46-46"];
m3_15 [cluster="HangFire.Tests.JobFetcherFeature.TestInitialize()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''JobFetcher''))", prediction=33, span="48-49"];
m3_16 [cluster="HangFire.Tests.JobFetcherFeature.TestInitialize()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="HangFire.Tests.JobFetcherFeature.FeatureSetup(null)", prediction=34, span="51-51"];
m3_17 [cluster="HangFire.Tests.JobFetcherFeature.TestInitialize()", file="SqlServerDistributedLockFacts.cs", label="Exit HangFire.Tests.JobFetcherFeature.TestInitialize()", span="46-46"];
m3_23 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="new SqlServerDistributedLock(storage, ''hello'', tooLargeTimeout)", span="35-35"];
m3_18 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Assert.Equal(''timeout'', exception.ParamName)", span="37-37"];
m3_22 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="35-35"];
m3_19 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="31-38"];
m3_24 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="35-35"];
m3_28 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="44-52"];
m3_29 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="var storage = CreateStorage(connection)", span="46-46"];
m3_30 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerDistributedLock(storage, '''', _timeout))", span="48-49"];
m3_34 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="new SqlServerDistributedLock(storage, '''', _timeout)", span="49-49"];
m3_31 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Assert.Equal(''resource'', exception.ParamName)", span="51-51"];
m3_33 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="49-49"];
m3_32 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="44-52"];
m3_35 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="49-49"];
m3_39 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="58-69"];
m3_40 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="var storage = CreateStorage(sql)", span="61-61"];
m3_42 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="var lockMode = sql.Query<string>(\r\n                        ''select applock_mode('public', 'hello', 'session')'').Single()", span="64-65"];
m3_41 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="new SqlServerDistributedLock(storage, ''hello'', _timeout)", span="62-62"];
m3_43 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Assert.Equal(''Exclusive'', lockMode)", span="67-67"];
m3_44 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="58-69"];
m3_63 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="UseConnection(connection1 =>\r\n                {\r\n                    var storage = CreateStorage(connection1);\r\n                    using (new SqlServerDistributedLock(storage, ''exclusive'', _timeout))\r\n                    {\r\n                        lockAcquired.Set();\r\n                        releaseLock.Wait();\r\n                    }\r\n                })", span="79-87"];
m3_70 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="releaseLock.Wait()", span="85-85"];
m3_69 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="lockAcquired.Set()", span="84-84"];
m3_72 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="92-102"];
m3_62 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="79-87"];
m3_64 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="79-87"];
m3_66 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="79-87"];
m3_67 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="var storage = CreateStorage(connection1)", span="81-81"];
m3_68 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="new SqlServerDistributedLock(storage, ''exclusive'', _timeout)", span="82-82"];
m3_71 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="79-87"];
m3_73 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="var storage = CreateStorage(connection2)", span="94-94"];
m3_74 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Assert.Throws<DistributedLockTimeoutException>(\r\n                    () =>\r\n                    {\r\n                        using (new SqlServerDistributedLock(storage, ''exclusive'', _timeout))\r\n                        {\r\n                        }\r\n                    })", span="95-101"];
m3_77 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="new SqlServerDistributedLock(storage, ''exclusive'', _timeout)", span="98-98"];
m3_75 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="92-102"];
m3_76 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="96-101"];
m3_78 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="96-101"];
m3_83 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="var storage = CreateStorage(sql)", span="113-113"];
m3_86 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="var lockMode = sql.Query<string>(\r\n                    ''select applock_mode('public', 'hello', 'session')'').Single()", span="117-118"];
m3_84 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="var distributedLock = new SqlServerDistributedLock(storage, ''hello'', _timeout)", span="114-114"];
m3_85 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="distributedLock.Dispose()", span="115-115"];
m3_87 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Assert.Equal(''NoLock'', lockMode)", span="120-120"];
m3_88 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="111-121"];
m3_90 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.DistributedLocks_AreReEntrant_FromTheSameThread_OnTheSameResource()", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.DistributedLocks_AreReEntrant_FromTheSameThread_OnTheSameResource()", span="125-125"];
m3_91 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.DistributedLocks_AreReEntrant_FromTheSameThread_OnTheSameResource()", file="SqlServerDistributedLockFacts.cs", label="var storage = new SqlServerStorage(ConnectionUtils.GetConnectionString())", span="127-127"];
m3_92 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.DistributedLocks_AreReEntrant_FromTheSameThread_OnTheSameResource()", file="SqlServerDistributedLockFacts.cs", label="new SqlServerDistributedLock(storage, ''hello'', TimeSpan.FromMinutes(5))", span="129-129"];
m3_93 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.DistributedLocks_AreReEntrant_FromTheSameThread_OnTheSameResource()", file="SqlServerDistributedLockFacts.cs", label="new SqlServerDistributedLock(storage, ''hello'', TimeSpan.FromMinutes(5))", span="130-130"];
m3_94 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.DistributedLocks_AreReEntrant_FromTheSameThread_OnTheSameResource()", file="SqlServerDistributedLockFacts.cs", label="Assert.True(true)", span="132-132"];
m3_95 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.DistributedLocks_AreReEntrant_FromTheSameThread_OnTheSameResource()", file="SqlServerDistributedLockFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.DistributedLocks_AreReEntrant_FromTheSameThread_OnTheSameResource()", span="125-125"];
m3_45 [cluster="Unk.Single", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.Single", span=""];
m3_97 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", span="26-26"];
m3_99 [cluster="Unk.True", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.True", span=""];
m3_100 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.InnerDistributedLock_DoesNotConsumeADatabaseConnection()", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.InnerDistributedLock_DoesNotConsumeADatabaseConnection()", span="137-137"];
m3_101 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.InnerDistributedLock_DoesNotConsumeADatabaseConnection()", file="SqlServerDistributedLockFacts.cs", label="var storage = new SqlServerStorage(ConnectionUtils.GetConnectionString())", span="140-140"];
m3_102 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.InnerDistributedLock_DoesNotConsumeADatabaseConnection()", file="SqlServerDistributedLockFacts.cs", label="var outer = new SqlServerDistributedLock(storage, ''hello'', TimeSpan.FromMinutes(5))", span="143-143"];
m3_103 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.InnerDistributedLock_DoesNotConsumeADatabaseConnection()", file="SqlServerDistributedLockFacts.cs", label="var inner = new SqlServerDistributedLock(storage, ''hello'', TimeSpan.FromMinutes(5))", span="144-144"];
m3_106 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.InnerDistributedLock_DoesNotConsumeADatabaseConnection()", file="SqlServerDistributedLockFacts.cs", label="Assert.NotNull(field.GetValue(outer))", span="151-151"];
m3_104 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.InnerDistributedLock_DoesNotConsumeADatabaseConnection()", file="SqlServerDistributedLockFacts.cs", label="var field = typeof(SqlServerDistributedLock).GetField(''_connection'',\r\n                    BindingFlags.Instance | BindingFlags.NonPublic)", span="147-148"];
m3_107 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.InnerDistributedLock_DoesNotConsumeADatabaseConnection()", file="SqlServerDistributedLockFacts.cs", label="Assert.Null(field.GetValue(inner))", span="152-152"];
m3_105 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.InnerDistributedLock_DoesNotConsumeADatabaseConnection()", file="SqlServerDistributedLockFacts.cs", label="Assert.NotNull(field)", span="149-149"];
m3_108 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.InnerDistributedLock_DoesNotConsumeADatabaseConnection()", file="SqlServerDistributedLockFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.InnerDistributedLock_DoesNotConsumeADatabaseConnection()", span="137-137"];
m3_120 [cluster="Unk.action", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.action", span=""];
m3_46 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", span="73-73"];
m3_47 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs", label="var releaseLock = new ManualResetEventSlim(false)", span="75-75"];
m3_48 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs", label="var lockAcquired = new ManualResetEventSlim(false)", span="76-76"];
m3_49 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs", label="var thread = new Thread(\r\n                () => UseConnection(connection1 =>\r\n                {\r\n                    var storage = CreateStorage(connection1);\r\n                    using (new SqlServerDistributedLock(storage, ''exclusive'', _timeout))\r\n                    {\r\n                        lockAcquired.Set();\r\n                        releaseLock.Wait();\r\n                    }\r\n                }))", span="78-87"];
m3_53 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs", label="releaseLock.Set()", span="104-104"];
m3_51 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs", label="lockAcquired.Wait()", span="90-90"];
m3_50 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs", label="thread.Start()", span="88-88"];
m3_54 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs", label="thread.Join()", span="105-105"];
m3_52 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs", label="UseConnection(connection2 =>\r\n            {\r\n                var storage = CreateStorage(connection2);\r\n                Assert.Throws<DistributedLockTimeoutException>(\r\n                    () =>\r\n                    {\r\n                        using (new SqlServerDistributedLock(storage, ''exclusive'', _timeout))\r\n                        {\r\n                        }\r\n                    });\r\n            })", span="92-102"];
m3_55 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", span="73-73"];
m3_57 [cluster="System.Threading.Thread.Thread(System.Threading.ThreadStart)", file="SqlServerDistributedLockFacts.cs", label="Entry System.Threading.Thread.Thread(System.Threading.ThreadStart)", span="0-0"];
m3_115 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(DbConnection)", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(DbConnection)", span="85-85"];
m3_121 [file="SqlServerDistributedLockFacts.cs", label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts", span=""];
m3_122 [file="SqlServerDistributedLockFacts.cs", label=storage, span=""];
m3_123 [file="SqlServerDistributedLockFacts.cs", label=tooLargeTimeout, span=""];
m3_124 [file="SqlServerDistributedLockFacts.cs", label=storage, span=""];
m3_125 [file="SqlServerDistributedLockFacts.cs", label=releaseLock, span=""];
m3_126 [file="SqlServerDistributedLockFacts.cs", label=lockAcquired, span=""];
m3_127 [file="SqlServerDistributedLockFacts.cs", label=storage, span=""];
m4_0 [cluster="Hangfire.Core.Tests.BackgroundProcessContextMock.BackgroundProcessContextMock()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundProcessContextMock.BackgroundProcessContextMock()", span="11-11"];
m4_4 [cluster="Hangfire.Core.Tests.BackgroundProcessContextMock.BackgroundProcessContextMock()", file="TypeExtensionsFacts.cs", label="_context = new Lazy<BackgroundProcessContext>(\r\n                () => new BackgroundProcessContext(ServerId, Storage.Object, CancellationTokenSource.Token))", span="17-18"];
m4_5 [cluster="Hangfire.Core.Tests.BackgroundProcessContextMock.BackgroundProcessContextMock()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.BackgroundProcessContextMock.BackgroundProcessContextMock()", span="11-11"];
m4_8 [cluster="System.Lazy<T>.Lazy(System.Func<T>)", file="TypeExtensionsFacts.cs", label="Entry System.Lazy<T>.Lazy(System.Func<T>)", span="0-0"];
m4_12 [cluster="BackgroundProcessContext.cstr", file="TypeExtensionsFacts.cs", label="Entry BackgroundProcessContext.cstr", span=""];
m4_7 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="TypeExtensionsFacts.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0"];
m4_6 [cluster="Mock<JobStorage>.cstr", file="TypeExtensionsFacts.cs", label="Entry Mock<JobStorage>.cstr", span=""];
m4_9 [cluster="lambda expression", file="TypeExtensionsFacts.cs", label="Entry lambda expression", span="18-18"];
m4_10 [cluster="lambda expression", file="TypeExtensionsFacts.cs", label="new BackgroundProcessContext(ServerId, Storage.Object, CancellationTokenSource.Token)", span="18-18"];
m4_11 [cluster="lambda expression", file="TypeExtensionsFacts.cs", label="Exit lambda expression", span="18-18"];
m4_13 [file="TypeExtensionsFacts.cs", label="Hangfire.Core.Tests.BackgroundProcessContextMock", span=""];
m0_14 -> m0_19  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_14 -> m0_20  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_14 -> m0_21  [color=darkseagreen4, key=1, label="Hangfire.RecurringJobOptions", style=dashed];
m0_14 -> m0_22  [color=darkseagreen4, key=1, label="Hangfire.RecurringJobOptions", style=dashed];
m0_16 -> m0_16  [color=green, key=1, label="System.Threading.CancellationToken", style=dashed];
m0_2 -> m0_5  [color=green, key=1, label="HangFire.Server.ServerWatchdogOptions", style=dashed];
m0_13 -> m0_15  [color=green, key=1, label=serversRemoved, style=dashed];
m0_11 -> m0_16  [color=green, key=1, label="System.Threading.CancellationToken", style=dashed];
m1_0 -> m1_3  [color=green, key=1, label="System.Type", style=dashed];
m1_0 -> m1_4  [color=green, key=1, label="System.Type", style=dashed];
m1_6 -> m1_11  [color=green, key=1, label=jobId, style=dashed];
m1_24 -> m1_27  [color=green, key=1, label="System.Type", style=dashed];
m1_24 -> m1_28  [color=green, key=1, label="System.Type", style=dashed];
m1_24 -> m1_29  [color=green, key=1, label="System.TimeSpan", style=dashed];
m1_24 -> m1_32  [color=green, key=1, label="System.Type", style=dashed];
m1_29 -> m1_29  [color=green, key=1, label="System.TimeSpan", style=dashed];
m1_31 -> m1_31  [color=green, key=1, label="System.TimeSpan", style=dashed];
m1_33 -> m1_38  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m1_49 -> m1_53  [color=darkseagreen4, key=1, label=job, style=dashed];
m1_63 -> m1_10  [color=green, key=1, label="HangFire.Client.JobClient", style=dashed];
m1_63 -> m1_32  [color=green, key=1, label="HangFire.Client.JobClient", style=dashed];
m1_63 -> m1_37  [color=darkseagreen4, key=1, label="HangFire.Client.JobClient", style=dashed];
m1_63 -> m1_46  [color=darkseagreen4, key=1, label="HangFire.Client.JobClient", style=dashed];
m2_9 -> m2_19  [color=darkseagreen4, key=1, label=statistics, style=dashed];
m2_9 -> m2_27  [color=darkseagreen4, key=1, label=statistics, style=dashed];
m2_9 -> m2_33  [color=darkseagreen4, key=1, label=statistics, style=dashed];
m2_9 -> m2_39  [color=darkseagreen4, key=1, label=statistics, style=dashed];
m2_9 -> m2_45  [color=darkseagreen4, key=1, label=statistics, style=dashed];
m2_9 -> m2_51  [color=darkseagreen4, key=1, label=statistics, style=dashed];
m2_10 -> m2_15  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m2_15 -> m2_15  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m2_0 -> m2_3  [color=darkseagreen4, key=1, label="HangFire.States.IStateMachineFactory", style=dashed];
m2_26 -> m2_31  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_29 -> m2_31  [color=darkseagreen4, key=1, label=stateMachine, style=dashed];
m2_41 -> m2_11  [color=darkseagreen4, key=1, label="HangFire.Server.SchedulePoller", style=dashed];
m2_41 -> m2_12  [color=darkseagreen4, key=1, label="HangFire.Server.SchedulePoller", style=dashed];
m2_41 -> m2_13  [color=darkseagreen4, key=1, label="HangFire.Server.SchedulePoller", style=dashed];
m2_41 -> m2_14  [color=darkseagreen4, key=1, label="HangFire.Server.SchedulePoller", style=dashed];
m2_41 -> m2_15  [color=darkseagreen4, key=1, label="HangFire.Server.SchedulePoller", style=dashed];
m2_41 -> m2_16  [color=darkseagreen4, key=1, label="HangFire.Server.SchedulePoller", style=dashed];
m2_57 -> m2_59  [color=darkseagreen4, key=1, label=breadcrumb, style=dashed];
m2_59 -> m2_59  [color=darkseagreen4, key=1, label=breadcrumb, style=dashed];
m2_59 -> m2_61  [color=darkseagreen4, key=1, label=breadcrumb, style=dashed];
m2_61 -> m2_61  [color=darkseagreen4, key=1, label=breadcrumb, style=dashed];
m2_101 -> m2_1  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_2  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_3  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_4  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_8  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_10  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_11  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_12  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_13  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_14  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_15  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_16  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_17  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_18  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_19  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_20  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_21  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_22  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_23  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_27  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_28  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_31  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_32  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_33  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_34  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_35  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_36  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_37  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_38  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_39  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_40  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_41  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_42  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_43  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_44  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_45  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_46  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_47  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_48  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_49  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_50  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_51  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_52  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_53  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_54  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_55  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_56  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_57  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_58  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_59  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_60  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_61  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_62  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_63  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_64  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_65  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_66  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_67  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_68  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_69  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_70  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_71  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_72  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_73  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_74  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_75  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_76  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_77  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_78  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_79  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_80  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_81  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_82  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_84  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_86  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m2_101 -> m2_87  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.LayoutPage", style=dashed];
m3_26 -> m3_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_80 -> m3_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_65 -> m3_117  [color=darkseagreen4, key=1, label="System.Action<DbConnection>", style=dashed];
m3_1 -> m3_6  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_11 -> m3_14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_37 -> m3_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_15 -> m3_17  [color=darkseagreen4, key=1, label=storage, style=dashed];
m3_15 -> m3_23  [color=darkseagreen4, key=1, label=storage, style=dashed];
m3_16 -> m3_23  [color=darkseagreen4, key=1, label=tooLargeTimeout, style=dashed];
m3_17 -> m3_22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_29 -> m3_34  [color=darkseagreen4, key=1, label=storage, style=dashed];
m3_30 -> m3_33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_63 -> m3_66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_73 -> m3_77  [color=darkseagreen4, key=1, label=storage, style=dashed];
m3_74 -> m3_76  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_91 -> m3_93  [color=darkseagreen4, key=1, label=storage, style=dashed];
m3_102 -> m3_106  [color=darkseagreen4, key=1, label=outer, style=dashed];
m3_103 -> m3_107  [color=darkseagreen4, key=1, label=inner, style=dashed];
m3_104 -> m3_106  [color=darkseagreen4, key=1, label=field, style=dashed];
m3_104 -> m3_107  [color=darkseagreen4, key=1, label=field, style=dashed];
m3_47 -> m3_70  [color=darkseagreen4, key=1, label=releaseLock, style=dashed];
m3_47 -> m3_53  [color=darkseagreen4, key=1, label=releaseLock, style=dashed];
m3_48 -> m3_69  [color=darkseagreen4, key=1, label=lockAcquired, style=dashed];
m3_48 -> m3_51  [color=darkseagreen4, key=1, label=lockAcquired, style=dashed];
m3_49 -> m3_54  [color=darkseagreen4, key=1, label=thread, style=dashed];
m3_52 -> m3_72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_121 -> m3_7  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts", style=dashed];
m3_121 -> m3_34  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts", style=dashed];
m3_121 -> m3_41  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts", style=dashed];
m3_121 -> m3_68  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts", style=dashed];
m3_121 -> m3_74  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts", style=dashed];
m3_121 -> m3_77  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts", style=dashed];
m3_122 -> m3_23  [color=darkseagreen4, key=1, label=storage, style=dashed];
m3_123 -> m3_23  [color=darkseagreen4, key=1, label=tooLargeTimeout, style=dashed];
m3_124 -> m3_34  [color=darkseagreen4, key=1, label=storage, style=dashed];
m3_125 -> m3_70  [color=darkseagreen4, key=1, label=releaseLock, style=dashed];
m3_126 -> m3_69  [color=darkseagreen4, key=1, label=lockAcquired, style=dashed];
m3_127 -> m3_77  [color=darkseagreen4, key=1, label=storage, style=dashed];
m4_13 -> m4_10  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundProcessContextMock", style=dashed];
}
