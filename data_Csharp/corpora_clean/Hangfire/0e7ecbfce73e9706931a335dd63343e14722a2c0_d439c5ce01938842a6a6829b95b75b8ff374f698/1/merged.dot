digraph  {
n0 [label="Entry HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", span="11-11", cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()"];
n1 [label="Assert.Throws<ArgumentNullException>(\r\n                () => new FailedState(null))", span="13-14", cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()"];
n2 [label="Exit HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", span="11-11", cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()"];
n3 [label="Entry Unk.>", span="", cluster="Unk.>"];
n4 [label="Entry lambda expression", span="14-14", cluster="lambda expression"];
n5 [label="new FailedState(null)", span="14-14", cluster="lambda expression"];
n6 [label="Exit lambda expression", span="14-14", cluster="lambda expression"];
n7 [label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="27-27", cluster="HangFire.States.FailedState.FailedState(System.Exception)"];
n8 [label="Entry HangFire.Core.Tests.States.FailedStateFacts.Ctor_SetsAllProperties()", span="18-18", cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_SetsAllProperties()"];
n9 [label="var exception = new Exception()", span="20-20", cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_SetsAllProperties()"];
n10 [label="var state = new FailedState(exception)", span="21-21", cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_SetsAllProperties()"];
n13 [label="Entry System.Exception.Exception()", span="0-0", cluster="System.Exception.Exception()"];
n11 [label="state.Exception.Should().BeSameAs(exception)", span="23-23", cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_SetsAllProperties()"];
n12 [label="Exit HangFire.Core.Tests.States.FailedStateFacts.Ctor_SetsAllProperties()", span="18-18", cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_SetsAllProperties()"];
n14 [label="Entry Unk.Should", span="", cluster="Unk.Should"];
n15 [label="Entry Unk.BeSameAs", span="", cluster="Unk.BeSameAs"];
n16 [label="Entry HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", span="27-27", cluster="HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()"];
n17 [label="var state = new FailedState(new Exception())", span="29-29", cluster="HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()"];
n18 [label="state.StateName.Should().Be(FailedState.Name)", span="31-31", cluster="HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()"];
n19 [label="Exit HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", span="27-27", cluster="HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()"];
n20 [label="Entry Unk.Be", span="", cluster="Unk.Be"];
n21 [label="Entry HangFire.Core.Tests.States.FailedStateFacts.GetProperties_ReturnsCorrectProperties()", span="35-35", cluster="HangFire.Core.Tests.States.FailedStateFacts.GetProperties_ReturnsCorrectProperties()"];
n22 [label="var state = new FailedState(new Exception(''Message''))", span="37-37", cluster="HangFire.Core.Tests.States.FailedStateFacts.GetProperties_ReturnsCorrectProperties()"];
n23 [label="var properties = state.GetProperties(null)", span="38-38", cluster="HangFire.Core.Tests.States.FailedStateFacts.GetProperties_ReturnsCorrectProperties()"];
n26 [label="Entry System.Exception.Exception(string)", span="0-0", cluster="System.Exception.Exception(string)"];
n24 [label="DictionaryAssert.ContainsFollowingItems(\r\n                new Dictionary<string, string>\r\n                {\r\n                    { ''FailedAt'', ''<UtcNow timestamp>'' },\r\n                    { ''ExceptionType'', ''System.Exception'' },\r\n                    { ''ExceptionMessage'', ''Message'' },\r\n                    { ''ExceptionDetails'', ''<Non-empty>'' }\r\n                }, \r\n                properties)", span="40-48", cluster="HangFire.Core.Tests.States.FailedStateFacts.GetProperties_ReturnsCorrectProperties()"];
n27 [label="Entry HangFire.States.FailedState.GetProperties(HangFire.Common.JobMethod)", span="37-37", cluster="HangFire.States.FailedState.GetProperties(HangFire.Common.JobMethod)"];
n25 [label="Exit HangFire.Core.Tests.States.FailedStateFacts.GetProperties_ReturnsCorrectProperties()", span="35-35", cluster="HangFire.Core.Tests.States.FailedStateFacts.GetProperties_ReturnsCorrectProperties()"];
n28 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()"];
n29 [label="Entry HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", span="9-9", cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)"];
m0_268 [label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", span="452-452", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="BackgroundProcessContext.cs"];
m0_269 [label="var serializedHistory = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="454-455", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="BackgroundProcessContext.cs"];
m0_272 [label="i < table.RowCount", span="458-458", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="BackgroundProcessContext.cs"];
m0_273 [label="Assert.AreEqual(table.Rows[i][''State''], history[i][''State''])", span="460-460", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="BackgroundProcessContext.cs"];
m0_270 [label="var history = serializedHistory.Select(JobHelper.FromJson<Dictionary<string, string>>).ToList()", span="456-456", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="BackgroundProcessContext.cs"];
m0_271 [label="var i = 0", span="458-458", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="BackgroundProcessContext.cs"];
m0_274 [label="i++", span="458-458", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="BackgroundProcessContext.cs"];
m0_275 [label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", span="452-452", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="BackgroundProcessContext.cs"];
m0_0 [label="Entry HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="43-43", cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="BackgroundProcessContext.cs"];
m0_7 [label="Exit HangFire.Tests.States.StateSteps.GivenTheFailedState()", span="49-49", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="BackgroundProcessContext.cs"];
m0_8 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="BackgroundProcessContext.cs"];
m0_9 [label="Properties = new Dictionary<string, object>(properties, StringComparer.OrdinalIgnoreCase)", span="37-37", cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Collections.Generic.IDictionary<string, object>, System.Threading.CancellationToken)", file="BackgroundProcessContext.cs"];
m0_10 [label="Entry HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="59-59", cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="BackgroundProcessContext.cs"];
m0_5 [label="_failedException = new InvalidOperationException(''Hello'')", span="51-51", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="BackgroundProcessContext.cs"];
m0_1 [label="_state = new SucceededState { Reason = ''SomeReason'' }", span="45-45", cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="BackgroundProcessContext.cs"];
m0_3 [label="Entry HangFire.States.SucceededState.SucceededState()", span="23-23", cluster="HangFire.States.SucceededState.SucceededState()", file="BackgroundProcessContext.cs"];
m0_6 [label="_state = new FailedState(_failedException)\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="52-55", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="BackgroundProcessContext.cs"];
m0_2 [label="Exit HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="43-43", cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="BackgroundProcessContext.cs"];
m0_4 [label="Entry HangFire.Tests.States.StateSteps.GivenTheFailedState()", span="49-49", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="BackgroundProcessContext.cs"];
m0_11 [label="_state = new ProcessingState(''TestServer'')\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="61-64", cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="BackgroundProcessContext.cs"];
m0_176 [label="Entry HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="311-311", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="BackgroundProcessContext.cs"];
m0_177 [label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:processing'', JobSteps.DefaultJobId)", span="313-313", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="BackgroundProcessContext.cs"];
m0_178 [label="var timestamp = JobHelper.FromTimestamp((long)score)", span="314-314", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="BackgroundProcessContext.cs"];
m0_179 [label="Assert.IsTrue(timestamp > DateTime.UtcNow.AddSeconds(-1))", span="316-316", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="BackgroundProcessContext.cs"];
m0_180 [label="Assert.IsTrue(timestamp < DateTime.UtcNow.AddSeconds(1))", span="317-317", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="BackgroundProcessContext.cs"];
m0_181 [label="Exit HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="311-311", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="BackgroundProcessContext.cs"];
m0_160 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="286-286", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="BackgroundProcessContext.cs"];
m0_161 [label="Assert.AreEqual(1, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="288-288", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="BackgroundProcessContext.cs"];
m0_162 [label="Assert.IsTrue(Redis.Client.SortedSetContainsItem(''hangfire:failed'', JobSteps.DefaultJobId))", span="289-289", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="BackgroundProcessContext.cs"];
m0_163 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="286-286", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="BackgroundProcessContext.cs"];
m0_114 [label="Entry HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", span="203-203", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", file="BackgroundProcessContext.cs"];
m0_115 [label="var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="206-207", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", file="BackgroundProcessContext.cs"];
m0_116 [label="stateMachine.ChangeState(JobSteps.DefaultJobId, _stateMocks[state].Object, allowedState)", span="208-208", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", file="BackgroundProcessContext.cs"];
m0_117 [label="Exit HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", span="203-203", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", file="BackgroundProcessContext.cs"];
m0_19 [label="Entry HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", span="77-77", cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", file="BackgroundProcessContext.cs"];
m0_20 [label="_state = new EnqueuedState\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="79-82", cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", file="BackgroundProcessContext.cs"];
m0_21 [label="Exit HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", span="77-77", cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", file="BackgroundProcessContext.cs"];
m0_185 [label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="321-321", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="BackgroundProcessContext.cs"];
m0_186 [label="Assert.IsTrue(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="323-323", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="BackgroundProcessContext.cs"];
m0_187 [label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:schedule'', JobSteps.DefaultJobId)", span="324-324", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="BackgroundProcessContext.cs"];
m0_188 [label="var timestamp = JobHelper.FromTimestamp((long) score)", span="325-325", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="BackgroundProcessContext.cs"];
m0_189 [label="Assert.IsTrue(timestamp >= DateTime.UtcNow.Date.AddDays(1))", span="327-327", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="BackgroundProcessContext.cs"];
m0_190 [label="Assert.IsTrue(timestamp < DateTime.UtcNow.Date.AddDays(2))", span="328-328", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="BackgroundProcessContext.cs"];
m0_191 [label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="321-321", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="BackgroundProcessContext.cs"];
m0_121 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="BackgroundProcessContext.cs"];
m0_175 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse", file="BackgroundProcessContext.cs"];
m0_72 [label="Entry HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", span="124-124", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="BackgroundProcessContext.cs"];
m0_73 [label="Given(String.Format(''a '{0}' state'', state))", span="126-126", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="BackgroundProcessContext.cs"];
m0_74 [label="_filters.Add(\r\n                new TestStateChangingFilter(name, _stateChangingResults, _stateMocks[state].Object))", span="128-129", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="BackgroundProcessContext.cs"];
m0_75 [label="Exit HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", span="124-124", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="BackgroundProcessContext.cs"];
m0_221 [label="Entry HangFire.Tests.States.StateSteps.ThenTheStateWasNotAppliedToTheJob(string)", span="381-381", cluster="HangFire.Tests.States.StateSteps.ThenTheStateWasNotAppliedToTheJob(string)", file="BackgroundProcessContext.cs"];
m0_222 [label="Assert.Inconclusive(''Re-write this test for the corresponding handler'')", span="386-386", cluster="HangFire.Tests.States.StateSteps.ThenTheStateWasNotAppliedToTheJob(string)", file="BackgroundProcessContext.cs"];
m0_223 [label="Exit HangFire.Tests.States.StateSteps.ThenTheStateWasNotAppliedToTheJob(string)", span="381-381", cluster="HangFire.Tests.States.StateSteps.ThenTheStateWasNotAppliedToTheJob(string)", file="BackgroundProcessContext.cs"];
m0_113 [label="Entry Unk.ChangeState", span="", cluster="Unk.ChangeState", file="BackgroundProcessContext.cs"];
m0_231 [label="Entry Unk.Unapply", span="", cluster="Unk.Unapply", file="BackgroundProcessContext.cs"];
m0_126 [label="Entry Unk.ForEach", span="", cluster="Unk.ForEach", file="BackgroundProcessContext.cs"];
m0_217 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="BackgroundProcessContext.cs"];
m0_48 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="BackgroundProcessContext.cs"];
m0_192 [label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="332-332", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="BackgroundProcessContext.cs"];
m0_193 [label="Assert.IsFalse(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="334-334", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="BackgroundProcessContext.cs"];
m0_194 [label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="332-332", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="BackgroundProcessContext.cs"];
m0_159 [label="Entry HangFire.Tests.TableAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", span="8-8", cluster="HangFire.Tests.TableAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", file="BackgroundProcessContext.cs"];
m0_90 [label="Entry HangFire.Common.States.StateContext.StateContext(string, HangFire.Common.JobMethod)", span="27-27", cluster="HangFire.Common.States.StateContext.StateContext(string, HangFire.Common.JobMethod)", file="BackgroundProcessContext.cs"];
m0_257 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="BackgroundProcessContext.cs"];
m0_241 [label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", span="405-405", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="BackgroundProcessContext.cs"];
m0_242 [label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="407-408", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="BackgroundProcessContext.cs"];
m0_243 [label="Assert.IsNotNull(entry)", span="409-409", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="BackgroundProcessContext.cs"];
m0_244 [label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="411-411", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="BackgroundProcessContext.cs"];
m0_245 [label="Assert.IsNotNull(history, entry)", span="412-412", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="BackgroundProcessContext.cs"];
m0_247 [label="Assert.IsTrue(history.ContainsKey(property.Key))", span="416-416", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="BackgroundProcessContext.cs"];
m0_248 [label="Assert.AreEqual(property.Value, history[property.Key])", span="417-417", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="BackgroundProcessContext.cs"];
m0_246 [label=_stateProperties, span="414-414", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="BackgroundProcessContext.cs"];
m0_249 [label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", span="405-405", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="BackgroundProcessContext.cs"];
m0_12 [label="Exit HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="59-59", cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="BackgroundProcessContext.cs"];
m0_144 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="253-253", cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="BackgroundProcessContext.cs"];
m0_145 [label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="255-260", cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="BackgroundProcessContext.cs"];
m0_146 [label="keys.ForEach(x =>\r\n            {\r\n                var ttl = Redis.Client.GetTimeToLive(x);\r\n                Assert.IsTrue(\r\n                    ttl.Seconds == -1,\r\n                    ''TTL for the '{0}' key is '{1}''', x, ttl);\r\n            })", span="262-268", cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="BackgroundProcessContext.cs"];
m0_147 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="253-253", cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="BackgroundProcessContext.cs"];
m0_143 [label="Entry Unk.PopItemFromList", span="", cluster="Unk.PopItemFromList", file="BackgroundProcessContext.cs"];
m0_158 [label="Entry HangFire.Common.States.JobState.GetProperties(HangFire.Common.JobMethod)", span="26-26", cluster="HangFire.Common.States.JobState.GetProperties(HangFire.Common.JobMethod)", file="BackgroundProcessContext.cs"];
m0_76 [label="Entry TestStateChangingFilter.cstr", span="", cluster="TestStateChangingFilter.cstr", file="BackgroundProcessContext.cs"];
m0_13 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", file="BackgroundProcessContext.cs"];
m0_29 [label="Entry Mock<JobState>.cstr", span="", cluster="Mock<JobState>.cstr", file="BackgroundProcessContext.cs"];
m0_250 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="BackgroundProcessContext.cs"];
m0_22 [label="Entry HangFire.States.EnqueuedState.EnqueuedState()", span="25-25", cluster="HangFire.States.EnqueuedState.EnqueuedState()", file="BackgroundProcessContext.cs"];
m0_118 [label="Entry HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="212-212", cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="BackgroundProcessContext.cs"];
m0_119 [label="Assert.AreEqual(name, _state.StateName)", span="214-214", cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="BackgroundProcessContext.cs"];
m0_120 [label="Exit HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="212-212", cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="BackgroundProcessContext.cs"];
m0_67 [label="Entry HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", span="118-118", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", file="BackgroundProcessContext.cs"];
m0_68 [label="_filters.Add(new TestStateChangingFilter(name, _stateChangingResults))", span="120-120", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", file="BackgroundProcessContext.cs"];
m0_69 [label="Exit HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", span="118-118", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", file="BackgroundProcessContext.cs"];
m0_18 [label="Hangfire.Server.BackgroundProcessContext", span="", cluster="System.DateTime.AddDays(double)", file="BackgroundProcessContext.cs"];
m0_87 [label="Entry RedisWriteOnlyTransaction.cstr", span="", cluster="RedisWriteOnlyTransaction.cstr", file="BackgroundProcessContext.cs"];
m0_41 [label="Entry Unk.GetProperties", span="", cluster="Unk.GetProperties", file="BackgroundProcessContext.cs"];
m0_224 [label="Entry HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", span="390-390", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", file="BackgroundProcessContext.cs"];
m0_225 [label="_oldStateDescriptorMock.Verify(\r\n                x => x.Unapply(It.Is<StateApplyingContext>(y => y.JobId == JobSteps.DefaultJobId)))", span="392-393", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", file="BackgroundProcessContext.cs"];
m0_226 [label="Exit HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", span="390-390", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", file="BackgroundProcessContext.cs"];
m0_256 [label="Exit HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", span="422-422", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="BackgroundProcessContext.cs"];
m0_251 [label="Entry HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", span="422-422", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="BackgroundProcessContext.cs"];
m0_252 [label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="424-425", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="BackgroundProcessContext.cs"];
m0_253 [label=_stateProperties, span="427-427", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="BackgroundProcessContext.cs"];
m0_254 [label="Assert.IsTrue(stateEntry.ContainsKey(property.Key))", span="429-429", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="BackgroundProcessContext.cs"];
m0_255 [label="Assert.AreEqual(property.Value, stateEntry[property.Key])", span="430-430", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="BackgroundProcessContext.cs"];
m0_81 [label="Entry HangFire.Tests.States.StateSteps.WhenIApplyIt()", span="139-139", cluster="HangFire.Tests.States.StateSteps.WhenIApplyIt()", file="BackgroundProcessContext.cs"];
m0_82 [label="var transaction = \r\n                new RedisWriteOnlyTransaction(Redis.Client.CreateTransaction())", span="141-142", cluster="HangFire.Tests.States.StateSteps.WhenIApplyIt()", file="BackgroundProcessContext.cs"];
m0_83 [label="var context = new StateApplyingContext(\r\n                    new StateContext(JobSteps.DefaultJobId, _defaultData),\r\n                    transaction)", span="144-146", cluster="HangFire.Tests.States.StateSteps.WhenIApplyIt()", file="BackgroundProcessContext.cs"];
m0_85 [label="transaction.Commit()", span="151-151", cluster="HangFire.Tests.States.StateSteps.WhenIApplyIt()", file="BackgroundProcessContext.cs"];
m0_84 [label="Assert.Inconclusive(''Re-write this test for the corresponding handler'')", span="149-149", cluster="HangFire.Tests.States.StateSteps.WhenIApplyIt()", file="BackgroundProcessContext.cs"];
m0_86 [label="Exit HangFire.Tests.States.StateSteps.WhenIApplyIt()", span="139-139", cluster="HangFire.Tests.States.StateSteps.WhenIApplyIt()", file="BackgroundProcessContext.cs"];
m0_91 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.Commit()", span="32-32", cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="BackgroundProcessContext.cs"];
m0_258 [label="Entry HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", span="435-435", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="BackgroundProcessContext.cs"];
m0_259 [label="Assert.AreEqual(table.RowCount, _stateChangingResults.Count)", span="437-437", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="BackgroundProcessContext.cs"];
m0_261 [label="i < table.RowCount", span="439-439", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="BackgroundProcessContext.cs"];
m0_262 [label="Assert.AreEqual(table.Rows[i][''Filter''], _stateChangingResults[i])", span="441-441", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="BackgroundProcessContext.cs"];
m0_260 [label="var i = 0", span="439-439", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="BackgroundProcessContext.cs"];
m0_263 [label="i++", span="439-439", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="BackgroundProcessContext.cs"];
m0_264 [label="Exit HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", span="435-435", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="BackgroundProcessContext.cs"];
m0_238 [label="Entry lambda expression", span="400-400", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_34 [label="Entry lambda expression", span="89-89", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_37 [label="Entry lambda expression", span="90-90", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_35 [label="x.StateName", span="89-89", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_36 [label="Exit lambda expression", span="89-89", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_38 [label="x.GetProperties(It.IsAny<JobMethod>())", span="90-90", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_39 [label="Exit lambda expression", span="90-90", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_50 [label="Entry lambda expression", span="101-101", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_53 [label="Entry lambda expression", span="101-101", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_56 [label="Entry lambda expression", span="102-102", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_51 [label="x[''Name'']", span="101-101", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_52 [label="Exit lambda expression", span="101-101", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_54 [label="x[''Value'']", span="101-101", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_55 [label="Exit lambda expression", span="101-101", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_57 [label="x.GetProperties(It.IsAny<JobMethod>())", span="102-102", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_58 [label="Exit lambda expression", span="102-102", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_127 [label="Entry lambda expression", span="227-233", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_128 [label="var ttl = Redis.Client.GetTimeToLive(x)", span="229-229", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_129 [label="Assert.IsTrue(\r\n                        ttl.TotalSeconds > 0,\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl)", span="230-232", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_130 [label="Exit lambda expression", span="227-233", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_148 [label="Entry lambda expression", span="262-268", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_149 [label="var ttl = Redis.Client.GetTimeToLive(x)", span="264-264", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_150 [label="Assert.IsTrue(\r\n                    ttl.Seconds == -1,\r\n                    ''TTL for the '{0}' key is '{1}''', x, ttl)", span="265-267", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_151 [label="Exit lambda expression", span="262-268", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_228 [label="Entry lambda expression", span="393-393", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_229 [label="x.Unapply(It.Is<StateApplyingContext>(y => y.JobId == JobSteps.DefaultJobId))", span="393-393", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_230 [label="Exit lambda expression", span="393-393", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_232 [label="Entry lambda expression", span="393-393", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_233 [label="y.JobId == JobSteps.DefaultJobId", span="393-393", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_234 [label="Exit lambda expression", span="393-393", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_239 [label="x.Unapply(It.IsAny<StateApplyingContext>())", span="400-400", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_240 [label="Exit lambda expression", span="400-400", cluster="lambda expression", file="BackgroundProcessContext.cs"];
m0_198 [label="Entry Unk.SetContainsItem", span="", cluster="Unk.SetContainsItem", file="BackgroundProcessContext.cs"];
m0_59 [label="Entry HangFire.Tests.States.StateSteps.GivenAJobInTheStateWithRegisteredDescriptor()", span="107-107", cluster="HangFire.Tests.States.StateSteps.GivenAJobInTheStateWithRegisteredDescriptor()", file="BackgroundProcessContext.cs"];
m0_60 [label="Given(''a job'')", span="109-109", cluster="HangFire.Tests.States.StateSteps.GivenAJobInTheStateWithRegisteredDescriptor()", file="BackgroundProcessContext.cs"];
m0_61 [label="Given(''its state is Old'')", span="110-110", cluster="HangFire.Tests.States.StateSteps.GivenAJobInTheStateWithRegisteredDescriptor()", file="BackgroundProcessContext.cs"];
m0_62 [label="_oldStateDescriptorMock = new Mock<JobStateHandler>()", span="112-112", cluster="HangFire.Tests.States.StateSteps.GivenAJobInTheStateWithRegisteredDescriptor()", file="BackgroundProcessContext.cs"];
m0_63 [label="Assert.Inconclusive(''Rewrite'')", span="114-114", cluster="HangFire.Tests.States.StateSteps.GivenAJobInTheStateWithRegisteredDescriptor()", file="BackgroundProcessContext.cs"];
m0_64 [label="Exit HangFire.Tests.States.StateSteps.GivenAJobInTheStateWithRegisteredDescriptor()", span="107-107", cluster="HangFire.Tests.States.StateSteps.GivenAJobInTheStateWithRegisteredDescriptor()", file="BackgroundProcessContext.cs"];
m0_70 [label="Entry HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", span="14-14", cluster="HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", file="BackgroundProcessContext.cs"];
m0_278 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="BackgroundProcessContext.cs"];
m0_172 [label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="305-305", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="BackgroundProcessContext.cs"];
m0_173 [label="Assert.IsFalse(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="307-307", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="BackgroundProcessContext.cs"];
m0_174 [label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="305-305", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="BackgroundProcessContext.cs"];
m0_31 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="BackgroundProcessContext.cs"];
m0_102 [label="Entry HangFire.Redis.RedisConnection.RedisConnection(HangFire.Redis.RedisStorage, IRedisClient)", span="15-15", cluster="HangFire.Redis.RedisConnection.RedisConnection(HangFire.Redis.RedisStorage, IRedisClient)", file="BackgroundProcessContext.cs"];
m0_33 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="BackgroundProcessContext.cs"];
m0_88 [label="Entry Unk.CreateTransaction", span="", cluster="Unk.CreateTransaction", file="BackgroundProcessContext.cs"];
m0_101 [label="Entry HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", span="41-41", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="BackgroundProcessContext.cs"];
m0_104 [label="Entry HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", span="186-186", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", file="BackgroundProcessContext.cs"];
m0_105 [label="When(String.Format(\r\n                ''I change the state of the '{0}' job to the '{1}''',\r\n                JobSteps.DefaultJobId,\r\n                state))", span="188-191", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", file="BackgroundProcessContext.cs"];
m0_106 [label="Exit HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", span="186-186", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", file="BackgroundProcessContext.cs"];
m0_131 [label="Entry Unk.GetTimeToLive", span="", cluster="Unk.GetTimeToLive", file="BackgroundProcessContext.cs"];
m0_71 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="BackgroundProcessContext.cs"];
m0_77 [label="Entry HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", span="133-133", cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="BackgroundProcessContext.cs"];
m0_78 [label="_filters.Add(new TestStateChangedFilter(name, _stateAppliedResults))", span="135-135", cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="BackgroundProcessContext.cs"];
m0_79 [label="Exit HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", span="133-133", cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="BackgroundProcessContext.cs"];
m0_42 [label="Entry HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", span="97-97", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="BackgroundProcessContext.cs"];
m0_43 [label="Given(String.Format(''a '{0}' state'', state))", span="99-99", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="BackgroundProcessContext.cs"];
m0_44 [label="_stateProperties = table.Rows.ToDictionary(x => x[''Name''], x => x[''Value''])", span="101-101", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="BackgroundProcessContext.cs"];
m0_45 [label="_stateMocks[state].Setup(x => x.GetProperties(It.IsAny<JobMethod>()))\r\n                .Returns(_stateProperties)", span="102-103", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="BackgroundProcessContext.cs"];
m0_46 [label="Exit HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", span="97-97", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="BackgroundProcessContext.cs"];
m0_235 [label="Entry HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", span="397-397", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", file="BackgroundProcessContext.cs"];
m0_236 [label="_oldStateDescriptorMock.Verify(\r\n                x => x.Unapply(It.IsAny<StateApplyingContext>()),\r\n                Times.Never)", span="399-401", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", file="BackgroundProcessContext.cs"];
m0_237 [label="Exit HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", span="397-397", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", file="BackgroundProcessContext.cs"];
m0_216 [label="Entry Unk.RemoveStartFromList", span="", cluster="Unk.RemoveStartFromList", file="BackgroundProcessContext.cs"];
m0_199 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="344-344", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="BackgroundProcessContext.cs"];
m0_200 [label="var job = Redis.Client.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId))", span="346-346", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="BackgroundProcessContext.cs"];
m0_201 [label="Assert.AreEqual(state, job[''State''])", span="347-347", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="BackgroundProcessContext.cs"];
m0_202 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="344-344", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="BackgroundProcessContext.cs"];
m0_65 [label="Entry Mock<JobStateHandler>.cstr", span="", cluster="Mock<JobStateHandler>.cstr", file="BackgroundProcessContext.cs"];
m0_133 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="237-237", cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="BackgroundProcessContext.cs"];
m0_134 [label="Assert.AreEqual(\r\n                changeType == ''increase'' ? ''1'' : ''0'',\r\n                Redis.Client.GetValue(String.Format(''hangfire:stats:succeeded'')))", span="239-241", cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="BackgroundProcessContext.cs"];
m0_135 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="237-237", cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="BackgroundProcessContext.cs"];
m0_80 [label="Entry HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", span="14-14", cluster="HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", file="BackgroundProcessContext.cs"];
m0_265 [label="Entry HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", span="446-446", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="BackgroundProcessContext.cs"];
m0_266 [label="Assert.AreEqual(0, _stateChangingResults.Count)", span="448-448", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="BackgroundProcessContext.cs"];
m0_267 [label="Exit HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", span="446-446", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="BackgroundProcessContext.cs"];
m0_23 [label="Entry HangFire.Tests.States.StateSteps.GivenAState(string)", span="86-86", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="BackgroundProcessContext.cs"];
m0_24 [label="var mock = new Mock<JobState>()", span="88-88", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="BackgroundProcessContext.cs"];
m0_25 [label="mock.Setup(x => x.StateName).Returns(state)", span="89-89", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="BackgroundProcessContext.cs"];
m0_27 [label="_stateMocks.Add(state, mock)", span="93-93", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="BackgroundProcessContext.cs"];
m0_26 [label="mock.Setup(x => x.GetProperties(It.IsAny<JobMethod>()))\r\n                .Returns(new Dictionary<string, string>())", span="90-91", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="BackgroundProcessContext.cs"];
m0_28 [label="Exit HangFire.Tests.States.StateSteps.GivenAState(string)", span="86-86", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="BackgroundProcessContext.cs"];
m0_30 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="BackgroundProcessContext.cs"];
m0_14 [label="Entry Hangfire.Server.BackgroundProcessContext.Wait(System.TimeSpan)", span="57-57", cluster="Hangfire.Server.BackgroundProcessContext.Wait(System.TimeSpan)", file="BackgroundProcessContext.cs"];
m0_15 [label="CancellationToken.WaitHandle.WaitOne(timeout)", span="59-59", cluster="Hangfire.Server.BackgroundProcessContext.Wait(System.TimeSpan)", file="BackgroundProcessContext.cs", color=green, community=0];
m0_16 [label="Exit Hangfire.Server.BackgroundProcessContext.Wait(System.TimeSpan)", span="57-57", cluster="Hangfire.Server.BackgroundProcessContext.Wait(System.TimeSpan)", file="BackgroundProcessContext.cs"];
m0_218 [label="Entry HangFire.Tests.States.StateSteps.ThenApplyMethodHasCalled(string)", span="372-372", cluster="HangFire.Tests.States.StateSteps.ThenApplyMethodHasCalled(string)", file="BackgroundProcessContext.cs"];
m0_219 [label="Assert.Inconclusive(''Re-write this test for the corresponding handler'')", span="377-377", cluster="HangFire.Tests.States.StateSteps.ThenApplyMethodHasCalled(string)", file="BackgroundProcessContext.cs"];
m0_220 [label="Exit HangFire.Tests.States.StateSteps.ThenApplyMethodHasCalled(string)", span="372-372", cluster="HangFire.Tests.States.StateSteps.ThenApplyMethodHasCalled(string)", file="BackgroundProcessContext.cs"];
m0_195 [label="Entry HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="338-338", cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="BackgroundProcessContext.cs"];
m0_196 [label="Assert.IsTrue(Redis.Client.SetContainsItem(''hangfire:queues'', queue))", span="340-340", cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="BackgroundProcessContext.cs"];
m0_197 [label="Exit HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="338-338", cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="BackgroundProcessContext.cs"];
m0_17 [label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0", cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="BackgroundProcessContext.cs"];
m0_169 [label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="299-299", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="BackgroundProcessContext.cs"];
m0_170 [label="Assert.IsTrue(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="301-301", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="BackgroundProcessContext.cs"];
m0_171 [label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="299-299", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="BackgroundProcessContext.cs"];
m0_164 [label="Entry Unk.GetSortedSetCount", span="", cluster="Unk.GetSortedSetCount", file="BackgroundProcessContext.cs"];
m0_227 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="BackgroundProcessContext.cs"];
m0_138 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="245-245", cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="BackgroundProcessContext.cs"];
m0_139 [label="Assert.AreEqual(1, Redis.Client.GetListCount(''hangfire:succeeded''))", span="247-247", cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="BackgroundProcessContext.cs"];
m0_140 [label="Assert.AreEqual(JobSteps.DefaultJobId, Redis.Client.PopItemFromList(\r\n                ''hangfire:succeeded''))", span="248-249", cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="BackgroundProcessContext.cs"];
m0_141 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="245-245", cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="BackgroundProcessContext.cs"];
m0_166 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="293-293", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="BackgroundProcessContext.cs"];
m0_167 [label="Assert.AreEqual(0, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="295-295", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="BackgroundProcessContext.cs"];
m0_168 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="293-293", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="BackgroundProcessContext.cs"];
m0_207 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="351-351", cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="BackgroundProcessContext.cs"];
m0_204 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="351-351", cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="BackgroundProcessContext.cs"];
m0_205 [label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="353-354", cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="BackgroundProcessContext.cs"];
m0_206 [label="TableAssert.ContainsFollowingItems(table, stateEntry)", span="355-355", cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="BackgroundProcessContext.cs"];
m0_165 [label="Entry Unk.SortedSetContainsItem", span="", cluster="Unk.SortedSetContainsItem", file="BackgroundProcessContext.cs"];
m0_107 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="BackgroundProcessContext.cs"];
m0_184 [label="Entry System.DateTime.AddSeconds(double)", span="0-0", cluster="System.DateTime.AddSeconds(double)", file="BackgroundProcessContext.cs"];
m0_136 [label="Entry string.Format(string, params object[])", span="0-0", cluster="string.Format(string, params object[])", file="BackgroundProcessContext.cs"];
m0_122 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="218-218", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="BackgroundProcessContext.cs"];
m0_123 [label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="220-225", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="BackgroundProcessContext.cs"];
m0_124 [label="keys.ForEach(x =>\r\n                {\r\n                    var ttl = Redis.Client.GetTimeToLive(x);\r\n                    Assert.IsTrue(\r\n                        ttl.TotalSeconds > 0,\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl);\r\n                })", span="227-233", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="BackgroundProcessContext.cs"];
m0_125 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="218-218", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="BackgroundProcessContext.cs"];
m0_49 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="BackgroundProcessContext.cs"];
m0_132 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="BackgroundProcessContext.cs"];
m0_203 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash", file="BackgroundProcessContext.cs"];
m0_183 [label="Entry HangFire.Common.JobHelper.FromTimestamp(long)", span="41-41", cluster="HangFire.Common.JobHelper.FromTimestamp(long)", file="BackgroundProcessContext.cs"];
m0_47 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="BackgroundProcessContext.cs"];
m0_215 [label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="359-359", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="BackgroundProcessContext.cs"];
m0_209 [label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="359-359", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="BackgroundProcessContext.cs"];
m0_210 [label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="361-362", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="BackgroundProcessContext.cs"];
m0_214 [label="TableAssert.ContainsFollowingItems(table, history)", span="368-368", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="BackgroundProcessContext.cs"];
m0_211 [label="Assert.IsNotNull(entry)", span="363-363", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="BackgroundProcessContext.cs"];
m0_212 [label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="365-365", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="BackgroundProcessContext.cs"];
m0_213 [label="Assert.IsNotNull(history, entry)", span="366-366", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="BackgroundProcessContext.cs"];
m0_66 [label="Entry Unk.Inconclusive", span="", cluster="Unk.Inconclusive", file="BackgroundProcessContext.cs"];
m0_40 [label="Entry Unk.>", span="", cluster="Unk.>", file="BackgroundProcessContext.cs"];
m0_182 [label="Entry Unk.GetItemScoreInSortedSet", span="", cluster="Unk.GetItemScoreInSortedSet", file="BackgroundProcessContext.cs"];
m0_142 [label="Entry Unk.GetListCount", span="", cluster="Unk.GetListCount", file="BackgroundProcessContext.cs"];
m0_32 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="BackgroundProcessContext.cs"];
m0_108 [label="Entry Unk.When", span="", cluster="Unk.When", file="BackgroundProcessContext.cs"];
m0_152 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="272-272", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="BackgroundProcessContext.cs"];
m0_153 [label="Assert.AreEqual(0, Redis.Client.GetListCount(''hangfire:succeeded''))", span="274-274", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="BackgroundProcessContext.cs"];
m0_154 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="272-272", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="BackgroundProcessContext.cs"];
m0_89 [label="Entry HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction)", span="23-23", cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction)", file="BackgroundProcessContext.cs"];
m0_155 [label="Entry HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="278-278", cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="BackgroundProcessContext.cs"];
m0_156 [label="TableAssert.ContainsFollowingItems(\r\n                table,\r\n                _state.GetProperties(_defaultData))", span="280-282", cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="BackgroundProcessContext.cs"];
m0_157 [label="Exit HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="278-278", cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="BackgroundProcessContext.cs"];
m0_276 [label="Entry Unk.GetAllItemsFromList", span="", cluster="Unk.GetAllItemsFromList", file="BackgroundProcessContext.cs"];
m0_109 [label="Entry HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", span="195-195", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", file="BackgroundProcessContext.cs"];
m0_110 [label="var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="197-198", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", file="BackgroundProcessContext.cs"];
m0_111 [label="stateMachine.ChangeState(jobId, _stateMocks[state].Object)", span="199-199", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", file="BackgroundProcessContext.cs"];
m0_112 [label="Exit HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", span="195-195", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", file="BackgroundProcessContext.cs"];
m0_277 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="BackgroundProcessContext.cs"];
m0_103 [label="Entry HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", span="113-113", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="BackgroundProcessContext.cs"];
m0_97 [label="Entry HangFire.Tests.States.StateSteps.WhenIApplyTheState()", span="178-178", cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="BackgroundProcessContext.cs"];
m0_98 [label="var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="180-181", cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="BackgroundProcessContext.cs"];
m0_99 [label="stateMachine.ChangeState(JobSteps.DefaultJobId, _state)", span="182-182", cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="BackgroundProcessContext.cs"];
m0_100 [label="Exit HangFire.Tests.States.StateSteps.WhenIApplyTheState()", span="178-178", cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="BackgroundProcessContext.cs"];
m0_137 [label="Entry Unk.GetValue", span="", cluster="Unk.GetValue", file="BackgroundProcessContext.cs"];
m0_92 [label="Entry HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", span="156-156", cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="BackgroundProcessContext.cs"];
m0_93 [label="var transaction =\r\n                new RedisWriteOnlyTransaction(Redis.Client.CreateTransaction())", span="158-159", cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="BackgroundProcessContext.cs"];
m0_94 [label="Assert.Inconclusive(''Rewrite it.'')", span="171-171", cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="BackgroundProcessContext.cs"];
m0_95 [label="transaction.Commit()", span="173-173", cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="BackgroundProcessContext.cs"];
m0_96 [label="Exit HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", span="156-156", cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="BackgroundProcessContext.cs"];
m0_208 [label="Entry Unk.ContainsFollowingItems", span="", cluster="Unk.ContainsFollowingItems", file="BackgroundProcessContext.cs"];
m0_279 [label="Entry HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", span="465-465", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="BackgroundProcessContext.cs"];
m0_280 [label="Assert.AreEqual(table.RowCount, _stateAppliedResults.Count)", span="467-467", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="BackgroundProcessContext.cs"];
m0_282 [label="i < table.RowCount", span="469-469", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="BackgroundProcessContext.cs"];
m0_283 [label="Assert.AreEqual(table.Rows[i][''Method''], _stateAppliedResults[i])", span="471-471", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="BackgroundProcessContext.cs"];
m0_281 [label="var i = 0", span="469-469", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="BackgroundProcessContext.cs"];
m0_284 [label="i++", span="469-469", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="BackgroundProcessContext.cs"];
m0_285 [label="Exit HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", span="465-465", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="BackgroundProcessContext.cs"];
m0_286 [label="HangFire.Tests.States.StateSteps", span="", file="BackgroundProcessContext.cs"];
m1_5 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="BackgroundProcessContextExtensions.cs"];
m1_6 [label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0", cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="BackgroundProcessContextExtensions.cs"];
m1_7 [label="Entry Hangfire.Server.BackgroundProcessContextExtensions.SleepOrThrow(Hangfire.Server.BackgroundProcessContext, System.TimeSpan)", span="29-29", cluster="Hangfire.Server.BackgroundProcessContextExtensions.SleepOrThrow(Hangfire.Server.BackgroundProcessContext, System.TimeSpan)", file="BackgroundProcessContextExtensions.cs"];
m1_8 [label="context == null", span="31-31", cluster="Hangfire.Server.BackgroundProcessContextExtensions.SleepOrThrow(Hangfire.Server.BackgroundProcessContext, System.TimeSpan)", color=red, community=0, file="BackgroundProcessContextExtensions.cs"];
m1_10 [label="context.CancellationToken.WaitHandle.WaitOne(timeout)", span="32-32", cluster="Hangfire.Server.BackgroundProcessContextExtensions.SleepOrThrow(Hangfire.Server.BackgroundProcessContext, System.TimeSpan)", color=red, community=0, file="BackgroundProcessContextExtensions.cs"];
m1_11 [label="context.CancellationToken.ThrowIfCancellationRequested()", span="33-33", cluster="Hangfire.Server.BackgroundProcessContextExtensions.SleepOrThrow(Hangfire.Server.BackgroundProcessContext, System.TimeSpan)", color=red, community=0, file="BackgroundProcessContextExtensions.cs"];
m1_9 [label="throw new ArgumentNullException(''context'');", span="31-31", cluster="Hangfire.Server.BackgroundProcessContextExtensions.SleepOrThrow(Hangfire.Server.BackgroundProcessContext, System.TimeSpan)", color=red, community=0, file="BackgroundProcessContextExtensions.cs"];
m1_12 [label="Exit Hangfire.Server.BackgroundProcessContextExtensions.SleepOrThrow(Hangfire.Server.BackgroundProcessContext, System.TimeSpan)", span="29-29", cluster="Hangfire.Server.BackgroundProcessContextExtensions.SleepOrThrow(Hangfire.Server.BackgroundProcessContext, System.TimeSpan)", file="BackgroundProcessContextExtensions.cs"];
m1_0 [label="Entry Hangfire.Server.BackgroundProcessContextExtensions.Sleep(Hangfire.Server.BackgroundProcessContext, System.TimeSpan)", span="23-23", cluster="Hangfire.Server.BackgroundProcessContextExtensions.Sleep(Hangfire.Server.BackgroundProcessContext, System.TimeSpan)", file="BackgroundProcessContextExtensions.cs"];
m1_1 [label="context == null", span="25-25", cluster="Hangfire.Server.BackgroundProcessContextExtensions.Sleep(Hangfire.Server.BackgroundProcessContext, System.TimeSpan)", color=red, community=0, file="BackgroundProcessContextExtensions.cs"];
m1_3 [label="return context.CancellationToken.WaitHandle.WaitOne(timeout);", span="26-26", cluster="Hangfire.Server.BackgroundProcessContextExtensions.Sleep(Hangfire.Server.BackgroundProcessContext, System.TimeSpan)", color=red, community=0, file="BackgroundProcessContextExtensions.cs"];
m1_2 [label="throw new ArgumentNullException(''context'');", span="25-25", cluster="Hangfire.Server.BackgroundProcessContextExtensions.Sleep(Hangfire.Server.BackgroundProcessContext, System.TimeSpan)", color=red, community=0, file="BackgroundProcessContextExtensions.cs"];
m1_4 [label="Exit Hangfire.Server.BackgroundProcessContextExtensions.Sleep(Hangfire.Server.BackgroundProcessContext, System.TimeSpan)", span="23-23", cluster="Hangfire.Server.BackgroundProcessContextExtensions.Sleep(Hangfire.Server.BackgroundProcessContext, System.TimeSpan)", file="BackgroundProcessContextExtensions.cs"];
m1_13 [label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0", cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="BackgroundProcessContextExtensions.cs"];
m2_44 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="97-97", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="DelayedJobScheduler.cs"];
m2_10 [label="testRunner.OnFeatureEnd()", span="41-41", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="DelayedJobScheduler.cs"];
m2_25 [label="Entry Hangfire.Server.DelayedJobScheduler.ToString()", span="138-138", cluster="Hangfire.Server.DelayedJobScheduler.ToString()", file="DelayedJobScheduler.cs"];
m2_43 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="DelayedJobScheduler.cs"];
m2_29 [label="var connection = context.Storage.GetConnection()", span="145-145", cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m2_42 [label="Entry Unk.When", span="", cluster="Unk.When", file="DelayedJobScheduler.cs"];
m2_46 [label="this.ScenarioSetup(scenarioInfo)", span="102-102", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="DelayedJobScheduler.cs"];
m2_21 [label="Exit Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="113-113", cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m2_0 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="DelayedJobScheduler.cs"];
m2_1 [label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="DelayedJobScheduler.cs"];
m2_2 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''JobFetcher'', ''\r\n  As a user, I expect that my enqueued jobs will be dequeued by the Server.'', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="DelayedJobScheduler.cs"];
m2_3 [label="testRunner.OnFeatureStart(featureInfo)", span="35-35", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="DelayedJobScheduler.cs"];
m2_4 [label="Entry Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", span="104-104", cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="DelayedJobScheduler.cs"];
m2_47 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="104-104", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="DelayedJobScheduler.cs"];
m2_22 [label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="DelayedJobScheduler.cs"];
m2_35 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="DelayedJobScheduler.cs"];
m2_34 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="DelayedJobScheduler.cs"];
m2_40 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="DelayedJobScheduler.cs"];
m2_32 [label="this.ScenarioSetup(scenarioInfo)", span="79-79", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="DelayedJobScheduler.cs"];
m2_33 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="DelayedJobScheduler.cs"];
m2_36 [label="testRunner.Then(''the fetcher should return the payload'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="87-87", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="DelayedJobScheduler.cs"];
m2_30 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", span="75-75", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="DelayedJobScheduler.cs"];
m2_37 [label="this.ScenarioCleanup()", span="89-89", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="DelayedJobScheduler.cs"];
m2_39 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="DelayedJobScheduler.cs"];
m2_31 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should return the job payload when it dequeues a job'', ((string[])(null)))", span="77-77", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="DelayedJobScheduler.cs"];
m2_38 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", span="75-75", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="DelayedJobScheduler.cs"];
m2_41 [label="Entry Unk.And", span="", cluster="Unk.And", file="DelayedJobScheduler.cs"];
m2_28 [label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="DelayedJobScheduler.cs"];
m2_48 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="106-106", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="DelayedJobScheduler.cs"];
m2_54 [label="Entry Unk.But", span="", cluster="Unk.But", file="DelayedJobScheduler.cs"];
m2_51 [label="testRunner.But(''the dequeued jobs list should contain it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="112-112", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="DelayedJobScheduler.cs"];
m2_5 [label="stateChanger == null", span="106-106", cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="DelayedJobScheduler.cs"];
m2_9 [label="Exit Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", span="104-104", cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="DelayedJobScheduler.cs"];
m2_11 [label="Entry Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="113-113", cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m2_12 [label="context == null", span="115-115", cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m2_23 [label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="210-210", cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", file="DelayedJobScheduler.cs"];
m2_24 [label="Entry Hangfire.Server.BackgroundProcessContext.Wait(System.TimeSpan)", span="57-57", cluster="Hangfire.Server.BackgroundProcessContext.Wait(System.TimeSpan)", file="DelayedJobScheduler.cs"];
m2_50 [label="testRunner.Then(''the queue should not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="110-110", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="DelayedJobScheduler.cs"];
m2_26 [label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="DelayedJobScheduler.cs"];
m2_27 [label="testRunner.CollectScenarioErrors()", span="68-68", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="DelayedJobScheduler.cs"];
m2_85 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", span="192-192", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="DelayedJobScheduler.cs"];
m2_86 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should set the \'fetched\' flag when it dequeues a job'', ((string[])(null)))", span="194-194", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="DelayedJobScheduler.cs"];
m2_87 [label="this.ScenarioSetup(scenarioInfo)", span="196-196", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="DelayedJobScheduler.cs"];
m2_88 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="198-198", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="DelayedJobScheduler.cs"];
m2_89 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="200-200", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="DelayedJobScheduler.cs"];
m2_90 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="202-202", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="DelayedJobScheduler.cs"];
m2_91 [label="testRunner.Then(''the job should have the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="204-204", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="DelayedJobScheduler.cs"];
m2_92 [label="this.ScenarioCleanup()", span="206-206", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="DelayedJobScheduler.cs"];
m2_93 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", span="192-192", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="DelayedJobScheduler.cs"];
m2_13 [label="throw new ArgumentNullException(''context'');", span="115-115", cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m2_7 [label="_stateChanger = stateChanger", span="108-108", cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="DelayedJobScheduler.cs"];
m2_45 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should remove the dequeued job from the queue and adds it to the dequeued'' +\r\n                    '' list'', ((string[])(null)))", span="99-100", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="DelayedJobScheduler.cs"];
m2_52 [label="this.ScenarioCleanup()", span="114-114", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="DelayedJobScheduler.cs"];
m2_76 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", span="171-171", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="DelayedJobScheduler.cs"];
m2_77 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should listen only specified queue'', ((string[])(null)))", span="173-173", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="DelayedJobScheduler.cs"];
m2_78 [label="this.ScenarioSetup(scenarioInfo)", span="175-175", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="DelayedJobScheduler.cs"];
m2_79 [label="testRunner.Given(''a job in the \'another\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="177-177", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="DelayedJobScheduler.cs"];
m2_80 [label="testRunner.And(''the fetcher listening the \'default\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="179-179", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="DelayedJobScheduler.cs"];
m2_81 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="181-181", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="DelayedJobScheduler.cs"];
m2_82 [label="testRunner.Then(''the fetcher should not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="183-183", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="DelayedJobScheduler.cs"];
m2_83 [label="this.ScenarioCleanup()", span="185-185", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="DelayedJobScheduler.cs"];
m2_84 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", span="171-171", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="DelayedJobScheduler.cs"];
m2_14 [label="var jobsEnqueued = 0", span="117-117", cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m2_15 [label="EnqueueNextScheduledJob(context)", span="119-119", cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m2_16 [label="jobsEnqueued++", span="121-121", cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m2_17 [label="context.IsShutdownRequested", span="123-123", cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", color=green, community=0];
m2_49 [label="Entry Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", span="25-25", cluster="Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", file="DelayedJobScheduler.cs"];
m2_53 [label="Hangfire.Server.DelayedJobScheduler", span="", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="DelayedJobScheduler.cs"];
m2_6 [label="throw new ArgumentNullException(''stateChanger'');", span="106-106", cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="DelayedJobScheduler.cs"];
m2_64 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", span="144-144", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="DelayedJobScheduler.cs"];
m2_65 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should dequeue jobs in the FIFO order'', ((string[])(null)))", span="146-146", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="DelayedJobScheduler.cs"];
m2_66 [label="this.ScenarioSetup(scenarioInfo)", span="148-148", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="DelayedJobScheduler.cs"];
m2_67 [label="testRunner.Given(''the \'first\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="150-150", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="DelayedJobScheduler.cs"];
m2_68 [label="testRunner.And(''the \'second\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="152-152", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="DelayedJobScheduler.cs"];
m2_69 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="154-154", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="DelayedJobScheduler.cs"];
m2_70 [label="testRunner.When(''it dequeues a job for the first time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="156-156", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="DelayedJobScheduler.cs"];
m2_71 [label="testRunner.Then(''the fetcher should return the \'first\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="158-158", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="DelayedJobScheduler.cs"];
m2_72 [label="testRunner.When(''it dequeues a job for the second time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="160-160", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="DelayedJobScheduler.cs"];
m2_73 [label="testRunner.Then(''the fetcher should return the \'second\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="162-162", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="DelayedJobScheduler.cs"];
m2_74 [label="this.ScenarioCleanup()", span="164-164", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="DelayedJobScheduler.cs"];
m2_75 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", span="144-144", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="DelayedJobScheduler.cs"];
m2_55 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="122-122", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="DelayedJobScheduler.cs"];
m2_56 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should not return any job when it tries to dequeue a job from an empty qu'' +\r\n                    ''eue'', ((string[])(null)))", span="124-125", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="DelayedJobScheduler.cs"];
m2_57 [label="this.ScenarioSetup(scenarioInfo)", span="127-127", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="DelayedJobScheduler.cs"];
m2_58 [label="testRunner.Given(''an empty queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="129-129", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="DelayedJobScheduler.cs"];
m2_59 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="131-131", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="DelayedJobScheduler.cs"];
m2_60 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="133-133", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="DelayedJobScheduler.cs"];
m2_61 [label="testRunner.Then(''the fetcher should not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="135-135", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="DelayedJobScheduler.cs"];
m2_62 [label="this.ScenarioCleanup()", span="137-137", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="DelayedJobScheduler.cs"];
m2_63 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="122-122", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="DelayedJobScheduler.cs"];
m2_18 [label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="DelayedJobScheduler.cs"];
m2_20 [label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", color=green, community=0, file="DelayedJobScheduler.cs"];
m2_19 [label="testRunner.OnScenarioEnd()", span="58-58", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="DelayedJobScheduler.cs"];
m2_8 [label="_pollingDelay = pollingDelay", span="109-109", cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="DelayedJobScheduler.cs"];
m2_94 [label="HangFire.Tests.Server.JobFetcherFeature", span="", file="DelayedJobScheduler.cs"];
m3_35 [label="Entry Hangfire.Common.JobHelper.ToTimestamp(System.DateTime)", span="57-57", cluster="Hangfire.Common.JobHelper.ToTimestamp(System.DateTime)", file="InfiniteLoopProcess.cs"];
m3_10 [label="Entry Hangfire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", span="47-47", cluster="Hangfire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs"];
m3_5 [label="_storage = storage", span="42-42", cluster="Hangfire.Server.SchedulePoller.SchedulePoller(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, System.TimeSpan)", file="InfiniteLoopProcess.cs"];
m3_9 [label="Exit Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="31-31", cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs"];
m3_0 [label="Entry Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", span="23-23", cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopProcess.cs"];
m3_1 [label="innerProcess == null", span="25-25", cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopProcess.cs"];
m3_3 [label="InnerProcess = innerProcess", span="26-26", cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopProcess.cs"];
m3_6 [label="Entry Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="31-31", cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs"];
m3_7 [label="!context.IsShutdownRequested", span="33-33", cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs", color=green, community=0];
m3_2 [label="throw new ArgumentNullException(''innerProcess'');", span="25-25", cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopProcess.cs"];
m3_4 [label="Exit Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", span="23-23", cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopProcess.cs"];
m3_8 [label="InnerProcess.Execute(context)", span="35-35", cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs"];
m3_34 [label="Entry Hangfire.JobStorage.GetConnection()", span="56-56", cluster="Hangfire.JobStorage.GetConnection()", file="InfiniteLoopProcess.cs"];
m3_20 [label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0", cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="InfiniteLoopProcess.cs"];
m3_21 [label="Entry Hangfire.Server.SchedulePoller.ToString()", span="66-66", cluster="Hangfire.Server.SchedulePoller.ToString()", file="InfiniteLoopProcess.cs"];
m3_22 [label="return ''Schedule Poller'';", span="68-68", cluster="Hangfire.Server.SchedulePoller.ToString()", file="InfiniteLoopProcess.cs"];
m3_23 [label="Exit Hangfire.Server.SchedulePoller.ToString()", span="66-66", cluster="Hangfire.Server.SchedulePoller.ToString()", file="InfiniteLoopProcess.cs"];
m3_37 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="InfiniteLoopProcess.cs"];
m3_11 [label="!EnqueueNextScheduledJob()", span="49-49", cluster="Hangfire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs"];
m3_12 [label="_enqueuedCount != 0", span="51-51", cluster="Hangfire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs"];
m3_13 [label="Logger.InfoFormat(''{0} scheduled jobs were enqueued.'', _enqueuedCount)", span="53-53", cluster="Hangfire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs"];
m3_36 [label="Entry Hangfire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="57-57", cluster="Hangfire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="InfiniteLoopProcess.cs"];
m3_39 [label="Entry Hangfire.States.EnqueuedState.EnqueuedState()", span="31-31", cluster="Hangfire.States.EnqueuedState.EnqueuedState()", file="InfiniteLoopProcess.cs"];
m3_19 [label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="210-210", cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", file="InfiniteLoopProcess.cs"];
m3_18 [label="Entry Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob()", span="71-71", cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="InfiniteLoopProcess.cs"];
m3_24 [label="var connection = _storage.GetConnection()", span="73-73", cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="InfiniteLoopProcess.cs"];
m3_25 [label="var timestamp = JobHelper.ToTimestamp(DateTime.UtcNow)", span="75-75", cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="InfiniteLoopProcess.cs"];
m3_26 [label="var jobId = connection\r\n                    .GetFirstByLowestScoreFromSet(''schedule'', 0, timestamp)", span="78-79", cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="InfiniteLoopProcess.cs"];
m3_29 [label="var stateMachine = _stateMachineFactory.Create(connection)", span="86-86", cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="InfiniteLoopProcess.cs"];
m3_27 [label="String.IsNullOrEmpty(jobId)", span="81-81", cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="InfiniteLoopProcess.cs"];
m3_31 [label="stateMachine.ChangeState(jobId, enqueuedState, new[] { ScheduledState.StateName })", span="92-92", cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="InfiniteLoopProcess.cs"];
m3_28 [label="return false;", span="83-83", cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="InfiniteLoopProcess.cs"];
m3_30 [label="var enqueuedState = new EnqueuedState\r\n                {\r\n                    Reason = ''Enqueued as a scheduled job''\r\n                }", span="87-90", cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="InfiniteLoopProcess.cs"];
m3_32 [label="return true;", span="94-94", cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="InfiniteLoopProcess.cs"];
m3_33 [label="Exit Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob()", span="71-71", cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="InfiniteLoopProcess.cs"];
m3_14 [label="_enqueuedCount = 0", span="54-54", cluster="Hangfire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs"];
m3_40 [label="Entry Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="31-31", cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="InfiniteLoopProcess.cs"];
m3_15 [label="Hangfire.Server.InfiniteLoopProcess", span="", cluster="Hangfire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs"];
m3_16 [label="_enqueuedCount++", span="62-62", cluster="Hangfire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs"];
m3_17 [label="Exit Hangfire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", span="47-47", cluster="Hangfire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs"];
m3_38 [label="Entry Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", span="22-22", cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", file="InfiniteLoopProcess.cs"];
m3_41 [label="Hangfire.Server.SchedulePoller", span="", file="InfiniteLoopProcess.cs"];
m5_27 [label="_redis.SetEntryInHash(\r\n                    String.Format(''hangfire:job:{0}'', jobId),\r\n                    ''Checked'',\r\n                    JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="81-84", cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="ServerWatchdog.cs"];
m5_22 [label="Entry HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", span="51-51", cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="ServerWatchdog.cs"];
m5_23 [label="var flags = _redis.GetValuesFromHash(\r\n                String.Format(''hangfire:job:{0}'', jobId),\r\n                ''Fetched'',\r\n                ''Checked'')", span="53-56", cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="ServerWatchdog.cs"];
m5_29 [label="TryToRequeueTheJob(jobId)", span="93-93", cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="ServerWatchdog.cs"];
m5_30 [label="JobFetcher.RemoveFromFetchedQueue(_redis, jobId, queue)", span="94-94", cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="ServerWatchdog.cs"];
m5_24 [label="var fetched = flags[0]", span="58-58", cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="ServerWatchdog.cs"];
m5_25 [label="var @checked = flags[1]", span="59-59", cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="ServerWatchdog.cs"];
m5_26 [label="String.IsNullOrEmpty(fetched) && String.IsNullOrEmpty(@checked)", span="61-61", cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="ServerWatchdog.cs"];
m5_28 [label="TimedOutByFetchedTime(fetched) || TimedOutByCheckedTime(fetched, @checked)", span="91-91", cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="ServerWatchdog.cs"];
m5_31 [label="Exit HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", span="51-51", cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="ServerWatchdog.cs"];
m5_78 [label="Entry System.Threading.Thread.Join()", span="0-0", cluster="System.Threading.Thread.Join()", file="ServerWatchdog.cs"];
m5_53 [label="Entry HangFire.States.FailedState.FailedState(string, System.Exception)", span="10-10", cluster="HangFire.States.FailedState.FailedState(string, System.Exception)", file="ServerWatchdog.cs"];
m5_11 [label="_redis.AcquireLock(\r\n                    String.Format(''hangfire:queue:{0}:dequeued:lock'', queue),\r\n                    TimeSpan.FromMinutes(1))", span="36-38", cluster="HangFire.Server.DequeuedJobsWatcher.FindAndRequeueTimedOutJobs()", file="ServerWatchdog.cs"];
m5_18 [label="Exit Hangfire.Server.ServerWatchdog.ToString()", span="53-53", cluster="Hangfire.Server.ServerWatchdog.ToString()", file="ServerWatchdog.cs"];
m5_0 [label="Entry Hangfire.Server.ServerWatchdog.ServerWatchdog(System.TimeSpan, System.TimeSpan)", span="31-31", cluster="Hangfire.Server.ServerWatchdog.ServerWatchdog(System.TimeSpan, System.TimeSpan)", file="ServerWatchdog.cs"];
m5_1 [label="_checkInterval = checkInterval", span="33-33", cluster="Hangfire.Server.ServerWatchdog.ServerWatchdog(System.TimeSpan, System.TimeSpan)", file="ServerWatchdog.cs"];
m5_2 [label="_serverTimeout = serverTimeout", span="34-34", cluster="Hangfire.Server.ServerWatchdog.ServerWatchdog(System.TimeSpan, System.TimeSpan)", file="ServerWatchdog.cs"];
m5_12 [label="var jobIds = _redis.GetAllItemsFromList(\r\n                        String.Format(''hangfire:queue:{0}:dequeued'', queue))", span="40-41", cluster="HangFire.Server.DequeuedJobsWatcher.FindAndRequeueTimedOutJobs()", file="ServerWatchdog.cs"];
m5_36 [label="Entry Unk.SetEntryInHash", span="", cluster="Unk.SetEntryInHash", file="ServerWatchdog.cs"];
m5_3 [label="Entry Unk.GetClient", span="", cluster="Unk.GetClient", file="ServerWatchdog.cs"];
m5_19 [label="Entry Unk.AcquireLock", span="", cluster="Unk.AcquireLock", file="ServerWatchdog.cs"];
m5_13 [label=jobIds, span="43-43", cluster="HangFire.Server.DequeuedJobsWatcher.FindAndRequeueTimedOutJobs()", file="ServerWatchdog.cs"];
m5_32 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="ServerWatchdog.cs"];
m5_35 [label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="55-55", cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="ServerWatchdog.cs"];
m5_59 [label="Entry HangFire.Server.DequeuedJobsWatcher.TimedOutByCheckedTime(string, string)", span="135-135", cluster="HangFire.Server.DequeuedJobsWatcher.TimedOutByCheckedTime(string, string)", file="ServerWatchdog.cs"];
m5_60 [label="!String.IsNullOrEmpty(fetchedTimestamp)", span="140-140", cluster="HangFire.Server.DequeuedJobsWatcher.TimedOutByCheckedTime(string, string)", file="ServerWatchdog.cs"];
m5_62 [label="return !String.IsNullOrEmpty(checkedTimestamp) &&\r\n                   (DateTime.UtcNow - JobHelper.FromStringTimestamp(checkedTimestamp) > CheckedTimeout);", span="145-146", cluster="HangFire.Server.DequeuedJobsWatcher.TimedOutByCheckedTime(string, string)", file="ServerWatchdog.cs"];
m5_61 [label="return false;", span="142-142", cluster="HangFire.Server.DequeuedJobsWatcher.TimedOutByCheckedTime(string, string)", file="ServerWatchdog.cs"];
m5_63 [label="Exit HangFire.Server.DequeuedJobsWatcher.TimedOutByCheckedTime(string, string)", span="135-135", cluster="HangFire.Server.DequeuedJobsWatcher.TimedOutByCheckedTime(string, string)", file="ServerWatchdog.cs"];
m5_8 [label="Logger.Info(String.Format(\r\n                        ''{0} servers were removed due to timeout'', \r\n                        serversRemoved))", span="44-46", cluster="Hangfire.Server.ServerWatchdog.Execute(Hangfire.Server.BackgroundProcessContext)", file="ServerWatchdog.cs"];
m5_9 [label="context.Wait(_checkInterval)", span="50-50", cluster="Hangfire.Server.ServerWatchdog.Execute(Hangfire.Server.BackgroundProcessContext)", file="ServerWatchdog.cs", color=green, community=0];
m5_10 [label="Exit Hangfire.Server.ServerWatchdog.Execute(Hangfire.Server.BackgroundProcessContext)", span="37-37", cluster="Hangfire.Server.ServerWatchdog.Execute(Hangfire.Server.BackgroundProcessContext)", file="ServerWatchdog.cs"];
m5_14 [label="Entry Hangfire.Logging.ILog.Info(string)", span="202-202", cluster="Hangfire.Logging.ILog.Info(string)", file="ServerWatchdog.cs"];
m5_15 [label="Entry Hangfire.Server.BackgroundProcessContext.Wait(System.TimeSpan)", span="57-57", cluster="Hangfire.Server.BackgroundProcessContext.Wait(System.TimeSpan)", file="ServerWatchdog.cs"];
m5_49 [label="Entry Unk.TryToGetQueue", span="", cluster="Unk.TryToGetQueue", file="ServerWatchdog.cs"];
m5_16 [label="Entry Unk.GetAllItemsFromSet", span="", cluster="Unk.GetAllItemsFromSet", file="ServerWatchdog.cs"];
m5_17 [label="Entry Unk.Format", span="", cluster="Unk.Format", file="ServerWatchdog.cs"];
m5_77 [label="Entry System.Threading.EventWaitHandle.Set()", span="0-0", cluster="System.Threading.EventWaitHandle.Set()", file="ServerWatchdog.cs"];
m5_51 [label="Entry HangFire.States.EnqueuedState.EnqueuedState(string, string)", span="10-10", cluster="HangFire.States.EnqueuedState.EnqueuedState(string, string)", file="ServerWatchdog.cs"];
m5_40 [label="Entry HangFire.Server.JobFetcher.RemoveFromFetchedQueue(IRedisClient, string, string)", span="86-86", cluster="HangFire.Server.JobFetcher.RemoveFromFetchedQueue(IRedisClient, string, string)", file="ServerWatchdog.cs"];
m5_4 [label="Entry Hangfire.Server.ServerWatchdog.Execute(Hangfire.Server.BackgroundProcessContext)", span="37-37", cluster="Hangfire.Server.ServerWatchdog.Execute(Hangfire.Server.BackgroundProcessContext)", file="ServerWatchdog.cs"];
m5_5 [label="var connection = context.Storage.GetConnection()", span="39-39", cluster="Hangfire.Server.ServerWatchdog.Execute(Hangfire.Server.BackgroundProcessContext)", file="ServerWatchdog.cs"];
m5_6 [label="var serversRemoved = connection.RemoveTimedOutServers(_serverTimeout)", span="41-41", cluster="Hangfire.Server.ServerWatchdog.Execute(Hangfire.Server.BackgroundProcessContext)", file="ServerWatchdog.cs"];
m5_54 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="ServerWatchdog.cs"];
m5_37 [label="Entry Unk.TimedOutByFetchedTime", span="", cluster="Unk.TimedOutByFetchedTime", file="ServerWatchdog.cs"];
m5_38 [label="Entry Unk.TimedOutByCheckedTime", span="", cluster="Unk.TimedOutByCheckedTime", file="ServerWatchdog.cs"];
m5_64 [label="Entry HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", span="149-149", cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="ServerWatchdog.cs"];
m5_65 [label=true, span="153-153", cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="ServerWatchdog.cs"];
m5_66 [label="FindAndRequeueTimedOutJobs()", span="155-155", cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="ServerWatchdog.cs"];
m5_68 [label=Exception, span="163-163", cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="ServerWatchdog.cs"];
m5_67 [label="_stopped.WaitOne(SleepTimeout)", span="157-157", cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="ServerWatchdog.cs"];
m5_69 [label="_logger.Fatal(\r\n                    ''Unexpected exception caught in the timed out jobs thread. Timed out jobs will not be re-queued.'',\r\n                    ex)", span="165-167", cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="ServerWatchdog.cs"];
m5_70 [label="Exit HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", span="149-149", cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="ServerWatchdog.cs"];
m5_50 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="ServerWatchdog.cs"];
m5_7 [label="serversRemoved != 0", span="42-42", cluster="Hangfire.Server.ServerWatchdog.Execute(Hangfire.Server.BackgroundProcessContext)", file="ServerWatchdog.cs"];
m5_39 [label="Entry HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", span="99-99", cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="ServerWatchdog.cs"];
m5_41 [label="var jobType = _redis.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', jobId),\r\n                ''Type'')", span="101-103", cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="ServerWatchdog.cs"];
m5_45 [label="JobState.Apply(\r\n                    _redis,\r\n                    jobId,\r\n                    new EnqueuedState(''Requeued due to time out'', queue),\r\n                    recoverFromStates)", span="111-115", cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="ServerWatchdog.cs"];
m5_46 [label="JobState.Apply(\r\n                    _redis,\r\n                    jobId,\r\n                    new FailedState(\r\n                        ''Failed to re-queue the job.'',\r\n                        new InvalidOperationException(String.Format(''Could not find type '{0}'.'', jobType))),\r\n                    recoverFromStates)", span="119-125", cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="ServerWatchdog.cs"];
m5_42 [label="var queue = JobHelper.TryToGetQueue(jobType)", span="105-105", cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="ServerWatchdog.cs"];
m5_43 [label="var recoverFromStates = new[] { EnqueuedState.Name, ProcessingState.Name }", span="107-107", cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="ServerWatchdog.cs"];
m5_44 [label="!String.IsNullOrEmpty(queue)", span="109-109", cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="ServerWatchdog.cs"];
m5_47 [label="Exit HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", span="99-99", cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="ServerWatchdog.cs"];
m5_72 [label="Entry Unk.Fatal", span="", cluster="Unk.Fatal", file="ServerWatchdog.cs"];
m5_20 [label="Hangfire.Server.ServerWatchdog", span="", cluster="Unk.GetAllItemsFromList", file="ServerWatchdog.cs"];
m5_52 [label="Entry HangFire.States.JobState.Apply(IRedisClient, string, HangFire.States.JobState, params string[])", span="51-51", cluster="HangFire.States.JobState.Apply(IRedisClient, string, HangFire.States.JobState, params string[])", file="ServerWatchdog.cs"];
m5_55 [label="Entry HangFire.Server.DequeuedJobsWatcher.TimedOutByFetchedTime(string)", span="129-129", cluster="HangFire.Server.DequeuedJobsWatcher.TimedOutByFetchedTime(string)", file="ServerWatchdog.cs"];
m5_56 [label="return !String.IsNullOrEmpty(fetchedTimestamp) &&\r\n                   (DateTime.UtcNow - JobHelper.FromStringTimestamp(fetchedTimestamp) > JobTimeout);", span="131-132", cluster="HangFire.Server.DequeuedJobsWatcher.TimedOutByFetchedTime(string)", file="ServerWatchdog.cs"];
m5_57 [label="Exit HangFire.Server.DequeuedJobsWatcher.TimedOutByFetchedTime(string)", span="129-129", cluster="HangFire.Server.DequeuedJobsWatcher.TimedOutByFetchedTime(string)", file="ServerWatchdog.cs"];
m5_48 [label="Entry Unk.GetValueFromHash", span="", cluster="Unk.GetValueFromHash", file="ServerWatchdog.cs"];
m5_71 [label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0", cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="ServerWatchdog.cs"];
m5_34 [label="Entry Unk.IsNullOrEmpty", span="", cluster="Unk.IsNullOrEmpty", file="ServerWatchdog.cs"];
m5_21 [label="Entry Unk.RequeueJobIfTimedOut", span="", cluster="Unk.RequeueJobIfTimedOut", file="ServerWatchdog.cs"];
m5_33 [label="Entry Unk.GetValuesFromHash", span="", cluster="Unk.GetValuesFromHash", file="ServerWatchdog.cs"];
m5_58 [label="Entry HangFire.JobHelper.FromStringTimestamp(string)", span="60-60", cluster="HangFire.JobHelper.FromStringTimestamp(string)", file="ServerWatchdog.cs"];
m5_73 [label="Entry HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", span="171-171", cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="ServerWatchdog.cs"];
m5_74 [label="_stopped.Set()", span="173-173", cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="ServerWatchdog.cs"];
m5_75 [label="thread.Join()", span="174-174", cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="ServerWatchdog.cs"];
m5_76 [label="Exit HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", span="171-171", cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="ServerWatchdog.cs"];
m5_79 [label="HangFire.Server.DequeuedJobsWatcher", span="", file="ServerWatchdog.cs"];
m6_20 [label="Entry Hangfire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", span="35-35", cluster="Hangfire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", file="SucceededState.cs"];
m6_21 [label="Entry Hangfire.States.SucceededState.Handler.Unapply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", span="182-182", cluster="Hangfire.States.SucceededState.Handler.Unapply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="SucceededState.cs"];
m6_22 [label="transaction.DecrementCounter(''stats:succeeded'')", span="184-184", cluster="Hangfire.States.SucceededState.Handler.Unapply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="SucceededState.cs"];
m6_23 [label="Exit Hangfire.States.SucceededState.Handler.Unapply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", span="182-182", cluster="Hangfire.States.SucceededState.Handler.Unapply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="SucceededState.cs"];
m6_16 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="SucceededState.cs"];
m6_13 [label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68", cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="SucceededState.cs"];
m6_14 [label="Entry long.ToString(System.IFormatProvider)", span="0-0", cluster="long.ToString(System.IFormatProvider)", file="SucceededState.cs"];
m6_24 [label="Entry Hangfire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", span="37-37", cluster="Hangfire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", file="SucceededState.cs"];
m6_17 [label="Entry Hangfire.States.SucceededState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", span="177-177", cluster="Hangfire.States.SucceededState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="SucceededState.cs"];
m6_18 [label="transaction.IncrementCounter(''stats:succeeded'')", span="179-179", cluster="Hangfire.States.SucceededState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="SucceededState.cs"];
m6_19 [label="Exit Hangfire.States.SucceededState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", span="177-177", cluster="Hangfire.States.SucceededState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="SucceededState.cs"];
m6_0 [label="Entry Hangfire.States.SucceededState.SucceededState(object, long, long)", span="51-51", cluster="Hangfire.States.SucceededState.SucceededState(object, long, long)", file="SucceededState.cs"];
m6_1 [label="SucceededAt = DateTime.UtcNow", span="53-53", cluster="Hangfire.States.SucceededState.SucceededState(object, long, long)", file="SucceededState.cs"];
m6_2 [label="Result = result", span="54-54", cluster="Hangfire.States.SucceededState.SucceededState(object, long, long)", file="SucceededState.cs"];
m6_3 [label="Latency = latency", span="55-55", cluster="Hangfire.States.SucceededState.SucceededState(object, long, long)", file="SucceededState.cs"];
m6_4 [label="PerformanceDuration = performanceDuration", span="56-56", cluster="Hangfire.States.SucceededState.SucceededState(object, long, long)", file="SucceededState.cs"];
m6_5 [label="Exit Hangfire.States.SucceededState.SucceededState(object, long, long)", span="51-51", cluster="Hangfire.States.SucceededState.SucceededState(object, long, long)", file="SucceededState.cs"];
m6_15 [label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32", cluster="Hangfire.Common.JobHelper.ToJson(object)", file="SucceededState.cs"];
m6_6 [label="Entry Hangfire.States.SucceededState.SerializeData()", span="158-158", cluster="Hangfire.States.SucceededState.SerializeData()", file="SucceededState.cs"];
m6_7 [label="var data = new Dictionary<string, string>\r\n            {\r\n                { ''SucceededAt'',  JobHelper.SerializeDateTime(SucceededAt) },\r\n                { ''PerformanceDuration'', PerformanceDuration.ToString(CultureInfo.InvariantCulture) },\r\n                { ''Latency'', Latency.ToString(CultureInfo.InvariantCulture) }\r\n            }", span="160-165", cluster="Hangfire.States.SucceededState.SerializeData()", file="SucceededState.cs"];
m6_8 [label="Result != null", span="167-167", cluster="Hangfire.States.SucceededState.SerializeData()", file="SucceededState.cs"];
m6_9 [label="data.Add(''Result'', JobHelper.ToJson(Result))", span="169-169", cluster="Hangfire.States.SucceededState.SerializeData()", color=red, community=0, file="SucceededState.cs"];
m6_10 [label="return data;", span="172-172", cluster="Hangfire.States.SucceededState.SerializeData()", file="SucceededState.cs"];
m6_11 [label="Exit Hangfire.States.SucceededState.SerializeData()", span="158-158", cluster="Hangfire.States.SucceededState.SerializeData()", file="SucceededState.cs"];
m6_25 [label="Hangfire.States.SucceededState", span="", file="SucceededState.cs"];
m7_23 [label="Exit Hangfire.Core.Tests.States.SucceededStateFacts.SerializeData_DoesNotAppendEntry_ForNullResult()", span="37-37", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.SerializeData_DoesNotAppendEntry_ForNullResult()", file="SucceededStateFacts.cs"];
m7_20 [label="Hangfire.Server.ServerHeartbeat", span="", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.SerializeData_DoesNotAppendEntry_ForNullResult()", file="SucceededStateFacts.cs"];
m7_21 [label="var data = state.SerializeData()", span="41-41", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.SerializeData_DoesNotAppendEntry_ForNullResult()", file="SucceededStateFacts.cs"];
m7_19 [label="Exit Hangfire.Server.ServerHeartbeat.ToString()", span="47-47", cluster="Hangfire.Server.ServerHeartbeat.ToString()", file="SucceededStateFacts.cs"];
m7_22 [label="Assert.False(data.ContainsKey(''Result''))", span="43-43", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.SerializeData_DoesNotAppendEntry_ForNullResult()", file="SucceededStateFacts.cs"];
m7_8 [label="Entry Hangfire.Core.Tests.States.SucceededStateFacts.CreateState()", span="71-71", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.CreateState()", file="SucceededStateFacts.cs"];
m7_14 [label="Assert.Equal(''123'', data[''PerformanceDuration''])", span="32-32", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.SerializeData_ReturnsCorrectData()", file="SucceededStateFacts.cs"];
m7_3 [label="serverId == null", span="31-31", cluster="Hangfire.Server.ServerHeartbeat.ServerHeartbeat(Hangfire.JobStorage, string)", file="SucceededStateFacts.cs"];
m7_17 [label="Entry Hangfire.States.SucceededState.SerializeData()", span="158-158", cluster="Hangfire.States.SucceededState.SerializeData()", file="SucceededStateFacts.cs"];
m7_18 [label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68", cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="SucceededStateFacts.cs"];
m7_44 [label="return new SucceededState(''Returned  value'', 11, 123);", span="73-73", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.CreateState()", file="SucceededStateFacts.cs"];
m7_45 [label="Exit Hangfire.Core.Tests.States.SucceededStateFacts.CreateState()", span="71-71", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.CreateState()", file="SucceededStateFacts.cs"];
m7_0 [label="Entry Hangfire.Core.Tests.States.SucceededStateFacts.StateName_IsEqualToSucceeded()", span="11-11", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.StateName_IsEqualToSucceeded()", file="SucceededStateFacts.cs"];
m7_1 [label="Assert.Equal(''Succeeded'', SucceededState.StateName)", span="13-13", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.StateName_IsEqualToSucceeded()", file="SucceededStateFacts.cs"];
m7_5 [label="var state = CreateState()", span="19-19", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.NameProperty_ReturnsStateName()", file="SucceededStateFacts.cs"];
m7_6 [label="Assert.Equal(SucceededState.StateName, state.Name)", span="20-20", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.NameProperty_ReturnsStateName()", file="SucceededStateFacts.cs"];
m7_2 [label="Exit Hangfire.Core.Tests.States.SucceededStateFacts.StateName_IsEqualToSucceeded()", span="11-11", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.StateName_IsEqualToSucceeded()", file="SucceededStateFacts.cs"];
m7_4 [label="Entry Hangfire.Core.Tests.States.SucceededStateFacts.NameProperty_ReturnsStateName()", span="17-17", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.NameProperty_ReturnsStateName()", file="SucceededStateFacts.cs"];
m7_7 [label="Exit Hangfire.Core.Tests.States.SucceededStateFacts.NameProperty_ReturnsStateName()", span="17-17", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.NameProperty_ReturnsStateName()", file="SucceededStateFacts.cs"];
m7_25 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="SucceededStateFacts.cs"];
m7_9 [label="Entry Hangfire.Server.ServerHeartbeat.Execute(System.Threading.CancellationToken)", span="37-37", cluster="Hangfire.Server.ServerHeartbeat.Execute(System.Threading.CancellationToken)", file="SucceededStateFacts.cs"];
m7_11 [label="connection.Heartbeat(_serverId)", span="41-41", cluster="Hangfire.Server.ServerHeartbeat.Execute(System.Threading.CancellationToken)", file="SucceededStateFacts.cs"];
m7_10 [label="var connection = _storage.GetConnection()", span="39-39", cluster="Hangfire.Server.ServerHeartbeat.Execute(System.Threading.CancellationToken)", file="SucceededStateFacts.cs"];
m7_12 [label="cancellationToken.WaitHandle.WaitOne(HeartbeatInterval)", span="44-44", cluster="Hangfire.Server.ServerHeartbeat.Execute(System.Threading.CancellationToken)", file="SucceededStateFacts.cs"];
m7_13 [label="Exit Hangfire.Server.ServerHeartbeat.Execute(System.Threading.CancellationToken)", span="37-37", cluster="Hangfire.Server.ServerHeartbeat.Execute(System.Threading.CancellationToken)", file="SucceededStateFacts.cs"];
m7_15 [label="Entry Hangfire.Storage.IStorageConnection.Heartbeat(string)", span="49-49", cluster="Hangfire.Storage.IStorageConnection.Heartbeat(string)", file="SucceededStateFacts.cs"];
m7_16 [label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0", cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="SucceededStateFacts.cs"];
m7_26 [label="Entry Unk.False", span="", cluster="Unk.False", file="SucceededStateFacts.cs"];
m7_40 [label="Entry Hangfire.Core.Tests.States.SucceededStateFacts.IgnoreExceptions_ReturnsFalse()", span="65-65", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.IgnoreExceptions_ReturnsFalse()", file="SucceededStateFacts.cs"];
m7_41 [label="var state = CreateState()", span="67-67", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.IgnoreExceptions_ReturnsFalse()", file="SucceededStateFacts.cs"];
m7_42 [label="Assert.False(state.IgnoreJobLoadException)", span="68-68", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.IgnoreExceptions_ReturnsFalse()", file="SucceededStateFacts.cs"];
m7_43 [label="Exit Hangfire.Core.Tests.States.SucceededStateFacts.IgnoreExceptions_ReturnsFalse()", span="65-65", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.IgnoreExceptions_ReturnsFalse()", file="SucceededStateFacts.cs"];
m7_24 [label="Entry Hangfire.States.SucceededState.SucceededState(object, long, long)", span="51-51", cluster="Hangfire.States.SucceededState.SucceededState(object, long, long)", file="SucceededStateFacts.cs"];
m7_27 [label="Entry Hangfire.Core.Tests.States.SucceededStateFacts.SerializeData_CorrectlyHandlesResults_ThatCantBeSerialized()", span="47-47", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.SerializeData_CorrectlyHandlesResults_ThatCantBeSerialized()", file="SucceededStateFacts.cs"];
m7_28 [label="var process = new Process()", span="49-49", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.SerializeData_CorrectlyHandlesResults_ThatCantBeSerialized()", color=green, community=0, file="SucceededStateFacts.cs"];
m7_29 [label="var state = new SucceededState(process, 0, 0)", span="50-50", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.SerializeData_CorrectlyHandlesResults_ThatCantBeSerialized()", color=green, community=0, file="SucceededStateFacts.cs"];
m7_30 [label="var data = state.SerializeData()", span="52-52", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.SerializeData_CorrectlyHandlesResults_ThatCantBeSerialized()", color=green, community=0, file="SucceededStateFacts.cs"];
m7_31 [label="Assert.Contains(''Can not serialize'', data[''Result''])", span="54-54", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.SerializeData_CorrectlyHandlesResults_ThatCantBeSerialized()", color=green, community=0, file="SucceededStateFacts.cs"];
m7_32 [label="Exit Hangfire.Core.Tests.States.SucceededStateFacts.SerializeData_CorrectlyHandlesResults_ThatCantBeSerialized()", span="47-47", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.SerializeData_CorrectlyHandlesResults_ThatCantBeSerialized()", file="SucceededStateFacts.cs"];
m7_34 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="SucceededStateFacts.cs"];
m7_39 [label="Entry Unk.True", span="", cluster="Unk.True", file="SucceededStateFacts.cs"];
m7_35 [label="Entry Hangfire.Core.Tests.States.SucceededStateFacts.IsFinal_ReturnsTrue()", span="58-58", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.IsFinal_ReturnsTrue()", file="SucceededStateFacts.cs"];
m7_36 [label="var state = CreateState()", span="60-60", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.IsFinal_ReturnsTrue()", file="SucceededStateFacts.cs"];
m7_37 [label="Assert.True(state.IsFinal)", span="61-61", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.IsFinal_ReturnsTrue()", file="SucceededStateFacts.cs"];
m7_38 [label="Exit Hangfire.Core.Tests.States.SucceededStateFacts.IsFinal_ReturnsTrue()", span="58-58", cluster="Hangfire.Core.Tests.States.SucceededStateFacts.IsFinal_ReturnsTrue()", file="SucceededStateFacts.cs"];
m7_33 [label="Entry System.Diagnostics.Process.Process()", span="0-0", cluster="System.Diagnostics.Process.Process()", file="SucceededStateFacts.cs"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=2, style=dotted];
n6 -> n4  [key=0, style=bold, color=blue];
n8 -> n9  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n9 -> n13  [key=2, style=dotted];
n9 -> n11  [key=1, style=dashed, color=darkseagreen4, label=exception];
n10 -> n11  [key=0, style=solid];
n10 -> n7  [key=2, style=dotted];
n11 -> n12  [key=0, style=solid];
n11 -> n14  [key=2, style=dotted];
n11 -> n15  [key=2, style=dotted];
n12 -> n8  [key=0, style=bold, color=blue];
n16 -> n17  [key=0, style=solid];
n17 -> n18  [key=0, style=solid];
n17 -> n7  [key=2, style=dotted];
n17 -> n13  [key=2, style=dotted];
n18 -> n19  [key=0, style=solid];
n18 -> n14  [key=2, style=dotted];
n18 -> n20  [key=2, style=dotted];
n19 -> n16  [key=0, style=bold, color=blue];
n21 -> n22  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n22 -> n7  [key=2, style=dotted];
n22 -> n26  [key=2, style=dotted];
n23 -> n24  [key=0, style=solid];
n23 -> n27  [key=2, style=dotted];
n24 -> n25  [key=0, style=solid];
n24 -> n28  [key=2, style=dotted];
n24 -> n29  [key=2, style=dotted];
n25 -> n21  [key=0, style=bold, color=blue];
m0_268 -> m0_269  [key=0, style=solid];
m0_268 -> m0_272  [key=1, style=dashed, color=darkseagreen4, label=Table];
m0_268 -> m0_273  [key=1, style=dashed, color=darkseagreen4, label=Table];
m0_269 -> m0_270  [key=0, style=solid];
m0_269 -> m0_47  [key=2, style=dotted];
m0_269 -> m0_276  [key=2, style=dotted];
m0_272 -> m0_273  [key=0, style=solid];
m0_272 -> m0_275  [key=0, style=solid];
m0_273 -> m0_274  [key=0, style=solid];
m0_273 -> m0_121  [key=2, style=dotted];
m0_270 -> m0_271  [key=0, style=solid];
m0_270 -> m0_277  [key=2, style=dotted];
m0_270 -> m0_278  [key=2, style=dotted];
m0_270 -> m0_273  [key=1, style=dashed, color=darkseagreen4, label=history];
m0_271 -> m0_272  [key=0, style=solid];
m0_271 -> m0_273  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_271 -> m0_274  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_274 -> m0_272  [key=0, style=solid];
m0_274 -> m0_274  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_275 -> m0_268  [key=0, style=bold, color=blue];
m0_0 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_0 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m0_0 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, object>"];
m0_0 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m0_0 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, object>"];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_4  [key=0, style=bold, color=blue];
m0_8 -> m0_9  [key=0, style=solid];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_13  [key=2, style=dotted];
m0_10 -> m0_11  [key=0, style=solid];
m0_5 -> m0_7  [key=0, style=solid];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_8  [key=2, style=dotted];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=0, style=solid];
m0_3 -> m0_5  [key=0, style=solid];
m0_3 -> m0_4  [key=0, style=solid];
m0_6 -> m0_11  [key=0, style=solid];
m0_6 -> m0_12  [key=2, style=dotted];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> n7  [key=2, style=dotted];
m0_2 -> m0_11  [key=0, style=solid];
m0_2 -> m0_12  [key=2, style=dotted];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_4 -> m0_11  [key=0, style=solid];
m0_4 -> m0_12  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_11 -> m0_0  [key=0, style=bold, color=blue];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_13  [key=2, style=dotted];
m0_176 -> m0_177  [key=0, style=solid];
m0_177 -> m0_178  [key=0, style=solid];
m0_177 -> m0_182  [key=2, style=dotted];
m0_178 -> m0_179  [key=0, style=solid];
m0_178 -> m0_183  [key=2, style=dotted];
m0_178 -> m0_180  [key=1, style=dashed, color=darkseagreen4, label=timestamp];
m0_179 -> m0_180  [key=0, style=solid];
m0_179 -> m0_184  [key=2, style=dotted];
m0_179 -> m0_132  [key=2, style=dotted];
m0_180 -> m0_181  [key=0, style=solid];
m0_180 -> m0_184  [key=2, style=dotted];
m0_180 -> m0_132  [key=2, style=dotted];
m0_181 -> m0_176  [key=0, style=bold, color=blue];
m0_160 -> m0_161  [key=0, style=solid];
m0_161 -> m0_162  [key=0, style=solid];
m0_161 -> m0_164  [key=2, style=dotted];
m0_161 -> m0_121  [key=2, style=dotted];
m0_162 -> m0_163  [key=0, style=solid];
m0_162 -> m0_165  [key=2, style=dotted];
m0_162 -> m0_132  [key=2, style=dotted];
m0_163 -> m0_160  [key=0, style=bold, color=blue];
m0_114 -> m0_115  [key=0, style=solid];
m0_114 -> m0_116  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_115 -> m0_116  [key=0, style=solid];
m0_115 -> m0_101  [key=2, style=dotted];
m0_115 -> m0_102  [key=2, style=dotted];
m0_116 -> m0_117  [key=0, style=solid];
m0_116 -> m0_113  [key=2, style=dotted];
m0_117 -> m0_114  [key=0, style=bold, color=blue];
m0_19 -> m0_20  [key=0, style=solid];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_22  [key=2, style=dotted];
m0_21 -> m0_19  [key=0, style=bold, color=blue];
m0_185 -> m0_186  [key=0, style=solid];
m0_186 -> m0_187  [key=0, style=solid];
m0_186 -> m0_165  [key=2, style=dotted];
m0_186 -> m0_132  [key=2, style=dotted];
m0_187 -> m0_188  [key=0, style=solid];
m0_187 -> m0_182  [key=2, style=dotted];
m0_188 -> m0_189  [key=0, style=solid];
m0_188 -> m0_183  [key=2, style=dotted];
m0_188 -> m0_190  [key=1, style=dashed, color=darkseagreen4, label=timestamp];
m0_189 -> m0_190  [key=0, style=solid];
m0_189 -> m0_18  [key=2, style=dotted];
m0_189 -> m0_132  [key=2, style=dotted];
m0_190 -> m0_191  [key=0, style=solid];
m0_190 -> m0_18  [key=2, style=dotted];
m0_190 -> m0_132  [key=2, style=dotted];
m0_191 -> m0_185  [key=0, style=bold, color=blue];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_74  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_73 -> m0_74  [key=0, style=solid];
m0_73 -> m0_47  [key=2, style=dotted];
m0_73 -> m0_48  [key=2, style=dotted];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_76  [key=2, style=dotted];
m0_74 -> m0_71  [key=2, style=dotted];
m0_75 -> m0_72  [key=0, style=bold, color=blue];
m0_221 -> m0_222  [key=0, style=solid];
m0_222 -> m0_223  [key=0, style=solid];
m0_222 -> m0_66  [key=2, style=dotted];
m0_223 -> m0_221  [key=0, style=bold, color=blue];
m0_192 -> m0_193  [key=0, style=solid];
m0_193 -> m0_194  [key=0, style=solid];
m0_193 -> m0_165  [key=2, style=dotted];
m0_193 -> m0_175  [key=2, style=dotted];
m0_194 -> m0_192  [key=0, style=bold, color=blue];
m0_241 -> m0_242  [key=0, style=solid];
m0_242 -> m0_243  [key=0, style=solid];
m0_242 -> m0_47  [key=2, style=dotted];
m0_242 -> m0_216  [key=2, style=dotted];
m0_242 -> m0_244  [key=1, style=dashed, color=darkseagreen4, label=entry];
m0_242 -> m0_245  [key=1, style=dashed, color=darkseagreen4, label=entry];
m0_243 -> m0_244  [key=0, style=solid];
m0_243 -> m0_217  [key=2, style=dotted];
m0_244 -> m0_245  [key=0, style=solid];
m0_244 -> m0_40  [key=2, style=dotted];
m0_244 -> m0_247  [key=1, style=dashed, color=darkseagreen4, label=history];
m0_244 -> m0_248  [key=1, style=dashed, color=darkseagreen4, label=history];
m0_245 -> m0_246  [key=0, style=solid];
m0_245 -> m0_217  [key=2, style=dotted];
m0_247 -> m0_248  [key=0, style=solid];
m0_247 -> m0_250  [key=2, style=dotted];
m0_247 -> m0_132  [key=2, style=dotted];
m0_247 -> m0_247  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_248 -> m0_246  [key=0, style=solid];
m0_248 -> m0_121  [key=2, style=dotted];
m0_248 -> m0_248  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_246 -> m0_247  [key=0, style=solid];
m0_246 -> m0_249  [key=0, style=solid];
m0_249 -> m0_241  [key=0, style=bold, color=blue];
m0_12 -> m0_10  [key=0, style=bold, color=blue];
m0_144 -> m0_145  [key=0, style=solid];
m0_145 -> m0_146  [key=0, style=solid];
m0_145 -> m0_47  [key=2, style=dotted];
m0_146 -> m0_147  [key=0, style=solid];
m0_146 -> m0_126  [key=2, style=dotted];
m0_146 -> m0_148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_147 -> m0_144  [key=0, style=bold, color=blue];
m0_118 -> m0_119  [key=0, style=solid];
m0_119 -> m0_120  [key=0, style=solid];
m0_119 -> m0_121  [key=2, style=dotted];
m0_120 -> m0_118  [key=0, style=bold, color=blue];
m0_67 -> m0_68  [key=0, style=solid];
m0_68 -> m0_69  [key=0, style=solid];
m0_68 -> m0_70  [key=2, style=dotted];
m0_68 -> m0_71  [key=2, style=dotted];
m0_69 -> m0_67  [key=0, style=bold, color=blue];
m0_18 -> m0_15  [key=1, style=dashed, color=green, label="Hangfire.Server.BackgroundProcessContext"];
m0_18 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m0_18 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m0_18 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m0_18 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m0_224 -> m0_225  [key=0, style=solid];
m0_225 -> m0_226  [key=0, style=solid];
m0_225 -> m0_227  [key=2, style=dotted];
m0_225 -> m0_228  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_226 -> m0_224  [key=0, style=bold, color=blue];
m0_256 -> m0_251  [key=0, style=bold, color=blue];
m0_251 -> m0_252  [key=0, style=solid];
m0_252 -> m0_253  [key=0, style=solid];
m0_252 -> m0_47  [key=2, style=dotted];
m0_252 -> m0_203  [key=2, style=dotted];
m0_252 -> m0_254  [key=1, style=dashed, color=darkseagreen4, label=stateEntry];
m0_252 -> m0_255  [key=1, style=dashed, color=darkseagreen4, label=stateEntry];
m0_253 -> m0_254  [key=0, style=solid];
m0_253 -> m0_256  [key=0, style=solid];
m0_254 -> m0_255  [key=0, style=solid];
m0_254 -> m0_257  [key=2, style=dotted];
m0_254 -> m0_132  [key=2, style=dotted];
m0_254 -> m0_254  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_255 -> m0_253  [key=0, style=solid];
m0_255 -> m0_121  [key=2, style=dotted];
m0_255 -> m0_255  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_81 -> m0_82  [key=0, style=solid];
m0_82 -> m0_83  [key=0, style=solid];
m0_82 -> m0_87  [key=2, style=dotted];
m0_82 -> m0_88  [key=2, style=dotted];
m0_82 -> m0_85  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m0_83 -> m0_84  [key=0, style=solid];
m0_83 -> m0_89  [key=2, style=dotted];
m0_83 -> m0_90  [key=2, style=dotted];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_91  [key=2, style=dotted];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_66  [key=2, style=dotted];
m0_86 -> m0_81  [key=0, style=bold, color=blue];
m0_258 -> m0_259  [key=0, style=solid];
m0_258 -> m0_261  [key=1, style=dashed, color=darkseagreen4, label=Table];
m0_258 -> m0_262  [key=1, style=dashed, color=darkseagreen4, label=Table];
m0_259 -> m0_260  [key=0, style=solid];
m0_259 -> m0_121  [key=2, style=dotted];
m0_261 -> m0_262  [key=0, style=solid];
m0_261 -> m0_264  [key=0, style=solid];
m0_262 -> m0_263  [key=0, style=solid];
m0_262 -> m0_121  [key=2, style=dotted];
m0_260 -> m0_261  [key=0, style=solid];
m0_260 -> m0_262  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_260 -> m0_263  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_263 -> m0_261  [key=0, style=solid];
m0_263 -> m0_263  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_264 -> m0_258  [key=0, style=bold, color=blue];
m0_238 -> m0_239  [key=0, style=solid];
m0_34 -> m0_35  [key=0, style=solid];
m0_37 -> m0_38  [key=0, style=solid];
m0_35 -> m0_36  [key=0, style=solid];
m0_36 -> m0_34  [key=0, style=bold, color=blue];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_40  [key=2, style=dotted];
m0_38 -> m0_41  [key=2, style=dotted];
m0_39 -> m0_37  [key=0, style=bold, color=blue];
m0_50 -> m0_51  [key=0, style=solid];
m0_53 -> m0_54  [key=0, style=solid];
m0_56 -> m0_57  [key=0, style=solid];
m0_51 -> m0_52  [key=0, style=solid];
m0_52 -> m0_50  [key=0, style=bold, color=blue];
m0_54 -> m0_55  [key=0, style=solid];
m0_55 -> m0_53  [key=0, style=bold, color=blue];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_40  [key=2, style=dotted];
m0_57 -> m0_41  [key=2, style=dotted];
m0_58 -> m0_56  [key=0, style=bold, color=blue];
m0_127 -> m0_128  [key=0, style=solid];
m0_127 -> m0_129  [key=1, style=dashed, color=darkseagreen4, label="?"];
m0_128 -> m0_129  [key=0, style=solid];
m0_128 -> m0_131  [key=2, style=dotted];
m0_129 -> m0_130  [key=0, style=solid];
m0_129 -> m0_132  [key=2, style=dotted];
m0_130 -> m0_127  [key=0, style=bold, color=blue];
m0_148 -> m0_149  [key=0, style=solid];
m0_148 -> m0_150  [key=1, style=dashed, color=darkseagreen4, label="?"];
m0_149 -> m0_150  [key=0, style=solid];
m0_149 -> m0_131  [key=2, style=dotted];
m0_150 -> m0_151  [key=0, style=solid];
m0_150 -> m0_132  [key=2, style=dotted];
m0_151 -> m0_148  [key=0, style=bold, color=blue];
m0_228 -> m0_229  [key=0, style=solid];
m0_229 -> m0_230  [key=0, style=solid];
m0_229 -> m0_40  [key=2, style=dotted];
m0_229 -> m0_231  [key=2, style=dotted];
m0_229 -> m0_232  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_230 -> m0_228  [key=0, style=bold, color=blue];
m0_232 -> m0_233  [key=0, style=solid];
m0_233 -> m0_234  [key=0, style=solid];
m0_234 -> m0_232  [key=0, style=bold, color=blue];
m0_239 -> m0_240  [key=0, style=solid];
m0_239 -> m0_40  [key=2, style=dotted];
m0_239 -> m0_231  [key=2, style=dotted];
m0_240 -> m0_238  [key=0, style=bold, color=blue];
m0_59 -> m0_60  [key=0, style=solid];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_48  [key=2, style=dotted];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_48  [key=2, style=dotted];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_65  [key=2, style=dotted];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_66  [key=2, style=dotted];
m0_64 -> m0_59  [key=0, style=bold, color=blue];
m0_172 -> m0_173  [key=0, style=solid];
m0_173 -> m0_174  [key=0, style=solid];
m0_173 -> m0_165  [key=2, style=dotted];
m0_173 -> m0_175  [key=2, style=dotted];
m0_174 -> m0_172  [key=0, style=bold, color=blue];
m0_104 -> m0_105  [key=0, style=solid];
m0_105 -> m0_106  [key=0, style=solid];
m0_105 -> m0_107  [key=2, style=dotted];
m0_105 -> m0_108  [key=2, style=dotted];
m0_106 -> m0_104  [key=0, style=bold, color=blue];
m0_77 -> m0_78  [key=0, style=solid];
m0_78 -> m0_79  [key=0, style=solid];
m0_78 -> m0_80  [key=2, style=dotted];
m0_78 -> m0_71  [key=2, style=dotted];
m0_79 -> m0_77  [key=0, style=bold, color=blue];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label=Table];
m0_42 -> m0_45  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_47  [key=2, style=dotted];
m0_43 -> m0_48  [key=2, style=dotted];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_49  [key=2, style=dotted];
m0_44 -> m0_50  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_44 -> m0_53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_30  [key=2, style=dotted];
m0_45 -> m0_31  [key=2, style=dotted];
m0_45 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_46 -> m0_42  [key=0, style=bold, color=blue];
m0_235 -> m0_236  [key=0, style=solid];
m0_236 -> m0_237  [key=0, style=solid];
m0_236 -> m0_227  [key=2, style=dotted];
m0_236 -> m0_238  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_237 -> m0_235  [key=0, style=bold, color=blue];
m0_199 -> m0_200  [key=0, style=solid];
m0_199 -> m0_201  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_200 -> m0_201  [key=0, style=solid];
m0_200 -> m0_47  [key=2, style=dotted];
m0_200 -> m0_203  [key=2, style=dotted];
m0_201 -> m0_202  [key=0, style=solid];
m0_201 -> m0_121  [key=2, style=dotted];
m0_202 -> m0_199  [key=0, style=bold, color=blue];
m0_133 -> m0_134  [key=0, style=solid];
m0_134 -> m0_135  [key=0, style=solid];
m0_134 -> m0_136  [key=2, style=dotted];
m0_134 -> m0_137  [key=2, style=dotted];
m0_134 -> m0_121  [key=2, style=dotted];
m0_135 -> m0_133  [key=0, style=bold, color=blue];
m0_265 -> m0_266  [key=0, style=solid];
m0_266 -> m0_267  [key=0, style=solid];
m0_266 -> m0_121  [key=2, style=dotted];
m0_267 -> m0_265  [key=0, style=bold, color=blue];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_23 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_29  [key=2, style=dotted];
m0_24 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label=mock];
m0_24 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label=mock];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_30  [key=2, style=dotted];
m0_25 -> m0_31  [key=2, style=dotted];
m0_25 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_33  [key=2, style=dotted];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_30  [key=2, style=dotted];
m0_26 -> m0_32  [key=2, style=dotted];
m0_26 -> m0_31  [key=2, style=dotted];
m0_26 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_28 -> m0_23  [key=0, style=bold, color=blue];
m0_14 -> m0_15  [key=0, style=solid, color=green];
m0_15 -> m0_16  [key=0, style=solid, color=green];
m0_15 -> m0_17  [key=2, style=dotted, color=green];
m0_15 -> m0_18  [key=2, style=dotted];
m0_16 -> m0_14  [key=0, style=bold, color=blue];
m0_218 -> m0_219  [key=0, style=solid];
m0_219 -> m0_220  [key=0, style=solid];
m0_219 -> m0_66  [key=2, style=dotted];
m0_220 -> m0_218  [key=0, style=bold, color=blue];
m0_195 -> m0_196  [key=0, style=solid];
m0_196 -> m0_197  [key=0, style=solid];
m0_196 -> m0_198  [key=2, style=dotted];
m0_196 -> m0_132  [key=2, style=dotted];
m0_197 -> m0_195  [key=0, style=bold, color=blue];
m0_169 -> m0_170  [key=0, style=solid];
m0_170 -> m0_171  [key=0, style=solid];
m0_170 -> m0_165  [key=2, style=dotted];
m0_170 -> m0_132  [key=2, style=dotted];
m0_171 -> m0_169  [key=0, style=bold, color=blue];
m0_138 -> m0_139  [key=0, style=solid];
m0_139 -> m0_140  [key=0, style=solid];
m0_139 -> m0_142  [key=2, style=dotted];
m0_139 -> m0_121  [key=2, style=dotted];
m0_140 -> m0_141  [key=0, style=solid];
m0_140 -> m0_143  [key=2, style=dotted];
m0_140 -> m0_121  [key=2, style=dotted];
m0_141 -> m0_138  [key=0, style=bold, color=blue];
m0_166 -> m0_167  [key=0, style=solid];
m0_167 -> m0_168  [key=0, style=solid];
m0_167 -> m0_164  [key=2, style=dotted];
m0_167 -> m0_121  [key=2, style=dotted];
m0_168 -> m0_166  [key=0, style=bold, color=blue];
m0_207 -> m0_204  [key=0, style=bold, color=blue];
m0_204 -> m0_205  [key=0, style=solid];
m0_204 -> m0_206  [key=1, style=dashed, color=darkseagreen4, label=Table];
m0_205 -> m0_206  [key=0, style=solid];
m0_205 -> m0_47  [key=2, style=dotted];
m0_205 -> m0_203  [key=2, style=dotted];
m0_206 -> m0_207  [key=0, style=solid];
m0_206 -> m0_208  [key=2, style=dotted];
m0_122 -> m0_123  [key=0, style=solid];
m0_123 -> m0_124  [key=0, style=solid];
m0_123 -> m0_47  [key=2, style=dotted];
m0_124 -> m0_125  [key=0, style=solid];
m0_124 -> m0_126  [key=2, style=dotted];
m0_124 -> m0_127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_125 -> m0_122  [key=0, style=bold, color=blue];
m0_215 -> m0_209  [key=0, style=bold, color=blue];
m0_209 -> m0_210  [key=0, style=solid];
m0_209 -> m0_214  [key=1, style=dashed, color=darkseagreen4, label=Table];
m0_210 -> m0_211  [key=0, style=solid];
m0_210 -> m0_47  [key=2, style=dotted];
m0_210 -> m0_216  [key=2, style=dotted];
m0_210 -> m0_212  [key=1, style=dashed, color=darkseagreen4, label=entry];
m0_210 -> m0_213  [key=1, style=dashed, color=darkseagreen4, label=entry];
m0_214 -> m0_215  [key=0, style=solid];
m0_214 -> m0_159  [key=2, style=dotted];
m0_211 -> m0_212  [key=0, style=solid];
m0_211 -> m0_217  [key=2, style=dotted];
m0_212 -> m0_213  [key=0, style=solid];
m0_212 -> m0_40  [key=2, style=dotted];
m0_212 -> m0_214  [key=1, style=dashed, color=darkseagreen4, label=history];
m0_213 -> m0_214  [key=0, style=solid];
m0_213 -> m0_217  [key=2, style=dotted];
m0_152 -> m0_153  [key=0, style=solid];
m0_153 -> m0_154  [key=0, style=solid];
m0_153 -> m0_142  [key=2, style=dotted];
m0_153 -> m0_121  [key=2, style=dotted];
m0_154 -> m0_152  [key=0, style=bold, color=blue];
m0_155 -> m0_156  [key=0, style=solid];
m0_156 -> m0_157  [key=0, style=solid];
m0_156 -> m0_158  [key=2, style=dotted];
m0_156 -> m0_159  [key=2, style=dotted];
m0_157 -> m0_155  [key=0, style=bold, color=blue];
m0_109 -> m0_110  [key=0, style=solid];
m0_109 -> m0_111  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_110 -> m0_111  [key=0, style=solid];
m0_110 -> m0_101  [key=2, style=dotted];
m0_110 -> m0_102  [key=2, style=dotted];
m0_111 -> m0_112  [key=0, style=solid];
m0_111 -> m0_113  [key=2, style=dotted];
m0_112 -> m0_109  [key=0, style=bold, color=blue];
m0_97 -> m0_98  [key=0, style=solid];
m0_98 -> m0_99  [key=0, style=solid];
m0_98 -> m0_101  [key=2, style=dotted];
m0_98 -> m0_102  [key=2, style=dotted];
m0_99 -> m0_100  [key=0, style=solid];
m0_99 -> m0_103  [key=2, style=dotted];
m0_100 -> m0_97  [key=0, style=bold, color=blue];
m0_92 -> m0_93  [key=0, style=solid];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_87  [key=2, style=dotted];
m0_93 -> m0_88  [key=2, style=dotted];
m0_93 -> m0_95  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_66  [key=2, style=dotted];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_91  [key=2, style=dotted];
m0_96 -> m0_92  [key=0, style=bold, color=blue];
m0_279 -> m0_280  [key=0, style=solid];
m0_279 -> m0_282  [key=1, style=dashed, color=darkseagreen4, label=Table];
m0_279 -> m0_283  [key=1, style=dashed, color=darkseagreen4, label=Table];
m0_280 -> m0_281  [key=0, style=solid];
m0_280 -> m0_121  [key=2, style=dotted];
m0_282 -> m0_283  [key=0, style=solid];
m0_282 -> m0_285  [key=0, style=solid];
m0_283 -> m0_284  [key=0, style=solid];
m0_283 -> m0_121  [key=2, style=dotted];
m0_281 -> m0_282  [key=0, style=solid];
m0_281 -> m0_283  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_281 -> m0_284  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_284 -> m0_282  [key=0, style=solid];
m0_284 -> m0_284  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_285 -> m0_279  [key=0, style=bold, color=blue];
m0_286 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_45  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_62  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_68  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_78  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_83  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_98  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_99  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_110  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_111  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_115  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_116  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_119  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_156  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_225  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_236  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_246  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_253  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_259  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_262  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_266  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_280  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m0_286 -> m0_283  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m1_7 -> m1_8  [key=0, style=solid, color=red];
m1_7 -> m1_10  [key=1, style=dashed, color=red, label="Hangfire.Server.BackgroundProcessContext"];
m1_7 -> m1_11  [key=1, style=dashed, color=red, label="Hangfire.Server.BackgroundProcessContext"];
m1_8 -> m1_9  [key=0, style=solid, color=red];
m1_8 -> m1_10  [key=0, style=solid, color=red];
m1_10 -> m1_11  [key=0, style=solid, color=red];
m1_10 -> m1_6  [key=2, style=dotted, color=red];
m1_11 -> m1_12  [key=0, style=solid, color=red];
m1_11 -> m1_13  [key=2, style=dotted, color=red];
m1_9 -> m1_12  [key=0, style=solid, color=red];
m1_9 -> m1_5  [key=2, style=dotted, color=red];
m1_12 -> m1_7  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid, color=red];
m1_0 -> m1_3  [key=1, style=dashed, color=red, label="Hangfire.Server.BackgroundProcessContext"];
m1_1 -> m1_2  [key=0, style=solid, color=red];
m1_1 -> m1_3  [key=0, style=solid, color=red];
m1_3 -> m1_4  [key=0, style=solid, color=red];
m1_3 -> m1_6  [key=2, style=dotted, color=red];
m1_2 -> m1_4  [key=0, style=solid, color=red];
m1_2 -> m1_5  [key=2, style=dotted, color=red];
m1_4 -> m1_0  [key=0, style=bold, color=blue];
m2_44 -> m2_45  [key=0, style=solid];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_13  [key=2, style=dotted];
m2_25 -> m2_26  [key=0, style=solid];
m2_29 -> m2_35  [key=1, style=dashed, color=darkseagreen4, label=connection];
m2_29 -> m2_30  [key=0, style=solid];
m2_29 -> m2_42  [key=2, style=dotted];
m2_29 -> m2_32  [key=1, style=dashed, color=darkseagreen4, label=connection];
m2_29 -> m2_37  [key=1, style=dashed, color=darkseagreen4, label=connection];
m2_46 -> m2_47  [key=0, style=solid];
m2_46 -> m2_22  [key=2, style=dotted];
m2_21 -> m2_11  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_5  [key=2, style=dotted];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_6  [key=2, style=dotted];
m2_2 -> m2_7  [key=2, style=dotted];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_8  [key=2, style=dotted];
m2_4 -> m2_0  [key=0, style=bold, color=blue];
m2_4 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IBackgroundJobStateChanger"];
m2_4 -> m2_8  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m2_4 -> m2_5  [key=0, style=solid];
m2_47 -> m2_48  [key=0, style=solid];
m2_47 -> m2_40  [key=2, style=dotted];
m2_22 -> m2_11  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.Server.BackgroundProcessContext context"];
m2_22 -> m2_29  [key=0, style=solid];
m2_22 -> m2_35  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m2_22 -> m2_34  [key=3, color=darkorchid, style=bold, label="method methodReturn bool EnqueueNextScheduledJob"];
m2_22 -> m2_40  [key=3, color=darkorchid, style=bold, label="method methodReturn bool EnqueueNextScheduledJob"];
m2_22 -> m2_23  [key=0, style=solid];
m2_35 -> m2_36  [key=0, style=solid];
m2_35 -> m2_46  [key=2, style=dotted];
m2_35 -> m2_47  [key=2, style=dotted];
m2_35 -> m2_25  [key=2, style=dotted];
m2_35 -> m2_48  [key=2, style=dotted];
m2_35 -> m2_49  [key=2, style=dotted];
m2_35 -> m2_42  [key=2, style=dotted];
m2_34 -> m2_41  [key=0, style=solid];
m2_34 -> m2_35  [key=0, style=solid];
m2_40 -> m2_41  [key=0, style=solid];
m2_32 -> m2_35  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m2_32 -> m2_33  [key=0, style=solid];
m2_32 -> m2_45  [key=2, style=dotted];
m2_32 -> m2_38  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m2_32 -> m2_22  [key=2, style=dotted];
m2_33 -> m2_35  [key=0, style=solid];
m2_33 -> m2_34  [key=0, style=solid];
m2_33 -> m2_40  [key=2, style=dotted];
m2_36 -> m2_40  [key=0, style=solid];
m2_36 -> m2_37  [key=0, style=solid];
m2_36 -> m2_43  [key=2, style=dotted];
m2_30 -> m2_31  [key=0, style=solid];
m2_30 -> m2_43  [key=2, style=dotted];
m2_37 -> m2_38  [key=0, style=solid];
m2_37 -> m2_50  [key=2, style=dotted];
m2_37 -> m2_39  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_37 -> m2_26  [key=2, style=dotted];
m2_39 -> m2_40  [key=0, style=solid];
m2_39 -> m2_52  [key=2, style=dotted];
m2_31 -> m2_32  [key=0, style=solid];
m2_31 -> m2_44  [key=2, style=dotted];
m2_31 -> m2_39  [key=2, style=dotted];
m2_38 -> m2_39  [key=0, style=solid];
m2_38 -> m2_51  [key=2, style=dotted];
m2_38 -> m2_30  [key=0, style=bold, color=blue];
m2_41 -> m2_22  [key=0, style=bold, color=blue];
m2_28 -> m2_26  [key=0, style=bold, color=blue];
m2_48 -> m2_49  [key=0, style=solid];
m2_48 -> m2_41  [key=2, style=dotted];
m2_51 -> m2_52  [key=0, style=solid];
m2_51 -> m2_54  [key=2, style=dotted];
m2_5 -> m2_7  [key=0, style=solid];
m2_5 -> m2_6  [key=0, style=solid];
m2_9 -> m2_10  [key=0, style=solid];
m2_9 -> m2_4  [key=0, style=bold, color=blue];
m2_11 -> m2_12  [key=0, style=solid];
m2_11 -> m2_17  [key=1, style=dashed, color=green, label="Hangfire.Server.BackgroundProcessContext"];
m2_11 -> m2_20  [key=1, style=dashed, color=green, label="Hangfire.Server.BackgroundProcessContext"];
m2_11 -> m2_15  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m2_12 -> m2_9  [key=0, style=bold, color=blue];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_14  [key=0, style=solid];
m2_23 -> m2_24  [key=0, style=solid];
m2_23 -> m2_25  [key=2, style=dotted];
m2_24 -> m2_22  [key=0, style=bold, color=blue];
m2_50 -> m2_51  [key=0, style=solid];
m2_50 -> m2_43  [key=2, style=dotted];
m2_26 -> m2_27  [key=0, style=solid];
m2_26 -> m2_28  [key=2, style=dotted];
m2_27 -> m2_25  [key=0, style=bold, color=blue];
m2_27 -> m2_28  [key=0, style=solid];
m2_27 -> m2_29  [key=2, style=dotted];
m2_85 -> m2_86  [key=0, style=solid];
m2_86 -> m2_87  [key=0, style=solid];
m2_86 -> m2_39  [key=2, style=dotted];
m2_87 -> m2_88  [key=0, style=solid];
m2_87 -> m2_22  [key=2, style=dotted];
m2_88 -> m2_89  [key=0, style=solid];
m2_88 -> m2_40  [key=2, style=dotted];
m2_89 -> m2_90  [key=0, style=solid];
m2_89 -> m2_41  [key=2, style=dotted];
m2_90 -> m2_91  [key=0, style=solid];
m2_90 -> m2_42  [key=2, style=dotted];
m2_91 -> m2_92  [key=0, style=solid];
m2_91 -> m2_43  [key=2, style=dotted];
m2_92 -> m2_93  [key=0, style=solid];
m2_92 -> m2_26  [key=2, style=dotted];
m2_93 -> m2_85  [key=0, style=bold, color=blue];
m2_13 -> m2_21  [key=0, style=solid];
m2_13 -> m2_10  [key=2, style=dotted];
m2_7 -> m2_8  [key=0, style=solid];
m2_45 -> m2_46  [key=0, style=solid];
m2_45 -> m2_39  [key=2, style=dotted];
m2_52 -> m2_53  [key=0, style=solid];
m2_52 -> m2_26  [key=2, style=dotted];
m2_76 -> m2_77  [key=0, style=solid];
m2_77 -> m2_78  [key=0, style=solid];
m2_77 -> m2_39  [key=2, style=dotted];
m2_78 -> m2_79  [key=0, style=solid];
m2_78 -> m2_22  [key=2, style=dotted];
m2_79 -> m2_80  [key=0, style=solid];
m2_79 -> m2_40  [key=2, style=dotted];
m2_80 -> m2_81  [key=0, style=solid];
m2_80 -> m2_41  [key=2, style=dotted];
m2_81 -> m2_82  [key=0, style=solid];
m2_81 -> m2_42  [key=2, style=dotted];
m2_82 -> m2_83  [key=0, style=solid];
m2_82 -> m2_43  [key=2, style=dotted];
m2_83 -> m2_84  [key=0, style=solid];
m2_83 -> m2_26  [key=2, style=dotted];
m2_84 -> m2_76  [key=0, style=bold, color=blue];
m2_14 -> m2_15  [key=0, style=solid];
m2_14 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label=jobsEnqueued];
m2_14 -> m2_18  [key=1, style=dashed, color=darkseagreen4, label=jobsEnqueued];
m2_14 -> m2_19  [key=1, style=dashed, color=darkseagreen4, label=jobsEnqueued];
m2_14 -> m2_14  [key=3, color=darkorchid, style=bold, label="Local variable int jobsEnqueued"];
m2_15 -> m2_16  [key=0, style=solid];
m2_15 -> m2_17  [key=0, style=solid];
m2_15 -> m2_18  [key=0, style=solid];
m2_15 -> m2_22  [key=2, style=dotted];
m2_16 -> m2_17  [key=0, style=solid, color=green];
m2_16 -> m2_0  [key=2, style=dotted];
m2_16 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label=jobsEnqueued];
m2_16 -> m2_18  [key=1, style=dashed, color=darkseagreen4, label=jobsEnqueued];
m2_16 -> m2_19  [key=1, style=dashed, color=darkseagreen4, label=jobsEnqueued];
m2_17 -> m2_14  [key=0, style=bold, color=blue];
m2_17 -> m2_15  [key=0, style=solid, color=green];
m2_17 -> m2_18  [key=0, style=solid, color=green];
m2_49 -> m2_50  [key=0, style=solid];
m2_49 -> m2_42  [key=2, style=dotted];
m2_53 -> m2_44  [key=0, style=bold, color=blue];
m2_53 -> m2_20  [key=1, style=dashed, color=green, label="Hangfire.Server.DelayedJobScheduler"];
m2_53 -> m2_15  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.DelayedJobScheduler"];
m2_53 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.DelayedJobScheduler"];
m2_53 -> m2_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.DelayedJobScheduler"];
m2_53 -> m2_26  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.DelayedJobScheduler"];
m2_53 -> m2_35  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.DelayedJobScheduler"];
m2_6 -> m2_9  [key=0, style=solid];
m2_6 -> m2_10  [key=2, style=dotted];
m2_64 -> m2_65  [key=0, style=solid];
m2_65 -> m2_66  [key=0, style=solid];
m2_65 -> m2_39  [key=2, style=dotted];
m2_66 -> m2_67  [key=0, style=solid];
m2_66 -> m2_22  [key=2, style=dotted];
m2_67 -> m2_68  [key=0, style=solid];
m2_67 -> m2_40  [key=2, style=dotted];
m2_68 -> m2_69  [key=0, style=solid];
m2_68 -> m2_41  [key=2, style=dotted];
m2_69 -> m2_70  [key=0, style=solid];
m2_69 -> m2_41  [key=2, style=dotted];
m2_70 -> m2_71  [key=0, style=solid];
m2_70 -> m2_42  [key=2, style=dotted];
m2_71 -> m2_72  [key=0, style=solid];
m2_71 -> m2_43  [key=2, style=dotted];
m2_72 -> m2_73  [key=0, style=solid];
m2_72 -> m2_42  [key=2, style=dotted];
m2_73 -> m2_74  [key=0, style=solid];
m2_73 -> m2_43  [key=2, style=dotted];
m2_74 -> m2_75  [key=0, style=solid];
m2_74 -> m2_26  [key=2, style=dotted];
m2_75 -> m2_64  [key=0, style=bold, color=blue];
m2_55 -> m2_56  [key=0, style=solid];
m2_56 -> m2_57  [key=0, style=solid];
m2_56 -> m2_39  [key=2, style=dotted];
m2_57 -> m2_58  [key=0, style=solid];
m2_57 -> m2_22  [key=2, style=dotted];
m2_58 -> m2_59  [key=0, style=solid];
m2_58 -> m2_40  [key=2, style=dotted];
m2_59 -> m2_60  [key=0, style=solid];
m2_59 -> m2_41  [key=2, style=dotted];
m2_60 -> m2_61  [key=0, style=solid];
m2_60 -> m2_42  [key=2, style=dotted];
m2_61 -> m2_62  [key=0, style=solid];
m2_61 -> m2_43  [key=2, style=dotted];
m2_62 -> m2_63  [key=0, style=solid];
m2_62 -> m2_26  [key=2, style=dotted];
m2_63 -> m2_55  [key=0, style=bold, color=blue];
m2_18 -> m2_20  [key=0, style=solid, color=green];
m2_18 -> m2_19  [key=0, style=solid];
m2_20 -> m2_21  [key=0, style=solid, color=green];
m2_20 -> m2_24  [key=2, style=dotted, color=green];
m2_20 -> m2_18  [key=0, style=bold, color=blue];
m2_19 -> m2_20  [key=0, style=solid, color=green];
m2_19 -> m2_23  [key=2, style=dotted];
m2_19 -> m2_21  [key=2, style=dotted];
m2_8 -> m2_9  [key=0, style=solid];
m2_94 -> m2_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m2_94 -> m2_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m2_94 -> m2_46  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m2_94 -> m2_52  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m2_94 -> m2_57  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m2_94 -> m2_62  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m2_94 -> m2_66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m2_94 -> m2_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m2_94 -> m2_78  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m2_94 -> m2_83  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m2_94 -> m2_87  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m2_94 -> m2_92  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m3_10 -> m3_11  [key=0, style=solid];
m3_10 -> m3_15  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m3_5 -> m3_6  [key=0, style=solid];
m3_9 -> m3_6  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_0 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.IServerProcess"];
m3_0 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m3_0 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IStateMachineFactory"];
m3_0 -> m3_7  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=0, style=solid];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_5  [key=0, style=solid];
m3_6 -> m3_7  [key=0, style=solid, color=green];
m3_6 -> m3_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m3_7 -> m3_8  [key=0, style=solid, color=green];
m3_7 -> m3_9  [key=0, style=solid, color=green];
m3_2 -> m3_8  [key=0, style=solid];
m3_2 -> m3_9  [key=2, style=dotted];
m3_2 -> m3_4  [key=0, style=solid];
m3_2 -> m3_5  [key=2, style=dotted];
m3_4 -> m3_8  [key=0, style=solid];
m3_4 -> m3_9  [key=2, style=dotted];
m3_4 -> m3_0  [key=0, style=bold, color=blue];
m3_8 -> m3_0  [key=0, style=bold, color=blue];
m3_8 -> m3_7  [key=0, style=solid, color=green];
m3_8 -> m3_10  [key=2, style=dotted];
m3_21 -> m3_22  [key=0, style=solid];
m3_22 -> m3_23  [key=0, style=solid];
m3_23 -> m3_21  [key=0, style=bold, color=blue];
m3_11 -> m3_12  [key=0, style=solid];
m3_11 -> m3_16  [key=0, style=solid];
m3_11 -> m3_18  [key=2, style=dotted];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_14  [key=2, style=dotted];
m3_12 -> m3_15  [key=0, style=solid];
m3_13 -> m3_11  [key=0, style=bold, color=blue];
m3_13 -> m3_14  [key=0, style=solid];
m3_13 -> m3_19  [key=2, style=dotted];
m3_18 -> m3_24  [key=0, style=solid];
m3_18 -> m3_28  [key=3, color=darkorchid, style=bold, label="method methodReturn bool EnqueueNextScheduledJob"];
m3_18 -> m3_32  [key=3, color=darkorchid, style=bold, label="method methodReturn bool EnqueueNextScheduledJob"];
m3_24 -> m3_25  [key=0, style=solid];
m3_24 -> m3_34  [key=2, style=dotted];
m3_24 -> m3_26  [key=1, style=dashed, color=darkseagreen4, label=connection];
m3_24 -> m3_29  [key=1, style=dashed, color=darkseagreen4, label=connection];
m3_25 -> m3_26  [key=0, style=solid];
m3_25 -> m3_35  [key=2, style=dotted];
m3_26 -> m3_27  [key=0, style=solid];
m3_26 -> m3_36  [key=2, style=dotted];
m3_26 -> m3_31  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m3_29 -> m3_30  [key=0, style=solid];
m3_29 -> m3_38  [key=2, style=dotted];
m3_29 -> m3_31  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_29  [key=0, style=solid];
m3_27 -> m3_37  [key=2, style=dotted];
m3_31 -> m3_32  [key=0, style=solid];
m3_31 -> m3_40  [key=2, style=dotted];
m3_28 -> m3_33  [key=0, style=solid];
m3_30 -> m3_31  [key=0, style=solid];
m3_30 -> m3_39  [key=2, style=dotted];
m3_32 -> m3_33  [key=0, style=solid];
m3_33 -> m3_18  [key=0, style=bold, color=blue];
m3_14 -> m3_15  [key=0, style=solid];
m3_15 -> m3_17  [key=0, style=solid];
m3_15 -> m3_20  [key=2, style=dotted];
m3_15 -> m3_15  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m3_15 -> m3_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.InfiniteLoopProcess"];
m3_15 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.InfiniteLoopProcess"];
m3_15 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.InfiniteLoopProcess"];
m3_16 -> m3_17  [key=0, style=solid];
m3_17 -> m3_10  [key=0, style=bold, color=blue];
m3_41 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.SchedulePoller"];
m3_41 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.SchedulePoller"];
m3_41 -> m3_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.SchedulePoller"];
m3_41 -> m3_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.SchedulePoller"];
m3_41 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.SchedulePoller"];
m3_41 -> m3_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.SchedulePoller"];
m3_41 -> m3_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.SchedulePoller"];
m3_41 -> m3_15  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.SchedulePoller"];
m3_41 -> m3_16  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.SchedulePoller"];
m3_41 -> m3_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.SchedulePoller"];
m3_41 -> m3_29  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.SchedulePoller"];
m5_27 -> m5_31  [key=0, style=solid];
m5_27 -> m5_32  [key=2, style=dotted];
m5_27 -> m5_35  [key=2, style=dotted];
m5_27 -> m5_36  [key=2, style=dotted];
m5_22 -> m5_23  [key=0, style=solid];
m5_22 -> m5_27  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_22 -> m5_29  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_22 -> m5_30  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_23 -> m5_24  [key=0, style=solid];
m5_23 -> m5_32  [key=2, style=dotted];
m5_23 -> m5_33  [key=2, style=dotted];
m5_23 -> m5_25  [key=1, style=dashed, color=darkseagreen4, label=flags];
m5_29 -> m5_30  [key=0, style=solid];
m5_29 -> m5_39  [key=2, style=dotted];
m5_30 -> m5_31  [key=0, style=solid];
m5_30 -> m5_40  [key=2, style=dotted];
m5_24 -> m5_25  [key=0, style=solid];
m5_24 -> m5_26  [key=1, style=dashed, color=darkseagreen4, label=fetched];
m5_24 -> m5_28  [key=1, style=dashed, color=darkseagreen4, label=fetched];
m5_25 -> m5_26  [key=0, style=solid];
m5_25 -> m5_28  [key=1, style=dashed, color=darkseagreen4, label="@checked"];
m5_26 -> m5_27  [key=0, style=solid];
m5_26 -> m5_28  [key=0, style=solid];
m5_26 -> m5_34  [key=2, style=dotted];
m5_28 -> m5_29  [key=0, style=solid];
m5_28 -> m5_31  [key=0, style=solid];
m5_28 -> m5_37  [key=2, style=dotted];
m5_28 -> m5_38  [key=2, style=dotted];
m5_31 -> m5_22  [key=0, style=bold, color=blue];
m5_11 -> m5_12  [key=0, style=solid];
m5_11 -> m5_17  [key=2, style=dotted];
m5_11 -> m5_18  [key=2, style=dotted];
m5_11 -> m5_19  [key=2, style=dotted];
m5_18 -> m5_16  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_0 -> m5_2  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_3  [key=2, style=dotted];
m5_2 -> m5_0  [key=0, style=bold, color=blue];
m5_2 -> m5_3  [key=0, style=solid];
m5_12 -> m5_13  [key=0, style=solid];
m5_12 -> m5_17  [key=2, style=dotted];
m5_12 -> m5_20  [key=2, style=dotted];
m5_3 -> m5_0  [key=0, style=bold, color=blue];
m5_13 -> m5_14  [key=0, style=solid];
m5_13 -> m5_10  [key=0, style=solid];
m5_59 -> m5_60  [key=0, style=solid];
m5_59 -> m5_62  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_60 -> m5_61  [key=0, style=solid];
m5_60 -> m5_62  [key=0, style=solid];
m5_60 -> m5_50  [key=2, style=dotted];
m5_62 -> m5_63  [key=0, style=solid];
m5_62 -> m5_50  [key=2, style=dotted];
m5_62 -> m5_58  [key=2, style=dotted];
m5_61 -> m5_63  [key=0, style=solid];
m5_63 -> m5_59  [key=0, style=bold, color=blue];
m5_8 -> m5_9  [key=0, style=solid, color=green];
m5_8 -> m5_13  [key=2, style=dotted];
m5_8 -> m5_14  [key=2, style=dotted];
m5_9 -> m5_10  [key=0, style=solid, color=green];
m5_9 -> m5_16  [key=2, style=dotted];
m5_9 -> m5_15  [key=2, style=dotted, color=green];
m5_10 -> m5_11  [key=0, style=solid];
m5_10 -> m5_15  [key=0, style=solid];
m5_10 -> m5_12  [key=1, style=dashed, color=darkseagreen4, label=queue];
m5_10 -> m5_14  [key=1, style=dashed, color=darkseagreen4, label=queue];
m5_10 -> m5_4  [key=0, style=bold, color=blue];
m5_14 -> m5_13  [key=0, style=solid];
m5_14 -> m5_21  [key=2, style=dotted];
m5_15 -> m5_8  [key=0, style=bold, color=blue];
m5_16 -> m5_17  [key=0, style=solid];
m5_17 -> m5_18  [key=0, style=solid];
m5_17 -> m5_19  [key=2, style=dotted];
m5_4 -> m5_5  [key=0, style=solid];
m5_4 -> m5_9  [key=1, style=dashed, color=green, label="Hangfire.Server.BackgroundProcessContext"];
m5_5 -> m5_6  [key=0, style=solid];
m5_5 -> m5_7  [key=2, style=dotted];
m5_5 -> m5_11  [key=2, style=dotted];
m5_6 -> m5_4  [key=0, style=bold, color=blue];
m5_6 -> m5_7  [key=0, style=solid];
m5_6 -> m5_8  [key=1, style=dashed, color=darkseagreen4, label=serversRemoved];
m5_6 -> m5_12  [key=2, style=dotted];
m5_64 -> m5_65  [key=0, style=solid];
m5_65 -> m5_66  [key=0, style=solid];
m5_65 -> m5_68  [key=0, style=solid];
m5_65 -> m5_70  [key=0, style=solid];
m5_66 -> m5_67  [key=0, style=solid];
m5_66 -> m5_8  [key=2, style=dotted];
m5_68 -> m5_69  [key=0, style=solid];
m5_67 -> m5_65  [key=0, style=solid];
m5_67 -> m5_68  [key=0, style=solid];
m5_67 -> m5_70  [key=0, style=solid];
m5_67 -> m5_71  [key=2, style=dotted];
m5_69 -> m5_70  [key=0, style=solid];
m5_69 -> m5_72  [key=2, style=dotted];
m5_70 -> m5_64  [key=0, style=bold, color=blue];
m5_7 -> m5_9  [key=0, style=solid, color=green];
m5_7 -> m5_8  [key=0, style=solid];
m5_39 -> m5_41  [key=0, style=solid];
m5_39 -> m5_45  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_39 -> m5_46  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_41 -> m5_42  [key=0, style=solid];
m5_41 -> m5_32  [key=2, style=dotted];
m5_41 -> m5_48  [key=2, style=dotted];
m5_41 -> m5_46  [key=1, style=dashed, color=darkseagreen4, label=jobType];
m5_45 -> m5_47  [key=0, style=solid];
m5_45 -> m5_51  [key=2, style=dotted];
m5_45 -> m5_52  [key=2, style=dotted];
m5_46 -> m5_47  [key=0, style=solid];
m5_46 -> m5_53  [key=2, style=dotted];
m5_46 -> m5_54  [key=2, style=dotted];
m5_46 -> m5_17  [key=2, style=dotted];
m5_46 -> m5_52  [key=2, style=dotted];
m5_42 -> m5_43  [key=0, style=solid];
m5_42 -> m5_49  [key=2, style=dotted];
m5_42 -> m5_44  [key=1, style=dashed, color=darkseagreen4, label=queue];
m5_42 -> m5_45  [key=1, style=dashed, color=darkseagreen4, label=queue];
m5_43 -> m5_44  [key=0, style=solid];
m5_43 -> m5_45  [key=1, style=dashed, color=darkseagreen4, label=recoverFromStates];
m5_43 -> m5_46  [key=1, style=dashed, color=darkseagreen4, label=recoverFromStates];
m5_44 -> m5_45  [key=0, style=solid];
m5_44 -> m5_46  [key=0, style=solid];
m5_44 -> m5_50  [key=2, style=dotted];
m5_47 -> m5_39  [key=0, style=bold, color=blue];
m5_20 -> m5_9  [key=1, style=dashed, color=green, label="Hangfire.Server.ServerWatchdog"];
m5_20 -> m5_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerWatchdog"];
m5_20 -> m5_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerWatchdog"];
m5_20 -> m5_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerWatchdog"];
m5_20 -> m5_17  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerWatchdog"];
m5_55 -> m5_56  [key=0, style=solid];
m5_56 -> m5_57  [key=0, style=solid];
m5_56 -> m5_50  [key=2, style=dotted];
m5_56 -> m5_58  [key=2, style=dotted];
m5_57 -> m5_55  [key=0, style=bold, color=blue];
m5_73 -> m5_74  [key=0, style=solid];
m5_73 -> m5_75  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.Thread"];
m5_74 -> m5_75  [key=0, style=solid];
m5_74 -> m5_77  [key=2, style=dotted];
m5_75 -> m5_76  [key=0, style=solid];
m5_75 -> m5_78  [key=2, style=dotted];
m5_76 -> m5_73  [key=0, style=bold, color=blue];
m5_79 -> m5_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.DequeuedJobsWatcher"];
m5_79 -> m5_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.DequeuedJobsWatcher"];
m5_79 -> m5_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.DequeuedJobsWatcher"];
m5_79 -> m5_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.DequeuedJobsWatcher"];
m5_79 -> m5_12  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.DequeuedJobsWatcher"];
m5_79 -> m5_14  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.DequeuedJobsWatcher"];
m5_79 -> m5_23  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.DequeuedJobsWatcher"];
m5_79 -> m5_27  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.DequeuedJobsWatcher"];
m5_79 -> m5_28  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.DequeuedJobsWatcher"];
m5_79 -> m5_29  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.DequeuedJobsWatcher"];
m5_79 -> m5_30  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.DequeuedJobsWatcher"];
m5_79 -> m5_41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.DequeuedJobsWatcher"];
m5_79 -> m5_45  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.DequeuedJobsWatcher"];
m5_79 -> m5_46  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.DequeuedJobsWatcher"];
m5_79 -> m5_66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.DequeuedJobsWatcher"];
m5_79 -> m5_67  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.DequeuedJobsWatcher"];
m5_79 -> m5_69  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.DequeuedJobsWatcher"];
m5_79 -> m5_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.DequeuedJobsWatcher"];
m6_21 -> m6_22  [key=0, style=solid];
m6_22 -> m6_23  [key=0, style=solid];
m6_22 -> m6_24  [key=2, style=dotted];
m6_23 -> m6_21  [key=0, style=bold, color=blue];
m6_17 -> m6_18  [key=0, style=solid];
m6_18 -> m6_19  [key=0, style=solid];
m6_18 -> m6_20  [key=2, style=dotted];
m6_19 -> m6_17  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid];
m6_0 -> m6_2  [key=1, style=dashed, color=darkseagreen4, label=object];
m6_0 -> m6_3  [key=1, style=dashed, color=darkseagreen4, label=long];
m6_0 -> m6_4  [key=1, style=dashed, color=darkseagreen4, label=long];
m6_1 -> m6_2  [key=0, style=solid];
m6_2 -> m6_3  [key=0, style=solid];
m6_3 -> m6_4  [key=0, style=solid];
m6_4 -> m6_5  [key=0, style=solid];
m6_5 -> m6_0  [key=0, style=bold, color=blue];
m6_6 -> m6_7  [key=0, style=solid];
m6_7 -> m6_8  [key=0, style=solid];
m6_7 -> n28  [key=2, style=dotted];
m6_7 -> m6_13  [key=2, style=dotted];
m6_7 -> m6_14  [key=2, style=dotted];
m6_7 -> m6_9  [key=1, style=dashed, color=red, label=data];
m6_7 -> m6_10  [key=1, style=dashed, color=darkseagreen4, label=data];
m6_8 -> m6_9  [key=0, style=solid, color=red];
m6_8 -> m6_10  [key=0, style=solid];
m6_9 -> m6_10  [key=0, style=solid, color=red];
m6_9 -> m6_15  [key=2, style=dotted, color=red];
m6_9 -> m6_16  [key=2, style=dotted, color=red];
m6_10 -> m6_11  [key=0, style=solid];
m6_11 -> m6_6  [key=0, style=bold, color=blue];
m6_25 -> m6_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.SucceededState"];
m6_25 -> m6_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.SucceededState"];
m6_25 -> m6_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.SucceededState"];
m6_25 -> m6_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.SucceededState"];
m6_25 -> m6_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.SucceededState"];
m6_25 -> m6_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.SucceededState"];
m6_25 -> m6_9  [key=1, style=dashed, color=red, label="Hangfire.States.SucceededState"];
m7_23 -> m7_19  [key=0, style=bold, color=blue];
m7_20 -> m7_24  [key=2, style=dotted];
m7_20 -> m7_21  [key=0, style=solid];
m7_20 -> m7_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerHeartbeat"];
m7_20 -> m7_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerHeartbeat"];
m7_20 -> m7_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerHeartbeat"];
m7_20 -> m7_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerHeartbeat"];
m7_21 -> m7_17  [key=2, style=dotted];
m7_21 -> m7_22  [key=0, style=solid];
m7_19 -> m7_20  [key=0, style=solid];
m7_19 -> m7_17  [key=0, style=bold, color=blue];
m7_22 -> m7_23  [key=0, style=solid];
m7_22 -> m7_25  [key=2, style=dotted];
m7_22 -> m7_26  [key=2, style=dotted];
m7_8 -> m7_44  [key=0, style=solid];
m7_14 -> m7_15  [key=0, style=solid];
m7_14 -> m7_3  [key=2, style=dotted];
m7_3 -> m7_4  [key=0, style=solid];
m7_3 -> m7_5  [key=0, style=solid];
m7_17 -> m7_18  [key=0, style=solid];
m7_18 -> m7_19  [key=0, style=solid];
m7_44 -> m7_24  [key=2, style=dotted];
m7_44 -> m7_45  [key=0, style=solid];
m7_45 -> m7_8  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid];
m7_0 -> m7_3  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_0 -> m7_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m7_0 -> m7_6  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_3  [key=0, style=solid];
m7_5 -> m7_6  [key=0, style=solid];
m7_5 -> m7_8  [key=2, style=dotted];
m7_6 -> m7_7  [key=0, style=solid];
m7_6 -> m7_3  [key=2, style=dotted];
m7_2 -> m7_7  [key=0, style=solid];
m7_2 -> m7_8  [key=2, style=dotted];
m7_2 -> m7_0  [key=0, style=bold, color=blue];
m7_4 -> m7_7  [key=0, style=solid];
m7_4 -> m7_8  [key=2, style=dotted];
m7_4 -> m7_5  [key=0, style=solid];
m7_7 -> m7_0  [key=0, style=bold, color=blue];
m7_7 -> m7_4  [key=0, style=bold, color=blue];
m7_9 -> m7_10  [key=0, style=solid];
m7_9 -> m7_12  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m7_11 -> m7_17  [key=2, style=dotted];
m7_11 -> m7_12  [key=0, style=solid];
m7_11 -> m7_13  [key=1, style=dashed, color=darkseagreen4, label=data];
m7_11 -> m7_14  [key=1, style=dashed, color=darkseagreen4, label=data];
m7_11 -> m7_15  [key=1, style=dashed, color=darkseagreen4, label=data];
m7_10 -> m7_11  [key=0, style=solid];
m7_10 -> m7_8  [key=2, style=dotted];
m7_10 -> m7_13  [key=1, style=dashed, color=darkseagreen4, label=state];
m7_10 -> m7_14  [key=2, style=dotted];
m7_12 -> m7_13  [key=0, style=solid];
m7_12 -> m7_3  [key=2, style=dotted];
m7_12 -> m7_16  [key=2, style=dotted];
m7_12 -> m7_12  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m7_13 -> m7_14  [key=0, style=solid];
m7_13 -> m7_18  [key=2, style=dotted];
m7_13 -> m7_3  [key=2, style=dotted];
m7_13 -> m7_9  [key=0, style=bold, color=blue];
m7_15 -> m7_16  [key=0, style=solid];
m7_15 -> m7_3  [key=2, style=dotted];
m7_16 -> m7_9  [key=0, style=bold, color=blue];
m7_40 -> m7_41  [key=0, style=solid];
m7_41 -> m7_8  [key=2, style=dotted];
m7_41 -> m7_42  [key=0, style=solid];
m7_42 -> m7_26  [key=2, style=dotted];
m7_42 -> m7_43  [key=0, style=solid];
m7_43 -> m7_40  [key=0, style=bold, color=blue];
m7_27 -> m7_28  [key=0, style=solid, color=green];
m7_28 -> m7_29  [key=0, style=solid, color=green];
m7_28 -> m7_33  [key=2, style=dotted, color=green];
m7_29 -> m7_30  [key=0, style=solid, color=green];
m7_29 -> m7_24  [key=2, style=dotted, color=green];
m7_30 -> m7_31  [key=0, style=solid, color=green];
m7_30 -> m7_17  [key=2, style=dotted, color=green];
m7_31 -> m7_32  [key=0, style=solid, color=green];
m7_31 -> m7_34  [key=2, style=dotted, color=green];
m7_32 -> m7_27  [key=0, style=bold, color=blue];
m7_35 -> m7_36  [key=0, style=solid];
m7_36 -> m7_8  [key=2, style=dotted];
m7_36 -> m7_37  [key=0, style=solid];
m7_37 -> m7_38  [key=0, style=solid];
m7_37 -> m7_39  [key=2, style=dotted];
m7_38 -> m7_35  [key=0, style=bold, color=blue];
}
