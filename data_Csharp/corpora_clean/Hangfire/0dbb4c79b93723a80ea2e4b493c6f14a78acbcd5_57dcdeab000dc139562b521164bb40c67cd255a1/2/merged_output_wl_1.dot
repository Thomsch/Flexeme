digraph  {
n33 [label="Hangfire.AutomaticRetryAttribute", span=""];
n0 [cluster="Hangfire.AutomaticRetryAttribute.AutomaticRetryAttribute()", label="Entry Hangfire.AutomaticRetryAttribute.AutomaticRetryAttribute()", span="14-14"];
n1 [cluster="Hangfire.AutomaticRetryAttribute.AutomaticRetryAttribute()", label="Attempts = DefaultRetryAttempts", span="16-16"];
n2 [cluster="Hangfire.AutomaticRetryAttribute.AutomaticRetryAttribute()", label="LogEvents = true", span="17-17"];
n3 [cluster="Hangfire.AutomaticRetryAttribute.AutomaticRetryAttribute()", label="Exit Hangfire.AutomaticRetryAttribute.AutomaticRetryAttribute()", span="14-14"];
n4 [cluster="Hangfire.AutomaticRetryAttribute.OnStateElection(Hangfire.States.ElectStateContext)", label="Entry Hangfire.AutomaticRetryAttribute.OnStateElection(Hangfire.States.ElectStateContext)", span="35-35"];
n5 [cluster="Hangfire.AutomaticRetryAttribute.OnStateElection(Hangfire.States.ElectStateContext)", label="var failedState = context.CandidateState as FailedState", span="37-37"];
n8 [cluster="Hangfire.AutomaticRetryAttribute.OnStateElection(Hangfire.States.ElectStateContext)", label="var retryAttempt = context.GetJobParameter<int>(''RetryCount'') + 1", span="44-44"];
n11 [cluster="Hangfire.AutomaticRetryAttribute.OnStateElection(Hangfire.States.ElectStateContext)", color=red, community=0, label="0: context.SetJobParameter(''RetryCount'', retryAttempt)", span="50-50"];
n12 [cluster="Hangfire.AutomaticRetryAttribute.OnStateElection(Hangfire.States.ElectStateContext)", color=red, community=1, label="0: context.CandidateState = new ScheduledState(delay)\r\n                {\r\n                    Reason = String.Format(''Retry attempt {0} of {1}'', retryAttempt, Attempts)\r\n                }", span="54-57"];
n14 [cluster="Hangfire.AutomaticRetryAttribute.OnStateElection(Hangfire.States.ElectStateContext)", color=red, community=1, label="0: Logger.WarnFormat(\r\n                        ''Failed to process the job '{0}': an exception occurred. Retry attempt {1} of {2} will be performed in {3}.'',\r\n                        failedState.Exception,\r\n                        context.JobId,\r\n                        retryAttempt,\r\n                        Attempts,\r\n                        delay)", span="61-67"];
n16 [cluster="Hangfire.AutomaticRetryAttribute.OnStateElection(Hangfire.States.ElectStateContext)", label="Logger.ErrorFormat(\r\n                        ''Failed to process the job '{0}': an exception occurred.'',\r\n                        failedState.Exception,\r\n                        context.JobId)", span="74-77"];
n6 [cluster="Hangfire.AutomaticRetryAttribute.OnStateElection(Hangfire.States.ElectStateContext)", label="failedState == null", span="38-38"];
n7 [cluster="Hangfire.AutomaticRetryAttribute.OnStateElection(Hangfire.States.ElectStateContext)", label="return;", span="41-41"];
n9 [cluster="Hangfire.AutomaticRetryAttribute.OnStateElection(Hangfire.States.ElectStateContext)", label="retryAttempt <= Attempts", span="46-46"];
n18 [cluster="Hangfire.States.ElectStateContext.GetJobParameter<T>(string)", label="Entry Hangfire.States.ElectStateContext.GetJobParameter<T>(string)", span="54-54"];
n10 [cluster="Hangfire.AutomaticRetryAttribute.OnStateElection(Hangfire.States.ElectStateContext)", color=red, community=0, label="0: var delay = TimeSpan.FromSeconds(SecondsToDelay(retryAttempt))", span="48-48"];
n15 [cluster="Hangfire.AutomaticRetryAttribute.OnStateElection(Hangfire.States.ElectStateContext)", label=LogEvents, span="72-72"];
n19 [cluster="Hangfire.AutomaticRetryAttribute.SecondsToDelay(long)", label="Entry Hangfire.AutomaticRetryAttribute.SecondsToDelay(long)", span="83-83"];
n20 [cluster="System.TimeSpan.FromSeconds(double)", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
n21 [cluster="Hangfire.States.ElectStateContext.SetJobParameter<T>(string, T)", label="Entry Hangfire.States.ElectStateContext.SetJobParameter<T>(string, T)", span="49-49"];
n13 [cluster="Hangfire.AutomaticRetryAttribute.OnStateElection(Hangfire.States.ElectStateContext)", color=red, community=0, label="0: LogEvents", span="59-59"];
n22 [cluster="Hangfire.States.ScheduledState.ScheduledState(System.TimeSpan)", label="Entry Hangfire.States.ScheduledState.ScheduledState(System.TimeSpan)", span="27-27"];
n23 [cluster="string.Format(string, object, object)", label="Entry string.Format(string, object, object)", span="0-0"];
n17 [cluster="Hangfire.AutomaticRetryAttribute.OnStateElection(Hangfire.States.ElectStateContext)", label="Exit Hangfire.AutomaticRetryAttribute.OnStateElection(Hangfire.States.ElectStateContext)", span="35-35"];
n25 [cluster="Unk.ErrorFormat", label="Entry Unk.ErrorFormat", span=""];
n24 [cluster="Unk.WarnFormat", label="Entry Unk.WarnFormat", span=""];
n26 [cluster="Hangfire.AutomaticRetryAttribute.SecondsToDelay(long)", label="var random = new Random()", span="85-85"];
n27 [cluster="Hangfire.AutomaticRetryAttribute.SecondsToDelay(long)", label="return (int)Math.Round(\r\n                Math.Pow(retryCount - 1, 4) + 15 + (random.Next(30) * (retryCount)));", span="86-87"];
n29 [cluster="System.Random.Random()", label="Entry System.Random.Random()", span="0-0"];
n28 [cluster="Hangfire.AutomaticRetryAttribute.SecondsToDelay(long)", label="Exit Hangfire.AutomaticRetryAttribute.SecondsToDelay(long)", span="83-83"];
n30 [cluster="System.Math.Pow(double, double)", label="Entry System.Math.Pow(double, double)", span="0-0"];
n31 [cluster="System.Random.Next(int)", label="Entry System.Random.Next(int)", span="0-0"];
n32 [cluster="System.Math.Round(double)", label="Entry System.Math.Round(double)", span="0-0"];
d2 [cluster="HangFire.SqlServer.SqlServerFetcher.SqlServerFetcher(SqlConnection, System.Collections.Generic.IEnumerable<string>)", color=green, community=0, label="0: _queues = queues", span="24-24"];
d36 [label="HangFire.SqlServer.SqlServerFetcher", span=""];
d0 [cluster="HangFire.SqlServer.SqlServerFetcher.SqlServerFetcher(SqlConnection, System.Collections.Generic.IEnumerable<string>)", label="Entry HangFire.SqlServer.SqlServerFetcher.SqlServerFetcher(SqlConnection, System.Collections.Generic.IEnumerable<string>)", span="21-21"];
d1 [cluster="HangFire.SqlServer.SqlServerFetcher.SqlServerFetcher(SqlConnection, System.Collections.Generic.IEnumerable<string>)", label="_connection = connection", span="23-23"];
d3 [cluster="HangFire.SqlServer.SqlServerFetcher.SqlServerFetcher(SqlConnection, System.Collections.Generic.IEnumerable<string>)", label="Exit HangFire.SqlServer.SqlServerFetcher.SqlServerFetcher(SqlConnection, System.Collections.Generic.IEnumerable<string>)", span="21-21"];
d18 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", color=green, community=0, label="0: cancellationToken.WaitHandle.WaitOne(TimeSpan.FromSeconds(5))", span="75-75"];
d4 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", label="Entry HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", span="27-27"];
d17 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", label="job == null && currentQueryIndex == fetchQueries.Length - 1", span="73-73"];
d19 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", color=green, community=0, label="0: return null;", span="77-77"];
d20 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", color=green, community=0, label="0: currentQueryIndex = (currentQueryIndex + 1) % fetchQueries.Length", span="81-81"];
d32 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
d21 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", color=green, community=0, label="0: job == null", span="82-82"];
d5 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", label="SqlJob job = null", span="29-29"];
d15 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", label="job = _connection.Query<SqlJob>(\r\n                        @''select Id, InvocationData, Arguments from HangFire.Job where Id = @id'',\r\n                        parameters)\r\n                        .SingleOrDefault()", span="65-68"];
d10 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", label="var currentQueryIndex = 0", span="46-46"];
d22 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", color=green, community=0, label="0: var invocationData = JobHelper.FromJson<InvocationData>(job.InvocationData)", span="84-84"];
d23 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", color=green, community=0, label="0: return new JobPayload(job.Id.ToString(), queueName, invocationData)\r\n            {\r\n                Arguments = job.Arguments\r\n            };", span="86-89"];
d33 [cluster="HangFire.Common.JobHelper.FromJson<T>(string)", label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="28-28"];
d6 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", label="string queueName = null", span="30-30"];
d16 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", label="queueName = idAndQueue.Queue", span="70-70"];
d24 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", label="Exit HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", span="27-27"];
d34 [cluster="HangFire.Server.JobPayload.JobPayload(string, string, HangFire.Storage.InvocationData)", label="Entry HangFire.Server.JobPayload.JobPayload(string, string, HangFire.Storage.InvocationData)", span="23-23"];
d35 [cluster="int.ToString()", label="Entry int.ToString()", span="0-0"];
d7 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", color=green, community=0, label="0: string fetchJobSql = @''\r\nset transaction isolation level read committed\r\nupdate top (1) HangFire.JobQueue set FetchedAt = GETUTCDATE()\r\noutput INSERTED.JobId, INSERTED.Queue\r\nwhere FetchedAt is null\r\nand Queue in @queues''", span="32-37"];
d8 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", color=green, community=0, label="0: string fetchTimedOutJobSql = @''\r\nupdate top (1) HangFire.JobQueue set FetchedAt = GETUTCDATE()\r\noutput INSERTED.JobId, INSERTED.Queue\r\nwhere FetchedAt < DATEADD(second, @timeout, GETUTCDATE())\r\nand Queue in @queues''", span="39-43"];
d9 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", label="var fetchQueries = new[] { fetchJobSql, fetchTimedOutJobSql }", span="45-45"];
d11 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", label="var idAndQueue = _connection.Query(\r\n                    fetchQueries[currentQueryIndex],\r\n                    new { queues = _queues, timeout = JobTimeOut.Negate().TotalSeconds })\r\n                    .SingleOrDefault()", span="50-53"];
d12 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", label="idAndQueue != null", span="55-55"];
d14 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", label="parameters.Add(''@id'', idAndQueue.JobId, dbType: DbType.Int32)", span="63-63"];
d13 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", label="var parameters = new DynamicParameters()", span="62-62"];
d30 [cluster="Unk.>", label="Entry Unk.>", span=""];
d27 [cluster="Unk.SingleOrDefault", label="Entry Unk.SingleOrDefault", span=""];
d25 [cluster="System.TimeSpan.Negate()", label="Entry System.TimeSpan.Negate()", span="0-0"];
d26 [cluster="Unk.Query", label="Entry Unk.Query", span=""];
d29 [cluster="Unk.Add", label="Entry Unk.Add", span=""];
d28 [cluster="DynamicParameters.cstr", label="Entry DynamicParameters.cstr", span=""];
m0_8 [cluster="Hangfire.States.FailedState.FailedState(System.Exception)", file="RetryAttributeFacts.cs", label="Entry Hangfire.States.FailedState.FailedState(System.Exception)", span="26-26"];
m0_59 [cluster="Mock<IState>.cstr", file="RetryAttributeFacts.cs", label="Entry Mock<IState>.cstr", span=""];
m0_35 [cluster="Unk.Same", file="RetryAttributeFacts.cs", label="Entry Unk.Same", span=""];
m0_90 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToDeleted_IfRetryAttemptsNumberIsZeroAndOnAttemptsExceedIsSetToDelete()", file="RetryAttributeFacts.cs", label="Entry Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToDeleted_IfRetryAttemptsNumberIsZeroAndOnAttemptsExceedIsSetToDelete()", span="116-116"];
m0_91 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToDeleted_IfRetryAttemptsNumberIsZeroAndOnAttemptsExceedIsSetToDelete()", color=green, community=0, file="RetryAttributeFacts.cs", label="0: _connection.Setup(x => x.GetJobParameter(JobId, ''RetryCount'')).Returns(''0'')", span="118-118"];
m0_92 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToDeleted_IfRetryAttemptsNumberIsZeroAndOnAttemptsExceedIsSetToDelete()", color=green, community=0, file="RetryAttributeFacts.cs", label="0: var filter = new AutomaticRetryAttribute { Attempts = 0, OnAttemptsExceeded = AttemptsExceededAction.Delete }", span="119-119"];
m0_93 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToDeleted_IfRetryAttemptsNumberIsZeroAndOnAttemptsExceedIsSetToDelete()", color=green, community=0, file="RetryAttributeFacts.cs", label="0: filter.OnStateElection(_context.Object)", span="121-121"];
m0_94 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToDeleted_IfRetryAttemptsNumberIsZeroAndOnAttemptsExceedIsSetToDelete()", color=green, community=0, file="RetryAttributeFacts.cs", label="0: Assert.IsType<DeletedState>(_context.Object.CandidateState)", span="123-123"];
m0_95 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToDeleted_IfRetryAttemptsNumberIsZeroAndOnAttemptsExceedIsSetToDelete()", file="RetryAttributeFacts.cs", label="Exit Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToDeleted_IfRetryAttemptsNumberIsZeroAndOnAttemptsExceedIsSetToDelete()", span="116-116"];
m0_17 [cluster="Unk.Equal", file="RetryAttributeFacts.cs", label="Entry Unk.Equal", span=""];
m0_9 [cluster="System.InvalidOperationException.InvalidOperationException()", file="RetryAttributeFacts.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m0_0 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.RetryAttributeFacts()", file="RetryAttributeFacts.cs", label="Entry Hangfire.Core.Tests.RetryAttributeFacts.RetryAttributeFacts()", span="16-16"];
m0_1 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.RetryAttributeFacts()", file="RetryAttributeFacts.cs", label="_failedState = new FailedState(new InvalidOperationException())", span="18-18"];
m0_2 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.RetryAttributeFacts()", file="RetryAttributeFacts.cs", label="_connection = new Mock<IStorageConnection>()", span="19-19"];
m0_3 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.RetryAttributeFacts()", file="RetryAttributeFacts.cs", label="_context = new ElectStateContextMock()", span="21-21"];
m0_16 [cluster="Hangfire.AutomaticRetryAttribute.AutomaticRetryAttribute()", file="RetryAttributeFacts.cs", label="Entry Hangfire.AutomaticRetryAttribute.AutomaticRetryAttribute()", span="20-20"];
m0_11 [cluster="Hangfire.Core.Tests.ElectStateContextMock.ElectStateContextMock()", file="RetryAttributeFacts.cs", label="Entry Hangfire.Core.Tests.ElectStateContextMock.ElectStateContextMock()", span="11-11"];
m0_44 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.CreateFilter()", file="RetryAttributeFacts.cs", label="Entry Hangfire.Core.Tests.RetryAttributeFacts.CreateFilter()", span="126-126"];
m0_99 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.CreateFilter()", file="RetryAttributeFacts.cs", label="return new AutomaticRetryAttribute { Attempts = 1 };", span="128-128"];
m0_100 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.CreateFilter()", file="RetryAttributeFacts.cs", label="Exit Hangfire.Core.Tests.RetryAttributeFacts.CreateFilter()", span="126-126"];
m0_34 [cluster="Hangfire.AutomaticRetryAttribute.OnStateElection(Hangfire.States.ElectStateContext)", file="RetryAttributeFacts.cs", label="Entry Hangfire.AutomaticRetryAttribute.OnStateElection(Hangfire.States.ElectStateContext)", span="44-44"];
m0_71 [cluster="Unk.GetJobParameter", file="RetryAttributeFacts.cs", label="Entry Unk.GetJobParameter", span=""];
m0_66 [cluster="Unk.Setup", file="RetryAttributeFacts.cs", label="Entry Unk.Setup", span=""];
m0_36 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangeStateToScheduled_IfRetryAttemptsWereNotExceeded()", file="RetryAttributeFacts.cs", label="Entry Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangeStateToScheduled_IfRetryAttemptsWereNotExceeded()", span="58-58"];
m0_38 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangeStateToScheduled_IfRetryAttemptsWereNotExceeded()", file="RetryAttributeFacts.cs", label="filter.OnStateElection(_context.Object)", span="61-61"];
m0_39 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangeStateToScheduled_IfRetryAttemptsWereNotExceeded()", file="RetryAttributeFacts.cs", label="Assert.IsType<ScheduledState>(_context.Object.CandidateState)", span="63-63"];
m0_40 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangeStateToScheduled_IfRetryAttemptsWereNotExceeded()", file="RetryAttributeFacts.cs", label="Assert.True(((ScheduledState)_context.Object.CandidateState).EnqueueAt > DateTime.UtcNow)", span="64-64"];
m0_41 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangeStateToScheduled_IfRetryAttemptsWereNotExceeded()", file="RetryAttributeFacts.cs", label="Assert.Contains(''1 of 1'', _context.Object.CandidateState.Reason)", span="65-65"];
m0_42 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangeStateToScheduled_IfRetryAttemptsWereNotExceeded()", file="RetryAttributeFacts.cs", label="_connection.Verify(x => x.SetJobParameter(JobId, ''RetryCount'', ''1''))", span="67-67"];
m0_37 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangeStateToScheduled_IfRetryAttemptsWereNotExceeded()", file="RetryAttributeFacts.cs", label="var filter = CreateFilter()", span="60-60"];
m0_43 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangeStateToScheduled_IfRetryAttemptsWereNotExceeded()", file="RetryAttributeFacts.cs", label="Exit Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangeStateToScheduled_IfRetryAttemptsWereNotExceeded()", span="58-58"];
m0_52 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeAnything_IfCandidateStateIsNotFailedState()", file="RetryAttributeFacts.cs", label="Entry Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeAnything_IfCandidateStateIsNotFailedState()", span="71-71"];
m0_55 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeAnything_IfCandidateStateIsNotFailedState()", file="RetryAttributeFacts.cs", label="_context.CandidateStateValue = state.Object", span="75-75"];
m0_56 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeAnything_IfCandidateStateIsNotFailedState()", file="RetryAttributeFacts.cs", label="filter.OnStateElection(_context.Object)", span="77-77"];
m0_57 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeAnything_IfCandidateStateIsNotFailedState()", file="RetryAttributeFacts.cs", label="Assert.Same(state.Object, _context.Object.CandidateState)", span="79-79"];
m0_54 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeAnything_IfCandidateStateIsNotFailedState()", file="RetryAttributeFacts.cs", label="var state = new Mock<IState>()", span="74-74"];
m0_53 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeAnything_IfCandidateStateIsNotFailedState()", file="RetryAttributeFacts.cs", label="var filter = CreateFilter()", span="73-73"];
m0_58 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeAnything_IfCandidateStateIsNotFailedState()", file="RetryAttributeFacts.cs", label="Exit Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeAnything_IfCandidateStateIsNotFailedState()", span="71-71"];
m0_60 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeState_IfRetryAttemptsNumberExceeded()", file="RetryAttributeFacts.cs", label="Entry Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeState_IfRetryAttemptsNumberExceeded()", span="83-83"];
m0_61 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeState_IfRetryAttemptsNumberExceeded()", file="RetryAttributeFacts.cs", label="_connection.Setup(x => x.GetJobParameter(JobId, ''RetryCount'')).Returns(''1'')", span="85-85"];
m0_63 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeState_IfRetryAttemptsNumberExceeded()", file="RetryAttributeFacts.cs", label="filter.OnStateElection(_context.Object)", span="88-88"];
m0_64 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeState_IfRetryAttemptsNumberExceeded()", file="RetryAttributeFacts.cs", label="Assert.Same(_failedState, _context.Object.CandidateState)", span="90-90"];
m0_62 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeState_IfRetryAttemptsNumberExceeded()", file="RetryAttributeFacts.cs", label="var filter = CreateFilter()", span="86-86"];
m0_65 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeState_IfRetryAttemptsNumberExceeded()", file="RetryAttributeFacts.cs", label="Exit Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeState_IfRetryAttemptsNumberExceeded()", span="83-83"];
m0_12 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.Ctor_SetsPositiveRetryAttemptsNumber_ByDefault()", file="RetryAttributeFacts.cs", label="Entry Hangfire.Core.Tests.RetryAttributeFacts.Ctor_SetsPositiveRetryAttemptsNumber_ByDefault()", span="28-28"];
m0_13 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.Ctor_SetsPositiveRetryAttemptsNumber_ByDefault()", file="RetryAttributeFacts.cs", label="var filter = new AutomaticRetryAttribute()", span="30-30"];
m0_14 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.Ctor_SetsPositiveRetryAttemptsNumber_ByDefault()", file="RetryAttributeFacts.cs", label="Assert.Equal(10, filter.Attempts)", span="31-31"];
m0_15 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.Ctor_SetsPositiveRetryAttemptsNumber_ByDefault()", file="RetryAttributeFacts.cs", label="Exit Hangfire.Core.Tests.RetryAttributeFacts.Ctor_SetsPositiveRetryAttemptsNumber_ByDefault()", span="28-28"];
m0_29 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeState_IfRetryAttemptsIsSetToZero()", file="RetryAttributeFacts.cs", label="Entry Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeState_IfRetryAttemptsIsSetToZero()", span="49-49"];
m0_30 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeState_IfRetryAttemptsIsSetToZero()", file="RetryAttributeFacts.cs", label="var filter = new AutomaticRetryAttribute { Attempts = 0 }", span="51-51"];
m0_31 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeState_IfRetryAttemptsIsSetToZero()", file="RetryAttributeFacts.cs", label="filter.OnStateElection(_context.Object)", span="52-52"];
m0_32 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeState_IfRetryAttemptsIsSetToZero()", file="RetryAttributeFacts.cs", label="Assert.Same(_failedState, _context.Object.CandidateState)", span="54-54"];
m0_33 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeState_IfRetryAttemptsIsSetToZero()", file="RetryAttributeFacts.cs", label="Exit Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_DoesNotChangeState_IfRetryAttemptsIsSetToZero()", span="49-49"];
m0_68 [cluster="lambda expression", file="RetryAttributeFacts.cs", label="Entry lambda expression", span="85-85"];
m0_78 [cluster="lambda expression", file="RetryAttributeFacts.cs", label="Entry lambda expression", span="96-96"];
m0_79 [cluster="lambda expression", color=green, community=0, file="RetryAttributeFacts.cs", label="0: x.GetJobParameter(JobId, ''RetryCount'')", span="96-96"];
m0_80 [cluster="lambda expression", file="RetryAttributeFacts.cs", label="Exit lambda expression", span="96-96"];
m0_87 [cluster="lambda expression", file="RetryAttributeFacts.cs", label="Entry lambda expression", span="107-107"];
m0_88 [cluster="lambda expression", color=green, community=0, file="RetryAttributeFacts.cs", label="0: x.GetJobParameter(JobId, ''RetryCount'')", span="107-107"];
m0_89 [cluster="lambda expression", file="RetryAttributeFacts.cs", label="Exit lambda expression", span="107-107"];
m0_96 [cluster="lambda expression", file="RetryAttributeFacts.cs", label="Entry lambda expression", span="118-118"];
m0_97 [cluster="lambda expression", color=green, community=0, file="RetryAttributeFacts.cs", label="0: x.GetJobParameter(JobId, ''RetryCount'')", span="118-118"];
m0_98 [cluster="lambda expression", file="RetryAttributeFacts.cs", label="Exit lambda expression", span="118-118"];
m0_23 [cluster="lambda expression", file="RetryAttributeFacts.cs", label="new AutomaticRetryAttribute { Attempts = -1 }", span="38-38"];
m0_69 [cluster="lambda expression", file="RetryAttributeFacts.cs", label="x.GetJobParameter(JobId, ''RetryCount'')", span="85-85"];
m0_22 [cluster="lambda expression", file="RetryAttributeFacts.cs", label="Entry lambda expression", span="38-38"];
m0_24 [cluster="lambda expression", file="RetryAttributeFacts.cs", label="Exit lambda expression", span="38-38"];
m0_48 [cluster="lambda expression", file="RetryAttributeFacts.cs", label="Entry lambda expression", span="67-67"];
m0_70 [cluster="lambda expression", file="RetryAttributeFacts.cs", label="Exit lambda expression", span="85-85"];
m0_49 [cluster="lambda expression", file="RetryAttributeFacts.cs", label="x.SetJobParameter(JobId, ''RetryCount'', ''1'')", span="67-67"];
m0_50 [cluster="lambda expression", file="RetryAttributeFacts.cs", label="Exit lambda expression", span="67-67"];
m0_46 [cluster="Unk.Contains", file="RetryAttributeFacts.cs", label="Entry Unk.Contains", span=""];
m0_47 [cluster="Unk.Verify", file="RetryAttributeFacts.cs", label="Entry Unk.Verify", span=""];
m0_81 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToFailed_IfRetryAttemptsNumberExceededAndOnAttemptsExceedIsSetToFail()", file="RetryAttributeFacts.cs", label="Entry Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToFailed_IfRetryAttemptsNumberExceededAndOnAttemptsExceedIsSetToFail()", span="105-105"];
m0_82 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToFailed_IfRetryAttemptsNumberExceededAndOnAttemptsExceedIsSetToFail()", color=green, community=0, file="RetryAttributeFacts.cs", label="0: _connection.Setup(x => x.GetJobParameter(JobId, ''RetryCount'')).Returns(''1'')", span="107-107"];
m0_83 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToFailed_IfRetryAttemptsNumberExceededAndOnAttemptsExceedIsSetToFail()", color=green, community=0, file="RetryAttributeFacts.cs", label="0: var filter = new AutomaticRetryAttribute { Attempts = 1, OnAttemptsExceeded = AttemptsExceededAction.Fail }", span="108-108"];
m0_84 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToFailed_IfRetryAttemptsNumberExceededAndOnAttemptsExceedIsSetToFail()", color=green, community=0, file="RetryAttributeFacts.cs", label="0: filter.OnStateElection(_context.Object)", span="110-110"];
m0_85 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToFailed_IfRetryAttemptsNumberExceededAndOnAttemptsExceedIsSetToFail()", color=green, community=0, file="RetryAttributeFacts.cs", label="0: Assert.IsType<FailedState>(_context.Object.CandidateState)", span="112-112"];
m0_86 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToFailed_IfRetryAttemptsNumberExceededAndOnAttemptsExceedIsSetToFail()", file="RetryAttributeFacts.cs", label="Exit Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToFailed_IfRetryAttemptsNumberExceededAndOnAttemptsExceedIsSetToFail()", span="105-105"];
m0_72 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToDeleted_IfRetryAttemptsNumberExceededAndOnAttemptsExceededIsSetToDelete()", file="RetryAttributeFacts.cs", label="Entry Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToDeleted_IfRetryAttemptsNumberExceededAndOnAttemptsExceededIsSetToDelete()", span="94-94"];
m0_73 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToDeleted_IfRetryAttemptsNumberExceededAndOnAttemptsExceededIsSetToDelete()", color=green, community=0, file="RetryAttributeFacts.cs", label="0: _connection.Setup(x => x.GetJobParameter(JobId, ''RetryCount'')).Returns(''1'')", span="96-96"];
m0_74 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToDeleted_IfRetryAttemptsNumberExceededAndOnAttemptsExceededIsSetToDelete()", color=green, community=0, file="RetryAttributeFacts.cs", label="0: var filter = new AutomaticRetryAttribute { Attempts = 1, OnAttemptsExceeded = AttemptsExceededAction.Delete }", span="97-97"];
m0_75 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToDeleted_IfRetryAttemptsNumberExceededAndOnAttemptsExceededIsSetToDelete()", color=green, community=0, file="RetryAttributeFacts.cs", label="0: filter.OnStateElection(_context.Object)", span="99-99"];
m0_76 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToDeleted_IfRetryAttemptsNumberExceededAndOnAttemptsExceededIsSetToDelete()", color=green, community=0, file="RetryAttributeFacts.cs", label="0: Assert.IsType<DeletedState>(_context.Object.CandidateState)", span="101-101"];
m0_77 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToDeleted_IfRetryAttemptsNumberExceededAndOnAttemptsExceededIsSetToDelete()", file="RetryAttributeFacts.cs", label="Exit Hangfire.Core.Tests.RetryAttributeFacts.OnStateElection_ChangesStateToDeleted_IfRetryAttemptsNumberExceededAndOnAttemptsExceededIsSetToDelete()", span="94-94"];
m0_45 [cluster="Unk.True", file="RetryAttributeFacts.cs", label="Entry Unk.True", span=""];
m0_4 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.RetryAttributeFacts()", file="RetryAttributeFacts.cs", label="HangFire.Filters.CreatedContext", span=""];
m0_5 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.RetryAttributeFacts()", file="RetryAttributeFacts.cs", label="_context.StateContextValue.ConnectionValue = _connection", span="23-23"];
m0_6 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.RetryAttributeFacts()", file="RetryAttributeFacts.cs", label="_context.CandidateStateValue = _failedState", span="24-24"];
m0_7 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.RetryAttributeFacts()", file="RetryAttributeFacts.cs", label="Exit Hangfire.Core.Tests.RetryAttributeFacts.RetryAttributeFacts()", span="16-16"];
m0_67 [cluster="Unk.Returns", file="RetryAttributeFacts.cs", label="Entry Unk.Returns", span=""];
m0_10 [cluster="Mock<IStorageConnection>.cstr", file="RetryAttributeFacts.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m0_51 [cluster="Unk.SetJobParameter", file="RetryAttributeFacts.cs", label="Entry Unk.SetJobParameter", span=""];
m0_18 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.Ctor_ThrowsAnException_WhenAttemptsValueIsNegative()", file="RetryAttributeFacts.cs", label="Entry Hangfire.Core.Tests.RetryAttributeFacts.Ctor_ThrowsAnException_WhenAttemptsValueIsNegative()", span="35-35"];
m0_19 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.Ctor_ThrowsAnException_WhenAttemptsValueIsNegative()", file="RetryAttributeFacts.cs", label="Assert.Throws<ArgumentOutOfRangeException>(\r\n                () => new AutomaticRetryAttribute { Attempts = -1 })", span="37-38"];
m0_20 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.Ctor_ThrowsAnException_WhenAttemptsValueIsNegative()", file="RetryAttributeFacts.cs", label="Exit Hangfire.Core.Tests.RetryAttributeFacts.Ctor_ThrowsAnException_WhenAttemptsValueIsNegative()", span="35-35"];
m0_25 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.Ctor_SetsOnAttemptsExceededAction_ByDefault()", file="RetryAttributeFacts.cs", label="Entry Hangfire.Core.Tests.RetryAttributeFacts.Ctor_SetsOnAttemptsExceededAction_ByDefault()", span="42-42"];
m0_26 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.Ctor_SetsOnAttemptsExceededAction_ByDefault()", color=green, community=0, file="RetryAttributeFacts.cs", label="0: var filter = new AutomaticRetryAttribute()", span="44-44"];
m0_27 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.Ctor_SetsOnAttemptsExceededAction_ByDefault()", color=green, community=0, file="RetryAttributeFacts.cs", label="0: Assert.Equal(AttemptsExceededAction.Fail, filter.OnAttemptsExceeded)", span="45-45"];
m0_28 [cluster="Hangfire.Core.Tests.RetryAttributeFacts.Ctor_SetsOnAttemptsExceededAction_ByDefault()", file="RetryAttributeFacts.cs", label="Exit Hangfire.Core.Tests.RetryAttributeFacts.Ctor_SetsOnAttemptsExceededAction_ByDefault()", span="42-42"];
m0_101 [file="RetryAttributeFacts.cs", label="Hangfire.Core.Tests.RetryAttributeFacts", span=""];
n33 -> n1  [color=darkseagreen4, key=1, label="Hangfire.AutomaticRetryAttribute", style=dashed];
n33 -> n2  [color=darkseagreen4, key=1, label="Hangfire.AutomaticRetryAttribute", style=dashed];
n33 -> n9  [color=darkseagreen4, key=1, label="Hangfire.AutomaticRetryAttribute", style=dashed];
n33 -> n12  [color=red, key=1, label="Hangfire.AutomaticRetryAttribute", style=dashed];
n33 -> n13  [color=red, key=1, label="Hangfire.AutomaticRetryAttribute", style=dashed];
n33 -> n14  [color=red, key=1, label="Hangfire.AutomaticRetryAttribute", style=dashed];
n33 -> n15  [color=darkseagreen4, key=1, label="Hangfire.AutomaticRetryAttribute", style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n2 -> n3  [key=0, style=solid];
n3 -> n0  [color=blue, key=0, style=bold];
n4 -> n5  [key=0, style=solid];
n4 -> n8  [color=darkseagreen4, key=1, label="Hangfire.States.ElectStateContext", style=dashed];
n4 -> n11  [color=red, key=1, label="Hangfire.States.ElectStateContext", style=dashed];
n4 -> n12  [color=red, key=1, label="Hangfire.States.ElectStateContext", style=dashed];
n4 -> n14  [color=red, key=1, label="Hangfire.States.ElectStateContext", style=dashed];
n4 -> n16  [color=darkseagreen4, key=1, label="Hangfire.States.ElectStateContext", style=dashed];
n5 -> n6  [key=0, style=solid];
n5 -> n14  [color=red, key=1, label=failedState, style=dashed];
n5 -> n16  [color=darkseagreen4, key=1, label=failedState, style=dashed];
n8 -> n9  [key=0, style=solid];
n8 -> n18  [key=2, style=dotted];
n8 -> n10  [color=red, key=1, label=retryAttempt, style=dashed];
n8 -> n11  [color=red, key=1, label=retryAttempt, style=dashed];
n8 -> n12  [color=red, key=1, label=retryAttempt, style=dashed];
n8 -> n14  [color=red, key=1, label=retryAttempt, style=dashed];
n11 -> n12  [color=red, key=0, style=solid];
n11 -> n21  [color=red, key=2, style=dotted];
n12 -> n13  [color=red, key=0, style=solid];
n12 -> n22  [color=red, key=2, style=dotted];
n12 -> n23  [color=red, key=2, style=dotted];
n14 -> n17  [color=red, key=0, style=solid];
n14 -> n24  [color=red, key=2, style=dotted];
n16 -> n17  [key=0, style=solid];
n16 -> n25  [key=2, style=dotted];
n6 -> n7  [key=0, style=solid];
n6 -> n8  [key=0, style=solid];
n7 -> n17  [key=0, style=solid];
n9 -> n10  [color=red, key=0, style=solid];
n9 -> n15  [key=0, style=solid];
n10 -> n11  [color=red, key=0, style=solid];
n10 -> n19  [color=red, key=2, style=dotted];
n10 -> n20  [color=red, key=2, style=dotted];
n10 -> n12  [color=red, key=1, label=delay, style=dashed];
n10 -> n14  [color=red, key=1, label=delay, style=dashed];
n15 -> n16  [key=0, style=solid];
n15 -> n17  [key=0, style=solid];
n19 -> n26  [key=0, style=solid];
n19 -> n27  [color=darkseagreen4, key=1, label=long, style=dashed];
n19 -> n8  [color=darkorchid, key=3, label="Parameter variable long retryCount", style=bold];
n13 -> n14  [color=red, key=0, style=solid];
n13 -> n17  [color=red, key=0, style=solid];
n17 -> n4  [color=blue, key=0, style=bold];
n26 -> n27  [key=0, style=solid];
n26 -> n29  [key=2, style=dotted];
n27 -> n28  [key=0, style=solid];
n27 -> n30  [key=2, style=dotted];
n27 -> n31  [key=2, style=dotted];
n27 -> n32  [key=2, style=dotted];
n28 -> n19  [color=blue, key=0, style=bold];
d2 -> d3  [color=green, key=0, style=solid];
d36 -> d2  [color=green, key=1, label="HangFire.SqlServer.SqlServerFetcher", style=dashed];
d36 -> d1  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerFetcher", style=dashed];
d36 -> d11  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerFetcher", style=dashed];
d36 -> d15  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerFetcher", style=dashed];
d0 -> d2  [color=green, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d0 -> d1  [key=0, style=solid];
d1 -> d2  [color=green, key=0, style=solid];
d3 -> d0  [color=blue, key=0, style=bold];
d18 -> d18  [color=green, key=1, label="System.Threading.CancellationToken", style=dashed];
d18 -> d19  [color=green, key=0, style=solid];
d18 -> d20  [color=green, key=0, style=solid];
d18 -> n20  [color=green, key=2, style=dotted];
d18 -> d32  [color=green, key=2, style=dotted];
d4 -> d18  [color=green, key=1, label="System.Threading.CancellationToken", style=dashed];
d4 -> d5  [key=0, style=solid];
d17 -> d18  [color=green, key=0, style=solid];
d17 -> d20  [color=green, key=0, style=solid];
d19 -> d24  [color=green, key=0, style=solid];
d20 -> d21  [color=green, key=0, style=solid];
d20 -> d20  [color=green, key=1, label=currentQueryIndex, style=dashed];
d21 -> d10  [color=green, key=0, style=solid];
d21 -> d22  [color=green, key=0, style=solid];
d5 -> d21  [color=green, key=1, label=job, style=dashed];
d5 -> d22  [color=green, key=1, label=job, style=dashed];
d5 -> d23  [color=green, key=1, label=job, style=dashed];
d5 -> d17  [color=darkseagreen4, key=1, label=job, style=dashed];
d5 -> d6  [key=0, style=solid];
d15 -> d21  [color=green, key=1, label=job, style=dashed];
d15 -> d22  [color=green, key=1, label=job, style=dashed];
d15 -> d23  [color=green, key=1, label=job, style=dashed];
d15 -> d17  [color=darkseagreen4, key=1, label=job, style=dashed];
d15 -> d16  [key=0, style=solid];
d15 -> d30  [key=2, style=dotted];
d15 -> d27  [key=2, style=dotted];
d10 -> d20  [color=green, key=1, label=currentQueryIndex, style=dashed];
d10 -> d17  [color=darkseagreen4, key=1, label=currentQueryIndex, style=dashed];
d10 -> d11  [key=0, style=solid];
d22 -> d23  [color=green, key=0, style=solid];
d22 -> d33  [color=green, key=2, style=dotted];
d23 -> d24  [color=green, key=0, style=solid];
d23 -> d34  [color=green, key=2, style=dotted];
d23 -> d35  [color=green, key=2, style=dotted];
d6 -> d23  [color=green, key=1, label=queueName, style=dashed];
d6 -> d7  [color=green, key=0, style=solid];
d16 -> d23  [color=green, key=1, label=queueName, style=dashed];
d16 -> d17  [key=0, style=solid];
d24 -> d4  [color=blue, key=0, style=bold];
d7 -> d8  [color=green, key=0, style=solid];
d7 -> d9  [color=green, key=1, label=fetchJobSql, style=dashed];
d8 -> d9  [color=green, key=0, style=solid];
d9 -> d20  [color=green, key=1, label=fetchQueries, style=dashed];
d9 -> d17  [color=darkseagreen4, key=1, label=fetchQueries, style=dashed];
d9 -> d10  [key=0, style=solid];
d9 -> d11  [color=darkseagreen4, key=1, label=fetchQueries, style=dashed];
d11 -> d16  [color=darkseagreen4, key=1, label=idAndQueue, style=dashed];
d11 -> d12  [key=0, style=solid];
d11 -> d25  [key=2, style=dotted];
d11 -> d26  [key=2, style=dotted];
d11 -> d27  [key=2, style=dotted];
d11 -> d14  [color=darkseagreen4, key=1, label=idAndQueue, style=dashed];
d12 -> d17  [key=0, style=solid];
d12 -> d13  [key=0, style=solid];
d14 -> d15  [key=0, style=solid];
d14 -> d29  [key=2, style=dotted];
d13 -> d15  [color=darkseagreen4, key=1, label=parameters, style=dashed];
d13 -> d14  [key=0, style=solid];
d13 -> d28  [key=2, style=dotted];
m0_90 -> m0_91  [color=green, key=0, style=solid];
m0_91 -> m0_92  [color=green, key=0, style=solid];
m0_91 -> m0_66  [color=green, key=2, style=dotted];
m0_91 -> m0_67  [color=green, key=2, style=dotted];
m0_91 -> m0_96  [color=green, key=1, label="lambda expression", style=dashed];
m0_92 -> m0_93  [color=green, key=0, style=solid];
m0_92 -> m0_16  [color=green, key=2, style=dotted];
m0_93 -> m0_94  [color=green, key=0, style=solid];
m0_93 -> m0_34  [color=green, key=2, style=dotted];
m0_94 -> m0_95  [color=green, key=0, style=solid];
m0_94 -> d30  [color=green, key=2, style=dotted];
m0_95 -> m0_90  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_2  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_8  [key=2, style=dotted];
m0_1 -> m0_9  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_10  [key=2, style=dotted];
m0_3 -> m0_0  [color=blue, key=0, style=bold];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_11  [key=2, style=dotted];
m0_44 -> m0_99  [key=0, style=solid];
m0_99 -> m0_16  [key=2, style=dotted];
m0_99 -> m0_100  [key=0, style=solid];
m0_100 -> m0_44  [color=blue, key=0, style=bold];
m0_36 -> m0_37  [key=0, style=solid];
m0_38 -> m0_34  [key=2, style=dotted];
m0_38 -> m0_39  [key=0, style=solid];
m0_39 -> d30  [key=2, style=dotted];
m0_39 -> m0_40  [key=0, style=solid];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_45  [key=2, style=dotted];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_46  [key=2, style=dotted];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_47  [key=2, style=dotted];
m0_42 -> m0_48  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_44  [key=2, style=dotted];
m0_43 -> m0_36  [color=blue, key=0, style=bold];
m0_52 -> m0_53  [key=0, style=solid];
m0_55 -> m0_56  [key=0, style=solid];
m0_56 -> m0_34  [key=2, style=dotted];
m0_56 -> m0_57  [key=0, style=solid];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_35  [key=2, style=dotted];
m0_54 -> m0_55  [key=0, style=solid];
m0_54 -> m0_57  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_54 -> m0_59  [key=2, style=dotted];
m0_53 -> m0_56  [color=darkseagreen4, key=1, label=filter, style=dashed];
m0_53 -> m0_44  [key=2, style=dotted];
m0_53 -> m0_54  [key=0, style=solid];
m0_58 -> m0_52  [color=blue, key=0, style=bold];
m0_60 -> m0_61  [key=0, style=solid];
m0_61 -> m0_66  [key=2, style=dotted];
m0_61 -> m0_67  [key=2, style=dotted];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_63 -> m0_34  [key=2, style=dotted];
m0_63 -> m0_64  [key=0, style=solid];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_35  [key=2, style=dotted];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_44  [key=2, style=dotted];
m0_65 -> m0_60  [color=blue, key=0, style=bold];
m0_12 -> m0_13  [key=0, style=solid];
m0_13 -> m0_16  [key=2, style=dotted];
m0_13 -> m0_14  [key=0, style=solid];
m0_14 -> m0_17  [key=2, style=dotted];
m0_14 -> m0_15  [key=0, style=solid];
m0_15 -> m0_12  [color=blue, key=0, style=bold];
m0_29 -> m0_30  [key=0, style=solid];
m0_30 -> m0_16  [key=2, style=dotted];
m0_30 -> m0_31  [key=0, style=solid];
m0_31 -> m0_34  [key=2, style=dotted];
m0_31 -> m0_32  [key=0, style=solid];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_35  [key=2, style=dotted];
m0_33 -> m0_29  [color=blue, key=0, style=bold];
m0_68 -> m0_69  [key=0, style=solid];
m0_78 -> m0_79  [color=green, key=0, style=solid];
m0_79 -> m0_80  [color=green, key=0, style=solid];
m0_79 -> m0_71  [color=green, key=2, style=dotted];
m0_80 -> m0_78  [color=blue, key=0, style=bold];
m0_87 -> m0_88  [color=green, key=0, style=solid];
m0_88 -> m0_89  [color=green, key=0, style=solid];
m0_88 -> m0_71  [color=green, key=2, style=dotted];
m0_89 -> m0_87  [color=blue, key=0, style=bold];
m0_96 -> m0_97  [color=green, key=0, style=solid];
m0_97 -> m0_98  [color=green, key=0, style=solid];
m0_97 -> m0_71  [color=green, key=2, style=dotted];
m0_98 -> m0_96  [color=blue, key=0, style=bold];
m0_23 -> m0_16  [key=2, style=dotted];
m0_23 -> m0_24  [key=0, style=solid];
m0_69 -> m0_71  [key=2, style=dotted];
m0_69 -> m0_70  [key=0, style=solid];
m0_22 -> m0_23  [key=0, style=solid];
m0_24 -> m0_22  [color=blue, key=0, style=bold];
m0_48 -> m0_49  [key=0, style=solid];
m0_70 -> m0_68  [color=blue, key=0, style=bold];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_51  [key=2, style=dotted];
m0_50 -> m0_48  [color=blue, key=0, style=bold];
m0_81 -> m0_82  [color=green, key=0, style=solid];
m0_82 -> m0_83  [color=green, key=0, style=solid];
m0_82 -> m0_66  [color=green, key=2, style=dotted];
m0_82 -> m0_67  [color=green, key=2, style=dotted];
m0_82 -> m0_87  [color=green, key=1, label="lambda expression", style=dashed];
m0_83 -> m0_84  [color=green, key=0, style=solid];
m0_83 -> m0_16  [color=green, key=2, style=dotted];
m0_84 -> m0_85  [color=green, key=0, style=solid];
m0_84 -> m0_34  [color=green, key=2, style=dotted];
m0_85 -> m0_86  [color=green, key=0, style=solid];
m0_85 -> d30  [color=green, key=2, style=dotted];
m0_86 -> m0_81  [color=blue, key=0, style=bold];
m0_72 -> m0_73  [color=green, key=0, style=solid];
m0_73 -> m0_74  [color=green, key=0, style=solid];
m0_73 -> m0_66  [color=green, key=2, style=dotted];
m0_73 -> m0_67  [color=green, key=2, style=dotted];
m0_73 -> m0_78  [color=green, key=1, label="lambda expression", style=dashed];
m0_74 -> m0_75  [color=green, key=0, style=solid];
m0_74 -> m0_16  [color=green, key=2, style=dotted];
m0_75 -> m0_76  [color=green, key=0, style=solid];
m0_75 -> m0_34  [color=green, key=2, style=dotted];
m0_76 -> m0_77  [color=green, key=0, style=solid];
m0_76 -> d30  [color=green, key=2, style=dotted];
m0_77 -> m0_72  [color=blue, key=0, style=bold];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_1  [color=darkseagreen4, key=1, label="HangFire.Filters.CreatedContext", style=dashed];
m0_4 -> m0_2  [color=darkseagreen4, key=1, label="HangFire.Filters.CreatedContext", style=dashed];
m0_5 -> m0_6  [key=0, style=solid];
m0_6 -> m0_7  [key=0, style=solid];
m0_7 -> m0_0  [color=blue, key=0, style=bold];
m0_18 -> m0_19  [key=0, style=solid];
m0_19 -> d30  [key=2, style=dotted];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_20 -> m0_18  [color=blue, key=0, style=bold];
m0_25 -> m0_26  [color=green, key=0, style=solid];
m0_26 -> m0_27  [color=green, key=0, style=solid];
m0_26 -> m0_16  [color=green, key=2, style=dotted];
m0_27 -> m0_28  [color=green, key=0, style=solid];
m0_27 -> m0_17  [color=green, key=2, style=dotted];
m0_28 -> m0_25  [color=blue, key=0, style=bold];
m0_101 -> m0_73  [color=green, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_75  [color=green, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_76  [color=green, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_82  [color=green, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_84  [color=green, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_85  [color=green, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_91  [color=green, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_93  [color=green, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_94  [color=green, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_1  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_2  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_3  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_4  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_5  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_6  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_31  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_32  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_38  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_39  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_40  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_41  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_42  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_55  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_56  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_57  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_61  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_63  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
m0_101 -> m0_64  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RetryAttributeFacts", style=dashed];
}
