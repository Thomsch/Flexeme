digraph  {
m0_8 [label="Entry HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="39-39", cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_19 [label="Entry lambda expression", span="49-49", cluster="lambda expression", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_23 [label="Entry HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.States.IState)", span="52-52", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.States.IState)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_10 [label="return (long)elapsedTime.TotalSeconds;", span="42-42", cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_11 [label="Exit HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="39-39", cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", color=green, community=0, file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_12 [label="Entry HangFire.Common.JobHelper.FromTimestamp(long)", span="45-45", cluster="HangFire.Common.JobHelper.FromTimestamp(long)", color=green, community=0, file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_13 [label="return Epoch.AddSeconds(value);", span="47-47", cluster="HangFire.Common.JobHelper.FromTimestamp(long)", color=red, community=0, file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_14 [label="Exit HangFire.Common.JobHelper.FromTimestamp(long)", span="45-45", cluster="HangFire.Common.JobHelper.FromTimestamp(long)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_66 [label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="26-26", cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_90 [label="Entry HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", span="46-46", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_64 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_4 [label="throw new ArgumentNullException(''handlers'');", span="35-35", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.States.IStateHandler>)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_5 [label="_connection = connection", span="37-37", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.States.IStateHandler>)", file="AutomaticRetryServerComponentWrapperFacts.cs", color=green, community=0];
m0_6 [label="_handlerCollection = GetHandlerCollection(handlers)", span="38-38", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.States.IStateHandler>)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_15 [label="Entry lambda expression", span="49-49", cluster="lambda expression", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_67 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_0 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_3 [label="Entry Unk.SerializeObject", span="", cluster="Unk.SerializeObject", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_1 [label="return value != null \r\n                ? JsonConvert.SerializeObject(value)\r\n                : null;", span="25-27", cluster="HangFire.Common.JobHelper.ToJson(object)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_2 [label="Exit HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_7 [label="Entry Unk.>", span="", cluster="Unk.>", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_35 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_101 [label="Entry HangFire.States.StateHandlerCollection.AddHandler(HangFire.States.IStateHandler)", span="27-27", cluster="HangFire.States.StateHandlerCollection.AddHandler(HangFire.States.IStateHandler)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_36 [label="Entry HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="28-28", cluster="HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_63 [label="Entry HangFire.Storage.IStorageConnection.GetJobData(string)", span="37-37", cluster="HangFire.Storage.IStorageConnection.GetJobData(string)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_16 [label="filters.Select(f => new JobFilter(f, JobFilterScope.Type, null))", span="49-49", cluster="lambda expression", file="AutomaticRetryServerComponentWrapperFacts.cs", color=green, community=0];
m0_17 [label="Exit lambda expression", span="49-49", cluster="lambda expression", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_18 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_89 [label="Entry HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)", span="26-26", cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_77 [label="Entry HangFire.States.StateMachine.GetFilters(HangFire.Common.Job)", span="184-184", cluster="HangFire.States.StateMachine.GetFilters(HangFire.Common.Job)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_91 [label="return new JobFilterInfo(_getFiltersThunk(job));", span="186-186", cluster="HangFire.States.StateMachine.GetFilters(HangFire.Common.Job)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_92 [label="Exit HangFire.States.StateMachine.GetFilters(HangFire.Common.Job)", span="184-184", cluster="HangFire.States.StateMachine.GetFilters(HangFire.Common.Job)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_37 [label="Entry HangFire.States.StateContext.StateContext(string, HangFire.Common.Job)", span="23-23", cluster="HangFire.States.StateContext.StateContext(string, HangFire.Common.Job)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_94 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_9 [label="Entry HangFire.States.StateMachine.GetHandlerCollection(System.Collections.Generic.IEnumerable<HangFire.States.IStateHandler>)", span="189-189", cluster="HangFire.States.StateMachine.GetHandlerCollection(System.Collections.Generic.IEnumerable<HangFire.States.IStateHandler>)", color=red, community=0, file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_78 [label="Entry HangFire.States.StateMachine.ElectState(HangFire.States.StateContext, HangFire.States.IState, string, System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", span="160-160", cluster="HangFire.States.StateMachine.ElectState(HangFire.States.StateContext, HangFire.States.IState, string, System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_81 [label="var context = new ElectStateContext(\r\n                stateContext, toState, fromStateName, _connection)", span="166-167", cluster="HangFire.States.StateMachine.ElectState(HangFire.States.StateContext, HangFire.States.IState, string, System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_82 [label="return context.ElectState(filters);", span="169-169", cluster="HangFire.States.StateMachine.ElectState(HangFire.States.StateContext, HangFire.States.IState, string, System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_83 [label="Exit HangFire.States.StateMachine.ElectState(HangFire.States.StateContext, HangFire.States.IState, string, System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", span="160-160", cluster="HangFire.States.StateMachine.ElectState(HangFire.States.StateContext, HangFire.States.IState, string, System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_65 [label="Entry HangFire.Storage.JobData.EnsureLoaded()", span="27-27", cluster="HangFire.Storage.JobData.EnsureLoaded()", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_93 [label="Entry HangFire.Common.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<HangFire.Common.JobFilter>)", span="40-40", cluster="HangFire.Common.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<HangFire.Common.JobFilter>)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_38 [label="Entry HangFire.States.StateMachine.ChangeState(HangFire.States.StateContext, HangFire.States.IState, string)", span="132-132", cluster="HangFire.States.StateMachine.ChangeState(HangFire.States.StateContext, HangFire.States.IState, string)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_68 [label="var filterInfo = GetFilters(context.Job)", span="136-136", cluster="HangFire.States.StateMachine.ChangeState(HangFire.States.StateContext, HangFire.States.IState, string)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_69 [label="var electedState = ElectState(context, toState, oldStateName, filterInfo.ElectStateFilters)", span="138-138", cluster="HangFire.States.StateMachine.ChangeState(HangFire.States.StateContext, HangFire.States.IState, string)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_70 [label="ApplyState(context, electedState, oldStateName, filterInfo.ApplyStateFilters)", span="139-139", cluster="HangFire.States.StateMachine.ChangeState(HangFire.States.StateContext, HangFire.States.IState, string)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_74 [label="ApplyState(context, failedState, oldStateName, Enumerable.Empty<IApplyStateFilter>())", span="153-153", cluster="HangFire.States.StateMachine.ChangeState(HangFire.States.StateContext, HangFire.States.IState, string)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_71 [label="return true;", span="142-142", cluster="HangFire.States.StateMachine.ChangeState(HangFire.States.StateContext, HangFire.States.IState, string)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_73 [label="var failedState = new FailedState(ex)\r\n                {\r\n                    Reason = ''An exception occurred during the transition of job's state''\r\n                }", span="146-149", cluster="HangFire.States.StateMachine.ChangeState(HangFire.States.StateContext, HangFire.States.IState, string)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_75 [label="return false;", span="156-156", cluster="HangFire.States.StateMachine.ChangeState(HangFire.States.StateContext, HangFire.States.IState, string)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_72 [label=Exception, span="144-144", cluster="HangFire.States.StateMachine.ChangeState(HangFire.States.StateContext, HangFire.States.IState, string)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_76 [label="Exit HangFire.States.StateMachine.ChangeState(HangFire.States.StateContext, HangFire.States.IState, string)", span="132-132", cluster="HangFire.States.StateMachine.ChangeState(HangFire.States.StateContext, HangFire.States.IState, string)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_100 [label="Entry HangFire.States.StateHandlerCollection.StateHandlerCollection()", span="22-22", cluster="HangFire.States.StateHandlerCollection.StateHandlerCollection()", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_24 [label="job == null", span="57-57", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.States.IState)", file="AutomaticRetryServerComponentWrapperFacts.cs", color=green, community=0];
m0_25 [label="throw new ArgumentNullException(''job'');", span="57-57", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.States.IState)", file="AutomaticRetryServerComponentWrapperFacts.cs", color=green, community=0];
m0_27 [label="throw new ArgumentNullException(''parameters'');", span="58-58", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.States.IState)", file="AutomaticRetryServerComponentWrapperFacts.cs", color=green, community=0];
m0_26 [label="parameters == null", span="58-58", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.States.IState)", file="AutomaticRetryServerComponentWrapperFacts.cs", color=green, community=0];
m0_28 [label="state == null", span="59-59", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.States.IState)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_29 [label="throw new ArgumentNullException(''state'');", span="59-59", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.States.IState)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_62 [label="Entry HangFire.Storage.IStorageConnection.AcquireJobLock(string)", span="36-36", cluster="HangFire.Storage.IStorageConnection.AcquireJobLock(string)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_22 [label="Exit HangFire.Common.JobHelper.DeserializeDateTime(string)", span="55-55", cluster="HangFire.Common.JobHelper.DeserializeDateTime(string)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_20 [label="Entry HangFire.Common.JobHelper.DeserializeDateTime(string)", span="55-55", cluster="HangFire.Common.JobHelper.DeserializeDateTime(string)", color=green, community=0, file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_21 [label="return FromTimestamp(long.Parse(value));", span="57-57", cluster="HangFire.Common.JobHelper.DeserializeDateTime(string)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_79 [label="Entry HangFire.States.StateMachine.ApplyState(HangFire.States.StateContext, HangFire.States.IState, string, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", span="172-172", cluster="HangFire.States.StateMachine.ApplyState(HangFire.States.StateContext, HangFire.States.IState, string, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_86 [label="var context = new ApplyStateContext(\r\n                _connection, stateContext, electedState, oldStateName)", span="178-179", cluster="HangFire.States.StateMachine.ApplyState(HangFire.States.StateContext, HangFire.States.IState, string, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_87 [label="context.ApplyState(_handlerCollection, filters)", span="181-181", cluster="HangFire.States.StateMachine.ApplyState(HangFire.States.StateContext, HangFire.States.IState, string, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_88 [label="Exit HangFire.States.StateMachine.ApplyState(HangFire.States.StateContext, HangFire.States.IState, string, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", span="172-172", cluster="HangFire.States.StateMachine.ApplyState(HangFire.States.StateContext, HangFire.States.IState, string, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_95 [label="var handlerCollection = new StateHandlerCollection()", span="191-191", cluster="HangFire.States.StateMachine.GetHandlerCollection(System.Collections.Generic.IEnumerable<HangFire.States.IStateHandler>)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_96 [label=handlers, span="192-192", cluster="HangFire.States.StateMachine.GetHandlerCollection(System.Collections.Generic.IEnumerable<HangFire.States.IStateHandler>)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_98 [label="return handlerCollection;", span="197-197", cluster="HangFire.States.StateMachine.GetHandlerCollection(System.Collections.Generic.IEnumerable<HangFire.States.IStateHandler>)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_97 [label="handlerCollection.AddHandler(handler)", span="194-194", cluster="HangFire.States.StateMachine.GetHandlerCollection(System.Collections.Generic.IEnumerable<HangFire.States.IStateHandler>)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_99 [label="Exit HangFire.States.StateMachine.GetHandlerCollection(System.Collections.Generic.IEnumerable<HangFire.States.IStateHandler>)", span="189-189", cluster="HangFire.States.StateMachine.GetHandlerCollection(System.Collections.Generic.IEnumerable<HangFire.States.IStateHandler>)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_84 [label="Entry HangFire.States.ElectStateContext.ElectStateContext(HangFire.States.StateContext, HangFire.States.IState, string, HangFire.Storage.IStorageConnection)", span="27-27", cluster="HangFire.States.ElectStateContext.ElectStateContext(HangFire.States.StateContext, HangFire.States.IState, string, HangFire.Storage.IStorageConnection)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_30 [label="var jobId = _connection.CreateExpiredJob(\r\n                job,\r\n                parameters,\r\n                TimeSpan.FromHours(1))", span="61-64", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.States.IState)", color=green, community=0, file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_31 [label="var context = new StateContext(jobId, job)", span="66-66", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.States.IState)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_33 [label="return jobId;", span="69-69", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.States.IState)", color=green, community=0, file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_32 [label="ChangeState(context, state, null)", span="67-67", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.States.IState)", color=green, community=0, file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_34 [label="Exit HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.States.IState)", span="52-52", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.States.IState)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_85 [label="Entry HangFire.States.ElectStateContext.ElectState(System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", span="69-69", cluster="HangFire.States.ElectStateContext.ElectState(System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_80 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_39 [label="Entry HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", span="72-72", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_44 [label="fromStates == null", span="77-77", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", color=green, community=0, file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_42 [label="toState == null", span="76-76", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_45 [label="throw new ArgumentNullException(''fromStates'');", span="77-77", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", color=green, community=0, file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_46 [label="_connection.AcquireJobLock(jobId)", span="85-85", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_50 [label="return false;", span="95-95", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", color=green, community=0, file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_49 [label="jobData == null", span="91-91", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_54 [label="loadSucceeded = true", span="106-106", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", color=green, community=0, file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_53 [label="jobData.EnsureLoaded()", span="105-105", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_55 [label=JobLoadException, span="108-108", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", color=green, community=0, file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_58 [label="var context = new StateContext(jobId, jobData.Job)", span="125-125", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_56 [label="toState = new FailedState(ex)\r\n                    {\r\n                        Reason = String.Format(\r\n                            ''Could not change the state of the job '{0}' to the '{1}'. See the inner exception for details.'',\r\n                            toState.Name, jobId)\r\n                    }", span="115-120", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_48 [label="var jobData = _connection.GetJobData(jobId)", span="89-89", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_59 [label="var stateChanged = ChangeState(context, toState, jobData.State)", span="126-126", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_41 [label="throw new ArgumentNullException(''jobId'');", span="75-75", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_43 [label="throw new ArgumentNullException(''toState'');", span="76-76", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_40 [label="jobId == null", span="75-75", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_51 [label="!fromStates.Contains(jobData.State, StringComparer.OrdinalIgnoreCase)", span="98-98", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_47 [label="bool loadSucceeded", span="87-87", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_52 [label="return false;", span="100-100", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_60 [label="return loadSucceeded && stateChanged;", span="128-128", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_57 [label="loadSucceeded = false", span="122-122", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_61 [label="Exit HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", span="72-72", cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.States.IState, string[])", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_102 [label="HangFire.States.StateMachine", span="", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m0_103 [label="System.Collections.Generic.IEnumerable<object>", span="", file="AutomaticRetryServerComponentWrapperFacts.cs"];
m1_62 [label="Entry HangFire.Web.JobHistoryRenderer.FailedRenderer(System.Collections.Generic.IDictionary<string, string>)", span="116-116", cluster="HangFire.Web.JobHistoryRenderer.FailedRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs"];
m1_63 [label="var stackTrace = HtmlHelper.MarkupStackTrace(stateData[''ExceptionDetails'']).ToHtmlString()", span="118-118", cluster="HangFire.Web.JobHistoryRenderer.FailedRenderer(System.Collections.Generic.IDictionary<string, string>)", color=red, community=0, file="BackgroundJobServer.cs"];
m1_64 [label="return new HtmlString(String.Format(\r\n                ''<h4 class=\''exception-type\''>{0}</h4><p>{1}</p>{2}'',\r\n                stateData[''ExceptionType''],\r\n                stateData[''ExceptionMessage''],\r\n                stackTrace != null ? ''<pre class=\''stack-trace\''>'' + stackTrace + ''</pre>'' : null));", span="119-123", cluster="HangFire.Web.JobHistoryRenderer.FailedRenderer(System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="BackgroundJobServer.cs"];
m1_65 [label="Exit HangFire.Web.JobHistoryRenderer.FailedRenderer(System.Collections.Generic.IDictionary<string, string>)", span="116-116", cluster="HangFire.Web.JobHistoryRenderer.FailedRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs"];
m1_66 [label="Entry HangFire.Web.HtmlHelper.MarkupStackTrace(string)", span="115-115", cluster="HangFire.Web.HtmlHelper.MarkupStackTrace(string)", file="BackgroundJobServer.cs"];
m1_95 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="BackgroundJobServer.cs"];
m1_91 [label="Entry HangFire.Web.JobHistoryRenderer.ScheduledRenderer(System.Collections.Generic.IDictionary<string, string>)", span="168-168", cluster="HangFire.Web.JobHistoryRenderer.ScheduledRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs"];
m1_92 [label="return new HtmlString(String.Format(\r\n                ''<dl class=\''dl-horizontal\''><dt>Enqueue at:</dt><dd data-moment=\''{0}\''>{1}</dd></dl>'',\r\n                stateData[''EnqueueAt''],\r\n                JobHelper.FromStringTimestamp(stateData[''EnqueueAt''])));", span="170-173", cluster="HangFire.Web.JobHistoryRenderer.ScheduledRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs", color=green, community=0];
m1_93 [label="Exit HangFire.Web.JobHistoryRenderer.ScheduledRenderer(System.Collections.Generic.IDictionary<string, string>)", span="168-168", cluster="HangFire.Web.JobHistoryRenderer.ScheduledRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs"];
m1_55 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)", file="BackgroundJobServer.cs"];
m1_57 [label="Entry System.TimeSpan.FromMilliseconds(double)", span="0-0", cluster="System.TimeSpan.FromMilliseconds(double)", file="BackgroundJobServer.cs"];
m1_30 [label="Entry HangFire.Web.JobHistoryRenderer.Render(string, System.Collections.Generic.IDictionary<string, string>)", span="76-76", cluster="HangFire.Web.JobHistoryRenderer.Render(string, System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs"];
m1_31 [label="return Renderers[state](properties);", span="78-78", cluster="HangFire.Web.JobHistoryRenderer.Render(string, System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs", color=green, community=0];
m1_32 [label="Exit HangFire.Web.JobHistoryRenderer.Render(string, System.Collections.Generic.IDictionary<string, string>)", span="76-76", cluster="HangFire.Web.JobHistoryRenderer.Render(string, System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs"];
m1_90 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="BackgroundJobServer.cs"];
m1_94 [label="Entry HangFire.Common.JobHelper.FromStringTimestamp(string)", span="55-55", cluster="HangFire.Common.JobHelper.FromStringTimestamp(string)", file="BackgroundJobServer.cs"];
m1_54 [label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0", cluster="System.Text.StringBuilder.StringBuilder()", file="BackgroundJobServer.cs"];
m1_33 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="BackgroundJobServer.cs"];
m1_20 [label="Entry HangFire.Web.JobHistoryRenderer.Register(string, System.Func<System.Collections.Generic.IDictionary<string, string>, IHtmlString>)", span="59-59", cluster="HangFire.Web.JobHistoryRenderer.Register(string, System.Func<System.Collections.Generic.IDictionary<string, string>, IHtmlString>)", file="BackgroundJobServer.cs"];
m1_22 [label="!Renderers.ContainsKey(state)", span="61-61", cluster="HangFire.Web.JobHistoryRenderer.Register(string, System.Func<System.Collections.Generic.IDictionary<string, string>, IHtmlString>)", file="BackgroundJobServer.cs"];
m1_23 [label="Renderers.Add(state, renderer)", span="63-63", cluster="HangFire.Web.JobHistoryRenderer.Register(string, System.Func<System.Collections.Generic.IDictionary<string, string>, IHtmlString>)", color=red, community=0, file="BackgroundJobServer.cs"];
m1_24 [label="Renderers[state] = renderer", span="67-67", cluster="HangFire.Web.JobHistoryRenderer.Register(string, System.Func<System.Collections.Generic.IDictionary<string, string>, IHtmlString>)", file="BackgroundJobServer.cs", color=green, community=0];
m1_25 [label="Exit HangFire.Web.JobHistoryRenderer.Register(string, System.Func<System.Collections.Generic.IDictionary<string, string>, IHtmlString>)", span="59-59", cluster="HangFire.Web.JobHistoryRenderer.Register(string, System.Func<System.Collections.Generic.IDictionary<string, string>, IHtmlString>)", file="BackgroundJobServer.cs"];
m1_27 [label="Entry HangFire.Web.JobHistoryRenderer.Exists(string)", span="71-71", cluster="HangFire.Web.JobHistoryRenderer.Exists(string)", file="BackgroundJobServer.cs"];
m1_28 [label="return Renderers.ContainsKey(state);", span="73-73", cluster="HangFire.Web.JobHistoryRenderer.Exists(string)", file="BackgroundJobServer.cs"];
m1_29 [label="Exit HangFire.Web.JobHistoryRenderer.Exists(string)", span="71-71", cluster="HangFire.Web.JobHistoryRenderer.Exists(string)", file="BackgroundJobServer.cs"];
m1_86 [label="Entry string.ToUpperInvariant()", span="0-0", cluster="string.ToUpperInvariant()", file="BackgroundJobServer.cs"];
m1_56 [label="Entry int.Parse(string)", span="0-0", cluster="int.Parse(string)", file="BackgroundJobServer.cs"];
m1_61 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()", file="BackgroundJobServer.cs"];
m1_60 [label="Entry HtmlString.cstr", span="", cluster="HtmlString.cstr", file="BackgroundJobServer.cs"];
m1_59 [label="Entry System.Text.StringBuilder.AppendFormat(string, object)", span="0-0", cluster="System.Text.StringBuilder.AppendFormat(string, object)", file="BackgroundJobServer.cs"];
m1_58 [label="Entry HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", span="53-53", cluster="HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", file="BackgroundJobServer.cs"];
m1_87 [label="Entry HangFire.Web.JobHistoryRenderer.EnqueuedRenderer(System.Collections.Generic.IDictionary<string, string>)", span="161-161", cluster="HangFire.Web.JobHistoryRenderer.EnqueuedRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs"];
m1_88 [label="return new HtmlString(String.Format(\r\n                ''<dl class=\''dl-horizontal\''><dt>Queue:</dt><dd><span class=\''label label-queue label-primary\''>{0}</span></dd></dl>'',\r\n                stateData[''Queue'']));", span="163-165", cluster="HangFire.Web.JobHistoryRenderer.EnqueuedRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs", color=green, community=0];
m1_89 [label="Exit HangFire.Web.JobHistoryRenderer.EnqueuedRenderer(System.Collections.Generic.IDictionary<string, string>)", span="161-161", cluster="HangFire.Web.JobHistoryRenderer.EnqueuedRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs"];
m1_69 [label="Entry HangFire.Web.JobHistoryRenderer.ProcessingRenderer(System.Collections.Generic.IDictionary<string, string>)", span="126-126", cluster="HangFire.Web.JobHistoryRenderer.ProcessingRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs"];
m1_70 [label="var builder = new StringBuilder()", span="128-128", cluster="HangFire.Web.JobHistoryRenderer.ProcessingRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs"];
m1_73 [label="stateData.ContainsKey(''ServerId'')", span="133-133", cluster="HangFire.Web.JobHistoryRenderer.ProcessingRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs"];
m1_74 [label="serverId = stateData[''ServerId'']", span="135-135", cluster="HangFire.Web.JobHistoryRenderer.ProcessingRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs", color=green, community=0];
m1_75 [label="stateData.ContainsKey(''ServerName'')", span="137-137", cluster="HangFire.Web.JobHistoryRenderer.ProcessingRenderer(System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="BackgroundJobServer.cs"];
m1_76 [label="serverId = stateData[''ServerName'']", span="139-139", cluster="HangFire.Web.JobHistoryRenderer.ProcessingRenderer(System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="BackgroundJobServer.cs"];
m1_80 [label="stateData.ContainsKey(''WorkerNumber'')", span="150-150", cluster="HangFire.Web.JobHistoryRenderer.ProcessingRenderer(System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="BackgroundJobServer.cs"];
m1_82 [label="builder.AppendFormat(''<dd>#{0}</dd>'', stateData[''WorkerNumber''])", span="153-153", cluster="HangFire.Web.JobHistoryRenderer.ProcessingRenderer(System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="BackgroundJobServer.cs"];
m1_71 [label="builder.Append(''<dl class=\''dl-horizontal\''>'')", span="129-129", cluster="HangFire.Web.JobHistoryRenderer.ProcessingRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs"];
m1_78 [label="builder.Append(''<dt>Server:</dt>'')", span="144-144", cluster="HangFire.Web.JobHistoryRenderer.ProcessingRenderer(System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="BackgroundJobServer.cs"];
m1_79 [label="builder.AppendFormat(\r\n                    ''<dd><span class=\''label label-default\''>{0}</span></dd>'',\r\n                    serverId.ToUpperInvariant())", span="145-147", cluster="HangFire.Web.JobHistoryRenderer.ProcessingRenderer(System.Collections.Generic.IDictionary<string, string>)", color=red, community=0, file="BackgroundJobServer.cs"];
m1_81 [label="builder.Append(''<dt>Worker:</dt>'')", span="152-152", cluster="HangFire.Web.JobHistoryRenderer.ProcessingRenderer(System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="BackgroundJobServer.cs"];
m1_83 [label="builder.Append(''</dl>'')", span="156-156", cluster="HangFire.Web.JobHistoryRenderer.ProcessingRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs", color=green, community=0];
m1_84 [label="return new HtmlString(builder.ToString());", span="158-158", cluster="HangFire.Web.JobHistoryRenderer.ProcessingRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs", color=green, community=0];
m1_72 [label="string serverId = null", span="131-131", cluster="HangFire.Web.JobHistoryRenderer.ProcessingRenderer(System.Collections.Generic.IDictionary<string, string>)", color=red, community=0, file="BackgroundJobServer.cs"];
m1_77 [label="serverId != null", span="142-142", cluster="HangFire.Web.JobHistoryRenderer.ProcessingRenderer(System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="BackgroundJobServer.cs"];
m1_85 [label="Exit HangFire.Web.JobHistoryRenderer.ProcessingRenderer(System.Collections.Generic.IDictionary<string, string>)", span="126-126", cluster="HangFire.Web.JobHistoryRenderer.ProcessingRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs"];
m1_67 [label="Entry Unk.ToHtmlString", span="", cluster="Unk.ToHtmlString", file="BackgroundJobServer.cs"];
m1_34 [label="Entry HangFire.Web.JobHistoryRenderer.NullRenderer(System.Collections.Generic.IDictionary<string, string>)", span="81-81", cluster="HangFire.Web.JobHistoryRenderer.NullRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs"];
m1_35 [label="return null;", span="83-83", cluster="HangFire.Web.JobHistoryRenderer.NullRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs"];
m1_36 [label="Exit HangFire.Web.JobHistoryRenderer.NullRenderer(System.Collections.Generic.IDictionary<string, string>)", span="81-81", cluster="HangFire.Web.JobHistoryRenderer.NullRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs"];
m1_26 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="BackgroundJobServer.cs"];
m1_37 [label="Entry HangFire.Web.JobHistoryRenderer.SucceededRenderer(System.Collections.Generic.IDictionary<string, string>)", span="86-86", cluster="HangFire.Web.JobHistoryRenderer.SucceededRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs"];
m1_38 [label="var builder = new StringBuilder()", span="88-88", cluster="HangFire.Web.JobHistoryRenderer.SucceededRenderer(System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="BackgroundJobServer.cs"];
m1_41 [label="stateData.ContainsKey(''Latency'')", span="93-93", cluster="HangFire.Web.JobHistoryRenderer.SucceededRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs", color=green, community=0];
m1_42 [label="var latency = TimeSpan.FromMilliseconds(int.Parse(stateData[''Latency'']))", span="95-95", cluster="HangFire.Web.JobHistoryRenderer.SucceededRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs", color=green, community=0];
m1_45 [label="stateData.ContainsKey(''PerformanceDuration'')", span="101-101", cluster="HangFire.Web.JobHistoryRenderer.SucceededRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs", color=green, community=0];
m1_46 [label="var duration = TimeSpan.FromMilliseconds(int.Parse(stateData[''PerformanceDuration'']))", span="103-103", cluster="HangFire.Web.JobHistoryRenderer.SucceededRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs", color=green, community=0];
m1_39 [label="builder.Append(''<dl class=\''dl-horizontal\''>'')", span="89-89", cluster="HangFire.Web.JobHistoryRenderer.SucceededRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs", color=green, community=0];
m1_43 [label="builder.AppendFormat(''<dt>Latency:</dt><dd>{0}</dd>'', HtmlHelper.ToHumanDuration(latency, false))", span="96-96", cluster="HangFire.Web.JobHistoryRenderer.SucceededRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs", color=green, community=0];
m1_47 [label="builder.AppendFormat(''<dt>Duration:</dt><dd>{0}</dd>'', HtmlHelper.ToHumanDuration(duration, false))", span="104-104", cluster="HangFire.Web.JobHistoryRenderer.SucceededRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs", color=green, community=0];
m1_49 [label="builder.Append(''</dl>'')", span="109-109", cluster="HangFire.Web.JobHistoryRenderer.SucceededRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs", color=green, community=0];
m1_52 [label="return new HtmlString(builder.ToString());", span="113-113", cluster="HangFire.Web.JobHistoryRenderer.SucceededRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs"];
m1_40 [label="var itemsAdded = false", span="91-91", cluster="HangFire.Web.JobHistoryRenderer.SucceededRenderer(System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="BackgroundJobServer.cs"];
m1_50 [label="!itemsAdded", span="111-111", cluster="HangFire.Web.JobHistoryRenderer.SucceededRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs", color=green, community=0];
m1_44 [label="itemsAdded = true", span="98-98", cluster="HangFire.Web.JobHistoryRenderer.SucceededRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs", color=green, community=0];
m1_48 [label="itemsAdded = true", span="106-106", cluster="HangFire.Web.JobHistoryRenderer.SucceededRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs", color=green, community=0];
m1_51 [label="return null;", span="111-111", cluster="HangFire.Web.JobHistoryRenderer.SucceededRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs", color=green, community=0];
m1_53 [label="Exit HangFire.Web.JobHistoryRenderer.SucceededRenderer(System.Collections.Generic.IDictionary<string, string>)", span="86-86", cluster="HangFire.Web.JobHistoryRenderer.SucceededRenderer(System.Collections.Generic.IDictionary<string, string>)", file="BackgroundJobServer.cs"];
m1_68 [label="Entry Unk.Format", span="", cluster="Unk.Format", file="BackgroundJobServer.cs"];
m1_21 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="BackgroundJobServer.cs"];
m1_0 [label="Entry HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", span="35-35", cluster="HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", file="BackgroundJobServer.cs"];
m1_1 [label="Register(SucceededState.StateName, SucceededRenderer)", span="37-37", cluster="HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", file="BackgroundJobServer.cs", color=green, community=0];
m1_2 [label="Register(FailedState.StateName, FailedRenderer)", span="38-38", cluster="HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", file="BackgroundJobServer.cs", color=green, community=0];
m1_3 [label="Register(ProcessingState.StateName, ProcessingRenderer)", span="39-39", cluster="HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", file="BackgroundJobServer.cs", color=green, community=0];
m1_4 [label="Register(EnqueuedState.StateName, EnqueuedRenderer)", span="40-40", cluster="HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", file="BackgroundJobServer.cs"];
m1_5 [label="Register(ScheduledState.StateName, ScheduledRenderer)", span="41-41", cluster="HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", file="BackgroundJobServer.cs"];
m1_6 [label="Register(DeletedState.StateName, NullRenderer)", span="42-42", cluster="HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", file="BackgroundJobServer.cs"];
m1_7 [label="BackgroundStateColors.Add(EnqueuedState.StateName, ''#F5F5F5'')", span="44-44", cluster="HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", file="BackgroundJobServer.cs", color=green, community=0];
m1_8 [label="BackgroundStateColors.Add(SucceededState.StateName, ''#EDF7ED'')", span="45-45", cluster="HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", file="BackgroundJobServer.cs"];
m1_9 [label="BackgroundStateColors.Add(FailedState.StateName, ''#FAEBEA'')", span="46-46", cluster="HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", file="BackgroundJobServer.cs"];
m1_10 [label="BackgroundStateColors.Add(ProcessingState.StateName, ''#FCEFDC'')", span="47-47", cluster="HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", file="BackgroundJobServer.cs"];
m1_11 [label="BackgroundStateColors.Add(ScheduledState.StateName, ''#E0F3F8'')", span="48-48", cluster="HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", file="BackgroundJobServer.cs"];
m1_12 [label="BackgroundStateColors.Add(DeletedState.StateName, ''#ddd'')", span="49-49", cluster="HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", file="BackgroundJobServer.cs"];
m1_13 [label="ForegroundStateColors.Add(EnqueuedState.StateName, ''#999'')", span="51-51", cluster="HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", file="BackgroundJobServer.cs"];
m1_14 [label="ForegroundStateColors.Add(SucceededState.StateName, ''#5cb85c'')", span="52-52", cluster="HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", file="BackgroundJobServer.cs"];
m1_15 [label="ForegroundStateColors.Add(FailedState.StateName, ''#d9534f'')", span="53-53", cluster="HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", color=red, community=0, file="BackgroundJobServer.cs"];
m1_16 [label="ForegroundStateColors.Add(ProcessingState.StateName, ''#f0ad4e'')", span="54-54", cluster="HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", file="BackgroundJobServer.cs"];
m1_17 [label="ForegroundStateColors.Add(ScheduledState.StateName, ''#5bc0de'')", span="55-55", cluster="HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", file="BackgroundJobServer.cs", color=green, community=0];
m1_18 [label="ForegroundStateColors.Add(DeletedState.StateName, ''#777'')", span="56-56", cluster="HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", file="BackgroundJobServer.cs", color=green, community=0];
m1_19 [label="Exit HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", span="35-35", cluster="HangFire.Web.JobHistoryRenderer.JobHistoryRenderer()", file="BackgroundJobServer.cs"];
m4_86 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="BackgroundProcessExtensions.cs"];
m4_190 [label="Entry long.Parse(string)", span="0-0", cluster="long.Parse(string)", file="BackgroundProcessExtensions.cs"];
m4_247 [label="Entry HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", span="343-343", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", file="BackgroundProcessExtensions.cs"];
m4_248 [label="return UseConnection(redis =>\r\n            {\r\n                var jobIds = redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}'', queue),\r\n                    from,\r\n                    from + perPage - 1);\r\n\r\n                return GetJobsWithProperties(\r\n                    redis,\r\n                    jobIds,\r\n                    new[] { ''State'' },\r\n                    new[] { ''EnqueuedAt'', ''State'' },\r\n                    (job, jobData, state) => new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });\r\n            });", span="346-365", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", file="BackgroundProcessExtensions.cs"];
m4_249 [label="Exit HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", span="343-343", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", file="BackgroundProcessExtensions.cs"];
m4_311 [label="Entry Dictionary<string, string>.cstr", span="", cluster="Dictionary<string, string>.cstr", file="BackgroundProcessExtensions.cs"];
m4_274 [label="Entry HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", span="457-457", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_327 [label="var endDate = DateTime.UtcNow", span="460-460", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_334 [label="var keys = dates.Select(x => String.Format(''hangfire:stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))).ToList()", span="468-468", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_335 [label="var valuesMap = redis.GetValuesMap(keys)", span="469-469", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_328 [label="var dates = new List<DateTime>()", span="461-461", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_331 [label="dates.Add(endDate)", span="464-464", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_332 [label="endDate = endDate.AddHours(-1)", span="465-465", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_329 [label="var i = 0", span="462-462", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_338 [label="i < dates.Count", span="472-472", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_342 [label="result.Add(dates[i], value)", span="480-480", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_330 [label="i < 24", span="462-462", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_333 [label="i++", span="462-462", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_336 [label="var result = new Dictionary<DateTime, long>()", span="471-471", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_340 [label="!long.TryParse(valuesMap[valuesMap.Keys.ElementAt(i)], out value)", span="475-475", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_337 [label="var i = 0", span="472-472", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_344 [label="return result;", span="483-483", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_343 [label="i++", span="472-472", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_339 [label="long value", span="474-474", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_341 [label="value = 0", span="477-477", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_345 [label="Exit HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", span="457-457", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_39 [label="Exit lambda expression", span="64-64", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_122 [label="Entry HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", span="486-486", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_356 [label="var endDate = DateTime.UtcNow.Date", span="489-489", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_363 [label="var keys = stringDates.Select(x => String.Format(''hangfire:stats:{0}:{1}'', type, x)).ToList()", span="500-500", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_364 [label="var valuesMap = redis.GetValuesMap(keys)", span="502-502", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_357 [label="var startDate = endDate.AddDays(-7)", span="490-490", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_359 [label="startDate <= endDate", span="493-493", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_360 [label="dates.Add(endDate)", span="495-495", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_361 [label="endDate = endDate.AddDays(-1)", span="496-496", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_358 [label="var dates = new List<DateTime>()", span="491-491", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_362 [label="var stringDates = dates.Select(x => x.ToString(''yyyy-MM-dd'')).ToList()", span="499-499", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_371 [label="result.Add(dates[i], value)", span="512-512", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_367 [label="i < stringDates.Count", span="505-505", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_365 [label="var result = new Dictionary<DateTime, long>()", span="504-504", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_369 [label="!long.TryParse(valuesMap[valuesMap.Keys.ElementAt(i)], out value)", span="508-508", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_366 [label="var i = 0", span="505-505", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_373 [label="return result;", span="515-515", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_372 [label="i++", span="505-505", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_368 [label="long value", span="507-507", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_370 [label="value = 0", span="510-510", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_374 [label="Exit HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", span="486-486", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="BackgroundProcessExtensions.cs"];
m4_165 [label="Entry HangFire.Common.JobHelper.FromStringTimestamp(string)", span="55-55", cluster="HangFire.Common.JobHelper.FromStringTimestamp(string)", file="BackgroundProcessExtensions.cs"];
m4_257 [label="Entry HangFire.Redis.RedisMonitoringApi.FetchedJobs(string, int, int)", span="368-368", cluster="HangFire.Redis.RedisMonitoringApi.FetchedJobs(string, int, int)", file="BackgroundProcessExtensions.cs"];
m4_258 [label="return UseConnection(redis =>\r\n            {\r\n                var jobIds = redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}:dequeued'', queue),\r\n                    from, from + perPage - 1);\r\n\r\n                return GetJobsWithProperties(\r\n                    redis,\r\n                    jobIds,\r\n                    new[] { ''State'', ''Fetched'' },\r\n                    null,\r\n                    (job, jobData, state) => new FetchedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        FetchedAt = JobHelper.FromNullableStringTimestamp(jobData[1])\r\n                    });\r\n            });", span="371-388", cluster="HangFire.Redis.RedisMonitoringApi.FetchedJobs(string, int, int)", file="BackgroundProcessExtensions.cs"];
m4_259 [label="Exit HangFire.Redis.RedisMonitoringApi.FetchedJobs(string, int, int)", span="368-368", cluster="HangFire.Redis.RedisMonitoringApi.FetchedJobs(string, int, int)", file="BackgroundProcessExtensions.cs"];
m4_349 [label="Entry Unk.TryParse", span="", cluster="Unk.TryParse", file="BackgroundProcessExtensions.cs"];
m4_12 [label="Exit lambda expression", span="41-42", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_61 [label="Entry HangFire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", file="BackgroundProcessExtensions.cs"];
m4_56 [label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", file="BackgroundProcessExtensions.cs"];
m4_62 [label="Entry HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", span="60-60", cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", file="BackgroundProcessExtensions.cs"];
m4_164 [label="Entry int.Parse(string)", span="0-0", cluster="int.Parse(string)", file="BackgroundProcessExtensions.cs"];
m4_25 [label="Entry lambda expression", span="53-54", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_26 [label="redis.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue))", span="54-54", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_27 [label="Exit lambda expression", span="53-54", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_28 [label="Entry HangFire.Redis.RedisMonitoringApi.FailedCount()", span="57-57", cluster="HangFire.Redis.RedisMonitoringApi.FailedCount()", file="BackgroundProcessExtensions.cs"];
m4_29 [label="return UseConnection(redis => redis.GetSortedSetCount(''hangfire:failed''));", span="59-59", cluster="HangFire.Redis.RedisMonitoringApi.FailedCount()", file="BackgroundProcessExtensions.cs"];
m4_32 [label="redis.GetSortedSetCount(''hangfire:failed'')", span="59-59", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_33 [label="Exit lambda expression", span="59-59", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_30 [label="Exit HangFire.Redis.RedisMonitoringApi.FailedCount()", span="57-57", cluster="HangFire.Redis.RedisMonitoringApi.FailedCount()", file="BackgroundProcessExtensions.cs"];
m4_31 [label="Entry lambda expression", span="59-59", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_34 [label="Entry HangFire.Redis.RedisMonitoringApi.ProcessingCount()", span="62-62", cluster="HangFire.Redis.RedisMonitoringApi.ProcessingCount()", file="BackgroundProcessExtensions.cs"];
m4_275 [label="Entry HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", span="396-396", cluster="HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", file="BackgroundProcessExtensions.cs"];
m4_276 [label="return UseConnection(redis => GetHourlyTimelineStats(redis, ''failed''));", span="398-398", cluster="HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", file="BackgroundProcessExtensions.cs"];
m4_277 [label="Exit HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", span="396-396", cluster="HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", file="BackgroundProcessExtensions.cs"];
m4_515 [label="Entry Unk.GetClient", span="", cluster="Unk.GetClient", file="BackgroundProcessExtensions.cs"];
m4_433 [label="Entry HangFire.Redis.RedisMonitoringApi.GetStatistics()", span="580-580", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="BackgroundProcessExtensions.cs"];
m4_434 [label="return UseConnection(redis =>\r\n            {\r\n                var stats = new StatisticsDto();\r\n\r\n                var queues = redis.GetAllItemsFromSet(''hangfire:queues'');\r\n\r\n                using (var pipeline = redis.CreatePipeline())\r\n                {\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:servers''),\r\n                        x => stats.Servers = x);\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:queues''),\r\n                        x => stats.Queues = x);\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:schedule''),\r\n                        x => stats.Scheduled = x);\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:processing''),\r\n                        x => stats.Processing = x);\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetValue(''hangfire:stats:succeeded''),\r\n                        x => stats.Succeeded = long.Parse(x ?? ''0''));\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:failed''),\r\n                        x => stats.Failed = x);\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetValue(''hangfire:stats:deleted''),\r\n                        x => stats.Deleted = long.Parse(x ?? ''0''));\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:recurring-jobs''),\r\n                        x => stats.Recurring = x);\r\n\r\n                    foreach (var queue in queues)\r\n                    {\r\n                        var queueName = queue;\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queueName)),\r\n                            x => stats.Enqueued += x);\r\n                    }\r\n\r\n                    pipeline.Flush();\r\n                }\r\n\r\n                return stats;\r\n            });", span="582-634", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="BackgroundProcessExtensions.cs"];
m4_435 [label="Exit HangFire.Redis.RedisMonitoringApi.GetStatistics()", span="580-580", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="BackgroundProcessExtensions.cs"];
m4_22 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_23 [label="RunProcess(process, context)", span="57-57", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_24 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_55 [label="Entry Unk.GetJobsWithProperties", span="", cluster="Unk.GetJobsWithProperties", file="BackgroundProcessExtensions.cs"];
m4_57 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="BackgroundProcessExtensions.cs"];
m4_421 [label="Entry KeyValuePair<string, T>.cstr", span="", cluster="KeyValuePair<string, T>.cstr", file="BackgroundProcessExtensions.cs"];
m4_91 [label="Entry JobList<ScheduledJobDto>.cstr", span="", cluster="JobList<ScheduledJobDto>.cstr", file="BackgroundProcessExtensions.cs"];
m4_88 [label="Entry Unk.CreatePipeline", span="", cluster="Unk.CreatePipeline", file="BackgroundProcessExtensions.cs"];
m4_522 [label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38", cluster="HangFire.Storage.InvocationData.Deserialize()", file="BackgroundProcessExtensions.cs"];
m4_516 [label="Entry Unk.action", span="", cluster="Unk.action", file="BackgroundProcessExtensions.cs"];
m4_41 [label="return UseConnection(redis => redis.GetListCount(''hangfire:deleted''));", span="69-69", cluster="HangFire.Redis.RedisMonitoringApi.DeletedListCount()", file="BackgroundProcessExtensions.cs"];
m4_38 [label="redis.GetSortedSetCount(''hangfire:processing'')", span="64-64", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_402 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="BackgroundProcessExtensions.cs"];
m4_281 [label="Entry HangFire.Redis.RedisMonitoringApi.JobDetails(string)", span="401-401", cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="BackgroundProcessExtensions.cs"];
m4_282 [label="return UseConnection(redis =>\r\n            {\r\n                var job = redis.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', jobId));\r\n                if (job.Count == 0) return null;\r\n\r\n                var hiddenProperties = new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'', ''State'', ''CreatedAt'' };\r\n\r\n                var historyList = redis.GetAllItemsFromList(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId));\r\n\r\n                var history = historyList\r\n                    .Select(JobHelper.FromJson<Dictionary<string, string>>)\r\n                    .ToList();\r\n\r\n                var stateHistory = new List<StateHistoryDto>(history.Count);\r\n                foreach (var entry in history)\r\n                {\r\n                    var dto = new StateHistoryDto\r\n                    {\r\n                        StateName = entry[''State''],\r\n                        Reason = entry.ContainsKey(''Reason'') ? entry[''Reason''] : null,\r\n                        CreatedAt = JobHelper.FromStringTimestamp(entry[''CreatedAt'']),\r\n                    };\r\n\r\n                    // Each history item contains all of the information,\r\n                    // but other code should not know this. We'll remove\r\n                    // unwanted keys.\r\n                    var stateData = new Dictionary<string, string>(entry);\r\n                    stateData.Remove(''State'');\r\n                    stateData.Remove(''Reason'');\r\n                    stateData.Remove(''CreatedAt'');\r\n\r\n                    dto.Data = stateData;\r\n                    stateHistory.Add(dto);\r\n                }\r\n\r\n                // For compatibility\r\n                if (!job.ContainsKey(''Method'')) job.Add(''Method'', null);\r\n                if (!job.ContainsKey(''ParameterTypes'')) job.Add(''ParameterTypes'', null);\r\n\r\n                return new JobDetailsDto\r\n                {\r\n                    Job = TryToGetJob(job[''Type''], job[''Method''], job[''ParameterTypes''], job[''Arguments'']),\r\n                    CreatedAt =\r\n                        job.ContainsKey(''CreatedAt'')\r\n                            ? JobHelper.FromStringTimestamp(job[''CreatedAt''])\r\n                            : (DateTime?) null,\r\n                    Properties =\r\n                        job.Where(x => !hiddenProperties.Contains(x.Key)).ToDictionary(x => x.Key, x => x.Value),\r\n                    History = stateHistory\r\n                };\r\n            });", span="403-454", cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="BackgroundProcessExtensions.cs"];
m4_283 [label="Exit HangFire.Redis.RedisMonitoringApi.JobDetails(string)", span="401-401", cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="BackgroundProcessExtensions.cs"];
m4_309 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="BackgroundProcessExtensions.cs"];
m4_20 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="BackgroundProcessExtensions.cs"];
m4_5 [label="backgroundProcess.Execute(context)", span="36-36", cluster="Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="BackgroundProcessExtensions.cs"];
m4_113 [label="Entry HangFire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", file="BackgroundProcessExtensions.cs"];
m4_423 [label="Entry Unk.selector", span="", cluster="Unk.selector", file="BackgroundProcessExtensions.cs"];
m4_37 [label="Entry lambda expression", span="64-64", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_427 [label="Entry HangFire.Redis.RedisMonitoringApi.SucceededListCount()", span="575-575", cluster="HangFire.Redis.RedisMonitoringApi.SucceededListCount()", file="BackgroundProcessExtensions.cs"];
m4_428 [label="return UseConnection(redis => redis.GetListCount(''hangfire:succeeded''));", span="577-577", cluster="HangFire.Redis.RedisMonitoringApi.SucceededListCount()", file="BackgroundProcessExtensions.cs"];
m4_429 [label="Exit HangFire.Redis.RedisMonitoringApi.SucceededListCount()", span="575-575", cluster="HangFire.Redis.RedisMonitoringApi.SucceededListCount()", file="BackgroundProcessExtensions.cs"];
m4_407 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="BackgroundProcessExtensions.cs"];
m4_454 [label="Entry HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18", cluster="HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", file="BackgroundProcessExtensions.cs"];
m4_10 [label="Entry lambda expression", span="41-42", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_85 [label="Entry Unk.GetRangeWithScoresFromSortedSet", span="", cluster="Unk.GetRangeWithScoresFromSortedSet", file="BackgroundProcessExtensions.cs"];
m4_163 [label="Entry HangFire.Storage.Monitoring.ServerDto.ServerDto()", span="21-21", cluster="HangFire.Storage.Monitoring.ServerDto.ServerDto()", file="BackgroundProcessExtensions.cs"];
m4_307 [label="Entry List<StateHistoryDto>.cstr", span="", cluster="List<StateHistoryDto>.cstr", file="BackgroundProcessExtensions.cs"];
m4_315 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="BackgroundProcessExtensions.cs"];
m4_191 [label="Entry HangFire.Redis.RedisMonitoringApi.DeletedJobs(int, int)", span="263-263", cluster="HangFire.Redis.RedisMonitoringApi.DeletedJobs(int, int)", file="BackgroundProcessExtensions.cs"];
m4_192 [label="return UseConnection(redis =>\r\n            {\r\n                var deletedJobIds = redis.GetRangeFromList(\r\n                    ''hangfire:deleted'',\r\n                    from,\r\n                    from + count - 1);\r\n\r\n                return GetJobsWithProperties(\r\n                    redis,\r\n                    deletedJobIds,\r\n                    null,\r\n                    new[] { ''DeletedAt'', ''State'' },\r\n                    (job, jobData, state) => new DeletedJobDto\r\n                    {\r\n                        Job = job,\r\n                        DeletedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InDeletedState = DeletedState.StateName.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });\r\n            });", span="265-283", cluster="HangFire.Redis.RedisMonitoringApi.DeletedJobs(int, int)", file="BackgroundProcessExtensions.cs"];
m4_193 [label="Exit HangFire.Redis.RedisMonitoringApi.DeletedJobs(int, int)", span="263-263", cluster="HangFire.Redis.RedisMonitoringApi.DeletedJobs(int, int)", file="BackgroundProcessExtensions.cs"];
m4_375 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="BackgroundProcessExtensions.cs"];
m4_222 [label="Entry HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", span="518-518", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="BackgroundProcessExtensions.cs"];
m4_382 [label="jobIds.Count == 0", span="525-525", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="BackgroundProcessExtensions.cs"];
m4_384 [label="var jobs = new Dictionary<string, List<string>>(jobIds.Count)", span="527-527", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="BackgroundProcessExtensions.cs"];
m4_385 [label="var states = new Dictionary<string, List<string>>(jobIds.Count)", span="528-528", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="BackgroundProcessExtensions.cs"];
m4_386 [label="properties = properties ?? new string[0]", span="530-530", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="BackgroundProcessExtensions.cs"];
m4_387 [label="var pipeline = redis.CreatePipeline()", span="532-532", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="BackgroundProcessExtensions.cs"];
m4_388 [label=jobIds, span="534-534", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="BackgroundProcessExtensions.cs"];
m4_391 [label="stateProperties != null", span="544-544", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="BackgroundProcessExtensions.cs"];
m4_392 [label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(String.Format(''hangfire:job:{0}:state'', id), stateProperties),\r\n                            x => { if (!states.ContainsKey(id)) states.Add(id, x); })", span="546-548", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="BackgroundProcessExtensions.cs"];
m4_394 [label="return new JobList<T>(jobIds\r\n                .Select(x => new\r\n                {\r\n                    JobId = x,\r\n                    Job = jobs[x],\r\n                    Method = TryToGetJob(\r\n                        jobs[x][properties.Length],\r\n                        jobs[x][properties.Length + 1],\r\n                        jobs[x][properties.Length + 2],\r\n                        jobs[x][properties.Length + 3]),\r\n                    State = states.ContainsKey(x) ? states[x] : null\r\n                })\r\n                .Select(x => new KeyValuePair<string, T>(\r\n                    x.JobId,\r\n                    x.Job.TrueForAll(y => y == null)\r\n                        ? default(T)\r\n                        : selector(x.Method, x.Job, x.State)))\r\n                .ToList());", span="555-572", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="BackgroundProcessExtensions.cs"];
m4_383 [label="return new JobList<T>(new List<KeyValuePair<string, T>>());", span="525-525", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="BackgroundProcessExtensions.cs"];
m4_390 [label="pipeline.QueueCommand(\r\n                        x => x.GetValuesFromHash(\r\n                            String.Format(''hangfire:job:{0}'', id),\r\n                            properties.Union(new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'' }).ToArray()),\r\n                        x => { if (!jobs.ContainsKey(id)) jobs.Add(id, x); })", span="538-542", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="BackgroundProcessExtensions.cs"];
m4_393 [label="pipeline.Flush()", span="552-552", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="BackgroundProcessExtensions.cs"];
m4_389 [label="var id = jobId", span="536-536", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="BackgroundProcessExtensions.cs"];
m4_395 [label="Exit HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", span="518-518", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="BackgroundProcessExtensions.cs"];
m4_422 [label="Entry Unk.TrueForAll", span="", cluster="Unk.TrueForAll", file="BackgroundProcessExtensions.cs"];
m4_9 [label="Exit Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", span="26-26", cluster="Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="BackgroundProcessExtensions.cs"];
m4_512 [label="var redis = _connectionPool.GetClient()", span="639-639", cluster="HangFire.Redis.RedisMonitoringApi.UseConnection<T>(System.Func<IRedisClient, T>)", file="BackgroundProcessExtensions.cs"];
m4_513 [label="return action(redis);", span="641-641", cluster="HangFire.Redis.RedisMonitoringApi.UseConnection<T>(System.Func<IRedisClient, T>)", file="BackgroundProcessExtensions.cs"];
m4_514 [label="Exit HangFire.Redis.RedisMonitoringApi.UseConnection<T>(System.Func<IRedisClient, T>)", span="637-637", cluster="HangFire.Redis.RedisMonitoringApi.UseConnection<T>(System.Func<IRedisClient, T>)", file="BackgroundProcessExtensions.cs"];
m4_313 [label="Entry HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22", cluster="HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", file="BackgroundProcessExtensions.cs"];
m4_112 [label="Entry KeyValuePair<string, ScheduledJobDto>.cstr", span="", cluster="KeyValuePair<string, ScheduledJobDto>.cstr", file="BackgroundProcessExtensions.cs"];
m4_0 [label="Entry Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", span="26-26", cluster="Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="BackgroundProcessExtensions.cs"];
m4_1 [label="!(process is IServerComponent || process is IBackgroundProcess)", span="28-28", cluster="Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="BackgroundProcessExtensions.cs"];
m4_3 [label="var backgroundProcess = process as IBackgroundProcess", span="33-33", cluster="Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="BackgroundProcessExtensions.cs"];
m4_2 [label="throw new ArgumentOutOfRangeException(''process'', ''Long-running process must be of type IServerComponent or IBackgroundProcess.'');", span="30-30", cluster="Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="BackgroundProcessExtensions.cs"];
m4_4 [label="backgroundProcess != null", span="34-34", cluster="Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="BackgroundProcessExtensions.cs"];
m4_201 [label="Entry HangFire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7", cluster="HangFire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", file="BackgroundProcessExtensions.cs"];
m4_11 [label="Entry Hangfire.Server.IBackgroundProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="24-24", cluster="Hangfire.Server.IBackgroundProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="BackgroundProcessExtensions.cs"];
m4_18 [label="return Task.Factory.StartNew(\r\n                () => RunProcess(process, context),\r\n                TaskCreationOptions.LongRunning);", span="56-58", cluster="Hangfire.Server.BackgroundProcessExtensions.CreateTask(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="BackgroundProcessExtensions.cs"];
m4_17 [label="throw new ArgumentOutOfRangeException(''process'', ''Long-running process must be of type IServerComponent or IBackgroundProcess.'');", span="53-53", cluster="Hangfire.Server.BackgroundProcessExtensions.CreateTask(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="BackgroundProcessExtensions.cs"];
m4_19 [label="Exit Hangfire.Server.BackgroundProcessExtensions.CreateTask(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", span="48-48", cluster="Hangfire.Server.BackgroundProcessExtensions.CreateTask(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="BackgroundProcessExtensions.cs"];
m4_43 [label=InvalidOperationException, span="98-98", cluster="Hangfire.Server.BackgroundProcessExtensions.TrySetThreadName(string)", file="BackgroundProcessExtensions.cs"];
m4_44 [label="Exit Hangfire.Server.BackgroundProcessExtensions.TrySetThreadName(string)", span="92-92", cluster="Hangfire.Server.BackgroundProcessExtensions.TrySetThreadName(string)", file="BackgroundProcessExtensions.cs"];
m4_45 [label="Hangfire.Server.ILongRunningProcess", span="", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_50 [label="var jobIds = redis.GetRangeFromSortedSet(\r\n                    ''hangfire:processing'',\r\n                    from,\r\n                    from + count - 1)", span="77-80", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_49 [label="Entry lambda expression", span="75-94", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_51 [label="return new JobList<ProcessingJobDto>(GetJobsWithProperties(redis,\r\n                    jobIds,\r\n                    null,\r\n                    new[] { ''StartedAt'', ''ServerName'', ''ServerId'', ''State'' },\r\n                    (job, jobData, state) => new ProcessingJobDto\r\n                    {\r\n                        ServerId = state[2] ?? state[1],\r\n                        Job = job,\r\n                        StartedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InProcessingState = ProcessingState.StateName.Equals(\r\n                            state[3], StringComparison.OrdinalIgnoreCase),\r\n                    }).OrderBy(x => x.Value.StartedAt).ToList());", span="82-93", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_52 [label="Exit lambda expression", span="75-94", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_58 [label="Entry lambda expression", span="86-93", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_64 [label="Entry lambda expression", span="93-93", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_59 [label="new ProcessingJobDto\r\n                    {\r\n                        ServerId = state[2] ?? state[1],\r\n                        Job = job,\r\n                        StartedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InProcessingState = ProcessingState.StateName.Equals(\r\n                            state[3], StringComparison.OrdinalIgnoreCase),\r\n                    }", span="86-93", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_60 [label="Exit lambda expression", span="86-93", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_65 [label="x.Value.StartedAt", span="93-93", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_66 [label="Exit lambda expression", span="93-93", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_72 [label="var scheduledJobs = redis.GetRangeWithScoresFromSortedSet(\r\n                    ''hangfire:schedule'',\r\n                    from,\r\n                    from + count - 1)", span="101-104", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_71 [label="Entry lambda expression", span="99-151", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_77 [label="var pipeline = redis.CreatePipeline()", span="114-114", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_73 [label="scheduledJobs.Count == 0", span="106-106", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_78 [label=scheduledJobs, span="116-116", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_83 [label="return new JobList<ScheduledJobDto>(scheduledJobs\r\n                    .Select(job => new KeyValuePair<string, ScheduledJobDto>(\r\n                        job.Key,\r\n                        new ScheduledJobDto\r\n                        {\r\n                            EnqueueAt = JobHelper.FromTimestamp((long) job.Value),\r\n                            Job = TryToGetJob(jobs[job.Key][0], jobs[job.Key][1], jobs[job.Key][2], jobs[job.Key][3]),\r\n                            ScheduledAt =\r\n                                states[job.Key].Count > 1\r\n                                    ? JobHelper.FromNullableStringTimestamp(states[job.Key][1])\r\n                                    : null,\r\n                            InScheduledState =\r\n                                ScheduledState.StateName.Equals(states[job.Key][0], StringComparison.OrdinalIgnoreCase)\r\n                        }))\r\n                    .ToList());", span="136-150", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_74 [label="return new JobList<ScheduledJobDto>(new List<KeyValuePair<string, ScheduledJobDto>>());", span="108-108", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_75 [label="var jobs = new Dictionary<string, List<string>>()", span="111-111", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_76 [label="var states = new Dictionary<string, List<String>>()", span="112-112", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_80 [label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}'', job.Key),\r\n                                new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'' }),\r\n                            x => jobs.Add(job.Key, x))", span="120-124", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_100 [label="jobs.Add(job.Key, x)", span="124-124", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_110 [label="new KeyValuePair<string, ScheduledJobDto>(\r\n                        job.Key,\r\n                        new ScheduledJobDto\r\n                        {\r\n                            EnqueueAt = JobHelper.FromTimestamp((long) job.Value),\r\n                            Job = TryToGetJob(jobs[job.Key][0], jobs[job.Key][1], jobs[job.Key][2], jobs[job.Key][3]),\r\n                            ScheduledAt =\r\n                                states[job.Key].Count > 1\r\n                                    ? JobHelper.FromNullableStringTimestamp(states[job.Key][1])\r\n                                    : null,\r\n                            InScheduledState =\r\n                                ScheduledState.StateName.Equals(states[job.Key][0], StringComparison.OrdinalIgnoreCase)\r\n                        })", span="137-149", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_81 [label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}:state'', job.Key),\r\n                                new[] { ''State'', ''ScheduledAt'' }),\r\n                            x => states.Add(job.Key, x))", span="126-130", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_107 [label="states.Add(job.Key, x)", span="130-130", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_82 [label="pipeline.Flush()", span="133-133", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_79 [label="var job = scheduledJob", span="118-118", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_95 [label="x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}'', job.Key),\r\n                                new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'' })", span="121-123", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_104 [label="x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}:state'', job.Key),\r\n                                new[] { ''State'', ''ScheduledAt'' })", span="127-129", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_94 [label="Entry lambda expression", span="121-123", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_99 [label="Entry lambda expression", span="124-124", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_103 [label="Entry lambda expression", span="127-129", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_106 [label="Entry lambda expression", span="130-130", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_84 [label="Exit lambda expression", span="99-151", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_109 [label="Entry lambda expression", span="137-149", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_96 [label="Exit lambda expression", span="121-123", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_101 [label="Exit lambda expression", span="124-124", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_105 [label="Exit lambda expression", span="127-129", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_108 [label="Exit lambda expression", span="130-130", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_111 [label="Exit lambda expression", span="137-149", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_119 [label="Entry lambda expression", span="156-156", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_120 [label="GetTimelineStats(redis, ''succeeded'')", span="156-156", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_121 [label="Exit lambda expression", span="156-156", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_126 [label="Entry lambda expression", span="161-161", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_127 [label="GetTimelineStats(redis, ''failed'')", span="161-161", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_128 [label="Exit lambda expression", span="161-161", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_132 [label="Entry lambda expression", span="166-207", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_133 [label="var serverNames = redis.GetAllItemsFromSet(''hangfire:servers'')", span="168-168", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_138 [label="var pipeline = redis.CreatePipeline()", span="178-178", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_134 [label="serverNames.Count == 0", span="170-170", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_139 [label=serverNames, span="180-180", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_144 [label="return serverNames.Select(x => new ServerDto\r\n                {\r\n                    Name = x,\r\n                    WorkersCount = int.Parse(servers[x][0]),\r\n                    Queues = queues[x],\r\n                    StartedAt = JobHelper.FromStringTimestamp(servers[x][1]),\r\n                    Heartbeat = JobHelper.FromNullableStringTimestamp(servers[x][2])\r\n                }).ToList();", span="199-206", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_135 [label="return new List<ServerDto>();", span="172-172", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_136 [label="var servers = new Dictionary<string, List<string>>()", span="175-175", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_137 [label="var queues = new Dictionary<string, List<string>>()", span="176-176", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_141 [label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:server:{0}'', name),\r\n                                ''WorkerCount'', ''StartedAt'', ''Heartbeat''),\r\n                            x => servers.Add(name, x))", span="184-188", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_151 [label="servers.Add(name, x)", span="188-188", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_161 [label="new ServerDto\r\n                {\r\n                    Name = x,\r\n                    WorkersCount = int.Parse(servers[x][0]),\r\n                    Queues = queues[x],\r\n                    StartedAt = JobHelper.FromStringTimestamp(servers[x][1]),\r\n                    Heartbeat = JobHelper.FromNullableStringTimestamp(servers[x][2])\r\n                }", span="199-206", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_142 [label="pipeline.QueueCommand(\r\n                            x => x.GetAllItemsFromList(\r\n                                String.Format(''hangfire:server:{0}:queues'', name)),\r\n                            x => queues.Add(name, x))", span="190-193", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_158 [label="queues.Add(name, x)", span="193-193", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_143 [label="pipeline.Flush()", span="196-196", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_140 [label="var name = serverName", span="182-182", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_148 [label="x.GetValuesFromHash(\r\n                                String.Format(''hangfire:server:{0}'', name),\r\n                                ''WorkerCount'', ''StartedAt'', ''Heartbeat'')", span="185-187", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_154 [label="x.GetAllItemsFromList(\r\n                                String.Format(''hangfire:server:{0}:queues'', name))", span="191-192", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_147 [label="Entry lambda expression", span="185-187", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_150 [label="Entry lambda expression", span="188-188", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_153 [label="Entry lambda expression", span="191-192", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_157 [label="Entry lambda expression", span="193-193", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_145 [label="Exit lambda expression", span="166-207", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_160 [label="Entry lambda expression", span="199-206", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_149 [label="Exit lambda expression", span="185-187", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_152 [label="Exit lambda expression", span="188-188", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_155 [label="Exit lambda expression", span="191-192", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_159 [label="Exit lambda expression", span="193-193", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_162 [label="Exit lambda expression", span="199-206", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_170 [label="var failedJobIds = redis.GetRangeFromSortedSetDesc(\r\n                    ''hangfire:failed'',\r\n                    from,\r\n                    from + count - 1)", span="214-217", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_169 [label="Entry lambda expression", span="212-234", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_171 [label="return GetJobsWithProperties(\r\n                    redis,\r\n                    failedJobIds,\r\n                    null,\r\n                    new[] { ''FailedAt'', ''ExceptionType'', ''ExceptionMessage'', ''ExceptionDetails'', ''State'', ''Reason'' },\r\n                    (job, jobData, state) => new FailedJobDto\r\n                    {\r\n                        Job = job,\r\n                        Reason = state[5],\r\n                        FailedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        ExceptionType = state[1],\r\n                        ExceptionMessage = state[2],\r\n                        ExceptionDetails = state[3],\r\n                        InFailedState = FailedState.StateName.Equals(state[4], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="219-233", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_172 [label="Exit lambda expression", span="212-234", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_174 [label="Entry lambda expression", span="224-233", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_175 [label="new FailedJobDto\r\n                    {\r\n                        Job = job,\r\n                        Reason = state[5],\r\n                        FailedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        ExceptionType = state[1],\r\n                        ExceptionMessage = state[2],\r\n                        ExceptionDetails = state[3],\r\n                        InFailedState = FailedState.StateName.Equals(state[4], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="224-233", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_176 [label="Exit lambda expression", span="224-233", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_182 [label="var succeededJobIds = redis.GetRangeFromList(\r\n                    ''hangfire:succeeded'',\r\n                    from,\r\n                    from + count - 1)", span="241-244", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_181 [label="Entry lambda expression", span="239-260", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_183 [label="return GetJobsWithProperties(\r\n                    redis,\r\n                    succeededJobIds,\r\n                    null,\r\n                    new[] { ''SucceededAt'', ''PerformanceDuration'', ''Latency'', ''State'' },\r\n                    (job, jobData, state) => new SucceededJobDto\r\n                    {\r\n                        Job = job,\r\n                        SucceededAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        TotalDuration = state[1] != null && state[2] != null\r\n                            ? (long?) long.Parse(state[1]) + (long?) long.Parse(state[2])\r\n                            : null,\r\n                        InSucceededState = SucceededState.StateName.Equals(state[3], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="246-259", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_184 [label="Exit lambda expression", span="239-260", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_186 [label="Entry lambda expression", span="251-259", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_187 [label="new SucceededJobDto\r\n                    {\r\n                        Job = job,\r\n                        SucceededAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        TotalDuration = state[1] != null && state[2] != null\r\n                            ? (long?) long.Parse(state[1]) + (long?) long.Parse(state[2])\r\n                            : null,\r\n                        InSucceededState = SucceededState.StateName.Equals(state[3], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="251-259", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_188 [label="Exit lambda expression", span="251-259", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_195 [label="var deletedJobIds = redis.GetRangeFromList(\r\n                    ''hangfire:deleted'',\r\n                    from,\r\n                    from + count - 1)", span="267-270", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_194 [label="Entry lambda expression", span="265-283", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_196 [label="return GetJobsWithProperties(\r\n                    redis,\r\n                    deletedJobIds,\r\n                    null,\r\n                    new[] { ''DeletedAt'', ''State'' },\r\n                    (job, jobData, state) => new DeletedJobDto\r\n                    {\r\n                        Job = job,\r\n                        DeletedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InDeletedState = DeletedState.StateName.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="272-282", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_197 [label="Exit lambda expression", span="265-283", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_198 [label="Entry lambda expression", span="277-282", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_199 [label="new DeletedJobDto\r\n                    {\r\n                        Job = job,\r\n                        DeletedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InDeletedState = DeletedState.StateName.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="277-282", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_200 [label="Exit lambda expression", span="277-282", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_205 [label="Entry lambda expression", span="288-340", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_206 [label="var queues = redis.GetAllItemsFromSet(''hangfire:queues'')", span="290-290", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_212 [label="var pipeline = redis.CreatePipeline()", span="299-299", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_217 [label="var jobs = GetJobsWithProperties(\r\n                        redis,\r\n                        firstJobIds,\r\n                        new[] { ''State'' },\r\n                        new[] { ''EnqueuedAt'', ''State'' },\r\n                        (job, jobData, state) => new EnqueuedJobDto\r\n                        {\r\n                            Job = job,\r\n                            State = jobData[0],\r\n                            EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                            InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                        })", span="317-328", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_207 [label="var result = new List<QueueWithTopEnqueuedJobsDto>(queues.Count)", span="291-291", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_208 [label=queues, span="293-293", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_218 [label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = queue,\r\n                        FirstJobs = jobs,\r\n                        Length = length,\r\n                        Fetched = fetched\r\n                    })", span="330-336", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_219 [label="return result;", span="339-339", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_209 [label="IList<string> firstJobIds = null", span="295-295", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_213 [label="pipeline.QueueCommand(\r\n                            x => x.GetRangeFromList(\r\n                                String.Format(''hangfire:queue:{0}'', queue), -5, -1),\r\n                            x => firstJobIds = x)", span="301-304", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_226 [label="x.GetRangeFromList(\r\n                                String.Format(''hangfire:queue:{0}'', queue), -5, -1)", span="302-303", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_214 [label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queue)),\r\n                            x => length = x)", span="306-308", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_232 [label="x.GetListCount(String.Format(''hangfire:queue:{0}'', queue))", span="307-307", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_215 [label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue)),\r\n                            x => fetched = x)", span="310-312", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_238 [label="x.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue))", span="311-311", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_210 [label="long length = 0", span="296-296", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_211 [label="long fetched = 0", span="297-297", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_216 [label="pipeline.Flush()", span="314-314", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_225 [label="Entry lambda expression", span="302-303", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_228 [label="Entry lambda expression", span="304-304", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_231 [label="Entry lambda expression", span="307-307", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_234 [label="Entry lambda expression", span="308-308", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_237 [label="Entry lambda expression", span="311-311", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_240 [label="Entry lambda expression", span="312-312", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_243 [label="Entry lambda expression", span="322-328", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_220 [label="Exit lambda expression", span="288-340", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_227 [label="Exit lambda expression", span="302-303", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_229 [label="firstJobIds = x", span="304-304", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_230 [label="Exit lambda expression", span="304-304", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_233 [label="Exit lambda expression", span="307-307", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_235 [label="length = x", span="308-308", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_236 [label="Exit lambda expression", span="308-308", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_239 [label="Exit lambda expression", span="311-311", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_241 [label="fetched = x", span="312-312", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_242 [label="Exit lambda expression", span="312-312", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_244 [label="new EnqueuedJobDto\r\n                        {\r\n                            Job = job,\r\n                            State = jobData[0],\r\n                            EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                            InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                        }", span="322-328", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_245 [label="Exit lambda expression", span="322-328", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_251 [label="var jobIds = redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}'', queue),\r\n                    from,\r\n                    from + perPage - 1)", span="348-351", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_250 [label="Entry lambda expression", span="346-365", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_252 [label="return GetJobsWithProperties(\r\n                    redis,\r\n                    jobIds,\r\n                    new[] { ''State'' },\r\n                    new[] { ''EnqueuedAt'', ''State'' },\r\n                    (job, jobData, state) => new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="353-364", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_253 [label="Exit lambda expression", span="346-365", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_254 [label="Entry lambda expression", span="358-364", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_255 [label="new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="358-364", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_256 [label="Exit lambda expression", span="358-364", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_261 [label="var jobIds = redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}:dequeued'', queue),\r\n                    from, from + perPage - 1)", span="373-375", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_260 [label="Entry lambda expression", span="371-388", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_262 [label="return GetJobsWithProperties(\r\n                    redis,\r\n                    jobIds,\r\n                    new[] { ''State'', ''Fetched'' },\r\n                    null,\r\n                    (job, jobData, state) => new FetchedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        FetchedAt = JobHelper.FromNullableStringTimestamp(jobData[1])\r\n                    });", span="377-387", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_263 [label="Exit lambda expression", span="371-388", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_264 [label="Entry lambda expression", span="382-387", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_265 [label="new FetchedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        FetchedAt = JobHelper.FromNullableStringTimestamp(jobData[1])\r\n                    }", span="382-387", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_266 [label="Exit lambda expression", span="382-387", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_271 [label="Entry lambda expression", span="393-393", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_272 [label="GetHourlyTimelineStats(redis, ''succeeded'')", span="393-393", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_273 [label="Exit lambda expression", span="393-393", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_278 [label="Entry lambda expression", span="398-398", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_279 [label="GetHourlyTimelineStats(redis, ''failed'')", span="398-398", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_280 [label="Exit lambda expression", span="398-398", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_285 [label="var job = redis.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', jobId))", span="405-405", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_289 [label="var historyList = redis.GetAllItemsFromList(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId))", span="410-411", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_284 [label="Entry lambda expression", span="403-454", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_286 [label="job.Count == 0", span="406-406", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_300 [label="!job.ContainsKey(''Method'')", span="440-440", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_301 [label="job.Add(''Method'', null)", span="440-440", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_302 [label="!job.ContainsKey(''ParameterTypes'')", span="441-441", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_303 [label="job.Add(''ParameterTypes'', null)", span="441-441", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_304 [label="return new JobDetailsDto\r\n                {\r\n                    Job = TryToGetJob(job[''Type''], job[''Method''], job[''ParameterTypes''], job[''Arguments'']),\r\n                    CreatedAt =\r\n                        job.ContainsKey(''CreatedAt'')\r\n                            ? JobHelper.FromStringTimestamp(job[''CreatedAt''])\r\n                            : (DateTime?) null,\r\n                    Properties =\r\n                        job.Where(x => !hiddenProperties.Contains(x.Key)).ToDictionary(x => x.Key, x => x.Value),\r\n                    History = stateHistory\r\n                };", span="443-453", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_287 [label="return null;", span="406-406", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_288 [label="var hiddenProperties = new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'', ''State'', ''CreatedAt'' }", span="408-408", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_318 [label="!hiddenProperties.Contains(x.Key)", span="451-451", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_290 [label="var history = historyList\r\n                    .Select(JobHelper.FromJson<Dictionary<string, string>>)\r\n                    .ToList()", span="413-415", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_291 [label="var stateHistory = new List<StateHistoryDto>(history.Count)", span="417-417", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_292 [label=history, span="418-418", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_299 [label="stateHistory.Add(dto)", span="436-436", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_293 [label="var dto = new StateHistoryDto\r\n                    {\r\n                        StateName = entry[''State''],\r\n                        Reason = entry.ContainsKey(''Reason'') ? entry[''Reason''] : null,\r\n                        CreatedAt = JobHelper.FromStringTimestamp(entry[''CreatedAt'']),\r\n                    }", span="420-425", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_294 [label="var stateData = new Dictionary<string, string>(entry)", span="430-430", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_298 [label="dto.Data = stateData", span="435-435", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_295 [label="stateData.Remove(''State'')", span="431-431", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_296 [label="stateData.Remove(''Reason'')", span="432-432", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_297 [label="stateData.Remove(''CreatedAt'')", span="433-433", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_305 [label="Exit lambda expression", span="403-454", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_317 [label="Entry lambda expression", span="451-451", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_321 [label="Entry lambda expression", span="451-451", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_324 [label="Entry lambda expression", span="451-451", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_319 [label="Exit lambda expression", span="451-451", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_322 [label="x.Key", span="451-451", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_323 [label="Exit lambda expression", span="451-451", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_325 [label="x.Value", span="451-451", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_326 [label="Exit lambda expression", span="451-451", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_352 [label="String.Format(''hangfire:stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))", span="468-468", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_351 [label="Entry lambda expression", span="468-468", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_353 [label="Exit lambda expression", span="468-468", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_380 [label="String.Format(''hangfire:stats:{0}:{1}'', type, x)", span="500-500", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_376 [label="Entry lambda expression", span="499-499", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_379 [label="Entry lambda expression", span="500-500", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_377 [label="x.ToString(''yyyy-MM-dd'')", span="499-499", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_378 [label="Exit lambda expression", span="499-499", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_381 [label="Exit lambda expression", span="500-500", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_409 [label="x.GetValuesFromHash(String.Format(''hangfire:job:{0}:state'', id), stateProperties)", span="547-547", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_419 [label="new KeyValuePair<string, T>(\r\n                    x.JobId,\r\n                    x.Job.TrueForAll(y => y == null)\r\n                        ? default(T)\r\n                        : selector(x.Method, x.Job, x.State))", span="567-571", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_404 [label="!jobs.ContainsKey(id)", span="542-542", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_405 [label="jobs.Add(id, x)", span="542-542", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_416 [label="new\r\n                {\r\n                    JobId = x,\r\n                    Job = jobs[x],\r\n                    Method = TryToGetJob(\r\n                        jobs[x][properties.Length],\r\n                        jobs[x][properties.Length + 1],\r\n                        jobs[x][properties.Length + 2],\r\n                        jobs[x][properties.Length + 3]),\r\n                    State = states.ContainsKey(x) ? states[x] : null\r\n                }", span="556-566", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_412 [label="!states.ContainsKey(id)", span="548-548", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_413 [label="states.Add(id, x)", span="548-548", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_399 [label="x.GetValuesFromHash(\r\n                            String.Format(''hangfire:job:{0}'', id),\r\n                            properties.Union(new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'' }).ToArray())", span="539-541", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_398 [label="Entry lambda expression", span="539-541", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_403 [label="Entry lambda expression", span="542-542", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_408 [label="Entry lambda expression", span="547-547", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_411 [label="Entry lambda expression", span="548-548", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_415 [label="Entry lambda expression", span="556-566", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_418 [label="Entry lambda expression", span="567-571", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_400 [label="Exit lambda expression", span="539-541", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_406 [label="Exit lambda expression", span="542-542", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_410 [label="Exit lambda expression", span="547-547", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_414 [label="Exit lambda expression", span="548-548", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_417 [label="Exit lambda expression", span="556-566", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_420 [label="Exit lambda expression", span="567-571", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_424 [label="Entry lambda expression", span="569-569", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_425 [label="y == null", span="569-569", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_426 [label="Exit lambda expression", span="569-569", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_430 [label="Entry lambda expression", span="577-577", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_431 [label="redis.GetListCount(''hangfire:succeeded'')", span="577-577", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_432 [label="Exit lambda expression", span="577-577", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_436 [label="Entry lambda expression", span="582-634", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_437 [label="var stats = new StatisticsDto()", span="584-584", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_438 [label="var queues = redis.GetAllItemsFromSet(''hangfire:queues'')", span="586-586", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_439 [label="var pipeline = redis.CreatePipeline()", span="588-588", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_440 [label="pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:servers''),\r\n                        x => stats.Servers = x)", span="590-592", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_460 [label="stats.Servers = x", span="592-592", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_441 [label="pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:queues''),\r\n                        x => stats.Queues = x)", span="594-596", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_466 [label="stats.Queues = x", span="596-596", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_442 [label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:schedule''),\r\n                        x => stats.Scheduled = x)", span="598-600", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_472 [label="stats.Scheduled = x", span="600-600", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_443 [label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:processing''),\r\n                        x => stats.Processing = x)", span="602-604", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_478 [label="stats.Processing = x", span="604-604", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_444 [label="pipeline.QueueCommand(\r\n                        x => x.GetValue(''hangfire:stats:succeeded''),\r\n                        x => stats.Succeeded = long.Parse(x ?? ''0''))", span="606-608", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_485 [label="stats.Succeeded = long.Parse(x ?? ''0'')", span="608-608", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_445 [label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:failed''),\r\n                        x => stats.Failed = x)", span="610-612", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_492 [label="stats.Failed = x", span="612-612", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_446 [label="pipeline.QueueCommand(\r\n                        x => x.GetValue(''hangfire:stats:deleted''),\r\n                        x => stats.Deleted = long.Parse(x ?? ''0''))", span="614-616", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_498 [label="stats.Deleted = long.Parse(x ?? ''0'')", span="616-616", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_447 [label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:recurring-jobs''),\r\n                        x => stats.Recurring = x)", span="618-620", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_504 [label="stats.Recurring = x", span="620-620", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_450 [label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queueName)),\r\n                            x => stats.Enqueued += x)", span="625-627", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_510 [label="stats.Enqueued += x", span="627-627", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_452 [label="return stats;", span="633-633", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_448 [label=queues, span="622-622", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_451 [label="pipeline.Flush()", span="630-630", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_455 [label="Entry lambda expression", span="591-591", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_459 [label="Entry lambda expression", span="592-592", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_462 [label="Entry lambda expression", span="595-595", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_465 [label="Entry lambda expression", span="596-596", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_468 [label="Entry lambda expression", span="599-599", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_471 [label="Entry lambda expression", span="600-600", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_474 [label="Entry lambda expression", span="603-603", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_477 [label="Entry lambda expression", span="604-604", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_480 [label="Entry lambda expression", span="607-607", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_484 [label="Entry lambda expression", span="608-608", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_488 [label="Entry lambda expression", span="611-611", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_491 [label="Entry lambda expression", span="612-612", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_494 [label="Entry lambda expression", span="615-615", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_497 [label="Entry lambda expression", span="616-616", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_500 [label="Entry lambda expression", span="619-619", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_503 [label="Entry lambda expression", span="620-620", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_449 [label="var queueName = queue", span="624-624", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_507 [label="x.GetListCount(String.Format(''hangfire:queue:{0}'', queueName))", span="626-626", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_506 [label="Entry lambda expression", span="626-626", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_509 [label="Entry lambda expression", span="627-627", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_453 [label="Exit lambda expression", span="582-634", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_456 [label="x.GetSetCount(''hangfire:servers'')", span="591-591", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_457 [label="Exit lambda expression", span="591-591", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_461 [label="Exit lambda expression", span="592-592", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_463 [label="x.GetSetCount(''hangfire:queues'')", span="595-595", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_464 [label="Exit lambda expression", span="595-595", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_467 [label="Exit lambda expression", span="596-596", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_469 [label="x.GetSortedSetCount(''hangfire:schedule'')", span="599-599", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_470 [label="Exit lambda expression", span="599-599", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_473 [label="Exit lambda expression", span="600-600", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_475 [label="x.GetSortedSetCount(''hangfire:processing'')", span="603-603", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_476 [label="Exit lambda expression", span="603-603", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_479 [label="Exit lambda expression", span="604-604", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_481 [label="x.GetValue(''hangfire:stats:succeeded'')", span="607-607", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_482 [label="Exit lambda expression", span="607-607", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_486 [label="Exit lambda expression", span="608-608", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_489 [label="x.GetSortedSetCount(''hangfire:failed'')", span="611-611", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_490 [label="Exit lambda expression", span="611-611", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_493 [label="Exit lambda expression", span="612-612", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_495 [label="x.GetValue(''hangfire:stats:deleted'')", span="615-615", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_496 [label="Exit lambda expression", span="615-615", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_499 [label="Exit lambda expression", span="616-616", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_501 [label="x.GetSortedSetCount(''hangfire:recurring-jobs'')", span="619-619", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_502 [label="Exit lambda expression", span="619-619", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_505 [label="Exit lambda expression", span="620-620", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_508 [label="Exit lambda expression", span="626-626", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_511 [label="Exit lambda expression", span="627-627", cluster="lambda expression", file="BackgroundProcessExtensions.cs"];
m4_53 [label="Entry Unk.GetRangeFromSortedSet", span="", cluster="Unk.GetRangeFromSortedSet", file="BackgroundProcessExtensions.cs"];
m4_223 [label="Entry HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="18-18", cluster="HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", file="BackgroundProcessExtensions.cs"];
m4_224 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="BackgroundProcessExtensions.cs"];
m4_93 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="BackgroundProcessExtensions.cs"];
m4_97 [label="Entry Unk.Format", span="", cluster="Unk.Format", file="BackgroundProcessExtensions.cs"];
m4_89 [label="Entry Unk.QueueCommand", span="", cluster="Unk.QueueCommand", file="BackgroundProcessExtensions.cs"];
m4_115 [label="Entry HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", span="645-645", cluster="HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", file="BackgroundProcessExtensions.cs"];
m4_517 [label="return new InvocationData(\r\n                    type,\r\n                    method,\r\n                    parameterTypes,\r\n                    arguments).Deserialize();", span="650-654", cluster="HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", file="BackgroundProcessExtensions.cs"];
m4_518 [label=Exception, span="656-656", cluster="HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", file="BackgroundProcessExtensions.cs"];
m4_519 [label="return null;", span="658-658", cluster="HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", file="BackgroundProcessExtensions.cs"];
m4_520 [label="Exit HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", span="645-645", cluster="HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", file="BackgroundProcessExtensions.cs"];
m4_35 [label="return UseConnection(redis => redis.GetSortedSetCount(''hangfire:processing''));", span="64-64", cluster="HangFire.Redis.RedisMonitoringApi.ProcessingCount()", file="BackgroundProcessExtensions.cs"];
m4_166 [label="Entry HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", span="210-210", cluster="HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", file="BackgroundProcessExtensions.cs"];
m4_167 [label="return UseConnection(redis =>\r\n            {\r\n                var failedJobIds = redis.GetRangeFromSortedSetDesc(\r\n                    ''hangfire:failed'',\r\n                    from,\r\n                    from + count - 1);\r\n\r\n                return GetJobsWithProperties(\r\n                    redis,\r\n                    failedJobIds,\r\n                    null,\r\n                    new[] { ''FailedAt'', ''ExceptionType'', ''ExceptionMessage'', ''ExceptionDetails'', ''State'', ''Reason'' },\r\n                    (job, jobData, state) => new FailedJobDto\r\n                    {\r\n                        Job = job,\r\n                        Reason = state[5],\r\n                        FailedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        ExceptionType = state[1],\r\n                        ExceptionMessage = state[2],\r\n                        ExceptionDetails = state[3],\r\n                        InFailedState = FailedState.StateName.Equals(state[4], StringComparison.OrdinalIgnoreCase)\r\n                    });\r\n            });", span="212-234", cluster="HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", file="BackgroundProcessExtensions.cs"];
m4_168 [label="Exit HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", span="210-210", cluster="HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", file="BackgroundProcessExtensions.cs"];
m4_267 [label="Entry HangFire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", span="21-21", cluster="HangFire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", file="BackgroundProcessExtensions.cs"];
m4_354 [label="Entry System.DateTime.ToString(string)", span="0-0", cluster="System.DateTime.ToString(string)", file="BackgroundProcessExtensions.cs"];
m4_70 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection", file="BackgroundProcessExtensions.cs"];
m4_221 [label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span="", cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="BackgroundProcessExtensions.cs"];
m4_348 [label="Entry Unk.ElementAt", span="", cluster="Unk.ElementAt", file="BackgroundProcessExtensions.cs"];
m4_129 [label="Entry HangFire.Redis.RedisMonitoringApi.Servers()", span="164-164", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="BackgroundProcessExtensions.cs"];
m4_130 [label="return UseConnection(redis =>\r\n            {\r\n                var serverNames = redis.GetAllItemsFromSet(''hangfire:servers'');\r\n\r\n                if (serverNames.Count == 0)\r\n                {\r\n                    return new List<ServerDto>();\r\n                }\r\n\r\n                var servers = new Dictionary<string, List<string>>();\r\n                var queues = new Dictionary<string, List<string>>();\r\n\r\n                using (var pipeline = redis.CreatePipeline())\r\n                {\r\n                    foreach (var serverName in serverNames)\r\n                    {\r\n                        var name = serverName;\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:server:{0}'', name),\r\n                                ''WorkerCount'', ''StartedAt'', ''Heartbeat''),\r\n                            x => servers.Add(name, x));\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetAllItemsFromList(\r\n                                String.Format(''hangfire:server:{0}:queues'', name)),\r\n                            x => queues.Add(name, x));\r\n                    }\r\n\r\n                    pipeline.Flush();\r\n                }\r\n\r\n                return serverNames.Select(x => new ServerDto\r\n                {\r\n                    Name = x,\r\n                    WorkersCount = int.Parse(servers[x][0]),\r\n                    Queues = queues[x],\r\n                    StartedAt = JobHelper.FromStringTimestamp(servers[x][1]),\r\n                    Heartbeat = JobHelper.FromNullableStringTimestamp(servers[x][2])\r\n                }).ToList();\r\n            });", span="166-207", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="BackgroundProcessExtensions.cs"];
m4_131 [label="Exit HangFire.Redis.RedisMonitoringApi.Servers()", span="164-164", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="BackgroundProcessExtensions.cs"];
m4_40 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="BackgroundProcessExtensions.cs"];
m4_42 [label="Thread.CurrentThread.Name = name", span="96-96", cluster="Hangfire.Server.BackgroundProcessExtensions.TrySetThreadName(string)", file="BackgroundProcessExtensions.cs"];
m4_185 [label="Entry Unk.GetRangeFromList", span="", cluster="Unk.GetRangeFromList", file="BackgroundProcessExtensions.cs"];
m4_178 [label="Entry HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", span="237-237", cluster="HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", file="BackgroundProcessExtensions.cs"];
m4_179 [label="return UseConnection(redis =>\r\n            {\r\n                var succeededJobIds = redis.GetRangeFromList(\r\n                    ''hangfire:succeeded'',\r\n                    from,\r\n                    from + count - 1);\r\n\r\n                return GetJobsWithProperties(\r\n                    redis,\r\n                    succeededJobIds,\r\n                    null,\r\n                    new[] { ''SucceededAt'', ''PerformanceDuration'', ''Latency'', ''State'' },\r\n                    (job, jobData, state) => new SucceededJobDto\r\n                    {\r\n                        Job = job,\r\n                        SucceededAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        TotalDuration = state[1] != null && state[2] != null\r\n                            ? (long?) long.Parse(state[1]) + (long?) long.Parse(state[2])\r\n                            : null,\r\n                        InSucceededState = SucceededState.StateName.Equals(state[3], StringComparison.OrdinalIgnoreCase)\r\n                    });\r\n            });", span="239-260", cluster="HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", file="BackgroundProcessExtensions.cs"];
m4_180 [label="Exit HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", span="237-237", cluster="HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", file="BackgroundProcessExtensions.cs"];
m4_116 [label="Entry HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", span="154-154", cluster="HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", file="BackgroundProcessExtensions.cs"];
m4_117 [label="return UseConnection(redis => GetTimelineStats(redis, ''succeeded''));", span="156-156", cluster="HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", file="BackgroundProcessExtensions.cs"];
m4_118 [label="Exit HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", span="154-154", cluster="HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", file="BackgroundProcessExtensions.cs"];
m4_90 [label="Entry Unk.Flush", span="", cluster="Unk.Flush", file="BackgroundProcessExtensions.cs"];
m4_487 [label="Entry Unk.Parse", span="", cluster="Unk.Parse", file="BackgroundProcessExtensions.cs"];
m4_102 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="BackgroundProcessExtensions.cs"];
m4_63 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="BackgroundProcessExtensions.cs"];
m4_346 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="BackgroundProcessExtensions.cs"];
m4_46 [label="Hangfire.Server.BackgroundProcessContext", span="", cluster="HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", file="BackgroundProcessExtensions.cs"];
m4_47 [label="return UseConnection(redis =>\r\n            {\r\n                var jobIds = redis.GetRangeFromSortedSet(\r\n                    ''hangfire:processing'',\r\n                    from,\r\n                    from + count - 1);\r\n\r\n                return new JobList<ProcessingJobDto>(GetJobsWithProperties(redis,\r\n                    jobIds,\r\n                    null,\r\n                    new[] { ''StartedAt'', ''ServerName'', ''ServerId'', ''State'' },\r\n                    (job, jobData, state) => new ProcessingJobDto\r\n                    {\r\n                        ServerId = state[2] ?? state[1],\r\n                        Job = job,\r\n                        StartedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InProcessingState = ProcessingState.StateName.Equals(\r\n                            state[3], StringComparison.OrdinalIgnoreCase),\r\n                    }).OrderBy(x => x.Value.StartedAt).ToList());\r\n            });", span="75-94", cluster="HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", file="BackgroundProcessExtensions.cs"];
m4_48 [label="Exit HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", span="72-72", cluster="HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", file="BackgroundProcessExtensions.cs"];
m4_13 [label="Entry Hangfire.Server.BackgroundProcessExtensions.CreateTask(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", span="48-48", cluster="Hangfire.Server.BackgroundProcessExtensions.CreateTask(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="BackgroundProcessExtensions.cs"];
m4_189 [label="Entry HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="BackgroundProcessExtensions.cs"];
m4_21 [label="Entry Unk.GetListCount", span="", cluster="Unk.GetListCount", file="BackgroundProcessExtensions.cs"];
m4_36 [label="Entry Hangfire.Server.BackgroundProcessExtensions.TrySetThreadName(string)", span="92-92", cluster="Hangfire.Server.BackgroundProcessExtensions.TrySetThreadName(string)", file="BackgroundProcessExtensions.cs"];
m4_401 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="BackgroundProcessExtensions.cs"];
m4_312 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", file="BackgroundProcessExtensions.cs"];
m4_397 [label="Entry JobList<T>.cstr", span="", cluster="JobList<T>.cstr", file="BackgroundProcessExtensions.cs"];
m4_350 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="BackgroundProcessExtensions.cs"];
m4_521 [label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", span="24-24", cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", file="BackgroundProcessExtensions.cs"];
m4_6 [label="Entry HangFire.Redis.RedisMonitoringApi.ScheduledCount()", span="39-39", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledCount()", file="BackgroundProcessExtensions.cs"];
m4_8 [label="Exit HangFire.Redis.RedisMonitoringApi.ScheduledCount()", span="39-39", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledCount()", file="BackgroundProcessExtensions.cs"];
m4_7 [label="return UseConnection(redis => \r\n                redis.GetSortedSetCount(''hangfire:schedule''));", span="41-42", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledCount()", file="BackgroundProcessExtensions.cs"];
m4_268 [label="Entry HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", span="391-391", cluster="HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", file="BackgroundProcessExtensions.cs"];
m4_269 [label="return UseConnection(redis => GetHourlyTimelineStats(redis, ''succeeded''));", span="393-393", cluster="HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", file="BackgroundProcessExtensions.cs"];
m4_270 [label="Exit HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", span="391-391", cluster="HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", file="BackgroundProcessExtensions.cs"];
m4_355 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="BackgroundProcessExtensions.cs"];
m4_306 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash", file="BackgroundProcessExtensions.cs"];
m4_316 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="BackgroundProcessExtensions.cs"];
m4_310 [label="Entry Unk.FromStringTimestamp", span="", cluster="Unk.FromStringTimestamp", file="BackgroundProcessExtensions.cs"];
m4_396 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int)", file="BackgroundProcessExtensions.cs"];
m4_458 [label="Entry Unk.GetSetCount", span="", cluster="Unk.GetSetCount", file="BackgroundProcessExtensions.cs"];
m4_114 [label="Entry HangFire.Common.JobHelper.FromTimestamp(long)", span="45-45", cluster="HangFire.Common.JobHelper.FromTimestamp(long)", file="BackgroundProcessExtensions.cs"];
m4_123 [label="Entry HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", span="159-159", cluster="HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", file="BackgroundProcessExtensions.cs"];
m4_124 [label="return UseConnection(redis => GetTimelineStats(redis, ''failed''));", span="161-161", cluster="HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", file="BackgroundProcessExtensions.cs"];
m4_125 [label="Exit HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", span="159-159", cluster="HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", file="BackgroundProcessExtensions.cs"];
m4_246 [label="Entry HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", file="BackgroundProcessExtensions.cs"];
m4_177 [label="Entry HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", file="BackgroundProcessExtensions.cs"];
m4_202 [label="Entry HangFire.Redis.RedisMonitoringApi.Queues()", span="286-286", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="BackgroundProcessExtensions.cs"];
m4_203 [label="return UseConnection(redis =>\r\n            {\r\n                var queues = redis.GetAllItemsFromSet(''hangfire:queues'');\r\n                var result = new List<QueueWithTopEnqueuedJobsDto>(queues.Count);\r\n\r\n                foreach (var queue in queues)\r\n                {\r\n                    IList<string> firstJobIds = null;\r\n                    long length = 0;\r\n                    long fetched = 0;\r\n\r\n                    using (var pipeline = redis.CreatePipeline())\r\n                    {\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetRangeFromList(\r\n                                String.Format(''hangfire:queue:{0}'', queue), -5, -1),\r\n                            x => firstJobIds = x);\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queue)),\r\n                            x => length = x);\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue)),\r\n                            x => fetched = x);\r\n\r\n                        pipeline.Flush();\r\n                    }\r\n\r\n                    var jobs = GetJobsWithProperties(\r\n                        redis,\r\n                        firstJobIds,\r\n                        new[] { ''State'' },\r\n                        new[] { ''EnqueuedAt'', ''State'' },\r\n                        (job, jobData, state) => new EnqueuedJobDto\r\n                        {\r\n                            Job = job,\r\n                            State = jobData[0],\r\n                            EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                            InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                        });\r\n\r\n                    result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = queue,\r\n                        FirstJobs = jobs,\r\n                        Length = length,\r\n                        Fetched = fetched\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="288-340", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="BackgroundProcessExtensions.cs"];
m4_204 [label="Exit HangFire.Redis.RedisMonitoringApi.Queues()", span="286-286", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="BackgroundProcessExtensions.cs"];
m4_314 [label="Entry Unk.TryToGetJob", span="", cluster="Unk.TryToGetJob", file="BackgroundProcessExtensions.cs"];
m4_67 [label="Entry HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", span="97-97", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="BackgroundProcessExtensions.cs"];
m4_68 [label="return UseConnection(redis =>\r\n            {\r\n                var scheduledJobs = redis.GetRangeWithScoresFromSortedSet(\r\n                    ''hangfire:schedule'',\r\n                    from,\r\n                    from + count - 1);\r\n\r\n                if (scheduledJobs.Count == 0)\r\n                {\r\n                    return new JobList<ScheduledJobDto>(new List<KeyValuePair<string, ScheduledJobDto>>());\r\n                }\r\n\r\n                var jobs = new Dictionary<string, List<string>>();\r\n                var states = new Dictionary<string, List<String>>();\r\n\r\n                using (var pipeline = redis.CreatePipeline())\r\n                {\r\n                    foreach (var scheduledJob in scheduledJobs)\r\n                    {\r\n                        var job = scheduledJob;\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}'', job.Key),\r\n                                new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'' }),\r\n                            x => jobs.Add(job.Key, x));\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}:state'', job.Key),\r\n                                new[] { ''State'', ''ScheduledAt'' }),\r\n                            x => states.Add(job.Key, x));\r\n                    }\r\n\r\n                    pipeline.Flush();\r\n                }\r\n\r\n                return new JobList<ScheduledJobDto>(scheduledJobs\r\n                    .Select(job => new KeyValuePair<string, ScheduledJobDto>(\r\n                        job.Key,\r\n                        new ScheduledJobDto\r\n                        {\r\n                            EnqueueAt = JobHelper.FromTimestamp((long) job.Value),\r\n                            Job = TryToGetJob(jobs[job.Key][0], jobs[job.Key][1], jobs[job.Key][2], jobs[job.Key][3]),\r\n                            ScheduledAt =\r\n                                states[job.Key].Count > 1\r\n                                    ? JobHelper.FromNullableStringTimestamp(states[job.Key][1])\r\n                                    : null,\r\n                            InScheduledState =\r\n                                ScheduledState.StateName.Equals(states[job.Key][0], StringComparison.OrdinalIgnoreCase)\r\n                        }))\r\n                    .ToList());\r\n            });", span="99-151", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="BackgroundProcessExtensions.cs"];
m4_69 [label="Exit HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", span="97-97", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="BackgroundProcessExtensions.cs"];
m4_16 [label="Exit HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", span="45-45", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", color=green, community=0, file="BackgroundProcessExtensions.cs"];
m4_14 [label="Entry HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", span="45-45", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", file="BackgroundProcessExtensions.cs"];
m4_15 [label="return UseConnection(redis => \r\n                redis.GetListCount(String.Format(''hangfire:queue:{0}'', queue)));", span="47-48", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", file="BackgroundProcessExtensions.cs"];
m4_87 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="BackgroundProcessExtensions.cs"];
m4_54 [label="Entry HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="22-22", cluster="HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", file="BackgroundProcessExtensions.cs"];
m4_347 [label="Entry Unk.GetValuesMap", span="", cluster="Unk.GetValuesMap", file="BackgroundProcessExtensions.cs"];
m4_156 [label="Entry Unk.GetAllItemsFromList", span="", cluster="Unk.GetAllItemsFromList", file="BackgroundProcessExtensions.cs"];
m4_320 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="BackgroundProcessExtensions.cs"];
m4_92 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="BackgroundProcessExtensions.cs"];
m4_308 [label="Entry HangFire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", span="21-21", cluster="HangFire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", file="BackgroundProcessExtensions.cs"];
m4_146 [label="Entry Unk.GetAllItemsFromSet", span="", cluster="Unk.GetAllItemsFromSet", file="BackgroundProcessExtensions.cs"];
m4_173 [label="Entry Unk.GetRangeFromSortedSetDesc", span="", cluster="Unk.GetRangeFromSortedSetDesc", file="BackgroundProcessExtensions.cs"];
m4_483 [label="Entry Unk.GetValue", span="", cluster="Unk.GetValue", file="BackgroundProcessExtensions.cs"];
m4_98 [label="Entry Unk.GetValuesFromHash", span="", cluster="Unk.GetValuesFromHash", file="BackgroundProcessExtensions.cs"];
m4_523 [label="HangFire.Redis.RedisMonitoringApi", span="", file="BackgroundProcessExtensions.cs"];
m4_524 [label=string, span="", file="BackgroundProcessExtensions.cs"];
m4_525 [label=string, span="", file="BackgroundProcessExtensions.cs"];
m4_526 [label=int, span="", file="BackgroundProcessExtensions.cs"];
m4_527 [label=int, span="", file="BackgroundProcessExtensions.cs"];
m4_528 [label=int, span="", file="BackgroundProcessExtensions.cs"];
m4_529 [label=int, span="", file="BackgroundProcessExtensions.cs"];
m4_530 [label=job, span="", file="BackgroundProcessExtensions.cs"];
m4_531 [label=jobs, span="", file="BackgroundProcessExtensions.cs"];
m4_532 [label=states, span="", file="BackgroundProcessExtensions.cs"];
m4_533 [label=name, span="", file="BackgroundProcessExtensions.cs"];
m4_534 [label=servers, span="", file="BackgroundProcessExtensions.cs"];
m4_535 [label=queues, span="", file="BackgroundProcessExtensions.cs"];
m4_536 [label=int, span="", file="BackgroundProcessExtensions.cs"];
m4_537 [label=int, span="", file="BackgroundProcessExtensions.cs"];
m4_538 [label=int, span="", file="BackgroundProcessExtensions.cs"];
m4_539 [label=int, span="", file="BackgroundProcessExtensions.cs"];
m4_540 [label=int, span="", file="BackgroundProcessExtensions.cs"];
m4_541 [label=int, span="", file="BackgroundProcessExtensions.cs"];
m4_542 [label=queue, span="", file="BackgroundProcessExtensions.cs"];
m4_543 [label=string, span="", file="BackgroundProcessExtensions.cs"];
m4_544 [label=int, span="", file="BackgroundProcessExtensions.cs"];
m4_545 [label=int, span="", file="BackgroundProcessExtensions.cs"];
m4_546 [label=string, span="", file="BackgroundProcessExtensions.cs"];
m4_547 [label=int, span="", file="BackgroundProcessExtensions.cs"];
m4_548 [label=int, span="", file="BackgroundProcessExtensions.cs"];
m4_549 [label=string, span="", file="BackgroundProcessExtensions.cs"];
m4_550 [label=hiddenProperties, span="", file="BackgroundProcessExtensions.cs"];
m4_551 [label=string, span="", file="BackgroundProcessExtensions.cs"];
m4_552 [label=string, span="", file="BackgroundProcessExtensions.cs"];
m4_553 [label="string[]", span="", file="BackgroundProcessExtensions.cs"];
m4_554 [label=id, span="", file="BackgroundProcessExtensions.cs"];
m4_555 [label=jobs, span="", file="BackgroundProcessExtensions.cs"];
m4_556 [label="string[]", span="", file="BackgroundProcessExtensions.cs"];
m4_557 [label=states, span="", file="BackgroundProcessExtensions.cs"];
m4_558 [label="System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>", span="", file="BackgroundProcessExtensions.cs"];
m4_559 [label=stats, span="", file="BackgroundProcessExtensions.cs"];
m4_560 [label=queueName, span="", file="BackgroundProcessExtensions.cs"];
m8_13 [label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0", cluster="System.DateTime.Add(System.TimeSpan)", file="DefaultJobPerformanceProcess.cs"];
m8_5 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="DefaultJobPerformanceProcess.cs"];
m8_27 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)", file="DefaultJobPerformanceProcess.cs"];
m8_28 [label="Entry HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.AppendHistory(string, System.Collections.Generic.Dictionary<string, string>)", span="40-40", cluster="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.AppendHistory(string, System.Collections.Generic.Dictionary<string, string>)", file="DefaultJobPerformanceProcess.cs"];
m8_29 [label="_transaction.QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.JobHistory (JobId, CreatedAt, Data) ''\r\n                + @''values (@jobId, @createdAt, @data)'',\r\n                new { jobId = jobId, createdAt = DateTime.UtcNow, data = JobHelper.ToJson(properties) }))", span="42-45", cluster="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.AppendHistory(string, System.Collections.Generic.Dictionary<string, string>)", file="DefaultJobPerformanceProcess.cs"];
m8_30 [label="Exit HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.AppendHistory(string, System.Collections.Generic.Dictionary<string, string>)", span="40-40", cluster="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.AppendHistory(string, System.Collections.Generic.Dictionary<string, string>)", file="DefaultJobPerformanceProcess.cs"];
m8_15 [label="Entry HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.Persist(string)", span="26-26", cluster="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.Persist(string)", file="DefaultJobPerformanceProcess.cs"];
m8_16 [label="_transaction.QueueCommand(x => x.Execute(\r\n                @''update HangFire.Job set ExpireAt = NULL where Id = @id'',\r\n                new { id = jobId }))", span="28-30", cluster="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.Persist(string)", file="DefaultJobPerformanceProcess.cs"];
m8_17 [label="Exit HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.Persist(string)", span="26-26", cluster="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.Persist(string)", file="DefaultJobPerformanceProcess.cs"];
m8_14 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="DefaultJobPerformanceProcess.cs"];
m8_6 [label="Entry HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.Expire(string, System.TimeSpan)", span="19-19", cluster="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.Expire(string, System.TimeSpan)", file="DefaultJobPerformanceProcess.cs"];
m8_7 [label="_transaction.QueueCommand(x => x.Execute(\r\n                @''update HangFire.Job set ExpireAt = @expireAt where Id = @id'',\r\n                new { expireAt = DateTime.UtcNow.Add(expireIn), id = jobId }))", span="21-23", cluster="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.Expire(string, System.TimeSpan)", file="DefaultJobPerformanceProcess.cs"];
m8_8 [label="Exit HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.Expire(string, System.TimeSpan)", span="19-19", cluster="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.Expire(string, System.TimeSpan)", file="DefaultJobPerformanceProcess.cs"];
m8_9 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", span="39-39", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="DefaultJobPerformanceProcess.cs"];
m8_0 [label="Entry HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.SqlServerWriteOnlyJob(HangFire.SqlServer.SqlServerWriteOnlyTransaction)", span="12-12", cluster="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.SqlServerWriteOnlyJob(HangFire.SqlServer.SqlServerWriteOnlyTransaction)", file="DefaultJobPerformanceProcess.cs"];
m8_3 [label="_transaction = transaction", span="16-16", cluster="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.SqlServerWriteOnlyJob(HangFire.SqlServer.SqlServerWriteOnlyTransaction)", file="DefaultJobPerformanceProcess.cs"];
m8_1 [label="transaction == null", span="14-14", cluster="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.SqlServerWriteOnlyJob(HangFire.SqlServer.SqlServerWriteOnlyTransaction)", file="DefaultJobPerformanceProcess.cs"];
m8_2 [label="throw new ArgumentNullException(''transaction'');", span="14-14", cluster="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.SqlServerWriteOnlyJob(HangFire.SqlServer.SqlServerWriteOnlyTransaction)", file="DefaultJobPerformanceProcess.cs"];
m8_4 [label="Exit HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.SqlServerWriteOnlyJob(HangFire.SqlServer.SqlServerWriteOnlyTransaction)", span="12-12", cluster="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.SqlServerWriteOnlyJob(HangFire.SqlServer.SqlServerWriteOnlyTransaction)", file="DefaultJobPerformanceProcess.cs"];
m8_31 [label="Entry lambda expression", span="42-45", cluster="lambda expression", file="DefaultJobPerformanceProcess.cs"];
m8_24 [label="Entry lambda expression", span="35-37", cluster="lambda expression", file="DefaultJobPerformanceProcess.cs"];
m8_25 [label="x.Execute(\r\n                @''update HangFire.Job set State = @name, StateData = @data where Id = @id'',\r\n                new { name = state, data = JobHelper.ToJson(stateProperties), id = jobId })", span="35-37", cluster="lambda expression", color=green, community=0, file="DefaultJobPerformanceProcess.cs"];
m8_26 [label="Exit lambda expression", span="35-37", cluster="lambda expression", file="DefaultJobPerformanceProcess.cs"];
m8_32 [label="x.Execute(\r\n                @''insert into HangFire.JobHistory (JobId, CreatedAt, Data) ''\r\n                + @''values (@jobId, @createdAt, @data)'',\r\n                new { jobId = jobId, createdAt = DateTime.UtcNow, data = JobHelper.ToJson(properties) })", span="42-45", cluster="lambda expression", file="DefaultJobPerformanceProcess.cs"];
m8_11 [label="x.Execute(\r\n                @''update HangFire.Job set ExpireAt = @expireAt where Id = @id'',\r\n                new { expireAt = DateTime.UtcNow.Add(expireIn), id = jobId })", span="21-23", cluster="lambda expression", file="DefaultJobPerformanceProcess.cs"];
m8_19 [label="x.Execute(\r\n                @''update HangFire.Job set ExpireAt = NULL where Id = @id'',\r\n                new { id = jobId })", span="28-30", cluster="lambda expression", file="DefaultJobPerformanceProcess.cs"];
m8_10 [label="Entry lambda expression", span="21-23", cluster="lambda expression", file="DefaultJobPerformanceProcess.cs"];
m8_18 [label="Entry lambda expression", span="28-30", cluster="lambda expression", file="DefaultJobPerformanceProcess.cs"];
m8_33 [label="Exit lambda expression", span="42-45", cluster="lambda expression", file="DefaultJobPerformanceProcess.cs"];
m8_12 [label="Exit lambda expression", span="21-23", cluster="lambda expression", file="DefaultJobPerformanceProcess.cs"];
m8_20 [label="Exit lambda expression", span="28-30", cluster="lambda expression", file="DefaultJobPerformanceProcess.cs"];
m8_21 [label="Entry HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.SetState(string, string, System.Collections.Generic.Dictionary<string, string>)", span="33-33", cluster="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.SetState(string, string, System.Collections.Generic.Dictionary<string, string>)", file="DefaultJobPerformanceProcess.cs"];
m8_22 [label="_transaction.QueueCommand(x => x.Execute(\r\n                @''update HangFire.Job set State = @name, StateData = @data where Id = @id'',\r\n                new { name = state, data = JobHelper.ToJson(stateProperties), id = jobId }))", span="35-37", cluster="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.SetState(string, string, System.Collections.Generic.Dictionary<string, string>)", color=green, community=0, file="DefaultJobPerformanceProcess.cs"];
m8_23 [label="Exit HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.SetState(string, string, System.Collections.Generic.Dictionary<string, string>)", span="33-33", cluster="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob.SetState(string, string, System.Collections.Generic.Dictionary<string, string>)", file="DefaultJobPerformanceProcess.cs"];
m8_34 [label="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob", span="", file="DefaultJobPerformanceProcess.cs"];
m8_38 [label=string, span="", file="DefaultJobPerformanceProcess.cs"];
m8_39 [label=string, span="", file="DefaultJobPerformanceProcess.cs"];
m8_40 [label="System.Collections.Generic.Dictionary<string, string>", span="", file="DefaultJobPerformanceProcess.cs"];
m8_41 [label=string, span="", file="DefaultJobPerformanceProcess.cs"];
m8_42 [label="System.Collections.Generic.Dictionary<string, string>", span="", file="DefaultJobPerformanceProcess.cs"];
m8_35 [label=string, span="", file="DefaultJobPerformanceProcess.cs"];
m8_36 [label="System.TimeSpan", span="", file="DefaultJobPerformanceProcess.cs"];
m8_37 [label=string, span="", file="DefaultJobPerformanceProcess.cs"];
m9_8 [label="Entry Hangfire.IBootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", span="65-65", cluster="Hangfire.IBootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", file="IBootstrapperConfiguration.cs"];
m9_9 [label="Exit Hangfire.IBootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", span="65-65", cluster="Hangfire.IBootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", file="IBootstrapperConfiguration.cs"];
m9_0 [label="Entry Hangfire.IBootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", span="35-35", cluster="Hangfire.IBootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", file="IBootstrapperConfiguration.cs"];
m9_1 [label="Exit Hangfire.IBootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", span="35-35", cluster="Hangfire.IBootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", file="IBootstrapperConfiguration.cs"];
m9_10 [label="Entry Hangfire.IBootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", span="73-73", cluster="Hangfire.IBootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", file="IBootstrapperConfiguration.cs"];
m9_11 [label="Exit Hangfire.IBootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", span="73-73", cluster="Hangfire.IBootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", file="IBootstrapperConfiguration.cs"];
m9_4 [label="Entry Hangfire.IBootstrapperConfiguration.UseDashboardPath(string)", span="50-50", cluster="Hangfire.IBootstrapperConfiguration.UseDashboardPath(string)", file="IBootstrapperConfiguration.cs"];
m9_5 [label="Exit Hangfire.IBootstrapperConfiguration.UseDashboardPath(string)", span="50-50", cluster="Hangfire.IBootstrapperConfiguration.UseDashboardPath(string)", file="IBootstrapperConfiguration.cs"];
m9_2 [label="Entry Hangfire.IBootstrapperConfiguration.UseFilter(object)", span="42-42", cluster="Hangfire.IBootstrapperConfiguration.UseFilter(object)", file="IBootstrapperConfiguration.cs"];
m9_3 [label="Exit Hangfire.IBootstrapperConfiguration.UseFilter(object)", span="42-42", cluster="Hangfire.IBootstrapperConfiguration.UseFilter(object)", file="IBootstrapperConfiguration.cs"];
m9_12 [label="Entry Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", span="81-81", cluster="Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", file="IBootstrapperConfiguration.cs"];
m9_13 [label="Exit Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", span="81-81", cluster="Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", file="IBootstrapperConfiguration.cs"];
m9_6 [label="Entry Hangfire.IBootstrapperConfiguration.UseAppPath(string)", span="57-57", cluster="Hangfire.IBootstrapperConfiguration.UseAppPath(string)", file="IBootstrapperConfiguration.cs"];
m9_7 [label="Exit Hangfire.IBootstrapperConfiguration.UseAppPath(string)", span="57-57", cluster="Hangfire.IBootstrapperConfiguration.UseAppPath(string)", file="IBootstrapperConfiguration.cs"];
m10_26 [label="_inner.Verify(x => x.Execute(_cts.Token), Times.AtLeast(5))", span="47-47", cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_CallsTheExecuteMethod_UntilCancellationToken_IsCanceled()", file="InfiniteLoopComponentFacts.cs"];
m10_84 [label="Entry HangFire.Tests.States.ScheduledStateFeature.FixtureData.System.IDisposable.Dispose()", span="175-175", cluster="HangFire.Tests.States.ScheduledStateFeature.FixtureData.System.IDisposable.Dispose()", file="InfiniteLoopComponentFacts.cs"];
m10_85 [label="ScheduledStateFeature.FeatureTearDown()", span="177-177", cluster="HangFire.Tests.States.ScheduledStateFeature.FixtureData.System.IDisposable.Dispose()", file="InfiniteLoopComponentFacts.cs"];
m10_86 [label="Exit HangFire.Tests.States.ScheduledStateFeature.FixtureData.System.IDisposable.Dispose()", span="175-175", cluster="HangFire.Tests.States.ScheduledStateFeature.FixtureData.System.IDisposable.Dispose()", file="InfiniteLoopComponentFacts.cs"];
m10_30 [label="Entry System.TimeSpan.FromMilliseconds(double)", span="0-0", cluster="System.TimeSpan.FromMilliseconds(double)", file="InfiniteLoopComponentFacts.cs"];
m10_19 [label="Entry HangFire.Tests.States.ScheduledStateFeature.ScenarioTearDown()", span="51-51", cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioTearDown()", file="InfiniteLoopComponentFacts.cs"];
m10_73 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying, it should remove the job from the schedule'', ((string[])(null)))", span="150-150", cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", color=green, community=0, file="InfiniteLoopComponentFacts.cs"];
m10_74 [label="this.ScenarioSetup(scenarioInfo)", span="152-152", cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="InfiniteLoopComponentFacts.cs"];
m10_20 [label="testRunner.OnScenarioEnd()", span="53-53", cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioTearDown()", file="InfiniteLoopComponentFacts.cs"];
m10_22 [label="_inner.Setup(x => x.Execute(It.IsAny<CancellationToken>()))\r\n                  .Callback(() => { Thread.Sleep(5); })", span="37-38", cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_CallsTheExecuteMethod_UntilCancellationToken_IsCanceled()", file="InfiniteLoopComponentFacts.cs"];
m10_13 [label="Entry Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.ILongRunningProcess)", span="24-24", cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.ILongRunningProcess)", file="InfiniteLoopComponentFacts.cs"];
m10_14 [label="Entry Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InnerComponent_ReturnsTheInnerComponent()", span="26-26", cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InnerComponent_ReturnsTheInnerComponent()", file="InfiniteLoopComponentFacts.cs"];
m10_15 [label="var component = CreateComponent()", span="28-28", cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InnerComponent_ReturnsTheInnerComponent()", color=green, community=0, file="InfiniteLoopComponentFacts.cs"];
m10_16 [label="var result = component.InnerProcess", span="29-29", cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InnerComponent_ReturnsTheInnerComponent()", file="InfiniteLoopComponentFacts.cs"];
m10_72 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="InfiniteLoopComponentFacts.cs"];
m10_75 [label="Entry InfiniteLoopProcess.cstr", span="", cluster="InfiniteLoopProcess.cstr", file="InfiniteLoopComponentFacts.cs"];
m10_76 [label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", span="", cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="InfiniteLoopComponentFacts.cs"];
m10_77 [label=component, span="", cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="InfiniteLoopComponentFacts.cs"];
m10_78 [label=component, span="", cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="InfiniteLoopComponentFacts.cs"];
m10_79 [label="this.ScenarioCleanup()", span="162-162", cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="InfiniteLoopComponentFacts.cs"];
m10_80 [label="Exit HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", span="148-148", cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="InfiniteLoopComponentFacts.cs"];
m10_17 [label="Entry Unk.OnFeatureEnd", span="", cluster="Unk.OnFeatureEnd", color=green, community=0, file="InfiniteLoopComponentFacts.cs"];
m10_18 [label="Exit HangFire.Tests.States.ScheduledStateFeature.TestInitialize()", span="47-47", cluster="HangFire.Tests.States.ScheduledStateFeature.TestInitialize()", file="InfiniteLoopComponentFacts.cs"];
m10_63 [label="_cts.Cancel()", span="67-67", cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallExecuteMethod_WhenCancellationToken_IsCanceled()", file="InfiniteLoopComponentFacts.cs"];
m10_64 [label="Exit Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallExecuteMethod_WhenCancellationToken_IsCanceled()", span="65-65", cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallExecuteMethod_WhenCancellationToken_IsCanceled()", file="InfiniteLoopComponentFacts.cs"];
m10_65 [label="Entry Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.ToString_ReturnsTheName_OfInnerComponent()", span="71-71", cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.ToString_ReturnsTheName_OfInnerComponent()", file="InfiniteLoopComponentFacts.cs"];
m10_66 [label="var component = CreateComponent()", span="73-73", cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.ToString_ReturnsTheName_OfInnerComponent()", file="InfiniteLoopComponentFacts.cs", color=green, community=0];
m10_67 [label="var result = component.ToString()", span="74-74", cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.ToString_ReturnsTheName_OfInnerComponent()", file="InfiniteLoopComponentFacts.cs", color=green, community=0];
m10_68 [label="Assert.Equal(_inner.Object.ToString(), result)", span="75-75", cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.ToString_ReturnsTheName_OfInnerComponent()", file="InfiniteLoopComponentFacts.cs", color=green, community=0];
m10_69 [label="Exit Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.ToString_ReturnsTheName_OfInnerComponent()", span="71-71", cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.ToString_ReturnsTheName_OfInnerComponent()", file="InfiniteLoopComponentFacts.cs"];
m10_70 [label="Entry Hangfire.Server.InfiniteLoopProcess.ToString()", span="46-46", cluster="Hangfire.Server.InfiniteLoopProcess.ToString()", file="InfiniteLoopComponentFacts.cs"];
m10_36 [label="Exit lambda expression", span="37-37", cluster="lambda expression", file="InfiniteLoopComponentFacts.cs"];
m10_55 [label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="112-114", cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="InfiniteLoopComponentFacts.cs"];
m10_41 [label="Exit HangFire.Tests.States.ScheduledStateFeature.System.IDisposable.Dispose()", span="80-80", cluster="HangFire.Tests.States.ScheduledStateFeature.System.IDisposable.Dispose()", file="InfiniteLoopComponentFacts.cs"];
m10_9 [label="Entry Unk.>", span="", cluster="Unk.>", file="InfiniteLoopComponentFacts.cs"];
m10_6 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Scheduled state'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="36-37", cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureSetup()", file="InfiniteLoopComponentFacts.cs", color=red, community=0];
m10_7 [label="testRunner.OnFeatureStart(featureInfo)", span="38-38", cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureSetup()", file="InfiniteLoopComponentFacts.cs"];
m10_8 [label="Exit HangFire.Tests.States.ScheduledStateFeature.FeatureSetup()", span="33-33", cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureSetup()", file="InfiniteLoopComponentFacts.cs"];
m10_21 [label="Exit HangFire.Tests.States.ScheduledStateFeature.ScenarioTearDown()", span="51-51", cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioTearDown()", file="InfiniteLoopComponentFacts.cs"];
m10_23 [label="Entry HangFire.Tests.States.ScheduledStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="56-56", cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="InfiniteLoopComponentFacts.cs"];
m10_24 [label="testRunner.OnScenarioStart(scenarioInfo)", span="58-58", cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="InfiniteLoopComponentFacts.cs", color=red, community=0];
m10_25 [label="Exit HangFire.Tests.States.ScheduledStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="56-56", cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="InfiniteLoopComponentFacts.cs"];
m10_27 [label="Entry HangFire.Tests.States.ScheduledStateFeature.ScenarioCleanup()", span="61-61", cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioCleanup()", file="InfiniteLoopComponentFacts.cs"];
m10_45 [label="this.FeatureBackground()", span="94-94", cluster="HangFire.Tests.States.ScheduledStateFeature.StateNameShouldBeScheduled()", file="InfiniteLoopComponentFacts.cs"];
m10_42 [label="Entry lambda expression", span="44-44", cluster="lambda expression", file="InfiniteLoopComponentFacts.cs"];
m10_43 [label="component.Execute(_cts.Token)", span="44-44", cluster="lambda expression", file="InfiniteLoopComponentFacts.cs"];
m10_44 [label="Exit lambda expression", span="44-44", cluster="lambda expression", file="InfiniteLoopComponentFacts.cs"];
m10_46 [label="Entry lambda expression", span="47-47", cluster="lambda expression", file="InfiniteLoopComponentFacts.cs"];
m10_47 [label="x.Execute(_cts.Token)", span="47-47", cluster="lambda expression", file="InfiniteLoopComponentFacts.cs"];
m10_48 [label="Exit lambda expression", span="47-47", cluster="lambda expression", file="InfiniteLoopComponentFacts.cs"];
m10_31 [label="Entry System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)", span="0-0", cluster="System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)", file="InfiniteLoopComponentFacts.cs"];
m10_32 [label="Entry Unk.AtLeast", span="", cluster="Unk.AtLeast", file="InfiniteLoopComponentFacts.cs"];
m10_33 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="InfiniteLoopComponentFacts.cs"];
m10_34 [label="Entry lambda expression", span="37-37", cluster="lambda expression", file="InfiniteLoopComponentFacts.cs"];
m10_37 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="InfiniteLoopComponentFacts.cs"];
m10_38 [label="Entry lambda expression", span="38-38", cluster="lambda expression", file="InfiniteLoopComponentFacts.cs"];
m10_0 [label="Entry HangFire.Tests.States.ScheduledStateFeature.ScheduledStateFeature()", span="28-28", cluster="HangFire.Tests.States.ScheduledStateFeature.ScheduledStateFeature()", file="InfiniteLoopComponentFacts.cs"];
m10_2 [label="Exit HangFire.Tests.States.ScheduledStateFeature.ScheduledStateFeature()", span="28-28", cluster="HangFire.Tests.States.ScheduledStateFeature.ScheduledStateFeature()", color=green, community=0, file="InfiniteLoopComponentFacts.cs"];
m10_1 [label="this.TestInitialize()", span="30-30", cluster="HangFire.Tests.States.ScheduledStateFeature.ScheduledStateFeature()", file="InfiniteLoopComponentFacts.cs", color=red, community=0];
m10_3 [label="Entry HangFire.Tests.States.ScheduledStateFeature.TestInitialize()", span="47-47", cluster="HangFire.Tests.States.ScheduledStateFeature.TestInitialize()", file="InfiniteLoopComponentFacts.cs"];
m10_71 [label="Entry Unk.When", span="", cluster="Unk.When", file="InfiniteLoopComponentFacts.cs"];
m10_11 [label="new InfiniteLoopProcess(null)", span="22-22", cluster="lambda expression", file="InfiniteLoopComponentFacts.cs"];
m10_39 [label="Thread.Sleep(5)", span="38-38", cluster="lambda expression", file="InfiniteLoopComponentFacts.cs"];
m10_40 [label="Exit lambda expression", span="38-38", cluster="lambda expression", file="InfiniteLoopComponentFacts.cs"];
m10_28 [label="testRunner.CollectScenarioErrors()", span="63-63", cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioCleanup()", file="InfiniteLoopComponentFacts.cs"];
m10_62 [label="Entry Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallExecuteMethod_WhenCancellationToken_IsCanceled()", span="65-65", cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallExecuteMethod_WhenCancellationToken_IsCanceled()", file="InfiniteLoopComponentFacts.cs"];
m10_81 [label="Entry HangFire.Tests.States.ScheduledStateFeature.FixtureData.FixtureData()", span="170-170", cluster="HangFire.Tests.States.ScheduledStateFeature.FixtureData.FixtureData()", file="InfiniteLoopComponentFacts.cs"];
m10_82 [label="ScheduledStateFeature.FeatureSetup()", span="172-172", cluster="HangFire.Tests.States.ScheduledStateFeature.FixtureData.FixtureData()", file="InfiniteLoopComponentFacts.cs"];
m10_83 [label="Exit HangFire.Tests.States.ScheduledStateFeature.FixtureData.FixtureData()", span="170-170", cluster="HangFire.Tests.States.ScheduledStateFeature.FixtureData.FixtureData()", file="InfiniteLoopComponentFacts.cs"];
m10_5 [label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="35-35", cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureSetup()", file="InfiniteLoopComponentFacts.cs"];
m10_4 [label="Entry HangFire.Tests.States.ScheduledStateFeature.FeatureSetup()", span="33-33", cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureSetup()", file="InfiniteLoopComponentFacts.cs"];
m10_10 [label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span="", cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="InfiniteLoopComponentFacts.cs"];
m10_56 [label="table1.AddRow(new string[] {\r\n                        ''ScheduledAt'',\r\n                        ''<UtcNow timestamp>''})", span="115-117", cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="InfiniteLoopComponentFacts.cs"];
m10_57 [label="table1.AddRow(new string[] {\r\n                        ''EnqueueAt'',\r\n                        ''<Tomorrow timestamp>''})", span="118-120", cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", color=green, community=0, file="InfiniteLoopComponentFacts.cs"];
m10_58 [label="testRunner.Then(''properties table should contain the following items:'', ((string)(null)), table1, ''Then '')", span="122-122", cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="InfiniteLoopComponentFacts.cs"];
m10_59 [label="this.ScenarioCleanup()", span="124-124", cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="InfiniteLoopComponentFacts.cs"];
m10_35 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="InfiniteLoopComponentFacts.cs"];
m10_60 [label="Exit HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", span="104-104", cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="InfiniteLoopComponentFacts.cs"];
m10_61 [label="Entry TechTalk.SpecFlow.Table.cstr", span="", cluster="TechTalk.SpecFlow.Table.cstr", file="InfiniteLoopComponentFacts.cs"];
m10_12 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", file="InfiniteLoopComponentFacts.cs"];
m10_49 [label="Entry Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallTheExecuteMethod_WhenCancellationToken_IsAlreadyCanceled()", span="51-51", cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallTheExecuteMethod_WhenCancellationToken_IsAlreadyCanceled()", file="InfiniteLoopComponentFacts.cs"];
m10_52 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It should have the correct properties set'', ((string[])(null)))", span="106-106", cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", color=green, community=0, file="InfiniteLoopComponentFacts.cs"];
m10_50 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="InfiniteLoopComponentFacts.cs"];
m10_51 [label="Entry HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", span="104-104", cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="InfiniteLoopComponentFacts.cs"];
m10_53 [label="this.ScenarioSetup(scenarioInfo)", span="108-108", cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="InfiniteLoopComponentFacts.cs"];
m10_54 [label="this.FeatureBackground()", span="110-110", cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="InfiniteLoopComponentFacts.cs"];
m10_29 [label="Entry Unk.Callback", span="", cluster="Unk.Callback", file="InfiniteLoopComponentFacts.cs"];
m10_87 [label="HangFire.Tests.States.ScheduledStateFeature", span="", file="InfiniteLoopComponentFacts.cs"];
m11_9 [label="Entry HangFire.Core.Tests.States.SucceededStateFacts.SerializeData_ReturnsCorrectData()", span="22-22", cluster="HangFire.Core.Tests.States.SucceededStateFacts.SerializeData_ReturnsCorrectData()", file="InfiniteLoopProcess.cs"];
m11_10 [label="var state = CreateState()", span="24-24", cluster="HangFire.Core.Tests.States.SucceededStateFacts.SerializeData_ReturnsCorrectData()", file="InfiniteLoopProcess.cs"];
m11_11 [label="var data = state.SerializeData()", span="26-26", cluster="HangFire.Core.Tests.States.SucceededStateFacts.SerializeData_ReturnsCorrectData()", file="InfiniteLoopProcess.cs"];
m11_12 [label="Assert.Equal(JobHelper.ToStringTimestamp(state.SucceededAt), data[''SucceededAt''])", span="28-28", cluster="HangFire.Core.Tests.States.SucceededStateFacts.SerializeData_ReturnsCorrectData()", file="InfiniteLoopProcess.cs"];
m11_13 [label="Assert.Equal(''123'', data[''PerformanceDuration''])", span="29-29", cluster="HangFire.Core.Tests.States.SucceededStateFacts.SerializeData_ReturnsCorrectData()", file="InfiniteLoopProcess.cs"];
m11_14 [label="Assert.Equal(''11'', data[''Latency''])", span="30-30", cluster="HangFire.Core.Tests.States.SucceededStateFacts.SerializeData_ReturnsCorrectData()", file="InfiniteLoopProcess.cs"];
m11_15 [label="Exit HangFire.Core.Tests.States.SucceededStateFacts.SerializeData_ReturnsCorrectData()", span="22-22", cluster="HangFire.Core.Tests.States.SucceededStateFacts.SerializeData_ReturnsCorrectData()", file="InfiniteLoopProcess.cs"];
m11_18 [label="Entry HangFire.Core.Tests.States.SucceededStateFacts.IsFinal_ReturnsTrue()", span="34-34", cluster="HangFire.Core.Tests.States.SucceededStateFacts.IsFinal_ReturnsTrue()", file="InfiniteLoopProcess.cs"];
m11_19 [label="var state = CreateState()", span="36-36", cluster="HangFire.Core.Tests.States.SucceededStateFacts.IsFinal_ReturnsTrue()", color=red, community=0, file="InfiniteLoopProcess.cs"];
m11_20 [label="Assert.True(state.IsFinal)", span="37-37", cluster="HangFire.Core.Tests.States.SucceededStateFacts.IsFinal_ReturnsTrue()", file="InfiniteLoopProcess.cs"];
m11_21 [label="Exit HangFire.Core.Tests.States.SucceededStateFacts.IsFinal_ReturnsTrue()", span="34-34", cluster="HangFire.Core.Tests.States.SucceededStateFacts.IsFinal_ReturnsTrue()", file="InfiniteLoopProcess.cs"];
m11_4 [label="Entry HangFire.Core.Tests.States.SucceededStateFacts.NameProperty_ReturnsStateName()", span="15-15", cluster="HangFire.Core.Tests.States.SucceededStateFacts.NameProperty_ReturnsStateName()", file="InfiniteLoopProcess.cs"];
m11_5 [label="var state = CreateState()", span="17-17", cluster="HangFire.Core.Tests.States.SucceededStateFacts.NameProperty_ReturnsStateName()", file="InfiniteLoopProcess.cs"];
m11_6 [label="Assert.Equal(SucceededState.StateName, state.Name)", span="18-18", cluster="HangFire.Core.Tests.States.SucceededStateFacts.NameProperty_ReturnsStateName()", file="InfiniteLoopProcess.cs"];
m11_7 [label="Exit HangFire.Core.Tests.States.SucceededStateFacts.NameProperty_ReturnsStateName()", span="15-15", cluster="HangFire.Core.Tests.States.SucceededStateFacts.NameProperty_ReturnsStateName()", file="InfiniteLoopProcess.cs"];
m11_22 [label="Entry Unk.True", span="", cluster="Unk.True", file="InfiniteLoopProcess.cs"];
m11_27 [label="Entry Unk.False", span="", cluster="Unk.False", file="InfiniteLoopProcess.cs"];
m11_0 [label="Entry HangFire.Core.Tests.States.SucceededStateFacts.StateName_IsEqualToSucceeded()", span="9-9", cluster="HangFire.Core.Tests.States.SucceededStateFacts.StateName_IsEqualToSucceeded()", file="InfiniteLoopProcess.cs"];
m11_1 [label="Assert.Equal(''Succeeded'', SucceededState.StateName)", span="11-11", cluster="HangFire.Core.Tests.States.SucceededStateFacts.StateName_IsEqualToSucceeded()", file="InfiniteLoopProcess.cs"];
m11_2 [label="Exit HangFire.Core.Tests.States.SucceededStateFacts.StateName_IsEqualToSucceeded()", span="9-9", cluster="HangFire.Core.Tests.States.SucceededStateFacts.StateName_IsEqualToSucceeded()", file="InfiniteLoopProcess.cs"];
m11_3 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="InfiniteLoopProcess.cs"];
m11_23 [label="Entry HangFire.Core.Tests.States.SucceededStateFacts.IgnoreExceptions_ReturnsFalse()", span="41-41", cluster="HangFire.Core.Tests.States.SucceededStateFacts.IgnoreExceptions_ReturnsFalse()", file="InfiniteLoopProcess.cs"];
m11_24 [label="var state = CreateState()", span="43-43", cluster="HangFire.Core.Tests.States.SucceededStateFacts.IgnoreExceptions_ReturnsFalse()", file="InfiniteLoopProcess.cs"];
m11_25 [label="Assert.False(state.IgnoreJobLoadException)", span="44-44", cluster="HangFire.Core.Tests.States.SucceededStateFacts.IgnoreExceptions_ReturnsFalse()", file="InfiniteLoopProcess.cs"];
m11_26 [label="Exit HangFire.Core.Tests.States.SucceededStateFacts.IgnoreExceptions_ReturnsFalse()", span="41-41", cluster="HangFire.Core.Tests.States.SucceededStateFacts.IgnoreExceptions_ReturnsFalse()", file="InfiniteLoopProcess.cs"];
m11_16 [label="Entry HangFire.States.SucceededState.SerializeData()", span="45-45", cluster="HangFire.States.SucceededState.SerializeData()", file="InfiniteLoopProcess.cs"];
m11_8 [label="Entry HangFire.Core.Tests.States.SucceededStateFacts.CreateState()", span="47-47", cluster="HangFire.Core.Tests.States.SucceededStateFacts.CreateState()", file="InfiniteLoopProcess.cs"];
m11_28 [label="return new SucceededState(11, 123);", span="49-49", cluster="HangFire.Core.Tests.States.SucceededStateFacts.CreateState()", file="InfiniteLoopProcess.cs"];
m11_29 [label="Exit HangFire.Core.Tests.States.SucceededStateFacts.CreateState()", span="47-47", cluster="HangFire.Core.Tests.States.SucceededStateFacts.CreateState()", file="InfiniteLoopProcess.cs"];
m11_17 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="InfiniteLoopProcess.cs"];
m11_30 [label="Entry HangFire.States.SucceededState.SucceededState(long, long)", span="28-28", cluster="HangFire.States.SucceededState.SucceededState(long, long)", file="InfiniteLoopProcess.cs"];
m12_0 [label="Entry Hangfire.Server.IScheduleInstantFactory.GetInstant(CrontabSchedule, System.TimeZoneInfo)", span="25-25", cluster="Hangfire.Server.IScheduleInstantFactory.GetInstant(CrontabSchedule, System.TimeZoneInfo)", file="IScheduleInstantFactory.cs"];
m12_1 [label="Exit Hangfire.Server.IScheduleInstantFactory.GetInstant(CrontabSchedule, System.TimeZoneInfo)", span="25-25", cluster="Hangfire.Server.IScheduleInstantFactory.GetInstant(CrontabSchedule, System.TimeZoneInfo)", file="IScheduleInstantFactory.cs"];
m13_17 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="OwinBootstrapper.cs"];
m13_20 [label="Entry Hangfire.Common.GlobalJobFilterCollection.Add(object)", span="56-56", cluster="Hangfire.Common.GlobalJobFilterCollection.Add(object)", file="OwinBootstrapper.cs"];
m13_23 [label="Entry IAppBuilder.MapHangfireDashboard(string, string, System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>)", span="88-88", cluster="IAppBuilder.MapHangfireDashboard(string, string, System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>)", file="OwinBootstrapper.cs"];
m13_18 [label="Entry Hangfire.BootstrapperConfiguration.BootstrapperConfiguration()", span="24-24", cluster="Hangfire.BootstrapperConfiguration.BootstrapperConfiguration()", file="OwinBootstrapper.cs"];
m13_0 [label="Entry Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", span="34-34", cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs"];
m13_1 [label="app == null", span="38-38", cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs"];
m13_3 [label="configurationAction == null", span="39-39", cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs"];
m13_6 [label="configurationAction(configuration)", span="42-42", cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs"];
m13_14 [label="app.RunHangfireServer(server())", span="61-61", cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs"];
m13_15 [label="app.MapHangfireDashboard(configuration.DashboardPath, configuration.AppPath, configuration.AuthorizationFilters)", span="64-64", cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs"];
m13_2 [label="throw new ArgumentNullException(''app'');", span="38-38", cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs"];
m13_4 [label="throw new ArgumentNullException(''configurationAction'');", span="39-39", cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs"];
m13_5 [label="var configuration = new BootstrapperConfiguration()", span="41-41", cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs"];
m13_7 [label="configuration.Activator != null", span="44-44", cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs"];
m13_8 [label="JobActivator.Current = configuration.Activator", span="46-46", cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs"];
m13_9 [label="configuration.Storage != null", span="49-49", cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs"];
m13_10 [label="JobStorage.Current = configuration.Storage", span="51-51", cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs"];
m13_11 [label="configuration.Filters", span="54-54", cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs"];
m13_13 [label="configuration.Servers", span="59-59", cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs"];
m13_12 [label="GlobalJobFilters.Filters.Add(filter)", span="56-56", cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs"];
m13_16 [label="Exit Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", span="34-34", cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs"];
m13_22 [label="Entry IAppBuilder.RunHangfireServer(Hangfire.BackgroundJobServer)", span="38-38", cluster="IAppBuilder.RunHangfireServer(Hangfire.BackgroundJobServer)", file="OwinBootstrapper.cs"];
m13_19 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="OwinBootstrapper.cs"];
m13_21 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="OwinBootstrapper.cs"];
m14_6 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="Program.cs"];
m14_8 [label="Entry HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="54-54", cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="Program.cs"];
m14_9 [label="transaction.IncrementCounter(''stats:succeeded'')", span="56-56", cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="Program.cs"];
m14_10 [label="Exit HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="54-54", cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="Program.cs"];
m14_11 [label="Entry HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", span="33-33", cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", file="Program.cs"];
m14_3 [label="Entry HangFire.States.SucceededState.SerializeData()", span="44-44", cluster="HangFire.States.SucceededState.SerializeData()", file="Program.cs"];
m14_4 [label="return new Dictionary<string, string>\r\n            {\r\n                { ''SucceededAt'',  JobHelper.ToStringTimestamp(SucceededAt)}\r\n            };", span="46-49", cluster="HangFire.States.SucceededState.SerializeData()", file="Program.cs"];
m14_5 [label="Exit HangFire.States.SucceededState.SerializeData()", span="44-44", cluster="HangFire.States.SucceededState.SerializeData()", file="Program.cs"];
m14_15 [label="Entry HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", span="35-35", cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", file="Program.cs"];
m14_0 [label="Entry HangFire.States.SucceededState.SucceededState()", span="27-27", cluster="HangFire.States.SucceededState.SucceededState()", file="Program.cs"];
m14_1 [label="SucceededAt = DateTime.UtcNow", span="29-29", cluster="HangFire.States.SucceededState.SucceededState()", file="Program.cs"];
m14_2 [label="Exit HangFire.States.SucceededState.SucceededState()", span="27-27", cluster="HangFire.States.SucceededState.SucceededState()", file="Program.cs"];
m14_7 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="Program.cs"];
m14_12 [label="Entry HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="59-59", cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="Program.cs"];
m14_13 [label="transaction.DecrementCounter(''stats:succeeded'')", span="61-61", cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="Program.cs"];
m14_14 [label="Exit HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="59-59", cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="Program.cs"];
m14_16 [label="HangFire.States.SucceededState", span="", file="Program.cs"];
m16_0 [label="Entry Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", span="25-25", cluster="Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", file="RecurringJobSchedulerFacts.cs"];
m16_1 [label="Exit Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", span="25-25", cluster="Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", file="RecurringJobSchedulerFacts.cs"];
m17_23 [label="Entry System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime, System.TimeZoneInfo)", span="0-0", cluster="System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime, System.TimeZoneInfo)", file="ScheduleInstant.cs"];
m17_14 [label="Entry Unk.GetNextOccurrence", span="", cluster="Unk.GetNextOccurrence", file="ScheduleInstant.cs"];
m17_8 [label="NextInstant = TimeZoneInfo.ConvertTime(\r\n                _schedule.GetNextOccurrence(TimeZoneInfo.ConvertTime(NowInstant, TimeZoneInfo.Utc, _timeZone)),\r\n                _timeZone,\r\n                TimeZoneInfo.Utc)", span="41-44", cluster="Hangfire.Server.ScheduleInstant.ScheduleInstant(System.DateTime, System.TimeZoneInfo, CrontabSchedule)", file="ScheduleInstant.cs"];
m17_12 [label="Entry System.DateTime.AddSeconds(double)", span="0-0", cluster="System.DateTime.AddSeconds(double)", file="ScheduleInstant.cs"];
m17_16 [label="Entry Hangfire.Server.ScheduleInstant.GetNextInstants(System.DateTime?)", span="50-50", cluster="Hangfire.Server.ScheduleInstant.GetNextInstants(System.DateTime?)", file="ScheduleInstant.cs"];
m17_19 [label="var baseTime = lastInstant ?? NowInstant.AddSeconds(-1)", span="57-57", cluster="Hangfire.Server.ScheduleInstant.GetNextInstants(System.DateTime?)", file="ScheduleInstant.cs"];
m17_20 [label="var endTime = NowInstant.AddSeconds(1)", span="58-58", cluster="Hangfire.Server.ScheduleInstant.GetNextInstants(System.DateTime?)", file="ScheduleInstant.cs"];
m17_21 [label="return _schedule\r\n                .GetNextOccurrences(\r\n                    TimeZoneInfo.ConvertTimeFromUtc(baseTime, _timeZone),\r\n                    TimeZoneInfo.ConvertTimeFromUtc(endTime, _timeZone))\r\n                .Select(x => TimeZoneInfo.ConvertTimeToUtc(x, _timeZone))\r\n                .ToList();", span="60-65", cluster="Hangfire.Server.ScheduleInstant.GetNextInstants(System.DateTime?)", file="ScheduleInstant.cs"];
m17_18 [label="throw new ArgumentException(''Only DateTime values in UTC should be passed.'', ''lastInstant'');", span="54-54", cluster="Hangfire.Server.ScheduleInstant.GetNextInstants(System.DateTime?)", file="ScheduleInstant.cs"];
m17_17 [label="lastInstant.HasValue && lastInstant.Value.Kind != DateTimeKind.Utc", span="52-52", cluster="Hangfire.Server.ScheduleInstant.GetNextInstants(System.DateTime?)", file="ScheduleInstant.cs"];
m17_22 [label="Exit Hangfire.Server.ScheduleInstant.GetNextInstants(System.DateTime?)", span="50-50", cluster="Hangfire.Server.ScheduleInstant.GetNextInstants(System.DateTime?)", file="ScheduleInstant.cs"];
m17_24 [label="Entry Unk.GetNextOccurrences", span="", cluster="Unk.GetNextOccurrences", file="ScheduleInstant.cs"];
m17_11 [label="Exit HangFire.States.ProcessingState.SerializeData()", span="45-45", cluster="HangFire.States.ProcessingState.SerializeData()", file="ScheduleInstant.cs"];
m17_15 [label="HangFire.States.ProcessingState", span="", cluster="Unk.ConvertTime", file="ScheduleInstant.cs"];
m17_0 [label="Entry Hangfire.Server.ScheduleInstant.ScheduleInstant(System.DateTime, System.TimeZoneInfo, CrontabSchedule)", span="29-29", cluster="Hangfire.Server.ScheduleInstant.ScheduleInstant(System.DateTime, System.TimeZoneInfo, CrontabSchedule)", file="ScheduleInstant.cs"];
m17_1 [label="schedule == null", span="31-31", cluster="Hangfire.Server.ScheduleInstant.ScheduleInstant(System.DateTime, System.TimeZoneInfo, CrontabSchedule)", file="ScheduleInstant.cs", color=green, community=0];
m17_3 [label="nowInstant.Kind != DateTimeKind.Utc", span="32-32", cluster="Hangfire.Server.ScheduleInstant.ScheduleInstant(System.DateTime, System.TimeZoneInfo, CrontabSchedule)", file="ScheduleInstant.cs"];
m17_5 [label="_timeZone = timeZone", span="37-37", cluster="Hangfire.Server.ScheduleInstant.ScheduleInstant(System.DateTime, System.TimeZoneInfo, CrontabSchedule)", file="ScheduleInstant.cs"];
m17_2 [label="throw new ArgumentNullException(''schedule'');", span="31-31", cluster="Hangfire.Server.ScheduleInstant.ScheduleInstant(System.DateTime, System.TimeZoneInfo, CrontabSchedule)", file="ScheduleInstant.cs", color=green, community=0];
m17_4 [label="throw new ArgumentException(''Only DateTime values in UTC should be passed.'', ''nowInstant'');", span="34-34", cluster="Hangfire.Server.ScheduleInstant.ScheduleInstant(System.DateTime, System.TimeZoneInfo, CrontabSchedule)", file="ScheduleInstant.cs"];
m17_6 [label="_schedule = schedule", span="38-38", cluster="Hangfire.Server.ScheduleInstant.ScheduleInstant(System.DateTime, System.TimeZoneInfo, CrontabSchedule)", file="ScheduleInstant.cs"];
m17_26 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="ScheduleInstant.cs"];
m17_13 [label="Entry HangFire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="50-50", cluster="HangFire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="ScheduleInstant.cs"];
m17_9 [label="Exit Hangfire.Server.ScheduleInstant.ScheduleInstant(System.DateTime, System.TimeZoneInfo, CrontabSchedule)", span="29-29", cluster="Hangfire.Server.ScheduleInstant.ScheduleInstant(System.DateTime, System.TimeZoneInfo, CrontabSchedule)", file="ScheduleInstant.cs"];
m17_10 [label="return new Dictionary<string, string>\r\n            {\r\n                { ''StartedAt'', JobHelper.SerializeDateTime(StartedAt) },\r\n                { ''ServerId'', ServerId },\r\n                { ''WorkerNumber'', WorkerNumber.ToString(CultureInfo.InvariantCulture) }\r\n            };", span="47-52", cluster="HangFire.States.ProcessingState.SerializeData()", file="ScheduleInstant.cs"];
m17_7 [label="NowInstant = nowInstant.AddSeconds(-nowInstant.Second)", span="40-40", cluster="Hangfire.Server.ScheduleInstant.ScheduleInstant(System.DateTime, System.TimeZoneInfo, CrontabSchedule)", file="ScheduleInstant.cs"];
m17_30 [label="Entry Unk.ConvertTimeToUtc", span="", cluster="Unk.ConvertTimeToUtc", file="ScheduleInstant.cs"];
m17_27 [label="Entry lambda expression", span="64-64", cluster="lambda expression", file="ScheduleInstant.cs"];
m17_28 [label="TimeZoneInfo.ConvertTimeToUtc(x, _timeZone)", span="64-64", cluster="lambda expression", file="ScheduleInstant.cs"];
m17_29 [label="Exit lambda expression", span="64-64", cluster="lambda expression", file="ScheduleInstant.cs"];
m17_25 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="ScheduleInstant.cs"];
m17_31 [label="Hangfire.Server.ScheduleInstant", span="", file="ScheduleInstant.cs"];
m18_7 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="ScheduleInstantFactory.cs"];
m18_8 [label="Entry Hangfire.Server.ScheduleInstant.ScheduleInstant(System.DateTime, System.TimeZoneInfo, CrontabSchedule)", span="29-29", cluster="Hangfire.Server.ScheduleInstant.ScheduleInstant(System.DateTime, System.TimeZoneInfo, CrontabSchedule)", file="ScheduleInstantFactory.cs"];
m18_0 [label="Entry Hangfire.Server.ScheduleInstantFactory.GetInstant(CrontabSchedule, System.TimeZoneInfo)", span="23-23", cluster="Hangfire.Server.ScheduleInstantFactory.GetInstant(CrontabSchedule, System.TimeZoneInfo)", file="ScheduleInstantFactory.cs"];
m18_1 [label="schedule == null", span="25-25", cluster="Hangfire.Server.ScheduleInstantFactory.GetInstant(CrontabSchedule, System.TimeZoneInfo)", color=red, community=0, file="ScheduleInstantFactory.cs"];
m18_3 [label="timeZone == null", span="26-26", cluster="Hangfire.Server.ScheduleInstantFactory.GetInstant(CrontabSchedule, System.TimeZoneInfo)", color=red, community=0, file="ScheduleInstantFactory.cs"];
m18_5 [label="return new ScheduleInstant(DateTime.UtcNow, timeZone, schedule);", span="28-28", cluster="Hangfire.Server.ScheduleInstantFactory.GetInstant(CrontabSchedule, System.TimeZoneInfo)", color=red, community=0, file="ScheduleInstantFactory.cs"];
m18_2 [label="throw new ArgumentNullException(''schedule'');", span="25-25", cluster="Hangfire.Server.ScheduleInstantFactory.GetInstant(CrontabSchedule, System.TimeZoneInfo)", color=red, community=0, file="ScheduleInstantFactory.cs"];
m18_4 [label="throw new ArgumentNullException(''timeZone'');", span="26-26", cluster="Hangfire.Server.ScheduleInstantFactory.GetInstant(CrontabSchedule, System.TimeZoneInfo)", color=red, community=0, file="ScheduleInstantFactory.cs"];
m18_6 [label="Exit Hangfire.Server.ScheduleInstantFactory.GetInstant(CrontabSchedule, System.TimeZoneInfo)", span="23-23", cluster="Hangfire.Server.ScheduleInstantFactory.GetInstant(CrontabSchedule, System.TimeZoneInfo)", file="ScheduleInstantFactory.cs"];
m19_0 [label="Entry HangFire.States.SucceededState.GetProperties(HangFire.Common.JobMethod)", span="31-31", cluster="HangFire.States.SucceededState.GetProperties(HangFire.Common.JobMethod)", file="ScheduleInstantFactoryFacts.cs"];
m19_1 [label="return new Dictionary<string, string>\r\n                {\r\n                    { ''SucceededAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) }\r\n                };", span="33-36", cluster="HangFire.States.SucceededState.GetProperties(HangFire.Common.JobMethod)", color=red, community=0, file="ScheduleInstantFactoryFacts.cs"];
m19_2 [label="Exit HangFire.States.SucceededState.GetProperties(HangFire.Common.JobMethod)", span="31-31", cluster="HangFire.States.SucceededState.GetProperties(HangFire.Common.JobMethod)", file="ScheduleInstantFactoryFacts.cs"];
m19_3 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="ScheduleInstantFactoryFacts.cs"];
m19_5 [label="Entry HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", span="41-41", cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", file="ScheduleInstantFactoryFacts.cs"];
m19_6 [label="context.Transaction.Jobs.Expire(context.JobId, JobExpirationTimeout)", span="44-44", cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", color=red, community=0, file="ScheduleInstantFactoryFacts.cs"];
m19_7 [label="context.Transaction.Counters.Increment(''stats:succeeded'')", span="45-45", cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", color=red, community=0, file="ScheduleInstantFactoryFacts.cs"];
m19_8 [label="Exit HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", span="41-41", cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", file="ScheduleInstantFactoryFacts.cs"];
m19_16 [label="Entry HangFire.Storage.IWriteOnlyPersistentJob.Persist(string)", span="8-8", cluster="HangFire.Storage.IWriteOnlyPersistentJob.Persist(string)", file="ScheduleInstantFactoryFacts.cs"];
m19_10 [label="Entry HangFire.Storage.IWriteOnlyPersistentCounter.Increment(string)", span="6-6", cluster="HangFire.Storage.IWriteOnlyPersistentCounter.Increment(string)", file="ScheduleInstantFactoryFacts.cs"];
m19_15 [label="Entry HangFire.Storage.IWriteOnlyPersistentCounter.Decrement(string)", span="9-9", cluster="HangFire.Storage.IWriteOnlyPersistentCounter.Decrement(string)", file="ScheduleInstantFactoryFacts.cs"];
m19_9 [label="Entry HangFire.Storage.IWriteOnlyPersistentJob.Expire(string, System.TimeSpan)", span="7-7", cluster="HangFire.Storage.IWriteOnlyPersistentJob.Expire(string, System.TimeSpan)", file="ScheduleInstantFactoryFacts.cs"];
m19_11 [label="Entry HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", span="48-48", cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", file="ScheduleInstantFactoryFacts.cs"];
m19_12 [label="context.Transaction.Counters.Decrement(''stats:succeeded'')", span="50-50", cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", color=red, community=0, file="ScheduleInstantFactoryFacts.cs"];
m19_13 [label="context.Transaction.Jobs.Persist(context.JobId)", span="51-51", cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", color=red, community=0, file="ScheduleInstantFactoryFacts.cs"];
m19_14 [label="Exit HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", span="48-48", cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", file="ScheduleInstantFactoryFacts.cs"];
m19_4 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="ScheduleInstantFactoryFacts.cs"];
m20_23 [label="Entry HangFire.Client.ClientExceptionContext.ClientExceptionContext(HangFire.Client.CreateContext, System.Exception)", span="26-26", cluster="HangFire.Client.ClientExceptionContext.ClientExceptionContext(HangFire.Client.CreateContext, System.Exception)", file="ScheduleInstantFacts.cs"];
m20_16 [label="Entry HangFire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", span="26-26", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", file="ScheduleInstantFacts.cs"];
m20_17 [label="Assert.Throws<NullReferenceException>(\r\n                () => new ClientExceptionContext(null, new Exception()))", span="28-29", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", file="ScheduleInstantFacts.cs"];
m20_18 [label="Exit HangFire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", span="26-26", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenCreateContextIsNull()", file="ScheduleInstantFacts.cs"];
m20_19 [label="Entry Unk.>", span="", cluster="Unk.>", file="ScheduleInstantFacts.cs"];
m20_10 [label="Entry Mock<IStateMachineFactory>.cstr", span="", cluster="Mock<IStateMachineFactory>.cstr", file="ScheduleInstantFacts.cs"];
m20_9 [label="Entry Mock<IState>.cstr", span="", cluster="Mock<IState>.cstr", file="ScheduleInstantFacts.cs"];
m20_33 [label="Entry HangFire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_CorrectlySets_AllProperties()", span="42-42", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_CorrectlySets_AllProperties()", file="ScheduleInstantFacts.cs"];
m20_34 [label="var exception = new Exception()", span="44-44", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_CorrectlySets_AllProperties()", file="ScheduleInstantFacts.cs"];
m20_35 [label="var context = new ClientExceptionContext(_createContext, exception)", span="45-45", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_CorrectlySets_AllProperties()", file="ScheduleInstantFacts.cs"];
m20_36 [label="Assert.Same(exception, context.Exception)", span="47-47", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_CorrectlySets_AllProperties()", file="ScheduleInstantFacts.cs"];
m20_37 [label="Assert.False(context.ExceptionHandled)", span="48-48", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_CorrectlySets_AllProperties()", file="ScheduleInstantFacts.cs"];
m20_38 [label="Exit HangFire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_CorrectlySets_AllProperties()", span="42-42", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_CorrectlySets_AllProperties()", file="ScheduleInstantFacts.cs"];
m20_39 [label="Entry Unk.Same", span="", cluster="Unk.Same", file="ScheduleInstantFacts.cs"];
m20_40 [label="Entry Unk.False", span="", cluster="Unk.False", file="ScheduleInstantFacts.cs"];
m20_8 [label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="119-119", cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="ScheduleInstantFacts.cs"];
m20_29 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="ScheduleInstantFacts.cs"];
m20_15 [label="Entry HangFire.Core.Tests.Client.ClientExceptionContextFacts.TestMethod()", span="51-51", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.TestMethod()", file="ScheduleInstantFacts.cs"];
m20_41 [label="Exit HangFire.Core.Tests.Client.ClientExceptionContextFacts.TestMethod()", span="51-51", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.TestMethod()", file="ScheduleInstantFacts.cs"];
m20_24 [label="Entry System.Exception.Exception()", span="0-0", cluster="System.Exception.Exception()", file="ScheduleInstantFacts.cs"];
m20_0 [label="Entry HangFire.Core.Tests.Client.ClientExceptionContextFacts.ClientExceptionContextFacts()", span="14-14", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.ClientExceptionContextFacts()", file="ScheduleInstantFacts.cs"];
m20_1 [label="var connection = new Mock<IStorageConnection>()", span="16-16", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.ClientExceptionContextFacts()", file="ScheduleInstantFacts.cs"];
m20_2 [label="var job = Job.FromExpression(() => TestMethod())", span="17-17", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.ClientExceptionContextFacts()", file="ScheduleInstantFacts.cs"];
m20_5 [label="_createContext = new CreateContext(\r\n                connection.Object, stateMachineFactory.Object, job, state.Object)", span="21-22", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.ClientExceptionContextFacts()", file="ScheduleInstantFacts.cs"];
m20_3 [label="var state = new Mock<IState>()", span="18-18", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.ClientExceptionContextFacts()", file="ScheduleInstantFacts.cs"];
m20_4 [label="var stateMachineFactory = new Mock<IStateMachineFactory>()", span="19-19", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.ClientExceptionContextFacts()", file="ScheduleInstantFacts.cs"];
m20_6 [label="Exit HangFire.Core.Tests.Client.ClientExceptionContextFacts.ClientExceptionContextFacts()", span="14-14", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.ClientExceptionContextFacts()", file="ScheduleInstantFacts.cs"];
m20_7 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="ScheduleInstantFacts.cs"];
m20_30 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="ScheduleInstantFacts.cs"];
m20_12 [label="Entry lambda expression", span="17-17", cluster="lambda expression", file="ScheduleInstantFacts.cs"];
m20_13 [label="TestMethod()", span="17-17", cluster="lambda expression", file="ScheduleInstantFacts.cs"];
m20_14 [label="Exit lambda expression", span="17-17", cluster="lambda expression", file="ScheduleInstantFacts.cs"];
m20_20 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="ScheduleInstantFacts.cs"];
m20_21 [label="new ClientExceptionContext(null, new Exception())", span="29-29", cluster="lambda expression", file="ScheduleInstantFacts.cs"];
m20_22 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="ScheduleInstantFacts.cs"];
m20_31 [label="new ClientExceptionContext(_createContext, null)", span="36-36", cluster="lambda expression", file="ScheduleInstantFacts.cs"];
m20_32 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="ScheduleInstantFacts.cs"];
m20_11 [label="Entry CreateContext.cstr", span="", cluster="CreateContext.cstr", file="ScheduleInstantFacts.cs"];
m20_25 [label="Entry HangFire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenExceptionIsNull()", span="33-33", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenExceptionIsNull()", file="ScheduleInstantFacts.cs"];
m20_26 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new ClientExceptionContext(_createContext, null))", span="35-36", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenExceptionIsNull()", file="ScheduleInstantFacts.cs"];
m20_27 [label="Assert.Equal(''exception'', exception.ParamName)", span="38-38", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenExceptionIsNull()", file="ScheduleInstantFacts.cs"];
m20_28 [label="Exit HangFire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenExceptionIsNull()", span="33-33", cluster="HangFire.Core.Tests.Client.ClientExceptionContextFacts.Ctor_ThrowsAnException_WhenExceptionIsNull()", file="ScheduleInstantFacts.cs"];
m20_42 [label="HangFire.Core.Tests.Client.ClientExceptionContextFacts", span="", file="ScheduleInstantFacts.cs"];
m21_6 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SchedulePoller.cs"];
m21_10 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SchedulePoller.cs"];
m21_0 [label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="26-26", cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="SchedulePoller.cs"];
m21_1 [label="exception == null", span="28-28", cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="SchedulePoller.cs"];
m21_4 [label="Exception = exception", span="31-31", cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="SchedulePoller.cs"];
m21_2 [label="throw new ArgumentNullException(''exception'');", span="28-28", cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="SchedulePoller.cs"];
m21_3 [label="FailedAt = DateTime.UtcNow", span="30-30", cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="SchedulePoller.cs"];
m21_5 [label="Exit HangFire.States.FailedState.FailedState(System.Exception)", span="26-26", cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="SchedulePoller.cs"];
m21_13 [label="Entry System.Exception.ToString()", span="0-0", cluster="System.Exception.ToString()", file="SchedulePoller.cs"];
m21_7 [label="Entry HangFire.States.FailedState.SerializeData()", span="42-42", cluster="HangFire.States.FailedState.SerializeData()", file="SchedulePoller.cs"];
m21_8 [label="return new Dictionary<string, string>\r\n            {\r\n                { ''FailedAt'', JobHelper.SerializeDateTime(FailedAt) },\r\n                { ''ExceptionType'', Exception.GetType().FullName },\r\n                { ''ExceptionMessage'', Exception.Message },\r\n                { ''ExceptionDetails'', Exception.ToString() }\r\n            };", span="44-50", cluster="HangFire.States.FailedState.SerializeData()", file="SchedulePoller.cs"];
m21_9 [label="Exit HangFire.States.FailedState.SerializeData()", span="42-42", cluster="HangFire.States.FailedState.SerializeData()", file="SchedulePoller.cs"];
m21_12 [label="Entry System.Exception.GetType()", span="0-0", cluster="System.Exception.GetType()", file="SchedulePoller.cs"];
m21_11 [label="Entry HangFire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="50-50", cluster="HangFire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="SchedulePoller.cs"];
m21_14 [label="HangFire.States.FailedState", span="", file="SchedulePoller.cs"];
m24_0 [label="Entry HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", span="15-15", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ServerBootstrapperFacts.cs"];
m24_3 [label="jobId == null", span="22-22", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", color=green, community=0, file="ServerBootstrapperFacts.cs"];
m24_1 [label="redis == null", span="21-21", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ServerBootstrapperFacts.cs"];
m24_4 [label="throw new ArgumentNullException(''jobId'');", span="22-22", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", color=green, community=0, file="ServerBootstrapperFacts.cs"];
m24_5 [label="jobParameters == null", span="23-23", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", color=green, community=0, file="ServerBootstrapperFacts.cs"];
m24_6 [label="throw new ArgumentNullException(''jobParameters'');", span="23-23", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", color=green, community=0, file="ServerBootstrapperFacts.cs"];
m24_7 [label="state == null", span="24-24", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ServerBootstrapperFacts.cs"];
m24_11 [label="_state = state", span="29-29", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", color=green, community=0, file="ServerBootstrapperFacts.cs"];
m24_10 [label="_stateMachine = new StateMachine(redis)", span="27-27", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ServerBootstrapperFacts.cs"];
m24_12 [label="_jobParameters = jobParameters", span="30-30", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ServerBootstrapperFacts.cs"];
m24_9 [label="_redis = redis", span="26-26", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ServerBootstrapperFacts.cs"];
m24_13 [label="JobId = jobId", span="31-31", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ServerBootstrapperFacts.cs"];
m24_2 [label="throw new ArgumentNullException(''redis'');", span="21-21", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ServerBootstrapperFacts.cs"];
m24_8 [label="throw new ArgumentNullException(''state'');", span="24-24", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ServerBootstrapperFacts.cs"];
m24_14 [label="Exit HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", span="15-15", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ServerBootstrapperFacts.cs"];
m24_15 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="ServerBootstrapperFacts.cs"];
m24_31 [label="Entry HangFire.JobHelper.FromJson<T>(string)", span="37-37", cluster="HangFire.JobHelper.FromJson<T>(string)", file="ServerBootstrapperFacts.cs"];
m24_25 [label="Entry HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", span="43-43", cluster="HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", file="ServerBootstrapperFacts.cs"];
m24_26 [label="String.IsNullOrEmpty(name)", span="45-45", cluster="HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", color=green, community=0, file="ServerBootstrapperFacts.cs"];
m24_27 [label="throw new ArgumentNullException(''name'');", span="45-45", cluster="HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", color=green, community=0, file="ServerBootstrapperFacts.cs"];
m24_28 [label="return _jobParameters.ContainsKey(name)\r\n                ? JobHelper.FromJson<T>(_jobParameters[name])\r\n                : default(T);", span="47-49", cluster="HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", file="ServerBootstrapperFacts.cs"];
m24_29 [label="Exit HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", span="43-43", cluster="HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", file="ServerBootstrapperFacts.cs"];
m24_37 [label="Entry Unk.SetRangeInHash", span="", cluster="Unk.SetRangeInHash", file="ServerBootstrapperFacts.cs"];
m24_22 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="ServerBootstrapperFacts.cs"];
m24_17 [label="Entry HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", span="36-36", cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="ServerBootstrapperFacts.cs"];
m24_20 [label="_jobParameters.Add(name, JobHelper.ToJson(value))", span="40-40", cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="ServerBootstrapperFacts.cs"];
m24_19 [label="throw new ArgumentNullException(''name'');", span="38-38", cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="ServerBootstrapperFacts.cs"];
m24_18 [label="String.IsNullOrEmpty(name)", span="38-38", cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="ServerBootstrapperFacts.cs"];
m24_21 [label="Exit HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", span="36-36", cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="ServerBootstrapperFacts.cs"];
m24_32 [label="Entry HangFire.Client.ClientJobDescriptor.Create()", span="52-52", cluster="HangFire.Client.ClientJobDescriptor.Create()", file="ServerBootstrapperFacts.cs"];
m24_33 [label="_redis.SetRangeInHash(\r\n                String.Format(''hangfire:job:{0}'', JobId),\r\n                _jobParameters)", span="54-56", cluster="HangFire.Client.ClientJobDescriptor.Create()", color=green, community=0, file="ServerBootstrapperFacts.cs"];
m24_34 [label="_stateMachine.ChangeState(JobId, _state)", span="60-60", cluster="HangFire.Client.ClientJobDescriptor.Create()", file="ServerBootstrapperFacts.cs"];
m24_35 [label="Exit HangFire.Client.ClientJobDescriptor.Create()", span="52-52", cluster="HangFire.Client.ClientJobDescriptor.Create()", file="ServerBootstrapperFacts.cs"];
m24_38 [label="Entry HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", span="58-58", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", file="ServerBootstrapperFacts.cs"];
m24_23 [label="Entry HangFire.JobHelper.ToJson(object)", span="32-32", cluster="HangFire.JobHelper.ToJson(object)", file="ServerBootstrapperFacts.cs"];
m24_30 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="ServerBootstrapperFacts.cs"];
m24_24 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="ServerBootstrapperFacts.cs"];
m24_36 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="ServerBootstrapperFacts.cs"];
m24_16 [label="Entry HangFire.States.StateMachine.StateMachine(IRedisClient)", span="36-36", cluster="HangFire.States.StateMachine.StateMachine(IRedisClient)", file="ServerBootstrapperFacts.cs"];
m24_39 [label="HangFire.Client.ClientJobDescriptor", span="", file="ServerBootstrapperFacts.cs"];
m28_13 [label="Entry Hangfire.Core.Tests.WorkerContextMock.WorkerContextMock()", span="9-9", cluster="Hangfire.Core.Tests.WorkerContextMock.WorkerContextMock()", file="ServerJobCancellationTokenFacts.cs"];
m28_74 [label="Entry Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfJobIsNotInProcessingState()", span="105-105", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfJobIsNotInProcessingState()", file="ServerJobCancellationTokenFacts.cs"];
m28_75 [label="_stateData.Name = ''NotProcessing''", span="107-107", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfJobIsNotInProcessingState()", file="ServerJobCancellationTokenFacts.cs"];
m28_76 [label="var token = CreateToken()", span="108-108", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfJobIsNotInProcessingState()", file="ServerJobCancellationTokenFacts.cs"];
m28_77 [label="Assert.Throws<JobAbortedException>(\r\n                () => token.ThrowIfCancellationRequested())", span="110-111", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfJobIsNotInProcessingState()", file="ServerJobCancellationTokenFacts.cs"];
m28_78 [label="Exit Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfJobIsNotInProcessingState()", span="105-105", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfJobIsNotInProcessingState()", file="ServerJobCancellationTokenFacts.cs"];
m28_18 [label="Entry Unk.GetStateData", span="", cluster="Unk.GetStateData", file="ServerJobCancellationTokenFacts.cs"];
m28_37 [label="Entry Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.Ctor_ThrowsAnException_WhenWorkerContextIsNull()", span="61-61", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.Ctor_ThrowsAnException_WhenWorkerContextIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m28_38 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new ServerJobCancellationToken(\r\n                    JobId, _connection.Object, null, new CancellationToken()))", span="63-65", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.Ctor_ThrowsAnException_WhenWorkerContextIsNull()", color=green, community=0, file="ServerJobCancellationTokenFacts.cs"];
m28_39 [label="Assert.Equal(''workerContext'', exception.ParamName)", span="67-67", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.Ctor_ThrowsAnException_WhenWorkerContextIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m28_40 [label="Exit Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.Ctor_ThrowsAnException_WhenWorkerContextIsNull()", span="61-61", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.Ctor_ThrowsAnException_WhenWorkerContextIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m28_24 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="ServerJobCancellationTokenFacts.cs"];
m28_29 [label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0", cluster="System.Threading.CancellationToken.CancellationToken()", file="ServerJobCancellationTokenFacts.cs"];
m28_8 [label="Entry Hangfire.Storage.StateData.StateData()", span="21-21", cluster="Hangfire.Storage.StateData.StateData()", file="ServerJobCancellationTokenFacts.cs"];
m28_53 [label="Entry Unk.DoesNotThrow", span="", cluster="Unk.DoesNotThrow", file="ServerJobCancellationTokenFacts.cs"];
m28_23 [label="Entry Unk.>", span="", cluster="Unk.>", file="ServerJobCancellationTokenFacts.cs"];
m28_82 [label="Entry Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfStateData_ContainsDifferentServerId()", span="115-115", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfStateData_ContainsDifferentServerId()", file="ServerJobCancellationTokenFacts.cs"];
m28_83 [label="_stateData.Data[''ServerId''] = ''AnotherServer''", span="117-117", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfStateData_ContainsDifferentServerId()", file="ServerJobCancellationTokenFacts.cs"];
m28_84 [label="var token = CreateToken()", span="118-118", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfStateData_ContainsDifferentServerId()", file="ServerJobCancellationTokenFacts.cs"];
m28_85 [label="Assert.Throws<JobAbortedException>(\r\n                () => token.ThrowIfCancellationRequested())", span="120-121", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfStateData_ContainsDifferentServerId()", file="ServerJobCancellationTokenFacts.cs"];
m28_86 [label="Exit Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfStateData_ContainsDifferentServerId()", span="115-115", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfStateData_ContainsDifferentServerId()", file="ServerJobCancellationTokenFacts.cs"];
m28_54 [label="Entry Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsOperationCanceled_OnShutdownRequest()", span="86-86", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsOperationCanceled_OnShutdownRequest()", file="ServerJobCancellationTokenFacts.cs"];
m28_55 [label="_shutdownToken = new CancellationToken(true)", span="88-88", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsOperationCanceled_OnShutdownRequest()", file="ServerJobCancellationTokenFacts.cs"];
m28_56 [label="var token = CreateToken()", span="89-89", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsOperationCanceled_OnShutdownRequest()", file="ServerJobCancellationTokenFacts.cs"];
m28_57 [label="Assert.Throws<OperationCanceledException>(\r\n                () => token.ThrowIfCancellationRequested())", span="91-92", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsOperationCanceled_OnShutdownRequest()", file="ServerJobCancellationTokenFacts.cs"];
m28_58 [label="Exit Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsOperationCanceled_OnShutdownRequest()", span="86-86", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsOperationCanceled_OnShutdownRequest()", file="ServerJobCancellationTokenFacts.cs"];
m28_30 [label="Entry Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="51-51", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m28_31 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new ServerJobCancellationToken(\r\n                    JobId, null, _workerContextMock.Object, new CancellationToken()))", span="53-55", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", color=green, community=0, file="ServerJobCancellationTokenFacts.cs"];
m28_32 [label="Assert.Equal(''connection'', exception.ParamName)", span="57-57", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m28_33 [label="Exit Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="51-51", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m28_19 [label="Entry Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.Ctor_ThrowsAnException_WhenJobIsIsNull()", span="41-41", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.Ctor_ThrowsAnException_WhenJobIsIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m28_20 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new ServerJobCancellationToken(\r\n                    null, _connection.Object, _workerContextMock.Object, new CancellationToken()))", span="43-45", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.Ctor_ThrowsAnException_WhenJobIsIsNull()", color=green, community=0, file="ServerJobCancellationTokenFacts.cs"];
m28_21 [label="Assert.Equal(''jobId'', exception.ParamName)", span="47-47", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.Ctor_ThrowsAnException_WhenJobIsIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m28_22 [label="Exit Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.Ctor_ThrowsAnException_WhenJobIsIsNull()", span="41-41", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.Ctor_ThrowsAnException_WhenJobIsIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m28_9 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="ServerJobCancellationTokenFacts.cs"];
m28_63 [label="Entry Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_Throws_IfStateDataDoesNotExist()", span="96-96", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_Throws_IfStateDataDoesNotExist()", file="ServerJobCancellationTokenFacts.cs"];
m28_64 [label="_connection.Setup(x => x.GetStateData(It.IsAny<string>())).Returns((StateData)null)", span="98-98", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_Throws_IfStateDataDoesNotExist()", color=green, community=0, file="ServerJobCancellationTokenFacts.cs"];
m28_65 [label="var token = CreateToken()", span="99-99", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_Throws_IfStateDataDoesNotExist()", file="ServerJobCancellationTokenFacts.cs"];
m28_66 [label="Assert.Throws<JobAbortedException>(() => token.ThrowIfCancellationRequested())", span="101-101", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_Throws_IfStateDataDoesNotExist()", file="ServerJobCancellationTokenFacts.cs"];
m28_67 [label="Exit Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_Throws_IfStateDataDoesNotExist()", span="96-96", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_Throws_IfStateDataDoesNotExist()", file="ServerJobCancellationTokenFacts.cs"];
m28_11 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="ServerJobCancellationTokenFacts.cs"];
m28_0 [label="Entry Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ServerJobCancellationTokenFacts()", span="19-19", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ServerJobCancellationTokenFacts()", file="ServerJobCancellationTokenFacts.cs"];
m28_4 [label="_workerContextMock = new WorkerContextMock { WorkerNumber = 1 }", span="34-34", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ServerJobCancellationTokenFacts()", color=green, community=0, file="ServerJobCancellationTokenFacts.cs"];
m28_3 [label="_connection.Setup(x => x.GetStateData(JobId)).Returns(_stateData)", span="32-32", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ServerJobCancellationTokenFacts()", file="ServerJobCancellationTokenFacts.cs"];
m28_5 [label="_workerContextMock.ServerId = ''Server''", span="35-35", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ServerJobCancellationTokenFacts()", color=green, community=0, file="ServerJobCancellationTokenFacts.cs"];
m28_6 [label="_shutdownToken = new CancellationToken(false)", span="37-37", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ServerJobCancellationTokenFacts()", color=green, community=0, file="ServerJobCancellationTokenFacts.cs"];
m28_1 [label="_stateData = new StateData\r\n            {\r\n                Name = ProcessingState.StateName,\r\n                Data = new Dictionary<string, string>\r\n                {\r\n                    { ''WorkerNumber'', ''1'' },\r\n                    { ''ServerId'', ''Server'' },\r\n                }\r\n            }", span="21-29", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ServerJobCancellationTokenFacts()", file="ServerJobCancellationTokenFacts.cs"];
m28_2 [label="_connection = new Mock<IStorageConnection>()", span="31-31", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ServerJobCancellationTokenFacts()", file="ServerJobCancellationTokenFacts.cs"];
m28_7 [label="Exit Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ServerJobCancellationTokenFacts()", span="19-19", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ServerJobCancellationTokenFacts()", file="ServerJobCancellationTokenFacts.cs"];
m28_95 [label="Entry lambda expression", span="131-131", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_25 [label="Entry lambda expression", span="44-45", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_26 [label="new ServerJobCancellationToken(\r\n                    null, _connection.Object, _workerContextMock.Object, new CancellationToken())", span="44-45", cluster="lambda expression", color=green, community=0, file="ServerJobCancellationTokenFacts.cs"];
m28_27 [label="Exit lambda expression", span="44-45", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_34 [label="Entry lambda expression", span="54-55", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_35 [label="new ServerJobCancellationToken(\r\n                    JobId, null, _workerContextMock.Object, new CancellationToken())", span="54-55", cluster="lambda expression", color=green, community=0, file="ServerJobCancellationTokenFacts.cs"];
m28_36 [label="Exit lambda expression", span="54-55", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_41 [label="Entry lambda expression", span="64-65", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_42 [label="new ServerJobCancellationToken(\r\n                    JobId, _connection.Object, null, new CancellationToken())", span="64-65", cluster="lambda expression", color=green, community=0, file="ServerJobCancellationTokenFacts.cs"];
m28_43 [label="Exit lambda expression", span="64-65", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_68 [label="Entry lambda expression", span="98-98", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_69 [label="x.GetStateData(It.IsAny<string>())", span="98-98", cluster="lambda expression", color=green, community=0, file="ServerJobCancellationTokenFacts.cs"];
m28_70 [label="Exit lambda expression", span="98-98", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_15 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_72 [label="token.ThrowIfCancellationRequested()", span="101-101", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_16 [label="x.GetStateData(JobId)", span="32-32", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_60 [label="token.ThrowIfCancellationRequested()", span="92-92", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_80 [label="token.ThrowIfCancellationRequested()", span="111-111", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_88 [label="token.ThrowIfCancellationRequested()", span="121-121", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_96 [label="token.ThrowIfCancellationRequested()", span="131-131", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_17 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_59 [label="Entry lambda expression", span="92-92", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_71 [label="Entry lambda expression", span="101-101", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_79 [label="Entry lambda expression", span="111-111", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_87 [label="Entry lambda expression", span="121-121", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_73 [label="Exit lambda expression", span="101-101", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_61 [label="Exit lambda expression", span="92-92", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_81 [label="Exit lambda expression", span="111-111", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_89 [label="Exit lambda expression", span="121-121", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_97 [label="Exit lambda expression", span="131-131", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m28_90 [label="Entry Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfWorkerNumberWasChanged()", span="125-125", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfWorkerNumberWasChanged()", file="ServerJobCancellationTokenFacts.cs"];
m28_91 [label="_stateData.Data[''WorkerNumber''] = ''999''", span="127-127", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfWorkerNumberWasChanged()", file="ServerJobCancellationTokenFacts.cs"];
m28_92 [label="var token = CreateToken()", span="128-128", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfWorkerNumberWasChanged()", file="ServerJobCancellationTokenFacts.cs"];
m28_93 [label="Assert.Throws<JobAbortedException>(\r\n                () => token.ThrowIfCancellationRequested())", span="130-131", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfWorkerNumberWasChanged()", file="ServerJobCancellationTokenFacts.cs"];
m28_94 [label="Exit Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfWorkerNumberWasChanged()", span="125-125", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_ThrowsJobAborted_IfWorkerNumberWasChanged()", file="ServerJobCancellationTokenFacts.cs"];
m28_28 [label="Entry ServerJobCancellationToken.cstr", span="", cluster="ServerJobCancellationToken.cstr", file="ServerJobCancellationTokenFacts.cs"];
m28_44 [label="Entry Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ShutdownTokenProperty_PointsToShutdownTokenValue()", span="71-71", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ShutdownTokenProperty_PointsToShutdownTokenValue()", file="ServerJobCancellationTokenFacts.cs"];
m28_45 [label="var token = CreateToken()", span="73-73", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ShutdownTokenProperty_PointsToShutdownTokenValue()", color=green, community=0, file="ServerJobCancellationTokenFacts.cs"];
m28_46 [label="Assert.Equal(_shutdownToken, token.ShutdownToken)", span="74-74", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ShutdownTokenProperty_PointsToShutdownTokenValue()", color=green, community=0, file="ServerJobCancellationTokenFacts.cs"];
m28_47 [label="Exit Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ShutdownTokenProperty_PointsToShutdownTokenValue()", span="71-71", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ShutdownTokenProperty_PointsToShutdownTokenValue()", file="ServerJobCancellationTokenFacts.cs"];
m28_14 [label="Entry System.Threading.CancellationToken.CancellationToken(bool)", span="0-0", cluster="System.Threading.CancellationToken.CancellationToken(bool)", file="ServerJobCancellationTokenFacts.cs"];
m28_62 [label="Entry Hangfire.IJobCancellationToken.ThrowIfCancellationRequested()", span="24-24", cluster="Hangfire.IJobCancellationToken.ThrowIfCancellationRequested()", file="ServerJobCancellationTokenFacts.cs"];
m28_48 [label="Entry Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.CreateToken()", span="134-134", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.CreateToken()", file="ServerJobCancellationTokenFacts.cs"];
m28_98 [label="return new ServerJobCancellationToken(\r\n                JobId, _connection.Object, _workerContextMock.Object, _shutdownToken);", span="136-137", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.CreateToken()", file="ServerJobCancellationTokenFacts.cs"];
m28_99 [label="Exit Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.CreateToken()", span="134-134", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.CreateToken()", file="ServerJobCancellationTokenFacts.cs"];
m28_49 [label="Entry Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_DoesNotThrowOnProcessingJob_IfNoShutdownRequested()", span="78-78", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_DoesNotThrowOnProcessingJob_IfNoShutdownRequested()", file="ServerJobCancellationTokenFacts.cs"];
m28_50 [label="var token = CreateToken()", span="80-80", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_DoesNotThrowOnProcessingJob_IfNoShutdownRequested()", file="ServerJobCancellationTokenFacts.cs"];
m28_51 [label="Assert.DoesNotThrow(token.ThrowIfCancellationRequested)", span="82-82", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_DoesNotThrowOnProcessingJob_IfNoShutdownRequested()", file="ServerJobCancellationTokenFacts.cs"];
m28_52 [label="Exit Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_DoesNotThrowOnProcessingJob_IfNoShutdownRequested()", span="78-78", cluster="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts.ThrowIfCancellationRequested_DoesNotThrowOnProcessingJob_IfNoShutdownRequested()", file="ServerJobCancellationTokenFacts.cs"];
m28_12 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="ServerJobCancellationTokenFacts.cs"];
m28_10 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="ServerJobCancellationTokenFacts.cs"];
m28_100 [label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts", span="", file="ServerJobCancellationTokenFacts.cs"];
m28_102 [label=token, span="", file="ServerJobCancellationTokenFacts.cs"];
m28_101 [label=token, span="", file="ServerJobCancellationTokenFacts.cs"];
m28_103 [label=token, span="", file="ServerJobCancellationTokenFacts.cs"];
m28_104 [label=token, span="", file="ServerJobCancellationTokenFacts.cs"];
m28_105 [label=token, span="", file="ServerJobCancellationTokenFacts.cs"];
m29_0 [label="Entry Hangfire.Server.ServerOwinExtensions.RunHangfireServer(IAppBuilder, Hangfire.BackgroundJobServer)", span="38-38", cluster="Hangfire.Server.ServerOwinExtensions.RunHangfireServer(IAppBuilder, Hangfire.BackgroundJobServer)", file="ServerOwinExtensions.cs"];
m29_1 [label="Servers.Add(server)", span="42-42", cluster="Hangfire.Server.ServerOwinExtensions.RunHangfireServer(IAppBuilder, Hangfire.BackgroundJobServer)", file="ServerOwinExtensions.cs"];
m29_2 [label="server.Start()", span="44-44", cluster="Hangfire.Server.ServerOwinExtensions.RunHangfireServer(IAppBuilder, Hangfire.BackgroundJobServer)", file="ServerOwinExtensions.cs"];
m29_3 [label="var context = new OwinContext(app.Properties)", span="46-46", cluster="Hangfire.Server.ServerOwinExtensions.RunHangfireServer(IAppBuilder, Hangfire.BackgroundJobServer)", file="ServerOwinExtensions.cs"];
m29_6 [label="token.Register(server.Dispose)", span="51-51", cluster="Hangfire.Server.ServerOwinExtensions.RunHangfireServer(IAppBuilder, Hangfire.BackgroundJobServer)", file="ServerOwinExtensions.cs"];
m29_4 [label="var token = context.Get<CancellationToken>(''host.OnAppDisposing'')", span="47-47", cluster="Hangfire.Server.ServerOwinExtensions.RunHangfireServer(IAppBuilder, Hangfire.BackgroundJobServer)", file="ServerOwinExtensions.cs"];
m29_5 [label="token != CancellationToken.None", span="49-49", cluster="Hangfire.Server.ServerOwinExtensions.RunHangfireServer(IAppBuilder, Hangfire.BackgroundJobServer)", file="ServerOwinExtensions.cs"];
m29_7 [label="Exit Hangfire.Server.ServerOwinExtensions.RunHangfireServer(IAppBuilder, Hangfire.BackgroundJobServer)", span="38-38", cluster="Hangfire.Server.ServerOwinExtensions.RunHangfireServer(IAppBuilder, Hangfire.BackgroundJobServer)", file="ServerOwinExtensions.cs"];
m29_11 [label="Entry Unk.>", span="", cluster="Unk.>", file="ServerOwinExtensions.cs"];
m29_12 [label="Entry Unk.Register", span="", cluster="Unk.Register", file="ServerOwinExtensions.cs"];
m29_9 [label="Entry Hangfire.BackgroundJobServer.Start()", span="95-95", cluster="Hangfire.BackgroundJobServer.Start()", file="ServerOwinExtensions.cs"];
m29_8 [label="Entry System.Collections.Concurrent.ConcurrentBag<T>.Add(T)", span="0-0", cluster="System.Collections.Concurrent.ConcurrentBag<T>.Add(T)", file="ServerOwinExtensions.cs"];
m29_10 [label="Entry OwinContext.cstr", span="", cluster="OwinContext.cstr", file="ServerOwinExtensions.cs"];
m30_92 [label="Entry Unk.GetTimeToLive", span="", cluster="Unk.GetTimeToLive", file="ServerWatchdogFacts.cs"];
m30_9 [label="Entry HangFire.States.FailedState.FailedState(string, System.Exception)", span="10-10", cluster="HangFire.States.FailedState.FailedState(string, System.Exception)", file="ServerWatchdogFacts.cs"];
m30_105 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="144-144", cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="ServerWatchdogFacts.cs"];
m30_106 [label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="146-151", cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="ServerWatchdogFacts.cs"];
m30_107 [label="keys.ForEach(x =>\r\n            {\r\n                var ttl = Redis.Client.GetTimeToLive(x);\r\n                Assert.IsTrue(\r\n                    ttl.Seconds == -1,\r\n                    ''TTL for the '{0}' key is '{1}''', x, ttl);\r\n            })", span="153-159", cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="ServerWatchdogFacts.cs"];
m30_108 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="144-144", cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="ServerWatchdogFacts.cs"];
m30_144 [label="Entry HangFire.JobHelper.FromTimestamp(long)", span="50-50", cluster="HangFire.JobHelper.FromTimestamp(long)", file="ServerWatchdogFacts.cs"];
m30_126 [label="Entry Unk.SortedSetContainsItem", span="", cluster="Unk.SortedSetContainsItem", file="ServerWatchdogFacts.cs"];
m30_62 [label="Entry Unk.Apply", span="", cluster="Unk.Apply", file="ServerWatchdogFacts.cs"];
m30_97 [label="Entry string.Format(string, params object[])", span="0-0", cluster="string.Format(string, params object[])", file="ServerWatchdogFacts.cs"];
m30_145 [label="Entry System.DateTime.AddSeconds(double)", span="0-0", cluster="System.DateTime.AddSeconds(double)", file="ServerWatchdogFacts.cs"];
m30_40 [label="Entry HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", span="62-62", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="ServerWatchdogFacts.cs"];
m30_41 [label="Given(String.Format(''a '{0}' state'', state))", span="64-64", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", color=red, community=0, file="ServerWatchdogFacts.cs"];
m30_42 [label="_stateMock.Setup(x => x.GetProperties()).Returns(\r\n                table.Rows.ToDictionary(x => x[''Name''], x => x[''Value'']))", span="65-66", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", color=red, community=0, file="ServerWatchdogFacts.cs"];
m30_43 [label="Exit HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", span="62-62", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="ServerWatchdogFacts.cs"];
m30_46 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="ServerWatchdogFacts.cs"];
m30_83 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="109-109", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="ServerWatchdogFacts.cs"];
m30_84 [label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="111-116", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="ServerWatchdogFacts.cs"];
m30_85 [label="keys.ForEach(x =>\r\n                {\r\n                    var ttl = Redis.Client.GetTimeToLive(x);\r\n                    Assert.IsTrue(\r\n                        ttl.TotalSeconds > 0,\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl);\r\n                })", span="118-124", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="ServerWatchdogFacts.cs"];
m30_86 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="109-109", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="ServerWatchdogFacts.cs"];
m30_78 [label="Entry HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", span="58-58", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", file="ServerWatchdogFacts.cs"];
m30_93 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="ServerWatchdogFacts.cs"];
m30_104 [label="Entry Unk.PopItemFromList", span="", cluster="Unk.PopItemFromList", file="ServerWatchdogFacts.cs"];
m30_160 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="233-233", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="ServerWatchdogFacts.cs"];
m30_161 [label="var job = Redis.Client.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId))", span="235-235", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="ServerWatchdogFacts.cs"];
m30_162 [label="Assert.AreEqual(state, job[''State''])", span="236-236", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="ServerWatchdogFacts.cs"];
m30_163 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="233-233", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="ServerWatchdogFacts.cs"];
m30_164 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash", file="ServerWatchdogFacts.cs"];
m30_4 [label="Entry HangFire.Tests.States.StateSteps.GivenTheFailedState()", span="27-27", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="ServerWatchdogFacts.cs"];
m30_5 [label="_failedException = new InvalidOperationException(''Hello'')", span="29-29", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="ServerWatchdogFacts.cs"];
m30_6 [label="_state = new FailedState(''SomeReason'', _failedException)", span="30-30", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", color=red, community=0, file="ServerWatchdogFacts.cs"];
m30_7 [label="Exit HangFire.Tests.States.StateSteps.GivenTheFailedState()", span="27-27", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="ServerWatchdogFacts.cs"];
m30_137 [label="Entry HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="200-200", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="ServerWatchdogFacts.cs"];
m30_138 [label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:processing'', JobSteps.DefaultJobId)", span="202-202", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="ServerWatchdogFacts.cs"];
m30_139 [label="var timestamp = JobHelper.FromTimestamp((long)score)", span="203-203", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="ServerWatchdogFacts.cs"];
m30_140 [label="Assert.IsTrue(timestamp > DateTime.UtcNow.AddSeconds(-1))", span="205-205", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="ServerWatchdogFacts.cs"];
m30_141 [label="Assert.IsTrue(timestamp < DateTime.UtcNow.AddSeconds(1))", span="206-206", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="ServerWatchdogFacts.cs"];
m30_142 [label="Exit HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="200-200", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="ServerWatchdogFacts.cs"];
m30_44 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="ServerWatchdogFacts.cs"];
m30_29 [label="Entry Mock<JobState>.cstr", span="", cluster="Mock<JobState>.cstr", file="ServerWatchdogFacts.cs"];
m30_176 [label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="248-248", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="ServerWatchdogFacts.cs"];
m30_170 [label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="248-248", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="ServerWatchdogFacts.cs"];
m30_171 [label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="250-251", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="ServerWatchdogFacts.cs"];
m30_175 [label="DictionaryAssert.ContainsFollowingItems(table, history)", span="257-257", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="ServerWatchdogFacts.cs"];
m30_172 [label="Assert.IsNotNull(entry)", span="252-252", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="ServerWatchdogFacts.cs"];
m30_173 [label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="254-254", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="ServerWatchdogFacts.cs"];
m30_174 [label="Assert.IsNotNull(history, entry)", span="255-255", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="ServerWatchdogFacts.cs"];
m30_180 [label="Entry HangFire.Tests.States.StateSteps.ThenApplyMethodHasCalled()", span="261-261", cluster="HangFire.Tests.States.StateSteps.ThenApplyMethodHasCalled()", file="ServerWatchdogFacts.cs"];
m30_181 [label="_stateMock.Verify(\r\n                x => x.Apply(It.Is<IRedisTransaction>(y => y != null), It.Is<string>(y => y == JobSteps.DefaultJobId)), \r\n                Times.Once)", span="263-265", cluster="HangFire.Tests.States.StateSteps.ThenApplyMethodHasCalled()", file="ServerWatchdogFacts.cs"];
m30_182 [label="Exit HangFire.Tests.States.StateSteps.ThenApplyMethodHasCalled()", span="261-261", cluster="HangFire.Tests.States.StateSteps.ThenApplyMethodHasCalled()", file="ServerWatchdogFacts.cs"];
m30_77 [label="Entry HangFire.States.StateMachine.StateMachine(IRedisClient)", span="36-36", cluster="HangFire.States.StateMachine.StateMachine(IRedisClient)", file="ServerWatchdogFacts.cs"];
m30_121 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="175-175", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="ServerWatchdogFacts.cs"];
m30_122 [label="Assert.AreEqual(1, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="177-177", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="ServerWatchdogFacts.cs"];
m30_123 [label="Assert.IsTrue(Redis.Client.SortedSetContainsItem(''hangfire:failed'', JobSteps.DefaultJobId))", span="178-178", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="ServerWatchdogFacts.cs"];
m30_124 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="175-175", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="ServerWatchdogFacts.cs"];
m30_17 [label="Entry HangFire.States.ScheduledState.ScheduledState(string, System.DateTime)", span="10-10", cluster="HangFire.States.ScheduledState.ScheduledState(string, System.DateTime)", file="ServerWatchdogFacts.cs"];
m30_94 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="128-128", cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="ServerWatchdogFacts.cs"];
m30_95 [label="Assert.AreEqual(\r\n                changeType == ''increase'' ? ''1'' : ''0'',\r\n                Redis.Client.GetValue(String.Format(''hangfire:stats:succeeded'')))", span="130-132", cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="ServerWatchdogFacts.cs"];
m30_96 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="128-128", cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="ServerWatchdogFacts.cs"];
m30_179 [label="Entry Unk.>", span="", cluster="Unk.>", file="ServerWatchdogFacts.cs"];
m30_143 [label="Entry Unk.GetItemScoreInSortedSet", span="", cluster="Unk.GetItemScoreInSortedSet", file="ServerWatchdogFacts.cs"];
m30_79 [label="Entry HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="103-103", cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="ServerWatchdogFacts.cs"];
m30_80 [label="Assert.AreEqual(name, _state.StateName)", span="105-105", cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="ServerWatchdogFacts.cs"];
m30_81 [label="Exit HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="103-103", cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="ServerWatchdogFacts.cs"];
m30_146 [label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="210-210", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="ServerWatchdogFacts.cs"];
m30_147 [label="Assert.IsTrue(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="212-212", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="ServerWatchdogFacts.cs"];
m30_148 [label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:schedule'', JobSteps.DefaultJobId)", span="213-213", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="ServerWatchdogFacts.cs"];
m30_149 [label="var timestamp = JobHelper.FromTimestamp((long) score)", span="214-214", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="ServerWatchdogFacts.cs"];
m30_150 [label="Assert.IsTrue(timestamp >= DateTime.UtcNow.Date.AddDays(1))", span="216-216", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="ServerWatchdogFacts.cs"];
m30_151 [label="Assert.IsTrue(timestamp < DateTime.UtcNow.Date.AddDays(2))", span="217-217", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="ServerWatchdogFacts.cs"];
m30_152 [label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="210-210", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="ServerWatchdogFacts.cs"];
m30_82 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="ServerWatchdogFacts.cs"];
m30_136 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse", file="ServerWatchdogFacts.cs"];
m30_10 [label="Entry HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="34-34", cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="ServerWatchdogFacts.cs"];
m30_11 [label="_state = new ProcessingState(''SomeReason'', ''TestServer'')", span="36-36", cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="ServerWatchdogFacts.cs"];
m30_12 [label="Exit HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="34-34", cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="ServerWatchdogFacts.cs"];
m30_103 [label="Entry Unk.GetListCount", span="", cluster="Unk.GetListCount", file="ServerWatchdogFacts.cs"];
m30_22 [label="Entry HangFire.States.EnqueuedState.EnqueuedState(string, string)", span="10-10", cluster="HangFire.States.EnqueuedState.EnqueuedState(string, string)", file="ServerWatchdogFacts.cs"];
m30_120 [label="Entry HangFire.Tests.DictionaryAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", span="9-9", cluster="HangFire.Tests.DictionaryAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", file="ServerWatchdogFacts.cs"];
m30_168 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="240-240", cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="ServerWatchdogFacts.cs"];
m30_165 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="240-240", cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="ServerWatchdogFacts.cs"];
m30_166 [label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="242-243", cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="ServerWatchdogFacts.cs"];
m30_167 [label="DictionaryAssert.ContainsFollowingItems(table, stateEntry)", span="244-244", cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="ServerWatchdogFacts.cs"];
m30_19 [label="Entry HangFire.Tests.States.StateSteps.GivenTheEnqueueStateWithTheValueForTheQueueArgument()", span="46-46", cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueueStateWithTheValueForTheQueueArgument()", file="ServerWatchdogFacts.cs"];
m30_20 [label="_state = new EnqueuedState(''SomeReason'', ''test'')", span="48-48", cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueueStateWithTheValueForTheQueueArgument()", color=red, community=0, file="ServerWatchdogFacts.cs"];
m30_21 [label="Exit HangFire.Tests.States.StateSteps.GivenTheEnqueueStateWithTheValueForTheQueueArgument()", span="46-46", cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueueStateWithTheValueForTheQueueArgument()", file="ServerWatchdogFacts.cs"];
m30_18 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="ServerWatchdogFacts.cs"];
m30_8 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="ServerWatchdogFacts.cs"];
m30_23 [label="Entry HangFire.Tests.States.StateSteps.GivenAState(string)", span="52-52", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="ServerWatchdogFacts.cs"];
m30_24 [label="_stateMock = new Mock<JobState>(''SomeReason'')", span="54-54", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="ServerWatchdogFacts.cs"];
m30_25 [label="_stateMock.Setup(x => x.StateName).Returns(state)", span="55-55", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="ServerWatchdogFacts.cs"];
m30_26 [label="_stateMock.Setup(x => x.GetProperties()).Returns(new Dictionary<string, string>())", span="56-56", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="ServerWatchdogFacts.cs"];
m30_27 [label="_state = _stateMock.Object", span="58-58", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", color=red, community=0, file="ServerWatchdogFacts.cs"];
m30_28 [label="Exit HangFire.Tests.States.StateSteps.GivenAState(string)", span="52-52", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="ServerWatchdogFacts.cs"];
m30_39 [label="Entry Unk.GetProperties", span="", cluster="Unk.GetProperties", file="ServerWatchdogFacts.cs"];
m30_0 [label="Entry HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="21-21", cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="ServerWatchdogFacts.cs"];
m30_1 [label="_state = new SucceededState(''Some reason'')", span="23-23", cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="ServerWatchdogFacts.cs"];
m30_2 [label="Exit HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="21-21", cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="ServerWatchdogFacts.cs"];
m30_32 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="ServerWatchdogFacts.cs"];
m30_177 [label="Entry Unk.RemoveStartFromList", span="", cluster="Unk.RemoveStartFromList", file="ServerWatchdogFacts.cs"];
m30_13 [label="Entry HangFire.States.ProcessingState.ProcessingState(string, string)", span="10-10", cluster="HangFire.States.ProcessingState.ProcessingState(string, string)", file="ServerWatchdogFacts.cs"];
m30_30 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="ServerWatchdogFacts.cs"];
m30_14 [label="Entry HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="40-40", cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="ServerWatchdogFacts.cs"];
m30_15 [label="_state = new ScheduledState(''SomeReason'', DateTime.UtcNow.AddDays(1))", span="42-42", cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", color=red, community=0, file="ServerWatchdogFacts.cs"];
m30_16 [label="Exit HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="40-40", cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="ServerWatchdogFacts.cs"];
m30_113 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="163-163", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="ServerWatchdogFacts.cs"];
m30_114 [label="Assert.AreEqual(0, Redis.Client.GetListCount(''hangfire:succeeded''))", span="165-165", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="ServerWatchdogFacts.cs"];
m30_115 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="163-163", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="ServerWatchdogFacts.cs"];
m30_72 [label="Entry Unk.Unapply", span="", cluster="Unk.Unapply", file="ServerWatchdogFacts.cs"];
m30_56 [label="Entry HangFire.Tests.States.StateSteps.WhenIApplyIt()", span="70-70", cluster="HangFire.Tests.States.StateSteps.WhenIApplyIt()", file="ServerWatchdogFacts.cs"];
m30_57 [label="var transaction = Redis.Client.CreateTransaction()", span="72-72", cluster="HangFire.Tests.States.StateSteps.WhenIApplyIt()", file="ServerWatchdogFacts.cs"];
m30_58 [label="_state.Apply(transaction, JobSteps.DefaultJobId)", span="74-74", cluster="HangFire.Tests.States.StateSteps.WhenIApplyIt()", file="ServerWatchdogFacts.cs"];
m30_59 [label="transaction.Commit()", span="75-75", cluster="HangFire.Tests.States.StateSteps.WhenIApplyIt()", file="ServerWatchdogFacts.cs"];
m30_60 [label="Exit HangFire.Tests.States.StateSteps.WhenIApplyIt()", span="70-70", cluster="HangFire.Tests.States.StateSteps.WhenIApplyIt()", file="ServerWatchdogFacts.cs"];
m30_3 [label="Entry HangFire.States.SucceededState.SucceededState(string)", span="12-12", cluster="HangFire.States.SucceededState.SucceededState(string)", file="ServerWatchdogFacts.cs"];
m30_87 [label="Entry Unk.ForEach", span="", cluster="Unk.ForEach", file="ServerWatchdogFacts.cs"];
m30_116 [label="Entry HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="169-169", cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="ServerWatchdogFacts.cs"];
m30_117 [label="DictionaryAssert.ContainsFollowingItems(table, _state.GetProperties())", span="171-171", cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="ServerWatchdogFacts.cs"];
m30_118 [label="Exit HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="169-169", cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="ServerWatchdogFacts.cs"];
m30_190 [label="Entry lambda expression", span="264-264", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_33 [label="Entry lambda expression", span="55-55", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_36 [label="Entry lambda expression", span="56-56", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_34 [label="x.StateName", span="55-55", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_35 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_37 [label="x.GetProperties()", span="56-56", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_38 [label="Exit lambda expression", span="56-56", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_47 [label="Entry lambda expression", span="65-65", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_50 [label="Entry lambda expression", span="66-66", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_53 [label="Entry lambda expression", span="66-66", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_48 [label="x.GetProperties()", span="65-65", cluster="lambda expression", color=red, community=0, file="ServerWatchdogFacts.cs"];
m30_49 [label="Exit lambda expression", span="65-65", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_51 [label="x[''Name'']", span="66-66", cluster="lambda expression", color=red, community=0, file="ServerWatchdogFacts.cs"];
m30_52 [label="Exit lambda expression", span="66-66", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_54 [label="x[''Value'']", span="66-66", cluster="lambda expression", color=red, community=0, file="ServerWatchdogFacts.cs"];
m30_55 [label="Exit lambda expression", span="66-66", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_88 [label="Entry lambda expression", span="118-124", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_89 [label="var ttl = Redis.Client.GetTimeToLive(x)", span="120-120", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_90 [label="Assert.IsTrue(\r\n                        ttl.TotalSeconds > 0,\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl)", span="121-123", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_91 [label="Exit lambda expression", span="118-124", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_109 [label="Entry lambda expression", span="153-159", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_110 [label="var ttl = Redis.Client.GetTimeToLive(x)", span="155-155", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_111 [label="Assert.IsTrue(\r\n                    ttl.Seconds == -1,\r\n                    ''TTL for the '{0}' key is '{1}''', x, ttl)", span="156-158", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_112 [label="Exit lambda expression", span="153-159", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_184 [label="Entry lambda expression", span="264-264", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_185 [label="x.Apply(It.Is<IRedisTransaction>(y => y != null), It.Is<string>(y => y == JobSteps.DefaultJobId))", span="264-264", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_186 [label="Exit lambda expression", span="264-264", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_187 [label="Entry lambda expression", span="264-264", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_188 [label="y != null", span="264-264", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_189 [label="Exit lambda expression", span="264-264", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_191 [label="y == JobSteps.DefaultJobId", span="264-264", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_192 [label="Exit lambda expression", span="264-264", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m30_159 [label="Entry Unk.SetContainsItem", span="", cluster="Unk.SetContainsItem", file="ServerWatchdogFacts.cs"];
m30_178 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="ServerWatchdogFacts.cs"];
m30_45 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="ServerWatchdogFacts.cs"];
m30_73 [label="Entry HangFire.Tests.States.StateSteps.WhenIApplyTheState()", span="96-96", cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="ServerWatchdogFacts.cs"];
m30_74 [label="var stateMachine = new StateMachine(Redis.Client)", span="98-98", cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="ServerWatchdogFacts.cs"];
m30_75 [label="stateMachine.ChangeState(JobSteps.DefaultJobId, _state)", span="99-99", cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="ServerWatchdogFacts.cs"];
m30_76 [label="Exit HangFire.Tests.States.StateSteps.WhenIApplyTheState()", span="96-96", cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="ServerWatchdogFacts.cs"];
m30_63 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="ServerWatchdogFacts.cs"];
m30_71 [label="Entry HangFire.States.StateMachine.GetStateDescriptor(string)", span="26-26", cluster="HangFire.States.StateMachine.GetStateDescriptor(string)", file="ServerWatchdogFacts.cs"];
m30_125 [label="Entry Unk.GetSortedSetCount", span="", cluster="Unk.GetSortedSetCount", file="ServerWatchdogFacts.cs"];
m30_130 [label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="188-188", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="ServerWatchdogFacts.cs"];
m30_131 [label="Assert.IsTrue(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="190-190", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="ServerWatchdogFacts.cs"];
m30_132 [label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="188-188", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="ServerWatchdogFacts.cs"];
m30_98 [label="Entry Unk.GetValue", span="", cluster="Unk.GetValue", file="ServerWatchdogFacts.cs"];
m30_156 [label="Entry HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="227-227", cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="ServerWatchdogFacts.cs"];
m30_157 [label="Assert.IsTrue(Redis.Client.SetContainsItem(''hangfire:queues'', queue))", span="229-229", cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="ServerWatchdogFacts.cs"];
m30_158 [label="Exit HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="227-227", cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="ServerWatchdogFacts.cs"];
m30_153 [label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="221-221", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="ServerWatchdogFacts.cs"];
m30_154 [label="Assert.IsFalse(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="223-223", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="ServerWatchdogFacts.cs"];
m30_155 [label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="221-221", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="ServerWatchdogFacts.cs"];
m30_64 [label="Entry HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", span="80-80", cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="ServerWatchdogFacts.cs"];
m30_65 [label="var transaction = Redis.Client.CreateTransaction()", span="82-82", cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="ServerWatchdogFacts.cs"];
m30_66 [label="var descriptor = StateMachine.GetStateDescriptor(_state.StateName)", span="84-84", cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="ServerWatchdogFacts.cs"];
m30_68 [label="descriptor.Unapply(transaction, JobSteps.DefaultJobId)", span="88-88", cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="ServerWatchdogFacts.cs"];
m30_69 [label="transaction.Commit()", span="91-91", cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="ServerWatchdogFacts.cs"];
m30_67 [label="descriptor != null", span="86-86", cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="ServerWatchdogFacts.cs"];
m30_70 [label="Exit HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", span="80-80", cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="ServerWatchdogFacts.cs"];
m30_133 [label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="194-194", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="ServerWatchdogFacts.cs"];
m30_134 [label="Assert.IsFalse(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="196-196", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="ServerWatchdogFacts.cs"];
m30_135 [label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="194-194", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="ServerWatchdogFacts.cs"];
m30_169 [label="Entry Unk.ContainsFollowingItems", span="", cluster="Unk.ContainsFollowingItems", file="ServerWatchdogFacts.cs"];
m30_31 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="ServerWatchdogFacts.cs"];
m30_183 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="ServerWatchdogFacts.cs"];
m30_99 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="136-136", cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="ServerWatchdogFacts.cs"];
m30_100 [label="Assert.AreEqual(1, Redis.Client.GetListCount(''hangfire:succeeded''))", span="138-138", cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="ServerWatchdogFacts.cs"];
m30_101 [label="Assert.AreEqual(JobSteps.DefaultJobId, Redis.Client.PopItemFromList(\r\n                ''hangfire:succeeded''))", span="139-140", cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="ServerWatchdogFacts.cs"];
m30_102 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="136-136", cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="ServerWatchdogFacts.cs"];
m30_127 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="182-182", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="ServerWatchdogFacts.cs"];
m30_128 [label="Assert.AreEqual(0, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="184-184", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="ServerWatchdogFacts.cs"];
m30_129 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="182-182", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="ServerWatchdogFacts.cs"];
m30_61 [label="Entry Unk.CreateTransaction", span="", cluster="Unk.CreateTransaction", file="ServerWatchdogFacts.cs"];
m30_119 [label="Entry HangFire.States.JobState.GetProperties()", span="18-18", cluster="HangFire.States.JobState.GetProperties()", file="ServerWatchdogFacts.cs"];
m30_193 [label="HangFire.Tests.States.StateSteps", span="", file="ServerWatchdogFacts.cs"];
m31_30 [label="Entry HangFire.Tests.States.StatesFeature.TheJobSStateShouldBeChangedAfterApplyingTheState()", span="75-75", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateShouldBeChangedAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_31 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The job\'s state should be changed after applying the state'', ((string[])(null)))", span="77-77", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateShouldBeChangedAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_32 [label="this.ScenarioSetup(scenarioInfo)", span="79-79", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateShouldBeChangedAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_33 [label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateShouldBeChangedAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_34 [label="testRunner.And(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateShouldBeChangedAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_35 [label="testRunner.When(''I apply the state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateShouldBeChangedAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_36 [label="testRunner.Then(''the job state is changed to \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="87-87", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateShouldBeChangedAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_37 [label="this.ScenarioCleanup()", span="89-89", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateShouldBeChangedAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_38 [label="Exit HangFire.Tests.States.StatesFeature.TheJobSStateShouldBeChangedAfterApplyingTheState()", span="75-75", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateShouldBeChangedAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_25 [label="Entry Unk.OnScenarioStart", span="", cluster="Unk.OnScenarioStart", file="StartupConfiguration.cs"];
m31_29 [label="Entry Unk.CollectScenarioErrors", span="", cluster="Unk.CollectScenarioErrors", file="StartupConfiguration.cs"];
m31_21 [label="Entry Unk.OnScenarioEnd", span="", cluster="Unk.OnScenarioEnd", file="StartupConfiguration.cs"];
m31_9 [label="Entry HangFire.Tests.States.StatesFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.States.StatesFeature.FeatureTearDown()", file="StartupConfiguration.cs"];
m31_10 [label="testRunner.OnFeatureEnd()", span="41-41", cluster="HangFire.Tests.States.StatesFeature.FeatureTearDown()", file="StartupConfiguration.cs"];
m31_11 [label="testRunner = null", span="42-42", cluster="HangFire.Tests.States.StatesFeature.FeatureTearDown()", file="StartupConfiguration.cs"];
m31_12 [label="Exit HangFire.Tests.States.StatesFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.States.StatesFeature.FeatureTearDown()", file="StartupConfiguration.cs"];
m31_22 [label="Entry HangFire.Tests.States.StatesFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.States.StatesFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="StartupConfiguration.cs"];
m31_23 [label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63", cluster="HangFire.Tests.States.StatesFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="StartupConfiguration.cs"];
m31_24 [label="Exit HangFire.Tests.States.StatesFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.States.StatesFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="StartupConfiguration.cs"];
m31_41 [label="Entry Unk.And", span="", cluster="Unk.And", file="StartupConfiguration.cs"];
m31_5 [label="Entry Unk.GetTestRunner", span="", cluster="Unk.GetTestRunner", file="StartupConfiguration.cs"];
m31_44 [label="Entry HangFire.Tests.States.StatesFeature.StateSApplyMethodIsBeingCalledWhileApplyingTheState()", span="96-96", cluster="HangFire.Tests.States.StatesFeature.StateSApplyMethodIsBeingCalledWhileApplyingTheState()", file="StartupConfiguration.cs"];
m31_45 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State\'s apply method is being called while applying the state'', ((string[])(null)))", span="98-98", cluster="HangFire.Tests.States.StatesFeature.StateSApplyMethodIsBeingCalledWhileApplyingTheState()", file="StartupConfiguration.cs"];
m31_46 [label="this.ScenarioSetup(scenarioInfo)", span="100-100", cluster="HangFire.Tests.States.StatesFeature.StateSApplyMethodIsBeingCalledWhileApplyingTheState()", file="StartupConfiguration.cs"];
m31_47 [label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="102-102", cluster="HangFire.Tests.States.StatesFeature.StateSApplyMethodIsBeingCalledWhileApplyingTheState()", file="StartupConfiguration.cs"];
m31_48 [label="testRunner.When(''I apply the state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="104-104", cluster="HangFire.Tests.States.StatesFeature.StateSApplyMethodIsBeingCalledWhileApplyingTheState()", file="StartupConfiguration.cs"];
m31_49 [label="testRunner.Then(''Apply method has called'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="106-106", cluster="HangFire.Tests.States.StatesFeature.StateSApplyMethodIsBeingCalledWhileApplyingTheState()", file="StartupConfiguration.cs"];
m31_50 [label="this.ScenarioCleanup()", span="108-108", cluster="HangFire.Tests.States.StatesFeature.StateSApplyMethodIsBeingCalledWhileApplyingTheState()", file="StartupConfiguration.cs"];
m31_51 [label="Exit HangFire.Tests.States.StatesFeature.StateSApplyMethodIsBeingCalledWhileApplyingTheState()", span="96-96", cluster="HangFire.Tests.States.StatesFeature.StateSApplyMethodIsBeingCalledWhileApplyingTheState()", file="StartupConfiguration.cs"];
m31_67 [label="Exit HangFire.Tests.States.StatesFeature.TheJobSStateEntryShouldContainTheCorrespondingValuesAfterApplyingTheState()", span="116-116", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateEntryShouldContainTheCorrespondingValuesAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_52 [label="Entry HangFire.Tests.States.StatesFeature.TheJobSStateEntryShouldContainTheCorrespondingValuesAfterApplyingTheState()", span="116-116", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateEntryShouldContainTheCorrespondingValuesAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_53 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The job\'s state entry should contain the corresponding values after applying the '' +\r\n                    ''state'', ((string[])(null)))", span="118-119", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateEntryShouldContainTheCorrespondingValuesAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_54 [label="this.ScenarioSetup(scenarioInfo)", span="121-121", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateEntryShouldContainTheCorrespondingValuesAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_55 [label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="123-123", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateEntryShouldContainTheCorrespondingValuesAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_56 [label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="125-127", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateEntryShouldContainTheCorrespondingValuesAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_57 [label="table1.AddRow(new string[] {\r\n                        ''Property1'',\r\n                        ''Value1''})", span="128-130", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateEntryShouldContainTheCorrespondingValuesAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_58 [label="table1.AddRow(new string[] {\r\n                        ''Property2'',\r\n                        ''Value2''})", span="131-133", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateEntryShouldContainTheCorrespondingValuesAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_59 [label="testRunner.And(''a \'Test\' state with the following properties:'', ((string)(null)), table1, ''And '')", span="135-135", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateEntryShouldContainTheCorrespondingValuesAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_60 [label="testRunner.When(''I apply the state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="137-137", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateEntryShouldContainTheCorrespondingValuesAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_61 [label="TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="139-141", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateEntryShouldContainTheCorrespondingValuesAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_62 [label="table2.AddRow(new string[] {\r\n                        ''State'',\r\n                        ''Test''})", span="142-144", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateEntryShouldContainTheCorrespondingValuesAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_63 [label="table2.AddRow(new string[] {\r\n                        ''Property1'',\r\n                        ''Value1''})", span="145-147", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateEntryShouldContainTheCorrespondingValuesAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_64 [label="table2.AddRow(new string[] {\r\n                        ''Property2'',\r\n                        ''Value2''})", span="148-150", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateEntryShouldContainTheCorrespondingValuesAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_65 [label="testRunner.Then(''the job\'s state entry contains the following items:'', ((string)(null)), table2, ''Then '')", span="152-152", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateEntryShouldContainTheCorrespondingValuesAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_66 [label="this.ScenarioCleanup()", span="154-154", cluster="HangFire.Tests.States.StatesFeature.TheJobSStateEntryShouldContainTheCorrespondingValuesAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_26 [label="Entry HangFire.Tests.States.StatesFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.States.StatesFeature.ScenarioCleanup()", file="StartupConfiguration.cs"];
m31_27 [label="testRunner.CollectScenarioErrors()", span="68-68", cluster="HangFire.Tests.States.StatesFeature.ScenarioCleanup()", file="StartupConfiguration.cs"];
m31_28 [label="Exit HangFire.Tests.States.StatesFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.States.StatesFeature.ScenarioCleanup()", file="StartupConfiguration.cs"];
m31_13 [label="Entry Unk.OnFeatureEnd", span="", cluster="Unk.OnFeatureEnd", file="StartupConfiguration.cs"];
m31_7 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="StartupConfiguration.cs"];
m31_42 [label="Entry Unk.When", span="", cluster="Unk.When", file="StartupConfiguration.cs"];
m31_69 [label="Entry Unk.AddRow", span="", cluster="Unk.AddRow", file="StartupConfiguration.cs"];
m31_39 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="StartupConfiguration.cs"];
m31_43 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="StartupConfiguration.cs"];
m31_40 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="StartupConfiguration.cs"];
m31_18 [label="Entry HangFire.Tests.States.StatesFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.States.StatesFeature.ScenarioTearDown()", file="StartupConfiguration.cs"];
m31_19 [label="testRunner.OnScenarioEnd()", span="58-58", cluster="HangFire.Tests.States.StatesFeature.ScenarioTearDown()", file="StartupConfiguration.cs"];
m31_20 [label="Exit HangFire.Tests.States.StatesFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.States.StatesFeature.ScenarioTearDown()", file="StartupConfiguration.cs"];
m31_6 [label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span="", cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="StartupConfiguration.cs"];
m31_68 [label="Entry TechTalk.SpecFlow.Table.cstr", span="", cluster="TechTalk.SpecFlow.Table.cstr", file="StartupConfiguration.cs"];
m31_14 [label="Entry HangFire.Tests.States.StatesFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.States.StatesFeature.TestInitialize()", file="StartupConfiguration.cs"];
m31_15 [label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''States''))", span="48-49", cluster="HangFire.Tests.States.StatesFeature.TestInitialize()", file="StartupConfiguration.cs"];
m31_16 [label="HangFire.Tests.States.StatesFeature.FeatureSetup(null)", span="51-51", cluster="HangFire.Tests.States.StatesFeature.TestInitialize()", file="StartupConfiguration.cs"];
m31_17 [label="Exit HangFire.Tests.States.StatesFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.States.StatesFeature.TestInitialize()", file="StartupConfiguration.cs"];
m31_0 [label="Entry HangFire.Tests.States.StatesFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.States.StatesFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="StartupConfiguration.cs"];
m31_1 [label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32", cluster="HangFire.Tests.States.StatesFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="StartupConfiguration.cs"];
m31_2 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''States'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34", cluster="HangFire.Tests.States.StatesFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="StartupConfiguration.cs"];
m31_3 [label="testRunner.OnFeatureStart(featureInfo)", span="35-35", cluster="HangFire.Tests.States.StatesFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="StartupConfiguration.cs"];
m31_4 [label="Exit HangFire.Tests.States.StatesFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.States.StatesFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="StartupConfiguration.cs"];
m31_8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", file="StartupConfiguration.cs"];
m31_85 [label="Exit HangFire.Tests.States.StatesFeature.TheJobSHistoryListShouldContainTheHistoryEntryAfterApplyingTheState()", span="161-161", cluster="HangFire.Tests.States.StatesFeature.TheJobSHistoryListShouldContainTheHistoryEntryAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_70 [label="Entry HangFire.Tests.States.StatesFeature.TheJobSHistoryListShouldContainTheHistoryEntryAfterApplyingTheState()", span="161-161", cluster="HangFire.Tests.States.StatesFeature.TheJobSHistoryListShouldContainTheHistoryEntryAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_71 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The job\'s history list should contain the history entry after applying the state'', ((string[])(null)))", span="163-163", cluster="HangFire.Tests.States.StatesFeature.TheJobSHistoryListShouldContainTheHistoryEntryAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_72 [label="this.ScenarioSetup(scenarioInfo)", span="165-165", cluster="HangFire.Tests.States.StatesFeature.TheJobSHistoryListShouldContainTheHistoryEntryAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_73 [label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="167-167", cluster="HangFire.Tests.States.StatesFeature.TheJobSHistoryListShouldContainTheHistoryEntryAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_74 [label="TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="169-171", cluster="HangFire.Tests.States.StatesFeature.TheJobSHistoryListShouldContainTheHistoryEntryAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_75 [label="table3.AddRow(new string[] {\r\n                        ''Property'',\r\n                        ''Value''})", span="172-174", cluster="HangFire.Tests.States.StatesFeature.TheJobSHistoryListShouldContainTheHistoryEntryAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_76 [label="testRunner.And(''a \'Test\' state with the following properties:'', ((string)(null)), table3, ''And '')", span="176-176", cluster="HangFire.Tests.States.StatesFeature.TheJobSHistoryListShouldContainTheHistoryEntryAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_77 [label="testRunner.When(''I apply the state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="178-178", cluster="HangFire.Tests.States.StatesFeature.TheJobSHistoryListShouldContainTheHistoryEntryAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_78 [label="TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="180-182", cluster="HangFire.Tests.States.StatesFeature.TheJobSHistoryListShouldContainTheHistoryEntryAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_79 [label="table4.AddRow(new string[] {\r\n                        ''State'',\r\n                        ''Test''})", span="183-185", cluster="HangFire.Tests.States.StatesFeature.TheJobSHistoryListShouldContainTheHistoryEntryAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_80 [label="table4.AddRow(new string[] {\r\n                        ''Reason'',\r\n                        ''SomeReason''})", span="186-188", cluster="HangFire.Tests.States.StatesFeature.TheJobSHistoryListShouldContainTheHistoryEntryAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_81 [label="table4.AddRow(new string[] {\r\n                        ''CreatedAt'',\r\n                        ''<UtcNow timestamp>''})", span="189-191", cluster="HangFire.Tests.States.StatesFeature.TheJobSHistoryListShouldContainTheHistoryEntryAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_82 [label="table4.AddRow(new string[] {\r\n                        ''Property'',\r\n                        ''Value''})", span="192-194", cluster="HangFire.Tests.States.StatesFeature.TheJobSHistoryListShouldContainTheHistoryEntryAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_83 [label="testRunner.Then(''the last history entry contains the following items:'', ((string)(null)), table4, ''Then '')", span="196-196", cluster="HangFire.Tests.States.StatesFeature.TheJobSHistoryListShouldContainTheHistoryEntryAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_84 [label="this.ScenarioCleanup()", span="198-198", cluster="HangFire.Tests.States.StatesFeature.TheJobSHistoryListShouldContainTheHistoryEntryAfterApplyingTheState()", file="StartupConfiguration.cs"];
m31_86 [label="HangFire.Tests.States.StatesFeature", span="", file="StartupConfiguration.cs"];
m32_50 [label="Entry HangFire.Core.Tests.States.ElectStateContextFacts.SetCandidateState_ThrowsAnException_WhenValueIsNull()", span="69-69", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.SetCandidateState_ThrowsAnException_WhenValueIsNull()", file="Worker.cs"];
m32_51 [label="var context = CreateContext()", span="71-71", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.SetCandidateState_ThrowsAnException_WhenValueIsNull()", file="Worker.cs"];
m32_52 [label="Assert.Throws<ArgumentNullException>(() => context.CandidateState = null)", span="73-73", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.SetCandidateState_ThrowsAnException_WhenValueIsNull()", file="Worker.cs"];
m32_11 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="Worker.cs"];
m32_73 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)", file="Worker.cs"];
m32_77 [label="context.SetJobParameter(''Name'', (string)null)", span="103-103", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.SetJobParameter_CanReceiveNullValue()", file="Worker.cs"];
m32_83 [label="Entry HangFire.Core.Tests.States.ElectStateContextFacts.GetJobParameter_CallsTheCorrespondingMethod_WithJsonDecodedValue()", span="110-110", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.GetJobParameter_CallsTheCorrespondingMethod_WithJsonDecodedValue()", file="Worker.cs"];
m32_84 [label="var context = CreateContext()", span="112-112", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.GetJobParameter_CallsTheCorrespondingMethod_WithJsonDecodedValue()", file="Worker.cs"];
m32_85 [label="_connection.Setup(x => x.GetJobParameter(''1'', ''Name''))\r\n                .Returns(JobHelper.ToJson(''Value''))", span="113-114", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.GetJobParameter_CallsTheCorrespondingMethod_WithJsonDecodedValue()", file="Worker.cs"];
m32_87 [label="Assert.Equal(''Value'', value)", span="118-118", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.GetJobParameter_CallsTheCorrespondingMethod_WithJsonDecodedValue()", file="Worker.cs"];
m32_86 [label="var value = context.GetJobParameter<string>(''Name'')", span="116-116", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.GetJobParameter_CallsTheCorrespondingMethod_WithJsonDecodedValue()", file="Worker.cs"];
m32_88 [label="Exit HangFire.Core.Tests.States.ElectStateContextFacts.GetJobParameter_CallsTheCorrespondingMethod_WithJsonDecodedValue()", span="110-110", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.GetJobParameter_CallsTheCorrespondingMethod_WithJsonDecodedValue()", file="Worker.cs"];
m32_131 [label="Entry Mock<IElectStateFilter>.cstr", span="", cluster="Mock<IElectStateFilter>.cstr", file="Worker.cs"];
m32_36 [label="Exit HangFire.Core.Tests.States.ElectStateContextFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="43-43", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="Worker.cs"];
m32_45 [label="Assert.Equal(''State'', context.CurrentState)", span="64-64", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.Ctor_CorrectlySetAllProperties()", file="Worker.cs"];
m32_49 [label="Entry Hangfire.Storage.IFetchedJob.Requeue()", span="25-25", cluster="Hangfire.Storage.IFetchedJob.Requeue()", file="Worker.cs"];
m32_12 [label="Entry Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", span="49-49", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs"];
m32_94 [label="Entry HangFire.Core.Tests.States.ElectStateContextFacts.GetJobParameter_ReturnsDefaultValue_WhenNoValueProvided()", span="122-122", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.GetJobParameter_ReturnsDefaultValue_WhenNoValueProvided()", file="Worker.cs"];
m32_95 [label="var context = CreateContext()", span="124-124", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.GetJobParameter_ReturnsDefaultValue_WhenNoValueProvided()", file="Worker.cs"];
m32_96 [label="_connection.Setup(x => x.GetJobParameter(''1'', ''Value''))\r\n                .Returns(JobHelper.ToJson(null))", span="125-126", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.GetJobParameter_ReturnsDefaultValue_WhenNoValueProvided()", file="Worker.cs"];
m32_98 [label="Assert.Equal(default(int), value)", span="130-130", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.GetJobParameter_ReturnsDefaultValue_WhenNoValueProvided()", file="Worker.cs"];
m32_97 [label="var value = context.GetJobParameter<int>(''Name'')", span="128-128", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.GetJobParameter_ReturnsDefaultValue_WhenNoValueProvided()", file="Worker.cs"];
m32_99 [label="Exit HangFire.Core.Tests.States.ElectStateContextFacts.GetJobParameter_ReturnsDefaultValue_WhenNoValueProvided()", span="122-122", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.GetJobParameter_ReturnsDefaultValue_WhenNoValueProvided()", file="Worker.cs"];
m32_75 [label="Entry System.Diagnostics.Stopwatch.Stop()", span="0-0", cluster="System.Diagnostics.Stopwatch.Stop()", file="Worker.cs"];
m32_76 [label="Entry Hangfire.States.SucceededState.SucceededState(object, long, long)", span="28-28", cluster="Hangfire.States.SucceededState.SucceededState(object, long, long)", file="Worker.cs"];
m32_78 [label="Hangfire.Server.Worker", span="", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.SetJobParameter_CanReceiveNullValue()", file="Worker.cs"];
m32_79 [label="Exit HangFire.Core.Tests.States.ElectStateContextFacts.SetJobParameter_CanReceiveNullValue()", span="99-99", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.SetJobParameter_CanReceiveNullValue()", file="Worker.cs"];
m32_57 [label="var performContext = new PerformContext(\r\n                    _context, connection, jobId, jobData.Job, jobData.CreatedAt, token)", span="144-145", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs"];
m32_58 [label="var latency = (DateTime.UtcNow - jobData.CreatedAt).TotalMilliseconds", span="147-147", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs"];
m32_59 [label="var duration = Stopwatch.StartNew()", span="148-148", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs"];
m32_60 [label="var result = _process.Run(performContext, jobData.Job)", span="150-150", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs"];
m32_61 [label="duration.Stop()", span="151-151", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs"];
m32_62 [label="return new SucceededState(result, (long) latency, duration.ElapsedMilliseconds);", span="153-153", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs"];
m32_48 [label="Entry HangFire.Core.Tests.States.ElectStateContextFacts.CreateContext()", span="174-174", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.CreateContext()", file="Worker.cs"];
m32_28 [label="fetchedJob.RemoveFromQueue()", span="104-104", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs"];
m32_53 [label="var jobData = connection.GetJobData(jobId)", span="132-132", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs"];
m32_111 [label="Entry HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_ReturnsCandidateState_WhenFiltersArrayIsEmpty()", span="142-142", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_ReturnsCandidateState_WhenFiltersArrayIsEmpty()", file="Worker.cs"];
m32_112 [label="var context = CreateContext()", span="144-144", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_ReturnsCandidateState_WhenFiltersArrayIsEmpty()", file="Worker.cs"];
m32_114 [label="Assert.Same(_candidateState.Object, electedState)", span="148-148", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_ReturnsCandidateState_WhenFiltersArrayIsEmpty()", file="Worker.cs"];
m32_115 [label="_connection.Verify(x => x.CreateWriteTransaction(), Times.Never)", span="149-149", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_ReturnsCandidateState_WhenFiltersArrayIsEmpty()", file="Worker.cs"];
m32_113 [label="var electedState = context.ElectState(Enumerable.Empty<IElectStateFilter>())", span="146-146", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_ReturnsCandidateState_WhenFiltersArrayIsEmpty()", file="Worker.cs"];
m32_116 [label="Exit HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_ReturnsCandidateState_WhenFiltersArrayIsEmpty()", span="142-142", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_ReturnsCandidateState_WhenFiltersArrayIsEmpty()", file="Worker.cs"];
m32_121 [label="Entry HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_AddsJobHistory_WhenAFilterChangesCandidateState()", span="153-153", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_AddsJobHistory_WhenAFilterChangesCandidateState()", file="Worker.cs"];
m32_125 [label="var context = CreateContext()", span="162-162", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_AddsJobHistory_WhenAFilterChangesCandidateState()", file="Worker.cs"];
m32_128 [label="_transaction.Verify(x => x.AddJobState(JobId, _candidateState.Object))", span="170-170", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_AddsJobHistory_WhenAFilterChangesCandidateState()", file="Worker.cs"];
m32_129 [label="_transaction.Verify(x => x.Dispose())", span="171-171", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_AddsJobHistory_WhenAFilterChangesCandidateState()", file="Worker.cs"];
m32_124 [label="filter.Setup(x => x.OnStateElection(It.IsNotNull<ElectStateContext>()))\r\n                .Callback((ElectStateContext x) => x.CandidateState = newState.Object)", span="159-160", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_AddsJobHistory_WhenAFilterChangesCandidateState()", file="Worker.cs"];
m32_126 [label="var electedState = context.ElectState(new[] { filter.Object })", span="165-165", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_AddsJobHistory_WhenAFilterChangesCandidateState()", file="Worker.cs"];
m32_127 [label="Assert.Same(newState.Object, electedState)", span="168-168", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_AddsJobHistory_WhenAFilterChangesCandidateState()", file="Worker.cs"];
m32_122 [label="var newState = new Mock<State>()", span="156-156", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_AddsJobHistory_WhenAFilterChangesCandidateState()", file="Worker.cs"];
m32_123 [label="var filter = new Mock<IElectStateFilter>()", span="158-158", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_AddsJobHistory_WhenAFilterChangesCandidateState()", file="Worker.cs"];
m32_130 [label="Exit HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_AddsJobHistory_WhenAFilterChangesCandidateState()", span="153-153", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_AddsJobHistory_WhenAFilterChangesCandidateState()", file="Worker.cs"];
m32_133 [label="Entry Unk.ElectState", span="", cluster="Unk.ElectState", file="Worker.cs"];
m32_39 [label="Exit lambda expression", span="46-50", cluster="lambda expression", file="Worker.cs"];
m32_40 [label="Entry HangFire.Core.Tests.States.ElectStateContextFacts.Ctor_CorrectlySetAllProperties()", span="56-56", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.Ctor_CorrectlySetAllProperties()", file="Worker.cs"];
m32_27 [label="stateMachine.ChangeState(fetchedJob.JobId, state, new[] { ProcessingState.StateName })", span="96-96", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs"];
m32_9 [label="_stateMachineFactory = stateMachineFactory", span="46-46", cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", file="Worker.cs"];
m32_0 [label="Entry HangFire.Core.Tests.States.ElectStateContextFacts.ElectStateContextFacts()", span="18-18", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectStateContextFacts()", file="Worker.cs"];
m32_1 [label="var job = Job.FromExpression(() => Console.WriteLine())", span="20-20", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectStateContextFacts()", file="Worker.cs"];
m32_3 [label="_candidateState = new Mock<State>()", span="22-22", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectStateContextFacts()", file="Worker.cs"];
m32_5 [label="_transaction = new Mock<IWriteOnlyTransaction>()", span="24-24", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectStateContextFacts()", file="Worker.cs"];
m32_7 [label="Exit HangFire.Core.Tests.States.ElectStateContextFacts.ElectStateContextFacts()", span="18-18", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectStateContextFacts()", file="Worker.cs"];
m32_8 [label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="119-119", cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="Worker.cs"];
m32_2 [label="_stateContext = new StateContext(JobId, job)", span="21-21", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectStateContextFacts()", file="Worker.cs"];
m32_4 [label="_connection = new Mock<IStorageConnection>()", span="23-23", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectStateContextFacts()", file="Worker.cs"];
m32_6 [label="_connection.Setup(x => x.CreateWriteTransaction()).Returns(_transaction.Object)", span="26-26", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectStateContextFacts()", file="Worker.cs"];
m32_10 [label="Entry Mock<State>.cstr", span="", cluster="Mock<State>.cstr", file="Worker.cs"];
m32_137 [label="Entry Unk.OnStateElection", span="", cluster="Unk.OnStateElection", file="Worker.cs"];
m32_70 [label="Entry lambda expression", span="94-95", cluster="lambda expression", file="Worker.cs"];
m32_18 [label="var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(\r\n                        context.CancellationToken,\r\n                        timeoutCts.Token)", span="61-63", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs"];
m32_117 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="Worker.cs"];
m32_38 [label="new ElectStateContext(\r\n                    _stateContext,\r\n                    _candidateState.Object,\r\n                    null,\r\n                    null)", span="46-50", cluster="lambda expression", file="Worker.cs", color=green, community=0];
m32_144 [label="Entry Unk.AddJobState", span="", cluster="Unk.AddJobState", file="Worker.cs"];
m32_68 [label="return new FailedState(ex)\r\n                {\r\n                    Reason = ''Internal Hangfire Server exception occurred. Please, report it to Hangfire developers.''\r\n                };", span="168-171", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs"];
m32_44 [label="Assert.Same(_candidateState.Object, context.CandidateState)", span="63-63", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.Ctor_CorrectlySetAllProperties()", file="Worker.cs"];
m32_93 [label="Entry Unk.GetJobParameter", span="", cluster="Unk.GetJobParameter", file="Worker.cs"];
m32_13 [label="var connection = context.Storage.GetConnection()", span="51-51", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs"];
m32_46 [label="Assert.Same(_connection.Object, context.Connection)", span="65-65", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.Ctor_CorrectlySetAllProperties()", file="Worker.cs"];
m32_54 [label="Entry lambda expression", span="73-73", cluster="lambda expression", file="Worker.cs"];
m32_56 [label="Exit lambda expression", span="73-73", cluster="lambda expression", file="Worker.cs"];
m32_55 [label="context.CandidateState = null", span="73-73", cluster="lambda expression", file="Worker.cs"];
m32_63 [label="Entry HangFire.Core.Tests.States.ElectStateContextFacts.SetJobParameter_CallsTheCorrespondingMethod_WithJsonEncodedValue()", span="88-88", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.SetJobParameter_CallsTheCorrespondingMethod_WithJsonEncodedValue()", file="Worker.cs"];
m32_64 [label="var context = CreateContext()", span="90-90", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.SetJobParameter_CallsTheCorrespondingMethod_WithJsonEncodedValue()", file="Worker.cs"];
m32_65 [label="context.SetJobParameter(''Name'', ''Value'')", span="92-92", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.SetJobParameter_CallsTheCorrespondingMethod_WithJsonEncodedValue()", file="Worker.cs"];
m32_66 [label="_connection.Verify(x => x.SetJobParameter(\r\n                JobId, ''Name'', JobHelper.ToJson(''Value'')))", span="94-95", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.SetJobParameter_CallsTheCorrespondingMethod_WithJsonEncodedValue()", file="Worker.cs"];
m32_67 [label="Exit HangFire.Core.Tests.States.ElectStateContextFacts.SetJobParameter_CallsTheCorrespondingMethod_WithJsonEncodedValue()", span="88-88", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.SetJobParameter_CallsTheCorrespondingMethod_WithJsonEncodedValue()", file="Worker.cs"];
m32_69 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="Worker.cs"];
m32_148 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="Worker.cs"];
m32_72 [label="Exit lambda expression", span="94-95", cluster="lambda expression", file="Worker.cs"];
m32_103 [label="Entry HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_ThrowsAnException_WhenFiltersArrayIsNull()", span="134-134", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_ThrowsAnException_WhenFiltersArrayIsNull()", file="Worker.cs"];
m32_104 [label="var context = CreateContext()", span="136-136", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_ThrowsAnException_WhenFiltersArrayIsNull()", file="Worker.cs"];
m32_105 [label="Assert.Throws<ArgumentNullException>(() => context.ElectState(null))", span="138-138", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_ThrowsAnException_WhenFiltersArrayIsNull()", file="Worker.cs"];
m32_106 [label="Exit HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_ThrowsAnException_WhenFiltersArrayIsNull()", span="134-134", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.ElectState_ThrowsAnException_WhenFiltersArrayIsNull()", file="Worker.cs"];
m32_74 [label="Entry Unk.SetJobParameter", span="", cluster="Unk.SetJobParameter", file="Worker.cs"];
m32_47 [label="Exit HangFire.Core.Tests.States.ElectStateContextFacts.Ctor_CorrectlySetAllProperties()", span="56-56", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.Ctor_CorrectlySetAllProperties()", file="Worker.cs"];
m32_138 [label="Entry lambda expression", span="160-160", cluster="lambda expression", file="Worker.cs"];
m32_29 [label=JobAbortedException, span="109-109", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs"];
m32_30 [label="fetchedJob.RemoveFromQueue()", span="111-111", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="Worker.cs"];
m32_31 [label=Exception, span="113-113", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs"];
m32_37 [label="Entry Hangfire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="36-36", cluster="Hangfire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="Worker.cs"];
m32_142 [label="x.AddJobState(JobId, _candidateState.Object)", span="170-170", cluster="lambda expression", file="Worker.cs"];
m32_135 [label="x.OnStateElection(It.IsNotNull<ElectStateContext>())", span="159-159", cluster="lambda expression", file="Worker.cs"];
m32_19 [label="var processingState = new ProcessingState(context.ServerId, _context.WorkerNumber)", span="65-65", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs"];
m32_80 [label="Entry lambda expression", span="105-106", cluster="lambda expression", file="Worker.cs"];
m32_90 [label="Entry lambda expression", span="113-113", cluster="lambda expression", file="Worker.cs"];
m32_100 [label="Entry lambda expression", span="125-125", cluster="lambda expression", file="Worker.cs"];
m32_108 [label="context.ElectState(null)", span="138-138", cluster="lambda expression", file="Worker.cs"];
m32_118 [label="Entry lambda expression", span="149-149", cluster="lambda expression", file="Worker.cs"];
m32_141 [label="Entry lambda expression", span="170-170", cluster="lambda expression", file="Worker.cs"];
m32_143 [label="Exit lambda expression", span="170-170", cluster="lambda expression", file="Worker.cs"];
m32_145 [label="Entry lambda expression", span="171-171", cluster="lambda expression", file="Worker.cs"];
m32_107 [label="Entry lambda expression", span="138-138", cluster="lambda expression", file="Worker.cs"];
m32_134 [label="Entry lambda expression", span="159-159", cluster="lambda expression", file="Worker.cs"];
m32_136 [label="Exit lambda expression", span="159-159", cluster="lambda expression", file="Worker.cs"];
m32_15 [label="context.CancellationToken.ThrowIfCancellationRequested()", span="54-54", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs"];
m32_21 [label="context.CancellationToken.ThrowIfCancellationRequested()", span="75-75", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs"];
m32_20 [label="!stateMachine.ChangeState(\r\n                            fetchedJob.JobId,\r\n                            processingState,\r\n                            new[] { EnqueuedState.StateName, ProcessingState.StateName },\r\n                            linkedCts.Token)", span="67-71", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs"];
m32_71 [label="Entry Hangfire.Storage.JobData.EnsureLoaded()", span="29-29", cluster="Hangfire.Storage.JobData.EnsureLoaded()", file="Worker.cs"];
m32_82 [label="Exit lambda expression", span="105-106", cluster="lambda expression", file="Worker.cs"];
m32_81 [label="x.SetJobParameter(\r\n                JobId, ''Name'', JobHelper.ToJson(null))", span="105-106", cluster="lambda expression", file="Worker.cs"];
m32_92 [label="Exit lambda expression", span="113-113", cluster="lambda expression", file="Worker.cs"];
m32_91 [label="x.GetJobParameter(''1'', ''Name'')", span="113-113", cluster="lambda expression", file="Worker.cs"];
m32_102 [label="Exit lambda expression", span="125-125", cluster="lambda expression", file="Worker.cs"];
m32_101 [label="x.GetJobParameter(''1'', ''Value'')", span="125-125", cluster="lambda expression", file="Worker.cs"];
m32_109 [label="Exit lambda expression", span="138-138", cluster="lambda expression", file="Worker.cs"];
m32_120 [label="Exit lambda expression", span="149-149", cluster="lambda expression", file="Worker.cs"];
m32_119 [label="x.CreateWriteTransaction()", span="149-149", cluster="lambda expression", file="Worker.cs"];
m32_147 [label="Exit lambda expression", span="171-171", cluster="lambda expression", file="Worker.cs"];
m32_146 [label="x.Dispose()", span="171-171", cluster="lambda expression", file="Worker.cs"];
m32_17 [label="var timeoutCts = new CancellationTokenSource(JobInitializationWaitTimeout)", span="60-60", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs"];
m32_16 [label="var stateMachine = _stateMachineFactory.Create(connection)", span="58-58", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", color=red, community=0];
m32_139 [label="x.CandidateState = newState.Object", span="160-160", cluster="lambda expression", file="Worker.cs"];
m32_140 [label="Exit lambda expression", span="160-160", cluster="lambda expression", file="Worker.cs"];
m32_43 [label="Assert.Equal(_stateContext.Job, context.Job)", span="61-61", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.Ctor_CorrectlySetAllProperties()", file="Worker.cs"];
m32_33 [label="fetchedJob.Requeue()", span="117-117", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs"];
m32_34 [label="throw;", span="118-118", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="Worker.cs"];
m32_35 [label="Exit Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", span="49-49", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs"];
m32_22 [label="fetchedJob.RemoveFromQueue()", span="78-78", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs"];
m32_41 [label="Entry System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken, System.Threading.CancellationToken)", span="0-0", cluster="System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken, System.Threading.CancellationToken)", file="Worker.cs"];
m32_42 [label="Entry Hangfire.States.ProcessingState.ProcessingState(string, int)", span="27-27", cluster="Hangfire.States.ProcessingState.ProcessingState(string, int)", file="Worker.cs"];
m32_89 [label="Entry HangFire.States.ElectStateContext.GetJobParameter<T>(string)", span="63-63", cluster="HangFire.States.ElectStateContext.GetJobParameter<T>(string)", file="Worker.cs"];
m32_23 [label="return;", span="79-79", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs"];
m32_24 [label="var jobCancellationToken = new ServerJobCancellationToken(\r\n                        fetchedJob.JobId, connection, _context, context)", span="88-89", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="Worker.cs"];
m32_25 [label="var state = PerformJob(fetchedJob.JobId, connection, jobCancellationToken)", span="91-91", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="Worker.cs"];
m32_26 [label="state != null", span="93-93", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs"];
m32_132 [label="Entry Unk.Callback", span="", cluster="Unk.Callback", file="Worker.cs"];
m32_14 [label="var fetchedJob = connection.FetchNextJob(_context.Queues, context.CancellationToken)", span="52-52", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs"];
m32_32 [label="Entry ElectStateContext.cstr", span="", cluster="ElectStateContext.cstr", file="Worker.cs"];
m32_149 [label="return new ElectStateContext(\r\n                _stateContext,\r\n                _candidateState.Object,\r\n                ''State'',\r\n                _connection.Object);", span="176-180", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.CreateContext()", file="Worker.cs"];
m32_150 [label="Exit HangFire.Core.Tests.States.ElectStateContextFacts.CreateContext()", span="174-174", cluster="HangFire.Core.Tests.States.ElectStateContextFacts.CreateContext()", file="Worker.cs"];
m32_110 [label="Entry HangFire.States.ElectStateContext.ElectState(System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", span="69-69", cluster="HangFire.States.ElectStateContext.ElectState(System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", file="Worker.cs"];
m32_151 [label="HangFire.Core.Tests.States.ElectStateContextFacts", span="", file="Worker.cs"];
m32_152 [label=context, span="", file="Worker.cs"];
m32_153 [label=context, span="", file="Worker.cs"];
m32_154 [label=newState, span="", file="Worker.cs"];
m33_9 [label="Entry WorkerContext.cstr", span="", cluster="WorkerContext.cstr", file="WorkerContextFacts.cs"];
m33_4 [label="Entry Unk.>", span="", cluster="Unk.>", file="WorkerContextFacts.cs"];
m33_0 [label="Entry Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", span="14-14", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", file="WorkerContextFacts.cs"];
m33_1 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new WorkerContext(null, Queues, WorkerNumber))", span="16-17", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", color=red, community=1, file="WorkerContextFacts.cs"];
m33_2 [label="Assert.Equal(''serverId'', exception.ParamName)", span="19-19", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", color=red, community=0, file="WorkerContextFacts.cs"];
m33_3 [label="Exit Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", span="14-14", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", file="WorkerContextFacts.cs"];
m33_23 [label="Entry Hangfire.Core.Tests.Server.WorkerContextFacts.CreateContext()", span="59-59", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CreateContext()", file="WorkerContextFacts.cs"];
m33_38 [label="return new WorkerContext(ServerId, Queues, WorkerNumber);", span="61-61", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CreateContext()", color=red, community=0, file="WorkerContextFacts.cs"];
m33_39 [label="Exit Hangfire.Core.Tests.Server.WorkerContextFacts.CreateContext()", span="59-59", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CreateContext()", file="WorkerContextFacts.cs"];
m33_5 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="WorkerContextFacts.cs"];
m33_10 [label="Entry Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_ThrowsAnException_WhenQueuesArrayIsNull()", span="23-23", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_ThrowsAnException_WhenQueuesArrayIsNull()", file="WorkerContextFacts.cs"];
m33_11 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new WorkerContext(ServerId, null, WorkerNumber))", span="25-26", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_ThrowsAnException_WhenQueuesArrayIsNull()", color=red, community=0, file="WorkerContextFacts.cs"];
m33_12 [label="Assert.Equal(''queues'', exception.ParamName)", span="28-28", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_ThrowsAnException_WhenQueuesArrayIsNull()", file="WorkerContextFacts.cs"];
m33_13 [label="Exit Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_ThrowsAnException_WhenQueuesArrayIsNull()", span="23-23", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_ThrowsAnException_WhenQueuesArrayIsNull()", file="WorkerContextFacts.cs"];
m33_31 [label="Entry Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_CorrectlyCopies_AllPropertyValues()", span="49-49", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_CorrectlyCopies_AllPropertyValues()", file="WorkerContextFacts.cs"];
m33_32 [label="var context = CreateContext()", span="51-51", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_CorrectlyCopies_AllPropertyValues()", file="WorkerContextFacts.cs"];
m33_33 [label="var contextCopy = new WorkerContext(context)", span="52-52", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_CorrectlyCopies_AllPropertyValues()", file="WorkerContextFacts.cs"];
m33_34 [label="Assert.Equal(ServerId, context.ServerId)", span="54-54", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_CorrectlyCopies_AllPropertyValues()", color=red, community=0, file="WorkerContextFacts.cs"];
m33_35 [label="Assert.Equal(Queues, context.Queues)", span="55-55", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_CorrectlyCopies_AllPropertyValues()", file="WorkerContextFacts.cs"];
m33_36 [label="Assert.Equal(context.WorkerNumber, contextCopy.WorkerNumber)", span="56-56", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_CorrectlyCopies_AllPropertyValues()", file="WorkerContextFacts.cs"];
m33_37 [label="Exit Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_CorrectlyCopies_AllPropertyValues()", span="49-49", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_CorrectlyCopies_AllPropertyValues()", file="WorkerContextFacts.cs"];
m33_24 [label="Entry Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_ThrowsAnException_WhenContextIsNull()", span="42-42", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_ThrowsAnException_WhenContextIsNull()", file="WorkerContextFacts.cs"];
m33_25 [label="Assert.Throws<NullReferenceException>(\r\n                () => new WorkerContext(null))", span="44-45", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_ThrowsAnException_WhenContextIsNull()", file="WorkerContextFacts.cs"];
m33_26 [label="Exit Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_ThrowsAnException_WhenContextIsNull()", span="42-42", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_ThrowsAnException_WhenContextIsNull()", file="WorkerContextFacts.cs"];
m33_27 [label="Entry lambda expression", span="45-45", cluster="lambda expression", file="WorkerContextFacts.cs"];
m33_6 [label="Entry lambda expression", span="17-17", cluster="lambda expression", file="WorkerContextFacts.cs"];
m33_7 [label="new WorkerContext(null, Queues, WorkerNumber)", span="17-17", cluster="lambda expression", color=red, community=0, file="WorkerContextFacts.cs"];
m33_8 [label="Exit lambda expression", span="17-17", cluster="lambda expression", file="WorkerContextFacts.cs"];
m33_14 [label="Entry lambda expression", span="26-26", cluster="lambda expression", file="WorkerContextFacts.cs"];
m33_15 [label="new WorkerContext(ServerId, null, WorkerNumber)", span="26-26", cluster="lambda expression", color=red, community=0, file="WorkerContextFacts.cs"];
m33_16 [label="Exit lambda expression", span="26-26", cluster="lambda expression", file="WorkerContextFacts.cs"];
m33_28 [label="new WorkerContext(null)", span="45-45", cluster="lambda expression", file="WorkerContextFacts.cs"];
m33_29 [label="Exit lambda expression", span="45-45", cluster="lambda expression", file="WorkerContextFacts.cs"];
m33_30 [label="Entry Hangfire.Server.WorkerContext.WorkerContext(Hangfire.Server.WorkerContext)", span="22-22", cluster="Hangfire.Server.WorkerContext.WorkerContext(Hangfire.Server.WorkerContext)", file="WorkerContextFacts.cs"];
m33_17 [label="Entry Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_CorrectlySetsAllInstanceProperties()", span="32-32", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_CorrectlySetsAllInstanceProperties()", file="WorkerContextFacts.cs"];
m33_18 [label="var context = CreateContext()", span="34-34", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_CorrectlySetsAllInstanceProperties()", file="WorkerContextFacts.cs"];
m33_19 [label="Assert.Equal(ServerId, context.ServerId)", span="36-36", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_CorrectlySetsAllInstanceProperties()", color=red, community=0, file="WorkerContextFacts.cs"];
m33_20 [label="Assert.Equal(Queues, context.Queues)", span="37-37", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_CorrectlySetsAllInstanceProperties()", file="WorkerContextFacts.cs"];
m33_21 [label="Assert.Equal(WorkerNumber, context.WorkerNumber)", span="38-38", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_CorrectlySetsAllInstanceProperties()", file="WorkerContextFacts.cs"];
m33_22 [label="Exit Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_CorrectlySetsAllInstanceProperties()", span="32-32", cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_CorrectlySetsAllInstanceProperties()", file="WorkerContextFacts.cs"];
m33_40 [label="Hangfire.Core.Tests.Server.WorkerContextFacts", span="", file="WorkerContextFacts.cs"];
m34_63 [label="Entry HangFire.Web.RazorPage.Write(object)", span="76-76", cluster="HangFire.Web.RazorPage.Write(object)", file="WorkerContextMock.cs"];
m34_0 [label="Entry HangFire.Web.Pages.ScheduledJobsPage.Execute()", span="47-47", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_4 [label="int.TryParse(Request.QueryString[''from''], out from)", span="66-66", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", color=green, community=0, file="WorkerContextMock.cs"];
m34_3 [label="int from, perPage", span="64-64", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_1 [label="WriteLiteral(''\n'')", span="51-51", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_2 [label="Layout = new LayoutPage { Title = ''Scheduled Jobs'' }", span="62-62", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_5 [label="int.TryParse(Request.QueryString[''count''], out perPage)", span="67-67", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_59 [label="Entry HangFire.Web.Pager.Pager(int, int, long)", span="29-29", cluster="HangFire.Web.Pager.Pager(int, int, long)", file="WorkerContextMock.cs"];
m34_57 [label="Entry Unk.TryParse", span="", cluster="Unk.TryParse", file="WorkerContextMock.cs"];
m34_55 [label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="69-69", cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="WorkerContextMock.cs"];
m34_68 [label="Entry HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="39-39", cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", file="WorkerContextMock.cs"];
m34_65 [label="Entry HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", span="89-89", cluster="HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", file="WorkerContextMock.cs"];
m34_62 [label="Entry HangFire.Storage.IMonitoringApi.ScheduledJobs(int, int)", span="33-33", cluster="HangFire.Storage.IMonitoringApi.ScheduledJobs(int, int)", file="WorkerContextMock.cs"];
m34_7 [label="Entry lambda expression", span="16-16", cluster="lambda expression", file="WorkerContextMock.cs"];
m34_6 [label="Entry Lazy<WorkerContext>.cstr", span="", cluster="Lazy<WorkerContext>.cstr", file="WorkerContextMock.cs"];
m34_8 [label="new WorkerContext(ServerId, Queues, WorkerNumber)", span="16-16", cluster="lambda expression", file="WorkerContextMock.cs"];
m34_10 [label="Entry WorkerContext.cstr", span="", cluster="WorkerContext.cstr", file="WorkerContextMock.cs"];
m34_17 [label="Write(RenderPartial(new PerPageSelector(pager)))", span="146-146", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_53 [label="Write(RenderPartial(new Paginator(pager)))", span="378-378", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_9 [label="Exit lambda expression", span="16-16", cluster="lambda expression", file="WorkerContextMock.cs"];
m34_19 [label=scheduledJobs, span="171-171", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_11 [label="Hangfire.Core.Tests.WorkerContextMock", span="", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_12 [label="WriteLiteral(''    <div class=\''js-jobs-list\''>\n        <div class=\''btn-toolbar btn-toolbar-top\''>\n'' +\r\n''            <button class=\''js-jobs-list-command btn btn-sm btn-primary\''\n        '' +\r\n''            data-url=\'''')", span="105-107", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_13 [label="Write(Request.LinkTo(''/scheduled/enqueue''))", span="112-112", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_14 [label="WriteLiteral(@''''''\n                    data-loading-text=''''Enqueueing...''''>\n                <span class=''''glyphicon glyphicon-play''''></span>\n                Enqueue now\n            </button>\n\n            <button class=''''js-jobs-list-command btn btn-sm btn-default''''\n                    data-url='''''')", span="117-124", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_15 [label="Write(Request.LinkTo(''/scheduled/delete''))", span="129-129", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_16 [label="WriteLiteral(@''''''\n                    data-loading-text=''''Deleting...''''\n                    data-confirm=''''Do you really want to DELETE ALL selected jobs?''''>\n                <span class=''''glyphicon glyphicon-remove''''></span>\n                Delete selected\n            </button>\n\n            '')", span="134-141", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_18 [label="WriteLiteral(@''\n        </div>\n\n        <table class=''''table''''>\n            <thead>\n                <tr>\n                    <th class=''''min-width''''>\n                        <input type=''''checkbox'''' class=''''js-jobs-list-select-all'''' />\n                    </th>\n                    <th class=''''min-width''''>Id</th>\n                    <th>Enqueue</th>\n                    <th>Job</th>\n                    <th class=''''align-right''''>Scheduled</th>\n                </tr>\n            </thead>\n'')", span="151-166", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_20 [label="WriteLiteral(''                <tr class=\''js-jobs-list-row '')", span="177-177", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_52 [label="WriteLiteral(''        </table>\n    </div>\n'')", span="366-366", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_21 [label="Write(!job.Value.InScheduledState ? ''obsolete-data'' : null)", span="182-182", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_22 [label="WriteLiteral('' '')", span="187-187", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_23 [label="Write(job.Value.InScheduledState ? ''hover'' : null)", span="192-192", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_24 [label="WriteLiteral(''\''>\n                    <td>\n'')", span="197-197", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_25 [label="job.Value.InScheduledState", span="202-202", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_26 [label="WriteLiteral(''                            <input type=\''checkbox\'' class=\''js-jobs-list-checkbox\'' '' +\r\n''name=\''jobs[]\'' value=\'''')", span="208-209", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_29 [label="WriteLiteral(''                    </td>\n                    <td class=\''min-width\''>\n            '' +\r\n''            <a href=\'''')", span="229-230", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_27 [label="Write(job.Key)", span="214-214", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_30 [label="Write(Request.LinkTo(''/job/'' + job.Key))", span="235-235", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_28 [label="WriteLiteral(''\'' />\n'')", span="219-219", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_31 [label="WriteLiteral(''\''>\n                            '')", span="240-240", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_32 [label="Write(HtmlHelper.JobId(job.Key))", span="245-245", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_33 [label="WriteLiteral(''\n                        </a>\n'')", span="250-250", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_34 [label="!job.Value.InScheduledState", span="255-255", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_35 [label="WriteLiteral(''                            <span title=\''Job\'s state has been changed while fetch'' +\r\n''ing data.\'' class=\''glyphicon glyphicon-question-sign\''></span>\n'')", span="261-262", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_36 [label="WriteLiteral(''                    </td>\n                    <td class=\''min-width\''>\n            '' +\r\n''            <span data-moment=\'''')", span="272-273", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_37 [label="Write(JobHelper.ToTimestamp(job.Value.EnqueueAt))", span="278-278", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_38 [label="WriteLiteral(''\''>\n                            '')", span="283-283", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_39 [label="Write(job.Value.EnqueueAt)", span="288-288", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_40 [label="WriteLiteral(''\n                        </span>\n                    </td>\n                    <t'' +\r\n''d>\n                        <a class=\''job-method\'' href=\'''')", span="293-294", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_41 [label="Write(Request.LinkTo(''/job/'' + job.Key))", span="299-299", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_42 [label="WriteLiteral(''\''>\n                            '')", span="304-304", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_43 [label="Write(HtmlHelper.DisplayMethod(job.Value.Job))", span="309-309", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_44 [label="WriteLiteral(''\n                        </a>\n                    </td>\n                    <td c'' +\r\n''lass=\''align-right\''>\n'')", span="314-315", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_45 [label="job.Value.ScheduledAt != null", span="320-320", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_46 [label="WriteLiteral(''                            <span data-moment=\'''')", span="326-326", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_51 [label="WriteLiteral(''                    </td>\n                </tr>\n'')", span="356-356", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_47 [label="Write(JobHelper.ToTimestamp(job.Value.ScheduledAt.Value))", span="331-331", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_48 [label="WriteLiteral(''\''>\n                                '')", span="336-336", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_49 [label="Write(job.Value.ScheduledAt)", span="341-341", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_50 [label="WriteLiteral(''\n                            </span>\n'')", span="346-346", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_54 [label="Exit HangFire.Web.Pages.ScheduledJobsPage.Execute()", span="47-47", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="WorkerContextMock.cs"];
m34_64 [label="Entry HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", span="6-6", cluster="HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", file="WorkerContextMock.cs"];
m34_60 [label="Entry HangFire.Storage.IMonitoringApi.ScheduledCount()", span="38-38", cluster="HangFire.Storage.IMonitoringApi.ScheduledCount()", file="WorkerContextMock.cs"];
m34_66 [label="Entry Unk.Write", span="", cluster="Unk.Write", file="WorkerContextMock.cs"];
m34_67 [label="Entry HangFire.Web.HtmlHelper.JobId(string, bool)", span="45-45", cluster="HangFire.Web.HtmlHelper.JobId(string, bool)", file="WorkerContextMock.cs"];
m34_58 [label="Entry HangFire.JobStorage.GetMonitoringApi()", span="54-54", cluster="HangFire.JobStorage.GetMonitoringApi()", file="WorkerContextMock.cs"];
m34_56 [label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4", cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="WorkerContextMock.cs"];
m34_61 [label="Entry HttpRequestBase.LinkTo(string)", span="24-24", cluster="HttpRequestBase.LinkTo(string)", file="WorkerContextMock.cs"];
m34_69 [label="Entry HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", span="30-30", cluster="HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", file="WorkerContextMock.cs"];
m34_70 [label="Entry HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", span="6-6", cluster="HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", file="WorkerContextMock.cs"];
m34_71 [label="HangFire.Web.Pages.ScheduledJobsPage", span="", file="WorkerContextMock.cs"];
m35_164 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", span="184-184", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="WorkerFacts.cs"];
m35_165 [label="var worker = CreateWorker()", span="186-186", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="WorkerFacts.cs"];
m35_166 [label="worker.Execute(_token)", span="188-188", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", color=red, community=0, file="WorkerFacts.cs"];
m35_167 [label="_stateMachine.Verify(x => x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<ProcessingState>(),\r\n                It.Is<string[]>(\r\n                    states => states.Length == 2 &&\r\n                        states[0] == EnqueuedState.StateName && states[1] == ProcessingState.StateName),\r\n                It.IsAny<CancellationToken>()))", span="190-196", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="WorkerFacts.cs"];
m35_168 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", span="184-184", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="WorkerFacts.cs"];
m35_19 [label="Entry Mock<IStateMachineFactory>.cstr", span="", cluster="Mock<IStateMachineFactory>.cstr", file="WorkerFacts.cs"];
m35_79 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateMachineFactory_IsNull()", span="93-93", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateMachineFactory_IsNull()", file="WorkerFacts.cs"];
m35_80 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(_context.Object, _storage.Object, _process.Object, null))", span="95-96", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateMachineFactory_IsNull()", color=red, community=0, file="WorkerFacts.cs"];
m35_81 [label="Assert.Equal(''stateMachineFactory'', exception.ParamName)", span="98-98", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateMachineFactory_IsNull()", file="WorkerFacts.cs"];
m35_82 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateMachineFactory_IsNull()", span="93-93", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateMachineFactory_IsNull()", file="WorkerFacts.cs"];
m35_16 [label="Entry Hangfire.Core.Tests.WorkerContextMock.WorkerContextMock()", span="9-9", cluster="Hangfire.Core.Tests.WorkerContextMock.WorkerContextMock()", file="WorkerFacts.cs"];
m35_60 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="WorkerFacts.cs"];
m35_288 [label="Entry System.Exception.Exception()", span="0-0", cluster="System.Exception.Exception()", file="WorkerFacts.cs"];
m35_245 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", span="284-284", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="WorkerFacts.cs"];
m35_246 [label="var exception = new InvalidOperationException()", span="287-287", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="WorkerFacts.cs"];
m35_247 [label="_process\r\n                .Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .Throws(exception)", span="288-290", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="WorkerFacts.cs"];
m35_250 [label="_stateMachine.Verify(x => x.ChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason.Contains(''Internal'')),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>()))", span="298-302", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="WorkerFacts.cs"];
m35_248 [label="var worker = CreateWorker()", span="292-292", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="WorkerFacts.cs"];
m35_249 [label="worker.Execute(_token)", span="295-295", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", color=red, community=0, file="WorkerFacts.cs"];
m35_251 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", span="284-284", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="WorkerFacts.cs"];
m35_234 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", span="270-270", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="WorkerFacts.cs"];
m35_235 [label="var worker = CreateWorker()", span="272-272", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="WorkerFacts.cs"];
m35_236 [label="worker.Execute(_token)", span="274-274", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", color=red, community=0, file="WorkerFacts.cs"];
m35_237 [label="_stateMachine.Verify(x => x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<SucceededState>(),\r\n                It.Is<string[]>(states => states.Length == 1 && states[0] == ProcessingState.StateName),\r\n                It.IsAny<CancellationToken>()))", span="276-280", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="WorkerFacts.cs"];
m35_238 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", span="270-270", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="WorkerFacts.cs"];
m35_27 [label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0", cluster="System.Threading.CancellationToken.CancellationToken()", file="WorkerFacts.cs"];
m35_134 [label="Entry Unk.Requeue", span="", cluster="Unk.Requeue", file="WorkerFacts.cs"];
m35_175 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", span="200-200", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="WorkerFacts.cs"];
m35_176 [label="_stateMachine\r\n                .Setup(x => x.ChangeState(\r\n                    It.IsAny<string>(),\r\n                    It.IsAny<ProcessingState>(),\r\n                    It.IsAny<string[]>(),\r\n                    It.IsAny<CancellationToken>()))\r\n                .Returns(false)", span="203-209", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="WorkerFacts.cs"];
m35_177 [label="var worker = CreateWorker()", span="211-211", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="WorkerFacts.cs"];
m35_178 [label="worker.Execute(_token)", span="214-214", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", color=red, community=0, file="WorkerFacts.cs"];
m35_179 [label="_process.Verify(\r\n                x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()),\r\n                Times.Never)", span="217-219", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="WorkerFacts.cs"];
m35_180 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", span="200-200", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="WorkerFacts.cs"];
m35_187 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", span="223-223", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="WorkerFacts.cs"];
m35_188 [label="var worker = CreateWorker()", span="225-225", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="WorkerFacts.cs"];
m35_189 [label="worker.Execute(_token)", span="227-227", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", color=red, community=0, file="WorkerFacts.cs"];
m35_190 [label="_process.Verify(x => x.Run(\r\n                It.IsNotNull<PerformContext>(),\r\n                It.IsNotNull<IJobPerformer>()))", span="229-231", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="WorkerFacts.cs"];
m35_191 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", span="223-223", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="WorkerFacts.cs"];
m35_221 [label="Entry Unk.DoesNotThrow", span="", cluster="Unk.DoesNotThrow", file="WorkerFacts.cs"];
m35_149 [label="Entry Unk.Run", span="", cluster="Unk.Run", file="WorkerFacts.cs"];
m35_65 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="75-75", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="WorkerFacts.cs"];
m35_66 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(_context.Object, null, _process.Object, _stateMachineFactory.Object))", span="77-78", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=red, community=1, file="WorkerFacts.cs"];
m35_67 [label="Assert.Equal(''storage'', exception.ParamName)", span="80-80", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=red, community=0, file="WorkerFacts.cs"];
m35_68 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="75-75", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="WorkerFacts.cs"];
m35_252 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()", file="WorkerFacts.cs"];
m35_38 [label="Entry Unk.>", span="", cluster="Unk.>", file="WorkerFacts.cs"];
m35_115 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", span="127-127", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="WorkerFacts.cs"];
m35_116 [label="_stateMachine\r\n                .Setup(x => x.ChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>()))\r\n                .Throws<InvalidOperationException>()", span="129-131", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="WorkerFacts.cs"];
m35_117 [label="var worker = CreateWorker()", span="133-133", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="WorkerFacts.cs"];
m35_118 [label="Assert.Throws<InvalidOperationException>(\r\n                () => worker.Execute(_token))", span="135-136", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", color=red, community=0, file="WorkerFacts.cs"];
m35_119 [label="_fetchedJob.Verify(x => x.RemoveFromQueue(), Times.Never)", span="138-138", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="WorkerFacts.cs"];
m35_120 [label="_fetchedJob.Verify(x => x.Requeue())", span="139-139", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="WorkerFacts.cs"];
m35_121 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", span="127-127", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="WorkerFacts.cs"];
m35_214 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", span="254-254", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="WorkerFacts.cs"];
m35_215 [label="_process.Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .Throws<JobAbortedException>()", span="257-258", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="WorkerFacts.cs"];
m35_216 [label="var worker = CreateWorker()", span="260-260", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="WorkerFacts.cs"];
m35_217 [label="Assert.DoesNotThrow(() => worker.Execute(_token))", span="263-263", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", color=red, community=0, file="WorkerFacts.cs"];
m35_218 [label="_fetchedJob.Verify(x => x.RemoveFromQueue())", span="265-265", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="WorkerFacts.cs"];
m35_219 [label="_fetchedJob.Verify(x => x.Requeue(), Times.Never)", span="266-266", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="WorkerFacts.cs"];
m35_220 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", span="254-254", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="WorkerFacts.cs"];
m35_92 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", span="347-347", cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="WorkerFacts.cs"];
m35_295 [label="return new Worker(_context.Object, _storage.Object, _process.Object, _stateMachineFactory.Object);", span="349-349", cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", color=red, community=0, file="WorkerFacts.cs"];
m35_296 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", span="347-347", cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="WorkerFacts.cs"];
m35_56 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", span="66-66", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="WorkerFacts.cs"];
m35_57 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(null, _storage.Object, _process.Object, _stateMachineFactory.Object))", span="68-69", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", color=red, community=0, file="WorkerFacts.cs"];
m35_58 [label="Assert.Equal(''context'', exception.ParamName)", span="71-71", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="WorkerFacts.cs"];
m35_59 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", span="66-66", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="WorkerFacts.cs"];
m35_23 [label="Entry Mock<IFetchedJob>.cstr", span="", cluster="Mock<IFetchedJob>.cstr", file="WorkerFacts.cs"];
m35_264 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", span="306-306", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="WorkerFacts.cs"];
m35_265 [label="var exception = new InvalidOperationException()", span="309-309", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="WorkerFacts.cs"];
m35_266 [label="_process\r\n                .Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .Throws(new JobPerformanceException(''hello'', exception))", span="310-312", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="WorkerFacts.cs"];
m35_269 [label="_stateMachine.Verify(x => x.ChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason == ''hello''),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>()))", span="320-324", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="WorkerFacts.cs"];
m35_267 [label="var worker = CreateWorker()", span="314-314", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="WorkerFacts.cs"];
m35_268 [label="worker.Execute(_token)", span="317-317", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", color=red, community=0, file="WorkerFacts.cs"];
m35_270 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", span="306-306", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="WorkerFacts.cs"];
m35_31 [label="Entry Unk.GetConnection", span="", cluster="Unk.GetConnection", file="WorkerFacts.cs"];
m35_55 [label="Entry Unk.ChangeState", span="", cluster="Unk.ChangeState", file="WorkerFacts.cs"];
m35_17 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr", file="WorkerFacts.cs"];
m35_0 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", span="26-26", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs"];
m35_1 [label="_context = new WorkerContextMock()", span="28-28", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", color=red, community=0, file="WorkerFacts.cs"];
m35_2 [label="_storage = new Mock<JobStorage>()", span="29-29", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", color=red, community=0, file="WorkerFacts.cs"];
m35_3 [label="_process = new Mock<IJobPerformanceProcess>()", span="30-30", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs"];
m35_4 [label="_stateMachineFactory = new Mock<IStateMachineFactory>()", span="31-31", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs"];
m35_5 [label="_connection = new Mock<IStorageConnection>()", span="33-33", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs"];
m35_6 [label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="35-35", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", color=red, community=0, file="WorkerFacts.cs"];
m35_7 [label="_fetchedJob = new Mock<IFetchedJob>()", span="37-37", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs"];
m35_8 [label="_fetchedJob.Setup(x => x.JobId).Returns(JobId)", span="38-38", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs"];
m35_9 [label="_connection\r\n                .Setup(x => x.FetchNextJob(_context.Queues, It.IsNotNull<CancellationToken>()))\r\n                .Returns(_fetchedJob.Object)", span="40-42", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", color=red, community=0, file="WorkerFacts.cs"];
m35_10 [label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData\r\n                {\r\n                    Job = Job.FromExpression(() => Method()),\r\n                })", span="44-48", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs"];
m35_11 [label="_stateMachine = new Mock<IStateMachine>()", span="50-50", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs"];
m35_12 [label="_stateMachineFactory\r\n                .Setup(x => x.Create(_connection.Object))\r\n                .Returns(_stateMachine.Object)", span="52-54", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs"];
m35_13 [label="_stateMachine.Setup(x => x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<IState>(),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>())).Returns(true)", span="56-60", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs"];
m35_14 [label="_token = new CancellationToken()", span="62-62", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", color=red, community=0, file="WorkerFacts.cs"];
m35_15 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", span="26-26", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="WorkerFacts.cs"];
m35_142 [label="Entry Unk.InSequence", span="", cluster="Unk.InSequence", file="WorkerFacts.cs"];
m35_21 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="WorkerFacts.cs"];
m35_101 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="WorkerFacts.cs"];
m35_253 [label="Entry Unk.Throws", span="", cluster="Unk.Throws", file="WorkerFacts.cs"];
m35_39 [label="Entry Unk.FetchNextJob", span="", cluster="Unk.FetchNextJob", file="WorkerFacts.cs"];
m35_86 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", span="102-102", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="WorkerFacts.cs"];
m35_87 [label="var worker = CreateWorker()", span="104-104", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="WorkerFacts.cs"];
m35_88 [label="worker.Execute(_token)", span="106-106", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", color=red, community=0, file="WorkerFacts.cs"];
m35_89 [label="_storage.Verify(x => x.GetConnection(), Times.Once)", span="108-108", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", color=red, community=0, file="WorkerFacts.cs"];
m35_90 [label="_connection.Verify(x => x.Dispose(), Times.Once)", span="109-109", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="WorkerFacts.cs"];
m35_91 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", span="102-102", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="WorkerFacts.cs"];
m35_281 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", span="328-328", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="WorkerFacts.cs"];
m35_282 [label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData { LoadException = new JobLoadException(''asd'', new Exception()) })", span="331-332", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="WorkerFacts.cs"];
m35_283 [label="var worker = CreateWorker()", span="334-334", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="WorkerFacts.cs"];
m35_284 [label="worker.Execute(_token)", span="337-337", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", color=red, community=0, file="WorkerFacts.cs"];
m35_285 [label="_stateMachine.Verify(x => x.ChangeState(\r\n                JobId,\r\n                It.IsAny<FailedState>(),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>()))", span="340-344", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="WorkerFacts.cs"];
m35_286 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", span="328-328", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="WorkerFacts.cs"];
m35_114 [label="Entry Unk.RemoveFromQueue", span="", cluster="Unk.RemoveFromQueue", file="WorkerFacts.cs"];
m35_292 [label="Entry lambda expression", span="340-344", cluster="lambda expression", file="WorkerFacts.cs"];
m35_28 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="WorkerFacts.cs"];
m35_32 [label="Entry lambda expression", span="38-38", cluster="lambda expression", file="WorkerFacts.cs"];
m35_35 [label="Entry lambda expression", span="41-41", cluster="lambda expression", file="WorkerFacts.cs"];
m35_40 [label="Entry lambda expression", span="44-44", cluster="lambda expression", file="WorkerFacts.cs"];
m35_44 [label="Entry lambda expression", span="47-47", cluster="lambda expression", file="WorkerFacts.cs"];
m35_48 [label="Entry lambda expression", span="53-53", cluster="lambda expression", file="WorkerFacts.cs"];
m35_52 [label="Entry lambda expression", span="56-60", cluster="lambda expression", file="WorkerFacts.cs"];
m35_29 [label="x.GetConnection()", span="35-35", cluster="lambda expression", color=red, community=0, file="WorkerFacts.cs"];
m35_30 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="WorkerFacts.cs"];
m35_33 [label="x.JobId", span="38-38", cluster="lambda expression", file="WorkerFacts.cs"];
m35_34 [label="Exit lambda expression", span="38-38", cluster="lambda expression", file="WorkerFacts.cs"];
m35_36 [label="x.FetchNextJob(_context.Queues, It.IsNotNull<CancellationToken>())", span="41-41", cluster="lambda expression", color=red, community=0, file="WorkerFacts.cs"];
m35_37 [label="Exit lambda expression", span="41-41", cluster="lambda expression", file="WorkerFacts.cs"];
m35_41 [label="x.GetJobData(JobId)", span="44-44", cluster="lambda expression", file="WorkerFacts.cs"];
m35_42 [label="Exit lambda expression", span="44-44", cluster="lambda expression", file="WorkerFacts.cs"];
m35_45 [label="Method()", span="47-47", cluster="lambda expression", file="WorkerFacts.cs"];
m35_46 [label="Exit lambda expression", span="47-47", cluster="lambda expression", file="WorkerFacts.cs"];
m35_49 [label="x.Create(_connection.Object)", span="53-53", cluster="lambda expression", file="WorkerFacts.cs"];
m35_50 [label="Exit lambda expression", span="53-53", cluster="lambda expression", file="WorkerFacts.cs"];
m35_53 [label="x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<IState>(),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>())", span="56-60", cluster="lambda expression", file="WorkerFacts.cs"];
m35_54 [label="Exit lambda expression", span="56-60", cluster="lambda expression", file="WorkerFacts.cs"];
m35_61 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="WorkerFacts.cs"];
m35_62 [label="new Worker(null, _storage.Object, _process.Object, _stateMachineFactory.Object)", span="69-69", cluster="lambda expression", color=red, community=0, file="WorkerFacts.cs"];
m35_63 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="WorkerFacts.cs"];
m35_69 [label="Entry lambda expression", span="78-78", cluster="lambda expression", file="WorkerFacts.cs"];
m35_70 [label="new Worker(_context.Object, null, _process.Object, _stateMachineFactory.Object)", span="78-78", cluster="lambda expression", color=red, community=0, file="WorkerFacts.cs"];
m35_71 [label="Exit lambda expression", span="78-78", cluster="lambda expression", file="WorkerFacts.cs"];
m35_76 [label="Entry lambda expression", span="87-87", cluster="lambda expression", file="WorkerFacts.cs"];
m35_77 [label="new Worker(_context.Object, _storage.Object, null, _stateMachineFactory.Object)", span="87-87", cluster="lambda expression", color=red, community=0, file="WorkerFacts.cs"];
m35_78 [label="Exit lambda expression", span="87-87", cluster="lambda expression", file="WorkerFacts.cs"];
m35_83 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="WorkerFacts.cs"];
m35_84 [label="new Worker(_context.Object, _storage.Object, _process.Object, null)", span="96-96", cluster="lambda expression", color=red, community=0, file="WorkerFacts.cs"];
m35_85 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="WorkerFacts.cs"];
m35_95 [label="Entry lambda expression", span="108-108", cluster="lambda expression", file="WorkerFacts.cs"];
m35_98 [label="Entry lambda expression", span="109-109", cluster="lambda expression", file="WorkerFacts.cs"];
m35_96 [label="x.GetConnection()", span="108-108", cluster="lambda expression", color=red, community=0, file="WorkerFacts.cs"];
m35_97 [label="Exit lambda expression", span="108-108", cluster="lambda expression", file="WorkerFacts.cs"];
m35_99 [label="x.Dispose()", span="109-109", cluster="lambda expression", file="WorkerFacts.cs"];
m35_100 [label="Exit lambda expression", span="109-109", cluster="lambda expression", file="WorkerFacts.cs"];
m35_108 [label="Entry lambda expression", span="120-120", cluster="lambda expression", file="WorkerFacts.cs"];
m35_111 [label="Entry lambda expression", span="123-123", cluster="lambda expression", file="WorkerFacts.cs"];
m35_109 [label="x.FetchNextJob(_context.Queues, _token)", span="120-120", cluster="lambda expression", color=red, community=0, file="WorkerFacts.cs"];
m35_110 [label="Exit lambda expression", span="120-120", cluster="lambda expression", file="WorkerFacts.cs"];
m35_112 [label="x.RemoveFromQueue()", span="123-123", cluster="lambda expression", file="WorkerFacts.cs"];
m35_113 [label="Exit lambda expression", span="123-123", cluster="lambda expression", file="WorkerFacts.cs"];
m35_122 [label="Entry lambda expression", span="130-130", cluster="lambda expression", file="WorkerFacts.cs"];
m35_126 [label="worker.Execute(_token)", span="136-136", cluster="lambda expression", color=red, community=0, file="WorkerFacts.cs"];
m35_125 [label="Entry lambda expression", span="136-136", cluster="lambda expression", file="WorkerFacts.cs"];
m35_128 [label="Entry lambda expression", span="138-138", cluster="lambda expression", file="WorkerFacts.cs"];
m35_131 [label="Entry lambda expression", span="139-139", cluster="lambda expression", file="WorkerFacts.cs"];
m35_123 [label="x.ChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>())", span="130-130", cluster="lambda expression", file="WorkerFacts.cs"];
m35_124 [label="Exit lambda expression", span="130-130", cluster="lambda expression", file="WorkerFacts.cs"];
m35_127 [label="Exit lambda expression", span="136-136", cluster="lambda expression", file="WorkerFacts.cs"];
m35_129 [label="x.RemoveFromQueue()", span="138-138", cluster="lambda expression", file="WorkerFacts.cs"];
m35_130 [label="Exit lambda expression", span="138-138", cluster="lambda expression", file="WorkerFacts.cs"];
m35_132 [label="x.Requeue()", span="139-139", cluster="lambda expression", file="WorkerFacts.cs"];
m35_133 [label="Exit lambda expression", span="139-139", cluster="lambda expression", file="WorkerFacts.cs"];
m35_143 [label="Entry lambda expression", span="147-148", cluster="lambda expression", file="WorkerFacts.cs"];
m35_146 [label="Entry lambda expression", span="152-152", cluster="lambda expression", file="WorkerFacts.cs"];
m35_150 [label="Entry lambda expression", span="156-157", cluster="lambda expression", file="WorkerFacts.cs"];
m35_144 [label="x.ChangeState(\r\n                    JobId, It.IsAny<ProcessingState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>())", span="147-148", cluster="lambda expression", file="WorkerFacts.cs"];
m35_145 [label="Exit lambda expression", span="147-148", cluster="lambda expression", file="WorkerFacts.cs"];
m35_147 [label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="152-152", cluster="lambda expression", file="WorkerFacts.cs"];
m35_148 [label="Exit lambda expression", span="152-152", cluster="lambda expression", file="WorkerFacts.cs"];
m35_151 [label="x.ChangeState(\r\n                    JobId, It.IsAny<SucceededState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>())", span="156-157", cluster="lambda expression", file="WorkerFacts.cs"];
m35_152 [label="Exit lambda expression", span="156-157", cluster="lambda expression", file="WorkerFacts.cs"];
m35_158 [label="Entry lambda expression", span="176-180", cluster="lambda expression", file="WorkerFacts.cs"];
m35_159 [label="x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.Is<ProcessingState>(state => state.ServerId == _context.Object.ServerId),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>())", span="176-180", cluster="lambda expression", color=red, community=0, file="WorkerFacts.cs"];
m35_160 [label="Exit lambda expression", span="176-180", cluster="lambda expression", file="WorkerFacts.cs"];
m35_161 [label="Entry lambda expression", span="178-178", cluster="lambda expression", file="WorkerFacts.cs"];
m35_162 [label="state.ServerId == _context.Object.ServerId", span="178-178", cluster="lambda expression", color=red, community=0, file="WorkerFacts.cs"];
m35_163 [label="Exit lambda expression", span="178-178", cluster="lambda expression", file="WorkerFacts.cs"];
m35_169 [label="Entry lambda expression", span="190-196", cluster="lambda expression", file="WorkerFacts.cs"];
m35_170 [label="x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<ProcessingState>(),\r\n                It.Is<string[]>(\r\n                    states => states.Length == 2 &&\r\n                        states[0] == EnqueuedState.StateName && states[1] == ProcessingState.StateName),\r\n                It.IsAny<CancellationToken>())", span="190-196", cluster="lambda expression", file="WorkerFacts.cs"];
m35_171 [label="Exit lambda expression", span="190-196", cluster="lambda expression", file="WorkerFacts.cs"];
m35_172 [label="Entry lambda expression", span="194-195", cluster="lambda expression", file="WorkerFacts.cs"];
m35_173 [label="states.Length == 2 &&\r\n                        states[0] == EnqueuedState.StateName && states[1] == ProcessingState.StateName", span="194-195", cluster="lambda expression", file="WorkerFacts.cs"];
m35_174 [label="Exit lambda expression", span="194-195", cluster="lambda expression", file="WorkerFacts.cs"];
m35_181 [label="Entry lambda expression", span="204-208", cluster="lambda expression", file="WorkerFacts.cs"];
m35_184 [label="Entry lambda expression", span="218-218", cluster="lambda expression", file="WorkerFacts.cs"];
m35_182 [label="x.ChangeState(\r\n                    It.IsAny<string>(),\r\n                    It.IsAny<ProcessingState>(),\r\n                    It.IsAny<string[]>(),\r\n                    It.IsAny<CancellationToken>())", span="204-208", cluster="lambda expression", file="WorkerFacts.cs"];
m35_183 [label="Exit lambda expression", span="204-208", cluster="lambda expression", file="WorkerFacts.cs"];
m35_185 [label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="218-218", cluster="lambda expression", file="WorkerFacts.cs"];
m35_186 [label="Exit lambda expression", span="218-218", cluster="lambda expression", file="WorkerFacts.cs"];
m35_192 [label="Entry lambda expression", span="229-231", cluster="lambda expression", file="WorkerFacts.cs"];
m35_193 [label="x.Run(\r\n                It.IsNotNull<PerformContext>(),\r\n                It.IsNotNull<IJobPerformer>())", span="229-231", cluster="lambda expression", file="WorkerFacts.cs"];
m35_194 [label="Exit lambda expression", span="229-231", cluster="lambda expression", file="WorkerFacts.cs"];
m35_202 [label="Entry lambda expression", span="238-238", cluster="lambda expression", file="WorkerFacts.cs"];
m35_206 [label="worker.Execute(_token)", span="244-244", cluster="lambda expression", color=red, community=0, file="WorkerFacts.cs"];
m35_205 [label="Entry lambda expression", span="244-244", cluster="lambda expression", file="WorkerFacts.cs"];
m35_208 [label="Entry lambda expression", span="248-248", cluster="lambda expression", file="WorkerFacts.cs"];
m35_211 [label="Entry lambda expression", span="250-250", cluster="lambda expression", file="WorkerFacts.cs"];
m35_203 [label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="238-238", cluster="lambda expression", file="WorkerFacts.cs"];
m35_204 [label="Exit lambda expression", span="238-238", cluster="lambda expression", file="WorkerFacts.cs"];
m35_207 [label="Exit lambda expression", span="244-244", cluster="lambda expression", file="WorkerFacts.cs"];
m35_209 [label="x.ChangeState(It.IsAny<string>(), It.IsAny<FailedState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>())", span="248-248", cluster="lambda expression", file="WorkerFacts.cs"];
m35_210 [label="Exit lambda expression", span="248-248", cluster="lambda expression", file="WorkerFacts.cs"];
m35_212 [label="x.Requeue()", span="250-250", cluster="lambda expression", file="WorkerFacts.cs"];
m35_213 [label="Exit lambda expression", span="250-250", cluster="lambda expression", file="WorkerFacts.cs"];
m35_222 [label="Entry lambda expression", span="257-257", cluster="lambda expression", file="WorkerFacts.cs"];
m35_226 [label="worker.Execute(_token)", span="263-263", cluster="lambda expression", color=red, community=0, file="WorkerFacts.cs"];
m35_225 [label="Entry lambda expression", span="263-263", cluster="lambda expression", file="WorkerFacts.cs"];
m35_228 [label="Entry lambda expression", span="265-265", cluster="lambda expression", file="WorkerFacts.cs"];
m35_231 [label="Entry lambda expression", span="266-266", cluster="lambda expression", file="WorkerFacts.cs"];
m35_223 [label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="257-257", cluster="lambda expression", file="WorkerFacts.cs"];
m35_224 [label="Exit lambda expression", span="257-257", cluster="lambda expression", file="WorkerFacts.cs"];
m35_227 [label="Exit lambda expression", span="263-263", cluster="lambda expression", file="WorkerFacts.cs"];
m35_229 [label="x.RemoveFromQueue()", span="265-265", cluster="lambda expression", file="WorkerFacts.cs"];
m35_230 [label="Exit lambda expression", span="265-265", cluster="lambda expression", file="WorkerFacts.cs"];
m35_232 [label="x.Requeue()", span="266-266", cluster="lambda expression", file="WorkerFacts.cs"];
m35_233 [label="Exit lambda expression", span="266-266", cluster="lambda expression", file="WorkerFacts.cs"];
m35_239 [label="Entry lambda expression", span="276-280", cluster="lambda expression", file="WorkerFacts.cs"];
m35_240 [label="x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<SucceededState>(),\r\n                It.Is<string[]>(states => states.Length == 1 && states[0] == ProcessingState.StateName),\r\n                It.IsAny<CancellationToken>())", span="276-280", cluster="lambda expression", file="WorkerFacts.cs"];
m35_241 [label="Exit lambda expression", span="276-280", cluster="lambda expression", file="WorkerFacts.cs"];
m35_242 [label="Entry lambda expression", span="279-279", cluster="lambda expression", file="WorkerFacts.cs"];
m35_243 [label="states.Length == 1 && states[0] == ProcessingState.StateName", span="279-279", cluster="lambda expression", file="WorkerFacts.cs"];
m35_244 [label="Exit lambda expression", span="279-279", cluster="lambda expression", file="WorkerFacts.cs"];
m35_258 [label="x.ChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason.Contains(''Internal'')),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>())", span="298-302", cluster="lambda expression", file="WorkerFacts.cs"];
m35_261 [label="state.Exception == exception && state.Reason.Contains(''Internal'')", span="300-300", cluster="lambda expression", file="WorkerFacts.cs"];
m35_254 [label="Entry lambda expression", span="289-289", cluster="lambda expression", file="WorkerFacts.cs"];
m35_257 [label="Entry lambda expression", span="298-302", cluster="lambda expression", file="WorkerFacts.cs"];
m35_255 [label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="289-289", cluster="lambda expression", file="WorkerFacts.cs"];
m35_256 [label="Exit lambda expression", span="289-289", cluster="lambda expression", file="WorkerFacts.cs"];
m35_259 [label="Exit lambda expression", span="298-302", cluster="lambda expression", file="WorkerFacts.cs"];
m35_260 [label="Entry lambda expression", span="300-300", cluster="lambda expression", file="WorkerFacts.cs"];
m35_262 [label="Exit lambda expression", span="300-300", cluster="lambda expression", file="WorkerFacts.cs"];
m35_276 [label="x.ChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason == ''hello''),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>())", span="320-324", cluster="lambda expression", file="WorkerFacts.cs"];
m35_279 [label="state.Exception == exception && state.Reason == ''hello''", span="322-322", cluster="lambda expression", file="WorkerFacts.cs"];
m35_272 [label="Entry lambda expression", span="311-311", cluster="lambda expression", file="WorkerFacts.cs"];
m35_275 [label="Entry lambda expression", span="320-324", cluster="lambda expression", file="WorkerFacts.cs"];
m35_273 [label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="311-311", cluster="lambda expression", file="WorkerFacts.cs"];
m35_274 [label="Exit lambda expression", span="311-311", cluster="lambda expression", file="WorkerFacts.cs"];
m35_277 [label="Exit lambda expression", span="320-324", cluster="lambda expression", file="WorkerFacts.cs"];
m35_278 [label="Entry lambda expression", span="322-322", cluster="lambda expression", file="WorkerFacts.cs"];
m35_280 [label="Exit lambda expression", span="322-322", cluster="lambda expression", file="WorkerFacts.cs"];
m35_289 [label="Entry lambda expression", span="331-331", cluster="lambda expression", file="WorkerFacts.cs"];
m35_290 [label="x.GetJobData(JobId)", span="331-331", cluster="lambda expression", file="WorkerFacts.cs"];
m35_291 [label="Exit lambda expression", span="331-331", cluster="lambda expression", file="WorkerFacts.cs"];
m35_293 [label="x.ChangeState(\r\n                JobId,\r\n                It.IsAny<FailedState>(),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>())", span="340-344", cluster="lambda expression", file="WorkerFacts.cs"];
m35_294 [label="Exit lambda expression", span="340-344", cluster="lambda expression", file="WorkerFacts.cs"];
m35_64 [label="Entry Worker.cstr", span="", cluster="Worker.cstr", file="WorkerFacts.cs"];
m35_153 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", span="170-170", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="WorkerFacts.cs"];
m35_154 [label="var worker = CreateWorker()", span="172-172", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="WorkerFacts.cs"];
m35_155 [label="worker.Execute(_token)", span="174-174", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", color=red, community=0, file="WorkerFacts.cs"];
m35_156 [label="_stateMachine.Verify(x => x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.Is<ProcessingState>(state => state.ServerId == _context.Object.ServerId),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>()))", span="176-180", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", color=red, community=0, file="WorkerFacts.cs"];
m35_157 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", span="170-170", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="WorkerFacts.cs"];
m35_24 [label="Entry Hangfire.Storage.JobData.JobData()", span="21-21", cluster="Hangfire.Storage.JobData.JobData()", file="WorkerFacts.cs"];
m35_263 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="WorkerFacts.cs"];
m35_94 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="WorkerFacts.cs"];
m35_135 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", span="143-143", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="WorkerFacts.cs"];
m35_136 [label="_stateMachine\r\n                .Setup(x => x.ChangeState(\r\n                    JobId, It.IsAny<ProcessingState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>()))\r\n                .InSequence()\r\n                .Returns(true)", span="146-150", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="WorkerFacts.cs"];
m35_137 [label="_process.Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .InSequence()", span="152-153", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="WorkerFacts.cs"];
m35_138 [label="_stateMachine\r\n                .Setup(x => x.ChangeState(\r\n                    JobId, It.IsAny<SucceededState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>()))\r\n                .InSequence()\r\n                .Returns(true)", span="155-159", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="WorkerFacts.cs"];
m35_139 [label="var worker = CreateWorker()", span="161-161", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="WorkerFacts.cs"];
m35_140 [label="worker.Execute(_token)", span="164-164", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", color=red, community=0, file="WorkerFacts.cs"];
m35_141 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", span="143-143", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="WorkerFacts.cs"];
m35_102 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", span="113-113", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="WorkerFacts.cs"];
m35_103 [label="var worker = CreateWorker()", span="115-115", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="WorkerFacts.cs"];
m35_104 [label="worker.Execute(_token)", span="117-117", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", color=red, community=0, file="WorkerFacts.cs"];
m35_105 [label="_connection.Verify(\r\n                x => x.FetchNextJob(_context.Queues, _token),\r\n                Times.Once)", span="119-121", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", color=red, community=0, file="WorkerFacts.cs"];
m35_106 [label="_fetchedJob.Verify(x => x.RemoveFromQueue())", span="123-123", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="WorkerFacts.cs"];
m35_107 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", span="113-113", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="WorkerFacts.cs"];
m35_287 [label="Entry Hangfire.Common.JobLoadException.JobLoadException(string, System.Exception)", span="32-32", cluster="Hangfire.Common.JobLoadException.JobLoadException(string, System.Exception)", file="WorkerFacts.cs"];
m35_271 [label="Entry Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", span="22-22", cluster="Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", file="WorkerFacts.cs"];
m35_26 [label="Entry Mock<IStateMachine>.cstr", span="", cluster="Mock<IStateMachine>.cstr", file="WorkerFacts.cs"];
m35_93 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="WorkerFacts.cs"];
m35_195 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", span="235-235", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="WorkerFacts.cs"];
m35_196 [label="_process.Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .Throws<OperationCanceledException>()", span="238-239", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="WorkerFacts.cs"];
m35_197 [label="var worker = CreateWorker()", span="241-241", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="WorkerFacts.cs"];
m35_198 [label="Assert.Throws<OperationCanceledException>(() => worker.Execute(_token))", span="244-244", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", color=red, community=0, file="WorkerFacts.cs"];
m35_199 [label="_stateMachine.Verify(\r\n                x => x.ChangeState(It.IsAny<string>(), It.IsAny<FailedState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>()),\r\n                Times.Never)", span="247-249", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="WorkerFacts.cs"];
m35_200 [label="_fetchedJob.Verify(x => x.Requeue())", span="250-250", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="WorkerFacts.cs"];
m35_201 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", span="235-235", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="WorkerFacts.cs"];
m35_51 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="WorkerFacts.cs"];
m35_22 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="WorkerFacts.cs"];
m35_47 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Method()", span="352-352", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Method()", file="WorkerFacts.cs"];
m35_297 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Method()", span="352-352", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Method()", file="WorkerFacts.cs"];
m35_20 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="WorkerFacts.cs"];
m35_43 [label="Entry Unk.GetJobData", span="", cluster="Unk.GetJobData", file="WorkerFacts.cs"];
m35_25 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="149-149", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="WorkerFacts.cs"];
m35_18 [label="Entry Mock<IJobPerformanceProcess>.cstr", span="", cluster="Mock<IJobPerformanceProcess>.cstr", file="WorkerFacts.cs"];
m35_72 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", span="84-84", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", file="WorkerFacts.cs"];
m35_73 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(_context.Object, _storage.Object, null, _stateMachineFactory.Object))", span="86-87", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", color=red, community=0, file="WorkerFacts.cs"];
m35_74 [label="Assert.Equal(''process'', exception.ParamName)", span="89-89", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", file="WorkerFacts.cs"];
m35_75 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", span="84-84", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", file="WorkerFacts.cs"];
m35_298 [label="Hangfire.Core.Tests.Server.WorkerFacts", span="", file="WorkerFacts.cs"];
m35_299 [label=worker, span="", file="WorkerFacts.cs"];
m35_300 [label=worker, span="", file="WorkerFacts.cs"];
m35_301 [label=worker, span="", file="WorkerFacts.cs"];
m35_302 [label=exception, span="", file="WorkerFacts.cs"];
m35_303 [label=exception, span="", file="WorkerFacts.cs"];
m0_8 -> m0_9  [key=0, style=solid, color=red];
m0_19 -> m0_20  [key=0, style=solid, color=green];
m0_23 -> m0_24  [key=0, style=solid, color=green];
m0_23 -> m0_26  [key=1, style=dashed, color=green, label="System.Collections.Generic.IDictionary<string, string>"];
m0_23 -> m0_30  [key=1, style=dashed, color=green, label="HangFire.Common.Job"];
m0_23 -> m0_32  [key=1, style=dashed, color=green, label="HangFire.States.IState"];
m0_23 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.IState"];
m0_23 -> m0_31  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.Job"];
m0_10 -> m0_11  [key=0, style=solid, color=green];
m0_10 -> m0_13  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<object>"];
m0_10 -> m0_16  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<object>"];
m0_10 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label=elapsedTime];
m0_11 -> m0_12  [key=0, style=solid, color=green];
m0_11 -> m0_13  [key=0, style=solid, color=green];
m0_11 -> m0_8  [key=0, style=bold, color=blue];
m0_12 -> m0_14  [key=0, style=solid, color=green];
m0_12 -> m0_8  [key=2, style=dotted, color=green];
m0_12 -> m0_13  [key=0, style=solid, color=red];
m0_13 -> m0_14  [key=0, style=solid, color=red];
m0_13 -> m0_15  [key=2, style=dotted, color=red];
m0_14 -> m0_10  [key=0, style=bold, color=blue];
m0_14 -> m0_12  [key=0, style=bold, color=blue];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_8  [key=2, style=dotted];
m0_4 -> m0_7  [key=0, style=solid];
m0_5 -> m0_6  [key=0, style=solid, color=green];
m0_5 -> m0_7  [key=2, style=dotted];
m0_6 -> m0_4  [key=0, style=bold, color=blue];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_9  [key=2, style=dotted];
m0_15 -> m0_16  [key=0, style=solid, color=green];
m0_0 -> m0_5  [key=1, style=dashed, color=green, label="HangFire.Storage.IStorageConnection"];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<HangFire.States.IStateHandler>"];
m0_0 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<HangFire.States.IStateHandler>"];
m0_3 -> m0_5  [key=0, style=solid, color=green];
m0_3 -> m0_4  [key=0, style=solid];
m0_1 -> m0_3  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_7  [key=0, style=solid];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_7 -> m0_0  [key=0, style=bold, color=blue];
m0_16 -> m0_17  [key=0, style=solid, color=green];
m0_16 -> m0_18  [key=2, style=dotted, color=green];
m0_16 -> m0_19  [key=1, style=dashed, color=green, label="lambda expression"];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_8  [key=2, style=dotted];
m0_17 -> m0_19  [key=2, style=dotted];
m0_17 -> m0_15  [key=0, style=bold, color=blue];
m0_18 -> m0_16  [key=0, style=bold, color=blue];
m0_77 -> m0_91  [key=0, style=solid];
m0_91 -> m0_92  [key=0, style=solid];
m0_91 -> m0_93  [key=2, style=dotted];
m0_91 -> m0_94  [key=2, style=dotted];
m0_92 -> m0_77  [key=0, style=bold, color=blue];
m0_9 -> m0_10  [key=0, style=solid, color=red];
m0_9 -> m0_95  [key=0, style=solid];
m0_9 -> m0_96  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<HangFire.States.IStateHandler>"];
m0_78 -> m0_81  [key=0, style=solid];
m0_78 -> m0_82  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>"];
m0_81 -> m0_82  [key=0, style=solid];
m0_81 -> m0_84  [key=2, style=dotted];
m0_82 -> m0_83  [key=0, style=solid];
m0_82 -> m0_85  [key=2, style=dotted];
m0_83 -> m0_78  [key=0, style=bold, color=blue];
m0_38 -> m0_68  [key=0, style=solid];
m0_38 -> m0_69  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateContext"];
m0_38 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateContext"];
m0_38 -> m0_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateContext"];
m0_68 -> m0_69  [key=0, style=solid];
m0_68 -> m0_77  [key=2, style=dotted];
m0_68 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label=filterInfo];
m0_69 -> m0_70  [key=0, style=solid];
m0_69 -> m0_78  [key=2, style=dotted];
m0_70 -> m0_71  [key=0, style=solid];
m0_70 -> m0_79  [key=2, style=dotted];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_80  [key=2, style=dotted];
m0_74 -> m0_79  [key=2, style=dotted];
m0_71 -> m0_76  [key=0, style=solid];
m0_73 -> m0_74  [key=0, style=solid];
m0_73 -> m0_66  [key=2, style=dotted];
m0_75 -> m0_76  [key=0, style=solid];
m0_72 -> m0_73  [key=0, style=solid];
m0_76 -> m0_38  [key=0, style=bold, color=blue];
m0_24 -> m0_25  [key=0, style=solid, color=green];
m0_24 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_24 -> m0_26  [key=0, style=solid, color=green];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_27  [key=0, style=solid];
m0_25 -> m0_29  [key=2, style=dotted];
m0_25 -> m0_34  [key=0, style=solid, color=green];
m0_25 -> m0_8  [key=2, style=dotted, color=green];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_20  [key=2, style=dotted];
m0_27 -> m0_34  [key=0, style=solid, color=green];
m0_27 -> m0_8  [key=2, style=dotted, color=green];
m0_26 -> m0_28  [key=0, style=solid, color=green];
m0_26 -> m0_27  [key=0, style=solid, color=green];
m0_28 -> m0_24  [key=0, style=bold, color=blue];
m0_28 -> m0_30  [key=0, style=solid, color=green];
m0_28 -> m0_29  [key=0, style=solid];
m0_29 -> m0_8  [key=2, style=dotted];
m0_29 -> m0_34  [key=0, style=solid];
m0_22 -> m0_20  [key=0, style=bold, color=blue];
m0_20 -> m0_21  [key=0, style=solid, color=green];
m0_20 -> m0_22  [key=2, style=dotted, color=green];
m0_21 -> m0_19  [key=0, style=bold, color=blue];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_23  [key=2, style=dotted];
m0_21 -> m0_12  [key=2, style=dotted];
m0_79 -> m0_86  [key=0, style=solid];
m0_79 -> m0_87  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>"];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_89  [key=2, style=dotted];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_90  [key=2, style=dotted];
m0_88 -> m0_79  [key=0, style=bold, color=blue];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_100  [key=2, style=dotted];
m0_95 -> m0_97  [key=1, style=dashed, color=darkseagreen4, label=handlerCollection];
m0_95 -> m0_98  [key=1, style=dashed, color=darkseagreen4, label=handlerCollection];
m0_96 -> m0_97  [key=0, style=solid];
m0_96 -> m0_98  [key=0, style=solid];
m0_98 -> m0_99  [key=0, style=solid];
m0_97 -> m0_96  [key=0, style=solid];
m0_97 -> m0_101  [key=2, style=dotted];
m0_99 -> m0_9  [key=0, style=bold, color=blue];
m0_30 -> m0_31  [key=0, style=solid, color=green];
m0_30 -> m0_35  [key=2, style=dotted, color=green];
m0_30 -> m0_36  [key=2, style=dotted, color=green];
m0_30 -> m0_33  [key=1, style=dashed, color=green, label=jobId];
m0_31 -> m0_32  [key=0, style=solid, color=green];
m0_31 -> m0_37  [key=2, style=dotted];
m0_33 -> m0_34  [key=0, style=solid, color=green];
m0_32 -> m0_33  [key=0, style=solid, color=green];
m0_32 -> m0_38  [key=2, style=dotted, color=green];
m0_34 -> m0_23  [key=0, style=bold, color=blue];
m0_39 -> m0_44  [key=1, style=dashed, color=green, label="string[]"];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.IState"];
m0_39 -> m0_46  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_39 -> m0_48  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_39 -> m0_51  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_39 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_39 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_44 -> m0_45  [key=0, style=solid, color=green];
m0_44 -> m0_46  [key=0, style=solid, color=green];
m0_42 -> m0_44  [key=0, style=solid, color=green];
m0_42 -> m0_43  [key=0, style=solid];
m0_45 -> m0_61  [key=0, style=solid, color=green];
m0_45 -> m0_8  [key=2, style=dotted, color=green];
m0_46 -> m0_47  [key=0, style=solid];
m0_46 -> m0_62  [key=2, style=dotted];
m0_50 -> m0_61  [key=0, style=solid, color=green];
m0_49 -> m0_50  [key=0, style=solid, color=green];
m0_49 -> m0_51  [key=0, style=solid];
m0_54 -> m0_55  [key=0, style=solid, color=green];
m0_54 -> m0_58  [key=0, style=solid, color=green];
m0_53 -> m0_54  [key=0, style=solid, color=green];
m0_53 -> m0_65  [key=2, style=dotted];
m0_55 -> m0_56  [key=0, style=solid, color=green];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_37  [key=2, style=dotted];
m0_56 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.IState"];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_66  [key=2, style=dotted];
m0_56 -> m0_67  [key=2, style=dotted];
m0_56 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.IState"];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_53  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m0_48 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m0_48 -> m0_63  [key=2, style=dotted];
m0_48 -> m0_51  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m0_48 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m0_59 -> m0_38  [key=2, style=dotted];
m0_59 -> m0_60  [key=0, style=solid];
m0_41 -> m0_8  [key=2, style=dotted];
m0_41 -> m0_61  [key=0, style=solid];
m0_43 -> m0_8  [key=2, style=dotted];
m0_43 -> m0_61  [key=0, style=solid];
m0_40 -> m0_42  [key=0, style=solid];
m0_40 -> m0_41  [key=0, style=solid];
m0_51 -> m0_53  [key=0, style=solid];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_64  [key=2, style=dotted];
m0_47 -> m0_48  [key=0, style=solid];
m0_52 -> m0_61  [key=0, style=solid];
m0_60 -> m0_61  [key=0, style=solid];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label=loadSucceeded];
m0_61 -> m0_39  [key=0, style=bold, color=blue];
m0_102 -> m0_5  [key=1, style=dashed, color=green, label="HangFire.States.StateMachine"];
m0_102 -> m0_13  [key=1, style=dashed, color=green, label="HangFire.States.StateMachine"];
m0_102 -> m0_30  [key=1, style=dashed, color=green, label="HangFire.States.StateMachine"];
m0_102 -> m0_32  [key=1, style=dashed, color=green, label="HangFire.States.StateMachine"];
m0_102 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m0_102 -> m0_46  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m0_102 -> m0_48  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m0_102 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m0_102 -> m0_68  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m0_102 -> m0_69  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m0_102 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m0_102 -> m0_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m0_102 -> m0_81  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m0_102 -> m0_86  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m0_102 -> m0_87  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m0_102 -> m0_91  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m0_103 -> m0_16  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<object>"];
m1_62 -> m1_63  [key=0, style=solid, color=red];
m1_62 -> m1_64  [key=1, style=dashed, color=green, label="System.Collections.Generic.IDictionary<string, string>"];
m1_63 -> m1_64  [key=0, style=solid, color=green];
m1_63 -> m1_66  [key=2, style=dotted, color=red];
m1_63 -> m1_67  [key=2, style=dotted, color=red];
m1_64 -> m1_65  [key=0, style=solid, color=green];
m1_64 -> m1_60  [key=2, style=dotted, color=green];
m1_64 -> m1_68  [key=2, style=dotted, color=green];
m1_65 -> m1_62  [key=0, style=bold, color=blue];
m1_91 -> m1_92  [key=0, style=solid, color=green];
m1_92 -> m1_93  [key=0, style=solid, color=green];
m1_92 -> m1_60  [key=2, style=dotted, color=green];
m1_92 -> m1_94  [key=2, style=dotted, color=green];
m1_92 -> m1_95  [key=2, style=dotted, color=green];
m1_93 -> m1_91  [key=0, style=bold, color=blue];
m1_30 -> m1_31  [key=0, style=solid, color=green];
m1_31 -> m1_32  [key=0, style=solid, color=green];
m1_31 -> m1_33  [key=2, style=dotted, color=green];
m1_32 -> m1_30  [key=0, style=bold, color=blue];
m1_20 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_20 -> m1_22  [key=0, style=solid];
m1_20 -> m1_23  [key=1, style=dashed, color=red, label=string];
m1_22 -> m1_23  [key=0, style=solid, color=red];
m1_22 -> m1_24  [key=0, style=solid, color=green];
m1_22 -> m1_26  [key=2, style=dotted];
m1_23 -> m1_25  [key=0, style=solid, color=red];
m1_23 -> m1_21  [key=2, style=dotted, color=red];
m1_24 -> m1_25  [key=0, style=solid, color=green];
m1_25 -> m1_20  [key=0, style=bold, color=blue];
m1_27 -> m1_28  [key=0, style=solid];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_26  [key=2, style=dotted];
m1_29 -> m1_27  [key=0, style=bold, color=blue];
m1_87 -> m1_88  [key=0, style=solid, color=green];
m1_88 -> m1_89  [key=0, style=solid, color=green];
m1_88 -> m1_60  [key=2, style=dotted, color=green];
m1_88 -> m1_90  [key=2, style=dotted, color=green];
m1_89 -> m1_87  [key=0, style=bold, color=blue];
m1_69 -> m1_70  [key=0, style=solid];
m1_69 -> m1_73  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m1_69 -> m1_74  [key=1, style=dashed, color=green, label="System.Collections.Generic.IDictionary<string, string>"];
m1_69 -> m1_75  [key=1, style=dashed, color=green, label="System.Collections.Generic.IDictionary<string, string>"];
m1_69 -> m1_76  [key=1, style=dashed, color=green, label="System.Collections.Generic.IDictionary<string, string>"];
m1_69 -> m1_80  [key=1, style=dashed, color=green, label="System.Collections.Generic.IDictionary<string, string>"];
m1_69 -> m1_82  [key=1, style=dashed, color=green, label="System.Collections.Generic.IDictionary<string, string>"];
m1_70 -> m1_71  [key=0, style=solid];
m1_70 -> m1_54  [key=2, style=dotted];
m1_70 -> m1_78  [key=1, style=dashed, color=green, label=builder];
m1_70 -> m1_79  [key=1, style=dashed, color=darkseagreen4, label=builder];
m1_70 -> m1_81  [key=1, style=dashed, color=green, label=builder];
m1_70 -> m1_82  [key=1, style=dashed, color=green, label=builder];
m1_70 -> m1_83  [key=1, style=dashed, color=green, label=builder];
m1_70 -> m1_84  [key=1, style=dashed, color=green, label=builder];
m1_73 -> m1_74  [key=0, style=solid, color=green];
m1_73 -> m1_75  [key=0, style=solid, color=green];
m1_73 -> m1_26  [key=2, style=dotted];
m1_74 -> m1_77  [key=0, style=solid, color=green];
m1_74 -> m1_79  [key=1, style=dashed, color=green, label=serverId];
m1_75 -> m1_76  [key=0, style=solid, color=green];
m1_75 -> m1_77  [key=0, style=solid, color=green];
m1_75 -> m1_26  [key=2, style=dotted, color=green];
m1_76 -> m1_77  [key=0, style=solid, color=green];
m1_76 -> m1_79  [key=1, style=dashed, color=green, label=serverId];
m1_80 -> m1_81  [key=0, style=solid, color=green];
m1_80 -> m1_83  [key=0, style=solid, color=green];
m1_80 -> m1_26  [key=2, style=dotted, color=green];
m1_82 -> m1_83  [key=0, style=solid, color=green];
m1_82 -> m1_59  [key=2, style=dotted, color=green];
m1_71 -> m1_72  [key=0, style=solid, color=red];
m1_71 -> m1_55  [key=2, style=dotted];
m1_78 -> m1_79  [key=0, style=solid, color=green];
m1_78 -> m1_55  [key=2, style=dotted, color=green];
m1_79 -> m1_80  [key=0, style=solid, color=green];
m1_79 -> m1_86  [key=2, style=dotted, color=red];
m1_79 -> m1_59  [key=2, style=dotted, color=red];
m1_79 -> m1_79  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m1_81 -> m1_82  [key=0, style=solid, color=green];
m1_81 -> m1_55  [key=2, style=dotted, color=green];
m1_83 -> m1_84  [key=0, style=solid, color=green];
m1_83 -> m1_55  [key=2, style=dotted, color=green];
m1_84 -> m1_85  [key=0, style=solid, color=green];
m1_84 -> m1_60  [key=2, style=dotted, color=green];
m1_84 -> m1_61  [key=2, style=dotted, color=green];
m1_84 -> m1_63  [key=3, color=red, style=bold, label="Parameter variable Hangfire.Server.ILongRunningProcess process"];
m1_72 -> m1_73  [key=0, style=solid, color=red];
m1_72 -> m1_77  [key=1, style=dashed, color=green, label=serverId];
m1_72 -> m1_79  [key=1, style=dashed, color=darkseagreen4, label=serverId];
m1_77 -> m1_78  [key=0, style=solid, color=green];
m1_77 -> m1_80  [key=0, style=solid, color=green];
m1_77 -> m1_77  [key=3, color=red, style=bold, label="Local variable int i"];
m1_85 -> m1_69  [key=0, style=bold, color=blue];
m1_34 -> m1_35  [key=0, style=solid];
m1_35 -> m1_36  [key=0, style=solid];
m1_36 -> m1_34  [key=0, style=bold, color=blue];
m1_37 -> m1_38  [key=0, style=solid, color=green];
m1_37 -> m1_41  [key=1, style=dashed, color=green, label="System.Collections.Generic.IDictionary<string, string>"];
m1_37 -> m1_42  [key=1, style=dashed, color=green, label="System.Collections.Generic.IDictionary<string, string>"];
m1_37 -> m1_45  [key=1, style=dashed, color=green, label="System.Collections.Generic.IDictionary<string, string>"];
m1_37 -> m1_46  [key=1, style=dashed, color=green, label="System.Collections.Generic.IDictionary<string, string>"];
m1_38 -> m1_39  [key=0, style=solid, color=green];
m1_38 -> m1_54  [key=2, style=dotted, color=green];
m1_38 -> m1_43  [key=1, style=dashed, color=green, label=builder];
m1_38 -> m1_47  [key=1, style=dashed, color=green, label=builder];
m1_38 -> m1_49  [key=1, style=dashed, color=green, label=builder];
m1_38 -> m1_52  [key=1, style=dashed, color=green, label=builder];
m1_41 -> m1_42  [key=0, style=solid, color=green];
m1_41 -> m1_45  [key=0, style=solid, color=green];
m1_41 -> m1_26  [key=2, style=dotted, color=green];
m1_42 -> m1_43  [key=0, style=solid, color=green];
m1_42 -> m1_56  [key=2, style=dotted, color=green];
m1_42 -> m1_57  [key=2, style=dotted, color=green];
m1_45 -> m1_46  [key=0, style=solid, color=green];
m1_45 -> m1_49  [key=0, style=solid, color=green];
m1_45 -> m1_26  [key=2, style=dotted, color=green];
m1_46 -> m1_47  [key=0, style=solid, color=green];
m1_46 -> m1_56  [key=2, style=dotted, color=green];
m1_46 -> m1_57  [key=2, style=dotted, color=green];
m1_39 -> m1_40  [key=0, style=solid, color=green];
m1_39 -> m1_55  [key=2, style=dotted, color=green];
m1_43 -> m1_44  [key=0, style=solid, color=green];
m1_43 -> m1_58  [key=2, style=dotted, color=green];
m1_43 -> m1_59  [key=2, style=dotted, color=green];
m1_47 -> m1_48  [key=0, style=solid, color=green];
m1_47 -> m1_58  [key=2, style=dotted, color=green];
m1_47 -> m1_59  [key=2, style=dotted, color=green];
m1_49 -> m1_50  [key=0, style=solid, color=green];
m1_49 -> m1_55  [key=2, style=dotted, color=green];
m1_52 -> m1_53  [key=0, style=solid];
m1_52 -> m1_60  [key=2, style=dotted];
m1_52 -> m1_61  [key=2, style=dotted];
m1_40 -> m1_41  [key=0, style=solid, color=green];
m1_40 -> m1_50  [key=1, style=dashed, color=green, label=itemsAdded];
m1_50 -> m1_51  [key=0, style=solid, color=green];
m1_50 -> m1_52  [key=0, style=solid, color=green];
m1_44 -> m1_45  [key=0, style=solid, color=green];
m1_44 -> m1_50  [key=1, style=dashed, color=green, label=itemsAdded];
m1_48 -> m1_49  [key=0, style=solid, color=green];
m1_48 -> m1_50  [key=1, style=dashed, color=green, label=itemsAdded];
m1_51 -> m1_53  [key=0, style=solid, color=green];
m1_53 -> m1_37  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid, color=green];
m1_1 -> m1_2  [key=0, style=solid, color=green];
m1_1 -> m1_20  [key=2, style=dotted, color=green];
m1_2 -> m1_3  [key=0, style=solid, color=green];
m1_2 -> m1_20  [key=2, style=dotted, color=green];
m1_2 -> m1_64  [key=3, color=green, style=bold, label="Field variable System.Threading.Tasks.Task _bootstrapTask"];
m1_3 -> m1_4  [key=0, style=solid, color=green];
m1_3 -> m1_20  [key=2, style=dotted, color=green];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_20  [key=2, style=dotted];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_20  [key=2, style=dotted];
m1_6 -> m1_7  [key=0, style=solid, color=green];
m1_6 -> m1_20  [key=2, style=dotted];
m1_7 -> m1_8  [key=0, style=solid, color=green];
m1_7 -> m1_21  [key=2, style=dotted, color=green];
m1_8 -> m1_9  [key=0, style=solid];
m1_8 -> m1_21  [key=2, style=dotted];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_21  [key=2, style=dotted];
m1_10 -> m1_11  [key=0, style=solid];
m1_10 -> m1_21  [key=2, style=dotted];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_21  [key=2, style=dotted];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_21  [key=2, style=dotted];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_21  [key=2, style=dotted];
m1_14 -> m1_15  [key=0, style=solid, color=red];
m1_14 -> m1_21  [key=2, style=dotted];
m1_15 -> m1_16  [key=0, style=solid, color=red];
m1_15 -> m1_21  [key=2, style=dotted, color=red];
m1_16 -> m1_17  [key=0, style=solid, color=green];
m1_16 -> m1_21  [key=2, style=dotted];
m1_17 -> m1_18  [key=0, style=solid, color=green];
m1_17 -> m1_21  [key=2, style=dotted, color=green];
m1_18 -> m1_19  [key=0, style=solid, color=green];
m1_18 -> m1_21  [key=2, style=dotted, color=green];
m1_19 -> m1_0  [key=0, style=bold, color=blue];
m4_247 -> m4_248  [key=0, style=solid];
m4_247 -> m4_251  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_248 -> m4_249  [key=0, style=solid];
m4_248 -> m4_9  [key=2, style=dotted];
m4_248 -> m4_250  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_249 -> m4_247  [key=0, style=bold, color=blue];
m4_274 -> m4_327  [key=0, style=solid];
m4_274 -> m4_334  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_274 -> m4_352  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_274 -> m4_335  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m4_327 -> m4_328  [key=0, style=solid];
m4_327 -> m4_331  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m4_327 -> m4_332  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m4_334 -> m4_335  [key=0, style=solid];
m4_334 -> m4_92  [key=2, style=dotted];
m4_334 -> m4_93  [key=2, style=dotted];
m4_334 -> m4_351  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_335 -> m4_336  [key=0, style=solid];
m4_335 -> m4_347  [key=2, style=dotted];
m4_335 -> m4_340  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m4_328 -> m4_329  [key=0, style=solid];
m4_328 -> m4_86  [key=2, style=dotted];
m4_328 -> m4_331  [key=1, style=dashed, color=darkseagreen4, label=dates];
m4_328 -> m4_334  [key=1, style=dashed, color=darkseagreen4, label=dates];
m4_328 -> m4_338  [key=1, style=dashed, color=darkseagreen4, label=dates];
m4_328 -> m4_342  [key=1, style=dashed, color=darkseagreen4, label=dates];
m4_331 -> m4_332  [key=0, style=solid];
m4_331 -> m4_224  [key=2, style=dotted];
m4_332 -> m4_333  [key=0, style=solid];
m4_332 -> m4_346  [key=2, style=dotted];
m4_332 -> m4_332  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m4_329 -> m4_330  [key=0, style=solid];
m4_329 -> m4_333  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_338 -> m4_339  [key=0, style=solid];
m4_338 -> m4_344  [key=0, style=solid];
m4_342 -> m4_343  [key=0, style=solid];
m4_342 -> m4_350  [key=2, style=dotted];
m4_330 -> m4_331  [key=0, style=solid];
m4_330 -> m4_334  [key=0, style=solid];
m4_333 -> m4_330  [key=0, style=solid];
m4_333 -> m4_333  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_336 -> m4_337  [key=0, style=solid];
m4_336 -> m4_87  [key=2, style=dotted];
m4_336 -> m4_342  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_336 -> m4_344  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_340 -> m4_341  [key=0, style=solid];
m4_340 -> m4_342  [key=0, style=solid];
m4_340 -> m4_348  [key=2, style=dotted];
m4_340 -> m4_349  [key=2, style=dotted];
m4_337 -> m4_338  [key=0, style=solid];
m4_337 -> m4_340  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_337 -> m4_342  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_337 -> m4_343  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_344 -> m4_345  [key=0, style=solid];
m4_343 -> m4_338  [key=0, style=solid];
m4_343 -> m4_343  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_339 -> m4_340  [key=0, style=solid];
m4_341 -> m4_342  [key=0, style=solid];
m4_345 -> m4_274  [key=0, style=bold, color=blue];
m4_39 -> m4_37  [key=0, style=bold, color=blue];
m4_122 -> m4_356  [key=0, style=solid];
m4_122 -> m4_363  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_122 -> m4_380  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_122 -> m4_364  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m4_356 -> m4_357  [key=0, style=solid];
m4_356 -> m4_359  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m4_356 -> m4_360  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m4_356 -> m4_361  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m4_363 -> m4_364  [key=0, style=solid];
m4_363 -> m4_92  [key=2, style=dotted];
m4_363 -> m4_93  [key=2, style=dotted];
m4_363 -> m4_379  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_364 -> m4_365  [key=0, style=solid];
m4_364 -> m4_347  [key=2, style=dotted];
m4_364 -> m4_369  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m4_357 -> m4_358  [key=0, style=solid];
m4_357 -> m4_375  [key=2, style=dotted];
m4_357 -> m4_359  [key=1, style=dashed, color=darkseagreen4, label=startDate];
m4_359 -> m4_360  [key=0, style=solid];
m4_359 -> m4_362  [key=0, style=solid];
m4_360 -> m4_361  [key=0, style=solid];
m4_360 -> m4_224  [key=2, style=dotted];
m4_361 -> m4_359  [key=0, style=solid];
m4_361 -> m4_375  [key=2, style=dotted];
m4_361 -> m4_361  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m4_358 -> m4_359  [key=0, style=solid];
m4_358 -> m4_86  [key=2, style=dotted];
m4_358 -> m4_360  [key=1, style=dashed, color=darkseagreen4, label=dates];
m4_358 -> m4_362  [key=1, style=dashed, color=darkseagreen4, label=dates];
m4_358 -> m4_371  [key=1, style=dashed, color=darkseagreen4, label=dates];
m4_362 -> m4_363  [key=0, style=solid];
m4_362 -> m4_92  [key=2, style=dotted];
m4_362 -> m4_93  [key=2, style=dotted];
m4_362 -> m4_376  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_362 -> m4_367  [key=1, style=dashed, color=darkseagreen4, label=stringDates];
m4_371 -> m4_372  [key=0, style=solid];
m4_371 -> m4_350  [key=2, style=dotted];
m4_367 -> m4_368  [key=0, style=solid];
m4_367 -> m4_373  [key=0, style=solid];
m4_365 -> m4_366  [key=0, style=solid];
m4_365 -> m4_87  [key=2, style=dotted];
m4_365 -> m4_371  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_365 -> m4_373  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_369 -> m4_370  [key=0, style=solid];
m4_369 -> m4_371  [key=0, style=solid];
m4_369 -> m4_348  [key=2, style=dotted];
m4_369 -> m4_349  [key=2, style=dotted];
m4_366 -> m4_367  [key=0, style=solid];
m4_366 -> m4_369  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_366 -> m4_371  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_366 -> m4_372  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_373 -> m4_374  [key=0, style=solid];
m4_372 -> m4_367  [key=0, style=solid];
m4_372 -> m4_372  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_368 -> m4_369  [key=0, style=solid];
m4_370 -> m4_371  [key=0, style=solid];
m4_374 -> m4_122  [key=0, style=bold, color=blue];
m4_257 -> m4_258  [key=0, style=solid];
m4_257 -> m4_261  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_258 -> m4_259  [key=0, style=solid];
m4_258 -> m4_9  [key=2, style=dotted];
m4_258 -> m4_260  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_259 -> m4_257  [key=0, style=bold, color=blue];
m4_12 -> m4_10  [key=0, style=bold, color=blue];
m4_25 -> m4_13  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.Server.BackgroundProcessContext context"];
m4_25 -> m4_26  [key=0, style=solid];
m4_25 -> m4_27  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ILongRunningProcess"];
m4_25 -> m4_28  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ILongRunningProcess"];
m4_25 -> m4_29  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ILongRunningProcess"];
m4_25 -> m4_32  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ILongRunningProcess"];
m4_25 -> m4_33  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ILongRunningProcess"];
m4_26 -> m4_27  [key=0, style=solid];
m4_26 -> m4_35  [key=2, style=dotted];
m4_26 -> m4_36  [key=2, style=dotted];
m4_26 -> m4_20  [key=2, style=dotted];
m4_26 -> m4_21  [key=2, style=dotted];
m4_27 -> m4_28  [key=0, style=solid];
m4_27 -> m4_35  [key=2, style=dotted];
m4_27 -> m4_37  [key=2, style=dotted];
m4_27 -> m4_32  [key=1, style=dashed, color=darkseagreen4, label=logger];
m4_27 -> m4_33  [key=1, style=dashed, color=darkseagreen4, label=logger];
m4_27 -> m4_25  [key=0, style=bold, color=blue];
m4_28 -> m4_29  [key=0, style=solid];
m4_28 -> m4_38  [key=2, style=dotted];
m4_29 -> m4_30  [key=0, style=solid];
m4_29 -> m4_31  [key=0, style=solid];
m4_29 -> m4_33  [key=0, style=solid];
m4_29 -> m4_39  [key=2, style=dotted];
m4_29 -> m4_9  [key=2, style=dotted];
m4_32 -> m4_33  [key=0, style=solid];
m4_32 -> m4_40  [key=2, style=dotted];
m4_32 -> m4_41  [key=2, style=dotted];
m4_32 -> m4_13  [key=2, style=dotted];
m4_33 -> m4_34  [key=0, style=solid];
m4_33 -> m4_38  [key=2, style=dotted];
m4_33 -> m4_31  [key=0, style=bold, color=blue];
m4_30 -> m4_33  [key=0, style=solid];
m4_30 -> m4_28  [key=0, style=bold, color=blue];
m4_31 -> m4_32  [key=0, style=solid];
m4_34 -> m4_25  [key=0, style=bold, color=blue];
m4_34 -> m4_35  [key=0, style=solid];
m4_275 -> m4_276  [key=0, style=solid];
m4_276 -> m4_277  [key=0, style=solid];
m4_276 -> m4_9  [key=2, style=dotted];
m4_276 -> m4_278  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_277 -> m4_275  [key=0, style=bold, color=blue];
m4_433 -> m4_434  [key=0, style=solid];
m4_434 -> m4_435  [key=0, style=solid];
m4_434 -> m4_70  [key=2, style=dotted];
m4_434 -> m4_436  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_435 -> m4_433  [key=0, style=bold, color=blue];
m4_22 -> m4_23  [key=0, style=solid];
m4_22 -> m4_26  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_23 -> m4_24  [key=0, style=solid];
m4_23 -> m4_9  [key=2, style=dotted];
m4_23 -> m4_25  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_24 -> m4_22  [key=0, style=bold, color=blue];
m4_41 -> m4_42  [key=0, style=solid];
m4_41 -> m4_9  [key=2, style=dotted];
m4_41 -> m4_43  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_38 -> m4_39  [key=0, style=solid];
m4_38 -> m4_13  [key=2, style=dotted];
m4_281 -> m4_282  [key=0, style=solid];
m4_281 -> m4_285  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_281 -> m4_289  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_282 -> m4_283  [key=0, style=solid];
m4_282 -> m4_70  [key=2, style=dotted];
m4_282 -> m4_284  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_283 -> m4_281  [key=0, style=bold, color=blue];
m4_5 -> m4_9  [key=0, style=solid];
m4_5 -> m4_11  [key=2, style=dotted];
m4_37 -> m4_38  [key=0, style=solid];
m4_427 -> m4_428  [key=0, style=solid];
m4_428 -> m4_429  [key=0, style=solid];
m4_428 -> m4_9  [key=2, style=dotted];
m4_428 -> m4_430  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_429 -> m4_427  [key=0, style=bold, color=blue];
m4_10 -> m4_11  [key=0, style=solid];
m4_191 -> m4_192  [key=0, style=solid];
m4_191 -> m4_195  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_192 -> m4_193  [key=0, style=solid];
m4_192 -> m4_9  [key=2, style=dotted];
m4_192 -> m4_194  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_193 -> m4_191  [key=0, style=bold, color=blue];
m4_222 -> m4_382  [key=0, style=solid];
m4_222 -> m4_384  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<string>"];
m4_222 -> m4_385  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<string>"];
m4_222 -> m4_386  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m4_222 -> m4_387  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m4_222 -> m4_388  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<string>"];
m4_222 -> m4_391  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m4_222 -> m4_392  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m4_222 -> m4_409  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m4_222 -> m4_394  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<string>"];
m4_222 -> m4_419  [key=1, style=dashed, color=darkseagreen4, label="System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>"];
m4_382 -> m4_383  [key=0, style=solid];
m4_382 -> m4_384  [key=0, style=solid];
m4_384 -> m4_385  [key=0, style=solid];
m4_384 -> m4_396  [key=2, style=dotted];
m4_384 -> m4_390  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m4_384 -> m4_404  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m4_384 -> m4_405  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m4_384 -> m4_394  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m4_384 -> m4_416  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m4_385 -> m4_386  [key=0, style=solid];
m4_385 -> m4_396  [key=2, style=dotted];
m4_385 -> m4_392  [key=1, style=dashed, color=darkseagreen4, label=states];
m4_385 -> m4_412  [key=1, style=dashed, color=darkseagreen4, label=states];
m4_385 -> m4_413  [key=1, style=dashed, color=darkseagreen4, label=states];
m4_385 -> m4_394  [key=1, style=dashed, color=darkseagreen4, label=states];
m4_385 -> m4_416  [key=1, style=dashed, color=darkseagreen4, label=states];
m4_386 -> m4_387  [key=0, style=solid];
m4_386 -> m4_386  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m4_386 -> m4_390  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m4_386 -> m4_399  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m4_386 -> m4_394  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m4_386 -> m4_416  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m4_387 -> m4_388  [key=0, style=solid];
m4_387 -> m4_88  [key=2, style=dotted];
m4_387 -> m4_390  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_387 -> m4_392  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_387 -> m4_393  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_388 -> m4_389  [key=0, style=solid];
m4_388 -> m4_393  [key=0, style=solid];
m4_391 -> m4_392  [key=0, style=solid];
m4_391 -> m4_388  [key=0, style=solid];
m4_392 -> m4_388  [key=0, style=solid];
m4_392 -> m4_89  [key=2, style=dotted];
m4_392 -> m4_408  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_392 -> m4_411  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_394 -> m4_395  [key=0, style=solid];
m4_394 -> m4_397  [key=2, style=dotted];
m4_394 -> m4_92  [key=2, style=dotted];
m4_394 -> m4_93  [key=2, style=dotted];
m4_394 -> m4_415  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_394 -> m4_418  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_383 -> m4_395  [key=0, style=solid];
m4_383 -> m4_54  [key=2, style=dotted];
m4_383 -> m4_86  [key=2, style=dotted];
m4_390 -> m4_391  [key=0, style=solid];
m4_390 -> m4_89  [key=2, style=dotted];
m4_390 -> m4_398  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_390 -> m4_403  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_393 -> m4_394  [key=0, style=solid];
m4_393 -> m4_90  [key=2, style=dotted];
m4_389 -> m4_390  [key=0, style=solid];
m4_389 -> m4_399  [key=1, style=dashed, color=darkseagreen4, label=id];
m4_389 -> m4_404  [key=1, style=dashed, color=darkseagreen4, label=id];
m4_389 -> m4_405  [key=1, style=dashed, color=darkseagreen4, label=id];
m4_389 -> m4_392  [key=1, style=dashed, color=darkseagreen4, label=id];
m4_389 -> m4_409  [key=1, style=dashed, color=darkseagreen4, label=id];
m4_389 -> m4_412  [key=1, style=dashed, color=darkseagreen4, label=id];
m4_389 -> m4_413  [key=1, style=dashed, color=darkseagreen4, label=id];
m4_395 -> m4_222  [key=0, style=bold, color=blue];
m4_9 -> m4_512  [key=0, style=solid];
m4_9 -> m4_513  [key=1, style=dashed, color=darkseagreen4, label="System.Func<IRedisClient, T>"];
m4_9 -> m4_0  [key=0, style=bold, color=blue];
m4_512 -> m4_513  [key=0, style=solid];
m4_512 -> m4_515  [key=2, style=dotted];
m4_513 -> m4_514  [key=0, style=solid];
m4_513 -> m4_516  [key=2, style=dotted];
m4_514 -> m4_9  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_0 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ILongRunningProcess"];
m4_0 -> m4_25  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.Server.BackgroundProcessContext context"];
m4_0 -> m4_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m4_0 -> m4_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ILongRunningProcess"];
m4_0 -> m4_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_3  [key=0, style=solid];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_5  [key=1, style=dashed, color=darkseagreen4, label=backgroundProcess];
m4_2 -> m4_4  [key=0, style=solid];
m4_2 -> m4_5  [key=2, style=dotted];
m4_2 -> m4_10  [key=2, style=dotted];
m4_2 -> m4_9  [key=0, style=solid];
m4_4 -> m4_0  [key=0, style=bold, color=blue];
m4_4 -> m4_5  [key=0, style=solid];
m4_4 -> m4_6  [key=0, style=solid];
m4_11 -> m4_12  [key=0, style=solid];
m4_11 -> m4_13  [key=2, style=dotted];
m4_18 -> m4_19  [key=0, style=solid];
m4_18 -> m4_20  [key=2, style=dotted];
m4_18 -> m4_21  [key=2, style=dotted];
m4_18 -> m4_22  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_17 -> m4_18  [key=0, style=solid];
m4_17 -> m4_19  [key=0, style=solid];
m4_17 -> m4_10  [key=2, style=dotted];
m4_19 -> m4_17  [key=0, style=bold, color=blue];
m4_19 -> m4_13  [key=0, style=bold, color=blue];
m4_43 -> m4_44  [key=0, style=solid];
m4_44 -> m4_45  [key=0, style=solid];
m4_44 -> m4_21  [key=2, style=dotted];
m4_44 -> m4_36  [key=0, style=bold, color=blue];
m4_45 -> m4_43  [key=0, style=bold, color=blue];
m4_45 -> m4_23  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ILongRunningProcess"];
m4_50 -> m4_51  [key=0, style=solid];
m4_50 -> m4_53  [key=2, style=dotted];
m4_49 -> m4_50  [key=0, style=solid];
m4_49 -> m4_51  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m4_51 -> m4_52  [key=0, style=solid];
m4_51 -> m4_54  [key=2, style=dotted];
m4_51 -> m4_55  [key=2, style=dotted];
m4_51 -> m4_56  [key=2, style=dotted];
m4_51 -> m4_57  [key=2, style=dotted];
m4_51 -> m4_58  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_51 -> m4_64  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_52 -> m4_49  [key=0, style=bold, color=blue];
m4_58 -> m4_59  [key=0, style=solid];
m4_64 -> m4_65  [key=0, style=solid];
m4_59 -> m4_60  [key=0, style=solid];
m4_59 -> m4_61  [key=2, style=dotted];
m4_59 -> m4_62  [key=2, style=dotted];
m4_59 -> m4_63  [key=2, style=dotted];
m4_60 -> m4_58  [key=0, style=bold, color=blue];
m4_65 -> m4_66  [key=0, style=solid];
m4_65 -> m4_65  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, HangFire.Storage.Monitoring.ProcessingJobDto>"];
m4_66 -> m4_64  [key=0, style=bold, color=blue];
m4_72 -> m4_73  [key=0, style=solid];
m4_72 -> m4_85  [key=2, style=dotted];
m4_72 -> m4_78  [key=1, style=dashed, color=darkseagreen4, label=scheduledJobs];
m4_72 -> m4_83  [key=1, style=dashed, color=darkseagreen4, label=scheduledJobs];
m4_71 -> m4_72  [key=0, style=solid];
m4_71 -> m4_77  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m4_77 -> m4_78  [key=0, style=solid];
m4_77 -> m4_88  [key=2, style=dotted];
m4_77 -> m4_80  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_77 -> m4_81  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_77 -> m4_82  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_73 -> m4_74  [key=0, style=solid];
m4_73 -> m4_75  [key=0, style=solid];
m4_78 -> m4_79  [key=0, style=solid];
m4_78 -> m4_82  [key=0, style=solid];
m4_83 -> m4_84  [key=0, style=solid];
m4_83 -> m4_91  [key=2, style=dotted];
m4_83 -> m4_92  [key=2, style=dotted];
m4_83 -> m4_93  [key=2, style=dotted];
m4_83 -> m4_109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_74 -> m4_84  [key=0, style=solid];
m4_74 -> m4_54  [key=2, style=dotted];
m4_74 -> m4_86  [key=2, style=dotted];
m4_75 -> m4_76  [key=0, style=solid];
m4_75 -> m4_87  [key=2, style=dotted];
m4_75 -> m4_80  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m4_75 -> m4_100  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m4_75 -> m4_83  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m4_75 -> m4_110  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m4_76 -> m4_77  [key=0, style=solid];
m4_76 -> m4_87  [key=2, style=dotted];
m4_76 -> m4_81  [key=1, style=dashed, color=darkseagreen4, label=states];
m4_76 -> m4_107  [key=1, style=dashed, color=darkseagreen4, label=states];
m4_76 -> m4_83  [key=1, style=dashed, color=darkseagreen4, label=states];
m4_76 -> m4_110  [key=1, style=dashed, color=darkseagreen4, label=states];
m4_80 -> m4_81  [key=0, style=solid];
m4_80 -> m4_89  [key=2, style=dotted];
m4_80 -> m4_94  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_80 -> m4_99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_100 -> m4_101  [key=0, style=solid];
m4_100 -> m4_102  [key=2, style=dotted];
m4_110 -> m4_111  [key=0, style=solid];
m4_110 -> m4_112  [key=2, style=dotted];
m4_110 -> m4_113  [key=2, style=dotted];
m4_110 -> m4_114  [key=2, style=dotted];
m4_110 -> m4_115  [key=2, style=dotted];
m4_110 -> m4_62  [key=2, style=dotted];
m4_110 -> m4_63  [key=2, style=dotted];
m4_81 -> m4_78  [key=0, style=solid];
m4_81 -> m4_89  [key=2, style=dotted];
m4_81 -> m4_103  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_81 -> m4_106  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_107 -> m4_108  [key=0, style=solid];
m4_107 -> m4_102  [key=2, style=dotted];
m4_82 -> m4_83  [key=0, style=solid];
m4_82 -> m4_90  [key=2, style=dotted];
m4_79 -> m4_80  [key=0, style=solid];
m4_79 -> m4_95  [key=1, style=dashed, color=darkseagreen4, label=job];
m4_79 -> m4_100  [key=1, style=dashed, color=darkseagreen4, label=job];
m4_79 -> m4_81  [key=1, style=dashed, color=darkseagreen4, label=job];
m4_79 -> m4_104  [key=1, style=dashed, color=darkseagreen4, label=job];
m4_79 -> m4_107  [key=1, style=dashed, color=darkseagreen4, label=job];
m4_95 -> m4_96  [key=0, style=solid];
m4_95 -> m4_97  [key=2, style=dotted];
m4_95 -> m4_98  [key=2, style=dotted];
m4_104 -> m4_105  [key=0, style=solid];
m4_104 -> m4_97  [key=2, style=dotted];
m4_104 -> m4_98  [key=2, style=dotted];
m4_94 -> m4_95  [key=0, style=solid];
m4_99 -> m4_100  [key=0, style=solid];
m4_103 -> m4_104  [key=0, style=solid];
m4_106 -> m4_107  [key=0, style=solid];
m4_84 -> m4_71  [key=0, style=bold, color=blue];
m4_109 -> m4_110  [key=0, style=solid];
m4_96 -> m4_94  [key=0, style=bold, color=blue];
m4_101 -> m4_99  [key=0, style=bold, color=blue];
m4_105 -> m4_103  [key=0, style=bold, color=blue];
m4_108 -> m4_106  [key=0, style=bold, color=blue];
m4_111 -> m4_109  [key=0, style=bold, color=blue];
m4_119 -> m4_120  [key=0, style=solid];
m4_120 -> m4_121  [key=0, style=solid];
m4_120 -> m4_122  [key=2, style=dotted];
m4_121 -> m4_119  [key=0, style=bold, color=blue];
m4_126 -> m4_127  [key=0, style=solid];
m4_127 -> m4_128  [key=0, style=solid];
m4_127 -> m4_122  [key=2, style=dotted];
m4_128 -> m4_126  [key=0, style=bold, color=blue];
m4_132 -> m4_133  [key=0, style=solid];
m4_132 -> m4_138  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m4_133 -> m4_134  [key=0, style=solid];
m4_133 -> m4_146  [key=2, style=dotted];
m4_133 -> m4_139  [key=1, style=dashed, color=darkseagreen4, label=serverNames];
m4_133 -> m4_144  [key=1, style=dashed, color=darkseagreen4, label=serverNames];
m4_138 -> m4_139  [key=0, style=solid];
m4_138 -> m4_88  [key=2, style=dotted];
m4_138 -> m4_141  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_138 -> m4_142  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_138 -> m4_143  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_134 -> m4_135  [key=0, style=solid];
m4_134 -> m4_136  [key=0, style=solid];
m4_139 -> m4_140  [key=0, style=solid];
m4_139 -> m4_143  [key=0, style=solid];
m4_144 -> m4_145  [key=0, style=solid];
m4_144 -> m4_92  [key=2, style=dotted];
m4_144 -> m4_93  [key=2, style=dotted];
m4_144 -> m4_160  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_135 -> m4_145  [key=0, style=solid];
m4_135 -> m4_86  [key=2, style=dotted];
m4_136 -> m4_137  [key=0, style=solid];
m4_136 -> m4_87  [key=2, style=dotted];
m4_136 -> m4_141  [key=1, style=dashed, color=darkseagreen4, label=servers];
m4_136 -> m4_151  [key=1, style=dashed, color=darkseagreen4, label=servers];
m4_136 -> m4_144  [key=1, style=dashed, color=darkseagreen4, label=servers];
m4_136 -> m4_161  [key=1, style=dashed, color=darkseagreen4, label=servers];
m4_137 -> m4_138  [key=0, style=solid];
m4_137 -> m4_87  [key=2, style=dotted];
m4_137 -> m4_142  [key=1, style=dashed, color=darkseagreen4, label=queues];
m4_137 -> m4_158  [key=1, style=dashed, color=darkseagreen4, label=queues];
m4_137 -> m4_144  [key=1, style=dashed, color=darkseagreen4, label=queues];
m4_137 -> m4_161  [key=1, style=dashed, color=darkseagreen4, label=queues];
m4_141 -> m4_142  [key=0, style=solid];
m4_141 -> m4_89  [key=2, style=dotted];
m4_141 -> m4_147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_141 -> m4_150  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_151 -> m4_152  [key=0, style=solid];
m4_151 -> m4_102  [key=2, style=dotted];
m4_161 -> m4_162  [key=0, style=solid];
m4_161 -> m4_163  [key=2, style=dotted];
m4_161 -> m4_164  [key=2, style=dotted];
m4_161 -> m4_165  [key=2, style=dotted];
m4_161 -> m4_62  [key=2, style=dotted];
m4_142 -> m4_139  [key=0, style=solid];
m4_142 -> m4_89  [key=2, style=dotted];
m4_142 -> m4_153  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_142 -> m4_157  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_158 -> m4_159  [key=0, style=solid];
m4_158 -> m4_102  [key=2, style=dotted];
m4_143 -> m4_144  [key=0, style=solid];
m4_143 -> m4_90  [key=2, style=dotted];
m4_140 -> m4_141  [key=0, style=solid];
m4_140 -> m4_148  [key=1, style=dashed, color=darkseagreen4, label=name];
m4_140 -> m4_151  [key=1, style=dashed, color=darkseagreen4, label=name];
m4_140 -> m4_142  [key=1, style=dashed, color=darkseagreen4, label=name];
m4_140 -> m4_154  [key=1, style=dashed, color=darkseagreen4, label=name];
m4_140 -> m4_158  [key=1, style=dashed, color=darkseagreen4, label=name];
m4_148 -> m4_149  [key=0, style=solid];
m4_148 -> m4_97  [key=2, style=dotted];
m4_148 -> m4_98  [key=2, style=dotted];
m4_154 -> m4_155  [key=0, style=solid];
m4_154 -> m4_97  [key=2, style=dotted];
m4_154 -> m4_156  [key=2, style=dotted];
m4_147 -> m4_148  [key=0, style=solid];
m4_150 -> m4_151  [key=0, style=solid];
m4_153 -> m4_154  [key=0, style=solid];
m4_157 -> m4_158  [key=0, style=solid];
m4_145 -> m4_132  [key=0, style=bold, color=blue];
m4_160 -> m4_161  [key=0, style=solid];
m4_149 -> m4_147  [key=0, style=bold, color=blue];
m4_152 -> m4_150  [key=0, style=bold, color=blue];
m4_155 -> m4_153  [key=0, style=bold, color=blue];
m4_159 -> m4_157  [key=0, style=bold, color=blue];
m4_162 -> m4_160  [key=0, style=bold, color=blue];
m4_170 -> m4_171  [key=0, style=solid];
m4_170 -> m4_173  [key=2, style=dotted];
m4_169 -> m4_170  [key=0, style=solid];
m4_169 -> m4_171  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m4_171 -> m4_172  [key=0, style=solid];
m4_171 -> m4_55  [key=2, style=dotted];
m4_171 -> m4_174  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_172 -> m4_169  [key=0, style=bold, color=blue];
m4_174 -> m4_175  [key=0, style=solid];
m4_175 -> m4_176  [key=0, style=solid];
m4_175 -> m4_177  [key=2, style=dotted];
m4_175 -> m4_62  [key=2, style=dotted];
m4_175 -> m4_63  [key=2, style=dotted];
m4_176 -> m4_174  [key=0, style=bold, color=blue];
m4_182 -> m4_183  [key=0, style=solid];
m4_182 -> m4_185  [key=2, style=dotted];
m4_181 -> m4_182  [key=0, style=solid];
m4_181 -> m4_183  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m4_183 -> m4_184  [key=0, style=solid];
m4_183 -> m4_55  [key=2, style=dotted];
m4_183 -> m4_186  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_184 -> m4_181  [key=0, style=bold, color=blue];
m4_186 -> m4_187  [key=0, style=solid];
m4_187 -> m4_188  [key=0, style=solid];
m4_187 -> m4_189  [key=2, style=dotted];
m4_187 -> m4_62  [key=2, style=dotted];
m4_187 -> m4_190  [key=2, style=dotted];
m4_187 -> m4_63  [key=2, style=dotted];
m4_188 -> m4_186  [key=0, style=bold, color=blue];
m4_195 -> m4_196  [key=0, style=solid];
m4_195 -> m4_185  [key=2, style=dotted];
m4_194 -> m4_195  [key=0, style=solid];
m4_194 -> m4_196  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m4_196 -> m4_197  [key=0, style=solid];
m4_196 -> m4_55  [key=2, style=dotted];
m4_196 -> m4_198  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_197 -> m4_194  [key=0, style=bold, color=blue];
m4_198 -> m4_199  [key=0, style=solid];
m4_199 -> m4_200  [key=0, style=solid];
m4_199 -> m4_201  [key=2, style=dotted];
m4_199 -> m4_62  [key=2, style=dotted];
m4_199 -> m4_63  [key=2, style=dotted];
m4_200 -> m4_198  [key=0, style=bold, color=blue];
m4_205 -> m4_206  [key=0, style=solid];
m4_205 -> m4_212  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m4_205 -> m4_217  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m4_206 -> m4_207  [key=0, style=solid];
m4_206 -> m4_146  [key=2, style=dotted];
m4_206 -> m4_208  [key=1, style=dashed, color=darkseagreen4, label=queues];
m4_212 -> m4_213  [key=0, style=solid];
m4_212 -> m4_88  [key=2, style=dotted];
m4_212 -> m4_214  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_212 -> m4_215  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_212 -> m4_216  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_217 -> m4_218  [key=0, style=solid];
m4_217 -> m4_222  [key=2, style=dotted];
m4_217 -> m4_243  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_207 -> m4_208  [key=0, style=solid];
m4_207 -> m4_221  [key=2, style=dotted];
m4_207 -> m4_218  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_207 -> m4_219  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_208 -> m4_209  [key=0, style=solid];
m4_208 -> m4_219  [key=0, style=solid];
m4_208 -> m4_213  [key=1, style=dashed, color=darkseagreen4, label=queue];
m4_208 -> m4_226  [key=1, style=dashed, color=darkseagreen4, label=queue];
m4_208 -> m4_214  [key=1, style=dashed, color=darkseagreen4, label=queue];
m4_208 -> m4_232  [key=1, style=dashed, color=darkseagreen4, label=queue];
m4_208 -> m4_215  [key=1, style=dashed, color=darkseagreen4, label=queue];
m4_208 -> m4_238  [key=1, style=dashed, color=darkseagreen4, label=queue];
m4_208 -> m4_218  [key=1, style=dashed, color=darkseagreen4, label=queue];
m4_218 -> m4_208  [key=0, style=solid];
m4_218 -> m4_223  [key=2, style=dotted];
m4_218 -> m4_224  [key=2, style=dotted];
m4_219 -> m4_220  [key=0, style=solid];
m4_209 -> m4_210  [key=0, style=solid];
m4_213 -> m4_214  [key=0, style=solid];
m4_213 -> m4_89  [key=2, style=dotted];
m4_213 -> m4_225  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_213 -> m4_228  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_213 -> m4_217  [key=1, style=dashed, color=darkseagreen4, label=firstJobIds];
m4_226 -> m4_227  [key=0, style=solid];
m4_226 -> m4_97  [key=2, style=dotted];
m4_226 -> m4_185  [key=2, style=dotted];
m4_214 -> m4_215  [key=0, style=solid];
m4_214 -> m4_89  [key=2, style=dotted];
m4_214 -> m4_231  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_214 -> m4_234  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_214 -> m4_218  [key=1, style=dashed, color=darkseagreen4, label=length];
m4_232 -> m4_233  [key=0, style=solid];
m4_232 -> m4_97  [key=2, style=dotted];
m4_232 -> m4_21  [key=2, style=dotted];
m4_215 -> m4_216  [key=0, style=solid];
m4_215 -> m4_89  [key=2, style=dotted];
m4_215 -> m4_237  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_215 -> m4_240  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_215 -> m4_218  [key=1, style=dashed, color=darkseagreen4, label=fetched];
m4_238 -> m4_239  [key=0, style=solid];
m4_238 -> m4_97  [key=2, style=dotted];
m4_238 -> m4_21  [key=2, style=dotted];
m4_210 -> m4_211  [key=0, style=solid];
m4_211 -> m4_212  [key=0, style=solid];
m4_216 -> m4_217  [key=0, style=solid];
m4_216 -> m4_90  [key=2, style=dotted];
m4_225 -> m4_226  [key=0, style=solid];
m4_228 -> m4_229  [key=0, style=solid];
m4_231 -> m4_232  [key=0, style=solid];
m4_234 -> m4_235  [key=0, style=solid];
m4_237 -> m4_238  [key=0, style=solid];
m4_240 -> m4_241  [key=0, style=solid];
m4_243 -> m4_244  [key=0, style=solid];
m4_220 -> m4_205  [key=0, style=bold, color=blue];
m4_227 -> m4_225  [key=0, style=bold, color=blue];
m4_229 -> m4_230  [key=0, style=solid];
m4_230 -> m4_228  [key=0, style=bold, color=blue];
m4_233 -> m4_231  [key=0, style=bold, color=blue];
m4_235 -> m4_236  [key=0, style=solid];
m4_236 -> m4_234  [key=0, style=bold, color=blue];
m4_239 -> m4_237  [key=0, style=bold, color=blue];
m4_241 -> m4_242  [key=0, style=solid];
m4_242 -> m4_240  [key=0, style=bold, color=blue];
m4_244 -> m4_245  [key=0, style=solid];
m4_244 -> m4_246  [key=2, style=dotted];
m4_244 -> m4_62  [key=2, style=dotted];
m4_244 -> m4_63  [key=2, style=dotted];
m4_245 -> m4_243  [key=0, style=bold, color=blue];
m4_251 -> m4_252  [key=0, style=solid];
m4_251 -> m4_20  [key=2, style=dotted];
m4_251 -> m4_185  [key=2, style=dotted];
m4_250 -> m4_251  [key=0, style=solid];
m4_250 -> m4_252  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m4_252 -> m4_253  [key=0, style=solid];
m4_252 -> m4_55  [key=2, style=dotted];
m4_252 -> m4_254  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_253 -> m4_250  [key=0, style=bold, color=blue];
m4_254 -> m4_255  [key=0, style=solid];
m4_255 -> m4_256  [key=0, style=solid];
m4_255 -> m4_246  [key=2, style=dotted];
m4_255 -> m4_62  [key=2, style=dotted];
m4_255 -> m4_63  [key=2, style=dotted];
m4_256 -> m4_254  [key=0, style=bold, color=blue];
m4_261 -> m4_262  [key=0, style=solid];
m4_261 -> m4_20  [key=2, style=dotted];
m4_261 -> m4_185  [key=2, style=dotted];
m4_260 -> m4_261  [key=0, style=solid];
m4_260 -> m4_262  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m4_262 -> m4_263  [key=0, style=solid];
m4_262 -> m4_55  [key=2, style=dotted];
m4_262 -> m4_264  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_263 -> m4_260  [key=0, style=bold, color=blue];
m4_264 -> m4_265  [key=0, style=solid];
m4_265 -> m4_266  [key=0, style=solid];
m4_265 -> m4_267  [key=2, style=dotted];
m4_265 -> m4_62  [key=2, style=dotted];
m4_266 -> m4_264  [key=0, style=bold, color=blue];
m4_271 -> m4_272  [key=0, style=solid];
m4_272 -> m4_273  [key=0, style=solid];
m4_272 -> m4_274  [key=2, style=dotted];
m4_273 -> m4_271  [key=0, style=bold, color=blue];
m4_278 -> m4_279  [key=0, style=solid];
m4_279 -> m4_280  [key=0, style=solid];
m4_279 -> m4_274  [key=2, style=dotted];
m4_280 -> m4_278  [key=0, style=bold, color=blue];
m4_285 -> m4_286  [key=0, style=solid];
m4_285 -> m4_20  [key=2, style=dotted];
m4_285 -> m4_306  [key=2, style=dotted];
m4_285 -> m4_300  [key=1, style=dashed, color=darkseagreen4, label=job];
m4_285 -> m4_301  [key=1, style=dashed, color=darkseagreen4, label=job];
m4_285 -> m4_302  [key=1, style=dashed, color=darkseagreen4, label=job];
m4_285 -> m4_303  [key=1, style=dashed, color=darkseagreen4, label=job];
m4_285 -> m4_304  [key=1, style=dashed, color=darkseagreen4, label=job];
m4_289 -> m4_290  [key=0, style=solid];
m4_289 -> m4_20  [key=2, style=dotted];
m4_289 -> m4_156  [key=2, style=dotted];
m4_284 -> m4_285  [key=0, style=solid];
m4_284 -> m4_289  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m4_286 -> m4_287  [key=0, style=solid];
m4_286 -> m4_288  [key=0, style=solid];
m4_300 -> m4_301  [key=0, style=solid];
m4_300 -> m4_302  [key=0, style=solid];
m4_300 -> m4_309  [key=2, style=dotted];
m4_301 -> m4_302  [key=0, style=solid];
m4_301 -> m4_102  [key=2, style=dotted];
m4_302 -> m4_303  [key=0, style=solid];
m4_302 -> m4_304  [key=0, style=solid];
m4_302 -> m4_309  [key=2, style=dotted];
m4_303 -> m4_304  [key=0, style=solid];
m4_303 -> m4_102  [key=2, style=dotted];
m4_304 -> m4_305  [key=0, style=solid];
m4_304 -> m4_313  [key=2, style=dotted];
m4_304 -> m4_314  [key=2, style=dotted];
m4_304 -> m4_309  [key=2, style=dotted];
m4_304 -> m4_310  [key=2, style=dotted];
m4_304 -> m4_315  [key=2, style=dotted];
m4_304 -> m4_316  [key=2, style=dotted];
m4_304 -> m4_317  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_304 -> m4_321  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_304 -> m4_324  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_287 -> m4_305  [key=0, style=solid];
m4_288 -> m4_289  [key=0, style=solid];
m4_288 -> m4_304  [key=1, style=dashed, color=darkseagreen4, label=hiddenProperties];
m4_288 -> m4_318  [key=1, style=dashed, color=darkseagreen4, label=hiddenProperties];
m4_318 -> m4_319  [key=0, style=solid];
m4_318 -> m4_320  [key=2, style=dotted];
m4_290 -> m4_291  [key=0, style=solid];
m4_290 -> m4_92  [key=2, style=dotted];
m4_290 -> m4_93  [key=2, style=dotted];
m4_290 -> m4_292  [key=1, style=dashed, color=darkseagreen4, label=history];
m4_291 -> m4_292  [key=0, style=solid];
m4_291 -> m4_307  [key=2, style=dotted];
m4_291 -> m4_299  [key=1, style=dashed, color=darkseagreen4, label=stateHistory];
m4_291 -> m4_304  [key=1, style=dashed, color=darkseagreen4, label=stateHistory];
m4_292 -> m4_293  [key=0, style=solid];
m4_292 -> m4_300  [key=0, style=solid];
m4_292 -> m4_294  [key=1, style=dashed, color=darkseagreen4, label=entry];
m4_299 -> m4_292  [key=0, style=solid];
m4_299 -> m4_224  [key=2, style=dotted];
m4_293 -> m4_294  [key=0, style=solid];
m4_293 -> m4_308  [key=2, style=dotted];
m4_293 -> m4_309  [key=2, style=dotted];
m4_293 -> m4_310  [key=2, style=dotted];
m4_293 -> m4_298  [key=1, style=dashed, color=darkseagreen4, label=dto];
m4_293 -> m4_299  [key=1, style=dashed, color=darkseagreen4, label=dto];
m4_294 -> m4_295  [key=0, style=solid];
m4_294 -> m4_311  [key=2, style=dotted];
m4_294 -> m4_296  [key=1, style=dashed, color=darkseagreen4, label=stateData];
m4_294 -> m4_297  [key=1, style=dashed, color=darkseagreen4, label=stateData];
m4_294 -> m4_298  [key=1, style=dashed, color=darkseagreen4, label=stateData];
m4_298 -> m4_299  [key=0, style=solid];
m4_295 -> m4_296  [key=0, style=solid];
m4_295 -> m4_312  [key=2, style=dotted];
m4_296 -> m4_297  [key=0, style=solid];
m4_296 -> m4_312  [key=2, style=dotted];
m4_297 -> m4_298  [key=0, style=solid];
m4_297 -> m4_312  [key=2, style=dotted];
m4_305 -> m4_284  [key=0, style=bold, color=blue];
m4_317 -> m4_318  [key=0, style=solid];
m4_321 -> m4_322  [key=0, style=solid];
m4_324 -> m4_325  [key=0, style=solid];
m4_319 -> m4_317  [key=0, style=bold, color=blue];
m4_322 -> m4_323  [key=0, style=solid];
m4_323 -> m4_321  [key=0, style=bold, color=blue];
m4_325 -> m4_326  [key=0, style=solid];
m4_326 -> m4_324  [key=0, style=bold, color=blue];
m4_352 -> m4_353  [key=0, style=solid];
m4_352 -> m4_354  [key=2, style=dotted];
m4_352 -> m4_355  [key=2, style=dotted];
m4_351 -> m4_352  [key=0, style=solid];
m4_353 -> m4_351  [key=0, style=bold, color=blue];
m4_380 -> m4_381  [key=0, style=solid];
m4_380 -> m4_97  [key=2, style=dotted];
m4_376 -> m4_377  [key=0, style=solid];
m4_379 -> m4_380  [key=0, style=solid];
m4_377 -> m4_378  [key=0, style=solid];
m4_377 -> m4_354  [key=2, style=dotted];
m4_378 -> m4_376  [key=0, style=bold, color=blue];
m4_381 -> m4_379  [key=0, style=bold, color=blue];
m4_409 -> m4_410  [key=0, style=solid];
m4_409 -> m4_20  [key=2, style=dotted];
m4_409 -> m4_98  [key=2, style=dotted];
m4_419 -> m4_420  [key=0, style=solid];
m4_419 -> m4_421  [key=2, style=dotted];
m4_419 -> m4_422  [key=2, style=dotted];
m4_419 -> m4_423  [key=2, style=dotted];
m4_419 -> m4_424  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_404 -> m4_405  [key=0, style=solid];
m4_404 -> m4_406  [key=0, style=solid];
m4_404 -> m4_407  [key=2, style=dotted];
m4_405 -> m4_406  [key=0, style=solid];
m4_405 -> m4_102  [key=2, style=dotted];
m4_416 -> m4_417  [key=0, style=solid];
m4_416 -> m4_115  [key=2, style=dotted];
m4_416 -> m4_407  [key=2, style=dotted];
m4_412 -> m4_413  [key=0, style=solid];
m4_412 -> m4_414  [key=0, style=solid];
m4_412 -> m4_407  [key=2, style=dotted];
m4_413 -> m4_414  [key=0, style=solid];
m4_413 -> m4_102  [key=2, style=dotted];
m4_399 -> m4_400  [key=0, style=solid];
m4_399 -> m4_20  [key=2, style=dotted];
m4_399 -> m4_401  [key=2, style=dotted];
m4_399 -> m4_402  [key=2, style=dotted];
m4_399 -> m4_98  [key=2, style=dotted];
m4_398 -> m4_399  [key=0, style=solid];
m4_403 -> m4_404  [key=0, style=solid];
m4_403 -> m4_405  [key=1, style=dashed, color=darkseagreen4, label="?"];
m4_408 -> m4_409  [key=0, style=solid];
m4_411 -> m4_412  [key=0, style=solid];
m4_411 -> m4_413  [key=1, style=dashed, color=darkseagreen4, label="?"];
m4_415 -> m4_416  [key=0, style=solid];
m4_418 -> m4_419  [key=0, style=solid];
m4_400 -> m4_398  [key=0, style=bold, color=blue];
m4_406 -> m4_403  [key=0, style=bold, color=blue];
m4_410 -> m4_408  [key=0, style=bold, color=blue];
m4_414 -> m4_411  [key=0, style=bold, color=blue];
m4_417 -> m4_415  [key=0, style=bold, color=blue];
m4_420 -> m4_418  [key=0, style=bold, color=blue];
m4_424 -> m4_425  [key=0, style=solid];
m4_425 -> m4_426  [key=0, style=solid];
m4_426 -> m4_424  [key=0, style=bold, color=blue];
m4_430 -> m4_431  [key=0, style=solid];
m4_431 -> m4_432  [key=0, style=solid];
m4_431 -> m4_21  [key=2, style=dotted];
m4_432 -> m4_430  [key=0, style=bold, color=blue];
m4_436 -> m4_437  [key=0, style=solid];
m4_436 -> m4_438  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m4_436 -> m4_439  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m4_437 -> m4_438  [key=0, style=solid];
m4_437 -> m4_454  [key=2, style=dotted];
m4_437 -> m4_440  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_437 -> m4_460  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_437 -> m4_441  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_437 -> m4_466  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_437 -> m4_442  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_437 -> m4_472  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_437 -> m4_443  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_437 -> m4_478  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_437 -> m4_444  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_437 -> m4_485  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_437 -> m4_445  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_437 -> m4_492  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_437 -> m4_446  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_437 -> m4_498  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_437 -> m4_447  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_437 -> m4_504  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_437 -> m4_450  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_437 -> m4_510  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_437 -> m4_452  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_438 -> m4_439  [key=0, style=solid];
m4_438 -> m4_146  [key=2, style=dotted];
m4_438 -> m4_448  [key=1, style=dashed, color=darkseagreen4, label=queues];
m4_439 -> m4_440  [key=0, style=solid];
m4_439 -> m4_88  [key=2, style=dotted];
m4_439 -> m4_441  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_439 -> m4_442  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_439 -> m4_443  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_439 -> m4_444  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_439 -> m4_445  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_439 -> m4_446  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_439 -> m4_447  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_439 -> m4_450  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_439 -> m4_451  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m4_440 -> m4_441  [key=0, style=solid];
m4_440 -> m4_89  [key=2, style=dotted];
m4_440 -> m4_455  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_440 -> m4_459  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_460 -> m4_461  [key=0, style=solid];
m4_441 -> m4_442  [key=0, style=solid];
m4_441 -> m4_89  [key=2, style=dotted];
m4_441 -> m4_462  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_441 -> m4_465  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_466 -> m4_467  [key=0, style=solid];
m4_442 -> m4_443  [key=0, style=solid];
m4_442 -> m4_89  [key=2, style=dotted];
m4_442 -> m4_468  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_442 -> m4_471  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_472 -> m4_473  [key=0, style=solid];
m4_443 -> m4_444  [key=0, style=solid];
m4_443 -> m4_89  [key=2, style=dotted];
m4_443 -> m4_474  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_443 -> m4_477  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_478 -> m4_479  [key=0, style=solid];
m4_444 -> m4_445  [key=0, style=solid];
m4_444 -> m4_89  [key=2, style=dotted];
m4_444 -> m4_480  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_444 -> m4_484  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_485 -> m4_486  [key=0, style=solid];
m4_485 -> m4_487  [key=2, style=dotted];
m4_445 -> m4_446  [key=0, style=solid];
m4_445 -> m4_89  [key=2, style=dotted];
m4_445 -> m4_488  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_445 -> m4_491  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_492 -> m4_493  [key=0, style=solid];
m4_446 -> m4_447  [key=0, style=solid];
m4_446 -> m4_89  [key=2, style=dotted];
m4_446 -> m4_494  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_446 -> m4_497  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_498 -> m4_499  [key=0, style=solid];
m4_498 -> m4_487  [key=2, style=dotted];
m4_447 -> m4_448  [key=0, style=solid];
m4_447 -> m4_89  [key=2, style=dotted];
m4_447 -> m4_500  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_447 -> m4_503  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_504 -> m4_505  [key=0, style=solid];
m4_450 -> m4_448  [key=0, style=solid];
m4_450 -> m4_89  [key=2, style=dotted];
m4_450 -> m4_506  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_450 -> m4_509  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_510 -> m4_511  [key=0, style=solid];
m4_452 -> m4_453  [key=0, style=solid];
m4_448 -> m4_449  [key=0, style=solid];
m4_448 -> m4_451  [key=0, style=solid];
m4_451 -> m4_452  [key=0, style=solid];
m4_451 -> m4_90  [key=2, style=dotted];
m4_455 -> m4_456  [key=0, style=solid];
m4_459 -> m4_460  [key=0, style=solid];
m4_462 -> m4_463  [key=0, style=solid];
m4_465 -> m4_466  [key=0, style=solid];
m4_468 -> m4_469  [key=0, style=solid];
m4_471 -> m4_472  [key=0, style=solid];
m4_474 -> m4_475  [key=0, style=solid];
m4_477 -> m4_478  [key=0, style=solid];
m4_480 -> m4_481  [key=0, style=solid];
m4_484 -> m4_485  [key=0, style=solid];
m4_488 -> m4_489  [key=0, style=solid];
m4_491 -> m4_492  [key=0, style=solid];
m4_494 -> m4_495  [key=0, style=solid];
m4_497 -> m4_498  [key=0, style=solid];
m4_500 -> m4_501  [key=0, style=solid];
m4_503 -> m4_504  [key=0, style=solid];
m4_449 -> m4_450  [key=0, style=solid];
m4_449 -> m4_507  [key=1, style=dashed, color=darkseagreen4, label=queueName];
m4_507 -> m4_508  [key=0, style=solid];
m4_507 -> m4_97  [key=2, style=dotted];
m4_507 -> m4_21  [key=2, style=dotted];
m4_506 -> m4_507  [key=0, style=solid];
m4_509 -> m4_510  [key=0, style=solid];
m4_453 -> m4_436  [key=0, style=bold, color=blue];
m4_456 -> m4_457  [key=0, style=solid];
m4_456 -> m4_458  [key=2, style=dotted];
m4_457 -> m4_455  [key=0, style=bold, color=blue];
m4_461 -> m4_459  [key=0, style=bold, color=blue];
m4_463 -> m4_464  [key=0, style=solid];
m4_463 -> m4_458  [key=2, style=dotted];
m4_464 -> m4_462  [key=0, style=bold, color=blue];
m4_467 -> m4_465  [key=0, style=bold, color=blue];
m4_469 -> m4_470  [key=0, style=solid];
m4_469 -> m4_13  [key=2, style=dotted];
m4_470 -> m4_468  [key=0, style=bold, color=blue];
m4_473 -> m4_471  [key=0, style=bold, color=blue];
m4_475 -> m4_476  [key=0, style=solid];
m4_475 -> m4_13  [key=2, style=dotted];
m4_476 -> m4_474  [key=0, style=bold, color=blue];
m4_479 -> m4_477  [key=0, style=bold, color=blue];
m4_481 -> m4_482  [key=0, style=solid];
m4_481 -> m4_483  [key=2, style=dotted];
m4_482 -> m4_480  [key=0, style=bold, color=blue];
m4_486 -> m4_484  [key=0, style=bold, color=blue];
m4_489 -> m4_490  [key=0, style=solid];
m4_489 -> m4_13  [key=2, style=dotted];
m4_490 -> m4_488  [key=0, style=bold, color=blue];
m4_493 -> m4_491  [key=0, style=bold, color=blue];
m4_495 -> m4_496  [key=0, style=solid];
m4_495 -> m4_483  [key=2, style=dotted];
m4_496 -> m4_494  [key=0, style=bold, color=blue];
m4_499 -> m4_497  [key=0, style=bold, color=blue];
m4_501 -> m4_502  [key=0, style=solid];
m4_501 -> m4_13  [key=2, style=dotted];
m4_502 -> m4_500  [key=0, style=bold, color=blue];
m4_505 -> m4_503  [key=0, style=bold, color=blue];
m4_508 -> m4_506  [key=0, style=bold, color=blue];
m4_511 -> m4_509  [key=0, style=bold, color=blue];
m4_115 -> m4_517  [key=0, style=solid];
m4_517 -> m4_520  [key=0, style=solid];
m4_517 -> m4_521  [key=2, style=dotted];
m4_517 -> m4_522  [key=2, style=dotted];
m4_518 -> m4_519  [key=0, style=solid];
m4_519 -> m4_520  [key=0, style=solid];
m4_520 -> m4_115  [key=0, style=bold, color=blue];
m4_35 -> m4_36  [key=0, style=solid];
m4_35 -> m4_9  [key=2, style=dotted];
m4_35 -> m4_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_166 -> m4_167  [key=0, style=solid];
m4_166 -> m4_170  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_167 -> m4_168  [key=0, style=solid];
m4_167 -> m4_9  [key=2, style=dotted];
m4_167 -> m4_169  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_168 -> m4_166  [key=0, style=bold, color=blue];
m4_129 -> m4_130  [key=0, style=solid];
m4_130 -> m4_131  [key=0, style=solid];
m4_130 -> m4_70  [key=2, style=dotted];
m4_130 -> m4_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_131 -> m4_129  [key=0, style=bold, color=blue];
m4_40 -> m4_41  [key=0, style=solid];
m4_42 -> m4_40  [key=0, style=bold, color=blue];
m4_42 -> m4_44  [key=0, style=solid];
m4_42 -> m4_43  [key=0, style=solid];
m4_178 -> m4_179  [key=0, style=solid];
m4_178 -> m4_182  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_179 -> m4_180  [key=0, style=solid];
m4_179 -> m4_9  [key=2, style=dotted];
m4_179 -> m4_181  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_180 -> m4_178  [key=0, style=bold, color=blue];
m4_116 -> m4_117  [key=0, style=solid];
m4_117 -> m4_118  [key=0, style=solid];
m4_117 -> m4_9  [key=2, style=dotted];
m4_117 -> m4_119  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_118 -> m4_116  [key=0, style=bold, color=blue];
m4_46 -> m4_47  [key=0, style=solid];
m4_46 -> m4_50  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_46 -> m4_23  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m4_47 -> m4_48  [key=0, style=solid];
m4_47 -> m4_9  [key=2, style=dotted];
m4_47 -> m4_49  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_48 -> m4_46  [key=0, style=bold, color=blue];
m4_13 -> m4_16  [key=1, style=dashed, color=green, label="Hangfire.Server.ILongRunningProcess"];
m4_13 -> m4_14  [key=0, style=solid];
m4_13 -> m4_18  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ILongRunningProcess"];
m4_13 -> m4_23  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ILongRunningProcess"];
m4_36 -> m4_34  [key=0, style=bold, color=blue];
m4_36 -> m4_42  [key=0, style=solid];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_8  [key=1, style=dashed, color=darkseagreen4, label=component];
m4_8 -> m4_9  [key=0, style=solid];
m4_8 -> m4_12  [key=2, style=dotted];
m4_8 -> m4_6  [key=0, style=bold, color=blue];
m4_7 -> m4_9  [key=0, style=solid];
m4_7 -> m4_8  [key=0, style=solid];
m4_7 -> m4_10  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_268 -> m4_269  [key=0, style=solid];
m4_269 -> m4_270  [key=0, style=solid];
m4_269 -> m4_9  [key=2, style=dotted];
m4_269 -> m4_271  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_270 -> m4_268  [key=0, style=bold, color=blue];
m4_123 -> m4_124  [key=0, style=solid];
m4_124 -> m4_125  [key=0, style=solid];
m4_124 -> m4_9  [key=2, style=dotted];
m4_124 -> m4_126  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_125 -> m4_123  [key=0, style=bold, color=blue];
m4_202 -> m4_203  [key=0, style=solid];
m4_203 -> m4_204  [key=0, style=solid];
m4_203 -> m4_70  [key=2, style=dotted];
m4_203 -> m4_205  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_204 -> m4_202  [key=0, style=bold, color=blue];
m4_67 -> m4_68  [key=0, style=solid];
m4_67 -> m4_72  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_68 -> m4_69  [key=0, style=solid];
m4_68 -> m4_70  [key=2, style=dotted];
m4_68 -> m4_71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_69 -> m4_67  [key=0, style=bold, color=blue];
m4_16 -> m4_17  [key=0, style=solid, color=green];
m4_16 -> m4_18  [key=0, style=solid, color=green];
m4_16 -> m4_14  [key=0, style=bold, color=blue];
m4_14 -> m4_16  [key=0, style=solid, color=green];
m4_14 -> m4_15  [key=0, style=solid];
m4_14 -> m4_18  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_15 -> m4_19  [key=0, style=solid];
m4_15 -> m4_20  [key=2, style=dotted];
m4_15 -> m4_16  [key=0, style=solid];
m4_15 -> m4_9  [key=2, style=dotted];
m4_15 -> m4_17  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_523 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_23  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_29  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_35  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_47  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_51  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_68  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_117  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_120  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_124  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_127  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_130  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_167  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_171  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_179  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_183  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_192  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_196  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_203  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_217  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_248  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_252  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_258  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_262  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_269  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_272  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_276  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_279  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_282  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_304  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_428  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_434  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_523 -> m4_512  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m4_524 -> m4_18  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_525 -> m4_26  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_526 -> m4_50  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_527 -> m4_50  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_528 -> m4_72  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_529 -> m4_72  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_530 -> m4_95  [key=1, style=dashed, color=darkseagreen4, label=job];
m4_530 -> m4_100  [key=1, style=dashed, color=darkseagreen4, label=job];
m4_530 -> m4_104  [key=1, style=dashed, color=darkseagreen4, label=job];
m4_530 -> m4_107  [key=1, style=dashed, color=darkseagreen4, label=job];
m4_531 -> m4_100  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m4_531 -> m4_110  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m4_532 -> m4_107  [key=1, style=dashed, color=darkseagreen4, label=states];
m4_532 -> m4_110  [key=1, style=dashed, color=darkseagreen4, label=states];
m4_533 -> m4_148  [key=1, style=dashed, color=darkseagreen4, label=name];
m4_533 -> m4_151  [key=1, style=dashed, color=darkseagreen4, label=name];
m4_533 -> m4_154  [key=1, style=dashed, color=darkseagreen4, label=name];
m4_533 -> m4_158  [key=1, style=dashed, color=darkseagreen4, label=name];
m4_534 -> m4_151  [key=1, style=dashed, color=darkseagreen4, label=servers];
m4_534 -> m4_161  [key=1, style=dashed, color=darkseagreen4, label=servers];
m4_535 -> m4_158  [key=1, style=dashed, color=darkseagreen4, label=queues];
m4_535 -> m4_161  [key=1, style=dashed, color=darkseagreen4, label=queues];
m4_536 -> m4_170  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_537 -> m4_170  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_538 -> m4_182  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_539 -> m4_182  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_540 -> m4_195  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_541 -> m4_195  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_542 -> m4_226  [key=1, style=dashed, color=darkseagreen4, label=queue];
m4_542 -> m4_232  [key=1, style=dashed, color=darkseagreen4, label=queue];
m4_542 -> m4_238  [key=1, style=dashed, color=darkseagreen4, label=queue];
m4_543 -> m4_251  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_544 -> m4_251  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_545 -> m4_251  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_546 -> m4_261  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_547 -> m4_261  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_548 -> m4_261  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_549 -> m4_285  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_549 -> m4_289  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_550 -> m4_318  [key=1, style=dashed, color=darkseagreen4, label=hiddenProperties];
m4_551 -> m4_352  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_552 -> m4_380  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_553 -> m4_399  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m4_553 -> m4_416  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m4_554 -> m4_399  [key=1, style=dashed, color=darkseagreen4, label=id];
m4_554 -> m4_404  [key=1, style=dashed, color=darkseagreen4, label=id];
m4_554 -> m4_405  [key=1, style=dashed, color=darkseagreen4, label=id];
m4_554 -> m4_409  [key=1, style=dashed, color=darkseagreen4, label=id];
m4_554 -> m4_412  [key=1, style=dashed, color=darkseagreen4, label=id];
m4_554 -> m4_413  [key=1, style=dashed, color=darkseagreen4, label=id];
m4_555 -> m4_404  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m4_555 -> m4_405  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m4_555 -> m4_416  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m4_556 -> m4_409  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m4_557 -> m4_412  [key=1, style=dashed, color=darkseagreen4, label=states];
m4_557 -> m4_413  [key=1, style=dashed, color=darkseagreen4, label=states];
m4_557 -> m4_416  [key=1, style=dashed, color=darkseagreen4, label=states];
m4_558 -> m4_419  [key=1, style=dashed, color=darkseagreen4, label="System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>"];
m4_559 -> m4_460  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_559 -> m4_466  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_559 -> m4_472  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_559 -> m4_478  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_559 -> m4_485  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_559 -> m4_492  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_559 -> m4_498  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_559 -> m4_504  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_559 -> m4_510  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_560 -> m4_507  [key=1, style=dashed, color=darkseagreen4, label=queueName];
m8_28 -> m8_29  [key=0, style=solid];
m8_28 -> m8_32  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_29 -> m8_9  [key=2, style=dotted];
m8_29 -> m8_30  [key=0, style=solid];
m8_29 -> m8_31  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_30 -> m8_28  [key=0, style=bold, color=blue];
m8_15 -> m8_16  [key=0, style=solid];
m8_15 -> m8_19  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_16 -> m8_9  [key=2, style=dotted];
m8_16 -> m8_17  [key=0, style=solid];
m8_16 -> m8_18  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_17 -> m8_15  [key=0, style=bold, color=blue];
m8_6 -> m8_7  [key=0, style=solid];
m8_6 -> m8_11  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_7 -> m8_9  [key=2, style=dotted];
m8_7 -> m8_8  [key=0, style=solid];
m8_7 -> m8_10  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_8 -> m8_6  [key=0, style=bold, color=blue];
m8_0 -> m8_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m8_0 -> m8_1  [key=0, style=solid];
m8_3 -> m8_4  [key=0, style=solid];
m8_1 -> m8_3  [key=0, style=solid];
m8_1 -> m8_2  [key=0, style=solid];
m8_2 -> m8_4  [key=0, style=solid];
m8_2 -> m8_5  [key=2, style=dotted];
m8_4 -> m8_0  [key=0, style=bold, color=blue];
m8_31 -> m8_32  [key=0, style=solid];
m8_24 -> m8_25  [key=0, style=solid, color=green];
m8_25 -> m8_26  [key=0, style=solid, color=green];
m8_25 -> m8_27  [key=2, style=dotted, color=green];
m8_25 -> m8_14  [key=2, style=dotted, color=green];
m8_26 -> m8_24  [key=0, style=bold, color=blue];
m8_32 -> m8_27  [key=2, style=dotted];
m8_32 -> m8_14  [key=2, style=dotted];
m8_32 -> m8_33  [key=0, style=solid];
m8_11 -> m8_14  [key=2, style=dotted];
m8_11 -> m8_12  [key=0, style=solid];
m8_11 -> m8_13  [key=2, style=dotted];
m8_19 -> m8_14  [key=2, style=dotted];
m8_19 -> m8_20  [key=0, style=solid];
m8_10 -> m8_11  [key=0, style=solid];
m8_18 -> m8_19  [key=0, style=solid];
m8_33 -> m8_31  [key=0, style=bold, color=blue];
m8_12 -> m8_10  [key=0, style=bold, color=blue];
m8_20 -> m8_18  [key=0, style=bold, color=blue];
m8_21 -> m8_22  [key=0, style=solid, color=green];
m8_21 -> m8_25  [key=1, style=dashed, color=green, label=string];
m8_22 -> m8_23  [key=0, style=solid, color=green];
m8_22 -> m8_9  [key=2, style=dotted, color=green];
m8_22 -> m8_24  [key=1, style=dashed, color=green, label="lambda expression"];
m8_23 -> m8_21  [key=0, style=bold, color=blue];
m8_34 -> m8_22  [key=1, style=dashed, color=green, label="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob"];
m8_34 -> m8_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob"];
m8_34 -> m8_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob"];
m8_34 -> m8_16  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob"];
m8_34 -> m8_29  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.DataTypes.SqlServerWriteOnlyJob"];
m8_38 -> m8_25  [key=1, style=dashed, color=green, label=string];
m8_39 -> m8_25  [key=1, style=dashed, color=green, label=string];
m8_40 -> m8_25  [key=1, style=dashed, color=green, label="System.Collections.Generic.Dictionary<string, string>"];
m8_41 -> m8_32  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_42 -> m8_32  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.Dictionary<string, string>"];
m8_35 -> m8_11  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_36 -> m8_11  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m8_37 -> m8_19  [key=1, style=dashed, color=darkseagreen4, label=string];
m9_8 -> m9_9  [key=0, style=solid];
m9_9 -> m9_8  [key=0, style=bold, color=blue];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_0  [key=0, style=bold, color=blue];
m9_10 -> m9_11  [key=0, style=solid];
m9_11 -> m9_10  [key=0, style=bold, color=blue];
m9_4 -> m9_5  [key=0, style=solid];
m9_5 -> m9_4  [key=0, style=bold, color=blue];
m9_2 -> m9_3  [key=0, style=solid];
m9_3 -> m9_2  [key=0, style=bold, color=blue];
m9_12 -> m9_13  [key=0, style=solid];
m9_13 -> m9_12  [key=0, style=bold, color=blue];
m9_6 -> m9_7  [key=0, style=solid];
m9_7 -> m9_6  [key=0, style=bold, color=blue];
m10_26 -> m10_27  [key=0, style=solid];
m10_26 -> m10_32  [key=2, style=dotted];
m10_26 -> m10_33  [key=2, style=dotted];
m10_26 -> m10_46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_84 -> m10_85  [key=0, style=solid];
m10_85 -> m10_86  [key=0, style=solid];
m10_85 -> m10_13  [key=2, style=dotted];
m10_86 -> m10_84  [key=0, style=bold, color=blue];
m10_19 -> m10_73  [key=0, style=solid, color=green];
m10_19 -> m10_20  [key=0, style=solid];
m10_73 -> m10_74  [key=0, style=solid, color=green];
m10_73 -> m10_75  [key=2, style=dotted, color=green];
m10_73 -> m10_49  [key=2, style=dotted];
m10_74 -> m10_19  [key=0, style=bold, color=blue];
m10_74 -> m10_75  [key=0, style=solid];
m10_74 -> m10_23  [key=2, style=dotted];
m10_20 -> m10_21  [key=0, style=solid];
m10_20 -> m10_22  [key=2, style=dotted];
m10_22 -> m10_23  [key=0, style=solid];
m10_22 -> m10_28  [key=2, style=dotted];
m10_22 -> m10_29  [key=2, style=dotted];
m10_22 -> m10_34  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_22 -> m10_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_13 -> m10_14  [key=0, style=solid];
m10_14 -> m10_15  [key=0, style=solid, color=green];
m10_14 -> m10_17  [key=2, style=dotted];
m10_15 -> m10_16  [key=0, style=solid, color=green];
m10_15 -> m10_19  [key=2, style=dotted, color=green];
m10_16 -> m10_13  [key=0, style=bold, color=blue];
m10_16 -> m10_17  [key=0, style=solid, color=green];
m10_72 -> m10_73  [key=0, style=solid];
m10_75 -> m10_76  [key=0, style=solid];
m10_75 -> m10_31  [key=2, style=dotted];
m10_76 -> m10_77  [key=0, style=solid];
m10_76 -> m10_71  [key=2, style=dotted];
m10_76 -> m10_2  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts"];
m10_76 -> m10_15  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts"];
m10_76 -> m10_17  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts"];
m10_76 -> m10_52  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts"];
m10_76 -> m10_57  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts"];
m10_76 -> m10_66  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts"];
m10_76 -> m10_68  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts"];
m10_76 -> m10_73  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts"];
m10_76 -> m10_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts"];
m10_76 -> m10_22  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts"];
m10_76 -> m10_23  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts"];
m10_76 -> m10_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts"];
m10_76 -> m10_25  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts"];
m10_76 -> m10_43  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts"];
m10_76 -> m10_26  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts"];
m10_76 -> m10_47  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts"];
m10_76 -> m10_50  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts"];
m10_76 -> m10_51  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts"];
m10_76 -> m10_53  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts"];
m10_76 -> m10_63  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts"];
m10_77 -> m10_78  [key=0, style=solid];
m10_77 -> m10_36  [key=2, style=dotted];
m10_77 -> m10_43  [key=1, style=dashed, color=darkseagreen4, label=component];
m10_78 -> m10_79  [key=0, style=solid];
m10_78 -> m10_50  [key=2, style=dotted];
m10_78 -> m10_57  [key=1, style=dashed, color=green, label=component];
m10_79 -> m10_80  [key=0, style=solid];
m10_79 -> m10_27  [key=2, style=dotted];
m10_80 -> m10_72  [key=0, style=bold, color=blue];
m10_17 -> m10_18  [key=0, style=solid, color=green];
m10_17 -> m10_20  [key=2, style=dotted, color=green];
m10_18 -> m10_14  [key=0, style=bold, color=blue];
m10_18 -> m10_3  [key=0, style=bold, color=blue];
m10_63 -> m10_64  [key=0, style=solid];
m10_63 -> m10_55  [key=2, style=dotted];
m10_64 -> m10_65  [key=0, style=solid];
m10_64 -> m10_49  [key=2, style=dotted];
m10_64 -> m10_62  [key=0, style=bold, color=blue];
m10_65 -> m10_66  [key=0, style=solid, color=green];
m10_65 -> m10_23  [key=2, style=dotted];
m10_66 -> m10_67  [key=0, style=solid, color=green];
m10_66 -> m10_31  [key=2, style=dotted];
m10_66 -> m10_19  [key=2, style=dotted, color=green];
m10_67 -> m10_68  [key=0, style=solid, color=green];
m10_67 -> m10_71  [key=2, style=dotted];
m10_67 -> m10_70  [key=2, style=dotted, color=green];
m10_68 -> m10_69  [key=0, style=solid, color=green];
m10_68 -> m10_50  [key=2, style=dotted];
m10_68 -> m10_71  [key=2, style=dotted, color=green];
m10_68 -> m10_72  [key=2, style=dotted, color=green];
m10_69 -> m10_70  [key=0, style=solid];
m10_69 -> m10_27  [key=2, style=dotted];
m10_69 -> m10_65  [key=0, style=bold, color=blue];
m10_70 -> m10_63  [key=0, style=bold, color=blue];
m10_36 -> m10_34  [key=0, style=bold, color=blue];
m10_55 -> m10_56  [key=0, style=solid];
m10_55 -> m10_61  [key=2, style=dotted];
m10_55 -> m10_57  [key=1, style=dashed, color=darkseagreen4, label=table1];
m10_55 -> m10_58  [key=1, style=dashed, color=darkseagreen4, label=table1];
m10_41 -> m10_39  [key=0, style=bold, color=blue];
m10_6 -> m10_7  [key=0, style=solid, color=red];
m10_6 -> m10_10  [key=2, style=dotted, color=red];
m10_6 -> m10_11  [key=2, style=dotted, color=red];
m10_7 -> m10_9  [key=2, style=dotted];
m10_7 -> m10_8  [key=0, style=solid];
m10_7 -> m10_10  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_7 -> m10_12  [key=2, style=dotted];
m10_8 -> m10_6  [key=0, style=bold, color=blue];
m10_8 -> m10_4  [key=0, style=bold, color=blue];
m10_21 -> m10_22  [key=0, style=solid];
m10_21 -> m10_19  [key=0, style=bold, color=blue];
m10_23 -> m10_19  [key=2, style=dotted];
m10_23 -> m10_24  [key=0, style=solid, color=red];
m10_23 -> m10_25  [key=1, style=dashed, color=darkseagreen4, label=component];
m10_23 -> m10_43  [key=1, style=dashed, color=darkseagreen4, label=component];
m10_24 -> m10_25  [key=0, style=solid, color=red];
m10_24 -> m10_30  [key=2, style=dotted];
m10_24 -> m10_31  [key=2, style=dotted];
m10_24 -> m10_26  [key=2, style=dotted, color=red];
m10_25 -> m10_9  [key=2, style=dotted];
m10_25 -> m10_26  [key=0, style=solid];
m10_25 -> m10_42  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_25 -> m10_23  [key=0, style=bold, color=blue];
m10_27 -> m10_21  [key=0, style=bold, color=blue];
m10_27 -> m10_28  [key=0, style=solid];
m10_45 -> m10_46  [key=0, style=solid];
m10_45 -> m10_31  [key=2, style=dotted];
m10_42 -> m10_43  [key=0, style=solid];
m10_43 -> m10_44  [key=0, style=solid];
m10_43 -> m10_49  [key=2, style=dotted];
m10_43 -> m10_45  [key=2, style=dotted];
m10_44 -> m10_45  [key=0, style=solid];
m10_44 -> m10_23  [key=2, style=dotted];
m10_44 -> m10_42  [key=0, style=bold, color=blue];
m10_46 -> m10_47  [key=0, style=solid];
m10_46 -> m10_50  [key=2, style=dotted];
m10_47 -> m10_48  [key=0, style=solid];
m10_47 -> m10_27  [key=2, style=dotted];
m10_47 -> m10_37  [key=2, style=dotted];
m10_48 -> m10_42  [key=0, style=bold, color=blue];
m10_48 -> m10_46  [key=0, style=bold, color=blue];
m10_31 -> m10_32  [key=0, style=solid];
m10_32 -> m10_33  [key=0, style=solid];
m10_32 -> m10_35  [key=2, style=dotted];
m10_33 -> m10_34  [key=0, style=solid];
m10_33 -> m10_36  [key=2, style=dotted];
m10_34 -> m10_31  [key=0, style=bold, color=blue];
m10_34 -> m10_35  [key=0, style=solid];
m10_37 -> m10_38  [key=0, style=solid];
m10_38 -> m10_37  [key=0, style=bold, color=blue];
m10_38 -> m10_39  [key=0, style=solid];
m10_0 -> m10_1  [key=0, style=solid, color=red];
m10_2 -> m10_3  [key=0, style=solid, color=green];
m10_2 -> m10_5  [key=2, style=dotted, color=green];
m10_2 -> m10_0  [key=0, style=bold, color=blue];
m10_1 -> m10_2  [key=0, style=solid, color=red];
m10_1 -> m10_4  [key=2, style=dotted];
m10_1 -> m10_3  [key=2, style=dotted, color=red];
m10_3 -> m10_0  [key=0, style=bold, color=blue];
m10_3 -> m10_18  [key=0, style=solid];
m10_11 -> m10_12  [key=0, style=solid];
m10_11 -> m10_13  [key=2, style=dotted];
m10_39 -> m10_40  [key=0, style=solid];
m10_39 -> m10_41  [key=2, style=dotted];
m10_40 -> m10_41  [key=0, style=solid];
m10_40 -> m10_19  [key=2, style=dotted];
m10_40 -> m10_38  [key=0, style=bold, color=blue];
m10_28 -> m10_29  [key=0, style=solid];
m10_28 -> m10_30  [key=2, style=dotted];
m10_62 -> m10_63  [key=0, style=solid];
m10_81 -> m10_82  [key=0, style=solid];
m10_82 -> m10_83  [key=0, style=solid];
m10_82 -> m10_4  [key=2, style=dotted];
m10_83 -> m10_81  [key=0, style=bold, color=blue];
m10_5 -> m10_6  [key=0, style=solid, color=red];
m10_5 -> m10_9  [key=2, style=dotted];
m10_4 -> m10_5  [key=0, style=solid];
m10_10 -> m10_11  [key=0, style=solid];
m10_56 -> m10_57  [key=0, style=solid, color=green];
m10_56 -> m10_62  [key=2, style=dotted];
m10_57 -> m10_58  [key=0, style=solid, color=green];
m10_57 -> m10_45  [key=2, style=dotted, color=green];
m10_57 -> m10_62  [key=2, style=dotted];
m10_58 -> m10_56  [key=0, style=bold, color=blue];
m10_58 -> m10_59  [key=0, style=solid];
m10_58 -> m10_50  [key=2, style=dotted];
m10_59 -> m10_60  [key=0, style=solid];
m10_59 -> m10_27  [key=2, style=dotted];
m10_35 -> m10_9  [key=2, style=dotted];
m10_35 -> m10_36  [key=0, style=solid];
m10_35 -> m10_37  [key=2, style=dotted];
m10_60 -> m10_9  [key=2, style=dotted];
m10_60 -> m10_61  [key=0, style=solid];
m10_60 -> m10_37  [key=2, style=dotted];
m10_60 -> m10_51  [key=0, style=bold, color=blue];
m10_61 -> m10_59  [key=0, style=bold, color=blue];
m10_12 -> m10_10  [key=0, style=bold, color=blue];
m10_49 -> m10_50  [key=0, style=solid];
m10_52 -> m10_53  [key=0, style=solid, color=green];
m10_52 -> m10_9  [key=2, style=dotted, color=green];
m10_52 -> m10_56  [key=1, style=dashed, color=green, label="lambda expression"];
m10_52 -> m10_49  [key=2, style=dotted];
m10_50 -> m10_52  [key=1, style=dashed, color=green, label=component];
m10_50 -> m10_57  [key=1, style=dashed, color=green, label=component];
m10_50 -> m10_19  [key=2, style=dotted];
m10_50 -> m10_51  [key=0, style=solid];
m10_51 -> m10_52  [key=0, style=solid, color=green];
m10_51 -> m10_55  [key=2, style=dotted];
m10_53 -> m10_54  [key=0, style=solid];
m10_53 -> m10_33  [key=2, style=dotted];
m10_53 -> m10_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_53 -> m10_23  [key=2, style=dotted];
m10_54 -> m10_49  [key=0, style=bold, color=blue];
m10_54 -> m10_55  [key=0, style=solid];
m10_54 -> m10_31  [key=2, style=dotted];
m10_29 -> m10_27  [key=0, style=bold, color=blue];
m10_87 -> m10_1  [key=1, style=dashed, color=red, label="HangFire.Tests.States.ScheduledStateFeature"];
m10_87 -> m10_40  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.ScheduledStateFeature"];
m10_87 -> m10_44  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.ScheduledStateFeature"];
m10_87 -> m10_45  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.ScheduledStateFeature"];
m10_87 -> m10_47  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.ScheduledStateFeature"];
m10_87 -> m10_53  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.ScheduledStateFeature"];
m10_87 -> m10_54  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.ScheduledStateFeature"];
m10_87 -> m10_59  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.ScheduledStateFeature"];
m10_87 -> m10_65  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.ScheduledStateFeature"];
m10_87 -> m10_66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.ScheduledStateFeature"];
m10_87 -> m10_69  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.ScheduledStateFeature"];
m10_87 -> m10_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.ScheduledStateFeature"];
m10_87 -> m10_75  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.ScheduledStateFeature"];
m10_87 -> m10_79  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.ScheduledStateFeature"];
m11_9 -> m11_10  [key=0, style=solid];
m11_10 -> m11_11  [key=0, style=solid];
m11_10 -> m11_8  [key=2, style=dotted];
m11_10 -> m11_12  [key=1, style=dashed, color=darkseagreen4, label=state];
m11_11 -> m11_12  [key=0, style=solid];
m11_11 -> m11_16  [key=2, style=dotted];
m11_11 -> m11_13  [key=1, style=dashed, color=darkseagreen4, label=data];
m11_11 -> m11_14  [key=1, style=dashed, color=darkseagreen4, label=data];
m11_12 -> m11_13  [key=0, style=solid];
m11_12 -> m11_17  [key=2, style=dotted];
m11_12 -> m11_3  [key=2, style=dotted];
m11_13 -> m11_14  [key=0, style=solid];
m11_13 -> m11_3  [key=2, style=dotted];
m11_14 -> m11_15  [key=0, style=solid];
m11_14 -> m11_3  [key=2, style=dotted];
m11_14 -> m11_10  [key=3, color=darkorchid, style=bold, label="Property variable Hangfire.Server.ILongRunningProcess InnerProcess"];
m11_15 -> m11_9  [key=0, style=bold, color=blue];
m11_18 -> m11_19  [key=0, style=solid, color=red];
m11_19 -> m11_20  [key=0, style=solid, color=red];
m11_19 -> m11_8  [key=2, style=dotted, color=red];
m11_20 -> m11_21  [key=0, style=solid];
m11_20 -> m11_22  [key=2, style=dotted];
m11_21 -> m11_18  [key=0, style=bold, color=blue];
m11_4 -> m11_5  [key=0, style=solid];
m11_5 -> m11_6  [key=0, style=solid];
m11_5 -> m11_8  [key=2, style=dotted];
m11_6 -> m11_7  [key=0, style=solid];
m11_6 -> m11_3  [key=2, style=dotted];
m11_7 -> m11_4  [key=0, style=bold, color=blue];
m11_0 -> m11_1  [key=0, style=solid];
m11_1 -> m11_2  [key=0, style=solid];
m11_1 -> m11_3  [key=2, style=dotted];
m11_2 -> m11_0  [key=0, style=bold, color=blue];
m11_23 -> m11_24  [key=0, style=solid];
m11_24 -> m11_25  [key=0, style=solid];
m11_24 -> m11_8  [key=2, style=dotted];
m11_25 -> m11_26  [key=0, style=solid];
m11_25 -> m11_27  [key=2, style=dotted];
m11_26 -> m11_23  [key=0, style=bold, color=blue];
m11_8 -> m11_28  [key=0, style=solid];
m11_28 -> m11_29  [key=0, style=solid];
m11_28 -> m11_30  [key=2, style=dotted];
m11_29 -> m11_8  [key=0, style=bold, color=blue];
m12_0 -> m12_1  [key=0, style=solid];
m12_1 -> m12_0  [key=0, style=bold, color=blue];
m13_0 -> m13_1  [key=0, style=solid];
m13_0 -> m13_3  [key=1, style=dashed, color=darkseagreen4, label="System.Action<Hangfire.IBootstrapperConfiguration>"];
m13_0 -> m13_6  [key=1, style=dashed, color=darkseagreen4, label="System.Action<Hangfire.IBootstrapperConfiguration>"];
m13_0 -> m13_14  [key=1, style=dashed, color=darkseagreen4, label=IAppBuilder];
m13_0 -> m13_15  [key=1, style=dashed, color=darkseagreen4, label=IAppBuilder];
m13_1 -> m13_2  [key=0, style=solid];
m13_1 -> m13_3  [key=0, style=solid];
m13_3 -> m13_4  [key=0, style=solid];
m13_3 -> m13_5  [key=0, style=solid];
m13_6 -> m13_7  [key=0, style=solid];
m13_6 -> m13_19  [key=2, style=dotted];
m13_14 -> m13_13  [key=0, style=solid];
m13_14 -> m13_21  [key=2, style=dotted];
m13_14 -> m13_22  [key=2, style=dotted];
m13_15 -> m13_16  [key=0, style=solid];
m13_15 -> m13_23  [key=2, style=dotted];
m13_2 -> m13_16  [key=0, style=solid];
m13_2 -> m13_17  [key=2, style=dotted];
m13_4 -> m13_16  [key=0, style=solid];
m13_4 -> m13_17  [key=2, style=dotted];
m13_5 -> m13_6  [key=0, style=solid];
m13_5 -> m13_18  [key=2, style=dotted];
m13_5 -> m13_7  [key=1, style=dashed, color=darkseagreen4, label=configuration];
m13_5 -> m13_8  [key=1, style=dashed, color=darkseagreen4, label=configuration];
m13_5 -> m13_9  [key=1, style=dashed, color=darkseagreen4, label=configuration];
m13_5 -> m13_10  [key=1, style=dashed, color=darkseagreen4, label=configuration];
m13_5 -> m13_11  [key=1, style=dashed, color=darkseagreen4, label=configuration];
m13_5 -> m13_13  [key=1, style=dashed, color=darkseagreen4, label=configuration];
m13_5 -> m13_15  [key=1, style=dashed, color=darkseagreen4, label=configuration];
m13_7 -> m13_8  [key=0, style=solid];
m13_7 -> m13_9  [key=0, style=solid];
m13_8 -> m13_9  [key=0, style=solid];
m13_9 -> m13_10  [key=0, style=solid];
m13_9 -> m13_11  [key=0, style=solid];
m13_10 -> m13_11  [key=0, style=solid];
m13_11 -> m13_12  [key=0, style=solid];
m13_11 -> m13_13  [key=0, style=solid];
m13_13 -> m13_14  [key=0, style=solid];
m13_13 -> m13_15  [key=0, style=solid];
m13_12 -> m13_11  [key=0, style=solid];
m13_12 -> m13_20  [key=2, style=dotted];
m13_16 -> m13_0  [key=0, style=bold, color=blue];
m14_8 -> m14_9  [key=0, style=solid];
m14_9 -> m14_10  [key=0, style=solid];
m14_9 -> m14_11  [key=2, style=dotted];
m14_10 -> m14_8  [key=0, style=bold, color=blue];
m14_3 -> m14_4  [key=0, style=solid];
m14_4 -> m14_5  [key=0, style=solid];
m14_4 -> m14_6  [key=2, style=dotted];
m14_4 -> m14_7  [key=2, style=dotted];
m14_5 -> m14_3  [key=0, style=bold, color=blue];
m14_0 -> m14_1  [key=0, style=solid];
m14_1 -> m14_2  [key=0, style=solid];
m14_2 -> m14_0  [key=0, style=bold, color=blue];
m14_12 -> m14_13  [key=0, style=solid];
m14_13 -> m14_14  [key=0, style=solid];
m14_13 -> m14_15  [key=2, style=dotted];
m14_14 -> m14_12  [key=0, style=bold, color=blue];
m14_16 -> m14_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.SucceededState"];
m14_16 -> m14_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.SucceededState"];
m16_0 -> m16_1  [key=0, style=solid];
m16_1 -> m16_0  [key=0, style=bold, color=blue];
m17_8 -> m17_9  [key=0, style=solid];
m17_8 -> m17_13  [key=2, style=dotted];
m17_8 -> m17_14  [key=2, style=dotted];
m17_8 -> m17_15  [key=2, style=dotted];
m17_16 -> m17_19  [key=1, style=dashed, color=darkseagreen4, label="System.DateTime?"];
m17_16 -> m17_17  [key=0, style=solid];
m17_19 -> m17_12  [key=2, style=dotted];
m17_19 -> m17_20  [key=0, style=solid];
m17_19 -> m17_21  [key=1, style=dashed, color=darkseagreen4, label=baseTime];
m17_20 -> m17_12  [key=2, style=dotted];
m17_20 -> m17_21  [key=0, style=solid];
m17_21 -> m17_22  [key=0, style=solid];
m17_21 -> m17_23  [key=2, style=dotted];
m17_21 -> m17_24  [key=2, style=dotted];
m17_21 -> m17_25  [key=2, style=dotted];
m17_21 -> m17_26  [key=2, style=dotted];
m17_21 -> m17_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m17_18 -> m17_11  [key=2, style=dotted];
m17_18 -> m17_22  [key=0, style=solid];
m17_17 -> m17_19  [key=0, style=solid];
m17_17 -> m17_18  [key=0, style=solid];
m17_22 -> m17_16  [key=0, style=bold, color=blue];
m17_11 -> m17_9  [key=0, style=bold, color=blue];
m17_15 -> m17_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ProcessingState"];
m17_15 -> m17_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ProcessingState"];
m17_15 -> m17_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ProcessingState"];
m17_15 -> m17_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ProcessingState"];
m17_0 -> m17_1  [key=0, style=solid, color=green];
m17_0 -> m17_3  [key=1, style=dashed, color=darkseagreen4, label="System.DateTime"];
m17_0 -> m17_5  [key=1, style=dashed, color=darkseagreen4, label="System.TimeZoneInfo"];
m17_0 -> m17_6  [key=1, style=dashed, color=darkseagreen4, label=CrontabSchedule];
m17_0 -> m17_7  [key=1, style=dashed, color=darkseagreen4, label="System.DateTime"];
m17_1 -> m17_2  [key=0, style=solid, color=green];
m17_1 -> m17_3  [key=0, style=solid, color=green];
m17_1 -> m17_7  [key=2, style=dotted];
m17_3 -> m17_4  [key=0, style=solid];
m17_3 -> m17_5  [key=0, style=solid];
m17_5 -> m17_6  [key=0, style=solid];
m17_2 -> m17_6  [key=0, style=solid];
m17_2 -> m17_8  [key=2, style=dotted, color=green];
m17_2 -> m17_9  [key=0, style=solid, color=green];
m17_4 -> m17_5  [key=0, style=solid];
m17_4 -> m17_9  [key=0, style=solid];
m17_4 -> m17_11  [key=2, style=dotted];
m17_6 -> m17_0  [key=0, style=bold, color=blue];
m17_6 -> m17_7  [key=0, style=solid];
m17_9 -> m17_10  [key=0, style=solid];
m17_9 -> m17_0  [key=0, style=bold, color=blue];
m17_10 -> m17_11  [key=0, style=solid];
m17_10 -> m17_12  [key=2, style=dotted];
m17_10 -> m17_13  [key=2, style=dotted];
m17_10 -> m17_14  [key=2, style=dotted];
m17_7 -> m17_8  [key=0, style=solid];
m17_7 -> m17_12  [key=2, style=dotted];
m17_27 -> m17_28  [key=0, style=solid];
m17_28 -> m17_29  [key=0, style=solid];
m17_28 -> m17_30  [key=2, style=dotted];
m17_29 -> m17_27  [key=0, style=bold, color=blue];
m17_31 -> m17_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ScheduleInstant"];
m17_31 -> m17_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ScheduleInstant"];
m17_31 -> m17_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ScheduleInstant"];
m17_31 -> m17_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ScheduleInstant"];
m17_31 -> m17_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ScheduleInstant"];
m17_31 -> m17_20  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ScheduleInstant"];
m17_31 -> m17_21  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ScheduleInstant"];
m17_31 -> m17_28  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ScheduleInstant"];
m18_0 -> m18_1  [key=0, style=solid, color=red];
m18_0 -> m18_3  [key=1, style=dashed, color=red, label="System.TimeZoneInfo"];
m18_0 -> m18_5  [key=1, style=dashed, color=red, label=CrontabSchedule];
m18_1 -> m18_2  [key=0, style=solid, color=red];
m18_1 -> m18_3  [key=0, style=solid, color=red];
m18_3 -> m18_4  [key=0, style=solid, color=red];
m18_3 -> m18_5  [key=0, style=solid, color=red];
m18_5 -> m18_6  [key=0, style=solid, color=red];
m18_5 -> m18_8  [key=2, style=dotted, color=red];
m18_2 -> m18_6  [key=0, style=solid, color=red];
m18_2 -> m18_7  [key=2, style=dotted, color=red];
m18_4 -> m18_6  [key=0, style=solid, color=red];
m18_4 -> m18_7  [key=2, style=dotted, color=red];
m18_6 -> m18_0  [key=0, style=bold, color=blue];
m19_0 -> m19_1  [key=0, style=solid, color=red];
m19_1 -> m19_2  [key=0, style=solid, color=red];
m19_1 -> m19_3  [key=2, style=dotted, color=red];
m19_1 -> m19_4  [key=2, style=dotted, color=red];
m19_2 -> m19_0  [key=0, style=bold, color=blue];
m19_5 -> m19_6  [key=0, style=solid, color=red];
m19_5 -> m19_7  [key=1, style=dashed, color=red, label="HangFire.Common.States.StateApplyingContext"];
m19_6 -> m19_7  [key=0, style=solid, color=red];
m19_6 -> m19_9  [key=2, style=dotted, color=red];
m19_7 -> m19_8  [key=0, style=solid, color=red];
m19_7 -> m19_10  [key=2, style=dotted, color=red];
m19_8 -> m19_5  [key=0, style=bold, color=blue];
m19_11 -> m19_12  [key=0, style=solid, color=red];
m19_11 -> m19_13  [key=1, style=dashed, color=red, label="HangFire.Common.States.StateApplyingContext"];
m19_12 -> m19_13  [key=0, style=solid, color=red];
m19_12 -> m19_15  [key=2, style=dotted, color=red];
m19_13 -> m19_14  [key=0, style=solid, color=red];
m19_13 -> m19_16  [key=2, style=dotted, color=red];
m19_14 -> m19_11  [key=0, style=bold, color=blue];
m20_16 -> m20_17  [key=0, style=solid];
m20_17 -> m20_18  [key=0, style=solid];
m20_17 -> m20_19  [key=2, style=dotted];
m20_17 -> m20_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_18 -> m20_16  [key=0, style=bold, color=blue];
m20_33 -> m20_34  [key=0, style=solid];
m20_34 -> m20_35  [key=0, style=solid];
m20_34 -> m20_24  [key=2, style=dotted];
m20_34 -> m20_36  [key=1, style=dashed, color=darkseagreen4, label=exception];
m20_35 -> m20_36  [key=0, style=solid];
m20_35 -> m20_23  [key=2, style=dotted];
m20_35 -> m20_37  [key=1, style=dashed, color=darkseagreen4, label=context];
m20_36 -> m20_37  [key=0, style=solid];
m20_36 -> m20_39  [key=2, style=dotted];
m20_37 -> m20_38  [key=0, style=solid];
m20_37 -> m20_40  [key=2, style=dotted];
m20_38 -> m20_33  [key=0, style=bold, color=blue];
m20_15 -> m20_41  [key=0, style=solid];
m20_41 -> m20_15  [key=0, style=bold, color=blue];
m20_0 -> m20_1  [key=0, style=solid];
m20_1 -> m20_2  [key=0, style=solid];
m20_1 -> m20_7  [key=2, style=dotted];
m20_1 -> m20_5  [key=1, style=dashed, color=darkseagreen4, label=connection];
m20_2 -> m20_3  [key=0, style=solid];
m20_2 -> m20_8  [key=2, style=dotted];
m20_2 -> m20_12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_2 -> m20_5  [key=1, style=dashed, color=darkseagreen4, label=job];
m20_5 -> m20_6  [key=0, style=solid];
m20_5 -> m20_11  [key=2, style=dotted];
m20_3 -> m20_4  [key=0, style=solid];
m20_3 -> m20_9  [key=2, style=dotted];
m20_3 -> m20_5  [key=1, style=dashed, color=darkseagreen4, label=state];
m20_4 -> m20_5  [key=0, style=solid];
m20_4 -> m20_10  [key=2, style=dotted];
m20_6 -> m20_0  [key=0, style=bold, color=blue];
m20_30 -> m20_31  [key=0, style=solid];
m20_12 -> m20_13  [key=0, style=solid];
m20_13 -> m20_14  [key=0, style=solid];
m20_13 -> m20_15  [key=2, style=dotted];
m20_14 -> m20_12  [key=0, style=bold, color=blue];
m20_20 -> m20_21  [key=0, style=solid];
m20_21 -> m20_22  [key=0, style=solid];
m20_21 -> m20_23  [key=2, style=dotted];
m20_21 -> m20_24  [key=2, style=dotted];
m20_22 -> m20_20  [key=0, style=bold, color=blue];
m20_31 -> m20_32  [key=0, style=solid];
m20_31 -> m20_23  [key=2, style=dotted];
m20_32 -> m20_30  [key=0, style=bold, color=blue];
m20_25 -> m20_26  [key=0, style=solid];
m20_26 -> m20_27  [key=0, style=solid];
m20_26 -> m20_19  [key=2, style=dotted];
m20_26 -> m20_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_27 -> m20_28  [key=0, style=solid];
m20_27 -> m20_29  [key=2, style=dotted];
m20_28 -> m20_25  [key=0, style=bold, color=blue];
m20_42 -> m20_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Client.ClientExceptionContextFacts"];
m20_42 -> m20_26  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Client.ClientExceptionContextFacts"];
m20_42 -> m20_31  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Client.ClientExceptionContextFacts"];
m20_42 -> m20_35  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Client.ClientExceptionContextFacts"];
m21_0 -> m21_1  [key=0, style=solid];
m21_0 -> m21_4  [key=1, style=dashed, color=darkseagreen4, label="System.Exception"];
m21_1 -> m21_2  [key=0, style=solid];
m21_1 -> m21_3  [key=0, style=solid];
m21_4 -> m21_5  [key=0, style=solid];
m21_2 -> m21_5  [key=0, style=solid];
m21_2 -> m21_6  [key=2, style=dotted];
m21_3 -> m21_4  [key=0, style=solid];
m21_5 -> m21_0  [key=0, style=bold, color=blue];
m21_7 -> m21_8  [key=0, style=solid];
m21_8 -> m21_9  [key=0, style=solid];
m21_8 -> m21_10  [key=2, style=dotted];
m21_8 -> m21_11  [key=2, style=dotted];
m21_8 -> m21_12  [key=2, style=dotted];
m21_8 -> m21_13  [key=2, style=dotted];
m21_9 -> m21_7  [key=0, style=bold, color=blue];
m21_14 -> m21_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.FailedState"];
m21_14 -> m21_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.FailedState"];
m21_14 -> m21_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.FailedState"];
m24_0 -> m24_3  [key=1, style=dashed, color=green, label=string];
m24_0 -> m24_5  [key=1, style=dashed, color=green, label="System.Collections.Generic.IDictionary<string, string>"];
m24_0 -> m24_11  [key=1, style=dashed, color=green, label="HangFire.States.JobState"];
m24_0 -> m24_1  [key=0, style=solid];
m24_0 -> m24_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.JobState"];
m24_0 -> m24_9  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m24_0 -> m24_10  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m24_0 -> m24_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m24_0 -> m24_13  [key=1, style=dashed, color=darkseagreen4, label=string];
m24_3 -> m24_4  [key=0, style=solid, color=green];
m24_3 -> m24_5  [key=0, style=solid, color=green];
m24_1 -> m24_3  [key=0, style=solid, color=green];
m24_1 -> m24_2  [key=0, style=solid];
m24_4 -> m24_14  [key=0, style=solid, color=green];
m24_4 -> m24_15  [key=2, style=dotted, color=green];
m24_5 -> m24_6  [key=0, style=solid, color=green];
m24_5 -> m24_7  [key=0, style=solid, color=green];
m24_6 -> m24_14  [key=0, style=solid, color=green];
m24_6 -> m24_15  [key=2, style=dotted, color=green];
m24_7 -> m24_8  [key=0, style=solid];
m24_7 -> m24_9  [key=0, style=solid];
m24_11 -> m24_12  [key=0, style=solid, color=green];
m24_10 -> m24_11  [key=0, style=solid, color=green];
m24_10 -> m24_16  [key=2, style=dotted];
m24_12 -> m24_13  [key=0, style=solid];
m24_9 -> m24_10  [key=0, style=solid];
m24_13 -> m24_14  [key=0, style=solid];
m24_2 -> m24_14  [key=0, style=solid];
m24_2 -> m24_15  [key=2, style=dotted];
m24_8 -> m24_14  [key=0, style=solid];
m24_8 -> m24_15  [key=2, style=dotted];
m24_14 -> m24_0  [key=0, style=bold, color=blue];
m24_25 -> m24_26  [key=0, style=solid, color=green];
m24_25 -> m24_28  [key=1, style=dashed, color=darkseagreen4, label=string];
m24_26 -> m24_27  [key=0, style=solid, color=green];
m24_26 -> m24_28  [key=0, style=solid, color=green];
m24_26 -> m24_22  [key=2, style=dotted, color=green];
m24_27 -> m24_29  [key=0, style=solid, color=green];
m24_27 -> m24_15  [key=2, style=dotted, color=green];
m24_28 -> m24_29  [key=0, style=solid];
m24_28 -> m24_30  [key=2, style=dotted];
m24_28 -> m24_31  [key=2, style=dotted];
m24_29 -> m24_25  [key=0, style=bold, color=blue];
m24_17 -> m24_20  [key=1, style=dashed, color=darkseagreen4, label=string];
m24_17 -> m24_18  [key=0, style=solid];
m24_20 -> m24_21  [key=0, style=solid];
m24_20 -> m24_23  [key=2, style=dotted];
m24_20 -> m24_24  [key=2, style=dotted];
m24_19 -> m24_15  [key=2, style=dotted];
m24_19 -> m24_21  [key=0, style=solid];
m24_18 -> m24_22  [key=2, style=dotted];
m24_18 -> m24_20  [key=0, style=solid];
m24_18 -> m24_19  [key=0, style=solid];
m24_21 -> m24_17  [key=0, style=bold, color=blue];
m24_32 -> m24_33  [key=0, style=solid, color=green];
m24_33 -> m24_34  [key=0, style=solid, color=green];
m24_33 -> m24_36  [key=2, style=dotted, color=green];
m24_33 -> m24_37  [key=2, style=dotted, color=green];
m24_34 -> m24_35  [key=0, style=solid];
m24_34 -> m24_38  [key=2, style=dotted];
m24_35 -> m24_32  [key=0, style=bold, color=blue];
m24_39 -> m24_11  [key=1, style=dashed, color=green, label="HangFire.Client.ClientJobDescriptor"];
m24_39 -> m24_33  [key=1, style=dashed, color=green, label="HangFire.Client.ClientJobDescriptor"];
m24_39 -> m24_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Client.ClientJobDescriptor"];
m24_39 -> m24_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Client.ClientJobDescriptor"];
m24_39 -> m24_12  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Client.ClientJobDescriptor"];
m24_39 -> m24_13  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Client.ClientJobDescriptor"];
m24_39 -> m24_20  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Client.ClientJobDescriptor"];
m24_39 -> m24_28  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Client.ClientJobDescriptor"];
m24_39 -> m24_34  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Client.ClientJobDescriptor"];
m28_74 -> m28_75  [key=0, style=solid];
m28_75 -> m28_76  [key=0, style=solid];
m28_76 -> m28_48  [key=2, style=dotted];
m28_76 -> m28_77  [key=0, style=solid];
m28_76 -> m28_80  [key=1, style=dashed, color=darkseagreen4, label=token];
m28_77 -> m28_23  [key=2, style=dotted];
m28_77 -> m28_78  [key=0, style=solid];
m28_77 -> m28_79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m28_78 -> m28_74  [key=0, style=bold, color=blue];
m28_37 -> m28_38  [key=0, style=solid, color=green];
m28_38 -> m28_39  [key=0, style=solid, color=green];
m28_38 -> m28_23  [key=2, style=dotted, color=green];
m28_38 -> m28_41  [key=1, style=dashed, color=green, label="lambda expression"];
m28_39 -> m28_40  [key=0, style=solid];
m28_39 -> m28_24  [key=2, style=dotted];
m28_40 -> m28_37  [key=0, style=bold, color=blue];
m28_82 -> m28_83  [key=0, style=solid];
m28_83 -> m28_84  [key=0, style=solid];
m28_84 -> m28_48  [key=2, style=dotted];
m28_84 -> m28_85  [key=0, style=solid];
m28_84 -> m28_88  [key=1, style=dashed, color=darkseagreen4, label=token];
m28_85 -> m28_23  [key=2, style=dotted];
m28_85 -> m28_86  [key=0, style=solid];
m28_85 -> m28_87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m28_86 -> m28_82  [key=0, style=bold, color=blue];
m28_54 -> m28_55  [key=0, style=solid];
m28_55 -> m28_14  [key=2, style=dotted];
m28_55 -> m28_56  [key=0, style=solid];
m28_56 -> m28_48  [key=2, style=dotted];
m28_56 -> m28_57  [key=0, style=solid];
m28_56 -> m28_60  [key=1, style=dashed, color=darkseagreen4, label=token];
m28_57 -> m28_23  [key=2, style=dotted];
m28_57 -> m28_58  [key=0, style=solid];
m28_57 -> m28_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m28_58 -> m28_54  [key=0, style=bold, color=blue];
m28_30 -> m28_31  [key=0, style=solid, color=green];
m28_31 -> m28_32  [key=0, style=solid, color=green];
m28_31 -> m28_23  [key=2, style=dotted, color=green];
m28_31 -> m28_34  [key=1, style=dashed, color=green, label="lambda expression"];
m28_32 -> m28_33  [key=0, style=solid];
m28_32 -> m28_24  [key=2, style=dotted];
m28_33 -> m28_30  [key=0, style=bold, color=blue];
m28_19 -> m28_20  [key=0, style=solid, color=green];
m28_20 -> m28_21  [key=0, style=solid, color=green];
m28_20 -> m28_23  [key=2, style=dotted, color=green];
m28_20 -> m28_25  [key=1, style=dashed, color=green, label="lambda expression"];
m28_21 -> m28_22  [key=0, style=solid];
m28_21 -> m28_24  [key=2, style=dotted];
m28_22 -> m28_19  [key=0, style=bold, color=blue];
m28_63 -> m28_64  [key=0, style=solid, color=green];
m28_64 -> m28_65  [key=0, style=solid, color=green];
m28_64 -> m28_11  [key=2, style=dotted, color=green];
m28_64 -> m28_12  [key=2, style=dotted, color=green];
m28_64 -> m28_68  [key=1, style=dashed, color=green, label="lambda expression"];
m28_65 -> m28_48  [key=2, style=dotted];
m28_65 -> m28_66  [key=0, style=solid];
m28_65 -> m28_72  [key=1, style=dashed, color=darkseagreen4, label=token];
m28_66 -> m28_23  [key=2, style=dotted];
m28_66 -> m28_67  [key=0, style=solid];
m28_66 -> m28_71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m28_67 -> m28_63  [key=0, style=bold, color=blue];
m28_0 -> m28_1  [key=0, style=solid];
m28_4 -> m28_5  [key=0, style=solid, color=green];
m28_4 -> m28_13  [key=2, style=dotted, color=green];
m28_3 -> m28_4  [key=0, style=solid, color=green];
m28_3 -> m28_11  [key=2, style=dotted];
m28_3 -> m28_12  [key=2, style=dotted];
m28_3 -> m28_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m28_5 -> m28_6  [key=0, style=solid, color=green];
m28_6 -> m28_7  [key=0, style=solid, color=green];
m28_6 -> m28_14  [key=2, style=dotted, color=green];
m28_1 -> m28_2  [key=0, style=solid];
m28_1 -> m28_8  [key=2, style=dotted];
m28_1 -> m28_9  [key=2, style=dotted];
m28_2 -> m28_3  [key=0, style=solid];
m28_2 -> m28_10  [key=2, style=dotted];
m28_7 -> m28_0  [key=0, style=bold, color=blue];
m28_95 -> m28_96  [key=0, style=solid];
m28_25 -> m28_26  [key=0, style=solid, color=green];
m28_26 -> m28_27  [key=0, style=solid, color=green];
m28_26 -> m28_28  [key=2, style=dotted, color=green];
m28_26 -> m28_29  [key=2, style=dotted, color=green];
m28_27 -> m28_25  [key=0, style=bold, color=blue];
m28_34 -> m28_35  [key=0, style=solid, color=green];
m28_35 -> m28_36  [key=0, style=solid, color=green];
m28_35 -> m28_28  [key=2, style=dotted, color=green];
m28_35 -> m28_29  [key=2, style=dotted, color=green];
m28_36 -> m28_34  [key=0, style=bold, color=blue];
m28_41 -> m28_42  [key=0, style=solid, color=green];
m28_42 -> m28_43  [key=0, style=solid, color=green];
m28_42 -> m28_28  [key=2, style=dotted, color=green];
m28_42 -> m28_29  [key=2, style=dotted, color=green];
m28_43 -> m28_41  [key=0, style=bold, color=blue];
m28_68 -> m28_69  [key=0, style=solid, color=green];
m28_69 -> m28_70  [key=0, style=solid, color=green];
m28_69 -> m28_23  [key=2, style=dotted, color=green];
m28_69 -> m28_18  [key=2, style=dotted, color=green];
m28_70 -> m28_68  [key=0, style=bold, color=blue];
m28_15 -> m28_16  [key=0, style=solid];
m28_72 -> m28_73  [key=0, style=solid];
m28_72 -> m28_62  [key=2, style=dotted];
m28_16 -> m28_18  [key=2, style=dotted];
m28_16 -> m28_17  [key=0, style=solid];
m28_60 -> m28_61  [key=0, style=solid];
m28_60 -> m28_62  [key=2, style=dotted];
m28_80 -> m28_81  [key=0, style=solid];
m28_80 -> m28_62  [key=2, style=dotted];
m28_88 -> m28_89  [key=0, style=solid];
m28_88 -> m28_62  [key=2, style=dotted];
m28_96 -> m28_97  [key=0, style=solid];
m28_96 -> m28_62  [key=2, style=dotted];
m28_17 -> m28_15  [key=0, style=bold, color=blue];
m28_59 -> m28_60  [key=0, style=solid];
m28_71 -> m28_72  [key=0, style=solid];
m28_79 -> m28_80  [key=0, style=solid];
m28_87 -> m28_88  [key=0, style=solid];
m28_73 -> m28_71  [key=0, style=bold, color=blue];
m28_61 -> m28_59  [key=0, style=bold, color=blue];
m28_81 -> m28_79  [key=0, style=bold, color=blue];
m28_89 -> m28_87  [key=0, style=bold, color=blue];
m28_97 -> m28_95  [key=0, style=bold, color=blue];
m28_90 -> m28_91  [key=0, style=solid];
m28_91 -> m28_92  [key=0, style=solid];
m28_92 -> m28_48  [key=2, style=dotted];
m28_92 -> m28_93  [key=0, style=solid];
m28_92 -> m28_96  [key=1, style=dashed, color=darkseagreen4, label=token];
m28_93 -> m28_23  [key=2, style=dotted];
m28_93 -> m28_94  [key=0, style=solid];
m28_93 -> m28_95  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m28_94 -> m28_90  [key=0, style=bold, color=blue];
m28_44 -> m28_45  [key=0, style=solid, color=green];
m28_45 -> m28_46  [key=0, style=solid, color=green];
m28_45 -> m28_48  [key=2, style=dotted, color=green];
m28_46 -> m28_47  [key=0, style=solid, color=green];
m28_46 -> m28_24  [key=2, style=dotted, color=green];
m28_47 -> m28_44  [key=0, style=bold, color=blue];
m28_48 -> m28_98  [key=0, style=solid];
m28_98 -> m28_28  [key=2, style=dotted];
m28_98 -> m28_99  [key=0, style=solid];
m28_99 -> m28_48  [key=0, style=bold, color=blue];
m28_49 -> m28_50  [key=0, style=solid];
m28_50 -> m28_48  [key=2, style=dotted];
m28_50 -> m28_51  [key=0, style=solid];
m28_51 -> m28_52  [key=0, style=solid];
m28_51 -> m28_53  [key=2, style=dotted];
m28_52 -> m28_49  [key=0, style=bold, color=blue];
m28_100 -> m28_4  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_5  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_6  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_20  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_26  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_31  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_35  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_38  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_42  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_45  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_46  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_64  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_50  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_55  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_56  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_65  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_75  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_76  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_83  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_84  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_91  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_92  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_100 -> m28_98  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerJobCancellationTokenFacts"];
m28_102 -> m28_72  [key=1, style=dashed, color=darkseagreen4, label=token];
m28_101 -> m28_60  [key=1, style=dashed, color=darkseagreen4, label=token];
m28_103 -> m28_80  [key=1, style=dashed, color=darkseagreen4, label=token];
m28_104 -> m28_88  [key=1, style=dashed, color=darkseagreen4, label=token];
m28_105 -> m28_96  [key=1, style=dashed, color=darkseagreen4, label=token];
m29_0 -> m29_1  [key=0, style=solid];
m29_0 -> m29_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServer"];
m29_0 -> m29_3  [key=1, style=dashed, color=darkseagreen4, label=IAppBuilder];
m29_0 -> m29_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServer"];
m29_1 -> m29_2  [key=0, style=solid];
m29_1 -> m29_8  [key=2, style=dotted];
m29_2 -> m29_3  [key=0, style=solid];
m29_2 -> m29_9  [key=2, style=dotted];
m29_3 -> m29_4  [key=0, style=solid];
m29_3 -> m29_10  [key=2, style=dotted];
m29_6 -> m29_7  [key=0, style=solid];
m29_6 -> m29_12  [key=2, style=dotted];
m29_4 -> m29_5  [key=0, style=solid];
m29_4 -> m29_11  [key=2, style=dotted];
m29_4 -> m29_6  [key=1, style=dashed, color=darkseagreen4, label=token];
m29_5 -> m29_6  [key=0, style=solid];
m29_5 -> m29_7  [key=0, style=solid];
m29_7 -> m29_0  [key=0, style=bold, color=blue];
m30_105 -> m30_106  [key=0, style=solid];
m30_106 -> m30_107  [key=0, style=solid];
m30_106 -> m30_44  [key=2, style=dotted];
m30_107 -> m30_108  [key=0, style=solid];
m30_107 -> m30_87  [key=2, style=dotted];
m30_107 -> m30_109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m30_108 -> m30_105  [key=0, style=bold, color=blue];
m30_40 -> m30_41  [key=0, style=solid, color=red];
m30_40 -> m30_42  [key=1, style=dashed, color=red, label=Table];
m30_41 -> m30_42  [key=0, style=solid, color=red];
m30_41 -> m30_44  [key=2, style=dotted, color=red];
m30_41 -> m30_45  [key=2, style=dotted, color=red];
m30_42 -> m30_43  [key=0, style=solid, color=red];
m30_42 -> m30_30  [key=2, style=dotted, color=red];
m30_42 -> m30_46  [key=2, style=dotted, color=red];
m30_42 -> m30_31  [key=2, style=dotted, color=red];
m30_42 -> m30_47  [key=1, style=dashed, color=red, label="lambda expression"];
m30_42 -> m30_50  [key=1, style=dashed, color=red, label="lambda expression"];
m30_42 -> m30_53  [key=1, style=dashed, color=red, label="lambda expression"];
m30_43 -> m30_40  [key=0, style=bold, color=blue];
m30_83 -> m30_84  [key=0, style=solid];
m30_84 -> m30_85  [key=0, style=solid];
m30_84 -> m30_44  [key=2, style=dotted];
m30_85 -> m30_86  [key=0, style=solid];
m30_85 -> m30_87  [key=2, style=dotted];
m30_85 -> m30_88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m30_86 -> m30_83  [key=0, style=bold, color=blue];
m30_160 -> m30_161  [key=0, style=solid];
m30_160 -> m30_162  [key=1, style=dashed, color=darkseagreen4, label=string];
m30_161 -> m30_162  [key=0, style=solid];
m30_161 -> m30_44  [key=2, style=dotted];
m30_161 -> m30_164  [key=2, style=dotted];
m30_162 -> m30_163  [key=0, style=solid];
m30_162 -> m30_82  [key=2, style=dotted];
m30_163 -> m30_160  [key=0, style=bold, color=blue];
m30_4 -> m30_5  [key=0, style=solid];
m30_5 -> m30_6  [key=0, style=solid, color=red];
m30_5 -> m30_8  [key=2, style=dotted];
m30_6 -> m30_7  [key=0, style=solid, color=red];
m30_6 -> m30_9  [key=2, style=dotted, color=red];
m30_7 -> m30_4  [key=0, style=bold, color=blue];
m30_137 -> m30_138  [key=0, style=solid];
m30_138 -> m30_139  [key=0, style=solid];
m30_138 -> m30_143  [key=2, style=dotted];
m30_139 -> m30_140  [key=0, style=solid];
m30_139 -> m30_144  [key=2, style=dotted];
m30_139 -> m30_141  [key=1, style=dashed, color=darkseagreen4, label=timestamp];
m30_140 -> m30_141  [key=0, style=solid];
m30_140 -> m30_145  [key=2, style=dotted];
m30_140 -> m30_93  [key=2, style=dotted];
m30_141 -> m30_142  [key=0, style=solid];
m30_141 -> m30_145  [key=2, style=dotted];
m30_141 -> m30_93  [key=2, style=dotted];
m30_142 -> m30_137  [key=0, style=bold, color=blue];
m30_176 -> m30_170  [key=0, style=bold, color=blue];
m30_170 -> m30_171  [key=0, style=solid];
m30_170 -> m30_175  [key=1, style=dashed, color=darkseagreen4, label=Table];
m30_171 -> m30_172  [key=0, style=solid];
m30_171 -> m30_44  [key=2, style=dotted];
m30_171 -> m30_177  [key=2, style=dotted];
m30_171 -> m30_173  [key=1, style=dashed, color=darkseagreen4, label=entry];
m30_171 -> m30_174  [key=1, style=dashed, color=darkseagreen4, label=entry];
m30_175 -> m30_176  [key=0, style=solid];
m30_175 -> m30_120  [key=2, style=dotted];
m30_172 -> m30_173  [key=0, style=solid];
m30_172 -> m30_178  [key=2, style=dotted];
m30_173 -> m30_174  [key=0, style=solid];
m30_173 -> m30_179  [key=2, style=dotted];
m30_173 -> m30_175  [key=1, style=dashed, color=darkseagreen4, label=history];
m30_174 -> m30_175  [key=0, style=solid];
m30_174 -> m30_178  [key=2, style=dotted];
m30_180 -> m30_181  [key=0, style=solid];
m30_181 -> m30_182  [key=0, style=solid];
m30_181 -> m30_183  [key=2, style=dotted];
m30_181 -> m30_184  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m30_182 -> m30_180  [key=0, style=bold, color=blue];
m30_121 -> m30_122  [key=0, style=solid];
m30_122 -> m30_123  [key=0, style=solid];
m30_122 -> m30_125  [key=2, style=dotted];
m30_122 -> m30_82  [key=2, style=dotted];
m30_123 -> m30_124  [key=0, style=solid];
m30_123 -> m30_126  [key=2, style=dotted];
m30_123 -> m30_93  [key=2, style=dotted];
m30_124 -> m30_121  [key=0, style=bold, color=blue];
m30_94 -> m30_95  [key=0, style=solid];
m30_95 -> m30_96  [key=0, style=solid];
m30_95 -> m30_97  [key=2, style=dotted];
m30_95 -> m30_98  [key=2, style=dotted];
m30_95 -> m30_82  [key=2, style=dotted];
m30_96 -> m30_94  [key=0, style=bold, color=blue];
m30_79 -> m30_80  [key=0, style=solid];
m30_80 -> m30_81  [key=0, style=solid];
m30_80 -> m30_82  [key=2, style=dotted];
m30_81 -> m30_79  [key=0, style=bold, color=blue];
m30_146 -> m30_147  [key=0, style=solid];
m30_147 -> m30_148  [key=0, style=solid];
m30_147 -> m30_126  [key=2, style=dotted];
m30_147 -> m30_93  [key=2, style=dotted];
m30_148 -> m30_149  [key=0, style=solid];
m30_148 -> m30_143  [key=2, style=dotted];
m30_149 -> m30_150  [key=0, style=solid];
m30_149 -> m30_144  [key=2, style=dotted];
m30_149 -> m30_151  [key=1, style=dashed, color=darkseagreen4, label=timestamp];
m30_150 -> m30_151  [key=0, style=solid];
m30_150 -> m30_18  [key=2, style=dotted];
m30_150 -> m30_93  [key=2, style=dotted];
m30_151 -> m30_152  [key=0, style=solid];
m30_151 -> m30_18  [key=2, style=dotted];
m30_151 -> m30_93  [key=2, style=dotted];
m30_152 -> m30_146  [key=0, style=bold, color=blue];
m30_10 -> m30_11  [key=0, style=solid];
m30_11 -> m30_12  [key=0, style=solid];
m30_11 -> m30_13  [key=2, style=dotted];
m30_12 -> m30_10  [key=0, style=bold, color=blue];
m30_168 -> m30_165  [key=0, style=bold, color=blue];
m30_165 -> m30_166  [key=0, style=solid];
m30_165 -> m30_167  [key=1, style=dashed, color=darkseagreen4, label=Table];
m30_166 -> m30_167  [key=0, style=solid];
m30_166 -> m30_44  [key=2, style=dotted];
m30_166 -> m30_164  [key=2, style=dotted];
m30_167 -> m30_168  [key=0, style=solid];
m30_167 -> m30_169  [key=2, style=dotted];
m30_19 -> m30_20  [key=0, style=solid, color=red];
m30_20 -> m30_21  [key=0, style=solid, color=red];
m30_20 -> m30_22  [key=2, style=dotted, color=red];
m30_21 -> m30_19  [key=0, style=bold, color=blue];
m30_23 -> m30_24  [key=0, style=solid];
m30_23 -> m30_25  [key=1, style=dashed, color=darkseagreen4, label=string];
m30_24 -> m30_25  [key=0, style=solid];
m30_24 -> m30_29  [key=2, style=dotted];
m30_25 -> m30_26  [key=0, style=solid];
m30_25 -> m30_30  [key=2, style=dotted];
m30_25 -> m30_31  [key=2, style=dotted];
m30_25 -> m30_33  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m30_26 -> m30_27  [key=0, style=solid, color=red];
m30_26 -> m30_30  [key=2, style=dotted];
m30_26 -> m30_32  [key=2, style=dotted];
m30_26 -> m30_31  [key=2, style=dotted];
m30_26 -> m30_36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m30_27 -> m30_28  [key=0, style=solid, color=red];
m30_28 -> m30_23  [key=0, style=bold, color=blue];
m30_0 -> m30_1  [key=0, style=solid];
m30_1 -> m30_2  [key=0, style=solid];
m30_1 -> m30_3  [key=2, style=dotted];
m30_2 -> m30_0  [key=0, style=bold, color=blue];
m30_14 -> m30_15  [key=0, style=solid, color=red];
m30_15 -> m30_16  [key=0, style=solid, color=red];
m30_15 -> m30_17  [key=2, style=dotted, color=red];
m30_15 -> m30_18  [key=2, style=dotted, color=red];
m30_16 -> m30_14  [key=0, style=bold, color=blue];
m30_113 -> m30_114  [key=0, style=solid];
m30_114 -> m30_115  [key=0, style=solid];
m30_114 -> m30_103  [key=2, style=dotted];
m30_114 -> m30_82  [key=2, style=dotted];
m30_115 -> m30_113  [key=0, style=bold, color=blue];
m30_56 -> m30_57  [key=0, style=solid];
m30_57 -> m30_58  [key=0, style=solid];
m30_57 -> m30_61  [key=2, style=dotted];
m30_57 -> m30_59  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m30_58 -> m30_59  [key=0, style=solid];
m30_58 -> m30_62  [key=2, style=dotted];
m30_59 -> m30_60  [key=0, style=solid];
m30_59 -> m30_63  [key=2, style=dotted];
m30_60 -> m30_56  [key=0, style=bold, color=blue];
m30_116 -> m30_117  [key=0, style=solid];
m30_117 -> m30_118  [key=0, style=solid];
m30_117 -> m30_119  [key=2, style=dotted];
m30_117 -> m30_120  [key=2, style=dotted];
m30_118 -> m30_116  [key=0, style=bold, color=blue];
m30_190 -> m30_191  [key=0, style=solid];
m30_33 -> m30_34  [key=0, style=solid];
m30_36 -> m30_37  [key=0, style=solid];
m30_34 -> m30_35  [key=0, style=solid];
m30_35 -> m30_33  [key=0, style=bold, color=blue];
m30_37 -> m30_38  [key=0, style=solid];
m30_37 -> m30_39  [key=2, style=dotted];
m30_38 -> m30_36  [key=0, style=bold, color=blue];
m30_47 -> m30_48  [key=0, style=solid, color=red];
m30_50 -> m30_51  [key=0, style=solid, color=red];
m30_53 -> m30_54  [key=0, style=solid, color=red];
m30_48 -> m30_49  [key=0, style=solid, color=red];
m30_48 -> m30_39  [key=2, style=dotted, color=red];
m30_49 -> m30_47  [key=0, style=bold, color=blue];
m30_51 -> m30_52  [key=0, style=solid, color=red];
m30_52 -> m30_50  [key=0, style=bold, color=blue];
m30_54 -> m30_55  [key=0, style=solid, color=red];
m30_55 -> m30_53  [key=0, style=bold, color=blue];
m30_88 -> m30_89  [key=0, style=solid];
m30_88 -> m30_90  [key=1, style=dashed, color=darkseagreen4, label="?"];
m30_89 -> m30_90  [key=0, style=solid];
m30_89 -> m30_92  [key=2, style=dotted];
m30_90 -> m30_91  [key=0, style=solid];
m30_90 -> m30_93  [key=2, style=dotted];
m30_91 -> m30_88  [key=0, style=bold, color=blue];
m30_109 -> m30_110  [key=0, style=solid];
m30_109 -> m30_111  [key=1, style=dashed, color=darkseagreen4, label="?"];
m30_110 -> m30_111  [key=0, style=solid];
m30_110 -> m30_92  [key=2, style=dotted];
m30_111 -> m30_112  [key=0, style=solid];
m30_111 -> m30_93  [key=2, style=dotted];
m30_112 -> m30_109  [key=0, style=bold, color=blue];
m30_184 -> m30_185  [key=0, style=solid];
m30_185 -> m30_186  [key=0, style=solid];
m30_185 -> m30_179  [key=2, style=dotted];
m30_185 -> m30_62  [key=2, style=dotted];
m30_185 -> m30_187  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m30_185 -> m30_190  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m30_186 -> m30_184  [key=0, style=bold, color=blue];
m30_187 -> m30_188  [key=0, style=solid];
m30_188 -> m30_189  [key=0, style=solid];
m30_189 -> m30_187  [key=0, style=bold, color=blue];
m30_191 -> m30_192  [key=0, style=solid];
m30_192 -> m30_190  [key=0, style=bold, color=blue];
m30_73 -> m30_74  [key=0, style=solid];
m30_74 -> m30_75  [key=0, style=solid];
m30_74 -> m30_77  [key=2, style=dotted];
m30_75 -> m30_76  [key=0, style=solid];
m30_75 -> m30_78  [key=2, style=dotted];
m30_76 -> m30_73  [key=0, style=bold, color=blue];
m30_130 -> m30_131  [key=0, style=solid];
m30_131 -> m30_132  [key=0, style=solid];
m30_131 -> m30_126  [key=2, style=dotted];
m30_131 -> m30_93  [key=2, style=dotted];
m30_132 -> m30_130  [key=0, style=bold, color=blue];
m30_156 -> m30_157  [key=0, style=solid];
m30_157 -> m30_158  [key=0, style=solid];
m30_157 -> m30_159  [key=2, style=dotted];
m30_157 -> m30_93  [key=2, style=dotted];
m30_158 -> m30_156  [key=0, style=bold, color=blue];
m30_153 -> m30_154  [key=0, style=solid];
m30_154 -> m30_155  [key=0, style=solid];
m30_154 -> m30_126  [key=2, style=dotted];
m30_154 -> m30_136  [key=2, style=dotted];
m30_155 -> m30_153  [key=0, style=bold, color=blue];
m30_64 -> m30_65  [key=0, style=solid];
m30_65 -> m30_66  [key=0, style=solid];
m30_65 -> m30_61  [key=2, style=dotted];
m30_65 -> m30_68  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m30_65 -> m30_69  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m30_66 -> m30_67  [key=0, style=solid];
m30_66 -> m30_71  [key=2, style=dotted];
m30_66 -> m30_68  [key=1, style=dashed, color=darkseagreen4, label=descriptor];
m30_68 -> m30_69  [key=0, style=solid];
m30_68 -> m30_72  [key=2, style=dotted];
m30_69 -> m30_70  [key=0, style=solid];
m30_69 -> m30_63  [key=2, style=dotted];
m30_67 -> m30_68  [key=0, style=solid];
m30_67 -> m30_69  [key=0, style=solid];
m30_70 -> m30_64  [key=0, style=bold, color=blue];
m30_133 -> m30_134  [key=0, style=solid];
m30_134 -> m30_135  [key=0, style=solid];
m30_134 -> m30_126  [key=2, style=dotted];
m30_134 -> m30_136  [key=2, style=dotted];
m30_135 -> m30_133  [key=0, style=bold, color=blue];
m30_99 -> m30_100  [key=0, style=solid];
m30_100 -> m30_101  [key=0, style=solid];
m30_100 -> m30_103  [key=2, style=dotted];
m30_100 -> m30_82  [key=2, style=dotted];
m30_101 -> m30_102  [key=0, style=solid];
m30_101 -> m30_104  [key=2, style=dotted];
m30_101 -> m30_82  [key=2, style=dotted];
m30_102 -> m30_99  [key=0, style=bold, color=blue];
m30_127 -> m30_128  [key=0, style=solid];
m30_128 -> m30_129  [key=0, style=solid];
m30_128 -> m30_125  [key=2, style=dotted];
m30_128 -> m30_82  [key=2, style=dotted];
m30_129 -> m30_127  [key=0, style=bold, color=blue];
m30_193 -> m30_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m30_193 -> m30_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m30_193 -> m30_6  [key=1, style=dashed, color=red, label="HangFire.Tests.States.StateSteps"];
m30_193 -> m30_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m30_193 -> m30_15  [key=1, style=dashed, color=red, label="HangFire.Tests.States.StateSteps"];
m30_193 -> m30_20  [key=1, style=dashed, color=red, label="HangFire.Tests.States.StateSteps"];
m30_193 -> m30_24  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m30_193 -> m30_25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m30_193 -> m30_26  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m30_193 -> m30_27  [key=1, style=dashed, color=red, label="HangFire.Tests.States.StateSteps"];
m30_193 -> m30_42  [key=1, style=dashed, color=red, label="HangFire.Tests.States.StateSteps"];
m30_193 -> m30_58  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m30_193 -> m30_66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m30_193 -> m30_75  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m30_193 -> m30_80  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m30_193 -> m30_117  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m30_193 -> m30_181  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m31_30 -> m31_31  [key=0, style=solid];
m31_31 -> m31_32  [key=0, style=solid];
m31_31 -> m31_39  [key=2, style=dotted];
m31_32 -> m31_33  [key=0, style=solid];
m31_32 -> m31_22  [key=2, style=dotted];
m31_33 -> m31_34  [key=0, style=solid];
m31_33 -> m31_40  [key=2, style=dotted];
m31_34 -> m31_35  [key=0, style=solid];
m31_34 -> m31_41  [key=2, style=dotted];
m31_35 -> m31_36  [key=0, style=solid];
m31_35 -> m31_42  [key=2, style=dotted];
m31_36 -> m31_37  [key=0, style=solid];
m31_36 -> m31_43  [key=2, style=dotted];
m31_37 -> m31_38  [key=0, style=solid];
m31_37 -> m31_26  [key=2, style=dotted];
m31_38 -> m31_30  [key=0, style=bold, color=blue];
m31_9 -> m31_10  [key=0, style=solid];
m31_10 -> m31_11  [key=0, style=solid];
m31_10 -> m31_13  [key=2, style=dotted];
m31_11 -> m31_12  [key=0, style=solid];
m31_12 -> m31_9  [key=0, style=bold, color=blue];
m31_22 -> m31_23  [key=0, style=solid];
m31_23 -> m31_24  [key=0, style=solid];
m31_23 -> m31_25  [key=2, style=dotted];
m31_24 -> m31_22  [key=0, style=bold, color=blue];
m31_44 -> m31_45  [key=0, style=solid];
m31_45 -> m31_46  [key=0, style=solid];
m31_45 -> m31_39  [key=2, style=dotted];
m31_46 -> m31_47  [key=0, style=solid];
m31_46 -> m31_22  [key=2, style=dotted];
m31_47 -> m31_48  [key=0, style=solid];
m31_47 -> m31_40  [key=2, style=dotted];
m31_48 -> m31_49  [key=0, style=solid];
m31_48 -> m31_42  [key=2, style=dotted];
m31_49 -> m31_50  [key=0, style=solid];
m31_49 -> m31_43  [key=2, style=dotted];
m31_50 -> m31_51  [key=0, style=solid];
m31_50 -> m31_26  [key=2, style=dotted];
m31_51 -> m31_44  [key=0, style=bold, color=blue];
m31_67 -> m31_52  [key=0, style=bold, color=blue];
m31_52 -> m31_53  [key=0, style=solid];
m31_53 -> m31_54  [key=0, style=solid];
m31_53 -> m31_39  [key=2, style=dotted];
m31_54 -> m31_55  [key=0, style=solid];
m31_54 -> m31_22  [key=2, style=dotted];
m31_55 -> m31_56  [key=0, style=solid];
m31_55 -> m31_40  [key=2, style=dotted];
m31_56 -> m31_57  [key=0, style=solid];
m31_56 -> m31_68  [key=2, style=dotted];
m31_56 -> m31_58  [key=1, style=dashed, color=darkseagreen4, label=table1];
m31_56 -> m31_59  [key=1, style=dashed, color=darkseagreen4, label=table1];
m31_57 -> m31_58  [key=0, style=solid];
m31_57 -> m31_69  [key=2, style=dotted];
m31_58 -> m31_59  [key=0, style=solid];
m31_58 -> m31_69  [key=2, style=dotted];
m31_59 -> m31_60  [key=0, style=solid];
m31_59 -> m31_41  [key=2, style=dotted];
m31_60 -> m31_61  [key=0, style=solid];
m31_60 -> m31_42  [key=2, style=dotted];
m31_61 -> m31_62  [key=0, style=solid];
m31_61 -> m31_68  [key=2, style=dotted];
m31_61 -> m31_63  [key=1, style=dashed, color=darkseagreen4, label=table2];
m31_61 -> m31_64  [key=1, style=dashed, color=darkseagreen4, label=table2];
m31_61 -> m31_65  [key=1, style=dashed, color=darkseagreen4, label=table2];
m31_62 -> m31_63  [key=0, style=solid];
m31_62 -> m31_69  [key=2, style=dotted];
m31_63 -> m31_64  [key=0, style=solid];
m31_63 -> m31_69  [key=2, style=dotted];
m31_64 -> m31_65  [key=0, style=solid];
m31_64 -> m31_69  [key=2, style=dotted];
m31_65 -> m31_66  [key=0, style=solid];
m31_65 -> m31_43  [key=2, style=dotted];
m31_66 -> m31_67  [key=0, style=solid];
m31_66 -> m31_26  [key=2, style=dotted];
m31_26 -> m31_27  [key=0, style=solid];
m31_27 -> m31_28  [key=0, style=solid];
m31_27 -> m31_29  [key=2, style=dotted];
m31_28 -> m31_26  [key=0, style=bold, color=blue];
m31_18 -> m31_19  [key=0, style=solid];
m31_19 -> m31_20  [key=0, style=solid];
m31_19 -> m31_21  [key=2, style=dotted];
m31_20 -> m31_18  [key=0, style=bold, color=blue];
m31_14 -> m31_15  [key=0, style=solid];
m31_15 -> m31_16  [key=0, style=solid];
m31_15 -> m31_17  [key=0, style=solid];
m31_16 -> m31_17  [key=0, style=solid];
m31_16 -> m31_0  [key=2, style=dotted];
m31_17 -> m31_14  [key=0, style=bold, color=blue];
m31_0 -> m31_1  [key=0, style=solid];
m31_1 -> m31_2  [key=0, style=solid];
m31_1 -> m31_5  [key=2, style=dotted];
m31_2 -> m31_3  [key=0, style=solid];
m31_2 -> m31_6  [key=2, style=dotted];
m31_2 -> m31_7  [key=2, style=dotted];
m31_3 -> m31_4  [key=0, style=solid];
m31_3 -> m31_8  [key=2, style=dotted];
m31_4 -> m31_0  [key=0, style=bold, color=blue];
m31_85 -> m31_70  [key=0, style=bold, color=blue];
m31_70 -> m31_71  [key=0, style=solid];
m31_71 -> m31_72  [key=0, style=solid];
m31_71 -> m31_39  [key=2, style=dotted];
m31_72 -> m31_73  [key=0, style=solid];
m31_72 -> m31_22  [key=2, style=dotted];
m31_73 -> m31_74  [key=0, style=solid];
m31_73 -> m31_40  [key=2, style=dotted];
m31_74 -> m31_75  [key=0, style=solid];
m31_74 -> m31_68  [key=2, style=dotted];
m31_74 -> m31_76  [key=1, style=dashed, color=darkseagreen4, label=table3];
m31_75 -> m31_76  [key=0, style=solid];
m31_75 -> m31_69  [key=2, style=dotted];
m31_76 -> m31_77  [key=0, style=solid];
m31_76 -> m31_41  [key=2, style=dotted];
m31_77 -> m31_78  [key=0, style=solid];
m31_77 -> m31_42  [key=2, style=dotted];
m31_78 -> m31_79  [key=0, style=solid];
m31_78 -> m31_68  [key=2, style=dotted];
m31_78 -> m31_80  [key=1, style=dashed, color=darkseagreen4, label=table4];
m31_78 -> m31_81  [key=1, style=dashed, color=darkseagreen4, label=table4];
m31_78 -> m31_82  [key=1, style=dashed, color=darkseagreen4, label=table4];
m31_78 -> m31_83  [key=1, style=dashed, color=darkseagreen4, label=table4];
m31_79 -> m31_80  [key=0, style=solid];
m31_79 -> m31_69  [key=2, style=dotted];
m31_80 -> m31_81  [key=0, style=solid];
m31_80 -> m31_69  [key=2, style=dotted];
m31_81 -> m31_82  [key=0, style=solid];
m31_81 -> m31_69  [key=2, style=dotted];
m31_82 -> m31_83  [key=0, style=solid];
m31_82 -> m31_69  [key=2, style=dotted];
m31_83 -> m31_84  [key=0, style=solid];
m31_83 -> m31_43  [key=2, style=dotted];
m31_84 -> m31_85  [key=0, style=solid];
m31_84 -> m31_26  [key=2, style=dotted];
m31_86 -> m31_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StatesFeature"];
m31_86 -> m31_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StatesFeature"];
m31_86 -> m31_46  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StatesFeature"];
m31_86 -> m31_50  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StatesFeature"];
m31_86 -> m31_54  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StatesFeature"];
m31_86 -> m31_66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StatesFeature"];
m31_86 -> m31_72  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StatesFeature"];
m31_86 -> m31_84  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StatesFeature"];
m32_50 -> m32_51  [key=0, style=solid];
m32_51 -> m32_52  [key=0, style=solid];
m32_51 -> m32_48  [key=2, style=dotted];
m32_51 -> m32_55  [key=1, style=dashed, color=darkseagreen4, label=context];
m32_52 -> m32_50  [key=0, style=bold, color=blue];
m32_52 -> m32_27  [key=2, style=dotted];
m32_52 -> m32_53  [key=0, style=solid];
m32_52 -> m32_54  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m32_77 -> m32_78  [key=0, style=solid];
m32_77 -> m32_68  [key=2, style=dotted];
m32_83 -> m32_84  [key=0, style=solid];
m32_84 -> m32_85  [key=0, style=solid];
m32_84 -> m32_48  [key=2, style=dotted];
m32_84 -> m32_86  [key=1, style=dashed, color=darkseagreen4, label=context];
m32_85 -> m32_86  [key=0, style=solid];
m32_85 -> m32_13  [key=2, style=dotted];
m32_85 -> m32_73  [key=2, style=dotted];
m32_85 -> m32_14  [key=2, style=dotted];
m32_85 -> m32_90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m32_87 -> m32_28  [key=2, style=dotted];
m32_87 -> m32_88  [key=0, style=solid];
m32_86 -> m32_87  [key=0, style=solid];
m32_86 -> m32_89  [key=2, style=dotted];
m32_88 -> m32_83  [key=0, style=bold, color=blue];
m32_36 -> m32_33  [key=0, style=bold, color=blue];
m32_45 -> m32_28  [key=2, style=dotted];
m32_45 -> m32_46  [key=0, style=solid];
m32_12 -> m32_13  [key=0, style=solid];
m32_12 -> m32_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m32_12 -> m32_15  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m32_12 -> m32_18  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m32_12 -> m32_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m32_12 -> m32_21  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m32_12 -> m32_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m32_94 -> m32_95  [key=0, style=solid];
m32_95 -> m32_96  [key=0, style=solid];
m32_95 -> m32_48  [key=2, style=dotted];
m32_95 -> m32_97  [key=1, style=dashed, color=darkseagreen4, label=context];
m32_96 -> m32_97  [key=0, style=solid];
m32_96 -> m32_13  [key=2, style=dotted];
m32_96 -> m32_73  [key=2, style=dotted];
m32_96 -> m32_14  [key=2, style=dotted];
m32_96 -> m32_100  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m32_98 -> m32_28  [key=2, style=dotted];
m32_98 -> m32_99  [key=0, style=solid];
m32_97 -> m32_98  [key=0, style=solid];
m32_97 -> m32_89  [key=2, style=dotted];
m32_99 -> m32_94  [key=0, style=bold, color=blue];
m32_75 -> m32_76  [key=0, style=solid];
m32_76 -> m32_77  [key=0, style=solid];
m32_76 -> m32_48  [key=2, style=dotted];
m32_78 -> m32_79  [key=0, style=solid];
m32_78 -> m32_69  [key=2, style=dotted];
m32_78 -> m32_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m32_78 -> m32_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.Worker"];
m32_78 -> m32_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.Worker"];
m32_78 -> m32_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.Worker"];
m32_78 -> m32_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.Worker"];
m32_78 -> m32_16  [key=1, style=dashed, color=red, label="Hangfire.Server.Worker"];
m32_78 -> m32_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.Worker"];
m32_78 -> m32_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.Worker"];
m32_78 -> m32_25  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.Worker"];
m32_78 -> m32_51  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.Worker"];
m32_78 -> m32_57  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.Worker"];
m32_78 -> m32_60  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.Worker"];
m32_79 -> m32_75  [key=0, style=bold, color=blue];
m32_57 -> m32_58  [key=0, style=solid];
m32_57 -> m32_72  [key=2, style=dotted];
m32_57 -> m32_60  [key=1, style=dashed, color=darkseagreen4, label=performContext];
m32_58 -> m32_59  [key=0, style=solid];
m32_58 -> m32_48  [key=2, style=dotted];
m32_58 -> m32_60  [key=1, style=dashed, color=darkseagreen4, label=context];
m32_58 -> m32_61  [key=1, style=dashed, color=darkseagreen4, label=context];
m32_58 -> m32_62  [key=1, style=dashed, color=darkseagreen4, label=latency];
m32_59 -> m32_10  [key=2, style=dotted];
m32_59 -> m32_60  [key=0, style=solid];
m32_59 -> m32_61  [key=1, style=dashed, color=darkseagreen4, label=duration];
m32_59 -> m32_73  [key=2, style=dotted];
m32_59 -> m32_62  [key=1, style=dashed, color=darkseagreen4, label=duration];
m32_60 -> m32_61  [key=0, style=solid];
m32_60 -> m32_74  [key=2, style=dotted];
m32_60 -> m32_62  [key=1, style=dashed, color=darkseagreen4, label=result];
m32_61 -> m32_49  [key=2, style=dotted];
m32_61 -> m32_62  [key=0, style=solid];
m32_61 -> m32_75  [key=2, style=dotted];
m32_62 -> m32_57  [key=0, style=bold, color=blue];
m32_62 -> m32_69  [key=0, style=solid];
m32_62 -> m32_76  [key=2, style=dotted];
m32_48 -> m32_149  [key=0, style=solid];
m32_28 -> m32_29  [key=0, style=solid];
m32_28 -> m32_31  [key=0, style=solid];
m32_28 -> m32_35  [key=0, style=solid];
m32_28 -> m32_44  [key=2, style=dotted];
m32_53 -> m32_50  [key=0, style=bold, color=blue];
m32_53 -> m32_54  [key=0, style=solid];
m32_53 -> m32_70  [key=2, style=dotted];
m32_53 -> m32_56  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m32_53 -> m32_57  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m32_53 -> m32_58  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m32_53 -> m32_60  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m32_111 -> m32_112  [key=0, style=solid];
m32_112 -> m32_113  [key=0, style=solid];
m32_112 -> m32_48  [key=2, style=dotted];
m32_114 -> m32_115  [key=0, style=solid];
m32_114 -> m32_49  [key=2, style=dotted];
m32_115 -> m32_116  [key=0, style=solid];
m32_115 -> m32_69  [key=2, style=dotted];
m32_115 -> m32_118  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m32_113 -> m32_114  [key=0, style=solid];
m32_113 -> m32_117  [key=2, style=dotted];
m32_113 -> m32_110  [key=2, style=dotted];
m32_116 -> m32_111  [key=0, style=bold, color=blue];
m32_121 -> m32_122  [key=0, style=solid];
m32_125 -> m32_126  [key=0, style=solid];
m32_125 -> m32_48  [key=2, style=dotted];
m32_128 -> m32_129  [key=0, style=solid];
m32_128 -> m32_69  [key=2, style=dotted];
m32_128 -> m32_141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m32_129 -> m32_130  [key=0, style=solid];
m32_129 -> m32_69  [key=2, style=dotted];
m32_129 -> m32_145  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m32_124 -> m32_125  [key=0, style=solid];
m32_124 -> m32_13  [key=2, style=dotted];
m32_124 -> m32_132  [key=2, style=dotted];
m32_124 -> m32_134  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m32_124 -> m32_138  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m32_126 -> m32_127  [key=0, style=solid];
m32_126 -> m32_133  [key=2, style=dotted];
m32_127 -> m32_128  [key=0, style=solid];
m32_127 -> m32_49  [key=2, style=dotted];
m32_122 -> m32_10  [key=2, style=dotted];
m32_122 -> m32_124  [key=1, style=dashed, color=darkseagreen4, label=newState];
m32_122 -> m32_127  [key=1, style=dashed, color=darkseagreen4, label=newState];
m32_122 -> m32_123  [key=0, style=solid];
m32_122 -> m32_139  [key=1, style=dashed, color=darkseagreen4, label=newState];
m32_123 -> m32_124  [key=0, style=solid];
m32_123 -> m32_126  [key=1, style=dashed, color=darkseagreen4, label=filter];
m32_123 -> m32_131  [key=2, style=dotted];
m32_130 -> m32_121  [key=0, style=bold, color=blue];
m32_39 -> m32_37  [key=0, style=bold, color=blue];
m32_40 -> m32_41  [key=0, style=solid];
m32_27 -> m32_28  [key=0, style=solid];
m32_27 -> m32_47  [key=2, style=dotted];
m32_9 -> m32_10  [key=0, style=solid];
m32_0 -> m32_1  [key=0, style=solid];
m32_0 -> m32_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.IJobPerformanceProcess"];
m32_0 -> m32_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IStateMachineFactory"];
m32_0 -> m32_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.WorkerContext"];
m32_0 -> m32_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.IJobPerformanceProcess"];
m32_0 -> m32_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IStateMachineFactory"];
m32_1 -> m32_2  [key=0, style=solid];
m32_1 -> m32_3  [key=0, style=solid];
m32_1 -> m32_8  [key=2, style=dotted];
m32_1 -> m32_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m32_3 -> m32_4  [key=0, style=solid];
m32_3 -> m32_5  [key=0, style=solid];
m32_3 -> m32_10  [key=2, style=dotted];
m32_5 -> m32_6  [key=0, style=solid];
m32_5 -> m32_7  [key=0, style=solid];
m32_5 -> m32_12  [key=2, style=dotted];
m32_7 -> m32_8  [key=0, style=solid];
m32_7 -> m32_0  [key=0, style=bold, color=blue];
m32_8 -> m32_9  [key=0, style=solid];
m32_2 -> m32_10  [key=0, style=solid];
m32_2 -> m32_11  [key=2, style=dotted];
m32_2 -> m32_3  [key=0, style=solid];
m32_2 -> m32_9  [key=2, style=dotted];
m32_4 -> m32_10  [key=0, style=solid];
m32_4 -> m32_11  [key=2, style=dotted];
m32_4 -> m32_5  [key=0, style=solid];
m32_6 -> m32_10  [key=0, style=solid];
m32_6 -> m32_11  [key=2, style=dotted];
m32_6 -> m32_7  [key=0, style=solid];
m32_6 -> m32_13  [key=2, style=dotted];
m32_6 -> m32_14  [key=2, style=dotted];
m32_6 -> m32_19  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m32_10 -> m32_0  [key=0, style=bold, color=blue];
m32_70 -> m32_71  [key=0, style=solid];
m32_18 -> m32_19  [key=0, style=solid];
m32_18 -> m32_41  [key=2, style=dotted];
m32_18 -> m32_20  [key=1, style=dashed, color=darkseagreen4, label=linkedCts];
m32_38 -> m32_39  [key=0, style=solid, color=green];
m32_38 -> m32_32  [key=2, style=dotted, color=green];
m32_68 -> m32_69  [key=0, style=solid];
m32_68 -> m32_77  [key=2, style=dotted];
m32_44 -> m32_45  [key=0, style=solid];
m32_44 -> m32_49  [key=2, style=dotted];
m32_13 -> m32_14  [key=0, style=solid];
m32_13 -> m32_36  [key=2, style=dotted];
m32_13 -> m32_16  [key=1, style=dashed, color=red, label=connection];
m32_13 -> m32_24  [key=1, style=dashed, color=darkseagreen4, label=connection];
m32_13 -> m32_25  [key=1, style=dashed, color=darkseagreen4, label=connection];
m32_46 -> m32_53  [key=0, style=solid];
m32_46 -> m32_57  [key=1, style=dashed, color=darkseagreen4, label=string];
m32_46 -> m32_13  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.Storage.IStorageConnection connection"];
m32_46 -> m32_24  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.IJobCancellationToken token"];
m32_46 -> m32_55  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.States.IState PerformJob"];
m32_46 -> m32_47  [key=0, style=solid];
m32_46 -> m32_49  [key=2, style=dotted];
m32_54 -> m32_55  [key=0, style=solid];
m32_54 -> m32_56  [key=0, style=solid];
m32_56 -> m32_57  [key=0, style=solid];
m32_56 -> m32_71  [key=2, style=dotted];
m32_56 -> m32_54  [key=0, style=bold, color=blue];
m32_55 -> m32_69  [key=0, style=solid];
m32_55 -> m32_56  [key=0, style=solid];
m32_63 -> m32_64  [key=0, style=solid];
m32_64 -> m32_69  [key=0, style=solid];
m32_64 -> m32_65  [key=0, style=solid];
m32_64 -> m32_48  [key=2, style=dotted];
m32_65 -> m32_66  [key=0, style=solid];
m32_65 -> m32_68  [key=2, style=dotted];
m32_66 -> m32_69  [key=0, style=solid];
m32_66 -> m32_77  [key=2, style=dotted];
m32_66 -> m32_67  [key=0, style=solid];
m32_66 -> m32_70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m32_67 -> m32_68  [key=0, style=solid];
m32_67 -> m32_63  [key=0, style=bold, color=blue];
m32_69 -> m32_46  [key=0, style=bold, color=blue];
m32_72 -> m32_70  [key=0, style=bold, color=blue];
m32_103 -> m32_104  [key=0, style=solid];
m32_104 -> m32_105  [key=0, style=solid];
m32_104 -> m32_48  [key=2, style=dotted];
m32_104 -> m32_108  [key=1, style=dashed, color=darkseagreen4, label=context];
m32_105 -> m32_27  [key=2, style=dotted];
m32_105 -> m32_106  [key=0, style=solid];
m32_105 -> m32_107  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m32_106 -> m32_103  [key=0, style=bold, color=blue];
m32_47 -> m32_40  [key=0, style=bold, color=blue];
m32_138 -> m32_139  [key=0, style=solid];
m32_29 -> m32_30  [key=0, style=solid, color=green];
m32_30 -> m32_31  [key=0, style=solid, color=green];
m32_30 -> m32_32  [key=2, style=dotted, color=green];
m32_30 -> m32_35  [key=0, style=solid];
m32_30 -> m32_44  [key=2, style=dotted];
m32_31 -> m32_29  [key=0, style=bold, color=blue];
m32_31 -> m32_32  [key=0, style=solid];
m32_37 -> m32_38  [key=0, style=solid, color=green];
m32_142 -> m32_143  [key=0, style=solid];
m32_142 -> m32_144  [key=2, style=dotted];
m32_135 -> m32_27  [key=2, style=dotted];
m32_135 -> m32_136  [key=0, style=solid];
m32_135 -> m32_137  [key=2, style=dotted];
m32_19 -> m32_20  [key=0, style=solid];
m32_19 -> m32_42  [key=2, style=dotted];
m32_80 -> m32_81  [key=0, style=solid];
m32_90 -> m32_91  [key=0, style=solid];
m32_100 -> m32_101  [key=0, style=solid];
m32_108 -> m32_109  [key=0, style=solid];
m32_108 -> m32_110  [key=2, style=dotted];
m32_118 -> m32_119  [key=0, style=solid];
m32_141 -> m32_142  [key=0, style=solid];
m32_143 -> m32_141  [key=0, style=bold, color=blue];
m32_145 -> m32_146  [key=0, style=solid];
m32_107 -> m32_108  [key=0, style=solid];
m32_134 -> m32_135  [key=0, style=solid];
m32_136 -> m32_134  [key=0, style=bold, color=blue];
m32_15 -> m32_16  [key=0, style=solid, color=red];
m32_15 -> m32_38  [key=2, style=dotted];
m32_21 -> m32_19  [key=0, style=bold, color=blue];
m32_21 -> m32_22  [key=0, style=solid];
m32_21 -> m32_38  [key=2, style=dotted];
m32_20 -> m32_21  [key=0, style=solid];
m32_20 -> m32_22  [key=2, style=dotted];
m32_20 -> m32_24  [key=0, style=solid];
m32_20 -> m32_43  [key=2, style=dotted];
m32_71 -> m32_73  [key=2, style=dotted];
m32_71 -> m32_72  [key=0, style=solid];
m32_71 -> m32_74  [key=2, style=dotted];
m32_82 -> m32_80  [key=0, style=bold, color=blue];
m32_81 -> m32_73  [key=2, style=dotted];
m32_81 -> m32_82  [key=0, style=solid];
m32_81 -> m32_74  [key=2, style=dotted];
m32_92 -> m32_90  [key=0, style=bold, color=blue];
m32_91 -> m32_92  [key=0, style=solid];
m32_91 -> m32_93  [key=2, style=dotted];
m32_102 -> m32_100  [key=0, style=bold, color=blue];
m32_101 -> m32_102  [key=0, style=solid];
m32_101 -> m32_93  [key=2, style=dotted];
m32_109 -> m32_107  [key=0, style=bold, color=blue];
m32_120 -> m32_118  [key=0, style=bold, color=blue];
m32_119 -> m32_120  [key=0, style=solid];
m32_119 -> m32_22  [key=2, style=dotted];
m32_147 -> m32_145  [key=0, style=bold, color=blue];
m32_146 -> m32_147  [key=0, style=solid];
m32_146 -> m32_148  [key=2, style=dotted];
m32_17 -> m32_15  [key=0, style=bold, color=blue];
m32_17 -> m32_18  [key=0, style=solid];
m32_17 -> m32_40  [key=2, style=dotted];
m32_16 -> m32_17  [key=0, style=solid, color=red];
m32_16 -> m32_18  [key=2, style=dotted];
m32_16 -> m32_39  [key=2, style=dotted, color=red];
m32_16 -> m32_20  [key=1, style=dashed, color=red, label=stateMachine];
m32_16 -> m32_27  [key=1, style=dashed, color=red, label=stateMachine];
m32_139 -> m32_140  [key=0, style=solid];
m32_140 -> m32_138  [key=0, style=bold, color=blue];
m32_43 -> m32_28  [key=2, style=dotted];
m32_43 -> m32_44  [key=0, style=solid];
m32_33 -> m32_34  [key=0, style=solid, color=green];
m32_33 -> m32_49  [key=2, style=dotted];
m32_34 -> m32_35  [key=0, style=solid, color=green];
m32_34 -> m32_27  [key=2, style=dotted, color=green];
m32_34 -> m32_37  [key=1, style=dashed, color=green, label="lambda expression"];
m32_35 -> m32_28  [key=2, style=dotted];
m32_35 -> m32_36  [key=0, style=solid];
m32_35 -> m32_12  [key=0, style=bold, color=blue];
m32_22 -> m32_23  [key=0, style=solid];
m32_22 -> m32_44  [key=2, style=dotted];
m32_41 -> m32_42  [key=0, style=solid];
m32_41 -> m32_48  [key=2, style=dotted];
m32_41 -> m32_43  [key=1, style=dashed, color=darkseagreen4, label=context];
m32_41 -> m32_44  [key=1, style=dashed, color=darkseagreen4, label=context];
m32_41 -> m32_45  [key=1, style=dashed, color=darkseagreen4, label=context];
m32_41 -> m32_46  [key=1, style=dashed, color=darkseagreen4, label=context];
m32_42 -> m32_28  [key=2, style=dotted];
m32_42 -> m32_43  [key=0, style=solid];
m32_23 -> m32_24  [key=0, style=solid, color=green];
m32_23 -> m32_35  [key=0, style=solid];
m32_24 -> m32_25  [key=0, style=solid, color=green];
m32_24 -> m32_27  [key=2, style=dotted, color=green];
m32_24 -> m32_29  [key=1, style=dashed, color=green, label="lambda expression"];
m32_24 -> m32_45  [key=2, style=dotted];
m32_25 -> m32_26  [key=0, style=solid, color=green];
m32_25 -> m32_28  [key=2, style=dotted, color=green];
m32_25 -> m32_46  [key=2, style=dotted];
m32_25 -> m32_27  [key=1, style=dashed, color=darkseagreen4, label=state];
m32_26 -> m32_23  [key=0, style=bold, color=blue];
m32_26 -> m32_27  [key=0, style=solid];
m32_26 -> m32_28  [key=0, style=solid];
m32_14 -> m32_15  [key=0, style=solid];
m32_14 -> m32_37  [key=2, style=dotted];
m32_14 -> m32_20  [key=1, style=dashed, color=darkseagreen4, label=fetchedJob];
m32_14 -> m32_22  [key=1, style=dashed, color=darkseagreen4, label=fetchedJob];
m32_14 -> m32_24  [key=1, style=dashed, color=darkseagreen4, label=fetchedJob];
m32_14 -> m32_25  [key=1, style=dashed, color=darkseagreen4, label=fetchedJob];
m32_14 -> m32_27  [key=1, style=dashed, color=darkseagreen4, label=fetchedJob];
m32_14 -> m32_28  [key=1, style=dashed, color=darkseagreen4, label=fetchedJob];
m32_14 -> m32_30  [key=1, style=dashed, color=darkseagreen4, label=fetchedJob];
m32_14 -> m32_33  [key=1, style=dashed, color=darkseagreen4, label=fetchedJob];
m32_32 -> m32_33  [key=0, style=solid];
m32_32 -> m32_48  [key=2, style=dotted];
m32_149 -> m32_32  [key=2, style=dotted];
m32_149 -> m32_150  [key=0, style=solid];
m32_150 -> m32_48  [key=0, style=bold, color=blue];
m32_151 -> m32_24  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_30  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_34  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_38  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_42  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_43  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_44  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_46  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_51  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_58  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_64  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_76  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_78  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_84  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_85  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_95  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_96  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_104  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_112  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_114  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_115  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_125  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_128  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_142  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_129  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_151 -> m32_149  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ElectStateContextFacts"];
m32_152 -> m32_55  [key=1, style=dashed, color=darkseagreen4, label=context];
m32_153 -> m32_108  [key=1, style=dashed, color=darkseagreen4, label=context];
m32_154 -> m32_139  [key=1, style=dashed, color=darkseagreen4, label=newState];
m33_0 -> m33_1  [key=0, style=solid, color=red];
m33_1 -> m33_2  [key=0, style=solid, color=red];
m33_1 -> m33_4  [key=2, style=dotted, color=red];
m33_1 -> m33_6  [key=1, style=dashed, color=red, label="lambda expression"];
m33_2 -> m33_3  [key=0, style=solid, color=red];
m33_2 -> m33_5  [key=2, style=dotted, color=red];
m33_3 -> m33_0  [key=0, style=bold, color=blue];
m33_23 -> m33_38  [key=0, style=solid, color=red];
m33_38 -> m33_39  [key=0, style=solid, color=red];
m33_38 -> m33_9  [key=2, style=dotted, color=red];
m33_39 -> m33_23  [key=0, style=bold, color=blue];
m33_10 -> m33_11  [key=0, style=solid, color=red];
m33_11 -> m33_12  [key=0, style=solid, color=red];
m33_11 -> m33_4  [key=2, style=dotted, color=red];
m33_11 -> m33_14  [key=1, style=dashed, color=red, label="lambda expression"];
m33_12 -> m33_13  [key=0, style=solid];
m33_12 -> m33_5  [key=2, style=dotted];
m33_13 -> m33_10  [key=0, style=bold, color=blue];
m33_31 -> m33_32  [key=0, style=solid];
m33_32 -> m33_33  [key=0, style=solid];
m33_32 -> m33_23  [key=2, style=dotted];
m33_32 -> m33_34  [key=1, style=dashed, color=red, label=context];
m33_32 -> m33_35  [key=1, style=dashed, color=darkseagreen4, label=context];
m33_32 -> m33_36  [key=1, style=dashed, color=darkseagreen4, label=context];
m33_33 -> m33_34  [key=0, style=solid, color=red];
m33_33 -> m33_30  [key=2, style=dotted];
m33_33 -> m33_36  [key=1, style=dashed, color=darkseagreen4, label=contextCopy];
m33_34 -> m33_35  [key=0, style=solid, color=red];
m33_34 -> m33_5  [key=2, style=dotted, color=red];
m33_35 -> m33_36  [key=0, style=solid];
m33_35 -> m33_5  [key=2, style=dotted];
m33_36 -> m33_37  [key=0, style=solid];
m33_36 -> m33_5  [key=2, style=dotted];
m33_37 -> m33_31  [key=0, style=bold, color=blue];
m33_24 -> m33_25  [key=0, style=solid];
m33_25 -> m33_26  [key=0, style=solid];
m33_25 -> m33_4  [key=2, style=dotted];
m33_25 -> m33_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m33_26 -> m33_24  [key=0, style=bold, color=blue];
m33_27 -> m33_28  [key=0, style=solid];
m33_6 -> m33_7  [key=0, style=solid, color=red];
m33_7 -> m33_8  [key=0, style=solid, color=red];
m33_7 -> m33_9  [key=2, style=dotted, color=red];
m33_8 -> m33_6  [key=0, style=bold, color=blue];
m33_14 -> m33_15  [key=0, style=solid, color=red];
m33_15 -> m33_16  [key=0, style=solid, color=red];
m33_15 -> m33_9  [key=2, style=dotted, color=red];
m33_16 -> m33_14  [key=0, style=bold, color=blue];
m33_28 -> m33_29  [key=0, style=solid];
m33_28 -> m33_30  [key=2, style=dotted];
m33_29 -> m33_27  [key=0, style=bold, color=blue];
m33_17 -> m33_18  [key=0, style=solid];
m33_18 -> m33_19  [key=0, style=solid, color=red];
m33_18 -> m33_23  [key=2, style=dotted];
m33_18 -> m33_20  [key=1, style=dashed, color=darkseagreen4, label=context];
m33_18 -> m33_21  [key=1, style=dashed, color=darkseagreen4, label=context];
m33_19 -> m33_20  [key=0, style=solid, color=red];
m33_19 -> m33_5  [key=2, style=dotted, color=red];
m33_20 -> m33_21  [key=0, style=solid];
m33_20 -> m33_5  [key=2, style=dotted];
m33_21 -> m33_22  [key=0, style=solid];
m33_21 -> m33_5  [key=2, style=dotted];
m33_22 -> m33_17  [key=0, style=bold, color=blue];
m33_40 -> m33_18  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerContextFacts"];
m33_40 -> m33_32  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerContextFacts"];
m34_0 -> m34_1  [key=0, style=solid];
m34_4 -> m34_5  [key=0, style=solid, color=green];
m34_4 -> m34_6  [key=2, style=dotted, color=green];
m34_4 -> m34_57  [key=2, style=dotted];
m34_4 -> m34_7  [key=1, style=dashed, color=darkseagreen4, label=from];
m34_3 -> m34_4  [key=0, style=solid, color=green];
m34_1 -> m34_2  [key=0, style=solid];
m34_1 -> m34_55  [key=2, style=dotted];
m34_2 -> m34_3  [key=0, style=solid];
m34_2 -> m34_56  [key=2, style=dotted];
m34_5 -> m34_0  [key=0, style=bold, color=blue];
m34_5 -> m34_6  [key=0, style=solid];
m34_5 -> m34_57  [key=2, style=dotted];
m34_5 -> m34_7  [key=1, style=dashed, color=darkseagreen4, label=perPage];
m34_7 -> m34_8  [key=0, style=solid];
m34_7 -> m34_59  [key=2, style=dotted];
m34_7 -> m34_60  [key=2, style=dotted];
m34_7 -> m34_61  [key=2, style=dotted];
m34_7 -> m34_10  [key=1, style=dashed, color=darkseagreen4, label=pager];
m34_7 -> m34_17  [key=1, style=dashed, color=darkseagreen4, label=pager];
m34_7 -> m34_53  [key=1, style=dashed, color=darkseagreen4, label=pager];
m34_6 -> m34_7  [key=0, style=solid];
m34_6 -> m34_58  [key=2, style=dotted];
m34_6 -> m34_8  [key=1, style=dashed, color=darkseagreen4, label=monitor];
m34_8 -> m34_9  [key=0, style=solid];
m34_8 -> m34_62  [key=2, style=dotted];
m34_8 -> m34_19  [key=1, style=dashed, color=darkseagreen4, label=scheduledJobs];
m34_8 -> m34_10  [key=2, style=dotted];
m34_10 -> m34_11  [key=0, style=solid];
m34_10 -> m34_12  [key=0, style=solid];
m34_17 -> m34_18  [key=0, style=solid];
m34_17 -> m34_64  [key=2, style=dotted];
m34_17 -> m34_65  [key=2, style=dotted];
m34_17 -> m34_66  [key=2, style=dotted];
m34_53 -> m34_54  [key=0, style=solid];
m34_53 -> m34_70  [key=2, style=dotted];
m34_53 -> m34_65  [key=2, style=dotted];
m34_53 -> m34_66  [key=2, style=dotted];
m34_9 -> m34_10  [key=0, style=solid];
m34_9 -> m34_55  [key=2, style=dotted];
m34_9 -> m34_7  [key=0, style=bold, color=blue];
m34_19 -> m34_20  [key=0, style=solid];
m34_19 -> m34_52  [key=0, style=solid];
m34_19 -> m34_21  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_11 -> m34_54  [key=0, style=solid];
m34_11 -> m34_55  [key=2, style=dotted];
m34_11 -> m34_4  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.WorkerContextMock"];
m34_11 -> m34_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.WorkerContextMock"];
m34_11 -> m34_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.WorkerContextMock"];
m34_11 -> m34_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.WorkerContextMock"];
m34_11 -> m34_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.WorkerContextMock"];
m34_12 -> m34_13  [key=0, style=solid];
m34_12 -> m34_55  [key=2, style=dotted];
m34_13 -> m34_14  [key=0, style=solid];
m34_13 -> m34_61  [key=2, style=dotted];
m34_13 -> m34_63  [key=2, style=dotted];
m34_14 -> m34_15  [key=0, style=solid];
m34_14 -> m34_55  [key=2, style=dotted];
m34_15 -> m34_16  [key=0, style=solid];
m34_15 -> m34_61  [key=2, style=dotted];
m34_15 -> m34_63  [key=2, style=dotted];
m34_16 -> m34_17  [key=0, style=solid];
m34_16 -> m34_55  [key=2, style=dotted];
m34_18 -> m34_19  [key=0, style=solid];
m34_18 -> m34_55  [key=2, style=dotted];
m34_20 -> m34_21  [key=0, style=solid];
m34_20 -> m34_55  [key=2, style=dotted];
m34_52 -> m34_53  [key=0, style=solid];
m34_52 -> m34_55  [key=2, style=dotted];
m34_21 -> m34_22  [key=0, style=solid];
m34_21 -> m34_63  [key=2, style=dotted];
m34_21 -> m34_21  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_21 -> m34_23  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_22 -> m34_23  [key=0, style=solid];
m34_22 -> m34_55  [key=2, style=dotted];
m34_23 -> m34_24  [key=0, style=solid];
m34_23 -> m34_63  [key=2, style=dotted];
m34_23 -> m34_23  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_23 -> m34_25  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_24 -> m34_25  [key=0, style=solid];
m34_24 -> m34_55  [key=2, style=dotted];
m34_25 -> m34_26  [key=0, style=solid];
m34_25 -> m34_29  [key=0, style=solid];
m34_25 -> m34_25  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_25 -> m34_27  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_25 -> m34_30  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_26 -> m34_27  [key=0, style=solid];
m34_26 -> m34_55  [key=2, style=dotted];
m34_29 -> m34_30  [key=0, style=solid];
m34_29 -> m34_55  [key=2, style=dotted];
m34_27 -> m34_28  [key=0, style=solid];
m34_27 -> m34_63  [key=2, style=dotted];
m34_27 -> m34_27  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_27 -> m34_30  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_30 -> m34_31  [key=0, style=solid];
m34_30 -> m34_61  [key=2, style=dotted];
m34_30 -> m34_63  [key=2, style=dotted];
m34_30 -> m34_30  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_30 -> m34_32  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_28 -> m34_29  [key=0, style=solid];
m34_28 -> m34_55  [key=2, style=dotted];
m34_31 -> m34_32  [key=0, style=solid];
m34_31 -> m34_55  [key=2, style=dotted];
m34_32 -> m34_33  [key=0, style=solid];
m34_32 -> m34_67  [key=2, style=dotted];
m34_32 -> m34_66  [key=2, style=dotted];
m34_32 -> m34_32  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_32 -> m34_34  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_33 -> m34_34  [key=0, style=solid];
m34_33 -> m34_55  [key=2, style=dotted];
m34_34 -> m34_35  [key=0, style=solid];
m34_34 -> m34_36  [key=0, style=solid];
m34_34 -> m34_34  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_34 -> m34_37  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_35 -> m34_36  [key=0, style=solid];
m34_35 -> m34_55  [key=2, style=dotted];
m34_36 -> m34_37  [key=0, style=solid];
m34_36 -> m34_55  [key=2, style=dotted];
m34_37 -> m34_38  [key=0, style=solid];
m34_37 -> m34_68  [key=2, style=dotted];
m34_37 -> m34_63  [key=2, style=dotted];
m34_37 -> m34_37  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_37 -> m34_39  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_38 -> m34_39  [key=0, style=solid];
m34_38 -> m34_55  [key=2, style=dotted];
m34_39 -> m34_40  [key=0, style=solid];
m34_39 -> m34_63  [key=2, style=dotted];
m34_39 -> m34_39  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_39 -> m34_41  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_40 -> m34_41  [key=0, style=solid];
m34_40 -> m34_55  [key=2, style=dotted];
m34_41 -> m34_42  [key=0, style=solid];
m34_41 -> m34_61  [key=2, style=dotted];
m34_41 -> m34_63  [key=2, style=dotted];
m34_41 -> m34_41  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_41 -> m34_43  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_42 -> m34_43  [key=0, style=solid];
m34_42 -> m34_55  [key=2, style=dotted];
m34_43 -> m34_44  [key=0, style=solid];
m34_43 -> m34_69  [key=2, style=dotted];
m34_43 -> m34_66  [key=2, style=dotted];
m34_43 -> m34_43  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_43 -> m34_45  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_44 -> m34_45  [key=0, style=solid];
m34_44 -> m34_55  [key=2, style=dotted];
m34_45 -> m34_46  [key=0, style=solid];
m34_45 -> m34_51  [key=0, style=solid];
m34_45 -> m34_45  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_45 -> m34_47  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_46 -> m34_47  [key=0, style=solid];
m34_46 -> m34_55  [key=2, style=dotted];
m34_51 -> m34_19  [key=0, style=solid];
m34_51 -> m34_55  [key=2, style=dotted];
m34_47 -> m34_48  [key=0, style=solid];
m34_47 -> m34_68  [key=2, style=dotted];
m34_47 -> m34_63  [key=2, style=dotted];
m34_47 -> m34_47  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_47 -> m34_49  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_48 -> m34_49  [key=0, style=solid];
m34_48 -> m34_55  [key=2, style=dotted];
m34_49 -> m34_50  [key=0, style=solid];
m34_49 -> m34_63  [key=2, style=dotted];
m34_49 -> m34_49  [key=1, style=dashed, color=darkseagreen4, label=job];
m34_50 -> m34_51  [key=0, style=solid];
m34_50 -> m34_55  [key=2, style=dotted];
m34_54 -> m34_0  [key=0, style=bold, color=blue];
m34_71 -> m34_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_12  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_13  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_14  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_16  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_17  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_18  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_20  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_21  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_22  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_23  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_24  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_26  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_27  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_28  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_29  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_30  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_31  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_33  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_35  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_36  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_38  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_39  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_40  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_42  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_43  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_44  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_46  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_47  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_48  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_49  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_50  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_51  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_52  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m34_71 -> m34_53  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m35_164 -> m35_165  [key=0, style=solid];
m35_165 -> m35_166  [key=0, style=solid, color=red];
m35_165 -> m35_92  [key=2, style=dotted];
m35_166 -> m35_167  [key=0, style=solid, color=red];
m35_166 -> m35_93  [key=2, style=dotted, color=red];
m35_167 -> m35_168  [key=0, style=solid];
m35_167 -> m35_94  [key=2, style=dotted];
m35_167 -> m35_169  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_168 -> m35_164  [key=0, style=bold, color=blue];
m35_79 -> m35_80  [key=0, style=solid, color=red];
m35_80 -> m35_81  [key=0, style=solid, color=red];
m35_80 -> m35_38  [key=2, style=dotted, color=red];
m35_80 -> m35_83  [key=1, style=dashed, color=red, label="lambda expression"];
m35_81 -> m35_82  [key=0, style=solid];
m35_81 -> m35_60  [key=2, style=dotted];
m35_82 -> m35_79  [key=0, style=bold, color=blue];
m35_245 -> m35_246  [key=0, style=solid];
m35_246 -> m35_247  [key=0, style=solid];
m35_246 -> m35_252  [key=2, style=dotted];
m35_246 -> m35_250  [key=1, style=dashed, color=darkseagreen4, label=exception];
m35_246 -> m35_258  [key=1, style=dashed, color=darkseagreen4, label=exception];
m35_246 -> m35_261  [key=1, style=dashed, color=darkseagreen4, label=exception];
m35_247 -> m35_248  [key=0, style=solid];
m35_247 -> m35_21  [key=2, style=dotted];
m35_247 -> m35_253  [key=2, style=dotted];
m35_247 -> m35_254  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_250 -> m35_251  [key=0, style=solid];
m35_250 -> m35_94  [key=2, style=dotted];
m35_250 -> m35_257  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_248 -> m35_249  [key=0, style=solid, color=red];
m35_248 -> m35_92  [key=2, style=dotted];
m35_249 -> m35_250  [key=0, style=solid, color=red];
m35_249 -> m35_93  [key=2, style=dotted, color=red];
m35_251 -> m35_245  [key=0, style=bold, color=blue];
m35_234 -> m35_235  [key=0, style=solid];
m35_235 -> m35_236  [key=0, style=solid, color=red];
m35_235 -> m35_92  [key=2, style=dotted];
m35_236 -> m35_237  [key=0, style=solid, color=red];
m35_236 -> m35_93  [key=2, style=dotted, color=red];
m35_237 -> m35_238  [key=0, style=solid];
m35_237 -> m35_94  [key=2, style=dotted];
m35_237 -> m35_239  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_238 -> m35_234  [key=0, style=bold, color=blue];
m35_175 -> m35_176  [key=0, style=solid];
m35_176 -> m35_177  [key=0, style=solid];
m35_176 -> m35_21  [key=2, style=dotted];
m35_176 -> m35_22  [key=2, style=dotted];
m35_176 -> m35_181  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_177 -> m35_178  [key=0, style=solid, color=red];
m35_177 -> m35_92  [key=2, style=dotted];
m35_178 -> m35_179  [key=0, style=solid, color=red];
m35_178 -> m35_93  [key=2, style=dotted, color=red];
m35_179 -> m35_180  [key=0, style=solid];
m35_179 -> m35_94  [key=2, style=dotted];
m35_179 -> m35_184  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_180 -> m35_175  [key=0, style=bold, color=blue];
m35_187 -> m35_188  [key=0, style=solid];
m35_188 -> m35_189  [key=0, style=solid, color=red];
m35_188 -> m35_92  [key=2, style=dotted];
m35_189 -> m35_190  [key=0, style=solid, color=red];
m35_189 -> m35_93  [key=2, style=dotted, color=red];
m35_190 -> m35_191  [key=0, style=solid];
m35_190 -> m35_94  [key=2, style=dotted];
m35_190 -> m35_192  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_191 -> m35_187  [key=0, style=bold, color=blue];
m35_65 -> m35_66  [key=0, style=solid, color=red];
m35_66 -> m35_67  [key=0, style=solid, color=red];
m35_66 -> m35_38  [key=2, style=dotted, color=red];
m35_66 -> m35_69  [key=1, style=dashed, color=red, label="lambda expression"];
m35_67 -> m35_68  [key=0, style=solid, color=red];
m35_67 -> m35_60  [key=2, style=dotted, color=red];
m35_68 -> m35_65  [key=0, style=bold, color=blue];
m35_115 -> m35_116  [key=0, style=solid];
m35_116 -> m35_117  [key=0, style=solid];
m35_116 -> m35_21  [key=2, style=dotted];
m35_116 -> m35_38  [key=2, style=dotted];
m35_116 -> m35_122  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_117 -> m35_118  [key=0, style=solid, color=red];
m35_117 -> m35_92  [key=2, style=dotted];
m35_117 -> m35_126  [key=1, style=dashed, color=red, label=worker];
m35_118 -> m35_119  [key=0, style=solid, color=red];
m35_118 -> m35_38  [key=2, style=dotted, color=red];
m35_118 -> m35_125  [key=1, style=dashed, color=red, label="lambda expression"];
m35_119 -> m35_120  [key=0, style=solid];
m35_119 -> m35_94  [key=2, style=dotted];
m35_119 -> m35_128  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_120 -> m35_121  [key=0, style=solid];
m35_120 -> m35_94  [key=2, style=dotted];
m35_120 -> m35_131  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_121 -> m35_115  [key=0, style=bold, color=blue];
m35_214 -> m35_215  [key=0, style=solid];
m35_215 -> m35_216  [key=0, style=solid];
m35_215 -> m35_21  [key=2, style=dotted];
m35_215 -> m35_38  [key=2, style=dotted];
m35_215 -> m35_222  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_216 -> m35_217  [key=0, style=solid, color=red];
m35_216 -> m35_92  [key=2, style=dotted];
m35_216 -> m35_226  [key=1, style=dashed, color=red, label=worker];
m35_217 -> m35_218  [key=0, style=solid, color=red];
m35_217 -> m35_221  [key=2, style=dotted, color=red];
m35_217 -> m35_225  [key=1, style=dashed, color=red, label="lambda expression"];
m35_218 -> m35_219  [key=0, style=solid];
m35_218 -> m35_94  [key=2, style=dotted];
m35_218 -> m35_228  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_219 -> m35_220  [key=0, style=solid];
m35_219 -> m35_94  [key=2, style=dotted];
m35_219 -> m35_231  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_220 -> m35_214  [key=0, style=bold, color=blue];
m35_92 -> m35_295  [key=0, style=solid, color=red];
m35_295 -> m35_296  [key=0, style=solid, color=red];
m35_295 -> m35_64  [key=2, style=dotted, color=red];
m35_296 -> m35_92  [key=0, style=bold, color=blue];
m35_56 -> m35_57  [key=0, style=solid, color=red];
m35_57 -> m35_58  [key=0, style=solid, color=red];
m35_57 -> m35_38  [key=2, style=dotted, color=red];
m35_57 -> m35_61  [key=1, style=dashed, color=red, label="lambda expression"];
m35_58 -> m35_59  [key=0, style=solid];
m35_58 -> m35_60  [key=2, style=dotted];
m35_59 -> m35_56  [key=0, style=bold, color=blue];
m35_264 -> m35_265  [key=0, style=solid];
m35_265 -> m35_266  [key=0, style=solid];
m35_265 -> m35_252  [key=2, style=dotted];
m35_265 -> m35_269  [key=1, style=dashed, color=darkseagreen4, label=exception];
m35_265 -> m35_276  [key=1, style=dashed, color=darkseagreen4, label=exception];
m35_265 -> m35_279  [key=1, style=dashed, color=darkseagreen4, label=exception];
m35_266 -> m35_267  [key=0, style=solid];
m35_266 -> m35_21  [key=2, style=dotted];
m35_266 -> m35_271  [key=2, style=dotted];
m35_266 -> m35_253  [key=2, style=dotted];
m35_266 -> m35_272  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_269 -> m35_270  [key=0, style=solid];
m35_269 -> m35_94  [key=2, style=dotted];
m35_269 -> m35_275  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_267 -> m35_268  [key=0, style=solid, color=red];
m35_267 -> m35_92  [key=2, style=dotted];
m35_268 -> m35_269  [key=0, style=solid, color=red];
m35_268 -> m35_93  [key=2, style=dotted, color=red];
m35_270 -> m35_264  [key=0, style=bold, color=blue];
m35_0 -> m35_1  [key=0, style=solid, color=red];
m35_1 -> m35_2  [key=0, style=solid, color=red];
m35_1 -> m35_16  [key=2, style=dotted, color=red];
m35_2 -> m35_3  [key=0, style=solid, color=red];
m35_2 -> m35_17  [key=2, style=dotted, color=red];
m35_3 -> m35_4  [key=0, style=solid];
m35_3 -> m35_18  [key=2, style=dotted];
m35_4 -> m35_5  [key=0, style=solid];
m35_4 -> m35_19  [key=2, style=dotted];
m35_5 -> m35_6  [key=0, style=solid, color=red];
m35_5 -> m35_20  [key=2, style=dotted];
m35_6 -> m35_7  [key=0, style=solid, color=red];
m35_6 -> m35_21  [key=2, style=dotted, color=red];
m35_6 -> m35_22  [key=2, style=dotted, color=red];
m35_6 -> m35_28  [key=1, style=dashed, color=red, label="lambda expression"];
m35_7 -> m35_8  [key=0, style=solid];
m35_7 -> m35_23  [key=2, style=dotted];
m35_8 -> m35_9  [key=0, style=solid, color=red];
m35_8 -> m35_21  [key=2, style=dotted];
m35_8 -> m35_22  [key=2, style=dotted];
m35_8 -> m35_32  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_9 -> m35_10  [key=0, style=solid, color=red];
m35_9 -> m35_21  [key=2, style=dotted, color=red];
m35_9 -> m35_22  [key=2, style=dotted, color=red];
m35_9 -> m35_35  [key=1, style=dashed, color=red, label="lambda expression"];
m35_10 -> m35_11  [key=0, style=solid];
m35_10 -> m35_21  [key=2, style=dotted];
m35_10 -> m35_24  [key=2, style=dotted];
m35_10 -> m35_25  [key=2, style=dotted];
m35_10 -> m35_22  [key=2, style=dotted];
m35_10 -> m35_40  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_10 -> m35_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_11 -> m35_12  [key=0, style=solid];
m35_11 -> m35_26  [key=2, style=dotted];
m35_12 -> m35_13  [key=0, style=solid];
m35_12 -> m35_21  [key=2, style=dotted];
m35_12 -> m35_22  [key=2, style=dotted];
m35_12 -> m35_48  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_13 -> m35_14  [key=0, style=solid, color=red];
m35_13 -> m35_21  [key=2, style=dotted];
m35_13 -> m35_22  [key=2, style=dotted];
m35_13 -> m35_52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_14 -> m35_15  [key=0, style=solid, color=red];
m35_14 -> m35_27  [key=2, style=dotted, color=red];
m35_15 -> m35_0  [key=0, style=bold, color=blue];
m35_86 -> m35_87  [key=0, style=solid];
m35_87 -> m35_88  [key=0, style=solid, color=red];
m35_87 -> m35_92  [key=2, style=dotted];
m35_88 -> m35_89  [key=0, style=solid, color=red];
m35_88 -> m35_93  [key=2, style=dotted, color=red];
m35_89 -> m35_90  [key=0, style=solid, color=red];
m35_89 -> m35_94  [key=2, style=dotted, color=red];
m35_89 -> m35_95  [key=1, style=dashed, color=red, label="lambda expression"];
m35_90 -> m35_91  [key=0, style=solid];
m35_90 -> m35_94  [key=2, style=dotted];
m35_90 -> m35_98  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_91 -> m35_86  [key=0, style=bold, color=blue];
m35_281 -> m35_282  [key=0, style=solid];
m35_282 -> m35_283  [key=0, style=solid];
m35_282 -> m35_21  [key=2, style=dotted];
m35_282 -> m35_24  [key=2, style=dotted];
m35_282 -> m35_287  [key=2, style=dotted];
m35_282 -> m35_288  [key=2, style=dotted];
m35_282 -> m35_22  [key=2, style=dotted];
m35_282 -> m35_289  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_283 -> m35_284  [key=0, style=solid, color=red];
m35_283 -> m35_92  [key=2, style=dotted];
m35_284 -> m35_285  [key=0, style=solid, color=red];
m35_284 -> m35_93  [key=2, style=dotted, color=red];
m35_285 -> m35_286  [key=0, style=solid];
m35_285 -> m35_94  [key=2, style=dotted];
m35_285 -> m35_292  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_286 -> m35_281  [key=0, style=bold, color=blue];
m35_292 -> m35_293  [key=0, style=solid];
m35_28 -> m35_29  [key=0, style=solid, color=red];
m35_32 -> m35_33  [key=0, style=solid];
m35_35 -> m35_36  [key=0, style=solid, color=red];
m35_40 -> m35_41  [key=0, style=solid];
m35_44 -> m35_45  [key=0, style=solid];
m35_48 -> m35_49  [key=0, style=solid];
m35_52 -> m35_53  [key=0, style=solid];
m35_29 -> m35_30  [key=0, style=solid, color=red];
m35_29 -> m35_31  [key=2, style=dotted, color=red];
m35_30 -> m35_28  [key=0, style=bold, color=blue];
m35_33 -> m35_34  [key=0, style=solid];
m35_34 -> m35_32  [key=0, style=bold, color=blue];
m35_36 -> m35_37  [key=0, style=solid, color=red];
m35_36 -> m35_38  [key=2, style=dotted, color=red];
m35_36 -> m35_39  [key=2, style=dotted, color=red];
m35_37 -> m35_35  [key=0, style=bold, color=blue];
m35_41 -> m35_42  [key=0, style=solid];
m35_41 -> m35_43  [key=2, style=dotted];
m35_42 -> m35_40  [key=0, style=bold, color=blue];
m35_45 -> m35_46  [key=0, style=solid];
m35_45 -> m35_47  [key=2, style=dotted];
m35_46 -> m35_44  [key=0, style=bold, color=blue];
m35_49 -> m35_50  [key=0, style=solid];
m35_49 -> m35_51  [key=2, style=dotted];
m35_50 -> m35_48  [key=0, style=bold, color=blue];
m35_53 -> m35_54  [key=0, style=solid];
m35_53 -> m35_38  [key=2, style=dotted];
m35_53 -> m35_55  [key=2, style=dotted];
m35_54 -> m35_52  [key=0, style=bold, color=blue];
m35_61 -> m35_62  [key=0, style=solid, color=red];
m35_62 -> m35_63  [key=0, style=solid, color=red];
m35_62 -> m35_64  [key=2, style=dotted, color=red];
m35_63 -> m35_61  [key=0, style=bold, color=blue];
m35_69 -> m35_70  [key=0, style=solid, color=red];
m35_70 -> m35_71  [key=0, style=solid, color=red];
m35_70 -> m35_64  [key=2, style=dotted, color=red];
m35_71 -> m35_69  [key=0, style=bold, color=blue];
m35_76 -> m35_77  [key=0, style=solid, color=red];
m35_77 -> m35_78  [key=0, style=solid, color=red];
m35_77 -> m35_64  [key=2, style=dotted, color=red];
m35_78 -> m35_76  [key=0, style=bold, color=blue];
m35_83 -> m35_84  [key=0, style=solid, color=red];
m35_84 -> m35_85  [key=0, style=solid, color=red];
m35_84 -> m35_64  [key=2, style=dotted, color=red];
m35_85 -> m35_83  [key=0, style=bold, color=blue];
m35_95 -> m35_96  [key=0, style=solid, color=red];
m35_98 -> m35_99  [key=0, style=solid];
m35_96 -> m35_97  [key=0, style=solid, color=red];
m35_96 -> m35_31  [key=2, style=dotted, color=red];
m35_97 -> m35_95  [key=0, style=bold, color=blue];
m35_99 -> m35_100  [key=0, style=solid];
m35_99 -> m35_101  [key=2, style=dotted];
m35_100 -> m35_98  [key=0, style=bold, color=blue];
m35_108 -> m35_109  [key=0, style=solid, color=red];
m35_111 -> m35_112  [key=0, style=solid];
m35_109 -> m35_110  [key=0, style=solid, color=red];
m35_109 -> m35_39  [key=2, style=dotted, color=red];
m35_110 -> m35_108  [key=0, style=bold, color=blue];
m35_112 -> m35_113  [key=0, style=solid];
m35_112 -> m35_114  [key=2, style=dotted];
m35_113 -> m35_111  [key=0, style=bold, color=blue];
m35_122 -> m35_123  [key=0, style=solid];
m35_126 -> m35_127  [key=0, style=solid, color=red];
m35_126 -> m35_93  [key=2, style=dotted, color=red];
m35_125 -> m35_126  [key=0, style=solid, color=red];
m35_128 -> m35_129  [key=0, style=solid];
m35_131 -> m35_132  [key=0, style=solid];
m35_123 -> m35_124  [key=0, style=solid];
m35_123 -> m35_38  [key=2, style=dotted];
m35_123 -> m35_55  [key=2, style=dotted];
m35_124 -> m35_122  [key=0, style=bold, color=blue];
m35_127 -> m35_125  [key=0, style=bold, color=blue];
m35_129 -> m35_130  [key=0, style=solid];
m35_129 -> m35_114  [key=2, style=dotted];
m35_130 -> m35_128  [key=0, style=bold, color=blue];
m35_132 -> m35_133  [key=0, style=solid];
m35_132 -> m35_134  [key=2, style=dotted];
m35_133 -> m35_131  [key=0, style=bold, color=blue];
m35_143 -> m35_144  [key=0, style=solid];
m35_146 -> m35_147  [key=0, style=solid];
m35_150 -> m35_151  [key=0, style=solid];
m35_144 -> m35_145  [key=0, style=solid];
m35_144 -> m35_38  [key=2, style=dotted];
m35_144 -> m35_55  [key=2, style=dotted];
m35_145 -> m35_143  [key=0, style=bold, color=blue];
m35_147 -> m35_148  [key=0, style=solid];
m35_147 -> m35_38  [key=2, style=dotted];
m35_147 -> m35_149  [key=2, style=dotted];
m35_148 -> m35_146  [key=0, style=bold, color=blue];
m35_151 -> m35_152  [key=0, style=solid];
m35_151 -> m35_38  [key=2, style=dotted];
m35_151 -> m35_55  [key=2, style=dotted];
m35_152 -> m35_150  [key=0, style=bold, color=blue];
m35_158 -> m35_159  [key=0, style=solid, color=red];
m35_159 -> m35_160  [key=0, style=solid, color=red];
m35_159 -> m35_38  [key=2, style=dotted, color=red];
m35_159 -> m35_55  [key=2, style=dotted, color=red];
m35_159 -> m35_161  [key=1, style=dashed, color=red, label="lambda expression"];
m35_160 -> m35_158  [key=0, style=bold, color=blue];
m35_161 -> m35_162  [key=0, style=solid, color=red];
m35_162 -> m35_163  [key=0, style=solid, color=red];
m35_163 -> m35_161  [key=0, style=bold, color=blue];
m35_169 -> m35_170  [key=0, style=solid];
m35_170 -> m35_171  [key=0, style=solid];
m35_170 -> m35_38  [key=2, style=dotted];
m35_170 -> m35_55  [key=2, style=dotted];
m35_170 -> m35_172  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_171 -> m35_169  [key=0, style=bold, color=blue];
m35_172 -> m35_173  [key=0, style=solid];
m35_173 -> m35_174  [key=0, style=solid];
m35_174 -> m35_172  [key=0, style=bold, color=blue];
m35_181 -> m35_182  [key=0, style=solid];
m35_184 -> m35_185  [key=0, style=solid];
m35_182 -> m35_183  [key=0, style=solid];
m35_182 -> m35_38  [key=2, style=dotted];
m35_182 -> m35_55  [key=2, style=dotted];
m35_183 -> m35_181  [key=0, style=bold, color=blue];
m35_185 -> m35_186  [key=0, style=solid];
m35_185 -> m35_38  [key=2, style=dotted];
m35_185 -> m35_149  [key=2, style=dotted];
m35_186 -> m35_184  [key=0, style=bold, color=blue];
m35_192 -> m35_193  [key=0, style=solid];
m35_193 -> m35_194  [key=0, style=solid];
m35_193 -> m35_38  [key=2, style=dotted];
m35_193 -> m35_149  [key=2, style=dotted];
m35_194 -> m35_192  [key=0, style=bold, color=blue];
m35_202 -> m35_203  [key=0, style=solid];
m35_206 -> m35_207  [key=0, style=solid, color=red];
m35_206 -> m35_93  [key=2, style=dotted, color=red];
m35_205 -> m35_206  [key=0, style=solid, color=red];
m35_208 -> m35_209  [key=0, style=solid];
m35_211 -> m35_212  [key=0, style=solid];
m35_203 -> m35_204  [key=0, style=solid];
m35_203 -> m35_38  [key=2, style=dotted];
m35_203 -> m35_149  [key=2, style=dotted];
m35_204 -> m35_202  [key=0, style=bold, color=blue];
m35_207 -> m35_205  [key=0, style=bold, color=blue];
m35_209 -> m35_210  [key=0, style=solid];
m35_209 -> m35_38  [key=2, style=dotted];
m35_209 -> m35_55  [key=2, style=dotted];
m35_210 -> m35_208  [key=0, style=bold, color=blue];
m35_212 -> m35_213  [key=0, style=solid];
m35_212 -> m35_134  [key=2, style=dotted];
m35_213 -> m35_211  [key=0, style=bold, color=blue];
m35_222 -> m35_223  [key=0, style=solid];
m35_226 -> m35_227  [key=0, style=solid, color=red];
m35_226 -> m35_93  [key=2, style=dotted, color=red];
m35_225 -> m35_226  [key=0, style=solid, color=red];
m35_228 -> m35_229  [key=0, style=solid];
m35_231 -> m35_232  [key=0, style=solid];
m35_223 -> m35_224  [key=0, style=solid];
m35_223 -> m35_38  [key=2, style=dotted];
m35_223 -> m35_149  [key=2, style=dotted];
m35_224 -> m35_222  [key=0, style=bold, color=blue];
m35_227 -> m35_225  [key=0, style=bold, color=blue];
m35_229 -> m35_230  [key=0, style=solid];
m35_229 -> m35_114  [key=2, style=dotted];
m35_230 -> m35_228  [key=0, style=bold, color=blue];
m35_232 -> m35_233  [key=0, style=solid];
m35_232 -> m35_134  [key=2, style=dotted];
m35_233 -> m35_231  [key=0, style=bold, color=blue];
m35_239 -> m35_240  [key=0, style=solid];
m35_240 -> m35_241  [key=0, style=solid];
m35_240 -> m35_38  [key=2, style=dotted];
m35_240 -> m35_55  [key=2, style=dotted];
m35_240 -> m35_242  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_241 -> m35_239  [key=0, style=bold, color=blue];
m35_242 -> m35_243  [key=0, style=solid];
m35_243 -> m35_244  [key=0, style=solid];
m35_244 -> m35_242  [key=0, style=bold, color=blue];
m35_258 -> m35_259  [key=0, style=solid];
m35_258 -> m35_38  [key=2, style=dotted];
m35_258 -> m35_55  [key=2, style=dotted];
m35_258 -> m35_260  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_261 -> m35_262  [key=0, style=solid];
m35_261 -> m35_263  [key=2, style=dotted];
m35_254 -> m35_255  [key=0, style=solid];
m35_257 -> m35_258  [key=0, style=solid];
m35_255 -> m35_256  [key=0, style=solid];
m35_255 -> m35_38  [key=2, style=dotted];
m35_255 -> m35_149  [key=2, style=dotted];
m35_256 -> m35_254  [key=0, style=bold, color=blue];
m35_259 -> m35_257  [key=0, style=bold, color=blue];
m35_260 -> m35_261  [key=0, style=solid];
m35_262 -> m35_260  [key=0, style=bold, color=blue];
m35_276 -> m35_277  [key=0, style=solid];
m35_276 -> m35_38  [key=2, style=dotted];
m35_276 -> m35_55  [key=2, style=dotted];
m35_276 -> m35_278  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_279 -> m35_280  [key=0, style=solid];
m35_272 -> m35_273  [key=0, style=solid];
m35_275 -> m35_276  [key=0, style=solid];
m35_273 -> m35_274  [key=0, style=solid];
m35_273 -> m35_38  [key=2, style=dotted];
m35_273 -> m35_149  [key=2, style=dotted];
m35_274 -> m35_272  [key=0, style=bold, color=blue];
m35_277 -> m35_275  [key=0, style=bold, color=blue];
m35_278 -> m35_279  [key=0, style=solid];
m35_280 -> m35_278  [key=0, style=bold, color=blue];
m35_289 -> m35_290  [key=0, style=solid];
m35_290 -> m35_291  [key=0, style=solid];
m35_290 -> m35_43  [key=2, style=dotted];
m35_291 -> m35_289  [key=0, style=bold, color=blue];
m35_293 -> m35_294  [key=0, style=solid];
m35_293 -> m35_38  [key=2, style=dotted];
m35_293 -> m35_55  [key=2, style=dotted];
m35_294 -> m35_292  [key=0, style=bold, color=blue];
m35_153 -> m35_154  [key=0, style=solid];
m35_154 -> m35_155  [key=0, style=solid, color=red];
m35_154 -> m35_92  [key=2, style=dotted];
m35_155 -> m35_156  [key=0, style=solid, color=red];
m35_155 -> m35_93  [key=2, style=dotted, color=red];
m35_156 -> m35_157  [key=0, style=solid, color=red];
m35_156 -> m35_94  [key=2, style=dotted, color=red];
m35_156 -> m35_158  [key=1, style=dashed, color=red, label="lambda expression"];
m35_157 -> m35_153  [key=0, style=bold, color=blue];
m35_135 -> m35_136  [key=0, style=solid];
m35_136 -> m35_137  [key=0, style=solid];
m35_136 -> m35_21  [key=2, style=dotted];
m35_136 -> m35_142  [key=2, style=dotted];
m35_136 -> m35_22  [key=2, style=dotted];
m35_136 -> m35_143  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_137 -> m35_138  [key=0, style=solid];
m35_137 -> m35_21  [key=2, style=dotted];
m35_137 -> m35_142  [key=2, style=dotted];
m35_137 -> m35_146  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_138 -> m35_139  [key=0, style=solid];
m35_138 -> m35_21  [key=2, style=dotted];
m35_138 -> m35_142  [key=2, style=dotted];
m35_138 -> m35_22  [key=2, style=dotted];
m35_138 -> m35_150  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_139 -> m35_140  [key=0, style=solid, color=red];
m35_139 -> m35_92  [key=2, style=dotted];
m35_140 -> m35_141  [key=0, style=solid, color=red];
m35_140 -> m35_93  [key=2, style=dotted, color=red];
m35_141 -> m35_135  [key=0, style=bold, color=blue];
m35_102 -> m35_103  [key=0, style=solid];
m35_103 -> m35_104  [key=0, style=solid, color=red];
m35_103 -> m35_92  [key=2, style=dotted];
m35_104 -> m35_105  [key=0, style=solid, color=red];
m35_104 -> m35_93  [key=2, style=dotted, color=red];
m35_105 -> m35_106  [key=0, style=solid, color=red];
m35_105 -> m35_94  [key=2, style=dotted, color=red];
m35_105 -> m35_108  [key=1, style=dashed, color=red, label="lambda expression"];
m35_106 -> m35_107  [key=0, style=solid];
m35_106 -> m35_94  [key=2, style=dotted];
m35_106 -> m35_111  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_107 -> m35_102  [key=0, style=bold, color=blue];
m35_195 -> m35_196  [key=0, style=solid];
m35_196 -> m35_197  [key=0, style=solid];
m35_196 -> m35_21  [key=2, style=dotted];
m35_196 -> m35_38  [key=2, style=dotted];
m35_196 -> m35_202  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_197 -> m35_198  [key=0, style=solid, color=red];
m35_197 -> m35_92  [key=2, style=dotted];
m35_197 -> m35_206  [key=1, style=dashed, color=red, label=worker];
m35_198 -> m35_199  [key=0, style=solid, color=red];
m35_198 -> m35_38  [key=2, style=dotted, color=red];
m35_198 -> m35_205  [key=1, style=dashed, color=red, label="lambda expression"];
m35_199 -> m35_200  [key=0, style=solid];
m35_199 -> m35_94  [key=2, style=dotted];
m35_199 -> m35_208  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_200 -> m35_201  [key=0, style=solid];
m35_200 -> m35_94  [key=2, style=dotted];
m35_200 -> m35_211  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m35_201 -> m35_195  [key=0, style=bold, color=blue];
m35_47 -> m35_297  [key=0, style=solid];
m35_297 -> m35_47  [key=0, style=bold, color=blue];
m35_72 -> m35_73  [key=0, style=solid, color=red];
m35_73 -> m35_74  [key=0, style=solid, color=red];
m35_73 -> m35_38  [key=2, style=dotted, color=red];
m35_73 -> m35_76  [key=1, style=dashed, color=red, label="lambda expression"];
m35_74 -> m35_75  [key=0, style=solid];
m35_74 -> m35_60  [key=2, style=dotted];
m35_75 -> m35_72  [key=0, style=bold, color=blue];
m35_298 -> m35_1  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_2  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_6  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_9  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_36  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_49  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_14  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_57  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_62  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_66  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_70  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_73  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_77  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_80  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_84  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_87  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_88  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_89  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_90  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_103  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_104  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_105  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_109  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_106  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_116  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_117  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_118  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_126  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_119  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_120  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_136  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_137  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_138  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_139  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_140  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_154  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_155  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_156  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_159  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_162  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_165  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_166  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_167  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_176  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_177  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_178  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_179  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_188  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_189  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_190  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_196  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_197  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_198  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_206  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_199  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_200  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_215  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_216  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_217  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_226  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_218  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_219  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_235  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_236  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_237  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_247  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_248  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_249  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_250  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_266  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_267  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_268  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_269  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_282  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_283  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_284  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_285  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_298 -> m35_295  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m35_299 -> m35_126  [key=1, style=dashed, color=red, label=worker];
m35_300 -> m35_206  [key=1, style=dashed, color=red, label=worker];
m35_301 -> m35_226  [key=1, style=dashed, color=red, label=worker];
m35_302 -> m35_258  [key=1, style=dashed, color=darkseagreen4, label=exception];
m35_302 -> m35_261  [key=1, style=dashed, color=darkseagreen4, label=exception];
m35_303 -> m35_276  [key=1, style=dashed, color=darkseagreen4, label=exception];
m35_303 -> m35_279  [key=1, style=dashed, color=darkseagreen4, label=exception];
}
