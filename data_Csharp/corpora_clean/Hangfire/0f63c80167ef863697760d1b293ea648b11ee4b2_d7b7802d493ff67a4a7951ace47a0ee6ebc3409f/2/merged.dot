digraph  {
n0 [label="Entry HangFire.SqlServer.IPersistentJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="26-26", cluster="HangFire.SqlServer.IPersistentJobQueue.Dequeue(string[], System.Threading.CancellationToken)"];
n1 [label="Exit HangFire.SqlServer.IPersistentJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="26-26", cluster="HangFire.SqlServer.IPersistentJobQueue.Dequeue(string[], System.Threading.CancellationToken)"];
n2 [label="Entry HangFire.SqlServer.IPersistentJobQueue.Enqueue(System.Collections.Generic.Queue<System.Action<SqlConnection>>, string, string)", span="27-27", cluster="HangFire.SqlServer.IPersistentJobQueue.Enqueue(System.Collections.Generic.Queue<System.Action<SqlConnection>>, string, string)"];
n3 [label="Exit HangFire.SqlServer.IPersistentJobQueue.Enqueue(System.Collections.Generic.Queue<System.Action<SqlConnection>>, string, string)", span="27-27", cluster="HangFire.SqlServer.IPersistentJobQueue.Enqueue(System.Collections.Generic.Queue<System.Action<SqlConnection>>, string, string)"];
m1_8 [label="Entry HangFire.Storage.IStorageConnection.GetJobParameter(string, string)", span="33-33", cluster="HangFire.Storage.IStorageConnection.GetJobParameter(string, string)", file="IStorageConnection.cs"];
m1_9 [label="Exit HangFire.Storage.IStorageConnection.GetJobParameter(string, string)", span="33-33", cluster="HangFire.Storage.IStorageConnection.GetJobParameter(string, string)", file="IStorageConnection.cs"];
m1_4 [label="Entry HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="30-30", cluster="HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="IStorageConnection.cs"];
m1_5 [label="Exit HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="30-30", cluster="HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="IStorageConnection.cs"];
m1_14 [label="Entry HangFire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="38-38", cluster="HangFire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="IStorageConnection.cs"];
m1_15 [label="Exit HangFire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="38-38", cluster="HangFire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="IStorageConnection.cs"];
m1_0 [label="Entry HangFire.Storage.IStorageConnection.CreateWriteTransaction()", span="26-26", cluster="HangFire.Storage.IStorageConnection.CreateWriteTransaction()", file="IStorageConnection.cs"];
m1_1 [label="Exit HangFire.Storage.IStorageConnection.CreateWriteTransaction()", span="26-26", cluster="HangFire.Storage.IStorageConnection.CreateWriteTransaction()", file="IStorageConnection.cs"];
m1_20 [label="Entry HangFire.Storage.IStorageConnection.Heartbeat(string)", span="42-42", cluster="HangFire.Storage.IStorageConnection.Heartbeat(string)", file="IStorageConnection.cs"];
m1_21 [label="Exit HangFire.Storage.IStorageConnection.Heartbeat(string)", span="42-42", cluster="HangFire.Storage.IStorageConnection.Heartbeat(string)", file="IStorageConnection.cs"];
m1_10 [label="Entry HangFire.Storage.IStorageConnection.AcquireJobLock(string)", span="35-35", cluster="HangFire.Storage.IStorageConnection.AcquireJobLock(string)", file="IStorageConnection.cs"];
m1_11 [label="Exit HangFire.Storage.IStorageConnection.AcquireJobLock(string)", span="35-35", cluster="HangFire.Storage.IStorageConnection.AcquireJobLock(string)", file="IStorageConnection.cs"];
m1_22 [label="Entry HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="43-43", cluster="HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="IStorageConnection.cs"];
m1_23 [label="Exit HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="43-43", cluster="HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="IStorageConnection.cs"];
m1_12 [label="Entry HangFire.Storage.IStorageConnection.GetJobData(string)", span="36-36", cluster="HangFire.Storage.IStorageConnection.GetJobData(string)", file="IStorageConnection.cs"];
m1_13 [label="Exit HangFire.Storage.IStorageConnection.GetJobData(string)", span="36-36", cluster="HangFire.Storage.IStorageConnection.GetJobData(string)", file="IStorageConnection.cs"];
m1_18 [label="Entry HangFire.Storage.IStorageConnection.RemoveServer(string)", span="41-41", cluster="HangFire.Storage.IStorageConnection.RemoveServer(string)", file="IStorageConnection.cs"];
m1_19 [label="Exit HangFire.Storage.IStorageConnection.RemoveServer(string)", span="41-41", cluster="HangFire.Storage.IStorageConnection.RemoveServer(string)", file="IStorageConnection.cs"];
m1_16 [label="Entry HangFire.Storage.IStorageConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="40-40", cluster="HangFire.Storage.IStorageConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="IStorageConnection.cs"];
m1_17 [label="Exit HangFire.Storage.IStorageConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="40-40", cluster="HangFire.Storage.IStorageConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="IStorageConnection.cs"];
m1_2 [label="Entry HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="28-28", cluster="HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="IStorageConnection.cs"];
m1_3 [label="Exit HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="28-28", cluster="HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="IStorageConnection.cs"];
m1_6 [label="Entry HangFire.Storage.IStorageConnection.SetJobParameter(string, string, string)", span="32-32", cluster="HangFire.Storage.IStorageConnection.SetJobParameter(string, string, string)", file="IStorageConnection.cs"];
m1_7 [label="Exit HangFire.Storage.IStorageConnection.SetJobParameter(string, string, string)", span="32-32", cluster="HangFire.Storage.IStorageConnection.SetJobParameter(string, string, string)", file="IStorageConnection.cs"];
m2_5 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="MessageQueueJobQueue.cs"];
m2_6 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="MessageQueueJobQueue.cs"];
m2_0 [label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="MessageQueueJobQueue.cs"];
m2_1 [label="QueuePollInterval = TimeSpan.FromSeconds(15)", span="26-26", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=red, community=0, file="MessageQueueJobQueue.cs"];
m2_2 [label="InvisibilityTimeout = TimeSpan.FromMinutes(5)", span="27-27", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=red, community=0, file="MessageQueueJobQueue.cs"];
m2_3 [label="PrepareSchemaIfNecessary = true", span="29-29", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=red, community=0, file="MessageQueueJobQueue.cs"];
m2_4 [label="Exit HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="MessageQueueJobQueue.cs"];
m2_7 [label="HangFire.SqlServer.SqlServerStorageOptions", span="", file="MessageQueueJobQueue.cs"];
m3_0 [label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string)", span="4-4", cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string)", file="MessageQueueProcessingJob.cs"];
m3_1 [label="Type = type", span="7-7", cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string)", color=red, community=0, file="MessageQueueProcessingJob.cs"];
m3_2 [label="Method = method", span="8-8", cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string)", color=red, community=0, file="MessageQueueProcessingJob.cs"];
m3_3 [label="ParameterTypes = parameterTypes", span="9-9", cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string)", color=red, community=0, file="MessageQueueProcessingJob.cs"];
m3_4 [label="Exit HangFire.Storage.InvocationData.InvocationData(string, string, string)", span="4-4", cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string)", file="MessageQueueProcessingJob.cs"];
m4_0 [label="Entry Hangfire.Client.IJobCreator.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", span="24-24", cluster="Hangfire.Client.IJobCreator.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="Program.cs"];
m4_1 [label="Exit Hangfire.Client.IJobCreator.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", span="24-24", cluster="Hangfire.Client.IJobCreator.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="Program.cs"];
m5_3 [label="Entry Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", span="36-36", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs"];
m5_4 [label="connection == null", span="38-38", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs"];
m5_5 [label="throw new ArgumentNullException(''connection'');", span="38-38", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs"];
m5_15 [label="var queueIndex = 0", span="54-54", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m5_146 [label="Entry int.ToString(System.IFormatProvider)", span="0-0", cluster="int.ToString(System.IFormatProvider)", file="RedisConnection.cs"];
m5_12 [label="InitialState = initialState", span="44-44", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs"];
m5_26 [label="return new RedisProcessingJob(this, jobId, queueName);", span="105-105", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", color=green, community=0, file="RedisConnection.cs"];
m5_18 [label="queueName = queues[queueIndex]", span="61-61", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m5_22 [label="jobId = Redis.BlockingPopAndPushItemBetweenLists(\r\n                        queueKey,\r\n                        fetchedKey,\r\n                        FetchTimeout)", span="68-71", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m5_23 [label="jobId = Redis.PopAndPushItemBetweenLists(\r\n                        queueKey, fetchedKey)", span="75-76", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m5_25 [label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                ''Fetched'',\r\n                JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="96-99", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m5_17 [label="Hangfire.Client.CreateContext", span="", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m5_19 [label="var queueKey = RedisStorage.Prefix + String.Format(''queue:{0}'', queueName)", span="63-63", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m5_20 [label="var fetchedKey = RedisStorage.Prefix + String.Format(''queue:{0}:dequeued'', queueName)", span="64-64", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m5_21 [label="queueIndex == 0", span="66-66", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m5_24 [label="jobId == null", span="79-79", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m5_13 [label="Items = new Dictionary<string, object>()", span="46-46", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs"];
m5_16 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RedisConnection.cs"];
m5_14 [label="Exit Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", span="36-36", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs"];
m5_27 [label="Exit HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="50-50", cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs"];
m5_59 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="RedisConnection.cs"];
m5_96 [label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", span="24-24", cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", file="RedisConnection.cs"];
m5_204 [label="Entry Unk.FromNullableStringTimestamp", span="", cluster="Unk.FromNullableStringTimestamp", file="RedisConnection.cs"];
m5_65 [label="Entry Unk.SetRangeInHash", span="", cluster="Unk.SetRangeInHash", file="RedisConnection.cs"];
m5_38 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="RedisConnection.cs"];
m5_94 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash", file="RedisConnection.cs"];
m5_203 [label="Entry Unk.FromStringTimestamp", span="", cluster="Unk.FromStringTimestamp", file="RedisConnection.cs"];
m5_171 [label="Entry HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", span="298-298", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m5_172 [label="var serverNames = Redis.GetAllItemsFromSet(RedisStorage.Prefix + ''servers'')", span="300-300", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m5_175 [label="var pipeline = Redis.CreatePipeline()", span="305-305", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m5_184 [label="RemoveServer(Redis, heartbeat.Key)", span="333-333", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m5_173 [label="var heartbeats = new Dictionary<string, Tuple<DateTime, DateTime?>>()", span="301-301", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m5_176 [label=serverNames, span="307-307", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m5_174 [label="var utcNow = DateTime.UtcNow", span="303-303", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m5_178 [label="pipeline.QueueCommand(\r\n                        x => x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat''),\r\n                        x => heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1]))))", span="311-319", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m5_179 [label="pipeline.Flush()", span="322-322", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m5_183 [label="utcNow > maxTime.Add(timeOut)", span="331-331", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m5_182 [label="var maxTime = new DateTime(\r\n                    Math.Max(heartbeat.Value.Item1.Ticks, (heartbeat.Value.Item2 ?? DateTime.MinValue).Ticks))", span="328-329", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m5_185 [label="removedServerCount++", span="334-334", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m5_180 [label="var removedServerCount = 0", span="325-325", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m5_181 [label=heartbeats, span="326-326", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m5_177 [label="var name = serverName", span="309-309", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m5_186 [label="return removedServerCount;", span="338-338", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m5_187 [label="Exit HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", span="298-298", cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs"];
m5_33 [label="Entry Unk.SetEntryInHash", span="", cluster="Unk.SetEntryInHash", file="RedisConnection.cs"];
m5_11 [label="Job = job", span="43-43", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs"];
m5_141 [label="Entry Unk.AddItemToSet", span="", cluster="Unk.AddItemToSet", file="RedisConnection.cs"];
m5_29 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="RedisConnection.cs"];
m5_120 [label="Entry Unk.RemoveEntryFromHash", span="", cluster="Unk.RemoveEntryFromHash", file="RedisConnection.cs"];
m5_30 [label="Entry Unk.BlockingPopAndPushItemBetweenLists", span="", cluster="Unk.BlockingPopAndPushItemBetweenLists", file="RedisConnection.cs"];
m5_168 [label="Entry HangFire.Redis.RedisConnection.Heartbeat(string)", span="290-290", cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="RedisConnection.cs"];
m5_169 [label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                ''Heartbeat'',\r\n                JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="292-295", cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="RedisConnection.cs"];
m5_170 [label="Exit HangFire.Redis.RedisConnection.Heartbeat(string)", span="290-290", cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="RedisConnection.cs"];
m5_167 [label="Entry Unk.RemoveEntry", span="", cluster="Unk.RemoveEntry", file="RedisConnection.cs"];
m5_157 [label="transaction.QueueCommand(x => x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId)))", span="282-284", cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs"];
m5_154 [label="Entry HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", span="274-274", cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs"];
m5_155 [label="var transaction = redis.CreateTransaction()", span="276-276", cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs"];
m5_156 [label="transaction.QueueCommand(x => x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId))", span="278-280", cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs"];
m5_158 [label="transaction.Commit()", span="286-286", cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs"];
m5_159 [label="Exit HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", span="274-274", cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs"];
m5_7 [label="throw new ArgumentNullException(''job'');", span="39-39", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs"];
m5_8 [label="initialState == null", span="40-40", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs"];
m5_9 [label="throw new ArgumentNullException(''initialState'');", span="40-40", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs"];
m5_102 [label="Entry HangFire.Redis.RedisConnection.GetJobParameter(string, string)", span="208-208", cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="RedisConnection.cs"];
m5_103 [label="return Redis.GetValueFromHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                name);", span="210-212", cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="RedisConnection.cs"];
m5_104 [label="Exit HangFire.Redis.RedisConnection.GetJobParameter(string, string)", span="208-208", cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="RedisConnection.cs"];
m5_69 [label="Entry Unk.ExpireEntryIn", span="", cluster="Unk.ExpireEntryIn", file="RedisConnection.cs"];
m5_190 [label="Entry Unk.Flush", span="", cluster="Unk.Flush", file="RedisConnection.cs"];
m5_56 [label="Entry System.Guid.ToString()", span="0-0", cluster="System.Guid.ToString()", file="RedisConnection.cs"];
m5_28 [label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0", cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="RedisConnection.cs"];
m5_10 [label="Connection = connection", span="42-42", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs"];
m5_205 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="RedisConnection.cs"];
m5_193 [label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0", cluster="System.DateTime.Add(System.TimeSpan)", file="RedisConnection.cs"];
m5_129 [label="Entry HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="242-242", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs"];
m5_130 [label="var transaction = Redis.CreateTransaction()", span="244-244", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs"];
m5_131 [label="transaction.QueueCommand(x => x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId))", span="246-247", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs"];
m5_132 [label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', context.WorkerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        }))", span="249-255", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs"];
m5_135 [label="transaction.QueueCommand(x => x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1))", span="260-262", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs"];
m5_136 [label="transaction.Commit()", span="265-265", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs"];
m5_133 [label="context.Queues", span="257-257", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs"];
m5_134 [label="var queue1 = queue", span="259-259", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs"];
m5_137 [label="Exit HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="242-242", cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs"];
m5_145 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RedisConnection.cs"];
m5_202 [label="Entry System.Tuple<T1, T2>.Tuple(T1, T2)", span="0-0", cluster="System.Tuple<T1, T2>.Tuple(T1, T2)", file="RedisConnection.cs"];
m5_58 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="RedisConnection.cs"];
m5_150 [label="Entry Unk.AddItemToList", span="", cluster="Unk.AddItemToList", file="RedisConnection.cs"];
m5_110 [label="transaction.QueueCommand(x => x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                    ''Checked''))", span="227-229", cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs"];
m5_107 [label="var transaction = Redis.CreateTransaction()", span="217-217", cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs"];
m5_106 [label="Entry HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", span="215-215", cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs"];
m5_108 [label="transaction.QueueCommand(x => x.RemoveItemFromList(\r\n                    String.Format(RedisStorage.Prefix + ''queue:{0}:dequeued'', queue),\r\n                    id,\r\n                    -1))", span="219-222", cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs"];
m5_109 [label="transaction.QueueCommand(x => x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                    ''Fetched''))", span="224-226", cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs"];
m5_111 [label="transaction.Commit()", span="231-231", cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs"];
m5_112 [label="Exit HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", span="215-215", cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs"];
m5_0 [label="Entry HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", span="33-33", cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="RedisConnection.cs"];
m5_1 [label="Redis = redis", span="35-35", cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="RedisConnection.cs"];
m5_2 [label="Exit HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", span="33-33", cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="RedisConnection.cs"];
m5_6 [label="job == null", span="39-39", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs"];
m5_191 [label="Entry System.DateTime.DateTime(long)", span="0-0", cluster="System.DateTime.DateTime(long)", file="RedisConnection.cs"];
m5_163 [label="Entry Unk.RemoveItemFromSet", span="", cluster="Unk.RemoveItemFromSet", file="RedisConnection.cs"];
m5_151 [label="Entry HangFire.Redis.RedisConnection.RemoveServer(string)", span="269-269", cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="RedisConnection.cs"];
m5_152 [label="RemoveServer(Redis, serverId)", span="271-271", cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="RedisConnection.cs"];
m5_153 [label="Exit HangFire.Redis.RedisConnection.RemoveServer(string)", span="269-269", cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="RedisConnection.cs"];
m5_192 [label="Entry System.Math.Max(long, long)", span="0-0", cluster="System.Math.Max(long, long)", file="RedisConnection.cs"];
m5_70 [label="Entry HangFire.Redis.RedisConnection.GetJobData(string)", span="149-149", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_71 [label="var storedData = Redis.GetAllEntriesFromHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id))", span="151-152", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_72 [label="storedData.Count == 0", span="154-154", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_78 [label="storedData.ContainsKey(''Type'')", span="161-161", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_79 [label="type = storedData[''Type'']", span="163-163", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_80 [label="storedData.ContainsKey(''Method'')", span="165-165", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_81 [label="method = storedData[''Method'']", span="167-167", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_82 [label="storedData.ContainsKey(''ParameterTypes'')", span="169-169", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_83 [label="parameterTypes = storedData[''ParameterTypes'']", span="171-171", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_84 [label="storedData.ContainsKey(''Arguments'')", span="173-173", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_85 [label="arguments = storedData[''Arguments'']", span="175-175", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_92 [label="return new JobData\r\n            {\r\n                Job = job,\r\n                State = storedData.ContainsKey(''State'') ? storedData[''State''] : null,\r\n                LoadException = loadException\r\n            };", span="192-197", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_74 [label="string type = null", span="156-156", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_75 [label="string method = null", span="157-157", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_76 [label="string parameterTypes = null", span="158-158", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_77 [label="string arguments = null", span="159-159", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_86 [label="Job job = null", span="178-178", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_87 [label="JobLoadException loadException = null", span="179-179", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_73 [label="return null;", span="154-154", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_88 [label="var invocationData = new InvocationData(type, method, parameterTypes, arguments)", span="181-181", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_89 [label="job = invocationData.Deserialize()", span="185-185", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_91 [label="loadException = ex", span="189-189", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_90 [label=JobLoadException, span="187-187", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_93 [label="Exit HangFire.Redis.RedisConnection.GetJobData(string)", span="149-149", cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs"];
m5_57 [label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65", cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="RedisConnection.cs"];
m5_160 [label="Entry lambda expression", span="278-280", cluster="lambda expression", file="RedisConnection.cs"];
m5_67 [label="x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn)", span="138-140", cluster="lambda expression", file="RedisConnection.cs"];
m5_63 [label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    storedParameters)", span="134-136", cluster="lambda expression", file="RedisConnection.cs"];
m5_114 [label="x.RemoveItemFromList(\r\n                    String.Format(RedisStorage.Prefix + ''queue:{0}:dequeued'', queue),\r\n                    id,\r\n                    -1)", span="219-222", cluster="lambda expression", file="RedisConnection.cs"];
m5_118 [label="x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                    ''Fetched'')", span="224-226", cluster="lambda expression", file="RedisConnection.cs"];
m5_122 [label="x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                    ''Checked'')", span="227-229", cluster="lambda expression", file="RedisConnection.cs"];
m5_143 [label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', context.WorkerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        })", span="249-255", cluster="lambda expression", file="RedisConnection.cs"];
m5_148 [label="x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1)", span="260-262", cluster="lambda expression", file="RedisConnection.cs"];
m5_165 [label="x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId))", span="282-284", cluster="lambda expression", file="RedisConnection.cs"];
m5_62 [label="Entry lambda expression", span="134-136", cluster="lambda expression", file="RedisConnection.cs"];
m5_66 [label="Entry lambda expression", span="138-140", cluster="lambda expression", file="RedisConnection.cs"];
m5_113 [label="Entry lambda expression", span="219-222", cluster="lambda expression", file="RedisConnection.cs"];
m5_117 [label="Entry lambda expression", span="224-226", cluster="lambda expression", file="RedisConnection.cs"];
m5_121 [label="Entry lambda expression", span="227-229", cluster="lambda expression", file="RedisConnection.cs"];
m5_139 [label="x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId)", span="246-247", cluster="lambda expression", file="RedisConnection.cs"];
m5_138 [label="Entry lambda expression", span="246-247", cluster="lambda expression", file="RedisConnection.cs"];
m5_142 [label="Entry lambda expression", span="249-255", cluster="lambda expression", file="RedisConnection.cs"];
m5_147 [label="Entry lambda expression", span="260-262", cluster="lambda expression", file="RedisConnection.cs"];
m5_161 [label="x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId)", span="278-280", cluster="lambda expression", file="RedisConnection.cs"];
m5_200 [label="heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1])))", span="315-319", cluster="lambda expression", file="RedisConnection.cs"];
m5_194 [label="Entry lambda expression", span="312-314", cluster="lambda expression", file="RedisConnection.cs"];
m5_199 [label="Entry lambda expression", span="315-319", cluster="lambda expression", file="RedisConnection.cs"];
m5_68 [label="Exit lambda expression", span="138-140", cluster="lambda expression", file="RedisConnection.cs"];
m5_64 [label="Exit lambda expression", span="134-136", cluster="lambda expression", file="RedisConnection.cs"];
m5_115 [label="Exit lambda expression", span="219-222", cluster="lambda expression", file="RedisConnection.cs"];
m5_119 [label="Exit lambda expression", span="224-226", cluster="lambda expression", file="RedisConnection.cs"];
m5_123 [label="Exit lambda expression", span="227-229", cluster="lambda expression", file="RedisConnection.cs"];
m5_144 [label="Exit lambda expression", span="249-255", cluster="lambda expression", file="RedisConnection.cs"];
m5_149 [label="Exit lambda expression", span="260-262", cluster="lambda expression", file="RedisConnection.cs"];
m5_164 [label="Entry lambda expression", span="282-284", cluster="lambda expression", file="RedisConnection.cs"];
m5_166 [label="Exit lambda expression", span="282-284", cluster="lambda expression", file="RedisConnection.cs"];
m5_140 [label="Exit lambda expression", span="246-247", cluster="lambda expression", file="RedisConnection.cs"];
m5_162 [label="Exit lambda expression", span="278-280", cluster="lambda expression", file="RedisConnection.cs"];
m5_201 [label="Exit lambda expression", span="315-319", cluster="lambda expression", file="RedisConnection.cs"];
m5_195 [label="x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat'')", span="312-314", cluster="lambda expression", file="RedisConnection.cs"];
m5_196 [label="Exit lambda expression", span="312-314", cluster="lambda expression", file="RedisConnection.cs"];
m5_32 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="RedisConnection.cs"];
m5_128 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault", file="RedisConnection.cs"];
m5_40 [label="Entry HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="115-115", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m5_49 [label="var transaction = Redis.CreateTransaction()", span="132-132", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m5_48 [label="storedParameters.Add(''CreatedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="130-130", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m5_50 [label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    storedParameters))", span="134-136", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m5_51 [label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn))", span="138-140", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m5_52 [label="transaction.Commit()", span="143-143", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m5_43 [label="var storedParameters = new Dictionary<string, string>(parameters)", span="125-125", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m5_47 [label="storedParameters.Add(''Arguments'', invocationData.Arguments)", span="129-129", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m5_41 [label="var jobId = Guid.NewGuid().ToString()", span="120-120", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m5_53 [label="return jobId;", span="146-146", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m5_42 [label="var invocationData = InvocationData.Serialize(job)", span="122-122", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m5_44 [label="storedParameters.Add(''Type'', invocationData.Type)", span="126-126", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m5_45 [label="storedParameters.Add(''Method'', invocationData.Method)", span="127-127", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m5_46 [label="storedParameters.Add(''ParameterTypes'', invocationData.ParameterTypes)", span="128-128", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m5_54 [label="Exit HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="115-115", cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs"];
m5_35 [label="Entry HangFire.Redis.RedisConnection.AcquireJobLock(string)", span="108-108", cluster="HangFire.Redis.RedisConnection.AcquireJobLock(string)", file="RedisConnection.cs"];
m5_36 [label="return Redis.AcquireLock(\r\n                RedisStorage.Prefix + String.Format(''job:{0}:state-lock'', jobId),\r\n                TimeSpan.FromMinutes(1));", span="110-112", cluster="HangFire.Redis.RedisConnection.AcquireJobLock(string)", file="RedisConnection.cs"];
m5_37 [label="Exit HangFire.Redis.RedisConnection.AcquireJobLock(string)", span="108-108", cluster="HangFire.Redis.RedisConnection.AcquireJobLock(string)", file="RedisConnection.cs"];
m5_189 [label="Entry Unk.CreatePipeline", span="", cluster="Unk.CreatePipeline", file="RedisConnection.cs"];
m5_99 [label="Entry HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", span="200-200", cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="RedisConnection.cs"];
m5_100 [label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                name,\r\n                value)", span="202-205", cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="RedisConnection.cs"];
m5_101 [label="Exit HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", span="200-200", cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="RedisConnection.cs"];
m5_116 [label="Entry Unk.RemoveItemFromList", span="", cluster="Unk.RemoveItemFromList", file="RedisConnection.cs"];
m5_55 [label="Entry System.Guid.NewGuid()", span="0-0", cluster="System.Guid.NewGuid()", file="RedisConnection.cs"];
m5_105 [label="Entry Unk.GetValueFromHash", span="", cluster="Unk.GetValueFromHash", file="RedisConnection.cs"];
m5_61 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="RedisConnection.cs"];
m5_188 [label="Entry Unk.GetAllItemsFromSet", span="", cluster="Unk.GetAllItemsFromSet", file="RedisConnection.cs"];
m5_98 [label="Entry HangFire.Storage.JobData.JobData()", span="20-20", cluster="HangFire.Storage.JobData.JobData()", file="RedisConnection.cs"];
m5_97 [label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38", cluster="HangFire.Storage.InvocationData.Deserialize()", file="RedisConnection.cs"];
m5_197 [label="Entry Unk.Format", span="", cluster="Unk.Format", file="RedisConnection.cs"];
m5_198 [label="Entry Unk.GetValuesFromHash", span="", cluster="Unk.GetValuesFromHash", file="RedisConnection.cs"];
m5_127 [label="Entry Unk.GetRangeFromSortedSetByLowestScore", span="", cluster="Unk.GetRangeFromSortedSetByLowestScore", file="RedisConnection.cs"];
m5_60 [label="Entry Unk.QueueCommand", span="", cluster="Unk.QueueCommand", file="RedisConnection.cs"];
m5_31 [label="Entry Unk.PopAndPushItemBetweenLists", span="", cluster="Unk.PopAndPushItemBetweenLists", file="RedisConnection.cs"];
m5_34 [label="Entry HangFire.Redis.RedisProcessingJob.RedisProcessingJob(HangFire.Redis.RedisConnection, string, string)", span="25-25", cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(HangFire.Redis.RedisConnection, string, string)", file="RedisConnection.cs"];
m5_39 [label="Entry Unk.AcquireLock", span="", cluster="Unk.AcquireLock", file="RedisConnection.cs"];
m5_124 [label="Entry HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="235-235", cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RedisConnection.cs"];
m5_125 [label="return Redis.GetRangeFromSortedSetByLowestScore(\r\n                RedisStorage.Prefix + key, fromScore, toScore, 0, 1)\r\n                .FirstOrDefault();", span="237-239", cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RedisConnection.cs"];
m5_126 [label="Exit HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="235-235", cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RedisConnection.cs"];
m5_95 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="RedisConnection.cs"];
m5_206 [label="HangFire.Redis.RedisConnection", span="", file="RedisConnection.cs"];
m5_207 [label=jobId, span="", file="RedisConnection.cs"];
m5_209 [label="System.TimeSpan", span="", file="RedisConnection.cs"];
m5_208 [label=storedParameters, span="", file="RedisConnection.cs"];
m5_210 [label=string, span="", file="RedisConnection.cs"];
m5_211 [label=string, span="", file="RedisConnection.cs"];
m5_212 [label=string, span="", file="RedisConnection.cs"];
m5_213 [label="HangFire.Server.ServerContext", span="", file="RedisConnection.cs"];
m5_214 [label=queue1, span="", file="RedisConnection.cs"];
m5_215 [label=string, span="", file="RedisConnection.cs"];
m5_216 [label=name, span="", file="RedisConnection.cs"];
m5_217 [label=heartbeats, span="", file="RedisConnection.cs"];
m6_10 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="RedisProcessingJob.cs"];
m6_11 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="RedisProcessingJob.cs"];
m6_12 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="RedisProcessingJob.cs"];
m6_0 [label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="25-25", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="RedisProcessingJob.cs"];
m6_1 [label="TransactionIsolationLevel = null", span="27-27", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=red, community=0, file="RedisProcessingJob.cs"];
m6_2 [label="QueuePollInterval = TimeSpan.FromSeconds(15)", span="28-28", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="RedisProcessingJob.cs"];
m6_3 [label="InvisibilityTimeout = TimeSpan.FromMinutes(30)", span="29-29", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="RedisProcessingJob.cs"];
m6_4 [label="JobExpirationCheckInterval = TimeSpan.FromHours(1)", span="30-30", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="RedisProcessingJob.cs"];
m6_5 [label="CountersAggregateInterval = TimeSpan.FromMinutes(5)", span="31-31", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=red, community=0, file="RedisProcessingJob.cs"];
m6_6 [label="PrepareSchemaIfNecessary = true", span="32-32", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=red, community=0, file="RedisProcessingJob.cs"];
m6_7 [label="DashboardJobListLimit = 50000", span="33-33", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="RedisProcessingJob.cs"];
m6_8 [label="TransactionTimeout = TimeSpan.FromMinutes(1)", span="34-34", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="RedisProcessingJob.cs"];
m6_9 [label="Exit Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="25-25", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="RedisProcessingJob.cs"];
m6_13 [label="Hangfire.SqlServer.SqlServerStorageOptions", span="", file="RedisProcessingJob.cs"];
m7_39 [label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="54-54", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RedisProcessingJobFacts.cs"];
m7_40 [label="var processingJob = CreateProcessingJob()", span="56-56", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m7_41 [label="Assert.Equal(JobId, processingJob.JobId)", span="58-58", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RedisProcessingJobFacts.cs"];
m7_42 [label="Assert.Equal(Queue, processingJob.Queue)", span="59-59", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RedisProcessingJobFacts.cs"];
m7_43 [label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="54-54", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RedisProcessingJobFacts.cs"];
m7_19 [label="Entry Unk.>", span="", cluster="Unk.>", file="RedisProcessingJobFacts.cs"];
m7_32 [label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="45-45", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RedisProcessingJobFacts.cs"];
m7_33 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RedisProcessingJob(_redisConnection, JobId, null))", span="47-48", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m7_34 [label="Assert.Equal(''queue'', exception.ParamName)", span="50-50", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RedisProcessingJobFacts.cs"];
m7_35 [label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="45-45", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RedisProcessingJobFacts.cs"];
m7_25 [label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", span="36-36", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="RedisProcessingJobFacts.cs"];
m7_26 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RedisProcessingJob(_redisConnection, null, Queue))", span="38-39", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m7_27 [label="Assert.Equal(''jobId'', exception.ParamName)", span="41-41", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="RedisProcessingJobFacts.cs"];
m7_28 [label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", span="36-36", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="RedisProcessingJobFacts.cs"];
m7_44 [label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.CreateProcessingJob()", span="72-72", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.CreateProcessingJob()", file="RedisProcessingJobFacts.cs"];
m7_56 [label="return new RedisProcessingJob(_redisConnection, JobId, Queue);", span="74-74", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.CreateProcessingJob()", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m7_57 [label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.CreateProcessingJob()", span="72-72", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.CreateProcessingJob()", file="RedisProcessingJobFacts.cs"];
m7_51 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="RedisProcessingJobFacts.cs"];
m7_15 [label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="27-27", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="RedisProcessingJobFacts.cs"];
m7_16 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RedisProcessingJob(null, JobId, Queue))", span="29-30", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", color=red, community=1, file="RedisProcessingJobFacts.cs"];
m7_17 [label="Assert.Equal(''connection'', exception.ParamName)", span="32-32", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m7_18 [label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="27-27", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="RedisProcessingJobFacts.cs"];
m7_8 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="RedisProcessingJobFacts.cs"];
m7_55 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="RedisProcessingJobFacts.cs"];
m7_50 [label="Entry HangFire.Redis.RedisProcessingJob.Dispose()", span="40-40", cluster="HangFire.Redis.RedisProcessingJob.Dispose()", file="RedisProcessingJobFacts.cs"];
m7_45 [label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", span="63-63", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", file="RedisProcessingJobFacts.cs"];
m7_46 [label="var processingJob = CreateProcessingJob()", span="65-65", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m7_47 [label="processingJob.Dispose()", span="67-67", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m7_48 [label="_transaction.Verify(x => x.Commit())", span="69-69", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m7_49 [label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", span="63-63", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", file="RedisProcessingJobFacts.cs"];
m7_20 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="RedisProcessingJobFacts.cs"];
m7_9 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="RedisProcessingJobFacts.cs"];
m7_52 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m7_11 [label="Entry lambda expression", span="21-21", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m7_12 [label="x.CreateTransaction()", span="21-21", cluster="lambda expression", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m7_13 [label="Exit lambda expression", span="21-21", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m7_21 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m7_22 [label="new RedisProcessingJob(null, JobId, Queue)", span="30-30", cluster="lambda expression", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m7_23 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m7_29 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m7_30 [label="new RedisProcessingJob(_redisConnection, null, Queue)", span="39-39", cluster="lambda expression", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m7_31 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m7_36 [label="Entry lambda expression", span="48-48", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m7_37 [label="new RedisProcessingJob(_redisConnection, JobId, null)", span="48-48", cluster="lambda expression", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m7_38 [label="Exit lambda expression", span="48-48", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m7_53 [label="x.Commit()", span="69-69", cluster="lambda expression", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m7_54 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m7_24 [label="Entry HangFire.Redis.RedisProcessingJob.RedisProcessingJob(HangFire.Redis.RedisConnection, string, string)", span="25-25", cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(HangFire.Redis.RedisConnection, string, string)", file="RedisProcessingJobFacts.cs"];
m7_6 [label="Entry Mock<IRedisClient>.cstr", span="", cluster="Mock<IRedisClient>.cstr", file="RedisProcessingJobFacts.cs"];
m7_10 [label="Entry RedisConnection.cstr", span="", cluster="RedisConnection.cstr", file="RedisProcessingJobFacts.cs"];
m7_14 [label="Entry Unk.CreateTransaction", span="", cluster="Unk.CreateTransaction", file="RedisProcessingJobFacts.cs"];
m7_7 [label="Entry Mock<IRedisTransaction>.cstr", span="", cluster="Mock<IRedisTransaction>.cstr", file="RedisProcessingJobFacts.cs"];
m7_0 [label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", span="16-16", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", file="RedisProcessingJobFacts.cs"];
m7_1 [label="_redis = new Mock<IRedisClient>()", span="18-18", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m7_2 [label="_transaction = new Mock<IRedisTransaction>()", span="19-19", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m7_3 [label="_redis.Setup(x => x.CreateTransaction()).Returns(_transaction.Object)", span="21-21", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m7_4 [label="_redisConnection = new RedisConnection(_redis.Object)", span="23-23", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", color=red, community=0, file="RedisProcessingJobFacts.cs"];
m7_5 [label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", span="16-16", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", file="RedisProcessingJobFacts.cs"];
m7_58 [label="HangFire.Redis.Tests.RedisProcessingJobFacts", span="", file="RedisProcessingJobFacts.cs"];
m8_8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", file="SqlServerConnection.cs"];
m8_91 [label="testRunner.Then(''the job should have the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="204-204", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="SqlServerConnection.cs"];
m8_92 [label="this.ScenarioCleanup()", span="206-206", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="SqlServerConnection.cs"];
m8_94 [label="HangFire.Tests.Server.JobFetcherFeature", span="", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs"];
m8_96 [label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="191-196", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs"];
m8_97 [label="_connection.Execute(\r\n                @''merge HangFire.Server as Target ''\r\n                + @''using (VALUES (@id, @data, @heartbeat)) as Source (Id, Data, Heartbeat) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = Source.Heartbeat ''\r\n                + @''when not matched then insert (Id, Data, LastHeartbeat) values (Source.Id, Source.Data, Source.Heartbeat);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data), heartbeat = DateTime.UtcNow })", span="198-204", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs"];
m8_93 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", span="192-192", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="SqlServerConnection.cs"];
m8_95 [label="throw new ArgumentNullException(''context'');", span="189-189", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs"];
m8_98 [label="Exit HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="186-186", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs"];
m8_25 [label="Entry Unk.OnScenarioStart", span="", cluster="Unk.OnScenarioStart", file="SqlServerConnection.cs"];
m8_76 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", span="171-171", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="SqlServerConnection.cs"];
m8_77 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should listen only specified queue'', ((string[])(null)))", span="173-173", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="SqlServerConnection.cs"];
m8_79 [label="testRunner.Given(''a job in the \'another\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="177-177", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="SqlServerConnection.cs"];
m8_81 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="181-181", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="SqlServerConnection.cs"];
m8_78 [label="this.ScenarioSetup(scenarioInfo)", span="175-175", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="SqlServerConnection.cs"];
m8_80 [label="testRunner.And(''the fetcher listening the \'default\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="179-179", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="SqlServerConnection.cs"];
m8_82 [label="testRunner.Then(''the fetcher should not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="183-183", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="SqlServerConnection.cs"];
m8_29 [label="parameters == null", span="71-71", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs"];
m8_99 [label="Entry HangFire.SqlServer.Entities.ServerData.ServerData()", span="20-20", cluster="HangFire.SqlServer.Entities.ServerData.ServerData()", file="SqlServerConnection.cs"];
m8_0 [label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", span="34-34", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", file="SqlServerConnection.cs"];
m8_2 [label="throw new ArgumentNullException(''queue'');", span="36-36", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", color=red, community=0, file="SqlServerConnection.cs"];
m8_1 [label="queue == null", span="36-36", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", file="SqlServerConnection.cs", color=red, community=0];
m8_3 [label="connection == null", span="37-37", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", color=green, community=0, file="SqlServerConnection.cs"];
m8_4 [label="throw new ArgumentNullException(''connection'');", span="37-37", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", file="SqlServerConnection.cs"];
m8_26 [label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="SqlServerConnection.cs"];
m8_27 [label="testRunner.CollectScenarioErrors()", span="68-68", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="SqlServerConnection.cs", color=green, community=0];
m8_32 [label="this.ScenarioSetup(scenarioInfo)", span="79-79", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="SqlServerConnection.cs", color=green, community=0];
m8_33 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="SqlServerConnection.cs", color=green, community=0];
m8_34 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="SqlServerConnection.cs", color=green, community=0];
m8_35 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="SqlServerConnection.cs", color=green, community=0];
m8_37 [label="this.ScenarioCleanup()", span="89-89", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="SqlServerConnection.cs", color=green, community=0];
m8_28 [label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="SqlServerConnection.cs"];
m8_30 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", span="75-75", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="SqlServerConnection.cs"];
m8_31 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should return the job payload when it dequeues a job'', ((string[])(null)))", span="77-77", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="SqlServerConnection.cs", color=green, community=0];
m8_38 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", span="75-75", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="SqlServerConnection.cs"];
m8_41 [label="Entry Unk.And", span="", cluster="Unk.And", file="SqlServerConnection.cs"];
m8_36 [label="testRunner.Then(''the fetcher should return the payload'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="87-87", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="SqlServerConnection.cs", color=green, community=0];
m8_40 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="SqlServerConnection.cs"];
m8_39 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SqlServerConnection.cs"];
m8_42 [label="Entry Unk.When", span="", cluster="Unk.When", file="SqlServerConnection.cs"];
m8_21 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="SqlServerConnection.cs"];
m8_54 [label="var jobData = _connection.Query<SqlJob>(sql, new { id = id })\r\n                .SingleOrDefault()", span="121-122", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m8_5 [label="_queue = queue", span="39-39", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", file="SqlServerConnection.cs", color=red, community=0];
m8_117 [label="Entry System.TimeSpan.Negate()", span="0-0", cluster="System.TimeSpan.Negate()", file="SqlServerConnection.cs"];
m8_46 [label="this.ScenarioSetup(scenarioInfo)", span="102-102", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SqlServerConnection.cs", color=green, community=0];
m8_50 [label="testRunner.Then(''the queue should not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="110-110", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SqlServerConnection.cs"];
m8_51 [label="testRunner.But(''the dequeued jobs list should contain it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="112-112", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SqlServerConnection.cs"];
m8_52 [label="this.ScenarioCleanup()", span="114-114", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SqlServerConnection.cs"];
m8_53 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="97-97", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SqlServerConnection.cs"];
m8_55 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="122-122", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SqlServerConnection.cs"];
m8_57 [label="this.ScenarioSetup(scenarioInfo)", span="127-127", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SqlServerConnection.cs"];
m8_58 [label="testRunner.Given(''an empty queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="129-129", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SqlServerConnection.cs"];
m8_64 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", span="144-144", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs"];
m8_56 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should not return any job when it tries to dequeue a job from an empty qu'' +\r\n                    ''eue'', ((string[])(null)))", span="124-125", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SqlServerConnection.cs"];
m8_61 [label="testRunner.Then(''the fetcher should not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="135-135", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SqlServerConnection.cs"];
m8_59 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="131-131", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SqlServerConnection.cs"];
m8_60 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="133-133", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SqlServerConnection.cs"];
m8_62 [label="this.ScenarioCleanup()", span="137-137", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SqlServerConnection.cs"];
m8_63 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="122-122", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SqlServerConnection.cs"];
m8_65 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should dequeue jobs in the FIFO order'', ((string[])(null)))", span="146-146", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs"];
m8_9 [label="Entry HangFire.SqlServer.SqlServerConnection.Dispose()", span="43-43", cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs"];
m8_10 [label="_connection.Dispose()", span="45-45", cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", color=green, community=0, file="SqlServerConnection.cs"];
m8_11 [label="Exit HangFire.SqlServer.SqlServerConnection.Dispose()", span="43-43", cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs"];
m8_12 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="SqlServerConnection.cs"];
m8_13 [label="Entry Unk.OnFeatureEnd", span="", cluster="Unk.OnFeatureEnd", file="SqlServerConnection.cs"];
m8_14 [label="Entry HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", color=red, community=0, file="SqlServerConnection.cs"];
m8_15 [label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''JobFetcher''))", span="48-49", cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="SqlServerConnection.cs"];
m8_90 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="202-202", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="SqlServerConnection.cs"];
m8_22 [label="Entry HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="60-60", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m8_23 [label="return _queue.Dequeue(queues, cancellationToken);", span="62-62", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", color=red, community=0, file="SqlServerConnection.cs"];
m8_24 [label="Exit HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="60-60", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m8_85 [label="throw new ArgumentNullException(''key'');", span="177-177", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m8_87 [label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", span="178-178", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m8_86 [label="toScore < fromScore", span="178-178", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m8_88 [label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="180-183", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m8_89 [label="Exit HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="175-175", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m8_48 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="106-106", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SqlServerConnection.cs"];
m8_20 [label="Entry SqlServerDistributedLock.cstr", span="", cluster="SqlServerDistributedLock.cstr", file="SqlServerConnection.cs"];
m8_7 [label="Exit HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", span="34-34", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", file="SqlServerConnection.cs"];
m8_45 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should remove the dequeued job from the queue and adds it to the dequeued'' +\r\n                    '' list'', ((string[])(null)))", span="99-100", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SqlServerConnection.cs", color=green, community=0];
m8_110 [label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="225-225", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs"];
m8_111 [label="timeOut.Duration() != timeOut", span="227-227", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs"];
m8_112 [label="throw new ArgumentException(''The `timeOut` value must be positive.'', ''timeOut'');", span="229-229", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs"];
m8_113 [label="return _connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) });", span="232-234", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs"];
m8_114 [label="Exit HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="225-225", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs"];
m8_115 [label="Entry System.TimeSpan.Duration()", span="0-0", cluster="System.TimeSpan.Duration()", file="SqlServerConnection.cs"];
m8_83 [label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="175-175", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m8_84 [label="key == null", span="177-177", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m8_16 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", span="35-35", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", color=green, community=0, file="SqlServerConnection.cs"];
m8_17 [label="Entry HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="53-53", cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerConnection.cs"];
m8_44 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)", file="SqlServerConnection.cs"];
m8_47 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="SqlServerConnection.cs"];
m8_49 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="SqlServerConnection.cs"];
m8_69 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="154-154", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs"];
m8_70 [label="testRunner.When(''it dequeues a job for the first time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="156-156", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs"];
m8_72 [label="testRunner.When(''it dequeues a job for the second time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="160-160", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs"];
m8_74 [label="this.ScenarioCleanup()", span="164-164", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs"];
m8_71 [label="testRunner.Then(''the fetcher should return the \'first\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="158-158", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs"];
m8_73 [label="testRunner.Then(''the fetcher should return the \'second\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="162-162", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs"];
m8_75 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", span="144-144", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs"];
m8_43 [label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65", cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="SqlServerConnection.cs"];
m8_18 [label="return new SqlServerDistributedLock(\r\n                String.Format(''HangFire:Job:{0}'', jobId), \r\n                _connection);", span="55-57", cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerConnection.cs"];
m8_19 [label="Exit HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="53-53", cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerConnection.cs"];
m8_116 [label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, string)", file="SqlServerConnection.cs"];
m8_6 [label="_connection = connection", span="40-40", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", file="SqlServerConnection.cs"];
m8_68 [label="testRunner.And(''the \'second\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="152-152", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs"];
m8_67 [label="testRunner.Given(''the \'first\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="150-150", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs"];
m8_100 [label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="207-207", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs"];
m8_101 [label="serverId == null", span="209-209", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs"];
m8_103 [label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="211-213", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs"];
m8_102 [label="throw new ArgumentNullException(''serverId'');", span="209-209", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs"];
m8_104 [label="Exit HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="207-207", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs"];
m8_66 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="SqlServerConnection.cs"];
m8_105 [label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="216-216", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs"];
m8_106 [label="serverId == null", span="218-218", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs"];
m8_108 [label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="220-222", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs"];
m8_107 [label="throw new ArgumentNullException(''serverId'');", span="218-218", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs"];
m8_109 [label="Exit HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="216-216", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs"];
m8_118 [label="HangFire.SqlServer.SqlServerConnection", span="", file="SqlServerConnection.cs"];
m9_69 [label="Entry HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="65-65", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnectionFacts.cs"];
m9_288 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="388-388", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_289 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1);\r\n\r\n                Assert.Null(result);\r\n            })", span="390-396", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_290 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="388-388", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_421 [label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0", cluster="System.Action<T1, T2>.Invoke(T1, T2)", file="SqlServerConnectionFacts.cs"];
m9_230 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="311-311", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_231 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="313-319", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_232 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="311-311", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_112 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="SqlServerConnectionFacts.cs"];
m9_0 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", span="18-18", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs"];
m9_1 [label="_queue = new Mock<IPersistentJobQueue>()", span="20-20", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", color=red, community=0, file="SqlServerConnectionFacts.cs"];
m9_2 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", span="18-18", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs"];
m9_345 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="476-476", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_346 [label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null)))", span="478-479", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_347 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="476-476", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_23 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", span="42-42", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", file="SqlServerConnectionFacts.cs"];
m9_24 [label="UseConnection(connection =>\r\n            {\r\n                var token = new CancellationToken();\r\n                var queues = new[] { ''default'' };\r\n\r\n                connection.FetchNextJob(queues, token);\r\n\r\n                _queue.Verify(x => x.Dequeue(queues, token));\r\n            })", span="44-52", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", color=red, community=1, file="SqlServerConnectionFacts.cs"];
m9_25 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", span="42-42", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", file="SqlServerConnectionFacts.cs"];
m9_22 [label="Entry SqlServerConnection.cstr", span="", cluster="SqlServerConnection.cstr", file="SqlServerConnectionFacts.cs"];
m9_365 [label="Entry Unk.NotEqual", span="", cluster="Unk.NotEqual", file="SqlServerConnectionFacts.cs"];
m9_258 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="345-345", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SqlServerConnectionFacts.cs"];
m9_259 [label="string arrangeSql = @''\r\ndeclare @id int\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nset @id = scope_identity()\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@id, @name, @value)\r\nselect @id''", span="347-354", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SqlServerConnectionFacts.cs"];
m9_260 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single();\r\n\r\n                var value = connection.GetJobParameter(id.ToString(), ''name'');\r\n\r\n                Assert.Equal(''value'', value);\r\n            })", span="356-365", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SqlServerConnectionFacts.cs"];
m9_261 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="345-345", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SqlServerConnectionFacts.cs"];
m9_279 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="381-381", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="SqlServerConnectionFacts.cs"];
m9_280 [label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)))", span="383-384", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="SqlServerConnectionFacts.cs"];
m9_281 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="381-381", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="SqlServerConnectionFacts.cs"];
m9_278 [label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="175-175", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnectionFacts.cs"];
m9_127 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="144-144", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_128 [label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null)))", span="146-147", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_129 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="144-144", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_304 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="SqlServerConnectionFacts.cs"];
m9_14 [label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37", cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerConnectionFacts.cs"];
m9_114 [label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38", cluster="HangFire.Storage.InvocationData.Deserialize()", file="SqlServerConnectionFacts.cs"];
m9_58 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="76-76", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="SqlServerConnectionFacts.cs"];
m9_59 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''job'', exception.ParamName);\r\n            })", span="78-87", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="SqlServerConnectionFacts.cs"];
m9_60 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="76-76", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="SqlServerConnectionFacts.cs"];
m9_207 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="264-264", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SqlServerConnectionFacts.cs"];
m9_208 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="266-269", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SqlServerConnectionFacts.cs"];
m9_209 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n                connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''AnotherValue'', parameter.Value);\r\n            })", span="271-284", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SqlServerConnectionFacts.cs"];
m9_210 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="264-264", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SqlServerConnectionFacts.cs"];
m9_219 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="288-288", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SqlServerConnectionFacts.cs"];
m9_220 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="290-293", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SqlServerConnectionFacts.cs"];
m9_221 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', null);\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal((string) null, parameter.Value);\r\n            })", span="295-307", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SqlServerConnectionFacts.cs"];
m9_222 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="288-288", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SqlServerConnectionFacts.cs"];
m9_366 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="503-503", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_367 [label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null)))", span="505-506", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_368 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="503-503", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_316 [label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="186-186", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnectionFacts.cs"];
m9_3 [label="Entry Mock<IPersistentJobQueue>.cstr", span="", cluster="Mock<IPersistentJobQueue>.cstr", file="SqlServerConnectionFacts.cs"];
m9_113 [label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="30-30", cluster="HangFire.Common.JobHelper.FromJson<T>(string)", file="SqlServerConnectionFacts.cs"];
m9_196 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="241-241", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SqlServerConnectionFacts.cs"];
m9_197 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="243-246", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SqlServerConnectionFacts.cs"];
m9_198 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''Value'', parameter.Value);\r\n            })", span="248-260", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SqlServerConnectionFacts.cs"];
m9_199 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="241-241", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SqlServerConnectionFacts.cs"];
m9_40 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="56-56", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs"];
m9_41 [label="UseConnection(connection =>\r\n            {\r\n                var transaction = connection.CreateWriteTransaction();\r\n                Assert.NotNull(transaction);\r\n            })", span="58-62", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs"];
m9_42 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="56-56", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs"];
m9_4 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="24-24", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerConnectionFacts.cs"];
m9_5 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerConnection(null, ConnectionUtils.CreateConnection()))", span="26-27", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", color=red, community=1, file="SqlServerConnectionFacts.cs"];
m9_6 [label="Assert.Equal(''queue'', exception.ParamName)", span="29-29", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", color=red, community=0, file="SqlServerConnectionFacts.cs"];
m9_7 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="24-24", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerConnectionFacts.cs"];
m9_136 [label="Entry HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="114-114", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnectionFacts.cs"];
m9_48 [label="Entry HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="48-48", cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnectionFacts.cs"];
m9_161 [label="Entry int.ToString()", span="0-0", cluster="int.ToString()", file="SqlServerConnectionFacts.cs"];
m9_327 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="445-445", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="SqlServerConnectionFacts.cs"];
m9_328 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                };\r\n                connection.AnnounceServer(''server'', context1);\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', server.Id);\r\n                Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data);\r\n                Assert.NotNull(server.LastHeartbeat);\r\n\r\n                var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                };\r\n                connection.AnnounceServer(''server'', context2);\r\n                var sameServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', sameServer.Id);\r\n                Assert.Contains(''1000'', sameServer.Data);\r\n            })", span="447-472", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="SqlServerConnectionFacts.cs"];
m9_329 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="445-445", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="SqlServerConnectionFacts.cs"];
m9_355 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", span="483-483", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SqlServerConnectionFacts.cs"];
m9_356 [label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues \r\n('Server1', '', getutcdate()),\r\n('Server2', '', getutcdate())''", span="485-489", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SqlServerConnectionFacts.cs"];
m9_357 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.RemoveServer(''Server1'');\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase);\r\n            })", span="491-499", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SqlServerConnectionFacts.cs"];
m9_358 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", span="483-483", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SqlServerConnectionFacts.cs"];
m9_26 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", span="572-572", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs"];
m9_422 [label="var connection = new SqlServerConnection(\r\n                _queue.Object, \r\n                ConnectionUtils.CreateConnection())", span="574-576", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", color=red, community=0, file="SqlServerConnectionFacts.cs"];
m9_423 [label="action(connection)", span="578-578", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs"];
m9_424 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", span="572-572", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs"];
m9_115 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="SqlServerConnectionFacts.cs"];
m9_145 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="161-161", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SqlServerConnectionFacts.cs"];
m9_146 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="163-166", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SqlServerConnectionFacts.cs"];
m9_147 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = Job.FromExpression(() => SampleMethod(''wrong''));\r\n\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result);\r\n                Assert.NotNull(result.Job);\r\n                Assert.Equal(''Succeeded'', result.State);\r\n                Assert.Equal(''Arguments'', result.Job.Arguments[0]);\r\n                Assert.Null(result.LoadException);\r\n            })", span="168-188", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SqlServerConnectionFacts.cs"];
m9_148 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="161-161", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SqlServerConnectionFacts.cs"];
m9_85 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="106-106", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", file="SqlServerConnectionFacts.cs"];
m9_86 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    TimeSpan.FromDays(1));\r\n\r\n                Assert.NotNull(jobId);\r\n                Assert.NotEmpty(jobId);\r\n\r\n                var sqlJob = sql.Query(''select * from HangFire.Job'').Single();\r\n                Assert.Equal(jobId, sqlJob.Id.ToString());\r\n                Assert.Equal(null, (int?) sqlJob.StateId);\r\n                Assert.Equal(null, (string) sqlJob.StateName);\r\n\r\n                var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData);\r\n                invocationData.Arguments = sqlJob.Arguments;\r\n\r\n                var job = invocationData.Deserialize();\r\n                Assert.Equal(typeof(SqlServerConnectionFacts), job.Type);\r\n                Assert.Equal(''SampleMethod'', job.Method.Name);\r\n                Assert.Equal(''Hello'', job.Arguments[0]);\r\n\r\n                Assert.True(DateTime.UtcNow < sqlJob.ExpireAt && sqlJob.ExpireAt < DateTime.UtcNow.AddDays(1));\r\n\r\n                var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value);\r\n\r\n                Assert.Equal(''Value1'', parameters[''Key1'']);\r\n                Assert.Equal(''Value2'', parameters[''Key2'']);\r\n            })", span="108-140", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", color=red, community=0, file="SqlServerConnectionFacts.cs"];
m9_87 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="106-106", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", file="SqlServerConnectionFacts.cs"];
m9_34 [label="Entry HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="60-60", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnectionFacts.cs"];
m9_403 [label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="225-225", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnectionFacts.cs"];
m9_251 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="335-335", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="SqlServerConnectionFacts.cs"];
m9_252 [label="UseConnection(connection =>\r\n            {\r\n                var value = connection.GetJobParameter(''1'', ''hello'');\r\n                Assert.Null(value);\r\n            })", span="337-341", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="SqlServerConnectionFacts.cs"];
m9_253 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="335-335", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="SqlServerConnectionFacts.cs"];
m9_315 [label="Entry HangFire.Server.ServerContext.ServerContext()", span="18-18", cluster="HangFire.Server.ServerContext.ServerContext()", file="SqlServerConnectionFacts.cs"];
m9_39 [label="Entry Unk.Dequeue", span="", cluster="Unk.Dequeue", file="SqlServerConnectionFacts.cs"];
m9_408 [label="Entry lambda expression", span="546-560", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_10 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_11 [label="new SqlServerConnection(null, ConnectionUtils.CreateConnection())", span="27-27", cluster="lambda expression", color=red, community=0, file="SqlServerConnectionFacts.cs"];
m9_12 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_19 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_20 [label="new SqlServerConnection(_queue.Object, null)", span="36-36", cluster="lambda expression", color=red, community=0, file="SqlServerConnectionFacts.cs"];
m9_21 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_27 [label="Entry lambda expression", span="44-52", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_28 [label="var token = new CancellationToken()", span="46-46", cluster="lambda expression", color=red, community=0, file="SqlServerConnectionFacts.cs"];
m9_30 [label="connection.FetchNextJob(queues, token)", span="49-49", cluster="lambda expression", color=red, community=0, file="SqlServerConnectionFacts.cs"];
m9_29 [label="var queues = new[] { ''default'' }", span="47-47", cluster="lambda expression", color=red, community=0, file="SqlServerConnectionFacts.cs"];
m9_31 [label="_queue.Verify(x => x.Dequeue(queues, token))", span="51-51", cluster="lambda expression", color=red, community=0, file="SqlServerConnectionFacts.cs"];
m9_37 [label="x.Dequeue(queues, token)", span="51-51", cluster="lambda expression", color=red, community=0, file="SqlServerConnectionFacts.cs"];
m9_32 [label="Exit lambda expression", span="44-52", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_36 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_38 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_44 [label="Entry lambda expression", span="58-62", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_45 [label="var transaction = connection.CreateWriteTransaction()", span="60-60", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_46 [label="Assert.NotNull(transaction)", span="61-61", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_47 [label="Exit lambda expression", span="58-62", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_53 [label="Entry lambda expression", span="68-72", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_54 [label="var @lock = connection.AcquireJobLock(''1'')", span="70-70", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_55 [label="Assert.NotNull(@lock)", span="71-71", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_56 [label="Exit lambda expression", span="68-72", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_61 [label="Entry lambda expression", span="78-87", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_62 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero))", span="80-84", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_66 [label="connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero)", span="81-84", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_63 [label="Assert.Equal(''job'', exception.ParamName)", span="86-86", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_65 [label="Entry lambda expression", span="81-84", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_64 [label="Exit lambda expression", span="78-87", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_67 [label="Exit lambda expression", span="81-84", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_73 [label="Entry lambda expression", span="93-102", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_74 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero))", span="95-99", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_78 [label="connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero)", span="96-99", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_75 [label="Assert.Equal(''parameters'', exception.ParamName)", span="101-101", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_77 [label="Entry lambda expression", span="96-99", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_76 [label="Exit lambda expression", span="93-102", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_79 [label="Exit lambda expression", span="96-99", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_81 [label="Entry lambda expression", span="97-97", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_82 [label="SampleMethod(''hello'')", span="97-97", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_83 [label="Exit lambda expression", span="97-97", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_89 [label="Entry lambda expression", span="108-140", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_90 [label="var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    TimeSpan.FromDays(1))", span="110-113", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_93 [label="var sqlJob = sql.Query(''select * from HangFire.Job'').Single()", span="118-118", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_104 [label="var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value)", span="133-136", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_91 [label="Assert.NotNull(jobId)", span="115-115", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_118 [label="Entry lambda expression", span="111-111", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_92 [label="Assert.NotEmpty(jobId)", span="116-116", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_94 [label="Assert.Equal(jobId, sqlJob.Id.ToString())", span="119-119", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_95 [label="Assert.Equal(null, (int?) sqlJob.StateId)", span="120-120", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_96 [label="Assert.Equal(null, (string) sqlJob.StateName)", span="121-121", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_97 [label="var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData)", span="123-123", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_98 [label="invocationData.Arguments = sqlJob.Arguments", span="124-124", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_103 [label="Assert.True(DateTime.UtcNow < sqlJob.ExpireAt && sqlJob.ExpireAt < DateTime.UtcNow.AddDays(1))", span="131-131", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_99 [label="var job = invocationData.Deserialize()", span="126-126", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_100 [label="Assert.Equal(typeof(SqlServerConnectionFacts), job.Type)", span="127-127", cluster="lambda expression", color=red, community=0, file="SqlServerConnectionFacts.cs"];
m9_101 [label="Assert.Equal(''SampleMethod'', job.Method.Name)", span="128-128", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_102 [label="Assert.Equal(''Hello'', job.Arguments[0])", span="129-129", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_105 [label="Assert.Equal(''Value1'', parameters[''Key1''])", span="138-138", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_121 [label="Entry lambda expression", span="136-136", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_124 [label="Entry lambda expression", span="136-136", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_106 [label="Assert.Equal(''Value2'', parameters[''Key2''])", span="139-139", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_107 [label="Exit lambda expression", span="108-140", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_119 [label="SampleMethod(''Hello'')", span="111-111", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_120 [label="Exit lambda expression", span="111-111", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_122 [label="(string) x.Name", span="136-136", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_123 [label="Exit lambda expression", span="136-136", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_125 [label="(string) x.Value", span="136-136", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_126 [label="Exit lambda expression", span="136-136", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_130 [label="Entry lambda expression", span="146-147", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_131 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null))", span="146-147", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_134 [label="connection.GetJobData(null)", span="147-147", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_132 [label="Exit lambda expression", span="146-147", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_133 [label="Entry lambda expression", span="147-147", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_135 [label="Exit lambda expression", span="147-147", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_140 [label="Entry lambda expression", span="153-157", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_141 [label="var result = connection.GetJobData(''1'')", span="155-155", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_142 [label="Assert.Null(result)", span="156-156", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_143 [label="Exit lambda expression", span="153-157", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_151 [label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="172-179", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_149 [label="Entry lambda expression", span="168-188", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_150 [label="var job = Job.FromExpression(() => SampleMethod(''wrong''))", span="170-170", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_152 [label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="181-181", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_162 [label="Entry lambda expression", span="170-170", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_153 [label="Assert.NotNull(result)", span="183-183", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_154 [label="Assert.NotNull(result.Job)", span="184-184", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_155 [label="Assert.Equal(''Succeeded'', result.State)", span="185-185", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_156 [label="Assert.Equal(''Arguments'', result.Job.Arguments[0])", span="186-186", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_157 [label="Assert.Null(result.LoadException)", span="187-187", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_158 [label="Exit lambda expression", span="168-188", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_163 [label="SampleMethod(''wrong'')", span="170-170", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_164 [label="Exit lambda expression", span="170-170", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_170 [label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="201-208", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_169 [label="Entry lambda expression", span="199-213", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_171 [label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="210-210", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_172 [label="Assert.NotNull(result.LoadException)", span="212-212", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_173 [label="Exit lambda expression", span="199-213", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_178 [label="Entry lambda expression", span="219-225", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_179 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''))", span="221-222", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_183 [label="connection.SetJobParameter(null, ''name'', ''value'')", span="222-222", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_180 [label="Assert.Equal(''id'', exception.ParamName)", span="224-224", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_182 [label="Entry lambda expression", span="222-222", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_181 [label="Exit lambda expression", span="219-225", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_184 [label="Exit lambda expression", span="222-222", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_189 [label="Entry lambda expression", span="231-237", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_190 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''))", span="233-234", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_194 [label="connection.SetJobParameter(''1'', null, ''value'')", span="234-234", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_191 [label="Assert.Equal(''name'', exception.ParamName)", span="236-236", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_193 [label="Entry lambda expression", span="234-234", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_192 [label="Exit lambda expression", span="231-237", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_195 [label="Exit lambda expression", span="234-234", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_201 [label="var job = sql.Query(arrangeSql).Single()", span="250-250", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_200 [label="Entry lambda expression", span="248-260", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_203 [label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="253-253", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_204 [label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="255-257", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_202 [label="string jobId = job.Id.ToString()", span="251-251", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_205 [label="Assert.Equal(''Value'', parameter.Value)", span="259-259", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_206 [label="Exit lambda expression", span="248-260", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_212 [label="var job = sql.Query(arrangeSql).Single()", span="273-273", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_211 [label="Entry lambda expression", span="271-284", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_214 [label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="276-276", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_215 [label="connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'')", span="277-277", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_216 [label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="279-281", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_213 [label="string jobId = job.Id.ToString()", span="274-274", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_217 [label="Assert.Equal(''AnotherValue'', parameter.Value)", span="283-283", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_218 [label="Exit lambda expression", span="271-284", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_224 [label="var job = sql.Query(arrangeSql).Single()", span="297-297", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_223 [label="Entry lambda expression", span="295-307", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_226 [label="connection.SetJobParameter(jobId, ''Name'', null)", span="300-300", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_227 [label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="302-304", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_225 [label="string jobId = job.Id.ToString()", span="298-298", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_228 [label="Assert.Equal((string) null, parameter.Value)", span="306-306", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_229 [label="Exit lambda expression", span="295-307", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_233 [label="Entry lambda expression", span="313-319", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_234 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''))", span="315-316", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_238 [label="connection.GetJobParameter(null, ''hello'')", span="316-316", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_235 [label="Assert.Equal(''id'', exception.ParamName)", span="318-318", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_237 [label="Entry lambda expression", span="316-316", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_236 [label="Exit lambda expression", span="313-319", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_239 [label="Exit lambda expression", span="316-316", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_244 [label="Entry lambda expression", span="325-331", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_245 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null))", span="327-328", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_249 [label="connection.GetJobParameter(''1'', null)", span="328-328", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_246 [label="Assert.Equal(''name'', exception.ParamName)", span="330-330", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_248 [label="Entry lambda expression", span="328-328", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_247 [label="Exit lambda expression", span="325-331", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_250 [label="Exit lambda expression", span="328-328", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_254 [label="Entry lambda expression", span="337-341", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_255 [label="var value = connection.GetJobParameter(''1'', ''hello'')", span="339-339", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_256 [label="Assert.Null(value)", span="340-340", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_257 [label="Exit lambda expression", span="337-341", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_263 [label="var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single()", span="358-360", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_262 [label="Entry lambda expression", span="356-365", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_264 [label="var value = connection.GetJobParameter(id.ToString(), ''name'')", span="362-362", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_265 [label="Assert.Equal(''value'', value)", span="364-364", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_266 [label="Exit lambda expression", span="356-365", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_271 [label="Entry lambda expression", span="371-377", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_272 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1))", span="373-374", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_276 [label="connection.GetFirstByLowestScoreFromSet(null, 0, 1)", span="374-374", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_273 [label="Assert.Equal(''key'', exception.ParamName)", span="376-376", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_275 [label="Entry lambda expression", span="374-374", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_274 [label="Exit lambda expression", span="371-377", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_277 [label="Exit lambda expression", span="374-374", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_282 [label="Entry lambda expression", span="383-384", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_283 [label="Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1))", span="383-384", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_286 [label="connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)", span="384-384", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_284 [label="Exit lambda expression", span="383-384", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_285 [label="Entry lambda expression", span="384-384", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_287 [label="Exit lambda expression", span="384-384", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_291 [label="Entry lambda expression", span="390-396", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_292 [label="var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1)", span="392-393", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_293 [label="Assert.Null(result)", span="395-395", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_294 [label="Exit lambda expression", span="390-396", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_300 [label="sql.Execute(arrangeSql)", span="412-412", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_299 [label="Entry lambda expression", span="410-417", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_301 [label="var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0)", span="414-414", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_302 [label="Assert.Equal(''-1.0'', result)", span="416-416", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_303 [label="Exit lambda expression", span="410-417", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_308 [label="Entry lambda expression", span="423-429", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_309 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()))", span="425-426", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_313 [label="connection.AnnounceServer(null, new ServerContext())", span="426-426", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_310 [label="Assert.Equal(''serverId'', exception.ParamName)", span="428-428", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_312 [label="Entry lambda expression", span="426-426", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_311 [label="Exit lambda expression", span="423-429", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_314 [label="Exit lambda expression", span="426-426", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_320 [label="Entry lambda expression", span="435-441", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_321 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null))", span="437-438", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_325 [label="connection.AnnounceServer(''server'', null)", span="438-438", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_322 [label="Assert.Equal(''context'', exception.ParamName)", span="440-440", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_324 [label="Entry lambda expression", span="438-438", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_323 [label="Exit lambda expression", span="435-441", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_326 [label="Exit lambda expression", span="438-438", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_330 [label="Entry lambda expression", span="447-472", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_331 [label="var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                }", span="449-453", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_332 [label="connection.AnnounceServer(''server'', context1)", span="454-454", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_333 [label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="456-456", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_338 [label="connection.AnnounceServer(''server'', context2)", span="468-468", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_339 [label="var sameServer = sql.Query(''select * from HangFire.Server'').Single()", span="469-469", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_334 [label="Assert.Equal(''server'', server.Id)", span="457-457", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_335 [label="Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data)", span="458-460", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_336 [label="Assert.NotNull(server.LastHeartbeat)", span="461-461", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_337 [label="var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                }", span="463-467", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_340 [label="Assert.Equal(''server'', sameServer.Id)", span="470-470", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_341 [label="Assert.Contains(''1000'', sameServer.Data)", span="471-471", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_342 [label="Exit lambda expression", span="447-472", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_348 [label="Entry lambda expression", span="478-479", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_349 [label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null))", span="478-479", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_352 [label="connection.RemoveServer(null)", span="479-479", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_350 [label="Exit lambda expression", span="478-479", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_351 [label="Entry lambda expression", span="479-479", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_353 [label="Exit lambda expression", span="479-479", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_360 [label="sql.Execute(arrangeSql)", span="493-493", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_359 [label="Entry lambda expression", span="491-499", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_361 [label="connection.RemoveServer(''Server1'')", span="495-495", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_362 [label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="497-497", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_363 [label="Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase)", span="498-498", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_364 [label="Exit lambda expression", span="491-499", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_369 [label="Entry lambda expression", span="505-506", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_370 [label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null))", span="505-506", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_373 [label="connection.Heartbeat(null)", span="506-506", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_371 [label="Exit lambda expression", span="505-506", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_372 [label="Entry lambda expression", span="506-506", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_374 [label="Exit lambda expression", span="506-506", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_381 [label="sql.Execute(arrangeSql)", span="520-520", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_380 [label="Entry lambda expression", span="518-529", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_382 [label="connection.Heartbeat(''server1'')", span="522-522", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_383 [label="var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime)x.LastHeartbeat)", span="524-525", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_384 [label="Assert.NotEqual(2012, servers[''server1''].Year)", span="527-527", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_387 [label="Entry lambda expression", span="525-525", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_390 [label="Entry lambda expression", span="525-525", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_385 [label="Assert.Equal(2012, servers[''server2''].Year)", span="528-528", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_386 [label="Exit lambda expression", span="518-529", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_388 [label="(string)x.Id", span="525-525", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_389 [label="Exit lambda expression", span="525-525", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_391 [label="(DateTime)x.LastHeartbeat", span="525-525", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_392 [label="Exit lambda expression", span="525-525", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_396 [label="Entry lambda expression", span="535-536", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_397 [label="Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5)))", span="535-536", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_400 [label="connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))", span="536-536", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_398 [label="Exit lambda expression", span="535-536", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_399 [label="Entry lambda expression", span="536-536", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_401 [label="Exit lambda expression", span="536-536", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_409 [label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    })", span="548-554", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_410 [label="connection.RemoveTimedOutServers(TimeSpan.FromHours(15))", span="556-556", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_411 [label="var liveServer = sql.Query(''select * from HangFire.Server'').Single()", span="558-558", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_412 [label="Assert.Equal(''server2'', liveServer.Id)", span="559-559", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_413 [label="Exit lambda expression", span="546-560", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_88 [label="Entry Unk.UseConnections", span="", cluster="Unk.UseConnections", file="SqlServerConnectionFacts.cs"];
m9_185 [label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="150-150", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnectionFacts.cs"];
m9_80 [label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="116-116", cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerConnectionFacts.cs"];
m9_416 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", span="563-563", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs"];
m9_417 [label="var sqlConnection = ConnectionUtils.CreateConnection()", span="565-565", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs"];
m9_419 [label="action(sqlConnection, connection)", span="568-568", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs"];
m9_418 [label="var connection = new SqlServerConnection(_queue.Object, sqlConnection)", span="566-566", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", color=red, community=0, file="SqlServerConnectionFacts.cs"];
m9_420 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", span="563-563", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs"];
m9_295 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="400-400", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SqlServerConnectionFacts.cs"];
m9_296 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], Score, Value)\r\nvalues \r\n('key', 1.0, '1.0'),\r\n('key', -1.0, '-1.0'),\r\n('key', -5.0, '-5.0'),\r\n('another-key', -2.0, '-2.0')''", span="402-408", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SqlServerConnectionFacts.cs"];
m9_297 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0);\r\n                \r\n                Assert.Equal(''-1.0'', result);\r\n            })", span="410-417", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SqlServerConnectionFacts.cs"];
m9_298 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="400-400", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SqlServerConnectionFacts.cs"];
m9_240 [label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="164-164", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnectionFacts.cs"];
m9_43 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection", file="SqlServerConnectionFacts.cs"];
m9_9 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="SqlServerConnectionFacts.cs"];
m9_33 [label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0", cluster="System.Threading.CancellationToken.CancellationToken()", file="SqlServerConnectionFacts.cs"];
m9_268 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="369-369", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_269 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="371-377", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_270 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="369-369", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_110 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="SqlServerConnectionFacts.cs"];
m9_425 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="SqlServerConnectionFacts.cs"];
m9_376 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="510-510", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SqlServerConnectionFacts.cs"];
m9_377 [label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues\r\n('server1', '', '2012-12-12 12:12:12'),\r\n('server2', '', '2012-12-12 12:12:12')''", span="512-516", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SqlServerConnectionFacts.cs"];
m9_378 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.Heartbeat(''server1'');\r\n\r\n                var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime)x.LastHeartbeat);\r\n\r\n                Assert.NotEqual(2012, servers[''server1''].Year);\r\n                Assert.Equal(2012, servers[''server2''].Year);\r\n            })", span="518-529", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SqlServerConnectionFacts.cs"];
m9_379 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="510-510", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SqlServerConnectionFacts.cs"];
m9_49 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="SqlServerConnectionFacts.cs"];
m9_144 [label="Entry Unk.Null", span="", cluster="Unk.Null", file="SqlServerConnectionFacts.cs"];
m9_317 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="433-433", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="SqlServerConnectionFacts.cs"];
m9_318 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null));\r\n\r\n                Assert.Equal(''context'', exception.ParamName);\r\n            })", span="435-441", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="SqlServerConnectionFacts.cs"];
m9_319 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="433-433", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="SqlServerConnectionFacts.cs"];
m9_414 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="SqlServerConnectionFacts.cs"];
m9_57 [label="Entry HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="53-53", cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerConnectionFacts.cs"];
m9_109 [label="Entry Unk.NotEmpty", span="", cluster="Unk.NotEmpty", file="SqlServerConnectionFacts.cs"];
m9_354 [label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="207-207", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnectionFacts.cs"];
m9_393 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="533-533", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="SqlServerConnectionFacts.cs"];
m9_394 [label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))))", span="535-536", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="SqlServerConnectionFacts.cs"];
m9_395 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="533-533", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="SqlServerConnectionFacts.cs"];
m9_35 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="SqlServerConnectionFacts.cs"];
m9_13 [label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", span="34-34", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", file="SqlServerConnectionFacts.cs"];
m9_159 [label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65", cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="SqlServerConnectionFacts.cs"];
m9_174 [label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", span="24-24", cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", file="SqlServerConnectionFacts.cs"];
m9_343 [label="Entry string.StartsWith(string)", span="0-0", cluster="string.StartsWith(string)", file="SqlServerConnectionFacts.cs"];
m9_402 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerConnectionFacts.cs"];
m9_117 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="SqlServerConnectionFacts.cs"];
m9_415 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="SqlServerConnectionFacts.cs"];
m9_305 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="421-421", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_306 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()));\r\n\r\n                Assert.Equal(''serverId'', exception.ParamName);\r\n            })", span="423-429", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_307 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="421-421", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_84 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", span="582-582", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", file="SqlServerConnectionFacts.cs"];
m9_426 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", span="582-582", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", file="SqlServerConnectionFacts.cs"];
m9_186 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="229-229", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs"];
m9_187 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="231-237", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs"];
m9_188 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="229-229", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs"];
m9_8 [label="Entry Unk.>", span="", cluster="Unk.>", file="SqlServerConnectionFacts.cs"];
m9_165 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="192-192", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SqlServerConnectionFacts.cs"];
m9_166 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="194-197", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SqlServerConnectionFacts.cs"];
m9_167 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result.LoadException);\r\n            })", span="199-213", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SqlServerConnectionFacts.cs"];
m9_168 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="192-192", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SqlServerConnectionFacts.cs"];
m9_404 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="540-540", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SqlServerConnectionFacts.cs"];
m9_405 [label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues (@id, '', @heartbeat)''", span="542-544", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SqlServerConnectionFacts.cs"];
m9_406 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    });\r\n\r\n                connection.RemoveTimedOutServers(TimeSpan.FromHours(15));\r\n\r\n                var liveServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server2'', liveServer.Id);\r\n            })", span="546-560", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SqlServerConnectionFacts.cs"];
m9_407 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="540-540", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SqlServerConnectionFacts.cs"];
m9_108 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)", file="SqlServerConnectionFacts.cs"];
m9_68 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerConnectionFacts.cs"];
m9_267 [label="Entry Unk.GetJobParameter", span="", cluster="Unk.GetJobParameter", file="SqlServerConnectionFacts.cs"];
m9_50 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", span="66-66", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs"];
m9_51 [label="UseConnection(connection =>\r\n            {\r\n                var @lock = connection.AcquireJobLock(''1'');\r\n                Assert.NotNull(@lock);\r\n            })", span="68-72", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs"];
m9_52 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", span="66-66", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs"];
m9_137 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="151-151", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="SqlServerConnectionFacts.cs"];
m9_138 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetJobData(''1'');\r\n                Assert.Null(result);\r\n            })", span="153-157", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="SqlServerConnectionFacts.cs"];
m9_139 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="151-151", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="SqlServerConnectionFacts.cs"];
m9_241 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="323-323", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs"];
m9_242 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="325-331", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs"];
m9_243 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="323-323", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs"];
m9_344 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="SqlServerConnectionFacts.cs"];
m9_175 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="217-217", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_176 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="219-225", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_177 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="217-217", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_160 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)", file="SqlServerConnectionFacts.cs"];
m9_111 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="SqlServerConnectionFacts.cs"];
m9_116 [label="Entry Unk.True", span="", cluster="Unk.True", file="SqlServerConnectionFacts.cs"];
m9_375 [label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="216-216", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnectionFacts.cs"];
m9_70 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", span="91-91", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", file="SqlServerConnectionFacts.cs"];
m9_71 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''parameters'', exception.ParamName);\r\n            })", span="93-102", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", file="SqlServerConnectionFacts.cs"];
m9_72 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", span="91-91", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", file="SqlServerConnectionFacts.cs"];
m9_15 [label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="33-33", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerConnectionFacts.cs"];
m9_16 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerConnection(_queue.Object, null))", span="35-36", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", color=red, community=0, file="SqlServerConnectionFacts.cs"];
m9_17 [label="Assert.Equal(''connection'', exception.ParamName)", span="38-38", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerConnectionFacts.cs"];
m9_18 [label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="33-33", cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerConnectionFacts.cs"];
m9_427 [label="HangFire.SqlServer.Tests.SqlServerConnectionFacts", span="", file="SqlServerConnectionFacts.cs"];
m9_428 [label=token, span="", file="SqlServerConnectionFacts.cs"];
m9_429 [label=queues, span="", file="SqlServerConnectionFacts.cs"];
m9_430 [label="HangFire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_431 [label="HangFire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_432 [label="HangFire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_433 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_434 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_435 [label="HangFire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_436 [label="HangFire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_437 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_438 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_439 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_440 [label="HangFire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_441 [label="HangFire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_442 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_443 [label="HangFire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_444 [label="HangFire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_445 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_446 [label="HangFire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_447 [label="HangFire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_448 [label="HangFire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_449 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_450 [label="HangFire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_451 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_452 [label="HangFire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_453 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m10_5 [label="Entry HangFire.Web.CombinedResourceHandler.WriteResponse()", span="36-36", cluster="HangFire.Web.CombinedResourceHandler.WriteResponse()", file="SqlServerJobQueue.cs"];
m10_6 [label=_resourceNames, span="38-38", cluster="HangFire.Web.CombinedResourceHandler.WriteResponse()", color=red, community=0, file="SqlServerJobQueue.cs"];
m10_7 [label="WriteResource(\r\n                    _assembly,\r\n                    string.Format(''{0}.{1}'', _baseNamespace, resourceName))", span="40-42", cluster="HangFire.Web.CombinedResourceHandler.WriteResponse()", color=red, community=0, file="SqlServerJobQueue.cs"];
m10_8 [label="Exit HangFire.Web.CombinedResourceHandler.WriteResponse()", span="36-36", cluster="HangFire.Web.CombinedResourceHandler.WriteResponse()", file="SqlServerJobQueue.cs"];
m10_10 [label="Entry HangFire.Web.EmbeddedResourceHandler.WriteResource(System.Reflection.Assembly, string)", span="50-50", cluster="HangFire.Web.EmbeddedResourceHandler.WriteResource(System.Reflection.Assembly, string)", file="SqlServerJobQueue.cs"];
m10_0 [label="Entry HangFire.Web.CombinedResourceHandler.CombinedResourceHandler(System.Reflection.Assembly, string, params string[])", span="26-26", cluster="HangFire.Web.CombinedResourceHandler.CombinedResourceHandler(System.Reflection.Assembly, string, params string[])", file="SqlServerJobQueue.cs"];
m10_1 [label="_assembly = assembly", span="31-31", cluster="HangFire.Web.CombinedResourceHandler.CombinedResourceHandler(System.Reflection.Assembly, string, params string[])", color=red, community=0, file="SqlServerJobQueue.cs"];
m10_2 [label="_baseNamespace = baseNamespace", span="32-32", cluster="HangFire.Web.CombinedResourceHandler.CombinedResourceHandler(System.Reflection.Assembly, string, params string[])", color=red, community=0, file="SqlServerJobQueue.cs"];
m10_3 [label="_resourceNames = resourceNames", span="33-33", cluster="HangFire.Web.CombinedResourceHandler.CombinedResourceHandler(System.Reflection.Assembly, string, params string[])", color=red, community=0, file="SqlServerJobQueue.cs"];
m10_4 [label="Exit HangFire.Web.CombinedResourceHandler.CombinedResourceHandler(System.Reflection.Assembly, string, params string[])", span="26-26", cluster="HangFire.Web.CombinedResourceHandler.CombinedResourceHandler(System.Reflection.Assembly, string, params string[])", file="SqlServerJobQueue.cs"];
m10_9 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="SqlServerJobQueue.cs"];
m10_11 [label="HangFire.Web.CombinedResourceHandler", span="", file="SqlServerJobQueue.cs"];
m11_17 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_101 [label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", span="154-154", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", file="SqlServerJobQueueFacts.cs"];
m11_102 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue, FetchedAt)\r\nvalues (scope_identity(), @queue, @fetchedAt)''", span="156-160", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_103 [label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        queue = ''default'',\r\n                        fetchedAt = DateTime.UtcNow.AddDays(-1),\r\n                        invocationData = '''',\r\n                        arguments = ''''\r\n                    });\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.NotEmpty(payload.JobId);\r\n            })", span="163-183", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_104 [label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", span="154-154", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", file="SqlServerJobQueueFacts.cs"];
m11_99 [label="Entry System.DateTime.AddMinutes(double)", span="0-0", cluster="System.DateTime.AddMinutes(double)", file="SqlServerJobQueueFacts.cs"];
m11_25 [label="var queue = CreateJobQueue(connection)", span="39-39", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_23 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="SqlServerJobQueueFacts.cs"];
m11_18 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="SqlServerJobQueueFacts.cs"];
m11_5 [label="throw new ArgumentNullException(''redis'');", span="23-23", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="SqlServerJobQueueFacts.cs", color=red, community=0];
m11_165 [label="Entry HangFire.SqlServer.SqlServerJobQueue.Enqueue(System.Collections.Generic.Queue<System.Action<SqlConnection>>, string, string)", span="88-88", cluster="HangFire.SqlServer.SqlServerJobQueue.Enqueue(System.Collections.Generic.Queue<System.Action<SqlConnection>>, string, string)", file="SqlServerJobQueueFacts.cs"];
m11_34 [label="Entry HangFire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="42-42", cluster="HangFire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueueFacts.cs"];
m11_84 [label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", span="120-120", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", file="SqlServerJobQueueFacts.cs"];
m11_86 [label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new { invocationData = '''', arguments = '''', queue = ''default'' });\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.NotNull(payload);\r\n\r\n                var fetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId = @id'',\r\n                    new { id = payload.JobId }).Single();\r\n\r\n                Assert.NotNull(fetchedAt);\r\n                Assert.True(fetchedAt > DateTime.UtcNow.AddMinutes(-1));\r\n            })", span="129-150", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_85 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="122-126", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", file="SqlServerJobQueueFacts.cs"];
m11_87 [label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", span="120-120", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", file="SqlServerJobQueueFacts.cs"];
m11_180 [label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.UseConnection(System.Action<SqlConnection>)", span="313-313", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerJobQueueFacts.cs"];
m11_182 [label="action(connection)", span="317-317", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerJobQueueFacts.cs"];
m11_181 [label="var connection = ConnectionUtils.CreateConnection()", span="315-315", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerJobQueueFacts.cs"];
m11_183 [label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.UseConnection(System.Action<SqlConnection>)", span="313-313", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerJobQueueFacts.cs"];
m11_56 [label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0", cluster="System.Threading.CancellationTokenSource.Cancel()", file="SqlServerJobQueueFacts.cs"];
m11_24 [label="Entry lambda expression", span="37-45", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_29 [label="Entry Unk.CreateJobQueue", span="", cluster="Unk.CreateJobQueue", file="SqlServerJobQueueFacts.cs"];
m11_21 [label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => queue.Dequeue(null, CreateTimingOutCancellationToken()));\r\n\r\n                Assert.Equal(''queues'', exception.ParamName);\r\n            })", span="37-45", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsNull()", file="SqlServerJobQueueFacts.cs", color=green, community=0];
m11_68 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource(int)", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource(int)", file="SqlServerJobQueueFacts.cs"];
m11_4 [label="redis == null", span="23-23", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="SqlServerJobQueueFacts.cs", color=red, community=0];
m11_173 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", file="SqlServerJobQueueFacts.cs"];
m11_10 [label="var jobType = redis.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', jobId),\r\n                ''Type'')", span="31-33", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="SqlServerJobQueueFacts.cs", color=red, community=0];
m11_20 [label="Entry Unk.GetType", span="", cluster="Unk.GetType", file="SqlServerJobQueueFacts.cs"];
m11_22 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="SqlServerJobQueueFacts.cs"];
m11_125 [label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", span="222-222", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="SqlServerJobQueueFacts.cs"];
m11_127 [label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new { queue = ''critical'', invocationData = '''', arguments = '''' });\r\n                \r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken()));\r\n            })", span="230-242", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_126 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="224-228", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="SqlServerJobQueueFacts.cs"];
m11_128 [label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", span="222-222", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="SqlServerJobQueueFacts.cs"];
m11_113 [label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", span="187-187", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="SqlServerJobQueueFacts.cs"];
m11_114 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="189-193", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_115 [label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' }\r\n                    });\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                var otherJobFetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId != @id'',\r\n                    new { id = payload.JobId }).Single();\r\n\r\n                Assert.Null(otherJobFetchedAt);\r\n            })", span="196-218", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_116 [label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", span="187-187", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="SqlServerJobQueueFacts.cs"];
m11_174 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerJobQueueFacts.cs"];
m11_168 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="SqlServerJobQueueFacts.cs"];
m11_11 [label="var type = Type.GetType(jobType)", span="34-34", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="SqlServerJobQueueFacts.cs"];
m11_12 [label="var recurringAttribute = type.GetCustomAttributes(true).OfType<RecurringAttribute>().SingleOrDefault()", span="37-37", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_13 [label="recurringAttribute != null", span="39-39", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="SqlServerJobQueueFacts.cs", color=red, community=0];
m11_14 [label="return new ScheduledState(\r\n                    ''Scheduled as a recurring job.'',\r\n                    DateTime.UtcNow.AddSeconds(recurringAttribute.Seconds));", span="41-43", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="SqlServerJobQueueFacts.cs", color=red, community=0];
m11_151 [label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", span="283-283", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", file="SqlServerJobQueueFacts.cs"];
m11_152 [label="UseConnection(connection =>\r\n            {\r\n                var actions = new Queue<Action<SqlConnection>>();\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                queue.Enqueue(actions, ''default'', ''1'');\r\n                actions.Dequeue()(connection);\r\n\r\n                var record = connection.Query(''select * from HangFire.JobQueue'').Single();\r\n                Assert.Equal(''1'', record.JobId.ToString());\r\n                Assert.Equal(''default'', record.Queue);\r\n                Assert.Null(record.FetchedAt);\r\n            })", span="285-297", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", file="SqlServerJobQueueFacts.cs"];
m11_153 [label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", span="283-283", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", file="SqlServerJobQueueFacts.cs"];
m11_167 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="SqlServerJobQueueFacts.cs"];
m11_166 [label="Entry System.Collections.Generic.Queue<T>.Dequeue()", span="0-0", cluster="System.Collections.Generic.Queue<T>.Dequeue()", file="SqlServerJobQueueFacts.cs"];
m11_111 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="SqlServerJobQueueFacts.cs"];
m11_169 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="SqlServerJobQueueFacts.cs"];
m11_0 [label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="17-17", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="SqlServerJobQueueFacts.cs"];
m11_1 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerJobQueue(null, new Mock<IDbConnection>().Object))", span="19-20", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="SqlServerJobQueueFacts.cs"];
m11_2 [label="Assert.Equal(''options'', exception.ParamName)", span="22-22", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="SqlServerJobQueueFacts.cs"];
m11_97 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="SqlServerJobQueueFacts.cs"];
m11_164 [label="Entry System.Collections.Generic.Queue<T>.Queue()", span="0-0", cluster="System.Collections.Generic.Queue<T>.Queue()", file="SqlServerJobQueueFacts.cs"];
m11_137 [label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", span="246-246", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", file="SqlServerJobQueueFacts.cs"];
m11_139 [label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''critical'', invocationData = '''', arguments = '''' }\r\n                    });\r\n\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                var critical = (SqlServerProcessingJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                Assert.NotNull(critical.JobId);\r\n                Assert.Equal(''critical'', critical.Queue);\r\n\r\n                var @default = (SqlServerProcessingJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                Assert.NotNull(@default.JobId);\r\n                Assert.Equal(''default'', @default.Queue);\r\n            })", span="254-279", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", file="SqlServerJobQueueFacts.cs"];
m11_138 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="248-252", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", file="SqlServerJobQueueFacts.cs"];
m11_140 [label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", span="246-246", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", file="SqlServerJobQueueFacts.cs"];
m11_124 [label="Entry Unk.Null", span="", cluster="Unk.Null", file="SqlServerJobQueueFacts.cs"];
m11_9 [label="return state;", span="28-28", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="SqlServerJobQueueFacts.cs", color=red, community=0];
m11_177 [label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(IDbConnection)", span="308-308", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(IDbConnection)", file="SqlServerJobQueueFacts.cs"];
m11_178 [label="return new SqlServerJobQueue(new SqlServerStorageOptions(), connection);", span="310-310", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(IDbConnection)", file="SqlServerJobQueueFacts.cs"];
m11_179 [label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(IDbConnection)", span="308-308", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(IDbConnection)", file="SqlServerJobQueueFacts.cs"];
m11_55 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="SqlServerJobQueueFacts.cs"];
m11_154 [label="Entry lambda expression", span="285-297", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_15 [label="return state;", span="46-46", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="SqlServerJobQueueFacts.cs"];
m11_38 [label="Entry lambda expression", span="51-59", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_39 [label="var queue = CreateJobQueue(connection)", span="53-53", cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_40 [label="var exception = Assert.Throws<ArgumentException>(\r\n                    () => queue.Dequeue(new string[0], CreateTimingOutCancellationToken()))", span="55-56", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_44 [label="queue.Dequeue(new string[0], CreateTimingOutCancellationToken())", span="56-56", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_49 [label="Entry lambda expression", span="65-73", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_53 [label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token))", span="71-72", cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_50 [label="var cts = new CancellationTokenSource()", span="67-67", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_52 [label="var queue = CreateJobQueue(connection)", span="69-69", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_54 [label="Exit lambda expression", span="65-73", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_57 [label="Entry lambda expression", span="72-72", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_58 [label="queue.Dequeue(DefaultQueues, cts.Token)", span="72-72", cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_59 [label="Exit lambda expression", span="72-72", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_63 [label="Entry lambda expression", span="79-86", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_77 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        jobId = 1,\r\n                        queue = ''default''\r\n                    })", span="99-105", cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_76 [label="Entry lambda expression", span="97-116", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_78 [label="var queue = CreateJobQueue(connection)", span="106-106", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_79 [label="var payload = (SqlServerProcessingJob)queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="109-111", cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_80 [label="Assert.Equal(''1'', payload.JobId)", span="114-114", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_81 [label="Assert.Equal(''default'', payload.Queue)", span="115-115", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_88 [label="Entry lambda expression", span="129-150", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_95 [label="Assert.True(fetchedAt > DateTime.UtcNow.AddMinutes(-1))", span="149-149", cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_93 [label="var fetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId = @id'',\r\n                    new { id = payload.JobId }).Single()", span="144-146", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_94 [label="Assert.NotNull(fetchedAt)", span="148-148", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_96 [label="Exit lambda expression", span="129-150", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_106 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        queue = ''default'',\r\n                        fetchedAt = DateTime.UtcNow.AddDays(-1),\r\n                        invocationData = '''',\r\n                        arguments = ''''\r\n                    })", span="165-173", cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_105 [label="Entry lambda expression", span="163-183", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_107 [label="var queue = CreateJobQueue(connection)", span="174-174", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_108 [label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="177-179", cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_109 [label="Assert.NotEmpty(payload.JobId)", span="182-182", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_118 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' }\r\n                    })", span="198-204", cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_117 [label="Entry lambda expression", span="196-218", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_119 [label="var queue = CreateJobQueue(connection)", span="205-205", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_121 [label="var otherJobFetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId != @id'',\r\n                    new { id = payload.JobId }).Single()", span="213-215", cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_120 [label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="208-210", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_122 [label="Assert.Null(otherJobFetchedAt)", span="217-217", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_129 [label="Entry lambda expression", span="230-242", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_130 [label="var queue = CreateJobQueue(connection)", span="232-232", cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_131 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new { queue = ''critical'', invocationData = '''', arguments = '''' })", span="234-236", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_132 [label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken()))", span="238-241", cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_135 [label="queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken())", span="239-241", cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_133 [label="Exit lambda expression", span="230-242", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_134 [label="Entry lambda expression", span="239-241", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_136 [label="Exit lambda expression", span="239-241", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_26 [label="HangFire.RecurringAttribute", span="", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_66 [label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token))", span="84-85", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_16 [label="Exit HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", span="21-21", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="SqlServerJobQueueFacts.cs"];
m11_65 [label="var queue = CreateJobQueue(connection)", span="82-82", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_90 [label="var queue = CreateJobQueue(connection)", span="134-134", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_143 [label="var queue = CreateJobQueue(connection)", span="264-264", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_156 [label="var queue = CreateJobQueue(connection)", span="288-288", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_28 [label="Exit lambda expression", span="37-45", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_42 [label="Exit lambda expression", span="51-59", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_41 [label="Assert.Equal(''queues'', exception.ParamName)", span="58-58", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_43 [label="Entry lambda expression", span="56-56", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_45 [label="Exit lambda expression", span="56-56", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_51 [label="cts.Cancel()", span="68-68", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_31 [label="queue.Dequeue(null, CreateTimingOutCancellationToken())", span="42-42", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_70 [label="queue.Dequeue(DefaultQueues, cts.Token)", span="85-85", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_91 [label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="137-139", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_144 [label="var critical = (SqlServerProcessingJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken())", span="266-268", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_147 [label="var @default = (SqlServerProcessingJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken())", span="273-275", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_67 [label="Exit lambda expression", span="79-86", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_64 [label="var cts = new CancellationTokenSource(200)", span="81-81", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_82 [label="Exit lambda expression", span="97-116", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_89 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new { invocationData = '''', arguments = '''', queue = ''default'' })", span="131-133", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_142 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''critical'', invocationData = '''', arguments = '''' }\r\n                    })", span="256-262", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_92 [label="Assert.NotNull(payload)", span="142-142", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_110 [label="Exit lambda expression", span="163-183", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_123 [label="Exit lambda expression", span="196-218", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_159 [label="var record = connection.Query(''select * from HangFire.JobQueue'').Single()", span="293-293", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_27 [label="Assert.Equal(''queues'', exception.ParamName)", span="44-44", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_146 [label="Assert.Equal(''critical'', critical.Queue)", span="271-271", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_149 [label="Assert.Equal(''default'', @default.Queue)", span="278-278", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_160 [label="Assert.Equal(''1'', record.JobId.ToString())", span="294-294", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_161 [label="Assert.Equal(''default'', record.Queue)", span="295-295", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_6 [label="state == null", span="24-24", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="SqlServerJobQueueFacts.cs", color=red, community=0];
m11_30 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_69 [label="Entry lambda expression", span="85-85", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_141 [label="Entry lambda expression", span="254-279", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_155 [label="var actions = new Queue<Action<SqlConnection>>()", span="287-287", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_157 [label="queue.Enqueue(actions, ''default'', ''1'')", span="290-290", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_32 [label="Exit lambda expression", span="42-42", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_71 [label="Exit lambda expression", span="85-85", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_145 [label="Assert.NotNull(critical.JobId)", span="270-270", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_148 [label="Assert.NotNull(@default.JobId)", span="277-277", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_162 [label="Assert.Null(record.FetchedAt)", span="296-296", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_158 [label="actions.Dequeue()(connection)", span="291-291", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_150 [label="Exit lambda expression", span="254-279", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_8 [label="state.StateName != SucceededState.Name", span="26-26", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="SqlServerJobQueueFacts.cs", color=red, community=0];
m11_7 [label="throw new ArgumentNullException(''state'');", span="24-24", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="SqlServerJobQueueFacts.cs", color=red, community=0];
m11_163 [label="Exit lambda expression", span="285-297", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m11_72 [label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", span="90-90", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", file="SqlServerJobQueueFacts.cs"];
m11_73 [label="string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@jobId, @queue)''", span="92-94", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_74 [label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        jobId = 1,\r\n                        queue = ''default''\r\n                    });\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                // Act\r\n                var payload = (SqlServerProcessingJob)queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.Equal(''1'', payload.JobId);\r\n                Assert.Equal(''default'', payload.Queue);\r\n            })", span="97-116", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_75 [label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", span="90-90", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", file="SqlServerJobQueueFacts.cs"];
m11_33 [label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", span="300-300", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", file="SqlServerJobQueueFacts.cs"];
m11_170 [label="var source = new CancellationTokenSource(TimeSpan.FromSeconds(10))", span="302-302", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", file="SqlServerJobQueueFacts.cs"];
m11_171 [label="return source.Token;", span="303-303", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", file="SqlServerJobQueueFacts.cs"];
m11_172 [label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", span="300-300", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", file="SqlServerJobQueueFacts.cs"];
m11_19 [label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerJobQueueFacts.cs"];
m11_112 [label="Entry Unk.NotEmpty", span="", cluster="Unk.NotEmpty", file="SqlServerJobQueueFacts.cs"];
m11_98 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="SqlServerJobQueueFacts.cs"];
m11_3 [label="Entry HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", span="21-21", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="SqlServerJobQueueFacts.cs"];
m11_100 [label="Entry Unk.True", span="", cluster="Unk.True", file="SqlServerJobQueueFacts.cs"];
m11_83 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="SqlServerJobQueueFacts.cs"];
m11_60 [label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", span="77-77", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="SqlServerJobQueueFacts.cs"];
m11_61 [label="UseConnection(connection =>\r\n            {\r\n                var cts = new CancellationTokenSource(200);\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token));\r\n            })", span="79-86", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_62 [label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", span="77-77", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="SqlServerJobQueueFacts.cs"];
m11_184 [label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37", cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerJobQueueFacts.cs"];
m11_46 [label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", span="63-63", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", file="SqlServerJobQueueFacts.cs"];
m11_47 [label="UseConnection(connection =>\r\n            {\r\n                var cts = new CancellationTokenSource();\r\n                cts.Cancel();\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token));\r\n            })", span="65-73", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_48 [label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", span="63-63", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", file="SqlServerJobQueueFacts.cs"];
m11_35 [label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", span="49-49", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", file="SqlServerJobQueueFacts.cs"];
m11_36 [label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                var exception = Assert.Throws<ArgumentException>(\r\n                    () => queue.Dequeue(new string[0], CreateTimingOutCancellationToken()));\r\n\r\n                Assert.Equal(''queues'', exception.ParamName);\r\n            })", span="51-59", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", color=green, community=0, file="SqlServerJobQueueFacts.cs"];
m11_37 [label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", span="49-49", cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", file="SqlServerJobQueueFacts.cs"];
m11_185 [label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts", span="", file="SqlServerJobQueueFacts.cs"];
m11_188 [label=cts, span="", file="SqlServerJobQueueFacts.cs"];
m11_189 [label=queue, span="", file="SqlServerJobQueueFacts.cs"];
m11_192 [label=arrangeSql, span="", file="SqlServerJobQueueFacts.cs"];
m11_194 [label=arrangeSql, span="", file="SqlServerJobQueueFacts.cs"];
m11_195 [label=arrangeSql, span="", file="SqlServerJobQueueFacts.cs"];
m11_197 [label=queue, span="", file="SqlServerJobQueueFacts.cs"];
m11_187 [label=queue, span="", file="SqlServerJobQueueFacts.cs"];
m11_196 [label=arrangeSql, span="", file="SqlServerJobQueueFacts.cs"];
m11_186 [label=queue, span="", file="SqlServerJobQueueFacts.cs"];
m11_190 [label=cts, span="", file="SqlServerJobQueueFacts.cs"];
m11_191 [label=queue, span="", file="SqlServerJobQueueFacts.cs"];
m11_193 [label=arrangeSql, span="", file="SqlServerJobQueueFacts.cs"];
m11_198 [label=arrangeSql, span="", file="SqlServerJobQueueFacts.cs"];
m12_27 [label="Entry Hangfire.States.ApplyStateContext.ApplyStateContext(Hangfire.States.StateContext, Hangfire.States.IState, string, System.Collections.Generic.IEnumerable<Hangfire.States.IState>)", span="24-24", cluster="Hangfire.States.ApplyStateContext.ApplyStateContext(Hangfire.States.StateContext, Hangfire.States.IState, string, System.Collections.Generic.IEnumerable<Hangfire.States.IState>)", file="SqlServerProcessingJob.cs"];
m12_11 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="SqlServerProcessingJob.cs"];
m12_22 [label="Entry Unk.>", span="", cluster="Unk.>", file="SqlServerProcessingJob.cs"];
m12_0 [label="Entry HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", span="27-27", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerProcessingJob.cs"];
m12_1 [label="connection == null", span="29-29", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", color=red, community=0, file="SqlServerProcessingJob.cs"];
m12_2 [label="throw new ArgumentNullException(''connection'');", span="29-29", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerProcessingJob.cs", color=red, community=0];
m12_3 [label="jobId == null", span="30-30", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerProcessingJob.cs"];
m12_4 [label="throw new ArgumentNullException(''jobId'');", span="30-30", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerProcessingJob.cs"];
m12_5 [label="queue == null", span="31-31", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerProcessingJob.cs"];
m12_8 [label="JobId = jobId", span="35-35", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerProcessingJob.cs"];
m12_7 [label="Entry Hangfire.Core.Tests.StateContextMock.StateContextMock()", span="10-10", cluster="Hangfire.Core.Tests.StateContextMock.StateContextMock()", color=red, community=0, file="SqlServerProcessingJob.cs"];
m12_9 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="SqlServerProcessingJob.cs"];
m12_6 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="148-148", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerProcessingJob.cs"];
m12_10 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="SqlServerProcessingJob.cs"];
m12_15 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="SqlServerProcessingJob.cs"];
m12_43 [label="Entry Unk.Same", span="", cluster="Unk.Same", file="SqlServerProcessingJob.cs"];
m12_28 [label="Entry Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenTraversedStatesIsNull()", span="45-45", cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenTraversedStatesIsNull()", file="SqlServerProcessingJob.cs"];
m12_29 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new ApplyStateContext(_stateContext.Object, _newState.Object, OldState, null))", span="47-48", cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenTraversedStatesIsNull()", file="SqlServerProcessingJob.cs"];
m12_30 [label="Assert.Equal(''traversedStates'', exception.ParamName)", span="50-50", cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenTraversedStatesIsNull()", file="SqlServerProcessingJob.cs"];
m12_31 [label="Exit Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenTraversedStatesIsNull()", span="45-45", cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenTraversedStatesIsNull()", file="SqlServerProcessingJob.cs"];
m12_35 [label="Entry ApplyStateContext.cstr", span="", cluster="ApplyStateContext.cstr", file="SqlServerProcessingJob.cs"];
m12_23 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="SqlServerProcessingJob.cs"];
m12_32 [label="Entry lambda expression", span="48-48", cluster="lambda expression", file="SqlServerProcessingJob.cs"];
m12_12 [label="Entry HangFire.SqlServer.SqlServerProcessingJob.Dispose()", span="42-42", cluster="HangFire.SqlServer.SqlServerProcessingJob.Dispose()", color=green, community=0, file="SqlServerProcessingJob.cs"];
m12_13 [label="_connection.Execute(''delete from HangFire.JobQueue where JobId = @id and Queue = @queueName'',\r\n                new { id = JobId, queueName = Queue })", span="44-45", cluster="HangFire.SqlServer.SqlServerProcessingJob.Dispose()", file="SqlServerProcessingJob.cs", color=red, community=1];
m12_25 [label="new ApplyStateContext(_stateContext.Object, null, OldState, _traversedStates)", span="39-39", cluster="lambda expression", file="SqlServerProcessingJob.cs"];
m12_33 [label="new ApplyStateContext(_stateContext.Object, _newState.Object, OldState, null)", span="48-48", cluster="lambda expression", file="SqlServerProcessingJob.cs"];
m12_24 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="SqlServerProcessingJob.cs"];
m12_26 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="SqlServerProcessingJob.cs"];
m12_34 [label="Exit lambda expression", span="48-48", cluster="lambda expression", file="SqlServerProcessingJob.cs"];
m12_16 [label="HangFire.SqlServer.SqlServerProcessingJob", span="", cluster="lambda expression", file="SqlServerProcessingJob.cs"];
m12_17 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="SqlServerProcessingJob.cs"];
m12_14 [label="Exit HangFire.SqlServer.SqlServerProcessingJob.Dispose()", span="42-42", cluster="HangFire.SqlServer.SqlServerProcessingJob.Dispose()", file="SqlServerProcessingJob.cs"];
m12_36 [label="Entry Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ShouldSetPropertiesCorrectly()", span="54-54", cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ShouldSetPropertiesCorrectly()", file="SqlServerProcessingJob.cs"];
m12_37 [label="var context = new ApplyStateContext(\r\n                _stateContext.Object,\r\n                _newState.Object,\r\n                OldState,\r\n                _traversedStates)", span="56-60", cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ShouldSetPropertiesCorrectly()", file="SqlServerProcessingJob.cs"];
m12_39 [label="Assert.Same(_newState.Object, context.NewState)", span="63-63", cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ShouldSetPropertiesCorrectly()", file="SqlServerProcessingJob.cs"];
m12_40 [label="Assert.Same(_job, context.Job)", span="64-64", cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ShouldSetPropertiesCorrectly()", file="SqlServerProcessingJob.cs"];
m12_41 [label="Assert.Same(_traversedStates, context.TraversedStates)", span="65-65", cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ShouldSetPropertiesCorrectly()", file="SqlServerProcessingJob.cs"];
m12_38 [label="Assert.Equal(OldState, context.OldStateName)", span="62-62", cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ShouldSetPropertiesCorrectly()", file="SqlServerProcessingJob.cs"];
m12_42 [label="Exit Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ShouldSetPropertiesCorrectly()", span="54-54", cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ShouldSetPropertiesCorrectly()", file="SqlServerProcessingJob.cs"];
m12_18 [label="Entry Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenNewStateIsNull()", span="36-36", cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenNewStateIsNull()", file="SqlServerProcessingJob.cs"];
m12_19 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new ApplyStateContext(_stateContext.Object, null, OldState, _traversedStates))", span="38-39", cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenNewStateIsNull()", file="SqlServerProcessingJob.cs"];
m12_20 [label="Assert.Equal(''newState'', exception.ParamName)", span="41-41", cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenNewStateIsNull()", file="SqlServerProcessingJob.cs"];
m12_21 [label="Exit Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenNewStateIsNull()", span="36-36", cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenNewStateIsNull()", file="SqlServerProcessingJob.cs"];
m12_44 [label="Hangfire.Core.Tests.States.ApplyStateContextFacts", span="", file="SqlServerProcessingJob.cs"];
m14_13 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerStorage.cs"];
m14_20 [label="Entry HangFire.SqlServer.SqlServerStorage.GetConnection()", span="59-59", cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", file="SqlServerStorage.cs"];
m14_21 [label="var connection = CreateAndOpenConnection()", span="61-61", cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", color=green, community=0, file="SqlServerStorage.cs"];
m14_22 [label="var queue = _options.MessageQueuePathPattern != null\r\n                ? (IPersistentJobQueue)new MessageQueueJobQueue(_options.MessageQueuePathPattern)\r\n                : new SqlServerJobQueue(_options, connection)", span="62-64", cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", file="SqlServerStorage.cs"];
m14_23 [label="return new SqlServerConnection(queue, connection);", span="66-66", cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", file="SqlServerStorage.cs"];
m14_24 [label="Exit HangFire.SqlServer.SqlServerStorage.GetConnection()", span="59-59", cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", file="SqlServerStorage.cs"];
m14_39 [label="Entry HangFire.SqlServer.SqlServerStorage.ToString()", span="81-81", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m14_41 [label="var parts = _connectionString.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)\r\n                    .Select(x => x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries))\r\n                    .Select(x => new { Key = x[0].Trim(), Value = x[1].Trim() })\r\n                    .ToDictionary(x => x.Key, x => x.Value)", span="87-90", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m14_40 [label="string canNotParseMessage = ''<Connection string can not be parsed>''", span="83-83", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m14_42 [label="var builder = new StringBuilder()", span="92-92", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m14_44 [label="parts.ContainsKey(alias)", span="96-96", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m14_45 [label="builder.AppendFormat(''{1}'', alias, parts[alias])", span="98-98", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m14_49 [label="parts.ContainsKey(alias)", span="107-107", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m14_50 [label="builder.AppendFormat(''{1}'', alias, parts[alias])", span="109-109", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m14_51 [label="return builder.Length != 0 \r\n                    ? String.Format(''SQL Server: {0}'', builder) \r\n                    : canNotParseMessage;", span="114-116", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m14_53 [label="return canNotParseMessage;", span="120-120", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m14_43 [label="new[] { ''Data Source'', ''Server'', ''Address'', ''Addr'', ''Network Address'' }", span="94-94", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m14_46 [label="builder.Length != 0", span="103-103", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m14_47 [label="builder.Append(''@'')", span="103-103", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m14_48 [label="new[] { ''Database'', ''Initial Catalog'' }", span="105-105", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m14_52 [label=Exception, span="118-118", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m14_54 [label="Exit HangFire.SqlServer.SqlServerStorage.ToString()", span="81-81", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs"];
m14_19 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection)", span="35-35", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection)", file="SqlServerStorage.cs"];
m14_61 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)", file="SqlServerStorage.cs"];
m14_57 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="SqlServerStorage.cs"];
m14_62 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="SqlServerStorage.cs"];
m14_37 [label="Entry Unk.Info", span="", cluster="Unk.Info", file="SqlServerStorage.cs"];
m14_32 [label="Entry HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", span="74-74", cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs"];
m14_34 [label="logger.InfoFormat(''    Queue poll interval: {0}.'', _options.QueuePollInterval)", span="77-77", cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs"];
m14_35 [label="logger.InfoFormat(''    Invisibility timeout: {0}.'', _options.InvisibilityTimeout)", span="78-78", cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs"];
m14_33 [label="logger.Info(''Using the following options for SQL Server job storage:'')", span="76-76", cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs"];
m14_36 [label="Exit HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", span="74-74", cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs"];
m14_58 [label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0", cluster="System.Text.StringBuilder.StringBuilder()", file="SqlServerStorage.cs"];
m14_81 [label="Entry Unk.Open", span="", cluster="Unk.Open", file="SqlServerStorage.cs"];
m14_38 [label="Entry Unk.InfoFormat", span="", cluster="Unk.InfoFormat", file="SqlServerStorage.cs"];
m14_69 [label="Entry Unk.Trim", span="", cluster="Unk.Trim", file="SqlServerStorage.cs"];
m14_80 [label="Entry SqlConnection.cstr", span="", cluster="SqlConnection.cstr", file="SqlServerStorage.cs"];
m14_60 [label="Entry Unk.AppendFormat", span="", cluster="Unk.AppendFormat", file="SqlServerStorage.cs"];
m14_16 [label="Entry HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="54-54", cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="SqlServerStorage.cs"];
m14_17 [label="return new SqlServerMonitoringApi(CreateAndOpenConnection());", span="56-56", cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="SqlServerStorage.cs"];
m14_18 [label="Exit HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="54-54", cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="SqlServerStorage.cs"];
m14_27 [label="Entry SqlServerConnection.cstr", span="", cluster="SqlServerConnection.cstr", file="SqlServerStorage.cs"];
m14_31 [label="Entry HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", span="38-38", cluster="HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", file="SqlServerStorage.cs"];
m14_26 [label="Entry SqlServerJobQueue.cstr", span="", cluster="SqlServerJobQueue.cstr", file="SqlServerStorage.cs"];
m14_2 [label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="37-37", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m14_7 [label="_options = options", span="42-42", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m14_8 [label="_connectionString = connectionString", span="43-43", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m14_10 [label="var connection = CreateAndOpenConnection()", span="47-47", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m14_5 [label="options == null", span="40-40", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m14_9 [label="options.PrepareSchemaIfNecessary", span="45-45", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m14_11 [label="SqlServerObjectsInstaller.Install(connection)", span="49-49", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m14_3 [label="connectionString == null", span="39-39", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m14_6 [label="throw new ArgumentNullException(''options'');", span="40-40", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m14_4 [label="throw new ArgumentNullException(''connectionString'');", span="39-39", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m14_12 [label="Exit HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="37-37", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs"];
m14_55 [label="Entry string.Split(char[], System.StringSplitOptions)", span="0-0", cluster="string.Split(char[], System.StringSplitOptions)", file="SqlServerStorage.cs"];
m14_73 [label="Entry lambda expression", span="90-90", cluster="lambda expression", file="SqlServerStorage.cs"];
m14_63 [label="Entry lambda expression", span="88-88", cluster="lambda expression", file="SqlServerStorage.cs"];
m14_66 [label="Entry lambda expression", span="89-89", cluster="lambda expression", file="SqlServerStorage.cs"];
m14_70 [label="Entry lambda expression", span="90-90", cluster="lambda expression", file="SqlServerStorage.cs"];
m14_64 [label="x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries)", span="88-88", cluster="lambda expression", file="SqlServerStorage.cs"];
m14_65 [label="Exit lambda expression", span="88-88", cluster="lambda expression", file="SqlServerStorage.cs"];
m14_68 [label="Exit lambda expression", span="89-89", cluster="lambda expression", file="SqlServerStorage.cs"];
m14_67 [label="new { Key = x[0].Trim(), Value = x[1].Trim() }", span="89-89", cluster="lambda expression", file="SqlServerStorage.cs"];
m14_72 [label="Exit lambda expression", span="90-90", cluster="lambda expression", file="SqlServerStorage.cs"];
m14_71 [label="x.Key", span="90-90", cluster="lambda expression", file="SqlServerStorage.cs"];
m14_74 [label="x.Value", span="90-90", cluster="lambda expression", file="SqlServerStorage.cs"];
m14_75 [label="Exit lambda expression", span="90-90", cluster="lambda expression", file="SqlServerStorage.cs"];
m14_25 [label="Entry HangFire.SqlServer.MessageQueueJobQueue.MessageQueueJobQueue(string)", span="32-32", cluster="HangFire.SqlServer.MessageQueueJobQueue.MessageQueueJobQueue(string)", file="SqlServerStorage.cs"];
m14_56 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="SqlServerStorage.cs"];
m14_28 [label="Entry HangFire.SqlServer.SqlServerStorage.GetComponents()", span="69-69", cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerStorage.cs"];
m14_29 [label="yield return new ExpirationManager(this);", span="71-71", cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerStorage.cs"];
m14_30 [label="Exit HangFire.SqlServer.SqlServerStorage.GetComponents()", span="69-69", cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerStorage.cs"];
m14_15 [label="Entry HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", span="34-34", cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="SqlServerStorage.cs"];
m14_14 [label="Entry HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="124-124", cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs"];
m14_76 [label="var connection = new SqlConnection(_connectionString)", span="126-126", cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs"];
m14_77 [label="connection.Open()", span="127-127", cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs"];
m14_78 [label="return connection;", span="129-129", cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs"];
m14_79 [label="Exit HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="124-124", cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs"];
m14_59 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="SqlServerStorage.cs"];
m14_82 [label="HangFire.SqlServer.SqlServerStorage", span="", file="SqlServerStorage.cs"];
m15_5 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerStorageOptions.cs"];
m15_6 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerStorageOptions.cs"];
m15_0 [label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs"];
m15_1 [label="QueuePollInterval = TimeSpan.FromSeconds(15)", span="26-26", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs"];
m15_2 [label="InvisibilityTimeout = TimeSpan.FromMinutes(5)", span="27-27", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs"];
m15_3 [label="PrepareSchemaIfNecessary = true", span="29-29", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs"];
m15_4 [label="Exit HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs"];
m15_7 [label="HangFire.SqlServer.SqlServerStorageOptions", span="", file="SqlServerStorageOptions.cs"];
m16_8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", file="SqlServerWriteOnlyTransaction.cs"];
m16_57 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", span="129-129", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", file="SqlServerWriteOnlyTransaction.cs"];
m16_62 [label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = +1 })", span="124-126", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_59 [label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = +1 }))", span="124-126", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_60 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="122-122", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_64 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="129-129", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m16_61 [label="Entry lambda expression", span="124-126", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_63 [label="Exit lambda expression", span="124-126", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_58 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="122-122", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_65 [label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = +1, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="131-133", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m16_14 [label=_commandQueue, span="56-56", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs"];
m16_16 [label="transaction.Complete()", span="61-61", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs"];
m16_15 [label="command(_connection)", span="58-58", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs"];
m16_17 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="48-48", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs"];
m16_25 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="65-65", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m16_29 [label="Exit lambda expression", span="67-69", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_82 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="150-150", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_83 [label="AddToSet(key, value, 0.0)", span="152-152", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_84 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="150-150", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_98 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="176-176", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_99 [label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.List ([Key], Value) values (@key, @value)'',\r\n                new { key, value }))", span="178-180", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_100 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="176-176", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_85 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="155-155", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransaction.cs"];
m16_86 [label="string addSql = @''\r\nmerge HangFire.[Set] as Target\r\nusing (VALUES (@key, @value, @score)) as Source ([Key], Value, Score)\r\non Target.[Key] = Source.[Key] and Target.Value = Source.Value\r\nwhen matched then update set Score = Source.Score\r\nwhen not matched then insert ([Key], Value, Score) values (Source.[Key], Source.Value, Source.Score);''", span="157-162", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransaction.cs"];
m16_87 [label="QueueCommand(x => x.Execute(\r\n                addSql,\r\n                new { key, value, score }))", span="164-166", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransaction.cs"];
m16_88 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="155-155", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransaction.cs"];
m16_66 [label="Entry Unk.When", span="", cluster="Unk.When", file="SqlServerWriteOnlyTransaction.cs"];
m16_119 [label="Entry System.Collections.Generic.Queue<T>.Enqueue(T)", span="0-0", cluster="System.Collections.Generic.Queue<T>.Enqueue(T)", file="SqlServerWriteOnlyTransaction.cs"];
m16_26 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", span="202-202", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransaction.cs"];
m16_27 [label="Entry lambda expression", span="67-69", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_28 [label="x.Execute(\r\n                @''update HangFire.Job set ExpireAt = @expireAt where Id = @id'',\r\n                new { expireAt = DateTime.UtcNow.Add(expireIn), id = jobId })", span="67-69", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_35 [label="Entry lambda expression", span="74-76", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_67 [label="Entry lambda expression", span="131-133", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_73 [label="Entry lambda expression", span="138-140", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_69 [label="Exit lambda expression", span="131-133", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_70 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="136-136", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_74 [label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = -1 })", span="138-140", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_72 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="136-136", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_68 [label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = +1, expireAt = DateTime.UtcNow.Add(expireIn) })", span="131-133", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_71 [label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = -1 }))", span="138-140", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_75 [label="Exit lambda expression", span="138-140", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_5 [label="_queue = queue", span="40-40", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", file="SqlServerWriteOnlyTransaction.cs", color=red, community=0];
m16_36 [label="x.Execute(\r\n                @''update HangFire.Job set ExpireAt = NULL where Id = @id'',\r\n                new { id = jobId })", span="74-76", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_40 [label="QueueCommand(x => x.Execute(\r\n                addAndSetStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId,\r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow,\r\n                    data = JobHelper.ToJson(state.SerializeData()),\r\n                    id = jobId\r\n                }))", span="86-96", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", file="SqlServerWriteOnlyTransaction.cs"];
m16_38 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", span="79-79", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", file="SqlServerWriteOnlyTransaction.cs"];
m16_39 [label="string addAndSetStateSql = @''\r\ninsert into HangFire.State (JobId, Name, Reason, CreatedAt, Data)\r\nvalues (@jobId, @name, @reason, @createdAt, @data);\r\nupdate HangFire.Job set StateId = SCOPE_IDENTITY(), StateName = @name where Id = @id;''", span="81-84", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", file="SqlServerWriteOnlyTransaction.cs"];
m16_41 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", span="79-79", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", file="SqlServerWriteOnlyTransaction.cs"];
m16_37 [label="Exit lambda expression", span="74-76", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_42 [label="Entry lambda expression", span="86-96", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_47 [label="this.ScenarioSetup(scenarioInfo)", span="106-106", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerWriteOnlyTransaction.cs"];
m16_48 [label="this.FeatureBackground()", span="108-108", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerWriteOnlyTransaction.cs"];
m16_49 [label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="110-112", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerWriteOnlyTransaction.cs"];
m16_50 [label="table1.AddRow(new string[] {\r\n                        ''EnqueuedAt'',\r\n                        ''<UtcNow timestamp>''})", span="113-115", cluster="HangFire.Tests.States.EnqueuedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerWriteOnlyTransaction.cs"];
m16_45 [label="Entry HangFire.States.IState.SerializeData()", span="26-26", cluster="HangFire.States.IState.SerializeData()", file="SqlServerWriteOnlyTransaction.cs"];
m16_51 [label="Entry lambda expression", span="105-114", cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs"];
m16_52 [label="x.Execute(\r\n                addStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId, \r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow, \r\n                    data = JobHelper.ToJson(state.SerializeData())\r\n                })", span="105-114", cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs"];
m16_53 [label="Exit lambda expression", span="105-114", cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs"];
m16_46 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)", file="SqlServerWriteOnlyTransaction.cs"];
m16_54 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="117-117", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_110 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="190-190", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransaction.cs"];
m16_111 [label="string trimSql = @''\r\nwith cte as (\r\nselect row_number() over (order by Id desc) as row_num, [Key] from HangFire.List)\r\ndelete from cte where row_num not between @start and @end and [Key] = @key''", span="192-195", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransaction.cs"];
m16_112 [label="QueueCommand(x => x.Execute(\r\n                trimSql,\r\n                new { key = key, start = keepStartingFrom + 1, end = keepEndingAt + 1 }))", span="197-199", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransaction.cs"];
m16_113 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="190-190", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransaction.cs"];
m16_117 [label="_commandQueue.Enqueue(action)", span="204-204", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransaction.cs"];
m16_118 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", span="202-202", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransaction.cs"];
m16_20 [label="Entry Unk.EnlistTransaction", span="", cluster="Unk.EnlistTransaction", file="SqlServerWriteOnlyTransaction.cs"];
m16_21 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="SqlServerWriteOnlyTransaction.cs"];
m16_18 [label="Entry TransactionScope.cstr", span="", cluster="TransactionScope.cstr", file="SqlServerWriteOnlyTransaction.cs"];
m16_76 [label="HangFire.Tests.States.EnqueuedStateFeature", span="", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m16_77 [label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = -1, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="145-147", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m16_78 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="143-143", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m16_7 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", span="35-35", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", file="SqlServerWriteOnlyTransaction.cs"];
m16_22 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerWriteOnlyTransaction.cs"];
m16_30 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.FeatureBackground()", span="71-71", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureBackground()", file="SqlServerWriteOnlyTransaction.cs"];
m16_92 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="169-169", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_93 [label="QueueCommand(x => x.Execute(\r\n                @''delete from HangFire.[Set] where [Key] = @key and Value = @value'',\r\n                new { key, value }))", span="171-173", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_94 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="169-169", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_23 [label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerWriteOnlyTransaction.cs"];
m16_24 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerWriteOnlyTransaction.cs"];
m16_56 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="117-117", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_104 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="183-183", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_105 [label="QueueCommand(x => x.Execute(\r\n                @''delete from HangFire.List where [Key] = @key and Value = @value'',\r\n                new { key, value }))", span="185-187", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_106 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="183-183", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_11 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="48-48", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs"];
m16_12 [label="var transaction = new TransactionScope(\r\n                TransactionScopeOption.Required,\r\n                new TransactionOptions { IsolationLevel = IsolationLevel.Serializable })", span="50-52", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs"];
m16_13 [label="_connection.EnlistTransaction(Transaction.Current)", span="54-54", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs"];
m16_19 [label="Entry TransactionOptions.cstr", span="", cluster="TransactionOptions.cstr", file="SqlServerWriteOnlyTransaction.cs"];
m16_114 [label="Entry lambda expression", span="197-199", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_43 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SqlServerWriteOnlyTransaction.cs"];
m16_44 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="SqlServerWriteOnlyTransaction.cs"];
m16_80 [label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = -1, expireAt = DateTime.UtcNow.Add(expireIn) })", span="145-147", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_79 [label="Entry lambda expression", span="145-147", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_81 [label="Exit lambda expression", span="145-147", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_90 [label="x.Execute(\r\n                addSql,\r\n                new { key, value, score })", span="164-166", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_89 [label="Entry lambda expression", span="164-166", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_91 [label="Exit lambda expression", span="164-166", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_96 [label="x.Execute(\r\n                @''delete from HangFire.[Set] where [Key] = @key and Value = @value'',\r\n                new { key, value })", span="171-173", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_95 [label="Entry lambda expression", span="171-173", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_97 [label="Exit lambda expression", span="171-173", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_102 [label="x.Execute(\r\n                @''insert into HangFire.List ([Key], Value) values (@key, @value)'',\r\n                new { key, value })", span="178-180", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_101 [label="Entry lambda expression", span="178-180", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_103 [label="Exit lambda expression", span="178-180", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_108 [label="x.Execute(\r\n                @''delete from HangFire.List where [Key] = @key and Value = @value'',\r\n                new { key, value })", span="185-187", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_107 [label="Entry lambda expression", span="185-187", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_109 [label="Exit lambda expression", span="185-187", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_115 [label="x.Execute(\r\n                trimSql,\r\n                new { key = key, start = keepStartingFrom + 1, end = keepEndingAt + 1 })", span="197-199", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_116 [label="Exit lambda expression", span="197-199", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m16_0 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerWriteOnlyTransaction.cs"];
m16_1 [label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=red, community=0, file="SqlServerWriteOnlyTransaction.cs"];
m16_3 [label="testRunner.OnFeatureStart(featureInfo)", span="35-35", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerWriteOnlyTransaction.cs"];
m16_6 [label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span="", cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SqlServerWriteOnlyTransaction.cs"];
m16_2 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Enqueued state'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs"];
m16_4 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerWriteOnlyTransaction.cs"];
m16_34 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", span="72-72", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_55 [label="_queue.Enqueue(_commandQueue, queue, jobId)", span="119-119", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransaction.cs", color=red, community=0];
m16_31 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="SqlServerWriteOnlyTransaction.cs"];
m16_32 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", span="72-72", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_33 [label="QueueCommand(x => x.Execute(\r\n                @''update HangFire.Job set ExpireAt = NULL where Id = @id'',\r\n                new { id = jobId }))", span="74-76", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="SqlServerWriteOnlyTransaction.cs"];
m16_9 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.Dispose()", span="44-44", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Dispose()", file="SqlServerWriteOnlyTransaction.cs"];
m16_10 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.Dispose()", span="44-44", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Dispose()", file="SqlServerWriteOnlyTransaction.cs"];
m16_120 [label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_121 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_122 [label="System.TimeSpan", span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_123 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_124 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_125 [label="HangFire.States.IState", span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_126 [label=addAndSetStateSql, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_127 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_128 [label="HangFire.States.IState", span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_129 [label=addStateSql, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_130 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_131 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_132 [label="System.TimeSpan", span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_133 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_134 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_135 [label="System.TimeSpan", span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_136 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_137 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_138 [label=double, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_139 [label=addSql, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_140 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_141 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_142 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_143 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_144 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_145 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_146 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_147 [label=int, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_148 [label=int, span="", file="SqlServerWriteOnlyTransaction.cs"];
m16_149 [label=trimSql, span="", file="SqlServerWriteOnlyTransaction.cs"];
m17_50 [label="Exit HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", span="94-94", cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_0 [label="Entry HangFire.Tests.Server.JobManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.Server.JobManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_16 [label="HangFire.Tests.Server.JobManagerFeature.FeatureSetup(null)", span="51-51", cluster="HangFire.Tests.Server.JobManagerFeature.TestInitialize()", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_15 [label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Job manager''))", span="48-49", cluster="HangFire.Tests.Server.JobManagerFeature.TestInitialize()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_17 [label="Exit HangFire.Tests.Server.JobManagerFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.Server.JobManagerFeature.TestInitialize()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_1 [label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32", cluster="HangFire.Tests.Server.JobManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_2 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Job manager'', ''\r\n  As a user, I expect that my enqueued jobs will be processed by the Server.'', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34", cluster="HangFire.Tests.Server.JobManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerWriteOnlyTransactionFacts.cs", color=red, community=0];
m17_4 [label="Exit HangFire.Tests.Server.JobManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.Server.JobManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_5 [label="Entry Unk.GetTestRunner", span="", cluster="Unk.GetTestRunner", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_6 [label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span="", cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_7 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_10 [label="testRunner.OnFeatureEnd()", span="41-41", cluster="HangFire.Tests.Server.JobManagerFeature.FeatureTearDown()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_11 [label="testRunner = null", span="42-42", cluster="HangFire.Tests.Server.JobManagerFeature.FeatureTearDown()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_12 [label="Exit HangFire.Tests.Server.JobManagerFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.Server.JobManagerFeature.FeatureTearDown()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_14 [label="Entry HangFire.Tests.Server.JobManagerFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.Server.JobManagerFeature.TestInitialize()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_18 [label="Entry HangFire.Tests.Server.JobManagerFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioTearDown()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_19 [label="testRunner.OnScenarioEnd()", span="58-58", cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioTearDown()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_20 [label="Exit HangFire.Tests.Server.JobManagerFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioTearDown()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_22 [label="Entry HangFire.Tests.Server.JobManagerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_23 [label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63", cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_24 [label="Exit HangFire.Tests.Server.JobManagerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_25 [label="Entry Unk.OnScenarioStart", span="", cluster="Unk.OnScenarioStart", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_26 [label="Entry HangFire.Tests.Server.JobManagerFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioCleanup()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_27 [label="testRunner.CollectScenarioErrors()", span="68-68", cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioCleanup()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_29 [label="Entry Unk.CollectScenarioErrors", span="", cluster="Unk.CollectScenarioErrors", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_30 [label="Entry HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", span="75-75", cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_31 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Manager should perform a job'', ((string[])(null)))", span="77-77", cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_32 [label="this.ScenarioSetup(scenarioInfo)", span="79-79", cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_33 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81", cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_34 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="83-83", cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_35 [label="testRunner.Then(''the job should be performed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="85-85", cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_36 [label="this.ScenarioCleanup()", span="87-87", cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_13 [label="Entry Unk.OnFeatureEnd", span="", cluster="Unk.OnFeatureEnd", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_3 [label="testRunner.OnFeatureStart(featureInfo)", span="35-35", cluster="HangFire.Tests.Server.JobManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerWriteOnlyTransactionFacts.cs", color=red, community=0];
m17_9 [label="Entry HangFire.Tests.Server.JobManagerFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.Server.JobManagerFeature.FeatureTearDown()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_21 [label="Entry Unk.OnScenarioEnd", span="", cluster="Unk.OnScenarioEnd", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_28 [label="Exit HangFire.Tests.Server.JobManagerFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioCleanup()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_37 [label="Exit HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", span="75-75", cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_61 [label="Entry HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", span="137-137", cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_62 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''An unexisting job should not be processed, but it should be removed from the dequ'' +\r\n                    ''eued list'', ((string[])(null)))", span="139-140", cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_63 [label="this.ScenarioSetup(scenarioInfo)", span="142-142", cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_64 [label="testRunner.Given(''the \'unexisting\' job, that was enqueued'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="144-144", cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_65 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="146-146", cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_66 [label="testRunner.Then(''there should be no performing actions'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="148-148", cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_67 [label="testRunner.But(''the \'unexisting\' job should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="150-150", cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_68 [label="this.ScenarioCleanup()", span="152-152", cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_69 [label="Exit HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", span="137-137", cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_45 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="100-100", cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_51 [label="Entry HangFire.Web.HtmlHelper.JobId(string)", span="17-17", cluster="HangFire.Web.HtmlHelper.JobId(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_70 [label="Entry Unk.But", span="", cluster="Unk.But", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_44 [label="this.ScenarioSetup(scenarioInfo)", span="98-98", cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_54 [label="this.ScenarioSetup(scenarioInfo)", span="119-119", cluster="HangFire.Tests.Server.JobManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_43 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Successfully performed job should have the Succeeded state'', ((string[])(null)))", span="96-96", cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_38 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_81 [label="Entry HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", span="184-184", cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_82 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Disposable job should be disposed after processing'', ((string[])(null)))", span="186-186", cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_83 [label="this.ScenarioSetup(scenarioInfo)", span="188-188", cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_84 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="190-190", cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_85 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="192-192", cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_86 [label="testRunner.Then(''the job should be disposed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="194-194", cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_87 [label="this.ScenarioCleanup()", span="196-196", cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_88 [label="Exit HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", span="184-184", cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_40 [label="Entry Unk.When", span="", cluster="Unk.When", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_52 [label="Entry HangFire.Web.HtmlHelper.JobType(string)", span="22-22", cluster="HangFire.Web.HtmlHelper.JobType(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_53 [label="Entry HangFire.Web.HtmlHelper.FormatProperties(System.Collections.Generic.IDictionary<string, string>)", span="34-34", cluster="HangFire.Web.HtmlHelper.FormatProperties(System.Collections.Generic.IDictionary<string, string>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_55 [label="Entry HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", span="6-6", cluster="HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_56 [label="HangFire.Web.Pages.EnqueuedJobsPage", span="", cluster="HangFire.Tests.Server.JobManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_57 [label="testRunner.Then(''its state should be Failed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="125-125", cluster="HangFire.Tests.Server.JobManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_58 [label="testRunner.And(''the job should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="127-127", cluster="HangFire.Tests.Server.JobManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_59 [label="this.ScenarioCleanup()", span="129-129", cluster="HangFire.Tests.Server.JobManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_60 [label="Exit HangFire.Tests.Server.JobManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", span="115-115", cluster="HangFire.Tests.Server.JobManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_48 [label="testRunner.And(''the job should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="106-106", cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_41 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_103 [label="Entry Unk.AddRow", span="", cluster="Unk.AddRow", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_47 [label="testRunner.Then(''its state should be Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="104-104", cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_49 [label="this.ScenarioCleanup()", span="108-108", cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_89 [label="Entry HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", span="203-203", cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_90 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Job arguments should be deserialized correctly'', ((string[])(null)))", span="205-205", cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_91 [label="this.ScenarioSetup(scenarioInfo)", span="207-207", cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_92 [label="testRunner.Given(''the following job type:'', ''public void CustomJob : BackgroundJob\r\n{\r\n    public int ArticleId { get; set; }\r'' +\r\n                    ''\n    public string Author { get; set; }\r\n\r\n    public override void Perform()\r\n '' +\r\n                    ''   {\r\n    }\r\n} '', ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="210-212", cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_93 [label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="214-216", cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_94 [label="table1.AddRow(new string[] {\r\n                        ''ArticleId'',\r\n                        ''2''})", span="217-219", cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_95 [label="table1.AddRow(new string[] {\r\n                        ''Author'',\r\n                        ''nobody''})", span="220-222", cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_96 [label="testRunner.And(''an enqueued CustomJob with the following arguments:'', ((string)(null)), table1, ''And '')", span="224-224", cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_97 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="226-226", cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_98 [label="testRunner.Then(''the last ArticleId should be equal to 2'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="228-228", cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_99 [label="testRunner.And(''the last Author should be equal to \'nobody\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="230-230", cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_100 [label="this.ScenarioCleanup()", span="232-232", cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_101 [label="Exit HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", span="203-203", cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_39 [label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4", cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_42 [label="Entry HttpRequestBase.LinkTo(string)", span="8-8", cluster="HttpRequestBase.LinkTo(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_46 [label="Entry HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", span="316-316", cluster="HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_102 [label="Entry TechTalk.SpecFlow.Table.cstr", span="", cluster="TechTalk.SpecFlow.Table.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_71 [label="Entry HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", span="160-160", cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_72 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Worker should processes only jobs in the Enqueued state, but it should remove the'' +\r\n                    '' job from the dequeued list anyway'', ((string[])(null)))", span="162-163", cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_73 [label="this.ScenarioSetup(scenarioInfo)", span="165-165", cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_74 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="167-167", cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_75 [label="testRunner.And(''its state is Processing'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="169-169", cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_76 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="171-171", cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_77 [label="testRunner.Then(''the job should not be performed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="173-173", cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_78 [label="testRunner.But(''it should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="175-175", cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_79 [label="this.ScenarioCleanup()", span="177-177", cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_80 [label="Exit HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", span="160-160", cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m17_104 [label="HangFire.Tests.Server.JobManagerFeature", span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m18_5 [label="_context.Storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="33-33", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="Worker.cs"];
m18_162 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", span="158-158", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="Worker.cs"];
m18_163 [label="var worker = CreateWorker()", span="160-160", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="Worker.cs"];
m18_164 [label="worker.Execute(_context.Object)", span="162-162", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="Worker.cs"];
m18_165 [label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is ProcessingState &&\r\n                ctx.ExpectedStates.ElementAt(0) == EnqueuedState.StateName &&\r\n                ctx.ExpectedStates.ElementAt(1) == ProcessingState.StateName)))", span="164-167", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="Worker.cs"];
m18_166 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", span="158-158", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="Worker.cs"];
m18_13 [label="Entry HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", span="56-56", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs"];
m18_41 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Method()", span="307-307", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Method()", file="Worker.cs"];
m18_53 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="Worker.cs"];
m18_292 [label="Entry System.Exception.Exception()", span="0-0", cluster="System.Exception.Exception()", file="Worker.cs"];
m18_250 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", span="245-245", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="Worker.cs"];
m18_252 [label="_performer\r\n                .Setup(x => x.Perform(It.IsAny<PerformContext>()))\r\n                .Throws(exception)", span="249-251", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="Worker.cs"];
m18_253 [label="var worker = CreateWorker()", span="253-253", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="Worker.cs"];
m18_254 [label="worker.Execute(_context.Object)", span="256-256", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="Worker.cs"];
m18_255 [label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState &&\r\n                ((FailedState) ctx.NewState).Exception == exception)))", span="259-262", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="Worker.cs"];
m18_251 [label="var exception = new InvalidOperationException()", span="248-248", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="Worker.cs"];
m18_256 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", span="245-245", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="Worker.cs"];
m18_6 [label="_fetchedJob = new Mock<IFetchedJob>()", span="35-35", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="Worker.cs"];
m18_7 [label="_fetchedJob.Setup(x => x.JobId).Returns(JobId)", span="36-36", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="Worker.cs"];
m18_8 [label="_connection\r\n                .Setup(x => x.FetchNextJob(_queues, It.IsNotNull<CancellationToken>()))\r\n                .Returns(_fetchedJob.Object)", span="38-40", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", color=green, community=0, file="Worker.cs"];
m18_9 [label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData\r\n                {\r\n                    Job = Job.FromExpression(() => Method()),\r\n                })", span="42-46", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", color=green, community=0, file="Worker.cs"];
m18_10 [label="_stateChanger = new Mock<IBackgroundJobStateChanger>()", span="48-48", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="Worker.cs", color=green, community=0];
m18_58 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", span="63-63", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", file="Worker.cs"];
m18_59 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(_queues, null, _stateChanger.Object))", span="65-66", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", file="Worker.cs"];
m18_60 [label="Assert.Equal(''performer'', exception.ParamName)", span="68-68", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", file="Worker.cs"];
m18_61 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", span="63-63", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", file="Worker.cs"];
m18_239 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", span="233-233", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="Worker.cs"];
m18_240 [label="var worker = CreateWorker()", span="235-235", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="Worker.cs"];
m18_241 [label="worker.Execute(_context.Object)", span="237-237", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="Worker.cs"];
m18_242 [label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is SucceededState &&\r\n                ctx.ExpectedStates.ElementAt(0) == ProcessingState.StateName)))", span="239-241", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="Worker.cs"];
m18_243 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", span="233-233", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="Worker.cs"];
m18_39 [label="Method()", span="45-45", cluster="lambda expression", file="Worker.cs", color=green, community=0];
m18_173 [label="Entry Unk.ElementAt", span="", cluster="Unk.ElementAt", file="Worker.cs"];
m18_34 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="Worker.cs"];
m18_174 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", span="171-171", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="Worker.cs"];
m18_175 [label="_stateChanger\r\n                .Setup(x => x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.NewState is ProcessingState)))\r\n                .Returns<IState>(null)", span="174-176", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="Worker.cs"];
m18_176 [label="var worker = CreateWorker()", span="178-178", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="Worker.cs"];
m18_177 [label="worker.Execute(_context.Object)", span="181-181", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="Worker.cs"];
m18_178 [label="_performer.Verify(x => x.Perform(It.IsAny<PerformContext>()), Times.Never)", span="184-184", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="Worker.cs"];
m18_179 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", span="171-171", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="Worker.cs"];
m18_189 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", span="188-188", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="Worker.cs"];
m18_190 [label="var worker = CreateWorker()", span="190-190", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="Worker.cs"];
m18_191 [label="worker.Execute(_context.Object)", span="192-192", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="Worker.cs"];
m18_192 [label="_performer.Verify(x => x.Perform(It.IsNotNull<PerformContext>()))", span="194-194", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="Worker.cs"];
m18_193 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", span="188-188", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="Worker.cs"];
m18_226 [label="Entry Unk.DoesNotThrow", span="", cluster="Unk.DoesNotThrow", file="Worker.cs"];
m18_120 [label="Entry Unk.Requeue", span="", cluster="Unk.Requeue", file="Worker.cs"];
m18_36 [label="Exit lambda expression", span="42-42", cluster="lambda expression", file="Worker.cs"];
m18_14 [label="Entry Mock<IBackgroundJobPerformer>.cstr", span="", cluster="Mock<IBackgroundJobPerformer>.cstr", file="Worker.cs"];
m18_15 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="Worker.cs"];
m18_16 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="Worker.cs"];
m18_257 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()", file="Worker.cs"];
m18_22 [label="var jobData = connection.GetJobData(jobId)", span="81-81", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs"];
m18_101 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", span="106-106", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="Worker.cs"];
m18_102 [label="_stateChanger\r\n                .Setup(x => x.ChangeState(It.IsAny<StateChangeContext>()))\r\n                .Throws<InvalidOperationException>()", span="108-110", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="Worker.cs"];
m18_103 [label="var worker = CreateWorker()", span="112-112", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="Worker.cs"];
m18_104 [label="Assert.Throws<InvalidOperationException>(\r\n                () => worker.Execute(_context.Object))", span="114-115", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="Worker.cs"];
m18_105 [label="_fetchedJob.Verify(x => x.RemoveFromQueue(), Times.Never)", span="117-117", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="Worker.cs"];
m18_106 [label="_fetchedJob.Verify(x => x.Requeue())", span="118-118", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="Worker.cs"];
m18_107 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", span="106-106", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="Worker.cs"];
m18_219 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", span="217-217", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="Worker.cs"];
m18_220 [label="_performer.Setup(x => x.Perform(It.IsAny<PerformContext>()))\r\n                .Throws<JobAbortedException>()", span="220-221", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="Worker.cs"];
m18_221 [label="var worker = CreateWorker()", span="223-223", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="Worker.cs"];
m18_222 [label="Assert.DoesNotThrow(() => worker.Execute(_context.Object))", span="226-226", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="Worker.cs"];
m18_223 [label="_fetchedJob.Verify(x => x.RemoveFromQueue())", span="228-228", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="Worker.cs"];
m18_224 [label="_fetchedJob.Verify(x => x.Requeue(), Times.Never)", span="229-229", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="Worker.cs"];
m18_225 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", span="217-217", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="Worker.cs"];
m18_78 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", span="302-302", cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="Worker.cs"];
m18_302 [label="return new Worker(_queues, _performer.Object, _stateChanger.Object);", span="304-304", cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="Worker.cs"];
m18_303 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", span="302-302", cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="Worker.cs"];
m18_38 [label="Entry lambda expression", span="45-45", cluster="lambda expression", file="Worker.cs"];
m18_35 [label="x.GetJobData(JobId)", span="42-42", cluster="lambda expression", file="Worker.cs", color=green, community=0];
m18_268 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", span="266-266", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="Worker.cs"];
m18_270 [label="_performer\r\n                .Setup(x => x.Perform(It.IsAny<PerformContext>()))\r\n                .Throws(new JobPerformanceException(''hello'', exception))", span="270-272", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="Worker.cs"];
m18_271 [label="var worker = CreateWorker()", span="274-274", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="Worker.cs"];
m18_272 [label="worker.Execute(_context.Object)", span="277-277", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="Worker.cs"];
m18_273 [label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState)))", span="280-282", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="Worker.cs"];
m18_269 [label="var exception = new InvalidOperationException()", span="269-269", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="Worker.cs"];
m18_274 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", span="266-266", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="Worker.cs"];
m18_18 [label="var processingState = new ProcessingState(_context.ServerId)", span="62-62", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs"];
m18_37 [label="Entry Unk.GetJobData", span="", cluster="Unk.GetJobData", file="Worker.cs"];
m18_26 [label="state = new SucceededState()", span="88-88", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs"];
m18_40 [label="Exit lambda expression", span="45-45", cluster="lambda expression", file="Worker.cs"];
m18_45 [label="Entry Unk.ChangeState", span="", cluster="Unk.ChangeState", file="Worker.cs"];
m18_0 [label="Entry HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", span="27-27", cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="Worker.cs"];
m18_11 [label="Entry HangFire.JobStorage.GetConnection()", span="56-56", cluster="HangFire.JobStorage.GetConnection()", color=green, community=0, file="Worker.cs"];
m18_1 [label="context == null", span="29-29", cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="Worker.cs"];
m18_2 [label="throw new ArgumentNullException(''context'');", span="29-29", cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="Worker.cs"];
m18_3 [label="_context = context", span="31-31", cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="Worker.cs"];
m18_4 [label="Exit HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", span="27-27", cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="Worker.cs"];
m18_12 [label="Entry HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="30-30", cluster="HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="Worker.cs"];
m18_128 [label="Entry Unk.InSequence", span="", cluster="Unk.InSequence", file="Worker.cs"];
m18_33 [label="Entry Unk.FetchNextJob", span="", cluster="Unk.FetchNextJob", file="Worker.cs"];
m18_258 [label="Entry Unk.Throws", span="", cluster="Unk.Throws", file="Worker.cs"];
m18_87 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="Worker.cs"];
m18_49 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", span="54-54", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", file="Worker.cs"];
m18_50 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(null, _performer.Object, _stateChanger.Object))", span="56-57", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", color=green, community=0, file="Worker.cs"];
m18_51 [label="Assert.Equal(''queues'', exception.ParamName)", span="59-59", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", file="Worker.cs"];
m18_52 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", span="54-54", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", file="Worker.cs"];
m18_72 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", span="81-81", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="Worker.cs"];
m18_73 [label="var worker = CreateWorker()", span="83-83", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="Worker.cs"];
m18_74 [label="worker.Execute(_context.Object)", span="85-85", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="Worker.cs"];
m18_75 [label="_context.Storage.Verify(x => x.GetConnection(), Times.Once)", span="87-87", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="Worker.cs"];
m18_76 [label="_connection.Verify(x => x.Dispose(), Times.Once)", span="88-88", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="Worker.cs"];
m18_77 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", span="81-81", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="Worker.cs"];
m18_285 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", span="286-286", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="Worker.cs"];
m18_286 [label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData { LoadException = new JobLoadException(''asd'', new Exception()) })", span="289-290", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="Worker.cs"];
m18_287 [label="var worker = CreateWorker()", span="292-292", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="Worker.cs"];
m18_288 [label="worker.Execute(_context.Object)", span="295-295", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="Worker.cs"];
m18_289 [label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is FailedState)))", span="298-299", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="Worker.cs"];
m18_290 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", span="286-286", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="Worker.cs"];
m18_141 [label="Entry Unk.Perform", span="", cluster="Unk.Perform", file="Worker.cs"];
m18_100 [label="Entry Unk.RemoveFromQueue", span="", cluster="Unk.RemoveFromQueue", file="Worker.cs"];
m18_299 [label="Entry lambda expression", span="298-299", cluster="lambda expression", file="Worker.cs"];
m18_30 [label="state = new FailedState(ex)\r\n                {\r\n                    Reason = ''Internal HangFire Server exception occurred. Please, report it to HangFire developers.''\r\n                }", span="99-102", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs"];
m18_42 [label="HangFire.Server.Worker", span="", cluster="lambda expression", file="Worker.cs"];
m18_46 [label="Entry lambda expression", span="50-50", cluster="lambda expression", file="Worker.cs"];
m18_43 [label="x.ChangeState(It.IsAny<StateChangeContext>())", span="49-49", cluster="lambda expression", color=green, community=0, file="Worker.cs"];
m18_44 [label="Exit lambda expression", span="49-49", cluster="lambda expression", file="Worker.cs"];
m18_47 [label="ctx.NewState", span="50-50", cluster="lambda expression", color=green, community=0, file="Worker.cs"];
m18_48 [label="Exit lambda expression", span="50-50", cluster="lambda expression", file="Worker.cs"];
m18_54 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="Worker.cs"];
m18_31 [label="stateMachine.TryToChangeState(jobId, state, new[] { ProcessingState.StateName })", span="107-107", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs"];
m18_55 [label="new Worker(null, _performer.Object, _stateChanger.Object)", span="57-57", cluster="lambda expression", file="Worker.cs"];
m18_63 [label="new Worker(_queues, null, _stateChanger.Object)", span="66-66", cluster="lambda expression", file="Worker.cs"];
m18_70 [label="new Worker(_queues, _performer.Object, null)", span="75-75", cluster="lambda expression", file="Worker.cs"];
m18_95 [label="x.FetchNextJob(_queues, _context.CancellationTokenSource.Token)", span="99-99", cluster="lambda expression", file="Worker.cs"];
m18_112 [label="worker.Execute(_context.Object)", span="115-115", cluster="lambda expression", file="Worker.cs"];
m18_157 [label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is ProcessingState && (((ProcessingState) ctx.NewState).ServerId == _context.ServerId)))", span="153-154", cluster="lambda expression", file="Worker.cs"];
m18_160 [label="ctx.NewState is ProcessingState && (((ProcessingState) ctx.NewState).ServerId == _context.ServerId)", span="154-154", cluster="lambda expression", file="Worker.cs"];
m18_208 [label="worker.Execute(_context.Object)", span="207-207", cluster="lambda expression", file="Worker.cs"];
m18_231 [label="worker.Execute(_context.Object)", span="226-226", cluster="lambda expression", file="Worker.cs"];
m18_27 [label=JobPerformanceException, span="90-90", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs"];
m18_32 [label="Exit HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", span="56-56", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs"];
m18_109 [label="x.ChangeState(It.IsAny<StateChangeContext>())", span="109-109", cluster="lambda expression", file="Worker.cs"];
m18_130 [label="x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.BackgroundJobId == JobId && ctx.NewState is ProcessingState))", span="126-126", cluster="lambda expression", file="Worker.cs"];
m18_139 [label="x.Perform(It.IsAny<PerformContext>())", span="130-130", cluster="lambda expression", file="Worker.cs"];
m18_143 [label="x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.BackgroundJobId == JobId && ctx.NewState is SucceededState))", span="134-134", cluster="lambda expression", file="Worker.cs"];
m18_168 [label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is ProcessingState &&\r\n                ctx.ExpectedStates.ElementAt(0) == EnqueuedState.StateName &&\r\n                ctx.ExpectedStates.ElementAt(1) == ProcessingState.StateName))", span="164-167", cluster="lambda expression", file="Worker.cs"];
m18_181 [label="x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.NewState is ProcessingState))", span="175-175", cluster="lambda expression", file="Worker.cs"];
m18_187 [label="x.Perform(It.IsAny<PerformContext>())", span="184-184", cluster="lambda expression", file="Worker.cs"];
m18_195 [label="x.Perform(It.IsNotNull<PerformContext>())", span="194-194", cluster="lambda expression", file="Worker.cs"];
m18_205 [label="x.Perform(It.IsAny<PerformContext>())", span="201-201", cluster="lambda expression", file="Worker.cs"];
m18_211 [label="x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.NewState is FailedState))", span="211-211", cluster="lambda expression", file="Worker.cs"];
m18_228 [label="x.Perform(It.IsAny<PerformContext>())", span="220-220", cluster="lambda expression", file="Worker.cs"];
m18_245 [label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is SucceededState &&\r\n                ctx.ExpectedStates.ElementAt(0) == ProcessingState.StateName))", span="239-241", cluster="lambda expression", file="Worker.cs"];
m18_263 [label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState &&\r\n                ((FailedState) ctx.NewState).Exception == exception))", span="259-262", cluster="lambda expression", file="Worker.cs"];
m18_260 [label="x.Perform(It.IsAny<PerformContext>())", span="250-250", cluster="lambda expression", file="Worker.cs"];
m18_277 [label="x.Perform(It.IsAny<PerformContext>())", span="271-271", cluster="lambda expression", file="Worker.cs"];
m18_280 [label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState))", span="280-282", cluster="lambda expression", file="Worker.cs"];
m18_297 [label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is FailedState))", span="298-299", cluster="lambda expression", file="Worker.cs"];
m18_294 [label="x.GetJobData(JobId)", span="289-289", cluster="lambda expression", file="Worker.cs"];
m18_56 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="Worker.cs"];
m18_23 [label="jobData.EnsureLoaded()", span="82-82", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs"];
m18_62 [label="Entry lambda expression", span="66-66", cluster="lambda expression", file="Worker.cs"];
m18_64 [label="Exit lambda expression", span="66-66", cluster="lambda expression", file="Worker.cs"];
m18_69 [label="Entry lambda expression", span="75-75", cluster="lambda expression", file="Worker.cs"];
m18_71 [label="Exit lambda expression", span="75-75", cluster="lambda expression", file="Worker.cs"];
m18_81 [label="Entry lambda expression", span="87-87", cluster="lambda expression", file="Worker.cs"];
m18_84 [label="Entry lambda expression", span="88-88", cluster="lambda expression", file="Worker.cs"];
m18_94 [label="Entry lambda expression", span="99-99", cluster="lambda expression", file="Worker.cs"];
m18_96 [label="Exit lambda expression", span="99-99", cluster="lambda expression", file="Worker.cs"];
m18_97 [label="Entry lambda expression", span="102-102", cluster="lambda expression", file="Worker.cs"];
m18_108 [label="Entry lambda expression", span="109-109", cluster="lambda expression", file="Worker.cs"];
m18_111 [label="Entry lambda expression", span="115-115", cluster="lambda expression", file="Worker.cs"];
m18_113 [label="Exit lambda expression", span="115-115", cluster="lambda expression", file="Worker.cs"];
m18_114 [label="Entry lambda expression", span="117-117", cluster="lambda expression", file="Worker.cs"];
m18_117 [label="Entry lambda expression", span="118-118", cluster="lambda expression", file="Worker.cs"];
m18_129 [label="Entry lambda expression", span="126-126", cluster="lambda expression", file="Worker.cs"];
m18_135 [label="Entry lambda expression", span="128-128", cluster="lambda expression", file="Worker.cs"];
m18_138 [label="Entry lambda expression", span="130-130", cluster="lambda expression", file="Worker.cs"];
m18_142 [label="Entry lambda expression", span="134-134", cluster="lambda expression", file="Worker.cs"];
m18_148 [label="Entry lambda expression", span="136-136", cluster="lambda expression", file="Worker.cs"];
m18_156 [label="Entry lambda expression", span="153-154", cluster="lambda expression", file="Worker.cs"];
m18_158 [label="Exit lambda expression", span="153-154", cluster="lambda expression", file="Worker.cs"];
m18_159 [label="Entry lambda expression", span="153-154", cluster="lambda expression", file="Worker.cs"];
m18_161 [label="Exit lambda expression", span="153-154", cluster="lambda expression", file="Worker.cs"];
m18_167 [label="Entry lambda expression", span="164-167", cluster="lambda expression", file="Worker.cs"];
m18_180 [label="Entry lambda expression", span="175-175", cluster="lambda expression", file="Worker.cs"];
m18_186 [label="Entry lambda expression", span="184-184", cluster="lambda expression", file="Worker.cs"];
m18_194 [label="Entry lambda expression", span="194-194", cluster="lambda expression", file="Worker.cs"];
m18_204 [label="Entry lambda expression", span="201-201", cluster="lambda expression", file="Worker.cs"];
m18_207 [label="Entry lambda expression", span="207-207", cluster="lambda expression", file="Worker.cs"];
m18_209 [label="Exit lambda expression", span="207-207", cluster="lambda expression", file="Worker.cs"];
m18_210 [label="Entry lambda expression", span="211-211", cluster="lambda expression", file="Worker.cs"];
m18_216 [label="Entry lambda expression", span="213-213", cluster="lambda expression", file="Worker.cs"];
m18_227 [label="Entry lambda expression", span="220-220", cluster="lambda expression", file="Worker.cs"];
m18_230 [label="Entry lambda expression", span="226-226", cluster="lambda expression", file="Worker.cs"];
m18_232 [label="Exit lambda expression", span="226-226", cluster="lambda expression", file="Worker.cs"];
m18_233 [label="Entry lambda expression", span="228-228", cluster="lambda expression", file="Worker.cs"];
m18_236 [label="Entry lambda expression", span="229-229", cluster="lambda expression", file="Worker.cs"];
m18_244 [label="Entry lambda expression", span="239-241", cluster="lambda expression", file="Worker.cs"];
m18_259 [label="Entry lambda expression", span="250-250", cluster="lambda expression", file="Worker.cs"];
m18_262 [label="Entry lambda expression", span="259-262", cluster="lambda expression", file="Worker.cs"];
m18_276 [label="Entry lambda expression", span="271-271", cluster="lambda expression", file="Worker.cs"];
m18_279 [label="Entry lambda expression", span="280-282", cluster="lambda expression", file="Worker.cs"];
m18_293 [label="Entry lambda expression", span="289-289", cluster="lambda expression", file="Worker.cs"];
m18_296 [label="Entry lambda expression", span="298-299", cluster="lambda expression", file="Worker.cs"];
m18_29 [label=Exception, span="97-97", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs"];
m18_28 [label="state = new FailedState(ex.InnerException)\r\n                {\r\n                    Reason = ex.Message\r\n                }", span="92-95", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs"];
m18_110 [label="Exit lambda expression", span="109-109", cluster="lambda expression", file="Worker.cs"];
m18_131 [label="Exit lambda expression", span="126-126", cluster="lambda expression", file="Worker.cs"];
m18_132 [label="Entry lambda expression", span="126-126", cluster="lambda expression", file="Worker.cs"];
m18_140 [label="Exit lambda expression", span="130-130", cluster="lambda expression", file="Worker.cs"];
m18_144 [label="Exit lambda expression", span="134-134", cluster="lambda expression", file="Worker.cs"];
m18_145 [label="Entry lambda expression", span="134-134", cluster="lambda expression", file="Worker.cs"];
m18_169 [label="Exit lambda expression", span="164-167", cluster="lambda expression", file="Worker.cs"];
m18_170 [label="Entry lambda expression", span="164-167", cluster="lambda expression", file="Worker.cs"];
m18_182 [label="Exit lambda expression", span="175-175", cluster="lambda expression", file="Worker.cs"];
m18_183 [label="Entry lambda expression", span="175-175", cluster="lambda expression", file="Worker.cs"];
m18_188 [label="Exit lambda expression", span="184-184", cluster="lambda expression", file="Worker.cs"];
m18_196 [label="Exit lambda expression", span="194-194", cluster="lambda expression", file="Worker.cs"];
m18_206 [label="Exit lambda expression", span="201-201", cluster="lambda expression", file="Worker.cs"];
m18_212 [label="Exit lambda expression", span="211-211", cluster="lambda expression", file="Worker.cs"];
m18_213 [label="Entry lambda expression", span="211-211", cluster="lambda expression", file="Worker.cs"];
m18_229 [label="Exit lambda expression", span="220-220", cluster="lambda expression", file="Worker.cs"];
m18_246 [label="Exit lambda expression", span="239-241", cluster="lambda expression", file="Worker.cs"];
m18_247 [label="Entry lambda expression", span="239-241", cluster="lambda expression", file="Worker.cs"];
m18_264 [label="Exit lambda expression", span="259-262", cluster="lambda expression", file="Worker.cs"];
m18_265 [label="Entry lambda expression", span="259-262", cluster="lambda expression", file="Worker.cs"];
m18_261 [label="Exit lambda expression", span="250-250", cluster="lambda expression", file="Worker.cs"];
m18_278 [label="Exit lambda expression", span="271-271", cluster="lambda expression", file="Worker.cs"];
m18_281 [label="Exit lambda expression", span="280-282", cluster="lambda expression", file="Worker.cs"];
m18_282 [label="Entry lambda expression", span="280-282", cluster="lambda expression", file="Worker.cs"];
m18_298 [label="Exit lambda expression", span="298-299", cluster="lambda expression", file="Worker.cs"];
m18_295 [label="Exit lambda expression", span="289-289", cluster="lambda expression", file="Worker.cs"];
m18_25 [label="process.Run(performContext, jobData.Job)", span="86-86", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs"];
m18_24 [label="var performContext = new PerformContext(_context, connection, jobId, jobData.Job)", span="84-84", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs"];
m18_83 [label="Exit lambda expression", span="87-87", cluster="lambda expression", file="Worker.cs"];
m18_82 [label="x.GetConnection()", span="87-87", cluster="lambda expression", file="Worker.cs"];
m18_86 [label="Exit lambda expression", span="88-88", cluster="lambda expression", file="Worker.cs"];
m18_85 [label="x.Dispose()", span="88-88", cluster="lambda expression", file="Worker.cs"];
m18_99 [label="Exit lambda expression", span="102-102", cluster="lambda expression", file="Worker.cs"];
m18_98 [label="x.RemoveFromQueue()", span="102-102", cluster="lambda expression", file="Worker.cs"];
m18_116 [label="Exit lambda expression", span="117-117", cluster="lambda expression", file="Worker.cs"];
m18_115 [label="x.RemoveFromQueue()", span="117-117", cluster="lambda expression", file="Worker.cs"];
m18_119 [label="Exit lambda expression", span="118-118", cluster="lambda expression", file="Worker.cs"];
m18_118 [label="x.Requeue()", span="118-118", cluster="lambda expression", file="Worker.cs"];
m18_137 [label="Exit lambda expression", span="128-128", cluster="lambda expression", file="Worker.cs"];
m18_136 [label="ctx.NewState", span="128-128", cluster="lambda expression", file="Worker.cs"];
m18_150 [label="Exit lambda expression", span="136-136", cluster="lambda expression", file="Worker.cs"];
m18_149 [label="context.NewState", span="136-136", cluster="lambda expression", file="Worker.cs"];
m18_218 [label="Exit lambda expression", span="213-213", cluster="lambda expression", file="Worker.cs"];
m18_217 [label="x.Requeue()", span="213-213", cluster="lambda expression", file="Worker.cs"];
m18_235 [label="Exit lambda expression", span="228-228", cluster="lambda expression", file="Worker.cs"];
m18_234 [label="x.RemoveFromQueue()", span="228-228", cluster="lambda expression", file="Worker.cs"];
m18_238 [label="Exit lambda expression", span="229-229", cluster="lambda expression", file="Worker.cs"];
m18_237 [label="x.Requeue()", span="229-229", cluster="lambda expression", file="Worker.cs"];
m18_266 [label="ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState &&\r\n                ((FailedState) ctx.NewState).Exception == exception", span="260-262", cluster="lambda expression", file="Worker.cs"];
m18_134 [label="Exit lambda expression", span="126-126", cluster="lambda expression", file="Worker.cs"];
m18_133 [label="ctx.BackgroundJobId == JobId && ctx.NewState is ProcessingState", span="126-126", cluster="lambda expression", file="Worker.cs"];
m18_147 [label="Exit lambda expression", span="134-134", cluster="lambda expression", file="Worker.cs"];
m18_146 [label="ctx.BackgroundJobId == JobId && ctx.NewState is SucceededState", span="134-134", cluster="lambda expression", file="Worker.cs"];
m18_172 [label="Exit lambda expression", span="164-167", cluster="lambda expression", file="Worker.cs"];
m18_171 [label="ctx.NewState is ProcessingState &&\r\n                ctx.ExpectedStates.ElementAt(0) == EnqueuedState.StateName &&\r\n                ctx.ExpectedStates.ElementAt(1) == ProcessingState.StateName", span="165-167", cluster="lambda expression", file="Worker.cs"];
m18_185 [label="Exit lambda expression", span="175-175", cluster="lambda expression", file="Worker.cs"];
m18_184 [label="ctx.NewState is ProcessingState", span="175-175", cluster="lambda expression", file="Worker.cs"];
m18_215 [label="Exit lambda expression", span="211-211", cluster="lambda expression", file="Worker.cs"];
m18_214 [label="ctx.NewState is FailedState", span="211-211", cluster="lambda expression", file="Worker.cs"];
m18_249 [label="Exit lambda expression", span="239-241", cluster="lambda expression", file="Worker.cs"];
m18_248 [label="ctx.NewState is SucceededState &&\r\n                ctx.ExpectedStates.ElementAt(0) == ProcessingState.StateName", span="240-241", cluster="lambda expression", file="Worker.cs"];
m18_267 [label="Exit lambda expression", span="259-262", cluster="lambda expression", file="Worker.cs"];
m18_284 [label="Exit lambda expression", span="280-282", cluster="lambda expression", file="Worker.cs"];
m18_283 [label="ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState", span="281-282", cluster="lambda expression", file="Worker.cs"];
m18_300 [label="ctx.NewState is FailedState", span="299-299", cluster="lambda expression", file="Worker.cs"];
m18_301 [label="Exit lambda expression", span="298-299", cluster="lambda expression", file="Worker.cs"];
m18_21 [label="IState state", span="77-77", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs"];
m18_19 [label="!stateMachine.TryToChangeState(\r\n                jobId,\r\n                processingState,\r\n                new[] { EnqueuedState.StateName, ProcessingState.StateName })", span="64-67", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs"];
m18_151 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", span="147-147", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="Worker.cs"];
m18_152 [label="var worker = CreateWorker()", span="149-149", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="Worker.cs"];
m18_153 [label="worker.Execute(_context.Object)", span="151-151", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="Worker.cs"];
m18_154 [label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is ProcessingState && (((ProcessingState) ctx.NewState).ServerId == _context.ServerId))))", span="153-154", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="Worker.cs"];
m18_155 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", span="147-147", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="Worker.cs"];
m18_57 [label="Entry Worker.cstr", span="", cluster="Worker.cstr", file="Worker.cs"];
m18_80 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="Worker.cs"];
m18_65 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", span="72-72", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", file="Worker.cs"];
m18_66 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(_queues, _performer.Object, null))", span="74-75", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", file="Worker.cs"];
m18_67 [label="Assert.Equal(''stateChanger'', exception.ParamName)", span="77-77", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", file="Worker.cs"];
m18_68 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", span="72-72", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", file="Worker.cs"];
m18_121 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", span="122-122", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="Worker.cs"];
m18_122 [label="_stateChanger\r\n                .Setup(x => x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.BackgroundJobId == JobId && ctx.NewState is ProcessingState)))\r\n                .InSequence()\r\n                .Returns<StateChangeContext>(ctx => ctx.NewState)", span="125-128", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="Worker.cs"];
m18_123 [label="_performer.Setup(x => x.Perform(It.IsAny<PerformContext>()))\r\n                .InSequence()", span="130-131", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="Worker.cs"];
m18_124 [label="_stateChanger\r\n                .Setup(x => x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.BackgroundJobId == JobId && ctx.NewState is SucceededState)))\r\n                .InSequence()\r\n                .Returns<StateChangeContext>(context => context.NewState)", span="133-136", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="Worker.cs"];
m18_125 [label="var worker = CreateWorker()", span="138-138", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="Worker.cs"];
m18_126 [label="worker.Execute(_context.Object)", span="141-141", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="Worker.cs"];
m18_127 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", span="122-122", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="Worker.cs"];
m18_17 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="Worker.cs"];
m18_20 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="233-233", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="Worker.cs"];
m18_88 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", span="92-92", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="Worker.cs"];
m18_89 [label="var worker = CreateWorker()", span="94-94", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="Worker.cs"];
m18_90 [label="worker.Execute(_context.Object)", span="96-96", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="Worker.cs"];
m18_91 [label="_connection.Verify(\r\n                x => x.FetchNextJob(_queues, _context.CancellationTokenSource.Token),\r\n                Times.Once)", span="98-100", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="Worker.cs"];
m18_92 [label="_fetchedJob.Verify(x => x.RemoveFromQueue())", span="102-102", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="Worker.cs"];
m18_93 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", span="92-92", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="Worker.cs"];
m18_275 [label="Entry Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", span="22-22", cluster="Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", file="Worker.cs"];
m18_291 [label="Entry Hangfire.Common.JobLoadException.JobLoadException(string, System.Exception)", span="31-31", cluster="Hangfire.Common.JobLoadException.JobLoadException(string, System.Exception)", file="Worker.cs"];
m18_197 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", span="198-198", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="Worker.cs"];
m18_198 [label="_performer.Setup(x => x.Perform(It.IsAny<PerformContext>()))\r\n                .Throws<OperationCanceledException>()", span="201-202", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="Worker.cs"];
m18_199 [label="var worker = CreateWorker()", span="204-204", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="Worker.cs"];
m18_200 [label="Assert.Throws<OperationCanceledException>(() => worker.Execute(_context.Object))", span="207-207", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="Worker.cs"];
m18_201 [label="_stateChanger.Verify(\r\n                x => x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.NewState is FailedState)),\r\n                Times.Never)", span="210-212", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="Worker.cs"];
m18_202 [label="_fetchedJob.Verify(x => x.Requeue())", span="213-213", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="Worker.cs"];
m18_203 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", span="198-198", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="Worker.cs"];
m18_304 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Method()", span="307-307", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Method()", file="Worker.cs"];
m18_79 [label="Entry Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", span="76-76", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs"];
m18_305 [label="Hangfire.Core.Tests.Server.WorkerFacts", span="", file="Worker.cs"];
m18_306 [label=worker, span="", file="Worker.cs"];
m18_307 [label=worker, span="", file="Worker.cs"];
m18_308 [label=worker, span="", file="Worker.cs"];
m18_309 [label=exception, span="", file="Worker.cs"];
m19_0 [label="Entry HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="7-7", cluster="HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="WorkerFacts.cs"];
m19_1 [label="InSucceededState = true", span="9-9", cluster="HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="WorkerFacts.cs"];
m19_2 [label="Exit HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="7-7", cluster="HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="WorkerFacts.cs"];
m19_3 [label="HangFire.Storage.Monitoring.SucceededJobDto", span="", file="WorkerFacts.cs"];
n0 -> n1  [key=0, style=solid];
n1 -> n0  [key=0, style=bold, color=blue];
n2 -> n3  [key=0, style=solid];
n3 -> n2  [key=0, style=bold, color=blue];
m1_8 -> m1_9  [key=0, style=solid];
m1_9 -> m1_8  [key=0, style=bold, color=blue];
m1_4 -> m1_5  [key=0, style=solid];
m1_5 -> m1_4  [key=0, style=bold, color=blue];
m1_14 -> m1_15  [key=0, style=solid];
m1_15 -> m1_14  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_0  [key=0, style=bold, color=blue];
m1_20 -> m1_21  [key=0, style=solid];
m1_21 -> m1_20  [key=0, style=bold, color=blue];
m1_10 -> m1_11  [key=0, style=solid];
m1_11 -> m1_10  [key=0, style=bold, color=blue];
m1_22 -> m1_23  [key=0, style=solid];
m1_23 -> m1_22  [key=0, style=bold, color=blue];
m1_12 -> m1_13  [key=0, style=solid];
m1_13 -> m1_12  [key=0, style=bold, color=blue];
m1_18 -> m1_19  [key=0, style=solid];
m1_19 -> m1_18  [key=0, style=bold, color=blue];
m1_16 -> m1_17  [key=0, style=solid];
m1_17 -> m1_16  [key=0, style=bold, color=blue];
m1_2 -> m1_3  [key=0, style=solid];
m1_3 -> m1_2  [key=0, style=bold, color=blue];
m1_6 -> m1_7  [key=0, style=solid];
m1_7 -> m1_6  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid, color=red];
m2_1 -> m2_2  [key=0, style=solid, color=red];
m2_1 -> m2_5  [key=2, style=dotted, color=red];
m2_2 -> m2_3  [key=0, style=solid, color=red];
m2_2 -> m2_6  [key=2, style=dotted, color=red];
m2_3 -> m2_4  [key=0, style=solid, color=red];
m2_4 -> m2_0  [key=0, style=bold, color=blue];
m2_7 -> m2_1  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerStorageOptions"];
m2_7 -> m2_2  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerStorageOptions"];
m2_7 -> m2_3  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerStorageOptions"];
m3_0 -> m3_1  [key=0, style=solid, color=red];
m3_0 -> m3_2  [key=1, style=dashed, color=red, label=string];
m3_0 -> m3_3  [key=1, style=dashed, color=red, label=string];
m3_1 -> m3_2  [key=0, style=solid, color=red];
m3_2 -> m3_3  [key=0, style=solid, color=red];
m3_3 -> m3_4  [key=0, style=solid, color=red];
m3_4 -> m3_0  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_0  [key=0, style=bold, color=blue];
m5_3 -> m5_4  [key=0, style=solid];
m5_3 -> m5_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m5_3 -> m5_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IState"];
m5_3 -> m5_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Storage.IStorageConnection"];
m5_3 -> m5_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m5_3 -> m5_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IState"];
m5_4 -> m5_5  [key=0, style=solid];
m5_4 -> m5_6  [key=2, style=dotted];
m5_5 -> m5_3  [key=0, style=bold, color=blue];
m5_5 -> m5_14  [key=0, style=solid];
m5_5 -> m5_15  [key=2, style=dotted];
m5_15 -> m5_17  [key=1, style=dashed, color=darkseagreen4, label=queueIndex];
m5_15 -> m5_16  [key=0, style=solid];
m5_15 -> m5_15  [key=3, color=darkorchid, style=bold, label="Local variable int queueIndex"];
m5_12 -> m5_18  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m5_12 -> m5_13  [key=0, style=solid];
m5_12 -> m5_16  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m5_12 -> m5_17  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m5_26 -> m5_27  [key=0, style=solid, color=green];
m5_26 -> m5_34  [key=2, style=dotted, color=green];
m5_18 -> m5_26  [key=1, style=dashed, color=green, label=queueName];
m5_18 -> m5_19  [key=0, style=solid];
m5_18 -> m5_20  [key=1, style=dashed, color=darkseagreen4, label=queueName];
m5_22 -> m5_26  [key=1, style=dashed, color=green, label=jobId];
m5_22 -> m5_24  [key=0, style=solid];
m5_22 -> m5_30  [key=2, style=dotted];
m5_22 -> m5_25  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m5_23 -> m5_26  [key=1, style=dashed, color=green, label=jobId];
m5_23 -> m5_24  [key=0, style=solid];
m5_23 -> m5_31  [key=2, style=dotted];
m5_23 -> m5_25  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m5_25 -> m5_26  [key=0, style=solid, color=green];
m5_25 -> m5_29  [key=2, style=dotted];
m5_25 -> m5_32  [key=2, style=dotted];
m5_25 -> m5_33  [key=2, style=dotted];
m5_17 -> m5_18  [key=0, style=solid];
m5_17 -> m5_17  [key=1, style=dashed, color=darkseagreen4, label=queueIndex];
m5_17 -> m5_21  [key=1, style=dashed, color=darkseagreen4, label=queueIndex];
m5_17 -> m5_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Client.CreateContext"];
m5_17 -> m5_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Client.CreateContext"];
m5_17 -> m5_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Client.CreateContext"];
m5_17 -> m5_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Client.CreateContext"];
m5_17 -> m5_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Client.CreateContext"];
m5_19 -> m5_22  [key=1, style=dashed, color=darkseagreen4, label=queueKey];
m5_19 -> m5_23  [key=1, style=dashed, color=darkseagreen4, label=queueKey];
m5_19 -> m5_20  [key=0, style=solid];
m5_19 -> m5_29  [key=2, style=dotted];
m5_20 -> m5_22  [key=1, style=dashed, color=darkseagreen4, label=fetchedKey];
m5_20 -> m5_23  [key=1, style=dashed, color=darkseagreen4, label=fetchedKey];
m5_20 -> m5_21  [key=0, style=solid];
m5_20 -> m5_29  [key=2, style=dotted];
m5_21 -> m5_22  [key=0, style=solid];
m5_21 -> m5_23  [key=0, style=solid];
m5_24 -> m5_25  [key=0, style=solid];
m5_24 -> m5_15  [key=0, style=solid];
m5_13 -> m5_14  [key=0, style=solid];
m5_13 -> m5_16  [key=2, style=dotted];
m5_16 -> m5_17  [key=0, style=solid];
m5_16 -> m5_16  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m5_16 -> m5_28  [key=2, style=dotted];
m5_14 -> m5_15  [key=0, style=solid];
m5_14 -> m5_3  [key=0, style=bold, color=blue];
m5_27 -> m5_12  [key=0, style=bold, color=blue];
m5_171 -> m5_172  [key=0, style=solid];
m5_171 -> m5_183  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m5_171 -> m5_180  [key=3, color=darkorchid, style=bold, label="method methodReturn int RemoveTimedOutServers"];
m5_172 -> m5_173  [key=0, style=solid];
m5_172 -> m5_188  [key=2, style=dotted];
m5_172 -> m5_176  [key=1, style=dashed, color=darkseagreen4, label=serverNames];
m5_175 -> m5_176  [key=0, style=solid];
m5_175 -> m5_189  [key=2, style=dotted];
m5_175 -> m5_178  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m5_175 -> m5_179  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m5_184 -> m5_184  [key=1, style=dashed, color=darkseagreen4, label=heartbeat];
m5_184 -> m5_185  [key=0, style=solid];
m5_184 -> m5_154  [key=2, style=dotted];
m5_173 -> m5_174  [key=0, style=solid];
m5_173 -> m5_145  [key=2, style=dotted];
m5_173 -> m5_178  [key=1, style=dashed, color=darkseagreen4, label=heartbeats];
m5_173 -> m5_200  [key=1, style=dashed, color=darkseagreen4, label=heartbeats];
m5_173 -> m5_181  [key=1, style=dashed, color=darkseagreen4, label=heartbeats];
m5_176 -> m5_177  [key=0, style=solid];
m5_176 -> m5_179  [key=0, style=solid];
m5_174 -> m5_175  [key=0, style=solid];
m5_174 -> m5_183  [key=1, style=dashed, color=darkseagreen4, label=utcNow];
m5_178 -> m5_176  [key=0, style=solid];
m5_178 -> m5_60  [key=2, style=dotted];
m5_178 -> m5_194  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_178 -> m5_199  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_179 -> m5_180  [key=0, style=solid];
m5_179 -> m5_190  [key=2, style=dotted];
m5_183 -> m5_184  [key=0, style=solid];
m5_183 -> m5_181  [key=0, style=solid];
m5_183 -> m5_193  [key=2, style=dotted];
m5_182 -> m5_184  [key=1, style=dashed, color=darkseagreen4, label=heartbeat];
m5_182 -> m5_183  [key=0, style=solid];
m5_182 -> m5_182  [key=1, style=dashed, color=darkseagreen4, label=heartbeat];
m5_182 -> m5_191  [key=2, style=dotted];
m5_182 -> m5_192  [key=2, style=dotted];
m5_185 -> m5_185  [key=1, style=dashed, color=darkseagreen4, label=removedServerCount];
m5_185 -> m5_181  [key=0, style=solid];
m5_185 -> m5_186  [key=1, style=dashed, color=darkseagreen4, label=removedServerCount];
m5_180 -> m5_185  [key=1, style=dashed, color=darkseagreen4, label=removedServerCount];
m5_180 -> m5_15  [key=3, color=darkorchid, style=bold, label="Local variable int removedServerCount"];
m5_180 -> m5_181  [key=0, style=solid];
m5_180 -> m5_186  [key=1, style=dashed, color=darkseagreen4, label=removedServerCount];
m5_181 -> m5_182  [key=0, style=solid];
m5_181 -> m5_186  [key=0, style=solid];
m5_177 -> m5_176  [key=3, color=darkorchid, style=bold, label="Local variable var name"];
m5_177 -> m5_178  [key=0, style=solid];
m5_177 -> m5_200  [key=1, style=dashed, color=darkseagreen4, label=name];
m5_177 -> m5_195  [key=1, style=dashed, color=darkseagreen4, label=name];
m5_186 -> m5_187  [key=0, style=solid];
m5_187 -> m5_171  [key=0, style=bold, color=blue];
m5_11 -> m5_12  [key=0, style=solid];
m5_168 -> m5_169  [key=0, style=solid];
m5_169 -> m5_170  [key=0, style=solid];
m5_169 -> m5_29  [key=2, style=dotted];
m5_169 -> m5_32  [key=2, style=dotted];
m5_169 -> m5_33  [key=2, style=dotted];
m5_170 -> m5_168  [key=0, style=bold, color=blue];
m5_157 -> m5_60  [key=2, style=dotted];
m5_157 -> m5_158  [key=0, style=solid];
m5_157 -> m5_164  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_154 -> m5_151  [key=3, color=darkorchid, style=bold, label="Parameter variable string serverId"];
m5_154 -> m5_155  [key=0, style=solid];
m5_154 -> m5_156  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_154 -> m5_161  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_154 -> m5_157  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_154 -> m5_165  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_154 -> m5_97  [key=3, color=darkorchid, style=bold, label="Parameter variable IRedisClient redis"];
m5_155 -> m5_11  [key=2, style=dotted];
m5_155 -> m5_156  [key=0, style=solid];
m5_155 -> m5_157  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m5_155 -> m5_158  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m5_156 -> m5_60  [key=2, style=dotted];
m5_156 -> m5_157  [key=0, style=solid];
m5_156 -> m5_160  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_158 -> m5_61  [key=2, style=dotted];
m5_158 -> m5_159  [key=0, style=solid];
m5_159 -> m5_154  [key=0, style=bold, color=blue];
m5_7 -> m5_8  [key=0, style=solid];
m5_7 -> m5_14  [key=0, style=solid];
m5_7 -> m5_15  [key=2, style=dotted];
m5_8 -> m5_9  [key=0, style=solid];
m5_8 -> m5_10  [key=2, style=dotted];
m5_8 -> m5_11  [key=2, style=dotted];
m5_9 -> m5_7  [key=0, style=bold, color=blue];
m5_9 -> m5_14  [key=0, style=solid];
m5_9 -> m5_15  [key=2, style=dotted];
m5_102 -> m5_103  [key=0, style=solid];
m5_103 -> m5_104  [key=0, style=solid];
m5_103 -> m5_29  [key=2, style=dotted];
m5_103 -> m5_105  [key=2, style=dotted];
m5_104 -> m5_102  [key=0, style=bold, color=blue];
m5_10 -> m5_11  [key=0, style=solid];
m5_129 -> m5_130  [key=0, style=solid];
m5_129 -> m5_131  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_129 -> m5_139  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_129 -> m5_132  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_129 -> m5_143  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_129 -> m5_133  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.ServerContext"];
m5_129 -> m5_135  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_129 -> m5_148  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_130 -> m5_131  [key=0, style=solid];
m5_130 -> m5_11  [key=2, style=dotted];
m5_130 -> m5_132  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m5_130 -> m5_135  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m5_130 -> m5_136  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m5_131 -> m5_132  [key=0, style=solid];
m5_131 -> m5_60  [key=2, style=dotted];
m5_131 -> m5_138  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_132 -> m5_133  [key=0, style=solid];
m5_132 -> m5_60  [key=2, style=dotted];
m5_132 -> m5_142  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_135 -> m5_133  [key=0, style=solid];
m5_135 -> m5_60  [key=2, style=dotted];
m5_135 -> m5_147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_136 -> m5_137  [key=0, style=solid];
m5_136 -> m5_61  [key=2, style=dotted];
m5_133 -> m5_136  [key=0, style=solid];
m5_133 -> m5_134  [key=0, style=solid];
m5_134 -> m5_135  [key=0, style=solid];
m5_134 -> m5_148  [key=1, style=dashed, color=darkseagreen4, label=queue1];
m5_134 -> m5_133  [key=3, color=darkorchid, style=bold, label="Local variable string queue1"];
m5_137 -> m5_129  [key=0, style=bold, color=blue];
m5_110 -> m5_111  [key=0, style=solid];
m5_110 -> m5_60  [key=2, style=dotted];
m5_110 -> m5_121  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_107 -> m5_108  [key=0, style=solid];
m5_107 -> m5_11  [key=2, style=dotted];
m5_107 -> m5_109  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m5_107 -> m5_110  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m5_107 -> m5_111  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m5_106 -> m5_107  [key=0, style=solid];
m5_106 -> m5_108  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_106 -> m5_114  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_106 -> m5_109  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_106 -> m5_118  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_106 -> m5_110  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_106 -> m5_122  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_108 -> m5_109  [key=0, style=solid];
m5_108 -> m5_60  [key=2, style=dotted];
m5_108 -> m5_113  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_109 -> m5_110  [key=0, style=solid];
m5_109 -> m5_60  [key=2, style=dotted];
m5_109 -> m5_117  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_111 -> m5_112  [key=0, style=solid];
m5_111 -> m5_61  [key=2, style=dotted];
m5_112 -> m5_106  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_2  [key=0, style=solid];
m5_2 -> m5_0  [key=0, style=bold, color=blue];
m5_6 -> m5_7  [key=0, style=solid];
m5_6 -> m5_8  [key=0, style=solid];
m5_151 -> m5_152  [key=0, style=solid];
m5_152 -> m5_153  [key=0, style=solid];
m5_152 -> m5_154  [key=2, style=dotted];
m5_153 -> m5_151  [key=0, style=bold, color=blue];
m5_70 -> m5_71  [key=0, style=solid];
m5_70 -> m5_72  [key=3, color=darkorchid, style=bold, label="method methodReturn HangFire.Storage.JobData GetJobData"];
m5_71 -> m5_72  [key=0, style=solid];
m5_71 -> m5_29  [key=2, style=dotted];
m5_71 -> m5_94  [key=2, style=dotted];
m5_71 -> m5_78  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m5_71 -> m5_79  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m5_71 -> m5_80  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m5_71 -> m5_81  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m5_71 -> m5_82  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m5_71 -> m5_83  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m5_71 -> m5_84  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m5_71 -> m5_85  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m5_71 -> m5_92  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m5_72 -> m5_73  [key=0, style=solid];
m5_72 -> m5_74  [key=0, style=solid];
m5_78 -> m5_79  [key=0, style=solid];
m5_78 -> m5_80  [key=0, style=solid];
m5_78 -> m5_95  [key=2, style=dotted];
m5_79 -> m5_80  [key=0, style=solid];
m5_79 -> m5_88  [key=1, style=dashed, color=darkseagreen4, label=type];
m5_80 -> m5_81  [key=0, style=solid];
m5_80 -> m5_82  [key=0, style=solid];
m5_80 -> m5_95  [key=2, style=dotted];
m5_81 -> m5_82  [key=0, style=solid];
m5_81 -> m5_88  [key=1, style=dashed, color=darkseagreen4, label=method];
m5_82 -> m5_83  [key=0, style=solid];
m5_82 -> m5_84  [key=0, style=solid];
m5_82 -> m5_95  [key=2, style=dotted];
m5_83 -> m5_84  [key=0, style=solid];
m5_83 -> m5_88  [key=1, style=dashed, color=darkseagreen4, label=parameterTypes];
m5_84 -> m5_85  [key=0, style=solid];
m5_84 -> m5_86  [key=0, style=solid];
m5_84 -> m5_95  [key=2, style=dotted];
m5_85 -> m5_86  [key=0, style=solid];
m5_85 -> m5_88  [key=1, style=dashed, color=darkseagreen4, label=arguments];
m5_92 -> m5_93  [key=0, style=solid];
m5_92 -> m5_98  [key=2, style=dotted];
m5_92 -> m5_95  [key=2, style=dotted];
m5_74 -> m5_72  [key=3, color=darkorchid, style=bold, label="Local variable string type"];
m5_74 -> m5_75  [key=0, style=solid];
m5_74 -> m5_88  [key=1, style=dashed, color=darkseagreen4, label=type];
m5_75 -> m5_72  [key=3, color=darkorchid, style=bold, label="Local variable string method"];
m5_75 -> m5_76  [key=0, style=solid];
m5_75 -> m5_88  [key=1, style=dashed, color=darkseagreen4, label=method];
m5_76 -> m5_72  [key=3, color=darkorchid, style=bold, label="Local variable string parameterTypes"];
m5_76 -> m5_77  [key=0, style=solid];
m5_76 -> m5_88  [key=1, style=dashed, color=darkseagreen4, label=parameterTypes];
m5_77 -> m5_72  [key=3, color=darkorchid, style=bold, label="Local variable string arguments"];
m5_77 -> m5_78  [key=0, style=solid];
m5_77 -> m5_88  [key=1, style=dashed, color=darkseagreen4, label=arguments];
m5_86 -> m5_72  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.Common.Job job"];
m5_86 -> m5_87  [key=0, style=solid];
m5_87 -> m5_72  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.Common.JobLoadException loadException"];
m5_87 -> m5_88  [key=0, style=solid];
m5_87 -> m5_90  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.Common.JobLoadException loadException"];
m5_73 -> m5_93  [key=0, style=solid];
m5_88 -> m5_89  [key=0, style=solid];
m5_88 -> m5_96  [key=2, style=dotted];
m5_89 -> m5_92  [key=0, style=solid];
m5_89 -> m5_97  [key=2, style=dotted];
m5_89 -> m5_90  [key=0, style=solid];
m5_91 -> m5_92  [key=0, style=solid];
m5_90 -> m5_91  [key=0, style=solid];
m5_93 -> m5_70  [key=0, style=bold, color=blue];
m5_160 -> m5_161  [key=0, style=solid];
m5_67 -> m5_29  [key=2, style=dotted];
m5_67 -> m5_68  [key=0, style=solid];
m5_67 -> m5_69  [key=2, style=dotted];
m5_63 -> m5_29  [key=2, style=dotted];
m5_63 -> m5_64  [key=0, style=solid];
m5_63 -> m5_65  [key=2, style=dotted];
m5_114 -> m5_29  [key=2, style=dotted];
m5_114 -> m5_115  [key=0, style=solid];
m5_114 -> m5_116  [key=2, style=dotted];
m5_118 -> m5_29  [key=2, style=dotted];
m5_118 -> m5_119  [key=0, style=solid];
m5_118 -> m5_120  [key=2, style=dotted];
m5_122 -> m5_29  [key=2, style=dotted];
m5_122 -> m5_123  [key=0, style=solid];
m5_122 -> m5_120  [key=2, style=dotted];
m5_143 -> m5_29  [key=2, style=dotted];
m5_143 -> m5_32  [key=2, style=dotted];
m5_143 -> m5_144  [key=0, style=solid];
m5_143 -> m5_145  [key=2, style=dotted];
m5_143 -> m5_146  [key=2, style=dotted];
m5_143 -> m5_65  [key=2, style=dotted];
m5_148 -> m5_29  [key=2, style=dotted];
m5_148 -> m5_149  [key=0, style=solid];
m5_148 -> m5_150  [key=2, style=dotted];
m5_165 -> m5_29  [key=2, style=dotted];
m5_165 -> m5_166  [key=0, style=solid];
m5_165 -> m5_167  [key=2, style=dotted];
m5_62 -> m5_63  [key=0, style=solid];
m5_66 -> m5_67  [key=0, style=solid];
m5_113 -> m5_114  [key=0, style=solid];
m5_117 -> m5_118  [key=0, style=solid];
m5_121 -> m5_122  [key=0, style=solid];
m5_139 -> m5_140  [key=0, style=solid];
m5_139 -> m5_141  [key=2, style=dotted];
m5_138 -> m5_139  [key=0, style=solid];
m5_142 -> m5_143  [key=0, style=solid];
m5_147 -> m5_148  [key=0, style=solid];
m5_161 -> m5_162  [key=0, style=solid];
m5_161 -> m5_163  [key=2, style=dotted];
m5_200 -> m5_201  [key=0, style=solid];
m5_200 -> m5_202  [key=2, style=dotted];
m5_200 -> m5_203  [key=2, style=dotted];
m5_200 -> m5_204  [key=2, style=dotted];
m5_200 -> m5_205  [key=2, style=dotted];
m5_194 -> m5_195  [key=0, style=solid];
m5_199 -> m5_200  [key=0, style=solid];
m5_68 -> m5_66  [key=0, style=bold, color=blue];
m5_64 -> m5_62  [key=0, style=bold, color=blue];
m5_115 -> m5_113  [key=0, style=bold, color=blue];
m5_119 -> m5_117  [key=0, style=bold, color=blue];
m5_123 -> m5_121  [key=0, style=bold, color=blue];
m5_144 -> m5_142  [key=0, style=bold, color=blue];
m5_149 -> m5_147  [key=0, style=bold, color=blue];
m5_164 -> m5_165  [key=0, style=solid];
m5_166 -> m5_164  [key=0, style=bold, color=blue];
m5_140 -> m5_138  [key=0, style=bold, color=blue];
m5_162 -> m5_160  [key=0, style=bold, color=blue];
m5_201 -> m5_199  [key=0, style=bold, color=blue];
m5_195 -> m5_196  [key=0, style=solid];
m5_195 -> m5_197  [key=2, style=dotted];
m5_195 -> m5_198  [key=2, style=dotted];
m5_196 -> m5_194  [key=0, style=bold, color=blue];
m5_40 -> m5_51  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m5_40 -> m5_67  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m5_40 -> m5_43  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m5_40 -> m5_41  [key=0, style=solid];
m5_40 -> m5_42  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.Job"];
m5_49 -> m5_50  [key=0, style=solid];
m5_49 -> m5_11  [key=2, style=dotted];
m5_49 -> m5_51  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m5_49 -> m5_52  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m5_48 -> m5_49  [key=0, style=solid];
m5_48 -> m5_32  [key=2, style=dotted];
m5_48 -> m5_59  [key=2, style=dotted];
m5_50 -> m5_51  [key=0, style=solid];
m5_50 -> m5_60  [key=2, style=dotted];
m5_50 -> m5_62  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_51 -> m5_52  [key=0, style=solid];
m5_51 -> m5_60  [key=2, style=dotted];
m5_51 -> m5_66  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_52 -> m5_53  [key=0, style=solid];
m5_52 -> m5_61  [key=2, style=dotted];
m5_43 -> m5_48  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m5_43 -> m5_50  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m5_43 -> m5_63  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m5_43 -> m5_44  [key=0, style=solid];
m5_43 -> m5_58  [key=2, style=dotted];
m5_43 -> m5_45  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m5_43 -> m5_46  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m5_43 -> m5_47  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m5_47 -> m5_48  [key=0, style=solid];
m5_47 -> m5_59  [key=2, style=dotted];
m5_41 -> m5_50  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m5_41 -> m5_51  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m5_41 -> m5_67  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m5_41 -> m5_63  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m5_41 -> m5_42  [key=0, style=solid];
m5_41 -> m5_55  [key=2, style=dotted];
m5_41 -> m5_56  [key=2, style=dotted];
m5_41 -> m5_53  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m5_53 -> m5_54  [key=0, style=solid];
m5_42 -> m5_43  [key=0, style=solid];
m5_42 -> m5_47  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
m5_42 -> m5_57  [key=2, style=dotted];
m5_42 -> m5_44  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
m5_42 -> m5_45  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
m5_42 -> m5_46  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
m5_44 -> m5_59  [key=2, style=dotted];
m5_44 -> m5_45  [key=0, style=solid];
m5_45 -> m5_59  [key=2, style=dotted];
m5_45 -> m5_46  [key=0, style=solid];
m5_46 -> m5_47  [key=0, style=solid];
m5_46 -> m5_59  [key=2, style=dotted];
m5_54 -> m5_40  [key=0, style=bold, color=blue];
m5_35 -> m5_36  [key=0, style=solid];
m5_36 -> m5_37  [key=0, style=solid];
m5_36 -> m5_29  [key=2, style=dotted];
m5_36 -> m5_38  [key=2, style=dotted];
m5_36 -> m5_39  [key=2, style=dotted];
m5_37 -> m5_35  [key=0, style=bold, color=blue];
m5_99 -> m5_100  [key=0, style=solid];
m5_100 -> m5_101  [key=0, style=solid];
m5_100 -> m5_29  [key=2, style=dotted];
m5_100 -> m5_33  [key=2, style=dotted];
m5_101 -> m5_99  [key=0, style=bold, color=blue];
m5_97 -> m5_0  [key=3, color=darkorchid, style=bold, label="Property variable IRedisClient Redis"];
m5_124 -> m5_125  [key=0, style=solid];
m5_125 -> m5_126  [key=0, style=solid];
m5_125 -> m5_127  [key=2, style=dotted];
m5_125 -> m5_128  [key=2, style=dotted];
m5_126 -> m5_124  [key=0, style=bold, color=blue];
m5_206 -> m5_26  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisConnection"];
m5_206 -> m5_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m5_206 -> m5_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m5_206 -> m5_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m5_206 -> m5_22  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m5_206 -> m5_23  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m5_206 -> m5_25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m5_206 -> m5_36  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m5_206 -> m5_49  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m5_206 -> m5_71  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m5_206 -> m5_100  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m5_206 -> m5_103  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m5_206 -> m5_107  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m5_206 -> m5_125  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m5_206 -> m5_130  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m5_206 -> m5_152  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m5_206 -> m5_169  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m5_206 -> m5_172  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m5_206 -> m5_175  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m5_206 -> m5_184  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m5_207 -> m5_67  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m5_207 -> m5_63  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m5_209 -> m5_67  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m5_208 -> m5_63  [key=1, style=dashed, color=darkseagreen4, label=storedParameters];
m5_210 -> m5_114  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_210 -> m5_118  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_210 -> m5_122  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_211 -> m5_114  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_212 -> m5_143  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_212 -> m5_148  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_212 -> m5_139  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_213 -> m5_143  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.ServerContext"];
m5_214 -> m5_148  [key=1, style=dashed, color=darkseagreen4, label=queue1];
m5_215 -> m5_165  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_215 -> m5_161  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_216 -> m5_200  [key=1, style=dashed, color=darkseagreen4, label=name];
m5_216 -> m5_195  [key=1, style=dashed, color=darkseagreen4, label=name];
m5_217 -> m5_200  [key=1, style=dashed, color=darkseagreen4, label=heartbeats];
m6_0 -> m6_1  [key=0, style=solid, color=red];
m6_1 -> m6_2  [key=0, style=solid, color=red];
m6_2 -> m6_3  [key=0, style=solid];
m6_2 -> m6_10  [key=2, style=dotted];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_11  [key=2, style=dotted];
m6_4 -> m6_5  [key=0, style=solid, color=red];
m6_4 -> m6_12  [key=2, style=dotted];
m6_5 -> m6_6  [key=0, style=solid, color=red];
m6_5 -> m6_11  [key=2, style=dotted, color=red];
m6_6 -> m6_7  [key=0, style=solid, color=red];
m6_7 -> m6_8  [key=0, style=solid];
m6_8 -> m6_9  [key=0, style=solid];
m6_8 -> m6_11  [key=2, style=dotted];
m6_9 -> m6_0  [key=0, style=bold, color=blue];
m6_13 -> m6_1  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m6_13 -> m6_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m6_13 -> m6_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m6_13 -> m6_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m6_13 -> m6_5  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m6_13 -> m6_6  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m6_13 -> m6_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m6_13 -> m6_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m7_39 -> m7_40  [key=0, style=solid, color=red];
m7_40 -> m7_41  [key=0, style=solid, color=red];
m7_40 -> m7_44  [key=2, style=dotted, color=red];
m7_40 -> m7_42  [key=1, style=dashed, color=red, label=processingJob];
m7_41 -> m7_42  [key=0, style=solid];
m7_41 -> m7_20  [key=2, style=dotted];
m7_42 -> m7_43  [key=0, style=solid];
m7_42 -> m7_20  [key=2, style=dotted];
m7_43 -> m7_39  [key=0, style=bold, color=blue];
m7_32 -> m7_33  [key=0, style=solid, color=red];
m7_33 -> m7_34  [key=0, style=solid, color=red];
m7_33 -> m7_19  [key=2, style=dotted, color=red];
m7_33 -> m7_36  [key=1, style=dashed, color=red, label="lambda expression"];
m7_34 -> m7_35  [key=0, style=solid];
m7_34 -> m7_20  [key=2, style=dotted];
m7_35 -> m7_32  [key=0, style=bold, color=blue];
m7_25 -> m7_26  [key=0, style=solid, color=red];
m7_26 -> m7_27  [key=0, style=solid, color=red];
m7_26 -> m7_19  [key=2, style=dotted, color=red];
m7_26 -> m7_29  [key=1, style=dashed, color=red, label="lambda expression"];
m7_27 -> m7_28  [key=0, style=solid];
m7_27 -> m7_20  [key=2, style=dotted];
m7_28 -> m7_25  [key=0, style=bold, color=blue];
m7_44 -> m7_56  [key=0, style=solid, color=red];
m7_56 -> m7_57  [key=0, style=solid, color=red];
m7_56 -> m7_24  [key=2, style=dotted, color=red];
m7_57 -> m7_44  [key=0, style=bold, color=blue];
m7_15 -> m7_16  [key=0, style=solid, color=red];
m7_16 -> m7_17  [key=0, style=solid, color=red];
m7_16 -> m7_19  [key=2, style=dotted, color=red];
m7_16 -> m7_21  [key=1, style=dashed, color=red, label="lambda expression"];
m7_17 -> m7_18  [key=0, style=solid, color=red];
m7_17 -> m7_20  [key=2, style=dotted, color=red];
m7_18 -> m7_15  [key=0, style=bold, color=blue];
m7_45 -> m7_46  [key=0, style=solid, color=red];
m7_46 -> m7_47  [key=0, style=solid, color=red];
m7_46 -> m7_44  [key=2, style=dotted, color=red];
m7_47 -> m7_48  [key=0, style=solid, color=red];
m7_47 -> m7_50  [key=2, style=dotted, color=red];
m7_48 -> m7_49  [key=0, style=solid, color=red];
m7_48 -> m7_51  [key=2, style=dotted, color=red];
m7_48 -> m7_52  [key=1, style=dashed, color=red, label="lambda expression"];
m7_49 -> m7_45  [key=0, style=bold, color=blue];
m7_52 -> m7_53  [key=0, style=solid, color=red];
m7_11 -> m7_12  [key=0, style=solid, color=red];
m7_12 -> m7_13  [key=0, style=solid, color=red];
m7_12 -> m7_14  [key=2, style=dotted, color=red];
m7_13 -> m7_11  [key=0, style=bold, color=blue];
m7_21 -> m7_22  [key=0, style=solid, color=red];
m7_22 -> m7_23  [key=0, style=solid, color=red];
m7_22 -> m7_24  [key=2, style=dotted, color=red];
m7_23 -> m7_21  [key=0, style=bold, color=blue];
m7_29 -> m7_30  [key=0, style=solid, color=red];
m7_30 -> m7_31  [key=0, style=solid, color=red];
m7_30 -> m7_24  [key=2, style=dotted, color=red];
m7_31 -> m7_29  [key=0, style=bold, color=blue];
m7_36 -> m7_37  [key=0, style=solid, color=red];
m7_37 -> m7_38  [key=0, style=solid, color=red];
m7_37 -> m7_24  [key=2, style=dotted, color=red];
m7_38 -> m7_36  [key=0, style=bold, color=blue];
m7_53 -> m7_54  [key=0, style=solid, color=red];
m7_53 -> m7_55  [key=2, style=dotted, color=red];
m7_54 -> m7_52  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid, color=red];
m7_1 -> m7_2  [key=0, style=solid, color=red];
m7_1 -> m7_6  [key=2, style=dotted, color=red];
m7_2 -> m7_3  [key=0, style=solid, color=red];
m7_2 -> m7_7  [key=2, style=dotted, color=red];
m7_3 -> m7_4  [key=0, style=solid, color=red];
m7_3 -> m7_8  [key=2, style=dotted, color=red];
m7_3 -> m7_9  [key=2, style=dotted, color=red];
m7_3 -> m7_11  [key=1, style=dashed, color=red, label="lambda expression"];
m7_4 -> m7_5  [key=0, style=solid, color=red];
m7_4 -> m7_10  [key=2, style=dotted, color=red];
m7_5 -> m7_0  [key=0, style=bold, color=blue];
m7_58 -> m7_1  [key=1, style=dashed, color=red, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m7_58 -> m7_2  [key=1, style=dashed, color=red, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m7_58 -> m7_3  [key=1, style=dashed, color=red, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m7_58 -> m7_4  [key=1, style=dashed, color=red, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m7_58 -> m7_26  [key=1, style=dashed, color=red, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m7_58 -> m7_30  [key=1, style=dashed, color=red, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m7_58 -> m7_33  [key=1, style=dashed, color=red, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m7_58 -> m7_37  [key=1, style=dashed, color=red, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m7_58 -> m7_40  [key=1, style=dashed, color=red, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m7_58 -> m7_46  [key=1, style=dashed, color=red, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m7_58 -> m7_48  [key=1, style=dashed, color=red, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m7_58 -> m7_56  [key=1, style=dashed, color=red, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m8_91 -> m8_92  [key=0, style=solid];
m8_91 -> m8_94  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.ServerContext"];
m8_91 -> m8_96  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.ServerContext"];
m8_91 -> m8_97  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_91 -> m8_43  [key=2, style=dotted];
m8_92 -> m8_93  [key=0, style=solid];
m8_92 -> m8_94  [key=0, style=solid];
m8_92 -> m8_26  [key=2, style=dotted];
m8_94 -> m8_95  [key=0, style=solid];
m8_94 -> m8_96  [key=0, style=solid];
m8_94 -> m8_32  [key=1, style=dashed, color=green, label="HangFire.Tests.Server.JobFetcherFeature"];
m8_94 -> m8_37  [key=1, style=dashed, color=green, label="HangFire.Tests.Server.JobFetcherFeature"];
m8_94 -> m8_46  [key=1, style=dashed, color=green, label="HangFire.Tests.Server.JobFetcherFeature"];
m8_94 -> m8_52  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m8_94 -> m8_57  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m8_94 -> m8_62  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m8_94 -> m8_66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m8_94 -> m8_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m8_94 -> m8_78  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m8_94 -> m8_83  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m8_94 -> m8_87  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m8_94 -> m8_92  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m8_96 -> m8_97  [key=0, style=solid];
m8_96 -> m8_99  [key=2, style=dotted];
m8_97 -> m8_98  [key=0, style=solid];
m8_97 -> m8_44  [key=2, style=dotted];
m8_97 -> m8_49  [key=2, style=dotted];
m8_93 -> m8_98  [key=0, style=solid];
m8_93 -> m8_8  [key=2, style=dotted];
m8_93 -> m8_85  [key=0, style=bold, color=blue];
m8_95 -> m8_98  [key=0, style=solid];
m8_95 -> m8_8  [key=2, style=dotted];
m8_98 -> m8_91  [key=0, style=bold, color=blue];
m8_76 -> m8_77  [key=0, style=solid];
m8_76 -> m8_79  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_76 -> m8_81  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_77 -> m8_78  [key=0, style=solid];
m8_77 -> m8_79  [key=0, style=solid];
m8_77 -> m8_39  [key=2, style=dotted];
m8_79 -> m8_80  [key=0, style=solid];
m8_79 -> m8_81  [key=0, style=solid];
m8_79 -> m8_40  [key=2, style=dotted];
m8_81 -> m8_82  [key=0, style=solid];
m8_81 -> m8_46  [key=2, style=dotted];
m8_81 -> m8_66  [key=2, style=dotted];
m8_81 -> m8_42  [key=2, style=dotted];
m8_78 -> m8_82  [key=0, style=solid];
m8_78 -> m8_8  [key=2, style=dotted];
m8_78 -> m8_22  [key=2, style=dotted];
m8_78 -> m8_79  [key=0, style=solid];
m8_80 -> m8_82  [key=0, style=solid];
m8_80 -> m8_8  [key=2, style=dotted];
m8_80 -> m8_41  [key=2, style=dotted];
m8_80 -> m8_81  [key=0, style=solid];
m8_82 -> m8_76  [key=0, style=bold, color=blue];
m8_82 -> m8_43  [key=2, style=dotted];
m8_82 -> m8_83  [key=0, style=solid];
m8_29 -> m8_30  [key=0, style=solid];
m8_29 -> m8_31  [key=0, style=solid];
m8_0 -> m8_16  [key=3, color=green, style=bold, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext"];
m8_0 -> m8_1  [key=0, style=solid, color=red];
m8_0 -> m8_3  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m8_0 -> m8_5  [key=1, style=dashed, color=red, label="HangFire.SqlServer.IPersistentJobQueue"];
m8_0 -> m8_6  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m8_2 -> m8_3  [key=0, style=solid, color=green];
m8_2 -> m8_6  [key=2, style=dotted, color=green];
m8_2 -> m8_7  [key=2, style=dotted, color=green];
m8_2 -> m8_8  [key=2, style=dotted, color=red];
m8_1 -> m8_2  [key=0, style=solid, color=red];
m8_1 -> m8_5  [key=2, style=dotted];
m8_1 -> m8_3  [key=0, style=solid, color=red];
m8_3 -> m8_4  [key=0, style=solid, color=green];
m8_3 -> m8_8  [key=2, style=dotted, color=green];
m8_3 -> m8_5  [key=0, style=solid, color=red];
m8_4 -> m8_0  [key=0, style=bold, color=blue];
m8_4 -> m8_7  [key=0, style=solid];
m8_4 -> m8_8  [key=2, style=dotted];
m8_26 -> m8_27  [key=0, style=solid, color=green];
m8_26 -> m8_29  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m8_26 -> m8_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.Job"];
m8_26 -> m8_33  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m8_26 -> m8_34  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m8_26 -> m8_35  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m8_26 -> m8_37  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m8_27 -> m8_28  [key=0, style=solid, color=green];
m8_27 -> m8_29  [key=0, style=solid];
m8_32 -> m8_33  [key=0, style=solid, color=green];
m8_32 -> m8_43  [key=2, style=dotted];
m8_32 -> m8_22  [key=2, style=dotted, color=green];
m8_33 -> m8_34  [key=0, style=solid, color=green];
m8_33 -> m8_44  [key=2, style=dotted];
m8_33 -> m8_45  [key=2, style=dotted];
m8_33 -> m8_46  [key=2, style=dotted];
m8_33 -> m8_47  [key=2, style=dotted];
m8_33 -> m8_48  [key=2, style=dotted];
m8_33 -> m8_38  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m8_33 -> m8_41  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m8_33 -> m8_40  [key=2, style=dotted, color=green];
m8_34 -> m8_35  [key=0, style=solid, color=green];
m8_34 -> m8_41  [key=0, style=solid];
m8_35 -> m8_36  [key=0, style=solid, color=green];
m8_35 -> m8_38  [key=1, style=dashed, color=darkseagreen4, label=parameterArray];
m8_35 -> m8_40  [key=1, style=dashed, color=darkseagreen4, label=parameterArray];
m8_35 -> m8_42  [key=2, style=dotted, color=green];
m8_37 -> m8_38  [key=0, style=solid, color=green];
m8_37 -> m8_39  [key=0, style=solid];
m8_37 -> m8_26  [key=2, style=dotted, color=green];
m8_28 -> m8_42  [key=0, style=solid];
m8_28 -> m8_8  [key=2, style=dotted];
m8_28 -> m8_26  [key=0, style=bold, color=blue];
m8_30 -> m8_42  [key=0, style=solid];
m8_30 -> m8_8  [key=2, style=dotted];
m8_30 -> m8_31  [key=0, style=solid, color=green];
m8_31 -> m8_32  [key=0, style=solid, color=green];
m8_31 -> m8_33  [key=1, style=dashed, color=darkseagreen4, label=createJobSql];
m8_31 -> m8_31  [key=3, color=darkorchid, style=bold, label="Local variable string createJobSql"];
m8_31 -> m8_39  [key=2, style=dotted, color=green];
m8_38 -> m8_37  [key=0, style=solid];
m8_38 -> m8_38  [key=1, style=dashed, color=darkseagreen4, label=parameterIndex];
m8_38 -> m8_30  [key=0, style=bold, color=blue];
m8_41 -> m8_42  [key=0, style=solid];
m8_36 -> m8_37  [key=0, style=solid, color=green];
m8_36 -> m8_38  [key=1, style=dashed, color=darkseagreen4, label=parameterIndex];
m8_36 -> m8_36  [key=3, color=darkorchid, style=bold, label="Local variable int parameterIndex"];
m8_36 -> m8_43  [key=2, style=dotted, color=green];
m8_40 -> m8_41  [key=0, style=solid];
m8_40 -> m8_49  [key=2, style=dotted];
m8_39 -> m8_40  [key=0, style=solid];
m8_39 -> m8_39  [key=3, color=darkorchid, style=bold, label="Local variable string insertParameterSql"];
m8_42 -> m8_26  [key=0, style=bold, color=blue];
m8_54 -> m8_55  [key=0, style=solid];
m8_54 -> m8_46  [key=2, style=dotted];
m8_54 -> m8_66  [key=2, style=dotted];
m8_54 -> m8_57  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m8_54 -> m8_58  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m8_54 -> m8_64  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m8_5 -> m8_6  [key=0, style=solid, color=red];
m8_46 -> m8_47  [key=0, style=solid, color=green];
m8_46 -> m8_22  [key=2, style=dotted, color=green];
m8_50 -> m8_51  [key=0, style=solid];
m8_50 -> m8_54  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_50 -> m8_55  [key=3, color=darkorchid, style=bold, label="method methodReturn HangFire.Storage.JobData GetJobData"];
m8_50 -> m8_43  [key=2, style=dotted];
m8_51 -> m8_52  [key=0, style=solid];
m8_51 -> m8_53  [key=0, style=solid];
m8_51 -> m8_54  [key=2, style=dotted];
m8_52 -> m8_65  [key=0, style=solid];
m8_52 -> m8_8  [key=2, style=dotted];
m8_52 -> m8_26  [key=2, style=dotted];
m8_52 -> m8_56  [key=3, color=darkorchid, style=bold, label="method methodReturn HangFire.Storage.JobData GetJobData"];
m8_52 -> m8_53  [key=0, style=solid];
m8_53 -> m8_54  [key=0, style=solid];
m8_53 -> m8_53  [key=3, color=darkorchid, style=bold, label="Local variable string sql"];
m8_53 -> m8_44  [key=0, style=bold, color=blue];
m8_55 -> m8_56  [key=0, style=solid];
m8_55 -> m8_57  [key=0, style=solid];
m8_57 -> m8_58  [key=0, style=solid];
m8_57 -> m8_46  [key=2, style=dotted];
m8_57 -> m8_61  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
m8_57 -> m8_22  [key=2, style=dotted];
m8_58 -> m8_59  [key=0, style=solid];
m8_58 -> m8_40  [key=2, style=dotted];
m8_64 -> m8_65  [key=0, style=solid];
m8_64 -> m8_68  [key=2, style=dotted];
m8_56 -> m8_65  [key=0, style=solid];
m8_56 -> m8_39  [key=2, style=dotted];
m8_56 -> m8_57  [key=0, style=solid];
m8_61 -> m8_62  [key=0, style=solid];
m8_61 -> m8_64  [key=0, style=solid];
m8_61 -> m8_67  [key=2, style=dotted];
m8_61 -> m8_43  [key=2, style=dotted];
m8_59 -> m8_60  [key=0, style=solid];
m8_59 -> m8_55  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.Common.Job job"];
m8_59 -> m8_41  [key=2, style=dotted];
m8_59 -> m8_56  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.Common.JobLoadException loadException"];
m8_59 -> m8_62  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.Common.JobLoadException loadException"];
m8_60 -> m8_61  [key=0, style=solid];
m8_60 -> m8_55  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.Common.JobLoadException loadException"];
m8_60 -> m8_62  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.Common.JobLoadException loadException"];
m8_60 -> m8_42  [key=2, style=dotted];
m8_62 -> m8_63  [key=0, style=solid];
m8_62 -> m8_26  [key=2, style=dotted];
m8_63 -> m8_64  [key=0, style=solid];
m8_63 -> m8_55  [key=0, style=bold, color=blue];
m8_65 -> m8_50  [key=0, style=bold, color=blue];
m8_65 -> m8_39  [key=2, style=dotted];
m8_65 -> m8_66  [key=0, style=solid];
m8_9 -> m8_10  [key=0, style=solid, color=green];
m8_10 -> m8_11  [key=0, style=solid, color=green];
m8_10 -> m8_13  [key=2, style=dotted, color=green];
m8_10 -> m8_12  [key=2, style=dotted];
m8_11 -> m8_12  [key=0, style=solid];
m8_11 -> m8_9  [key=0, style=bold, color=blue];
m8_12 -> m8_9  [key=0, style=bold, color=blue];
m8_13 -> m8_14  [key=0, style=solid, color=red];
m8_14 -> m8_15  [key=0, style=solid, color=red];
m8_14 -> m8_16  [key=2, style=dotted, color=red];
m8_15 -> m8_13  [key=0, style=bold, color=blue];
m8_15 -> m8_16  [key=0, style=solid, color=green];
m8_15 -> m8_17  [key=0, style=solid];
m8_90 -> m8_42  [key=2, style=dotted];
m8_90 -> m8_91  [key=0, style=solid];
m8_22 -> m8_23  [key=0, style=solid, color=red];
m8_22 -> m8_31  [key=3, color=green, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m8_22 -> m8_45  [key=3, color=green, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m8_22 -> m8_56  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m8_22 -> m8_65  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m8_22 -> m8_77  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m8_22 -> m8_86  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m8_23 -> m8_24  [key=0, style=solid, color=red];
m8_23 -> m8_25  [key=2, style=dotted, color=green];
m8_23 -> n0  [key=2, style=dotted, color=red];
m8_24 -> m8_22  [key=0, style=bold, color=blue];
m8_85 -> m8_86  [key=0, style=solid];
m8_85 -> m8_89  [key=0, style=solid];
m8_85 -> m8_8  [key=2, style=dotted];
m8_87 -> m8_22  [key=2, style=dotted];
m8_87 -> m8_88  [key=0, style=solid];
m8_87 -> m8_89  [key=0, style=solid];
m8_87 -> m8_90  [key=2, style=dotted];
m8_86 -> m8_39  [key=2, style=dotted];
m8_86 -> m8_87  [key=0, style=solid];
m8_86 -> m8_88  [key=0, style=solid];
m8_88 -> m8_40  [key=2, style=dotted];
m8_88 -> m8_89  [key=0, style=solid];
m8_88 -> m8_46  [key=2, style=dotted];
m8_88 -> m8_66  [key=2, style=dotted];
m8_89 -> m8_41  [key=2, style=dotted];
m8_89 -> m8_90  [key=0, style=solid];
m8_89 -> m8_83  [key=0, style=bold, color=blue];
m8_48 -> m8_41  [key=2, style=dotted];
m8_48 -> m8_49  [key=0, style=solid];
m8_7 -> m8_0  [key=0, style=bold, color=blue];
m8_45 -> m8_46  [key=0, style=solid, color=green];
m8_45 -> m8_39  [key=2, style=dotted, color=green];
m8_110 -> m8_111  [key=0, style=solid];
m8_111 -> m8_112  [key=0, style=solid];
m8_111 -> m8_113  [key=0, style=solid];
m8_111 -> m8_115  [key=2, style=dotted];
m8_111 -> m8_111  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m8_112 -> m8_114  [key=0, style=solid];
m8_112 -> m8_116  [key=2, style=dotted];
m8_113 -> m8_114  [key=0, style=solid];
m8_113 -> m8_117  [key=2, style=dotted];
m8_113 -> m8_45  [key=2, style=dotted];
m8_113 -> m8_49  [key=2, style=dotted];
m8_113 -> m8_113  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m8_114 -> m8_110  [key=0, style=bold, color=blue];
m8_83 -> m8_26  [key=2, style=dotted];
m8_83 -> m8_84  [key=0, style=solid];
m8_83 -> m8_86  [key=1, style=dashed, color=darkseagreen4, label=double];
m8_83 -> m8_88  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_84 -> m8_76  [key=0, style=bold, color=blue];
m8_84 -> m8_85  [key=0, style=solid];
m8_84 -> m8_86  [key=0, style=solid];
m8_16 -> m8_17  [key=0, style=solid, color=green];
m8_16 -> m8_0  [key=2, style=dotted, color=green];
m8_17 -> m8_14  [key=0, style=bold, color=blue];
m8_17 -> m8_18  [key=0, style=solid];
m8_44 -> m8_45  [key=0, style=solid, color=green];
m8_47 -> m8_40  [key=2, style=dotted];
m8_47 -> m8_47  [key=3, color=darkorchid, style=bold, label="Local variable string insertParameterSql"];
m8_47 -> m8_48  [key=0, style=solid];
m8_49 -> m8_42  [key=2, style=dotted];
m8_49 -> m8_50  [key=0, style=solid];
m8_69 -> m8_70  [key=0, style=solid];
m8_69 -> m8_72  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_69 -> m8_74  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_69 -> m8_41  [key=2, style=dotted];
m8_70 -> m8_71  [key=0, style=solid];
m8_70 -> m8_72  [key=0, style=solid];
m8_70 -> m8_42  [key=2, style=dotted];
m8_72 -> m8_73  [key=0, style=solid];
m8_72 -> m8_74  [key=0, style=solid];
m8_72 -> m8_42  [key=2, style=dotted];
m8_74 -> m8_75  [key=0, style=solid];
m8_74 -> m8_49  [key=2, style=dotted];
m8_74 -> m8_26  [key=2, style=dotted];
m8_71 -> m8_75  [key=0, style=solid];
m8_71 -> m8_8  [key=2, style=dotted];
m8_71 -> m8_43  [key=2, style=dotted];
m8_71 -> m8_72  [key=0, style=solid];
m8_73 -> m8_75  [key=0, style=solid];
m8_73 -> m8_8  [key=2, style=dotted];
m8_73 -> m8_43  [key=2, style=dotted];
m8_73 -> m8_74  [key=0, style=solid];
m8_75 -> m8_69  [key=0, style=bold, color=blue];
m8_75 -> m8_64  [key=0, style=bold, color=blue];
m8_18 -> m8_19  [key=0, style=solid];
m8_18 -> m8_20  [key=2, style=dotted];
m8_18 -> m8_21  [key=2, style=dotted];
m8_19 -> m8_17  [key=0, style=bold, color=blue];
m8_6 -> m8_7  [key=0, style=solid];
m8_68 -> m8_41  [key=2, style=dotted];
m8_68 -> m8_69  [key=0, style=solid];
m8_67 -> m8_40  [key=2, style=dotted];
m8_67 -> m8_68  [key=0, style=solid];
m8_100 -> m8_101  [key=0, style=solid];
m8_100 -> m8_103  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_101 -> m8_102  [key=0, style=solid];
m8_101 -> m8_103  [key=0, style=solid];
m8_103 -> m8_104  [key=0, style=solid];
m8_103 -> m8_49  [key=2, style=dotted];
m8_102 -> m8_104  [key=0, style=solid];
m8_102 -> m8_8  [key=2, style=dotted];
m8_104 -> m8_100  [key=0, style=bold, color=blue];
m8_66 -> m8_22  [key=2, style=dotted];
m8_66 -> m8_67  [key=0, style=solid];
m8_105 -> m8_106  [key=0, style=solid];
m8_105 -> m8_108  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_106 -> m8_107  [key=0, style=solid];
m8_106 -> m8_108  [key=0, style=solid];
m8_108 -> m8_109  [key=0, style=solid];
m8_108 -> m8_49  [key=2, style=dotted];
m8_107 -> m8_109  [key=0, style=solid];
m8_107 -> m8_8  [key=2, style=dotted];
m8_109 -> m8_105  [key=0, style=bold, color=blue];
m8_118 -> m8_5  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerConnection"];
m8_118 -> m8_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m8_118 -> m8_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m8_118 -> m8_14  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerConnection"];
m8_118 -> m8_18  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m8_118 -> m8_23  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerConnection"];
m8_118 -> m8_33  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m8_118 -> m8_40  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m8_118 -> m8_54  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m8_118 -> m8_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m8_118 -> m8_81  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m8_118 -> m8_88  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m8_118 -> m8_97  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m8_118 -> m8_103  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m8_118 -> m8_108  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m8_118 -> m8_113  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_288 -> m9_289  [key=0, style=solid];
m9_289 -> m9_290  [key=0, style=solid];
m9_289 -> m9_43  [key=2, style=dotted];
m9_289 -> m9_291  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_290 -> m9_288  [key=0, style=bold, color=blue];
m9_230 -> m9_231  [key=0, style=solid];
m9_231 -> m9_232  [key=0, style=solid];
m9_231 -> m9_43  [key=2, style=dotted];
m9_231 -> m9_233  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_232 -> m9_230  [key=0, style=bold, color=blue];
m9_0 -> m9_1  [key=0, style=solid, color=red];
m9_1 -> m9_2  [key=0, style=solid, color=red];
m9_1 -> m9_3  [key=2, style=dotted, color=red];
m9_2 -> m9_0  [key=0, style=bold, color=blue];
m9_345 -> m9_346  [key=0, style=solid];
m9_346 -> m9_347  [key=0, style=solid];
m9_346 -> m9_43  [key=2, style=dotted];
m9_346 -> m9_348  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_347 -> m9_345  [key=0, style=bold, color=blue];
m9_23 -> m9_24  [key=0, style=solid, color=red];
m9_24 -> m9_25  [key=0, style=solid, color=red];
m9_24 -> m9_26  [key=2, style=dotted, color=red];
m9_24 -> m9_27  [key=1, style=dashed, color=red, label="lambda expression"];
m9_25 -> m9_23  [key=0, style=bold, color=blue];
m9_258 -> m9_259  [key=0, style=solid];
m9_259 -> m9_260  [key=0, style=solid];
m9_259 -> m9_263  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_259 -> m9_259  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_260 -> m9_261  [key=0, style=solid];
m9_260 -> m9_88  [key=2, style=dotted];
m9_260 -> m9_262  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_261 -> m9_258  [key=0, style=bold, color=blue];
m9_279 -> m9_280  [key=0, style=solid];
m9_280 -> m9_281  [key=0, style=solid];
m9_280 -> m9_43  [key=2, style=dotted];
m9_280 -> m9_282  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_281 -> m9_279  [key=0, style=bold, color=blue];
m9_127 -> m9_128  [key=0, style=solid];
m9_128 -> m9_129  [key=0, style=solid];
m9_128 -> m9_43  [key=2, style=dotted];
m9_128 -> m9_130  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_129 -> m9_127  [key=0, style=bold, color=blue];
m9_58 -> m9_59  [key=0, style=solid];
m9_59 -> m9_60  [key=0, style=solid];
m9_59 -> m9_43  [key=2, style=dotted];
m9_59 -> m9_61  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_60 -> m9_58  [key=0, style=bold, color=blue];
m9_207 -> m9_208  [key=0, style=solid];
m9_208 -> m9_209  [key=0, style=solid];
m9_208 -> m9_212  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_208 -> m9_197  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_209 -> m9_210  [key=0, style=solid];
m9_209 -> m9_88  [key=2, style=dotted];
m9_209 -> m9_211  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_210 -> m9_207  [key=0, style=bold, color=blue];
m9_219 -> m9_220  [key=0, style=solid];
m9_220 -> m9_221  [key=0, style=solid];
m9_220 -> m9_224  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_220 -> m9_197  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_221 -> m9_222  [key=0, style=solid];
m9_221 -> m9_88  [key=2, style=dotted];
m9_221 -> m9_223  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_222 -> m9_219  [key=0, style=bold, color=blue];
m9_366 -> m9_367  [key=0, style=solid];
m9_367 -> m9_368  [key=0, style=solid];
m9_367 -> m9_43  [key=2, style=dotted];
m9_367 -> m9_369  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_368 -> m9_366  [key=0, style=bold, color=blue];
m9_196 -> m9_197  [key=0, style=solid];
m9_197 -> m9_198  [key=0, style=solid];
m9_197 -> m9_201  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_197 -> m9_197  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_198 -> m9_199  [key=0, style=solid];
m9_198 -> m9_88  [key=2, style=dotted];
m9_198 -> m9_200  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_199 -> m9_196  [key=0, style=bold, color=blue];
m9_40 -> m9_41  [key=0, style=solid];
m9_41 -> m9_42  [key=0, style=solid];
m9_41 -> m9_43  [key=2, style=dotted];
m9_41 -> m9_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_42 -> m9_40  [key=0, style=bold, color=blue];
m9_4 -> m9_5  [key=0, style=solid, color=red];
m9_5 -> m9_6  [key=0, style=solid, color=red];
m9_5 -> m9_8  [key=2, style=dotted, color=red];
m9_5 -> m9_10  [key=1, style=dashed, color=red, label="lambda expression"];
m9_6 -> m9_7  [key=0, style=solid, color=red];
m9_6 -> m9_9  [key=2, style=dotted, color=red];
m9_7 -> m9_4  [key=0, style=bold, color=blue];
m9_327 -> m9_328  [key=0, style=solid];
m9_328 -> m9_329  [key=0, style=solid];
m9_328 -> m9_88  [key=2, style=dotted];
m9_328 -> m9_330  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_329 -> m9_327  [key=0, style=bold, color=blue];
m9_355 -> m9_356  [key=0, style=solid];
m9_356 -> m9_357  [key=0, style=solid];
m9_356 -> m9_360  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_356 -> m9_356  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_357 -> m9_358  [key=0, style=solid];
m9_357 -> m9_88  [key=2, style=dotted];
m9_357 -> m9_359  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_358 -> m9_355  [key=0, style=bold, color=blue];
m9_26 -> m9_422  [key=0, style=solid, color=red];
m9_26 -> m9_423  [key=1, style=dashed, color=darkseagreen4, label="System.Action<HangFire.SqlServer.SqlServerConnection>"];
m9_26 -> m9_24  [key=3, color=red, style=bold, label="Parameter variable System.Action<HangFire.SqlServer.SqlServerConnection> action"];
m9_422 -> m9_423  [key=0, style=solid, color=red];
m9_422 -> m9_22  [key=2, style=dotted, color=red];
m9_422 -> m9_14  [key=2, style=dotted, color=red];
m9_423 -> m9_424  [key=0, style=solid];
m9_423 -> m9_425  [key=2, style=dotted];
m9_424 -> m9_26  [key=0, style=bold, color=blue];
m9_145 -> m9_146  [key=0, style=solid];
m9_146 -> m9_147  [key=0, style=solid];
m9_146 -> m9_151  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_146 -> m9_146  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_147 -> m9_148  [key=0, style=solid];
m9_147 -> m9_88  [key=2, style=dotted];
m9_147 -> m9_149  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_148 -> m9_145  [key=0, style=bold, color=blue];
m9_85 -> m9_86  [key=0, style=solid, color=red];
m9_86 -> m9_87  [key=0, style=solid, color=red];
m9_86 -> m9_88  [key=2, style=dotted, color=red];
m9_86 -> m9_89  [key=1, style=dashed, color=red, label="lambda expression"];
m9_87 -> m9_85  [key=0, style=bold, color=blue];
m9_251 -> m9_252  [key=0, style=solid];
m9_252 -> m9_253  [key=0, style=solid];
m9_252 -> m9_43  [key=2, style=dotted];
m9_252 -> m9_254  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_253 -> m9_251  [key=0, style=bold, color=blue];
m9_408 -> m9_409  [key=0, style=solid];
m9_408 -> m9_410  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_408 -> m9_411  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_10 -> m9_11  [key=0, style=solid, color=red];
m9_11 -> m9_12  [key=0, style=solid, color=red];
m9_11 -> m9_13  [key=2, style=dotted, color=red];
m9_11 -> m9_14  [key=2, style=dotted, color=red];
m9_12 -> m9_10  [key=0, style=bold, color=blue];
m9_19 -> m9_20  [key=0, style=solid, color=red];
m9_20 -> m9_21  [key=0, style=solid, color=red];
m9_20 -> m9_22  [key=2, style=dotted, color=red];
m9_21 -> m9_19  [key=0, style=bold, color=blue];
m9_27 -> m9_28  [key=0, style=solid, color=red];
m9_27 -> m9_30  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerConnection"];
m9_28 -> m9_29  [key=0, style=solid, color=red];
m9_28 -> m9_33  [key=2, style=dotted, color=red];
m9_28 -> m9_30  [key=1, style=dashed, color=red, label=token];
m9_28 -> m9_31  [key=1, style=dashed, color=red, label=token];
m9_28 -> m9_37  [key=1, style=dashed, color=red, label=token];
m9_30 -> m9_31  [key=0, style=solid, color=red];
m9_30 -> m9_34  [key=2, style=dotted, color=red];
m9_29 -> m9_30  [key=0, style=solid, color=red];
m9_29 -> m9_31  [key=1, style=dashed, color=red, label=queues];
m9_29 -> m9_37  [key=1, style=dashed, color=red, label=queues];
m9_31 -> m9_32  [key=0, style=solid, color=red];
m9_31 -> m9_35  [key=2, style=dotted, color=red];
m9_31 -> m9_36  [key=1, style=dashed, color=red, label="lambda expression"];
m9_37 -> m9_38  [key=0, style=solid, color=red];
m9_37 -> m9_39  [key=2, style=dotted, color=red];
m9_32 -> m9_27  [key=0, style=bold, color=blue];
m9_36 -> m9_37  [key=0, style=solid, color=red];
m9_38 -> m9_36  [key=0, style=bold, color=blue];
m9_44 -> m9_45  [key=0, style=solid];
m9_45 -> m9_46  [key=0, style=solid];
m9_45 -> m9_48  [key=2, style=dotted];
m9_46 -> m9_47  [key=0, style=solid];
m9_46 -> m9_49  [key=2, style=dotted];
m9_47 -> m9_44  [key=0, style=bold, color=blue];
m9_53 -> m9_54  [key=0, style=solid];
m9_54 -> m9_55  [key=0, style=solid];
m9_54 -> m9_57  [key=2, style=dotted];
m9_55 -> m9_56  [key=0, style=solid];
m9_55 -> m9_49  [key=2, style=dotted];
m9_56 -> m9_53  [key=0, style=bold, color=blue];
m9_61 -> m9_62  [key=0, style=solid];
m9_61 -> m9_66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_62 -> m9_63  [key=0, style=solid];
m9_62 -> m9_8  [key=2, style=dotted];
m9_62 -> m9_65  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_66 -> m9_67  [key=0, style=solid];
m9_66 -> m9_68  [key=2, style=dotted];
m9_66 -> m9_69  [key=2, style=dotted];
m9_63 -> m9_64  [key=0, style=solid];
m9_63 -> m9_9  [key=2, style=dotted];
m9_65 -> m9_66  [key=0, style=solid];
m9_64 -> m9_61  [key=0, style=bold, color=blue];
m9_67 -> m9_65  [key=0, style=bold, color=blue];
m9_73 -> m9_74  [key=0, style=solid];
m9_73 -> m9_78  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_74 -> m9_75  [key=0, style=solid];
m9_74 -> m9_8  [key=2, style=dotted];
m9_74 -> m9_77  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_78 -> m9_79  [key=0, style=solid];
m9_78 -> m9_80  [key=2, style=dotted];
m9_78 -> m9_69  [key=2, style=dotted];
m9_78 -> m9_81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_75 -> m9_76  [key=0, style=solid];
m9_75 -> m9_9  [key=2, style=dotted];
m9_77 -> m9_78  [key=0, style=solid];
m9_76 -> m9_73  [key=0, style=bold, color=blue];
m9_79 -> m9_77  [key=0, style=bold, color=blue];
m9_81 -> m9_82  [key=0, style=solid];
m9_82 -> m9_83  [key=0, style=solid];
m9_82 -> m9_84  [key=2, style=dotted];
m9_83 -> m9_81  [key=0, style=bold, color=blue];
m9_89 -> m9_90  [key=0, style=solid];
m9_89 -> m9_93  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_89 -> m9_104  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_90 -> m9_91  [key=0, style=solid];
m9_90 -> m9_80  [key=2, style=dotted];
m9_90 -> m9_68  [key=2, style=dotted];
m9_90 -> m9_108  [key=2, style=dotted];
m9_90 -> m9_69  [key=2, style=dotted];
m9_90 -> m9_118  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_90 -> m9_92  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m9_90 -> m9_94  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m9_90 -> m9_104  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m9_93 -> m9_94  [key=0, style=solid];
m9_93 -> m9_110  [key=2, style=dotted];
m9_93 -> m9_111  [key=2, style=dotted];
m9_93 -> m9_95  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
m9_93 -> m9_96  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
m9_93 -> m9_97  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
m9_93 -> m9_98  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
m9_93 -> m9_103  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
m9_104 -> m9_105  [key=0, style=solid];
m9_104 -> m9_110  [key=2, style=dotted];
m9_104 -> m9_117  [key=2, style=dotted];
m9_104 -> m9_121  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_104 -> m9_124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_104 -> m9_106  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m9_91 -> m9_92  [key=0, style=solid];
m9_91 -> m9_49  [key=2, style=dotted];
m9_118 -> m9_119  [key=0, style=solid];
m9_92 -> m9_93  [key=0, style=solid];
m9_92 -> m9_109  [key=2, style=dotted];
m9_94 -> m9_95  [key=0, style=solid];
m9_94 -> m9_112  [key=2, style=dotted];
m9_94 -> m9_9  [key=2, style=dotted];
m9_95 -> m9_96  [key=0, style=solid];
m9_95 -> m9_9  [key=2, style=dotted];
m9_96 -> m9_97  [key=0, style=solid];
m9_96 -> m9_9  [key=2, style=dotted];
m9_97 -> m9_98  [key=0, style=solid];
m9_97 -> m9_113  [key=2, style=dotted];
m9_97 -> m9_99  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
m9_98 -> m9_99  [key=0, style=solid];
m9_103 -> m9_104  [key=0, style=solid];
m9_103 -> m9_115  [key=2, style=dotted];
m9_103 -> m9_116  [key=2, style=dotted];
m9_99 -> m9_100  [key=0, style=solid, color=red];
m9_99 -> m9_114  [key=2, style=dotted];
m9_99 -> m9_101  [key=1, style=dashed, color=darkseagreen4, label=job];
m9_99 -> m9_102  [key=1, style=dashed, color=darkseagreen4, label=job];
m9_100 -> m9_101  [key=0, style=solid, color=red];
m9_100 -> m9_9  [key=2, style=dotted, color=red];
m9_101 -> m9_102  [key=0, style=solid];
m9_101 -> m9_9  [key=2, style=dotted];
m9_102 -> m9_103  [key=0, style=solid];
m9_102 -> m9_9  [key=2, style=dotted];
m9_105 -> m9_106  [key=0, style=solid];
m9_105 -> m9_9  [key=2, style=dotted];
m9_121 -> m9_122  [key=0, style=solid];
m9_124 -> m9_125  [key=0, style=solid];
m9_106 -> m9_107  [key=0, style=solid];
m9_106 -> m9_9  [key=2, style=dotted];
m9_107 -> m9_89  [key=0, style=bold, color=blue];
m9_119 -> m9_120  [key=0, style=solid];
m9_119 -> m9_84  [key=2, style=dotted];
m9_120 -> m9_118  [key=0, style=bold, color=blue];
m9_122 -> m9_123  [key=0, style=solid];
m9_123 -> m9_121  [key=0, style=bold, color=blue];
m9_125 -> m9_126  [key=0, style=solid];
m9_126 -> m9_124  [key=0, style=bold, color=blue];
m9_130 -> m9_131  [key=0, style=solid];
m9_130 -> m9_134  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_131 -> m9_132  [key=0, style=solid];
m9_131 -> m9_8  [key=2, style=dotted];
m9_131 -> m9_133  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_134 -> m9_135  [key=0, style=solid];
m9_134 -> m9_136  [key=2, style=dotted];
m9_132 -> m9_130  [key=0, style=bold, color=blue];
m9_133 -> m9_134  [key=0, style=solid];
m9_135 -> m9_133  [key=0, style=bold, color=blue];
m9_140 -> m9_141  [key=0, style=solid];
m9_141 -> m9_142  [key=0, style=solid];
m9_141 -> m9_136  [key=2, style=dotted];
m9_142 -> m9_143  [key=0, style=solid];
m9_142 -> m9_144  [key=2, style=dotted];
m9_143 -> m9_140  [key=0, style=bold, color=blue];
m9_151 -> m9_152  [key=0, style=solid];
m9_151 -> m9_159  [key=2, style=dotted];
m9_151 -> m9_160  [key=2, style=dotted];
m9_151 -> m9_110  [key=2, style=dotted];
m9_151 -> m9_111  [key=2, style=dotted];
m9_149 -> m9_150  [key=0, style=solid];
m9_149 -> m9_151  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_149 -> m9_152  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_150 -> m9_151  [key=0, style=solid];
m9_150 -> m9_80  [key=2, style=dotted];
m9_150 -> m9_162  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_152 -> m9_153  [key=0, style=solid];
m9_152 -> m9_161  [key=2, style=dotted];
m9_152 -> m9_136  [key=2, style=dotted];
m9_152 -> m9_154  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_152 -> m9_155  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_152 -> m9_156  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_152 -> m9_157  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_162 -> m9_163  [key=0, style=solid];
m9_153 -> m9_154  [key=0, style=solid];
m9_153 -> m9_49  [key=2, style=dotted];
m9_154 -> m9_155  [key=0, style=solid];
m9_154 -> m9_49  [key=2, style=dotted];
m9_155 -> m9_156  [key=0, style=solid];
m9_155 -> m9_9  [key=2, style=dotted];
m9_156 -> m9_157  [key=0, style=solid];
m9_156 -> m9_9  [key=2, style=dotted];
m9_157 -> m9_158  [key=0, style=solid];
m9_157 -> m9_144  [key=2, style=dotted];
m9_158 -> m9_149  [key=0, style=bold, color=blue];
m9_163 -> m9_164  [key=0, style=solid];
m9_163 -> m9_84  [key=2, style=dotted];
m9_164 -> m9_162  [key=0, style=bold, color=blue];
m9_170 -> m9_171  [key=0, style=solid];
m9_170 -> m9_174  [key=2, style=dotted];
m9_170 -> m9_160  [key=2, style=dotted];
m9_170 -> m9_110  [key=2, style=dotted];
m9_170 -> m9_111  [key=2, style=dotted];
m9_169 -> m9_170  [key=0, style=solid];
m9_169 -> m9_171  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_171 -> m9_172  [key=0, style=solid];
m9_171 -> m9_161  [key=2, style=dotted];
m9_171 -> m9_136  [key=2, style=dotted];
m9_172 -> m9_173  [key=0, style=solid];
m9_172 -> m9_49  [key=2, style=dotted];
m9_173 -> m9_169  [key=0, style=bold, color=blue];
m9_178 -> m9_179  [key=0, style=solid];
m9_178 -> m9_183  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_179 -> m9_180  [key=0, style=solid];
m9_179 -> m9_8  [key=2, style=dotted];
m9_179 -> m9_182  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_183 -> m9_184  [key=0, style=solid];
m9_183 -> m9_185  [key=2, style=dotted];
m9_180 -> m9_181  [key=0, style=solid];
m9_180 -> m9_9  [key=2, style=dotted];
m9_182 -> m9_183  [key=0, style=solid];
m9_181 -> m9_178  [key=0, style=bold, color=blue];
m9_184 -> m9_182  [key=0, style=bold, color=blue];
m9_189 -> m9_190  [key=0, style=solid];
m9_189 -> m9_194  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_190 -> m9_191  [key=0, style=solid];
m9_190 -> m9_8  [key=2, style=dotted];
m9_190 -> m9_193  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_194 -> m9_195  [key=0, style=solid];
m9_194 -> m9_185  [key=2, style=dotted];
m9_191 -> m9_192  [key=0, style=solid];
m9_191 -> m9_9  [key=2, style=dotted];
m9_193 -> m9_194  [key=0, style=solid];
m9_192 -> m9_189  [key=0, style=bold, color=blue];
m9_195 -> m9_193  [key=0, style=bold, color=blue];
m9_201 -> m9_202  [key=0, style=solid];
m9_201 -> m9_110  [key=2, style=dotted];
m9_201 -> m9_111  [key=2, style=dotted];
m9_200 -> m9_201  [key=0, style=solid];
m9_200 -> m9_203  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_200 -> m9_204  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_203 -> m9_204  [key=0, style=solid];
m9_203 -> m9_185  [key=2, style=dotted];
m9_204 -> m9_205  [key=0, style=solid];
m9_204 -> m9_110  [key=2, style=dotted];
m9_204 -> m9_111  [key=2, style=dotted];
m9_202 -> m9_203  [key=0, style=solid];
m9_202 -> m9_112  [key=2, style=dotted];
m9_202 -> m9_204  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m9_205 -> m9_206  [key=0, style=solid];
m9_205 -> m9_9  [key=2, style=dotted];
m9_206 -> m9_200  [key=0, style=bold, color=blue];
m9_212 -> m9_213  [key=0, style=solid];
m9_212 -> m9_110  [key=2, style=dotted];
m9_212 -> m9_111  [key=2, style=dotted];
m9_211 -> m9_212  [key=0, style=solid];
m9_211 -> m9_214  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_211 -> m9_215  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_211 -> m9_216  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_214 -> m9_215  [key=0, style=solid];
m9_214 -> m9_185  [key=2, style=dotted];
m9_215 -> m9_216  [key=0, style=solid];
m9_215 -> m9_185  [key=2, style=dotted];
m9_216 -> m9_217  [key=0, style=solid];
m9_216 -> m9_110  [key=2, style=dotted];
m9_216 -> m9_111  [key=2, style=dotted];
m9_213 -> m9_214  [key=0, style=solid];
m9_213 -> m9_112  [key=2, style=dotted];
m9_213 -> m9_215  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m9_213 -> m9_216  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m9_217 -> m9_218  [key=0, style=solid];
m9_217 -> m9_9  [key=2, style=dotted];
m9_218 -> m9_211  [key=0, style=bold, color=blue];
m9_224 -> m9_225  [key=0, style=solid];
m9_224 -> m9_110  [key=2, style=dotted];
m9_224 -> m9_111  [key=2, style=dotted];
m9_223 -> m9_224  [key=0, style=solid];
m9_223 -> m9_226  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_223 -> m9_227  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_226 -> m9_227  [key=0, style=solid];
m9_226 -> m9_185  [key=2, style=dotted];
m9_227 -> m9_228  [key=0, style=solid];
m9_227 -> m9_110  [key=2, style=dotted];
m9_227 -> m9_111  [key=2, style=dotted];
m9_225 -> m9_226  [key=0, style=solid];
m9_225 -> m9_112  [key=2, style=dotted];
m9_225 -> m9_227  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m9_228 -> m9_229  [key=0, style=solid];
m9_228 -> m9_9  [key=2, style=dotted];
m9_229 -> m9_223  [key=0, style=bold, color=blue];
m9_233 -> m9_234  [key=0, style=solid];
m9_233 -> m9_238  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_234 -> m9_235  [key=0, style=solid];
m9_234 -> m9_8  [key=2, style=dotted];
m9_234 -> m9_237  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_238 -> m9_239  [key=0, style=solid];
m9_238 -> m9_240  [key=2, style=dotted];
m9_235 -> m9_236  [key=0, style=solid];
m9_235 -> m9_9  [key=2, style=dotted];
m9_237 -> m9_238  [key=0, style=solid];
m9_236 -> m9_233  [key=0, style=bold, color=blue];
m9_239 -> m9_237  [key=0, style=bold, color=blue];
m9_244 -> m9_245  [key=0, style=solid];
m9_244 -> m9_249  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_245 -> m9_246  [key=0, style=solid];
m9_245 -> m9_8  [key=2, style=dotted];
m9_245 -> m9_248  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_249 -> m9_250  [key=0, style=solid];
m9_249 -> m9_240  [key=2, style=dotted];
m9_246 -> m9_247  [key=0, style=solid];
m9_246 -> m9_9  [key=2, style=dotted];
m9_248 -> m9_249  [key=0, style=solid];
m9_247 -> m9_244  [key=0, style=bold, color=blue];
m9_250 -> m9_248  [key=0, style=bold, color=blue];
m9_254 -> m9_255  [key=0, style=solid];
m9_255 -> m9_256  [key=0, style=solid];
m9_255 -> m9_240  [key=2, style=dotted];
m9_256 -> m9_257  [key=0, style=solid];
m9_256 -> m9_144  [key=2, style=dotted];
m9_257 -> m9_254  [key=0, style=bold, color=blue];
m9_263 -> m9_264  [key=0, style=solid];
m9_263 -> m9_8  [key=2, style=dotted];
m9_263 -> m9_111  [key=2, style=dotted];
m9_262 -> m9_263  [key=0, style=solid];
m9_262 -> m9_264  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_264 -> m9_265  [key=0, style=solid];
m9_264 -> m9_112  [key=2, style=dotted];
m9_264 -> m9_267  [key=2, style=dotted];
m9_265 -> m9_266  [key=0, style=solid];
m9_265 -> m9_9  [key=2, style=dotted];
m9_266 -> m9_262  [key=0, style=bold, color=blue];
m9_271 -> m9_272  [key=0, style=solid];
m9_271 -> m9_276  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_272 -> m9_273  [key=0, style=solid];
m9_272 -> m9_8  [key=2, style=dotted];
m9_272 -> m9_275  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_276 -> m9_277  [key=0, style=solid];
m9_276 -> m9_278  [key=2, style=dotted];
m9_273 -> m9_274  [key=0, style=solid];
m9_273 -> m9_9  [key=2, style=dotted];
m9_275 -> m9_276  [key=0, style=solid];
m9_274 -> m9_271  [key=0, style=bold, color=blue];
m9_277 -> m9_275  [key=0, style=bold, color=blue];
m9_282 -> m9_283  [key=0, style=solid];
m9_282 -> m9_286  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_283 -> m9_284  [key=0, style=solid];
m9_283 -> m9_8  [key=2, style=dotted];
m9_283 -> m9_285  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_286 -> m9_287  [key=0, style=solid];
m9_286 -> m9_278  [key=2, style=dotted];
m9_284 -> m9_282  [key=0, style=bold, color=blue];
m9_285 -> m9_286  [key=0, style=solid];
m9_287 -> m9_285  [key=0, style=bold, color=blue];
m9_291 -> m9_292  [key=0, style=solid];
m9_292 -> m9_293  [key=0, style=solid];
m9_292 -> m9_278  [key=2, style=dotted];
m9_293 -> m9_294  [key=0, style=solid];
m9_293 -> m9_144  [key=2, style=dotted];
m9_294 -> m9_291  [key=0, style=bold, color=blue];
m9_300 -> m9_301  [key=0, style=solid];
m9_300 -> m9_304  [key=2, style=dotted];
m9_299 -> m9_300  [key=0, style=solid];
m9_299 -> m9_301  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_301 -> m9_302  [key=0, style=solid];
m9_301 -> m9_278  [key=2, style=dotted];
m9_302 -> m9_303  [key=0, style=solid];
m9_302 -> m9_9  [key=2, style=dotted];
m9_303 -> m9_299  [key=0, style=bold, color=blue];
m9_308 -> m9_309  [key=0, style=solid];
m9_308 -> m9_313  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_309 -> m9_310  [key=0, style=solid];
m9_309 -> m9_8  [key=2, style=dotted];
m9_309 -> m9_312  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_313 -> m9_314  [key=0, style=solid];
m9_313 -> m9_315  [key=2, style=dotted];
m9_313 -> m9_316  [key=2, style=dotted];
m9_310 -> m9_311  [key=0, style=solid];
m9_310 -> m9_9  [key=2, style=dotted];
m9_312 -> m9_313  [key=0, style=solid];
m9_311 -> m9_308  [key=0, style=bold, color=blue];
m9_314 -> m9_312  [key=0, style=bold, color=blue];
m9_320 -> m9_321  [key=0, style=solid];
m9_320 -> m9_325  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_321 -> m9_322  [key=0, style=solid];
m9_321 -> m9_8  [key=2, style=dotted];
m9_321 -> m9_324  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_325 -> m9_326  [key=0, style=solid];
m9_325 -> m9_316  [key=2, style=dotted];
m9_322 -> m9_323  [key=0, style=solid];
m9_322 -> m9_9  [key=2, style=dotted];
m9_324 -> m9_325  [key=0, style=solid];
m9_323 -> m9_320  [key=0, style=bold, color=blue];
m9_326 -> m9_324  [key=0, style=bold, color=blue];
m9_330 -> m9_331  [key=0, style=solid];
m9_330 -> m9_332  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_330 -> m9_333  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_330 -> m9_338  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_330 -> m9_339  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_331 -> m9_332  [key=0, style=solid];
m9_331 -> m9_315  [key=2, style=dotted];
m9_332 -> m9_333  [key=0, style=solid];
m9_332 -> m9_316  [key=2, style=dotted];
m9_333 -> m9_334  [key=0, style=solid];
m9_333 -> m9_110  [key=2, style=dotted];
m9_333 -> m9_111  [key=2, style=dotted];
m9_333 -> m9_335  [key=1, style=dashed, color=darkseagreen4, label=server];
m9_333 -> m9_336  [key=1, style=dashed, color=darkseagreen4, label=server];
m9_338 -> m9_339  [key=0, style=solid];
m9_338 -> m9_316  [key=2, style=dotted];
m9_339 -> m9_340  [key=0, style=solid];
m9_339 -> m9_110  [key=2, style=dotted];
m9_339 -> m9_111  [key=2, style=dotted];
m9_339 -> m9_341  [key=1, style=dashed, color=darkseagreen4, label=sameServer];
m9_334 -> m9_335  [key=0, style=solid];
m9_334 -> m9_9  [key=2, style=dotted];
m9_335 -> m9_336  [key=0, style=solid];
m9_335 -> m9_343  [key=2, style=dotted];
m9_335 -> m9_116  [key=2, style=dotted];
m9_336 -> m9_337  [key=0, style=solid];
m9_336 -> m9_49  [key=2, style=dotted];
m9_337 -> m9_338  [key=0, style=solid];
m9_337 -> m9_315  [key=2, style=dotted];
m9_340 -> m9_341  [key=0, style=solid];
m9_340 -> m9_9  [key=2, style=dotted];
m9_341 -> m9_342  [key=0, style=solid];
m9_341 -> m9_344  [key=2, style=dotted];
m9_342 -> m9_330  [key=0, style=bold, color=blue];
m9_348 -> m9_349  [key=0, style=solid];
m9_348 -> m9_352  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_349 -> m9_350  [key=0, style=solid];
m9_349 -> m9_8  [key=2, style=dotted];
m9_349 -> m9_351  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_352 -> m9_353  [key=0, style=solid];
m9_352 -> m9_354  [key=2, style=dotted];
m9_350 -> m9_348  [key=0, style=bold, color=blue];
m9_351 -> m9_352  [key=0, style=solid];
m9_353 -> m9_351  [key=0, style=bold, color=blue];
m9_360 -> m9_361  [key=0, style=solid];
m9_360 -> m9_304  [key=2, style=dotted];
m9_359 -> m9_360  [key=0, style=solid];
m9_359 -> m9_361  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_359 -> m9_362  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_361 -> m9_362  [key=0, style=solid];
m9_361 -> m9_354  [key=2, style=dotted];
m9_362 -> m9_363  [key=0, style=solid];
m9_362 -> m9_110  [key=2, style=dotted];
m9_362 -> m9_111  [key=2, style=dotted];
m9_363 -> m9_364  [key=0, style=solid];
m9_363 -> m9_365  [key=2, style=dotted];
m9_364 -> m9_359  [key=0, style=bold, color=blue];
m9_369 -> m9_370  [key=0, style=solid];
m9_369 -> m9_373  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_370 -> m9_371  [key=0, style=solid];
m9_370 -> m9_8  [key=2, style=dotted];
m9_370 -> m9_372  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_373 -> m9_374  [key=0, style=solid];
m9_373 -> m9_375  [key=2, style=dotted];
m9_371 -> m9_369  [key=0, style=bold, color=blue];
m9_372 -> m9_373  [key=0, style=solid];
m9_374 -> m9_372  [key=0, style=bold, color=blue];
m9_381 -> m9_382  [key=0, style=solid];
m9_381 -> m9_304  [key=2, style=dotted];
m9_380 -> m9_381  [key=0, style=solid];
m9_380 -> m9_382  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_380 -> m9_383  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_382 -> m9_383  [key=0, style=solid];
m9_382 -> m9_375  [key=2, style=dotted];
m9_383 -> m9_384  [key=0, style=solid];
m9_383 -> m9_110  [key=2, style=dotted];
m9_383 -> m9_117  [key=2, style=dotted];
m9_383 -> m9_387  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_383 -> m9_390  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_383 -> m9_385  [key=1, style=dashed, color=darkseagreen4, label=servers];
m9_384 -> m9_385  [key=0, style=solid];
m9_384 -> m9_365  [key=2, style=dotted];
m9_387 -> m9_388  [key=0, style=solid];
m9_390 -> m9_391  [key=0, style=solid];
m9_385 -> m9_386  [key=0, style=solid];
m9_385 -> m9_9  [key=2, style=dotted];
m9_386 -> m9_380  [key=0, style=bold, color=blue];
m9_388 -> m9_389  [key=0, style=solid];
m9_389 -> m9_387  [key=0, style=bold, color=blue];
m9_391 -> m9_392  [key=0, style=solid];
m9_392 -> m9_390  [key=0, style=bold, color=blue];
m9_396 -> m9_397  [key=0, style=solid];
m9_396 -> m9_400  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_397 -> m9_398  [key=0, style=solid];
m9_397 -> m9_8  [key=2, style=dotted];
m9_397 -> m9_399  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_400 -> m9_401  [key=0, style=solid];
m9_400 -> m9_402  [key=2, style=dotted];
m9_400 -> m9_403  [key=2, style=dotted];
m9_398 -> m9_396  [key=0, style=bold, color=blue];
m9_399 -> m9_400  [key=0, style=solid];
m9_401 -> m9_399  [key=0, style=bold, color=blue];
m9_409 -> m9_410  [key=0, style=solid];
m9_409 -> m9_115  [key=2, style=dotted];
m9_409 -> m9_414  [key=2, style=dotted];
m9_409 -> m9_304  [key=2, style=dotted];
m9_410 -> m9_411  [key=0, style=solid];
m9_410 -> m9_415  [key=2, style=dotted];
m9_410 -> m9_403  [key=2, style=dotted];
m9_411 -> m9_412  [key=0, style=solid];
m9_411 -> m9_110  [key=2, style=dotted];
m9_411 -> m9_111  [key=2, style=dotted];
m9_412 -> m9_413  [key=0, style=solid];
m9_412 -> m9_9  [key=2, style=dotted];
m9_413 -> m9_408  [key=0, style=bold, color=blue];
m9_416 -> m9_417  [key=0, style=solid];
m9_416 -> m9_419  [key=1, style=dashed, color=darkseagreen4, label="System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>"];
m9_417 -> m9_418  [key=0, style=solid, color=red];
m9_417 -> m9_14  [key=2, style=dotted];
m9_417 -> m9_419  [key=1, style=dashed, color=darkseagreen4, label=sqlConnection];
m9_419 -> m9_420  [key=0, style=solid];
m9_419 -> m9_421  [key=2, style=dotted];
m9_418 -> m9_419  [key=0, style=solid, color=red];
m9_418 -> m9_22  [key=2, style=dotted, color=red];
m9_420 -> m9_416  [key=0, style=bold, color=blue];
m9_295 -> m9_296  [key=0, style=solid];
m9_296 -> m9_297  [key=0, style=solid];
m9_296 -> m9_300  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_296 -> m9_296  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_297 -> m9_298  [key=0, style=solid];
m9_297 -> m9_88  [key=2, style=dotted];
m9_297 -> m9_299  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_298 -> m9_295  [key=0, style=bold, color=blue];
m9_268 -> m9_269  [key=0, style=solid];
m9_269 -> m9_270  [key=0, style=solid];
m9_269 -> m9_43  [key=2, style=dotted];
m9_269 -> m9_271  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_270 -> m9_268  [key=0, style=bold, color=blue];
m9_376 -> m9_377  [key=0, style=solid];
m9_377 -> m9_378  [key=0, style=solid];
m9_377 -> m9_381  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_377 -> m9_377  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_378 -> m9_379  [key=0, style=solid];
m9_378 -> m9_88  [key=2, style=dotted];
m9_378 -> m9_380  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_379 -> m9_376  [key=0, style=bold, color=blue];
m9_317 -> m9_318  [key=0, style=solid];
m9_318 -> m9_319  [key=0, style=solid];
m9_318 -> m9_43  [key=2, style=dotted];
m9_318 -> m9_320  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_319 -> m9_317  [key=0, style=bold, color=blue];
m9_393 -> m9_394  [key=0, style=solid];
m9_394 -> m9_395  [key=0, style=solid];
m9_394 -> m9_43  [key=2, style=dotted];
m9_394 -> m9_396  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_395 -> m9_393  [key=0, style=bold, color=blue];
m9_305 -> m9_306  [key=0, style=solid];
m9_306 -> m9_307  [key=0, style=solid];
m9_306 -> m9_43  [key=2, style=dotted];
m9_306 -> m9_308  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_307 -> m9_305  [key=0, style=bold, color=blue];
m9_84 -> m9_426  [key=0, style=solid];
m9_84 -> m9_71  [key=3, color=darkorchid, style=bold, label="Parameter variable string arg"];
m9_84 -> m9_86  [key=3, color=red, style=bold, label="Parameter variable string arg"];
m9_84 -> m9_147  [key=3, color=darkorchid, style=bold, label="Parameter variable string arg"];
m9_426 -> m9_84  [key=0, style=bold, color=blue];
m9_186 -> m9_187  [key=0, style=solid];
m9_187 -> m9_188  [key=0, style=solid];
m9_187 -> m9_43  [key=2, style=dotted];
m9_187 -> m9_189  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_188 -> m9_186  [key=0, style=bold, color=blue];
m9_165 -> m9_166  [key=0, style=solid];
m9_166 -> m9_167  [key=0, style=solid];
m9_166 -> m9_170  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_166 -> m9_146  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_167 -> m9_168  [key=0, style=solid];
m9_167 -> m9_88  [key=2, style=dotted];
m9_167 -> m9_169  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_168 -> m9_165  [key=0, style=bold, color=blue];
m9_404 -> m9_405  [key=0, style=solid];
m9_405 -> m9_406  [key=0, style=solid];
m9_405 -> m9_409  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_405 -> m9_405  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_406 -> m9_407  [key=0, style=solid];
m9_406 -> m9_88  [key=2, style=dotted];
m9_406 -> m9_408  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_407 -> m9_404  [key=0, style=bold, color=blue];
m9_50 -> m9_51  [key=0, style=solid];
m9_51 -> m9_52  [key=0, style=solid];
m9_51 -> m9_43  [key=2, style=dotted];
m9_51 -> m9_53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_52 -> m9_50  [key=0, style=bold, color=blue];
m9_137 -> m9_138  [key=0, style=solid];
m9_138 -> m9_139  [key=0, style=solid];
m9_138 -> m9_43  [key=2, style=dotted];
m9_138 -> m9_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_139 -> m9_137  [key=0, style=bold, color=blue];
m9_241 -> m9_242  [key=0, style=solid];
m9_242 -> m9_243  [key=0, style=solid];
m9_242 -> m9_43  [key=2, style=dotted];
m9_242 -> m9_244  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_243 -> m9_241  [key=0, style=bold, color=blue];
m9_175 -> m9_176  [key=0, style=solid];
m9_176 -> m9_177  [key=0, style=solid];
m9_176 -> m9_43  [key=2, style=dotted];
m9_176 -> m9_178  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_177 -> m9_175  [key=0, style=bold, color=blue];
m9_70 -> m9_71  [key=0, style=solid];
m9_71 -> m9_72  [key=0, style=solid];
m9_71 -> m9_43  [key=2, style=dotted];
m9_71 -> m9_73  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_72 -> m9_70  [key=0, style=bold, color=blue];
m9_15 -> m9_16  [key=0, style=solid, color=red];
m9_16 -> m9_17  [key=0, style=solid, color=red];
m9_16 -> m9_8  [key=2, style=dotted, color=red];
m9_16 -> m9_19  [key=1, style=dashed, color=red, label="lambda expression"];
m9_17 -> m9_18  [key=0, style=solid];
m9_17 -> m9_9  [key=2, style=dotted];
m9_18 -> m9_15  [key=0, style=bold, color=blue];
m9_427 -> m9_1  [key=1, style=dashed, color=red, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_16  [key=1, style=dashed, color=red, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_20  [key=1, style=dashed, color=red, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_24  [key=1, style=dashed, color=red, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_31  [key=1, style=dashed, color=red, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_51  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_59  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_71  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_86  [key=1, style=dashed, color=red, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_128  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_138  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_147  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_167  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_176  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_187  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_198  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_209  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_221  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_231  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_242  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_252  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_260  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_269  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_280  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_289  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_297  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_306  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_318  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_328  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_346  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_357  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_367  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_378  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_394  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_406  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_418  [key=1, style=dashed, color=red, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_427 -> m9_422  [key=1, style=dashed, color=red, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_428 -> m9_37  [key=1, style=dashed, color=red, label=token];
m9_429 -> m9_37  [key=1, style=dashed, color=red, label=queues];
m9_430 -> m9_66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_431 -> m9_78  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_432 -> m9_134  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_433 -> m9_151  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_434 -> m9_170  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_435 -> m9_183  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_436 -> m9_194  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_437 -> m9_201  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_438 -> m9_212  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_439 -> m9_224  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_440 -> m9_238  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_441 -> m9_249  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_442 -> m9_263  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_443 -> m9_276  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_444 -> m9_286  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_445 -> m9_300  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_446 -> m9_313  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_447 -> m9_325  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_448 -> m9_352  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_449 -> m9_360  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_450 -> m9_373  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_451 -> m9_381  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_452 -> m9_400  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m9_453 -> m9_409  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m10_5 -> m10_6  [key=0, style=solid, color=red];
m10_6 -> m10_7  [key=0, style=solid, color=red];
m10_6 -> m10_8  [key=0, style=solid, color=red];
m10_7 -> m10_6  [key=0, style=solid, color=red];
m10_7 -> m10_9  [key=2, style=dotted, color=red];
m10_7 -> m10_10  [key=2, style=dotted, color=red];
m10_8 -> m10_5  [key=0, style=bold, color=blue];
m10_0 -> m10_1  [key=0, style=solid, color=red];
m10_0 -> m10_2  [key=1, style=dashed, color=red, label=string];
m10_0 -> m10_3  [key=1, style=dashed, color=red, label="params string[]"];
m10_1 -> m10_2  [key=0, style=solid, color=red];
m10_1 -> m10_3  [key=3, color=red, style=bold, label="Field variable IDbConnection _connection"];
m10_2 -> m10_3  [key=0, style=solid, color=red];
m10_3 -> m10_4  [key=0, style=solid, color=red];
m10_4 -> m10_0  [key=0, style=bold, color=blue];
m10_11 -> m10_1  [key=1, style=dashed, color=red, label="HangFire.Web.CombinedResourceHandler"];
m10_11 -> m10_2  [key=1, style=dashed, color=red, label="HangFire.Web.CombinedResourceHandler"];
m10_11 -> m10_3  [key=1, style=dashed, color=red, label="HangFire.Web.CombinedResourceHandler"];
m10_11 -> m10_6  [key=1, style=dashed, color=red, label="HangFire.Web.CombinedResourceHandler"];
m10_11 -> m10_7  [key=1, style=dashed, color=red, label="HangFire.Web.CombinedResourceHandler"];
m11_17 -> m11_15  [key=0, style=bold, color=blue];
m11_101 -> m11_102  [key=0, style=solid, color=green];
m11_102 -> m11_102  [key=3, color=green, style=bold, label="Local variable string arrangeSql"];
m11_102 -> m11_103  [key=0, style=solid, color=green];
m11_102 -> m11_106  [key=1, style=dashed, color=green, label=arrangeSql];
m11_103 -> m11_104  [key=0, style=solid, color=green];
m11_103 -> m11_23  [key=2, style=dotted, color=green];
m11_103 -> m11_105  [key=1, style=dashed, color=green, label="lambda expression"];
m11_104 -> m11_101  [key=0, style=bold, color=blue];
m11_25 -> m11_29  [key=2, style=dotted];
m11_25 -> m11_26  [key=0, style=solid];
m11_25 -> m11_31  [key=1, style=dashed, color=darkseagreen4, label=queue];
m11_5 -> m11_16  [key=0, style=solid, color=red];
m11_5 -> m11_17  [key=2, style=dotted, color=red];
m11_84 -> m11_85  [key=0, style=solid];
m11_86 -> m11_87  [key=0, style=solid, color=green];
m11_86 -> m11_23  [key=2, style=dotted, color=green];
m11_86 -> m11_88  [key=1, style=dashed, color=green, label="lambda expression"];
m11_85 -> m11_86  [key=0, style=solid, color=green];
m11_85 -> m11_85  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m11_85 -> m11_89  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m11_87 -> m11_84  [key=0, style=bold, color=blue];
m11_180 -> m11_182  [key=1, style=dashed, color=darkseagreen4, label="System.Action<SqlConnection>"];
m11_180 -> m11_181  [key=0, style=solid];
m11_182 -> m11_167  [key=2, style=dotted];
m11_182 -> m11_183  [key=0, style=solid];
m11_181 -> m11_182  [key=0, style=solid];
m11_181 -> m11_184  [key=2, style=dotted];
m11_183 -> m11_180  [key=0, style=bold, color=blue];
m11_24 -> m11_25  [key=0, style=solid];
m11_21 -> m11_22  [key=0, style=solid, color=green];
m11_21 -> m11_23  [key=2, style=dotted, color=green];
m11_21 -> m11_24  [key=1, style=dashed, color=green, label="lambda expression"];
m11_4 -> m11_5  [key=0, style=solid, color=red];
m11_4 -> m11_6  [key=0, style=solid, color=red];
m11_10 -> m11_11  [key=0, style=solid, color=red];
m11_10 -> m11_18  [key=2, style=dotted, color=red];
m11_10 -> m11_19  [key=2, style=dotted, color=red];
m11_20 -> m11_21  [key=0, style=solid, color=green];
m11_22 -> m11_20  [key=0, style=bold, color=blue];
m11_125 -> m11_126  [key=0, style=solid];
m11_127 -> m11_128  [key=0, style=solid, color=green];
m11_127 -> m11_23  [key=2, style=dotted, color=green];
m11_127 -> m11_129  [key=1, style=dashed, color=green, label="lambda expression"];
m11_126 -> m11_127  [key=0, style=solid, color=green];
m11_126 -> m11_85  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m11_126 -> m11_131  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m11_128 -> m11_125  [key=0, style=bold, color=blue];
m11_113 -> m11_114  [key=0, style=solid, color=green];
m11_114 -> m11_115  [key=0, style=solid, color=green];
m11_114 -> m11_118  [key=1, style=dashed, color=green, label=arrangeSql];
m11_114 -> m11_85  [key=3, color=green, style=bold, label="Local variable string arrangeSql"];
m11_115 -> m11_116  [key=0, style=solid, color=green];
m11_115 -> m11_23  [key=2, style=dotted, color=green];
m11_115 -> m11_117  [key=1, style=dashed, color=green, label="lambda expression"];
m11_116 -> m11_113  [key=0, style=bold, color=blue];
m11_11 -> m11_12  [key=0, style=solid, color=green];
m11_11 -> m11_20  [key=2, style=dotted];
m11_11 -> m11_9  [key=3, color=red, style=bold, label="Property variable System.DateTime EnqueueAt"];
m11_12 -> m11_13  [key=0, style=solid, color=red];
m11_12 -> m11_4  [key=2, style=dotted, color=green];
m11_12 -> m11_15  [key=1, style=dashed, color=green, label="lambda expression"];
m11_12 -> m11_21  [key=2, style=dotted];
m11_12 -> m11_22  [key=2, style=dotted];
m11_12 -> m11_23  [key=2, style=dotted];
m11_12 -> m11_14  [key=1, style=dashed, color=red, label=recurringAttribute];
m11_12 -> m11_8  [key=3, color=red, style=bold, label="Property variable string Name"];
m11_13 -> m11_14  [key=0, style=solid, color=red];
m11_13 -> m11_5  [key=2, style=dotted];
m11_13 -> m11_15  [key=0, style=solid, color=red];
m11_14 -> m11_11  [key=0, style=bold, color=blue];
m11_14 -> m11_16  [key=0, style=solid, color=red];
m11_14 -> m11_24  [key=2, style=dotted, color=red];
m11_14 -> m11_25  [key=2, style=dotted, color=red];
m11_151 -> m11_152  [key=0, style=solid];
m11_152 -> m11_23  [key=2, style=dotted];
m11_152 -> m11_153  [key=0, style=solid];
m11_152 -> m11_154  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_153 -> m11_151  [key=0, style=bold, color=blue];
m11_0 -> m11_1  [key=0, style=solid];
m11_1 -> m11_2  [key=0, style=solid];
m11_1 -> m11_4  [key=2, style=dotted];
m11_1 -> m11_6  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_2 -> m11_0  [key=0, style=bold, color=blue];
m11_2 -> m11_5  [key=2, style=dotted];
m11_2 -> m11_3  [key=0, style=solid];
m11_137 -> m11_138  [key=0, style=solid];
m11_139 -> m11_23  [key=2, style=dotted];
m11_139 -> m11_140  [key=0, style=solid];
m11_139 -> m11_141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_138 -> m11_85  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m11_138 -> m11_139  [key=0, style=solid];
m11_138 -> m11_142  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m11_140 -> m11_137  [key=0, style=bold, color=blue];
m11_9 -> m11_16  [key=0, style=solid, color=red];
m11_177 -> m11_178  [key=0, style=solid];
m11_178 -> m11_18  [key=2, style=dotted];
m11_178 -> m11_19  [key=2, style=dotted];
m11_178 -> m11_179  [key=0, style=solid];
m11_179 -> m11_177  [key=0, style=bold, color=blue];
m11_154 -> m11_156  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m11_154 -> m11_159  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m11_154 -> m11_155  [key=0, style=solid];
m11_154 -> m11_158  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m11_15 -> m11_16  [key=0, style=solid];
m11_38 -> m11_39  [key=0, style=solid, color=green];
m11_39 -> m11_40  [key=0, style=solid, color=green];
m11_39 -> m11_29  [key=2, style=dotted, color=green];
m11_39 -> m11_44  [key=1, style=dashed, color=green, label=queue];
m11_40 -> m11_4  [key=2, style=dotted];
m11_40 -> m11_41  [key=0, style=solid];
m11_40 -> m11_43  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_44 -> m11_45  [key=0, style=solid];
m11_44 -> m11_33  [key=2, style=dotted];
m11_44 -> m11_34  [key=2, style=dotted];
m11_49 -> m11_50  [key=0, style=solid];
m11_49 -> m11_52  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m11_53 -> m11_54  [key=0, style=solid, color=green];
m11_53 -> m11_4  [key=2, style=dotted, color=green];
m11_53 -> m11_57  [key=1, style=dashed, color=green, label="lambda expression"];
m11_50 -> m11_53  [key=1, style=dashed, color=green, label=cts];
m11_50 -> m11_58  [key=1, style=dashed, color=green, label=cts];
m11_50 -> m11_51  [key=0, style=solid];
m11_50 -> m11_55  [key=2, style=dotted];
m11_52 -> m11_53  [key=0, style=solid, color=green];
m11_52 -> m11_58  [key=1, style=dashed, color=green, label=queue];
m11_52 -> m11_29  [key=2, style=dotted];
m11_54 -> m11_49  [key=0, style=bold, color=blue];
m11_57 -> m11_58  [key=0, style=solid, color=green];
m11_58 -> m11_59  [key=0, style=solid, color=green];
m11_58 -> m11_34  [key=2, style=dotted, color=green];
m11_59 -> m11_57  [key=0, style=bold, color=blue];
m11_63 -> m11_64  [key=0, style=solid];
m11_63 -> m11_65  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m11_77 -> m11_78  [key=0, style=solid, color=green];
m11_77 -> m11_83  [key=2, style=dotted, color=green];
m11_76 -> m11_77  [key=0, style=solid, color=green];
m11_76 -> m11_78  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m11_78 -> m11_79  [key=0, style=solid, color=green];
m11_78 -> m11_29  [key=2, style=dotted];
m11_79 -> m11_80  [key=0, style=solid, color=green];
m11_79 -> m11_33  [key=2, style=dotted, color=green];
m11_79 -> m11_34  [key=2, style=dotted, color=green];
m11_79 -> m11_81  [key=1, style=dashed, color=green, label=payload];
m11_80 -> m11_81  [key=0, style=solid];
m11_80 -> m11_5  [key=2, style=dotted];
m11_81 -> m11_82  [key=0, style=solid];
m11_81 -> m11_5  [key=2, style=dotted];
m11_88 -> m11_89  [key=0, style=solid];
m11_88 -> m11_90  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m11_88 -> m11_93  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m11_95 -> m11_96  [key=0, style=solid, color=green];
m11_95 -> m11_99  [key=2, style=dotted, color=green];
m11_95 -> m11_100  [key=2, style=dotted, color=green];
m11_93 -> m11_95  [key=1, style=dashed, color=green, label=fetchedAt];
m11_93 -> m11_4  [key=2, style=dotted];
m11_93 -> m11_94  [key=0, style=solid];
m11_93 -> m11_98  [key=2, style=dotted];
m11_94 -> m11_95  [key=0, style=solid, color=green];
m11_94 -> m11_97  [key=2, style=dotted];
m11_96 -> m11_88  [key=0, style=bold, color=blue];
m11_106 -> m11_107  [key=0, style=solid, color=green];
m11_106 -> m11_111  [key=2, style=dotted, color=green];
m11_106 -> m11_83  [key=2, style=dotted, color=green];
m11_105 -> m11_106  [key=0, style=solid, color=green];
m11_105 -> m11_107  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m11_107 -> m11_108  [key=0, style=solid, color=green];
m11_107 -> m11_29  [key=2, style=dotted];
m11_108 -> m11_109  [key=0, style=solid, color=green];
m11_108 -> m11_33  [key=2, style=dotted, color=green];
m11_108 -> m11_34  [key=2, style=dotted, color=green];
m11_109 -> m11_110  [key=0, style=solid];
m11_109 -> m11_112  [key=2, style=dotted];
m11_118 -> m11_119  [key=0, style=solid, color=green];
m11_118 -> m11_83  [key=2, style=dotted, color=green];
m11_117 -> m11_118  [key=0, style=solid, color=green];
m11_117 -> m11_121  [key=1, style=dashed, color=green, label=SqlConnection];
m11_117 -> m11_119  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m11_119 -> m11_29  [key=2, style=dotted];
m11_119 -> m11_120  [key=0, style=solid];
m11_121 -> m11_122  [key=0, style=solid, color=green];
m11_121 -> m11_4  [key=2, style=dotted, color=green];
m11_121 -> m11_98  [key=2, style=dotted, color=green];
m11_120 -> m11_121  [key=0, style=solid, color=green];
m11_120 -> m11_34  [key=2, style=dotted];
m11_120 -> m11_33  [key=2, style=dotted];
m11_122 -> m11_123  [key=0, style=solid];
m11_122 -> m11_124  [key=2, style=dotted];
m11_129 -> m11_130  [key=0, style=solid, color=green];
m11_129 -> m11_131  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m11_130 -> m11_131  [key=0, style=solid, color=green];
m11_130 -> m11_29  [key=2, style=dotted, color=green];
m11_130 -> m11_132  [key=1, style=dashed, color=green, label=queue];
m11_130 -> m11_135  [key=1, style=dashed, color=green, label=queue];
m11_131 -> m11_132  [key=0, style=solid, color=green];
m11_131 -> m11_83  [key=2, style=dotted];
m11_132 -> m11_133  [key=0, style=solid, color=green];
m11_132 -> m11_4  [key=2, style=dotted, color=green];
m11_132 -> m11_134  [key=1, style=dashed, color=green, label="lambda expression"];
m11_135 -> m11_136  [key=0, style=solid, color=green];
m11_135 -> m11_33  [key=2, style=dotted, color=green];
m11_135 -> m11_34  [key=2, style=dotted, color=green];
m11_133 -> m11_129  [key=0, style=bold, color=blue];
m11_134 -> m11_135  [key=0, style=solid, color=green];
m11_136 -> m11_134  [key=0, style=bold, color=blue];
m11_26 -> m11_4  [key=2, style=dotted];
m11_26 -> m11_27  [key=0, style=solid];
m11_26 -> m11_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_26 -> m11_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.RecurringAttribute"];
m11_66 -> m11_4  [key=2, style=dotted];
m11_66 -> m11_67  [key=0, style=solid];
m11_66 -> m11_69  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_16 -> m11_17  [key=0, style=solid];
m11_16 -> m11_18  [key=2, style=dotted];
m11_16 -> m11_19  [key=2, style=dotted];
m11_16 -> m11_3  [key=0, style=bold, color=blue];
m11_65 -> m11_29  [key=2, style=dotted];
m11_65 -> m11_66  [key=0, style=solid];
m11_65 -> m11_70  [key=1, style=dashed, color=darkseagreen4, label=queue];
m11_90 -> m11_29  [key=2, style=dotted];
m11_90 -> m11_91  [key=0, style=solid];
m11_143 -> m11_29  [key=2, style=dotted];
m11_143 -> m11_144  [key=0, style=solid];
m11_143 -> m11_147  [key=1, style=dashed, color=darkseagreen4, label=queue];
m11_156 -> m11_29  [key=2, style=dotted];
m11_156 -> m11_157  [key=0, style=solid];
m11_28 -> m11_24  [key=0, style=bold, color=blue];
m11_42 -> m11_38  [key=0, style=bold, color=blue];
m11_41 -> m11_5  [key=2, style=dotted];
m11_41 -> m11_42  [key=0, style=solid];
m11_43 -> m11_44  [key=0, style=solid];
m11_45 -> m11_43  [key=0, style=bold, color=blue];
m11_51 -> m11_52  [key=0, style=solid];
m11_51 -> m11_56  [key=2, style=dotted];
m11_31 -> m11_34  [key=2, style=dotted];
m11_31 -> m11_33  [key=2, style=dotted];
m11_31 -> m11_32  [key=0, style=solid];
m11_70 -> m11_34  [key=2, style=dotted];
m11_70 -> m11_71  [key=0, style=solid];
m11_91 -> m11_34  [key=2, style=dotted];
m11_91 -> m11_33  [key=2, style=dotted];
m11_91 -> m11_93  [key=1, style=dashed, color=darkseagreen4, label=payload];
m11_91 -> m11_92  [key=0, style=solid];
m11_144 -> m11_34  [key=2, style=dotted];
m11_144 -> m11_33  [key=2, style=dotted];
m11_144 -> m11_145  [key=0, style=solid];
m11_144 -> m11_146  [key=1, style=dashed, color=darkseagreen4, label=critical];
m11_147 -> m11_34  [key=2, style=dotted];
m11_147 -> m11_33  [key=2, style=dotted];
m11_147 -> m11_148  [key=0, style=solid];
m11_147 -> m11_149  [key=1, style=dashed, color=darkseagreen4, label="@default"];
m11_67 -> m11_63  [key=0, style=bold, color=blue];
m11_64 -> m11_66  [key=1, style=dashed, color=darkseagreen4, label=cts];
m11_64 -> m11_65  [key=0, style=solid];
m11_64 -> m11_70  [key=1, style=dashed, color=darkseagreen4, label=cts];
m11_64 -> m11_68  [key=2, style=dotted];
m11_82 -> m11_76  [key=0, style=bold, color=blue];
m11_89 -> m11_83  [key=2, style=dotted];
m11_89 -> m11_90  [key=0, style=solid];
m11_142 -> m11_83  [key=2, style=dotted];
m11_142 -> m11_143  [key=0, style=solid];
m11_92 -> m11_93  [key=0, style=solid];
m11_92 -> m11_97  [key=2, style=dotted];
m11_110 -> m11_105  [key=0, style=bold, color=blue];
m11_123 -> m11_117  [key=0, style=bold, color=blue];
m11_159 -> m11_98  [key=2, style=dotted];
m11_159 -> m11_160  [key=0, style=solid];
m11_159 -> m11_168  [key=2, style=dotted];
m11_159 -> m11_161  [key=1, style=dashed, color=darkseagreen4, label=record];
m11_159 -> m11_162  [key=1, style=dashed, color=darkseagreen4, label=record];
m11_27 -> m11_5  [key=2, style=dotted];
m11_27 -> m11_28  [key=0, style=solid];
m11_146 -> m11_5  [key=2, style=dotted];
m11_146 -> m11_147  [key=0, style=solid];
m11_149 -> m11_5  [key=2, style=dotted];
m11_149 -> m11_150  [key=0, style=solid];
m11_160 -> m11_5  [key=2, style=dotted];
m11_160 -> m11_161  [key=0, style=solid];
m11_160 -> m11_169  [key=2, style=dotted];
m11_161 -> m11_5  [key=2, style=dotted];
m11_161 -> m11_162  [key=0, style=solid];
m11_6 -> m11_7  [key=0, style=solid, color=red];
m11_6 -> m11_8  [key=0, style=solid, color=red];
m11_30 -> m11_31  [key=0, style=solid];
m11_69 -> m11_70  [key=0, style=solid];
m11_141 -> m11_143  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m11_141 -> m11_142  [key=0, style=solid];
m11_155 -> m11_156  [key=0, style=solid];
m11_155 -> m11_164  [key=2, style=dotted];
m11_155 -> m11_157  [key=1, style=dashed, color=darkseagreen4, label=actions];
m11_155 -> m11_158  [key=1, style=dashed, color=darkseagreen4, label=actions];
m11_157 -> m11_158  [key=0, style=solid];
m11_157 -> m11_165  [key=2, style=dotted];
m11_32 -> m11_30  [key=0, style=bold, color=blue];
m11_71 -> m11_69  [key=0, style=bold, color=blue];
m11_145 -> m11_97  [key=2, style=dotted];
m11_145 -> m11_146  [key=0, style=solid];
m11_148 -> m11_97  [key=2, style=dotted];
m11_148 -> m11_149  [key=0, style=solid];
m11_162 -> m11_124  [key=2, style=dotted];
m11_162 -> m11_163  [key=0, style=solid];
m11_158 -> m11_159  [key=0, style=solid];
m11_158 -> m11_166  [key=2, style=dotted];
m11_158 -> m11_167  [key=2, style=dotted];
m11_150 -> m11_141  [key=0, style=bold, color=blue];
m11_8 -> m11_6  [key=0, style=bold, color=blue];
m11_8 -> m11_9  [key=0, style=solid, color=red];
m11_8 -> m11_10  [key=0, style=solid, color=red];
m11_8 -> m11_8  [key=3, color=red, style=bold, label="Field variable string StateName"];
m11_7 -> m11_8  [key=0, style=solid];
m11_7 -> m11_9  [key=2, style=dotted];
m11_7 -> m11_10  [key=2, style=dotted];
m11_7 -> m11_16  [key=0, style=solid, color=red];
m11_7 -> m11_17  [key=2, style=dotted, color=red];
m11_163 -> m11_154  [key=0, style=bold, color=blue];
m11_72 -> m11_73  [key=0, style=solid, color=green];
m11_73 -> m11_73  [key=3, color=green, style=bold, label="Local variable string arrangeSql"];
m11_73 -> m11_74  [key=0, style=solid, color=green];
m11_73 -> m11_77  [key=1, style=dashed, color=green, label=arrangeSql];
m11_74 -> m11_75  [key=0, style=solid, color=green];
m11_74 -> m11_23  [key=2, style=dotted, color=green];
m11_74 -> m11_76  [key=1, style=dashed, color=green, label="lambda expression"];
m11_75 -> m11_72  [key=0, style=bold, color=blue];
m11_33 -> m11_170  [key=0, style=solid];
m11_170 -> m11_171  [key=0, style=solid];
m11_170 -> m11_173  [key=2, style=dotted];
m11_170 -> m11_174  [key=2, style=dotted];
m11_171 -> m11_172  [key=0, style=solid];
m11_172 -> m11_33  [key=0, style=bold, color=blue];
m11_3 -> m11_0  [key=0, style=bold, color=blue];
m11_3 -> m11_4  [key=0, style=solid, color=red];
m11_3 -> m11_6  [key=1, style=dashed, color=red, label="HangFire.States.JobState"];
m11_3 -> m11_8  [key=1, style=dashed, color=red, label="HangFire.States.JobState"];
m11_3 -> m11_9  [key=1, style=dashed, color=red, label="HangFire.States.JobState"];
m11_3 -> m11_10  [key=1, style=dashed, color=red, label=IRedisClient];
m11_3 -> m11_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.JobState"];
m11_3 -> m11_3  [key=3, color=darkorchid, style=bold, label="method methodReturn HangFire.States.JobState OnStateChanging"];
m11_60 -> m11_61  [key=0, style=solid, color=green];
m11_61 -> m11_62  [key=0, style=solid, color=green];
m11_61 -> m11_23  [key=2, style=dotted, color=green];
m11_61 -> m11_63  [key=1, style=dashed, color=green, label="lambda expression"];
m11_62 -> m11_60  [key=0, style=bold, color=blue];
m11_46 -> m11_47  [key=0, style=solid, color=green];
m11_47 -> m11_48  [key=0, style=solid, color=green];
m11_47 -> m11_23  [key=2, style=dotted, color=green];
m11_47 -> m11_49  [key=1, style=dashed, color=green, label="lambda expression"];
m11_48 -> m11_46  [key=0, style=bold, color=blue];
m11_35 -> m11_36  [key=0, style=solid, color=green];
m11_36 -> m11_37  [key=0, style=solid, color=green];
m11_36 -> m11_23  [key=2, style=dotted, color=green];
m11_36 -> m11_38  [key=1, style=dashed, color=green, label="lambda expression"];
m11_37 -> m11_35  [key=0, style=bold, color=blue];
m11_185 -> m11_21  [key=1, style=dashed, color=green, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_36  [key=1, style=dashed, color=green, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_39  [key=1, style=dashed, color=green, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_47  [key=1, style=dashed, color=green, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_61  [key=1, style=dashed, color=green, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_74  [key=1, style=dashed, color=green, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_86  [key=1, style=dashed, color=green, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_103  [key=1, style=dashed, color=green, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_115  [key=1, style=dashed, color=green, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_127  [key=1, style=dashed, color=green, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_130  [key=1, style=dashed, color=green, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_52  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_65  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_78  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_90  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_107  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_119  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_139  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_143  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_152  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_185 -> m11_156  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts"];
m11_188 -> m11_58  [key=1, style=dashed, color=green, label=cts];
m11_189 -> m11_58  [key=1, style=dashed, color=green, label=queue];
m11_192 -> m11_77  [key=1, style=dashed, color=green, label=arrangeSql];
m11_194 -> m11_106  [key=1, style=dashed, color=green, label=arrangeSql];
m11_195 -> m11_118  [key=1, style=dashed, color=green, label=arrangeSql];
m11_197 -> m11_135  [key=1, style=dashed, color=green, label=queue];
m11_187 -> m11_44  [key=1, style=dashed, color=darkseagreen4, label=queue];
m11_196 -> m11_131  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m11_186 -> m11_31  [key=1, style=dashed, color=darkseagreen4, label=queue];
m11_190 -> m11_70  [key=1, style=dashed, color=darkseagreen4, label=cts];
m11_191 -> m11_70  [key=1, style=dashed, color=darkseagreen4, label=queue];
m11_193 -> m11_89  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m11_198 -> m11_142  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_11 -> m12_12  [key=0, style=solid, color=green];
m12_0 -> m12_1  [key=0, style=solid, color=red];
m12_0 -> m12_3  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_0 -> m12_5  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_0 -> m12_7  [key=1, style=dashed, color=red, label=IDbConnection];
m12_0 -> m12_8  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_0 -> m12_9  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_1 -> m12_2  [key=0, style=solid, color=red];
m12_1 -> m12_6  [key=2, style=dotted, color=green];
m12_1 -> m12_11  [key=1, style=dashed, color=green, label="lambda expression"];
m12_1 -> m12_3  [key=0, style=solid, color=red];
m12_2 -> m12_3  [key=0, style=solid];
m12_2 -> m12_7  [key=2, style=dotted];
m12_2 -> m12_10  [key=0, style=solid, color=red];
m12_2 -> m12_11  [key=2, style=dotted, color=red];
m12_3 -> m12_4  [key=0, style=solid];
m12_3 -> m12_8  [key=2, style=dotted];
m12_3 -> m12_5  [key=0, style=solid];
m12_4 -> m12_5  [key=0, style=solid];
m12_4 -> m12_9  [key=2, style=dotted];
m12_4 -> m12_10  [key=2, style=dotted];
m12_4 -> m12_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_4 -> m12_11  [key=2, style=dotted];
m12_5 -> m12_0  [key=0, style=bold, color=blue];
m12_5 -> m12_6  [key=0, style=solid];
m12_5 -> m12_7  [key=0, style=solid, color=red];
m12_8 -> m12_9  [key=0, style=solid];
m12_7 -> m12_8  [key=0, style=solid, color=red];
m12_9 -> m12_10  [key=0, style=solid];
m12_6 -> m12_10  [key=0, style=solid];
m12_6 -> m12_11  [key=2, style=dotted];
m12_10 -> m12_0  [key=0, style=bold, color=blue];
m12_15 -> m12_16  [key=0, style=solid];
m12_28 -> m12_29  [key=0, style=solid];
m12_29 -> m12_30  [key=0, style=solid];
m12_29 -> m12_22  [key=2, style=dotted];
m12_29 -> m12_32  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_30 -> m12_31  [key=0, style=solid];
m12_30 -> m12_23  [key=2, style=dotted];
m12_31 -> m12_28  [key=0, style=bold, color=blue];
m12_32 -> m12_33  [key=0, style=solid];
m12_12 -> m12_13  [key=0, style=solid, color=red];
m12_12 -> m12_14  [key=2, style=dotted, color=green];
m12_13 -> m12_11  [key=0, style=bold, color=blue];
m12_13 -> m12_14  [key=0, style=solid, color=red];
m12_13 -> m12_15  [key=2, style=dotted, color=red];
m12_25 -> m12_26  [key=0, style=solid];
m12_25 -> m12_27  [key=2, style=dotted];
m12_33 -> m12_34  [key=0, style=solid];
m12_33 -> m12_35  [key=2, style=dotted];
m12_24 -> m12_25  [key=0, style=solid];
m12_26 -> m12_24  [key=0, style=bold, color=blue];
m12_34 -> m12_32  [key=0, style=bold, color=blue];
m12_16 -> m12_17  [key=0, style=solid];
m12_16 -> m12_7  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerProcessingJob"];
m12_16 -> m12_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerProcessingJob"];
m12_16 -> m12_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerProcessingJob"];
m12_16 -> m12_13  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerProcessingJob"];
m12_17 -> m12_15  [key=0, style=bold, color=blue];
m12_14 -> m12_12  [key=0, style=bold, color=blue];
m12_36 -> m12_37  [key=0, style=solid];
m12_37 -> m12_38  [key=0, style=solid];
m12_37 -> m12_35  [key=2, style=dotted];
m12_37 -> m12_39  [key=1, style=dashed, color=darkseagreen4, label=context];
m12_37 -> m12_40  [key=1, style=dashed, color=darkseagreen4, label=context];
m12_37 -> m12_41  [key=1, style=dashed, color=darkseagreen4, label=context];
m12_39 -> m12_40  [key=0, style=solid];
m12_39 -> m12_43  [key=2, style=dotted];
m12_40 -> m12_41  [key=0, style=solid];
m12_40 -> m12_43  [key=2, style=dotted];
m12_41 -> m12_42  [key=0, style=solid];
m12_41 -> m12_43  [key=2, style=dotted];
m12_38 -> m12_39  [key=0, style=solid];
m12_38 -> m12_23  [key=2, style=dotted];
m12_42 -> m12_36  [key=0, style=bold, color=blue];
m12_18 -> m12_19  [key=0, style=solid];
m12_19 -> m12_20  [key=0, style=solid];
m12_19 -> m12_22  [key=2, style=dotted];
m12_19 -> m12_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_20 -> m12_21  [key=0, style=solid];
m12_20 -> m12_23  [key=2, style=dotted];
m12_21 -> m12_18  [key=0, style=bold, color=blue];
m12_44 -> m12_1  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.States.ApplyStateContextFacts"];
m12_44 -> m12_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.ApplyStateContextFacts"];
m12_44 -> m12_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.ApplyStateContextFacts"];
m12_44 -> m12_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.ApplyStateContextFacts"];
m12_44 -> m12_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.ApplyStateContextFacts"];
m12_44 -> m12_25  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.ApplyStateContextFacts"];
m12_44 -> m12_29  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.ApplyStateContextFacts"];
m12_44 -> m12_33  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.ApplyStateContextFacts"];
m12_44 -> m12_37  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.ApplyStateContextFacts"];
m12_44 -> m12_39  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.ApplyStateContextFacts"];
m12_44 -> m12_40  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.ApplyStateContextFacts"];
m12_44 -> m12_41  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.States.ApplyStateContextFacts"];
m14_20 -> m14_21  [key=0, style=solid, color=green];
m14_21 -> m14_22  [key=0, style=solid, color=green];
m14_21 -> m14_14  [key=2, style=dotted, color=green];
m14_21 -> m14_23  [key=1, style=dashed, color=green, label=connection];
m14_22 -> m14_23  [key=0, style=solid];
m14_22 -> m14_25  [key=2, style=dotted];
m14_22 -> m14_26  [key=2, style=dotted];
m14_23 -> m14_24  [key=0, style=solid];
m14_23 -> m14_27  [key=2, style=dotted];
m14_24 -> m14_20  [key=0, style=bold, color=blue];
m14_39 -> m14_40  [key=0, style=solid];
m14_41 -> m14_42  [key=0, style=solid];
m14_41 -> m14_55  [key=2, style=dotted];
m14_41 -> m14_56  [key=2, style=dotted];
m14_41 -> m14_57  [key=2, style=dotted];
m14_41 -> m14_63  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m14_41 -> m14_66  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m14_41 -> m14_70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m14_41 -> m14_73  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m14_41 -> m14_44  [key=1, style=dashed, color=darkseagreen4, label=parts];
m14_41 -> m14_45  [key=1, style=dashed, color=darkseagreen4, label=parts];
m14_41 -> m14_49  [key=1, style=dashed, color=darkseagreen4, label=parts];
m14_41 -> m14_50  [key=1, style=dashed, color=darkseagreen4, label=parts];
m14_40 -> m14_41  [key=0, style=solid];
m14_40 -> m14_51  [key=1, style=dashed, color=darkseagreen4, label=canNotParseMessage];
m14_40 -> m14_53  [key=1, style=dashed, color=darkseagreen4, label=canNotParseMessage];
m14_42 -> m14_43  [key=0, style=solid];
m14_42 -> m14_58  [key=2, style=dotted];
m14_42 -> m14_45  [key=1, style=dashed, color=darkseagreen4, label=builder];
m14_42 -> m14_46  [key=1, style=dashed, color=darkseagreen4, label=builder];
m14_42 -> m14_47  [key=1, style=dashed, color=darkseagreen4, label=builder];
m14_42 -> m14_50  [key=1, style=dashed, color=darkseagreen4, label=builder];
m14_42 -> m14_51  [key=1, style=dashed, color=darkseagreen4, label=builder];
m14_44 -> m14_45  [key=0, style=solid];
m14_44 -> m14_43  [key=0, style=solid];
m14_44 -> m14_59  [key=2, style=dotted];
m14_45 -> m14_46  [key=0, style=solid];
m14_45 -> m14_60  [key=2, style=dotted];
m14_49 -> m14_50  [key=0, style=solid];
m14_49 -> m14_48  [key=0, style=solid];
m14_49 -> m14_59  [key=2, style=dotted];
m14_50 -> m14_51  [key=0, style=solid];
m14_50 -> m14_60  [key=2, style=dotted];
m14_51 -> m14_54  [key=0, style=solid];
m14_51 -> m14_62  [key=2, style=dotted];
m14_53 -> m14_54  [key=0, style=solid];
m14_43 -> m14_44  [key=0, style=solid];
m14_43 -> m14_45  [key=1, style=dashed, color=darkseagreen4, label=alias];
m14_43 -> m14_46  [key=0, style=solid];
m14_46 -> m14_47  [key=0, style=solid];
m14_46 -> m14_48  [key=0, style=solid];
m14_47 -> m14_48  [key=0, style=solid];
m14_47 -> m14_61  [key=2, style=dotted];
m14_48 -> m14_49  [key=0, style=solid];
m14_48 -> m14_50  [key=1, style=dashed, color=darkseagreen4, label=alias];
m14_48 -> m14_51  [key=0, style=solid];
m14_52 -> m14_53  [key=0, style=solid];
m14_54 -> m14_39  [key=0, style=bold, color=blue];
m14_32 -> m14_34  [key=1, style=dashed, color=darkseagreen4, label=ILog];
m14_32 -> m14_35  [key=1, style=dashed, color=darkseagreen4, label=ILog];
m14_32 -> m14_33  [key=0, style=solid];
m14_34 -> m14_35  [key=0, style=solid];
m14_34 -> m14_38  [key=2, style=dotted];
m14_35 -> m14_36  [key=0, style=solid];
m14_35 -> m14_38  [key=2, style=dotted];
m14_33 -> m14_34  [key=0, style=solid];
m14_33 -> m14_37  [key=2, style=dotted];
m14_36 -> m14_32  [key=0, style=bold, color=blue];
m14_16 -> m14_17  [key=0, style=solid];
m14_17 -> m14_14  [key=2, style=dotted];
m14_17 -> m14_18  [key=0, style=solid];
m14_17 -> m14_19  [key=2, style=dotted];
m14_18 -> m14_16  [key=0, style=bold, color=blue];
m14_2 -> m14_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorageOptions"];
m14_2 -> m14_8  [key=1, style=dashed, color=darkseagreen4, label=string];
m14_2 -> m14_3  [key=0, style=solid];
m14_2 -> m14_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorageOptions"];
m14_2 -> m14_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorageOptions"];
m14_7 -> m14_8  [key=0, style=solid];
m14_8 -> m14_9  [key=0, style=solid];
m14_10 -> m14_14  [key=2, style=dotted];
m14_10 -> m14_11  [key=0, style=solid];
m14_5 -> m14_7  [key=0, style=solid];
m14_5 -> m14_6  [key=0, style=solid];
m14_9 -> m14_10  [key=0, style=solid];
m14_9 -> m14_12  [key=0, style=solid];
m14_11 -> m14_12  [key=0, style=solid];
m14_11 -> m14_15  [key=2, style=dotted];
m14_3 -> m14_5  [key=0, style=solid];
m14_3 -> m14_4  [key=0, style=solid];
m14_6 -> m14_12  [key=0, style=solid];
m14_6 -> m14_13  [key=2, style=dotted];
m14_4 -> m14_12  [key=0, style=solid];
m14_4 -> m14_13  [key=2, style=dotted];
m14_12 -> m14_2  [key=0, style=bold, color=blue];
m14_73 -> m14_74  [key=0, style=solid];
m14_63 -> m14_64  [key=0, style=solid];
m14_66 -> m14_67  [key=0, style=solid];
m14_70 -> m14_71  [key=0, style=solid];
m14_64 -> m14_55  [key=2, style=dotted];
m14_64 -> m14_65  [key=0, style=solid];
m14_65 -> m14_63  [key=0, style=bold, color=blue];
m14_68 -> m14_66  [key=0, style=bold, color=blue];
m14_67 -> m14_68  [key=0, style=solid];
m14_67 -> m14_69  [key=2, style=dotted];
m14_72 -> m14_70  [key=0, style=bold, color=blue];
m14_71 -> m14_72  [key=0, style=solid];
m14_74 -> m14_75  [key=0, style=solid];
m14_75 -> m14_73  [key=0, style=bold, color=blue];
m14_28 -> m14_29  [key=0, style=solid];
m14_29 -> m14_30  [key=0, style=solid];
m14_29 -> m14_31  [key=2, style=dotted];
m14_30 -> m14_28  [key=0, style=bold, color=blue];
m14_14 -> m14_76  [key=0, style=solid];
m14_76 -> m14_77  [key=0, style=solid];
m14_76 -> m14_80  [key=2, style=dotted];
m14_76 -> m14_78  [key=1, style=dashed, color=darkseagreen4, label=connection];
m14_77 -> m14_78  [key=0, style=solid];
m14_77 -> m14_81  [key=2, style=dotted];
m14_78 -> m14_79  [key=0, style=solid];
m14_79 -> m14_14  [key=0, style=bold, color=blue];
m14_82 -> m14_21  [key=1, style=dashed, color=green, label="HangFire.SqlServer.SqlServerStorage"];
m14_82 -> m14_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m14_82 -> m14_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m14_82 -> m14_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m14_82 -> m14_17  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m14_82 -> m14_22  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m14_82 -> m14_29  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m14_82 -> m14_34  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m14_82 -> m14_35  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m14_82 -> m14_41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m14_82 -> m14_76  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m15_0 -> m15_1  [key=0, style=solid];
m15_1 -> m15_2  [key=0, style=solid];
m15_1 -> m15_5  [key=2, style=dotted];
m15_2 -> m15_3  [key=0, style=solid];
m15_2 -> m15_6  [key=2, style=dotted];
m15_3 -> m15_4  [key=0, style=solid];
m15_4 -> m15_0  [key=0, style=bold, color=blue];
m15_7 -> m15_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorageOptions"];
m15_7 -> m15_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorageOptions"];
m15_7 -> m15_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorageOptions"];
m16_57 -> m16_58  [key=0, style=solid];
m16_62 -> m16_44  [key=2, style=dotted];
m16_62 -> m16_63  [key=0, style=solid];
m16_62 -> m16_31  [key=2, style=dotted];
m16_59 -> m16_60  [key=0, style=solid];
m16_59 -> m16_22  [key=2, style=dotted];
m16_59 -> m16_26  [key=2, style=dotted];
m16_59 -> m16_61  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_60 -> m16_61  [key=0, style=solid];
m16_60 -> m16_30  [key=2, style=dotted];
m16_60 -> m16_58  [key=0, style=bold, color=blue];
m16_64 -> m16_26  [key=2, style=dotted];
m16_64 -> m16_65  [key=0, style=solid];
m16_64 -> m16_68  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_61 -> m16_62  [key=0, style=solid];
m16_61 -> m16_66  [key=2, style=dotted];
m16_63 -> m16_64  [key=0, style=solid];
m16_63 -> m16_35  [key=2, style=dotted];
m16_63 -> m16_61  [key=0, style=bold, color=blue];
m16_58 -> m16_59  [key=0, style=solid];
m16_58 -> m16_43  [key=2, style=dotted];
m16_58 -> m16_62  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_65 -> m16_57  [key=0, style=bold, color=blue];
m16_65 -> m16_66  [key=0, style=solid];
m16_65 -> m16_26  [key=2, style=dotted];
m16_65 -> m16_67  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_14 -> m16_15  [key=0, style=solid];
m16_14 -> m16_16  [key=0, style=solid];
m16_16 -> m16_0  [key=2, style=dotted];
m16_16 -> m16_17  [key=0, style=solid];
m16_16 -> m16_22  [key=2, style=dotted];
m16_15 -> m16_16  [key=0, style=solid];
m16_15 -> m16_17  [key=0, style=solid];
m16_15 -> m16_14  [key=0, style=solid];
m16_15 -> m16_21  [key=2, style=dotted];
m16_17 -> m16_14  [key=0, style=bold, color=blue];
m16_17 -> m16_11  [key=0, style=bold, color=blue];
m16_25 -> m16_23  [key=0, style=bold, color=blue];
m16_29 -> m16_27  [key=0, style=bold, color=blue];
m16_82 -> m16_83  [key=0, style=solid];
m16_83 -> m16_84  [key=0, style=solid];
m16_83 -> m16_85  [key=2, style=dotted];
m16_84 -> m16_82  [key=0, style=bold, color=blue];
m16_98 -> m16_99  [key=0, style=solid];
m16_98 -> m16_102  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_99 -> m16_100  [key=0, style=solid];
m16_99 -> m16_26  [key=2, style=dotted];
m16_99 -> m16_101  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_100 -> m16_98  [key=0, style=bold, color=blue];
m16_85 -> m16_86  [key=0, style=solid];
m16_85 -> m16_87  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_85 -> m16_90  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_85 -> m16_82  [key=3, color=darkorchid, style=bold, label="Parameter variable string value"];
m16_85 -> m16_83  [key=3, color=darkorchid, style=bold, label="Parameter variable double score"];
m16_86 -> m16_87  [key=0, style=solid];
m16_86 -> m16_90  [key=1, style=dashed, color=darkseagreen4, label=addSql];
m16_86 -> m16_86  [key=3, color=darkorchid, style=bold, label="Local variable string addSql"];
m16_87 -> m16_88  [key=0, style=solid];
m16_87 -> m16_26  [key=2, style=dotted];
m16_87 -> m16_89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_88 -> m16_85  [key=0, style=bold, color=blue];
m16_66 -> m16_64  [key=0, style=bold, color=blue];
m16_26 -> m16_27  [key=0, style=solid];
m16_26 -> m16_117  [key=0, style=solid];
m16_26 -> m16_24  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m16_26 -> m16_33  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m16_26 -> m16_40  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m16_26 -> m16_49  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m16_26 -> m16_59  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m16_26 -> m16_65  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m16_26 -> m16_71  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m16_26 -> m16_77  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m16_26 -> m16_87  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m16_26 -> m16_93  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m16_26 -> m16_99  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m16_26 -> m16_105  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m16_26 -> m16_112  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m16_27 -> m16_28  [key=0, style=solid];
m16_27 -> m16_29  [key=2, style=dotted];
m16_28 -> m16_26  [key=0, style=bold, color=blue];
m16_28 -> m16_29  [key=0, style=solid];
m16_28 -> m16_30  [key=2, style=dotted];
m16_28 -> m16_31  [key=2, style=dotted];
m16_35 -> m16_36  [key=0, style=solid];
m16_67 -> m16_68  [key=0, style=solid];
m16_73 -> m16_44  [key=2, style=dotted];
m16_73 -> m16_74  [key=0, style=solid];
m16_69 -> m16_70  [key=0, style=solid];
m16_69 -> m16_22  [key=2, style=dotted];
m16_69 -> m16_67  [key=0, style=bold, color=blue];
m16_70 -> m16_71  [key=0, style=solid];
m16_70 -> m16_30  [key=2, style=dotted];
m16_70 -> m16_74  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_74 -> m16_26  [key=2, style=dotted];
m16_74 -> m16_75  [key=0, style=solid];
m16_74 -> m16_31  [key=2, style=dotted];
m16_72 -> m16_73  [key=0, style=solid];
m16_72 -> m16_35  [key=2, style=dotted];
m16_72 -> m16_70  [key=0, style=bold, color=blue];
m16_68 -> m16_69  [key=0, style=solid];
m16_68 -> m16_43  [key=2, style=dotted];
m16_68 -> m16_30  [key=2, style=dotted];
m16_68 -> m16_31  [key=2, style=dotted];
m16_71 -> m16_72  [key=0, style=solid];
m16_71 -> m16_66  [key=2, style=dotted];
m16_71 -> m16_26  [key=2, style=dotted];
m16_71 -> m16_73  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_75 -> m16_67  [key=0, style=bold, color=blue];
m16_75 -> m16_73  [key=0, style=bold, color=blue];
m16_5 -> m16_6  [key=0, style=solid, color=red];
m16_36 -> m16_37  [key=0, style=solid];
m16_36 -> m16_31  [key=2, style=dotted];
m16_40 -> m16_44  [key=2, style=dotted];
m16_40 -> m16_41  [key=0, style=solid];
m16_40 -> m16_26  [key=2, style=dotted];
m16_40 -> m16_42  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_38 -> m16_39  [key=0, style=solid];
m16_38 -> m16_22  [key=2, style=dotted];
m16_38 -> m16_40  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_38 -> m16_43  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_39 -> m16_40  [key=0, style=solid];
m16_39 -> m16_30  [key=2, style=dotted];
m16_39 -> m16_43  [key=1, style=dashed, color=darkseagreen4, label=addAndSetStateSql];
m16_39 -> m16_39  [key=3, color=darkorchid, style=bold, label="Local variable string addAndSetStateSql"];
m16_41 -> m16_26  [key=2, style=dotted];
m16_41 -> m16_42  [key=0, style=solid];
m16_41 -> m16_38  [key=0, style=bold, color=blue];
m16_37 -> m16_38  [key=0, style=solid];
m16_37 -> m16_43  [key=2, style=dotted];
m16_37 -> m16_35  [key=0, style=bold, color=blue];
m16_42 -> m16_36  [key=0, style=bold, color=blue];
m16_42 -> m16_43  [key=0, style=solid];
m16_47 -> m16_48  [key=0, style=solid];
m16_47 -> m16_49  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_47 -> m16_52  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_47 -> m16_22  [key=2, style=dotted];
m16_48 -> m16_49  [key=0, style=solid];
m16_48 -> m16_52  [key=1, style=dashed, color=darkseagreen4, label=addStateSql];
m16_48 -> m16_48  [key=3, color=darkorchid, style=bold, label="Local variable string addStateSql"];
m16_48 -> m16_30  [key=2, style=dotted];
m16_49 -> m16_50  [key=0, style=solid];
m16_49 -> m16_26  [key=2, style=dotted];
m16_49 -> m16_51  [key=1, style=dashed, color=green, label=table1];
m16_49 -> m16_52  [key=1, style=dashed, color=green, label=table1];
m16_49 -> m16_55  [key=2, style=dotted];
m16_50 -> m16_47  [key=0, style=bold, color=blue];
m16_50 -> m16_51  [key=0, style=solid, color=green];
m16_50 -> m16_56  [key=2, style=dotted];
m16_45 -> m16_46  [key=0, style=solid];
m16_51 -> m16_52  [key=0, style=solid, color=green];
m16_51 -> m16_56  [key=2, style=dotted, color=green];
m16_52 -> m16_53  [key=0, style=solid, color=green];
m16_52 -> m16_44  [key=2, style=dotted, color=green];
m16_52 -> m16_45  [key=2, style=dotted];
m16_52 -> m16_46  [key=2, style=dotted];
m16_52 -> m16_31  [key=2, style=dotted];
m16_53 -> m16_54  [key=0, style=solid, color=green];
m16_53 -> m16_26  [key=2, style=dotted, color=green];
m16_53 -> m16_51  [key=0, style=bold, color=blue];
m16_46 -> m16_47  [key=0, style=solid];
m16_46 -> m16_43  [key=2, style=dotted];
m16_54 -> m16_45  [key=0, style=bold, color=blue];
m16_54 -> m16_55  [key=0, style=solid, color=red];
m16_110 -> m16_111  [key=0, style=solid];
m16_110 -> m16_112  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_110 -> m16_115  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_111 -> m16_112  [key=0, style=solid];
m16_111 -> m16_115  [key=1, style=dashed, color=darkseagreen4, label=trimSql];
m16_111 -> m16_111  [key=3, color=darkorchid, style=bold, label="Local variable string trimSql"];
m16_112 -> m16_113  [key=0, style=solid];
m16_112 -> m16_26  [key=2, style=dotted];
m16_112 -> m16_114  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_113 -> m16_110  [key=0, style=bold, color=blue];
m16_117 -> m16_118  [key=0, style=solid];
m16_117 -> m16_119  [key=2, style=dotted];
m16_118 -> m16_26  [key=0, style=bold, color=blue];
m16_76 -> m16_77  [key=0, style=solid];
m16_76 -> m16_80  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_76 -> m16_53  [key=1, style=dashed, color=green, label="HangFire.Tests.States.EnqueuedStateFeature"];
m16_76 -> m16_38  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m16_76 -> m16_39  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m16_76 -> m16_41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m16_76 -> m16_47  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m16_76 -> m16_48  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m16_76 -> m16_59  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m16_76 -> m16_60  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m16_76 -> m16_64  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m16_76 -> m16_69  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m16_76 -> m16_70  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m16_76 -> m16_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.EnqueuedStateFeature"];
m16_77 -> m16_78  [key=0, style=solid];
m16_77 -> m16_26  [key=2, style=dotted];
m16_77 -> m16_79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_78 -> m16_76  [key=0, style=bold, color=blue];
m16_7 -> m16_0  [key=0, style=bold, color=blue];
m16_22 -> m16_23  [key=0, style=solid];
m16_30 -> m16_31  [key=0, style=solid];
m16_92 -> m16_93  [key=0, style=solid];
m16_92 -> m16_96  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_93 -> m16_94  [key=0, style=solid];
m16_93 -> m16_26  [key=2, style=dotted];
m16_93 -> m16_95  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_94 -> m16_92  [key=0, style=bold, color=blue];
m16_23 -> m16_24  [key=0, style=solid];
m16_23 -> m16_28  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_23 -> m16_25  [key=2, style=dotted];
m16_24 -> m16_25  [key=0, style=solid];
m16_24 -> m16_26  [key=2, style=dotted];
m16_24 -> m16_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_24 -> m16_22  [key=0, style=bold, color=blue];
m16_56 -> m16_54  [key=0, style=bold, color=blue];
m16_104 -> m16_105  [key=0, style=solid];
m16_104 -> m16_108  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_105 -> m16_106  [key=0, style=solid];
m16_105 -> m16_26  [key=2, style=dotted];
m16_105 -> m16_107  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_106 -> m16_104  [key=0, style=bold, color=blue];
m16_11 -> m16_12  [key=0, style=solid];
m16_12 -> m16_13  [key=0, style=solid];
m16_12 -> m16_18  [key=2, style=dotted];
m16_12 -> m16_19  [key=2, style=dotted];
m16_12 -> m16_16  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m16_13 -> m16_14  [key=0, style=solid];
m16_13 -> m16_20  [key=2, style=dotted];
m16_114 -> m16_115  [key=0, style=solid];
m16_43 -> m16_44  [key=0, style=solid];
m16_43 -> m16_45  [key=2, style=dotted];
m16_43 -> m16_46  [key=2, style=dotted];
m16_43 -> m16_31  [key=2, style=dotted];
m16_44 -> m16_42  [key=0, style=bold, color=blue];
m16_80 -> m16_81  [key=0, style=solid];
m16_80 -> m16_30  [key=2, style=dotted];
m16_80 -> m16_31  [key=2, style=dotted];
m16_79 -> m16_80  [key=0, style=solid];
m16_81 -> m16_79  [key=0, style=bold, color=blue];
m16_90 -> m16_91  [key=0, style=solid];
m16_90 -> m16_31  [key=2, style=dotted];
m16_89 -> m16_90  [key=0, style=solid];
m16_91 -> m16_89  [key=0, style=bold, color=blue];
m16_96 -> m16_97  [key=0, style=solid];
m16_96 -> m16_31  [key=2, style=dotted];
m16_95 -> m16_96  [key=0, style=solid];
m16_97 -> m16_95  [key=0, style=bold, color=blue];
m16_102 -> m16_103  [key=0, style=solid];
m16_102 -> m16_31  [key=2, style=dotted];
m16_101 -> m16_102  [key=0, style=solid];
m16_103 -> m16_101  [key=0, style=bold, color=blue];
m16_108 -> m16_109  [key=0, style=solid];
m16_108 -> m16_31  [key=2, style=dotted];
m16_107 -> m16_108  [key=0, style=solid];
m16_109 -> m16_107  [key=0, style=bold, color=blue];
m16_115 -> m16_116  [key=0, style=solid];
m16_115 -> m16_31  [key=2, style=dotted];
m16_116 -> m16_114  [key=0, style=bold, color=blue];
m16_0 -> m16_1  [key=0, style=solid, color=red];
m16_0 -> m16_3  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m16_0 -> m16_5  [key=1, style=dashed, color=red, label="HangFire.SqlServer.IPersistentJobQueue"];
m16_0 -> m16_6  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m16_1 -> m16_2  [key=0, style=solid, color=green];
m16_1 -> m16_3  [key=0, style=solid, color=red];
m16_1 -> m16_5  [key=2, style=dotted];
m16_3 -> m16_4  [key=0, style=solid];
m16_3 -> m16_5  [key=0, style=solid, color=red];
m16_3 -> m16_8  [key=2, style=dotted];
m16_6 -> m16_7  [key=0, style=solid];
m16_2 -> m16_7  [key=0, style=solid, color=red];
m16_2 -> m16_8  [key=2, style=dotted, color=red];
m16_2 -> m16_3  [key=0, style=solid, color=green];
m16_2 -> m16_6  [key=2, style=dotted, color=green];
m16_4 -> m16_7  [key=0, style=solid];
m16_4 -> m16_8  [key=2, style=dotted];
m16_4 -> m16_0  [key=0, style=bold, color=blue];
m16_34 -> m16_32  [key=0, style=bold, color=blue];
m16_55 -> m16_56  [key=0, style=solid, color=red];
m16_55 -> n2  [key=2, style=dotted, color=red];
m16_31 -> m16_32  [key=0, style=solid];
m16_31 -> m16_34  [key=2, style=dotted];
m16_32 -> m16_33  [key=0, style=solid];
m16_32 -> m16_35  [key=2, style=dotted];
m16_32 -> m16_36  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_33 -> m16_30  [key=0, style=bold, color=blue];
m16_33 -> m16_34  [key=0, style=solid];
m16_33 -> m16_26  [key=2, style=dotted];
m16_33 -> m16_35  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_9 -> m16_10  [key=0, style=solid];
m16_10 -> m16_9  [key=0, style=bold, color=blue];
m16_120 -> m16_5  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_120 -> m16_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_120 -> m16_13  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_120 -> m16_14  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_120 -> m16_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_120 -> m16_24  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_120 -> m16_33  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_120 -> m16_40  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_120 -> m16_49  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_120 -> m16_55  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_120 -> m16_59  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_120 -> m16_65  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_120 -> m16_71  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_120 -> m16_77  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_120 -> m16_83  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_120 -> m16_87  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_120 -> m16_93  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_120 -> m16_99  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_120 -> m16_105  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_120 -> m16_112  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_120 -> m16_117  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m16_121 -> m16_28  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_122 -> m16_28  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m16_123 -> m16_36  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_124 -> m16_43  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_125 -> m16_43  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.IState"];
m16_126 -> m16_43  [key=1, style=dashed, color=darkseagreen4, label=addAndSetStateSql];
m16_127 -> m16_52  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_128 -> m16_52  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.IState"];
m16_129 -> m16_52  [key=1, style=dashed, color=darkseagreen4, label=addStateSql];
m16_130 -> m16_62  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_131 -> m16_68  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_132 -> m16_68  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m16_133 -> m16_74  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_134 -> m16_80  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_135 -> m16_80  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m16_136 -> m16_90  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_137 -> m16_90  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_138 -> m16_90  [key=1, style=dashed, color=darkseagreen4, label=double];
m16_139 -> m16_90  [key=1, style=dashed, color=darkseagreen4, label=addSql];
m16_140 -> m16_96  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_141 -> m16_96  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_142 -> m16_102  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_143 -> m16_102  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_144 -> m16_108  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_145 -> m16_108  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_146 -> m16_115  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_147 -> m16_115  [key=1, style=dashed, color=darkseagreen4, label=int];
m16_148 -> m16_115  [key=1, style=dashed, color=darkseagreen4, label=int];
m16_149 -> m16_115  [key=1, style=dashed, color=darkseagreen4, label=trimSql];
m17_50 -> m17_42  [key=0, style=bold, color=blue];
m17_0 -> m17_1  [key=0, style=solid];
m17_16 -> m17_17  [key=0, style=solid, color=green];
m17_16 -> m17_38  [key=2, style=dotted, color=green];
m17_16 -> m17_0  [key=2, style=dotted];
m17_15 -> m17_16  [key=0, style=solid, color=green];
m17_15 -> m17_15  [key=1, style=dashed, color=darkseagreen4, label=job];
m17_15 -> m17_50  [key=2, style=dotted];
m17_15 -> m17_17  [key=1, style=dashed, color=darkseagreen4, label=job];
m17_17 -> m17_17  [key=1, style=dashed, color=darkseagreen4, label=job];
m17_17 -> m17_18  [key=0, style=solid];
m17_17 -> m17_42  [key=2, style=dotted];
m17_17 -> m17_50  [key=2, style=dotted];
m17_17 -> m17_19  [key=1, style=dashed, color=darkseagreen4, label=job];
m17_17 -> m17_14  [key=0, style=bold, color=blue];
m17_1 -> m17_38  [key=2, style=dotted];
m17_1 -> m17_2  [key=0, style=solid, color=red];
m17_1 -> m17_5  [key=2, style=dotted];
m17_2 -> m17_2  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m17_2 -> m17_3  [key=0, style=solid, color=red];
m17_2 -> m17_39  [key=2, style=dotted];
m17_2 -> m17_40  [key=2, style=dotted];
m17_2 -> m17_41  [key=2, style=dotted];
m17_2 -> m17_42  [key=2, style=dotted];
m17_2 -> m17_6  [key=2, style=dotted, color=red];
m17_2 -> m17_7  [key=2, style=dotted, color=red];
m17_4 -> m17_5  [key=0, style=solid];
m17_4 -> m17_43  [key=2, style=dotted];
m17_4 -> m17_6  [key=1, style=dashed, color=darkseagreen4, label=from];
m17_4 -> m17_0  [key=0, style=bold, color=blue];
m17_5 -> m17_6  [key=0, style=solid];
m17_5 -> m17_43  [key=2, style=dotted];
m17_6 -> m17_7  [key=0, style=solid];
m17_6 -> m17_44  [key=2, style=dotted];
m17_6 -> m17_45  [key=2, style=dotted];
m17_6 -> m17_42  [key=2, style=dotted];
m17_6 -> m17_9  [key=1, style=dashed, color=darkseagreen4, label=pager];
m17_6 -> m17_11  [key=1, style=dashed, color=darkseagreen4, label=pager];
m17_6 -> m17_36  [key=1, style=dashed, color=darkseagreen4, label=pager];
m17_7 -> m17_8  [key=0, style=solid];
m17_7 -> m17_46  [key=2, style=dotted];
m17_7 -> m17_13  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobs];
m17_8 -> m17_38  [key=2, style=dotted];
m17_8 -> m17_9  [key=0, style=solid];
m17_10 -> m17_38  [key=2, style=dotted];
m17_10 -> m17_37  [key=0, style=solid];
m17_10 -> m17_11  [key=0, style=solid];
m17_10 -> m17_13  [key=2, style=dotted];
m17_11 -> m17_12  [key=0, style=solid];
m17_11 -> m17_47  [key=2, style=dotted];
m17_11 -> m17_48  [key=2, style=dotted];
m17_11 -> m17_49  [key=2, style=dotted];
m17_11 -> m17_11  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m17_12 -> m17_38  [key=2, style=dotted];
m17_12 -> m17_13  [key=0, style=solid];
m17_12 -> m17_9  [key=0, style=bold, color=blue];
m17_14 -> m17_15  [key=0, style=solid];
m17_14 -> m17_38  [key=2, style=dotted];
m17_18 -> m17_38  [key=2, style=dotted];
m17_18 -> m17_19  [key=0, style=solid];
m17_19 -> m17_19  [key=1, style=dashed, color=darkseagreen4, label=job];
m17_19 -> m17_20  [key=0, style=solid];
m17_19 -> m17_51  [key=2, style=dotted];
m17_19 -> m17_49  [key=2, style=dotted];
m17_19 -> m17_21  [key=1, style=dashed, color=darkseagreen4, label=job];
m17_20 -> m17_38  [key=2, style=dotted];
m17_20 -> m17_21  [key=0, style=solid];
m17_20 -> m17_18  [key=0, style=bold, color=blue];
m17_22 -> m17_38  [key=2, style=dotted];
m17_22 -> m17_23  [key=0, style=solid];
m17_23 -> m17_38  [key=2, style=dotted];
m17_23 -> m17_24  [key=0, style=solid];
m17_23 -> m17_25  [key=2, style=dotted];
m17_24 -> m17_24  [key=1, style=dashed, color=darkseagreen4, label=job];
m17_24 -> m17_25  [key=0, style=solid];
m17_24 -> m17_52  [key=2, style=dotted];
m17_24 -> m17_50  [key=2, style=dotted];
m17_24 -> m17_26  [key=1, style=dashed, color=darkseagreen4, label=job];
m17_24 -> m17_22  [key=0, style=bold, color=blue];
m17_25 -> m17_38  [key=2, style=dotted];
m17_25 -> m17_26  [key=0, style=solid];
m17_26 -> m17_26  [key=1, style=dashed, color=darkseagreen4, label=job];
m17_26 -> m17_27  [key=0, style=solid];
m17_26 -> m17_53  [key=2, style=dotted];
m17_26 -> m17_50  [key=2, style=dotted];
m17_26 -> m17_28  [key=1, style=dashed, color=darkseagreen4, label=job];
m17_27 -> m17_38  [key=2, style=dotted];
m17_27 -> m17_28  [key=0, style=solid];
m17_27 -> m17_29  [key=2, style=dotted];
m17_29 -> m17_38  [key=2, style=dotted];
m17_29 -> m17_30  [key=0, style=solid];
m17_30 -> m17_30  [key=1, style=dashed, color=darkseagreen4, label=job];
m17_30 -> m17_31  [key=0, style=solid];
m17_30 -> m17_54  [key=2, style=dotted];
m17_30 -> m17_50  [key=2, style=dotted];
m17_30 -> m17_32  [key=1, style=dashed, color=darkseagreen4, label=job];
m17_31 -> m17_38  [key=2, style=dotted];
m17_31 -> m17_32  [key=0, style=solid];
m17_32 -> m17_32  [key=1, style=dashed, color=darkseagreen4, label=job];
m17_32 -> m17_33  [key=0, style=solid];
m17_32 -> m17_50  [key=2, style=dotted];
m17_32 -> m17_22  [key=2, style=dotted];
m17_33 -> m17_38  [key=2, style=dotted];
m17_33 -> m17_34  [key=0, style=solid];
m17_33 -> m17_39  [key=2, style=dotted];
m17_34 -> m17_38  [key=2, style=dotted];
m17_34 -> m17_13  [key=0, style=solid];
m17_34 -> m17_35  [key=0, style=solid];
m17_34 -> m17_40  [key=2, style=dotted];
m17_35 -> m17_38  [key=2, style=dotted];
m17_35 -> m17_36  [key=0, style=solid];
m17_35 -> m17_41  [key=2, style=dotted];
m17_36 -> m17_37  [key=0, style=solid];
m17_36 -> m17_55  [key=2, style=dotted];
m17_36 -> m17_48  [key=2, style=dotted];
m17_36 -> m17_49  [key=2, style=dotted];
m17_36 -> m17_26  [key=2, style=dotted];
m17_13 -> m17_15  [key=1, style=dashed, color=darkseagreen4, label=job];
m17_13 -> m17_14  [key=0, style=solid];
m17_13 -> m17_35  [key=0, style=solid];
m17_3 -> m17_4  [key=0, style=solid, color=red];
m17_3 -> m17_8  [key=2, style=dotted, color=red];
m17_9 -> m17_10  [key=0, style=solid];
m17_9 -> m17_11  [key=0, style=solid];
m17_21 -> m17_22  [key=0, style=solid];
m17_21 -> m17_23  [key=0, style=solid];
m17_21 -> m17_24  [key=1, style=dashed, color=darkseagreen4, label=job];
m17_21 -> m17_21  [key=1, style=dashed, color=darkseagreen4, label=job];
m17_28 -> m17_29  [key=0, style=solid];
m17_28 -> m17_30  [key=1, style=dashed, color=darkseagreen4, label=job];
m17_28 -> m17_34  [key=0, style=solid];
m17_28 -> m17_28  [key=1, style=dashed, color=darkseagreen4, label=job];
m17_28 -> m17_26  [key=0, style=bold, color=blue];
m17_37 -> m17_0  [key=0, style=bold, color=blue];
m17_37 -> m17_30  [key=0, style=bold, color=blue];
m17_61 -> m17_62  [key=0, style=solid];
m17_62 -> m17_63  [key=0, style=solid];
m17_62 -> m17_38  [key=2, style=dotted];
m17_63 -> m17_64  [key=0, style=solid];
m17_63 -> m17_22  [key=2, style=dotted];
m17_64 -> m17_65  [key=0, style=solid];
m17_64 -> m17_39  [key=2, style=dotted];
m17_65 -> m17_66  [key=0, style=solid];
m17_65 -> m17_40  [key=2, style=dotted];
m17_66 -> m17_67  [key=0, style=solid];
m17_66 -> m17_41  [key=2, style=dotted];
m17_67 -> m17_68  [key=0, style=solid];
m17_67 -> m17_70  [key=2, style=dotted];
m17_68 -> m17_69  [key=0, style=solid];
m17_68 -> m17_26  [key=2, style=dotted];
m17_69 -> m17_61  [key=0, style=bold, color=blue];
m17_45 -> m17_46  [key=0, style=solid];
m17_45 -> m17_39  [key=2, style=dotted];
m17_44 -> m17_45  [key=0, style=solid];
m17_44 -> m17_22  [key=2, style=dotted];
m17_54 -> m17_55  [key=0, style=solid];
m17_54 -> m17_22  [key=2, style=dotted];
m17_43 -> m17_44  [key=0, style=solid];
m17_43 -> m17_38  [key=2, style=dotted];
m17_81 -> m17_82  [key=0, style=solid];
m17_82 -> m17_83  [key=0, style=solid];
m17_82 -> m17_38  [key=2, style=dotted];
m17_83 -> m17_84  [key=0, style=solid];
m17_83 -> m17_22  [key=2, style=dotted];
m17_84 -> m17_85  [key=0, style=solid];
m17_84 -> m17_39  [key=2, style=dotted];
m17_85 -> m17_86  [key=0, style=solid];
m17_85 -> m17_40  [key=2, style=dotted];
m17_86 -> m17_87  [key=0, style=solid];
m17_86 -> m17_41  [key=2, style=dotted];
m17_87 -> m17_88  [key=0, style=solid];
m17_87 -> m17_26  [key=2, style=dotted];
m17_88 -> m17_81  [key=0, style=bold, color=blue];
m17_52 -> m17_53  [key=0, style=solid];
m17_53 -> m17_54  [key=0, style=solid];
m17_53 -> m17_38  [key=2, style=dotted];
m17_55 -> m17_56  [key=0, style=solid];
m17_55 -> m17_39  [key=2, style=dotted];
m17_56 -> m17_57  [key=0, style=solid];
m17_56 -> m17_40  [key=2, style=dotted];
m17_56 -> m17_16  [key=1, style=dashed, color=green, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_12  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_14  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_17  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_18  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_19  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_20  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_22  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_23  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_24  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_26  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_27  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_29  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_30  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_31  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_33  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_34  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_35  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_56 -> m17_36  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.EnqueuedJobsPage"];
m17_57 -> m17_58  [key=0, style=solid];
m17_57 -> m17_41  [key=2, style=dotted];
m17_58 -> m17_59  [key=0, style=solid];
m17_58 -> m17_51  [key=2, style=dotted];
m17_59 -> m17_60  [key=0, style=solid];
m17_59 -> m17_26  [key=2, style=dotted];
m17_60 -> m17_52  [key=0, style=bold, color=blue];
m17_48 -> m17_49  [key=0, style=solid];
m17_48 -> m17_51  [key=2, style=dotted];
m17_47 -> m17_48  [key=0, style=solid];
m17_47 -> m17_41  [key=2, style=dotted];
m17_49 -> m17_50  [key=0, style=solid];
m17_49 -> m17_26  [key=2, style=dotted];
m17_89 -> m17_90  [key=0, style=solid];
m17_90 -> m17_91  [key=0, style=solid];
m17_90 -> m17_38  [key=2, style=dotted];
m17_91 -> m17_92  [key=0, style=solid];
m17_91 -> m17_22  [key=2, style=dotted];
m17_92 -> m17_93  [key=0, style=solid];
m17_92 -> m17_39  [key=2, style=dotted];
m17_93 -> m17_94  [key=0, style=solid];
m17_93 -> m17_102  [key=2, style=dotted];
m17_93 -> m17_95  [key=1, style=dashed, color=darkseagreen4, label=table1];
m17_93 -> m17_96  [key=1, style=dashed, color=darkseagreen4, label=table1];
m17_94 -> m17_95  [key=0, style=solid];
m17_94 -> m17_103  [key=2, style=dotted];
m17_95 -> m17_96  [key=0, style=solid];
m17_95 -> m17_103  [key=2, style=dotted];
m17_96 -> m17_97  [key=0, style=solid];
m17_96 -> m17_51  [key=2, style=dotted];
m17_97 -> m17_98  [key=0, style=solid];
m17_97 -> m17_40  [key=2, style=dotted];
m17_98 -> m17_99  [key=0, style=solid];
m17_98 -> m17_41  [key=2, style=dotted];
m17_99 -> m17_100  [key=0, style=solid];
m17_99 -> m17_51  [key=2, style=dotted];
m17_100 -> m17_101  [key=0, style=solid];
m17_100 -> m17_26  [key=2, style=dotted];
m17_101 -> m17_89  [key=0, style=bold, color=blue];
m17_42 -> m17_43  [key=0, style=solid];
m17_46 -> m17_47  [key=0, style=solid];
m17_46 -> m17_40  [key=2, style=dotted];
m17_71 -> m17_72  [key=0, style=solid, color=red];
m17_72 -> m17_73  [key=0, style=solid, color=red];
m17_72 -> m17_38  [key=2, style=dotted, color=red];
m17_73 -> m17_74  [key=0, style=solid];
m17_73 -> m17_22  [key=2, style=dotted];
m17_74 -> m17_75  [key=0, style=solid];
m17_74 -> m17_39  [key=2, style=dotted];
m17_75 -> m17_76  [key=0, style=solid];
m17_75 -> m17_51  [key=2, style=dotted];
m17_76 -> m17_77  [key=0, style=solid];
m17_76 -> m17_40  [key=2, style=dotted];
m17_77 -> m17_78  [key=0, style=solid];
m17_77 -> m17_41  [key=2, style=dotted];
m17_78 -> m17_79  [key=0, style=solid];
m17_78 -> m17_70  [key=2, style=dotted];
m17_79 -> m17_80  [key=0, style=solid];
m17_79 -> m17_26  [key=2, style=dotted];
m17_80 -> m17_71  [key=0, style=bold, color=blue];
m17_104 -> m17_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobManagerFeature"];
m17_104 -> m17_36  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobManagerFeature"];
m17_104 -> m17_44  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobManagerFeature"];
m17_104 -> m17_49  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobManagerFeature"];
m17_104 -> m17_54  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobManagerFeature"];
m17_104 -> m17_59  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobManagerFeature"];
m17_104 -> m17_63  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobManagerFeature"];
m17_104 -> m17_68  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobManagerFeature"];
m17_104 -> m17_73  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobManagerFeature"];
m17_104 -> m17_79  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobManagerFeature"];
m17_104 -> m17_83  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobManagerFeature"];
m17_104 -> m17_87  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobManagerFeature"];
m17_104 -> m17_91  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobManagerFeature"];
m17_104 -> m17_100  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobManagerFeature"];
m18_5 -> m18_16  [key=2, style=dotted];
m18_5 -> m18_17  [key=2, style=dotted];
m18_5 -> m18_6  [key=0, style=solid];
m18_5 -> m18_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_162 -> m18_163  [key=0, style=solid];
m18_163 -> m18_164  [key=0, style=solid];
m18_163 -> m18_78  [key=2, style=dotted];
m18_164 -> m18_165  [key=0, style=solid];
m18_164 -> m18_79  [key=2, style=dotted];
m18_165 -> m18_166  [key=0, style=solid];
m18_165 -> m18_80  [key=2, style=dotted];
m18_165 -> m18_167  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_166 -> m18_162  [key=0, style=bold, color=blue];
m18_13 -> m18_17  [key=0, style=solid];
m18_13 -> m18_19  [key=1, style=dashed, color=darkseagreen4, label=string];
m18_13 -> m18_22  [key=1, style=dashed, color=darkseagreen4, label=string];
m18_13 -> m18_24  [key=1, style=dashed, color=darkseagreen4, label=string];
m18_13 -> m18_25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.IJobPerformanceProcess"];
m18_13 -> m18_31  [key=1, style=dashed, color=darkseagreen4, label=string];
m18_41 -> m18_304  [key=0, style=solid];
m18_250 -> m18_251  [key=0, style=solid];
m18_252 -> m18_16  [key=2, style=dotted];
m18_252 -> m18_253  [key=0, style=solid];
m18_252 -> m18_258  [key=2, style=dotted];
m18_252 -> m18_259  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_253 -> m18_254  [key=0, style=solid];
m18_253 -> m18_78  [key=2, style=dotted];
m18_254 -> m18_255  [key=0, style=solid];
m18_254 -> m18_79  [key=2, style=dotted];
m18_255 -> m18_256  [key=0, style=solid];
m18_255 -> m18_80  [key=2, style=dotted];
m18_255 -> m18_262  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_251 -> m18_252  [key=0, style=solid];
m18_251 -> m18_255  [key=1, style=dashed, color=darkseagreen4, label=exception];
m18_251 -> m18_263  [key=1, style=dashed, color=darkseagreen4, label=exception];
m18_251 -> m18_257  [key=2, style=dotted];
m18_251 -> m18_266  [key=1, style=dashed, color=darkseagreen4, label=exception];
m18_256 -> m18_250  [key=0, style=bold, color=blue];
m18_6 -> m18_7  [key=0, style=solid];
m18_6 -> m18_8  [key=1, style=dashed, color=red, label="System.Threading.CancellationToken"];
m18_6 -> m18_18  [key=2, style=dotted];
m18_7 -> m18_8  [key=0, style=solid, color=green];
m18_7 -> m18_11  [key=2, style=dotted];
m18_7 -> m18_9  [key=1, style=dashed, color=red, label=connection];
m18_7 -> m18_16  [key=2, style=dotted];
m18_7 -> m18_17  [key=2, style=dotted];
m18_7 -> m18_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_8 -> m18_9  [key=0, style=solid, color=green];
m18_8 -> m18_12  [key=2, style=dotted, color=red];
m18_8 -> m18_16  [key=2, style=dotted, color=green];
m18_8 -> m18_17  [key=2, style=dotted, color=green];
m18_8 -> m18_30  [key=1, style=dashed, color=green, label="lambda expression"];
m18_9 -> m18_10  [key=0, style=solid, color=green];
m18_9 -> m18_13  [key=2, style=dotted, color=red];
m18_9 -> m18_16  [key=2, style=dotted, color=green];
m18_9 -> m18_19  [key=2, style=dotted, color=green];
m18_9 -> m18_20  [key=2, style=dotted, color=green];
m18_9 -> m18_17  [key=2, style=dotted, color=green];
m18_9 -> m18_34  [key=1, style=dashed, color=green, label="lambda expression"];
m18_9 -> m18_38  [key=1, style=dashed, color=green, label="lambda expression"];
m18_10 -> m18_6  [key=0, style=bold, color=blue];
m18_10 -> m18_11  [key=0, style=solid, color=green];
m18_10 -> m18_21  [key=2, style=dotted, color=green];
m18_58 -> m18_59  [key=0, style=solid];
m18_59 -> m18_22  [key=2, style=dotted];
m18_59 -> m18_60  [key=0, style=solid];
m18_59 -> m18_62  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_60 -> m18_53  [key=2, style=dotted];
m18_60 -> m18_61  [key=0, style=solid];
m18_61 -> m18_58  [key=0, style=bold, color=blue];
m18_239 -> m18_240  [key=0, style=solid];
m18_240 -> m18_241  [key=0, style=solid];
m18_240 -> m18_78  [key=2, style=dotted];
m18_241 -> m18_242  [key=0, style=solid];
m18_241 -> m18_79  [key=2, style=dotted];
m18_242 -> m18_243  [key=0, style=solid];
m18_242 -> m18_80  [key=2, style=dotted];
m18_242 -> m18_244  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_243 -> m18_239  [key=0, style=bold, color=blue];
m18_39 -> m18_40  [key=0, style=solid, color=green];
m18_39 -> m18_41  [key=2, style=dotted, color=green];
m18_34 -> m18_35  [key=0, style=solid, color=green];
m18_174 -> m18_175  [key=0, style=solid];
m18_175 -> m18_16  [key=2, style=dotted];
m18_175 -> m18_22  [key=2, style=dotted];
m18_175 -> m18_176  [key=0, style=solid];
m18_175 -> m18_180  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_176 -> m18_177  [key=0, style=solid];
m18_176 -> m18_78  [key=2, style=dotted];
m18_177 -> m18_178  [key=0, style=solid];
m18_177 -> m18_79  [key=2, style=dotted];
m18_178 -> m18_179  [key=0, style=solid];
m18_178 -> m18_80  [key=2, style=dotted];
m18_178 -> m18_186  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_179 -> m18_174  [key=0, style=bold, color=blue];
m18_189 -> m18_190  [key=0, style=solid];
m18_190 -> m18_191  [key=0, style=solid];
m18_190 -> m18_78  [key=2, style=dotted];
m18_191 -> m18_192  [key=0, style=solid];
m18_191 -> m18_79  [key=2, style=dotted];
m18_192 -> m18_193  [key=0, style=solid];
m18_192 -> m18_80  [key=2, style=dotted];
m18_192 -> m18_194  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_193 -> m18_189  [key=0, style=bold, color=blue];
m18_36 -> m18_34  [key=0, style=bold, color=blue];
m18_14 -> m18_15  [key=0, style=solid];
m18_15 -> m18_16  [key=0, style=solid];
m18_16 -> m18_14  [key=0, style=bold, color=blue];
m18_22 -> m18_23  [key=0, style=solid];
m18_22 -> m18_36  [key=2, style=dotted];
m18_22 -> m18_24  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m18_22 -> m18_25  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m18_101 -> m18_102  [key=0, style=solid];
m18_102 -> m18_16  [key=2, style=dotted];
m18_102 -> m18_22  [key=2, style=dotted];
m18_102 -> m18_103  [key=0, style=solid];
m18_102 -> m18_108  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_103 -> m18_104  [key=0, style=solid];
m18_103 -> m18_78  [key=2, style=dotted];
m18_103 -> m18_112  [key=1, style=dashed, color=darkseagreen4, label=worker];
m18_104 -> m18_22  [key=2, style=dotted];
m18_104 -> m18_105  [key=0, style=solid];
m18_104 -> m18_111  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_105 -> m18_106  [key=0, style=solid];
m18_105 -> m18_80  [key=2, style=dotted];
m18_105 -> m18_114  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_106 -> m18_107  [key=0, style=solid];
m18_106 -> m18_80  [key=2, style=dotted];
m18_106 -> m18_117  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_107 -> m18_101  [key=0, style=bold, color=blue];
m18_219 -> m18_220  [key=0, style=solid];
m18_220 -> m18_16  [key=2, style=dotted];
m18_220 -> m18_22  [key=2, style=dotted];
m18_220 -> m18_221  [key=0, style=solid];
m18_220 -> m18_227  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_221 -> m18_222  [key=0, style=solid];
m18_221 -> m18_78  [key=2, style=dotted];
m18_221 -> m18_231  [key=1, style=dashed, color=darkseagreen4, label=worker];
m18_222 -> m18_223  [key=0, style=solid];
m18_222 -> m18_226  [key=2, style=dotted];
m18_222 -> m18_230  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_223 -> m18_224  [key=0, style=solid];
m18_223 -> m18_80  [key=2, style=dotted];
m18_223 -> m18_233  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_224 -> m18_225  [key=0, style=solid];
m18_224 -> m18_80  [key=2, style=dotted];
m18_224 -> m18_236  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_225 -> m18_219  [key=0, style=bold, color=blue];
m18_78 -> m18_302  [key=0, style=solid];
m18_302 -> m18_303  [key=0, style=solid];
m18_302 -> m18_57  [key=2, style=dotted];
m18_303 -> m18_78  [key=0, style=bold, color=blue];
m18_38 -> m18_39  [key=0, style=solid, color=green];
m18_35 -> m18_36  [key=0, style=solid, color=green];
m18_35 -> m18_37  [key=2, style=dotted, color=green];
m18_268 -> m18_269  [key=0, style=solid];
m18_270 -> m18_16  [key=2, style=dotted];
m18_270 -> m18_271  [key=0, style=solid];
m18_270 -> m18_275  [key=2, style=dotted];
m18_270 -> m18_258  [key=2, style=dotted];
m18_270 -> m18_276  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_271 -> m18_272  [key=0, style=solid];
m18_271 -> m18_78  [key=2, style=dotted];
m18_272 -> m18_273  [key=0, style=solid];
m18_272 -> m18_79  [key=2, style=dotted];
m18_273 -> m18_274  [key=0, style=solid];
m18_273 -> m18_80  [key=2, style=dotted];
m18_273 -> m18_279  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_269 -> m18_270  [key=0, style=solid];
m18_269 -> m18_257  [key=2, style=dotted];
m18_274 -> m18_268  [key=0, style=bold, color=blue];
m18_18 -> m18_19  [key=0, style=solid];
m18_18 -> m18_34  [key=2, style=dotted];
m18_26 -> m18_27  [key=0, style=solid];
m18_26 -> m18_29  [key=0, style=solid];
m18_26 -> m18_31  [key=0, style=solid];
m18_26 -> m18_40  [key=2, style=dotted];
m18_40 -> m18_38  [key=0, style=bold, color=blue];
m18_0 -> m18_1  [key=0, style=solid];
m18_0 -> m18_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.WorkerContext"];
m18_11 -> m18_12  [key=0, style=solid, color=green];
m18_11 -> m18_16  [key=2, style=dotted, color=green];
m18_11 -> m18_22  [key=2, style=dotted, color=green];
m18_11 -> m18_42  [key=1, style=dashed, color=green, label="lambda expression"];
m18_11 -> m18_46  [key=1, style=dashed, color=green, label="lambda expression"];
m18_1 -> m18_2  [key=0, style=solid];
m18_1 -> m18_13  [key=2, style=dotted];
m18_1 -> m18_3  [key=0, style=solid];
m18_2 -> m18_3  [key=0, style=solid];
m18_2 -> m18_4  [key=0, style=solid];
m18_2 -> m18_5  [key=2, style=dotted];
m18_3 -> m18_4  [key=0, style=solid];
m18_3 -> m18_14  [key=2, style=dotted];
m18_4 -> m18_5  [key=0, style=solid];
m18_4 -> m18_15  [key=2, style=dotted];
m18_4 -> m18_0  [key=0, style=bold, color=blue];
m18_12 -> m18_0  [key=0, style=bold, color=blue];
m18_49 -> m18_50  [key=0, style=solid, color=green];
m18_50 -> m18_51  [key=0, style=solid, color=green];
m18_50 -> m18_22  [key=2, style=dotted, color=green];
m18_50 -> m18_54  [key=1, style=dashed, color=green, label="lambda expression"];
m18_51 -> m18_52  [key=0, style=solid];
m18_51 -> m18_53  [key=2, style=dotted];
m18_52 -> m18_49  [key=0, style=bold, color=blue];
m18_72 -> m18_73  [key=0, style=solid];
m18_73 -> m18_74  [key=0, style=solid];
m18_73 -> m18_78  [key=2, style=dotted];
m18_74 -> m18_75  [key=0, style=solid];
m18_74 -> m18_79  [key=2, style=dotted];
m18_75 -> m18_76  [key=0, style=solid];
m18_75 -> m18_80  [key=2, style=dotted];
m18_75 -> m18_81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_76 -> m18_77  [key=0, style=solid];
m18_76 -> m18_80  [key=2, style=dotted];
m18_76 -> m18_84  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_77 -> m18_72  [key=0, style=bold, color=blue];
m18_285 -> m18_286  [key=0, style=solid];
m18_286 -> m18_16  [key=2, style=dotted];
m18_286 -> m18_17  [key=2, style=dotted];
m18_286 -> m18_19  [key=2, style=dotted];
m18_286 -> m18_287  [key=0, style=solid];
m18_286 -> m18_291  [key=2, style=dotted];
m18_286 -> m18_292  [key=2, style=dotted];
m18_286 -> m18_293  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_287 -> m18_288  [key=0, style=solid];
m18_287 -> m18_78  [key=2, style=dotted];
m18_288 -> m18_289  [key=0, style=solid];
m18_288 -> m18_79  [key=2, style=dotted];
m18_289 -> m18_290  [key=0, style=solid];
m18_289 -> m18_80  [key=2, style=dotted];
m18_289 -> m18_296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_290 -> m18_285  [key=0, style=bold, color=blue];
m18_299 -> m18_300  [key=0, style=solid];
m18_30 -> m18_31  [key=0, style=solid];
m18_30 -> m18_41  [key=2, style=dotted];
m18_42 -> m18_43  [key=0, style=solid, color=green];
m18_42 -> m18_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.Worker"];
m18_42 -> m18_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.Worker"];
m18_42 -> m18_8  [key=1, style=dashed, color=red, label="HangFire.Server.Worker"];
m18_42 -> m18_9  [key=1, style=dashed, color=red, label="HangFire.Server.Worker"];
m18_42 -> m18_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.Worker"];
m18_42 -> m18_17  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.Worker"];
m18_42 -> m18_18  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.Worker"];
m18_42 -> m18_24  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.Worker"];
m18_46 -> m18_47  [key=0, style=solid, color=green];
m18_43 -> m18_44  [key=0, style=solid, color=green];
m18_43 -> m18_22  [key=2, style=dotted, color=green];
m18_43 -> m18_45  [key=2, style=dotted, color=green];
m18_44 -> m18_42  [key=0, style=bold, color=blue];
m18_47 -> m18_48  [key=0, style=solid, color=green];
m18_48 -> m18_46  [key=0, style=bold, color=blue];
m18_54 -> m18_55  [key=0, style=solid];
m18_31 -> m18_22  [key=2, style=dotted];
m18_31 -> m18_32  [key=0, style=solid];
m18_31 -> m18_33  [key=2, style=dotted];
m18_31 -> m18_35  [key=2, style=dotted];
m18_55 -> m18_56  [key=0, style=solid];
m18_55 -> m18_57  [key=2, style=dotted];
m18_63 -> m18_64  [key=0, style=solid];
m18_63 -> m18_57  [key=2, style=dotted];
m18_70 -> m18_71  [key=0, style=solid];
m18_70 -> m18_57  [key=2, style=dotted];
m18_95 -> m18_96  [key=0, style=solid];
m18_95 -> m18_33  [key=2, style=dotted];
m18_112 -> m18_113  [key=0, style=solid];
m18_112 -> m18_79  [key=2, style=dotted];
m18_157 -> m18_22  [key=2, style=dotted];
m18_157 -> m18_45  [key=2, style=dotted];
m18_157 -> m18_158  [key=0, style=solid];
m18_157 -> m18_159  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_160 -> m18_161  [key=0, style=solid];
m18_208 -> m18_209  [key=0, style=solid];
m18_208 -> m18_79  [key=2, style=dotted];
m18_231 -> m18_232  [key=0, style=solid];
m18_231 -> m18_79  [key=2, style=dotted];
m18_27 -> m18_28  [key=0, style=solid];
m18_32 -> m18_30  [key=0, style=bold, color=blue];
m18_32 -> m18_13  [key=0, style=bold, color=blue];
m18_109 -> m18_22  [key=2, style=dotted];
m18_109 -> m18_45  [key=2, style=dotted];
m18_109 -> m18_110  [key=0, style=solid];
m18_130 -> m18_22  [key=2, style=dotted];
m18_130 -> m18_45  [key=2, style=dotted];
m18_130 -> m18_131  [key=0, style=solid];
m18_130 -> m18_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_139 -> m18_22  [key=2, style=dotted];
m18_139 -> m18_140  [key=0, style=solid];
m18_139 -> m18_141  [key=2, style=dotted];
m18_143 -> m18_22  [key=2, style=dotted];
m18_143 -> m18_45  [key=2, style=dotted];
m18_143 -> m18_144  [key=0, style=solid];
m18_143 -> m18_145  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_168 -> m18_22  [key=2, style=dotted];
m18_168 -> m18_45  [key=2, style=dotted];
m18_168 -> m18_169  [key=0, style=solid];
m18_168 -> m18_170  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_181 -> m18_22  [key=2, style=dotted];
m18_181 -> m18_45  [key=2, style=dotted];
m18_181 -> m18_182  [key=0, style=solid];
m18_181 -> m18_183  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_187 -> m18_22  [key=2, style=dotted];
m18_187 -> m18_188  [key=0, style=solid];
m18_187 -> m18_141  [key=2, style=dotted];
m18_195 -> m18_22  [key=2, style=dotted];
m18_195 -> m18_196  [key=0, style=solid];
m18_195 -> m18_141  [key=2, style=dotted];
m18_205 -> m18_22  [key=2, style=dotted];
m18_205 -> m18_206  [key=0, style=solid];
m18_205 -> m18_141  [key=2, style=dotted];
m18_211 -> m18_22  [key=2, style=dotted];
m18_211 -> m18_45  [key=2, style=dotted];
m18_211 -> m18_212  [key=0, style=solid];
m18_211 -> m18_213  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_228 -> m18_22  [key=2, style=dotted];
m18_228 -> m18_229  [key=0, style=solid];
m18_228 -> m18_141  [key=2, style=dotted];
m18_245 -> m18_22  [key=2, style=dotted];
m18_245 -> m18_45  [key=2, style=dotted];
m18_245 -> m18_246  [key=0, style=solid];
m18_245 -> m18_247  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_263 -> m18_22  [key=2, style=dotted];
m18_263 -> m18_45  [key=2, style=dotted];
m18_263 -> m18_264  [key=0, style=solid];
m18_263 -> m18_265  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_260 -> m18_22  [key=2, style=dotted];
m18_260 -> m18_261  [key=0, style=solid];
m18_260 -> m18_141  [key=2, style=dotted];
m18_277 -> m18_22  [key=2, style=dotted];
m18_277 -> m18_278  [key=0, style=solid];
m18_277 -> m18_141  [key=2, style=dotted];
m18_280 -> m18_22  [key=2, style=dotted];
m18_280 -> m18_45  [key=2, style=dotted];
m18_280 -> m18_281  [key=0, style=solid];
m18_280 -> m18_282  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_297 -> m18_22  [key=2, style=dotted];
m18_297 -> m18_45  [key=2, style=dotted];
m18_297 -> m18_298  [key=0, style=solid];
m18_297 -> m18_299  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_294 -> m18_37  [key=2, style=dotted];
m18_294 -> m18_295  [key=0, style=solid];
m18_56 -> m18_54  [key=0, style=bold, color=blue];
m18_23 -> m18_24  [key=0, style=solid];
m18_23 -> m18_37  [key=2, style=dotted];
m18_62 -> m18_63  [key=0, style=solid];
m18_64 -> m18_62  [key=0, style=bold, color=blue];
m18_69 -> m18_70  [key=0, style=solid];
m18_71 -> m18_69  [key=0, style=bold, color=blue];
m18_81 -> m18_82  [key=0, style=solid];
m18_84 -> m18_85  [key=0, style=solid];
m18_94 -> m18_95  [key=0, style=solid];
m18_96 -> m18_94  [key=0, style=bold, color=blue];
m18_97 -> m18_98  [key=0, style=solid];
m18_108 -> m18_109  [key=0, style=solid];
m18_111 -> m18_112  [key=0, style=solid];
m18_113 -> m18_111  [key=0, style=bold, color=blue];
m18_114 -> m18_115  [key=0, style=solid];
m18_117 -> m18_118  [key=0, style=solid];
m18_129 -> m18_130  [key=0, style=solid];
m18_135 -> m18_136  [key=0, style=solid];
m18_138 -> m18_139  [key=0, style=solid];
m18_142 -> m18_143  [key=0, style=solid];
m18_148 -> m18_149  [key=0, style=solid];
m18_156 -> m18_157  [key=0, style=solid];
m18_158 -> m18_156  [key=0, style=bold, color=blue];
m18_159 -> m18_160  [key=0, style=solid];
m18_161 -> m18_159  [key=0, style=bold, color=blue];
m18_167 -> m18_168  [key=0, style=solid];
m18_180 -> m18_181  [key=0, style=solid];
m18_186 -> m18_187  [key=0, style=solid];
m18_194 -> m18_195  [key=0, style=solid];
m18_204 -> m18_205  [key=0, style=solid];
m18_207 -> m18_208  [key=0, style=solid];
m18_209 -> m18_207  [key=0, style=bold, color=blue];
m18_210 -> m18_211  [key=0, style=solid];
m18_216 -> m18_217  [key=0, style=solid];
m18_227 -> m18_228  [key=0, style=solid];
m18_230 -> m18_231  [key=0, style=solid];
m18_232 -> m18_230  [key=0, style=bold, color=blue];
m18_233 -> m18_234  [key=0, style=solid];
m18_236 -> m18_237  [key=0, style=solid];
m18_244 -> m18_245  [key=0, style=solid];
m18_259 -> m18_260  [key=0, style=solid];
m18_262 -> m18_263  [key=0, style=solid];
m18_276 -> m18_277  [key=0, style=solid];
m18_279 -> m18_280  [key=0, style=solid];
m18_293 -> m18_294  [key=0, style=solid];
m18_296 -> m18_297  [key=0, style=solid];
m18_29 -> m18_27  [key=0, style=bold, color=blue];
m18_29 -> m18_30  [key=0, style=solid];
m18_28 -> m18_29  [key=0, style=solid];
m18_28 -> m18_31  [key=0, style=solid];
m18_28 -> m18_41  [key=2, style=dotted];
m18_110 -> m18_108  [key=0, style=bold, color=blue];
m18_131 -> m18_129  [key=0, style=bold, color=blue];
m18_132 -> m18_133  [key=0, style=solid];
m18_140 -> m18_138  [key=0, style=bold, color=blue];
m18_144 -> m18_142  [key=0, style=bold, color=blue];
m18_145 -> m18_146  [key=0, style=solid];
m18_169 -> m18_167  [key=0, style=bold, color=blue];
m18_170 -> m18_171  [key=0, style=solid];
m18_182 -> m18_180  [key=0, style=bold, color=blue];
m18_183 -> m18_184  [key=0, style=solid];
m18_188 -> m18_186  [key=0, style=bold, color=blue];
m18_196 -> m18_194  [key=0, style=bold, color=blue];
m18_206 -> m18_204  [key=0, style=bold, color=blue];
m18_212 -> m18_210  [key=0, style=bold, color=blue];
m18_213 -> m18_214  [key=0, style=solid];
m18_229 -> m18_227  [key=0, style=bold, color=blue];
m18_246 -> m18_244  [key=0, style=bold, color=blue];
m18_247 -> m18_248  [key=0, style=solid];
m18_264 -> m18_262  [key=0, style=bold, color=blue];
m18_265 -> m18_266  [key=0, style=solid];
m18_261 -> m18_259  [key=0, style=bold, color=blue];
m18_278 -> m18_276  [key=0, style=bold, color=blue];
m18_281 -> m18_279  [key=0, style=bold, color=blue];
m18_282 -> m18_283  [key=0, style=solid];
m18_298 -> m18_296  [key=0, style=bold, color=blue];
m18_295 -> m18_293  [key=0, style=bold, color=blue];
m18_25 -> m18_23  [key=0, style=bold, color=blue];
m18_25 -> m18_26  [key=0, style=solid];
m18_25 -> m18_39  [key=2, style=dotted];
m18_24 -> m18_25  [key=0, style=solid];
m18_24 -> m18_26  [key=2, style=dotted];
m18_24 -> m18_38  [key=2, style=dotted];
m18_83 -> m18_81  [key=0, style=bold, color=blue];
m18_82 -> m18_83  [key=0, style=solid];
m18_82 -> m18_26  [key=2, style=dotted];
m18_86 -> m18_84  [key=0, style=bold, color=blue];
m18_85 -> m18_86  [key=0, style=solid];
m18_85 -> m18_87  [key=2, style=dotted];
m18_99 -> m18_97  [key=0, style=bold, color=blue];
m18_98 -> m18_99  [key=0, style=solid];
m18_98 -> m18_100  [key=2, style=dotted];
m18_116 -> m18_114  [key=0, style=bold, color=blue];
m18_115 -> m18_116  [key=0, style=solid];
m18_115 -> m18_100  [key=2, style=dotted];
m18_119 -> m18_117  [key=0, style=bold, color=blue];
m18_118 -> m18_119  [key=0, style=solid];
m18_118 -> m18_120  [key=2, style=dotted];
m18_137 -> m18_135  [key=0, style=bold, color=blue];
m18_136 -> m18_137  [key=0, style=solid];
m18_150 -> m18_148  [key=0, style=bold, color=blue];
m18_149 -> m18_150  [key=0, style=solid];
m18_218 -> m18_216  [key=0, style=bold, color=blue];
m18_217 -> m18_218  [key=0, style=solid];
m18_217 -> m18_120  [key=2, style=dotted];
m18_235 -> m18_233  [key=0, style=bold, color=blue];
m18_234 -> m18_235  [key=0, style=solid];
m18_234 -> m18_100  [key=2, style=dotted];
m18_238 -> m18_236  [key=0, style=bold, color=blue];
m18_237 -> m18_238  [key=0, style=solid];
m18_237 -> m18_120  [key=2, style=dotted];
m18_266 -> m18_267  [key=0, style=solid];
m18_134 -> m18_132  [key=0, style=bold, color=blue];
m18_133 -> m18_134  [key=0, style=solid];
m18_147 -> m18_145  [key=0, style=bold, color=blue];
m18_146 -> m18_147  [key=0, style=solid];
m18_172 -> m18_170  [key=0, style=bold, color=blue];
m18_171 -> m18_172  [key=0, style=solid];
m18_171 -> m18_173  [key=2, style=dotted];
m18_185 -> m18_183  [key=0, style=bold, color=blue];
m18_184 -> m18_185  [key=0, style=solid];
m18_215 -> m18_213  [key=0, style=bold, color=blue];
m18_214 -> m18_215  [key=0, style=solid];
m18_249 -> m18_247  [key=0, style=bold, color=blue];
m18_248 -> m18_249  [key=0, style=solid];
m18_248 -> m18_173  [key=2, style=dotted];
m18_267 -> m18_265  [key=0, style=bold, color=blue];
m18_284 -> m18_282  [key=0, style=bold, color=blue];
m18_283 -> m18_284  [key=0, style=solid];
m18_300 -> m18_301  [key=0, style=solid];
m18_301 -> m18_299  [key=0, style=bold, color=blue];
m18_21 -> m18_22  [key=0, style=solid];
m18_19 -> m18_20  [key=0, style=solid];
m18_19 -> m18_21  [key=0, style=solid];
m18_19 -> m18_35  [key=2, style=dotted];
m18_151 -> m18_152  [key=0, style=solid];
m18_152 -> m18_153  [key=0, style=solid];
m18_152 -> m18_78  [key=2, style=dotted];
m18_153 -> m18_154  [key=0, style=solid];
m18_153 -> m18_79  [key=2, style=dotted];
m18_154 -> m18_155  [key=0, style=solid];
m18_154 -> m18_80  [key=2, style=dotted];
m18_154 -> m18_156  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_155 -> m18_151  [key=0, style=bold, color=blue];
m18_65 -> m18_66  [key=0, style=solid];
m18_66 -> m18_22  [key=2, style=dotted];
m18_66 -> m18_67  [key=0, style=solid];
m18_66 -> m18_69  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_67 -> m18_53  [key=2, style=dotted];
m18_67 -> m18_68  [key=0, style=solid];
m18_68 -> m18_65  [key=0, style=bold, color=blue];
m18_121 -> m18_122  [key=0, style=solid];
m18_122 -> m18_16  [key=2, style=dotted];
m18_122 -> m18_22  [key=2, style=dotted];
m18_122 -> m18_123  [key=0, style=solid];
m18_122 -> m18_128  [key=2, style=dotted];
m18_122 -> m18_129  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_122 -> m18_135  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_123 -> m18_16  [key=2, style=dotted];
m18_123 -> m18_124  [key=0, style=solid];
m18_123 -> m18_128  [key=2, style=dotted];
m18_123 -> m18_138  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_124 -> m18_16  [key=2, style=dotted];
m18_124 -> m18_22  [key=2, style=dotted];
m18_124 -> m18_125  [key=0, style=solid];
m18_124 -> m18_128  [key=2, style=dotted];
m18_124 -> m18_142  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_124 -> m18_148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_125 -> m18_126  [key=0, style=solid];
m18_125 -> m18_78  [key=2, style=dotted];
m18_126 -> m18_127  [key=0, style=solid];
m18_126 -> m18_79  [key=2, style=dotted];
m18_127 -> m18_121  [key=0, style=bold, color=blue];
m18_17 -> m18_18  [key=0, style=solid];
m18_17 -> m18_33  [key=2, style=dotted];
m18_17 -> m18_19  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m18_17 -> m18_31  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m18_20 -> m18_32  [key=0, style=solid];
m18_88 -> m18_89  [key=0, style=solid];
m18_89 -> m18_90  [key=0, style=solid];
m18_89 -> m18_78  [key=2, style=dotted];
m18_90 -> m18_91  [key=0, style=solid];
m18_90 -> m18_79  [key=2, style=dotted];
m18_91 -> m18_92  [key=0, style=solid];
m18_91 -> m18_80  [key=2, style=dotted];
m18_91 -> m18_94  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_92 -> m18_93  [key=0, style=solid];
m18_92 -> m18_80  [key=2, style=dotted];
m18_92 -> m18_97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_93 -> m18_88  [key=0, style=bold, color=blue];
m18_197 -> m18_198  [key=0, style=solid];
m18_198 -> m18_16  [key=2, style=dotted];
m18_198 -> m18_22  [key=2, style=dotted];
m18_198 -> m18_199  [key=0, style=solid];
m18_198 -> m18_204  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_199 -> m18_200  [key=0, style=solid];
m18_199 -> m18_78  [key=2, style=dotted];
m18_199 -> m18_208  [key=1, style=dashed, color=darkseagreen4, label=worker];
m18_200 -> m18_22  [key=2, style=dotted];
m18_200 -> m18_201  [key=0, style=solid];
m18_200 -> m18_207  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_201 -> m18_202  [key=0, style=solid];
m18_201 -> m18_80  [key=2, style=dotted];
m18_201 -> m18_210  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_202 -> m18_203  [key=0, style=solid];
m18_202 -> m18_80  [key=2, style=dotted];
m18_202 -> m18_216  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_203 -> m18_197  [key=0, style=bold, color=blue];
m18_304 -> m18_41  [key=0, style=bold, color=blue];
m18_305 -> m18_8  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_9  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_10  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_11  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_50  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_31  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_55  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_59  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_63  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_66  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_70  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_73  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_74  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_75  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_76  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_89  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_90  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_91  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_95  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_92  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_102  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_103  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_104  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_112  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_105  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_106  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_122  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_123  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_124  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_125  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_126  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_152  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_153  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_154  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_157  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_160  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_163  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_164  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_165  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_175  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_176  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_177  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_178  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_190  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_191  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_192  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_198  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_199  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_200  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_208  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_201  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_202  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_220  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_221  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_222  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_231  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_223  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_224  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_240  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_241  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_242  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_252  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_253  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_254  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_255  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_270  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_271  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_272  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_273  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_286  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_287  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_288  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_289  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_305 -> m18_302  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.WorkerFacts"];
m18_306 -> m18_112  [key=1, style=dashed, color=darkseagreen4, label=worker];
m18_307 -> m18_208  [key=1, style=dashed, color=darkseagreen4, label=worker];
m18_308 -> m18_231  [key=1, style=dashed, color=darkseagreen4, label=worker];
m18_309 -> m18_263  [key=1, style=dashed, color=darkseagreen4, label=exception];
m18_309 -> m18_266  [key=1, style=dashed, color=darkseagreen4, label=exception];
m19_0 -> m19_1  [key=0, style=solid];
m19_1 -> m19_2  [key=0, style=solid];
m19_2 -> m19_0  [key=0, style=bold, color=blue];
m19_3 -> m19_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Storage.Monitoring.SucceededJobDto"];
}
